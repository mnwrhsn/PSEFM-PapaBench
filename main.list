
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 b1 86 01 00 f5 86 01 00 f5 86 01 00     ... ............
      10:	f5 86 01 00 f5 86 01 00 f5 86 01 00 00 00 00 00     ................
	...
      2c:	99 59 00 00 f5 86 01 00 00 00 00 00 a5 5a 00 00     .Y...........Z..
      3c:	e1 5a 00 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     .Z..............
      4c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      5c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      6c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      7c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      8c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      9c:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      ac:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      bc:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      cc:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
      dc:	f5 86 01 00 f5 86 01 00 f5 86 01 00 f5 86 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018850 	.word	0x00018850
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2000b780 	.word	0x2000b780

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fb99 	bl	5b30 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fcda 	bl	3e04 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fcd5 	bl	3e04 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fcb5 	bl	3e1c <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fcf4 	bl	3edc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fc9e 	bl	3e6c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fc8e 	bl	3e6c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fc81 	bl	3e6c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fca2 	bl	3edc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fc99 	bl	3edc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fc18 	bl	3e1c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fce7 	bl	4fd8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc0c 	bl	3edc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc03 	bl	3edc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fb7e 	bl	3e1c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fab5 	bl	3dc4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 faa9 	bl	3dc4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 faa3 	bl	3dc4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fa9d 	bl	3dc4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb07 	bl	3edc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fa9e 	bl	3e1c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b084      	sub	sp, #16
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 fa55 	bl	3dc4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    291a:	f240 501c 	movw	r0, #1308	; 0x51c
    291e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2922:	f001 fa4f 	bl	3dc4 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2926:	2300      	movs	r3, #0
    2928:	607b      	str	r3, [r7, #4]
    292a:	e00f      	b.n	294c <prvInitialiseEventLists+0x44>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    292c:	687a      	ldr	r2, [r7, #4]
    292e:	4613      	mov	r3, r2
    2930:	009b      	lsls	r3, r3, #2
    2932:	4413      	add	r3, r2
    2934:	009b      	lsls	r3, r3, #2
    2936:	f240 5230 	movw	r2, #1328	; 0x530
    293a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    293e:	4413      	add	r3, r2
    2940:	4618      	mov	r0, r3
    2942:	f001 fa3f 	bl	3dc4 <vListInitialise>

    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	3301      	adds	r3, #1
    294a:	607b      	str	r3, [r7, #4]
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2b00      	cmp	r3, #0
    2950:	ddec      	ble.n	292c <prvInitialiseEventLists+0x24>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList.
    eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2952:	203c      	movs	r0, #60	; 0x3c
    2954:	f003 f8ec 	bl	5b30 <pvPortMalloc>
    2958:	60f8      	str	r0, [r7, #12]
    if( pxEndFlagEvent != NULL )
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	2b00      	cmp	r3, #0
    295e:	d01e      	beq.n	299e <prvInitialiseEventLists+0x96>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	f04f 32ff 	mov.w	r2, #4294967295
    2966:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	f04f 32ff 	mov.w	r2, #4294967295
    296e:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	f04f 32ff 	mov.w	r2, #4294967295
    2976:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	f04f 32ff 	mov.w	r2, #4294967295
    297e:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	3318      	adds	r3, #24
    2984:	68f8      	ldr	r0, [r7, #12]
    2986:	4619      	mov	r1, r3
    2988:	f000 f9b8 	bl	2cfc <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	3318      	adds	r3, #24
    2990:	f240 5008 	movw	r0, #1288	; 0x508
    2994:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2998:	4619      	mov	r1, r3
    299a:	f001 fa3f 	bl	3e1c <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList
    eveECB * pxEndFlagEvent1 = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    299e:	203c      	movs	r0, #60	; 0x3c
    29a0:	f003 f8c6 	bl	5b30 <pvPortMalloc>
    29a4:	60b8      	str	r0, [r7, #8]
    if( pxEndFlagEvent1 != NULL )
    29a6:	68bb      	ldr	r3, [r7, #8]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d01e      	beq.n	29ea <prvInitialiseEventLists+0xe2>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent1->xTimeStamp.xDeadline= portMAX_DELAY;
    29ac:	68bb      	ldr	r3, [r7, #8]
    29ae:	f04f 32ff 	mov.w	r2, #4294967295
    29b2:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent1->xTimeStamp.xTime = portMAX_DELAY;
    29b4:	68bb      	ldr	r3, [r7, #8]
    29b6:	f04f 32ff 	mov.w	r2, #4294967295
    29ba:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent1->xTimeStamp.xMicroStep = portMAX_DELAY;
    29bc:	68bb      	ldr	r3, [r7, #8]
    29be:	f04f 32ff 	mov.w	r2, #4294967295
    29c2:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent1->xTimeStamp.xLevel = portMAX_DELAY;
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	f04f 32ff 	mov.w	r2, #4294967295
    29ca:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent1, (xListItem *) & pxEndFlagEvent1->xEventListItem );
    29cc:	68bb      	ldr	r3, [r7, #8]
    29ce:	3318      	adds	r3, #24
    29d0:	68b8      	ldr	r0, [r7, #8]
    29d2:	4619      	mov	r1, r3
    29d4:	f000 f992 	bl	2cfc <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent1->xEventListItem); 
    29d8:	68bb      	ldr	r3, [r7, #8]
    29da:	3318      	adds	r3, #24
    29dc:	f240 501c 	movw	r0, #1308	; 0x51c
    29e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29e4:	4619      	mov	r1, r3
    29e6:	f001 fa19 	bl	3e1c <vListInsertEnd>
    }
}
    29ea:	3710      	adds	r7, #16
    29ec:	46bd      	mov	sp, r7
    29ee:	bd80      	pop	{r7, pc}

000029f0 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    29f0:	b490      	push	{r4, r7}
    29f2:	b084      	sub	sp, #16
    29f4:	af00      	add	r7, sp, #0
    29f6:	463c      	mov	r4, r7
    29f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    29fc:	687a      	ldr	r2, [r7, #4]
    29fe:	69fb      	ldr	r3, [r7, #28]
    2a00:	429a      	cmp	r2, r3
    2a02:	d201      	bcs.n	2a08 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2a04:	2301      	movs	r3, #1
    2a06:	e014      	b.n	2a32 <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d10f      	bne.n	2a30 <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2a10:	683a      	ldr	r2, [r7, #0]
    2a12:	69bb      	ldr	r3, [r7, #24]
    2a14:	429a      	cmp	r2, r3
    2a16:	d201      	bcs.n	2a1c <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2a18:	2301      	movs	r3, #1
    2a1a:	e00a      	b.n	2a32 <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	69bb      	ldr	r3, [r7, #24]
    2a20:	429a      	cmp	r2, r3
    2a22:	d105      	bne.n	2a30 <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a24:	68fa      	ldr	r2, [r7, #12]
    2a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a28:	429a      	cmp	r2, r3
    2a2a:	da01      	bge.n	2a30 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2a2c:	2301      	movs	r3, #1
    2a2e:	e000      	b.n	2a32 <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2a30:	2300      	movs	r3, #0
}
    2a32:	4618      	mov	r0, r3
    2a34:	3710      	adds	r7, #16
    2a36:	46bd      	mov	sp, r7
    2a38:	bc90      	pop	{r4, r7}
    2a3a:	4770      	bx	lr

00002a3c <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2a3c:	b490      	push	{r4, r7}
    2a3e:	b084      	sub	sp, #16
    2a40:	af00      	add	r7, sp, #0
    2a42:	463c      	mov	r4, r7
    2a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2a48:	683a      	ldr	r2, [r7, #0]
    2a4a:	69bb      	ldr	r3, [r7, #24]
    2a4c:	429a      	cmp	r2, r3
    2a4e:	d201      	bcs.n	2a54 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2a50:	2301      	movs	r3, #1
    2a52:	e014      	b.n	2a7e <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	69bb      	ldr	r3, [r7, #24]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d10f      	bne.n	2a7c <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2a5c:	687a      	ldr	r2, [r7, #4]
    2a5e:	69fb      	ldr	r3, [r7, #28]
    2a60:	429a      	cmp	r2, r3
    2a62:	d201      	bcs.n	2a68 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2a64:	2301      	movs	r3, #1
    2a66:	e00a      	b.n	2a7e <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d105      	bne.n	2a7c <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a70:	68fa      	ldr	r2, [r7, #12]
    2a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a74:	429a      	cmp	r2, r3
    2a76:	da01      	bge.n	2a7c <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2a78:	2301      	movs	r3, #1
    2a7a:	e000      	b.n	2a7e <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2a7c:	2300      	movs	r3, #0
}
    2a7e:	4618      	mov	r0, r3
    2a80:	3710      	adds	r7, #16
    2a82:	46bd      	mov	sp, r7
    2a84:	bc90      	pop	{r4, r7}
    2a86:	4770      	bx	lr

00002a88 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2a88:	b480      	push	{r7}
    2a8a:	b083      	sub	sp, #12
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	681b      	ldr	r3, [r3, #0]
}
    2a94:	4618      	mov	r0, r3
    2a96:	370c      	adds	r7, #12
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2aa0:	b480      	push	{r7}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	685b      	ldr	r3, [r3, #4]
}
    2aac:	4618      	mov	r0, r3
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr

00002ab8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2ab8:	b490      	push	{r4, r7}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2ac2:	687a      	ldr	r2, [r7, #4]
    2ac4:	683b      	ldr	r3, [r7, #0]
    2ac6:	4614      	mov	r4, r2
    2ac8:	3308      	adds	r3, #8
    2aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2ad0:	6878      	ldr	r0, [r7, #4]
    2ad2:	3708      	adds	r7, #8
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bc90      	pop	{r4, r7}
    2ad8:	4770      	bx	lr
    2ada:	bf00      	nop

00002adc <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2adc:	b490      	push	{r4, r7}
    2ade:	b082      	sub	sp, #8
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
    2ae4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ae6:	687a      	ldr	r2, [r7, #4]
    2ae8:	683b      	ldr	r3, [r7, #0]
    2aea:	4614      	mov	r4, r2
    2aec:	332c      	adds	r3, #44	; 0x2c
    2aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2af4:	6878      	ldr	r0, [r7, #4]
    2af6:	3708      	adds	r7, #8
    2af8:	46bd      	mov	sp, r7
    2afa:	bc90      	pop	{r4, r7}
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop

00002b00 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2b00:	b480      	push	{r7}
    2b02:	b085      	sub	sp, #20
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2b0c:	68fb      	ldr	r3, [r7, #12]
    2b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b10:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2b12:	68fb      	ldr	r3, [r7, #12]
    2b14:	68ba      	ldr	r2, [r7, #8]
    2b16:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d103      	bne.n	2b28 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	68ba      	ldr	r2, [r7, #8]
    2b24:	60da      	str	r2, [r3, #12]
    2b26:	e003      	b.n	2b30 <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2b30:	68fb      	ldr	r3, [r7, #12]
    2b32:	2200      	movs	r2, #0
    2b34:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2b36:	f240 5344 	movw	r3, #1348	; 0x544
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	461a      	mov	r2, r3
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2b46:	f240 5344 	movw	r3, #1348	; 0x544
    2b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b4e:	681b      	ldr	r3, [r3, #0]
    2b50:	1c5a      	adds	r2, r3, #1
    2b52:	f240 5344 	movw	r3, #1348	; 0x544
    2b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b5a:	601a      	str	r2, [r3, #0]
}
    2b5c:	3714      	adds	r7, #20
    2b5e:	46bd      	mov	sp, r7
    2b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop

00002b68 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2b68:	b084      	sub	sp, #16
    2b6a:	b490      	push	{r4, r7}
    2b6c:	b082      	sub	sp, #8
    2b6e:	af00      	add	r7, sp, #0
    2b70:	6078      	str	r0, [r7, #4]
    2b72:	f107 0014 	add.w	r0, r7, #20
    2b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2b80:	f107 0314 	add.w	r3, r7, #20
    2b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b8a:	3708      	adds	r7, #8
    2b8c:	46bd      	mov	sp, r7
    2b8e:	bc90      	pop	{r4, r7}
    2b90:	b004      	add	sp, #16
    2b92:	4770      	bx	lr

00002b94 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2b94:	b480      	push	{r7}
    2b96:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2b98:	f240 5330 	movw	r3, #1328	; 0x530
    2b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2ba0:	4618      	mov	r0, r3
    2ba2:	46bd      	mov	sp, r7
    2ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop

00002bac <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2bac:	b590      	push	{r4, r7, lr}
    2bae:	b091      	sub	sp, #68	; 0x44
    2bb0:	af04      	add	r7, sp, #16
    2bb2:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2bb4:	f240 5308 	movw	r3, #1288	; 0x508
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	68db      	ldr	r3, [r3, #12]
    2bc2:	f107 0208 	add.w	r2, r7, #8
    2bc6:	4610      	mov	r0, r2
    2bc8:	4619      	mov	r1, r3
    2bca:	f7ff ff75 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
    2bd4:	d103      	bne.n	2bde <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bd8:	691b      	ldr	r3, [r3, #16]
    2bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bdc:	e021      	b.n	2c22 <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2bde:	f002 ff2f 	bl	5a40 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be4:	3308      	adds	r3, #8
    2be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2be8:	e002      	b.n	2bf0 <prvEventListGenericInsert1+0x44>
    2bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bec:	685b      	ldr	r3, [r3, #4]
    2bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bf2:	685b      	ldr	r3, [r3, #4]
    2bf4:	68db      	ldr	r3, [r3, #12]
    2bf6:	f107 0218 	add.w	r2, r7, #24
    2bfa:	4610      	mov	r0, r2
    2bfc:	4619      	mov	r1, r3
    2bfe:	f7ff ff5b 	bl	2ab8 <xEventGetxTimeStamp>
    2c02:	466c      	mov	r4, sp
    2c04:	f107 0308 	add.w	r3, r7, #8
    2c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c0e:	f107 0318 	add.w	r3, r7, #24
    2c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c14:	f7ff feec 	bl	29f0 <xCompareFunction1>
    2c18:	4603      	mov	r3, r0
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1e5      	bne.n	2bea <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2c1e:	f002 ff25 	bl	5a6c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c24:	685a      	ldr	r2, [r3, #4]
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	685b      	ldr	r3, [r3, #4]
    2c2e:	687a      	ldr	r2, [r7, #4]
    2c30:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2c36:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c42:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c46:	681b      	ldr	r3, [r3, #0]
    2c48:	1c5a      	adds	r2, r3, #1
    2c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c4c:	601a      	str	r2, [r3, #0]
}
    2c4e:	3734      	adds	r7, #52	; 0x34
    2c50:	46bd      	mov	sp, r7
    2c52:	bd90      	pop	{r4, r7, pc}

00002c54 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2c54:	b590      	push	{r4, r7, lr}
    2c56:	b091      	sub	sp, #68	; 0x44
    2c58:	af04      	add	r7, sp, #16
    2c5a:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2c5c:	f240 531c 	movw	r3, #1308	; 0x51c
    2c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c64:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	68db      	ldr	r3, [r3, #12]
    2c6a:	f107 0208 	add.w	r2, r7, #8
    2c6e:	4610      	mov	r0, r2
    2c70:	4619      	mov	r1, r3
    2c72:	f7ff ff21 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c7c:	d103      	bne.n	2c86 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c80:	691b      	ldr	r3, [r3, #16]
    2c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c84:	e021      	b.n	2cca <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c86:	f002 fedb 	bl	5a40 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8c:	3308      	adds	r3, #8
    2c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c90:	e002      	b.n	2c98 <prvEventListGenericInsert2+0x44>
    2c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c9a:	685b      	ldr	r3, [r3, #4]
    2c9c:	68db      	ldr	r3, [r3, #12]
    2c9e:	f107 0218 	add.w	r2, r7, #24
    2ca2:	4610      	mov	r0, r2
    2ca4:	4619      	mov	r1, r3
    2ca6:	f7ff ff07 	bl	2ab8 <xEventGetxTimeStamp>
    2caa:	466c      	mov	r4, sp
    2cac:	f107 0308 	add.w	r3, r7, #8
    2cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cb6:	f107 0318 	add.w	r3, r7, #24
    2cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cbc:	f7ff febe 	bl	2a3c <xCompareFunction2>
    2cc0:	4603      	mov	r3, r0
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d1e5      	bne.n	2c92 <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cc6:	f002 fed1 	bl	5a6c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ccc:	685a      	ldr	r2, [r3, #4]
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	685b      	ldr	r3, [r3, #4]
    2cd6:	687a      	ldr	r2, [r7, #4]
    2cd8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cde:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	1c5a      	adds	r2, r3, #1
    2cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cf4:	601a      	str	r2, [r3, #0]
}
    2cf6:	3734      	adds	r7, #52	; 0x34
    2cf8:	46bd      	mov	sp, r7
    2cfa:	bd90      	pop	{r4, r7, pc}

00002cfc <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2cfc:	b480      	push	{r7}
    2cfe:	b083      	sub	sp, #12
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
    2d04:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2d06:	683b      	ldr	r3, [r7, #0]
    2d08:	687a      	ldr	r2, [r7, #4]
    2d0a:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2d0c:	370c      	adds	r7, #12
    2d0e:	46bd      	mov	sp, r7
    2d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d14:	4770      	bx	lr
    2d16:	bf00      	nop

00002d18 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2d18:	b084      	sub	sp, #16
    2d1a:	b580      	push	{r7, lr}
    2d1c:	b086      	sub	sp, #24
    2d1e:	af02      	add	r7, sp, #8
    2d20:	6078      	str	r0, [r7, #4]
    2d22:	f107 001c 	add.w	r0, r7, #28
    2d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2d2a:	2300      	movs	r3, #0
    2d2c:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d2e:	f002 fe87 	bl	5a40 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2d32:	f240 0328 	movw	r3, #40	; 0x28
    2d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	2b01      	cmp	r3, #1
    2d3e:	d107      	bne.n	2d50 <vEventGenericCreate+0x38>
    {
        IS_FIRST_EVENT = 0;
    2d40:	f240 0328 	movw	r3, #40	; 0x28
    2d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d48:	2200      	movs	r2, #0
    2d4a:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2d4c:	f7ff fddc 	bl	2908 <prvInitialiseEventLists>
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d50:	f002 fd0e 	bl	5770 <xTaskGetCurrentTaskHandle>
    2d54:	60b8      	str	r0, [r7, #8]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2d56:	203c      	movs	r0, #60	; 0x3c
    2d58:	f002 feea 	bl	5b30 <pvPortMalloc>
    2d5c:	60f8      	str	r0, [r7, #12]
    if( pxNewEvent == NULL )
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d105      	bne.n	2d70 <vEventGenericCreate+0x58>
    {
        vPrintString("malloc for event stack failed\n\r");
    2d64:	f248 60f8 	movw	r0, #34552	; 0x86f8
    2d68:	f2c0 0001 	movt	r0, #1
    2d6c:	f014 f9f2 	bl	17154 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d01b      	beq.n	2dae <vEventGenericCreate+0x96>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2d76:	68fb      	ldr	r3, [r7, #12]
    2d78:	68ba      	ldr	r2, [r7, #8]
    2d7a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	687a      	ldr	r2, [r7, #4]
    2d80:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d84:	9300      	str	r3, [sp, #0]
    2d86:	f107 031c 	add.w	r3, r7, #28
    2d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2d8c:	68f8      	ldr	r0, [r7, #12]
    2d8e:	f7ff feeb 	bl	2b68 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2d92:	68f8      	ldr	r0, [r7, #12]
    2d94:	f7ff feb4 	bl	2b00 <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	3318      	adds	r3, #24
    2d9c:	68f8      	ldr	r0, [r7, #12]
    2d9e:	4619      	mov	r1, r3
    2da0:	f7ff ffac 	bl	2cfc <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( (xListItem *) &(pxNewEvent->xEventListItem));
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	3318      	adds	r3, #24
    2da8:	4618      	mov	r0, r3
    2daa:	f7ff feff 	bl	2bac <prvEventListGenericInsert1>
    
    }
    taskEXIT_CRITICAL();
    2dae:	f002 fe5d 	bl	5a6c <vPortExitCritical>

}
    2db2:	3710      	adds	r7, #16
    2db4:	46bd      	mov	sp, r7
    2db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2dba:	b004      	add	sp, #16
    2dbc:	4770      	bx	lr
    2dbe:	bf00      	nop

00002dc0 <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b088      	sub	sp, #32
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2dca:	f240 5308 	movw	r3, #1288	; 0x508
    2dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dd2:	681b      	ldr	r3, [r3, #0]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d108      	bne.n	2dea <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	2200      	movs	r2, #0
    2ddc:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2dde:	683b      	ldr	r3, [r7, #0]
    2de0:	2200      	movs	r2, #0
    2de2:	601a      	str	r2, [r3, #0]
        return -1;
    2de4:	f04f 33ff 	mov.w	r3, #4294967295
    2de8:	e055      	b.n	2e96 <xEventListGenericTransit+0xd6>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2dea:	e020      	b.n	2e2e <xEventListGenericTransit+0x6e>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2dec:	f240 5308 	movw	r3, #1288	; 0x508
    2df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2df4:	68db      	ldr	r3, [r3, #12]
    2df6:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2df8:	69fb      	ldr	r3, [r7, #28]
    2dfa:	68db      	ldr	r3, [r3, #12]
    2dfc:	f107 0208 	add.w	r2, r7, #8
    2e00:	4610      	mov	r0, r2
    2e02:	4619      	mov	r1, r3
    2e04:	f7ff fe58 	bl	2ab8 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2e08:	f002 f8e6 	bl	4fd8 <xTaskGetTickCount>
    2e0c:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2e0e:	68fa      	ldr	r2, [r7, #12]
    2e10:	69bb      	ldr	r3, [r7, #24]
    2e12:	429a      	cmp	r2, r3
    2e14:	d80a      	bhi.n	2e2c <xEventListGenericTransit+0x6c>
        {
            taskENTER_CRITICAL();
    2e16:	f002 fe13 	bl	5a40 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2e1a:	69f8      	ldr	r0, [r7, #28]
    2e1c:	f001 f85e 	bl	3edc <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2e20:	69f8      	ldr	r0, [r7, #28]
    2e22:	f7ff ff17 	bl	2c54 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2e26:	f002 fe21 	bl	5a6c <vPortExitCritical>
    2e2a:	e000      	b.n	2e2e <xEventListGenericTransit+0x6e>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2e2c:	e006      	b.n	2e3c <xEventListGenericTransit+0x7c>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e2e:	f240 5308 	movw	r3, #1288	; 0x508
    2e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	2b01      	cmp	r3, #1
    2e3a:	d8d7      	bhi.n	2dec <xEventListGenericTransit+0x2c>
        }

    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2e3c:	f240 531c 	movw	r3, #1308	; 0x51c
    2e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	2b01      	cmp	r3, #1
    2e48:	d107      	bne.n	2e5a <xEventListGenericTransit+0x9a>
    {
        *pxCurrentReadyList = NULL;
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	2200      	movs	r2, #0
    2e4e:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	2200      	movs	r2, #0
    2e54:	601a      	str	r2, [r3, #0]
        return 0;
    2e56:	2300      	movs	r3, #0
    2e58:	e01d      	b.n	2e96 <xEventListGenericTransit+0xd6>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2e5a:	f7ff fe9b 	bl	2b94 <pxGetReadyList>
    2e5e:	4602      	mov	r2, r0
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2e64:	f240 531c 	movw	r3, #1308	; 0x51c
    2e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e6c:	68da      	ldr	r2, [r3, #12]
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2e72:	f002 fde5 	bl	5a40 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	4618      	mov	r0, r3
    2e7c:	f001 f82e 	bl	3edc <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	681a      	ldr	r2, [r3, #0]
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	4610      	mov	r0, r2
    2e8a:	4619      	mov	r1, r3
    2e8c:	f000 ffc6 	bl	3e1c <vListInsertEnd>
        taskEXIT_CRITICAL();
    2e90:	f002 fdec 	bl	5a6c <vPortExitCritical>
    }

    return 1;
    2e94:	2301      	movs	r3, #1
}
    2e96:	4618      	mov	r0, r3
    2e98:	3720      	adds	r7, #32
    2e9a:	46bd      	mov	sp, r7
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	bf00      	nop

00002ea0 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	b088      	sub	sp, #32
    2ea4:	af00      	add	r7, sp, #0
    2ea6:	60f8      	str	r0, [r7, #12]
    2ea8:	60b9      	str	r1, [r7, #8]
    2eaa:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d103      	bne.n	2ec0 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2eb8:	68fb      	ldr	r3, [r7, #12]
    2eba:	2200      	movs	r2, #0
    2ebc:	601a      	str	r2, [r3, #0]
        return;
    2ebe:	e04d      	b.n	2f5c <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2ec0:	69bb      	ldr	r3, [r7, #24]
    2ec2:	68db      	ldr	r3, [r3, #12]
    2ec4:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2ec6:	f002 fdbb 	bl	5a40 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2eca:	f002 fc51 	bl	5770 <xTaskGetCurrentTaskHandle>
    2ece:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2ed0:	e01e      	b.n	2f10 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2ed2:	69fb      	ldr	r3, [r7, #28]
    2ed4:	68db      	ldr	r3, [r3, #12]
    2ed6:	4618      	mov	r0, r3
    2ed8:	f7ff fdd6 	bl	2a88 <xEventGetpxSource>
    2edc:	4602      	mov	r2, r0
    2ede:	68bb      	ldr	r3, [r7, #8]
    2ee0:	429a      	cmp	r2, r3
    2ee2:	d112      	bne.n	2f0a <vEventGenericReceive+0x6a>
    2ee4:	69fb      	ldr	r3, [r7, #28]
    2ee6:	68db      	ldr	r3, [r3, #12]
    2ee8:	4618      	mov	r0, r3
    2eea:	f7ff fdd9 	bl	2aa0 <xEventGetpxDestination>
    2eee:	4602      	mov	r2, r0
    2ef0:	697b      	ldr	r3, [r7, #20]
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d109      	bne.n	2f0a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2ef6:	69fb      	ldr	r3, [r7, #28]
    2ef8:	68da      	ldr	r2, [r3, #12]
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2efe:	69f8      	ldr	r0, [r7, #28]
    2f00:	f000 ffec 	bl	3edc <vListRemove>
            taskEXIT_CRITICAL();
    2f04:	f002 fdb2 	bl	5a6c <vPortExitCritical>
            return;
    2f08:	e028      	b.n	2f5c <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f0a:	69fb      	ldr	r3, [r7, #28]
    2f0c:	685b      	ldr	r3, [r3, #4]
    2f0e:	61fb      	str	r3, [r7, #28]
    2f10:	69bb      	ldr	r3, [r7, #24]
    2f12:	691a      	ldr	r2, [r3, #16]
    2f14:	69fb      	ldr	r3, [r7, #28]
    2f16:	429a      	cmp	r2, r3
    2f18:	d1db      	bne.n	2ed2 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f1a:	69fb      	ldr	r3, [r7, #28]
    2f1c:	68db      	ldr	r3, [r3, #12]
    2f1e:	4618      	mov	r0, r3
    2f20:	f7ff fdb2 	bl	2a88 <xEventGetpxSource>
    2f24:	4602      	mov	r2, r0
    2f26:	68bb      	ldr	r3, [r7, #8]
    2f28:	429a      	cmp	r2, r3
    2f2a:	d112      	bne.n	2f52 <vEventGenericReceive+0xb2>
    2f2c:	69fb      	ldr	r3, [r7, #28]
    2f2e:	68db      	ldr	r3, [r3, #12]
    2f30:	4618      	mov	r0, r3
    2f32:	f7ff fdb5 	bl	2aa0 <xEventGetpxDestination>
    2f36:	4602      	mov	r2, r0
    2f38:	697b      	ldr	r3, [r7, #20]
    2f3a:	429a      	cmp	r2, r3
    2f3c:	d109      	bne.n	2f52 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2f3e:	69fb      	ldr	r3, [r7, #28]
    2f40:	68da      	ldr	r2, [r3, #12]
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2f46:	69f8      	ldr	r0, [r7, #28]
    2f48:	f000 ffc8 	bl	3edc <vListRemove>
        taskEXIT_CRITICAL();
    2f4c:	f002 fd8e 	bl	5a6c <vPortExitCritical>
        return;
    2f50:	e004      	b.n	2f5c <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	2200      	movs	r2, #0
    2f56:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2f58:	f002 fd88 	bl	5a6c <vPortExitCritical>
}
    2f5c:	3720      	adds	r7, #32
    2f5e:	46bd      	mov	sp, r7
    2f60:	bd80      	pop	{r7, pc}
    2f62:	bf00      	nop

00002f64 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b082      	sub	sp, #8
    2f68:	af00      	add	r7, sp, #0
    2f6a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2f6c:	f002 fd68 	bl	5a40 <vPortEnterCritical>

    vPortFree( xEvent );
    2f70:	6878      	ldr	r0, [r7, #4]
    2f72:	f002 fea1 	bl	5cb8 <vPortFree>

    taskEXIT_CRITICAL();
    2f76:	f002 fd79 	bl	5a6c <vPortExitCritical>
}
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd80      	pop	{r7, pc}

00002f80 <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f86:	2300      	movs	r3, #0
    2f88:	607b      	str	r3, [r7, #4]
    2f8a:	e033      	b.n	2ff4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2f8c:	2001      	movs	r0, #1
    2f8e:	2100      	movs	r1, #0
    2f90:	2203      	movs	r2, #3
    2f92:	f001 f819 	bl	3fc8 <xQueueGenericCreate>
    2f96:	4601      	mov	r1, r0
    2f98:	f640 3350 	movw	r3, #2896	; 0xb50
    2f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fa0:	687a      	ldr	r2, [r7, #4]
    2fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2fa6:	f640 3350 	movw	r3, #2896	; 0xb50
    2faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fae:	687a      	ldr	r2, [r7, #4]
    2fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d00c      	beq.n	2fd2 <vSemaphoreInitialise+0x52>
    2fb8:	f640 3350 	movw	r3, #2896	; 0xb50
    2fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fc6:	4618      	mov	r0, r3
    2fc8:	2100      	movs	r1, #0
    2fca:	2200      	movs	r2, #0
    2fcc:	2300      	movs	r3, #0
    2fce:	f001 f889 	bl	40e4 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2fd2:	f640 3350 	movw	r3, #2896	; 0xb50
    2fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fda:	687a      	ldr	r2, [r7, #4]
    2fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fe0:	4618      	mov	r0, r3
    2fe2:	2100      	movs	r1, #0
    2fe4:	f04f 32ff 	mov.w	r2, #4294967295
    2fe8:	2300      	movs	r3, #0
    2fea:	f001 f941 	bl	4270 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	3301      	adds	r3, #1
    2ff2:	607b      	str	r3, [r7, #4]
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2b22      	cmp	r3, #34	; 0x22
    2ff8:	ddc8      	ble.n	2f8c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2ffa:	3708      	adds	r7, #8
    2ffc:	46bd      	mov	sp, r7
    2ffe:	bd80      	pop	{r7, pc}

00003000 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    3000:	b480      	push	{r7}
    3002:	b085      	sub	sp, #20
    3004:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3006:	2300      	movs	r3, #0
    3008:	60fb      	str	r3, [r7, #12]
    300a:	e073      	b.n	30f4 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    300c:	f240 534c 	movw	r3, #1356	; 0x54c
    3010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3014:	68fa      	ldr	r2, [r7, #12]
    3016:	212c      	movs	r1, #44	; 0x2c
    3018:	fb01 f202 	mul.w	r2, r1, r2
    301c:	4413      	add	r3, r2
    301e:	68fa      	ldr	r2, [r7, #12]
    3020:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    3022:	f240 534c 	movw	r3, #1356	; 0x54c
    3026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    302a:	68fa      	ldr	r2, [r7, #12]
    302c:	212c      	movs	r1, #44	; 0x2c
    302e:	fb01 f202 	mul.w	r2, r1, r2
    3032:	4413      	add	r3, r2
    3034:	3304      	adds	r3, #4
    3036:	2200      	movs	r2, #0
    3038:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    303a:	f240 534c 	movw	r3, #1356	; 0x54c
    303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3042:	68fa      	ldr	r2, [r7, #12]
    3044:	212c      	movs	r1, #44	; 0x2c
    3046:	fb01 f202 	mul.w	r2, r1, r2
    304a:	4413      	add	r3, r2
    304c:	3308      	adds	r3, #8
    304e:	2200      	movs	r2, #0
    3050:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    3052:	f240 0394 	movw	r3, #148	; 0x94
    3056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305a:	68fa      	ldr	r2, [r7, #12]
    305c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3060:	f240 534c 	movw	r3, #1356	; 0x54c
    3064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3068:	68f9      	ldr	r1, [r7, #12]
    306a:	202c      	movs	r0, #44	; 0x2c
    306c:	fb00 f101 	mul.w	r1, r0, r1
    3070:	440b      	add	r3, r1
    3072:	331c      	adds	r3, #28
    3074:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    3076:	f240 3354 	movw	r3, #852	; 0x354
    307a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307e:	68fa      	ldr	r2, [r7, #12]
    3080:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3084:	f240 534c 	movw	r3, #1356	; 0x54c
    3088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308c:	68f9      	ldr	r1, [r7, #12]
    308e:	202c      	movs	r0, #44	; 0x2c
    3090:	fb00 f101 	mul.w	r1, r0, r1
    3094:	440b      	add	r3, r1
    3096:	3320      	adds	r3, #32
    3098:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    309a:	f240 1320 	movw	r3, #288	; 0x120
    309e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a2:	68fa      	ldr	r2, [r7, #12]
    30a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30a8:	f240 534c 	movw	r3, #1356	; 0x54c
    30ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30b0:	68f9      	ldr	r1, [r7, #12]
    30b2:	202c      	movs	r0, #44	; 0x2c
    30b4:	fb00 f101 	mul.w	r1, r0, r1
    30b8:	440b      	add	r3, r1
    30ba:	3328      	adds	r3, #40	; 0x28
    30bc:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    30be:	f240 1320 	movw	r3, #288	; 0x120
    30c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30c6:	68fa      	ldr	r2, [r7, #12]
    30c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30cc:	f240 032c 	movw	r3, #44	; 0x2c
    30d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30d8:	f240 534c 	movw	r3, #1356	; 0x54c
    30dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e0:	68f9      	ldr	r1, [r7, #12]
    30e2:	202c      	movs	r0, #44	; 0x2c
    30e4:	fb00 f101 	mul.w	r1, r0, r1
    30e8:	440b      	add	r3, r1
    30ea:	3324      	adds	r3, #36	; 0x24
    30ec:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30ee:	68fb      	ldr	r3, [r7, #12]
    30f0:	3301      	adds	r3, #1
    30f2:	60fb      	str	r3, [r7, #12]
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	2b22      	cmp	r3, #34	; 0x22
    30f8:	dd88      	ble.n	300c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    30fa:	2300      	movs	r3, #0
    30fc:	60fb      	str	r3, [r7, #12]
    30fe:	e080      	b.n	3202 <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3100:	f240 12ac 	movw	r2, #428	; 0x1ac
    3104:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3108:	68f9      	ldr	r1, [r7, #12]
    310a:	460b      	mov	r3, r1
    310c:	005b      	lsls	r3, r3, #1
    310e:	440b      	add	r3, r1
    3110:	009b      	lsls	r3, r3, #2
    3112:	4413      	add	r3, r2
    3114:	3304      	adds	r3, #4
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    311a:	f240 12ac 	movw	r2, #428	; 0x1ac
    311e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3122:	68f9      	ldr	r1, [r7, #12]
    3124:	460b      	mov	r3, r1
    3126:	005b      	lsls	r3, r3, #1
    3128:	440b      	add	r3, r1
    312a:	009b      	lsls	r3, r3, #2
    312c:	4413      	add	r3, r2
    312e:	3308      	adds	r3, #8
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3134:	f240 534c 	movw	r3, #1356	; 0x54c
    3138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    313c:	68ba      	ldr	r2, [r7, #8]
    313e:	212c      	movs	r1, #44	; 0x2c
    3140:	fb01 f202 	mul.w	r2, r1, r2
    3144:	4413      	add	r3, r2
    3146:	3308      	adds	r3, #8
    3148:	6818      	ldr	r0, [r3, #0]
    314a:	f240 524c 	movw	r2, #1356	; 0x54c
    314e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3152:	68b9      	ldr	r1, [r7, #8]
    3154:	460b      	mov	r3, r1
    3156:	009b      	lsls	r3, r3, #2
    3158:	440b      	add	r3, r1
    315a:	005b      	lsls	r3, r3, #1
    315c:	440b      	add	r3, r1
    315e:	4403      	add	r3, r0
    3160:	3304      	adds	r3, #4
    3162:	009b      	lsls	r3, r3, #2
    3164:	4413      	add	r3, r2
    3166:	687a      	ldr	r2, [r7, #4]
    3168:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    316a:	f240 534c 	movw	r3, #1356	; 0x54c
    316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3172:	68ba      	ldr	r2, [r7, #8]
    3174:	212c      	movs	r1, #44	; 0x2c
    3176:	fb01 f202 	mul.w	r2, r1, r2
    317a:	4413      	add	r3, r2
    317c:	3308      	adds	r3, #8
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	1c5a      	adds	r2, r3, #1
    3182:	f240 534c 	movw	r3, #1356	; 0x54c
    3186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318a:	68b9      	ldr	r1, [r7, #8]
    318c:	202c      	movs	r0, #44	; 0x2c
    318e:	fb00 f101 	mul.w	r1, r0, r1
    3192:	440b      	add	r3, r1
    3194:	3308      	adds	r3, #8
    3196:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    3198:	f240 534c 	movw	r3, #1356	; 0x54c
    319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a0:	687a      	ldr	r2, [r7, #4]
    31a2:	212c      	movs	r1, #44	; 0x2c
    31a4:	fb01 f202 	mul.w	r2, r1, r2
    31a8:	4413      	add	r3, r2
    31aa:	3304      	adds	r3, #4
    31ac:	6818      	ldr	r0, [r3, #0]
    31ae:	f240 524c 	movw	r2, #1356	; 0x54c
    31b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31b6:	6879      	ldr	r1, [r7, #4]
    31b8:	460b      	mov	r3, r1
    31ba:	009b      	lsls	r3, r3, #2
    31bc:	440b      	add	r3, r1
    31be:	005b      	lsls	r3, r3, #1
    31c0:	440b      	add	r3, r1
    31c2:	4403      	add	r3, r0
    31c4:	3302      	adds	r3, #2
    31c6:	009b      	lsls	r3, r3, #2
    31c8:	4413      	add	r3, r2
    31ca:	68ba      	ldr	r2, [r7, #8]
    31cc:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    31ce:	f240 534c 	movw	r3, #1356	; 0x54c
    31d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d6:	687a      	ldr	r2, [r7, #4]
    31d8:	212c      	movs	r1, #44	; 0x2c
    31da:	fb01 f202 	mul.w	r2, r1, r2
    31de:	4413      	add	r3, r2
    31e0:	3304      	adds	r3, #4
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	1c5a      	adds	r2, r3, #1
    31e6:	f240 534c 	movw	r3, #1356	; 0x54c
    31ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ee:	6879      	ldr	r1, [r7, #4]
    31f0:	202c      	movs	r0, #44	; 0x2c
    31f2:	fb00 f101 	mul.w	r1, r0, r1
    31f6:	440b      	add	r3, r1
    31f8:	3304      	adds	r3, #4
    31fa:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    31fc:	68fb      	ldr	r3, [r7, #12]
    31fe:	3301      	adds	r3, #1
    3200:	60fb      	str	r3, [r7, #12]
    3202:	f240 13ac 	movw	r3, #428	; 0x1ac
    3206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320a:	681a      	ldr	r2, [r3, #0]
    320c:	68fb      	ldr	r3, [r7, #12]
    320e:	429a      	cmp	r2, r3
    3210:	f73f af76 	bgt.w	3100 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3214:	3714      	adds	r7, #20
    3216:	46bd      	mov	sp, r7
    3218:	f85d 7b04 	ldr.w	r7, [sp], #4
    321c:	4770      	bx	lr
    321e:	bf00      	nop

00003220 <vTaskDelayLET>:

void vTaskDelayLET()
{
    3220:	b580      	push	{r7, lr}
    3222:	b084      	sub	sp, #16
    3224:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3226:	f002 faa3 	bl	5770 <xTaskGetCurrentTaskHandle>
    322a:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    322c:	68b8      	ldr	r0, [r7, #8]
    322e:	f002 fb55 	bl	58dc <xTaskGetxStartTime>
    3232:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3234:	68b8      	ldr	r0, [r7, #8]
    3236:	f002 fb5d 	bl	58f4 <xTaskGetxLet>
    323a:	4602      	mov	r2, r0
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	4413      	add	r3, r2
    3240:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    3242:	f001 fec9 	bl	4fd8 <xTaskGetTickCount>
    3246:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3248:	e002      	b.n	3250 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    324a:	f001 fec5 	bl	4fd8 <xTaskGetTickCount>
    324e:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    3250:	68fa      	ldr	r2, [r7, #12]
    3252:	683b      	ldr	r3, [r7, #0]
    3254:	429a      	cmp	r2, r3
    3256:	d3f8      	bcc.n	324a <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3258:	3710      	adds	r7, #16
    325a:	46bd      	mov	sp, r7
    325c:	bd80      	pop	{r7, pc}
    325e:	bf00      	nop

00003260 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    3260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3264:	b088      	sub	sp, #32
    3266:	af00      	add	r7, sp, #0
    3268:	6078      	str	r0, [r7, #4]
    326a:	6039      	str	r1, [r7, #0]
    326c:	4669      	mov	r1, sp
    326e:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3270:	6879      	ldr	r1, [r7, #4]
    3272:	6849      	ldr	r1, [r1, #4]
    3274:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    3276:	69be      	ldr	r6, [r7, #24]
    3278:	1e71      	subs	r1, r6, #1
    327a:	6179      	str	r1, [r7, #20]
    327c:	4631      	mov	r1, r6
    327e:	4608      	mov	r0, r1
    3280:	f04f 0100 	mov.w	r1, #0
    3284:	014d      	lsls	r5, r1, #5
    3286:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    328a:	0144      	lsls	r4, r0, #5
    328c:	4631      	mov	r1, r6
    328e:	4608      	mov	r0, r1
    3290:	f04f 0100 	mov.w	r1, #0
    3294:	014b      	lsls	r3, r1, #5
    3296:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    329a:	0142      	lsls	r2, r0, #5
    329c:	4633      	mov	r3, r6
    329e:	009b      	lsls	r3, r3, #2
    32a0:	3303      	adds	r3, #3
    32a2:	3307      	adds	r3, #7
    32a4:	08db      	lsrs	r3, r3, #3
    32a6:	00db      	lsls	r3, r3, #3
    32a8:	ebad 0d03 	sub.w	sp, sp, r3
    32ac:	466b      	mov	r3, sp
    32ae:	3303      	adds	r3, #3
    32b0:	089b      	lsrs	r3, r3, #2
    32b2:	009b      	lsls	r3, r3, #2
    32b4:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	681b      	ldr	r3, [r3, #0]
    32ba:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    32bc:	f640 3350 	movw	r3, #2896	; 0xb50
    32c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c4:	68fa      	ldr	r2, [r7, #12]
    32c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32ca:	4618      	mov	r0, r3
    32cc:	2100      	movs	r1, #0
    32ce:	f04f 32ff 	mov.w	r2, #4294967295
    32d2:	2300      	movs	r3, #0
    32d4:	f000 ffcc 	bl	4270 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    32d8:	f001 fe7e 	bl	4fd8 <xTaskGetTickCount>
    32dc:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    32de:	f640 33dc 	movw	r3, #3036	; 0xbdc
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	68fa      	ldr	r2, [r7, #12]
    32e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32ec:	4618      	mov	r0, r3
    32ee:	68b9      	ldr	r1, [r7, #8]
    32f0:	f002 fb0c 	bl	590c <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    32f4:	2300      	movs	r3, #0
    32f6:	61fb      	str	r3, [r7, #28]
    32f8:	e024      	b.n	3344 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    32fa:	687a      	ldr	r2, [r7, #4]
    32fc:	69fb      	ldr	r3, [r7, #28]
    32fe:	3302      	adds	r3, #2
    3300:	009b      	lsls	r3, r3, #2
    3302:	4413      	add	r3, r2
    3304:	6859      	ldr	r1, [r3, #4]
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	69fa      	ldr	r2, [r7, #28]
    330a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    330e:	69fb      	ldr	r3, [r7, #28]
    3310:	009b      	lsls	r3, r3, #2
    3312:	683a      	ldr	r2, [r7, #0]
    3314:	18d1      	adds	r1, r2, r3
    3316:	693b      	ldr	r3, [r7, #16]
    3318:	69fa      	ldr	r2, [r7, #28]
    331a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    331e:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    332a:	f240 5348 	movw	r3, #1352	; 0x548
    332e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	4608      	mov	r0, r1
    3336:	4611      	mov	r1, r2
    3338:	461a      	mov	r2, r3
    333a:	f7ff fdb1 	bl	2ea0 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    333e:	69fb      	ldr	r3, [r7, #28]
    3340:	3301      	adds	r3, #1
    3342:	61fb      	str	r3, [r7, #28]
    3344:	69fa      	ldr	r2, [r7, #28]
    3346:	69bb      	ldr	r3, [r7, #24]
    3348:	429a      	cmp	r2, r3
    334a:	dbd6      	blt.n	32fa <vEventReceiveAll+0x9a>
    334c:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    334e:	3720      	adds	r7, #32
    3350:	46bd      	mov	sp, r7
    3352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3356:	bf00      	nop

00003358 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	685b      	ldr	r3, [r3, #4]
    3366:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    3368:	2300      	movs	r3, #0
    336a:	60fb      	str	r3, [r7, #12]
    336c:	e00a      	b.n	3384 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	009b      	lsls	r3, r3, #2
    3372:	683a      	ldr	r2, [r7, #0]
    3374:	4413      	add	r3, r2
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	4618      	mov	r0, r3
    337a:	f7ff fdf3 	bl	2f64 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	3301      	adds	r3, #1
    3382:	60fb      	str	r3, [r7, #12]
    3384:	68fa      	ldr	r2, [r7, #12]
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	429a      	cmp	r2, r3
    338a:	dbf0      	blt.n	336e <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    338c:	3710      	adds	r7, #16
    338e:	46bd      	mov	sp, r7
    3390:	bd80      	pop	{r7, pc}
    3392:	bf00      	nop

00003394 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3398:	b08a      	sub	sp, #40	; 0x28
    339a:	af02      	add	r7, sp, #8
    339c:	6078      	str	r0, [r7, #4]
    339e:	6039      	str	r1, [r7, #0]
    33a0:	4669      	mov	r1, sp
    33a2:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    33a4:	6879      	ldr	r1, [r7, #4]
    33a6:	6889      	ldr	r1, [r1, #8]
    33a8:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    33aa:	6879      	ldr	r1, [r7, #4]
    33ac:	6809      	ldr	r1, [r1, #0]
    33ae:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    33b0:	6879      	ldr	r1, [r7, #4]
    33b2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    33b4:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    33b6:	69be      	ldr	r6, [r7, #24]
    33b8:	1e71      	subs	r1, r6, #1
    33ba:	60f9      	str	r1, [r7, #12]
    33bc:	4631      	mov	r1, r6
    33be:	4608      	mov	r0, r1
    33c0:	f04f 0100 	mov.w	r1, #0
    33c4:	014d      	lsls	r5, r1, #5
    33c6:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    33ca:	0144      	lsls	r4, r0, #5
    33cc:	4631      	mov	r1, r6
    33ce:	4608      	mov	r0, r1
    33d0:	f04f 0100 	mov.w	r1, #0
    33d4:	014b      	lsls	r3, r1, #5
    33d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33da:	0142      	lsls	r2, r0, #5
    33dc:	4633      	mov	r3, r6
    33de:	009b      	lsls	r3, r3, #2
    33e0:	3303      	adds	r3, #3
    33e2:	3307      	adds	r3, #7
    33e4:	08db      	lsrs	r3, r3, #3
    33e6:	00db      	lsls	r3, r3, #3
    33e8:	ebad 0d03 	sub.w	sp, sp, r3
    33ec:	ab02      	add	r3, sp, #8
    33ee:	3303      	adds	r3, #3
    33f0:	089b      	lsrs	r3, r3, #2
    33f2:	009b      	lsls	r3, r3, #2
    33f4:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    33f6:	2300      	movs	r3, #0
    33f8:	61fb      	str	r3, [r7, #28]
    33fa:	e033      	b.n	3464 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    33fc:	687a      	ldr	r2, [r7, #4]
    33fe:	69fb      	ldr	r3, [r7, #28]
    3400:	3304      	adds	r3, #4
    3402:	009b      	lsls	r3, r3, #2
    3404:	4413      	add	r3, r2
    3406:	6859      	ldr	r1, [r3, #4]
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	69fa      	ldr	r2, [r7, #28]
    340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	69fa      	ldr	r2, [r7, #28]
    3414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3418:	697b      	ldr	r3, [r7, #20]
    341a:	429a      	cmp	r2, r3
    341c:	dc06      	bgt.n	342c <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    341e:	69fb      	ldr	r3, [r7, #28]
    3420:	011b      	lsls	r3, r3, #4
    3422:	683a      	ldr	r2, [r7, #0]
    3424:	4413      	add	r3, r2
    3426:	2201      	movs	r2, #1
    3428:	609a      	str	r2, [r3, #8]
    342a:	e005      	b.n	3438 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    342c:	69fb      	ldr	r3, [r7, #28]
    342e:	011b      	lsls	r3, r3, #4
    3430:	683a      	ldr	r2, [r7, #0]
    3432:	4413      	add	r3, r2
    3434:	2200      	movs	r2, #0
    3436:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3438:	68bb      	ldr	r3, [r7, #8]
    343a:	69fa      	ldr	r2, [r7, #28]
    343c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3440:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3448:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    344c:	69fb      	ldr	r3, [r7, #28]
    344e:	011b      	lsls	r3, r3, #4
    3450:	683a      	ldr	r2, [r7, #0]
    3452:	4413      	add	r3, r2
    3454:	68da      	ldr	r2, [r3, #12]
    3456:	9200      	str	r2, [sp, #0]
    3458:	cb0e      	ldmia	r3, {r1, r2, r3}
    345a:	f7ff fc5d 	bl	2d18 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    345e:	69fb      	ldr	r3, [r7, #28]
    3460:	3301      	adds	r3, #1
    3462:	61fb      	str	r3, [r7, #28]
    3464:	69fa      	ldr	r2, [r7, #28]
    3466:	69bb      	ldr	r3, [r7, #24]
    3468:	429a      	cmp	r2, r3
    346a:	dbc7      	blt.n	33fc <vEventCreateAll+0x68>
    346c:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    346e:	3720      	adds	r7, #32
    3470:	46bd      	mov	sp, r7
    3472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3476:	bf00      	nop

00003478 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    347c:	b095      	sub	sp, #84	; 0x54
    347e:	af00      	add	r7, sp, #0
    3480:	60f8      	str	r0, [r7, #12]
    3482:	466b      	mov	r3, sp
    3484:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3486:	2301      	movs	r3, #1
    3488:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	63fb      	str	r3, [r7, #60]	; 0x3c

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    348e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3490:	689b      	ldr	r3, [r3, #8]
    3492:	63bb      	str	r3, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    349c:	69db      	ldr	r3, [r3, #28]
    349e:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    34a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a8:	6a1b      	ldr	r3, [r3, #32]
    34aa:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xCount = 1;
    34ac:	2301      	movs	r3, #1
    34ae:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    34b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    34b4:	fb02 f303 	mul.w	r3, r2, r3
    34b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    34ba:	f640 33dc 	movw	r3, #3036	; 0xbdc
    34be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    34c8:	4618      	mov	r0, r3
    34ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
    34cc:	f002 fa2c 	bl	5928 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    34d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    34d2:	1e4b      	subs	r3, r1, #1
    34d4:	623b      	str	r3, [r7, #32]
    34d6:	460b      	mov	r3, r1
    34d8:	461a      	mov	r2, r3
    34da:	f04f 0300 	mov.w	r3, #0
    34de:	0158      	lsls	r0, r3, #5
    34e0:	6078      	str	r0, [r7, #4]
    34e2:	6878      	ldr	r0, [r7, #4]
    34e4:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    34e8:	6078      	str	r0, [r7, #4]
    34ea:	0150      	lsls	r0, r2, #5
    34ec:	460b      	mov	r3, r1
    34ee:	461a      	mov	r2, r3
    34f0:	f04f 0300 	mov.w	r3, #0
    34f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    34f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    34fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3500:	460b      	mov	r3, r1
    3502:	009b      	lsls	r3, r3, #2
    3504:	3303      	adds	r3, #3
    3506:	3307      	adds	r3, #7
    3508:	08db      	lsrs	r3, r3, #3
    350a:	00db      	lsls	r3, r3, #3
    350c:	ebad 0d03 	sub.w	sp, sp, r3
    3510:	466b      	mov	r3, sp
    3512:	3303      	adds	r3, #3
    3514:	089b      	lsrs	r3, r3, #2
    3516:	009b      	lsls	r3, r3, #2
    3518:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    351a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    351c:	1e4b      	subs	r3, r1, #1
    351e:	61bb      	str	r3, [r7, #24]
    3520:	460b      	mov	r3, r1
    3522:	461a      	mov	r2, r3
    3524:	f04f 0300 	mov.w	r3, #0
    3528:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    352c:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3530:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3534:	460b      	mov	r3, r1
    3536:	461a      	mov	r2, r3
    3538:	f04f 0300 	mov.w	r3, #0
    353c:	01dd      	lsls	r5, r3, #7
    353e:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    3542:	01d4      	lsls	r4, r2, #7
    3544:	460b      	mov	r3, r1
    3546:	011b      	lsls	r3, r3, #4
    3548:	3303      	adds	r3, #3
    354a:	3307      	adds	r3, #7
    354c:	08db      	lsrs	r3, r3, #3
    354e:	00db      	lsls	r3, r3, #3
    3550:	ebad 0d03 	sub.w	sp, sp, r3
    3554:	466b      	mov	r3, sp
    3556:	3303      	adds	r3, #3
    3558:	089b      	lsrs	r3, r3, #2
    355a:	009b      	lsls	r3, r3, #2
    355c:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    355e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3560:	2b01      	cmp	r3, #1
    3562:	d11e      	bne.n	35a2 <vSensor+0x12a>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    3564:	f640 3350 	movw	r3, #2896	; 0xb50
    3568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3572:	4618      	mov	r0, r3
    3574:	2100      	movs	r1, #0
    3576:	f04f 32ff 	mov.w	r2, #4294967295
    357a:	2300      	movs	r3, #0
    357c:	f000 fe78 	bl	4270 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
            vPrintNumber( deadline ); // ready time  of task 
#endif 
            xCurrentTime = xTaskGetTickCount();
    3580:	f001 fd2a 	bl	4fd8 <xTaskGetTickCount>
    3584:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3586:	f640 33dc 	movw	r3, #3036	; 0xbdc
    358a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    358e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3594:	4618      	mov	r0, r3
    3596:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3598:	f002 f9b8 	bl	590c <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    359c:	2300      	movs	r3, #0
    359e:	647b      	str	r3, [r7, #68]	; 0x44
    35a0:	e017      	b.n	35d2 <vSensor+0x15a>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    35a2:	69fb      	ldr	r3, [r7, #28]
    35a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35a6:	4619      	mov	r1, r3
    35a8:	f7ff fe5a 	bl	3260 <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
            vPrintNumber( deadline ); // ready time of task 
#endif 
            xCurrentTime = xTaskGetTickCount();
    35ac:	f001 fd14 	bl	4fd8 <xTaskGetTickCount>
    35b0:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35b2:	f640 33dc 	movw	r3, #3036	; 0xbdc
    35b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35c0:	4618      	mov	r0, r3
    35c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35c4:	f002 f9a2 	bl	590c <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    35c8:	69fb      	ldr	r3, [r7, #28]
    35ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35cc:	4619      	mov	r1, r3
    35ce:	f7ff fec3 	bl	3358 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    35d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35d4:	3301      	adds	r3, #1
    35d6:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    35d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    35dc:	fb02 f303 	mul.w	r3, r2, r3
    35e0:	627b      	str	r3, [r7, #36]	; 0x24

        for( i = 0; i < NUM; i ++ )
    35e2:	2300      	movs	r3, #0
    35e4:	64bb      	str	r3, [r7, #72]	; 0x48
    35e6:	e011      	b.n	360c <vSensor+0x194>
        {
            xDatas[i].xNextPeriod = deadline;
    35e8:	697a      	ldr	r2, [r7, #20]
    35ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35ec:	011b      	lsls	r3, r3, #4
    35ee:	4413      	add	r3, r2
    35f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    35f2:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    35f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    35f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35f8:	441a      	add	r2, r3
    35fa:	6979      	ldr	r1, [r7, #20]
    35fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35fe:	011b      	lsls	r3, r3, #4
    3600:	440b      	add	r3, r1
    3602:	3304      	adds	r3, #4
    3604:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3608:	3301      	adds	r3, #1
    360a:	64bb      	str	r3, [r7, #72]	; 0x48
    360c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3610:	429a      	cmp	r2, r3
    3612:	dbe9      	blt.n	35e8 <vSensor+0x170>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3614:	697b      	ldr	r3, [r7, #20]
    3616:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3618:	4619      	mov	r1, r3
    361a:	f7ff febb 	bl	3394 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    361e:	697b      	ldr	r3, [r7, #20]
    3620:	681a      	ldr	r2, [r3, #0]
    3622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3624:	429a      	cmp	r2, r3
    3626:	d20a      	bcs.n	363e <vSensor+0x1c6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3628:	697b      	ldr	r3, [r7, #20]
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	4618      	mov	r0, r3
    362e:	f013 fdab 	bl	17188 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    3632:	f248 7018 	movw	r0, #34584	; 0x8718
    3636:	f2c0 0001 	movt	r0, #1
    363a:	f013 fd8b 	bl	17154 <vPrintString>
        vPrintNumber( xCurrentTime );  // finish time of sensor
        vPrintNumber( deadline );   // deadline of task
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
#endif

        xCurrentTime = xTaskGetTickCount();
    363e:	f001 fccb 	bl	4fd8 <xTaskGetTickCount>
    3642:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    3644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3646:	f244 2340 	movw	r3, #16960	; 0x4240
    364a:	f2c0 030f 	movt	r3, #15
    364e:	429a      	cmp	r2, r3
    3650:	d900      	bls.n	3654 <vSensor+0x1dc>
        {
            break;
    3652:	e00c      	b.n	366e <vSensor+0x1f6>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3654:	f640 3350 	movw	r3, #2896	; 0xb50
    3658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3660:	4618      	mov	r0, r3
    3662:	2100      	movs	r1, #0
    3664:	2200      	movs	r2, #0
    3666:	2300      	movs	r3, #0
    3668:	f000 fd3c 	bl	40e4 <xQueueGenericSend>
    }
    366c:	e777      	b.n	355e <vSensor+0xe6>
    366e:	46b5      	mov	sp, r6
}
    3670:	3754      	adds	r7, #84	; 0x54
    3672:	46bd      	mov	sp, r7
    3674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003678 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    367c:	b097      	sub	sp, #92	; 0x5c
    367e:	af00      	add	r7, sp, #0
    3680:	61f8      	str	r0, [r7, #28]
    3682:	4669      	mov	r1, sp
    3684:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    3686:	69f9      	ldr	r1, [r7, #28]
    3688:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    368a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    368c:	6849      	ldr	r1, [r1, #4]
    368e:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3690:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3692:	6889      	ldr	r1, [r1, #8]
    3694:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3696:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3698:	6809      	ldr	r1, [r1, #0]
    369a:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    369c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    369e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    36a0:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    36a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36a4:	6a09      	ldr	r1, [r1, #32]
    36a6:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    36a8:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    36aa:	1e71      	subs	r1, r6, #1
    36ac:	63b9      	str	r1, [r7, #56]	; 0x38
    36ae:	4631      	mov	r1, r6
    36b0:	4608      	mov	r0, r1
    36b2:	f04f 0100 	mov.w	r1, #0
    36b6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    36ba:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    36be:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    36c2:	4631      	mov	r1, r6
    36c4:	4608      	mov	r0, r1
    36c6:	f04f 0100 	mov.w	r1, #0
    36ca:	ea4f 1941 	mov.w	r9, r1, lsl #5
    36ce:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    36d2:	ea4f 1840 	mov.w	r8, r0, lsl #5
    36d6:	4631      	mov	r1, r6
    36d8:	0089      	lsls	r1, r1, #2
    36da:	3103      	adds	r1, #3
    36dc:	3107      	adds	r1, #7
    36de:	08c9      	lsrs	r1, r1, #3
    36e0:	00c9      	lsls	r1, r1, #3
    36e2:	ebad 0d01 	sub.w	sp, sp, r1
    36e6:	4669      	mov	r1, sp
    36e8:	3103      	adds	r1, #3
    36ea:	0889      	lsrs	r1, r1, #2
    36ec:	0089      	lsls	r1, r1, #2
    36ee:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    36f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    36f2:	1e71      	subs	r1, r6, #1
    36f4:	6339      	str	r1, [r7, #48]	; 0x30
    36f6:	4631      	mov	r1, r6
    36f8:	4608      	mov	r0, r1
    36fa:	f04f 0100 	mov.w	r1, #0
    36fe:	01cd      	lsls	r5, r1, #7
    3700:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3704:	01c4      	lsls	r4, r0, #7
    3706:	4631      	mov	r1, r6
    3708:	4608      	mov	r0, r1
    370a:	f04f 0100 	mov.w	r1, #0
    370e:	01cb      	lsls	r3, r1, #7
    3710:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3714:	01c2      	lsls	r2, r0, #7
    3716:	4633      	mov	r3, r6
    3718:	011b      	lsls	r3, r3, #4
    371a:	3303      	adds	r3, #3
    371c:	3307      	adds	r3, #7
    371e:	08db      	lsrs	r3, r3, #3
    3720:	00db      	lsls	r3, r3, #3
    3722:	ebad 0d03 	sub.w	sp, sp, r3
    3726:	466b      	mov	r3, sp
    3728:	3303      	adds	r3, #3
    372a:	089b      	lsrs	r3, r3, #2
    372c:	009b      	lsls	r3, r3, #2
    372e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3732:	69db      	ldr	r3, [r3, #28]
    3734:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3736:	f640 33dc 	movw	r3, #3036	; 0xbdc
    373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    373e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3744:	4618      	mov	r0, r3
    3746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3748:	f002 f8ee 	bl	5928 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    374e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3750:	4619      	mov	r1, r3
    3752:	f7ff fd85 	bl	3260 <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    3756:	f001 fc51 	bl	4ffc <xTaskGetTickCountFromISR>
    375a:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    375c:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    376a:	4618      	mov	r0, r3
    376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    376e:	f002 f8cd 	bl	590c <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3772:	2300      	movs	r3, #0
    3774:	657b      	str	r3, [r7, #84]	; 0x54
    3776:	e01e      	b.n	37b6 <vServant+0x13e>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    377a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3784:	0112      	lsls	r2, r2, #4
    3786:	188c      	adds	r4, r1, r2
    3788:	f107 0208 	add.w	r2, r7, #8
    378c:	4610      	mov	r0, r2
    378e:	4619      	mov	r1, r3
    3790:	f7ff f9a4 	bl	2adc <xEventGetxData>
    3794:	f107 0308 	add.w	r3, r7, #8
    3798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    379a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37a2:	441a      	add	r2, r3
    37a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    37a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37a8:	011b      	lsls	r3, r3, #4
    37aa:	440b      	add	r3, r1
    37ac:	3304      	adds	r3, #4
    37ae:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    37b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37b2:	3301      	adds	r3, #1
    37b4:	657b      	str	r3, [r7, #84]	; 0x54
    37b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37ba:	429a      	cmp	r2, r3
    37bc:	dbdc      	blt.n	3778 <vServant+0x100>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    37be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    37c2:	4619      	mov	r1, r3
    37c4:	f7ff fdc8 	bl	3358 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    37c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
    37cc:	4619      	mov	r1, r3
    37ce:	f7ff fde1 	bl	3394 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    37d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37d4:	681a      	ldr	r2, [r3, #0]
    37d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37d8:	429a      	cmp	r2, r3
    37da:	d20a      	bcs.n	37f2 <vServant+0x17a>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    37dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37de:	681b      	ldr	r3, [r3, #0]
    37e0:	4618      	mov	r0, r3
    37e2:	f013 fcd1 	bl	17188 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    37e6:	f248 703c 	movw	r0, #34620	; 0x873c
    37ea:	f2c0 0001 	movt	r0, #1
    37ee:	f013 fcb1 	bl	17154 <vPrintString>
        vPrintNumber( xCurrentTime );   // finish time of current servant
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
        vPrintNumber( (xMyFlag + 10) * 3 );
#endif

        xCurrentTime = xTaskGetTickCount();
    37f2:	f001 fbf1 	bl	4fd8 <xTaskGetTickCount>
    37f6:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    37f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37fa:	f244 2340 	movw	r3, #16960	; 0x4240
    37fe:	f2c0 030f 	movt	r3, #15
    3802:	429a      	cmp	r2, r3
    3804:	d900      	bls.n	3808 <vServant+0x190>
        {
            break;
    3806:	e00c      	b.n	3822 <vServant+0x1aa>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3808:	f640 3350 	movw	r3, #2896	; 0xb50
    380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3814:	4618      	mov	r0, r3
    3816:	2100      	movs	r1, #0
    3818:	2200      	movs	r2, #0
    381a:	2300      	movs	r3, #0
    381c:	f000 fc62 	bl	40e4 <xQueueGenericSend>
    }
    3820:	e794      	b.n	374c <vServant+0xd4>
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	469d      	mov	sp, r3
}
    3826:	375c      	adds	r7, #92	; 0x5c
    3828:	46bd      	mov	sp, r7
    382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    382e:	bf00      	nop

00003830 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3830:	b580      	push	{r7, lr}
    3832:	b090      	sub	sp, #64	; 0x40
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3842:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3844:	69db      	ldr	r3, [r3, #28]
    3846:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3848:	f640 33dc 	movw	r3, #3036	; 0xbdc
    384c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3856:	4618      	mov	r0, r3
    3858:	6a39      	ldr	r1, [r7, #32]
    385a:	f002 f865 	bl	5928 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    385e:	f640 3350 	movw	r3, #2896	; 0xb50
    3862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    386c:	4618      	mov	r0, r3
    386e:	2100      	movs	r1, #0
    3870:	f04f 32ff 	mov.w	r2, #4294967295
    3874:	2300      	movs	r3, #0
    3876:	f000 fcfb 	bl	4270 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    387a:	f001 fbad 	bl	4fd8 <xTaskGetTickCount>
    387e:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3880:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    388e:	4618      	mov	r0, r3
    3890:	69f9      	ldr	r1, [r7, #28]
    3892:	f002 f83b 	bl	590c <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3896:	2300      	movs	r3, #0
    3898:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    389a:	e094      	b.n	39c6 <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    389c:	f107 030c 	add.w	r3, r7, #12
    38a0:	4618      	mov	r0, r3
    38a2:	f240 5148 	movw	r1, #1352	; 0x548
    38a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    38aa:	f7ff fa89 	bl	2dc0 <xEventListGenericTransit>
    38ae:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    38b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38b2:	f1b3 3fff 	cmp.w	r3, #4294967295
    38b6:	d100      	bne.n	38ba <vR_Servant+0x8a>
            {
                // no event
                break;
    38b8:	e089      	b.n	39ce <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    38ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38bc:	2b00      	cmp	r3, #0
    38be:	d100      	bne.n	38c2 <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    38c0:	e081      	b.n	39c6 <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	68db      	ldr	r3, [r3, #12]
    38c6:	4618      	mov	r0, r3
    38c8:	f7ff f8ea 	bl	2aa0 <xEventGetpxDestination>
    38cc:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    38ce:	68fb      	ldr	r3, [r7, #12]
    38d0:	68db      	ldr	r3, [r3, #12]
    38d2:	4618      	mov	r0, r3
    38d4:	f7ff f8d8 	bl	2a88 <xEventGetpxSource>
    38d8:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    38da:	2301      	movs	r3, #1
    38dc:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38de:	2300      	movs	r3, #0
    38e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    38e2:	e068      	b.n	39b6 <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    38e4:	f240 12ac 	movw	r2, #428	; 0x1ac
    38e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38ee:	460b      	mov	r3, r1
    38f0:	005b      	lsls	r3, r3, #1
    38f2:	440b      	add	r3, r1
    38f4:	009b      	lsls	r3, r3, #2
    38f6:	4413      	add	r3, r2
    38f8:	3304      	adds	r3, #4
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    38fe:	f240 12ac 	movw	r2, #428	; 0x1ac
    3902:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3908:	460b      	mov	r3, r1
    390a:	005b      	lsls	r3, r3, #1
    390c:	440b      	add	r3, r1
    390e:	009b      	lsls	r3, r3, #2
    3910:	4413      	add	r3, r2
    3912:	3308      	adds	r3, #8
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3918:	f640 33dc 	movw	r3, #3036	; 0xbdc
    391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3920:	693a      	ldr	r2, [r7, #16]
    3922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3928:	429a      	cmp	r2, r3
    392a:	d141      	bne.n	39b0 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    392c:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3934:	697a      	ldr	r2, [r7, #20]
    3936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    393a:	69bb      	ldr	r3, [r7, #24]
    393c:	429a      	cmp	r2, r3
    393e:	d127      	bne.n	3990 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3940:	f240 12ac 	movw	r2, #428	; 0x1ac
    3944:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    394a:	460b      	mov	r3, r1
    394c:	005b      	lsls	r3, r3, #1
    394e:	440b      	add	r3, r1
    3950:	009b      	lsls	r3, r3, #2
    3952:	4413      	add	r3, r2
    3954:	330c      	adds	r3, #12
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	2b02      	cmp	r3, #2
    395a:	d10b      	bne.n	3974 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    395c:	f248 7064 	movw	r0, #34660	; 0x8764
    3960:	f2c0 0001 	movt	r0, #1
    3964:	f013 fbf6 	bl	17154 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	68db      	ldr	r3, [r3, #12]
    396c:	4618      	mov	r0, r3
    396e:	f7ff faf9 	bl	2f64 <vEventGenericDelete>
    3972:	e01d      	b.n	39b0 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3974:	f240 12ac 	movw	r2, #428	; 0x1ac
    3978:	f2c2 0200 	movt	r2, #8192	; 0x2000
    397c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    397e:	460b      	mov	r3, r1
    3980:	005b      	lsls	r3, r3, #1
    3982:	440b      	add	r3, r1
    3984:	009b      	lsls	r3, r3, #2
    3986:	4413      	add	r3, r2
    3988:	330c      	adds	r3, #12
    398a:	2202      	movs	r2, #2
    398c:	601a      	str	r2, [r3, #0]
    398e:	e00f      	b.n	39b0 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3990:	f240 12ac 	movw	r2, #428	; 0x1ac
    3994:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    399a:	460b      	mov	r3, r1
    399c:	005b      	lsls	r3, r3, #1
    399e:	440b      	add	r3, r1
    39a0:	009b      	lsls	r3, r3, #2
    39a2:	4413      	add	r3, r2
    39a4:	330c      	adds	r3, #12
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	2b01      	cmp	r3, #1
    39aa:	d101      	bne.n	39b0 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    39ac:	2300      	movs	r3, #0
    39ae:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    39b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39b2:	3301      	adds	r3, #1
    39b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    39b6:	f240 13ac 	movw	r3, #428	; 0x1ac
    39ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39be:	681a      	ldr	r2, [r3, #0]
    39c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39c2:	429a      	cmp	r2, r3
    39c4:	dc8e      	bgt.n	38e4 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    39c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39c8:	2b00      	cmp	r3, #0
    39ca:	f43f af67 	beq.w	389c <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    39ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    39d4:	d100      	bne.n	39d8 <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    39d6:	e045      	b.n	3a64 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    39d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39da:	2b00      	cmp	r3, #0
    39dc:	d100      	bne.n	39e0 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    39de:	e041      	b.n	3a64 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    39e0:	2300      	movs	r3, #0
    39e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    39e4:	e028      	b.n	3a38 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    39e6:	f240 12ac 	movw	r2, #428	; 0x1ac
    39ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39f0:	460b      	mov	r3, r1
    39f2:	005b      	lsls	r3, r3, #1
    39f4:	440b      	add	r3, r1
    39f6:	009b      	lsls	r3, r3, #2
    39f8:	4413      	add	r3, r2
    39fa:	3308      	adds	r3, #8
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3a00:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a08:	693a      	ldr	r2, [r7, #16]
    3a0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a10:	429a      	cmp	r2, r3
    3a12:	d10e      	bne.n	3a32 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3a14:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a1e:	460b      	mov	r3, r1
    3a20:	005b      	lsls	r3, r3, #1
    3a22:	440b      	add	r3, r1
    3a24:	009b      	lsls	r3, r3, #2
    3a26:	4413      	add	r3, r2
    3a28:	330c      	adds	r3, #12
    3a2a:	2201      	movs	r2, #1
    3a2c:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3a2e:	693b      	ldr	r3, [r7, #16]
    3a30:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a34:	3301      	adds	r3, #1
    3a36:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a38:	f240 13ac 	movw	r3, #428	; 0x1ac
    3a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a40:	681a      	ldr	r2, [r3, #0]
    3a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a44:	429a      	cmp	r2, r3
    3a46:	dcce      	bgt.n	39e6 <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3a48:	f640 3350 	movw	r3, #2896	; 0xb50
    3a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a56:	4618      	mov	r0, r3
    3a58:	2100      	movs	r1, #0
    3a5a:	2200      	movs	r2, #0
    3a5c:	2300      	movs	r3, #0
    3a5e:	f000 fb41 	bl	40e4 <xQueueGenericSend>
        }
    }
    3a62:	e6fc      	b.n	385e <vR_Servant+0x2e>
    3a64:	e6fb      	b.n	385e <vR_Servant+0x2e>
    3a66:	bf00      	nop

00003a68 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a68:	b480      	push	{r7}
    3a6a:	b085      	sub	sp, #20
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	60b9      	str	r1, [r7, #8]
    3a72:	607a      	str	r2, [r7, #4]
    3a74:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3a76:	3714      	adds	r7, #20
    3a78:	46bd      	mov	sp, r7
    3a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a7e:	4770      	bx	lr

00003a80 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	60f8      	str	r0, [r7, #12]
    3a88:	60b9      	str	r1, [r7, #8]
    3a8a:	607a      	str	r2, [r7, #4]
    3a8c:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3a8e:	f012 f99f 	bl	15dd0 <last_radio_from_ppm>
}
    3a92:	3710      	adds	r7, #16
    3a94:	46bd      	mov	sp, r7
    3a96:	bd80      	pop	{r7, pc}

00003a98 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a98:	b480      	push	{r7}
    3a9a:	b085      	sub	sp, #20
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	60f8      	str	r0, [r7, #12]
    3aa0:	60b9      	str	r1, [r7, #8]
    3aa2:	607a      	str	r2, [r7, #4]
    3aa4:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3aa6:	3714      	adds	r7, #20
    3aa8:	46bd      	mov	sp, r7
    3aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aae:	4770      	bx	lr

00003ab0 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ab0:	b480      	push	{r7}
    3ab2:	b085      	sub	sp, #20
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	60f8      	str	r0, [r7, #12]
    3ab8:	60b9      	str	r1, [r7, #8]
    3aba:	607a      	str	r2, [r7, #4]
    3abc:	603b      	str	r3, [r7, #0]
}
    3abe:	3714      	adds	r7, #20
    3ac0:	46bd      	mov	sp, r7
    3ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac6:	4770      	bx	lr

00003ac8 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b084      	sub	sp, #16
    3acc:	af00      	add	r7, sp, #0
    3ace:	60f8      	str	r0, [r7, #12]
    3ad0:	60b9      	str	r1, [r7, #8]
    3ad2:	607a      	str	r2, [r7, #4]
    3ad4:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3ad6:	f012 fd35 	bl	16544 <to_autopilot_from_last_radio>
}
    3ada:	3710      	adds	r7, #16
    3adc:	46bd      	mov	sp, r7
    3ade:	bd80      	pop	{r7, pc}

00003ae0 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b084      	sub	sp, #16
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	60f8      	str	r0, [r7, #12]
    3ae8:	60b9      	str	r1, [r7, #8]
    3aea:	607a      	str	r2, [r7, #4]
    3aec:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3aee:	f012 fc67 	bl	163c0 <spi_reset>
}
    3af2:	3710      	adds	r7, #16
    3af4:	46bd      	mov	sp, r7
    3af6:	bd80      	pop	{r7, pc}

00003af8 <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3af8:	b480      	push	{r7}
    3afa:	b085      	sub	sp, #20
    3afc:	af00      	add	r7, sp, #0
    3afe:	60f8      	str	r0, [r7, #12]
    3b00:	60b9      	str	r1, [r7, #8]
    3b02:	607a      	str	r2, [r7, #4]
    3b04:	603b      	str	r3, [r7, #0]
}
    3b06:	3714      	adds	r7, #20
    3b08:	46bd      	mov	sp, r7
    3b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b0e:	4770      	bx	lr

00003b10 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b084      	sub	sp, #16
    3b14:	af00      	add	r7, sp, #0
    3b16:	60f8      	str	r0, [r7, #12]
    3b18:	60b9      	str	r1, [r7, #8]
    3b1a:	607a      	str	r2, [r7, #4]
    3b1c:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3b1e:	f012 fe59 	bl	167d4 <check_mega128_values_task>
}
    3b22:	3710      	adds	r7, #16
    3b24:	46bd      	mov	sp, r7
    3b26:	bd80      	pop	{r7, pc}

00003b28 <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b28:	b480      	push	{r7}
    3b2a:	b085      	sub	sp, #20
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	60f8      	str	r0, [r7, #12]
    3b30:	60b9      	str	r1, [r7, #8]
    3b32:	607a      	str	r2, [r7, #4]
    3b34:	603b      	str	r3, [r7, #0]
}
    3b36:	3714      	adds	r7, #20
    3b38:	46bd      	mov	sp, r7
    3b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b3e:	4770      	bx	lr

00003b40 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b084      	sub	sp, #16
    3b44:	af00      	add	r7, sp, #0
    3b46:	60f8      	str	r0, [r7, #12]
    3b48:	60b9      	str	r1, [r7, #8]
    3b4a:	607a      	str	r2, [r7, #4]
    3b4c:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3b4e:	f012 ff19 	bl	16984 <servo_transmit>
}
    3b52:	3710      	adds	r7, #16
    3b54:	46bd      	mov	sp, r7
    3b56:	bd80      	pop	{r7, pc}

00003b58 <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b58:	b480      	push	{r7}
    3b5a:	b085      	sub	sp, #20
    3b5c:	af00      	add	r7, sp, #0
    3b5e:	60f8      	str	r0, [r7, #12]
    3b60:	60b9      	str	r1, [r7, #8]
    3b62:	607a      	str	r2, [r7, #4]
    3b64:	603b      	str	r3, [r7, #0]
}
    3b66:	3714      	adds	r7, #20
    3b68:	46bd      	mov	sp, r7
    3b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6e:	4770      	bx	lr

00003b70 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b084      	sub	sp, #16
    3b74:	af00      	add	r7, sp, #0
    3b76:	60f8      	str	r0, [r7, #12]
    3b78:	60b9      	str	r1, [r7, #8]
    3b7a:	607a      	str	r2, [r7, #4]
    3b7c:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3b7e:	f012 fe1f 	bl	167c0 <check_failsafe_task>
}
    3b82:	3710      	adds	r7, #16
    3b84:	46bd      	mov	sp, r7
    3b86:	bd80      	pop	{r7, pc}

00003b88 <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b88:	b480      	push	{r7}
    3b8a:	b085      	sub	sp, #20
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	60f8      	str	r0, [r7, #12]
    3b90:	60b9      	str	r1, [r7, #8]
    3b92:	607a      	str	r2, [r7, #4]
    3b94:	603b      	str	r3, [r7, #0]
}
    3b96:	3714      	adds	r7, #20
    3b98:	46bd      	mov	sp, r7
    3b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9e:	4770      	bx	lr

00003ba0 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b084      	sub	sp, #16
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	60f8      	str	r0, [r7, #12]
    3ba8:	60b9      	str	r1, [r7, #8]
    3baa:	607a      	str	r2, [r7, #4]
    3bac:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3bae:	f009 f8a1 	bl	ccf4 <radio_control_task>
}
    3bb2:	3710      	adds	r7, #16
    3bb4:	46bd      	mov	sp, r7
    3bb6:	bd80      	pop	{r7, pc}

00003bb8 <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b084      	sub	sp, #16
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	60f8      	str	r0, [r7, #12]
    3bc0:	60b9      	str	r1, [r7, #8]
    3bc2:	607a      	str	r2, [r7, #4]
    3bc4:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3bc6:	f00d ff47 	bl	11a58 <ir_gain_calib>
}
    3bca:	3710      	adds	r7, #16
    3bcc:	46bd      	mov	sp, r7
    3bce:	bd80      	pop	{r7, pc}

00003bd0 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3bd0:	b480      	push	{r7}
    3bd2:	b085      	sub	sp, #20
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	60f8      	str	r0, [r7, #12]
    3bd8:	60b9      	str	r1, [r7, #8]
    3bda:	607a      	str	r2, [r7, #4]
    3bdc:	603b      	str	r3, [r7, #0]
}
    3bde:	3714      	adds	r7, #20
    3be0:	46bd      	mov	sp, r7
    3be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be6:	4770      	bx	lr

00003be8 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	b084      	sub	sp, #16
    3bec:	af00      	add	r7, sp, #0
    3bee:	60f8      	str	r0, [r7, #12]
    3bf0:	60b9      	str	r1, [r7, #8]
    3bf2:	607a      	str	r2, [r7, #4]
    3bf4:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3bf6:	f00d fef1 	bl	119dc <ir_update>
}
    3bfa:	3710      	adds	r7, #16
    3bfc:	46bd      	mov	sp, r7
    3bfe:	bd80      	pop	{r7, pc}

00003c00 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b084      	sub	sp, #16
    3c04:	af00      	add	r7, sp, #0
    3c06:	60f8      	str	r0, [r7, #12]
    3c08:	60b9      	str	r1, [r7, #8]
    3c0a:	607a      	str	r2, [r7, #4]
    3c0c:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3c0e:	f011 f96d 	bl	14eec <estimator_update_state_infrared>
}
    3c12:	3710      	adds	r7, #16
    3c14:	46bd      	mov	sp, r7
    3c16:	bd80      	pop	{r7, pc}

00003c18 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b084      	sub	sp, #16
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	60f8      	str	r0, [r7, #12]
    3c20:	60b9      	str	r1, [r7, #8]
    3c22:	607a      	str	r2, [r7, #4]
    3c24:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3c26:	f00d ff47 	bl	11ab8 <roll_pitch_pid_run>
}
    3c2a:	3710      	adds	r7, #16
    3c2c:	46bd      	mov	sp, r7
    3c2e:	bd80      	pop	{r7, pc}

00003c30 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c30:	b480      	push	{r7}
    3c32:	b085      	sub	sp, #20
    3c34:	af00      	add	r7, sp, #0
    3c36:	60f8      	str	r0, [r7, #12]
    3c38:	60b9      	str	r1, [r7, #8]
    3c3a:	607a      	str	r2, [r7, #4]
    3c3c:	603b      	str	r3, [r7, #0]
}
    3c3e:	3714      	adds	r7, #20
    3c40:	46bd      	mov	sp, r7
    3c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c46:	4770      	bx	lr

00003c48 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b084      	sub	sp, #16
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	60f8      	str	r0, [r7, #12]
    3c50:	60b9      	str	r1, [r7, #8]
    3c52:	607a      	str	r2, [r7, #4]
    3c54:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3c56:	f00d f933 	bl	10ec0 <link_fbw_send>
}
    3c5a:	3710      	adds	r7, #16
    3c5c:	46bd      	mov	sp, r7
    3c5e:	bd80      	pop	{r7, pc}

00003c60 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c60:	b480      	push	{r7}
    3c62:	b085      	sub	sp, #20
    3c64:	af00      	add	r7, sp, #0
    3c66:	60f8      	str	r0, [r7, #12]
    3c68:	60b9      	str	r1, [r7, #8]
    3c6a:	607a      	str	r2, [r7, #4]
    3c6c:	603b      	str	r3, [r7, #0]
}
    3c6e:	3714      	adds	r7, #20
    3c70:	46bd      	mov	sp, r7
    3c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c76:	4770      	bx	lr

00003c78 <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b084      	sub	sp, #16
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	60f8      	str	r0, [r7, #12]
    3c80:	60b9      	str	r1, [r7, #8]
    3c82:	607a      	str	r2, [r7, #4]
    3c84:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3c86:	f00d fbf3 	bl	11470 <parse_gps_msg>
}
    3c8a:	3710      	adds	r7, #16
    3c8c:	46bd      	mov	sp, r7
    3c8e:	bd80      	pop	{r7, pc}

00003c90 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b084      	sub	sp, #16
    3c94:	af00      	add	r7, sp, #0
    3c96:	60f8      	str	r0, [r7, #12]
    3c98:	60b9      	str	r1, [r7, #8]
    3c9a:	607a      	str	r2, [r7, #4]
    3c9c:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3c9e:	f00a fe0f 	bl	e8c0 <send_gps_pos>
    send_radIR();
    3ca2:	f00b ffd3 	bl	fc4c <send_radIR>
    send_takeOff();
    3ca6:	f00c fdcb 	bl	10840 <send_takeOff>
}
    3caa:	3710      	adds	r7, #16
    3cac:	46bd      	mov	sp, r7
    3cae:	bd80      	pop	{r7, pc}

00003cb0 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cb0:	b480      	push	{r7}
    3cb2:	b085      	sub	sp, #20
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	607a      	str	r2, [r7, #4]
    3cbc:	603b      	str	r3, [r7, #0]
}
    3cbe:	3714      	adds	r7, #20
    3cc0:	46bd      	mov	sp, r7
    3cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc6:	4770      	bx	lr

00003cc8 <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b084      	sub	sp, #16
    3ccc:	af00      	add	r7, sp, #0
    3cce:	60f8      	str	r0, [r7, #12]
    3cd0:	60b9      	str	r1, [r7, #8]
    3cd2:	607a      	str	r2, [r7, #4]
    3cd4:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3cd6:	f010 fe8b 	bl	149f0 <nav_home>
}
    3cda:	3710      	adds	r7, #16
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}

00003ce0 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b084      	sub	sp, #16
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	60f8      	str	r0, [r7, #12]
    3ce8:	60b9      	str	r1, [r7, #8]
    3cea:	607a      	str	r2, [r7, #4]
    3cec:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3cee:	f010 fea5 	bl	14a3c <nav_update>
}
    3cf2:	3710      	adds	r7, #16
    3cf4:	46bd      	mov	sp, r7
    3cf6:	bd80      	pop	{r7, pc}

00003cf8 <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b084      	sub	sp, #16
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	60f8      	str	r0, [r7, #12]
    3d00:	60b9      	str	r1, [r7, #8]
    3d02:	607a      	str	r2, [r7, #4]
    3d04:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3d06:	f00d ffc3 	bl	11c90 <course_pid_run>
}
    3d0a:	3710      	adds	r7, #16
    3d0c:	46bd      	mov	sp, r7
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d10:	b480      	push	{r7}
    3d12:	b085      	sub	sp, #20
    3d14:	af00      	add	r7, sp, #0
    3d16:	60f8      	str	r0, [r7, #12]
    3d18:	60b9      	str	r1, [r7, #8]
    3d1a:	607a      	str	r2, [r7, #4]
    3d1c:	603b      	str	r3, [r7, #0]
}
    3d1e:	3714      	adds	r7, #20
    3d20:	46bd      	mov	sp, r7
    3d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d26:	4770      	bx	lr

00003d28 <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b084      	sub	sp, #16
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	60f8      	str	r0, [r7, #12]
    3d30:	60b9      	str	r1, [r7, #8]
    3d32:	607a      	str	r2, [r7, #4]
    3d34:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3d36:	f00e fa33 	bl	121a0 <altitude_pid_run>
}
    3d3a:	3710      	adds	r7, #16
    3d3c:	46bd      	mov	sp, r7
    3d3e:	bd80      	pop	{r7, pc}

00003d40 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3d40:	b480      	push	{r7}
    3d42:	b085      	sub	sp, #20
    3d44:	af00      	add	r7, sp, #0
    3d46:	60f8      	str	r0, [r7, #12]
    3d48:	60b9      	str	r1, [r7, #8]
    3d4a:	607a      	str	r2, [r7, #4]
    3d4c:	603b      	str	r3, [r7, #0]
}
    3d4e:	3714      	adds	r7, #20
    3d50:	46bd      	mov	sp, r7
    3d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d56:	4770      	bx	lr

00003d58 <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b084      	sub	sp, #16
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	60f8      	str	r0, [r7, #12]
    3d60:	60b9      	str	r1, [r7, #8]
    3d62:	607a      	str	r2, [r7, #4]
    3d64:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3d66:	f00e f84b 	bl	11e00 <climb_pid_run>
}
    3d6a:	3710      	adds	r7, #16
    3d6c:	46bd      	mov	sp, r7
    3d6e:	bd80      	pop	{r7, pc}

00003d70 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d70:	b480      	push	{r7}
    3d72:	b085      	sub	sp, #20
    3d74:	af00      	add	r7, sp, #0
    3d76:	60f8      	str	r0, [r7, #12]
    3d78:	60b9      	str	r1, [r7, #8]
    3d7a:	607a      	str	r2, [r7, #4]
    3d7c:	603b      	str	r3, [r7, #0]
}
    3d7e:	3714      	adds	r7, #20
    3d80:	46bd      	mov	sp, r7
    3d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d86:	4770      	bx	lr

00003d88 <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	60f8      	str	r0, [r7, #12]
    3d90:	60b9      	str	r1, [r7, #8]
    3d92:	607a      	str	r2, [r7, #4]
    3d94:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3d96:	f003 fa75 	bl	7284 <send_boot>
    send_attitude();
    3d9a:	f004 fa43 	bl	8224 <send_attitude>
    send_adc();
    3d9e:	f004 ff35 	bl	8c0c <send_adc>
    send_settings();
    3da2:	f005 f9bb 	bl	911c <send_settings>
    send_desired();
    3da6:	f005 fdbd 	bl	9924 <send_desired>
    send_bat();
    3daa:	f006 fceb 	bl	a784 <send_bat>
    send_climb();
    3dae:	f007 f89f 	bl	aef0 <send_climb>
    send_mode();
    3db2:	f007 fe0f 	bl	b9d4 <send_mode>
    send_debug();
    3db6:	f008 f8e1 	bl	bf7c <send_debug>
    send_nav_ref();
    3dba:	f008 fbb5 	bl	c528 <send_nav_ref>
}
    3dbe:	3710      	adds	r7, #16
    3dc0:	46bd      	mov	sp, r7
    3dc2:	bd80      	pop	{r7, pc}

00003dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	f103 0208 	add.w	r2, r3, #8
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	f04f 32ff 	mov.w	r2, #4294967295
    3ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	f103 0208 	add.w	r2, r3, #8
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	f103 0208 	add.w	r2, r3, #8
    3dee:	687b      	ldr	r3, [r7, #4]
    3df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	2200      	movs	r2, #0
    3df6:	601a      	str	r2, [r3, #0]
}
    3df8:	370c      	adds	r7, #12
    3dfa:	46bd      	mov	sp, r7
    3dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop

00003e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3e04:	b480      	push	{r7}
    3e06:	b083      	sub	sp, #12
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	2200      	movs	r2, #0
    3e10:	611a      	str	r2, [r3, #16]
}
    3e12:	370c      	adds	r7, #12
    3e14:	46bd      	mov	sp, r7
    3e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1a:	4770      	bx	lr

00003e1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3e1c:	b480      	push	{r7}
    3e1e:	b085      	sub	sp, #20
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
    3e24:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	685b      	ldr	r3, [r3, #4]
    3e2a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3e2c:	68fb      	ldr	r3, [r7, #12]
    3e2e:	685a      	ldr	r2, [r3, #4]
    3e30:	683b      	ldr	r3, [r7, #0]
    3e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	685a      	ldr	r2, [r3, #4]
    3e38:	683b      	ldr	r3, [r7, #0]
    3e3a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3e3c:	68fb      	ldr	r3, [r7, #12]
    3e3e:	685b      	ldr	r3, [r3, #4]
    3e40:	683a      	ldr	r2, [r7, #0]
    3e42:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3e44:	68fb      	ldr	r3, [r7, #12]
    3e46:	683a      	ldr	r2, [r7, #0]
    3e48:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	683a      	ldr	r2, [r7, #0]
    3e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3e50:	683b      	ldr	r3, [r7, #0]
    3e52:	687a      	ldr	r2, [r7, #4]
    3e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	1c5a      	adds	r2, r3, #1
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	601a      	str	r2, [r3, #0]
}
    3e60:	3714      	adds	r7, #20
    3e62:	46bd      	mov	sp, r7
    3e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e68:	4770      	bx	lr
    3e6a:	bf00      	nop

00003e6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3e6c:	b480      	push	{r7}
    3e6e:	b085      	sub	sp, #20
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3e76:	683b      	ldr	r3, [r7, #0]
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3e7c:	68bb      	ldr	r3, [r7, #8]
    3e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e82:	d103      	bne.n	3e8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	691b      	ldr	r3, [r3, #16]
    3e88:	60fb      	str	r3, [r7, #12]
    3e8a:	e00c      	b.n	3ea6 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	3308      	adds	r3, #8
    3e90:	60fb      	str	r3, [r7, #12]
    3e92:	e002      	b.n	3e9a <vListInsert+0x2e>
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	685b      	ldr	r3, [r3, #4]
    3e98:	60fb      	str	r3, [r7, #12]
    3e9a:	68fb      	ldr	r3, [r7, #12]
    3e9c:	685b      	ldr	r3, [r3, #4]
    3e9e:	681a      	ldr	r2, [r3, #0]
    3ea0:	68bb      	ldr	r3, [r7, #8]
    3ea2:	429a      	cmp	r2, r3
    3ea4:	d9f6      	bls.n	3e94 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3ea6:	68fb      	ldr	r3, [r7, #12]
    3ea8:	685a      	ldr	r2, [r3, #4]
    3eaa:	683b      	ldr	r3, [r7, #0]
    3eac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3eae:	683b      	ldr	r3, [r7, #0]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	683a      	ldr	r2, [r7, #0]
    3eb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3eb6:	683b      	ldr	r3, [r7, #0]
    3eb8:	68fa      	ldr	r2, [r7, #12]
    3eba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3ebc:	68fb      	ldr	r3, [r7, #12]
    3ebe:	683a      	ldr	r2, [r7, #0]
    3ec0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ec2:	683b      	ldr	r3, [r7, #0]
    3ec4:	687a      	ldr	r2, [r7, #4]
    3ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	1c5a      	adds	r2, r3, #1
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	601a      	str	r2, [r3, #0]
}
    3ed2:	3714      	adds	r7, #20
    3ed4:	46bd      	mov	sp, r7
    3ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eda:	4770      	bx	lr

00003edc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3edc:	b480      	push	{r7}
    3ede:	b085      	sub	sp, #20
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	685b      	ldr	r3, [r3, #4]
    3ee8:	687a      	ldr	r2, [r7, #4]
    3eea:	6892      	ldr	r2, [r2, #8]
    3eec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	689b      	ldr	r3, [r3, #8]
    3ef2:	687a      	ldr	r2, [r7, #4]
    3ef4:	6852      	ldr	r2, [r2, #4]
    3ef6:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	691b      	ldr	r3, [r3, #16]
    3efc:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3efe:	68fb      	ldr	r3, [r7, #12]
    3f00:	685a      	ldr	r2, [r3, #4]
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	429a      	cmp	r2, r3
    3f06:	d103      	bne.n	3f10 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	689a      	ldr	r2, [r3, #8]
    3f0c:	68fb      	ldr	r3, [r7, #12]
    3f0e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	2200      	movs	r2, #0
    3f14:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3f16:	68fb      	ldr	r3, [r7, #12]
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	1e5a      	subs	r2, r3, #1
    3f1c:	68fb      	ldr	r3, [r7, #12]
    3f1e:	601a      	str	r2, [r3, #0]
}
    3f20:	3714      	adds	r7, #20
    3f22:	46bd      	mov	sp, r7
    3f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b084      	sub	sp, #16
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    3f34:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3f36:	2301      	movs	r3, #1
    3f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3f3a:	683b      	ldr	r3, [r7, #0]
    3f3c:	2b01      	cmp	r3, #1
    3f3e:	d00b      	beq.n	3f58 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f44:	2b00      	cmp	r3, #0
    3f46:	d001      	beq.n	3f4c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3f48:	2300      	movs	r3, #0
    3f4a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	691b      	ldr	r3, [r3, #16]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d001      	beq.n	3f58 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3f54:	2300      	movs	r3, #0
    3f56:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3f58:	68fb      	ldr	r3, [r7, #12]
    3f5a:	2b01      	cmp	r3, #1
    3f5c:	d12f      	bne.n	3fbe <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	681a      	ldr	r2, [r3, #0]
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f66:	6879      	ldr	r1, [r7, #4]
    3f68:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3f6a:	fb01 f303 	mul.w	r3, r1, r3
    3f6e:	441a      	add	r2, r3
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	2200      	movs	r2, #0
    3f78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	681a      	ldr	r2, [r3, #0]
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	681a      	ldr	r2, [r3, #0]
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f8a:	3b01      	subs	r3, #1
    3f8c:	6879      	ldr	r1, [r7, #4]
    3f8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3f90:	fb01 f303 	mul.w	r3, r1, r3
    3f94:	441a      	add	r2, r3
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	f04f 32ff 	mov.w	r2, #4294967295
    3fa0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	f04f 32ff 	mov.w	r2, #4294967295
    3fa8:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	3310      	adds	r3, #16
    3fae:	4618      	mov	r0, r3
    3fb0:	f7ff ff08 	bl	3dc4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	3324      	adds	r3, #36	; 0x24
    3fb8:	4618      	mov	r0, r3
    3fba:	f7ff ff03 	bl	3dc4 <vListInitialise>
	}

	return xReturn;
    3fbe:	68fb      	ldr	r3, [r7, #12]
}
    3fc0:	4618      	mov	r0, r3
    3fc2:	3710      	adds	r7, #16
    3fc4:	46bd      	mov	sp, r7
    3fc6:	bd80      	pop	{r7, pc}

00003fc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b088      	sub	sp, #32
    3fcc:	af00      	add	r7, sp, #0
    3fce:	60f8      	str	r0, [r7, #12]
    3fd0:	60b9      	str	r1, [r7, #8]
    3fd2:	4613      	mov	r3, r2
    3fd4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3fd6:	2300      	movs	r3, #0
    3fd8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d026      	beq.n	402e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3fe0:	204c      	movs	r0, #76	; 0x4c
    3fe2:	f001 fda5 	bl	5b30 <pvPortMalloc>
    3fe6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3fe8:	69bb      	ldr	r3, [r7, #24]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d01f      	beq.n	402e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	68ba      	ldr	r2, [r7, #8]
    3ff2:	fb02 f303 	mul.w	r3, r2, r3
    3ff6:	3301      	adds	r3, #1
    3ff8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3ffa:	6978      	ldr	r0, [r7, #20]
    3ffc:	f001 fd98 	bl	5b30 <pvPortMalloc>
    4000:	4602      	mov	r2, r0
    4002:	69bb      	ldr	r3, [r7, #24]
    4004:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4006:	69bb      	ldr	r3, [r7, #24]
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	2b00      	cmp	r3, #0
    400c:	d00c      	beq.n	4028 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    400e:	69bb      	ldr	r3, [r7, #24]
    4010:	68fa      	ldr	r2, [r7, #12]
    4012:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4014:	69bb      	ldr	r3, [r7, #24]
    4016:	68ba      	ldr	r2, [r7, #8]
    4018:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    401a:	69b8      	ldr	r0, [r7, #24]
    401c:	2101      	movs	r1, #1
    401e:	f7ff ff85 	bl	3f2c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4022:	69bb      	ldr	r3, [r7, #24]
    4024:	61fb      	str	r3, [r7, #28]
    4026:	e002      	b.n	402e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4028:	69b8      	ldr	r0, [r7, #24]
    402a:	f001 fe45 	bl	5cb8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    402e:	69fb      	ldr	r3, [r7, #28]
}
    4030:	4618      	mov	r0, r3
    4032:	3720      	adds	r7, #32
    4034:	46bd      	mov	sp, r7
    4036:	bd80      	pop	{r7, pc}

00004038 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	4603      	mov	r3, r0
    4040:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4042:	204c      	movs	r0, #76	; 0x4c
    4044:	f001 fd74 	bl	5b30 <pvPortMalloc>
    4048:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    404a:	68fb      	ldr	r3, [r7, #12]
    404c:	2b00      	cmp	r3, #0
    404e:	d02c      	beq.n	40aa <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4050:	68fb      	ldr	r3, [r7, #12]
    4052:	2200      	movs	r2, #0
    4054:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	2200      	movs	r2, #0
    405a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	2200      	movs	r2, #0
    4060:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4062:	68fb      	ldr	r3, [r7, #12]
    4064:	2200      	movs	r2, #0
    4066:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4068:	68fb      	ldr	r3, [r7, #12]
    406a:	2200      	movs	r2, #0
    406c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	2201      	movs	r2, #1
    4072:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	2200      	movs	r2, #0
    4078:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    407a:	68fb      	ldr	r3, [r7, #12]
    407c:	f04f 32ff 	mov.w	r2, #4294967295
    4080:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4082:	68fb      	ldr	r3, [r7, #12]
    4084:	f04f 32ff 	mov.w	r2, #4294967295
    4088:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    408a:	68fb      	ldr	r3, [r7, #12]
    408c:	3310      	adds	r3, #16
    408e:	4618      	mov	r0, r3
    4090:	f7ff fe98 	bl	3dc4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4094:	68fb      	ldr	r3, [r7, #12]
    4096:	3324      	adds	r3, #36	; 0x24
    4098:	4618      	mov	r0, r3
    409a:	f7ff fe93 	bl	3dc4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    409e:	68f8      	ldr	r0, [r7, #12]
    40a0:	2100      	movs	r1, #0
    40a2:	2200      	movs	r2, #0
    40a4:	2300      	movs	r3, #0
    40a6:	f000 f81d 	bl	40e4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    40aa:	68fb      	ldr	r3, [r7, #12]
	}
    40ac:	4618      	mov	r0, r3
    40ae:	3710      	adds	r7, #16
    40b0:	46bd      	mov	sp, r7
    40b2:	bd80      	pop	{r7, pc}

000040b4 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    40b4:	b580      	push	{r7, lr}
    40b6:	b084      	sub	sp, #16
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    40bc:	f001 fcc0 	bl	5a40 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d103      	bne.n	40d0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	685b      	ldr	r3, [r3, #4]
    40cc:	60fb      	str	r3, [r7, #12]
    40ce:	e001      	b.n	40d4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    40d0:	2300      	movs	r3, #0
    40d2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    40d4:	f001 fcca 	bl	5a6c <vPortExitCritical>
		
		return pxReturn;
    40d8:	68fb      	ldr	r3, [r7, #12]
	}
    40da:	4618      	mov	r0, r3
    40dc:	3710      	adds	r7, #16
    40de:	46bd      	mov	sp, r7
    40e0:	bd80      	pop	{r7, pc}
    40e2:	bf00      	nop

000040e4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b088      	sub	sp, #32
    40e8:	af00      	add	r7, sp, #0
    40ea:	60f8      	str	r0, [r7, #12]
    40ec:	60b9      	str	r1, [r7, #8]
    40ee:	607a      	str	r2, [r7, #4]
    40f0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    40f2:	2300      	movs	r3, #0
    40f4:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    40f6:	f001 fca3 	bl	5a40 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    40fa:	68fb      	ldr	r3, [r7, #12]
    40fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    40fe:	68fb      	ldr	r3, [r7, #12]
    4100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4102:	429a      	cmp	r2, r3
    4104:	d216      	bcs.n	4134 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4106:	68f8      	ldr	r0, [r7, #12]
    4108:	68b9      	ldr	r1, [r7, #8]
    410a:	683a      	ldr	r2, [r7, #0]
    410c:	f000 f9d6 	bl	44bc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4110:	68fb      	ldr	r3, [r7, #12]
    4112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4114:	2b00      	cmp	r3, #0
    4116:	d009      	beq.n	412c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4118:	68fb      	ldr	r3, [r7, #12]
    411a:	3324      	adds	r3, #36	; 0x24
    411c:	4618      	mov	r0, r3
    411e:	f001 f905 	bl	532c <xTaskRemoveFromEventList>
    4122:	4603      	mov	r3, r0
    4124:	2b01      	cmp	r3, #1
    4126:	d101      	bne.n	412c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4128:	f001 fc7c 	bl	5a24 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    412c:	f001 fc9e 	bl	5a6c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4130:	2301      	movs	r3, #1
    4132:	e059      	b.n	41e8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	2b00      	cmp	r3, #0
    4138:	d103      	bne.n	4142 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    413a:	f001 fc97 	bl	5a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    413e:	2300      	movs	r3, #0
    4140:	e052      	b.n	41e8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4142:	69fb      	ldr	r3, [r7, #28]
    4144:	2b00      	cmp	r3, #0
    4146:	d106      	bne.n	4156 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4148:	f107 0314 	add.w	r3, r7, #20
    414c:	4618      	mov	r0, r3
    414e:	f001 f945 	bl	53dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4152:	2301      	movs	r3, #1
    4154:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4156:	f001 fc89 	bl	5a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    415a:	f000 fe93 	bl	4e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    415e:	f001 fc6f 	bl	5a40 <vPortEnterCritical>
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4166:	f1b3 3fff 	cmp.w	r3, #4294967295
    416a:	d102      	bne.n	4172 <xQueueGenericSend+0x8e>
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	2200      	movs	r2, #0
    4170:	645a      	str	r2, [r3, #68]	; 0x44
    4172:	68fb      	ldr	r3, [r7, #12]
    4174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4176:	f1b3 3fff 	cmp.w	r3, #4294967295
    417a:	d102      	bne.n	4182 <xQueueGenericSend+0x9e>
    417c:	68fb      	ldr	r3, [r7, #12]
    417e:	2200      	movs	r2, #0
    4180:	649a      	str	r2, [r3, #72]	; 0x48
    4182:	f001 fc73 	bl	5a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4186:	f107 0214 	add.w	r2, r7, #20
    418a:	1d3b      	adds	r3, r7, #4
    418c:	4610      	mov	r0, r2
    418e:	4619      	mov	r1, r3
    4190:	f001 f93c 	bl	540c <xTaskCheckForTimeOut>
    4194:	4603      	mov	r3, r0
    4196:	2b00      	cmp	r3, #0
    4198:	d11e      	bne.n	41d8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    419a:	68f8      	ldr	r0, [r7, #12]
    419c:	f000 fa86 	bl	46ac <prvIsQueueFull>
    41a0:	4603      	mov	r3, r0
    41a2:	2b00      	cmp	r3, #0
    41a4:	d012      	beq.n	41cc <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    41a6:	68fb      	ldr	r3, [r7, #12]
    41a8:	f103 0210 	add.w	r2, r3, #16
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	4610      	mov	r0, r2
    41b0:	4619      	mov	r1, r3
    41b2:	f001 f883 	bl	52bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    41b6:	68f8      	ldr	r0, [r7, #12]
    41b8:	f000 fa02 	bl	45c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    41bc:	f000 fe74 	bl	4ea8 <xTaskResumeAll>
    41c0:	4603      	mov	r3, r0
    41c2:	2b00      	cmp	r3, #0
    41c4:	d10f      	bne.n	41e6 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    41c6:	f001 fc2d 	bl	5a24 <vPortYieldFromISR>
    41ca:	e00c      	b.n	41e6 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    41cc:	68f8      	ldr	r0, [r7, #12]
    41ce:	f000 f9f7 	bl	45c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    41d2:	f000 fe69 	bl	4ea8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    41d6:	e78e      	b.n	40f6 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    41d8:	68f8      	ldr	r0, [r7, #12]
    41da:	f000 f9f1 	bl	45c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    41de:	f000 fe63 	bl	4ea8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    41e2:	2300      	movs	r3, #0
    41e4:	e000      	b.n	41e8 <xQueueGenericSend+0x104>
		}
	}
    41e6:	e786      	b.n	40f6 <xQueueGenericSend+0x12>
}
    41e8:	4618      	mov	r0, r3
    41ea:	3720      	adds	r7, #32
    41ec:	46bd      	mov	sp, r7
    41ee:	bd80      	pop	{r7, pc}

000041f0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b086      	sub	sp, #24
    41f4:	af00      	add	r7, sp, #0
    41f6:	60f8      	str	r0, [r7, #12]
    41f8:	60b9      	str	r1, [r7, #8]
    41fa:	607a      	str	r2, [r7, #4]
    41fc:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    41fe:	2300      	movs	r3, #0
    4200:	613b      	str	r3, [r7, #16]
    4202:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4206:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4212:	429a      	cmp	r2, r3
    4214:	d221      	bcs.n	425a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4216:	68f8      	ldr	r0, [r7, #12]
    4218:	68b9      	ldr	r1, [r7, #8]
    421a:	683a      	ldr	r2, [r7, #0]
    421c:	f000 f94e 	bl	44bc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4224:	f1b3 3fff 	cmp.w	r3, #4294967295
    4228:	d10f      	bne.n	424a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    422e:	2b00      	cmp	r3, #0
    4230:	d010      	beq.n	4254 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4232:	68fb      	ldr	r3, [r7, #12]
    4234:	3324      	adds	r3, #36	; 0x24
    4236:	4618      	mov	r0, r3
    4238:	f001 f878 	bl	532c <xTaskRemoveFromEventList>
    423c:	4603      	mov	r3, r0
    423e:	2b00      	cmp	r3, #0
    4240:	d008      	beq.n	4254 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	2201      	movs	r2, #1
    4246:	601a      	str	r2, [r3, #0]
    4248:	e004      	b.n	4254 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    424a:	68fb      	ldr	r3, [r7, #12]
    424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    424e:	1c5a      	adds	r2, r3, #1
    4250:	68fb      	ldr	r3, [r7, #12]
    4252:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4254:	2301      	movs	r3, #1
    4256:	617b      	str	r3, [r7, #20]
    4258:	e001      	b.n	425e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    425a:	2300      	movs	r3, #0
    425c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    425e:	f04f 0000 	mov.w	r0, #0
    4262:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4266:	697b      	ldr	r3, [r7, #20]
}
    4268:	4618      	mov	r0, r3
    426a:	3718      	adds	r7, #24
    426c:	46bd      	mov	sp, r7
    426e:	bd80      	pop	{r7, pc}

00004270 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4270:	b580      	push	{r7, lr}
    4272:	b088      	sub	sp, #32
    4274:	af00      	add	r7, sp, #0
    4276:	60f8      	str	r0, [r7, #12]
    4278:	60b9      	str	r1, [r7, #8]
    427a:	607a      	str	r2, [r7, #4]
    427c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    427e:	2300      	movs	r3, #0
    4280:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4282:	f001 fbdd 	bl	5a40 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4286:	68fb      	ldr	r3, [r7, #12]
    4288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    428a:	2b00      	cmp	r3, #0
    428c:	d03b      	beq.n	4306 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	68db      	ldr	r3, [r3, #12]
    4292:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	68b9      	ldr	r1, [r7, #8]
    4298:	f000 f96c 	bl	4574 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    429c:	683b      	ldr	r3, [r7, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d11c      	bne.n	42dc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42a6:	1e5a      	subs	r2, r3, #1
    42a8:	68fb      	ldr	r3, [r7, #12]
    42aa:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    42ac:	68fb      	ldr	r3, [r7, #12]
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d104      	bne.n	42be <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    42b4:	f001 fa5c 	bl	5770 <xTaskGetCurrentTaskHandle>
    42b8:	4602      	mov	r2, r0
    42ba:	68fb      	ldr	r3, [r7, #12]
    42bc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42be:	68fb      	ldr	r3, [r7, #12]
    42c0:	691b      	ldr	r3, [r3, #16]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d01b      	beq.n	42fe <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	3310      	adds	r3, #16
    42ca:	4618      	mov	r0, r3
    42cc:	f001 f82e 	bl	532c <xTaskRemoveFromEventList>
    42d0:	4603      	mov	r3, r0
    42d2:	2b01      	cmp	r3, #1
    42d4:	d113      	bne.n	42fe <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    42d6:	f001 fba5 	bl	5a24 <vPortYieldFromISR>
    42da:	e010      	b.n	42fe <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    42dc:	68fb      	ldr	r3, [r7, #12]
    42de:	69ba      	ldr	r2, [r7, #24]
    42e0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42e6:	2b00      	cmp	r3, #0
    42e8:	d009      	beq.n	42fe <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	3324      	adds	r3, #36	; 0x24
    42ee:	4618      	mov	r0, r3
    42f0:	f001 f81c 	bl	532c <xTaskRemoveFromEventList>
    42f4:	4603      	mov	r3, r0
    42f6:	2b00      	cmp	r3, #0
    42f8:	d001      	beq.n	42fe <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    42fa:	f001 fb93 	bl	5a24 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    42fe:	f001 fbb5 	bl	5a6c <vPortExitCritical>
				return pdPASS;
    4302:	2301      	movs	r3, #1
    4304:	e066      	b.n	43d4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	2b00      	cmp	r3, #0
    430a:	d103      	bne.n	4314 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    430c:	f001 fbae 	bl	5a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4310:	2300      	movs	r3, #0
    4312:	e05f      	b.n	43d4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4314:	69fb      	ldr	r3, [r7, #28]
    4316:	2b00      	cmp	r3, #0
    4318:	d106      	bne.n	4328 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    431a:	f107 0310 	add.w	r3, r7, #16
    431e:	4618      	mov	r0, r3
    4320:	f001 f85c 	bl	53dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4324:	2301      	movs	r3, #1
    4326:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4328:	f001 fba0 	bl	5a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    432c:	f000 fdaa 	bl	4e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4330:	f001 fb86 	bl	5a40 <vPortEnterCritical>
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4338:	f1b3 3fff 	cmp.w	r3, #4294967295
    433c:	d102      	bne.n	4344 <xQueueGenericReceive+0xd4>
    433e:	68fb      	ldr	r3, [r7, #12]
    4340:	2200      	movs	r2, #0
    4342:	645a      	str	r2, [r3, #68]	; 0x44
    4344:	68fb      	ldr	r3, [r7, #12]
    4346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4348:	f1b3 3fff 	cmp.w	r3, #4294967295
    434c:	d102      	bne.n	4354 <xQueueGenericReceive+0xe4>
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	2200      	movs	r2, #0
    4352:	649a      	str	r2, [r3, #72]	; 0x48
    4354:	f001 fb8a 	bl	5a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4358:	f107 0210 	add.w	r2, r7, #16
    435c:	1d3b      	adds	r3, r7, #4
    435e:	4610      	mov	r0, r2
    4360:	4619      	mov	r1, r3
    4362:	f001 f853 	bl	540c <xTaskCheckForTimeOut>
    4366:	4603      	mov	r3, r0
    4368:	2b00      	cmp	r3, #0
    436a:	d12b      	bne.n	43c4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    436c:	68f8      	ldr	r0, [r7, #12]
    436e:	f000 f973 	bl	4658 <prvIsQueueEmpty>
    4372:	4603      	mov	r3, r0
    4374:	2b00      	cmp	r3, #0
    4376:	d01f      	beq.n	43b8 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4378:	68fb      	ldr	r3, [r7, #12]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	2b00      	cmp	r3, #0
    437e:	d108      	bne.n	4392 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4380:	f001 fb5e 	bl	5a40 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	685b      	ldr	r3, [r3, #4]
    4388:	4618      	mov	r0, r3
    438a:	f001 fa01 	bl	5790 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    438e:	f001 fb6d 	bl	5a6c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	4610      	mov	r0, r2
    439c:	4619      	mov	r1, r3
    439e:	f000 ff8d 	bl	52bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    43a2:	68f8      	ldr	r0, [r7, #12]
    43a4:	f000 f90c 	bl	45c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    43a8:	f000 fd7e 	bl	4ea8 <xTaskResumeAll>
    43ac:	4603      	mov	r3, r0
    43ae:	2b00      	cmp	r3, #0
    43b0:	d10f      	bne.n	43d2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    43b2:	f001 fb37 	bl	5a24 <vPortYieldFromISR>
    43b6:	e00c      	b.n	43d2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    43b8:	68f8      	ldr	r0, [r7, #12]
    43ba:	f000 f901 	bl	45c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    43be:	f000 fd73 	bl	4ea8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    43c2:	e75e      	b.n	4282 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    43c4:	68f8      	ldr	r0, [r7, #12]
    43c6:	f000 f8fb 	bl	45c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    43ca:	f000 fd6d 	bl	4ea8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    43ce:	2300      	movs	r3, #0
    43d0:	e000      	b.n	43d4 <xQueueGenericReceive+0x164>
		}
	}
    43d2:	e756      	b.n	4282 <xQueueGenericReceive+0x12>
}
    43d4:	4618      	mov	r0, r3
    43d6:	3720      	adds	r7, #32
    43d8:	46bd      	mov	sp, r7
    43da:	bd80      	pop	{r7, pc}

000043dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    43dc:	b580      	push	{r7, lr}
    43de:	b086      	sub	sp, #24
    43e0:	af00      	add	r7, sp, #0
    43e2:	60f8      	str	r0, [r7, #12]
    43e4:	60b9      	str	r1, [r7, #8]
    43e6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    43e8:	2300      	movs	r3, #0
    43ea:	613b      	str	r3, [r7, #16]
    43ec:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    43f0:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    43f8:	2b00      	cmp	r3, #0
    43fa:	d025      	beq.n	4448 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    43fc:	68f8      	ldr	r0, [r7, #12]
    43fe:	68b9      	ldr	r1, [r7, #8]
    4400:	f000 f8b8 	bl	4574 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4408:	1e5a      	subs	r2, r3, #1
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    440e:	68fb      	ldr	r3, [r7, #12]
    4410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4412:	f1b3 3fff 	cmp.w	r3, #4294967295
    4416:	d10f      	bne.n	4438 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	691b      	ldr	r3, [r3, #16]
    441c:	2b00      	cmp	r3, #0
    441e:	d010      	beq.n	4442 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	3310      	adds	r3, #16
    4424:	4618      	mov	r0, r3
    4426:	f000 ff81 	bl	532c <xTaskRemoveFromEventList>
    442a:	4603      	mov	r3, r0
    442c:	2b00      	cmp	r3, #0
    442e:	d008      	beq.n	4442 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	2201      	movs	r2, #1
    4434:	601a      	str	r2, [r3, #0]
    4436:	e004      	b.n	4442 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    443c:	1c5a      	adds	r2, r3, #1
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4442:	2301      	movs	r3, #1
    4444:	617b      	str	r3, [r7, #20]
    4446:	e001      	b.n	444c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4448:	2300      	movs	r3, #0
    444a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    444c:	f04f 0000 	mov.w	r0, #0
    4450:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4454:	697b      	ldr	r3, [r7, #20]
}
    4456:	4618      	mov	r0, r3
    4458:	3718      	adds	r7, #24
    445a:	46bd      	mov	sp, r7
    445c:	bd80      	pop	{r7, pc}
    445e:	bf00      	nop

00004460 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4460:	b580      	push	{r7, lr}
    4462:	b084      	sub	sp, #16
    4464:	af00      	add	r7, sp, #0
    4466:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4468:	f001 faea 	bl	5a40 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4470:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4472:	f001 fafb 	bl	5a6c <vPortExitCritical>

	return uxReturn;
    4476:	68fb      	ldr	r3, [r7, #12]
}
    4478:	4618      	mov	r0, r3
    447a:	3710      	adds	r7, #16
    447c:	46bd      	mov	sp, r7
    447e:	bd80      	pop	{r7, pc}

00004480 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4480:	b480      	push	{r7}
    4482:	b085      	sub	sp, #20
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    448c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    448e:	68fb      	ldr	r3, [r7, #12]
}
    4490:	4618      	mov	r0, r3
    4492:	3714      	adds	r7, #20
    4494:	46bd      	mov	sp, r7
    4496:	f85d 7b04 	ldr.w	r7, [sp], #4
    449a:	4770      	bx	lr

0000449c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    449c:	b580      	push	{r7, lr}
    449e:	b082      	sub	sp, #8
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	4618      	mov	r0, r3
    44aa:	f001 fc05 	bl	5cb8 <vPortFree>
	vPortFree( pxQueue );
    44ae:	6878      	ldr	r0, [r7, #4]
    44b0:	f001 fc02 	bl	5cb8 <vPortFree>
}
    44b4:	3708      	adds	r7, #8
    44b6:	46bd      	mov	sp, r7
    44b8:	bd80      	pop	{r7, pc}
    44ba:	bf00      	nop

000044bc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    44bc:	b580      	push	{r7, lr}
    44be:	b084      	sub	sp, #16
    44c0:	af00      	add	r7, sp, #0
    44c2:	60f8      	str	r0, [r7, #12]
    44c4:	60b9      	str	r1, [r7, #8]
    44c6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    44c8:	68fb      	ldr	r3, [r7, #12]
    44ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44cc:	2b00      	cmp	r3, #0
    44ce:	d10c      	bne.n	44ea <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	681b      	ldr	r3, [r3, #0]
    44d4:	2b00      	cmp	r3, #0
    44d6:	d145      	bne.n	4564 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	685b      	ldr	r3, [r3, #4]
    44dc:	4618      	mov	r0, r3
    44de:	f001 f9bb 	bl	5858 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	2200      	movs	r2, #0
    44e6:	605a      	str	r2, [r3, #4]
    44e8:	e03c      	b.n	4564 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d11a      	bne.n	4526 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	689a      	ldr	r2, [r3, #8]
    44f4:	68fb      	ldr	r3, [r7, #12]
    44f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44f8:	4610      	mov	r0, r2
    44fa:	68b9      	ldr	r1, [r7, #8]
    44fc:	461a      	mov	r2, r3
    44fe:	f013 ffff 	bl	18500 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4502:	68fb      	ldr	r3, [r7, #12]
    4504:	689a      	ldr	r2, [r3, #8]
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    450a:	441a      	add	r2, r3
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	689a      	ldr	r2, [r3, #8]
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	685b      	ldr	r3, [r3, #4]
    4518:	429a      	cmp	r2, r3
    451a:	d323      	bcc.n	4564 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	681a      	ldr	r2, [r3, #0]
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	609a      	str	r2, [r3, #8]
    4524:	e01e      	b.n	4564 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	68da      	ldr	r2, [r3, #12]
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    452e:	4610      	mov	r0, r2
    4530:	68b9      	ldr	r1, [r7, #8]
    4532:	461a      	mov	r2, r3
    4534:	f013 ffe4 	bl	18500 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4538:	68fb      	ldr	r3, [r7, #12]
    453a:	68da      	ldr	r2, [r3, #12]
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4540:	425b      	negs	r3, r3
    4542:	441a      	add	r2, r3
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	68da      	ldr	r2, [r3, #12]
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	429a      	cmp	r2, r3
    4552:	d207      	bcs.n	4564 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	685a      	ldr	r2, [r3, #4]
    4558:	68fb      	ldr	r3, [r7, #12]
    455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    455c:	425b      	negs	r3, r3
    455e:	441a      	add	r2, r3
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4564:	68fb      	ldr	r3, [r7, #12]
    4566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4568:	1c5a      	adds	r2, r3, #1
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	639a      	str	r2, [r3, #56]	; 0x38
}
    456e:	3710      	adds	r7, #16
    4570:	46bd      	mov	sp, r7
    4572:	bd80      	pop	{r7, pc}

00004574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4574:	b580      	push	{r7, lr}
    4576:	b082      	sub	sp, #8
    4578:	af00      	add	r7, sp, #0
    457a:	6078      	str	r0, [r7, #4]
    457c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	681b      	ldr	r3, [r3, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	d019      	beq.n	45ba <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	68da      	ldr	r2, [r3, #12]
    458a:	687b      	ldr	r3, [r7, #4]
    458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    458e:	441a      	add	r2, r3
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	68da      	ldr	r2, [r3, #12]
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	685b      	ldr	r3, [r3, #4]
    459c:	429a      	cmp	r2, r3
    459e:	d303      	bcc.n	45a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	681a      	ldr	r2, [r3, #0]
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	68da      	ldr	r2, [r3, #12]
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45b0:	6838      	ldr	r0, [r7, #0]
    45b2:	4611      	mov	r1, r2
    45b4:	461a      	mov	r2, r3
    45b6:	f013 ffa3 	bl	18500 <memcpy>
	}
}
    45ba:	3708      	adds	r7, #8
    45bc:	46bd      	mov	sp, r7
    45be:	bd80      	pop	{r7, pc}

000045c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b082      	sub	sp, #8
    45c4:	af00      	add	r7, sp, #0
    45c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    45c8:	f001 fa3a 	bl	5a40 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    45cc:	e014      	b.n	45f8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45d2:	2b00      	cmp	r3, #0
    45d4:	d00f      	beq.n	45f6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	3324      	adds	r3, #36	; 0x24
    45da:	4618      	mov	r0, r3
    45dc:	f000 fea6 	bl	532c <xTaskRemoveFromEventList>
    45e0:	4603      	mov	r3, r0
    45e2:	2b00      	cmp	r3, #0
    45e4:	d001      	beq.n	45ea <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    45e6:	f000 ff5d 	bl	54a4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45ee:	1e5a      	subs	r2, r3, #1
    45f0:	687b      	ldr	r3, [r7, #4]
    45f2:	649a      	str	r2, [r3, #72]	; 0x48
    45f4:	e000      	b.n	45f8 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    45f6:	e003      	b.n	4600 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45fc:	2b00      	cmp	r3, #0
    45fe:	dce6      	bgt.n	45ce <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	f04f 32ff 	mov.w	r2, #4294967295
    4606:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4608:	f001 fa30 	bl	5a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    460c:	f001 fa18 	bl	5a40 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4610:	e014      	b.n	463c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	691b      	ldr	r3, [r3, #16]
    4616:	2b00      	cmp	r3, #0
    4618:	d00f      	beq.n	463a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	3310      	adds	r3, #16
    461e:	4618      	mov	r0, r3
    4620:	f000 fe84 	bl	532c <xTaskRemoveFromEventList>
    4624:	4603      	mov	r3, r0
    4626:	2b00      	cmp	r3, #0
    4628:	d001      	beq.n	462e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    462a:	f000 ff3b 	bl	54a4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4632:	1e5a      	subs	r2, r3, #1
    4634:	687b      	ldr	r3, [r7, #4]
    4636:	645a      	str	r2, [r3, #68]	; 0x44
    4638:	e000      	b.n	463c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    463a:	e003      	b.n	4644 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4640:	2b00      	cmp	r3, #0
    4642:	dce6      	bgt.n	4612 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	f04f 32ff 	mov.w	r2, #4294967295
    464a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    464c:	f001 fa0e 	bl	5a6c <vPortExitCritical>
}
    4650:	3708      	adds	r7, #8
    4652:	46bd      	mov	sp, r7
    4654:	bd80      	pop	{r7, pc}
    4656:	bf00      	nop

00004658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4658:	b580      	push	{r7, lr}
    465a:	b084      	sub	sp, #16
    465c:	af00      	add	r7, sp, #0
    465e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4660:	f001 f9ee 	bl	5a40 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4668:	2b00      	cmp	r3, #0
    466a:	bf14      	ite	ne
    466c:	2300      	movne	r3, #0
    466e:	2301      	moveq	r3, #1
    4670:	b2db      	uxtb	r3, r3
    4672:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4674:	f001 f9fa 	bl	5a6c <vPortExitCritical>

	return xReturn;
    4678:	68fb      	ldr	r3, [r7, #12]
}
    467a:	4618      	mov	r0, r3
    467c:	3710      	adds	r7, #16
    467e:	46bd      	mov	sp, r7
    4680:	bd80      	pop	{r7, pc}
    4682:	bf00      	nop

00004684 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4684:	b480      	push	{r7}
    4686:	b085      	sub	sp, #20
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4690:	2b00      	cmp	r3, #0
    4692:	bf14      	ite	ne
    4694:	2300      	movne	r3, #0
    4696:	2301      	moveq	r3, #1
    4698:	b2db      	uxtb	r3, r3
    469a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    469c:	68fb      	ldr	r3, [r7, #12]
}
    469e:	4618      	mov	r0, r3
    46a0:	3714      	adds	r7, #20
    46a2:	46bd      	mov	sp, r7
    46a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a8:	4770      	bx	lr
    46aa:	bf00      	nop

000046ac <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b084      	sub	sp, #16
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    46b4:	f001 f9c4 	bl	5a40 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    46c0:	429a      	cmp	r2, r3
    46c2:	bf14      	ite	ne
    46c4:	2300      	movne	r3, #0
    46c6:	2301      	moveq	r3, #1
    46c8:	b2db      	uxtb	r3, r3
    46ca:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    46cc:	f001 f9ce 	bl	5a6c <vPortExitCritical>

	return xReturn;
    46d0:	68fb      	ldr	r3, [r7, #12]
}
    46d2:	4618      	mov	r0, r3
    46d4:	3710      	adds	r7, #16
    46d6:	46bd      	mov	sp, r7
    46d8:	bd80      	pop	{r7, pc}
    46da:	bf00      	nop

000046dc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    46dc:	b480      	push	{r7}
    46de:	b085      	sub	sp, #20
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    46ec:	429a      	cmp	r2, r3
    46ee:	bf14      	ite	ne
    46f0:	2300      	movne	r3, #0
    46f2:	2301      	moveq	r3, #1
    46f4:	b2db      	uxtb	r3, r3
    46f6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    46f8:	68fb      	ldr	r3, [r7, #12]
}
    46fa:	4618      	mov	r0, r3
    46fc:	3714      	adds	r7, #20
    46fe:	46bd      	mov	sp, r7
    4700:	f85d 7b04 	ldr.w	r7, [sp], #4
    4704:	4770      	bx	lr
    4706:	bf00      	nop

00004708 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4708:	b580      	push	{r7, lr}
    470a:	b08a      	sub	sp, #40	; 0x28
    470c:	af02      	add	r7, sp, #8
    470e:	60f8      	str	r0, [r7, #12]
    4710:	60b9      	str	r1, [r7, #8]
    4712:	603b      	str	r3, [r7, #0]
    4714:	4613      	mov	r3, r2
    4716:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4718:	88fb      	ldrh	r3, [r7, #6]
    471a:	4618      	mov	r0, r3
    471c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    471e:	f000 ffe5 	bl	56ec <prvAllocateTCBAndStack>
    4722:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4724:	69bb      	ldr	r3, [r7, #24]
    4726:	2b00      	cmp	r3, #0
    4728:	f000 80a1 	beq.w	486e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    472c:	69bb      	ldr	r3, [r7, #24]
    472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4730:	88fb      	ldrh	r3, [r7, #6]
    4732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4736:	3b01      	subs	r3, #1
    4738:	009b      	lsls	r3, r3, #2
    473a:	4413      	add	r3, r2
    473c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    473e:	697b      	ldr	r3, [r7, #20]
    4740:	f023 0307 	bic.w	r3, r3, #7
    4744:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4746:	88fb      	ldrh	r3, [r7, #6]
    4748:	9300      	str	r3, [sp, #0]
    474a:	69b8      	ldr	r0, [r7, #24]
    474c:	68b9      	ldr	r1, [r7, #8]
    474e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4752:	f000 febd 	bl	54d0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4756:	6978      	ldr	r0, [r7, #20]
    4758:	68f9      	ldr	r1, [r7, #12]
    475a:	683a      	ldr	r2, [r7, #0]
    475c:	f001 f8f2 	bl	5944 <pxPortInitialiseStack>
    4760:	4602      	mov	r2, r0
    4762:	69bb      	ldr	r3, [r7, #24]
    4764:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4768:	2b00      	cmp	r3, #0
    476a:	d002      	beq.n	4772 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    476e:	69ba      	ldr	r2, [r7, #24]
    4770:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4772:	f001 f965 	bl	5a40 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4776:	f640 636c 	movw	r3, #3692	; 0xe6c
    477a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    477e:	681b      	ldr	r3, [r3, #0]
    4780:	1c5a      	adds	r2, r3, #1
    4782:	f640 636c 	movw	r3, #3692	; 0xe6c
    4786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    478a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    478c:	f640 4368 	movw	r3, #3176	; 0xc68
    4790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	2b00      	cmp	r3, #0
    4798:	d10f      	bne.n	47ba <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    479a:	f640 4368 	movw	r3, #3176	; 0xc68
    479e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a2:	69ba      	ldr	r2, [r7, #24]
    47a4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    47a6:	f640 636c 	movw	r3, #3692	; 0xe6c
    47aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	2b01      	cmp	r3, #1
    47b2:	d118      	bne.n	47e6 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    47b4:	f000 fec2 	bl	553c <prvInitialiseTaskLists>
    47b8:	e015      	b.n	47e6 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    47ba:	f640 637c 	movw	r3, #3708	; 0xe7c
    47be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d10e      	bne.n	47e6 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    47c8:	f640 4368 	movw	r3, #3176	; 0xc68
    47cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47d6:	429a      	cmp	r2, r3
    47d8:	d805      	bhi.n	47e6 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    47da:	f640 4368 	movw	r3, #3176	; 0xc68
    47de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e2:	69ba      	ldr	r2, [r7, #24]
    47e4:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    47e6:	69bb      	ldr	r3, [r7, #24]
    47e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47ea:	f640 6374 	movw	r3, #3700	; 0xe74
    47ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	429a      	cmp	r2, r3
    47f6:	d906      	bls.n	4806 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    47f8:	69bb      	ldr	r3, [r7, #24]
    47fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47fc:	f640 6374 	movw	r3, #3700	; 0xe74
    4800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4804:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4806:	f640 6390 	movw	r3, #3728	; 0xe90
    480a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	1c5a      	adds	r2, r3, #1
    4812:	f640 6390 	movw	r3, #3728	; 0xe90
    4816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    481a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    481c:	69bb      	ldr	r3, [r7, #24]
    481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4820:	f640 6378 	movw	r3, #3704	; 0xe78
    4824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	429a      	cmp	r2, r3
    482c:	d906      	bls.n	483c <xTaskGenericCreate+0x134>
    482e:	69bb      	ldr	r3, [r7, #24]
    4830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4832:	f640 6378 	movw	r3, #3704	; 0xe78
    4836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483a:	601a      	str	r2, [r3, #0]
    483c:	69bb      	ldr	r3, [r7, #24]
    483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4840:	4613      	mov	r3, r2
    4842:	009b      	lsls	r3, r3, #2
    4844:	4413      	add	r3, r2
    4846:	009b      	lsls	r3, r3, #2
    4848:	f640 426c 	movw	r2, #3180	; 0xc6c
    484c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4850:	441a      	add	r2, r3
    4852:	69bb      	ldr	r3, [r7, #24]
    4854:	3304      	adds	r3, #4
    4856:	4610      	mov	r0, r2
    4858:	4619      	mov	r1, r3
    485a:	f7ff fadf 	bl	3e1c <vListInsertEnd>

			xReturn = pdPASS;
    485e:	2301      	movs	r3, #1
    4860:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4862:	69b8      	ldr	r0, [r7, #24]
    4864:	f012 fdc0 	bl	173e8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4868:	f001 f900 	bl	5a6c <vPortExitCritical>
    486c:	e002      	b.n	4874 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    486e:	f04f 33ff 	mov.w	r3, #4294967295
    4872:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4874:	69fb      	ldr	r3, [r7, #28]
    4876:	2b01      	cmp	r3, #1
    4878:	d111      	bne.n	489e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    487a:	f640 637c 	movw	r3, #3708	; 0xe7c
    487e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	d00a      	beq.n	489e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4888:	f640 4368 	movw	r3, #3176	; 0xc68
    488c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4894:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4896:	429a      	cmp	r2, r3
    4898:	d201      	bcs.n	489e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    489a:	f001 f8c3 	bl	5a24 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    489e:	69fb      	ldr	r3, [r7, #28]
}
    48a0:	4618      	mov	r0, r3
    48a2:	3720      	adds	r7, #32
    48a4:	46bd      	mov	sp, r7
    48a6:	bd80      	pop	{r7, pc}

000048a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    48a8:	b580      	push	{r7, lr}
    48aa:	b084      	sub	sp, #16
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    48b0:	f001 f8c6 	bl	5a40 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    48b4:	f640 4368 	movw	r3, #3176	; 0xc68
    48b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48bc:	681b      	ldr	r3, [r3, #0]
    48be:	687a      	ldr	r2, [r7, #4]
    48c0:	429a      	cmp	r2, r3
    48c2:	d101      	bne.n	48c8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    48c4:	2300      	movs	r3, #0
    48c6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d105      	bne.n	48da <vTaskDelete+0x32>
    48ce:	f640 4368 	movw	r3, #3176	; 0xc68
    48d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	e000      	b.n	48dc <vTaskDelete+0x34>
    48da:	687b      	ldr	r3, [r7, #4]
    48dc:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	3304      	adds	r3, #4
    48e2:	4618      	mov	r0, r3
    48e4:	f7ff fafa 	bl	3edc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ec:	2b00      	cmp	r3, #0
    48ee:	d004      	beq.n	48fa <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	3318      	adds	r3, #24
    48f4:	4618      	mov	r0, r3
    48f6:	f7ff faf1 	bl	3edc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	3304      	adds	r3, #4
    48fe:	f640 6040 	movw	r0, #3648	; 0xe40
    4902:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4906:	4619      	mov	r1, r3
    4908:	f7ff fa88 	bl	3e1c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    490c:	f640 6354 	movw	r3, #3668	; 0xe54
    4910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	1c5a      	adds	r2, r3, #1
    4918:	f640 6354 	movw	r3, #3668	; 0xe54
    491c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4920:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4922:	f640 6390 	movw	r3, #3728	; 0xe90
    4926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	1c5a      	adds	r2, r3, #1
    492e:	f640 6390 	movw	r3, #3728	; 0xe90
    4932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4936:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4938:	f001 f898 	bl	5a6c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    493c:	f640 637c 	movw	r3, #3708	; 0xe7c
    4940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4944:	681b      	ldr	r3, [r3, #0]
    4946:	2b00      	cmp	r3, #0
    4948:	d004      	beq.n	4954 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	2b00      	cmp	r3, #0
    494e:	d101      	bne.n	4954 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4950:	f001 f868 	bl	5a24 <vPortYieldFromISR>
			}
		}
	}
    4954:	3710      	adds	r7, #16
    4956:	46bd      	mov	sp, r7
    4958:	bd80      	pop	{r7, pc}
    495a:	bf00      	nop

0000495c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    495c:	b580      	push	{r7, lr}
    495e:	b086      	sub	sp, #24
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
    4964:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4966:	2300      	movs	r3, #0
    4968:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    496a:	f000 fa8b 	bl	4e84 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    496e:	687b      	ldr	r3, [r7, #4]
    4970:	681a      	ldr	r2, [r3, #0]
    4972:	683b      	ldr	r3, [r7, #0]
    4974:	4413      	add	r3, r2
    4976:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	681a      	ldr	r2, [r3, #0]
    497c:	f640 6370 	movw	r3, #3696	; 0xe70
    4980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	429a      	cmp	r2, r3
    4988:	d90f      	bls.n	49aa <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	681a      	ldr	r2, [r3, #0]
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	429a      	cmp	r2, r3
    4992:	d919      	bls.n	49c8 <vTaskDelayUntil+0x6c>
    4994:	f640 6370 	movw	r3, #3696	; 0xe70
    4998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	693a      	ldr	r2, [r7, #16]
    49a0:	429a      	cmp	r2, r3
    49a2:	d911      	bls.n	49c8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    49a4:	2301      	movs	r3, #1
    49a6:	617b      	str	r3, [r7, #20]
    49a8:	e00e      	b.n	49c8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	681a      	ldr	r2, [r3, #0]
    49ae:	693b      	ldr	r3, [r7, #16]
    49b0:	429a      	cmp	r2, r3
    49b2:	d807      	bhi.n	49c4 <vTaskDelayUntil+0x68>
    49b4:	f640 6370 	movw	r3, #3696	; 0xe70
    49b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	693a      	ldr	r2, [r7, #16]
    49c0:	429a      	cmp	r2, r3
    49c2:	d901      	bls.n	49c8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    49c4:	2301      	movs	r3, #1
    49c6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	693a      	ldr	r2, [r7, #16]
    49cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    49ce:	697b      	ldr	r3, [r7, #20]
    49d0:	2b00      	cmp	r3, #0
    49d2:	d00b      	beq.n	49ec <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    49d4:	f640 4368 	movw	r3, #3176	; 0xc68
    49d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	3304      	adds	r3, #4
    49e0:	4618      	mov	r0, r3
    49e2:	f7ff fa7b 	bl	3edc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    49e6:	6938      	ldr	r0, [r7, #16]
    49e8:	f000 fe3c 	bl	5664 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    49ec:	f000 fa5c 	bl	4ea8 <xTaskResumeAll>
    49f0:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    49f2:	68fb      	ldr	r3, [r7, #12]
    49f4:	2b00      	cmp	r3, #0
    49f6:	d101      	bne.n	49fc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    49f8:	f001 f814 	bl	5a24 <vPortYieldFromISR>
		}
	}
    49fc:	3718      	adds	r7, #24
    49fe:	46bd      	mov	sp, r7
    4a00:	bd80      	pop	{r7, pc}
    4a02:	bf00      	nop

00004a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4a04:	b580      	push	{r7, lr}
    4a06:	b084      	sub	sp, #16
    4a08:	af00      	add	r7, sp, #0
    4a0a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4a0c:	2300      	movs	r3, #0
    4a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d018      	beq.n	4a48 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4a16:	f000 fa35 	bl	4e84 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4a1a:	f640 6370 	movw	r3, #3696	; 0xe70
    4a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a22:	681a      	ldr	r2, [r3, #0]
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	4413      	add	r3, r2
    4a28:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4a2a:	f640 4368 	movw	r3, #3176	; 0xc68
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	3304      	adds	r3, #4
    4a36:	4618      	mov	r0, r3
    4a38:	f7ff fa50 	bl	3edc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4a3c:	68b8      	ldr	r0, [r7, #8]
    4a3e:	f000 fe11 	bl	5664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4a42:	f000 fa31 	bl	4ea8 <xTaskResumeAll>
    4a46:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4a48:	68fb      	ldr	r3, [r7, #12]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d101      	bne.n	4a52 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4a4e:	f000 ffe9 	bl	5a24 <vPortYieldFromISR>
		}
	}
    4a52:	3710      	adds	r7, #16
    4a54:	46bd      	mov	sp, r7
    4a56:	bd80      	pop	{r7, pc}

00004a58 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4a58:	b580      	push	{r7, lr}
    4a5a:	b084      	sub	sp, #16
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4a60:	f000 ffee 	bl	5a40 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d105      	bne.n	4a76 <uxTaskPriorityGet+0x1e>
    4a6a:	f640 4368 	movw	r3, #3176	; 0xc68
    4a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	e000      	b.n	4a78 <uxTaskPriorityGet+0x20>
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4a7a:	68fb      	ldr	r3, [r7, #12]
    4a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a7e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4a80:	f000 fff4 	bl	5a6c <vPortExitCritical>

		return uxReturn;
    4a84:	68bb      	ldr	r3, [r7, #8]
	}
    4a86:	4618      	mov	r0, r3
    4a88:	3710      	adds	r7, #16
    4a8a:	46bd      	mov	sp, r7
    4a8c:	bd80      	pop	{r7, pc}
    4a8e:	bf00      	nop

00004a90 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4a90:	b580      	push	{r7, lr}
    4a92:	b086      	sub	sp, #24
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
    4a98:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4a9a:	2300      	movs	r3, #0
    4a9c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4a9e:	683b      	ldr	r3, [r7, #0]
    4aa0:	2b13      	cmp	r3, #19
    4aa2:	d901      	bls.n	4aa8 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4aa4:	2313      	movs	r3, #19
    4aa6:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4aa8:	f000 ffca 	bl	5a40 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4aac:	f640 4368 	movw	r3, #3176	; 0xc68
    4ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	687a      	ldr	r2, [r7, #4]
    4ab8:	429a      	cmp	r2, r3
    4aba:	d101      	bne.n	4ac0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4abc:	2300      	movs	r3, #0
    4abe:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d105      	bne.n	4ad2 <vTaskPrioritySet+0x42>
    4ac6:	f640 4368 	movw	r3, #3176	; 0xc68
    4aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ace:	681b      	ldr	r3, [r3, #0]
    4ad0:	e000      	b.n	4ad4 <vTaskPrioritySet+0x44>
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4ad6:	693b      	ldr	r3, [r7, #16]
    4ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4ada:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4adc:	68fa      	ldr	r2, [r7, #12]
    4ade:	683b      	ldr	r3, [r7, #0]
    4ae0:	429a      	cmp	r2, r3
    4ae2:	d058      	beq.n	4b96 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4ae4:	683a      	ldr	r2, [r7, #0]
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	429a      	cmp	r2, r3
    4aea:	d905      	bls.n	4af8 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d007      	beq.n	4b02 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4af2:	2301      	movs	r3, #1
    4af4:	617b      	str	r3, [r7, #20]
    4af6:	e004      	b.n	4b02 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4af8:	687b      	ldr	r3, [r7, #4]
    4afa:	2b00      	cmp	r3, #0
    4afc:	d101      	bne.n	4b02 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4afe:	2301      	movs	r3, #1
    4b00:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4b02:	693b      	ldr	r3, [r7, #16]
    4b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4b06:	693b      	ldr	r3, [r7, #16]
    4b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b0a:	429a      	cmp	r2, r3
    4b0c:	d102      	bne.n	4b14 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4b0e:	693b      	ldr	r3, [r7, #16]
    4b10:	683a      	ldr	r2, [r7, #0]
    4b12:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4b14:	693b      	ldr	r3, [r7, #16]
    4b16:	683a      	ldr	r2, [r7, #0]
    4b18:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4b1a:	683b      	ldr	r3, [r7, #0]
    4b1c:	f1c3 0214 	rsb	r2, r3, #20
    4b20:	693b      	ldr	r3, [r7, #16]
    4b22:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4b24:	693b      	ldr	r3, [r7, #16]
    4b26:	6959      	ldr	r1, [r3, #20]
    4b28:	68fa      	ldr	r2, [r7, #12]
    4b2a:	4613      	mov	r3, r2
    4b2c:	009b      	lsls	r3, r3, #2
    4b2e:	4413      	add	r3, r2
    4b30:	009b      	lsls	r3, r3, #2
    4b32:	f640 426c 	movw	r2, #3180	; 0xc6c
    4b36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b3a:	4413      	add	r3, r2
    4b3c:	4299      	cmp	r1, r3
    4b3e:	d125      	bne.n	4b8c <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4b40:	693b      	ldr	r3, [r7, #16]
    4b42:	3304      	adds	r3, #4
    4b44:	4618      	mov	r0, r3
    4b46:	f7ff f9c9 	bl	3edc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4b4a:	693b      	ldr	r3, [r7, #16]
    4b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b4e:	f640 6378 	movw	r3, #3704	; 0xe78
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	429a      	cmp	r2, r3
    4b5a:	d906      	bls.n	4b6a <vTaskPrioritySet+0xda>
    4b5c:	693b      	ldr	r3, [r7, #16]
    4b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b60:	f640 6378 	movw	r3, #3704	; 0xe78
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	601a      	str	r2, [r3, #0]
    4b6a:	693b      	ldr	r3, [r7, #16]
    4b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b6e:	4613      	mov	r3, r2
    4b70:	009b      	lsls	r3, r3, #2
    4b72:	4413      	add	r3, r2
    4b74:	009b      	lsls	r3, r3, #2
    4b76:	f640 426c 	movw	r2, #3180	; 0xc6c
    4b7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b7e:	441a      	add	r2, r3
    4b80:	693b      	ldr	r3, [r7, #16]
    4b82:	3304      	adds	r3, #4
    4b84:	4610      	mov	r0, r2
    4b86:	4619      	mov	r1, r3
    4b88:	f7ff f948 	bl	3e1c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4b8c:	697b      	ldr	r3, [r7, #20]
    4b8e:	2b01      	cmp	r3, #1
    4b90:	d101      	bne.n	4b96 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4b92:	f000 ff47 	bl	5a24 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4b96:	f000 ff69 	bl	5a6c <vPortExitCritical>
	}
    4b9a:	3718      	adds	r7, #24
    4b9c:	46bd      	mov	sp, r7
    4b9e:	bd80      	pop	{r7, pc}

00004ba0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b084      	sub	sp, #16
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ba8:	f000 ff4a 	bl	5a40 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4bac:	f640 4368 	movw	r3, #3176	; 0xc68
    4bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb4:	681b      	ldr	r3, [r3, #0]
    4bb6:	687a      	ldr	r2, [r7, #4]
    4bb8:	429a      	cmp	r2, r3
    4bba:	d101      	bne.n	4bc0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4bbc:	2300      	movs	r3, #0
    4bbe:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d105      	bne.n	4bd2 <vTaskSuspend+0x32>
    4bc6:	f640 4368 	movw	r3, #3176	; 0xc68
    4bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bce:	681b      	ldr	r3, [r3, #0]
    4bd0:	e000      	b.n	4bd4 <vTaskSuspend+0x34>
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	3304      	adds	r3, #4
    4bda:	4618      	mov	r0, r3
    4bdc:	f7ff f97e 	bl	3edc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4be0:	68fb      	ldr	r3, [r7, #12]
    4be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4be4:	2b00      	cmp	r3, #0
    4be6:	d004      	beq.n	4bf2 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4be8:	68fb      	ldr	r3, [r7, #12]
    4bea:	3318      	adds	r3, #24
    4bec:	4618      	mov	r0, r3
    4bee:	f7ff f975 	bl	3edc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4bf2:	68fb      	ldr	r3, [r7, #12]
    4bf4:	3304      	adds	r3, #4
    4bf6:	f640 6058 	movw	r0, #3672	; 0xe58
    4bfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4bfe:	4619      	mov	r1, r3
    4c00:	f7ff f90c 	bl	3e1c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4c04:	f000 ff32 	bl	5a6c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d11e      	bne.n	4c4c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4c0e:	f640 637c 	movw	r3, #3708	; 0xe7c
    4c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d002      	beq.n	4c22 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4c1c:	f000 ff02 	bl	5a24 <vPortYieldFromISR>
    4c20:	e014      	b.n	4c4c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4c22:	f640 6358 	movw	r3, #3672	; 0xe58
    4c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c2a:	681a      	ldr	r2, [r3, #0]
    4c2c:	f640 636c 	movw	r3, #3692	; 0xe6c
    4c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	429a      	cmp	r2, r3
    4c38:	d106      	bne.n	4c48 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4c3a:	f640 4368 	movw	r3, #3176	; 0xc68
    4c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c42:	2200      	movs	r2, #0
    4c44:	601a      	str	r2, [r3, #0]
    4c46:	e001      	b.n	4c4c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4c48:	f000 fadc 	bl	5204 <vTaskSwitchContext>
				}
			}
		}
	}
    4c4c:	3710      	adds	r7, #16
    4c4e:	46bd      	mov	sp, r7
    4c50:	bd80      	pop	{r7, pc}
    4c52:	bf00      	nop

00004c54 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4c54:	b480      	push	{r7}
    4c56:	b085      	sub	sp, #20
    4c58:	af00      	add	r7, sp, #0
    4c5a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4c5c:	2300      	movs	r3, #0
    4c5e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	695a      	ldr	r2, [r3, #20]
    4c68:	f640 6358 	movw	r3, #3672	; 0xe58
    4c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c70:	429a      	cmp	r2, r3
    4c72:	d10d      	bne.n	4c90 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4c74:	68bb      	ldr	r3, [r7, #8]
    4c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c78:	f640 632c 	movw	r3, #3628	; 0xe2c
    4c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c80:	429a      	cmp	r2, r3
    4c82:	d005      	beq.n	4c90 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4c84:	68bb      	ldr	r3, [r7, #8]
    4c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d101      	bne.n	4c90 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4c8c:	2301      	movs	r3, #1
    4c8e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4c90:	68fb      	ldr	r3, [r7, #12]
	}
    4c92:	4618      	mov	r0, r3
    4c94:	3714      	adds	r7, #20
    4c96:	46bd      	mov	sp, r7
    4c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9c:	4770      	bx	lr
    4c9e:	bf00      	nop

00004ca0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4cac:	68fb      	ldr	r3, [r7, #12]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d043      	beq.n	4d3a <vTaskResume+0x9a>
    4cb2:	f640 4368 	movw	r3, #3176	; 0xc68
    4cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cba:	681b      	ldr	r3, [r3, #0]
    4cbc:	68fa      	ldr	r2, [r7, #12]
    4cbe:	429a      	cmp	r2, r3
    4cc0:	d03b      	beq.n	4d3a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4cc2:	f000 febd 	bl	5a40 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4cc6:	68f8      	ldr	r0, [r7, #12]
    4cc8:	f7ff ffc4 	bl	4c54 <xTaskIsTaskSuspended>
    4ccc:	4603      	mov	r3, r0
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d131      	bne.n	4d36 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4cd2:	68fb      	ldr	r3, [r7, #12]
    4cd4:	3304      	adds	r3, #4
    4cd6:	4618      	mov	r0, r3
    4cd8:	f7ff f900 	bl	3edc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ce0:	f640 6378 	movw	r3, #3704	; 0xe78
    4ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	429a      	cmp	r2, r3
    4cec:	d906      	bls.n	4cfc <vTaskResume+0x5c>
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cf2:	f640 6378 	movw	r3, #3704	; 0xe78
    4cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfa:	601a      	str	r2, [r3, #0]
    4cfc:	68fb      	ldr	r3, [r7, #12]
    4cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d00:	4613      	mov	r3, r2
    4d02:	009b      	lsls	r3, r3, #2
    4d04:	4413      	add	r3, r2
    4d06:	009b      	lsls	r3, r3, #2
    4d08:	f640 426c 	movw	r2, #3180	; 0xc6c
    4d0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d10:	441a      	add	r2, r3
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	3304      	adds	r3, #4
    4d16:	4610      	mov	r0, r2
    4d18:	4619      	mov	r1, r3
    4d1a:	f7ff f87f 	bl	3e1c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d1e:	68fb      	ldr	r3, [r7, #12]
    4d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d22:	f640 4368 	movw	r3, #3176	; 0xc68
    4d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d2e:	429a      	cmp	r2, r3
    4d30:	d301      	bcc.n	4d36 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4d32:	f000 fe77 	bl	5a24 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4d36:	f000 fe99 	bl	5a6c <vPortExitCritical>
		}
	}
    4d3a:	3710      	adds	r7, #16
    4d3c:	46bd      	mov	sp, r7
    4d3e:	bd80      	pop	{r7, pc}

00004d40 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4d40:	b580      	push	{r7, lr}
    4d42:	b086      	sub	sp, #24
    4d44:	af00      	add	r7, sp, #0
    4d46:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d48:	2300      	movs	r3, #0
    4d4a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d50:	2300      	movs	r3, #0
    4d52:	60fb      	str	r3, [r7, #12]
    4d54:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d58:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4d5c:	6938      	ldr	r0, [r7, #16]
    4d5e:	f7ff ff79 	bl	4c54 <xTaskIsTaskSuspended>
    4d62:	4603      	mov	r3, r0
    4d64:	2b01      	cmp	r3, #1
    4d66:	d144      	bne.n	4df2 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4d68:	f640 6380 	movw	r3, #3712	; 0xe80
    4d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d70:	681b      	ldr	r3, [r3, #0]
    4d72:	2b00      	cmp	r3, #0
    4d74:	d134      	bne.n	4de0 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4d76:	693b      	ldr	r3, [r7, #16]
    4d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d7a:	f640 4368 	movw	r3, #3176	; 0xc68
    4d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d86:	429a      	cmp	r2, r3
    4d88:	bf34      	ite	cc
    4d8a:	2300      	movcc	r3, #0
    4d8c:	2301      	movcs	r3, #1
    4d8e:	b2db      	uxtb	r3, r3
    4d90:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4d92:	693b      	ldr	r3, [r7, #16]
    4d94:	3304      	adds	r3, #4
    4d96:	4618      	mov	r0, r3
    4d98:	f7ff f8a0 	bl	3edc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4d9c:	693b      	ldr	r3, [r7, #16]
    4d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4da0:	f640 6378 	movw	r3, #3704	; 0xe78
    4da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da8:	681b      	ldr	r3, [r3, #0]
    4daa:	429a      	cmp	r2, r3
    4dac:	d906      	bls.n	4dbc <xTaskResumeFromISR+0x7c>
    4dae:	693b      	ldr	r3, [r7, #16]
    4db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4db2:	f640 6378 	movw	r3, #3704	; 0xe78
    4db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dba:	601a      	str	r2, [r3, #0]
    4dbc:	693b      	ldr	r3, [r7, #16]
    4dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dc0:	4613      	mov	r3, r2
    4dc2:	009b      	lsls	r3, r3, #2
    4dc4:	4413      	add	r3, r2
    4dc6:	009b      	lsls	r3, r3, #2
    4dc8:	f640 426c 	movw	r2, #3180	; 0xc6c
    4dcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4dd0:	441a      	add	r2, r3
    4dd2:	693b      	ldr	r3, [r7, #16]
    4dd4:	3304      	adds	r3, #4
    4dd6:	4610      	mov	r0, r2
    4dd8:	4619      	mov	r1, r3
    4dda:	f7ff f81f 	bl	3e1c <vListInsertEnd>
    4dde:	e008      	b.n	4df2 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4de0:	693b      	ldr	r3, [r7, #16]
    4de2:	3318      	adds	r3, #24
    4de4:	f640 602c 	movw	r0, #3628	; 0xe2c
    4de8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4dec:	4619      	mov	r1, r3
    4dee:	f7ff f815 	bl	3e1c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4df2:	f04f 0000 	mov.w	r0, #0
    4df6:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4dfa:	697b      	ldr	r3, [r7, #20]
	}
    4dfc:	4618      	mov	r0, r3
    4dfe:	3718      	adds	r7, #24
    4e00:	46bd      	mov	sp, r7
    4e02:	bd80      	pop	{r7, pc}

00004e04 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b086      	sub	sp, #24
    4e08:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4e0a:	2300      	movs	r3, #0
    4e0c:	9300      	str	r3, [sp, #0]
    4e0e:	2300      	movs	r3, #0
    4e10:	9301      	str	r3, [sp, #4]
    4e12:	2300      	movs	r3, #0
    4e14:	9302      	str	r3, [sp, #8]
    4e16:	2300      	movs	r3, #0
    4e18:	9303      	str	r3, [sp, #12]
    4e1a:	f245 40bd 	movw	r0, #21693	; 0x54bd
    4e1e:	f2c0 0000 	movt	r0, #0
    4e22:	f248 7188 	movw	r1, #34696	; 0x8788
    4e26:	f2c0 0101 	movt	r1, #1
    4e2a:	2280      	movs	r2, #128	; 0x80
    4e2c:	2300      	movs	r3, #0
    4e2e:	f7ff fc6b 	bl	4708 <xTaskGenericCreate>
    4e32:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	2b01      	cmp	r3, #1
    4e38:	d111      	bne.n	4e5e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4e3a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e3e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4e42:	f640 637c 	movw	r3, #3708	; 0xe7c
    4e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4a:	2201      	movs	r2, #1
    4e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4e4e:	f640 6370 	movw	r3, #3696	; 0xe70
    4e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e56:	2200      	movs	r2, #0
    4e58:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4e5a:	f000 fdb5 	bl	59c8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4e5e:	3708      	adds	r7, #8
    4e60:	46bd      	mov	sp, r7
    4e62:	bd80      	pop	{r7, pc}

00004e64 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4e64:	b580      	push	{r7, lr}
    4e66:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4e68:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e6c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4e70:	f640 637c 	movw	r3, #3708	; 0xe7c
    4e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e78:	2200      	movs	r2, #0
    4e7a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4e7c:	f000 fdcc 	bl	5a18 <vPortEndScheduler>
}
    4e80:	bd80      	pop	{r7, pc}
    4e82:	bf00      	nop

00004e84 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4e84:	b480      	push	{r7}
    4e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4e88:	f640 6380 	movw	r3, #3712	; 0xe80
    4e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	1c5a      	adds	r2, r3, #1
    4e94:	f640 6380 	movw	r3, #3712	; 0xe80
    4e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9c:	601a      	str	r2, [r3, #0]
}
    4e9e:	46bd      	mov	sp, r7
    4ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea4:	4770      	bx	lr
    4ea6:	bf00      	nop

00004ea8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4ea8:	b590      	push	{r4, r7, lr}
    4eaa:	b083      	sub	sp, #12
    4eac:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4eae:	2300      	movs	r3, #0
    4eb0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4eb2:	f000 fdc5 	bl	5a40 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4eb6:	f640 6380 	movw	r3, #3712	; 0xe80
    4eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	1e5a      	subs	r2, r3, #1
    4ec2:	f640 6380 	movw	r3, #3712	; 0xe80
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4ecc:	f640 6380 	movw	r3, #3712	; 0xe80
    4ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d177      	bne.n	4fca <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4eda:	f640 636c 	movw	r3, #3692	; 0xe6c
    4ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee2:	681b      	ldr	r3, [r3, #0]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d070      	beq.n	4fca <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4ee8:	2300      	movs	r3, #0
    4eea:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4eec:	e036      	b.n	4f5c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4eee:	f640 632c 	movw	r3, #3628	; 0xe2c
    4ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef6:	68db      	ldr	r3, [r3, #12]
    4ef8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4efa:	f104 0318 	add.w	r3, r4, #24
    4efe:	4618      	mov	r0, r3
    4f00:	f7fe ffec 	bl	3edc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f04:	1d23      	adds	r3, r4, #4
    4f06:	4618      	mov	r0, r3
    4f08:	f7fe ffe8 	bl	3edc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f0e:	f640 6378 	movw	r3, #3704	; 0xe78
    4f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	429a      	cmp	r2, r3
    4f1a:	d905      	bls.n	4f28 <xTaskResumeAll+0x80>
    4f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f1e:	f640 6378 	movw	r3, #3704	; 0xe78
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	601a      	str	r2, [r3, #0]
    4f28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f2a:	4613      	mov	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	4413      	add	r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	f640 426c 	movw	r2, #3180	; 0xc6c
    4f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f3a:	441a      	add	r2, r3
    4f3c:	1d23      	adds	r3, r4, #4
    4f3e:	4610      	mov	r0, r2
    4f40:	4619      	mov	r1, r3
    4f42:	f7fe ff6b 	bl	3e1c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f48:	f640 4368 	movw	r3, #3176	; 0xc68
    4f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f54:	429a      	cmp	r2, r3
    4f56:	d301      	bcc.n	4f5c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4f58:	2301      	movs	r3, #1
    4f5a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4f5c:	f640 632c 	movw	r3, #3628	; 0xe2c
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d1c1      	bne.n	4eee <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4f6a:	f640 6384 	movw	r3, #3716	; 0xe84
    4f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f72:	681b      	ldr	r3, [r3, #0]
    4f74:	2b00      	cmp	r3, #0
    4f76:	d014      	beq.n	4fa2 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4f78:	e00c      	b.n	4f94 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4f7a:	f000 f865 	bl	5048 <vTaskIncrementTick>
						--uxMissedTicks;
    4f7e:	f640 6384 	movw	r3, #3716	; 0xe84
    4f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	1e5a      	subs	r2, r3, #1
    4f8a:	f640 6384 	movw	r3, #3716	; 0xe84
    4f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f92:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4f94:	f640 6384 	movw	r3, #3716	; 0xe84
    4f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9c:	681b      	ldr	r3, [r3, #0]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d1eb      	bne.n	4f7a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4fa2:	683b      	ldr	r3, [r7, #0]
    4fa4:	2b01      	cmp	r3, #1
    4fa6:	d006      	beq.n	4fb6 <xTaskResumeAll+0x10e>
    4fa8:	f640 6388 	movw	r3, #3720	; 0xe88
    4fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	2b01      	cmp	r3, #1
    4fb4:	d109      	bne.n	4fca <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4fb6:	2301      	movs	r3, #1
    4fb8:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4fba:	f640 6388 	movw	r3, #3720	; 0xe88
    4fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc2:	2200      	movs	r2, #0
    4fc4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4fc6:	f000 fd2d 	bl	5a24 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4fca:	f000 fd4f 	bl	5a6c <vPortExitCritical>

	return xAlreadyYielded;
    4fce:	687b      	ldr	r3, [r7, #4]
}
    4fd0:	4618      	mov	r0, r3
    4fd2:	370c      	adds	r7, #12
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd90      	pop	{r4, r7, pc}

00004fd8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b082      	sub	sp, #8
    4fdc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4fde:	f000 fd2f 	bl	5a40 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4fe2:	f640 6370 	movw	r3, #3696	; 0xe70
    4fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fea:	681b      	ldr	r3, [r3, #0]
    4fec:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4fee:	f000 fd3d 	bl	5a6c <vPortExitCritical>

	return xTicks;
    4ff2:	687b      	ldr	r3, [r7, #4]
}
    4ff4:	4618      	mov	r0, r3
    4ff6:	3708      	adds	r7, #8
    4ff8:	46bd      	mov	sp, r7
    4ffa:	bd80      	pop	{r7, pc}

00004ffc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4ffc:	b480      	push	{r7}
    4ffe:	b083      	sub	sp, #12
    5000:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5002:	2300      	movs	r3, #0
    5004:	607b      	str	r3, [r7, #4]
    5006:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    500a:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    500e:	f640 6370 	movw	r3, #3696	; 0xe70
    5012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5016:	681b      	ldr	r3, [r3, #0]
    5018:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    501a:	f04f 0000 	mov.w	r0, #0
    501e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5022:	683b      	ldr	r3, [r7, #0]
}
    5024:	4618      	mov	r0, r3
    5026:	370c      	adds	r7, #12
    5028:	46bd      	mov	sp, r7
    502a:	f85d 7b04 	ldr.w	r7, [sp], #4
    502e:	4770      	bx	lr

00005030 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5030:	b480      	push	{r7}
    5032:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5034:	f640 636c 	movw	r3, #3692	; 0xe6c
    5038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503c:	681b      	ldr	r3, [r3, #0]
}
    503e:	4618      	mov	r0, r3
    5040:	46bd      	mov	sp, r7
    5042:	f85d 7b04 	ldr.w	r7, [sp], #4
    5046:	4770      	bx	lr

00005048 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5048:	b580      	push	{r7, lr}
    504a:	b084      	sub	sp, #16
    504c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    504e:	f640 6380 	movw	r3, #3712	; 0xe80
    5052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5056:	681b      	ldr	r3, [r3, #0]
    5058:	2b00      	cmp	r3, #0
    505a:	f040 80b9 	bne.w	51d0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    505e:	f640 6370 	movw	r3, #3696	; 0xe70
    5062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	1c5a      	adds	r2, r3, #1
    506a:	f640 6370 	movw	r3, #3696	; 0xe70
    506e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5072:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5074:	f640 6370 	movw	r3, #3696	; 0xe70
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	681b      	ldr	r3, [r3, #0]
    507e:	2b00      	cmp	r3, #0
    5080:	d13f      	bne.n	5102 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5082:	f640 6324 	movw	r3, #3620	; 0xe24
    5086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    508e:	f640 6328 	movw	r3, #3624	; 0xe28
    5092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5096:	681a      	ldr	r2, [r3, #0]
    5098:	f640 6324 	movw	r3, #3620	; 0xe24
    509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    50a2:	f640 6328 	movw	r3, #3624	; 0xe28
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	68fa      	ldr	r2, [r7, #12]
    50ac:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    50ae:	f640 638c 	movw	r3, #3724	; 0xe8c
    50b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	1c5a      	adds	r2, r3, #1
    50ba:	f640 638c 	movw	r3, #3724	; 0xe8c
    50be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    50c4:	f640 6324 	movw	r3, #3620	; 0xe24
    50c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	2b00      	cmp	r3, #0
    50d2:	d107      	bne.n	50e4 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    50d4:	f240 33e0 	movw	r3, #992	; 0x3e0
    50d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50dc:	f04f 32ff 	mov.w	r2, #4294967295
    50e0:	601a      	str	r2, [r3, #0]
    50e2:	e00e      	b.n	5102 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    50e4:	f640 6324 	movw	r3, #3620	; 0xe24
    50e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ec:	681b      	ldr	r3, [r3, #0]
    50ee:	68db      	ldr	r3, [r3, #12]
    50f0:	68db      	ldr	r3, [r3, #12]
    50f2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    50f4:	68bb      	ldr	r3, [r7, #8]
    50f6:	685a      	ldr	r2, [r3, #4]
    50f8:	f240 33e0 	movw	r3, #992	; 0x3e0
    50fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5100:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5102:	f640 6370 	movw	r3, #3696	; 0xe70
    5106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510a:	681a      	ldr	r2, [r3, #0]
    510c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5114:	681b      	ldr	r3, [r3, #0]
    5116:	429a      	cmp	r2, r3
    5118:	d359      	bcc.n	51ce <vTaskIncrementTick+0x186>
    511a:	f640 6324 	movw	r3, #3620	; 0xe24
    511e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	681b      	ldr	r3, [r3, #0]
    5126:	2b00      	cmp	r3, #0
    5128:	d107      	bne.n	513a <vTaskIncrementTick+0xf2>
    512a:	f240 33e0 	movw	r3, #992	; 0x3e0
    512e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5132:	f04f 32ff 	mov.w	r2, #4294967295
    5136:	601a      	str	r2, [r3, #0]
    5138:	e049      	b.n	51ce <vTaskIncrementTick+0x186>
    513a:	f640 6324 	movw	r3, #3620	; 0xe24
    513e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	68db      	ldr	r3, [r3, #12]
    5146:	68db      	ldr	r3, [r3, #12]
    5148:	60bb      	str	r3, [r7, #8]
    514a:	68bb      	ldr	r3, [r7, #8]
    514c:	685b      	ldr	r3, [r3, #4]
    514e:	607b      	str	r3, [r7, #4]
    5150:	f640 6370 	movw	r3, #3696	; 0xe70
    5154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5158:	681a      	ldr	r2, [r3, #0]
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	429a      	cmp	r2, r3
    515e:	d206      	bcs.n	516e <vTaskIncrementTick+0x126>
    5160:	f240 33e0 	movw	r3, #992	; 0x3e0
    5164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5168:	687a      	ldr	r2, [r7, #4]
    516a:	601a      	str	r2, [r3, #0]
    516c:	e02f      	b.n	51ce <vTaskIncrementTick+0x186>
    516e:	68bb      	ldr	r3, [r7, #8]
    5170:	3304      	adds	r3, #4
    5172:	4618      	mov	r0, r3
    5174:	f7fe feb2 	bl	3edc <vListRemove>
    5178:	68bb      	ldr	r3, [r7, #8]
    517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    517c:	2b00      	cmp	r3, #0
    517e:	d004      	beq.n	518a <vTaskIncrementTick+0x142>
    5180:	68bb      	ldr	r3, [r7, #8]
    5182:	3318      	adds	r3, #24
    5184:	4618      	mov	r0, r3
    5186:	f7fe fea9 	bl	3edc <vListRemove>
    518a:	68bb      	ldr	r3, [r7, #8]
    518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    518e:	f640 6378 	movw	r3, #3704	; 0xe78
    5192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5196:	681b      	ldr	r3, [r3, #0]
    5198:	429a      	cmp	r2, r3
    519a:	d906      	bls.n	51aa <vTaskIncrementTick+0x162>
    519c:	68bb      	ldr	r3, [r7, #8]
    519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51a0:	f640 6378 	movw	r3, #3704	; 0xe78
    51a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a8:	601a      	str	r2, [r3, #0]
    51aa:	68bb      	ldr	r3, [r7, #8]
    51ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51ae:	4613      	mov	r3, r2
    51b0:	009b      	lsls	r3, r3, #2
    51b2:	4413      	add	r3, r2
    51b4:	009b      	lsls	r3, r3, #2
    51b6:	f640 426c 	movw	r2, #3180	; 0xc6c
    51ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51be:	441a      	add	r2, r3
    51c0:	68bb      	ldr	r3, [r7, #8]
    51c2:	3304      	adds	r3, #4
    51c4:	4610      	mov	r0, r2
    51c6:	4619      	mov	r1, r3
    51c8:	f7fe fe28 	bl	3e1c <vListInsertEnd>
    51cc:	e7a5      	b.n	511a <vTaskIncrementTick+0xd2>
    51ce:	e00c      	b.n	51ea <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    51d0:	f640 6384 	movw	r3, #3716	; 0xe84
    51d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	1c5a      	adds	r2, r3, #1
    51dc:	f640 6384 	movw	r3, #3716	; 0xe84
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    51e6:	f012 f911 	bl	1740c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    51ea:	f640 6384 	movw	r3, #3716	; 0xe84
    51ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f2:	681b      	ldr	r3, [r3, #0]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d101      	bne.n	51fc <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    51f8:	f012 f908 	bl	1740c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    51fc:	3710      	adds	r7, #16
    51fe:	46bd      	mov	sp, r7
    5200:	bd80      	pop	{r7, pc}
    5202:	bf00      	nop

00005204 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5204:	b580      	push	{r7, lr}
    5206:	b082      	sub	sp, #8
    5208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    520a:	f640 6380 	movw	r3, #3712	; 0xe80
    520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	2b00      	cmp	r3, #0
    5216:	d006      	beq.n	5226 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5218:	f640 6388 	movw	r3, #3720	; 0xe88
    521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5220:	2201      	movs	r2, #1
    5222:	601a      	str	r2, [r3, #0]
    5224:	e047      	b.n	52b6 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5226:	f012 f8eb 	bl	17400 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    522a:	e00a      	b.n	5242 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    522c:	f640 6378 	movw	r3, #3704	; 0xe78
    5230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	1e5a      	subs	r2, r3, #1
    5238:	f640 6378 	movw	r3, #3704	; 0xe78
    523c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5240:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5242:	f640 6378 	movw	r3, #3704	; 0xe78
    5246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524a:	6819      	ldr	r1, [r3, #0]
    524c:	f640 426c 	movw	r2, #3180	; 0xc6c
    5250:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5254:	460b      	mov	r3, r1
    5256:	009b      	lsls	r3, r3, #2
    5258:	440b      	add	r3, r1
    525a:	009b      	lsls	r3, r3, #2
    525c:	4413      	add	r3, r2
    525e:	681b      	ldr	r3, [r3, #0]
    5260:	2b00      	cmp	r3, #0
    5262:	d0e3      	beq.n	522c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5264:	f640 6378 	movw	r3, #3704	; 0xe78
    5268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526c:	681a      	ldr	r2, [r3, #0]
    526e:	4613      	mov	r3, r2
    5270:	009b      	lsls	r3, r3, #2
    5272:	4413      	add	r3, r2
    5274:	009b      	lsls	r3, r3, #2
    5276:	f640 426c 	movw	r2, #3180	; 0xc6c
    527a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    527e:	4413      	add	r3, r2
    5280:	607b      	str	r3, [r7, #4]
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	685b      	ldr	r3, [r3, #4]
    5286:	685a      	ldr	r2, [r3, #4]
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	605a      	str	r2, [r3, #4]
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	685a      	ldr	r2, [r3, #4]
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	3308      	adds	r3, #8
    5294:	429a      	cmp	r2, r3
    5296:	d104      	bne.n	52a2 <vTaskSwitchContext+0x9e>
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	685b      	ldr	r3, [r3, #4]
    529c:	685a      	ldr	r2, [r3, #4]
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	605a      	str	r2, [r3, #4]
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	685b      	ldr	r3, [r3, #4]
    52a6:	68da      	ldr	r2, [r3, #12]
    52a8:	f640 4368 	movw	r3, #3176	; 0xc68
    52ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b0:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    52b2:	f012 f89f 	bl	173f4 <myTraceSwitchedIn>
	}
}
    52b6:	3708      	adds	r7, #8
    52b8:	46bd      	mov	sp, r7
    52ba:	bd80      	pop	{r7, pc}

000052bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    52bc:	b580      	push	{r7, lr}
    52be:	b084      	sub	sp, #16
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
    52c4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    52c6:	f640 4368 	movw	r3, #3176	; 0xc68
    52ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	3318      	adds	r3, #24
    52d2:	6878      	ldr	r0, [r7, #4]
    52d4:	4619      	mov	r1, r3
    52d6:	f7fe fdc9 	bl	3e6c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    52da:	f640 4368 	movw	r3, #3176	; 0xc68
    52de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e2:	681b      	ldr	r3, [r3, #0]
    52e4:	3304      	adds	r3, #4
    52e6:	4618      	mov	r0, r3
    52e8:	f7fe fdf8 	bl	3edc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    52ec:	683b      	ldr	r3, [r7, #0]
    52ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    52f2:	d10d      	bne.n	5310 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    52f4:	f640 4368 	movw	r3, #3176	; 0xc68
    52f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fc:	681b      	ldr	r3, [r3, #0]
    52fe:	3304      	adds	r3, #4
    5300:	f640 6058 	movw	r0, #3672	; 0xe58
    5304:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5308:	4619      	mov	r1, r3
    530a:	f7fe fd87 	bl	3e1c <vListInsertEnd>
    530e:	e00a      	b.n	5326 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5310:	f640 6370 	movw	r3, #3696	; 0xe70
    5314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5318:	681a      	ldr	r2, [r3, #0]
    531a:	683b      	ldr	r3, [r7, #0]
    531c:	4413      	add	r3, r2
    531e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5320:	68f8      	ldr	r0, [r7, #12]
    5322:	f000 f99f 	bl	5664 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5326:	3710      	adds	r7, #16
    5328:	46bd      	mov	sp, r7
    532a:	bd80      	pop	{r7, pc}

0000532c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    532c:	b580      	push	{r7, lr}
    532e:	b084      	sub	sp, #16
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	68db      	ldr	r3, [r3, #12]
    5338:	68db      	ldr	r3, [r3, #12]
    533a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    533c:	68bb      	ldr	r3, [r7, #8]
    533e:	3318      	adds	r3, #24
    5340:	4618      	mov	r0, r3
    5342:	f7fe fdcb 	bl	3edc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5346:	f640 6380 	movw	r3, #3712	; 0xe80
    534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	2b00      	cmp	r3, #0
    5352:	d126      	bne.n	53a2 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5354:	68bb      	ldr	r3, [r7, #8]
    5356:	3304      	adds	r3, #4
    5358:	4618      	mov	r0, r3
    535a:	f7fe fdbf 	bl	3edc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    535e:	68bb      	ldr	r3, [r7, #8]
    5360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5362:	f640 6378 	movw	r3, #3704	; 0xe78
    5366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536a:	681b      	ldr	r3, [r3, #0]
    536c:	429a      	cmp	r2, r3
    536e:	d906      	bls.n	537e <xTaskRemoveFromEventList+0x52>
    5370:	68bb      	ldr	r3, [r7, #8]
    5372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5374:	f640 6378 	movw	r3, #3704	; 0xe78
    5378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537c:	601a      	str	r2, [r3, #0]
    537e:	68bb      	ldr	r3, [r7, #8]
    5380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5382:	4613      	mov	r3, r2
    5384:	009b      	lsls	r3, r3, #2
    5386:	4413      	add	r3, r2
    5388:	009b      	lsls	r3, r3, #2
    538a:	f640 426c 	movw	r2, #3180	; 0xc6c
    538e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5392:	441a      	add	r2, r3
    5394:	68bb      	ldr	r3, [r7, #8]
    5396:	3304      	adds	r3, #4
    5398:	4610      	mov	r0, r2
    539a:	4619      	mov	r1, r3
    539c:	f7fe fd3e 	bl	3e1c <vListInsertEnd>
    53a0:	e008      	b.n	53b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    53a2:	68bb      	ldr	r3, [r7, #8]
    53a4:	3318      	adds	r3, #24
    53a6:	f640 602c 	movw	r0, #3628	; 0xe2c
    53aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53ae:	4619      	mov	r1, r3
    53b0:	f7fe fd34 	bl	3e1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    53b4:	68bb      	ldr	r3, [r7, #8]
    53b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53b8:	f640 4368 	movw	r3, #3176	; 0xc68
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53c4:	429a      	cmp	r2, r3
    53c6:	d302      	bcc.n	53ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    53c8:	2301      	movs	r3, #1
    53ca:	60fb      	str	r3, [r7, #12]
    53cc:	e001      	b.n	53d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    53ce:	2300      	movs	r3, #0
    53d0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    53d2:	68fb      	ldr	r3, [r7, #12]
}
    53d4:	4618      	mov	r0, r3
    53d6:	3710      	adds	r7, #16
    53d8:	46bd      	mov	sp, r7
    53da:	bd80      	pop	{r7, pc}

000053dc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    53dc:	b480      	push	{r7}
    53de:	b083      	sub	sp, #12
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    53e4:	f640 638c 	movw	r3, #3724	; 0xe8c
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	681a      	ldr	r2, [r3, #0]
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    53f2:	f640 6370 	movw	r3, #3696	; 0xe70
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	681a      	ldr	r2, [r3, #0]
    53fc:	687b      	ldr	r3, [r7, #4]
    53fe:	605a      	str	r2, [r3, #4]
}
    5400:	370c      	adds	r7, #12
    5402:	46bd      	mov	sp, r7
    5404:	f85d 7b04 	ldr.w	r7, [sp], #4
    5408:	4770      	bx	lr
    540a:	bf00      	nop

0000540c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    540c:	b580      	push	{r7, lr}
    540e:	b084      	sub	sp, #16
    5410:	af00      	add	r7, sp, #0
    5412:	6078      	str	r0, [r7, #4]
    5414:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5416:	f000 fb13 	bl	5a40 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    541a:	683b      	ldr	r3, [r7, #0]
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5422:	d102      	bne.n	542a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5424:	2300      	movs	r3, #0
    5426:	60fb      	str	r3, [r7, #12]
    5428:	e035      	b.n	5496 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    542a:	687b      	ldr	r3, [r7, #4]
    542c:	681a      	ldr	r2, [r3, #0]
    542e:	f640 638c 	movw	r3, #3724	; 0xe8c
    5432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	429a      	cmp	r2, r3
    543a:	d00b      	beq.n	5454 <xTaskCheckForTimeOut+0x48>
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	685a      	ldr	r2, [r3, #4]
    5440:	f640 6370 	movw	r3, #3696	; 0xe70
    5444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	429a      	cmp	r2, r3
    544c:	d802      	bhi.n	5454 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    544e:	2301      	movs	r3, #1
    5450:	60fb      	str	r3, [r7, #12]
    5452:	e020      	b.n	5496 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5454:	f640 6370 	movw	r3, #3696	; 0xe70
    5458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545c:	681a      	ldr	r2, [r3, #0]
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	685b      	ldr	r3, [r3, #4]
    5462:	1ad2      	subs	r2, r2, r3
    5464:	683b      	ldr	r3, [r7, #0]
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	429a      	cmp	r2, r3
    546a:	d212      	bcs.n	5492 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    546c:	683b      	ldr	r3, [r7, #0]
    546e:	681a      	ldr	r2, [r3, #0]
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	6859      	ldr	r1, [r3, #4]
    5474:	f640 6370 	movw	r3, #3696	; 0xe70
    5478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	1acb      	subs	r3, r1, r3
    5480:	441a      	add	r2, r3
    5482:	683b      	ldr	r3, [r7, #0]
    5484:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5486:	6878      	ldr	r0, [r7, #4]
    5488:	f7ff ffa8 	bl	53dc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    548c:	2300      	movs	r3, #0
    548e:	60fb      	str	r3, [r7, #12]
    5490:	e001      	b.n	5496 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5492:	2301      	movs	r3, #1
    5494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5496:	f000 fae9 	bl	5a6c <vPortExitCritical>

	return xReturn;
    549a:	68fb      	ldr	r3, [r7, #12]
}
    549c:	4618      	mov	r0, r3
    549e:	3710      	adds	r7, #16
    54a0:	46bd      	mov	sp, r7
    54a2:	bd80      	pop	{r7, pc}

000054a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    54a4:	b480      	push	{r7}
    54a6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    54a8:	f640 6388 	movw	r3, #3720	; 0xe88
    54ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b0:	2201      	movs	r2, #1
    54b2:	601a      	str	r2, [r3, #0]
}
    54b4:	46bd      	mov	sp, r7
    54b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ba:	4770      	bx	lr

000054bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    54bc:	b580      	push	{r7, lr}
    54be:	b082      	sub	sp, #8
    54c0:	af00      	add	r7, sp, #0
    54c2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    54c4:	f000 f886 	bl	55d4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    54c8:	f000 faac 	bl	5a24 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    54cc:	e7fa      	b.n	54c4 <prvIdleTask+0x8>
    54ce:	bf00      	nop

000054d0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b084      	sub	sp, #16
    54d4:	af00      	add	r7, sp, #0
    54d6:	60f8      	str	r0, [r7, #12]
    54d8:	60b9      	str	r1, [r7, #8]
    54da:	607a      	str	r2, [r7, #4]
    54dc:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	3334      	adds	r3, #52	; 0x34
    54e2:	4618      	mov	r0, r3
    54e4:	68b9      	ldr	r1, [r7, #8]
    54e6:	2210      	movs	r2, #16
    54e8:	f013 f8ae 	bl	18648 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    54ec:	68fb      	ldr	r3, [r7, #12]
    54ee:	2200      	movs	r2, #0
    54f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	2b13      	cmp	r3, #19
    54f8:	d901      	bls.n	54fe <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    54fa:	2313      	movs	r3, #19
    54fc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	687a      	ldr	r2, [r7, #4]
    5502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5504:	68fb      	ldr	r3, [r7, #12]
    5506:	687a      	ldr	r2, [r7, #4]
    5508:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    550a:	68fb      	ldr	r3, [r7, #12]
    550c:	3304      	adds	r3, #4
    550e:	4618      	mov	r0, r3
    5510:	f7fe fc78 	bl	3e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5514:	68fb      	ldr	r3, [r7, #12]
    5516:	3318      	adds	r3, #24
    5518:	4618      	mov	r0, r3
    551a:	f7fe fc73 	bl	3e04 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	68fa      	ldr	r2, [r7, #12]
    5522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	f1c3 0214 	rsb	r2, r3, #20
    552a:	68fb      	ldr	r3, [r7, #12]
    552c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    552e:	68fb      	ldr	r3, [r7, #12]
    5530:	68fa      	ldr	r2, [r7, #12]
    5532:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5534:	3710      	adds	r7, #16
    5536:	46bd      	mov	sp, r7
    5538:	bd80      	pop	{r7, pc}
    553a:	bf00      	nop

0000553c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    553c:	b580      	push	{r7, lr}
    553e:	b082      	sub	sp, #8
    5540:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5542:	2300      	movs	r3, #0
    5544:	607b      	str	r3, [r7, #4]
    5546:	e00f      	b.n	5568 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5548:	687a      	ldr	r2, [r7, #4]
    554a:	4613      	mov	r3, r2
    554c:	009b      	lsls	r3, r3, #2
    554e:	4413      	add	r3, r2
    5550:	009b      	lsls	r3, r3, #2
    5552:	f640 426c 	movw	r2, #3180	; 0xc6c
    5556:	f2c2 0200 	movt	r2, #8192	; 0x2000
    555a:	4413      	add	r3, r2
    555c:	4618      	mov	r0, r3
    555e:	f7fe fc31 	bl	3dc4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	3301      	adds	r3, #1
    5566:	607b      	str	r3, [r7, #4]
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	2b13      	cmp	r3, #19
    556c:	d9ec      	bls.n	5548 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    556e:	f640 50fc 	movw	r0, #3580	; 0xdfc
    5572:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5576:	f7fe fc25 	bl	3dc4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    557a:	f640 6010 	movw	r0, #3600	; 0xe10
    557e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5582:	f7fe fc1f 	bl	3dc4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5586:	f640 602c 	movw	r0, #3628	; 0xe2c
    558a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    558e:	f7fe fc19 	bl	3dc4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5592:	f640 6040 	movw	r0, #3648	; 0xe40
    5596:	f2c2 0000 	movt	r0, #8192	; 0x2000
    559a:	f7fe fc13 	bl	3dc4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    559e:	f640 6058 	movw	r0, #3672	; 0xe58
    55a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55a6:	f7fe fc0d 	bl	3dc4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    55aa:	f640 6324 	movw	r3, #3620	; 0xe24
    55ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b2:	f640 52fc 	movw	r2, #3580	; 0xdfc
    55b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    55bc:	f640 6328 	movw	r3, #3624	; 0xe28
    55c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c4:	f640 6210 	movw	r2, #3600	; 0xe10
    55c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55cc:	601a      	str	r2, [r3, #0]
}
    55ce:	3708      	adds	r7, #8
    55d0:	46bd      	mov	sp, r7
    55d2:	bd80      	pop	{r7, pc}

000055d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    55da:	f640 6354 	movw	r3, #3668	; 0xe54
    55de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d03a      	beq.n	565e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    55e8:	f7ff fc4c 	bl	4e84 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    55ec:	f640 6340 	movw	r3, #3648	; 0xe40
    55f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f4:	681b      	ldr	r3, [r3, #0]
    55f6:	2b00      	cmp	r3, #0
    55f8:	bf14      	ite	ne
    55fa:	2300      	movne	r3, #0
    55fc:	2301      	moveq	r3, #1
    55fe:	b2db      	uxtb	r3, r3
    5600:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5602:	f7ff fc51 	bl	4ea8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	2b00      	cmp	r3, #0
    560a:	d128      	bne.n	565e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    560c:	f000 fa18 	bl	5a40 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5610:	f640 6340 	movw	r3, #3648	; 0xe40
    5614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5618:	68db      	ldr	r3, [r3, #12]
    561a:	68db      	ldr	r3, [r3, #12]
    561c:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    561e:	683b      	ldr	r3, [r7, #0]
    5620:	3304      	adds	r3, #4
    5622:	4618      	mov	r0, r3
    5624:	f7fe fc5a 	bl	3edc <vListRemove>
					--uxCurrentNumberOfTasks;
    5628:	f640 636c 	movw	r3, #3692	; 0xe6c
    562c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5630:	681b      	ldr	r3, [r3, #0]
    5632:	1e5a      	subs	r2, r3, #1
    5634:	f640 636c 	movw	r3, #3692	; 0xe6c
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    563e:	f640 6354 	movw	r3, #3668	; 0xe54
    5642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	1e5a      	subs	r2, r3, #1
    564a:	f640 6354 	movw	r3, #3668	; 0xe54
    564e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5652:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5654:	f000 fa0a 	bl	5a6c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5658:	6838      	ldr	r0, [r7, #0]
    565a:	f000 f879 	bl	5750 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    565e:	3708      	adds	r7, #8
    5660:	46bd      	mov	sp, r7
    5662:	bd80      	pop	{r7, pc}

00005664 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5664:	b580      	push	{r7, lr}
    5666:	b082      	sub	sp, #8
    5668:	af00      	add	r7, sp, #0
    566a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    566c:	f640 4368 	movw	r3, #3176	; 0xc68
    5670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	687a      	ldr	r2, [r7, #4]
    5678:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    567a:	f640 6370 	movw	r3, #3696	; 0xe70
    567e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5682:	681b      	ldr	r3, [r3, #0]
    5684:	687a      	ldr	r2, [r7, #4]
    5686:	429a      	cmp	r2, r3
    5688:	d20f      	bcs.n	56aa <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    568a:	f640 6328 	movw	r3, #3624	; 0xe28
    568e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5692:	681a      	ldr	r2, [r3, #0]
    5694:	f640 4368 	movw	r3, #3176	; 0xc68
    5698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	3304      	adds	r3, #4
    56a0:	4610      	mov	r0, r2
    56a2:	4619      	mov	r1, r3
    56a4:	f7fe fbe2 	bl	3e6c <vListInsert>
    56a8:	e01c      	b.n	56e4 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56aa:	f640 6324 	movw	r3, #3620	; 0xe24
    56ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b2:	681a      	ldr	r2, [r3, #0]
    56b4:	f640 4368 	movw	r3, #3176	; 0xc68
    56b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	3304      	adds	r3, #4
    56c0:	4610      	mov	r0, r2
    56c2:	4619      	mov	r1, r3
    56c4:	f7fe fbd2 	bl	3e6c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    56c8:	f240 33e0 	movw	r3, #992	; 0x3e0
    56cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	687a      	ldr	r2, [r7, #4]
    56d4:	429a      	cmp	r2, r3
    56d6:	d205      	bcs.n	56e4 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    56d8:	f240 33e0 	movw	r3, #992	; 0x3e0
    56dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e0:	687a      	ldr	r2, [r7, #4]
    56e2:	601a      	str	r2, [r3, #0]
		}
	}
}
    56e4:	3708      	adds	r7, #8
    56e6:	46bd      	mov	sp, r7
    56e8:	bd80      	pop	{r7, pc}
    56ea:	bf00      	nop

000056ec <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    56ec:	b580      	push	{r7, lr}
    56ee:	b084      	sub	sp, #16
    56f0:	af00      	add	r7, sp, #0
    56f2:	4603      	mov	r3, r0
    56f4:	6039      	str	r1, [r7, #0]
    56f6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    56f8:	2050      	movs	r0, #80	; 0x50
    56fa:	f000 fa19 	bl	5b30 <pvPortMalloc>
    56fe:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5700:	68fb      	ldr	r3, [r7, #12]
    5702:	2b00      	cmp	r3, #0
    5704:	d01f      	beq.n	5746 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5706:	683b      	ldr	r3, [r7, #0]
    5708:	2b00      	cmp	r3, #0
    570a:	d106      	bne.n	571a <prvAllocateTCBAndStack+0x2e>
    570c:	88fb      	ldrh	r3, [r7, #6]
    570e:	009b      	lsls	r3, r3, #2
    5710:	4618      	mov	r0, r3
    5712:	f000 fa0d 	bl	5b30 <pvPortMalloc>
    5716:	4603      	mov	r3, r0
    5718:	e000      	b.n	571c <prvAllocateTCBAndStack+0x30>
    571a:	683b      	ldr	r3, [r7, #0]
    571c:	68fa      	ldr	r2, [r7, #12]
    571e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5720:	68fb      	ldr	r3, [r7, #12]
    5722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5724:	2b00      	cmp	r3, #0
    5726:	d105      	bne.n	5734 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5728:	68f8      	ldr	r0, [r7, #12]
    572a:	f000 fac5 	bl	5cb8 <vPortFree>
			pxNewTCB = NULL;
    572e:	2300      	movs	r3, #0
    5730:	60fb      	str	r3, [r7, #12]
    5732:	e008      	b.n	5746 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5734:	68fb      	ldr	r3, [r7, #12]
    5736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5738:	88fb      	ldrh	r3, [r7, #6]
    573a:	009b      	lsls	r3, r3, #2
    573c:	4610      	mov	r0, r2
    573e:	21a5      	movs	r1, #165	; 0xa5
    5740:	461a      	mov	r2, r3
    5742:	f012 ff31 	bl	185a8 <memset>
		}
	}

	return pxNewTCB;
    5746:	68fb      	ldr	r3, [r7, #12]
}
    5748:	4618      	mov	r0, r3
    574a:	3710      	adds	r7, #16
    574c:	46bd      	mov	sp, r7
    574e:	bd80      	pop	{r7, pc}

00005750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5750:	b580      	push	{r7, lr}
    5752:	b082      	sub	sp, #8
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    575c:	4618      	mov	r0, r3
    575e:	f000 faab 	bl	5cb8 <vPortFree>
		vPortFree( pxTCB );
    5762:	6878      	ldr	r0, [r7, #4]
    5764:	f000 faa8 	bl	5cb8 <vPortFree>
	}
    5768:	3708      	adds	r7, #8
    576a:	46bd      	mov	sp, r7
    576c:	bd80      	pop	{r7, pc}
    576e:	bf00      	nop

00005770 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5770:	b480      	push	{r7}
    5772:	b083      	sub	sp, #12
    5774:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5776:	f640 4368 	movw	r3, #3176	; 0xc68
    577a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    577e:	681b      	ldr	r3, [r3, #0]
    5780:	607b      	str	r3, [r7, #4]

		return xReturn;
    5782:	687b      	ldr	r3, [r7, #4]
	}
    5784:	4618      	mov	r0, r3
    5786:	370c      	adds	r7, #12
    5788:	46bd      	mov	sp, r7
    578a:	f85d 7b04 	ldr.w	r7, [sp], #4
    578e:	4770      	bx	lr

00005790 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5790:	b580      	push	{r7, lr}
    5792:	b084      	sub	sp, #16
    5794:	af00      	add	r7, sp, #0
    5796:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5798:	687b      	ldr	r3, [r7, #4]
    579a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    579c:	68fb      	ldr	r3, [r7, #12]
    579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57a0:	f640 4368 	movw	r3, #3176	; 0xc68
    57a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    57ac:	429a      	cmp	r2, r3
    57ae:	d24f      	bcs.n	5850 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    57b0:	f640 4368 	movw	r3, #3176	; 0xc68
    57b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    57bc:	f1c3 0214 	rsb	r2, r3, #20
    57c0:	68fb      	ldr	r3, [r7, #12]
    57c2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    57c4:	68fb      	ldr	r3, [r7, #12]
    57c6:	6959      	ldr	r1, [r3, #20]
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57cc:	4613      	mov	r3, r2
    57ce:	009b      	lsls	r3, r3, #2
    57d0:	4413      	add	r3, r2
    57d2:	009b      	lsls	r3, r3, #2
    57d4:	f640 426c 	movw	r2, #3180	; 0xc6c
    57d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57dc:	4413      	add	r3, r2
    57de:	4299      	cmp	r1, r3
    57e0:	d12e      	bne.n	5840 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    57e2:	68fb      	ldr	r3, [r7, #12]
    57e4:	3304      	adds	r3, #4
    57e6:	4618      	mov	r0, r3
    57e8:	f7fe fb78 	bl	3edc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    57ec:	f640 4368 	movw	r3, #3176	; 0xc68
    57f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57f8:	68fb      	ldr	r3, [r7, #12]
    57fa:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    57fc:	68fb      	ldr	r3, [r7, #12]
    57fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5800:	f640 6378 	movw	r3, #3704	; 0xe78
    5804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	429a      	cmp	r2, r3
    580c:	d906      	bls.n	581c <vTaskPriorityInherit+0x8c>
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5812:	f640 6378 	movw	r3, #3704	; 0xe78
    5816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581a:	601a      	str	r2, [r3, #0]
    581c:	68fb      	ldr	r3, [r7, #12]
    581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5820:	4613      	mov	r3, r2
    5822:	009b      	lsls	r3, r3, #2
    5824:	4413      	add	r3, r2
    5826:	009b      	lsls	r3, r3, #2
    5828:	f640 426c 	movw	r2, #3180	; 0xc6c
    582c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5830:	441a      	add	r2, r3
    5832:	68fb      	ldr	r3, [r7, #12]
    5834:	3304      	adds	r3, #4
    5836:	4610      	mov	r0, r2
    5838:	4619      	mov	r1, r3
    583a:	f7fe faef 	bl	3e1c <vListInsertEnd>
    583e:	e007      	b.n	5850 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5840:	f640 4368 	movw	r3, #3176	; 0xc68
    5844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5850:	3710      	adds	r7, #16
    5852:	46bd      	mov	sp, r7
    5854:	bd80      	pop	{r7, pc}
    5856:	bf00      	nop

00005858 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5858:	b580      	push	{r7, lr}
    585a:	b084      	sub	sp, #16
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	2b00      	cmp	r3, #0
    5868:	d035      	beq.n	58d6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    586a:	68fb      	ldr	r3, [r7, #12]
    586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    586e:	68fb      	ldr	r3, [r7, #12]
    5870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5872:	429a      	cmp	r2, r3
    5874:	d02f      	beq.n	58d6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5876:	68fb      	ldr	r3, [r7, #12]
    5878:	3304      	adds	r3, #4
    587a:	4618      	mov	r0, r3
    587c:	f7fe fb2e 	bl	3edc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5884:	68fb      	ldr	r3, [r7, #12]
    5886:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5888:	68fb      	ldr	r3, [r7, #12]
    588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    588c:	f1c3 0214 	rsb	r2, r3, #20
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5894:	68fb      	ldr	r3, [r7, #12]
    5896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5898:	f640 6378 	movw	r3, #3704	; 0xe78
    589c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	429a      	cmp	r2, r3
    58a4:	d906      	bls.n	58b4 <vTaskPriorityDisinherit+0x5c>
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58aa:	f640 6378 	movw	r3, #3704	; 0xe78
    58ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b2:	601a      	str	r2, [r3, #0]
    58b4:	68fb      	ldr	r3, [r7, #12]
    58b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58b8:	4613      	mov	r3, r2
    58ba:	009b      	lsls	r3, r3, #2
    58bc:	4413      	add	r3, r2
    58be:	009b      	lsls	r3, r3, #2
    58c0:	f640 426c 	movw	r2, #3180	; 0xc6c
    58c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58c8:	441a      	add	r2, r3
    58ca:	68fb      	ldr	r3, [r7, #12]
    58cc:	3304      	adds	r3, #4
    58ce:	4610      	mov	r0, r2
    58d0:	4619      	mov	r1, r3
    58d2:	f7fe faa3 	bl	3e1c <vListInsertEnd>
			}
		}
	}
    58d6:	3710      	adds	r7, #16
    58d8:	46bd      	mov	sp, r7
    58da:	bd80      	pop	{r7, pc}

000058dc <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    58dc:	b480      	push	{r7}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    58e4:	687b      	ldr	r3, [r7, #4]
    58e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    58e8:	4618      	mov	r0, r3
    58ea:	370c      	adds	r7, #12
    58ec:	46bd      	mov	sp, r7
    58ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f2:	4770      	bx	lr

000058f4 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    58f4:	b480      	push	{r7}
    58f6:	b083      	sub	sp, #12
    58f8:	af00      	add	r7, sp, #0
    58fa:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5900:	4618      	mov	r0, r3
    5902:	370c      	adds	r7, #12
    5904:	46bd      	mov	sp, r7
    5906:	f85d 7b04 	ldr.w	r7, [sp], #4
    590a:	4770      	bx	lr

0000590c <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    590c:	b480      	push	{r7}
    590e:	b083      	sub	sp, #12
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	683a      	ldr	r2, [r7, #0]
    591a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    591c:	370c      	adds	r7, #12
    591e:	46bd      	mov	sp, r7
    5920:	f85d 7b04 	ldr.w	r7, [sp], #4
    5924:	4770      	bx	lr
    5926:	bf00      	nop

00005928 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5928:	b480      	push	{r7}
    592a:	b083      	sub	sp, #12
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
    5930:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	683a      	ldr	r2, [r7, #0]
    5936:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5938:	370c      	adds	r7, #12
    593a:	46bd      	mov	sp, r7
    593c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5940:	4770      	bx	lr
    5942:	bf00      	nop

00005944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5944:	b480      	push	{r7}
    5946:	b085      	sub	sp, #20
    5948:	af00      	add	r7, sp, #0
    594a:	60f8      	str	r0, [r7, #12]
    594c:	60b9      	str	r1, [r7, #8]
    594e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	3b04      	subs	r3, #4
    5954:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5956:	68fb      	ldr	r3, [r7, #12]
    5958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    595c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    595e:	68fb      	ldr	r3, [r7, #12]
    5960:	3b04      	subs	r3, #4
    5962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5964:	68ba      	ldr	r2, [r7, #8]
    5966:	68fb      	ldr	r3, [r7, #12]
    5968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    596a:	68fb      	ldr	r3, [r7, #12]
    596c:	3b04      	subs	r3, #4
    596e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5970:	68fb      	ldr	r3, [r7, #12]
    5972:	2200      	movs	r2, #0
    5974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5976:	68fb      	ldr	r3, [r7, #12]
    5978:	3b14      	subs	r3, #20
    597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    597c:	687a      	ldr	r2, [r7, #4]
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5982:	68fb      	ldr	r3, [r7, #12]
    5984:	3b20      	subs	r3, #32
    5986:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5988:	68fb      	ldr	r3, [r7, #12]
}
    598a:	4618      	mov	r0, r3
    598c:	3714      	adds	r7, #20
    598e:	46bd      	mov	sp, r7
    5990:	f85d 7b04 	ldr.w	r7, [sp], #4
    5994:	4770      	bx	lr
    5996:	bf00      	nop

00005998 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5998:	4b06      	ldr	r3, [pc, #24]	; (59b4 <pxCurrentTCBConst2>)
    599a:	6819      	ldr	r1, [r3, #0]
    599c:	6808      	ldr	r0, [r1, #0]
    599e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    59a2:	f380 8809 	msr	PSP, r0
    59a6:	f04f 0000 	mov.w	r0, #0
    59aa:	f380 8811 	msr	BASEPRI, r0
    59ae:	f04e 0e0d 	orr.w	lr, lr, #13
    59b2:	4770      	bx	lr

000059b4 <pxCurrentTCBConst2>:
    59b4:	20000c68 	.word	0x20000c68

000059b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    59b8:	485c      	ldr	r0, [pc, #368]	; (5b2c <prvSetupTimerInterrupt+0x28>)
    59ba:	6800      	ldr	r0, [r0, #0]
    59bc:	6800      	ldr	r0, [r0, #0]
    59be:	f380 8808 	msr	MSP, r0
    59c2:	b662      	cpsie	i
    59c4:	df00      	svc	0
    59c6:	bf00      	nop

000059c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    59c8:	b580      	push	{r7, lr}
    59ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    59cc:	f64e 5320 	movw	r3, #60704	; 0xed20
    59d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59d4:	f64e 5220 	movw	r2, #60704	; 0xed20
    59d8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    59dc:	6812      	ldr	r2, [r2, #0]
    59de:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    59e2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    59e4:	f64e 5320 	movw	r3, #60704	; 0xed20
    59e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59ec:	f64e 5220 	movw	r2, #60704	; 0xed20
    59f0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    59f4:	6812      	ldr	r2, [r2, #0]
    59f6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    59fa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    59fc:	f000 f882 	bl	5b04 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5a00:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a08:	2200      	movs	r2, #0
    5a0a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5a0c:	f7ff ffd4 	bl	59b8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5a10:	2300      	movs	r3, #0
}
    5a12:	4618      	mov	r0, r3
    5a14:	bd80      	pop	{r7, pc}
    5a16:	bf00      	nop

00005a18 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5a18:	b480      	push	{r7}
    5a1a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5a1c:	46bd      	mov	sp, r7
    5a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a22:	4770      	bx	lr

00005a24 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5a24:	b480      	push	{r7}
    5a26:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5a28:	f64e 5304 	movw	r3, #60676	; 0xed04
    5a2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a34:	601a      	str	r2, [r3, #0]
}
    5a36:	46bd      	mov	sp, r7
    5a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3c:	4770      	bx	lr
    5a3e:	bf00      	nop

00005a40 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5a40:	b480      	push	{r7}
    5a42:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5a44:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5a48:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5a4c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	1c5a      	adds	r2, r3, #1
    5a58:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a60:	601a      	str	r2, [r3, #0]
}
    5a62:	46bd      	mov	sp, r7
    5a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a68:	4770      	bx	lr
    5a6a:	bf00      	nop

00005a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5a6c:	b480      	push	{r7}
    5a6e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5a70:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	1e5a      	subs	r2, r3, #1
    5a7c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a84:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5a86:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8e:	681b      	ldr	r3, [r3, #0]
    5a90:	2b00      	cmp	r3, #0
    5a92:	d103      	bne.n	5a9c <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5a94:	f04f 0000 	mov.w	r0, #0
    5a98:	f380 8811 	msr	BASEPRI, r0
	}
}
    5a9c:	46bd      	mov	sp, r7
    5a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa2:	4770      	bx	lr

00005aa4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5aa4:	f3ef 8009 	mrs	r0, PSP
    5aa8:	4b0c      	ldr	r3, [pc, #48]	; (5adc <pxCurrentTCBConst>)
    5aaa:	681a      	ldr	r2, [r3, #0]
    5aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ab0:	6010      	str	r0, [r2, #0]
    5ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
    5ab6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5aba:	f380 8811 	msr	BASEPRI, r0
    5abe:	f7ff fba1 	bl	5204 <vTaskSwitchContext>
    5ac2:	f04f 0000 	mov.w	r0, #0
    5ac6:	f380 8811 	msr	BASEPRI, r0
    5aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5ace:	6819      	ldr	r1, [r3, #0]
    5ad0:	6808      	ldr	r0, [r1, #0]
    5ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ad6:	f380 8809 	msr	PSP, r0
    5ada:	4770      	bx	lr

00005adc <pxCurrentTCBConst>:
    5adc:	20000c68 	.word	0x20000c68

00005ae0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b082      	sub	sp, #8
    5ae4:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5ae6:	2300      	movs	r3, #0
    5ae8:	607b      	str	r3, [r7, #4]
    5aea:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5aee:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5af2:	f7ff faa9 	bl	5048 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5af6:	f04f 0000 	mov.w	r0, #0
    5afa:	f380 8811 	msr	BASEPRI, r0
}
    5afe:	3708      	adds	r7, #8
    5b00:	46bd      	mov	sp, r7
    5b02:	bd80      	pop	{r7, pc}

00005b04 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5b04:	b480      	push	{r7}
    5b06:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5b08:	f24e 0314 	movw	r3, #57364	; 0xe014
    5b0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b10:	f641 421f 	movw	r2, #7199	; 0x1c1f
    5b14:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5b16:	f24e 0310 	movw	r3, #57360	; 0xe010
    5b1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b1e:	2207      	movs	r2, #7
    5b20:	601a      	str	r2, [r3, #0]
}
    5b22:	46bd      	mov	sp, r7
    5b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b28:	4770      	bx	lr
    5b2a:	0000      	.short	0x0000
    5b2c:	e000ed08 	.word	0xe000ed08

00005b30 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b08a      	sub	sp, #40	; 0x28
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5b38:	2300      	movs	r3, #0
    5b3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5b3c:	f7ff f9a2 	bl	4e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5b40:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d130      	bne.n	5bb0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5b4e:	f64a 6398 	movw	r3, #44696	; 0xae98
    5b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b56:	f640 6298 	movw	r2, #3736	; 0xe98
    5b5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b5e:	601a      	str	r2, [r3, #0]
    5b60:	f64a 6398 	movw	r3, #44696	; 0xae98
    5b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b68:	2200      	movs	r2, #0
    5b6a:	605a      	str	r2, [r3, #4]
    5b6c:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b74:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5b78:	605a      	str	r2, [r3, #4]
    5b7a:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b82:	2200      	movs	r2, #0
    5b84:	601a      	str	r2, [r3, #0]
    5b86:	f640 6398 	movw	r3, #3736	; 0xe98
    5b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8e:	617b      	str	r3, [r7, #20]
    5b90:	697b      	ldr	r3, [r7, #20]
    5b92:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5b96:	605a      	str	r2, [r3, #4]
    5b98:	697a      	ldr	r2, [r7, #20]
    5b9a:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ba4:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bac:	2201      	movs	r2, #1
    5bae:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d00d      	beq.n	5bd2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5bb6:	2310      	movs	r3, #16
    5bb8:	687a      	ldr	r2, [r7, #4]
    5bba:	4413      	add	r3, r2
    5bbc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	f003 0307 	and.w	r3, r3, #7
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d004      	beq.n	5bd2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	f023 0307 	bic.w	r3, r3, #7
    5bce:	3308      	adds	r3, #8
    5bd0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d068      	beq.n	5caa <pvPortMalloc+0x17a>
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5bde:	d264      	bcs.n	5caa <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5be0:	f64a 6398 	movw	r3, #44696	; 0xae98
    5be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5bea:	f64a 6398 	movw	r3, #44696	; 0xae98
    5bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5bf6:	e004      	b.n	5c02 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5bfa:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5bfe:	681b      	ldr	r3, [r3, #0]
    5c00:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c04:	685a      	ldr	r2, [r3, #4]
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	429a      	cmp	r2, r3
    5c0a:	d203      	bcs.n	5c14 <pvPortMalloc+0xe4>
    5c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c0e:	681b      	ldr	r3, [r3, #0]
    5c10:	2b00      	cmp	r3, #0
    5c12:	d1f1      	bne.n	5bf8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c16:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1e:	429a      	cmp	r2, r3
    5c20:	d043      	beq.n	5caa <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5c22:	6a3b      	ldr	r3, [r7, #32]
    5c24:	681a      	ldr	r2, [r3, #0]
    5c26:	2310      	movs	r3, #16
    5c28:	4413      	add	r3, r2
    5c2a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c2e:	681a      	ldr	r2, [r3, #0]
    5c30:	6a3b      	ldr	r3, [r7, #32]
    5c32:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c36:	685a      	ldr	r2, [r3, #4]
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	1ad2      	subs	r2, r2, r3
    5c3c:	2310      	movs	r3, #16
    5c3e:	005b      	lsls	r3, r3, #1
    5c40:	429a      	cmp	r2, r3
    5c42:	d925      	bls.n	5c90 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	4413      	add	r3, r2
    5c4a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c4e:	685a      	ldr	r2, [r3, #4]
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	1ad2      	subs	r2, r2, r3
    5c54:	693b      	ldr	r3, [r7, #16]
    5c56:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c5a:	687a      	ldr	r2, [r7, #4]
    5c5c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5c5e:	693b      	ldr	r3, [r7, #16]
    5c60:	685b      	ldr	r3, [r3, #4]
    5c62:	60fb      	str	r3, [r7, #12]
    5c64:	f64a 6398 	movw	r3, #44696	; 0xae98
    5c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6c:	61bb      	str	r3, [r7, #24]
    5c6e:	e002      	b.n	5c76 <pvPortMalloc+0x146>
    5c70:	69bb      	ldr	r3, [r7, #24]
    5c72:	681b      	ldr	r3, [r3, #0]
    5c74:	61bb      	str	r3, [r7, #24]
    5c76:	69bb      	ldr	r3, [r7, #24]
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	685a      	ldr	r2, [r3, #4]
    5c7c:	68fb      	ldr	r3, [r7, #12]
    5c7e:	429a      	cmp	r2, r3
    5c80:	d3f6      	bcc.n	5c70 <pvPortMalloc+0x140>
    5c82:	69bb      	ldr	r3, [r7, #24]
    5c84:	681a      	ldr	r2, [r3, #0]
    5c86:	693b      	ldr	r3, [r7, #16]
    5c88:	601a      	str	r2, [r3, #0]
    5c8a:	69bb      	ldr	r3, [r7, #24]
    5c8c:	693a      	ldr	r2, [r7, #16]
    5c8e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5c90:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c98:	681a      	ldr	r2, [r3, #0]
    5c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c9c:	685b      	ldr	r3, [r3, #4]
    5c9e:	1ad2      	subs	r2, r2, r3
    5ca0:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5caa:	f7ff f8fd 	bl	4ea8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5cae:	69fb      	ldr	r3, [r7, #28]
}
    5cb0:	4618      	mov	r0, r3
    5cb2:	3728      	adds	r7, #40	; 0x28
    5cb4:	46bd      	mov	sp, r7
    5cb6:	bd80      	pop	{r7, pc}

00005cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b086      	sub	sp, #24
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d030      	beq.n	5d2c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5cca:	2310      	movs	r3, #16
    5ccc:	425b      	negs	r3, r3
    5cce:	693a      	ldr	r2, [r7, #16]
    5cd0:	4413      	add	r3, r2
    5cd2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5cd4:	693b      	ldr	r3, [r7, #16]
    5cd6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5cd8:	f7ff f8d4 	bl	4e84 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5cdc:	68fb      	ldr	r3, [r7, #12]
    5cde:	685b      	ldr	r3, [r3, #4]
    5ce0:	60bb      	str	r3, [r7, #8]
    5ce2:	f64a 6398 	movw	r3, #44696	; 0xae98
    5ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cea:	617b      	str	r3, [r7, #20]
    5cec:	e002      	b.n	5cf4 <vPortFree+0x3c>
    5cee:	697b      	ldr	r3, [r7, #20]
    5cf0:	681b      	ldr	r3, [r3, #0]
    5cf2:	617b      	str	r3, [r7, #20]
    5cf4:	697b      	ldr	r3, [r7, #20]
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	685a      	ldr	r2, [r3, #4]
    5cfa:	68bb      	ldr	r3, [r7, #8]
    5cfc:	429a      	cmp	r2, r3
    5cfe:	d3f6      	bcc.n	5cee <vPortFree+0x36>
    5d00:	697b      	ldr	r3, [r7, #20]
    5d02:	681a      	ldr	r2, [r3, #0]
    5d04:	68fb      	ldr	r3, [r7, #12]
    5d06:	601a      	str	r2, [r3, #0]
    5d08:	697b      	ldr	r3, [r7, #20]
    5d0a:	68fa      	ldr	r2, [r7, #12]
    5d0c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5d0e:	68fb      	ldr	r3, [r7, #12]
    5d10:	685a      	ldr	r2, [r3, #4]
    5d12:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d1a:	681b      	ldr	r3, [r3, #0]
    5d1c:	441a      	add	r2, r3
    5d1e:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5d28:	f7ff f8be 	bl	4ea8 <xTaskResumeAll>
	}
}
    5d2c:	3718      	adds	r7, #24
    5d2e:	46bd      	mov	sp, r7
    5d30:	bd80      	pop	{r7, pc}
    5d32:	bf00      	nop

00005d34 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5d34:	b480      	push	{r7}
    5d36:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5d38:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d40:	681b      	ldr	r3, [r3, #0]
}
    5d42:	4618      	mov	r0, r3
    5d44:	46bd      	mov	sp, r7
    5d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4a:	4770      	bx	lr

00005d4c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5d4c:	b480      	push	{r7}
    5d4e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5d50:	46bd      	mov	sp, r7
    5d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d56:	4770      	bx	lr

00005d58 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5d58:	b580      	push	{r7, lr}
    5d5a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5d5c:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	2b00      	cmp	r3, #0
    5d68:	f040 815d 	bne.w	6026 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5d6c:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	881b      	ldrh	r3, [r3, #0]
    5d76:	2b09      	cmp	r3, #9
    5d78:	f201 8145 	bhi.w	7006 <ground_calibrate+0x12ae>
    5d7c:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    5d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	2b01      	cmp	r3, #1
    5d88:	f041 813d 	bne.w	7006 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5d8c:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d94:	2201      	movs	r2, #1
    5d96:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5d98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da0:	781a      	ldrb	r2, [r3, #0]
    5da2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5daa:	781b      	ldrb	r3, [r3, #0]
    5dac:	b2db      	uxtb	r3, r3
    5dae:	429a      	cmp	r2, r3
    5db0:	d313      	bcc.n	5dda <ground_calibrate+0x82>
    5db2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	b2db      	uxtb	r3, r3
    5dbe:	461a      	mov	r2, r3
    5dc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	1ad3      	subs	r3, r2, r3
    5dcc:	33ff      	adds	r3, #255	; 0xff
    5dce:	2b04      	cmp	r3, #4
    5dd0:	bfd4      	ite	le
    5dd2:	2300      	movle	r3, #0
    5dd4:	2301      	movgt	r3, #1
    5dd6:	b2db      	uxtb	r3, r3
    5dd8:	e011      	b.n	5dfe <ground_calibrate+0xa6>
    5dda:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de2:	781b      	ldrb	r3, [r3, #0]
    5de4:	b2db      	uxtb	r3, r3
    5de6:	461a      	mov	r2, r3
    5de8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	1ad3      	subs	r3, r2, r3
    5df4:	2b04      	cmp	r3, #4
    5df6:	bfd4      	ite	le
    5df8:	2300      	movle	r3, #0
    5dfa:	2301      	movgt	r3, #1
    5dfc:	b2db      	uxtb	r3, r3
    5dfe:	2b00      	cmp	r3, #0
    5e00:	f000 8103 	beq.w	600a <ground_calibrate+0x2b2>
    5e04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	461a      	mov	r2, r3
    5e10:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e18:	2105      	movs	r1, #5
    5e1a:	5499      	strb	r1, [r3, r2]
    5e1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	3301      	adds	r3, #1
    5e28:	b2da      	uxtb	r2, r3
    5e2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	2bff      	cmp	r3, #255	; 0xff
    5e40:	d105      	bne.n	5e4e <ground_calibrate+0xf6>
    5e42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4a:	2200      	movs	r2, #0
    5e4c:	701a      	strb	r2, [r3, #0]
    5e4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e56:	781b      	ldrb	r3, [r3, #0]
    5e58:	461a      	mov	r2, r3
    5e5a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e62:	2102      	movs	r1, #2
    5e64:	5499      	strb	r1, [r3, r2]
    5e66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	3301      	adds	r3, #1
    5e72:	b2da      	uxtb	r2, r3
    5e74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e7c:	701a      	strb	r2, [r3, #0]
    5e7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	2bff      	cmp	r3, #255	; 0xff
    5e8a:	d105      	bne.n	5e98 <ground_calibrate+0x140>
    5e8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e94:	2200      	movs	r2, #0
    5e96:	701a      	strb	r2, [r3, #0]
    5e98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea0:	2202      	movs	r2, #2
    5ea2:	701a      	strb	r2, [r3, #0]
    5ea4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eac:	2202      	movs	r2, #2
    5eae:	701a      	strb	r2, [r3, #0]
    5eb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb8:	781b      	ldrb	r3, [r3, #0]
    5eba:	461a      	mov	r2, r3
    5ebc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec4:	7819      	ldrb	r1, [r3, #0]
    5ec6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ece:	5499      	strb	r1, [r3, r2]
    5ed0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	3301      	adds	r3, #1
    5edc:	b2da      	uxtb	r2, r3
    5ede:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee6:	701a      	strb	r2, [r3, #0]
    5ee8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	2bff      	cmp	r3, #255	; 0xff
    5ef4:	d105      	bne.n	5f02 <ground_calibrate+0x1aa>
    5ef6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efe:	2200      	movs	r2, #0
    5f00:	701a      	strb	r2, [r3, #0]
    5f02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f0a:	781b      	ldrb	r3, [r3, #0]
    5f0c:	461a      	mov	r2, r3
    5f0e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f16:	7819      	ldrb	r1, [r3, #0]
    5f18:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	5499      	strb	r1, [r3, r2]
    5f22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2a:	781b      	ldrb	r3, [r3, #0]
    5f2c:	3301      	adds	r3, #1
    5f2e:	b2da      	uxtb	r2, r3
    5f30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f38:	701a      	strb	r2, [r3, #0]
    5f3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f42:	781b      	ldrb	r3, [r3, #0]
    5f44:	2bff      	cmp	r3, #255	; 0xff
    5f46:	d105      	bne.n	5f54 <ground_calibrate+0x1fc>
    5f48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f50:	2200      	movs	r2, #0
    5f52:	701a      	strb	r2, [r3, #0]
    5f54:	f242 0339 	movw	r3, #8249	; 0x2039
    5f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5c:	781b      	ldrb	r3, [r3, #0]
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	f003 0310 	and.w	r3, r3, #16
    5f64:	2b00      	cmp	r3, #0
    5f66:	f041 804e 	bne.w	7006 <ground_calibrate+0x12ae>
    5f6a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	b2db      	uxtb	r3, r3
    5f76:	461a      	mov	r2, r3
    5f78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f80:	5c9a      	ldrb	r2, [r3, r2]
    5f82:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    5f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8a:	701a      	strb	r2, [r3, #0]
    5f8c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    5f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f94:	2200      	movs	r2, #0
    5f96:	701a      	strb	r2, [r3, #0]
    5f98:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	b2db      	uxtb	r3, r3
    5fa4:	3301      	adds	r3, #1
    5fa6:	b2da      	uxtb	r2, r3
    5fa8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb0:	701a      	strb	r2, [r3, #0]
    5fb2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	2bff      	cmp	r3, #255	; 0xff
    5fc0:	d105      	bne.n	5fce <ground_calibrate+0x276>
    5fc2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fca:	2200      	movs	r2, #0
    5fcc:	701a      	strb	r2, [r3, #0]
    5fce:	f242 0338 	movw	r3, #8248	; 0x2038
    5fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd6:	f242 0238 	movw	r2, #8248	; 0x2038
    5fda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5fde:	7812      	ldrb	r2, [r2, #0]
    5fe0:	b2d2      	uxtb	r2, r2
    5fe2:	f042 0201 	orr.w	r2, r2, #1
    5fe6:	b2d2      	uxtb	r2, r2
    5fe8:	701a      	strb	r2, [r3, #0]
    5fea:	f242 0339 	movw	r3, #8249	; 0x2039
    5fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff2:	f242 0239 	movw	r2, #8249	; 0x2039
    5ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ffa:	7812      	ldrb	r2, [r2, #0]
    5ffc:	b2d2      	uxtb	r2, r2
    5ffe:	f042 0210 	orr.w	r2, r2, #16
    6002:	b2d2      	uxtb	r2, r2
    6004:	701a      	strb	r2, [r3, #0]
    6006:	f000 bffe 	b.w	7006 <ground_calibrate+0x12ae>
    600a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    600e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	3301      	adds	r3, #1
    6016:	b2da      	uxtb	r2, r3
    6018:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	701a      	strb	r2, [r3, #0]
    6022:	f000 bff0 	b.w	7006 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6026:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602e:	781b      	ldrb	r3, [r3, #0]
    6030:	2b01      	cmp	r3, #1
    6032:	f040 87e8 	bne.w	7006 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6036:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603e:	885b      	ldrh	r3, [r3, #2]
    6040:	b21b      	sxth	r3, r3
    6042:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6046:	db09      	blt.n	605c <ground_calibrate+0x304>
    6048:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6050:	885b      	ldrh	r3, [r3, #2]
    6052:	b21b      	sxth	r3, r3
    6054:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6058:	f340 87d5 	ble.w	7006 <ground_calibrate+0x12ae>
      ir_gain_calib();
    605c:	f00b fcfc 	bl	11a58 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6060:	f240 33f8 	movw	r3, #1016	; 0x3f8
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	681a      	ldr	r2, [r3, #0]
    606a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    606e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6072:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6074:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607c:	781a      	ldrb	r2, [r3, #0]
    607e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6086:	781b      	ldrb	r3, [r3, #0]
    6088:	b2db      	uxtb	r3, r3
    608a:	429a      	cmp	r2, r3
    608c:	d313      	bcc.n	60b6 <ground_calibrate+0x35e>
    608e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	b2db      	uxtb	r3, r3
    609a:	461a      	mov	r2, r3
    609c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    60a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	1ad3      	subs	r3, r2, r3
    60a8:	33ff      	adds	r3, #255	; 0xff
    60aa:	2b14      	cmp	r3, #20
    60ac:	bfd4      	ite	le
    60ae:	2300      	movle	r3, #0
    60b0:	2301      	movgt	r3, #1
    60b2:	b2db      	uxtb	r3, r3
    60b4:	e011      	b.n	60da <ground_calibrate+0x382>
    60b6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    60ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	b2db      	uxtb	r3, r3
    60c2:	461a      	mov	r2, r3
    60c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    60c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	1ad3      	subs	r3, r2, r3
    60d0:	2b14      	cmp	r3, #20
    60d2:	bfd4      	ite	le
    60d4:	2300      	movle	r3, #0
    60d6:	2301      	movgt	r3, #1
    60d8:	b2db      	uxtb	r3, r3
    60da:	2b00      	cmp	r3, #0
    60dc:	f000 85a6 	beq.w	6c2c <ground_calibrate+0xed4>
    60e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    60e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	461a      	mov	r2, r3
    60ec:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    60f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f4:	2105      	movs	r1, #5
    60f6:	5499      	strb	r1, [r3, r2]
    60f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    60fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	3301      	adds	r3, #1
    6104:	b2da      	uxtb	r2, r3
    6106:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    610a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    610e:	701a      	strb	r2, [r3, #0]
    6110:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	2bff      	cmp	r3, #255	; 0xff
    611c:	d105      	bne.n	612a <ground_calibrate+0x3d2>
    611e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6126:	2200      	movs	r2, #0
    6128:	701a      	strb	r2, [r3, #0]
    612a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    612e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	461a      	mov	r2, r3
    6136:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    613a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    613e:	2105      	movs	r1, #5
    6140:	5499      	strb	r1, [r3, r2]
    6142:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614a:	781b      	ldrb	r3, [r3, #0]
    614c:	3301      	adds	r3, #1
    614e:	b2da      	uxtb	r2, r3
    6150:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6158:	701a      	strb	r2, [r3, #0]
    615a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    615e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6162:	781b      	ldrb	r3, [r3, #0]
    6164:	2bff      	cmp	r3, #255	; 0xff
    6166:	d105      	bne.n	6174 <ground_calibrate+0x41c>
    6168:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	2200      	movs	r2, #0
    6172:	701a      	strb	r2, [r3, #0]
    6174:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617c:	2205      	movs	r2, #5
    617e:	701a      	strb	r2, [r3, #0]
    6180:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6188:	2205      	movs	r2, #5
    618a:	701a      	strb	r2, [r3, #0]
    618c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6194:	781b      	ldrb	r3, [r3, #0]
    6196:	461a      	mov	r2, r3
    6198:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    619c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a0:	7819      	ldrb	r1, [r3, #0]
    61a2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    61a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61aa:	5499      	strb	r1, [r3, r2]
    61ac:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    61b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b4:	781a      	ldrb	r2, [r3, #0]
    61b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    61ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	4413      	add	r3, r2
    61c2:	b2da      	uxtb	r2, r3
    61c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	701a      	strb	r2, [r3, #0]
    61ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    61d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d6:	781a      	ldrb	r2, [r3, #0]
    61d8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    61dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	4413      	add	r3, r2
    61e4:	b2da      	uxtb	r2, r3
    61e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    61ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ee:	701a      	strb	r2, [r3, #0]
    61f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	3301      	adds	r3, #1
    61fc:	b2da      	uxtb	r2, r3
    61fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6206:	701a      	strb	r2, [r3, #0]
    6208:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    620c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6210:	781b      	ldrb	r3, [r3, #0]
    6212:	2bff      	cmp	r3, #255	; 0xff
    6214:	d105      	bne.n	6222 <ground_calibrate+0x4ca>
    6216:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621e:	2200      	movs	r2, #0
    6220:	701a      	strb	r2, [r3, #0]
    6222:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	461a      	mov	r2, r3
    622e:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6236:	7859      	ldrb	r1, [r3, #1]
    6238:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    623c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6240:	5499      	strb	r1, [r3, r2]
    6242:	4bd2      	ldr	r3, [pc, #840]	; (658c <ground_calibrate+0x834>)
    6244:	781a      	ldrb	r2, [r3, #0]
    6246:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    624a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	4413      	add	r3, r2
    6252:	b2da      	uxtb	r2, r3
    6254:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	701a      	strb	r2, [r3, #0]
    625e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6266:	781a      	ldrb	r2, [r3, #0]
    6268:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    626c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	4413      	add	r3, r2
    6274:	b2da      	uxtb	r2, r3
    6276:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    627a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    627e:	701a      	strb	r2, [r3, #0]
    6280:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	3301      	adds	r3, #1
    628c:	b2da      	uxtb	r2, r3
    628e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    629c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	2bff      	cmp	r3, #255	; 0xff
    62a4:	d105      	bne.n	62b2 <ground_calibrate+0x55a>
    62a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ae:	2200      	movs	r2, #0
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	461a      	mov	r2, r3
    62be:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	7899      	ldrb	r1, [r3, #2]
    62c8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    62cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d0:	5499      	strb	r1, [r3, r2]
    62d2:	4baf      	ldr	r3, [pc, #700]	; (6590 <ground_calibrate+0x838>)
    62d4:	781a      	ldrb	r2, [r3, #0]
    62d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	4413      	add	r3, r2
    62e2:	b2da      	uxtb	r2, r3
    62e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	781a      	ldrb	r2, [r3, #0]
    62f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	4413      	add	r3, r2
    6304:	b2da      	uxtb	r2, r3
    6306:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    630a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    630e:	701a      	strb	r2, [r3, #0]
    6310:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6318:	781b      	ldrb	r3, [r3, #0]
    631a:	3301      	adds	r3, #1
    631c:	b2da      	uxtb	r2, r3
    631e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6326:	701a      	strb	r2, [r3, #0]
    6328:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    632c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6330:	781b      	ldrb	r3, [r3, #0]
    6332:	2bff      	cmp	r3, #255	; 0xff
    6334:	d105      	bne.n	6342 <ground_calibrate+0x5ea>
    6336:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	2200      	movs	r2, #0
    6340:	701a      	strb	r2, [r3, #0]
    6342:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	461a      	mov	r2, r3
    634e:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6356:	78d9      	ldrb	r1, [r3, #3]
    6358:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    635c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6360:	5499      	strb	r1, [r3, r2]
    6362:	4b8c      	ldr	r3, [pc, #560]	; (6594 <ground_calibrate+0x83c>)
    6364:	781a      	ldrb	r2, [r3, #0]
    6366:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    636a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636e:	781b      	ldrb	r3, [r3, #0]
    6370:	4413      	add	r3, r2
    6372:	b2da      	uxtb	r2, r3
    6374:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637c:	701a      	strb	r2, [r3, #0]
    637e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6386:	781a      	ldrb	r2, [r3, #0]
    6388:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	4413      	add	r3, r2
    6394:	b2da      	uxtb	r2, r3
    6396:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639e:	701a      	strb	r2, [r3, #0]
    63a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a8:	781b      	ldrb	r3, [r3, #0]
    63aa:	3301      	adds	r3, #1
    63ac:	b2da      	uxtb	r2, r3
    63ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b6:	701a      	strb	r2, [r3, #0]
    63b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	2bff      	cmp	r3, #255	; 0xff
    63c4:	d105      	bne.n	63d2 <ground_calibrate+0x67a>
    63c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	2200      	movs	r2, #0
    63d0:	701a      	strb	r2, [r3, #0]
    63d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63da:	781b      	ldrb	r3, [r3, #0]
    63dc:	461a      	mov	r2, r3
    63de:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    63e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e6:	7819      	ldrb	r1, [r3, #0]
    63e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    63ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f0:	5499      	strb	r1, [r3, r2]
    63f2:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    63f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fa:	781a      	ldrb	r2, [r3, #0]
    63fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	4413      	add	r3, r2
    6408:	b2da      	uxtb	r2, r3
    640a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	701a      	strb	r2, [r3, #0]
    6414:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641c:	781a      	ldrb	r2, [r3, #0]
    641e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	4413      	add	r3, r2
    642a:	b2da      	uxtb	r2, r3
    642c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6434:	701a      	strb	r2, [r3, #0]
    6436:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    643a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	3301      	adds	r3, #1
    6442:	b2da      	uxtb	r2, r3
    6444:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644c:	701a      	strb	r2, [r3, #0]
    644e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6456:	781b      	ldrb	r3, [r3, #0]
    6458:	2bff      	cmp	r3, #255	; 0xff
    645a:	d105      	bne.n	6468 <ground_calibrate+0x710>
    645c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	2200      	movs	r2, #0
    6466:	701a      	strb	r2, [r3, #0]
    6468:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    646c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6470:	781b      	ldrb	r3, [r3, #0]
    6472:	461a      	mov	r2, r3
    6474:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647c:	7859      	ldrb	r1, [r3, #1]
    647e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6486:	5499      	strb	r1, [r3, r2]
    6488:	4b43      	ldr	r3, [pc, #268]	; (6598 <ground_calibrate+0x840>)
    648a:	781a      	ldrb	r2, [r3, #0]
    648c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	4413      	add	r3, r2
    6498:	b2da      	uxtb	r2, r3
    649a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	701a      	strb	r2, [r3, #0]
    64a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    64a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ac:	781a      	ldrb	r2, [r3, #0]
    64ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    64b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b6:	781b      	ldrb	r3, [r3, #0]
    64b8:	4413      	add	r3, r2
    64ba:	b2da      	uxtb	r2, r3
    64bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	701a      	strb	r2, [r3, #0]
    64c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ce:	781b      	ldrb	r3, [r3, #0]
    64d0:	3301      	adds	r3, #1
    64d2:	b2da      	uxtb	r2, r3
    64d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64dc:	701a      	strb	r2, [r3, #0]
    64de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e6:	781b      	ldrb	r3, [r3, #0]
    64e8:	2bff      	cmp	r3, #255	; 0xff
    64ea:	d105      	bne.n	64f8 <ground_calibrate+0x7a0>
    64ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f4:	2200      	movs	r2, #0
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	461a      	mov	r2, r3
    6504:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650c:	7899      	ldrb	r1, [r3, #2]
    650e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6516:	5499      	strb	r1, [r3, r2]
    6518:	4b20      	ldr	r3, [pc, #128]	; (659c <ground_calibrate+0x844>)
    651a:	781a      	ldrb	r2, [r3, #0]
    651c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	4413      	add	r3, r2
    6528:	b2da      	uxtb	r2, r3
    652a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    652e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6532:	701a      	strb	r2, [r3, #0]
    6534:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653c:	781a      	ldrb	r2, [r3, #0]
    653e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	4413      	add	r3, r2
    654a:	b2da      	uxtb	r2, r3
    654c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6554:	701a      	strb	r2, [r3, #0]
    6556:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    655a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	3301      	adds	r3, #1
    6562:	b2da      	uxtb	r2, r3
    6564:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656c:	701a      	strb	r2, [r3, #0]
    656e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6576:	781b      	ldrb	r3, [r3, #0]
    6578:	2bff      	cmp	r3, #255	; 0xff
    657a:	d111      	bne.n	65a0 <ground_calibrate+0x848>
    657c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6584:	2200      	movs	r2, #0
    6586:	701a      	strb	r2, [r3, #0]
    6588:	e00a      	b.n	65a0 <ground_calibrate+0x848>
    658a:	bf00      	nop
    658c:	2000b4c9 	.word	0x2000b4c9
    6590:	2000b4ca 	.word	0x2000b4ca
    6594:	2000b4cb 	.word	0x2000b4cb
    6598:	2000b4cd 	.word	0x2000b4cd
    659c:	2000b4ce 	.word	0x2000b4ce
    65a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a8:	781b      	ldrb	r3, [r3, #0]
    65aa:	461a      	mov	r2, r3
    65ac:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    65b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b4:	78d9      	ldrb	r1, [r3, #3]
    65b6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    65ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65be:	5499      	strb	r1, [r3, r2]
    65c0:	4bd3      	ldr	r3, [pc, #844]	; (6910 <ground_calibrate+0xbb8>)
    65c2:	781a      	ldrb	r2, [r3, #0]
    65c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65cc:	781b      	ldrb	r3, [r3, #0]
    65ce:	4413      	add	r3, r2
    65d0:	b2da      	uxtb	r2, r3
    65d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65da:	701a      	strb	r2, [r3, #0]
    65dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    65e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e4:	781a      	ldrb	r2, [r3, #0]
    65e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ee:	781b      	ldrb	r3, [r3, #0]
    65f0:	4413      	add	r3, r2
    65f2:	b2da      	uxtb	r2, r3
    65f4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    65f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fc:	701a      	strb	r2, [r3, #0]
    65fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6606:	781b      	ldrb	r3, [r3, #0]
    6608:	3301      	adds	r3, #1
    660a:	b2da      	uxtb	r2, r3
    660c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	2bff      	cmp	r3, #255	; 0xff
    6622:	d105      	bne.n	6630 <ground_calibrate+0x8d8>
    6624:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662c:	2200      	movs	r2, #0
    662e:	701a      	strb	r2, [r3, #0]
    6630:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6638:	781b      	ldrb	r3, [r3, #0]
    663a:	461a      	mov	r2, r3
    663c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6644:	7819      	ldrb	r1, [r3, #0]
    6646:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    664a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664e:	5499      	strb	r1, [r3, r2]
    6650:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6658:	781a      	ldrb	r2, [r3, #0]
    665a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    665e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	4413      	add	r3, r2
    6666:	b2da      	uxtb	r2, r3
    6668:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6670:	701a      	strb	r2, [r3, #0]
    6672:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667a:	781a      	ldrb	r2, [r3, #0]
    667c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6684:	781b      	ldrb	r3, [r3, #0]
    6686:	4413      	add	r3, r2
    6688:	b2da      	uxtb	r2, r3
    668a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    668e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6692:	701a      	strb	r2, [r3, #0]
    6694:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	3301      	adds	r3, #1
    66a0:	b2da      	uxtb	r2, r3
    66a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66aa:	701a      	strb	r2, [r3, #0]
    66ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	2bff      	cmp	r3, #255	; 0xff
    66b8:	d105      	bne.n	66c6 <ground_calibrate+0x96e>
    66ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c2:	2200      	movs	r2, #0
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    66ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	461a      	mov	r2, r3
    66d2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    66d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66da:	7859      	ldrb	r1, [r3, #1]
    66dc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    66e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e4:	5499      	strb	r1, [r3, r2]
    66e6:	4b8b      	ldr	r3, [pc, #556]	; (6914 <ground_calibrate+0xbbc>)
    66e8:	781a      	ldrb	r2, [r3, #0]
    66ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	4413      	add	r3, r2
    66f6:	b2da      	uxtb	r2, r3
    66f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6700:	701a      	strb	r2, [r3, #0]
    6702:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670a:	781a      	ldrb	r2, [r3, #0]
    670c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6714:	781b      	ldrb	r3, [r3, #0]
    6716:	4413      	add	r3, r2
    6718:	b2da      	uxtb	r2, r3
    671a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    671e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6722:	701a      	strb	r2, [r3, #0]
    6724:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	3301      	adds	r3, #1
    6730:	b2da      	uxtb	r2, r3
    6732:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	2bff      	cmp	r3, #255	; 0xff
    6748:	d105      	bne.n	6756 <ground_calibrate+0x9fe>
    674a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    674e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6752:	2200      	movs	r2, #0
    6754:	701a      	strb	r2, [r3, #0]
    6756:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    675a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675e:	781b      	ldrb	r3, [r3, #0]
    6760:	461a      	mov	r2, r3
    6762:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    6766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    676a:	7899      	ldrb	r1, [r3, #2]
    676c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6774:	5499      	strb	r1, [r3, r2]
    6776:	4b68      	ldr	r3, [pc, #416]	; (6918 <ground_calibrate+0xbc0>)
    6778:	781a      	ldrb	r2, [r3, #0]
    677a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    677e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6782:	781b      	ldrb	r3, [r3, #0]
    6784:	4413      	add	r3, r2
    6786:	b2da      	uxtb	r2, r3
    6788:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    678c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6790:	701a      	strb	r2, [r3, #0]
    6792:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679a:	781a      	ldrb	r2, [r3, #0]
    679c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a4:	781b      	ldrb	r3, [r3, #0]
    67a6:	4413      	add	r3, r2
    67a8:	b2da      	uxtb	r2, r3
    67aa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    67ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b2:	701a      	strb	r2, [r3, #0]
    67b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	3301      	adds	r3, #1
    67c0:	b2da      	uxtb	r2, r3
    67c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	701a      	strb	r2, [r3, #0]
    67cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	2bff      	cmp	r3, #255	; 0xff
    67d8:	d105      	bne.n	67e6 <ground_calibrate+0xa8e>
    67da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e2:	2200      	movs	r2, #0
    67e4:	701a      	strb	r2, [r3, #0]
    67e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ee:	781b      	ldrb	r3, [r3, #0]
    67f0:	461a      	mov	r2, r3
    67f2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    67f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fa:	78d9      	ldrb	r1, [r3, #3]
    67fc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6804:	5499      	strb	r1, [r3, r2]
    6806:	4b45      	ldr	r3, [pc, #276]	; (691c <ground_calibrate+0xbc4>)
    6808:	781a      	ldrb	r2, [r3, #0]
    680a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    680e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6812:	781b      	ldrb	r3, [r3, #0]
    6814:	4413      	add	r3, r2
    6816:	b2da      	uxtb	r2, r3
    6818:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    681c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6820:	701a      	strb	r2, [r3, #0]
    6822:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682a:	781a      	ldrb	r2, [r3, #0]
    682c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	4413      	add	r3, r2
    6838:	b2da      	uxtb	r2, r3
    683a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    683e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6842:	701a      	strb	r2, [r3, #0]
    6844:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	3301      	adds	r3, #1
    6850:	b2da      	uxtb	r2, r3
    6852:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685a:	701a      	strb	r2, [r3, #0]
    685c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6864:	781b      	ldrb	r3, [r3, #0]
    6866:	2bff      	cmp	r3, #255	; 0xff
    6868:	d105      	bne.n	6876 <ground_calibrate+0xb1e>
    686a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    686e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6872:	2200      	movs	r2, #0
    6874:	701a      	strb	r2, [r3, #0]
    6876:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    687a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	461a      	mov	r2, r3
    6882:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688a:	7819      	ldrb	r1, [r3, #0]
    688c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6894:	5499      	strb	r1, [r3, r2]
    6896:	f240 33f2 	movw	r3, #1010	; 0x3f2
    689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689e:	781a      	ldrb	r2, [r3, #0]
    68a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a8:	781b      	ldrb	r3, [r3, #0]
    68aa:	4413      	add	r3, r2
    68ac:	b2da      	uxtb	r2, r3
    68ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b6:	701a      	strb	r2, [r3, #0]
    68b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    68bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c0:	781a      	ldrb	r2, [r3, #0]
    68c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    68c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	4413      	add	r3, r2
    68ce:	b2da      	uxtb	r2, r3
    68d0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    68d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d8:	701a      	strb	r2, [r3, #0]
    68da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e2:	781b      	ldrb	r3, [r3, #0]
    68e4:	3301      	adds	r3, #1
    68e6:	b2da      	uxtb	r2, r3
    68e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f0:	701a      	strb	r2, [r3, #0]
    68f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fa:	781b      	ldrb	r3, [r3, #0]
    68fc:	2bff      	cmp	r3, #255	; 0xff
    68fe:	d10f      	bne.n	6920 <ground_calibrate+0xbc8>
    6900:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6908:	2200      	movs	r2, #0
    690a:	701a      	strb	r2, [r3, #0]
    690c:	e008      	b.n	6920 <ground_calibrate+0xbc8>
    690e:	bf00      	nop
    6910:	2000b4cf 	.word	0x2000b4cf
    6914:	2000b4c5 	.word	0x2000b4c5
    6918:	2000b4c6 	.word	0x2000b4c6
    691c:	2000b4c7 	.word	0x2000b4c7
    6920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	461a      	mov	r2, r3
    692c:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6934:	7859      	ldrb	r1, [r3, #1]
    6936:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693e:	5499      	strb	r1, [r3, r2]
    6940:	4bd4      	ldr	r3, [pc, #848]	; (6c94 <ground_calibrate+0xf3c>)
    6942:	781a      	ldrb	r2, [r3, #0]
    6944:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694c:	781b      	ldrb	r3, [r3, #0]
    694e:	4413      	add	r3, r2
    6950:	b2da      	uxtb	r2, r3
    6952:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695a:	701a      	strb	r2, [r3, #0]
    695c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6964:	781a      	ldrb	r2, [r3, #0]
    6966:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    696a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	4413      	add	r3, r2
    6972:	b2da      	uxtb	r2, r3
    6974:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    697c:	701a      	strb	r2, [r3, #0]
    697e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	3301      	adds	r3, #1
    698a:	b2da      	uxtb	r2, r3
    698c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6994:	701a      	strb	r2, [r3, #0]
    6996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    699a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	2bff      	cmp	r3, #255	; 0xff
    69a2:	d105      	bne.n	69b0 <ground_calibrate+0xc58>
    69a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ac:	2200      	movs	r2, #0
    69ae:	701a      	strb	r2, [r3, #0]
    69b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	461a      	mov	r2, r3
    69bc:	f240 33f4 	movw	r3, #1012	; 0x3f4
    69c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c4:	7819      	ldrb	r1, [r3, #0]
    69c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    69ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ce:	5499      	strb	r1, [r3, r2]
    69d0:	f240 33f4 	movw	r3, #1012	; 0x3f4
    69d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d8:	781a      	ldrb	r2, [r3, #0]
    69da:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    69de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e2:	781b      	ldrb	r3, [r3, #0]
    69e4:	4413      	add	r3, r2
    69e6:	b2da      	uxtb	r2, r3
    69e8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    69ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f0:	701a      	strb	r2, [r3, #0]
    69f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    69f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fa:	781a      	ldrb	r2, [r3, #0]
    69fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	4413      	add	r3, r2
    6a08:	b2da      	uxtb	r2, r3
    6a0a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a12:	701a      	strb	r2, [r3, #0]
    6a14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	3301      	adds	r3, #1
    6a20:	b2da      	uxtb	r2, r3
    6a22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2a:	701a      	strb	r2, [r3, #0]
    6a2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a34:	781b      	ldrb	r3, [r3, #0]
    6a36:	2bff      	cmp	r3, #255	; 0xff
    6a38:	d105      	bne.n	6a46 <ground_calibrate+0xcee>
    6a3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a42:	2200      	movs	r2, #0
    6a44:	701a      	strb	r2, [r3, #0]
    6a46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	461a      	mov	r2, r3
    6a52:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5a:	7859      	ldrb	r1, [r3, #1]
    6a5c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a64:	5499      	strb	r1, [r3, r2]
    6a66:	4b8c      	ldr	r3, [pc, #560]	; (6c98 <ground_calibrate+0xf40>)
    6a68:	781a      	ldrb	r2, [r3, #0]
    6a6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a72:	781b      	ldrb	r3, [r3, #0]
    6a74:	4413      	add	r3, r2
    6a76:	b2da      	uxtb	r2, r3
    6a78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a80:	701a      	strb	r2, [r3, #0]
    6a82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8a:	781a      	ldrb	r2, [r3, #0]
    6a8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	4413      	add	r3, r2
    6a98:	b2da      	uxtb	r2, r3
    6a9a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa2:	701a      	strb	r2, [r3, #0]
    6aa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aac:	781b      	ldrb	r3, [r3, #0]
    6aae:	3301      	adds	r3, #1
    6ab0:	b2da      	uxtb	r2, r3
    6ab2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aba:	701a      	strb	r2, [r3, #0]
    6abc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac4:	781b      	ldrb	r3, [r3, #0]
    6ac6:	2bff      	cmp	r3, #255	; 0xff
    6ac8:	d105      	bne.n	6ad6 <ground_calibrate+0xd7e>
    6aca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad2:	2200      	movs	r2, #0
    6ad4:	701a      	strb	r2, [r3, #0]
    6ad6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	461a      	mov	r2, r3
    6ae2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aea:	7819      	ldrb	r1, [r3, #0]
    6aec:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af4:	5499      	strb	r1, [r3, r2]
    6af6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6afe:	781b      	ldrb	r3, [r3, #0]
    6b00:	3301      	adds	r3, #1
    6b02:	b2da      	uxtb	r2, r3
    6b04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0c:	701a      	strb	r2, [r3, #0]
    6b0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	2bff      	cmp	r3, #255	; 0xff
    6b1a:	d105      	bne.n	6b28 <ground_calibrate+0xdd0>
    6b1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b24:	2200      	movs	r2, #0
    6b26:	701a      	strb	r2, [r3, #0]
    6b28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b30:	781b      	ldrb	r3, [r3, #0]
    6b32:	461a      	mov	r2, r3
    6b34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3c:	7819      	ldrb	r1, [r3, #0]
    6b3e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b46:	5499      	strb	r1, [r3, r2]
    6b48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	3301      	adds	r3, #1
    6b54:	b2da      	uxtb	r2, r3
    6b56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5e:	701a      	strb	r2, [r3, #0]
    6b60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	2bff      	cmp	r3, #255	; 0xff
    6b6c:	d105      	bne.n	6b7a <ground_calibrate+0xe22>
    6b6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b76:	2200      	movs	r2, #0
    6b78:	701a      	strb	r2, [r3, #0]
    6b7a:	f242 0339 	movw	r3, #8249	; 0x2039
    6b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	b2db      	uxtb	r3, r3
    6b86:	f003 0310 	and.w	r3, r3, #16
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d15a      	bne.n	6c44 <ground_calibrate+0xeec>
    6b8e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	b2db      	uxtb	r3, r3
    6b9a:	461a      	mov	r2, r3
    6b9c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba4:	5c9a      	ldrb	r2, [r3, r2]
    6ba6:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    6baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bae:	701a      	strb	r2, [r3, #0]
    6bb0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb8:	2200      	movs	r2, #0
    6bba:	701a      	strb	r2, [r3, #0]
    6bbc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	b2db      	uxtb	r3, r3
    6bc8:	3301      	adds	r3, #1
    6bca:	b2da      	uxtb	r2, r3
    6bcc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd4:	701a      	strb	r2, [r3, #0]
    6bd6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	b2db      	uxtb	r3, r3
    6be2:	2bff      	cmp	r3, #255	; 0xff
    6be4:	d105      	bne.n	6bf2 <ground_calibrate+0xe9a>
    6be6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bee:	2200      	movs	r2, #0
    6bf0:	701a      	strb	r2, [r3, #0]
    6bf2:	f242 0338 	movw	r3, #8248	; 0x2038
    6bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfa:	f242 0238 	movw	r2, #8248	; 0x2038
    6bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6c02:	7812      	ldrb	r2, [r2, #0]
    6c04:	b2d2      	uxtb	r2, r2
    6c06:	f042 0201 	orr.w	r2, r2, #1
    6c0a:	b2d2      	uxtb	r2, r2
    6c0c:	701a      	strb	r2, [r3, #0]
    6c0e:	f242 0339 	movw	r3, #8249	; 0x2039
    6c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c16:	f242 0239 	movw	r2, #8249	; 0x2039
    6c1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6c1e:	7812      	ldrb	r2, [r2, #0]
    6c20:	b2d2      	uxtb	r2, r2
    6c22:	f042 0210 	orr.w	r2, r2, #16
    6c26:	b2d2      	uxtb	r2, r2
    6c28:	701a      	strb	r2, [r3, #0]
    6c2a:	e00b      	b.n	6c44 <ground_calibrate+0xeec>
    6c2c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c34:	781b      	ldrb	r3, [r3, #0]
    6c36:	3301      	adds	r3, #1
    6c38:	b2da      	uxtb	r2, r3
    6c3a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c42:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6c44:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    6c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4c:	2202      	movs	r2, #2
    6c4e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6c50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c58:	781a      	ldrb	r2, [r3, #0]
    6c5a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	b2db      	uxtb	r3, r3
    6c66:	429a      	cmp	r2, r3
    6c68:	d318      	bcc.n	6c9c <ground_calibrate+0xf44>
    6c6a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	b2db      	uxtb	r3, r3
    6c76:	461a      	mov	r2, r3
    6c78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c80:	781b      	ldrb	r3, [r3, #0]
    6c82:	1ad3      	subs	r3, r2, r3
    6c84:	33ff      	adds	r3, #255	; 0xff
    6c86:	2b06      	cmp	r3, #6
    6c88:	bfd4      	ite	le
    6c8a:	2300      	movle	r3, #0
    6c8c:	2301      	movgt	r3, #1
    6c8e:	b2db      	uxtb	r3, r3
    6c90:	e016      	b.n	6cc0 <ground_calibrate+0xf68>
    6c92:	bf00      	nop
    6c94:	200003f3 	.word	0x200003f3
    6c98:	200003f5 	.word	0x200003f5
    6c9c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	b2db      	uxtb	r3, r3
    6ca8:	461a      	mov	r2, r3
    6caa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb2:	781b      	ldrb	r3, [r3, #0]
    6cb4:	1ad3      	subs	r3, r2, r3
    6cb6:	2b06      	cmp	r3, #6
    6cb8:	bfd4      	ite	le
    6cba:	2300      	movle	r3, #0
    6cbc:	2301      	movgt	r3, #1
    6cbe:	b2db      	uxtb	r3, r3
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	f000 8194 	beq.w	6fee <ground_calibrate+0x1296>
    6cc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cce:	781b      	ldrb	r3, [r3, #0]
    6cd0:	461a      	mov	r2, r3
    6cd2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cda:	2105      	movs	r1, #5
    6cdc:	5499      	strb	r1, [r3, r2]
    6cde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce6:	781b      	ldrb	r3, [r3, #0]
    6ce8:	3301      	adds	r3, #1
    6cea:	b2da      	uxtb	r2, r3
    6cec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf4:	701a      	strb	r2, [r3, #0]
    6cf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	2bff      	cmp	r3, #255	; 0xff
    6d02:	d105      	bne.n	6d10 <ground_calibrate+0xfb8>
    6d04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	2200      	movs	r2, #0
    6d0e:	701a      	strb	r2, [r3, #0]
    6d10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d18:	781b      	ldrb	r3, [r3, #0]
    6d1a:	461a      	mov	r2, r3
    6d1c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d24:	2103      	movs	r1, #3
    6d26:	5499      	strb	r1, [r3, r2]
    6d28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	3301      	adds	r3, #1
    6d34:	b2da      	uxtb	r2, r3
    6d36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3e:	701a      	strb	r2, [r3, #0]
    6d40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	2bff      	cmp	r3, #255	; 0xff
    6d4c:	d105      	bne.n	6d5a <ground_calibrate+0x1002>
    6d4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d56:	2200      	movs	r2, #0
    6d58:	701a      	strb	r2, [r3, #0]
    6d5a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d62:	2203      	movs	r2, #3
    6d64:	701a      	strb	r2, [r3, #0]
    6d66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d6e:	2203      	movs	r2, #3
    6d70:	701a      	strb	r2, [r3, #0]
    6d72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	461a      	mov	r2, r3
    6d7e:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d86:	7819      	ldrb	r1, [r3, #0]
    6d88:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d90:	5499      	strb	r1, [r3, r2]
    6d92:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9a:	781a      	ldrb	r2, [r3, #0]
    6d9c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da4:	781b      	ldrb	r3, [r3, #0]
    6da6:	4413      	add	r3, r2
    6da8:	b2da      	uxtb	r2, r3
    6daa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db2:	701a      	strb	r2, [r3, #0]
    6db4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dbc:	781a      	ldrb	r2, [r3, #0]
    6dbe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	4413      	add	r3, r2
    6dca:	b2da      	uxtb	r2, r3
    6dcc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd4:	701a      	strb	r2, [r3, #0]
    6dd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	3301      	adds	r3, #1
    6de2:	b2da      	uxtb	r2, r3
    6de4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dec:	701a      	strb	r2, [r3, #0]
    6dee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2bff      	cmp	r3, #255	; 0xff
    6dfa:	d105      	bne.n	6e08 <ground_calibrate+0x10b0>
    6dfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e04:	2200      	movs	r2, #0
    6e06:	701a      	strb	r2, [r3, #0]
    6e08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	461a      	mov	r2, r3
    6e14:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1c:	7859      	ldrb	r1, [r3, #1]
    6e1e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e26:	5499      	strb	r1, [r3, r2]
    6e28:	4b77      	ldr	r3, [pc, #476]	; (7008 <ground_calibrate+0x12b0>)
    6e2a:	781a      	ldrb	r2, [r3, #0]
    6e2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e34:	781b      	ldrb	r3, [r3, #0]
    6e36:	4413      	add	r3, r2
    6e38:	b2da      	uxtb	r2, r3
    6e3a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e42:	701a      	strb	r2, [r3, #0]
    6e44:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4c:	781a      	ldrb	r2, [r3, #0]
    6e4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e56:	781b      	ldrb	r3, [r3, #0]
    6e58:	4413      	add	r3, r2
    6e5a:	b2da      	uxtb	r2, r3
    6e5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e64:	701a      	strb	r2, [r3, #0]
    6e66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	3301      	adds	r3, #1
    6e72:	b2da      	uxtb	r2, r3
    6e74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e7c:	701a      	strb	r2, [r3, #0]
    6e7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e86:	781b      	ldrb	r3, [r3, #0]
    6e88:	2bff      	cmp	r3, #255	; 0xff
    6e8a:	d105      	bne.n	6e98 <ground_calibrate+0x1140>
    6e8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e94:	2200      	movs	r2, #0
    6e96:	701a      	strb	r2, [r3, #0]
    6e98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea0:	781b      	ldrb	r3, [r3, #0]
    6ea2:	461a      	mov	r2, r3
    6ea4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eac:	7819      	ldrb	r1, [r3, #0]
    6eae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb6:	5499      	strb	r1, [r3, r2]
    6eb8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec0:	781b      	ldrb	r3, [r3, #0]
    6ec2:	3301      	adds	r3, #1
    6ec4:	b2da      	uxtb	r2, r3
    6ec6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ece:	701a      	strb	r2, [r3, #0]
    6ed0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	2bff      	cmp	r3, #255	; 0xff
    6edc:	d105      	bne.n	6eea <ground_calibrate+0x1192>
    6ede:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee6:	2200      	movs	r2, #0
    6ee8:	701a      	strb	r2, [r3, #0]
    6eea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef2:	781b      	ldrb	r3, [r3, #0]
    6ef4:	461a      	mov	r2, r3
    6ef6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efe:	7819      	ldrb	r1, [r3, #0]
    6f00:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f08:	5499      	strb	r1, [r3, r2]
    6f0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	3301      	adds	r3, #1
    6f16:	b2da      	uxtb	r2, r3
    6f18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f20:	701a      	strb	r2, [r3, #0]
    6f22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	2bff      	cmp	r3, #255	; 0xff
    6f2e:	d105      	bne.n	6f3c <ground_calibrate+0x11e4>
    6f30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f38:	2200      	movs	r2, #0
    6f3a:	701a      	strb	r2, [r3, #0]
    6f3c:	f242 0339 	movw	r3, #8249	; 0x2039
    6f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	b2db      	uxtb	r3, r3
    6f48:	f003 0310 	and.w	r3, r3, #16
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d15a      	bne.n	7006 <ground_calibrate+0x12ae>
    6f50:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	b2db      	uxtb	r3, r3
    6f5c:	461a      	mov	r2, r3
    6f5e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f66:	5c9a      	ldrb	r2, [r3, r2]
    6f68:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    6f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f70:	701a      	strb	r2, [r3, #0]
    6f72:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7a:	2200      	movs	r2, #0
    6f7c:	701a      	strb	r2, [r3, #0]
    6f7e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	b2db      	uxtb	r3, r3
    6f8a:	3301      	adds	r3, #1
    6f8c:	b2da      	uxtb	r2, r3
    6f8e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	701a      	strb	r2, [r3, #0]
    6f98:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	b2db      	uxtb	r3, r3
    6fa4:	2bff      	cmp	r3, #255	; 0xff
    6fa6:	d105      	bne.n	6fb4 <ground_calibrate+0x125c>
    6fa8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb0:	2200      	movs	r2, #0
    6fb2:	701a      	strb	r2, [r3, #0]
    6fb4:	f242 0338 	movw	r3, #8248	; 0x2038
    6fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fbc:	f242 0238 	movw	r2, #8248	; 0x2038
    6fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6fc4:	7812      	ldrb	r2, [r2, #0]
    6fc6:	b2d2      	uxtb	r2, r2
    6fc8:	f042 0201 	orr.w	r2, r2, #1
    6fcc:	b2d2      	uxtb	r2, r2
    6fce:	701a      	strb	r2, [r3, #0]
    6fd0:	f242 0339 	movw	r3, #8249	; 0x2039
    6fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd8:	f242 0239 	movw	r2, #8249	; 0x2039
    6fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6fe0:	7812      	ldrb	r2, [r2, #0]
    6fe2:	b2d2      	uxtb	r2, r2
    6fe4:	f042 0210 	orr.w	r2, r2, #16
    6fe8:	b2d2      	uxtb	r2, r2
    6fea:	701a      	strb	r2, [r3, #0]
    6fec:	e00b      	b.n	7006 <ground_calibrate+0x12ae>
    6fee:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff6:	781b      	ldrb	r3, [r3, #0]
    6ff8:	3301      	adds	r3, #1
    6ffa:	b2da      	uxtb	r2, r3
    6ffc:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    7000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7004:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7006:	bd80      	pop	{r7, pc}
    7008:	200003f1 	.word	0x200003f1

0000700c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    700c:	b480      	push	{r7}
    700e:	b083      	sub	sp, #12
    7010:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7012:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    7016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	2b03      	cmp	r3, #3
    701e:	d10c      	bne.n	703a <pprz_mode_update+0x2e>
    7020:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	2b00      	cmp	r3, #0
    702c:	d032      	beq.n	7094 <pprz_mode_update+0x88>
    702e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7036:	2200      	movs	r2, #0
    7038:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    703a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    703e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7042:	891b      	ldrh	r3, [r3, #8]
    7044:	b21b      	sxth	r3, r3
    7046:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    704a:	dc0f      	bgt.n	706c <pprz_mode_update+0x60>
    704c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7054:	891b      	ldrh	r3, [r3, #8]
    7056:	b21a      	sxth	r2, r3
    7058:	f64e 5341 	movw	r3, #60737	; 0xed41
    705c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7060:	429a      	cmp	r2, r3
    7062:	bfb4      	ite	lt
    7064:	2300      	movlt	r3, #0
    7066:	2301      	movge	r3, #1
    7068:	b2db      	uxtb	r3, r3
    706a:	e000      	b.n	706e <pprz_mode_update+0x62>
    706c:	2302      	movs	r3, #2
    706e:	71fb      	strb	r3, [r7, #7]
    7070:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    7074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7078:	781b      	ldrb	r3, [r3, #0]
    707a:	79fa      	ldrb	r2, [r7, #7]
    707c:	429a      	cmp	r2, r3
    707e:	d007      	beq.n	7090 <pprz_mode_update+0x84>
    7080:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    7084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7088:	79fa      	ldrb	r2, [r7, #7]
    708a:	701a      	strb	r2, [r3, #0]
    708c:	2301      	movs	r3, #1
    708e:	e002      	b.n	7096 <pprz_mode_update+0x8a>
    7090:	2300      	movs	r3, #0
    7092:	e000      	b.n	7096 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7094:	2300      	movs	r3, #0
}
    7096:	4618      	mov	r0, r3
    7098:	370c      	adds	r7, #12
    709a:	46bd      	mov	sp, r7
    709c:	f85d 7b04 	ldr.w	r7, [sp], #4
    70a0:	4770      	bx	lr
    70a2:	bf00      	nop

000070a4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    70a4:	b480      	push	{r7}
    70a6:	b083      	sub	sp, #12
    70a8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    70aa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    70ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b2:	89db      	ldrh	r3, [r3, #14]
    70b4:	b21a      	sxth	r2, r3
    70b6:	f640 437f 	movw	r3, #3199	; 0xc7f
    70ba:	429a      	cmp	r2, r3
    70bc:	bfd4      	ite	le
    70be:	2300      	movle	r3, #0
    70c0:	2301      	movgt	r3, #1
    70c2:	b2db      	uxtb	r3, r3
    70c4:	71fb      	strb	r3, [r7, #7]
    70c6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    70ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ce:	781b      	ldrb	r3, [r3, #0]
    70d0:	79fa      	ldrb	r2, [r7, #7]
    70d2:	429a      	cmp	r2, r3
    70d4:	d007      	beq.n	70e6 <ir_estim_mode_update+0x42>
    70d6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    70da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70de:	79fa      	ldrb	r2, [r7, #7]
    70e0:	701a      	strb	r2, [r3, #0]
    70e2:	2301      	movs	r3, #1
    70e4:	e000      	b.n	70e8 <ir_estim_mode_update+0x44>
    70e6:	2300      	movs	r3, #0
}
    70e8:	4618      	mov	r0, r3
    70ea:	370c      	adds	r7, #12
    70ec:	46bd      	mov	sp, r7
    70ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f2:	4770      	bx	lr

000070f4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    70f4:	b480      	push	{r7}
    70f6:	b083      	sub	sp, #12
    70f8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    70fa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    70fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7102:	7cdb      	ldrb	r3, [r3, #19]
    7104:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7106:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    710a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    710e:	781b      	ldrb	r3, [r3, #0]
    7110:	79fa      	ldrb	r2, [r7, #7]
    7112:	429a      	cmp	r2, r3
    7114:	d017      	beq.n	7146 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7116:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    711a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	461a      	mov	r2, r3
    7122:	79fb      	ldrb	r3, [r7, #7]
    7124:	4053      	eors	r3, r2
    7126:	f003 0303 	and.w	r3, r3, #3
    712a:	2b00      	cmp	r3, #0
    712c:	bf0c      	ite	eq
    712e:	2300      	moveq	r3, #0
    7130:	2301      	movne	r3, #1
    7132:	b2db      	uxtb	r3, r3
    7134:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7136:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713e:	79fa      	ldrb	r2, [r7, #7]
    7140:	701a      	strb	r2, [r3, #0]
    return changed;
    7142:	79bb      	ldrb	r3, [r7, #6]
    7144:	e000      	b.n	7148 <mcu1_status_update+0x54>
  }
  return FALSE;
    7146:	2300      	movs	r3, #0
}
    7148:	4618      	mov	r0, r3
    714a:	370c      	adds	r7, #12
    714c:	46bd      	mov	sp, r7
    714e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7152:	4770      	bx	lr

00007154 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7154:	b480      	push	{r7}
    7156:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7158:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    715c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7160:	781b      	ldrb	r3, [r3, #0]
    7162:	2b00      	cmp	r3, #0
    7164:	d12a      	bne.n	71bc <events_update+0x68>
    7166:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    716a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716e:	895b      	ldrh	r3, [r3, #10]
    7170:	b21b      	sxth	r3, r3
    7172:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7176:	dd21      	ble.n	71bc <events_update+0x68>
    7178:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    717c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7180:	881b      	ldrh	r3, [r3, #0]
    7182:	2b13      	cmp	r3, #19
    7184:	d819      	bhi.n	71ba <events_update+0x66>
    7186:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    718a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    718e:	881b      	ldrh	r3, [r3, #0]
    7190:	3301      	adds	r3, #1
    7192:	b29a      	uxth	r2, r3
    7194:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719c:	801a      	strh	r2, [r3, #0]
    719e:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    71a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a6:	881b      	ldrh	r3, [r3, #0]
    71a8:	2b14      	cmp	r3, #20
    71aa:	d106      	bne.n	71ba <events_update+0x66>
    71ac:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    71b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b4:	2201      	movs	r2, #1
    71b6:	701a      	strb	r2, [r3, #0]
    71b8:	e00c      	b.n	71d4 <events_update+0x80>
    71ba:	e00b      	b.n	71d4 <events_update+0x80>
    71bc:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    71c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c4:	2200      	movs	r2, #0
    71c6:	801a      	strh	r2, [r3, #0]
    71c8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    71cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d0:	2200      	movs	r2, #0
    71d2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    71d4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    71d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71dc:	781b      	ldrb	r3, [r3, #0]
    71de:	2b00      	cmp	r3, #0
    71e0:	d12a      	bne.n	7238 <events_update+0xe4>
    71e2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    71e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ea:	895b      	ldrh	r3, [r3, #10]
    71ec:	b21b      	sxth	r3, r3
    71ee:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    71f2:	da21      	bge.n	7238 <events_update+0xe4>
    71f4:	f64a 63ce 	movw	r3, #44750	; 0xaece
    71f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71fc:	881b      	ldrh	r3, [r3, #0]
    71fe:	2b13      	cmp	r3, #19
    7200:	d819      	bhi.n	7236 <events_update+0xe2>
    7202:	f64a 63ce 	movw	r3, #44750	; 0xaece
    7206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720a:	881b      	ldrh	r3, [r3, #0]
    720c:	3301      	adds	r3, #1
    720e:	b29a      	uxth	r2, r3
    7210:	f64a 63ce 	movw	r3, #44750	; 0xaece
    7214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7218:	801a      	strh	r2, [r3, #0]
    721a:	f64a 63ce 	movw	r3, #44750	; 0xaece
    721e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7222:	881b      	ldrh	r3, [r3, #0]
    7224:	2b14      	cmp	r3, #20
    7226:	d106      	bne.n	7236 <events_update+0xe2>
    7228:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    722c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7230:	2201      	movs	r2, #1
    7232:	701a      	strb	r2, [r3, #0]
    7234:	e00c      	b.n	7250 <events_update+0xfc>
    7236:	e00b      	b.n	7250 <events_update+0xfc>
    7238:	f64a 63ce 	movw	r3, #44750	; 0xaece
    723c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7240:	2200      	movs	r2, #0
    7242:	801a      	strh	r2, [r3, #0]
    7244:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724c:	2200      	movs	r2, #0
    724e:	701a      	strb	r2, [r3, #0]
}  
    7250:	46bd      	mov	sp, r7
    7252:	f85d 7b04 	ldr.w	r7, [sp], #4
    7256:	4770      	bx	lr

00007258 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7258:	b480      	push	{r7}
    725a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    725c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	88da      	ldrh	r2, [r3, #6]
    7266:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    726a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7270:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7278:	2200      	movs	r2, #0
    727a:	74da      	strb	r2, [r3, #19]
}
    727c:	46bd      	mov	sp, r7
    727e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7282:	4770      	bx	lr

00007284 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7284:	b480      	push	{r7}
    7286:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7288:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    728c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7290:	781a      	ldrb	r2, [r3, #0]
    7292:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    729a:	781b      	ldrb	r3, [r3, #0]
    729c:	b2db      	uxtb	r3, r3
    729e:	429a      	cmp	r2, r3
    72a0:	d313      	bcc.n	72ca <send_boot+0x46>
    72a2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    72a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72aa:	781b      	ldrb	r3, [r3, #0]
    72ac:	b2db      	uxtb	r3, r3
    72ae:	461a      	mov	r2, r3
    72b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    72b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b8:	781b      	ldrb	r3, [r3, #0]
    72ba:	1ad3      	subs	r3, r2, r3
    72bc:	33ff      	adds	r3, #255	; 0xff
    72be:	2b06      	cmp	r3, #6
    72c0:	bfd4      	ite	le
    72c2:	2300      	movle	r3, #0
    72c4:	2301      	movgt	r3, #1
    72c6:	b2db      	uxtb	r3, r3
    72c8:	e011      	b.n	72ee <send_boot+0x6a>
    72ca:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    72ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d2:	781b      	ldrb	r3, [r3, #0]
    72d4:	b2db      	uxtb	r3, r3
    72d6:	461a      	mov	r2, r3
    72d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    72dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e0:	781b      	ldrb	r3, [r3, #0]
    72e2:	1ad3      	subs	r3, r2, r3
    72e4:	2b06      	cmp	r3, #6
    72e6:	bfd4      	ite	le
    72e8:	2300      	movle	r3, #0
    72ea:	2301      	movgt	r3, #1
    72ec:	b2db      	uxtb	r3, r3
    72ee:	2b00      	cmp	r3, #0
    72f0:	f000 8194 	beq.w	761c <send_boot+0x398>
    72f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    72f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	461a      	mov	r2, r3
    7300:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7308:	2105      	movs	r1, #5
    730a:	5499      	strb	r1, [r3, r2]
    730c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7314:	781b      	ldrb	r3, [r3, #0]
    7316:	3301      	adds	r3, #1
    7318:	b2da      	uxtb	r2, r3
    731a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    731e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7322:	701a      	strb	r2, [r3, #0]
    7324:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732c:	781b      	ldrb	r3, [r3, #0]
    732e:	2bff      	cmp	r3, #255	; 0xff
    7330:	d105      	bne.n	733e <send_boot+0xba>
    7332:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733a:	2200      	movs	r2, #0
    733c:	701a      	strb	r2, [r3, #0]
    733e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	461a      	mov	r2, r3
    734a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    734e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7352:	2101      	movs	r1, #1
    7354:	5499      	strb	r1, [r3, r2]
    7356:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    735a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	3301      	adds	r3, #1
    7362:	b2da      	uxtb	r2, r3
    7364:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736c:	701a      	strb	r2, [r3, #0]
    736e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	2bff      	cmp	r3, #255	; 0xff
    737a:	d105      	bne.n	7388 <send_boot+0x104>
    737c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7384:	2200      	movs	r2, #0
    7386:	701a      	strb	r2, [r3, #0]
    7388:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    738c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7390:	2201      	movs	r2, #1
    7392:	701a      	strb	r2, [r3, #0]
    7394:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    739c:	2201      	movs	r2, #1
    739e:	701a      	strb	r2, [r3, #0]
    73a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a8:	781b      	ldrb	r3, [r3, #0]
    73aa:	461a      	mov	r2, r3
    73ac:	f248 7396 	movw	r3, #34710	; 0x8796
    73b0:	f2c0 0301 	movt	r3, #1
    73b4:	7819      	ldrb	r1, [r3, #0]
    73b6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    73ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73be:	5499      	strb	r1, [r3, r2]
    73c0:	f248 7396 	movw	r3, #34710	; 0x8796
    73c4:	f2c0 0301 	movt	r3, #1
    73c8:	781a      	ldrb	r2, [r3, #0]
    73ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    73ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d2:	781b      	ldrb	r3, [r3, #0]
    73d4:	4413      	add	r3, r2
    73d6:	b2da      	uxtb	r2, r3
    73d8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    73dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e0:	701a      	strb	r2, [r3, #0]
    73e2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    73e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ea:	781a      	ldrb	r2, [r3, #0]
    73ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    73f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	4413      	add	r3, r2
    73f8:	b2da      	uxtb	r2, r3
    73fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    73fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7402:	701a      	strb	r2, [r3, #0]
    7404:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    740c:	781b      	ldrb	r3, [r3, #0]
    740e:	3301      	adds	r3, #1
    7410:	b2da      	uxtb	r2, r3
    7412:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741a:	701a      	strb	r2, [r3, #0]
    741c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	2bff      	cmp	r3, #255	; 0xff
    7428:	d105      	bne.n	7436 <send_boot+0x1b2>
    742a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    742e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7432:	2200      	movs	r2, #0
    7434:	701a      	strb	r2, [r3, #0]
    7436:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    743a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	461a      	mov	r2, r3
    7442:	f248 7396 	movw	r3, #34710	; 0x8796
    7446:	f2c0 0301 	movt	r3, #1
    744a:	7859      	ldrb	r1, [r3, #1]
    744c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7454:	5499      	strb	r1, [r3, r2]
    7456:	4b88      	ldr	r3, [pc, #544]	; (7678 <send_boot+0x3f4>)
    7458:	781a      	ldrb	r2, [r3, #0]
    745a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    745e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	4413      	add	r3, r2
    7466:	b2da      	uxtb	r2, r3
    7468:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    746c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7470:	701a      	strb	r2, [r3, #0]
    7472:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747a:	781a      	ldrb	r2, [r3, #0]
    747c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7484:	781b      	ldrb	r3, [r3, #0]
    7486:	4413      	add	r3, r2
    7488:	b2da      	uxtb	r2, r3
    748a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    748e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7492:	701a      	strb	r2, [r3, #0]
    7494:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	3301      	adds	r3, #1
    74a0:	b2da      	uxtb	r2, r3
    74a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74aa:	701a      	strb	r2, [r3, #0]
    74ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b4:	781b      	ldrb	r3, [r3, #0]
    74b6:	2bff      	cmp	r3, #255	; 0xff
    74b8:	d105      	bne.n	74c6 <send_boot+0x242>
    74ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c2:	2200      	movs	r2, #0
    74c4:	701a      	strb	r2, [r3, #0]
    74c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	461a      	mov	r2, r3
    74d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74da:	7819      	ldrb	r1, [r3, #0]
    74dc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    74e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e4:	5499      	strb	r1, [r3, r2]
    74e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	3301      	adds	r3, #1
    74f2:	b2da      	uxtb	r2, r3
    74f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fc:	701a      	strb	r2, [r3, #0]
    74fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	2bff      	cmp	r3, #255	; 0xff
    750a:	d105      	bne.n	7518 <send_boot+0x294>
    750c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7514:	2200      	movs	r2, #0
    7516:	701a      	strb	r2, [r3, #0]
    7518:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	461a      	mov	r2, r3
    7524:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752c:	7819      	ldrb	r1, [r3, #0]
    752e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7536:	5499      	strb	r1, [r3, r2]
    7538:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    753c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	3301      	adds	r3, #1
    7544:	b2da      	uxtb	r2, r3
    7546:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    754a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    754e:	701a      	strb	r2, [r3, #0]
    7550:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	2bff      	cmp	r3, #255	; 0xff
    755c:	d105      	bne.n	756a <send_boot+0x2e6>
    755e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7566:	2200      	movs	r2, #0
    7568:	701a      	strb	r2, [r3, #0]
    756a:	f242 0339 	movw	r3, #8249	; 0x2039
    756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7572:	781b      	ldrb	r3, [r3, #0]
    7574:	b2db      	uxtb	r3, r3
    7576:	f003 0310 	and.w	r3, r3, #16
    757a:	2b00      	cmp	r3, #0
    757c:	d15a      	bne.n	7634 <send_boot+0x3b0>
    757e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7586:	781b      	ldrb	r3, [r3, #0]
    7588:	b2db      	uxtb	r3, r3
    758a:	461a      	mov	r2, r3
    758c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7594:	5c9a      	ldrb	r2, [r3, r2]
    7596:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    759a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    759e:	701a      	strb	r2, [r3, #0]
    75a0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    75a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a8:	2200      	movs	r2, #0
    75aa:	701a      	strb	r2, [r3, #0]
    75ac:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    75b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	b2db      	uxtb	r3, r3
    75b8:	3301      	adds	r3, #1
    75ba:	b2da      	uxtb	r2, r3
    75bc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	701a      	strb	r2, [r3, #0]
    75c6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    75ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	b2db      	uxtb	r3, r3
    75d2:	2bff      	cmp	r3, #255	; 0xff
    75d4:	d105      	bne.n	75e2 <send_boot+0x35e>
    75d6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    75da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75de:	2200      	movs	r2, #0
    75e0:	701a      	strb	r2, [r3, #0]
    75e2:	f242 0338 	movw	r3, #8248	; 0x2038
    75e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ea:	f242 0238 	movw	r2, #8248	; 0x2038
    75ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    75f2:	7812      	ldrb	r2, [r2, #0]
    75f4:	b2d2      	uxtb	r2, r2
    75f6:	f042 0201 	orr.w	r2, r2, #1
    75fa:	b2d2      	uxtb	r2, r2
    75fc:	701a      	strb	r2, [r3, #0]
    75fe:	f242 0339 	movw	r3, #8249	; 0x2039
    7602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7606:	f242 0239 	movw	r2, #8249	; 0x2039
    760a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    760e:	7812      	ldrb	r2, [r2, #0]
    7610:	b2d2      	uxtb	r2, r2
    7612:	f042 0210 	orr.w	r2, r2, #16
    7616:	b2d2      	uxtb	r2, r2
    7618:	701a      	strb	r2, [r3, #0]
    761a:	e00b      	b.n	7634 <send_boot+0x3b0>
    761c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	3301      	adds	r3, #1
    7628:	b2da      	uxtb	r2, r3
    762a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7632:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7634:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763c:	781a      	ldrb	r2, [r3, #0]
    763e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	b2db      	uxtb	r3, r3
    764a:	429a      	cmp	r2, r3
    764c:	d316      	bcc.n	767c <send_boot+0x3f8>
    764e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7656:	781b      	ldrb	r3, [r3, #0]
    7658:	b2db      	uxtb	r3, r3
    765a:	461a      	mov	r2, r3
    765c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	1ad3      	subs	r3, r2, r3
    7668:	33ff      	adds	r3, #255	; 0xff
    766a:	2b14      	cmp	r3, #20
    766c:	bfd4      	ite	le
    766e:	2300      	movle	r3, #0
    7670:	2301      	movgt	r3, #1
    7672:	b2db      	uxtb	r3, r3
    7674:	e014      	b.n	76a0 <send_boot+0x41c>
    7676:	bf00      	nop
    7678:	00018797 	.word	0x00018797
    767c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	b2db      	uxtb	r3, r3
    7688:	461a      	mov	r2, r3
    768a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    768e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7692:	781b      	ldrb	r3, [r3, #0]
    7694:	1ad3      	subs	r3, r2, r3
    7696:	2b14      	cmp	r3, #20
    7698:	bfd4      	ite	le
    769a:	2300      	movle	r3, #0
    769c:	2301      	movgt	r3, #1
    769e:	b2db      	uxtb	r3, r3
    76a0:	2b00      	cmp	r3, #0
    76a2:	f000 85a5 	beq.w	81f0 <send_boot+0xf6c>
    76a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	461a      	mov	r2, r3
    76b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    76b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ba:	2105      	movs	r1, #5
    76bc:	5499      	strb	r1, [r3, r2]
    76be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	3301      	adds	r3, #1
    76ca:	b2da      	uxtb	r2, r3
    76cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d4:	701a      	strb	r2, [r3, #0]
    76d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	2bff      	cmp	r3, #255	; 0xff
    76e2:	d105      	bne.n	76f0 <send_boot+0x46c>
    76e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ec:	2200      	movs	r2, #0
    76ee:	701a      	strb	r2, [r3, #0]
    76f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	461a      	mov	r2, r3
    76fc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7704:	2105      	movs	r1, #5
    7706:	5499      	strb	r1, [r3, r2]
    7708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    770c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	3301      	adds	r3, #1
    7714:	b2da      	uxtb	r2, r3
    7716:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    771a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    771e:	701a      	strb	r2, [r3, #0]
    7720:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7728:	781b      	ldrb	r3, [r3, #0]
    772a:	2bff      	cmp	r3, #255	; 0xff
    772c:	d105      	bne.n	773a <send_boot+0x4b6>
    772e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7736:	2200      	movs	r2, #0
    7738:	701a      	strb	r2, [r3, #0]
    773a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    773e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7742:	2205      	movs	r2, #5
    7744:	701a      	strb	r2, [r3, #0]
    7746:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    774a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774e:	2205      	movs	r2, #5
    7750:	701a      	strb	r2, [r3, #0]
    7752:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	461a      	mov	r2, r3
    775e:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7766:	7819      	ldrb	r1, [r3, #0]
    7768:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    776c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7770:	5499      	strb	r1, [r3, r2]
    7772:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777a:	781a      	ldrb	r2, [r3, #0]
    777c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	4413      	add	r3, r2
    7788:	b2da      	uxtb	r2, r3
    778a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    778e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	781a      	ldrb	r2, [r3, #0]
    779e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    77a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	4413      	add	r3, r2
    77aa:	b2da      	uxtb	r2, r3
    77ac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    77b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b4:	701a      	strb	r2, [r3, #0]
    77b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	3301      	adds	r3, #1
    77c2:	b2da      	uxtb	r2, r3
    77c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77cc:	701a      	strb	r2, [r3, #0]
    77ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	2bff      	cmp	r3, #255	; 0xff
    77da:	d105      	bne.n	77e8 <send_boot+0x564>
    77dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e4:	2200      	movs	r2, #0
    77e6:	701a      	strb	r2, [r3, #0]
    77e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	461a      	mov	r2, r3
    77f4:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    77f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fc:	7859      	ldrb	r1, [r3, #1]
    77fe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7806:	5499      	strb	r1, [r3, r2]
    7808:	4bd1      	ldr	r3, [pc, #836]	; (7b50 <send_boot+0x8cc>)
    780a:	781a      	ldrb	r2, [r3, #0]
    780c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	4413      	add	r3, r2
    7818:	b2da      	uxtb	r2, r3
    781a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782c:	781a      	ldrb	r2, [r3, #0]
    782e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	4413      	add	r3, r2
    783a:	b2da      	uxtb	r2, r3
    783c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7844:	701a      	strb	r2, [r3, #0]
    7846:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    784a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	3301      	adds	r3, #1
    7852:	b2da      	uxtb	r2, r3
    7854:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785c:	701a      	strb	r2, [r3, #0]
    785e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	2bff      	cmp	r3, #255	; 0xff
    786a:	d105      	bne.n	7878 <send_boot+0x5f4>
    786c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7874:	2200      	movs	r2, #0
    7876:	701a      	strb	r2, [r3, #0]
    7878:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    787c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	461a      	mov	r2, r3
    7884:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788c:	7899      	ldrb	r1, [r3, #2]
    788e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7896:	5499      	strb	r1, [r3, r2]
    7898:	4bae      	ldr	r3, [pc, #696]	; (7b54 <send_boot+0x8d0>)
    789a:	781a      	ldrb	r2, [r3, #0]
    789c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	4413      	add	r3, r2
    78a8:	b2da      	uxtb	r2, r3
    78aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b2:	701a      	strb	r2, [r3, #0]
    78b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78bc:	781a      	ldrb	r2, [r3, #0]
    78be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    78c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c6:	781b      	ldrb	r3, [r3, #0]
    78c8:	4413      	add	r3, r2
    78ca:	b2da      	uxtb	r2, r3
    78cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    78d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	3301      	adds	r3, #1
    78e2:	b2da      	uxtb	r2, r3
    78e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ec:	701a      	strb	r2, [r3, #0]
    78ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	2bff      	cmp	r3, #255	; 0xff
    78fa:	d105      	bne.n	7908 <send_boot+0x684>
    78fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7904:	2200      	movs	r2, #0
    7906:	701a      	strb	r2, [r3, #0]
    7908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    790c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	461a      	mov	r2, r3
    7914:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791c:	78d9      	ldrb	r1, [r3, #3]
    791e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7926:	5499      	strb	r1, [r3, r2]
    7928:	4b8b      	ldr	r3, [pc, #556]	; (7b58 <send_boot+0x8d4>)
    792a:	781a      	ldrb	r2, [r3, #0]
    792c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7934:	781b      	ldrb	r3, [r3, #0]
    7936:	4413      	add	r3, r2
    7938:	b2da      	uxtb	r2, r3
    793a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    793e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7942:	701a      	strb	r2, [r3, #0]
    7944:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	781a      	ldrb	r2, [r3, #0]
    794e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	4413      	add	r3, r2
    795a:	b2da      	uxtb	r2, r3
    795c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7964:	701a      	strb	r2, [r3, #0]
    7966:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    796a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	3301      	adds	r3, #1
    7972:	b2da      	uxtb	r2, r3
    7974:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797c:	701a      	strb	r2, [r3, #0]
    797e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7986:	781b      	ldrb	r3, [r3, #0]
    7988:	2bff      	cmp	r3, #255	; 0xff
    798a:	d105      	bne.n	7998 <send_boot+0x714>
    798c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7994:	2200      	movs	r2, #0
    7996:	701a      	strb	r2, [r3, #0]
    7998:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    799c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	461a      	mov	r2, r3
    79a4:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    79a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ac:	7819      	ldrb	r1, [r3, #0]
    79ae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    79b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b6:	5499      	strb	r1, [r3, r2]
    79b8:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    79bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c0:	781a      	ldrb	r2, [r3, #0]
    79c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	4413      	add	r3, r2
    79ce:	b2da      	uxtb	r2, r3
    79d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d8:	701a      	strb	r2, [r3, #0]
    79da:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    79de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e2:	781a      	ldrb	r2, [r3, #0]
    79e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	4413      	add	r3, r2
    79f0:	b2da      	uxtb	r2, r3
    79f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    79f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fa:	701a      	strb	r2, [r3, #0]
    79fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	3301      	adds	r3, #1
    7a08:	b2da      	uxtb	r2, r3
    7a0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a12:	701a      	strb	r2, [r3, #0]
    7a14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	2bff      	cmp	r3, #255	; 0xff
    7a20:	d105      	bne.n	7a2e <send_boot+0x7aa>
    7a22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2a:	2200      	movs	r2, #0
    7a2c:	701a      	strb	r2, [r3, #0]
    7a2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	461a      	mov	r2, r3
    7a3a:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a42:	7859      	ldrb	r1, [r3, #1]
    7a44:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4c:	5499      	strb	r1, [r3, r2]
    7a4e:	4b43      	ldr	r3, [pc, #268]	; (7b5c <send_boot+0x8d8>)
    7a50:	781a      	ldrb	r2, [r3, #0]
    7a52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	4413      	add	r3, r2
    7a5e:	b2da      	uxtb	r2, r3
    7a60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a68:	701a      	strb	r2, [r3, #0]
    7a6a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a72:	781a      	ldrb	r2, [r3, #0]
    7a74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	4413      	add	r3, r2
    7a80:	b2da      	uxtb	r2, r3
    7a82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a8a:	701a      	strb	r2, [r3, #0]
    7a8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	3301      	adds	r3, #1
    7a98:	b2da      	uxtb	r2, r3
    7a9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa2:	701a      	strb	r2, [r3, #0]
    7aa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aac:	781b      	ldrb	r3, [r3, #0]
    7aae:	2bff      	cmp	r3, #255	; 0xff
    7ab0:	d105      	bne.n	7abe <send_boot+0x83a>
    7ab2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aba:	2200      	movs	r2, #0
    7abc:	701a      	strb	r2, [r3, #0]
    7abe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac6:	781b      	ldrb	r3, [r3, #0]
    7ac8:	461a      	mov	r2, r3
    7aca:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad2:	7899      	ldrb	r1, [r3, #2]
    7ad4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7adc:	5499      	strb	r1, [r3, r2]
    7ade:	4b20      	ldr	r3, [pc, #128]	; (7b60 <send_boot+0x8dc>)
    7ae0:	781a      	ldrb	r2, [r3, #0]
    7ae2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	4413      	add	r3, r2
    7aee:	b2da      	uxtb	r2, r3
    7af0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af8:	701a      	strb	r2, [r3, #0]
    7afa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b02:	781a      	ldrb	r2, [r3, #0]
    7b04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0c:	781b      	ldrb	r3, [r3, #0]
    7b0e:	4413      	add	r3, r2
    7b10:	b2da      	uxtb	r2, r3
    7b12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b1a:	701a      	strb	r2, [r3, #0]
    7b1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b24:	781b      	ldrb	r3, [r3, #0]
    7b26:	3301      	adds	r3, #1
    7b28:	b2da      	uxtb	r2, r3
    7b2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b32:	701a      	strb	r2, [r3, #0]
    7b34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	2bff      	cmp	r3, #255	; 0xff
    7b40:	d110      	bne.n	7b64 <send_boot+0x8e0>
    7b42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4a:	2200      	movs	r2, #0
    7b4c:	701a      	strb	r2, [r3, #0]
    7b4e:	e009      	b.n	7b64 <send_boot+0x8e0>
    7b50:	2000b4c9 	.word	0x2000b4c9
    7b54:	2000b4ca 	.word	0x2000b4ca
    7b58:	2000b4cb 	.word	0x2000b4cb
    7b5c:	2000b4cd 	.word	0x2000b4cd
    7b60:	2000b4ce 	.word	0x2000b4ce
    7b64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	461a      	mov	r2, r3
    7b70:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b78:	78d9      	ldrb	r1, [r3, #3]
    7b7a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b82:	5499      	strb	r1, [r3, r2]
    7b84:	4bd3      	ldr	r3, [pc, #844]	; (7ed4 <send_boot+0xc50>)
    7b86:	781a      	ldrb	r2, [r3, #0]
    7b88:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	4413      	add	r3, r2
    7b94:	b2da      	uxtb	r2, r3
    7b96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9e:	701a      	strb	r2, [r3, #0]
    7ba0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba8:	781a      	ldrb	r2, [r3, #0]
    7baa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb2:	781b      	ldrb	r3, [r3, #0]
    7bb4:	4413      	add	r3, r2
    7bb6:	b2da      	uxtb	r2, r3
    7bb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc0:	701a      	strb	r2, [r3, #0]
    7bc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bca:	781b      	ldrb	r3, [r3, #0]
    7bcc:	3301      	adds	r3, #1
    7bce:	b2da      	uxtb	r2, r3
    7bd0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd8:	701a      	strb	r2, [r3, #0]
    7bda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be2:	781b      	ldrb	r3, [r3, #0]
    7be4:	2bff      	cmp	r3, #255	; 0xff
    7be6:	d105      	bne.n	7bf4 <send_boot+0x970>
    7be8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf0:	2200      	movs	r2, #0
    7bf2:	701a      	strb	r2, [r3, #0]
    7bf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	461a      	mov	r2, r3
    7c00:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c08:	7819      	ldrb	r1, [r3, #0]
    7c0a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c12:	5499      	strb	r1, [r3, r2]
    7c14:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c1c:	781a      	ldrb	r2, [r3, #0]
    7c1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	4413      	add	r3, r2
    7c2a:	b2da      	uxtb	r2, r3
    7c2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c34:	701a      	strb	r2, [r3, #0]
    7c36:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3e:	781a      	ldrb	r2, [r3, #0]
    7c40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	4413      	add	r3, r2
    7c4c:	b2da      	uxtb	r2, r3
    7c4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c56:	701a      	strb	r2, [r3, #0]
    7c58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	3301      	adds	r3, #1
    7c64:	b2da      	uxtb	r2, r3
    7c66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c6e:	701a      	strb	r2, [r3, #0]
    7c70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c78:	781b      	ldrb	r3, [r3, #0]
    7c7a:	2bff      	cmp	r3, #255	; 0xff
    7c7c:	d105      	bne.n	7c8a <send_boot+0xa06>
    7c7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c86:	2200      	movs	r2, #0
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	461a      	mov	r2, r3
    7c96:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9e:	7859      	ldrb	r1, [r3, #1]
    7ca0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca8:	5499      	strb	r1, [r3, r2]
    7caa:	4b8b      	ldr	r3, [pc, #556]	; (7ed8 <send_boot+0xc54>)
    7cac:	781a      	ldrb	r2, [r3, #0]
    7cae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	4413      	add	r3, r2
    7cba:	b2da      	uxtb	r2, r3
    7cbc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc4:	701a      	strb	r2, [r3, #0]
    7cc6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cce:	781a      	ldrb	r2, [r3, #0]
    7cd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	4413      	add	r3, r2
    7cdc:	b2da      	uxtb	r2, r3
    7cde:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce6:	701a      	strb	r2, [r3, #0]
    7ce8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf0:	781b      	ldrb	r3, [r3, #0]
    7cf2:	3301      	adds	r3, #1
    7cf4:	b2da      	uxtb	r2, r3
    7cf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfe:	701a      	strb	r2, [r3, #0]
    7d00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	2bff      	cmp	r3, #255	; 0xff
    7d0c:	d105      	bne.n	7d1a <send_boot+0xa96>
    7d0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d16:	2200      	movs	r2, #0
    7d18:	701a      	strb	r2, [r3, #0]
    7d1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d22:	781b      	ldrb	r3, [r3, #0]
    7d24:	461a      	mov	r2, r3
    7d26:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2e:	7899      	ldrb	r1, [r3, #2]
    7d30:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d38:	5499      	strb	r1, [r3, r2]
    7d3a:	4b68      	ldr	r3, [pc, #416]	; (7edc <send_boot+0xc58>)
    7d3c:	781a      	ldrb	r2, [r3, #0]
    7d3e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d46:	781b      	ldrb	r3, [r3, #0]
    7d48:	4413      	add	r3, r2
    7d4a:	b2da      	uxtb	r2, r3
    7d4c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d54:	701a      	strb	r2, [r3, #0]
    7d56:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5e:	781a      	ldrb	r2, [r3, #0]
    7d60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	4413      	add	r3, r2
    7d6c:	b2da      	uxtb	r2, r3
    7d6e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d76:	701a      	strb	r2, [r3, #0]
    7d78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d80:	781b      	ldrb	r3, [r3, #0]
    7d82:	3301      	adds	r3, #1
    7d84:	b2da      	uxtb	r2, r3
    7d86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8e:	701a      	strb	r2, [r3, #0]
    7d90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d98:	781b      	ldrb	r3, [r3, #0]
    7d9a:	2bff      	cmp	r3, #255	; 0xff
    7d9c:	d105      	bne.n	7daa <send_boot+0xb26>
    7d9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da6:	2200      	movs	r2, #0
    7da8:	701a      	strb	r2, [r3, #0]
    7daa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db2:	781b      	ldrb	r3, [r3, #0]
    7db4:	461a      	mov	r2, r3
    7db6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dbe:	78d9      	ldrb	r1, [r3, #3]
    7dc0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc8:	5499      	strb	r1, [r3, r2]
    7dca:	4b45      	ldr	r3, [pc, #276]	; (7ee0 <send_boot+0xc5c>)
    7dcc:	781a      	ldrb	r2, [r3, #0]
    7dce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	4413      	add	r3, r2
    7dda:	b2da      	uxtb	r2, r3
    7ddc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de4:	701a      	strb	r2, [r3, #0]
    7de6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dee:	781a      	ldrb	r2, [r3, #0]
    7df0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df8:	781b      	ldrb	r3, [r3, #0]
    7dfa:	4413      	add	r3, r2
    7dfc:	b2da      	uxtb	r2, r3
    7dfe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e06:	701a      	strb	r2, [r3, #0]
    7e08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e10:	781b      	ldrb	r3, [r3, #0]
    7e12:	3301      	adds	r3, #1
    7e14:	b2da      	uxtb	r2, r3
    7e16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e1e:	701a      	strb	r2, [r3, #0]
    7e20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	2bff      	cmp	r3, #255	; 0xff
    7e2c:	d105      	bne.n	7e3a <send_boot+0xbb6>
    7e2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e36:	2200      	movs	r2, #0
    7e38:	701a      	strb	r2, [r3, #0]
    7e3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	461a      	mov	r2, r3
    7e46:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e4e:	7819      	ldrb	r1, [r3, #0]
    7e50:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e58:	5499      	strb	r1, [r3, r2]
    7e5a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e62:	781a      	ldrb	r2, [r3, #0]
    7e64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	4413      	add	r3, r2
    7e70:	b2da      	uxtb	r2, r3
    7e72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e7a:	701a      	strb	r2, [r3, #0]
    7e7c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e84:	781a      	ldrb	r2, [r3, #0]
    7e86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e8e:	781b      	ldrb	r3, [r3, #0]
    7e90:	4413      	add	r3, r2
    7e92:	b2da      	uxtb	r2, r3
    7e94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9c:	701a      	strb	r2, [r3, #0]
    7e9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea6:	781b      	ldrb	r3, [r3, #0]
    7ea8:	3301      	adds	r3, #1
    7eaa:	b2da      	uxtb	r2, r3
    7eac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb4:	701a      	strb	r2, [r3, #0]
    7eb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ebe:	781b      	ldrb	r3, [r3, #0]
    7ec0:	2bff      	cmp	r3, #255	; 0xff
    7ec2:	d10f      	bne.n	7ee4 <send_boot+0xc60>
    7ec4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ecc:	2200      	movs	r2, #0
    7ece:	701a      	strb	r2, [r3, #0]
    7ed0:	e008      	b.n	7ee4 <send_boot+0xc60>
    7ed2:	bf00      	nop
    7ed4:	2000b4cf 	.word	0x2000b4cf
    7ed8:	2000b4c5 	.word	0x2000b4c5
    7edc:	2000b4c6 	.word	0x2000b4c6
    7ee0:	2000b4c7 	.word	0x2000b4c7
    7ee4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eec:	781b      	ldrb	r3, [r3, #0]
    7eee:	461a      	mov	r2, r3
    7ef0:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef8:	7859      	ldrb	r1, [r3, #1]
    7efa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f02:	5499      	strb	r1, [r3, r2]
    7f04:	4bc5      	ldr	r3, [pc, #788]	; (821c <send_boot+0xf98>)
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	4413      	add	r3, r2
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f28:	781a      	ldrb	r2, [r3, #0]
    7f2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f32:	781b      	ldrb	r3, [r3, #0]
    7f34:	4413      	add	r3, r2
    7f36:	b2da      	uxtb	r2, r3
    7f38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f40:	701a      	strb	r2, [r3, #0]
    7f42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	3301      	adds	r3, #1
    7f4e:	b2da      	uxtb	r2, r3
    7f50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f58:	701a      	strb	r2, [r3, #0]
    7f5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f62:	781b      	ldrb	r3, [r3, #0]
    7f64:	2bff      	cmp	r3, #255	; 0xff
    7f66:	d105      	bne.n	7f74 <send_boot+0xcf0>
    7f68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f70:	2200      	movs	r2, #0
    7f72:	701a      	strb	r2, [r3, #0]
    7f74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	461a      	mov	r2, r3
    7f80:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f88:	7819      	ldrb	r1, [r3, #0]
    7f8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f92:	5499      	strb	r1, [r3, r2]
    7f94:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f9c:	781a      	ldrb	r2, [r3, #0]
    7f9e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa6:	781b      	ldrb	r3, [r3, #0]
    7fa8:	4413      	add	r3, r2
    7faa:	b2da      	uxtb	r2, r3
    7fac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb4:	701a      	strb	r2, [r3, #0]
    7fb6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbe:	781a      	ldrb	r2, [r3, #0]
    7fc0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc8:	781b      	ldrb	r3, [r3, #0]
    7fca:	4413      	add	r3, r2
    7fcc:	b2da      	uxtb	r2, r3
    7fce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd6:	701a      	strb	r2, [r3, #0]
    7fd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	3301      	adds	r3, #1
    7fe4:	b2da      	uxtb	r2, r3
    7fe6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fee:	701a      	strb	r2, [r3, #0]
    7ff0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	2bff      	cmp	r3, #255	; 0xff
    7ffc:	d105      	bne.n	800a <send_boot+0xd86>
    7ffe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8006:	2200      	movs	r2, #0
    8008:	701a      	strb	r2, [r3, #0]
    800a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    800e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8012:	781b      	ldrb	r3, [r3, #0]
    8014:	461a      	mov	r2, r3
    8016:	f240 33f4 	movw	r3, #1012	; 0x3f4
    801a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801e:	7859      	ldrb	r1, [r3, #1]
    8020:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8028:	5499      	strb	r1, [r3, r2]
    802a:	4b7d      	ldr	r3, [pc, #500]	; (8220 <send_boot+0xf9c>)
    802c:	781a      	ldrb	r2, [r3, #0]
    802e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	4413      	add	r3, r2
    803a:	b2da      	uxtb	r2, r3
    803c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8044:	701a      	strb	r2, [r3, #0]
    8046:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    804a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    804e:	781a      	ldrb	r2, [r3, #0]
    8050:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	4413      	add	r3, r2
    805c:	b2da      	uxtb	r2, r3
    805e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8066:	701a      	strb	r2, [r3, #0]
    8068:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    806c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	3301      	adds	r3, #1
    8074:	b2da      	uxtb	r2, r3
    8076:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    807a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	2bff      	cmp	r3, #255	; 0xff
    808c:	d105      	bne.n	809a <send_boot+0xe16>
    808e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8096:	2200      	movs	r2, #0
    8098:	701a      	strb	r2, [r3, #0]
    809a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    809e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	461a      	mov	r2, r3
    80a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    80aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ae:	7819      	ldrb	r1, [r3, #0]
    80b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    80b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b8:	5499      	strb	r1, [r3, r2]
    80ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	3301      	adds	r3, #1
    80c6:	b2da      	uxtb	r2, r3
    80c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d0:	701a      	strb	r2, [r3, #0]
    80d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	2bff      	cmp	r3, #255	; 0xff
    80de:	d105      	bne.n	80ec <send_boot+0xe68>
    80e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e8:	2200      	movs	r2, #0
    80ea:	701a      	strb	r2, [r3, #0]
    80ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	461a      	mov	r2, r3
    80f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    80fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8100:	7819      	ldrb	r1, [r3, #0]
    8102:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810a:	5499      	strb	r1, [r3, r2]
    810c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8114:	781b      	ldrb	r3, [r3, #0]
    8116:	3301      	adds	r3, #1
    8118:	b2da      	uxtb	r2, r3
    811a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8122:	701a      	strb	r2, [r3, #0]
    8124:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812c:	781b      	ldrb	r3, [r3, #0]
    812e:	2bff      	cmp	r3, #255	; 0xff
    8130:	d105      	bne.n	813e <send_boot+0xeba>
    8132:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    813a:	2200      	movs	r2, #0
    813c:	701a      	strb	r2, [r3, #0]
    813e:	f242 0339 	movw	r3, #8249	; 0x2039
    8142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	b2db      	uxtb	r3, r3
    814a:	f003 0310 	and.w	r3, r3, #16
    814e:	2b00      	cmp	r3, #0
    8150:	d15a      	bne.n	8208 <send_boot+0xf84>
    8152:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815a:	781b      	ldrb	r3, [r3, #0]
    815c:	b2db      	uxtb	r3, r3
    815e:	461a      	mov	r2, r3
    8160:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8168:	5c9a      	ldrb	r2, [r3, r2]
    816a:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    816e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8172:	701a      	strb	r2, [r3, #0]
    8174:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    8178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817c:	2200      	movs	r2, #0
    817e:	701a      	strb	r2, [r3, #0]
    8180:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	b2db      	uxtb	r3, r3
    818c:	3301      	adds	r3, #1
    818e:	b2da      	uxtb	r2, r3
    8190:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8198:	701a      	strb	r2, [r3, #0]
    819a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a2:	781b      	ldrb	r3, [r3, #0]
    81a4:	b2db      	uxtb	r3, r3
    81a6:	2bff      	cmp	r3, #255	; 0xff
    81a8:	d105      	bne.n	81b6 <send_boot+0xf32>
    81aa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    81ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b2:	2200      	movs	r2, #0
    81b4:	701a      	strb	r2, [r3, #0]
    81b6:	f242 0338 	movw	r3, #8248	; 0x2038
    81ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81be:	f242 0238 	movw	r2, #8248	; 0x2038
    81c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    81c6:	7812      	ldrb	r2, [r2, #0]
    81c8:	b2d2      	uxtb	r2, r2
    81ca:	f042 0201 	orr.w	r2, r2, #1
    81ce:	b2d2      	uxtb	r2, r2
    81d0:	701a      	strb	r2, [r3, #0]
    81d2:	f242 0339 	movw	r3, #8249	; 0x2039
    81d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81da:	f242 0239 	movw	r2, #8249	; 0x2039
    81de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    81e2:	7812      	ldrb	r2, [r2, #0]
    81e4:	b2d2      	uxtb	r2, r2
    81e6:	f042 0210 	orr.w	r2, r2, #16
    81ea:	b2d2      	uxtb	r2, r2
    81ec:	701a      	strb	r2, [r3, #0]
    81ee:	e00b      	b.n	8208 <send_boot+0xf84>
    81f0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    81f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f8:	781b      	ldrb	r3, [r3, #0]
    81fa:	3301      	adds	r3, #1
    81fc:	b2da      	uxtb	r2, r3
    81fe:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8206:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8208:	f240 33ed 	movw	r3, #1005	; 0x3ed
    820c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8210:	2200      	movs	r2, #0
    8212:	701a      	strb	r2, [r3, #0]
  }
}
    8214:	46bd      	mov	sp, r7
    8216:	f85d 7b04 	ldr.w	r7, [sp], #4
    821a:	4770      	bx	lr
    821c:	200003f3 	.word	0x200003f3
    8220:	200003f5 	.word	0x200003f5

00008224 <send_attitude>:
void send_attitude(void){ //499ms
    8224:	b480      	push	{r7}
    8226:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8228:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    822c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	3301      	adds	r3, #1
    8234:	b2da      	uxtb	r2, r3
    8236:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    823a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8240:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	2bfa      	cmp	r3, #250	; 0xfa
    824c:	d105      	bne.n	825a <send_attitude+0x36>
    824e:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	2200      	movs	r2, #0
    8258:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    825a:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    825e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8262:	781a      	ldrb	r2, [r3, #0]
    8264:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8268:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    826c:	fba3 1302 	umull	r1, r3, r3, r2
    8270:	0899      	lsrs	r1, r3, #2
    8272:	460b      	mov	r3, r1
    8274:	009b      	lsls	r3, r3, #2
    8276:	440b      	add	r3, r1
    8278:	1ad3      	subs	r3, r2, r3
    827a:	b2db      	uxtb	r3, r3
    827c:	2b00      	cmp	r3, #0
    827e:	f040 84c1 	bne.w	8c04 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8282:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    828a:	781a      	ldrb	r2, [r3, #0]
    828c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8294:	781b      	ldrb	r3, [r3, #0]
    8296:	b2db      	uxtb	r3, r3
    8298:	429a      	cmp	r2, r3
    829a:	d313      	bcc.n	82c4 <send_attitude+0xa0>
    829c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    82a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a4:	781b      	ldrb	r3, [r3, #0]
    82a6:	b2db      	uxtb	r3, r3
    82a8:	461a      	mov	r2, r3
    82aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    82ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	1ad3      	subs	r3, r2, r3
    82b6:	33ff      	adds	r3, #255	; 0xff
    82b8:	2b10      	cmp	r3, #16
    82ba:	bfd4      	ite	le
    82bc:	2300      	movle	r3, #0
    82be:	2301      	movgt	r3, #1
    82c0:	b2db      	uxtb	r3, r3
    82c2:	e011      	b.n	82e8 <send_attitude+0xc4>
    82c4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    82c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82cc:	781b      	ldrb	r3, [r3, #0]
    82ce:	b2db      	uxtb	r3, r3
    82d0:	461a      	mov	r2, r3
    82d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    82d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82da:	781b      	ldrb	r3, [r3, #0]
    82dc:	1ad3      	subs	r3, r2, r3
    82de:	2b10      	cmp	r3, #16
    82e0:	bfd4      	ite	le
    82e2:	2300      	movle	r3, #0
    82e4:	2301      	movgt	r3, #1
    82e6:	b2db      	uxtb	r3, r3
    82e8:	2b00      	cmp	r3, #0
    82ea:	f000 847f 	beq.w	8bec <send_attitude+0x9c8>
    82ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    82f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f6:	781b      	ldrb	r3, [r3, #0]
    82f8:	461a      	mov	r2, r3
    82fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    82fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8302:	2105      	movs	r1, #5
    8304:	5499      	strb	r1, [r3, r2]
    8306:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    830a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	3301      	adds	r3, #1
    8312:	b2da      	uxtb	r2, r3
    8314:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831c:	701a      	strb	r2, [r3, #0]
    831e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	2bff      	cmp	r3, #255	; 0xff
    832a:	d105      	bne.n	8338 <send_attitude+0x114>
    832c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8334:	2200      	movs	r2, #0
    8336:	701a      	strb	r2, [r3, #0]
    8338:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    833c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	461a      	mov	r2, r3
    8344:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834c:	2106      	movs	r1, #6
    834e:	5499      	strb	r1, [r3, r2]
    8350:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	3301      	adds	r3, #1
    835c:	b2da      	uxtb	r2, r3
    835e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8366:	701a      	strb	r2, [r3, #0]
    8368:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    836c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	2bff      	cmp	r3, #255	; 0xff
    8374:	d105      	bne.n	8382 <send_attitude+0x15e>
    8376:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	2200      	movs	r2, #0
    8380:	701a      	strb	r2, [r3, #0]
    8382:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838a:	2206      	movs	r2, #6
    838c:	701a      	strb	r2, [r3, #0]
    838e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	2206      	movs	r2, #6
    8398:	701a      	strb	r2, [r3, #0]
    839a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    839e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	461a      	mov	r2, r3
    83a6:	f24b 4390 	movw	r3, #46224	; 0xb490
    83aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ae:	7819      	ldrb	r1, [r3, #0]
    83b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    83b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b8:	5499      	strb	r1, [r3, r2]
    83ba:	f24b 4390 	movw	r3, #46224	; 0xb490
    83be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c2:	781a      	ldrb	r2, [r3, #0]
    83c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    83c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	4413      	add	r3, r2
    83d0:	b2da      	uxtb	r2, r3
    83d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    83d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83da:	701a      	strb	r2, [r3, #0]
    83dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    83e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e4:	781a      	ldrb	r2, [r3, #0]
    83e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    83ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	4413      	add	r3, r2
    83f2:	b2da      	uxtb	r2, r3
    83f4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    83f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fc:	701a      	strb	r2, [r3, #0]
    83fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	3301      	adds	r3, #1
    840a:	b2da      	uxtb	r2, r3
    840c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8414:	701a      	strb	r2, [r3, #0]
    8416:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    841a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	2bff      	cmp	r3, #255	; 0xff
    8422:	d105      	bne.n	8430 <send_attitude+0x20c>
    8424:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842c:	2200      	movs	r2, #0
    842e:	701a      	strb	r2, [r3, #0]
    8430:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	461a      	mov	r2, r3
    843c:	f24b 4390 	movw	r3, #46224	; 0xb490
    8440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8444:	7859      	ldrb	r1, [r3, #1]
    8446:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    844a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    844e:	5499      	strb	r1, [r3, r2]
    8450:	4bd1      	ldr	r3, [pc, #836]	; (8798 <send_attitude+0x574>)
    8452:	781a      	ldrb	r2, [r3, #0]
    8454:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	4413      	add	r3, r2
    8460:	b2da      	uxtb	r2, r3
    8462:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	781a      	ldrb	r2, [r3, #0]
    8476:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    847a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	4413      	add	r3, r2
    8482:	b2da      	uxtb	r2, r3
    8484:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848c:	701a      	strb	r2, [r3, #0]
    848e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	3301      	adds	r3, #1
    849a:	b2da      	uxtb	r2, r3
    849c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a4:	701a      	strb	r2, [r3, #0]
    84a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ae:	781b      	ldrb	r3, [r3, #0]
    84b0:	2bff      	cmp	r3, #255	; 0xff
    84b2:	d105      	bne.n	84c0 <send_attitude+0x29c>
    84b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84bc:	2200      	movs	r2, #0
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	461a      	mov	r2, r3
    84cc:	f24b 4390 	movw	r3, #46224	; 0xb490
    84d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d4:	7899      	ldrb	r1, [r3, #2]
    84d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    84da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84de:	5499      	strb	r1, [r3, r2]
    84e0:	4bae      	ldr	r3, [pc, #696]	; (879c <send_attitude+0x578>)
    84e2:	781a      	ldrb	r2, [r3, #0]
    84e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	4413      	add	r3, r2
    84f0:	b2da      	uxtb	r2, r3
    84f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8504:	781a      	ldrb	r2, [r3, #0]
    8506:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    850a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	4413      	add	r3, r2
    8512:	b2da      	uxtb	r2, r3
    8514:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851c:	701a      	strb	r2, [r3, #0]
    851e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	3301      	adds	r3, #1
    852a:	b2da      	uxtb	r2, r3
    852c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8534:	701a      	strb	r2, [r3, #0]
    8536:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    853a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	2bff      	cmp	r3, #255	; 0xff
    8542:	d105      	bne.n	8550 <send_attitude+0x32c>
    8544:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854c:	2200      	movs	r2, #0
    854e:	701a      	strb	r2, [r3, #0]
    8550:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	461a      	mov	r2, r3
    855c:	f24b 4390 	movw	r3, #46224	; 0xb490
    8560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8564:	78d9      	ldrb	r1, [r3, #3]
    8566:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    856a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    856e:	5499      	strb	r1, [r3, r2]
    8570:	4b8b      	ldr	r3, [pc, #556]	; (87a0 <send_attitude+0x57c>)
    8572:	781a      	ldrb	r2, [r3, #0]
    8574:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	4413      	add	r3, r2
    8580:	b2da      	uxtb	r2, r3
    8582:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    858a:	701a      	strb	r2, [r3, #0]
    858c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8594:	781a      	ldrb	r2, [r3, #0]
    8596:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    859a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859e:	781b      	ldrb	r3, [r3, #0]
    85a0:	4413      	add	r3, r2
    85a2:	b2da      	uxtb	r2, r3
    85a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    85a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ac:	701a      	strb	r2, [r3, #0]
    85ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b6:	781b      	ldrb	r3, [r3, #0]
    85b8:	3301      	adds	r3, #1
    85ba:	b2da      	uxtb	r2, r3
    85bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c4:	701a      	strb	r2, [r3, #0]
    85c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	2bff      	cmp	r3, #255	; 0xff
    85d2:	d105      	bne.n	85e0 <send_attitude+0x3bc>
    85d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85dc:	2200      	movs	r2, #0
    85de:	701a      	strb	r2, [r3, #0]
    85e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	781b      	ldrb	r3, [r3, #0]
    85ea:	461a      	mov	r2, r3
    85ec:	f24b 4394 	movw	r3, #46228	; 0xb494
    85f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f4:	7819      	ldrb	r1, [r3, #0]
    85f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    85fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85fe:	5499      	strb	r1, [r3, r2]
    8600:	f24b 4394 	movw	r3, #46228	; 0xb494
    8604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8608:	781a      	ldrb	r2, [r3, #0]
    860a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    860e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8612:	781b      	ldrb	r3, [r3, #0]
    8614:	4413      	add	r3, r2
    8616:	b2da      	uxtb	r2, r3
    8618:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    861c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8620:	701a      	strb	r2, [r3, #0]
    8622:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    862a:	781a      	ldrb	r2, [r3, #0]
    862c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8634:	781b      	ldrb	r3, [r3, #0]
    8636:	4413      	add	r3, r2
    8638:	b2da      	uxtb	r2, r3
    863a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    863e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8642:	701a      	strb	r2, [r3, #0]
    8644:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	3301      	adds	r3, #1
    8650:	b2da      	uxtb	r2, r3
    8652:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865a:	701a      	strb	r2, [r3, #0]
    865c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	2bff      	cmp	r3, #255	; 0xff
    8668:	d105      	bne.n	8676 <send_attitude+0x452>
    866a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    866e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8672:	2200      	movs	r2, #0
    8674:	701a      	strb	r2, [r3, #0]
    8676:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	461a      	mov	r2, r3
    8682:	f24b 4394 	movw	r3, #46228	; 0xb494
    8686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868a:	7859      	ldrb	r1, [r3, #1]
    868c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8694:	5499      	strb	r1, [r3, r2]
    8696:	4b43      	ldr	r3, [pc, #268]	; (87a4 <send_attitude+0x580>)
    8698:	781a      	ldrb	r2, [r3, #0]
    869a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    869e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	4413      	add	r3, r2
    86a6:	b2da      	uxtb	r2, r3
    86a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    86ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b0:	701a      	strb	r2, [r3, #0]
    86b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    86b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ba:	781a      	ldrb	r2, [r3, #0]
    86bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    86c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	4413      	add	r3, r2
    86c8:	b2da      	uxtb	r2, r3
    86ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    86ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d2:	701a      	strb	r2, [r3, #0]
    86d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86dc:	781b      	ldrb	r3, [r3, #0]
    86de:	3301      	adds	r3, #1
    86e0:	b2da      	uxtb	r2, r3
    86e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ea:	701a      	strb	r2, [r3, #0]
    86ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	2bff      	cmp	r3, #255	; 0xff
    86f8:	d105      	bne.n	8706 <send_attitude+0x4e2>
    86fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8702:	2200      	movs	r2, #0
    8704:	701a      	strb	r2, [r3, #0]
    8706:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    870a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870e:	781b      	ldrb	r3, [r3, #0]
    8710:	461a      	mov	r2, r3
    8712:	f24b 4394 	movw	r3, #46228	; 0xb494
    8716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    871a:	7899      	ldrb	r1, [r3, #2]
    871c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8724:	5499      	strb	r1, [r3, r2]
    8726:	4b20      	ldr	r3, [pc, #128]	; (87a8 <send_attitude+0x584>)
    8728:	781a      	ldrb	r2, [r3, #0]
    872a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    872e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8732:	781b      	ldrb	r3, [r3, #0]
    8734:	4413      	add	r3, r2
    8736:	b2da      	uxtb	r2, r3
    8738:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    873c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8740:	701a      	strb	r2, [r3, #0]
    8742:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874a:	781a      	ldrb	r2, [r3, #0]
    874c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	4413      	add	r3, r2
    8758:	b2da      	uxtb	r2, r3
    875a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    875e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8762:	701a      	strb	r2, [r3, #0]
    8764:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876c:	781b      	ldrb	r3, [r3, #0]
    876e:	3301      	adds	r3, #1
    8770:	b2da      	uxtb	r2, r3
    8772:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877a:	701a      	strb	r2, [r3, #0]
    877c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	2bff      	cmp	r3, #255	; 0xff
    8788:	d110      	bne.n	87ac <send_attitude+0x588>
    878a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    878e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8792:	2200      	movs	r2, #0
    8794:	701a      	strb	r2, [r3, #0]
    8796:	e009      	b.n	87ac <send_attitude+0x588>
    8798:	2000b491 	.word	0x2000b491
    879c:	2000b492 	.word	0x2000b492
    87a0:	2000b493 	.word	0x2000b493
    87a4:	2000b495 	.word	0x2000b495
    87a8:	2000b496 	.word	0x2000b496
    87ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b4:	781b      	ldrb	r3, [r3, #0]
    87b6:	461a      	mov	r2, r3
    87b8:	f24b 4394 	movw	r3, #46228	; 0xb494
    87bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c0:	78d9      	ldrb	r1, [r3, #3]
    87c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    87c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ca:	5499      	strb	r1, [r3, r2]
    87cc:	4bc2      	ldr	r3, [pc, #776]	; (8ad8 <send_attitude+0x8b4>)
    87ce:	781a      	ldrb	r2, [r3, #0]
    87d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d8:	781b      	ldrb	r3, [r3, #0]
    87da:	4413      	add	r3, r2
    87dc:	b2da      	uxtb	r2, r3
    87de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    87ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f0:	781a      	ldrb	r2, [r3, #0]
    87f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	4413      	add	r3, r2
    87fe:	b2da      	uxtb	r2, r3
    8800:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8808:	701a      	strb	r2, [r3, #0]
    880a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    880e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8812:	781b      	ldrb	r3, [r3, #0]
    8814:	3301      	adds	r3, #1
    8816:	b2da      	uxtb	r2, r3
    8818:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    881c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8820:	701a      	strb	r2, [r3, #0]
    8822:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882a:	781b      	ldrb	r3, [r3, #0]
    882c:	2bff      	cmp	r3, #255	; 0xff
    882e:	d105      	bne.n	883c <send_attitude+0x618>
    8830:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8838:	2200      	movs	r2, #0
    883a:	701a      	strb	r2, [r3, #0]
    883c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	461a      	mov	r2, r3
    8848:	f24b 4398 	movw	r3, #46232	; 0xb498
    884c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8850:	7819      	ldrb	r1, [r3, #0]
    8852:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885a:	5499      	strb	r1, [r3, r2]
    885c:	f24b 4398 	movw	r3, #46232	; 0xb498
    8860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    886a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    886e:	781b      	ldrb	r3, [r3, #0]
    8870:	4413      	add	r3, r2
    8872:	b2da      	uxtb	r2, r3
    8874:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	701a      	strb	r2, [r3, #0]
    887e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	781a      	ldrb	r2, [r3, #0]
    8888:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    888c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8890:	781b      	ldrb	r3, [r3, #0]
    8892:	4413      	add	r3, r2
    8894:	b2da      	uxtb	r2, r3
    8896:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    889a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889e:	701a      	strb	r2, [r3, #0]
    88a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	3301      	adds	r3, #1
    88ac:	b2da      	uxtb	r2, r3
    88ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b6:	701a      	strb	r2, [r3, #0]
    88b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	2bff      	cmp	r3, #255	; 0xff
    88c4:	d105      	bne.n	88d2 <send_attitude+0x6ae>
    88c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ce:	2200      	movs	r2, #0
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88da:	781b      	ldrb	r3, [r3, #0]
    88dc:	461a      	mov	r2, r3
    88de:	f24b 4398 	movw	r3, #46232	; 0xb498
    88e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e6:	7859      	ldrb	r1, [r3, #1]
    88e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    88ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f0:	5499      	strb	r1, [r3, r2]
    88f2:	4b7a      	ldr	r3, [pc, #488]	; (8adc <send_attitude+0x8b8>)
    88f4:	781a      	ldrb	r2, [r3, #0]
    88f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	4413      	add	r3, r2
    8902:	b2da      	uxtb	r2, r3
    8904:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    890c:	701a      	strb	r2, [r3, #0]
    890e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8916:	781a      	ldrb	r2, [r3, #0]
    8918:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    891c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8920:	781b      	ldrb	r3, [r3, #0]
    8922:	4413      	add	r3, r2
    8924:	b2da      	uxtb	r2, r3
    8926:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    892a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892e:	701a      	strb	r2, [r3, #0]
    8930:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	3301      	adds	r3, #1
    893c:	b2da      	uxtb	r2, r3
    893e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8946:	701a      	strb	r2, [r3, #0]
    8948:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    894c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	2bff      	cmp	r3, #255	; 0xff
    8954:	d105      	bne.n	8962 <send_attitude+0x73e>
    8956:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    895a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    895e:	2200      	movs	r2, #0
    8960:	701a      	strb	r2, [r3, #0]
    8962:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	461a      	mov	r2, r3
    896e:	f24b 4398 	movw	r3, #46232	; 0xb498
    8972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8976:	7899      	ldrb	r1, [r3, #2]
    8978:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    897c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8980:	5499      	strb	r1, [r3, r2]
    8982:	4b57      	ldr	r3, [pc, #348]	; (8ae0 <send_attitude+0x8bc>)
    8984:	781a      	ldrb	r2, [r3, #0]
    8986:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    898a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898e:	781b      	ldrb	r3, [r3, #0]
    8990:	4413      	add	r3, r2
    8992:	b2da      	uxtb	r2, r3
    8994:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    899c:	701a      	strb	r2, [r3, #0]
    899e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    89a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a6:	781a      	ldrb	r2, [r3, #0]
    89a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    89ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b0:	781b      	ldrb	r3, [r3, #0]
    89b2:	4413      	add	r3, r2
    89b4:	b2da      	uxtb	r2, r3
    89b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    89ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89be:	701a      	strb	r2, [r3, #0]
    89c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c8:	781b      	ldrb	r3, [r3, #0]
    89ca:	3301      	adds	r3, #1
    89cc:	b2da      	uxtb	r2, r3
    89ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d6:	701a      	strb	r2, [r3, #0]
    89d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	2bff      	cmp	r3, #255	; 0xff
    89e4:	d105      	bne.n	89f2 <send_attitude+0x7ce>
    89e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ee:	2200      	movs	r2, #0
    89f0:	701a      	strb	r2, [r3, #0]
    89f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	461a      	mov	r2, r3
    89fe:	f24b 4398 	movw	r3, #46232	; 0xb498
    8a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a06:	78d9      	ldrb	r1, [r3, #3]
    8a08:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a10:	5499      	strb	r1, [r3, r2]
    8a12:	4b34      	ldr	r3, [pc, #208]	; (8ae4 <send_attitude+0x8c0>)
    8a14:	781a      	ldrb	r2, [r3, #0]
    8a16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	4413      	add	r3, r2
    8a22:	b2da      	uxtb	r2, r3
    8a24:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a2c:	701a      	strb	r2, [r3, #0]
    8a2e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a36:	781a      	ldrb	r2, [r3, #0]
    8a38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	4413      	add	r3, r2
    8a44:	b2da      	uxtb	r2, r3
    8a46:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4e:	701a      	strb	r2, [r3, #0]
    8a50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	3301      	adds	r3, #1
    8a5c:	b2da      	uxtb	r2, r3
    8a5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a66:	701a      	strb	r2, [r3, #0]
    8a68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a70:	781b      	ldrb	r3, [r3, #0]
    8a72:	2bff      	cmp	r3, #255	; 0xff
    8a74:	d105      	bne.n	8a82 <send_attitude+0x85e>
    8a76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a7e:	2200      	movs	r2, #0
    8a80:	701a      	strb	r2, [r3, #0]
    8a82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	461a      	mov	r2, r3
    8a8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a96:	7819      	ldrb	r1, [r3, #0]
    8a98:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa0:	5499      	strb	r1, [r3, r2]
    8aa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aaa:	781b      	ldrb	r3, [r3, #0]
    8aac:	3301      	adds	r3, #1
    8aae:	b2da      	uxtb	r2, r3
    8ab0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab8:	701a      	strb	r2, [r3, #0]
    8aba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	2bff      	cmp	r3, #255	; 0xff
    8ac6:	d10f      	bne.n	8ae8 <send_attitude+0x8c4>
    8ac8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad0:	2200      	movs	r2, #0
    8ad2:	701a      	strb	r2, [r3, #0]
    8ad4:	e008      	b.n	8ae8 <send_attitude+0x8c4>
    8ad6:	bf00      	nop
    8ad8:	2000b497 	.word	0x2000b497
    8adc:	2000b499 	.word	0x2000b499
    8ae0:	2000b49a 	.word	0x2000b49a
    8ae4:	2000b49b 	.word	0x2000b49b
    8ae8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	461a      	mov	r2, r3
    8af4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afc:	7819      	ldrb	r1, [r3, #0]
    8afe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b06:	5499      	strb	r1, [r3, r2]
    8b08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b10:	781b      	ldrb	r3, [r3, #0]
    8b12:	3301      	adds	r3, #1
    8b14:	b2da      	uxtb	r2, r3
    8b16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1e:	701a      	strb	r2, [r3, #0]
    8b20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b28:	781b      	ldrb	r3, [r3, #0]
    8b2a:	2bff      	cmp	r3, #255	; 0xff
    8b2c:	d105      	bne.n	8b3a <send_attitude+0x916>
    8b2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b36:	2200      	movs	r2, #0
    8b38:	701a      	strb	r2, [r3, #0]
    8b3a:	f242 0339 	movw	r3, #8249	; 0x2039
    8b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b42:	781b      	ldrb	r3, [r3, #0]
    8b44:	b2db      	uxtb	r3, r3
    8b46:	f003 0310 	and.w	r3, r3, #16
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d15a      	bne.n	8c04 <send_attitude+0x9e0>
    8b4e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b56:	781b      	ldrb	r3, [r3, #0]
    8b58:	b2db      	uxtb	r3, r3
    8b5a:	461a      	mov	r2, r3
    8b5c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b64:	5c9a      	ldrb	r2, [r3, r2]
    8b66:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	2200      	movs	r2, #0
    8b7a:	701a      	strb	r2, [r3, #0]
    8b7c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b84:	781b      	ldrb	r3, [r3, #0]
    8b86:	b2db      	uxtb	r3, r3
    8b88:	3301      	adds	r3, #1
    8b8a:	b2da      	uxtb	r2, r3
    8b8c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b94:	701a      	strb	r2, [r3, #0]
    8b96:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9e:	781b      	ldrb	r3, [r3, #0]
    8ba0:	b2db      	uxtb	r3, r3
    8ba2:	2bff      	cmp	r3, #255	; 0xff
    8ba4:	d105      	bne.n	8bb2 <send_attitude+0x98e>
    8ba6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bae:	2200      	movs	r2, #0
    8bb0:	701a      	strb	r2, [r3, #0]
    8bb2:	f242 0338 	movw	r3, #8248	; 0x2038
    8bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bba:	f242 0238 	movw	r2, #8248	; 0x2038
    8bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8bc2:	7812      	ldrb	r2, [r2, #0]
    8bc4:	b2d2      	uxtb	r2, r2
    8bc6:	f042 0201 	orr.w	r2, r2, #1
    8bca:	b2d2      	uxtb	r2, r2
    8bcc:	701a      	strb	r2, [r3, #0]
    8bce:	f242 0339 	movw	r3, #8249	; 0x2039
    8bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd6:	f242 0239 	movw	r2, #8249	; 0x2039
    8bda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8bde:	7812      	ldrb	r2, [r2, #0]
    8be0:	b2d2      	uxtb	r2, r2
    8be2:	f042 0210 	orr.w	r2, r2, #16
    8be6:	b2d2      	uxtb	r2, r2
    8be8:	701a      	strb	r2, [r3, #0]
    8bea:	e00b      	b.n	8c04 <send_attitude+0x9e0>
    8bec:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	3301      	adds	r3, #1
    8bf8:	b2da      	uxtb	r2, r3
    8bfa:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c02:	701a      	strb	r2, [r3, #0]
  }
}
    8c04:	46bd      	mov	sp, r7
    8c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c0a:	4770      	bx	lr

00008c0c <send_adc>:
  
void send_adc(void){  //500ms
    8c0c:	b480      	push	{r7}
    8c0e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8c10:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c18:	781a      	ldrb	r2, [r3, #0]
    8c1a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8c1e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8c22:	fba3 1302 	umull	r1, r3, r3, r2
    8c26:	0899      	lsrs	r1, r3, #2
    8c28:	460b      	mov	r3, r1
    8c2a:	009b      	lsls	r3, r3, #2
    8c2c:	440b      	add	r3, r1
    8c2e:	1ad3      	subs	r3, r2, r3
    8c30:	b2db      	uxtb	r3, r3
    8c32:	2b01      	cmp	r3, #1
    8c34:	f040 8269 	bne.w	910a <send_adc+0x4fe>
    8c38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c40:	781a      	ldrb	r2, [r3, #0]
    8c42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	b2db      	uxtb	r3, r3
    8c4e:	429a      	cmp	r2, r3
    8c50:	d313      	bcc.n	8c7a <send_adc+0x6e>
    8c52:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5a:	781b      	ldrb	r3, [r3, #0]
    8c5c:	b2db      	uxtb	r3, r3
    8c5e:	461a      	mov	r2, r3
    8c60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	1ad3      	subs	r3, r2, r3
    8c6c:	33ff      	adds	r3, #255	; 0xff
    8c6e:	2b08      	cmp	r3, #8
    8c70:	bfd4      	ite	le
    8c72:	2300      	movle	r3, #0
    8c74:	2301      	movgt	r3, #1
    8c76:	b2db      	uxtb	r3, r3
    8c78:	e011      	b.n	8c9e <send_adc+0x92>
    8c7a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	b2db      	uxtb	r3, r3
    8c86:	461a      	mov	r2, r3
    8c88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c90:	781b      	ldrb	r3, [r3, #0]
    8c92:	1ad3      	subs	r3, r2, r3
    8c94:	2b08      	cmp	r3, #8
    8c96:	bfd4      	ite	le
    8c98:	2300      	movle	r3, #0
    8c9a:	2301      	movgt	r3, #1
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	f000 8227 	beq.w	90f2 <send_adc+0x4e6>
    8ca4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	461a      	mov	r2, r3
    8cb0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb8:	2105      	movs	r1, #5
    8cba:	5499      	strb	r1, [r3, r2]
    8cbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc4:	781b      	ldrb	r3, [r3, #0]
    8cc6:	3301      	adds	r3, #1
    8cc8:	b2da      	uxtb	r2, r3
    8cca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd2:	701a      	strb	r2, [r3, #0]
    8cd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cdc:	781b      	ldrb	r3, [r3, #0]
    8cde:	2bff      	cmp	r3, #255	; 0xff
    8ce0:	d105      	bne.n	8cee <send_adc+0xe2>
    8ce2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cea:	2200      	movs	r2, #0
    8cec:	701a      	strb	r2, [r3, #0]
    8cee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf6:	781b      	ldrb	r3, [r3, #0]
    8cf8:	461a      	mov	r2, r3
    8cfa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d02:	2107      	movs	r1, #7
    8d04:	5499      	strb	r1, [r3, r2]
    8d06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0e:	781b      	ldrb	r3, [r3, #0]
    8d10:	3301      	adds	r3, #1
    8d12:	b2da      	uxtb	r2, r3
    8d14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d1c:	701a      	strb	r2, [r3, #0]
    8d1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	2bff      	cmp	r3, #255	; 0xff
    8d2a:	d105      	bne.n	8d38 <send_adc+0x12c>
    8d2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d34:	2200      	movs	r2, #0
    8d36:	701a      	strb	r2, [r3, #0]
    8d38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d40:	2207      	movs	r2, #7
    8d42:	701a      	strb	r2, [r3, #0]
    8d44:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d4c:	2207      	movs	r2, #7
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	461a      	mov	r2, r3
    8d5c:	f24b 1370 	movw	r3, #45424	; 0xb170
    8d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d64:	7819      	ldrb	r1, [r3, #0]
    8d66:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6e:	5499      	strb	r1, [r3, r2]
    8d70:	f24b 1370 	movw	r3, #45424	; 0xb170
    8d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d78:	781a      	ldrb	r2, [r3, #0]
    8d7a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	4413      	add	r3, r2
    8d86:	b2da      	uxtb	r2, r3
    8d88:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9a:	781a      	ldrb	r2, [r3, #0]
    8d9c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	4413      	add	r3, r2
    8da8:	b2da      	uxtb	r2, r3
    8daa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db2:	701a      	strb	r2, [r3, #0]
    8db4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	3301      	adds	r3, #1
    8dc0:	b2da      	uxtb	r2, r3
    8dc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dca:	701a      	strb	r2, [r3, #0]
    8dcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd4:	781b      	ldrb	r3, [r3, #0]
    8dd6:	2bff      	cmp	r3, #255	; 0xff
    8dd8:	d105      	bne.n	8de6 <send_adc+0x1da>
    8dda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de2:	2200      	movs	r2, #0
    8de4:	701a      	strb	r2, [r3, #0]
    8de6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dee:	781b      	ldrb	r3, [r3, #0]
    8df0:	461a      	mov	r2, r3
    8df2:	f24b 1370 	movw	r3, #45424	; 0xb170
    8df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfa:	7859      	ldrb	r1, [r3, #1]
    8dfc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e04:	5499      	strb	r1, [r3, r2]
    8e06:	4bc3      	ldr	r3, [pc, #780]	; (9114 <send_adc+0x508>)
    8e08:	781a      	ldrb	r2, [r3, #0]
    8e0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	4413      	add	r3, r2
    8e16:	b2da      	uxtb	r2, r3
    8e18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e20:	701a      	strb	r2, [r3, #0]
    8e22:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e2a:	781a      	ldrb	r2, [r3, #0]
    8e2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e34:	781b      	ldrb	r3, [r3, #0]
    8e36:	4413      	add	r3, r2
    8e38:	b2da      	uxtb	r2, r3
    8e3a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e42:	701a      	strb	r2, [r3, #0]
    8e44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4c:	781b      	ldrb	r3, [r3, #0]
    8e4e:	3301      	adds	r3, #1
    8e50:	b2da      	uxtb	r2, r3
    8e52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e5a:	701a      	strb	r2, [r3, #0]
    8e5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e64:	781b      	ldrb	r3, [r3, #0]
    8e66:	2bff      	cmp	r3, #255	; 0xff
    8e68:	d105      	bne.n	8e76 <send_adc+0x26a>
    8e6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e72:	2200      	movs	r2, #0
    8e74:	701a      	strb	r2, [r3, #0]
    8e76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7e:	781b      	ldrb	r3, [r3, #0]
    8e80:	461a      	mov	r2, r3
    8e82:	f24b 1372 	movw	r3, #45426	; 0xb172
    8e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e8a:	7819      	ldrb	r1, [r3, #0]
    8e8c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e94:	5499      	strb	r1, [r3, r2]
    8e96:	f24b 1372 	movw	r3, #45426	; 0xb172
    8e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9e:	781a      	ldrb	r2, [r3, #0]
    8ea0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	4413      	add	r3, r2
    8eac:	b2da      	uxtb	r2, r3
    8eae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb6:	701a      	strb	r2, [r3, #0]
    8eb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec0:	781a      	ldrb	r2, [r3, #0]
    8ec2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eca:	781b      	ldrb	r3, [r3, #0]
    8ecc:	4413      	add	r3, r2
    8ece:	b2da      	uxtb	r2, r3
    8ed0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	3301      	adds	r3, #1
    8ee6:	b2da      	uxtb	r2, r3
    8ee8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef0:	701a      	strb	r2, [r3, #0]
    8ef2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efa:	781b      	ldrb	r3, [r3, #0]
    8efc:	2bff      	cmp	r3, #255	; 0xff
    8efe:	d105      	bne.n	8f0c <send_adc+0x300>
    8f00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f08:	2200      	movs	r2, #0
    8f0a:	701a      	strb	r2, [r3, #0]
    8f0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	461a      	mov	r2, r3
    8f18:	f24b 1372 	movw	r3, #45426	; 0xb172
    8f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f20:	7859      	ldrb	r1, [r3, #1]
    8f22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f2a:	5499      	strb	r1, [r3, r2]
    8f2c:	4b7a      	ldr	r3, [pc, #488]	; (9118 <send_adc+0x50c>)
    8f2e:	781a      	ldrb	r2, [r3, #0]
    8f30:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	4413      	add	r3, r2
    8f3c:	b2da      	uxtb	r2, r3
    8f3e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f46:	701a      	strb	r2, [r3, #0]
    8f48:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f50:	781a      	ldrb	r2, [r3, #0]
    8f52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	4413      	add	r3, r2
    8f5e:	b2da      	uxtb	r2, r3
    8f60:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f68:	701a      	strb	r2, [r3, #0]
    8f6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	3301      	adds	r3, #1
    8f76:	b2da      	uxtb	r2, r3
    8f78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f80:	701a      	strb	r2, [r3, #0]
    8f82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f8a:	781b      	ldrb	r3, [r3, #0]
    8f8c:	2bff      	cmp	r3, #255	; 0xff
    8f8e:	d105      	bne.n	8f9c <send_adc+0x390>
    8f90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f98:	2200      	movs	r2, #0
    8f9a:	701a      	strb	r2, [r3, #0]
    8f9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	461a      	mov	r2, r3
    8fa8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb0:	7819      	ldrb	r1, [r3, #0]
    8fb2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fba:	5499      	strb	r1, [r3, r2]
    8fbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	3301      	adds	r3, #1
    8fc8:	b2da      	uxtb	r2, r3
    8fca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	2bff      	cmp	r3, #255	; 0xff
    8fe0:	d105      	bne.n	8fee <send_adc+0x3e2>
    8fe2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fea:	2200      	movs	r2, #0
    8fec:	701a      	strb	r2, [r3, #0]
    8fee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	461a      	mov	r2, r3
    8ffa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9002:	7819      	ldrb	r1, [r3, #0]
    9004:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900c:	5499      	strb	r1, [r3, r2]
    900e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	3301      	adds	r3, #1
    901a:	b2da      	uxtb	r2, r3
    901c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9024:	701a      	strb	r2, [r3, #0]
    9026:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    902a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	2bff      	cmp	r3, #255	; 0xff
    9032:	d105      	bne.n	9040 <send_adc+0x434>
    9034:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903c:	2200      	movs	r2, #0
    903e:	701a      	strb	r2, [r3, #0]
    9040:	f242 0339 	movw	r3, #8249	; 0x2039
    9044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	b2db      	uxtb	r3, r3
    904c:	f003 0310 	and.w	r3, r3, #16
    9050:	2b00      	cmp	r3, #0
    9052:	d15a      	bne.n	910a <send_adc+0x4fe>
    9054:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	b2db      	uxtb	r3, r3
    9060:	461a      	mov	r2, r3
    9062:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906a:	5c9a      	ldrb	r2, [r3, r2]
    906c:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    9070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9074:	701a      	strb	r2, [r3, #0]
    9076:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    907a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    907e:	2200      	movs	r2, #0
    9080:	701a      	strb	r2, [r3, #0]
    9082:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	b2db      	uxtb	r3, r3
    908e:	3301      	adds	r3, #1
    9090:	b2da      	uxtb	r2, r3
    9092:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	b2db      	uxtb	r3, r3
    90a8:	2bff      	cmp	r3, #255	; 0xff
    90aa:	d105      	bne.n	90b8 <send_adc+0x4ac>
    90ac:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    90b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b4:	2200      	movs	r2, #0
    90b6:	701a      	strb	r2, [r3, #0]
    90b8:	f242 0338 	movw	r3, #8248	; 0x2038
    90bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c0:	f242 0238 	movw	r2, #8248	; 0x2038
    90c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    90c8:	7812      	ldrb	r2, [r2, #0]
    90ca:	b2d2      	uxtb	r2, r2
    90cc:	f042 0201 	orr.w	r2, r2, #1
    90d0:	b2d2      	uxtb	r2, r2
    90d2:	701a      	strb	r2, [r3, #0]
    90d4:	f242 0339 	movw	r3, #8249	; 0x2039
    90d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90dc:	f242 0239 	movw	r2, #8249	; 0x2039
    90e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    90e4:	7812      	ldrb	r2, [r2, #0]
    90e6:	b2d2      	uxtb	r2, r2
    90e8:	f042 0210 	orr.w	r2, r2, #16
    90ec:	b2d2      	uxtb	r2, r2
    90ee:	701a      	strb	r2, [r3, #0]
    90f0:	e00b      	b.n	910a <send_adc+0x4fe>
    90f2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    90f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fa:	781b      	ldrb	r3, [r3, #0]
    90fc:	3301      	adds	r3, #1
    90fe:	b2da      	uxtb	r2, r3
    9100:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    9104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9108:	701a      	strb	r2, [r3, #0]
}
    910a:	46bd      	mov	sp, r7
    910c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9110:	4770      	bx	lr
    9112:	bf00      	nop
    9114:	2000b171 	.word	0x2000b171
    9118:	2000b173 	.word	0x2000b173

0000911c <send_settings>:
void send_settings(void){ //500ms
    911c:	b480      	push	{r7}
    911e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9120:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    9124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9128:	781a      	ldrb	r2, [r3, #0]
    912a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    912e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9132:	fba3 1302 	umull	r1, r3, r3, r2
    9136:	0899      	lsrs	r1, r3, #2
    9138:	460b      	mov	r3, r1
    913a:	009b      	lsls	r3, r3, #2
    913c:	440b      	add	r3, r1
    913e:	1ad3      	subs	r3, r2, r3
    9140:	b2db      	uxtb	r3, r3
    9142:	2b02      	cmp	r3, #2
    9144:	f040 83e7 	bne.w	9916 <send_settings+0x7fa>
    9148:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    914c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	2b00      	cmp	r3, #0
    9154:	f000 83df 	beq.w	9916 <send_settings+0x7fa>
    9158:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    915c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9160:	781a      	ldrb	r2, [r3, #0]
    9162:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	b2db      	uxtb	r3, r3
    916e:	429a      	cmp	r2, r3
    9170:	d313      	bcc.n	919a <send_settings+0x7e>
    9172:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    917a:	781b      	ldrb	r3, [r3, #0]
    917c:	b2db      	uxtb	r3, r3
    917e:	461a      	mov	r2, r3
    9180:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	1ad3      	subs	r3, r2, r3
    918c:	33ff      	adds	r3, #255	; 0xff
    918e:	2b0d      	cmp	r3, #13
    9190:	bfd4      	ite	le
    9192:	2300      	movle	r3, #0
    9194:	2301      	movgt	r3, #1
    9196:	b2db      	uxtb	r3, r3
    9198:	e011      	b.n	91be <send_settings+0xa2>
    919a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    919e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	b2db      	uxtb	r3, r3
    91a6:	461a      	mov	r2, r3
    91a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b0:	781b      	ldrb	r3, [r3, #0]
    91b2:	1ad3      	subs	r3, r2, r3
    91b4:	2b0d      	cmp	r3, #13
    91b6:	bfd4      	ite	le
    91b8:	2300      	movle	r3, #0
    91ba:	2301      	movgt	r3, #1
    91bc:	b2db      	uxtb	r3, r3
    91be:	2b00      	cmp	r3, #0
    91c0:	f000 839d 	beq.w	98fe <send_settings+0x7e2>
    91c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91cc:	781b      	ldrb	r3, [r3, #0]
    91ce:	461a      	mov	r2, r3
    91d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    91d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d8:	2105      	movs	r1, #5
    91da:	5499      	strb	r1, [r3, r2]
    91dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	3301      	adds	r3, #1
    91e8:	b2da      	uxtb	r2, r3
    91ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f2:	701a      	strb	r2, [r3, #0]
    91f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	2bff      	cmp	r3, #255	; 0xff
    9200:	d105      	bne.n	920e <send_settings+0xf2>
    9202:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920a:	2200      	movs	r2, #0
    920c:	701a      	strb	r2, [r3, #0]
    920e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	461a      	mov	r2, r3
    921a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    921e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9222:	2111      	movs	r1, #17
    9224:	5499      	strb	r1, [r3, r2]
    9226:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    922a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    922e:	781b      	ldrb	r3, [r3, #0]
    9230:	3301      	adds	r3, #1
    9232:	b2da      	uxtb	r2, r3
    9234:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    923c:	701a      	strb	r2, [r3, #0]
    923e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	2bff      	cmp	r3, #255	; 0xff
    924a:	d105      	bne.n	9258 <send_settings+0x13c>
    924c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9254:	2200      	movs	r2, #0
    9256:	701a      	strb	r2, [r3, #0]
    9258:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    925c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9260:	2211      	movs	r2, #17
    9262:	701a      	strb	r2, [r3, #0]
    9264:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    926c:	2211      	movs	r2, #17
    926e:	701a      	strb	r2, [r3, #0]
    9270:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	461a      	mov	r2, r3
    927c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    9280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9284:	7819      	ldrb	r1, [r3, #0]
    9286:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    928a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928e:	5499      	strb	r1, [r3, r2]
    9290:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9298:	781a      	ldrb	r2, [r3, #0]
    929a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    929e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	4413      	add	r3, r2
    92a6:	b2da      	uxtb	r2, r3
    92a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	701a      	strb	r2, [r3, #0]
    92b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    92b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ba:	781a      	ldrb	r2, [r3, #0]
    92bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    92c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	4413      	add	r3, r2
    92c8:	b2da      	uxtb	r2, r3
    92ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    92ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d2:	701a      	strb	r2, [r3, #0]
    92d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92dc:	781b      	ldrb	r3, [r3, #0]
    92de:	3301      	adds	r3, #1
    92e0:	b2da      	uxtb	r2, r3
    92e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ea:	701a      	strb	r2, [r3, #0]
    92ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	2bff      	cmp	r3, #255	; 0xff
    92f8:	d105      	bne.n	9306 <send_settings+0x1ea>
    92fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9302:	2200      	movs	r2, #0
    9304:	701a      	strb	r2, [r3, #0]
    9306:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    930a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	461a      	mov	r2, r3
    9312:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931a:	7819      	ldrb	r1, [r3, #0]
    931c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9324:	5499      	strb	r1, [r3, r2]
    9326:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    932a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    932e:	781a      	ldrb	r2, [r3, #0]
    9330:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	4413      	add	r3, r2
    933c:	b2da      	uxtb	r2, r3
    933e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9346:	701a      	strb	r2, [r3, #0]
    9348:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    934c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9350:	781a      	ldrb	r2, [r3, #0]
    9352:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	4413      	add	r3, r2
    935e:	b2da      	uxtb	r2, r3
    9360:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9368:	701a      	strb	r2, [r3, #0]
    936a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    936e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9372:	781b      	ldrb	r3, [r3, #0]
    9374:	3301      	adds	r3, #1
    9376:	b2da      	uxtb	r2, r3
    9378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	701a      	strb	r2, [r3, #0]
    9382:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	2bff      	cmp	r3, #255	; 0xff
    938e:	d105      	bne.n	939c <send_settings+0x280>
    9390:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9398:	2200      	movs	r2, #0
    939a:	701a      	strb	r2, [r3, #0]
    939c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	461a      	mov	r2, r3
    93a8:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    93ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b0:	7859      	ldrb	r1, [r3, #1]
    93b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    93b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ba:	5499      	strb	r1, [r3, r2]
    93bc:	4bd1      	ldr	r3, [pc, #836]	; (9704 <send_settings+0x5e8>)
    93be:	781a      	ldrb	r2, [r3, #0]
    93c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	4413      	add	r3, r2
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	781a      	ldrb	r2, [r3, #0]
    93e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ea:	781b      	ldrb	r3, [r3, #0]
    93ec:	4413      	add	r3, r2
    93ee:	b2da      	uxtb	r2, r3
    93f0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    93f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f8:	701a      	strb	r2, [r3, #0]
    93fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	3301      	adds	r3, #1
    9406:	b2da      	uxtb	r2, r3
    9408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    940c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9410:	701a      	strb	r2, [r3, #0]
    9412:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	2bff      	cmp	r3, #255	; 0xff
    941e:	d105      	bne.n	942c <send_settings+0x310>
    9420:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9428:	2200      	movs	r2, #0
    942a:	701a      	strb	r2, [r3, #0]
    942c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	461a      	mov	r2, r3
    9438:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    943c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9440:	7899      	ldrb	r1, [r3, #2]
    9442:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944a:	5499      	strb	r1, [r3, r2]
    944c:	4bae      	ldr	r3, [pc, #696]	; (9708 <send_settings+0x5ec>)
    944e:	781a      	ldrb	r2, [r3, #0]
    9450:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	4413      	add	r3, r2
    945c:	b2da      	uxtb	r2, r3
    945e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9466:	701a      	strb	r2, [r3, #0]
    9468:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	781a      	ldrb	r2, [r3, #0]
    9472:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947a:	781b      	ldrb	r3, [r3, #0]
    947c:	4413      	add	r3, r2
    947e:	b2da      	uxtb	r2, r3
    9480:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9488:	701a      	strb	r2, [r3, #0]
    948a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    948e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	3301      	adds	r3, #1
    9496:	b2da      	uxtb	r2, r3
    9498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    949c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a0:	701a      	strb	r2, [r3, #0]
    94a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	781b      	ldrb	r3, [r3, #0]
    94ac:	2bff      	cmp	r3, #255	; 0xff
    94ae:	d105      	bne.n	94bc <send_settings+0x3a0>
    94b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b8:	2200      	movs	r2, #0
    94ba:	701a      	strb	r2, [r3, #0]
    94bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	461a      	mov	r2, r3
    94c8:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    94cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d0:	78d9      	ldrb	r1, [r3, #3]
    94d2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    94d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94da:	5499      	strb	r1, [r3, r2]
    94dc:	4b8b      	ldr	r3, [pc, #556]	; (970c <send_settings+0x5f0>)
    94de:	781a      	ldrb	r2, [r3, #0]
    94e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e8:	781b      	ldrb	r3, [r3, #0]
    94ea:	4413      	add	r3, r2
    94ec:	b2da      	uxtb	r2, r3
    94ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f6:	701a      	strb	r2, [r3, #0]
    94f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    94fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9500:	781a      	ldrb	r2, [r3, #0]
    9502:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	4413      	add	r3, r2
    950e:	b2da      	uxtb	r2, r3
    9510:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9518:	701a      	strb	r2, [r3, #0]
    951a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    951e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	3301      	adds	r3, #1
    9526:	b2da      	uxtb	r2, r3
    9528:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    952c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9530:	701a      	strb	r2, [r3, #0]
    9532:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	2bff      	cmp	r3, #255	; 0xff
    953e:	d105      	bne.n	954c <send_settings+0x430>
    9540:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9548:	2200      	movs	r2, #0
    954a:	701a      	strb	r2, [r3, #0]
    954c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9554:	781b      	ldrb	r3, [r3, #0]
    9556:	461a      	mov	r2, r3
    9558:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    955c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9560:	7819      	ldrb	r1, [r3, #0]
    9562:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956a:	5499      	strb	r1, [r3, r2]
    956c:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9574:	781a      	ldrb	r2, [r3, #0]
    9576:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    957a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	4413      	add	r3, r2
    9582:	b2da      	uxtb	r2, r3
    9584:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958c:	701a      	strb	r2, [r3, #0]
    958e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9596:	781a      	ldrb	r2, [r3, #0]
    9598:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    959c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	4413      	add	r3, r2
    95a4:	b2da      	uxtb	r2, r3
    95a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    95aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ae:	701a      	strb	r2, [r3, #0]
    95b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b8:	781b      	ldrb	r3, [r3, #0]
    95ba:	3301      	adds	r3, #1
    95bc:	b2da      	uxtb	r2, r3
    95be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c6:	701a      	strb	r2, [r3, #0]
    95c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	2bff      	cmp	r3, #255	; 0xff
    95d4:	d105      	bne.n	95e2 <send_settings+0x4c6>
    95d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95de:	2200      	movs	r2, #0
    95e0:	701a      	strb	r2, [r3, #0]
    95e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ea:	781b      	ldrb	r3, [r3, #0]
    95ec:	461a      	mov	r2, r3
    95ee:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    95f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f6:	7859      	ldrb	r1, [r3, #1]
    95f8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    95fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9600:	5499      	strb	r1, [r3, r2]
    9602:	4b43      	ldr	r3, [pc, #268]	; (9710 <send_settings+0x5f4>)
    9604:	781a      	ldrb	r2, [r3, #0]
    9606:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    960a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	4413      	add	r3, r2
    9612:	b2da      	uxtb	r2, r3
    9614:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    961c:	701a      	strb	r2, [r3, #0]
    961e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9626:	781a      	ldrb	r2, [r3, #0]
    9628:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    962c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	4413      	add	r3, r2
    9634:	b2da      	uxtb	r2, r3
    9636:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    963a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    963e:	701a      	strb	r2, [r3, #0]
    9640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9648:	781b      	ldrb	r3, [r3, #0]
    964a:	3301      	adds	r3, #1
    964c:	b2da      	uxtb	r2, r3
    964e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9656:	701a      	strb	r2, [r3, #0]
    9658:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    965c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9660:	781b      	ldrb	r3, [r3, #0]
    9662:	2bff      	cmp	r3, #255	; 0xff
    9664:	d105      	bne.n	9672 <send_settings+0x556>
    9666:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    966a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    966e:	2200      	movs	r2, #0
    9670:	701a      	strb	r2, [r3, #0]
    9672:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	461a      	mov	r2, r3
    967e:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9686:	7899      	ldrb	r1, [r3, #2]
    9688:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    968c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9690:	5499      	strb	r1, [r3, r2]
    9692:	4b20      	ldr	r3, [pc, #128]	; (9714 <send_settings+0x5f8>)
    9694:	781a      	ldrb	r2, [r3, #0]
    9696:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    969a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969e:	781b      	ldrb	r3, [r3, #0]
    96a0:	4413      	add	r3, r2
    96a2:	b2da      	uxtb	r2, r3
    96a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    96a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ac:	701a      	strb	r2, [r3, #0]
    96ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    96b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b6:	781a      	ldrb	r2, [r3, #0]
    96b8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    96bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	4413      	add	r3, r2
    96c4:	b2da      	uxtb	r2, r3
    96c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    96ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ce:	701a      	strb	r2, [r3, #0]
    96d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d8:	781b      	ldrb	r3, [r3, #0]
    96da:	3301      	adds	r3, #1
    96dc:	b2da      	uxtb	r2, r3
    96de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e6:	701a      	strb	r2, [r3, #0]
    96e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	2bff      	cmp	r3, #255	; 0xff
    96f4:	d110      	bne.n	9718 <send_settings+0x5fc>
    96f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96fe:	2200      	movs	r2, #0
    9700:	701a      	strb	r2, [r3, #0]
    9702:	e009      	b.n	9718 <send_settings+0x5fc>
    9704:	2000aec1 	.word	0x2000aec1
    9708:	2000aec2 	.word	0x2000aec2
    970c:	2000aec3 	.word	0x2000aec3
    9710:	2000aec5 	.word	0x2000aec5
    9714:	2000aec6 	.word	0x2000aec6
    9718:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    971c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9720:	781b      	ldrb	r3, [r3, #0]
    9722:	461a      	mov	r2, r3
    9724:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    972c:	78d9      	ldrb	r1, [r3, #3]
    972e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9736:	5499      	strb	r1, [r3, r2]
    9738:	4b79      	ldr	r3, [pc, #484]	; (9920 <send_settings+0x804>)
    973a:	781a      	ldrb	r2, [r3, #0]
    973c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	4413      	add	r3, r2
    9748:	b2da      	uxtb	r2, r3
    974a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    974e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9752:	701a      	strb	r2, [r3, #0]
    9754:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    975c:	781a      	ldrb	r2, [r3, #0]
    975e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	4413      	add	r3, r2
    976a:	b2da      	uxtb	r2, r3
    976c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9774:	701a      	strb	r2, [r3, #0]
    9776:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977e:	781b      	ldrb	r3, [r3, #0]
    9780:	3301      	adds	r3, #1
    9782:	b2da      	uxtb	r2, r3
    9784:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    978c:	701a      	strb	r2, [r3, #0]
    978e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9796:	781b      	ldrb	r3, [r3, #0]
    9798:	2bff      	cmp	r3, #255	; 0xff
    979a:	d105      	bne.n	97a8 <send_settings+0x68c>
    979c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a4:	2200      	movs	r2, #0
    97a6:	701a      	strb	r2, [r3, #0]
    97a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	461a      	mov	r2, r3
    97b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    97b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97bc:	7819      	ldrb	r1, [r3, #0]
    97be:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    97c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c6:	5499      	strb	r1, [r3, r2]
    97c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d0:	781b      	ldrb	r3, [r3, #0]
    97d2:	3301      	adds	r3, #1
    97d4:	b2da      	uxtb	r2, r3
    97d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97de:	701a      	strb	r2, [r3, #0]
    97e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	2bff      	cmp	r3, #255	; 0xff
    97ec:	d105      	bne.n	97fa <send_settings+0x6de>
    97ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f6:	2200      	movs	r2, #0
    97f8:	701a      	strb	r2, [r3, #0]
    97fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	461a      	mov	r2, r3
    9806:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    980a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980e:	7819      	ldrb	r1, [r3, #0]
    9810:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9818:	5499      	strb	r1, [r3, r2]
    981a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    981e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9822:	781b      	ldrb	r3, [r3, #0]
    9824:	3301      	adds	r3, #1
    9826:	b2da      	uxtb	r2, r3
    9828:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    982c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	2bff      	cmp	r3, #255	; 0xff
    983e:	d105      	bne.n	984c <send_settings+0x730>
    9840:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9848:	2200      	movs	r2, #0
    984a:	701a      	strb	r2, [r3, #0]
    984c:	f242 0339 	movw	r3, #8249	; 0x2039
    9850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	b2db      	uxtb	r3, r3
    9858:	f003 0310 	and.w	r3, r3, #16
    985c:	2b00      	cmp	r3, #0
    985e:	d15a      	bne.n	9916 <send_settings+0x7fa>
    9860:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9868:	781b      	ldrb	r3, [r3, #0]
    986a:	b2db      	uxtb	r3, r3
    986c:	461a      	mov	r2, r3
    986e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9876:	5c9a      	ldrb	r2, [r3, r2]
    9878:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    987c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9880:	701a      	strb	r2, [r3, #0]
    9882:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    9886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988a:	2200      	movs	r2, #0
    988c:	701a      	strb	r2, [r3, #0]
    988e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	b2db      	uxtb	r3, r3
    989a:	3301      	adds	r3, #1
    989c:	b2da      	uxtb	r2, r3
    989e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    98a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    98ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	b2db      	uxtb	r3, r3
    98b4:	2bff      	cmp	r3, #255	; 0xff
    98b6:	d105      	bne.n	98c4 <send_settings+0x7a8>
    98b8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    98bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c0:	2200      	movs	r2, #0
    98c2:	701a      	strb	r2, [r3, #0]
    98c4:	f242 0338 	movw	r3, #8248	; 0x2038
    98c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98cc:	f242 0238 	movw	r2, #8248	; 0x2038
    98d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    98d4:	7812      	ldrb	r2, [r2, #0]
    98d6:	b2d2      	uxtb	r2, r2
    98d8:	f042 0201 	orr.w	r2, r2, #1
    98dc:	b2d2      	uxtb	r2, r2
    98de:	701a      	strb	r2, [r3, #0]
    98e0:	f242 0339 	movw	r3, #8249	; 0x2039
    98e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e8:	f242 0239 	movw	r2, #8249	; 0x2039
    98ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    98f0:	7812      	ldrb	r2, [r2, #0]
    98f2:	b2d2      	uxtb	r2, r2
    98f4:	f042 0210 	orr.w	r2, r2, #16
    98f8:	b2d2      	uxtb	r2, r2
    98fa:	701a      	strb	r2, [r3, #0]
    98fc:	e00b      	b.n	9916 <send_settings+0x7fa>
    98fe:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    9902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	3301      	adds	r3, #1
    990a:	b2da      	uxtb	r2, r3
    990c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    9910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9914:	701a      	strb	r2, [r3, #0]
}
    9916:	46bd      	mov	sp, r7
    9918:	f85d 7b04 	ldr.w	r7, [sp], #4
    991c:	4770      	bx	lr
    991e:	bf00      	nop
    9920:	2000aec7 	.word	0x2000aec7

00009924 <send_desired>:
void send_desired(void){  //1000ms
    9924:	b480      	push	{r7}
    9926:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9928:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    992c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9930:	781a      	ldrb	r2, [r3, #0]
    9932:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9936:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    993a:	fba3 1302 	umull	r1, r3, r3, r2
    993e:	08d9      	lsrs	r1, r3, #3
    9940:	460b      	mov	r3, r1
    9942:	009b      	lsls	r3, r3, #2
    9944:	440b      	add	r3, r1
    9946:	005b      	lsls	r3, r3, #1
    9948:	1ad3      	subs	r3, r2, r3
    994a:	b2db      	uxtb	r3, r3
    994c:	2b03      	cmp	r3, #3
    994e:	f040 8712 	bne.w	a776 <send_desired+0xe52>
    9952:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995a:	781a      	ldrb	r2, [r3, #0]
    995c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9964:	781b      	ldrb	r3, [r3, #0]
    9966:	b2db      	uxtb	r3, r3
    9968:	429a      	cmp	r2, r3
    996a:	d313      	bcc.n	9994 <send_desired+0x70>
    996c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9974:	781b      	ldrb	r3, [r3, #0]
    9976:	b2db      	uxtb	r3, r3
    9978:	461a      	mov	r2, r3
    997a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    997e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9982:	781b      	ldrb	r3, [r3, #0]
    9984:	1ad3      	subs	r3, r2, r3
    9986:	33ff      	adds	r3, #255	; 0xff
    9988:	2b18      	cmp	r3, #24
    998a:	bfd4      	ite	le
    998c:	2300      	movle	r3, #0
    998e:	2301      	movgt	r3, #1
    9990:	b2db      	uxtb	r3, r3
    9992:	e011      	b.n	99b8 <send_desired+0x94>
    9994:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	b2db      	uxtb	r3, r3
    99a0:	461a      	mov	r2, r3
    99a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99aa:	781b      	ldrb	r3, [r3, #0]
    99ac:	1ad3      	subs	r3, r2, r3
    99ae:	2b18      	cmp	r3, #24
    99b0:	bfd4      	ite	le
    99b2:	2300      	movle	r3, #0
    99b4:	2301      	movgt	r3, #1
    99b6:	b2db      	uxtb	r3, r3
    99b8:	2b00      	cmp	r3, #0
    99ba:	f000 86d0 	beq.w	a75e <send_desired+0xe3a>
    99be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	461a      	mov	r2, r3
    99ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    99ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d2:	2105      	movs	r1, #5
    99d4:	5499      	strb	r1, [r3, r2]
    99d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99de:	781b      	ldrb	r3, [r3, #0]
    99e0:	3301      	adds	r3, #1
    99e2:	b2da      	uxtb	r2, r3
    99e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ec:	701a      	strb	r2, [r3, #0]
    99ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f6:	781b      	ldrb	r3, [r3, #0]
    99f8:	2bff      	cmp	r3, #255	; 0xff
    99fa:	d105      	bne.n	9a08 <send_desired+0xe4>
    99fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a04:	2200      	movs	r2, #0
    9a06:	701a      	strb	r2, [r3, #0]
    9a08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	461a      	mov	r2, r3
    9a14:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1c:	2112      	movs	r1, #18
    9a1e:	5499      	strb	r1, [r3, r2]
    9a20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	3301      	adds	r3, #1
    9a2c:	b2da      	uxtb	r2, r3
    9a2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a36:	701a      	strb	r2, [r3, #0]
    9a38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a40:	781b      	ldrb	r3, [r3, #0]
    9a42:	2bff      	cmp	r3, #255	; 0xff
    9a44:	d105      	bne.n	9a52 <send_desired+0x12e>
    9a46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4e:	2200      	movs	r2, #0
    9a50:	701a      	strb	r2, [r3, #0]
    9a52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5a:	2212      	movs	r2, #18
    9a5c:	701a      	strb	r2, [r3, #0]
    9a5e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a66:	2212      	movs	r2, #18
    9a68:	701a      	strb	r2, [r3, #0]
    9a6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a72:	781b      	ldrb	r3, [r3, #0]
    9a74:	461a      	mov	r2, r3
    9a76:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7e:	7819      	ldrb	r1, [r3, #0]
    9a80:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a88:	5499      	strb	r1, [r3, r2]
    9a8a:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a92:	781a      	ldrb	r2, [r3, #0]
    9a94:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	4413      	add	r3, r2
    9aa0:	b2da      	uxtb	r2, r3
    9aa2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aaa:	701a      	strb	r2, [r3, #0]
    9aac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab4:	781a      	ldrb	r2, [r3, #0]
    9ab6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	4413      	add	r3, r2
    9ac2:	b2da      	uxtb	r2, r3
    9ac4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9acc:	701a      	strb	r2, [r3, #0]
    9ace:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	3301      	adds	r3, #1
    9ada:	b2da      	uxtb	r2, r3
    9adc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	701a      	strb	r2, [r3, #0]
    9ae6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	2bff      	cmp	r3, #255	; 0xff
    9af2:	d105      	bne.n	9b00 <send_desired+0x1dc>
    9af4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afc:	2200      	movs	r2, #0
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	461a      	mov	r2, r3
    9b0c:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b14:	7859      	ldrb	r1, [r3, #1]
    9b16:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1e:	5499      	strb	r1, [r3, r2]
    9b20:	4bd1      	ldr	r3, [pc, #836]	; (9e68 <send_desired+0x544>)
    9b22:	781a      	ldrb	r2, [r3, #0]
    9b24:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	4413      	add	r3, r2
    9b30:	b2da      	uxtb	r2, r3
    9b32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	701a      	strb	r2, [r3, #0]
    9b3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	781a      	ldrb	r2, [r3, #0]
    9b46:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b4e:	781b      	ldrb	r3, [r3, #0]
    9b50:	4413      	add	r3, r2
    9b52:	b2da      	uxtb	r2, r3
    9b54:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5c:	701a      	strb	r2, [r3, #0]
    9b5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	3301      	adds	r3, #1
    9b6a:	b2da      	uxtb	r2, r3
    9b6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b74:	701a      	strb	r2, [r3, #0]
    9b76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7e:	781b      	ldrb	r3, [r3, #0]
    9b80:	2bff      	cmp	r3, #255	; 0xff
    9b82:	d105      	bne.n	9b90 <send_desired+0x26c>
    9b84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8c:	2200      	movs	r2, #0
    9b8e:	701a      	strb	r2, [r3, #0]
    9b90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	461a      	mov	r2, r3
    9b9c:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba4:	7899      	ldrb	r1, [r3, #2]
    9ba6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bae:	5499      	strb	r1, [r3, r2]
    9bb0:	4bae      	ldr	r3, [pc, #696]	; (9e6c <send_desired+0x548>)
    9bb2:	781a      	ldrb	r2, [r3, #0]
    9bb4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	4413      	add	r3, r2
    9bc0:	b2da      	uxtb	r2, r3
    9bc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bca:	701a      	strb	r2, [r3, #0]
    9bcc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd4:	781a      	ldrb	r2, [r3, #0]
    9bd6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	4413      	add	r3, r2
    9be2:	b2da      	uxtb	r2, r3
    9be4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bec:	701a      	strb	r2, [r3, #0]
    9bee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	3301      	adds	r3, #1
    9bfa:	b2da      	uxtb	r2, r3
    9bfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c04:	701a      	strb	r2, [r3, #0]
    9c06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0e:	781b      	ldrb	r3, [r3, #0]
    9c10:	2bff      	cmp	r3, #255	; 0xff
    9c12:	d105      	bne.n	9c20 <send_desired+0x2fc>
    9c14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1c:	2200      	movs	r2, #0
    9c1e:	701a      	strb	r2, [r3, #0]
    9c20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c28:	781b      	ldrb	r3, [r3, #0]
    9c2a:	461a      	mov	r2, r3
    9c2c:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c34:	78d9      	ldrb	r1, [r3, #3]
    9c36:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3e:	5499      	strb	r1, [r3, r2]
    9c40:	4b8b      	ldr	r3, [pc, #556]	; (9e70 <send_desired+0x54c>)
    9c42:	781a      	ldrb	r2, [r3, #0]
    9c44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4c:	781b      	ldrb	r3, [r3, #0]
    9c4e:	4413      	add	r3, r2
    9c50:	b2da      	uxtb	r2, r3
    9c52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c5a:	701a      	strb	r2, [r3, #0]
    9c5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c64:	781a      	ldrb	r2, [r3, #0]
    9c66:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	4413      	add	r3, r2
    9c72:	b2da      	uxtb	r2, r3
    9c74:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7c:	701a      	strb	r2, [r3, #0]
    9c7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c86:	781b      	ldrb	r3, [r3, #0]
    9c88:	3301      	adds	r3, #1
    9c8a:	b2da      	uxtb	r2, r3
    9c8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c94:	701a      	strb	r2, [r3, #0]
    9c96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c9e:	781b      	ldrb	r3, [r3, #0]
    9ca0:	2bff      	cmp	r3, #255	; 0xff
    9ca2:	d105      	bne.n	9cb0 <send_desired+0x38c>
    9ca4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cac:	2200      	movs	r2, #0
    9cae:	701a      	strb	r2, [r3, #0]
    9cb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb8:	781b      	ldrb	r3, [r3, #0]
    9cba:	461a      	mov	r2, r3
    9cbc:	f24b 2300 	movw	r3, #45568	; 0xb200
    9cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc4:	7819      	ldrb	r1, [r3, #0]
    9cc6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cce:	5499      	strb	r1, [r3, r2]
    9cd0:	f24b 2300 	movw	r3, #45568	; 0xb200
    9cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd8:	781a      	ldrb	r2, [r3, #0]
    9cda:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce2:	781b      	ldrb	r3, [r3, #0]
    9ce4:	4413      	add	r3, r2
    9ce6:	b2da      	uxtb	r2, r3
    9ce8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf0:	701a      	strb	r2, [r3, #0]
    9cf2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfa:	781a      	ldrb	r2, [r3, #0]
    9cfc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d04:	781b      	ldrb	r3, [r3, #0]
    9d06:	4413      	add	r3, r2
    9d08:	b2da      	uxtb	r2, r3
    9d0a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d12:	701a      	strb	r2, [r3, #0]
    9d14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1c:	781b      	ldrb	r3, [r3, #0]
    9d1e:	3301      	adds	r3, #1
    9d20:	b2da      	uxtb	r2, r3
    9d22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2a:	701a      	strb	r2, [r3, #0]
    9d2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d34:	781b      	ldrb	r3, [r3, #0]
    9d36:	2bff      	cmp	r3, #255	; 0xff
    9d38:	d105      	bne.n	9d46 <send_desired+0x422>
    9d3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d42:	2200      	movs	r2, #0
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	461a      	mov	r2, r3
    9d52:	f24b 2300 	movw	r3, #45568	; 0xb200
    9d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d5a:	7859      	ldrb	r1, [r3, #1]
    9d5c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d64:	5499      	strb	r1, [r3, r2]
    9d66:	4b43      	ldr	r3, [pc, #268]	; (9e74 <send_desired+0x550>)
    9d68:	781a      	ldrb	r2, [r3, #0]
    9d6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	4413      	add	r3, r2
    9d76:	b2da      	uxtb	r2, r3
    9d78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d80:	701a      	strb	r2, [r3, #0]
    9d82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d8a:	781a      	ldrb	r2, [r3, #0]
    9d8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d94:	781b      	ldrb	r3, [r3, #0]
    9d96:	4413      	add	r3, r2
    9d98:	b2da      	uxtb	r2, r3
    9d9a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da2:	701a      	strb	r2, [r3, #0]
    9da4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	3301      	adds	r3, #1
    9db0:	b2da      	uxtb	r2, r3
    9db2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dba:	701a      	strb	r2, [r3, #0]
    9dbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	2bff      	cmp	r3, #255	; 0xff
    9dc8:	d105      	bne.n	9dd6 <send_desired+0x4b2>
    9dca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd2:	2200      	movs	r2, #0
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	461a      	mov	r2, r3
    9de2:	f24b 2300 	movw	r3, #45568	; 0xb200
    9de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dea:	7899      	ldrb	r1, [r3, #2]
    9dec:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df4:	5499      	strb	r1, [r3, r2]
    9df6:	4b20      	ldr	r3, [pc, #128]	; (9e78 <send_desired+0x554>)
    9df8:	781a      	ldrb	r2, [r3, #0]
    9dfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e02:	781b      	ldrb	r3, [r3, #0]
    9e04:	4413      	add	r3, r2
    9e06:	b2da      	uxtb	r2, r3
    9e08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e10:	701a      	strb	r2, [r3, #0]
    9e12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1a:	781a      	ldrb	r2, [r3, #0]
    9e1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e24:	781b      	ldrb	r3, [r3, #0]
    9e26:	4413      	add	r3, r2
    9e28:	b2da      	uxtb	r2, r3
    9e2a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e32:	701a      	strb	r2, [r3, #0]
    9e34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	3301      	adds	r3, #1
    9e40:	b2da      	uxtb	r2, r3
    9e42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4a:	701a      	strb	r2, [r3, #0]
    9e4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	2bff      	cmp	r3, #255	; 0xff
    9e58:	d110      	bne.n	9e7c <send_desired+0x558>
    9e5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e62:	2200      	movs	r2, #0
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	e009      	b.n	9e7c <send_desired+0x558>
    9e68:	2000b1fd 	.word	0x2000b1fd
    9e6c:	2000b1fe 	.word	0x2000b1fe
    9e70:	2000b1ff 	.word	0x2000b1ff
    9e74:	2000b201 	.word	0x2000b201
    9e78:	2000b202 	.word	0x2000b202
    9e7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	461a      	mov	r2, r3
    9e88:	f24b 2300 	movw	r3, #45568	; 0xb200
    9e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e90:	78d9      	ldrb	r1, [r3, #3]
    9e92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9a:	5499      	strb	r1, [r3, r2]
    9e9c:	4bd3      	ldr	r3, [pc, #844]	; (a1ec <send_desired+0x8c8>)
    9e9e:	781a      	ldrb	r2, [r3, #0]
    9ea0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea8:	781b      	ldrb	r3, [r3, #0]
    9eaa:	4413      	add	r3, r2
    9eac:	b2da      	uxtb	r2, r3
    9eae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb6:	701a      	strb	r2, [r3, #0]
    9eb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec0:	781a      	ldrb	r2, [r3, #0]
    9ec2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eca:	781b      	ldrb	r3, [r3, #0]
    9ecc:	4413      	add	r3, r2
    9ece:	b2da      	uxtb	r2, r3
    9ed0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ed8:	701a      	strb	r2, [r3, #0]
    9eda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee2:	781b      	ldrb	r3, [r3, #0]
    9ee4:	3301      	adds	r3, #1
    9ee6:	b2da      	uxtb	r2, r3
    9ee8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef0:	701a      	strb	r2, [r3, #0]
    9ef2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efa:	781b      	ldrb	r3, [r3, #0]
    9efc:	2bff      	cmp	r3, #255	; 0xff
    9efe:	d105      	bne.n	9f0c <send_desired+0x5e8>
    9f00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f08:	2200      	movs	r2, #0
    9f0a:	701a      	strb	r2, [r3, #0]
    9f0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f14:	781b      	ldrb	r3, [r3, #0]
    9f16:	461a      	mov	r2, r3
    9f18:	f24b 2348 	movw	r3, #45640	; 0xb248
    9f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f20:	7819      	ldrb	r1, [r3, #0]
    9f22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f2a:	5499      	strb	r1, [r3, r2]
    9f2c:	f24b 2348 	movw	r3, #45640	; 0xb248
    9f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f34:	781a      	ldrb	r2, [r3, #0]
    9f36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	4413      	add	r3, r2
    9f42:	b2da      	uxtb	r2, r3
    9f44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	781a      	ldrb	r2, [r3, #0]
    9f58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	4413      	add	r3, r2
    9f64:	b2da      	uxtb	r2, r3
    9f66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6e:	701a      	strb	r2, [r3, #0]
    9f70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	3301      	adds	r3, #1
    9f7c:	b2da      	uxtb	r2, r3
    9f7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	701a      	strb	r2, [r3, #0]
    9f88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	2bff      	cmp	r3, #255	; 0xff
    9f94:	d105      	bne.n	9fa2 <send_desired+0x67e>
    9f96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	2200      	movs	r2, #0
    9fa0:	701a      	strb	r2, [r3, #0]
    9fa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9faa:	781b      	ldrb	r3, [r3, #0]
    9fac:	461a      	mov	r2, r3
    9fae:	f24b 2348 	movw	r3, #45640	; 0xb248
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	7859      	ldrb	r1, [r3, #1]
    9fb8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc0:	5499      	strb	r1, [r3, r2]
    9fc2:	4b8b      	ldr	r3, [pc, #556]	; (a1f0 <send_desired+0x8cc>)
    9fc4:	781a      	ldrb	r2, [r3, #0]
    9fc6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	4413      	add	r3, r2
    9fd2:	b2da      	uxtb	r2, r3
    9fd4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fdc:	701a      	strb	r2, [r3, #0]
    9fde:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe6:	781a      	ldrb	r2, [r3, #0]
    9fe8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	4413      	add	r3, r2
    9ff4:	b2da      	uxtb	r2, r3
    9ff6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffe:	701a      	strb	r2, [r3, #0]
    a000:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	3301      	adds	r3, #1
    a00c:	b2da      	uxtb	r2, r3
    a00e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a016:	701a      	strb	r2, [r3, #0]
    a018:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a020:	781b      	ldrb	r3, [r3, #0]
    a022:	2bff      	cmp	r3, #255	; 0xff
    a024:	d105      	bne.n	a032 <send_desired+0x70e>
    a026:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02e:	2200      	movs	r2, #0
    a030:	701a      	strb	r2, [r3, #0]
    a032:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a03a:	781b      	ldrb	r3, [r3, #0]
    a03c:	461a      	mov	r2, r3
    a03e:	f24b 2348 	movw	r3, #45640	; 0xb248
    a042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a046:	7899      	ldrb	r1, [r3, #2]
    a048:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	5499      	strb	r1, [r3, r2]
    a052:	4b68      	ldr	r3, [pc, #416]	; (a1f4 <send_desired+0x8d0>)
    a054:	781a      	ldrb	r2, [r3, #0]
    a056:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	4413      	add	r3, r2
    a062:	b2da      	uxtb	r2, r3
    a064:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a06c:	701a      	strb	r2, [r3, #0]
    a06e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a076:	781a      	ldrb	r2, [r3, #0]
    a078:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	4413      	add	r3, r2
    a084:	b2da      	uxtb	r2, r3
    a086:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08e:	701a      	strb	r2, [r3, #0]
    a090:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	3301      	adds	r3, #1
    a09c:	b2da      	uxtb	r2, r3
    a09e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a6:	701a      	strb	r2, [r3, #0]
    a0a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b0:	781b      	ldrb	r3, [r3, #0]
    a0b2:	2bff      	cmp	r3, #255	; 0xff
    a0b4:	d105      	bne.n	a0c2 <send_desired+0x79e>
    a0b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0be:	2200      	movs	r2, #0
    a0c0:	701a      	strb	r2, [r3, #0]
    a0c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ca:	781b      	ldrb	r3, [r3, #0]
    a0cc:	461a      	mov	r2, r3
    a0ce:	f24b 2348 	movw	r3, #45640	; 0xb248
    a0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d6:	78d9      	ldrb	r1, [r3, #3]
    a0d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e0:	5499      	strb	r1, [r3, r2]
    a0e2:	4b45      	ldr	r3, [pc, #276]	; (a1f8 <send_desired+0x8d4>)
    a0e4:	781a      	ldrb	r2, [r3, #0]
    a0e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ee:	781b      	ldrb	r3, [r3, #0]
    a0f0:	4413      	add	r3, r2
    a0f2:	b2da      	uxtb	r2, r3
    a0f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0fc:	701a      	strb	r2, [r3, #0]
    a0fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a106:	781a      	ldrb	r2, [r3, #0]
    a108:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	4413      	add	r3, r2
    a114:	b2da      	uxtb	r2, r3
    a116:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11e:	701a      	strb	r2, [r3, #0]
    a120:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	781b      	ldrb	r3, [r3, #0]
    a12a:	3301      	adds	r3, #1
    a12c:	b2da      	uxtb	r2, r3
    a12e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a136:	701a      	strb	r2, [r3, #0]
    a138:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	2bff      	cmp	r3, #255	; 0xff
    a144:	d105      	bne.n	a152 <send_desired+0x82e>
    a146:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a14e:	2200      	movs	r2, #0
    a150:	701a      	strb	r2, [r3, #0]
    a152:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	461a      	mov	r2, r3
    a15e:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a166:	7819      	ldrb	r1, [r3, #0]
    a168:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a170:	5499      	strb	r1, [r3, r2]
    a172:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a17a:	781a      	ldrb	r2, [r3, #0]
    a17c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	4413      	add	r3, r2
    a188:	b2da      	uxtb	r2, r3
    a18a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a192:	701a      	strb	r2, [r3, #0]
    a194:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a19c:	781a      	ldrb	r2, [r3, #0]
    a19e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	4413      	add	r3, r2
    a1aa:	b2da      	uxtb	r2, r3
    a1ac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b4:	701a      	strb	r2, [r3, #0]
    a1b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1be:	781b      	ldrb	r3, [r3, #0]
    a1c0:	3301      	adds	r3, #1
    a1c2:	b2da      	uxtb	r2, r3
    a1c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1cc:	701a      	strb	r2, [r3, #0]
    a1ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	2bff      	cmp	r3, #255	; 0xff
    a1da:	d10f      	bne.n	a1fc <send_desired+0x8d8>
    a1dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e4:	2200      	movs	r2, #0
    a1e6:	701a      	strb	r2, [r3, #0]
    a1e8:	e008      	b.n	a1fc <send_desired+0x8d8>
    a1ea:	bf00      	nop
    a1ec:	2000b203 	.word	0x2000b203
    a1f0:	2000b249 	.word	0x2000b249
    a1f4:	2000b24a 	.word	0x2000b24a
    a1f8:	2000b24b 	.word	0x2000b24b
    a1fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a204:	781b      	ldrb	r3, [r3, #0]
    a206:	461a      	mov	r2, r3
    a208:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	7859      	ldrb	r1, [r3, #1]
    a212:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21a:	5499      	strb	r1, [r3, r2]
    a21c:	4bd1      	ldr	r3, [pc, #836]	; (a564 <send_desired+0xc40>)
    a21e:	781a      	ldrb	r2, [r3, #0]
    a220:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	4413      	add	r3, r2
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a240:	781a      	ldrb	r2, [r3, #0]
    a242:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	4413      	add	r3, r2
    a24e:	b2da      	uxtb	r2, r3
    a250:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a258:	701a      	strb	r2, [r3, #0]
    a25a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a262:	781b      	ldrb	r3, [r3, #0]
    a264:	3301      	adds	r3, #1
    a266:	b2da      	uxtb	r2, r3
    a268:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a270:	701a      	strb	r2, [r3, #0]
    a272:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27a:	781b      	ldrb	r3, [r3, #0]
    a27c:	2bff      	cmp	r3, #255	; 0xff
    a27e:	d105      	bne.n	a28c <send_desired+0x968>
    a280:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a288:	2200      	movs	r2, #0
    a28a:	701a      	strb	r2, [r3, #0]
    a28c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a294:	781b      	ldrb	r3, [r3, #0]
    a296:	461a      	mov	r2, r3
    a298:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a0:	7899      	ldrb	r1, [r3, #2]
    a2a2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2aa:	5499      	strb	r1, [r3, r2]
    a2ac:	4bae      	ldr	r3, [pc, #696]	; (a568 <send_desired+0xc44>)
    a2ae:	781a      	ldrb	r2, [r3, #0]
    a2b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	4413      	add	r3, r2
    a2bc:	b2da      	uxtb	r2, r3
    a2be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	701a      	strb	r2, [r3, #0]
    a2c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d0:	781a      	ldrb	r2, [r3, #0]
    a2d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2da:	781b      	ldrb	r3, [r3, #0]
    a2dc:	4413      	add	r3, r2
    a2de:	b2da      	uxtb	r2, r3
    a2e0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e8:	701a      	strb	r2, [r3, #0]
    a2ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	3301      	adds	r3, #1
    a2f6:	b2da      	uxtb	r2, r3
    a2f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a300:	701a      	strb	r2, [r3, #0]
    a302:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	2bff      	cmp	r3, #255	; 0xff
    a30e:	d105      	bne.n	a31c <send_desired+0x9f8>
    a310:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a318:	2200      	movs	r2, #0
    a31a:	701a      	strb	r2, [r3, #0]
    a31c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	461a      	mov	r2, r3
    a328:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a330:	78d9      	ldrb	r1, [r3, #3]
    a332:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33a:	5499      	strb	r1, [r3, r2]
    a33c:	4b8b      	ldr	r3, [pc, #556]	; (a56c <send_desired+0xc48>)
    a33e:	781a      	ldrb	r2, [r3, #0]
    a340:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	4413      	add	r3, r2
    a34c:	b2da      	uxtb	r2, r3
    a34e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a356:	701a      	strb	r2, [r3, #0]
    a358:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a360:	781a      	ldrb	r2, [r3, #0]
    a362:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36a:	781b      	ldrb	r3, [r3, #0]
    a36c:	4413      	add	r3, r2
    a36e:	b2da      	uxtb	r2, r3
    a370:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a378:	701a      	strb	r2, [r3, #0]
    a37a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a382:	781b      	ldrb	r3, [r3, #0]
    a384:	3301      	adds	r3, #1
    a386:	b2da      	uxtb	r2, r3
    a388:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a390:	701a      	strb	r2, [r3, #0]
    a392:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a39a:	781b      	ldrb	r3, [r3, #0]
    a39c:	2bff      	cmp	r3, #255	; 0xff
    a39e:	d105      	bne.n	a3ac <send_desired+0xa88>
    a3a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a8:	2200      	movs	r2, #0
    a3aa:	701a      	strb	r2, [r3, #0]
    a3ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	461a      	mov	r2, r3
    a3b8:	f240 4324 	movw	r3, #1060	; 0x424
    a3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c0:	7819      	ldrb	r1, [r3, #0]
    a3c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ca:	5499      	strb	r1, [r3, r2]
    a3cc:	f240 4324 	movw	r3, #1060	; 0x424
    a3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d4:	781a      	ldrb	r2, [r3, #0]
    a3d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3de:	781b      	ldrb	r3, [r3, #0]
    a3e0:	4413      	add	r3, r2
    a3e2:	b2da      	uxtb	r2, r3
    a3e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ec:	701a      	strb	r2, [r3, #0]
    a3ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f6:	781a      	ldrb	r2, [r3, #0]
    a3f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	4413      	add	r3, r2
    a404:	b2da      	uxtb	r2, r3
    a406:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a40e:	701a      	strb	r2, [r3, #0]
    a410:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a418:	781b      	ldrb	r3, [r3, #0]
    a41a:	3301      	adds	r3, #1
    a41c:	b2da      	uxtb	r2, r3
    a41e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a426:	701a      	strb	r2, [r3, #0]
    a428:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	2bff      	cmp	r3, #255	; 0xff
    a434:	d105      	bne.n	a442 <send_desired+0xb1e>
    a436:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43e:	2200      	movs	r2, #0
    a440:	701a      	strb	r2, [r3, #0]
    a442:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44a:	781b      	ldrb	r3, [r3, #0]
    a44c:	461a      	mov	r2, r3
    a44e:	f240 4324 	movw	r3, #1060	; 0x424
    a452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a456:	7859      	ldrb	r1, [r3, #1]
    a458:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a460:	5499      	strb	r1, [r3, r2]
    a462:	4b43      	ldr	r3, [pc, #268]	; (a570 <send_desired+0xc4c>)
    a464:	781a      	ldrb	r2, [r3, #0]
    a466:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a46e:	781b      	ldrb	r3, [r3, #0]
    a470:	4413      	add	r3, r2
    a472:	b2da      	uxtb	r2, r3
    a474:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a47c:	701a      	strb	r2, [r3, #0]
    a47e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a486:	781a      	ldrb	r2, [r3, #0]
    a488:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a490:	781b      	ldrb	r3, [r3, #0]
    a492:	4413      	add	r3, r2
    a494:	b2da      	uxtb	r2, r3
    a496:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a49e:	701a      	strb	r2, [r3, #0]
    a4a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a8:	781b      	ldrb	r3, [r3, #0]
    a4aa:	3301      	adds	r3, #1
    a4ac:	b2da      	uxtb	r2, r3
    a4ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b6:	701a      	strb	r2, [r3, #0]
    a4b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c0:	781b      	ldrb	r3, [r3, #0]
    a4c2:	2bff      	cmp	r3, #255	; 0xff
    a4c4:	d105      	bne.n	a4d2 <send_desired+0xbae>
    a4c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ce:	2200      	movs	r2, #0
    a4d0:	701a      	strb	r2, [r3, #0]
    a4d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4da:	781b      	ldrb	r3, [r3, #0]
    a4dc:	461a      	mov	r2, r3
    a4de:	f240 4324 	movw	r3, #1060	; 0x424
    a4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e6:	7899      	ldrb	r1, [r3, #2]
    a4e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f0:	5499      	strb	r1, [r3, r2]
    a4f2:	4b20      	ldr	r3, [pc, #128]	; (a574 <send_desired+0xc50>)
    a4f4:	781a      	ldrb	r2, [r3, #0]
    a4f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fe:	781b      	ldrb	r3, [r3, #0]
    a500:	4413      	add	r3, r2
    a502:	b2da      	uxtb	r2, r3
    a504:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a50c:	701a      	strb	r2, [r3, #0]
    a50e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a516:	781a      	ldrb	r2, [r3, #0]
    a518:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a520:	781b      	ldrb	r3, [r3, #0]
    a522:	4413      	add	r3, r2
    a524:	b2da      	uxtb	r2, r3
    a526:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a52e:	701a      	strb	r2, [r3, #0]
    a530:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	3301      	adds	r3, #1
    a53c:	b2da      	uxtb	r2, r3
    a53e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a546:	701a      	strb	r2, [r3, #0]
    a548:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	2bff      	cmp	r3, #255	; 0xff
    a554:	d110      	bne.n	a578 <send_desired+0xc54>
    a556:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a55e:	2200      	movs	r2, #0
    a560:	701a      	strb	r2, [r3, #0]
    a562:	e009      	b.n	a578 <send_desired+0xc54>
    a564:	2000b24d 	.word	0x2000b24d
    a568:	2000b24e 	.word	0x2000b24e
    a56c:	2000b24f 	.word	0x2000b24f
    a570:	20000425 	.word	0x20000425
    a574:	20000426 	.word	0x20000426
    a578:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a580:	781b      	ldrb	r3, [r3, #0]
    a582:	461a      	mov	r2, r3
    a584:	f240 4324 	movw	r3, #1060	; 0x424
    a588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58c:	78d9      	ldrb	r1, [r3, #3]
    a58e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a596:	5499      	strb	r1, [r3, r2]
    a598:	4b79      	ldr	r3, [pc, #484]	; (a780 <send_desired+0xe5c>)
    a59a:	781a      	ldrb	r2, [r3, #0]
    a59c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	4413      	add	r3, r2
    a5a8:	b2da      	uxtb	r2, r3
    a5aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b2:	701a      	strb	r2, [r3, #0]
    a5b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5bc:	781a      	ldrb	r2, [r3, #0]
    a5be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c6:	781b      	ldrb	r3, [r3, #0]
    a5c8:	4413      	add	r3, r2
    a5ca:	b2da      	uxtb	r2, r3
    a5cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d4:	701a      	strb	r2, [r3, #0]
    a5d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5de:	781b      	ldrb	r3, [r3, #0]
    a5e0:	3301      	adds	r3, #1
    a5e2:	b2da      	uxtb	r2, r3
    a5e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ec:	701a      	strb	r2, [r3, #0]
    a5ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f6:	781b      	ldrb	r3, [r3, #0]
    a5f8:	2bff      	cmp	r3, #255	; 0xff
    a5fa:	d105      	bne.n	a608 <send_desired+0xce4>
    a5fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a604:	2200      	movs	r2, #0
    a606:	701a      	strb	r2, [r3, #0]
    a608:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	461a      	mov	r2, r3
    a614:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a61c:	7819      	ldrb	r1, [r3, #0]
    a61e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a626:	5499      	strb	r1, [r3, r2]
    a628:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a630:	781b      	ldrb	r3, [r3, #0]
    a632:	3301      	adds	r3, #1
    a634:	b2da      	uxtb	r2, r3
    a636:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	2bff      	cmp	r3, #255	; 0xff
    a64c:	d105      	bne.n	a65a <send_desired+0xd36>
    a64e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a656:	2200      	movs	r2, #0
    a658:	701a      	strb	r2, [r3, #0]
    a65a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a662:	781b      	ldrb	r3, [r3, #0]
    a664:	461a      	mov	r2, r3
    a666:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a66e:	7819      	ldrb	r1, [r3, #0]
    a670:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a678:	5499      	strb	r1, [r3, r2]
    a67a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	3301      	adds	r3, #1
    a686:	b2da      	uxtb	r2, r3
    a688:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a690:	701a      	strb	r2, [r3, #0]
    a692:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	2bff      	cmp	r3, #255	; 0xff
    a69e:	d105      	bne.n	a6ac <send_desired+0xd88>
    a6a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a8:	2200      	movs	r2, #0
    a6aa:	701a      	strb	r2, [r3, #0]
    a6ac:	f242 0339 	movw	r3, #8249	; 0x2039
    a6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	b2db      	uxtb	r3, r3
    a6b8:	f003 0310 	and.w	r3, r3, #16
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d15a      	bne.n	a776 <send_desired+0xe52>
    a6c0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	b2db      	uxtb	r3, r3
    a6cc:	461a      	mov	r2, r3
    a6ce:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d6:	5c9a      	ldrb	r2, [r3, r2]
    a6d8:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    a6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e0:	701a      	strb	r2, [r3, #0]
    a6e2:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    a6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ea:	2200      	movs	r2, #0
    a6ec:	701a      	strb	r2, [r3, #0]
    a6ee:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	b2db      	uxtb	r3, r3
    a6fa:	3301      	adds	r3, #1
    a6fc:	b2da      	uxtb	r2, r3
    a6fe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a706:	701a      	strb	r2, [r3, #0]
    a708:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	b2db      	uxtb	r3, r3
    a714:	2bff      	cmp	r3, #255	; 0xff
    a716:	d105      	bne.n	a724 <send_desired+0xe00>
    a718:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a720:	2200      	movs	r2, #0
    a722:	701a      	strb	r2, [r3, #0]
    a724:	f242 0338 	movw	r3, #8248	; 0x2038
    a728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72c:	f242 0238 	movw	r2, #8248	; 0x2038
    a730:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a734:	7812      	ldrb	r2, [r2, #0]
    a736:	b2d2      	uxtb	r2, r2
    a738:	f042 0201 	orr.w	r2, r2, #1
    a73c:	b2d2      	uxtb	r2, r2
    a73e:	701a      	strb	r2, [r3, #0]
    a740:	f242 0339 	movw	r3, #8249	; 0x2039
    a744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a748:	f242 0239 	movw	r2, #8249	; 0x2039
    a74c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a750:	7812      	ldrb	r2, [r2, #0]
    a752:	b2d2      	uxtb	r2, r2
    a754:	f042 0210 	orr.w	r2, r2, #16
    a758:	b2d2      	uxtb	r2, r2
    a75a:	701a      	strb	r2, [r3, #0]
    a75c:	e00b      	b.n	a776 <send_desired+0xe52>
    a75e:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a766:	781b      	ldrb	r3, [r3, #0]
    a768:	3301      	adds	r3, #1
    a76a:	b2da      	uxtb	r2, r3
    a76c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a774:	701a      	strb	r2, [r3, #0]
}
    a776:	46bd      	mov	sp, r7
    a778:	f85d 7b04 	ldr.w	r7, [sp], #4
    a77c:	4770      	bx	lr
    a77e:	bf00      	nop
    a780:	20000427 	.word	0x20000427

0000a784 <send_bat>:
void send_bat(void){  //2000ms
    a784:	b480      	push	{r7}
    a786:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a788:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    a78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a790:	781a      	ldrb	r2, [r3, #0]
    a792:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a796:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a79a:	fba3 1302 	umull	r1, r3, r3, r2
    a79e:	0919      	lsrs	r1, r3, #4
    a7a0:	460b      	mov	r3, r1
    a7a2:	009b      	lsls	r3, r3, #2
    a7a4:	440b      	add	r3, r1
    a7a6:	009b      	lsls	r3, r3, #2
    a7a8:	1ad3      	subs	r3, r2, r3
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	2b08      	cmp	r3, #8
    a7ae:	f040 839a 	bne.w	aee6 <send_bat+0x762>
    a7b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ba:	781a      	ldrb	r2, [r3, #0]
    a7bc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c4:	781b      	ldrb	r3, [r3, #0]
    a7c6:	b2db      	uxtb	r3, r3
    a7c8:	429a      	cmp	r2, r3
    a7ca:	d313      	bcc.n	a7f4 <send_bat+0x70>
    a7cc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d4:	781b      	ldrb	r3, [r3, #0]
    a7d6:	b2db      	uxtb	r3, r3
    a7d8:	461a      	mov	r2, r3
    a7da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e2:	781b      	ldrb	r3, [r3, #0]
    a7e4:	1ad3      	subs	r3, r2, r3
    a7e6:	33ff      	adds	r3, #255	; 0xff
    a7e8:	2b0c      	cmp	r3, #12
    a7ea:	bfd4      	ite	le
    a7ec:	2300      	movle	r3, #0
    a7ee:	2301      	movgt	r3, #1
    a7f0:	b2db      	uxtb	r3, r3
    a7f2:	e011      	b.n	a818 <send_bat+0x94>
    a7f4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7fc:	781b      	ldrb	r3, [r3, #0]
    a7fe:	b2db      	uxtb	r3, r3
    a800:	461a      	mov	r2, r3
    a802:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80a:	781b      	ldrb	r3, [r3, #0]
    a80c:	1ad3      	subs	r3, r2, r3
    a80e:	2b0c      	cmp	r3, #12
    a810:	bfd4      	ite	le
    a812:	2300      	movle	r3, #0
    a814:	2301      	movgt	r3, #1
    a816:	b2db      	uxtb	r3, r3
    a818:	2b00      	cmp	r3, #0
    a81a:	f000 8358 	beq.w	aece <send_bat+0x74a>
    a81e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	461a      	mov	r2, r3
    a82a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a832:	2105      	movs	r1, #5
    a834:	5499      	strb	r1, [r3, r2]
    a836:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83e:	781b      	ldrb	r3, [r3, #0]
    a840:	3301      	adds	r3, #1
    a842:	b2da      	uxtb	r2, r3
    a844:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84c:	701a      	strb	r2, [r3, #0]
    a84e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	2bff      	cmp	r3, #255	; 0xff
    a85a:	d105      	bne.n	a868 <send_bat+0xe4>
    a85c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a864:	2200      	movs	r2, #0
    a866:	701a      	strb	r2, [r3, #0]
    a868:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	461a      	mov	r2, r3
    a874:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87c:	210c      	movs	r1, #12
    a87e:	5499      	strb	r1, [r3, r2]
    a880:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	3301      	adds	r3, #1
    a88c:	b2da      	uxtb	r2, r3
    a88e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a896:	701a      	strb	r2, [r3, #0]
    a898:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	2bff      	cmp	r3, #255	; 0xff
    a8a4:	d105      	bne.n	a8b2 <send_bat+0x12e>
    a8a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ae:	2200      	movs	r2, #0
    a8b0:	701a      	strb	r2, [r3, #0]
    a8b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ba:	220c      	movs	r2, #12
    a8bc:	701a      	strb	r2, [r3, #0]
    a8be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c6:	220c      	movs	r2, #12
    a8c8:	701a      	strb	r2, [r3, #0]
    a8ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	461a      	mov	r2, r3
    a8d6:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8de:	7819      	ldrb	r1, [r3, #0]
    a8e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e8:	5499      	strb	r1, [r3, r2]
    a8ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f2:	781a      	ldrb	r2, [r3, #0]
    a8f4:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8fc:	781b      	ldrb	r3, [r3, #0]
    a8fe:	4413      	add	r3, r2
    a900:	b2da      	uxtb	r2, r3
    a902:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90a:	701a      	strb	r2, [r3, #0]
    a90c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a914:	781a      	ldrb	r2, [r3, #0]
    a916:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91e:	781b      	ldrb	r3, [r3, #0]
    a920:	4413      	add	r3, r2
    a922:	b2da      	uxtb	r2, r3
    a924:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92c:	701a      	strb	r2, [r3, #0]
    a92e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a936:	781b      	ldrb	r3, [r3, #0]
    a938:	3301      	adds	r3, #1
    a93a:	b2da      	uxtb	r2, r3
    a93c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a944:	701a      	strb	r2, [r3, #0]
    a946:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a94e:	781b      	ldrb	r3, [r3, #0]
    a950:	2bff      	cmp	r3, #255	; 0xff
    a952:	d105      	bne.n	a960 <send_bat+0x1dc>
    a954:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95c:	2200      	movs	r2, #0
    a95e:	701a      	strb	r2, [r3, #0]
    a960:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	461a      	mov	r2, r3
    a96c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    a970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a974:	7819      	ldrb	r1, [r3, #0]
    a976:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a97e:	5499      	strb	r1, [r3, r2]
    a980:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    a984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a988:	781a      	ldrb	r2, [r3, #0]
    a98a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a992:	781b      	ldrb	r3, [r3, #0]
    a994:	4413      	add	r3, r2
    a996:	b2da      	uxtb	r2, r3
    a998:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a0:	701a      	strb	r2, [r3, #0]
    a9a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9aa:	781a      	ldrb	r2, [r3, #0]
    a9ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	4413      	add	r3, r2
    a9b8:	b2da      	uxtb	r2, r3
    a9ba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c2:	701a      	strb	r2, [r3, #0]
    a9c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9cc:	781b      	ldrb	r3, [r3, #0]
    a9ce:	3301      	adds	r3, #1
    a9d0:	b2da      	uxtb	r2, r3
    a9d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9da:	701a      	strb	r2, [r3, #0]
    a9dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	2bff      	cmp	r3, #255	; 0xff
    a9e8:	d105      	bne.n	a9f6 <send_bat+0x272>
    a9ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f2:	2200      	movs	r2, #0
    a9f4:	701a      	strb	r2, [r3, #0]
    a9f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fe:	781b      	ldrb	r3, [r3, #0]
    aa00:	461a      	mov	r2, r3
    aa02:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    aa06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa0a:	7859      	ldrb	r1, [r3, #1]
    aa0c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aa10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa14:	5499      	strb	r1, [r3, r2]
    aa16:	4bd5      	ldr	r3, [pc, #852]	; (ad6c <send_bat+0x5e8>)
    aa18:	781a      	ldrb	r2, [r3, #0]
    aa1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	4413      	add	r3, r2
    aa26:	b2da      	uxtb	r2, r3
    aa28:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa30:	701a      	strb	r2, [r3, #0]
    aa32:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3a:	781a      	ldrb	r2, [r3, #0]
    aa3c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa44:	781b      	ldrb	r3, [r3, #0]
    aa46:	4413      	add	r3, r2
    aa48:	b2da      	uxtb	r2, r3
    aa4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa52:	701a      	strb	r2, [r3, #0]
    aa54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5c:	781b      	ldrb	r3, [r3, #0]
    aa5e:	3301      	adds	r3, #1
    aa60:	b2da      	uxtb	r2, r3
    aa62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa6a:	701a      	strb	r2, [r3, #0]
    aa6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa74:	781b      	ldrb	r3, [r3, #0]
    aa76:	2bff      	cmp	r3, #255	; 0xff
    aa78:	d105      	bne.n	aa86 <send_bat+0x302>
    aa7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa82:	2200      	movs	r2, #0
    aa84:	701a      	strb	r2, [r3, #0]
    aa86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	461a      	mov	r2, r3
    aa92:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    aa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9a:	7819      	ldrb	r1, [r3, #0]
    aa9c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aaa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa4:	5499      	strb	r1, [r3, r2]
    aaa6:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    aaaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaae:	781a      	ldrb	r2, [r3, #0]
    aab0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab8:	781b      	ldrb	r3, [r3, #0]
    aaba:	4413      	add	r3, r2
    aabc:	b2da      	uxtb	r2, r3
    aabe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac6:	701a      	strb	r2, [r3, #0]
    aac8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad0:	781a      	ldrb	r2, [r3, #0]
    aad2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aada:	781b      	ldrb	r3, [r3, #0]
    aadc:	4413      	add	r3, r2
    aade:	b2da      	uxtb	r2, r3
    aae0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae8:	701a      	strb	r2, [r3, #0]
    aaea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf2:	781b      	ldrb	r3, [r3, #0]
    aaf4:	3301      	adds	r3, #1
    aaf6:	b2da      	uxtb	r2, r3
    aaf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab00:	701a      	strb	r2, [r3, #0]
    ab02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0a:	781b      	ldrb	r3, [r3, #0]
    ab0c:	2bff      	cmp	r3, #255	; 0xff
    ab0e:	d105      	bne.n	ab1c <send_bat+0x398>
    ab10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab18:	2200      	movs	r2, #0
    ab1a:	701a      	strb	r2, [r3, #0]
    ab1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	461a      	mov	r2, r3
    ab28:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ab2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab30:	7819      	ldrb	r1, [r3, #0]
    ab32:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ab36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab3a:	5499      	strb	r1, [r3, r2]
    ab3c:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ab40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab44:	781a      	ldrb	r2, [r3, #0]
    ab46:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	4413      	add	r3, r2
    ab52:	b2da      	uxtb	r2, r3
    ab54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5c:	701a      	strb	r2, [r3, #0]
    ab5e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab66:	781a      	ldrb	r2, [r3, #0]
    ab68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab70:	781b      	ldrb	r3, [r3, #0]
    ab72:	4413      	add	r3, r2
    ab74:	b2da      	uxtb	r2, r3
    ab76:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7e:	701a      	strb	r2, [r3, #0]
    ab80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	3301      	adds	r3, #1
    ab8c:	b2da      	uxtb	r2, r3
    ab8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab96:	701a      	strb	r2, [r3, #0]
    ab98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba0:	781b      	ldrb	r3, [r3, #0]
    aba2:	2bff      	cmp	r3, #255	; 0xff
    aba4:	d105      	bne.n	abb2 <send_bat+0x42e>
    aba6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
    abb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	461a      	mov	r2, r3
    abbe:	f24b 233e 	movw	r3, #45630	; 0xb23e
    abc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc6:	7859      	ldrb	r1, [r3, #1]
    abc8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    abcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd0:	5499      	strb	r1, [r3, r2]
    abd2:	4b67      	ldr	r3, [pc, #412]	; (ad70 <send_bat+0x5ec>)
    abd4:	781a      	ldrb	r2, [r3, #0]
    abd6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abde:	781b      	ldrb	r3, [r3, #0]
    abe0:	4413      	add	r3, r2
    abe2:	b2da      	uxtb	r2, r3
    abe4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abec:	701a      	strb	r2, [r3, #0]
    abee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    abf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf6:	781a      	ldrb	r2, [r3, #0]
    abf8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	4413      	add	r3, r2
    ac04:	b2da      	uxtb	r2, r3
    ac06:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac0e:	701a      	strb	r2, [r3, #0]
    ac10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac18:	781b      	ldrb	r3, [r3, #0]
    ac1a:	3301      	adds	r3, #1
    ac1c:	b2da      	uxtb	r2, r3
    ac1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac26:	701a      	strb	r2, [r3, #0]
    ac28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac30:	781b      	ldrb	r3, [r3, #0]
    ac32:	2bff      	cmp	r3, #255	; 0xff
    ac34:	d105      	bne.n	ac42 <send_bat+0x4be>
    ac36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac3e:	2200      	movs	r2, #0
    ac40:	701a      	strb	r2, [r3, #0]
    ac42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4a:	781b      	ldrb	r3, [r3, #0]
    ac4c:	461a      	mov	r2, r3
    ac4e:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ac52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac56:	7819      	ldrb	r1, [r3, #0]
    ac58:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ac5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac60:	5499      	strb	r1, [r3, r2]
    ac62:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ac66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac6a:	781a      	ldrb	r2, [r3, #0]
    ac6c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	4413      	add	r3, r2
    ac78:	b2da      	uxtb	r2, r3
    ac7a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac82:	701a      	strb	r2, [r3, #0]
    ac84:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8c:	781a      	ldrb	r2, [r3, #0]
    ac8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	4413      	add	r3, r2
    ac9a:	b2da      	uxtb	r2, r3
    ac9c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca4:	701a      	strb	r2, [r3, #0]
    aca6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acae:	781b      	ldrb	r3, [r3, #0]
    acb0:	3301      	adds	r3, #1
    acb2:	b2da      	uxtb	r2, r3
    acb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbc:	701a      	strb	r2, [r3, #0]
    acbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc6:	781b      	ldrb	r3, [r3, #0]
    acc8:	2bff      	cmp	r3, #255	; 0xff
    acca:	d105      	bne.n	acd8 <send_bat+0x554>
    accc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd4:	2200      	movs	r2, #0
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	461a      	mov	r2, r3
    ace4:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ace8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acec:	7859      	ldrb	r1, [r3, #1]
    acee:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    acf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf6:	5499      	strb	r1, [r3, r2]
    acf8:	4b1e      	ldr	r3, [pc, #120]	; (ad74 <send_bat+0x5f0>)
    acfa:	781a      	ldrb	r2, [r3, #0]
    acfc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	4413      	add	r3, r2
    ad08:	b2da      	uxtb	r2, r3
    ad0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad12:	701a      	strb	r2, [r3, #0]
    ad14:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad1c:	781a      	ldrb	r2, [r3, #0]
    ad1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	4413      	add	r3, r2
    ad2a:	b2da      	uxtb	r2, r3
    ad2c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad34:	701a      	strb	r2, [r3, #0]
    ad36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	3301      	adds	r3, #1
    ad42:	b2da      	uxtb	r2, r3
    ad44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad4c:	701a      	strb	r2, [r3, #0]
    ad4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	2bff      	cmp	r3, #255	; 0xff
    ad5a:	d10d      	bne.n	ad78 <send_bat+0x5f4>
    ad5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad64:	2200      	movs	r2, #0
    ad66:	701a      	strb	r2, [r3, #0]
    ad68:	e006      	b.n	ad78 <send_bat+0x5f4>
    ad6a:	bf00      	nop
    ad6c:	2000b4b5 	.word	0x2000b4b5
    ad70:	2000b23f 	.word	0x2000b23f
    ad74:	2000b23d 	.word	0x2000b23d
    ad78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	461a      	mov	r2, r3
    ad84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8c:	7819      	ldrb	r1, [r3, #0]
    ad8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ad92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad96:	5499      	strb	r1, [r3, r2]
    ad98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada0:	781b      	ldrb	r3, [r3, #0]
    ada2:	3301      	adds	r3, #1
    ada4:	b2da      	uxtb	r2, r3
    ada6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adae:	701a      	strb	r2, [r3, #0]
    adb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	2bff      	cmp	r3, #255	; 0xff
    adbc:	d105      	bne.n	adca <send_bat+0x646>
    adbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc6:	2200      	movs	r2, #0
    adc8:	701a      	strb	r2, [r3, #0]
    adca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	461a      	mov	r2, r3
    add6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    adda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adde:	7819      	ldrb	r1, [r3, #0]
    ade0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade8:	5499      	strb	r1, [r3, r2]
    adea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf2:	781b      	ldrb	r3, [r3, #0]
    adf4:	3301      	adds	r3, #1
    adf6:	b2da      	uxtb	r2, r3
    adf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae00:	701a      	strb	r2, [r3, #0]
    ae02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	2bff      	cmp	r3, #255	; 0xff
    ae0e:	d105      	bne.n	ae1c <send_bat+0x698>
    ae10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae18:	2200      	movs	r2, #0
    ae1a:	701a      	strb	r2, [r3, #0]
    ae1c:	f242 0339 	movw	r3, #8249	; 0x2039
    ae20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae24:	781b      	ldrb	r3, [r3, #0]
    ae26:	b2db      	uxtb	r3, r3
    ae28:	f003 0310 	and.w	r3, r3, #16
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d15a      	bne.n	aee6 <send_bat+0x762>
    ae30:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	b2db      	uxtb	r3, r3
    ae3c:	461a      	mov	r2, r3
    ae3e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ae42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae46:	5c9a      	ldrb	r2, [r3, r2]
    ae48:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    ae4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae50:	701a      	strb	r2, [r3, #0]
    ae52:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    ae56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5a:	2200      	movs	r2, #0
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	b2db      	uxtb	r3, r3
    ae6a:	3301      	adds	r3, #1
    ae6c:	b2da      	uxtb	r2, r3
    ae6e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae76:	701a      	strb	r2, [r3, #0]
    ae78:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	b2db      	uxtb	r3, r3
    ae84:	2bff      	cmp	r3, #255	; 0xff
    ae86:	d105      	bne.n	ae94 <send_bat+0x710>
    ae88:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae90:	2200      	movs	r2, #0
    ae92:	701a      	strb	r2, [r3, #0]
    ae94:	f242 0338 	movw	r3, #8248	; 0x2038
    ae98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9c:	f242 0238 	movw	r2, #8248	; 0x2038
    aea0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aea4:	7812      	ldrb	r2, [r2, #0]
    aea6:	b2d2      	uxtb	r2, r2
    aea8:	f042 0201 	orr.w	r2, r2, #1
    aeac:	b2d2      	uxtb	r2, r2
    aeae:	701a      	strb	r2, [r3, #0]
    aeb0:	f242 0339 	movw	r3, #8249	; 0x2039
    aeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb8:	f242 0239 	movw	r2, #8249	; 0x2039
    aebc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aec0:	7812      	ldrb	r2, [r2, #0]
    aec2:	b2d2      	uxtb	r2, r2
    aec4:	f042 0210 	orr.w	r2, r2, #16
    aec8:	b2d2      	uxtb	r2, r2
    aeca:	701a      	strb	r2, [r3, #0]
    aecc:	e00b      	b.n	aee6 <send_bat+0x762>
    aece:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    aed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	3301      	adds	r3, #1
    aeda:	b2da      	uxtb	r2, r3
    aedc:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    aee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee4:	701a      	strb	r2, [r3, #0]
}
    aee6:	46bd      	mov	sp, r7
    aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeec:	4770      	bx	lr
    aeee:	bf00      	nop

0000aef0 <send_climb>:
void send_climb(void){  //2000ms
    aef0:	b480      	push	{r7}
    aef2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    aef4:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    aef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefc:	781a      	ldrb	r2, [r3, #0]
    aefe:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    af02:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    af06:	fba3 1302 	umull	r1, r3, r3, r2
    af0a:	0919      	lsrs	r1, r3, #4
    af0c:	460b      	mov	r3, r1
    af0e:	009b      	lsls	r3, r3, #2
    af10:	440b      	add	r3, r1
    af12:	009b      	lsls	r3, r3, #2
    af14:	1ad3      	subs	r3, r2, r3
    af16:	b2db      	uxtb	r3, r3
    af18:	2b12      	cmp	r3, #18
    af1a:	f040 8554 	bne.w	b9c6 <send_climb+0xad6>
    af1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    af22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af26:	781a      	ldrb	r2, [r3, #0]
    af28:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af30:	781b      	ldrb	r3, [r3, #0]
    af32:	b2db      	uxtb	r3, r3
    af34:	429a      	cmp	r2, r3
    af36:	d313      	bcc.n	af60 <send_climb+0x70>
    af38:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	b2db      	uxtb	r3, r3
    af44:	461a      	mov	r2, r3
    af46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    af4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	1ad3      	subs	r3, r2, r3
    af52:	33ff      	adds	r3, #255	; 0xff
    af54:	2b12      	cmp	r3, #18
    af56:	bfd4      	ite	le
    af58:	2300      	movle	r3, #0
    af5a:	2301      	movgt	r3, #1
    af5c:	b2db      	uxtb	r3, r3
    af5e:	e011      	b.n	af84 <send_climb+0x94>
    af60:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af68:	781b      	ldrb	r3, [r3, #0]
    af6a:	b2db      	uxtb	r3, r3
    af6c:	461a      	mov	r2, r3
    af6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    af72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af76:	781b      	ldrb	r3, [r3, #0]
    af78:	1ad3      	subs	r3, r2, r3
    af7a:	2b12      	cmp	r3, #18
    af7c:	bfd4      	ite	le
    af7e:	2300      	movle	r3, #0
    af80:	2301      	movgt	r3, #1
    af82:	b2db      	uxtb	r3, r3
    af84:	2b00      	cmp	r3, #0
    af86:	f000 8512 	beq.w	b9ae <send_climb+0xabe>
    af8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    af8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af92:	781b      	ldrb	r3, [r3, #0]
    af94:	461a      	mov	r2, r3
    af96:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	2105      	movs	r1, #5
    afa0:	5499      	strb	r1, [r3, r2]
    afa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	3301      	adds	r3, #1
    afae:	b2da      	uxtb	r2, r3
    afb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb8:	701a      	strb	r2, [r3, #0]
    afba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc2:	781b      	ldrb	r3, [r3, #0]
    afc4:	2bff      	cmp	r3, #255	; 0xff
    afc6:	d105      	bne.n	afd4 <send_climb+0xe4>
    afc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd0:	2200      	movs	r2, #0
    afd2:	701a      	strb	r2, [r3, #0]
    afd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afdc:	781b      	ldrb	r3, [r3, #0]
    afde:	461a      	mov	r2, r3
    afe0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    afe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe8:	210e      	movs	r1, #14
    afea:	5499      	strb	r1, [r3, r2]
    afec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff4:	781b      	ldrb	r3, [r3, #0]
    aff6:	3301      	adds	r3, #1
    aff8:	b2da      	uxtb	r2, r3
    affa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    affe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b002:	701a      	strb	r2, [r3, #0]
    b004:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b00c:	781b      	ldrb	r3, [r3, #0]
    b00e:	2bff      	cmp	r3, #255	; 0xff
    b010:	d105      	bne.n	b01e <send_climb+0x12e>
    b012:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b01a:	2200      	movs	r2, #0
    b01c:	701a      	strb	r2, [r3, #0]
    b01e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b026:	220e      	movs	r2, #14
    b028:	701a      	strb	r2, [r3, #0]
    b02a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b032:	220e      	movs	r2, #14
    b034:	701a      	strb	r2, [r3, #0]
    b036:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b03e:	781b      	ldrb	r3, [r3, #0]
    b040:	461a      	mov	r2, r3
    b042:	f24b 2304 	movw	r3, #45572	; 0xb204
    b046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b04a:	7819      	ldrb	r1, [r3, #0]
    b04c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b054:	5499      	strb	r1, [r3, r2]
    b056:	f24b 2304 	movw	r3, #45572	; 0xb204
    b05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05e:	781a      	ldrb	r2, [r3, #0]
    b060:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	4413      	add	r3, r2
    b06c:	b2da      	uxtb	r2, r3
    b06e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b076:	701a      	strb	r2, [r3, #0]
    b078:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	781a      	ldrb	r2, [r3, #0]
    b082:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08a:	781b      	ldrb	r3, [r3, #0]
    b08c:	4413      	add	r3, r2
    b08e:	b2da      	uxtb	r2, r3
    b090:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b098:	701a      	strb	r2, [r3, #0]
    b09a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	3301      	adds	r3, #1
    b0a6:	b2da      	uxtb	r2, r3
    b0a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	701a      	strb	r2, [r3, #0]
    b0b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ba:	781b      	ldrb	r3, [r3, #0]
    b0bc:	2bff      	cmp	r3, #255	; 0xff
    b0be:	d105      	bne.n	b0cc <send_climb+0x1dc>
    b0c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c8:	2200      	movs	r2, #0
    b0ca:	701a      	strb	r2, [r3, #0]
    b0cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d4:	781b      	ldrb	r3, [r3, #0]
    b0d6:	461a      	mov	r2, r3
    b0d8:	f24b 2304 	movw	r3, #45572	; 0xb204
    b0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e0:	7859      	ldrb	r1, [r3, #1]
    b0e2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ea:	5499      	strb	r1, [r3, r2]
    b0ec:	4bd3      	ldr	r3, [pc, #844]	; (b43c <send_climb+0x54c>)
    b0ee:	781a      	ldrb	r2, [r3, #0]
    b0f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f8:	781b      	ldrb	r3, [r3, #0]
    b0fa:	4413      	add	r3, r2
    b0fc:	b2da      	uxtb	r2, r3
    b0fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b106:	701a      	strb	r2, [r3, #0]
    b108:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b110:	781a      	ldrb	r2, [r3, #0]
    b112:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	4413      	add	r3, r2
    b11e:	b2da      	uxtb	r2, r3
    b120:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b128:	701a      	strb	r2, [r3, #0]
    b12a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b132:	781b      	ldrb	r3, [r3, #0]
    b134:	3301      	adds	r3, #1
    b136:	b2da      	uxtb	r2, r3
    b138:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b140:	701a      	strb	r2, [r3, #0]
    b142:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14a:	781b      	ldrb	r3, [r3, #0]
    b14c:	2bff      	cmp	r3, #255	; 0xff
    b14e:	d105      	bne.n	b15c <send_climb+0x26c>
    b150:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b158:	2200      	movs	r2, #0
    b15a:	701a      	strb	r2, [r3, #0]
    b15c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b164:	781b      	ldrb	r3, [r3, #0]
    b166:	461a      	mov	r2, r3
    b168:	f24b 2318 	movw	r3, #45592	; 0xb218
    b16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b170:	7819      	ldrb	r1, [r3, #0]
    b172:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b17a:	5499      	strb	r1, [r3, r2]
    b17c:	f24b 2318 	movw	r3, #45592	; 0xb218
    b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b184:	781a      	ldrb	r2, [r3, #0]
    b186:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	4413      	add	r3, r2
    b192:	b2da      	uxtb	r2, r3
    b194:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	701a      	strb	r2, [r3, #0]
    b19e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a6:	781a      	ldrb	r2, [r3, #0]
    b1a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	4413      	add	r3, r2
    b1b4:	b2da      	uxtb	r2, r3
    b1b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1be:	701a      	strb	r2, [r3, #0]
    b1c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	3301      	adds	r3, #1
    b1cc:	b2da      	uxtb	r2, r3
    b1ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	701a      	strb	r2, [r3, #0]
    b1d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	2bff      	cmp	r3, #255	; 0xff
    b1e4:	d105      	bne.n	b1f2 <send_climb+0x302>
    b1e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ee:	2200      	movs	r2, #0
    b1f0:	701a      	strb	r2, [r3, #0]
    b1f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	461a      	mov	r2, r3
    b1fe:	f24b 2318 	movw	r3, #45592	; 0xb218
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	7859      	ldrb	r1, [r3, #1]
    b208:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b210:	5499      	strb	r1, [r3, r2]
    b212:	4b8b      	ldr	r3, [pc, #556]	; (b440 <send_climb+0x550>)
    b214:	781a      	ldrb	r2, [r3, #0]
    b216:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	4413      	add	r3, r2
    b222:	b2da      	uxtb	r2, r3
    b224:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b22c:	701a      	strb	r2, [r3, #0]
    b22e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b236:	781a      	ldrb	r2, [r3, #0]
    b238:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	4413      	add	r3, r2
    b244:	b2da      	uxtb	r2, r3
    b246:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24e:	701a      	strb	r2, [r3, #0]
    b250:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	3301      	adds	r3, #1
    b25c:	b2da      	uxtb	r2, r3
    b25e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b266:	701a      	strb	r2, [r3, #0]
    b268:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	2bff      	cmp	r3, #255	; 0xff
    b274:	d105      	bne.n	b282 <send_climb+0x392>
    b276:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27e:	2200      	movs	r2, #0
    b280:	701a      	strb	r2, [r3, #0]
    b282:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b28a:	781b      	ldrb	r3, [r3, #0]
    b28c:	461a      	mov	r2, r3
    b28e:	f24b 2318 	movw	r3, #45592	; 0xb218
    b292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b296:	7899      	ldrb	r1, [r3, #2]
    b298:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	5499      	strb	r1, [r3, r2]
    b2a2:	4b68      	ldr	r3, [pc, #416]	; (b444 <send_climb+0x554>)
    b2a4:	781a      	ldrb	r2, [r3, #0]
    b2a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ae:	781b      	ldrb	r3, [r3, #0]
    b2b0:	4413      	add	r3, r2
    b2b2:	b2da      	uxtb	r2, r3
    b2b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2bc:	701a      	strb	r2, [r3, #0]
    b2be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c6:	781a      	ldrb	r2, [r3, #0]
    b2c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d0:	781b      	ldrb	r3, [r3, #0]
    b2d2:	4413      	add	r3, r2
    b2d4:	b2da      	uxtb	r2, r3
    b2d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2de:	701a      	strb	r2, [r3, #0]
    b2e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	3301      	adds	r3, #1
    b2ec:	b2da      	uxtb	r2, r3
    b2ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f6:	701a      	strb	r2, [r3, #0]
    b2f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	2bff      	cmp	r3, #255	; 0xff
    b304:	d105      	bne.n	b312 <send_climb+0x422>
    b306:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30e:	2200      	movs	r2, #0
    b310:	701a      	strb	r2, [r3, #0]
    b312:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b31a:	781b      	ldrb	r3, [r3, #0]
    b31c:	461a      	mov	r2, r3
    b31e:	f24b 2318 	movw	r3, #45592	; 0xb218
    b322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b326:	78d9      	ldrb	r1, [r3, #3]
    b328:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b330:	5499      	strb	r1, [r3, r2]
    b332:	4b45      	ldr	r3, [pc, #276]	; (b448 <send_climb+0x558>)
    b334:	781a      	ldrb	r2, [r3, #0]
    b336:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33e:	781b      	ldrb	r3, [r3, #0]
    b340:	4413      	add	r3, r2
    b342:	b2da      	uxtb	r2, r3
    b344:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b34c:	701a      	strb	r2, [r3, #0]
    b34e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b356:	781a      	ldrb	r2, [r3, #0]
    b358:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b360:	781b      	ldrb	r3, [r3, #0]
    b362:	4413      	add	r3, r2
    b364:	b2da      	uxtb	r2, r3
    b366:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36e:	701a      	strb	r2, [r3, #0]
    b370:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	3301      	adds	r3, #1
    b37c:	b2da      	uxtb	r2, r3
    b37e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b386:	701a      	strb	r2, [r3, #0]
    b388:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	2bff      	cmp	r3, #255	; 0xff
    b394:	d105      	bne.n	b3a2 <send_climb+0x4b2>
    b396:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b39e:	2200      	movs	r2, #0
    b3a0:	701a      	strb	r2, [r3, #0]
    b3a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3aa:	781b      	ldrb	r3, [r3, #0]
    b3ac:	461a      	mov	r2, r3
    b3ae:	f24b 2320 	movw	r3, #45600	; 0xb220
    b3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b6:	7819      	ldrb	r1, [r3, #0]
    b3b8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c0:	5499      	strb	r1, [r3, r2]
    b3c2:	f24b 2320 	movw	r3, #45600	; 0xb220
    b3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ca:	781a      	ldrb	r2, [r3, #0]
    b3cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d4:	781b      	ldrb	r3, [r3, #0]
    b3d6:	4413      	add	r3, r2
    b3d8:	b2da      	uxtb	r2, r3
    b3da:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e2:	701a      	strb	r2, [r3, #0]
    b3e4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ec:	781a      	ldrb	r2, [r3, #0]
    b3ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f6:	781b      	ldrb	r3, [r3, #0]
    b3f8:	4413      	add	r3, r2
    b3fa:	b2da      	uxtb	r2, r3
    b3fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b404:	701a      	strb	r2, [r3, #0]
    b406:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b40e:	781b      	ldrb	r3, [r3, #0]
    b410:	3301      	adds	r3, #1
    b412:	b2da      	uxtb	r2, r3
    b414:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41c:	701a      	strb	r2, [r3, #0]
    b41e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b426:	781b      	ldrb	r3, [r3, #0]
    b428:	2bff      	cmp	r3, #255	; 0xff
    b42a:	d10f      	bne.n	b44c <send_climb+0x55c>
    b42c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b434:	2200      	movs	r2, #0
    b436:	701a      	strb	r2, [r3, #0]
    b438:	e008      	b.n	b44c <send_climb+0x55c>
    b43a:	bf00      	nop
    b43c:	2000b205 	.word	0x2000b205
    b440:	2000b219 	.word	0x2000b219
    b444:	2000b21a 	.word	0x2000b21a
    b448:	2000b21b 	.word	0x2000b21b
    b44c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	461a      	mov	r2, r3
    b458:	f24b 2320 	movw	r3, #45600	; 0xb220
    b45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b460:	7859      	ldrb	r1, [r3, #1]
    b462:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46a:	5499      	strb	r1, [r3, r2]
    b46c:	4bd1      	ldr	r3, [pc, #836]	; (b7b4 <send_climb+0x8c4>)
    b46e:	781a      	ldrb	r2, [r3, #0]
    b470:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	4413      	add	r3, r2
    b47c:	b2da      	uxtb	r2, r3
    b47e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b486:	701a      	strb	r2, [r3, #0]
    b488:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b490:	781a      	ldrb	r2, [r3, #0]
    b492:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49a:	781b      	ldrb	r3, [r3, #0]
    b49c:	4413      	add	r3, r2
    b49e:	b2da      	uxtb	r2, r3
    b4a0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a8:	701a      	strb	r2, [r3, #0]
    b4aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	3301      	adds	r3, #1
    b4b6:	b2da      	uxtb	r2, r3
    b4b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	701a      	strb	r2, [r3, #0]
    b4c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	2bff      	cmp	r3, #255	; 0xff
    b4ce:	d105      	bne.n	b4dc <send_climb+0x5ec>
    b4d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d8:	2200      	movs	r2, #0
    b4da:	701a      	strb	r2, [r3, #0]
    b4dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	461a      	mov	r2, r3
    b4e8:	f24b 2320 	movw	r3, #45600	; 0xb220
    b4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f0:	7899      	ldrb	r1, [r3, #2]
    b4f2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fa:	5499      	strb	r1, [r3, r2]
    b4fc:	4bae      	ldr	r3, [pc, #696]	; (b7b8 <send_climb+0x8c8>)
    b4fe:	781a      	ldrb	r2, [r3, #0]
    b500:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	4413      	add	r3, r2
    b50c:	b2da      	uxtb	r2, r3
    b50e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b516:	701a      	strb	r2, [r3, #0]
    b518:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b520:	781a      	ldrb	r2, [r3, #0]
    b522:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	4413      	add	r3, r2
    b52e:	b2da      	uxtb	r2, r3
    b530:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b538:	701a      	strb	r2, [r3, #0]
    b53a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	3301      	adds	r3, #1
    b546:	b2da      	uxtb	r2, r3
    b548:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b550:	701a      	strb	r2, [r3, #0]
    b552:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b55a:	781b      	ldrb	r3, [r3, #0]
    b55c:	2bff      	cmp	r3, #255	; 0xff
    b55e:	d105      	bne.n	b56c <send_climb+0x67c>
    b560:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b568:	2200      	movs	r2, #0
    b56a:	701a      	strb	r2, [r3, #0]
    b56c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b574:	781b      	ldrb	r3, [r3, #0]
    b576:	461a      	mov	r2, r3
    b578:	f24b 2320 	movw	r3, #45600	; 0xb220
    b57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b580:	78d9      	ldrb	r1, [r3, #3]
    b582:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58a:	5499      	strb	r1, [r3, r2]
    b58c:	4b8b      	ldr	r3, [pc, #556]	; (b7bc <send_climb+0x8cc>)
    b58e:	781a      	ldrb	r2, [r3, #0]
    b590:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	4413      	add	r3, r2
    b59c:	b2da      	uxtb	r2, r3
    b59e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a6:	701a      	strb	r2, [r3, #0]
    b5a8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b0:	781a      	ldrb	r2, [r3, #0]
    b5b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ba:	781b      	ldrb	r3, [r3, #0]
    b5bc:	4413      	add	r3, r2
    b5be:	b2da      	uxtb	r2, r3
    b5c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c8:	701a      	strb	r2, [r3, #0]
    b5ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d2:	781b      	ldrb	r3, [r3, #0]
    b5d4:	3301      	adds	r3, #1
    b5d6:	b2da      	uxtb	r2, r3
    b5d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e0:	701a      	strb	r2, [r3, #0]
    b5e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ea:	781b      	ldrb	r3, [r3, #0]
    b5ec:	2bff      	cmp	r3, #255	; 0xff
    b5ee:	d105      	bne.n	b5fc <send_climb+0x70c>
    b5f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f8:	2200      	movs	r2, #0
    b5fa:	701a      	strb	r2, [r3, #0]
    b5fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b604:	781b      	ldrb	r3, [r3, #0]
    b606:	461a      	mov	r2, r3
    b608:	f248 73a0 	movw	r3, #34720	; 0x87a0
    b60c:	f2c0 0301 	movt	r3, #1
    b610:	7819      	ldrb	r1, [r3, #0]
    b612:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61a:	5499      	strb	r1, [r3, r2]
    b61c:	f248 73a0 	movw	r3, #34720	; 0x87a0
    b620:	f2c0 0301 	movt	r3, #1
    b624:	781a      	ldrb	r2, [r3, #0]
    b626:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b62e:	781b      	ldrb	r3, [r3, #0]
    b630:	4413      	add	r3, r2
    b632:	b2da      	uxtb	r2, r3
    b634:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63c:	701a      	strb	r2, [r3, #0]
    b63e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b646:	781a      	ldrb	r2, [r3, #0]
    b648:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b650:	781b      	ldrb	r3, [r3, #0]
    b652:	4413      	add	r3, r2
    b654:	b2da      	uxtb	r2, r3
    b656:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b65e:	701a      	strb	r2, [r3, #0]
    b660:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	3301      	adds	r3, #1
    b66c:	b2da      	uxtb	r2, r3
    b66e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b676:	701a      	strb	r2, [r3, #0]
    b678:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	2bff      	cmp	r3, #255	; 0xff
    b684:	d105      	bne.n	b692 <send_climb+0x7a2>
    b686:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b68e:	2200      	movs	r2, #0
    b690:	701a      	strb	r2, [r3, #0]
    b692:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	461a      	mov	r2, r3
    b69e:	f248 73a0 	movw	r3, #34720	; 0x87a0
    b6a2:	f2c0 0301 	movt	r3, #1
    b6a6:	7859      	ldrb	r1, [r3, #1]
    b6a8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b0:	5499      	strb	r1, [r3, r2]
    b6b2:	4b43      	ldr	r3, [pc, #268]	; (b7c0 <send_climb+0x8d0>)
    b6b4:	781a      	ldrb	r2, [r3, #0]
    b6b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6be:	781b      	ldrb	r3, [r3, #0]
    b6c0:	4413      	add	r3, r2
    b6c2:	b2da      	uxtb	r2, r3
    b6c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6cc:	701a      	strb	r2, [r3, #0]
    b6ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d6:	781a      	ldrb	r2, [r3, #0]
    b6d8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	4413      	add	r3, r2
    b6e4:	b2da      	uxtb	r2, r3
    b6e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ee:	701a      	strb	r2, [r3, #0]
    b6f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	3301      	adds	r3, #1
    b6fc:	b2da      	uxtb	r2, r3
    b6fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b706:	701a      	strb	r2, [r3, #0]
    b708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	2bff      	cmp	r3, #255	; 0xff
    b714:	d105      	bne.n	b722 <send_climb+0x832>
    b716:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b71e:	2200      	movs	r2, #0
    b720:	701a      	strb	r2, [r3, #0]
    b722:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b72a:	781b      	ldrb	r3, [r3, #0]
    b72c:	461a      	mov	r2, r3
    b72e:	f248 73a0 	movw	r3, #34720	; 0x87a0
    b732:	f2c0 0301 	movt	r3, #1
    b736:	7899      	ldrb	r1, [r3, #2]
    b738:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b740:	5499      	strb	r1, [r3, r2]
    b742:	4b20      	ldr	r3, [pc, #128]	; (b7c4 <send_climb+0x8d4>)
    b744:	781a      	ldrb	r2, [r3, #0]
    b746:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b74e:	781b      	ldrb	r3, [r3, #0]
    b750:	4413      	add	r3, r2
    b752:	b2da      	uxtb	r2, r3
    b754:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b75c:	701a      	strb	r2, [r3, #0]
    b75e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b766:	781a      	ldrb	r2, [r3, #0]
    b768:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	4413      	add	r3, r2
    b774:	b2da      	uxtb	r2, r3
    b776:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b77e:	701a      	strb	r2, [r3, #0]
    b780:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	3301      	adds	r3, #1
    b78c:	b2da      	uxtb	r2, r3
    b78e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b796:	701a      	strb	r2, [r3, #0]
    b798:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a0:	781b      	ldrb	r3, [r3, #0]
    b7a2:	2bff      	cmp	r3, #255	; 0xff
    b7a4:	d110      	bne.n	b7c8 <send_climb+0x8d8>
    b7a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ae:	2200      	movs	r2, #0
    b7b0:	701a      	strb	r2, [r3, #0]
    b7b2:	e009      	b.n	b7c8 <send_climb+0x8d8>
    b7b4:	2000b221 	.word	0x2000b221
    b7b8:	2000b222 	.word	0x2000b222
    b7bc:	2000b223 	.word	0x2000b223
    b7c0:	000187a1 	.word	0x000187a1
    b7c4:	000187a2 	.word	0x000187a2
    b7c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d0:	781b      	ldrb	r3, [r3, #0]
    b7d2:	461a      	mov	r2, r3
    b7d4:	f248 73a0 	movw	r3, #34720	; 0x87a0
    b7d8:	f2c0 0301 	movt	r3, #1
    b7dc:	78d9      	ldrb	r1, [r3, #3]
    b7de:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e6:	5499      	strb	r1, [r3, r2]
    b7e8:	4b79      	ldr	r3, [pc, #484]	; (b9d0 <send_climb+0xae0>)
    b7ea:	781a      	ldrb	r2, [r3, #0]
    b7ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	4413      	add	r3, r2
    b7f8:	b2da      	uxtb	r2, r3
    b7fa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b802:	701a      	strb	r2, [r3, #0]
    b804:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b80c:	781a      	ldrb	r2, [r3, #0]
    b80e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b816:	781b      	ldrb	r3, [r3, #0]
    b818:	4413      	add	r3, r2
    b81a:	b2da      	uxtb	r2, r3
    b81c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b824:	701a      	strb	r2, [r3, #0]
    b826:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b82e:	781b      	ldrb	r3, [r3, #0]
    b830:	3301      	adds	r3, #1
    b832:	b2da      	uxtb	r2, r3
    b834:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b83c:	701a      	strb	r2, [r3, #0]
    b83e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	2bff      	cmp	r3, #255	; 0xff
    b84a:	d105      	bne.n	b858 <send_climb+0x968>
    b84c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b854:	2200      	movs	r2, #0
    b856:	701a      	strb	r2, [r3, #0]
    b858:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	461a      	mov	r2, r3
    b864:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86c:	7819      	ldrb	r1, [r3, #0]
    b86e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b876:	5499      	strb	r1, [r3, r2]
    b878:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b880:	781b      	ldrb	r3, [r3, #0]
    b882:	3301      	adds	r3, #1
    b884:	b2da      	uxtb	r2, r3
    b886:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b88e:	701a      	strb	r2, [r3, #0]
    b890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	2bff      	cmp	r3, #255	; 0xff
    b89c:	d105      	bne.n	b8aa <send_climb+0x9ba>
    b89e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a6:	2200      	movs	r2, #0
    b8a8:	701a      	strb	r2, [r3, #0]
    b8aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	461a      	mov	r2, r3
    b8b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8be:	7819      	ldrb	r1, [r3, #0]
    b8c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c8:	5499      	strb	r1, [r3, r2]
    b8ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	3301      	adds	r3, #1
    b8d6:	b2da      	uxtb	r2, r3
    b8d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e0:	701a      	strb	r2, [r3, #0]
    b8e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ea:	781b      	ldrb	r3, [r3, #0]
    b8ec:	2bff      	cmp	r3, #255	; 0xff
    b8ee:	d105      	bne.n	b8fc <send_climb+0xa0c>
    b8f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f8:	2200      	movs	r2, #0
    b8fa:	701a      	strb	r2, [r3, #0]
    b8fc:	f242 0339 	movw	r3, #8249	; 0x2039
    b900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	b2db      	uxtb	r3, r3
    b908:	f003 0310 	and.w	r3, r3, #16
    b90c:	2b00      	cmp	r3, #0
    b90e:	d15a      	bne.n	b9c6 <send_climb+0xad6>
    b910:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	b2db      	uxtb	r3, r3
    b91c:	461a      	mov	r2, r3
    b91e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b926:	5c9a      	ldrb	r2, [r3, r2]
    b928:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    b92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b930:	701a      	strb	r2, [r3, #0]
    b932:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    b936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93a:	2200      	movs	r2, #0
    b93c:	701a      	strb	r2, [r3, #0]
    b93e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b946:	781b      	ldrb	r3, [r3, #0]
    b948:	b2db      	uxtb	r3, r3
    b94a:	3301      	adds	r3, #1
    b94c:	b2da      	uxtb	r2, r3
    b94e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b956:	701a      	strb	r2, [r3, #0]
    b958:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	b2db      	uxtb	r3, r3
    b964:	2bff      	cmp	r3, #255	; 0xff
    b966:	d105      	bne.n	b974 <send_climb+0xa84>
    b968:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b970:	2200      	movs	r2, #0
    b972:	701a      	strb	r2, [r3, #0]
    b974:	f242 0338 	movw	r3, #8248	; 0x2038
    b978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b97c:	f242 0238 	movw	r2, #8248	; 0x2038
    b980:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b984:	7812      	ldrb	r2, [r2, #0]
    b986:	b2d2      	uxtb	r2, r2
    b988:	f042 0201 	orr.w	r2, r2, #1
    b98c:	b2d2      	uxtb	r2, r2
    b98e:	701a      	strb	r2, [r3, #0]
    b990:	f242 0339 	movw	r3, #8249	; 0x2039
    b994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b998:	f242 0239 	movw	r2, #8249	; 0x2039
    b99c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9a0:	7812      	ldrb	r2, [r2, #0]
    b9a2:	b2d2      	uxtb	r2, r2
    b9a4:	f042 0210 	orr.w	r2, r2, #16
    b9a8:	b2d2      	uxtb	r2, r2
    b9aa:	701a      	strb	r2, [r3, #0]
    b9ac:	e00b      	b.n	b9c6 <send_climb+0xad6>
    b9ae:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    b9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b6:	781b      	ldrb	r3, [r3, #0]
    b9b8:	3301      	adds	r3, #1
    b9ba:	b2da      	uxtb	r2, r3
    b9bc:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    b9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c4:	701a      	strb	r2, [r3, #0]
}
    b9c6:	46bd      	mov	sp, r7
    b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9cc:	4770      	bx	lr
    b9ce:	bf00      	nop
    b9d0:	000187a3 	.word	0x000187a3

0000b9d4 <send_mode>:
void send_mode(void){  //5000ms
    b9d4:	b480      	push	{r7}
    b9d6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b9d8:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    b9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e0:	781a      	ldrb	r2, [r3, #0]
    b9e2:	f248 531f 	movw	r3, #34079	; 0x851f
    b9e6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b9ea:	fba3 1302 	umull	r1, r3, r3, r2
    b9ee:	091b      	lsrs	r3, r3, #4
    b9f0:	2132      	movs	r1, #50	; 0x32
    b9f2:	fb01 f303 	mul.w	r3, r1, r3
    b9f6:	1ad3      	subs	r3, r2, r3
    b9f8:	b2db      	uxtb	r3, r3
    b9fa:	2b09      	cmp	r3, #9
    b9fc:	f040 82ba 	bne.w	bf74 <send_mode+0x5a0>
    ba00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba08:	781a      	ldrb	r2, [r3, #0]
    ba0a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba12:	781b      	ldrb	r3, [r3, #0]
    ba14:	b2db      	uxtb	r3, r3
    ba16:	429a      	cmp	r2, r3
    ba18:	d313      	bcc.n	ba42 <send_mode+0x6e>
    ba1a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba22:	781b      	ldrb	r3, [r3, #0]
    ba24:	b2db      	uxtb	r3, r3
    ba26:	461a      	mov	r2, r3
    ba28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	1ad3      	subs	r3, r2, r3
    ba34:	33ff      	adds	r3, #255	; 0xff
    ba36:	2b09      	cmp	r3, #9
    ba38:	bfd4      	ite	le
    ba3a:	2300      	movle	r3, #0
    ba3c:	2301      	movgt	r3, #1
    ba3e:	b2db      	uxtb	r3, r3
    ba40:	e011      	b.n	ba66 <send_mode+0x92>
    ba42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba4a:	781b      	ldrb	r3, [r3, #0]
    ba4c:	b2db      	uxtb	r3, r3
    ba4e:	461a      	mov	r2, r3
    ba50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	1ad3      	subs	r3, r2, r3
    ba5c:	2b09      	cmp	r3, #9
    ba5e:	bfd4      	ite	le
    ba60:	2300      	movle	r3, #0
    ba62:	2301      	movgt	r3, #1
    ba64:	b2db      	uxtb	r3, r3
    ba66:	2b00      	cmp	r3, #0
    ba68:	f000 8278 	beq.w	bf5c <send_mode+0x588>
    ba6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	461a      	mov	r2, r3
    ba78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ba7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba80:	2105      	movs	r1, #5
    ba82:	5499      	strb	r1, [r3, r2]
    ba84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	3301      	adds	r3, #1
    ba90:	b2da      	uxtb	r2, r3
    ba92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa4:	781b      	ldrb	r3, [r3, #0]
    baa6:	2bff      	cmp	r3, #255	; 0xff
    baa8:	d105      	bne.n	bab6 <send_mode+0xe2>
    baaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab2:	2200      	movs	r2, #0
    bab4:	701a      	strb	r2, [r3, #0]
    bab6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    babe:	781b      	ldrb	r3, [r3, #0]
    bac0:	461a      	mov	r2, r3
    bac2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baca:	210b      	movs	r1, #11
    bacc:	5499      	strb	r1, [r3, r2]
    bace:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad6:	781b      	ldrb	r3, [r3, #0]
    bad8:	3301      	adds	r3, #1
    bada:	b2da      	uxtb	r2, r3
    badc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae4:	701a      	strb	r2, [r3, #0]
    bae6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baee:	781b      	ldrb	r3, [r3, #0]
    baf0:	2bff      	cmp	r3, #255	; 0xff
    baf2:	d105      	bne.n	bb00 <send_mode+0x12c>
    baf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafc:	2200      	movs	r2, #0
    bafe:	701a      	strb	r2, [r3, #0]
    bb00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb08:	220b      	movs	r2, #11
    bb0a:	701a      	strb	r2, [r3, #0]
    bb0c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb14:	220b      	movs	r2, #11
    bb16:	701a      	strb	r2, [r3, #0]
    bb18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	461a      	mov	r2, r3
    bb24:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb2c:	7819      	ldrb	r1, [r3, #0]
    bb2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb36:	5499      	strb	r1, [r3, r2]
    bb38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb40:	781a      	ldrb	r2, [r3, #0]
    bb42:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bb46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	4413      	add	r3, r2
    bb4e:	b2da      	uxtb	r2, r3
    bb50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb58:	701a      	strb	r2, [r3, #0]
    bb5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb62:	781a      	ldrb	r2, [r3, #0]
    bb64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	4413      	add	r3, r2
    bb70:	b2da      	uxtb	r2, r3
    bb72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7a:	701a      	strb	r2, [r3, #0]
    bb7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	3301      	adds	r3, #1
    bb88:	b2da      	uxtb	r2, r3
    bb8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb92:	701a      	strb	r2, [r3, #0]
    bb94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	2bff      	cmp	r3, #255	; 0xff
    bba0:	d105      	bne.n	bbae <send_mode+0x1da>
    bba2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbaa:	2200      	movs	r2, #0
    bbac:	701a      	strb	r2, [r3, #0]
    bbae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb6:	781b      	ldrb	r3, [r3, #0]
    bbb8:	461a      	mov	r2, r3
    bbba:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc2:	7819      	ldrb	r1, [r3, #0]
    bbc4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbcc:	5499      	strb	r1, [r3, r2]
    bbce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd6:	781a      	ldrb	r2, [r3, #0]
    bbd8:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	4413      	add	r3, r2
    bbe4:	b2da      	uxtb	r2, r3
    bbe6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbee:	701a      	strb	r2, [r3, #0]
    bbf0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bbf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf8:	781a      	ldrb	r2, [r3, #0]
    bbfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	4413      	add	r3, r2
    bc06:	b2da      	uxtb	r2, r3
    bc08:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc10:	701a      	strb	r2, [r3, #0]
    bc12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1a:	781b      	ldrb	r3, [r3, #0]
    bc1c:	3301      	adds	r3, #1
    bc1e:	b2da      	uxtb	r2, r3
    bc20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc28:	701a      	strb	r2, [r3, #0]
    bc2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	2bff      	cmp	r3, #255	; 0xff
    bc36:	d105      	bne.n	bc44 <send_mode+0x270>
    bc38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc40:	2200      	movs	r2, #0
    bc42:	701a      	strb	r2, [r3, #0]
    bc44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	461a      	mov	r2, r3
    bc50:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc58:	7819      	ldrb	r1, [r3, #0]
    bc5a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc62:	5499      	strb	r1, [r3, r2]
    bc64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6c:	781a      	ldrb	r2, [r3, #0]
    bc6e:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	4413      	add	r3, r2
    bc7a:	b2da      	uxtb	r2, r3
    bc7c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc84:	701a      	strb	r2, [r3, #0]
    bc86:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8e:	781a      	ldrb	r2, [r3, #0]
    bc90:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc98:	781b      	ldrb	r3, [r3, #0]
    bc9a:	4413      	add	r3, r2
    bc9c:	b2da      	uxtb	r2, r3
    bc9e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca6:	701a      	strb	r2, [r3, #0]
    bca8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb0:	781b      	ldrb	r3, [r3, #0]
    bcb2:	3301      	adds	r3, #1
    bcb4:	b2da      	uxtb	r2, r3
    bcb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc8:	781b      	ldrb	r3, [r3, #0]
    bcca:	2bff      	cmp	r3, #255	; 0xff
    bccc:	d105      	bne.n	bcda <send_mode+0x306>
    bcce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd6:	2200      	movs	r2, #0
    bcd8:	701a      	strb	r2, [r3, #0]
    bcda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	461a      	mov	r2, r3
    bce6:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bcea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcee:	7819      	ldrb	r1, [r3, #0]
    bcf0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf8:	5499      	strb	r1, [r3, r2]
    bcfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd02:	781a      	ldrb	r2, [r3, #0]
    bd04:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0c:	781b      	ldrb	r3, [r3, #0]
    bd0e:	4413      	add	r3, r2
    bd10:	b2da      	uxtb	r2, r3
    bd12:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd1a:	701a      	strb	r2, [r3, #0]
    bd1c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd24:	781a      	ldrb	r2, [r3, #0]
    bd26:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd2e:	781b      	ldrb	r3, [r3, #0]
    bd30:	4413      	add	r3, r2
    bd32:	b2da      	uxtb	r2, r3
    bd34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3c:	701a      	strb	r2, [r3, #0]
    bd3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd46:	781b      	ldrb	r3, [r3, #0]
    bd48:	3301      	adds	r3, #1
    bd4a:	b2da      	uxtb	r2, r3
    bd4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd54:	701a      	strb	r2, [r3, #0]
    bd56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd5e:	781b      	ldrb	r3, [r3, #0]
    bd60:	2bff      	cmp	r3, #255	; 0xff
    bd62:	d105      	bne.n	bd70 <send_mode+0x39c>
    bd64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6c:	2200      	movs	r2, #0
    bd6e:	701a      	strb	r2, [r3, #0]
    bd70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd78:	781b      	ldrb	r3, [r3, #0]
    bd7a:	461a      	mov	r2, r3
    bd7c:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd84:	7819      	ldrb	r1, [r3, #0]
    bd86:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd8e:	5499      	strb	r1, [r3, r2]
    bd90:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd98:	781a      	ldrb	r2, [r3, #0]
    bd9a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda2:	781b      	ldrb	r3, [r3, #0]
    bda4:	4413      	add	r3, r2
    bda6:	b2da      	uxtb	r2, r3
    bda8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb0:	701a      	strb	r2, [r3, #0]
    bdb2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdba:	781a      	ldrb	r2, [r3, #0]
    bdbc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc4:	781b      	ldrb	r3, [r3, #0]
    bdc6:	4413      	add	r3, r2
    bdc8:	b2da      	uxtb	r2, r3
    bdca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd2:	701a      	strb	r2, [r3, #0]
    bdd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bddc:	781b      	ldrb	r3, [r3, #0]
    bdde:	3301      	adds	r3, #1
    bde0:	b2da      	uxtb	r2, r3
    bde2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdea:	701a      	strb	r2, [r3, #0]
    bdec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf4:	781b      	ldrb	r3, [r3, #0]
    bdf6:	2bff      	cmp	r3, #255	; 0xff
    bdf8:	d105      	bne.n	be06 <send_mode+0x432>
    bdfa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be02:	2200      	movs	r2, #0
    be04:	701a      	strb	r2, [r3, #0]
    be06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0e:	781b      	ldrb	r3, [r3, #0]
    be10:	461a      	mov	r2, r3
    be12:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be1a:	7819      	ldrb	r1, [r3, #0]
    be1c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    be20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be24:	5499      	strb	r1, [r3, r2]
    be26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	3301      	adds	r3, #1
    be32:	b2da      	uxtb	r2, r3
    be34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	2bff      	cmp	r3, #255	; 0xff
    be4a:	d105      	bne.n	be58 <send_mode+0x484>
    be4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be54:	2200      	movs	r2, #0
    be56:	701a      	strb	r2, [r3, #0]
    be58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be60:	781b      	ldrb	r3, [r3, #0]
    be62:	461a      	mov	r2, r3
    be64:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6c:	7819      	ldrb	r1, [r3, #0]
    be6e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    be72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be76:	5499      	strb	r1, [r3, r2]
    be78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be80:	781b      	ldrb	r3, [r3, #0]
    be82:	3301      	adds	r3, #1
    be84:	b2da      	uxtb	r2, r3
    be86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8e:	701a      	strb	r2, [r3, #0]
    be90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be98:	781b      	ldrb	r3, [r3, #0]
    be9a:	2bff      	cmp	r3, #255	; 0xff
    be9c:	d105      	bne.n	beaa <send_mode+0x4d6>
    be9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea6:	2200      	movs	r2, #0
    bea8:	701a      	strb	r2, [r3, #0]
    beaa:	f242 0339 	movw	r3, #8249	; 0x2039
    beae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	b2db      	uxtb	r3, r3
    beb6:	f003 0310 	and.w	r3, r3, #16
    beba:	2b00      	cmp	r3, #0
    bebc:	d15a      	bne.n	bf74 <send_mode+0x5a0>
    bebe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec6:	781b      	ldrb	r3, [r3, #0]
    bec8:	b2db      	uxtb	r3, r3
    beca:	461a      	mov	r2, r3
    becc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed4:	5c9a      	ldrb	r2, [r3, r2]
    bed6:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    beda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bede:	701a      	strb	r2, [r3, #0]
    bee0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    bee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee8:	2200      	movs	r2, #0
    beea:	701a      	strb	r2, [r3, #0]
    beec:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	b2db      	uxtb	r3, r3
    bef8:	3301      	adds	r3, #1
    befa:	b2da      	uxtb	r2, r3
    befc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf04:	701a      	strb	r2, [r3, #0]
    bf06:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0e:	781b      	ldrb	r3, [r3, #0]
    bf10:	b2db      	uxtb	r3, r3
    bf12:	2bff      	cmp	r3, #255	; 0xff
    bf14:	d105      	bne.n	bf22 <send_mode+0x54e>
    bf16:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1e:	2200      	movs	r2, #0
    bf20:	701a      	strb	r2, [r3, #0]
    bf22:	f242 0338 	movw	r3, #8248	; 0x2038
    bf26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2a:	f242 0238 	movw	r2, #8248	; 0x2038
    bf2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf32:	7812      	ldrb	r2, [r2, #0]
    bf34:	b2d2      	uxtb	r2, r2
    bf36:	f042 0201 	orr.w	r2, r2, #1
    bf3a:	b2d2      	uxtb	r2, r2
    bf3c:	701a      	strb	r2, [r3, #0]
    bf3e:	f242 0339 	movw	r3, #8249	; 0x2039
    bf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf46:	f242 0239 	movw	r2, #8249	; 0x2039
    bf4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf4e:	7812      	ldrb	r2, [r2, #0]
    bf50:	b2d2      	uxtb	r2, r2
    bf52:	f042 0210 	orr.w	r2, r2, #16
    bf56:	b2d2      	uxtb	r2, r2
    bf58:	701a      	strb	r2, [r3, #0]
    bf5a:	e00b      	b.n	bf74 <send_mode+0x5a0>
    bf5c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    bf60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf64:	781b      	ldrb	r3, [r3, #0]
    bf66:	3301      	adds	r3, #1
    bf68:	b2da      	uxtb	r2, r3
    bf6a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    bf6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf72:	701a      	strb	r2, [r3, #0]
}
    bf74:	46bd      	mov	sp, r7
    bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf7a:	4770      	bx	lr

0000bf7c <send_debug>:
void send_debug(void){  //5000ms
    bf7c:	b480      	push	{r7}
    bf7e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bf80:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    bf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf88:	781a      	ldrb	r2, [r3, #0]
    bf8a:	f248 531f 	movw	r3, #34079	; 0x851f
    bf8e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bf92:	fba3 1302 	umull	r1, r3, r3, r2
    bf96:	091b      	lsrs	r3, r3, #4
    bf98:	2132      	movs	r1, #50	; 0x32
    bf9a:	fb01 f303 	mul.w	r3, r1, r3
    bf9e:	1ad3      	subs	r3, r2, r3
    bfa0:	b2db      	uxtb	r3, r3
    bfa2:	2b1d      	cmp	r3, #29
    bfa4:	f040 82bb 	bne.w	c51e <send_debug+0x5a2>
    bfa8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb0:	781a      	ldrb	r2, [r3, #0]
    bfb2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfba:	781b      	ldrb	r3, [r3, #0]
    bfbc:	b2db      	uxtb	r3, r3
    bfbe:	429a      	cmp	r2, r3
    bfc0:	d313      	bcc.n	bfea <send_debug+0x6e>
    bfc2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfca:	781b      	ldrb	r3, [r3, #0]
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	461a      	mov	r2, r3
    bfd0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bfd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	1ad3      	subs	r3, r2, r3
    bfdc:	33ff      	adds	r3, #255	; 0xff
    bfde:	2b09      	cmp	r3, #9
    bfe0:	bfd4      	ite	le
    bfe2:	2300      	movle	r3, #0
    bfe4:	2301      	movgt	r3, #1
    bfe6:	b2db      	uxtb	r3, r3
    bfe8:	e011      	b.n	c00e <send_debug+0x92>
    bfea:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff2:	781b      	ldrb	r3, [r3, #0]
    bff4:	b2db      	uxtb	r3, r3
    bff6:	461a      	mov	r2, r3
    bff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c000:	781b      	ldrb	r3, [r3, #0]
    c002:	1ad3      	subs	r3, r2, r3
    c004:	2b09      	cmp	r3, #9
    c006:	bfd4      	ite	le
    c008:	2300      	movle	r3, #0
    c00a:	2301      	movgt	r3, #1
    c00c:	b2db      	uxtb	r3, r3
    c00e:	2b00      	cmp	r3, #0
    c010:	f000 8279 	beq.w	c506 <send_debug+0x58a>
    c014:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c01c:	781b      	ldrb	r3, [r3, #0]
    c01e:	461a      	mov	r2, r3
    c020:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c028:	2105      	movs	r1, #5
    c02a:	5499      	strb	r1, [r3, r2]
    c02c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c034:	781b      	ldrb	r3, [r3, #0]
    c036:	3301      	adds	r3, #1
    c038:	b2da      	uxtb	r2, r3
    c03a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c042:	701a      	strb	r2, [r3, #0]
    c044:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04c:	781b      	ldrb	r3, [r3, #0]
    c04e:	2bff      	cmp	r3, #255	; 0xff
    c050:	d105      	bne.n	c05e <send_debug+0xe2>
    c052:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c05a:	2200      	movs	r2, #0
    c05c:	701a      	strb	r2, [r3, #0]
    c05e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	461a      	mov	r2, r3
    c06a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c072:	210d      	movs	r1, #13
    c074:	5499      	strb	r1, [r3, r2]
    c076:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07e:	781b      	ldrb	r3, [r3, #0]
    c080:	3301      	adds	r3, #1
    c082:	b2da      	uxtb	r2, r3
    c084:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08c:	701a      	strb	r2, [r3, #0]
    c08e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c096:	781b      	ldrb	r3, [r3, #0]
    c098:	2bff      	cmp	r3, #255	; 0xff
    c09a:	d105      	bne.n	c0a8 <send_debug+0x12c>
    c09c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a4:	2200      	movs	r2, #0
    c0a6:	701a      	strb	r2, [r3, #0]
    c0a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b0:	220d      	movs	r2, #13
    c0b2:	701a      	strb	r2, [r3, #0]
    c0b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0bc:	220d      	movs	r2, #13
    c0be:	701a      	strb	r2, [r3, #0]
    c0c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	461a      	mov	r2, r3
    c0cc:	f24b 0307 	movw	r3, #45063	; 0xb007
    c0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d4:	781b      	ldrb	r3, [r3, #0]
    c0d6:	b2d9      	uxtb	r1, r3
    c0d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	5499      	strb	r1, [r3, r2]
    c0e2:	f24b 0307 	movw	r3, #45063	; 0xb007
    c0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ea:	781a      	ldrb	r2, [r3, #0]
    c0ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	4413      	add	r3, r2
    c0f8:	b2da      	uxtb	r2, r3
    c0fa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c102:	701a      	strb	r2, [r3, #0]
    c104:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10c:	781a      	ldrb	r2, [r3, #0]
    c10e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	4413      	add	r3, r2
    c11a:	b2da      	uxtb	r2, r3
    c11c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c124:	701a      	strb	r2, [r3, #0]
    c126:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	3301      	adds	r3, #1
    c132:	b2da      	uxtb	r2, r3
    c134:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13c:	701a      	strb	r2, [r3, #0]
    c13e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	2bff      	cmp	r3, #255	; 0xff
    c14a:	d105      	bne.n	c158 <send_debug+0x1dc>
    c14c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	2200      	movs	r2, #0
    c156:	701a      	strb	r2, [r3, #0]
    c158:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c160:	781b      	ldrb	r3, [r3, #0]
    c162:	461a      	mov	r2, r3
    c164:	f24b 0308 	movw	r3, #45064	; 0xb008
    c168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16c:	7819      	ldrb	r1, [r3, #0]
    c16e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c176:	5499      	strb	r1, [r3, r2]
    c178:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c180:	781a      	ldrb	r2, [r3, #0]
    c182:	f24b 0308 	movw	r3, #45064	; 0xb008
    c186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18a:	781b      	ldrb	r3, [r3, #0]
    c18c:	4413      	add	r3, r2
    c18e:	b2da      	uxtb	r2, r3
    c190:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c198:	701a      	strb	r2, [r3, #0]
    c19a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a2:	781a      	ldrb	r2, [r3, #0]
    c1a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ac:	781b      	ldrb	r3, [r3, #0]
    c1ae:	4413      	add	r3, r2
    c1b0:	b2da      	uxtb	r2, r3
    c1b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ba:	701a      	strb	r2, [r3, #0]
    c1bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c4:	781b      	ldrb	r3, [r3, #0]
    c1c6:	3301      	adds	r3, #1
    c1c8:	b2da      	uxtb	r2, r3
    c1ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d2:	701a      	strb	r2, [r3, #0]
    c1d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	2bff      	cmp	r3, #255	; 0xff
    c1e0:	d105      	bne.n	c1ee <send_debug+0x272>
    c1e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ea:	2200      	movs	r2, #0
    c1ec:	701a      	strb	r2, [r3, #0]
    c1ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	461a      	mov	r2, r3
    c1fa:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c202:	7819      	ldrb	r1, [r3, #0]
    c204:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20c:	5499      	strb	r1, [r3, r2]
    c20e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c216:	781a      	ldrb	r2, [r3, #0]
    c218:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c220:	781b      	ldrb	r3, [r3, #0]
    c222:	4413      	add	r3, r2
    c224:	b2da      	uxtb	r2, r3
    c226:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22e:	701a      	strb	r2, [r3, #0]
    c230:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c238:	781a      	ldrb	r2, [r3, #0]
    c23a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c242:	781b      	ldrb	r3, [r3, #0]
    c244:	4413      	add	r3, r2
    c246:	b2da      	uxtb	r2, r3
    c248:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c250:	701a      	strb	r2, [r3, #0]
    c252:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25a:	781b      	ldrb	r3, [r3, #0]
    c25c:	3301      	adds	r3, #1
    c25e:	b2da      	uxtb	r2, r3
    c260:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c268:	701a      	strb	r2, [r3, #0]
    c26a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c272:	781b      	ldrb	r3, [r3, #0]
    c274:	2bff      	cmp	r3, #255	; 0xff
    c276:	d105      	bne.n	c284 <send_debug+0x308>
    c278:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c280:	2200      	movs	r2, #0
    c282:	701a      	strb	r2, [r3, #0]
    c284:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28c:	781b      	ldrb	r3, [r3, #0]
    c28e:	461a      	mov	r2, r3
    c290:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c298:	7819      	ldrb	r1, [r3, #0]
    c29a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a2:	5499      	strb	r1, [r3, r2]
    c2a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ac:	781a      	ldrb	r2, [r3, #0]
    c2ae:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b6:	781b      	ldrb	r3, [r3, #0]
    c2b8:	4413      	add	r3, r2
    c2ba:	b2da      	uxtb	r2, r3
    c2bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c4:	701a      	strb	r2, [r3, #0]
    c2c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ce:	781a      	ldrb	r2, [r3, #0]
    c2d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d8:	781b      	ldrb	r3, [r3, #0]
    c2da:	4413      	add	r3, r2
    c2dc:	b2da      	uxtb	r2, r3
    c2de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e6:	701a      	strb	r2, [r3, #0]
    c2e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f0:	781b      	ldrb	r3, [r3, #0]
    c2f2:	3301      	adds	r3, #1
    c2f4:	b2da      	uxtb	r2, r3
    c2f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fe:	701a      	strb	r2, [r3, #0]
    c300:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c308:	781b      	ldrb	r3, [r3, #0]
    c30a:	2bff      	cmp	r3, #255	; 0xff
    c30c:	d105      	bne.n	c31a <send_debug+0x39e>
    c30e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c316:	2200      	movs	r2, #0
    c318:	701a      	strb	r2, [r3, #0]
    c31a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c322:	781b      	ldrb	r3, [r3, #0]
    c324:	461a      	mov	r2, r3
    c326:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32e:	7819      	ldrb	r1, [r3, #0]
    c330:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c338:	5499      	strb	r1, [r3, r2]
    c33a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c342:	781a      	ldrb	r2, [r3, #0]
    c344:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	4413      	add	r3, r2
    c350:	b2da      	uxtb	r2, r3
    c352:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c35a:	701a      	strb	r2, [r3, #0]
    c35c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c364:	781a      	ldrb	r2, [r3, #0]
    c366:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36e:	781b      	ldrb	r3, [r3, #0]
    c370:	4413      	add	r3, r2
    c372:	b2da      	uxtb	r2, r3
    c374:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37c:	701a      	strb	r2, [r3, #0]
    c37e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c386:	781b      	ldrb	r3, [r3, #0]
    c388:	3301      	adds	r3, #1
    c38a:	b2da      	uxtb	r2, r3
    c38c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c394:	701a      	strb	r2, [r3, #0]
    c396:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	781b      	ldrb	r3, [r3, #0]
    c3a0:	2bff      	cmp	r3, #255	; 0xff
    c3a2:	d105      	bne.n	c3b0 <send_debug+0x434>
    c3a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ac:	2200      	movs	r2, #0
    c3ae:	701a      	strb	r2, [r3, #0]
    c3b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b8:	781b      	ldrb	r3, [r3, #0]
    c3ba:	461a      	mov	r2, r3
    c3bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c4:	7819      	ldrb	r1, [r3, #0]
    c3c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ce:	5499      	strb	r1, [r3, r2]
    c3d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	3301      	adds	r3, #1
    c3dc:	b2da      	uxtb	r2, r3
    c3de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e6:	701a      	strb	r2, [r3, #0]
    c3e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f0:	781b      	ldrb	r3, [r3, #0]
    c3f2:	2bff      	cmp	r3, #255	; 0xff
    c3f4:	d105      	bne.n	c402 <send_debug+0x486>
    c3f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fe:	2200      	movs	r2, #0
    c400:	701a      	strb	r2, [r3, #0]
    c402:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c40a:	781b      	ldrb	r3, [r3, #0]
    c40c:	461a      	mov	r2, r3
    c40e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c416:	7819      	ldrb	r1, [r3, #0]
    c418:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c420:	5499      	strb	r1, [r3, r2]
    c422:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	3301      	adds	r3, #1
    c42e:	b2da      	uxtb	r2, r3
    c430:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c438:	701a      	strb	r2, [r3, #0]
    c43a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c442:	781b      	ldrb	r3, [r3, #0]
    c444:	2bff      	cmp	r3, #255	; 0xff
    c446:	d105      	bne.n	c454 <send_debug+0x4d8>
    c448:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c450:	2200      	movs	r2, #0
    c452:	701a      	strb	r2, [r3, #0]
    c454:	f242 0339 	movw	r3, #8249	; 0x2039
    c458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c45c:	781b      	ldrb	r3, [r3, #0]
    c45e:	b2db      	uxtb	r3, r3
    c460:	f003 0310 	and.w	r3, r3, #16
    c464:	2b00      	cmp	r3, #0
    c466:	d15a      	bne.n	c51e <send_debug+0x5a2>
    c468:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	b2db      	uxtb	r3, r3
    c474:	461a      	mov	r2, r3
    c476:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	5c9a      	ldrb	r2, [r3, r2]
    c480:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    c484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c488:	701a      	strb	r2, [r3, #0]
    c48a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    c48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c492:	2200      	movs	r2, #0
    c494:	701a      	strb	r2, [r3, #0]
    c496:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	b2db      	uxtb	r3, r3
    c4a2:	3301      	adds	r3, #1
    c4a4:	b2da      	uxtb	r2, r3
    c4a6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ae:	701a      	strb	r2, [r3, #0]
    c4b0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	b2db      	uxtb	r3, r3
    c4bc:	2bff      	cmp	r3, #255	; 0xff
    c4be:	d105      	bne.n	c4cc <send_debug+0x550>
    c4c0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c8:	2200      	movs	r2, #0
    c4ca:	701a      	strb	r2, [r3, #0]
    c4cc:	f242 0338 	movw	r3, #8248	; 0x2038
    c4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d4:	f242 0238 	movw	r2, #8248	; 0x2038
    c4d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c4dc:	7812      	ldrb	r2, [r2, #0]
    c4de:	b2d2      	uxtb	r2, r2
    c4e0:	f042 0201 	orr.w	r2, r2, #1
    c4e4:	b2d2      	uxtb	r2, r2
    c4e6:	701a      	strb	r2, [r3, #0]
    c4e8:	f242 0339 	movw	r3, #8249	; 0x2039
    c4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f0:	f242 0239 	movw	r2, #8249	; 0x2039
    c4f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c4f8:	7812      	ldrb	r2, [r2, #0]
    c4fa:	b2d2      	uxtb	r2, r2
    c4fc:	f042 0210 	orr.w	r2, r2, #16
    c500:	b2d2      	uxtb	r2, r2
    c502:	701a      	strb	r2, [r3, #0]
    c504:	e00b      	b.n	c51e <send_debug+0x5a2>
    c506:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	781b      	ldrb	r3, [r3, #0]
    c510:	3301      	adds	r3, #1
    c512:	b2da      	uxtb	r2, r3
    c514:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51c:	701a      	strb	r2, [r3, #0]
}
    c51e:	46bd      	mov	sp, r7
    c520:	f85d 7b04 	ldr.w	r7, [sp], #4
    c524:	4770      	bx	lr
    c526:	bf00      	nop

0000c528 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c528:	b480      	push	{r7}
    c52a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c52c:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    c530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c534:	781a      	ldrb	r2, [r3, #0]
    c536:	f248 531f 	movw	r3, #34079	; 0x851f
    c53a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c53e:	fba3 1302 	umull	r1, r3, r3, r2
    c542:	095b      	lsrs	r3, r3, #5
    c544:	2164      	movs	r1, #100	; 0x64
    c546:	fb01 f303 	mul.w	r3, r1, r3
    c54a:	1ad3      	subs	r3, r2, r3
    c54c:	b2db      	uxtb	r3, r3
    c54e:	2b31      	cmp	r3, #49	; 0x31
    c550:	f040 8395 	bne.w	cc7e <send_nav_ref+0x756>
    c554:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c55c:	781a      	ldrb	r2, [r3, #0]
    c55e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c566:	781b      	ldrb	r3, [r3, #0]
    c568:	b2db      	uxtb	r3, r3
    c56a:	429a      	cmp	r2, r3
    c56c:	d313      	bcc.n	c596 <send_nav_ref+0x6e>
    c56e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	b2db      	uxtb	r3, r3
    c57a:	461a      	mov	r2, r3
    c57c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c584:	781b      	ldrb	r3, [r3, #0]
    c586:	1ad3      	subs	r3, r2, r3
    c588:	33ff      	adds	r3, #255	; 0xff
    c58a:	2b0c      	cmp	r3, #12
    c58c:	bfd4      	ite	le
    c58e:	2300      	movle	r3, #0
    c590:	2301      	movgt	r3, #1
    c592:	b2db      	uxtb	r3, r3
    c594:	e011      	b.n	c5ba <send_nav_ref+0x92>
    c596:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59e:	781b      	ldrb	r3, [r3, #0]
    c5a0:	b2db      	uxtb	r3, r3
    c5a2:	461a      	mov	r2, r3
    c5a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ac:	781b      	ldrb	r3, [r3, #0]
    c5ae:	1ad3      	subs	r3, r2, r3
    c5b0:	2b0c      	cmp	r3, #12
    c5b2:	bfd4      	ite	le
    c5b4:	2300      	movle	r3, #0
    c5b6:	2301      	movgt	r3, #1
    c5b8:	b2db      	uxtb	r3, r3
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	f000 8353 	beq.w	cc66 <send_nav_ref+0x73e>
    c5c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	461a      	mov	r2, r3
    c5cc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d4:	2105      	movs	r1, #5
    c5d6:	5499      	strb	r1, [r3, r2]
    c5d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e0:	781b      	ldrb	r3, [r3, #0]
    c5e2:	3301      	adds	r3, #1
    c5e4:	b2da      	uxtb	r2, r3
    c5e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ee:	701a      	strb	r2, [r3, #0]
    c5f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f8:	781b      	ldrb	r3, [r3, #0]
    c5fa:	2bff      	cmp	r3, #255	; 0xff
    c5fc:	d105      	bne.n	c60a <send_nav_ref+0xe2>
    c5fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c606:	2200      	movs	r2, #0
    c608:	701a      	strb	r2, [r3, #0]
    c60a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c612:	781b      	ldrb	r3, [r3, #0]
    c614:	461a      	mov	r2, r3
    c616:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c61e:	2109      	movs	r1, #9
    c620:	5499      	strb	r1, [r3, r2]
    c622:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62a:	781b      	ldrb	r3, [r3, #0]
    c62c:	3301      	adds	r3, #1
    c62e:	b2da      	uxtb	r2, r3
    c630:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c638:	701a      	strb	r2, [r3, #0]
    c63a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c642:	781b      	ldrb	r3, [r3, #0]
    c644:	2bff      	cmp	r3, #255	; 0xff
    c646:	d105      	bne.n	c654 <send_nav_ref+0x12c>
    c648:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c650:	2200      	movs	r2, #0
    c652:	701a      	strb	r2, [r3, #0]
    c654:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65c:	2209      	movs	r2, #9
    c65e:	701a      	strb	r2, [r3, #0]
    c660:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c668:	2209      	movs	r2, #9
    c66a:	701a      	strb	r2, [r3, #0]
    c66c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c674:	781b      	ldrb	r3, [r3, #0]
    c676:	461a      	mov	r2, r3
    c678:	f248 7398 	movw	r3, #34712	; 0x8798
    c67c:	f2c0 0301 	movt	r3, #1
    c680:	7819      	ldrb	r1, [r3, #0]
    c682:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68a:	5499      	strb	r1, [r3, r2]
    c68c:	f248 7398 	movw	r3, #34712	; 0x8798
    c690:	f2c0 0301 	movt	r3, #1
    c694:	781a      	ldrb	r2, [r3, #0]
    c696:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	4413      	add	r3, r2
    c6a2:	b2da      	uxtb	r2, r3
    c6a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ac:	701a      	strb	r2, [r3, #0]
    c6ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b6:	781a      	ldrb	r2, [r3, #0]
    c6b8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	4413      	add	r3, r2
    c6c4:	b2da      	uxtb	r2, r3
    c6c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ce:	701a      	strb	r2, [r3, #0]
    c6d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d8:	781b      	ldrb	r3, [r3, #0]
    c6da:	3301      	adds	r3, #1
    c6dc:	b2da      	uxtb	r2, r3
    c6de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	701a      	strb	r2, [r3, #0]
    c6e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	2bff      	cmp	r3, #255	; 0xff
    c6f4:	d105      	bne.n	c702 <send_nav_ref+0x1da>
    c6f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6fe:	2200      	movs	r2, #0
    c700:	701a      	strb	r2, [r3, #0]
    c702:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	461a      	mov	r2, r3
    c70e:	f248 7398 	movw	r3, #34712	; 0x8798
    c712:	f2c0 0301 	movt	r3, #1
    c716:	7859      	ldrb	r1, [r3, #1]
    c718:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c720:	5499      	strb	r1, [r3, r2]
    c722:	4bd2      	ldr	r3, [pc, #840]	; (ca6c <send_nav_ref+0x544>)
    c724:	781a      	ldrb	r2, [r3, #0]
    c726:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	4413      	add	r3, r2
    c732:	b2da      	uxtb	r2, r3
    c734:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c746:	781a      	ldrb	r2, [r3, #0]
    c748:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c750:	781b      	ldrb	r3, [r3, #0]
    c752:	4413      	add	r3, r2
    c754:	b2da      	uxtb	r2, r3
    c756:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c75e:	701a      	strb	r2, [r3, #0]
    c760:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	3301      	adds	r3, #1
    c76c:	b2da      	uxtb	r2, r3
    c76e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c776:	701a      	strb	r2, [r3, #0]
    c778:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c780:	781b      	ldrb	r3, [r3, #0]
    c782:	2bff      	cmp	r3, #255	; 0xff
    c784:	d105      	bne.n	c792 <send_nav_ref+0x26a>
    c786:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78e:	2200      	movs	r2, #0
    c790:	701a      	strb	r2, [r3, #0]
    c792:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79a:	781b      	ldrb	r3, [r3, #0]
    c79c:	461a      	mov	r2, r3
    c79e:	f248 7398 	movw	r3, #34712	; 0x8798
    c7a2:	f2c0 0301 	movt	r3, #1
    c7a6:	7899      	ldrb	r1, [r3, #2]
    c7a8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b0:	5499      	strb	r1, [r3, r2]
    c7b2:	4baf      	ldr	r3, [pc, #700]	; (ca70 <send_nav_ref+0x548>)
    c7b4:	781a      	ldrb	r2, [r3, #0]
    c7b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7be:	781b      	ldrb	r3, [r3, #0]
    c7c0:	4413      	add	r3, r2
    c7c2:	b2da      	uxtb	r2, r3
    c7c4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7cc:	701a      	strb	r2, [r3, #0]
    c7ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d6:	781a      	ldrb	r2, [r3, #0]
    c7d8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	4413      	add	r3, r2
    c7e4:	b2da      	uxtb	r2, r3
    c7e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ee:	701a      	strb	r2, [r3, #0]
    c7f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	3301      	adds	r3, #1
    c7fc:	b2da      	uxtb	r2, r3
    c7fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c806:	701a      	strb	r2, [r3, #0]
    c808:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	2bff      	cmp	r3, #255	; 0xff
    c814:	d105      	bne.n	c822 <send_nav_ref+0x2fa>
    c816:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81e:	2200      	movs	r2, #0
    c820:	701a      	strb	r2, [r3, #0]
    c822:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82a:	781b      	ldrb	r3, [r3, #0]
    c82c:	461a      	mov	r2, r3
    c82e:	f248 7398 	movw	r3, #34712	; 0x8798
    c832:	f2c0 0301 	movt	r3, #1
    c836:	78d9      	ldrb	r1, [r3, #3]
    c838:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c840:	5499      	strb	r1, [r3, r2]
    c842:	4b8c      	ldr	r3, [pc, #560]	; (ca74 <send_nav_ref+0x54c>)
    c844:	781a      	ldrb	r2, [r3, #0]
    c846:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	4413      	add	r3, r2
    c852:	b2da      	uxtb	r2, r3
    c854:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85c:	701a      	strb	r2, [r3, #0]
    c85e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	781a      	ldrb	r2, [r3, #0]
    c868:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c870:	781b      	ldrb	r3, [r3, #0]
    c872:	4413      	add	r3, r2
    c874:	b2da      	uxtb	r2, r3
    c876:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87e:	701a      	strb	r2, [r3, #0]
    c880:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c888:	781b      	ldrb	r3, [r3, #0]
    c88a:	3301      	adds	r3, #1
    c88c:	b2da      	uxtb	r2, r3
    c88e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c896:	701a      	strb	r2, [r3, #0]
    c898:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a0:	781b      	ldrb	r3, [r3, #0]
    c8a2:	2bff      	cmp	r3, #255	; 0xff
    c8a4:	d105      	bne.n	c8b2 <send_nav_ref+0x38a>
    c8a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ae:	2200      	movs	r2, #0
    c8b0:	701a      	strb	r2, [r3, #0]
    c8b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ba:	781b      	ldrb	r3, [r3, #0]
    c8bc:	461a      	mov	r2, r3
    c8be:	f248 739c 	movw	r3, #34716	; 0x879c
    c8c2:	f2c0 0301 	movt	r3, #1
    c8c6:	7819      	ldrb	r1, [r3, #0]
    c8c8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d0:	5499      	strb	r1, [r3, r2]
    c8d2:	f248 739c 	movw	r3, #34716	; 0x879c
    c8d6:	f2c0 0301 	movt	r3, #1
    c8da:	781a      	ldrb	r2, [r3, #0]
    c8dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e4:	781b      	ldrb	r3, [r3, #0]
    c8e6:	4413      	add	r3, r2
    c8e8:	b2da      	uxtb	r2, r3
    c8ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f2:	701a      	strb	r2, [r3, #0]
    c8f4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8fc:	781a      	ldrb	r2, [r3, #0]
    c8fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	4413      	add	r3, r2
    c90a:	b2da      	uxtb	r2, r3
    c90c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c914:	701a      	strb	r2, [r3, #0]
    c916:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	3301      	adds	r3, #1
    c922:	b2da      	uxtb	r2, r3
    c924:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c92c:	701a      	strb	r2, [r3, #0]
    c92e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	2bff      	cmp	r3, #255	; 0xff
    c93a:	d105      	bne.n	c948 <send_nav_ref+0x420>
    c93c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c944:	2200      	movs	r2, #0
    c946:	701a      	strb	r2, [r3, #0]
    c948:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c950:	781b      	ldrb	r3, [r3, #0]
    c952:	461a      	mov	r2, r3
    c954:	f248 739c 	movw	r3, #34716	; 0x879c
    c958:	f2c0 0301 	movt	r3, #1
    c95c:	7859      	ldrb	r1, [r3, #1]
    c95e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c966:	5499      	strb	r1, [r3, r2]
    c968:	4b43      	ldr	r3, [pc, #268]	; (ca78 <send_nav_ref+0x550>)
    c96a:	781a      	ldrb	r2, [r3, #0]
    c96c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c974:	781b      	ldrb	r3, [r3, #0]
    c976:	4413      	add	r3, r2
    c978:	b2da      	uxtb	r2, r3
    c97a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c982:	701a      	strb	r2, [r3, #0]
    c984:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c98c:	781a      	ldrb	r2, [r3, #0]
    c98e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c996:	781b      	ldrb	r3, [r3, #0]
    c998:	4413      	add	r3, r2
    c99a:	b2da      	uxtb	r2, r3
    c99c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a4:	701a      	strb	r2, [r3, #0]
    c9a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	3301      	adds	r3, #1
    c9b2:	b2da      	uxtb	r2, r3
    c9b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9bc:	701a      	strb	r2, [r3, #0]
    c9be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c6:	781b      	ldrb	r3, [r3, #0]
    c9c8:	2bff      	cmp	r3, #255	; 0xff
    c9ca:	d105      	bne.n	c9d8 <send_nav_ref+0x4b0>
    c9cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d4:	2200      	movs	r2, #0
    c9d6:	701a      	strb	r2, [r3, #0]
    c9d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9e0:	781b      	ldrb	r3, [r3, #0]
    c9e2:	461a      	mov	r2, r3
    c9e4:	f248 739c 	movw	r3, #34716	; 0x879c
    c9e8:	f2c0 0301 	movt	r3, #1
    c9ec:	7899      	ldrb	r1, [r3, #2]
    c9ee:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f6:	5499      	strb	r1, [r3, r2]
    c9f8:	4b20      	ldr	r3, [pc, #128]	; (ca7c <send_nav_ref+0x554>)
    c9fa:	781a      	ldrb	r2, [r3, #0]
    c9fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca04:	781b      	ldrb	r3, [r3, #0]
    ca06:	4413      	add	r3, r2
    ca08:	b2da      	uxtb	r2, r3
    ca0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca12:	701a      	strb	r2, [r3, #0]
    ca14:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1c:	781a      	ldrb	r2, [r3, #0]
    ca1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca26:	781b      	ldrb	r3, [r3, #0]
    ca28:	4413      	add	r3, r2
    ca2a:	b2da      	uxtb	r2, r3
    ca2c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca34:	701a      	strb	r2, [r3, #0]
    ca36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	3301      	adds	r3, #1
    ca42:	b2da      	uxtb	r2, r3
    ca44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4c:	701a      	strb	r2, [r3, #0]
    ca4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca56:	781b      	ldrb	r3, [r3, #0]
    ca58:	2bff      	cmp	r3, #255	; 0xff
    ca5a:	d111      	bne.n	ca80 <send_nav_ref+0x558>
    ca5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca64:	2200      	movs	r2, #0
    ca66:	701a      	strb	r2, [r3, #0]
    ca68:	e00a      	b.n	ca80 <send_nav_ref+0x558>
    ca6a:	bf00      	nop
    ca6c:	00018799 	.word	0x00018799
    ca70:	0001879a 	.word	0x0001879a
    ca74:	0001879b 	.word	0x0001879b
    ca78:	0001879d 	.word	0x0001879d
    ca7c:	0001879e 	.word	0x0001879e
    ca80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	461a      	mov	r2, r3
    ca8c:	f248 739c 	movw	r3, #34716	; 0x879c
    ca90:	f2c0 0301 	movt	r3, #1
    ca94:	78d9      	ldrb	r1, [r3, #3]
    ca96:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ca9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9e:	5499      	strb	r1, [r3, r2]
    caa0:	4b79      	ldr	r3, [pc, #484]	; (cc88 <send_nav_ref+0x760>)
    caa2:	781a      	ldrb	r2, [r3, #0]
    caa4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    caa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caac:	781b      	ldrb	r3, [r3, #0]
    caae:	4413      	add	r3, r2
    cab0:	b2da      	uxtb	r2, r3
    cab2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caba:	701a      	strb	r2, [r3, #0]
    cabc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac4:	781a      	ldrb	r2, [r3, #0]
    cac6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    caca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	4413      	add	r3, r2
    cad2:	b2da      	uxtb	r2, r3
    cad4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cadc:	701a      	strb	r2, [r3, #0]
    cade:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	3301      	adds	r3, #1
    caea:	b2da      	uxtb	r2, r3
    caec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    caf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf4:	701a      	strb	r2, [r3, #0]
    caf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	2bff      	cmp	r3, #255	; 0xff
    cb02:	d105      	bne.n	cb10 <send_nav_ref+0x5e8>
    cb04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb0c:	2200      	movs	r2, #0
    cb0e:	701a      	strb	r2, [r3, #0]
    cb10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb18:	781b      	ldrb	r3, [r3, #0]
    cb1a:	461a      	mov	r2, r3
    cb1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb24:	7819      	ldrb	r1, [r3, #0]
    cb26:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2e:	5499      	strb	r1, [r3, r2]
    cb30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	3301      	adds	r3, #1
    cb3c:	b2da      	uxtb	r2, r3
    cb3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2bff      	cmp	r3, #255	; 0xff
    cb54:	d105      	bne.n	cb62 <send_nav_ref+0x63a>
    cb56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5e:	2200      	movs	r2, #0
    cb60:	701a      	strb	r2, [r3, #0]
    cb62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb6a:	781b      	ldrb	r3, [r3, #0]
    cb6c:	461a      	mov	r2, r3
    cb6e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb76:	7819      	ldrb	r1, [r3, #0]
    cb78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb80:	5499      	strb	r1, [r3, r2]
    cb82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8a:	781b      	ldrb	r3, [r3, #0]
    cb8c:	3301      	adds	r3, #1
    cb8e:	b2da      	uxtb	r2, r3
    cb90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb98:	701a      	strb	r2, [r3, #0]
    cb9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba2:	781b      	ldrb	r3, [r3, #0]
    cba4:	2bff      	cmp	r3, #255	; 0xff
    cba6:	d105      	bne.n	cbb4 <send_nav_ref+0x68c>
    cba8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb0:	2200      	movs	r2, #0
    cbb2:	701a      	strb	r2, [r3, #0]
    cbb4:	f242 0339 	movw	r3, #8249	; 0x2039
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	b2db      	uxtb	r3, r3
    cbc0:	f003 0310 	and.w	r3, r3, #16
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d15a      	bne.n	cc7e <send_nav_ref+0x756>
    cbc8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cbcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd0:	781b      	ldrb	r3, [r3, #0]
    cbd2:	b2db      	uxtb	r3, r3
    cbd4:	461a      	mov	r2, r3
    cbd6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbde:	5c9a      	ldrb	r2, [r3, r2]
    cbe0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    cbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe8:	701a      	strb	r2, [r3, #0]
    cbea:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    cbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf2:	2200      	movs	r2, #0
    cbf4:	701a      	strb	r2, [r3, #0]
    cbf6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cbfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbfe:	781b      	ldrb	r3, [r3, #0]
    cc00:	b2db      	uxtb	r3, r3
    cc02:	3301      	adds	r3, #1
    cc04:	b2da      	uxtb	r2, r3
    cc06:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0e:	701a      	strb	r2, [r3, #0]
    cc10:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	b2db      	uxtb	r3, r3
    cc1c:	2bff      	cmp	r3, #255	; 0xff
    cc1e:	d105      	bne.n	cc2c <send_nav_ref+0x704>
    cc20:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc28:	2200      	movs	r2, #0
    cc2a:	701a      	strb	r2, [r3, #0]
    cc2c:	f242 0338 	movw	r3, #8248	; 0x2038
    cc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc34:	f242 0238 	movw	r2, #8248	; 0x2038
    cc38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cc3c:	7812      	ldrb	r2, [r2, #0]
    cc3e:	b2d2      	uxtb	r2, r2
    cc40:	f042 0201 	orr.w	r2, r2, #1
    cc44:	b2d2      	uxtb	r2, r2
    cc46:	701a      	strb	r2, [r3, #0]
    cc48:	f242 0339 	movw	r3, #8249	; 0x2039
    cc4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc50:	f242 0239 	movw	r2, #8249	; 0x2039
    cc54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cc58:	7812      	ldrb	r2, [r2, #0]
    cc5a:	b2d2      	uxtb	r2, r2
    cc5c:	f042 0210 	orr.w	r2, r2, #16
    cc60:	b2d2      	uxtb	r2, r2
    cc62:	701a      	strb	r2, [r3, #0]
    cc64:	e00b      	b.n	cc7e <send_nav_ref+0x756>
    cc66:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    cc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6e:	781b      	ldrb	r3, [r3, #0]
    cc70:	3301      	adds	r3, #1
    cc72:	b2da      	uxtb	r2, r3
    cc74:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    cc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc7c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cc7e:	46bd      	mov	sp, r7
    cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc84:	4770      	bx	lr
    cc86:	bf00      	nop
    cc88:	0001879f 	.word	0x0001879f

0000cc8c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cc8c:	b480      	push	{r7}
    cc8e:	b083      	sub	sp, #12
    cc90:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cc92:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    cc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9a:	8a1b      	ldrh	r3, [r3, #16]
    cc9c:	b21b      	sxth	r3, r3
    cc9e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cca2:	db0d      	blt.n	ccc0 <inflight_calib_mode_update+0x34>
    cca4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    cca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccac:	8a1b      	ldrh	r3, [r3, #16]
    ccae:	b21a      	sxth	r2, r3
    ccb0:	f640 437f 	movw	r3, #3199	; 0xc7f
    ccb4:	429a      	cmp	r2, r3
    ccb6:	bfd4      	ite	le
    ccb8:	2300      	movle	r3, #0
    ccba:	2301      	movgt	r3, #1
    ccbc:	b2db      	uxtb	r3, r3
    ccbe:	e000      	b.n	ccc2 <inflight_calib_mode_update+0x36>
    ccc0:	2302      	movs	r3, #2
    ccc2:	71fb      	strb	r3, [r7, #7]
    ccc4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    ccc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	79fa      	ldrb	r2, [r7, #7]
    ccd0:	429a      	cmp	r2, r3
    ccd2:	d007      	beq.n	cce4 <inflight_calib_mode_update+0x58>
    ccd4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    ccd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccdc:	79fa      	ldrb	r2, [r7, #7]
    ccde:	701a      	strb	r2, [r3, #0]
    cce0:	2301      	movs	r3, #1
    cce2:	e000      	b.n	cce6 <inflight_calib_mode_update+0x5a>
    cce4:	2300      	movs	r3, #0
}
    cce6:	4618      	mov	r0, r3
    cce8:	370c      	adds	r7, #12
    ccea:	46bd      	mov	sp, r7
    ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccf0:	4770      	bx	lr
    ccf2:	bf00      	nop

0000ccf4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    ccf4:	b580      	push	{r7, lr}
    ccf6:	b082      	sub	sp, #8
    ccf8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    ccfa:	f24b 0306 	movw	r3, #45062	; 0xb006
    ccfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd02:	2201      	movs	r2, #1
    cd04:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cd06:	f24b 0306 	movw	r3, #45062	; 0xb006
    cd0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd0e:	781b      	ldrb	r3, [r3, #0]
    cd10:	b2db      	uxtb	r3, r3
    cd12:	2b00      	cmp	r3, #0
    cd14:	f000 83b8 	beq.w	d488 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cd18:	2300      	movs	r3, #0
    cd1a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cd1c:	f7fa fa9c 	bl	7258 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cd20:	4b3a      	ldr	r3, [pc, #232]	; (ce0c <radio_control_task+0x118>)
    cd22:	781b      	ldrb	r3, [r3, #0]
    cd24:	b2db      	uxtb	r3, r3
    cd26:	f003 0302 	and.w	r3, r3, #2
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d00d      	beq.n	cd4a <radio_control_task+0x56>
    cd2e:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cd32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	2b01      	cmp	r3, #1
    cd3a:	d00d      	beq.n	cd58 <radio_control_task+0x64>
    cd3c:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	2b00      	cmp	r3, #0
    cd48:	d006      	beq.n	cd58 <radio_control_task+0x64>
    cd4a:	f24b 2364 	movw	r3, #45668	; 0xb264
    cd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd52:	781b      	ldrb	r3, [r3, #0]
    cd54:	2b00      	cmp	r3, #0
    cd56:	d007      	beq.n	cd68 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cd58:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd60:	2203      	movs	r2, #3
    cd62:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cd64:	2301      	movs	r3, #1
    cd66:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cd68:	f7fa f950 	bl	700c <pprz_mode_update>
    cd6c:	4603      	mov	r3, r0
    cd6e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cd70:	79fa      	ldrb	r2, [r7, #7]
    cd72:	79bb      	ldrb	r3, [r7, #6]
    cd74:	4313      	orrs	r3, r2
    cd76:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cd78:	f7fa f994 	bl	70a4 <ir_estim_mode_update>
    cd7c:	4603      	mov	r3, r0
    cd7e:	461a      	mov	r2, r3
    cd80:	79fb      	ldrb	r3, [r7, #7]
    cd82:	4313      	orrs	r3, r2
    cd84:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cd86:	f7ff ff81 	bl	cc8c <inflight_calib_mode_update>
    cd8a:	4603      	mov	r3, r0
    cd8c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cd8e:	797b      	ldrb	r3, [r7, #5]
    cd90:	2b00      	cmp	r3, #0
    cd92:	d102      	bne.n	cd9a <radio_control_task+0xa6>
    cd94:	79bb      	ldrb	r3, [r7, #6]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d001      	beq.n	cd9e <radio_control_task+0xaa>
    cd9a:	2301      	movs	r3, #1
    cd9c:	e000      	b.n	cda0 <radio_control_task+0xac>
    cd9e:	2300      	movs	r3, #0
    cda0:	b2db      	uxtb	r3, r3
    cda2:	4618      	mov	r0, r3
    cda4:	f008 fba0 	bl	154e8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cda8:	79fa      	ldrb	r2, [r7, #7]
    cdaa:	797b      	ldrb	r3, [r7, #5]
    cdac:	4313      	orrs	r3, r2
    cdae:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cdb0:	f7fa f9a0 	bl	70f4 <mcu1_status_update>
    cdb4:	4603      	mov	r3, r0
    cdb6:	461a      	mov	r2, r3
    cdb8:	79fb      	ldrb	r3, [r7, #7]
    cdba:	4313      	orrs	r3, r2
    cdbc:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cdbe:	2301      	movs	r3, #1
    cdc0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cdc2:	79fb      	ldrb	r3, [r7, #7]
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	f000 82bc 	beq.w	d342 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cdca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd2:	781a      	ldrb	r2, [r3, #0]
    cdd4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	b2db      	uxtb	r3, r3
    cde0:	429a      	cmp	r2, r3
    cde2:	d315      	bcc.n	ce10 <radio_control_task+0x11c>
    cde4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdec:	781b      	ldrb	r3, [r3, #0]
    cdee:	b2db      	uxtb	r3, r3
    cdf0:	461a      	mov	r2, r3
    cdf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cdf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdfa:	781b      	ldrb	r3, [r3, #0]
    cdfc:	1ad3      	subs	r3, r2, r3
    cdfe:	33ff      	adds	r3, #255	; 0xff
    ce00:	2b09      	cmp	r3, #9
    ce02:	bfd4      	ite	le
    ce04:	2300      	movle	r3, #0
    ce06:	2301      	movgt	r3, #1
    ce08:	b2db      	uxtb	r3, r3
    ce0a:	e013      	b.n	ce34 <radio_control_task+0x140>
    ce0c:	2000afeb 	.word	0x2000afeb
    ce10:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ce14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce18:	781b      	ldrb	r3, [r3, #0]
    ce1a:	b2db      	uxtb	r3, r3
    ce1c:	461a      	mov	r2, r3
    ce1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	1ad3      	subs	r3, r2, r3
    ce2a:	2b09      	cmp	r3, #9
    ce2c:	bfd4      	ite	le
    ce2e:	2300      	movle	r3, #0
    ce30:	2301      	movgt	r3, #1
    ce32:	b2db      	uxtb	r3, r3
    ce34:	2b00      	cmp	r3, #0
    ce36:	f000 8278 	beq.w	d32a <radio_control_task+0x636>
    ce3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	461a      	mov	r2, r3
    ce46:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ce4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce4e:	2105      	movs	r1, #5
    ce50:	5499      	strb	r1, [r3, r2]
    ce52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	3301      	adds	r3, #1
    ce5e:	b2da      	uxtb	r2, r3
    ce60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce68:	701a      	strb	r2, [r3, #0]
    ce6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	2bff      	cmp	r3, #255	; 0xff
    ce76:	d105      	bne.n	ce84 <radio_control_task+0x190>
    ce78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce80:	2200      	movs	r2, #0
    ce82:	701a      	strb	r2, [r3, #0]
    ce84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8c:	781b      	ldrb	r3, [r3, #0]
    ce8e:	461a      	mov	r2, r3
    ce90:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ce94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce98:	210b      	movs	r1, #11
    ce9a:	5499      	strb	r1, [r3, r2]
    ce9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	3301      	adds	r3, #1
    cea8:	b2da      	uxtb	r2, r3
    ceaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ceae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb2:	701a      	strb	r2, [r3, #0]
    ceb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ceb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cebc:	781b      	ldrb	r3, [r3, #0]
    cebe:	2bff      	cmp	r3, #255	; 0xff
    cec0:	d105      	bne.n	cece <radio_control_task+0x1da>
    cec2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceca:	2200      	movs	r2, #0
    cecc:	701a      	strb	r2, [r3, #0]
    cece:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ced2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced6:	220b      	movs	r2, #11
    ced8:	701a      	strb	r2, [r3, #0]
    ceda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee2:	220b      	movs	r2, #11
    cee4:	701a      	strb	r2, [r3, #0]
    cee6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ceea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	461a      	mov	r2, r3
    cef2:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefa:	7819      	ldrb	r1, [r3, #0]
    cefc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf04:	5499      	strb	r1, [r3, r2]
    cf06:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0e:	781a      	ldrb	r2, [r3, #0]
    cf10:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	4413      	add	r3, r2
    cf1c:	b2da      	uxtb	r2, r3
    cf1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf26:	701a      	strb	r2, [r3, #0]
    cf28:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cf2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf30:	781a      	ldrb	r2, [r3, #0]
    cf32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3a:	781b      	ldrb	r3, [r3, #0]
    cf3c:	4413      	add	r3, r2
    cf3e:	b2da      	uxtb	r2, r3
    cf40:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cf44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf48:	701a      	strb	r2, [r3, #0]
    cf4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	3301      	adds	r3, #1
    cf56:	b2da      	uxtb	r2, r3
    cf58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf60:	701a      	strb	r2, [r3, #0]
    cf62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	2bff      	cmp	r3, #255	; 0xff
    cf6e:	d105      	bne.n	cf7c <radio_control_task+0x288>
    cf70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf78:	2200      	movs	r2, #0
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf84:	781b      	ldrb	r3, [r3, #0]
    cf86:	461a      	mov	r2, r3
    cf88:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    cf8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf90:	7819      	ldrb	r1, [r3, #0]
    cf92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cf96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf9a:	5499      	strb	r1, [r3, r2]
    cf9c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa4:	781a      	ldrb	r2, [r3, #0]
    cfa6:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    cfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	4413      	add	r3, r2
    cfb2:	b2da      	uxtb	r2, r3
    cfb4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfbc:	701a      	strb	r2, [r3, #0]
    cfbe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cfc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc6:	781a      	ldrb	r2, [r3, #0]
    cfc8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cfcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd0:	781b      	ldrb	r3, [r3, #0]
    cfd2:	4413      	add	r3, r2
    cfd4:	b2da      	uxtb	r2, r3
    cfd6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfde:	701a      	strb	r2, [r3, #0]
    cfe0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe8:	781b      	ldrb	r3, [r3, #0]
    cfea:	3301      	adds	r3, #1
    cfec:	b2da      	uxtb	r2, r3
    cfee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff6:	701a      	strb	r2, [r3, #0]
    cff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d000:	781b      	ldrb	r3, [r3, #0]
    d002:	2bff      	cmp	r3, #255	; 0xff
    d004:	d105      	bne.n	d012 <radio_control_task+0x31e>
    d006:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00e:	2200      	movs	r2, #0
    d010:	701a      	strb	r2, [r3, #0]
    d012:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	461a      	mov	r2, r3
    d01e:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d026:	7819      	ldrb	r1, [r3, #0]
    d028:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d030:	5499      	strb	r1, [r3, r2]
    d032:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03a:	781a      	ldrb	r2, [r3, #0]
    d03c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d044:	781b      	ldrb	r3, [r3, #0]
    d046:	4413      	add	r3, r2
    d048:	b2da      	uxtb	r2, r3
    d04a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d052:	701a      	strb	r2, [r3, #0]
    d054:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05c:	781a      	ldrb	r2, [r3, #0]
    d05e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d066:	781b      	ldrb	r3, [r3, #0]
    d068:	4413      	add	r3, r2
    d06a:	b2da      	uxtb	r2, r3
    d06c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d074:	701a      	strb	r2, [r3, #0]
    d076:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d07e:	781b      	ldrb	r3, [r3, #0]
    d080:	3301      	adds	r3, #1
    d082:	b2da      	uxtb	r2, r3
    d084:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08c:	701a      	strb	r2, [r3, #0]
    d08e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d096:	781b      	ldrb	r3, [r3, #0]
    d098:	2bff      	cmp	r3, #255	; 0xff
    d09a:	d105      	bne.n	d0a8 <radio_control_task+0x3b4>
    d09c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a4:	2200      	movs	r2, #0
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	461a      	mov	r2, r3
    d0b4:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0bc:	7819      	ldrb	r1, [r3, #0]
    d0be:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c6:	5499      	strb	r1, [r3, r2]
    d0c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d0:	781a      	ldrb	r2, [r3, #0]
    d0d2:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0da:	781b      	ldrb	r3, [r3, #0]
    d0dc:	4413      	add	r3, r2
    d0de:	b2da      	uxtb	r2, r3
    d0e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e8:	701a      	strb	r2, [r3, #0]
    d0ea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f2:	781a      	ldrb	r2, [r3, #0]
    d0f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0fc:	781b      	ldrb	r3, [r3, #0]
    d0fe:	4413      	add	r3, r2
    d100:	b2da      	uxtb	r2, r3
    d102:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d10a:	701a      	strb	r2, [r3, #0]
    d10c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d114:	781b      	ldrb	r3, [r3, #0]
    d116:	3301      	adds	r3, #1
    d118:	b2da      	uxtb	r2, r3
    d11a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d122:	701a      	strb	r2, [r3, #0]
    d124:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12c:	781b      	ldrb	r3, [r3, #0]
    d12e:	2bff      	cmp	r3, #255	; 0xff
    d130:	d105      	bne.n	d13e <radio_control_task+0x44a>
    d132:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d13a:	2200      	movs	r2, #0
    d13c:	701a      	strb	r2, [r3, #0]
    d13e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	461a      	mov	r2, r3
    d14a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d152:	7819      	ldrb	r1, [r3, #0]
    d154:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15c:	5499      	strb	r1, [r3, r2]
    d15e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d166:	781a      	ldrb	r2, [r3, #0]
    d168:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d170:	781b      	ldrb	r3, [r3, #0]
    d172:	4413      	add	r3, r2
    d174:	b2da      	uxtb	r2, r3
    d176:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d17e:	701a      	strb	r2, [r3, #0]
    d180:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d188:	781a      	ldrb	r2, [r3, #0]
    d18a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d192:	781b      	ldrb	r3, [r3, #0]
    d194:	4413      	add	r3, r2
    d196:	b2da      	uxtb	r2, r3
    d198:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a0:	701a      	strb	r2, [r3, #0]
    d1a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1aa:	781b      	ldrb	r3, [r3, #0]
    d1ac:	3301      	adds	r3, #1
    d1ae:	b2da      	uxtb	r2, r3
    d1b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b8:	701a      	strb	r2, [r3, #0]
    d1ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c2:	781b      	ldrb	r3, [r3, #0]
    d1c4:	2bff      	cmp	r3, #255	; 0xff
    d1c6:	d105      	bne.n	d1d4 <radio_control_task+0x4e0>
    d1c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d0:	2200      	movs	r2, #0
    d1d2:	701a      	strb	r2, [r3, #0]
    d1d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	461a      	mov	r2, r3
    d1e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e8:	7819      	ldrb	r1, [r3, #0]
    d1ea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f2:	5499      	strb	r1, [r3, r2]
    d1f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1fc:	781b      	ldrb	r3, [r3, #0]
    d1fe:	3301      	adds	r3, #1
    d200:	b2da      	uxtb	r2, r3
    d202:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20a:	701a      	strb	r2, [r3, #0]
    d20c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d214:	781b      	ldrb	r3, [r3, #0]
    d216:	2bff      	cmp	r3, #255	; 0xff
    d218:	d105      	bne.n	d226 <radio_control_task+0x532>
    d21a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d222:	2200      	movs	r2, #0
    d224:	701a      	strb	r2, [r3, #0]
    d226:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22e:	781b      	ldrb	r3, [r3, #0]
    d230:	461a      	mov	r2, r3
    d232:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d23a:	7819      	ldrb	r1, [r3, #0]
    d23c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d244:	5499      	strb	r1, [r3, r2]
    d246:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	3301      	adds	r3, #1
    d252:	b2da      	uxtb	r2, r3
    d254:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25c:	701a      	strb	r2, [r3, #0]
    d25e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	2bff      	cmp	r3, #255	; 0xff
    d26a:	d105      	bne.n	d278 <radio_control_task+0x584>
    d26c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d274:	2200      	movs	r2, #0
    d276:	701a      	strb	r2, [r3, #0]
    d278:	f242 0339 	movw	r3, #8249	; 0x2039
    d27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	b2db      	uxtb	r3, r3
    d284:	f003 0310 	and.w	r3, r3, #16
    d288:	2b00      	cmp	r3, #0
    d28a:	d15a      	bne.n	d342 <radio_control_task+0x64e>
    d28c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d294:	781b      	ldrb	r3, [r3, #0]
    d296:	b2db      	uxtb	r3, r3
    d298:	461a      	mov	r2, r3
    d29a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a2:	5c9a      	ldrb	r2, [r3, r2]
    d2a4:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    d2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ac:	701a      	strb	r2, [r3, #0]
    d2ae:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    d2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b6:	2200      	movs	r2, #0
    d2b8:	701a      	strb	r2, [r3, #0]
    d2ba:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c2:	781b      	ldrb	r3, [r3, #0]
    d2c4:	b2db      	uxtb	r3, r3
    d2c6:	3301      	adds	r3, #1
    d2c8:	b2da      	uxtb	r2, r3
    d2ca:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d2:	701a      	strb	r2, [r3, #0]
    d2d4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	b2db      	uxtb	r3, r3
    d2e0:	2bff      	cmp	r3, #255	; 0xff
    d2e2:	d105      	bne.n	d2f0 <radio_control_task+0x5fc>
    d2e4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ec:	2200      	movs	r2, #0
    d2ee:	701a      	strb	r2, [r3, #0]
    d2f0:	f242 0338 	movw	r3, #8248	; 0x2038
    d2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f8:	f242 0238 	movw	r2, #8248	; 0x2038
    d2fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d300:	7812      	ldrb	r2, [r2, #0]
    d302:	b2d2      	uxtb	r2, r2
    d304:	f042 0201 	orr.w	r2, r2, #1
    d308:	b2d2      	uxtb	r2, r2
    d30a:	701a      	strb	r2, [r3, #0]
    d30c:	f242 0339 	movw	r3, #8249	; 0x2039
    d310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d314:	f242 0239 	movw	r2, #8249	; 0x2039
    d318:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d31c:	7812      	ldrb	r2, [r2, #0]
    d31e:	b2d2      	uxtb	r2, r2
    d320:	f042 0210 	orr.w	r2, r2, #16
    d324:	b2d2      	uxtb	r2, r2
    d326:	701a      	strb	r2, [r3, #0]
    d328:	e00b      	b.n	d342 <radio_control_task+0x64e>
    d32a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d332:	781b      	ldrb	r3, [r3, #0]
    d334:	3301      	adds	r3, #1
    d336:	b2da      	uxtb	r2, r3
    d338:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d340:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d342:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34a:	885b      	ldrh	r3, [r3, #2]
    d34c:	b21b      	sxth	r3, r3
    d34e:	4618      	mov	r0, r3
    d350:	f00a fe96 	bl	18080 <__aeabi_i2f>
    d354:	4603      	mov	r3, r0
    d356:	4618      	mov	r0, r3
    d358:	f04f 0100 	mov.w	r1, #0
    d35c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d360:	f00a ff96 	bl	18290 <__aeabi_fdiv>
    d364:	4603      	mov	r3, r0
    d366:	4618      	mov	r0, r3
    d368:	f00a fa4a 	bl	17800 <__aeabi_f2d>
    d36c:	4602      	mov	r2, r0
    d36e:	460b      	mov	r3, r1
    d370:	4610      	mov	r0, r2
    d372:	4619      	mov	r1, r3
    d374:	a346      	add	r3, pc, #280	; (adr r3, d490 <radio_control_task+0x79c>)
    d376:	e9d3 2300 	ldrd	r2, r3, [r3]
    d37a:	f00a fa95 	bl	178a8 <__aeabi_dmul>
    d37e:	4602      	mov	r2, r0
    d380:	460b      	mov	r3, r1
    d382:	4610      	mov	r0, r2
    d384:	4619      	mov	r1, r3
    d386:	f04f 0200 	mov.w	r2, #0
    d38a:	f04f 0300 	mov.w	r3, #0
    d38e:	f00a f8d9 	bl	17544 <__adddf3>
    d392:	4602      	mov	r2, r0
    d394:	460b      	mov	r3, r1
    d396:	4610      	mov	r0, r2
    d398:	4619      	mov	r1, r3
    d39a:	f00a fd67 	bl	17e6c <__aeabi_d2f>
    d39e:	4602      	mov	r2, r0
    d3a0:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    d3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a8:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d3aa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b2:	889b      	ldrh	r3, [r3, #4]
    d3b4:	b21b      	sxth	r3, r3
    d3b6:	4618      	mov	r0, r3
    d3b8:	f00a fe62 	bl	18080 <__aeabi_i2f>
    d3bc:	4603      	mov	r3, r0
    d3be:	4618      	mov	r0, r3
    d3c0:	f04f 0100 	mov.w	r1, #0
    d3c4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d3c8:	f00a ff62 	bl	18290 <__aeabi_fdiv>
    d3cc:	4603      	mov	r3, r0
    d3ce:	4618      	mov	r0, r3
    d3d0:	f00a fa16 	bl	17800 <__aeabi_f2d>
    d3d4:	4602      	mov	r2, r0
    d3d6:	460b      	mov	r3, r1
    d3d8:	4610      	mov	r0, r2
    d3da:	4619      	mov	r1, r3
    d3dc:	f04f 0200 	mov.w	r2, #0
    d3e0:	f04f 0300 	mov.w	r3, #0
    d3e4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d3e8:	f00a fa5e 	bl	178a8 <__aeabi_dmul>
    d3ec:	4602      	mov	r2, r0
    d3ee:	460b      	mov	r3, r1
    d3f0:	4610      	mov	r0, r2
    d3f2:	4619      	mov	r1, r3
    d3f4:	f04f 0200 	mov.w	r2, #0
    d3f8:	f04f 0300 	mov.w	r3, #0
    d3fc:	f00a f8a2 	bl	17544 <__adddf3>
    d400:	4602      	mov	r2, r0
    d402:	460b      	mov	r3, r1
    d404:	4610      	mov	r0, r2
    d406:	4619      	mov	r1, r3
    d408:	f00a fd30 	bl	17e6c <__aeabi_d2f>
    d40c:	4602      	mov	r2, r0
    d40e:	f24b 2300 	movw	r3, #45568	; 0xb200
    d412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d416:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d418:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d420:	881a      	ldrh	r2, [r3, #0]
    d422:	f24b 2304 	movw	r3, #45572	; 0xb204
    d426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d42a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d42c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d434:	7c9a      	ldrb	r2, [r3, #18]
    d436:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d43e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d440:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d448:	7d5a      	ldrb	r2, [r3, #21]
    d44a:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d452:	701a      	strb	r2, [r3, #0]

    events_update();
    d454:	f7f9 fe7e 	bl	7154 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d458:	f7f8 fc7e 	bl	5d58 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d45c:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d464:	781b      	ldrb	r3, [r3, #0]
    d466:	2b02      	cmp	r3, #2
    d468:	d10e      	bne.n	d488 <radio_control_task+0x794>
    d46a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d472:	881b      	ldrh	r3, [r3, #0]
    d474:	b21b      	sxth	r3, r3
    d476:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d47a:	dd05      	ble.n	d488 <radio_control_task+0x794>
	launch = TRUE;
    d47c:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    d480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d484:	2201      	movs	r2, #1
    d486:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d488:	3708      	adds	r7, #8
    d48a:	46bd      	mov	sp, r7
    d48c:	bd80      	pop	{r7, pc}
    d48e:	bf00      	nop
    d490:	33333333 	.word	0x33333333
    d494:	bfe33333 	.word	0xbfe33333

0000d498 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d498:	b580      	push	{r7, lr}
    d49a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d49c:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    d4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a4:	2203      	movs	r2, #3
    d4a6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d4a8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b0:	781b      	ldrb	r3, [r3, #0]
    d4b2:	2b03      	cmp	r3, #3
    d4b4:	d102      	bne.n	d4bc <navigation_update+0x24>
    nav_home();
    d4b6:	f007 fa9b 	bl	149f0 <nav_home>
    d4ba:	e001      	b.n	d4c0 <navigation_update+0x28>
  else
    nav_update();
    d4bc:	f007 fabe 	bl	14a3c <nav_update>
}
    d4c0:	bd80      	pop	{r7, pc}
    d4c2:	bf00      	nop

0000d4c4 <send_nav_values>:

void send_nav_values(void){
    d4c4:	b480      	push	{r7}
    d4c6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d4c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d0:	781a      	ldrb	r2, [r3, #0]
    d4d2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	b2db      	uxtb	r3, r3
    d4de:	429a      	cmp	r2, r3
    d4e0:	d313      	bcc.n	d50a <send_nav_values+0x46>
    d4e2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ea:	781b      	ldrb	r3, [r3, #0]
    d4ec:	b2db      	uxtb	r3, r3
    d4ee:	461a      	mov	r2, r3
    d4f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	1ad3      	subs	r3, r2, r3
    d4fc:	33ff      	adds	r3, #255	; 0xff
    d4fe:	2b1e      	cmp	r3, #30
    d500:	bfd4      	ite	le
    d502:	2300      	movle	r3, #0
    d504:	2301      	movgt	r3, #1
    d506:	b2db      	uxtb	r3, r3
    d508:	e011      	b.n	d52e <send_nav_values+0x6a>
    d50a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d512:	781b      	ldrb	r3, [r3, #0]
    d514:	b2db      	uxtb	r3, r3
    d516:	461a      	mov	r2, r3
    d518:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	1ad3      	subs	r3, r2, r3
    d524:	2b1e      	cmp	r3, #30
    d526:	bfd4      	ite	le
    d528:	2300      	movle	r3, #0
    d52a:	2301      	movgt	r3, #1
    d52c:	b2db      	uxtb	r3, r3
    d52e:	2b00      	cmp	r3, #0
    d530:	f001 8094 	beq.w	e65c <send_nav_values+0x1198>
    d534:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	461a      	mov	r2, r3
    d540:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d548:	2105      	movs	r1, #5
    d54a:	5499      	strb	r1, [r3, r2]
    d54c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d554:	781b      	ldrb	r3, [r3, #0]
    d556:	3301      	adds	r3, #1
    d558:	b2da      	uxtb	r2, r3
    d55a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d562:	701a      	strb	r2, [r3, #0]
    d564:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	2bff      	cmp	r3, #255	; 0xff
    d570:	d105      	bne.n	d57e <send_nav_values+0xba>
    d572:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57a:	2200      	movs	r2, #0
    d57c:	701a      	strb	r2, [r3, #0]
    d57e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d586:	781b      	ldrb	r3, [r3, #0]
    d588:	461a      	mov	r2, r3
    d58a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d592:	210a      	movs	r1, #10
    d594:	5499      	strb	r1, [r3, r2]
    d596:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d59e:	781b      	ldrb	r3, [r3, #0]
    d5a0:	3301      	adds	r3, #1
    d5a2:	b2da      	uxtb	r2, r3
    d5a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ac:	701a      	strb	r2, [r3, #0]
    d5ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b6:	781b      	ldrb	r3, [r3, #0]
    d5b8:	2bff      	cmp	r3, #255	; 0xff
    d5ba:	d105      	bne.n	d5c8 <send_nav_values+0x104>
    d5bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c4:	2200      	movs	r2, #0
    d5c6:	701a      	strb	r2, [r3, #0]
    d5c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	220a      	movs	r2, #10
    d5d2:	701a      	strb	r2, [r3, #0]
    d5d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5dc:	220a      	movs	r2, #10
    d5de:	701a      	strb	r2, [r3, #0]
    d5e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	781b      	ldrb	r3, [r3, #0]
    d5ea:	461a      	mov	r2, r3
    d5ec:	f24b 2329 	movw	r3, #45609	; 0xb229
    d5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f4:	7819      	ldrb	r1, [r3, #0]
    d5f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5fe:	5499      	strb	r1, [r3, r2]
    d600:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d608:	781a      	ldrb	r2, [r3, #0]
    d60a:	f24b 2329 	movw	r3, #45609	; 0xb229
    d60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d612:	781b      	ldrb	r3, [r3, #0]
    d614:	4413      	add	r3, r2
    d616:	b2da      	uxtb	r2, r3
    d618:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d620:	701a      	strb	r2, [r3, #0]
    d622:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62a:	781a      	ldrb	r2, [r3, #0]
    d62c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d634:	781b      	ldrb	r3, [r3, #0]
    d636:	4413      	add	r3, r2
    d638:	b2da      	uxtb	r2, r3
    d63a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d642:	701a      	strb	r2, [r3, #0]
    d644:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64c:	781b      	ldrb	r3, [r3, #0]
    d64e:	3301      	adds	r3, #1
    d650:	b2da      	uxtb	r2, r3
    d652:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65a:	701a      	strb	r2, [r3, #0]
    d65c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	2bff      	cmp	r3, #255	; 0xff
    d668:	d105      	bne.n	d676 <send_nav_values+0x1b2>
    d66a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d672:	2200      	movs	r2, #0
    d674:	701a      	strb	r2, [r3, #0]
    d676:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67e:	781b      	ldrb	r3, [r3, #0]
    d680:	461a      	mov	r2, r3
    d682:	f24b 2328 	movw	r3, #45608	; 0xb228
    d686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68a:	7819      	ldrb	r1, [r3, #0]
    d68c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d694:	5499      	strb	r1, [r3, r2]
    d696:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	781a      	ldrb	r2, [r3, #0]
    d6a0:	f24b 2328 	movw	r3, #45608	; 0xb228
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	4413      	add	r3, r2
    d6ac:	b2da      	uxtb	r2, r3
    d6ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	701a      	strb	r2, [r3, #0]
    d6b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	781a      	ldrb	r2, [r3, #0]
    d6c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ca:	781b      	ldrb	r3, [r3, #0]
    d6cc:	4413      	add	r3, r2
    d6ce:	b2da      	uxtb	r2, r3
    d6d0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d8:	701a      	strb	r2, [r3, #0]
    d6da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e2:	781b      	ldrb	r3, [r3, #0]
    d6e4:	3301      	adds	r3, #1
    d6e6:	b2da      	uxtb	r2, r3
    d6e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	701a      	strb	r2, [r3, #0]
    d6f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fa:	781b      	ldrb	r3, [r3, #0]
    d6fc:	2bff      	cmp	r3, #255	; 0xff
    d6fe:	d105      	bne.n	d70c <send_nav_values+0x248>
    d700:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	2200      	movs	r2, #0
    d70a:	701a      	strb	r2, [r3, #0]
    d70c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	461a      	mov	r2, r3
    d718:	f24b 4384 	movw	r3, #46212	; 0xb484
    d71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d720:	7819      	ldrb	r1, [r3, #0]
    d722:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72a:	5499      	strb	r1, [r3, r2]
    d72c:	f24b 4384 	movw	r3, #46212	; 0xb484
    d730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d734:	781a      	ldrb	r2, [r3, #0]
    d736:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	4413      	add	r3, r2
    d742:	b2da      	uxtb	r2, r3
    d744:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74c:	701a      	strb	r2, [r3, #0]
    d74e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d756:	781a      	ldrb	r2, [r3, #0]
    d758:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d760:	781b      	ldrb	r3, [r3, #0]
    d762:	4413      	add	r3, r2
    d764:	b2da      	uxtb	r2, r3
    d766:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d76e:	701a      	strb	r2, [r3, #0]
    d770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d778:	781b      	ldrb	r3, [r3, #0]
    d77a:	3301      	adds	r3, #1
    d77c:	b2da      	uxtb	r2, r3
    d77e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d786:	701a      	strb	r2, [r3, #0]
    d788:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d790:	781b      	ldrb	r3, [r3, #0]
    d792:	2bff      	cmp	r3, #255	; 0xff
    d794:	d105      	bne.n	d7a2 <send_nav_values+0x2de>
    d796:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79e:	2200      	movs	r2, #0
    d7a0:	701a      	strb	r2, [r3, #0]
    d7a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	461a      	mov	r2, r3
    d7ae:	f24b 4384 	movw	r3, #46212	; 0xb484
    d7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b6:	7859      	ldrb	r1, [r3, #1]
    d7b8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c0:	5499      	strb	r1, [r3, r2]
    d7c2:	4bd2      	ldr	r3, [pc, #840]	; (db0c <send_nav_values+0x648>)
    d7c4:	781a      	ldrb	r2, [r3, #0]
    d7c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	4413      	add	r3, r2
    d7d2:	b2da      	uxtb	r2, r3
    d7d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	701a      	strb	r2, [r3, #0]
    d7de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e6:	781a      	ldrb	r2, [r3, #0]
    d7e8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f0:	781b      	ldrb	r3, [r3, #0]
    d7f2:	4413      	add	r3, r2
    d7f4:	b2da      	uxtb	r2, r3
    d7f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7fe:	701a      	strb	r2, [r3, #0]
    d800:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d808:	781b      	ldrb	r3, [r3, #0]
    d80a:	3301      	adds	r3, #1
    d80c:	b2da      	uxtb	r2, r3
    d80e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d816:	701a      	strb	r2, [r3, #0]
    d818:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d820:	781b      	ldrb	r3, [r3, #0]
    d822:	2bff      	cmp	r3, #255	; 0xff
    d824:	d105      	bne.n	d832 <send_nav_values+0x36e>
    d826:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d82e:	2200      	movs	r2, #0
    d830:	701a      	strb	r2, [r3, #0]
    d832:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83a:	781b      	ldrb	r3, [r3, #0]
    d83c:	461a      	mov	r2, r3
    d83e:	f24b 4384 	movw	r3, #46212	; 0xb484
    d842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d846:	7899      	ldrb	r1, [r3, #2]
    d848:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d850:	5499      	strb	r1, [r3, r2]
    d852:	4baf      	ldr	r3, [pc, #700]	; (db10 <send_nav_values+0x64c>)
    d854:	781a      	ldrb	r2, [r3, #0]
    d856:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	4413      	add	r3, r2
    d862:	b2da      	uxtb	r2, r3
    d864:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	781a      	ldrb	r2, [r3, #0]
    d878:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d880:	781b      	ldrb	r3, [r3, #0]
    d882:	4413      	add	r3, r2
    d884:	b2da      	uxtb	r2, r3
    d886:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d88e:	701a      	strb	r2, [r3, #0]
    d890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d898:	781b      	ldrb	r3, [r3, #0]
    d89a:	3301      	adds	r3, #1
    d89c:	b2da      	uxtb	r2, r3
    d89e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a6:	701a      	strb	r2, [r3, #0]
    d8a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b0:	781b      	ldrb	r3, [r3, #0]
    d8b2:	2bff      	cmp	r3, #255	; 0xff
    d8b4:	d105      	bne.n	d8c2 <send_nav_values+0x3fe>
    d8b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8be:	2200      	movs	r2, #0
    d8c0:	701a      	strb	r2, [r3, #0]
    d8c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ca:	781b      	ldrb	r3, [r3, #0]
    d8cc:	461a      	mov	r2, r3
    d8ce:	f24b 4384 	movw	r3, #46212	; 0xb484
    d8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d6:	78d9      	ldrb	r1, [r3, #3]
    d8d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e0:	5499      	strb	r1, [r3, r2]
    d8e2:	4b8c      	ldr	r3, [pc, #560]	; (db14 <send_nav_values+0x650>)
    d8e4:	781a      	ldrb	r2, [r3, #0]
    d8e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	4413      	add	r3, r2
    d8f2:	b2da      	uxtb	r2, r3
    d8f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	701a      	strb	r2, [r3, #0]
    d8fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	781a      	ldrb	r2, [r3, #0]
    d908:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	4413      	add	r3, r2
    d914:	b2da      	uxtb	r2, r3
    d916:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	701a      	strb	r2, [r3, #0]
    d920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d928:	781b      	ldrb	r3, [r3, #0]
    d92a:	3301      	adds	r3, #1
    d92c:	b2da      	uxtb	r2, r3
    d92e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d936:	701a      	strb	r2, [r3, #0]
    d938:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	2bff      	cmp	r3, #255	; 0xff
    d944:	d105      	bne.n	d952 <send_nav_values+0x48e>
    d946:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	2200      	movs	r2, #0
    d950:	701a      	strb	r2, [r3, #0]
    d952:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d95a:	781b      	ldrb	r3, [r3, #0]
    d95c:	461a      	mov	r2, r3
    d95e:	f24b 4388 	movw	r3, #46216	; 0xb488
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	7819      	ldrb	r1, [r3, #0]
    d968:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d970:	5499      	strb	r1, [r3, r2]
    d972:	f24b 4388 	movw	r3, #46216	; 0xb488
    d976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97a:	781a      	ldrb	r2, [r3, #0]
    d97c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d984:	781b      	ldrb	r3, [r3, #0]
    d986:	4413      	add	r3, r2
    d988:	b2da      	uxtb	r2, r3
    d98a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d992:	701a      	strb	r2, [r3, #0]
    d994:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d99c:	781a      	ldrb	r2, [r3, #0]
    d99e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	4413      	add	r3, r2
    d9aa:	b2da      	uxtb	r2, r3
    d9ac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b4:	701a      	strb	r2, [r3, #0]
    d9b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9be:	781b      	ldrb	r3, [r3, #0]
    d9c0:	3301      	adds	r3, #1
    d9c2:	b2da      	uxtb	r2, r3
    d9c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9cc:	701a      	strb	r2, [r3, #0]
    d9ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d6:	781b      	ldrb	r3, [r3, #0]
    d9d8:	2bff      	cmp	r3, #255	; 0xff
    d9da:	d105      	bne.n	d9e8 <send_nav_values+0x524>
    d9dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e4:	2200      	movs	r2, #0
    d9e6:	701a      	strb	r2, [r3, #0]
    d9e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f0:	781b      	ldrb	r3, [r3, #0]
    d9f2:	461a      	mov	r2, r3
    d9f4:	f24b 4388 	movw	r3, #46216	; 0xb488
    d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fc:	7859      	ldrb	r1, [r3, #1]
    d9fe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    da02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da06:	5499      	strb	r1, [r3, r2]
    da08:	4b43      	ldr	r3, [pc, #268]	; (db18 <send_nav_values+0x654>)
    da0a:	781a      	ldrb	r2, [r3, #0]
    da0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	4413      	add	r3, r2
    da18:	b2da      	uxtb	r2, r3
    da1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da22:	701a      	strb	r2, [r3, #0]
    da24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2c:	781a      	ldrb	r2, [r3, #0]
    da2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	4413      	add	r3, r2
    da3a:	b2da      	uxtb	r2, r3
    da3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	701a      	strb	r2, [r3, #0]
    da46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	3301      	adds	r3, #1
    da52:	b2da      	uxtb	r2, r3
    da54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5c:	701a      	strb	r2, [r3, #0]
    da5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	2bff      	cmp	r3, #255	; 0xff
    da6a:	d105      	bne.n	da78 <send_nav_values+0x5b4>
    da6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da74:	2200      	movs	r2, #0
    da76:	701a      	strb	r2, [r3, #0]
    da78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	461a      	mov	r2, r3
    da84:	f24b 4388 	movw	r3, #46216	; 0xb488
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	7899      	ldrb	r1, [r3, #2]
    da8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    da92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da96:	5499      	strb	r1, [r3, r2]
    da98:	4b20      	ldr	r3, [pc, #128]	; (db1c <send_nav_values+0x658>)
    da9a:	781a      	ldrb	r2, [r3, #0]
    da9c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	4413      	add	r3, r2
    daa8:	b2da      	uxtb	r2, r3
    daaa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    daae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab2:	701a      	strb	r2, [r3, #0]
    dab4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	781a      	ldrb	r2, [r3, #0]
    dabe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac6:	781b      	ldrb	r3, [r3, #0]
    dac8:	4413      	add	r3, r2
    daca:	b2da      	uxtb	r2, r3
    dacc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dade:	781b      	ldrb	r3, [r3, #0]
    dae0:	3301      	adds	r3, #1
    dae2:	b2da      	uxtb	r2, r3
    dae4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daec:	701a      	strb	r2, [r3, #0]
    daee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    daf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf6:	781b      	ldrb	r3, [r3, #0]
    daf8:	2bff      	cmp	r3, #255	; 0xff
    dafa:	d111      	bne.n	db20 <send_nav_values+0x65c>
    dafc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db04:	2200      	movs	r2, #0
    db06:	701a      	strb	r2, [r3, #0]
    db08:	e00a      	b.n	db20 <send_nav_values+0x65c>
    db0a:	bf00      	nop
    db0c:	2000b485 	.word	0x2000b485
    db10:	2000b486 	.word	0x2000b486
    db14:	2000b487 	.word	0x2000b487
    db18:	2000b489 	.word	0x2000b489
    db1c:	2000b48a 	.word	0x2000b48a
    db20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db28:	781b      	ldrb	r3, [r3, #0]
    db2a:	461a      	mov	r2, r3
    db2c:	f24b 4388 	movw	r3, #46216	; 0xb488
    db30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db34:	78d9      	ldrb	r1, [r3, #3]
    db36:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    db3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3e:	5499      	strb	r1, [r3, r2]
    db40:	4bd3      	ldr	r3, [pc, #844]	; (de90 <send_nav_values+0x9cc>)
    db42:	781a      	ldrb	r2, [r3, #0]
    db44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4c:	781b      	ldrb	r3, [r3, #0]
    db4e:	4413      	add	r3, r2
    db50:	b2da      	uxtb	r2, r3
    db52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5a:	701a      	strb	r2, [r3, #0]
    db5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	781a      	ldrb	r2, [r3, #0]
    db66:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6e:	781b      	ldrb	r3, [r3, #0]
    db70:	4413      	add	r3, r2
    db72:	b2da      	uxtb	r2, r3
    db74:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7c:	701a      	strb	r2, [r3, #0]
    db7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db86:	781b      	ldrb	r3, [r3, #0]
    db88:	3301      	adds	r3, #1
    db8a:	b2da      	uxtb	r2, r3
    db8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	701a      	strb	r2, [r3, #0]
    db96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9e:	781b      	ldrb	r3, [r3, #0]
    dba0:	2bff      	cmp	r3, #255	; 0xff
    dba2:	d105      	bne.n	dbb0 <send_nav_values+0x6ec>
    dba4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbac:	2200      	movs	r2, #0
    dbae:	701a      	strb	r2, [r3, #0]
    dbb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb8:	781b      	ldrb	r3, [r3, #0]
    dbba:	461a      	mov	r2, r3
    dbbc:	f24b 2314 	movw	r3, #45588	; 0xb214
    dbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc4:	7819      	ldrb	r1, [r3, #0]
    dbc6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dbca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbce:	5499      	strb	r1, [r3, r2]
    dbd0:	f24b 2314 	movw	r3, #45588	; 0xb214
    dbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd8:	781a      	ldrb	r2, [r3, #0]
    dbda:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe2:	781b      	ldrb	r3, [r3, #0]
    dbe4:	4413      	add	r3, r2
    dbe6:	b2da      	uxtb	r2, r3
    dbe8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf0:	701a      	strb	r2, [r3, #0]
    dbf2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfa:	781a      	ldrb	r2, [r3, #0]
    dbfc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc04:	781b      	ldrb	r3, [r3, #0]
    dc06:	4413      	add	r3, r2
    dc08:	b2da      	uxtb	r2, r3
    dc0a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc12:	701a      	strb	r2, [r3, #0]
    dc14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc1c:	781b      	ldrb	r3, [r3, #0]
    dc1e:	3301      	adds	r3, #1
    dc20:	b2da      	uxtb	r2, r3
    dc22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	701a      	strb	r2, [r3, #0]
    dc2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc34:	781b      	ldrb	r3, [r3, #0]
    dc36:	2bff      	cmp	r3, #255	; 0xff
    dc38:	d105      	bne.n	dc46 <send_nav_values+0x782>
    dc3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc42:	2200      	movs	r2, #0
    dc44:	701a      	strb	r2, [r3, #0]
    dc46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	461a      	mov	r2, r3
    dc52:	f24b 2314 	movw	r3, #45588	; 0xb214
    dc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5a:	7859      	ldrb	r1, [r3, #1]
    dc5c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc64:	5499      	strb	r1, [r3, r2]
    dc66:	4b8b      	ldr	r3, [pc, #556]	; (de94 <send_nav_values+0x9d0>)
    dc68:	781a      	ldrb	r2, [r3, #0]
    dc6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	4413      	add	r3, r2
    dc76:	b2da      	uxtb	r2, r3
    dc78:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc80:	701a      	strb	r2, [r3, #0]
    dc82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8a:	781a      	ldrb	r2, [r3, #0]
    dc8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	4413      	add	r3, r2
    dc98:	b2da      	uxtb	r2, r3
    dc9a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca2:	701a      	strb	r2, [r3, #0]
    dca4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcac:	781b      	ldrb	r3, [r3, #0]
    dcae:	3301      	adds	r3, #1
    dcb0:	b2da      	uxtb	r2, r3
    dcb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	701a      	strb	r2, [r3, #0]
    dcbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc4:	781b      	ldrb	r3, [r3, #0]
    dcc6:	2bff      	cmp	r3, #255	; 0xff
    dcc8:	d105      	bne.n	dcd6 <send_nav_values+0x812>
    dcca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd2:	2200      	movs	r2, #0
    dcd4:	701a      	strb	r2, [r3, #0]
    dcd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcde:	781b      	ldrb	r3, [r3, #0]
    dce0:	461a      	mov	r2, r3
    dce2:	f24b 2314 	movw	r3, #45588	; 0xb214
    dce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcea:	7899      	ldrb	r1, [r3, #2]
    dcec:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	5499      	strb	r1, [r3, r2]
    dcf6:	4b68      	ldr	r3, [pc, #416]	; (de98 <send_nav_values+0x9d4>)
    dcf8:	781a      	ldrb	r2, [r3, #0]
    dcfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd02:	781b      	ldrb	r3, [r3, #0]
    dd04:	4413      	add	r3, r2
    dd06:	b2da      	uxtb	r2, r3
    dd08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd10:	701a      	strb	r2, [r3, #0]
    dd12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1a:	781a      	ldrb	r2, [r3, #0]
    dd1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd24:	781b      	ldrb	r3, [r3, #0]
    dd26:	4413      	add	r3, r2
    dd28:	b2da      	uxtb	r2, r3
    dd2a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd32:	701a      	strb	r2, [r3, #0]
    dd34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	3301      	adds	r3, #1
    dd40:	b2da      	uxtb	r2, r3
    dd42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4a:	701a      	strb	r2, [r3, #0]
    dd4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd54:	781b      	ldrb	r3, [r3, #0]
    dd56:	2bff      	cmp	r3, #255	; 0xff
    dd58:	d105      	bne.n	dd66 <send_nav_values+0x8a2>
    dd5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd62:	2200      	movs	r2, #0
    dd64:	701a      	strb	r2, [r3, #0]
    dd66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6e:	781b      	ldrb	r3, [r3, #0]
    dd70:	461a      	mov	r2, r3
    dd72:	f24b 2314 	movw	r3, #45588	; 0xb214
    dd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7a:	78d9      	ldrb	r1, [r3, #3]
    dd7c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd84:	5499      	strb	r1, [r3, r2]
    dd86:	4b45      	ldr	r3, [pc, #276]	; (de9c <send_nav_values+0x9d8>)
    dd88:	781a      	ldrb	r2, [r3, #0]
    dd8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd92:	781b      	ldrb	r3, [r3, #0]
    dd94:	4413      	add	r3, r2
    dd96:	b2da      	uxtb	r2, r3
    dd98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda0:	701a      	strb	r2, [r3, #0]
    dda2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddaa:	781a      	ldrb	r2, [r3, #0]
    ddac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ddb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb4:	781b      	ldrb	r3, [r3, #0]
    ddb6:	4413      	add	r3, r2
    ddb8:	b2da      	uxtb	r2, r3
    ddba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ddbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc2:	701a      	strb	r2, [r3, #0]
    ddc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	3301      	adds	r3, #1
    ddd0:	b2da      	uxtb	r2, r3
    ddd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddda:	701a      	strb	r2, [r3, #0]
    dddc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	2bff      	cmp	r3, #255	; 0xff
    dde8:	d105      	bne.n	ddf6 <send_nav_values+0x932>
    ddea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf2:	2200      	movs	r2, #0
    ddf4:	701a      	strb	r2, [r3, #0]
    ddf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	461a      	mov	r2, r3
    de02:	f24b 235c 	movw	r3, #45660	; 0xb25c
    de06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de0a:	7819      	ldrb	r1, [r3, #0]
    de0c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    de10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de14:	5499      	strb	r1, [r3, r2]
    de16:	f24b 235c 	movw	r3, #45660	; 0xb25c
    de1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1e:	781a      	ldrb	r2, [r3, #0]
    de20:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	4413      	add	r3, r2
    de2c:	b2da      	uxtb	r2, r3
    de2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de36:	701a      	strb	r2, [r3, #0]
    de38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de40:	781a      	ldrb	r2, [r3, #0]
    de42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4a:	781b      	ldrb	r3, [r3, #0]
    de4c:	4413      	add	r3, r2
    de4e:	b2da      	uxtb	r2, r3
    de50:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de58:	701a      	strb	r2, [r3, #0]
    de5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	3301      	adds	r3, #1
    de66:	b2da      	uxtb	r2, r3
    de68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de70:	701a      	strb	r2, [r3, #0]
    de72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	2bff      	cmp	r3, #255	; 0xff
    de7e:	d10f      	bne.n	dea0 <send_nav_values+0x9dc>
    de80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de88:	2200      	movs	r2, #0
    de8a:	701a      	strb	r2, [r3, #0]
    de8c:	e008      	b.n	dea0 <send_nav_values+0x9dc>
    de8e:	bf00      	nop
    de90:	2000b48b 	.word	0x2000b48b
    de94:	2000b215 	.word	0x2000b215
    de98:	2000b216 	.word	0x2000b216
    de9c:	2000b217 	.word	0x2000b217
    dea0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	781b      	ldrb	r3, [r3, #0]
    deaa:	461a      	mov	r2, r3
    deac:	f24b 235c 	movw	r3, #45660	; 0xb25c
    deb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb4:	7859      	ldrb	r1, [r3, #1]
    deb6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    deba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    debe:	5499      	strb	r1, [r3, r2]
    dec0:	4bd1      	ldr	r3, [pc, #836]	; (e208 <send_nav_values+0xd44>)
    dec2:	781a      	ldrb	r2, [r3, #0]
    dec4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    decc:	781b      	ldrb	r3, [r3, #0]
    dece:	4413      	add	r3, r2
    ded0:	b2da      	uxtb	r2, r3
    ded2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ded6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee4:	781a      	ldrb	r2, [r3, #0]
    dee6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    deea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	4413      	add	r3, r2
    def2:	b2da      	uxtb	r2, r3
    def4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    def8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defc:	701a      	strb	r2, [r3, #0]
    defe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	3301      	adds	r3, #1
    df0a:	b2da      	uxtb	r2, r3
    df0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df14:	701a      	strb	r2, [r3, #0]
    df16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	2bff      	cmp	r3, #255	; 0xff
    df22:	d105      	bne.n	df30 <send_nav_values+0xa6c>
    df24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2c:	2200      	movs	r2, #0
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	461a      	mov	r2, r3
    df3c:	f24b 235c 	movw	r3, #45660	; 0xb25c
    df40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df44:	7899      	ldrb	r1, [r3, #2]
    df46:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    df4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df4e:	5499      	strb	r1, [r3, r2]
    df50:	4bae      	ldr	r3, [pc, #696]	; (e20c <send_nav_values+0xd48>)
    df52:	781a      	ldrb	r2, [r3, #0]
    df54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df5c:	781b      	ldrb	r3, [r3, #0]
    df5e:	4413      	add	r3, r2
    df60:	b2da      	uxtb	r2, r3
    df62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	701a      	strb	r2, [r3, #0]
    df6c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df74:	781a      	ldrb	r2, [r3, #0]
    df76:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df7e:	781b      	ldrb	r3, [r3, #0]
    df80:	4413      	add	r3, r2
    df82:	b2da      	uxtb	r2, r3
    df84:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df8c:	701a      	strb	r2, [r3, #0]
    df8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df96:	781b      	ldrb	r3, [r3, #0]
    df98:	3301      	adds	r3, #1
    df9a:	b2da      	uxtb	r2, r3
    df9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa4:	701a      	strb	r2, [r3, #0]
    dfa6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	2bff      	cmp	r3, #255	; 0xff
    dfb2:	d105      	bne.n	dfc0 <send_nav_values+0xafc>
    dfb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbc:	2200      	movs	r2, #0
    dfbe:	701a      	strb	r2, [r3, #0]
    dfc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc8:	781b      	ldrb	r3, [r3, #0]
    dfca:	461a      	mov	r2, r3
    dfcc:	f24b 235c 	movw	r3, #45660	; 0xb25c
    dfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd4:	78d9      	ldrb	r1, [r3, #3]
    dfd6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfde:	5499      	strb	r1, [r3, r2]
    dfe0:	4b8b      	ldr	r3, [pc, #556]	; (e210 <send_nav_values+0xd4c>)
    dfe2:	781a      	ldrb	r2, [r3, #0]
    dfe4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfec:	781b      	ldrb	r3, [r3, #0]
    dfee:	4413      	add	r3, r2
    dff0:	b2da      	uxtb	r2, r3
    dff2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dffa:	701a      	strb	r2, [r3, #0]
    dffc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e004:	781a      	ldrb	r2, [r3, #0]
    e006:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	4413      	add	r3, r2
    e012:	b2da      	uxtb	r2, r3
    e014:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	3301      	adds	r3, #1
    e02a:	b2da      	uxtb	r2, r3
    e02c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e034:	701a      	strb	r2, [r3, #0]
    e036:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e03a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03e:	781b      	ldrb	r3, [r3, #0]
    e040:	2bff      	cmp	r3, #255	; 0xff
    e042:	d105      	bne.n	e050 <send_nav_values+0xb8c>
    e044:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04c:	2200      	movs	r2, #0
    e04e:	701a      	strb	r2, [r3, #0]
    e050:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e058:	781b      	ldrb	r3, [r3, #0]
    e05a:	461a      	mov	r2, r3
    e05c:	f240 4308 	movw	r3, #1032	; 0x408
    e060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e064:	7819      	ldrb	r1, [r3, #0]
    e066:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06e:	5499      	strb	r1, [r3, r2]
    e070:	f240 4308 	movw	r3, #1032	; 0x408
    e074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e078:	781a      	ldrb	r2, [r3, #0]
    e07a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e082:	781b      	ldrb	r3, [r3, #0]
    e084:	4413      	add	r3, r2
    e086:	b2da      	uxtb	r2, r3
    e088:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e090:	701a      	strb	r2, [r3, #0]
    e092:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09a:	781a      	ldrb	r2, [r3, #0]
    e09c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	4413      	add	r3, r2
    e0a8:	b2da      	uxtb	r2, r3
    e0aa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b2:	701a      	strb	r2, [r3, #0]
    e0b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0bc:	781b      	ldrb	r3, [r3, #0]
    e0be:	3301      	adds	r3, #1
    e0c0:	b2da      	uxtb	r2, r3
    e0c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ca:	701a      	strb	r2, [r3, #0]
    e0cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d4:	781b      	ldrb	r3, [r3, #0]
    e0d6:	2bff      	cmp	r3, #255	; 0xff
    e0d8:	d105      	bne.n	e0e6 <send_nav_values+0xc22>
    e0da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e2:	2200      	movs	r2, #0
    e0e4:	701a      	strb	r2, [r3, #0]
    e0e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ee:	781b      	ldrb	r3, [r3, #0]
    e0f0:	461a      	mov	r2, r3
    e0f2:	f240 4308 	movw	r3, #1032	; 0x408
    e0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fa:	7859      	ldrb	r1, [r3, #1]
    e0fc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e104:	5499      	strb	r1, [r3, r2]
    e106:	4b43      	ldr	r3, [pc, #268]	; (e214 <send_nav_values+0xd50>)
    e108:	781a      	ldrb	r2, [r3, #0]
    e10a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e112:	781b      	ldrb	r3, [r3, #0]
    e114:	4413      	add	r3, r2
    e116:	b2da      	uxtb	r2, r3
    e118:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e120:	701a      	strb	r2, [r3, #0]
    e122:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12a:	781a      	ldrb	r2, [r3, #0]
    e12c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	4413      	add	r3, r2
    e138:	b2da      	uxtb	r2, r3
    e13a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e142:	701a      	strb	r2, [r3, #0]
    e144:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	3301      	adds	r3, #1
    e150:	b2da      	uxtb	r2, r3
    e152:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15a:	701a      	strb	r2, [r3, #0]
    e15c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e164:	781b      	ldrb	r3, [r3, #0]
    e166:	2bff      	cmp	r3, #255	; 0xff
    e168:	d105      	bne.n	e176 <send_nav_values+0xcb2>
    e16a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e172:	2200      	movs	r2, #0
    e174:	701a      	strb	r2, [r3, #0]
    e176:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17e:	781b      	ldrb	r3, [r3, #0]
    e180:	461a      	mov	r2, r3
    e182:	f240 4308 	movw	r3, #1032	; 0x408
    e186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18a:	7899      	ldrb	r1, [r3, #2]
    e18c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e194:	5499      	strb	r1, [r3, r2]
    e196:	4b20      	ldr	r3, [pc, #128]	; (e218 <send_nav_values+0xd54>)
    e198:	781a      	ldrb	r2, [r3, #0]
    e19a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a2:	781b      	ldrb	r3, [r3, #0]
    e1a4:	4413      	add	r3, r2
    e1a6:	b2da      	uxtb	r2, r3
    e1a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b0:	701a      	strb	r2, [r3, #0]
    e1b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ba:	781a      	ldrb	r2, [r3, #0]
    e1bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	4413      	add	r3, r2
    e1c8:	b2da      	uxtb	r2, r3
    e1ca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d2:	701a      	strb	r2, [r3, #0]
    e1d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	3301      	adds	r3, #1
    e1e0:	b2da      	uxtb	r2, r3
    e1e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ea:	701a      	strb	r2, [r3, #0]
    e1ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f4:	781b      	ldrb	r3, [r3, #0]
    e1f6:	2bff      	cmp	r3, #255	; 0xff
    e1f8:	d110      	bne.n	e21c <send_nav_values+0xd58>
    e1fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e202:	2200      	movs	r2, #0
    e204:	701a      	strb	r2, [r3, #0]
    e206:	e009      	b.n	e21c <send_nav_values+0xd58>
    e208:	2000b25d 	.word	0x2000b25d
    e20c:	2000b25e 	.word	0x2000b25e
    e210:	2000b25f 	.word	0x2000b25f
    e214:	20000409 	.word	0x20000409
    e218:	2000040a 	.word	0x2000040a
    e21c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e224:	781b      	ldrb	r3, [r3, #0]
    e226:	461a      	mov	r2, r3
    e228:	f240 4308 	movw	r3, #1032	; 0x408
    e22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e230:	78d9      	ldrb	r1, [r3, #3]
    e232:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23a:	5499      	strb	r1, [r3, r2]
    e23c:	4bc2      	ldr	r3, [pc, #776]	; (e548 <send_nav_values+0x1084>)
    e23e:	781a      	ldrb	r2, [r3, #0]
    e240:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e248:	781b      	ldrb	r3, [r3, #0]
    e24a:	4413      	add	r3, r2
    e24c:	b2da      	uxtb	r2, r3
    e24e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e256:	701a      	strb	r2, [r3, #0]
    e258:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e260:	781a      	ldrb	r2, [r3, #0]
    e262:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	4413      	add	r3, r2
    e26e:	b2da      	uxtb	r2, r3
    e270:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e278:	701a      	strb	r2, [r3, #0]
    e27a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e282:	781b      	ldrb	r3, [r3, #0]
    e284:	3301      	adds	r3, #1
    e286:	b2da      	uxtb	r2, r3
    e288:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e290:	701a      	strb	r2, [r3, #0]
    e292:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29a:	781b      	ldrb	r3, [r3, #0]
    e29c:	2bff      	cmp	r3, #255	; 0xff
    e29e:	d105      	bne.n	e2ac <send_nav_values+0xde8>
    e2a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a8:	2200      	movs	r2, #0
    e2aa:	701a      	strb	r2, [r3, #0]
    e2ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b4:	781b      	ldrb	r3, [r3, #0]
    e2b6:	461a      	mov	r2, r3
    e2b8:	f24b 2360 	movw	r3, #45664	; 0xb260
    e2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c0:	7819      	ldrb	r1, [r3, #0]
    e2c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ca:	5499      	strb	r1, [r3, r2]
    e2cc:	f24b 2360 	movw	r3, #45664	; 0xb260
    e2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d4:	781a      	ldrb	r2, [r3, #0]
    e2d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	4413      	add	r3, r2
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ec:	701a      	strb	r2, [r3, #0]
    e2ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f6:	781a      	ldrb	r2, [r3, #0]
    e2f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e300:	781b      	ldrb	r3, [r3, #0]
    e302:	4413      	add	r3, r2
    e304:	b2da      	uxtb	r2, r3
    e306:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e30e:	701a      	strb	r2, [r3, #0]
    e310:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	3301      	adds	r3, #1
    e31c:	b2da      	uxtb	r2, r3
    e31e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e326:	701a      	strb	r2, [r3, #0]
    e328:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	2bff      	cmp	r3, #255	; 0xff
    e334:	d105      	bne.n	e342 <send_nav_values+0xe7e>
    e336:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e33e:	2200      	movs	r2, #0
    e340:	701a      	strb	r2, [r3, #0]
    e342:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34a:	781b      	ldrb	r3, [r3, #0]
    e34c:	461a      	mov	r2, r3
    e34e:	f24b 2360 	movw	r3, #45664	; 0xb260
    e352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e356:	7859      	ldrb	r1, [r3, #1]
    e358:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e360:	5499      	strb	r1, [r3, r2]
    e362:	4b7a      	ldr	r3, [pc, #488]	; (e54c <send_nav_values+0x1088>)
    e364:	781a      	ldrb	r2, [r3, #0]
    e366:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	4413      	add	r3, r2
    e372:	b2da      	uxtb	r2, r3
    e374:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e386:	781a      	ldrb	r2, [r3, #0]
    e388:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e390:	781b      	ldrb	r3, [r3, #0]
    e392:	4413      	add	r3, r2
    e394:	b2da      	uxtb	r2, r3
    e396:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e39e:	701a      	strb	r2, [r3, #0]
    e3a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a8:	781b      	ldrb	r3, [r3, #0]
    e3aa:	3301      	adds	r3, #1
    e3ac:	b2da      	uxtb	r2, r3
    e3ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b6:	701a      	strb	r2, [r3, #0]
    e3b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c0:	781b      	ldrb	r3, [r3, #0]
    e3c2:	2bff      	cmp	r3, #255	; 0xff
    e3c4:	d105      	bne.n	e3d2 <send_nav_values+0xf0e>
    e3c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ce:	2200      	movs	r2, #0
    e3d0:	701a      	strb	r2, [r3, #0]
    e3d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	461a      	mov	r2, r3
    e3de:	f24b 2360 	movw	r3, #45664	; 0xb260
    e3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e6:	7899      	ldrb	r1, [r3, #2]
    e3e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f0:	5499      	strb	r1, [r3, r2]
    e3f2:	4b57      	ldr	r3, [pc, #348]	; (e550 <send_nav_values+0x108c>)
    e3f4:	781a      	ldrb	r2, [r3, #0]
    e3f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fe:	781b      	ldrb	r3, [r3, #0]
    e400:	4413      	add	r3, r2
    e402:	b2da      	uxtb	r2, r3
    e404:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e40c:	701a      	strb	r2, [r3, #0]
    e40e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e416:	781a      	ldrb	r2, [r3, #0]
    e418:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e420:	781b      	ldrb	r3, [r3, #0]
    e422:	4413      	add	r3, r2
    e424:	b2da      	uxtb	r2, r3
    e426:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e42e:	701a      	strb	r2, [r3, #0]
    e430:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e438:	781b      	ldrb	r3, [r3, #0]
    e43a:	3301      	adds	r3, #1
    e43c:	b2da      	uxtb	r2, r3
    e43e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e446:	701a      	strb	r2, [r3, #0]
    e448:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e450:	781b      	ldrb	r3, [r3, #0]
    e452:	2bff      	cmp	r3, #255	; 0xff
    e454:	d105      	bne.n	e462 <send_nav_values+0xf9e>
    e456:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e45e:	2200      	movs	r2, #0
    e460:	701a      	strb	r2, [r3, #0]
    e462:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46a:	781b      	ldrb	r3, [r3, #0]
    e46c:	461a      	mov	r2, r3
    e46e:	f24b 2360 	movw	r3, #45664	; 0xb260
    e472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e476:	78d9      	ldrb	r1, [r3, #3]
    e478:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e480:	5499      	strb	r1, [r3, r2]
    e482:	4b34      	ldr	r3, [pc, #208]	; (e554 <send_nav_values+0x1090>)
    e484:	781a      	ldrb	r2, [r3, #0]
    e486:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48e:	781b      	ldrb	r3, [r3, #0]
    e490:	4413      	add	r3, r2
    e492:	b2da      	uxtb	r2, r3
    e494:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e49c:	701a      	strb	r2, [r3, #0]
    e49e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a6:	781a      	ldrb	r2, [r3, #0]
    e4a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	4413      	add	r3, r2
    e4b4:	b2da      	uxtb	r2, r3
    e4b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4be:	701a      	strb	r2, [r3, #0]
    e4c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c8:	781b      	ldrb	r3, [r3, #0]
    e4ca:	3301      	adds	r3, #1
    e4cc:	b2da      	uxtb	r2, r3
    e4ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d6:	701a      	strb	r2, [r3, #0]
    e4d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e0:	781b      	ldrb	r3, [r3, #0]
    e4e2:	2bff      	cmp	r3, #255	; 0xff
    e4e4:	d105      	bne.n	e4f2 <send_nav_values+0x102e>
    e4e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ee:	2200      	movs	r2, #0
    e4f0:	701a      	strb	r2, [r3, #0]
    e4f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4fa:	781b      	ldrb	r3, [r3, #0]
    e4fc:	461a      	mov	r2, r3
    e4fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e506:	7819      	ldrb	r1, [r3, #0]
    e508:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e510:	5499      	strb	r1, [r3, r2]
    e512:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	3301      	adds	r3, #1
    e51e:	b2da      	uxtb	r2, r3
    e520:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e528:	701a      	strb	r2, [r3, #0]
    e52a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	2bff      	cmp	r3, #255	; 0xff
    e536:	d10f      	bne.n	e558 <send_nav_values+0x1094>
    e538:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e540:	2200      	movs	r2, #0
    e542:	701a      	strb	r2, [r3, #0]
    e544:	e008      	b.n	e558 <send_nav_values+0x1094>
    e546:	bf00      	nop
    e548:	2000040b 	.word	0x2000040b
    e54c:	2000b261 	.word	0x2000b261
    e550:	2000b262 	.word	0x2000b262
    e554:	2000b263 	.word	0x2000b263
    e558:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e560:	781b      	ldrb	r3, [r3, #0]
    e562:	461a      	mov	r2, r3
    e564:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56c:	7819      	ldrb	r1, [r3, #0]
    e56e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e576:	5499      	strb	r1, [r3, r2]
    e578:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e580:	781b      	ldrb	r3, [r3, #0]
    e582:	3301      	adds	r3, #1
    e584:	b2da      	uxtb	r2, r3
    e586:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58e:	701a      	strb	r2, [r3, #0]
    e590:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e598:	781b      	ldrb	r3, [r3, #0]
    e59a:	2bff      	cmp	r3, #255	; 0xff
    e59c:	d105      	bne.n	e5aa <send_nav_values+0x10e6>
    e59e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a6:	2200      	movs	r2, #0
    e5a8:	701a      	strb	r2, [r3, #0]
    e5aa:	f242 0339 	movw	r3, #8249	; 0x2039
    e5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b2:	781b      	ldrb	r3, [r3, #0]
    e5b4:	b2db      	uxtb	r3, r3
    e5b6:	f003 0310 	and.w	r3, r3, #16
    e5ba:	2b00      	cmp	r3, #0
    e5bc:	d15a      	bne.n	e674 <send_nav_values+0x11b0>
    e5be:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c6:	781b      	ldrb	r3, [r3, #0]
    e5c8:	b2db      	uxtb	r3, r3
    e5ca:	461a      	mov	r2, r3
    e5cc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d4:	5c9a      	ldrb	r2, [r3, r2]
    e5d6:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    e5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5de:	701a      	strb	r2, [r3, #0]
    e5e0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    e5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e8:	2200      	movs	r2, #0
    e5ea:	701a      	strb	r2, [r3, #0]
    e5ec:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f4:	781b      	ldrb	r3, [r3, #0]
    e5f6:	b2db      	uxtb	r3, r3
    e5f8:	3301      	adds	r3, #1
    e5fa:	b2da      	uxtb	r2, r3
    e5fc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e604:	701a      	strb	r2, [r3, #0]
    e606:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e60e:	781b      	ldrb	r3, [r3, #0]
    e610:	b2db      	uxtb	r3, r3
    e612:	2bff      	cmp	r3, #255	; 0xff
    e614:	d105      	bne.n	e622 <send_nav_values+0x115e>
    e616:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e61e:	2200      	movs	r2, #0
    e620:	701a      	strb	r2, [r3, #0]
    e622:	f242 0338 	movw	r3, #8248	; 0x2038
    e626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62a:	f242 0238 	movw	r2, #8248	; 0x2038
    e62e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e632:	7812      	ldrb	r2, [r2, #0]
    e634:	b2d2      	uxtb	r2, r2
    e636:	f042 0201 	orr.w	r2, r2, #1
    e63a:	b2d2      	uxtb	r2, r2
    e63c:	701a      	strb	r2, [r3, #0]
    e63e:	f242 0339 	movw	r3, #8249	; 0x2039
    e642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e646:	f242 0239 	movw	r2, #8249	; 0x2039
    e64a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e64e:	7812      	ldrb	r2, [r2, #0]
    e650:	b2d2      	uxtb	r2, r2
    e652:	f042 0210 	orr.w	r2, r2, #16
    e656:	b2d2      	uxtb	r2, r2
    e658:	701a      	strb	r2, [r3, #0]
    e65a:	e00b      	b.n	e674 <send_nav_values+0x11b0>
    e65c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e664:	781b      	ldrb	r3, [r3, #0]
    e666:	3301      	adds	r3, #1
    e668:	b2da      	uxtb	r2, r3
    e66a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e672:	701a      	strb	r2, [r3, #0]
}
    e674:	46bd      	mov	sp, r7
    e676:	f85d 7b04 	ldr.w	r7, [sp], #4
    e67a:	4770      	bx	lr

0000e67c <course_run>:

void course_run(void){
    e67c:	b580      	push	{r7, lr}
    e67e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e680:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e688:	781b      	ldrb	r3, [r3, #0]
    e68a:	2b02      	cmp	r3, #2
    e68c:	d006      	beq.n	e69c <course_run+0x20>
    e68e:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	2b03      	cmp	r3, #3
    e69a:	d112      	bne.n	e6c2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e69c:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    e6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a4:	781b      	ldrb	r3, [r3, #0]
    e6a6:	2b02      	cmp	r3, #2
    e6a8:	d901      	bls.n	e6ae <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e6aa:	f003 faf1 	bl	11c90 <course_pid_run>
    desired_roll = nav_desired_roll;
    e6ae:	f24b 2358 	movw	r3, #45656	; 0xb258
    e6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b6:	681a      	ldr	r2, [r3, #0]
    e6b8:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    e6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e6c2:	bd80      	pop	{r7, pc}

0000e6c4 <altitude_control_task>:

void altitude_control_task(void)
{
    e6c4:	b580      	push	{r7, lr}
    e6c6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e6c8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d0:	781b      	ldrb	r3, [r3, #0]
    e6d2:	2b02      	cmp	r3, #2
    e6d4:	d006      	beq.n	e6e4 <altitude_control_task+0x20>
    e6d6:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	2b03      	cmp	r3, #3
    e6e2:	d108      	bne.n	e6f6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e6e4:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	2b03      	cmp	r3, #3
    e6f0:	d101      	bne.n	e6f6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e6f2:	f003 fd55 	bl	121a0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e6f6:	bd80      	pop	{r7, pc}

0000e6f8 <climb_control_task>:
void climb_control_task(void)
{
    e6f8:	b580      	push	{r7, lr}
    e6fa:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e6fc:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e704:	781b      	ldrb	r3, [r3, #0]
    e706:	2b02      	cmp	r3, #2
    e708:	d006      	beq.n	e718 <climb_control_task+0x20>
    e70a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	2b03      	cmp	r3, #3
    e716:	d135      	bne.n	e784 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e718:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e720:	781b      	ldrb	r3, [r3, #0]
    e722:	2b01      	cmp	r3, #1
    e724:	d901      	bls.n	e72a <climb_control_task+0x32>
        	climb_pid_run();
    e726:	f003 fb6b 	bl	11e00 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e72a:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	2b01      	cmp	r3, #1
    e736:	d10a      	bne.n	e74e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e738:	f24b 2350 	movw	r3, #45648	; 0xb250
    e73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e740:	881b      	ldrh	r3, [r3, #0]
    e742:	b29a      	uxth	r2, r3
    e744:	f24b 2304 	movw	r3, #45572	; 0xb204
    e748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e74e:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    e752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e756:	781b      	ldrb	r3, [r3, #0]
    e758:	2b00      	cmp	r3, #0
    e75a:	d10d      	bne.n	e778 <climb_control_task+0x80>
    e75c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    e760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e764:	881b      	ldrh	r3, [r3, #0]
    e766:	2b00      	cmp	r3, #0
    e768:	d10c      	bne.n	e784 <climb_control_task+0x8c>
    e76a:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    e76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e772:	781b      	ldrb	r3, [r3, #0]
    e774:	2b00      	cmp	r3, #0
    e776:	d105      	bne.n	e784 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e778:	f24b 2304 	movw	r3, #45572	; 0xb204
    e77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e780:	2200      	movs	r2, #0
    e782:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e784:	bd80      	pop	{r7, pc}
    e786:	bf00      	nop

0000e788 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e788:	b580      	push	{r7, lr}
    e78a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e78c:	f003 f926 	bl	119dc <ir_update>
    estimator_update_state_infrared();
    e790:	f006 fbac 	bl	14eec <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e794:	f003 f990 	bl	11ab8 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e798:	f24b 2304 	movw	r3, #45572	; 0xb204
    e79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a0:	881a      	ldrh	r2, [r3, #0]
    e7a2:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7aa:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e7ac:	f24b 2306 	movw	r3, #45574	; 0xb206
    e7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b4:	881a      	ldrh	r2, [r3, #0]
    e7b6:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7be:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e7c0:	f24b 2308 	movw	r3, #45576	; 0xb208
    e7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c8:	881a      	ldrh	r2, [r3, #0]
    e7ca:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e7d4:	f24b 4390 	movw	r3, #46224	; 0xb490
    e7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7dc:	681b      	ldr	r3, [r3, #0]
    e7de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e7e2:	4618      	mov	r0, r3
    e7e4:	f009 f80c 	bl	17800 <__aeabi_f2d>
    e7e8:	4602      	mov	r2, r0
    e7ea:	460b      	mov	r3, r1
    e7ec:	4610      	mov	r0, r2
    e7ee:	4619      	mov	r1, r3
    e7f0:	f04f 0200 	mov.w	r2, #0
    e7f4:	f04f 0300 	mov.w	r3, #0
    e7f8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e7fc:	f009 f854 	bl	178a8 <__aeabi_dmul>
    e800:	4602      	mov	r2, r0
    e802:	460b      	mov	r3, r1
    e804:	4610      	mov	r0, r2
    e806:	4619      	mov	r1, r3
    e808:	f04f 0200 	mov.w	r2, #0
    e80c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e810:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e814:	f009 faba 	bl	17d8c <__aeabi_dcmplt>
    e818:	4603      	mov	r3, r0
    e81a:	2b00      	cmp	r3, #0
    e81c:	d002      	beq.n	e824 <stabilisation_task+0x9c>
    e81e:	f64d 2280 	movw	r2, #55936	; 0xda80
    e822:	e046      	b.n	e8b2 <stabilisation_task+0x12a>
    e824:	f24b 4390 	movw	r3, #46224	; 0xb490
    e828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82c:	681b      	ldr	r3, [r3, #0]
    e82e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e832:	4618      	mov	r0, r3
    e834:	f008 ffe4 	bl	17800 <__aeabi_f2d>
    e838:	4602      	mov	r2, r0
    e83a:	460b      	mov	r3, r1
    e83c:	4610      	mov	r0, r2
    e83e:	4619      	mov	r1, r3
    e840:	f04f 0200 	mov.w	r2, #0
    e844:	f04f 0300 	mov.w	r3, #0
    e848:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e84c:	f009 f82c 	bl	178a8 <__aeabi_dmul>
    e850:	4602      	mov	r2, r0
    e852:	460b      	mov	r3, r1
    e854:	4610      	mov	r0, r2
    e856:	4619      	mov	r1, r3
    e858:	f04f 0200 	mov.w	r2, #0
    e85c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e860:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e864:	f009 fab0 	bl	17dc8 <__aeabi_dcmpgt>
    e868:	4603      	mov	r3, r0
    e86a:	2b00      	cmp	r3, #0
    e86c:	d002      	beq.n	e874 <stabilisation_task+0xec>
    e86e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e872:	e01d      	b.n	e8b0 <stabilisation_task+0x128>
    e874:	f24b 4390 	movw	r3, #46224	; 0xb490
    e878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87c:	681b      	ldr	r3, [r3, #0]
    e87e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e882:	4618      	mov	r0, r3
    e884:	f008 ffbc 	bl	17800 <__aeabi_f2d>
    e888:	4602      	mov	r2, r0
    e88a:	460b      	mov	r3, r1
    e88c:	4610      	mov	r0, r2
    e88e:	4619      	mov	r1, r3
    e890:	f04f 0200 	mov.w	r2, #0
    e894:	f04f 0300 	mov.w	r3, #0
    e898:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e89c:	f009 f804 	bl	178a8 <__aeabi_dmul>
    e8a0:	4602      	mov	r2, r0
    e8a2:	460b      	mov	r3, r1
    e8a4:	4610      	mov	r0, r2
    e8a6:	4619      	mov	r1, r3
    e8a8:	f009 fa98 	bl	17ddc <__aeabi_d2iz>
    e8ac:	4603      	mov	r3, r0
    e8ae:	b29b      	uxth	r3, r3
    e8b0:	b29a      	uxth	r2, r3
    e8b2:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ba:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e8bc:	bd80      	pop	{r7, pc}
    e8be:	bf00      	nop

0000e8c0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e8c0:	b580      	push	{r7, lr}
    e8c2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e8c4:	f24b 0365 	movw	r3, #45157	; 0xb065
    e8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8cc:	2200      	movs	r2, #0
    e8ce:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e8d0:	f24b 0366 	movw	r3, #45158	; 0xb066
    e8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d8:	781b      	ldrb	r3, [r3, #0]
    e8da:	2b00      	cmp	r3, #0
    e8dc:	f001 81af 	beq.w	fc3e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e8e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e8:	781a      	ldrb	r2, [r3, #0]
    e8ea:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	b2db      	uxtb	r3, r3
    e8f6:	429a      	cmp	r2, r3
    e8f8:	d313      	bcc.n	e922 <send_gps_pos+0x62>
    e8fa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e902:	781b      	ldrb	r3, [r3, #0]
    e904:	b2db      	uxtb	r3, r3
    e906:	461a      	mov	r2, r3
    e908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e910:	781b      	ldrb	r3, [r3, #0]
    e912:	1ad3      	subs	r3, r2, r3
    e914:	33ff      	adds	r3, #255	; 0xff
    e916:	2b21      	cmp	r3, #33	; 0x21
    e918:	bfd4      	ite	le
    e91a:	2300      	movle	r3, #0
    e91c:	2301      	movgt	r3, #1
    e91e:	b2db      	uxtb	r3, r3
    e920:	e011      	b.n	e946 <send_gps_pos+0x86>
    e922:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e92a:	781b      	ldrb	r3, [r3, #0]
    e92c:	b2db      	uxtb	r3, r3
    e92e:	461a      	mov	r2, r3
    e930:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	1ad3      	subs	r3, r2, r3
    e93c:	2b21      	cmp	r3, #33	; 0x21
    e93e:	bfd4      	ite	le
    e940:	2300      	movle	r3, #0
    e942:	2301      	movgt	r3, #1
    e944:	b2db      	uxtb	r3, r3
    e946:	2b00      	cmp	r3, #0
    e948:	f001 816b 	beq.w	fc22 <send_gps_pos+0x1362>
    e94c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	461a      	mov	r2, r3
    e958:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e960:	2105      	movs	r1, #5
    e962:	5499      	strb	r1, [r3, r2]
    e964:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96c:	781b      	ldrb	r3, [r3, #0]
    e96e:	3301      	adds	r3, #1
    e970:	b2da      	uxtb	r2, r3
    e972:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e97a:	701a      	strb	r2, [r3, #0]
    e97c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e984:	781b      	ldrb	r3, [r3, #0]
    e986:	2bff      	cmp	r3, #255	; 0xff
    e988:	d105      	bne.n	e996 <send_gps_pos+0xd6>
    e98a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e992:	2200      	movs	r2, #0
    e994:	701a      	strb	r2, [r3, #0]
    e996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99e:	781b      	ldrb	r3, [r3, #0]
    e9a0:	461a      	mov	r2, r3
    e9a2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9aa:	2108      	movs	r1, #8
    e9ac:	5499      	strb	r1, [r3, r2]
    e9ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b6:	781b      	ldrb	r3, [r3, #0]
    e9b8:	3301      	adds	r3, #1
    e9ba:	b2da      	uxtb	r2, r3
    e9bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c4:	701a      	strb	r2, [r3, #0]
    e9c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ce:	781b      	ldrb	r3, [r3, #0]
    e9d0:	2bff      	cmp	r3, #255	; 0xff
    e9d2:	d105      	bne.n	e9e0 <send_gps_pos+0x120>
    e9d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9dc:	2200      	movs	r2, #0
    e9de:	701a      	strb	r2, [r3, #0]
    e9e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e8:	2208      	movs	r2, #8
    e9ea:	701a      	strb	r2, [r3, #0]
    e9ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f4:	2208      	movs	r2, #8
    e9f6:	701a      	strb	r2, [r3, #0]
    e9f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea00:	781b      	ldrb	r3, [r3, #0]
    ea02:	461a      	mov	r2, r3
    ea04:	f24b 0364 	movw	r3, #45156	; 0xb064
    ea08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea0c:	7819      	ldrb	r1, [r3, #0]
    ea0e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ea12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea16:	5499      	strb	r1, [r3, r2]
    ea18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea20:	781a      	ldrb	r2, [r3, #0]
    ea22:	f24b 0364 	movw	r3, #45156	; 0xb064
    ea26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	4413      	add	r3, r2
    ea2e:	b2da      	uxtb	r2, r3
    ea30:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea38:	701a      	strb	r2, [r3, #0]
    ea3a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	781a      	ldrb	r2, [r3, #0]
    ea44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea4c:	781b      	ldrb	r3, [r3, #0]
    ea4e:	4413      	add	r3, r2
    ea50:	b2da      	uxtb	r2, r3
    ea52:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ea56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5a:	701a      	strb	r2, [r3, #0]
    ea5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea64:	781b      	ldrb	r3, [r3, #0]
    ea66:	3301      	adds	r3, #1
    ea68:	b2da      	uxtb	r2, r3
    ea6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea72:	701a      	strb	r2, [r3, #0]
    ea74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	2bff      	cmp	r3, #255	; 0xff
    ea80:	d105      	bne.n	ea8e <send_gps_pos+0x1ce>
    ea82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8a:	2200      	movs	r2, #0
    ea8c:	701a      	strb	r2, [r3, #0]
    ea8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea96:	781b      	ldrb	r3, [r3, #0]
    ea98:	461a      	mov	r2, r3
    ea9a:	f24b 0354 	movw	r3, #45140	; 0xb054
    ea9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa2:	7819      	ldrb	r1, [r3, #0]
    eaa4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eaa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaac:	5499      	strb	r1, [r3, r2]
    eaae:	f24b 0354 	movw	r3, #45140	; 0xb054
    eab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab6:	781a      	ldrb	r2, [r3, #0]
    eab8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac0:	781b      	ldrb	r3, [r3, #0]
    eac2:	4413      	add	r3, r2
    eac4:	b2da      	uxtb	r2, r3
    eac6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eaca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eace:	701a      	strb	r2, [r3, #0]
    ead0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ead4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead8:	781a      	ldrb	r2, [r3, #0]
    eada:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	4413      	add	r3, r2
    eae6:	b2da      	uxtb	r2, r3
    eae8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eaec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf0:	701a      	strb	r2, [r3, #0]
    eaf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	3301      	adds	r3, #1
    eafe:	b2da      	uxtb	r2, r3
    eb00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb08:	701a      	strb	r2, [r3, #0]
    eb0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb12:	781b      	ldrb	r3, [r3, #0]
    eb14:	2bff      	cmp	r3, #255	; 0xff
    eb16:	d105      	bne.n	eb24 <send_gps_pos+0x264>
    eb18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb20:	2200      	movs	r2, #0
    eb22:	701a      	strb	r2, [r3, #0]
    eb24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	461a      	mov	r2, r3
    eb30:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb38:	7859      	ldrb	r1, [r3, #1]
    eb3a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb42:	5499      	strb	r1, [r3, r2]
    eb44:	4bd1      	ldr	r3, [pc, #836]	; (ee8c <send_gps_pos+0x5cc>)
    eb46:	781a      	ldrb	r2, [r3, #0]
    eb48:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	4413      	add	r3, r2
    eb54:	b2da      	uxtb	r2, r3
    eb56:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	701a      	strb	r2, [r3, #0]
    eb60:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb68:	781a      	ldrb	r2, [r3, #0]
    eb6a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb72:	781b      	ldrb	r3, [r3, #0]
    eb74:	4413      	add	r3, r2
    eb76:	b2da      	uxtb	r2, r3
    eb78:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb80:	701a      	strb	r2, [r3, #0]
    eb82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8a:	781b      	ldrb	r3, [r3, #0]
    eb8c:	3301      	adds	r3, #1
    eb8e:	b2da      	uxtb	r2, r3
    eb90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb98:	701a      	strb	r2, [r3, #0]
    eb9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba2:	781b      	ldrb	r3, [r3, #0]
    eba4:	2bff      	cmp	r3, #255	; 0xff
    eba6:	d105      	bne.n	ebb4 <send_gps_pos+0x2f4>
    eba8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb0:	2200      	movs	r2, #0
    ebb2:	701a      	strb	r2, [r3, #0]
    ebb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbc:	781b      	ldrb	r3, [r3, #0]
    ebbe:	461a      	mov	r2, r3
    ebc0:	f24b 0354 	movw	r3, #45140	; 0xb054
    ebc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc8:	7899      	ldrb	r1, [r3, #2]
    ebca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ebce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd2:	5499      	strb	r1, [r3, r2]
    ebd4:	4bae      	ldr	r3, [pc, #696]	; (ee90 <send_gps_pos+0x5d0>)
    ebd6:	781a      	ldrb	r2, [r3, #0]
    ebd8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	4413      	add	r3, r2
    ebe4:	b2da      	uxtb	r2, r3
    ebe6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebee:	701a      	strb	r2, [r3, #0]
    ebf0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ebf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf8:	781a      	ldrb	r2, [r3, #0]
    ebfa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	4413      	add	r3, r2
    ec06:	b2da      	uxtb	r2, r3
    ec08:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec10:	701a      	strb	r2, [r3, #0]
    ec12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	3301      	adds	r3, #1
    ec1e:	b2da      	uxtb	r2, r3
    ec20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec28:	701a      	strb	r2, [r3, #0]
    ec2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec32:	781b      	ldrb	r3, [r3, #0]
    ec34:	2bff      	cmp	r3, #255	; 0xff
    ec36:	d105      	bne.n	ec44 <send_gps_pos+0x384>
    ec38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec40:	2200      	movs	r2, #0
    ec42:	701a      	strb	r2, [r3, #0]
    ec44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4c:	781b      	ldrb	r3, [r3, #0]
    ec4e:	461a      	mov	r2, r3
    ec50:	f24b 0354 	movw	r3, #45140	; 0xb054
    ec54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec58:	78d9      	ldrb	r1, [r3, #3]
    ec5a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ec5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec62:	5499      	strb	r1, [r3, r2]
    ec64:	4b8b      	ldr	r3, [pc, #556]	; (ee94 <send_gps_pos+0x5d4>)
    ec66:	781a      	ldrb	r2, [r3, #0]
    ec68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec70:	781b      	ldrb	r3, [r3, #0]
    ec72:	4413      	add	r3, r2
    ec74:	b2da      	uxtb	r2, r3
    ec76:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec7e:	701a      	strb	r2, [r3, #0]
    ec80:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec88:	781a      	ldrb	r2, [r3, #0]
    ec8a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec92:	781b      	ldrb	r3, [r3, #0]
    ec94:	4413      	add	r3, r2
    ec96:	b2da      	uxtb	r2, r3
    ec98:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca0:	701a      	strb	r2, [r3, #0]
    eca2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecaa:	781b      	ldrb	r3, [r3, #0]
    ecac:	3301      	adds	r3, #1
    ecae:	b2da      	uxtb	r2, r3
    ecb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb8:	701a      	strb	r2, [r3, #0]
    ecba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc2:	781b      	ldrb	r3, [r3, #0]
    ecc4:	2bff      	cmp	r3, #255	; 0xff
    ecc6:	d105      	bne.n	ecd4 <send_gps_pos+0x414>
    ecc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd0:	2200      	movs	r2, #0
    ecd2:	701a      	strb	r2, [r3, #0]
    ecd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	461a      	mov	r2, r3
    ece0:	f24b 0358 	movw	r3, #45144	; 0xb058
    ece4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece8:	7819      	ldrb	r1, [r3, #0]
    ecea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ecee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf2:	5499      	strb	r1, [r3, r2]
    ecf4:	f24b 0358 	movw	r3, #45144	; 0xb058
    ecf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfc:	781a      	ldrb	r2, [r3, #0]
    ecfe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	4413      	add	r3, r2
    ed0a:	b2da      	uxtb	r2, r3
    ed0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed14:	701a      	strb	r2, [r3, #0]
    ed16:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed1e:	781a      	ldrb	r2, [r3, #0]
    ed20:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	4413      	add	r3, r2
    ed2c:	b2da      	uxtb	r2, r3
    ed2e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed36:	701a      	strb	r2, [r3, #0]
    ed38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed40:	781b      	ldrb	r3, [r3, #0]
    ed42:	3301      	adds	r3, #1
    ed44:	b2da      	uxtb	r2, r3
    ed46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4e:	701a      	strb	r2, [r3, #0]
    ed50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed58:	781b      	ldrb	r3, [r3, #0]
    ed5a:	2bff      	cmp	r3, #255	; 0xff
    ed5c:	d105      	bne.n	ed6a <send_gps_pos+0x4aa>
    ed5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed66:	2200      	movs	r2, #0
    ed68:	701a      	strb	r2, [r3, #0]
    ed6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed72:	781b      	ldrb	r3, [r3, #0]
    ed74:	461a      	mov	r2, r3
    ed76:	f24b 0358 	movw	r3, #45144	; 0xb058
    ed7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7e:	7859      	ldrb	r1, [r3, #1]
    ed80:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ed84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed88:	5499      	strb	r1, [r3, r2]
    ed8a:	4b43      	ldr	r3, [pc, #268]	; (ee98 <send_gps_pos+0x5d8>)
    ed8c:	781a      	ldrb	r2, [r3, #0]
    ed8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed96:	781b      	ldrb	r3, [r3, #0]
    ed98:	4413      	add	r3, r2
    ed9a:	b2da      	uxtb	r2, r3
    ed9c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda4:	701a      	strb	r2, [r3, #0]
    eda6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    edaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edae:	781a      	ldrb	r2, [r3, #0]
    edb0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    edb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb8:	781b      	ldrb	r3, [r3, #0]
    edba:	4413      	add	r3, r2
    edbc:	b2da      	uxtb	r2, r3
    edbe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    edc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc6:	701a      	strb	r2, [r3, #0]
    edc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd0:	781b      	ldrb	r3, [r3, #0]
    edd2:	3301      	adds	r3, #1
    edd4:	b2da      	uxtb	r2, r3
    edd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edde:	701a      	strb	r2, [r3, #0]
    ede0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ede4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede8:	781b      	ldrb	r3, [r3, #0]
    edea:	2bff      	cmp	r3, #255	; 0xff
    edec:	d105      	bne.n	edfa <send_gps_pos+0x53a>
    edee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf6:	2200      	movs	r2, #0
    edf8:	701a      	strb	r2, [r3, #0]
    edfa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee02:	781b      	ldrb	r3, [r3, #0]
    ee04:	461a      	mov	r2, r3
    ee06:	f24b 0358 	movw	r3, #45144	; 0xb058
    ee0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0e:	7899      	ldrb	r1, [r3, #2]
    ee10:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ee14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee18:	5499      	strb	r1, [r3, r2]
    ee1a:	4b20      	ldr	r3, [pc, #128]	; (ee9c <send_gps_pos+0x5dc>)
    ee1c:	781a      	ldrb	r2, [r3, #0]
    ee1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	4413      	add	r3, r2
    ee2a:	b2da      	uxtb	r2, r3
    ee2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee34:	701a      	strb	r2, [r3, #0]
    ee36:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3e:	781a      	ldrb	r2, [r3, #0]
    ee40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee48:	781b      	ldrb	r3, [r3, #0]
    ee4a:	4413      	add	r3, r2
    ee4c:	b2da      	uxtb	r2, r3
    ee4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee56:	701a      	strb	r2, [r3, #0]
    ee58:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee60:	781b      	ldrb	r3, [r3, #0]
    ee62:	3301      	adds	r3, #1
    ee64:	b2da      	uxtb	r2, r3
    ee66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6e:	701a      	strb	r2, [r3, #0]
    ee70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee78:	781b      	ldrb	r3, [r3, #0]
    ee7a:	2bff      	cmp	r3, #255	; 0xff
    ee7c:	d110      	bne.n	eea0 <send_gps_pos+0x5e0>
    ee7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee86:	2200      	movs	r2, #0
    ee88:	701a      	strb	r2, [r3, #0]
    ee8a:	e009      	b.n	eea0 <send_gps_pos+0x5e0>
    ee8c:	2000b055 	.word	0x2000b055
    ee90:	2000b056 	.word	0x2000b056
    ee94:	2000b057 	.word	0x2000b057
    ee98:	2000b059 	.word	0x2000b059
    ee9c:	2000b05a 	.word	0x2000b05a
    eea0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea8:	781b      	ldrb	r3, [r3, #0]
    eeaa:	461a      	mov	r2, r3
    eeac:	f24b 0358 	movw	r3, #45144	; 0xb058
    eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb4:	78d9      	ldrb	r1, [r3, #3]
    eeb6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eeba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eebe:	5499      	strb	r1, [r3, r2]
    eec0:	4bd3      	ldr	r3, [pc, #844]	; (f210 <send_gps_pos+0x950>)
    eec2:	781a      	ldrb	r2, [r3, #0]
    eec4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eecc:	781b      	ldrb	r3, [r3, #0]
    eece:	4413      	add	r3, r2
    eed0:	b2da      	uxtb	r2, r3
    eed2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeda:	701a      	strb	r2, [r3, #0]
    eedc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	781a      	ldrb	r2, [r3, #0]
    eee6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eeea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeee:	781b      	ldrb	r3, [r3, #0]
    eef0:	4413      	add	r3, r2
    eef2:	b2da      	uxtb	r2, r3
    eef4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefc:	701a      	strb	r2, [r3, #0]
    eefe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef06:	781b      	ldrb	r3, [r3, #0]
    ef08:	3301      	adds	r3, #1
    ef0a:	b2da      	uxtb	r2, r3
    ef0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef14:	701a      	strb	r2, [r3, #0]
    ef16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1e:	781b      	ldrb	r3, [r3, #0]
    ef20:	2bff      	cmp	r3, #255	; 0xff
    ef22:	d105      	bne.n	ef30 <send_gps_pos+0x670>
    ef24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef2c:	2200      	movs	r2, #0
    ef2e:	701a      	strb	r2, [r3, #0]
    ef30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef38:	781b      	ldrb	r3, [r3, #0]
    ef3a:	461a      	mov	r2, r3
    ef3c:	f24b 0350 	movw	r3, #45136	; 0xb050
    ef40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef44:	7819      	ldrb	r1, [r3, #0]
    ef46:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ef4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4e:	5499      	strb	r1, [r3, r2]
    ef50:	f24b 0350 	movw	r3, #45136	; 0xb050
    ef54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef58:	781a      	ldrb	r2, [r3, #0]
    ef5a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	4413      	add	r3, r2
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7a:	781a      	ldrb	r2, [r3, #0]
    ef7c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef84:	781b      	ldrb	r3, [r3, #0]
    ef86:	4413      	add	r3, r2
    ef88:	b2da      	uxtb	r2, r3
    ef8a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef92:	701a      	strb	r2, [r3, #0]
    ef94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	3301      	adds	r3, #1
    efa0:	b2da      	uxtb	r2, r3
    efa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb4:	781b      	ldrb	r3, [r3, #0]
    efb6:	2bff      	cmp	r3, #255	; 0xff
    efb8:	d105      	bne.n	efc6 <send_gps_pos+0x706>
    efba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc2:	2200      	movs	r2, #0
    efc4:	701a      	strb	r2, [r3, #0]
    efc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    efca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efce:	781b      	ldrb	r3, [r3, #0]
    efd0:	461a      	mov	r2, r3
    efd2:	f24b 0350 	movw	r3, #45136	; 0xb050
    efd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efda:	7859      	ldrb	r1, [r3, #1]
    efdc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    efe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe4:	5499      	strb	r1, [r3, r2]
    efe6:	4b8b      	ldr	r3, [pc, #556]	; (f214 <send_gps_pos+0x954>)
    efe8:	781a      	ldrb	r2, [r3, #0]
    efea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    efee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff2:	781b      	ldrb	r3, [r3, #0]
    eff4:	4413      	add	r3, r2
    eff6:	b2da      	uxtb	r2, r3
    eff8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    effc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f000:	701a      	strb	r2, [r3, #0]
    f002:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00a:	781a      	ldrb	r2, [r3, #0]
    f00c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f014:	781b      	ldrb	r3, [r3, #0]
    f016:	4413      	add	r3, r2
    f018:	b2da      	uxtb	r2, r3
    f01a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f022:	701a      	strb	r2, [r3, #0]
    f024:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	3301      	adds	r3, #1
    f030:	b2da      	uxtb	r2, r3
    f032:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f03a:	701a      	strb	r2, [r3, #0]
    f03c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f044:	781b      	ldrb	r3, [r3, #0]
    f046:	2bff      	cmp	r3, #255	; 0xff
    f048:	d105      	bne.n	f056 <send_gps_pos+0x796>
    f04a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f052:	2200      	movs	r2, #0
    f054:	701a      	strb	r2, [r3, #0]
    f056:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05e:	781b      	ldrb	r3, [r3, #0]
    f060:	461a      	mov	r2, r3
    f062:	f24b 0350 	movw	r3, #45136	; 0xb050
    f066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f06a:	7899      	ldrb	r1, [r3, #2]
    f06c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	5499      	strb	r1, [r3, r2]
    f076:	4b68      	ldr	r3, [pc, #416]	; (f218 <send_gps_pos+0x958>)
    f078:	781a      	ldrb	r2, [r3, #0]
    f07a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	4413      	add	r3, r2
    f086:	b2da      	uxtb	r2, r3
    f088:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f090:	701a      	strb	r2, [r3, #0]
    f092:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f09a:	781a      	ldrb	r2, [r3, #0]
    f09c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	781b      	ldrb	r3, [r3, #0]
    f0a6:	4413      	add	r3, r2
    f0a8:	b2da      	uxtb	r2, r3
    f0aa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0b2:	701a      	strb	r2, [r3, #0]
    f0b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	3301      	adds	r3, #1
    f0c0:	b2da      	uxtb	r2, r3
    f0c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ca:	701a      	strb	r2, [r3, #0]
    f0cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	2bff      	cmp	r3, #255	; 0xff
    f0d8:	d105      	bne.n	f0e6 <send_gps_pos+0x826>
    f0da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e2:	2200      	movs	r2, #0
    f0e4:	701a      	strb	r2, [r3, #0]
    f0e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ee:	781b      	ldrb	r3, [r3, #0]
    f0f0:	461a      	mov	r2, r3
    f0f2:	f24b 0350 	movw	r3, #45136	; 0xb050
    f0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0fa:	78d9      	ldrb	r1, [r3, #3]
    f0fc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f104:	5499      	strb	r1, [r3, r2]
    f106:	4b45      	ldr	r3, [pc, #276]	; (f21c <send_gps_pos+0x95c>)
    f108:	781a      	ldrb	r2, [r3, #0]
    f10a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f112:	781b      	ldrb	r3, [r3, #0]
    f114:	4413      	add	r3, r2
    f116:	b2da      	uxtb	r2, r3
    f118:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f120:	701a      	strb	r2, [r3, #0]
    f122:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f12a:	781a      	ldrb	r2, [r3, #0]
    f12c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	781b      	ldrb	r3, [r3, #0]
    f136:	4413      	add	r3, r2
    f138:	b2da      	uxtb	r2, r3
    f13a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f142:	701a      	strb	r2, [r3, #0]
    f144:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	781b      	ldrb	r3, [r3, #0]
    f14e:	3301      	adds	r3, #1
    f150:	b2da      	uxtb	r2, r3
    f152:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15a:	701a      	strb	r2, [r3, #0]
    f15c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f164:	781b      	ldrb	r3, [r3, #0]
    f166:	2bff      	cmp	r3, #255	; 0xff
    f168:	d105      	bne.n	f176 <send_gps_pos+0x8b6>
    f16a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f172:	2200      	movs	r2, #0
    f174:	701a      	strb	r2, [r3, #0]
    f176:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17e:	781b      	ldrb	r3, [r3, #0]
    f180:	461a      	mov	r2, r3
    f182:	f24b 0344 	movw	r3, #45124	; 0xb044
    f186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18a:	7819      	ldrb	r1, [r3, #0]
    f18c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f194:	5499      	strb	r1, [r3, r2]
    f196:	f24b 0344 	movw	r3, #45124	; 0xb044
    f19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19e:	781a      	ldrb	r2, [r3, #0]
    f1a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	4413      	add	r3, r2
    f1ac:	b2da      	uxtb	r2, r3
    f1ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b6:	701a      	strb	r2, [r3, #0]
    f1b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f1bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c0:	781a      	ldrb	r2, [r3, #0]
    f1c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ca:	781b      	ldrb	r3, [r3, #0]
    f1cc:	4413      	add	r3, r2
    f1ce:	b2da      	uxtb	r2, r3
    f1d0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d8:	701a      	strb	r2, [r3, #0]
    f1da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e2:	781b      	ldrb	r3, [r3, #0]
    f1e4:	3301      	adds	r3, #1
    f1e6:	b2da      	uxtb	r2, r3
    f1e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fa:	781b      	ldrb	r3, [r3, #0]
    f1fc:	2bff      	cmp	r3, #255	; 0xff
    f1fe:	d10f      	bne.n	f220 <send_gps_pos+0x960>
    f200:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f208:	2200      	movs	r2, #0
    f20a:	701a      	strb	r2, [r3, #0]
    f20c:	e008      	b.n	f220 <send_gps_pos+0x960>
    f20e:	bf00      	nop
    f210:	2000b05b 	.word	0x2000b05b
    f214:	2000b051 	.word	0x2000b051
    f218:	2000b052 	.word	0x2000b052
    f21c:	2000b053 	.word	0x2000b053
    f220:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f228:	781b      	ldrb	r3, [r3, #0]
    f22a:	461a      	mov	r2, r3
    f22c:	f24b 0344 	movw	r3, #45124	; 0xb044
    f230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f234:	7859      	ldrb	r1, [r3, #1]
    f236:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f23e:	5499      	strb	r1, [r3, r2]
    f240:	4bd1      	ldr	r3, [pc, #836]	; (f588 <send_gps_pos+0xcc8>)
    f242:	781a      	ldrb	r2, [r3, #0]
    f244:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	4413      	add	r3, r2
    f250:	b2da      	uxtb	r2, r3
    f252:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25a:	701a      	strb	r2, [r3, #0]
    f25c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f264:	781a      	ldrb	r2, [r3, #0]
    f266:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f26e:	781b      	ldrb	r3, [r3, #0]
    f270:	4413      	add	r3, r2
    f272:	b2da      	uxtb	r2, r3
    f274:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27c:	701a      	strb	r2, [r3, #0]
    f27e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	3301      	adds	r3, #1
    f28a:	b2da      	uxtb	r2, r3
    f28c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f294:	701a      	strb	r2, [r3, #0]
    f296:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f29e:	781b      	ldrb	r3, [r3, #0]
    f2a0:	2bff      	cmp	r3, #255	; 0xff
    f2a2:	d105      	bne.n	f2b0 <send_gps_pos+0x9f0>
    f2a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ac:	2200      	movs	r2, #0
    f2ae:	701a      	strb	r2, [r3, #0]
    f2b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	461a      	mov	r2, r3
    f2bc:	f24b 0344 	movw	r3, #45124	; 0xb044
    f2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c4:	7899      	ldrb	r1, [r3, #2]
    f2c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ce:	5499      	strb	r1, [r3, r2]
    f2d0:	4bae      	ldr	r3, [pc, #696]	; (f58c <send_gps_pos+0xccc>)
    f2d2:	781a      	ldrb	r2, [r3, #0]
    f2d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2dc:	781b      	ldrb	r3, [r3, #0]
    f2de:	4413      	add	r3, r2
    f2e0:	b2da      	uxtb	r2, r3
    f2e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	701a      	strb	r2, [r3, #0]
    f2ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f4:	781a      	ldrb	r2, [r3, #0]
    f2f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2fe:	781b      	ldrb	r3, [r3, #0]
    f300:	4413      	add	r3, r2
    f302:	b2da      	uxtb	r2, r3
    f304:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f30c:	701a      	strb	r2, [r3, #0]
    f30e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f316:	781b      	ldrb	r3, [r3, #0]
    f318:	3301      	adds	r3, #1
    f31a:	b2da      	uxtb	r2, r3
    f31c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f324:	701a      	strb	r2, [r3, #0]
    f326:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f32e:	781b      	ldrb	r3, [r3, #0]
    f330:	2bff      	cmp	r3, #255	; 0xff
    f332:	d105      	bne.n	f340 <send_gps_pos+0xa80>
    f334:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33c:	2200      	movs	r2, #0
    f33e:	701a      	strb	r2, [r3, #0]
    f340:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f348:	781b      	ldrb	r3, [r3, #0]
    f34a:	461a      	mov	r2, r3
    f34c:	f24b 0344 	movw	r3, #45124	; 0xb044
    f350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f354:	78d9      	ldrb	r1, [r3, #3]
    f356:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f35e:	5499      	strb	r1, [r3, r2]
    f360:	4b8b      	ldr	r3, [pc, #556]	; (f590 <send_gps_pos+0xcd0>)
    f362:	781a      	ldrb	r2, [r3, #0]
    f364:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	4413      	add	r3, r2
    f370:	b2da      	uxtb	r2, r3
    f372:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f37a:	701a      	strb	r2, [r3, #0]
    f37c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f384:	781a      	ldrb	r2, [r3, #0]
    f386:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38e:	781b      	ldrb	r3, [r3, #0]
    f390:	4413      	add	r3, r2
    f392:	b2da      	uxtb	r2, r3
    f394:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39c:	701a      	strb	r2, [r3, #0]
    f39e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	3301      	adds	r3, #1
    f3aa:	b2da      	uxtb	r2, r3
    f3ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b4:	701a      	strb	r2, [r3, #0]
    f3b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3be:	781b      	ldrb	r3, [r3, #0]
    f3c0:	2bff      	cmp	r3, #255	; 0xff
    f3c2:	d105      	bne.n	f3d0 <send_gps_pos+0xb10>
    f3c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3cc:	2200      	movs	r2, #0
    f3ce:	701a      	strb	r2, [r3, #0]
    f3d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d8:	781b      	ldrb	r3, [r3, #0]
    f3da:	461a      	mov	r2, r3
    f3dc:	f24b 0348 	movw	r3, #45128	; 0xb048
    f3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e4:	7819      	ldrb	r1, [r3, #0]
    f3e6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ee:	5499      	strb	r1, [r3, r2]
    f3f0:	f24b 0348 	movw	r3, #45128	; 0xb048
    f3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f8:	781a      	ldrb	r2, [r3, #0]
    f3fa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f402:	781b      	ldrb	r3, [r3, #0]
    f404:	4413      	add	r3, r2
    f406:	b2da      	uxtb	r2, r3
    f408:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f410:	701a      	strb	r2, [r3, #0]
    f412:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41a:	781a      	ldrb	r2, [r3, #0]
    f41c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	4413      	add	r3, r2
    f428:	b2da      	uxtb	r2, r3
    f42a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f432:	701a      	strb	r2, [r3, #0]
    f434:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	3301      	adds	r3, #1
    f440:	b2da      	uxtb	r2, r3
    f442:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44a:	701a      	strb	r2, [r3, #0]
    f44c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	2bff      	cmp	r3, #255	; 0xff
    f458:	d105      	bne.n	f466 <send_gps_pos+0xba6>
    f45a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f462:	2200      	movs	r2, #0
    f464:	701a      	strb	r2, [r3, #0]
    f466:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46e:	781b      	ldrb	r3, [r3, #0]
    f470:	461a      	mov	r2, r3
    f472:	f24b 0348 	movw	r3, #45128	; 0xb048
    f476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f47a:	7859      	ldrb	r1, [r3, #1]
    f47c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f484:	5499      	strb	r1, [r3, r2]
    f486:	4b43      	ldr	r3, [pc, #268]	; (f594 <send_gps_pos+0xcd4>)
    f488:	781a      	ldrb	r2, [r3, #0]
    f48a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f492:	781b      	ldrb	r3, [r3, #0]
    f494:	4413      	add	r3, r2
    f496:	b2da      	uxtb	r2, r3
    f498:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a0:	701a      	strb	r2, [r3, #0]
    f4a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4aa:	781a      	ldrb	r2, [r3, #0]
    f4ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b4:	781b      	ldrb	r3, [r3, #0]
    f4b6:	4413      	add	r3, r2
    f4b8:	b2da      	uxtb	r2, r3
    f4ba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c2:	701a      	strb	r2, [r3, #0]
    f4c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4cc:	781b      	ldrb	r3, [r3, #0]
    f4ce:	3301      	adds	r3, #1
    f4d0:	b2da      	uxtb	r2, r3
    f4d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4da:	701a      	strb	r2, [r3, #0]
    f4dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e4:	781b      	ldrb	r3, [r3, #0]
    f4e6:	2bff      	cmp	r3, #255	; 0xff
    f4e8:	d105      	bne.n	f4f6 <send_gps_pos+0xc36>
    f4ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f2:	2200      	movs	r2, #0
    f4f4:	701a      	strb	r2, [r3, #0]
    f4f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	781b      	ldrb	r3, [r3, #0]
    f500:	461a      	mov	r2, r3
    f502:	f24b 0348 	movw	r3, #45128	; 0xb048
    f506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f50a:	7899      	ldrb	r1, [r3, #2]
    f50c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f514:	5499      	strb	r1, [r3, r2]
    f516:	4b20      	ldr	r3, [pc, #128]	; (f598 <send_gps_pos+0xcd8>)
    f518:	781a      	ldrb	r2, [r3, #0]
    f51a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f522:	781b      	ldrb	r3, [r3, #0]
    f524:	4413      	add	r3, r2
    f526:	b2da      	uxtb	r2, r3
    f528:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f530:	701a      	strb	r2, [r3, #0]
    f532:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f53a:	781a      	ldrb	r2, [r3, #0]
    f53c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f544:	781b      	ldrb	r3, [r3, #0]
    f546:	4413      	add	r3, r2
    f548:	b2da      	uxtb	r2, r3
    f54a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f552:	701a      	strb	r2, [r3, #0]
    f554:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	3301      	adds	r3, #1
    f560:	b2da      	uxtb	r2, r3
    f562:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f56a:	701a      	strb	r2, [r3, #0]
    f56c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	2bff      	cmp	r3, #255	; 0xff
    f578:	d110      	bne.n	f59c <send_gps_pos+0xcdc>
    f57a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f582:	2200      	movs	r2, #0
    f584:	701a      	strb	r2, [r3, #0]
    f586:	e009      	b.n	f59c <send_gps_pos+0xcdc>
    f588:	2000b045 	.word	0x2000b045
    f58c:	2000b046 	.word	0x2000b046
    f590:	2000b047 	.word	0x2000b047
    f594:	2000b049 	.word	0x2000b049
    f598:	2000b04a 	.word	0x2000b04a
    f59c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a4:	781b      	ldrb	r3, [r3, #0]
    f5a6:	461a      	mov	r2, r3
    f5a8:	f24b 0348 	movw	r3, #45128	; 0xb048
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	78d9      	ldrb	r1, [r3, #3]
    f5b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ba:	5499      	strb	r1, [r3, r2]
    f5bc:	4bd3      	ldr	r3, [pc, #844]	; (f90c <send_gps_pos+0x104c>)
    f5be:	781a      	ldrb	r2, [r3, #0]
    f5c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	4413      	add	r3, r2
    f5cc:	b2da      	uxtb	r2, r3
    f5ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d6:	701a      	strb	r2, [r3, #0]
    f5d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	781a      	ldrb	r2, [r3, #0]
    f5e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ea:	781b      	ldrb	r3, [r3, #0]
    f5ec:	4413      	add	r3, r2
    f5ee:	b2da      	uxtb	r2, r3
    f5f0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5f8:	701a      	strb	r2, [r3, #0]
    f5fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f602:	781b      	ldrb	r3, [r3, #0]
    f604:	3301      	adds	r3, #1
    f606:	b2da      	uxtb	r2, r3
    f608:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f610:	701a      	strb	r2, [r3, #0]
    f612:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61a:	781b      	ldrb	r3, [r3, #0]
    f61c:	2bff      	cmp	r3, #255	; 0xff
    f61e:	d105      	bne.n	f62c <send_gps_pos+0xd6c>
    f620:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f628:	2200      	movs	r2, #0
    f62a:	701a      	strb	r2, [r3, #0]
    f62c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f634:	781b      	ldrb	r3, [r3, #0]
    f636:	461a      	mov	r2, r3
    f638:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f640:	7819      	ldrb	r1, [r3, #0]
    f642:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64a:	5499      	strb	r1, [r3, r2]
    f64c:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f654:	781a      	ldrb	r2, [r3, #0]
    f656:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	4413      	add	r3, r2
    f662:	b2da      	uxtb	r2, r3
    f664:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	781a      	ldrb	r2, [r3, #0]
    f678:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f680:	781b      	ldrb	r3, [r3, #0]
    f682:	4413      	add	r3, r2
    f684:	b2da      	uxtb	r2, r3
    f686:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f68e:	701a      	strb	r2, [r3, #0]
    f690:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	3301      	adds	r3, #1
    f69c:	b2da      	uxtb	r2, r3
    f69e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a6:	701a      	strb	r2, [r3, #0]
    f6a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	2bff      	cmp	r3, #255	; 0xff
    f6b4:	d105      	bne.n	f6c2 <send_gps_pos+0xe02>
    f6b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6be:	2200      	movs	r2, #0
    f6c0:	701a      	strb	r2, [r3, #0]
    f6c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ca:	781b      	ldrb	r3, [r3, #0]
    f6cc:	461a      	mov	r2, r3
    f6ce:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	7859      	ldrb	r1, [r3, #1]
    f6d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e0:	5499      	strb	r1, [r3, r2]
    f6e2:	4b8b      	ldr	r3, [pc, #556]	; (f910 <send_gps_pos+0x1050>)
    f6e4:	781a      	ldrb	r2, [r3, #0]
    f6e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ee:	781b      	ldrb	r3, [r3, #0]
    f6f0:	4413      	add	r3, r2
    f6f2:	b2da      	uxtb	r2, r3
    f6f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6fc:	701a      	strb	r2, [r3, #0]
    f6fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f706:	781a      	ldrb	r2, [r3, #0]
    f708:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	781b      	ldrb	r3, [r3, #0]
    f712:	4413      	add	r3, r2
    f714:	b2da      	uxtb	r2, r3
    f716:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71e:	701a      	strb	r2, [r3, #0]
    f720:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	3301      	adds	r3, #1
    f72c:	b2da      	uxtb	r2, r3
    f72e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f736:	701a      	strb	r2, [r3, #0]
    f738:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f740:	781b      	ldrb	r3, [r3, #0]
    f742:	2bff      	cmp	r3, #255	; 0xff
    f744:	d105      	bne.n	f752 <send_gps_pos+0xe92>
    f746:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74e:	2200      	movs	r2, #0
    f750:	701a      	strb	r2, [r3, #0]
    f752:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f75a:	781b      	ldrb	r3, [r3, #0]
    f75c:	461a      	mov	r2, r3
    f75e:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f766:	7899      	ldrb	r1, [r3, #2]
    f768:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	5499      	strb	r1, [r3, r2]
    f772:	4b68      	ldr	r3, [pc, #416]	; (f914 <send_gps_pos+0x1054>)
    f774:	781a      	ldrb	r2, [r3, #0]
    f776:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77e:	781b      	ldrb	r3, [r3, #0]
    f780:	4413      	add	r3, r2
    f782:	b2da      	uxtb	r2, r3
    f784:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f78c:	701a      	strb	r2, [r3, #0]
    f78e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f796:	781a      	ldrb	r2, [r3, #0]
    f798:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a0:	781b      	ldrb	r3, [r3, #0]
    f7a2:	4413      	add	r3, r2
    f7a4:	b2da      	uxtb	r2, r3
    f7a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ae:	701a      	strb	r2, [r3, #0]
    f7b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b8:	781b      	ldrb	r3, [r3, #0]
    f7ba:	3301      	adds	r3, #1
    f7bc:	b2da      	uxtb	r2, r3
    f7be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c6:	701a      	strb	r2, [r3, #0]
    f7c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d0:	781b      	ldrb	r3, [r3, #0]
    f7d2:	2bff      	cmp	r3, #255	; 0xff
    f7d4:	d105      	bne.n	f7e2 <send_gps_pos+0xf22>
    f7d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7de:	2200      	movs	r2, #0
    f7e0:	701a      	strb	r2, [r3, #0]
    f7e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ea:	781b      	ldrb	r3, [r3, #0]
    f7ec:	461a      	mov	r2, r3
    f7ee:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f6:	78d9      	ldrb	r1, [r3, #3]
    f7f8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f800:	5499      	strb	r1, [r3, r2]
    f802:	4b45      	ldr	r3, [pc, #276]	; (f918 <send_gps_pos+0x1058>)
    f804:	781a      	ldrb	r2, [r3, #0]
    f806:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80e:	781b      	ldrb	r3, [r3, #0]
    f810:	4413      	add	r3, r2
    f812:	b2da      	uxtb	r2, r3
    f814:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f81c:	701a      	strb	r2, [r3, #0]
    f81e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f826:	781a      	ldrb	r2, [r3, #0]
    f828:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f830:	781b      	ldrb	r3, [r3, #0]
    f832:	4413      	add	r3, r2
    f834:	b2da      	uxtb	r2, r3
    f836:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f83e:	701a      	strb	r2, [r3, #0]
    f840:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f848:	781b      	ldrb	r3, [r3, #0]
    f84a:	3301      	adds	r3, #1
    f84c:	b2da      	uxtb	r2, r3
    f84e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f856:	701a      	strb	r2, [r3, #0]
    f858:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f860:	781b      	ldrb	r3, [r3, #0]
    f862:	2bff      	cmp	r3, #255	; 0xff
    f864:	d105      	bne.n	f872 <send_gps_pos+0xfb2>
    f866:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f86e:	2200      	movs	r2, #0
    f870:	701a      	strb	r2, [r3, #0]
    f872:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f87a:	781b      	ldrb	r3, [r3, #0]
    f87c:	461a      	mov	r2, r3
    f87e:	f24b 0340 	movw	r3, #45120	; 0xb040
    f882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f886:	7819      	ldrb	r1, [r3, #0]
    f888:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f890:	5499      	strb	r1, [r3, r2]
    f892:	f24b 0340 	movw	r3, #45120	; 0xb040
    f896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f89a:	781a      	ldrb	r2, [r3, #0]
    f89c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a4:	781b      	ldrb	r3, [r3, #0]
    f8a6:	4413      	add	r3, r2
    f8a8:	b2da      	uxtb	r2, r3
    f8aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8bc:	781a      	ldrb	r2, [r3, #0]
    f8be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c6:	781b      	ldrb	r3, [r3, #0]
    f8c8:	4413      	add	r3, r2
    f8ca:	b2da      	uxtb	r2, r3
    f8cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d4:	701a      	strb	r2, [r3, #0]
    f8d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8de:	781b      	ldrb	r3, [r3, #0]
    f8e0:	3301      	adds	r3, #1
    f8e2:	b2da      	uxtb	r2, r3
    f8e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ec:	701a      	strb	r2, [r3, #0]
    f8ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f6:	781b      	ldrb	r3, [r3, #0]
    f8f8:	2bff      	cmp	r3, #255	; 0xff
    f8fa:	d10f      	bne.n	f91c <send_gps_pos+0x105c>
    f8fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f904:	2200      	movs	r2, #0
    f906:	701a      	strb	r2, [r3, #0]
    f908:	e008      	b.n	f91c <send_gps_pos+0x105c>
    f90a:	bf00      	nop
    f90c:	2000b04b 	.word	0x2000b04b
    f910:	2000b04d 	.word	0x2000b04d
    f914:	2000b04e 	.word	0x2000b04e
    f918:	2000b04f 	.word	0x2000b04f
    f91c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	461a      	mov	r2, r3
    f928:	f24b 0340 	movw	r3, #45120	; 0xb040
    f92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f930:	7859      	ldrb	r1, [r3, #1]
    f932:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93a:	5499      	strb	r1, [r3, r2]
    f93c:	4bc0      	ldr	r3, [pc, #768]	; (fc40 <send_gps_pos+0x1380>)
    f93e:	781a      	ldrb	r2, [r3, #0]
    f940:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f948:	781b      	ldrb	r3, [r3, #0]
    f94a:	4413      	add	r3, r2
    f94c:	b2da      	uxtb	r2, r3
    f94e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f956:	701a      	strb	r2, [r3, #0]
    f958:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f960:	781a      	ldrb	r2, [r3, #0]
    f962:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96a:	781b      	ldrb	r3, [r3, #0]
    f96c:	4413      	add	r3, r2
    f96e:	b2da      	uxtb	r2, r3
    f970:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f978:	701a      	strb	r2, [r3, #0]
    f97a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f982:	781b      	ldrb	r3, [r3, #0]
    f984:	3301      	adds	r3, #1
    f986:	b2da      	uxtb	r2, r3
    f988:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f990:	701a      	strb	r2, [r3, #0]
    f992:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99a:	781b      	ldrb	r3, [r3, #0]
    f99c:	2bff      	cmp	r3, #255	; 0xff
    f99e:	d105      	bne.n	f9ac <send_gps_pos+0x10ec>
    f9a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a8:	2200      	movs	r2, #0
    f9aa:	701a      	strb	r2, [r3, #0]
    f9ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b4:	781b      	ldrb	r3, [r3, #0]
    f9b6:	461a      	mov	r2, r3
    f9b8:	f24b 0340 	movw	r3, #45120	; 0xb040
    f9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c0:	7899      	ldrb	r1, [r3, #2]
    f9c2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ca:	5499      	strb	r1, [r3, r2]
    f9cc:	4b9d      	ldr	r3, [pc, #628]	; (fc44 <send_gps_pos+0x1384>)
    f9ce:	781a      	ldrb	r2, [r3, #0]
    f9d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d8:	781b      	ldrb	r3, [r3, #0]
    f9da:	4413      	add	r3, r2
    f9dc:	b2da      	uxtb	r2, r3
    f9de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e6:	701a      	strb	r2, [r3, #0]
    f9e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f0:	781a      	ldrb	r2, [r3, #0]
    f9f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fa:	781b      	ldrb	r3, [r3, #0]
    f9fc:	4413      	add	r3, r2
    f9fe:	b2da      	uxtb	r2, r3
    fa00:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa08:	701a      	strb	r2, [r3, #0]
    fa0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa12:	781b      	ldrb	r3, [r3, #0]
    fa14:	3301      	adds	r3, #1
    fa16:	b2da      	uxtb	r2, r3
    fa18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa20:	701a      	strb	r2, [r3, #0]
    fa22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	2bff      	cmp	r3, #255	; 0xff
    fa2e:	d105      	bne.n	fa3c <send_gps_pos+0x117c>
    fa30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa38:	2200      	movs	r2, #0
    fa3a:	701a      	strb	r2, [r3, #0]
    fa3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa44:	781b      	ldrb	r3, [r3, #0]
    fa46:	461a      	mov	r2, r3
    fa48:	f24b 0340 	movw	r3, #45120	; 0xb040
    fa4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa50:	78d9      	ldrb	r1, [r3, #3]
    fa52:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fa56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa5a:	5499      	strb	r1, [r3, r2]
    fa5c:	4b7a      	ldr	r3, [pc, #488]	; (fc48 <send_gps_pos+0x1388>)
    fa5e:	781a      	ldrb	r2, [r3, #0]
    fa60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa68:	781b      	ldrb	r3, [r3, #0]
    fa6a:	4413      	add	r3, r2
    fa6c:	b2da      	uxtb	r2, r3
    fa6e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa76:	701a      	strb	r2, [r3, #0]
    fa78:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa80:	781a      	ldrb	r2, [r3, #0]
    fa82:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	4413      	add	r3, r2
    fa8e:	b2da      	uxtb	r2, r3
    fa90:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	3301      	adds	r3, #1
    faa6:	b2da      	uxtb	r2, r3
    faa8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    faac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab0:	701a      	strb	r2, [r3, #0]
    fab2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faba:	781b      	ldrb	r3, [r3, #0]
    fabc:	2bff      	cmp	r3, #255	; 0xff
    fabe:	d105      	bne.n	facc <send_gps_pos+0x120c>
    fac0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac8:	2200      	movs	r2, #0
    faca:	701a      	strb	r2, [r3, #0]
    facc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad4:	781b      	ldrb	r3, [r3, #0]
    fad6:	461a      	mov	r2, r3
    fad8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae0:	7819      	ldrb	r1, [r3, #0]
    fae2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faea:	5499      	strb	r1, [r3, r2]
    faec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    faf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf4:	781b      	ldrb	r3, [r3, #0]
    faf6:	3301      	adds	r3, #1
    faf8:	b2da      	uxtb	r2, r3
    fafa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fafe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb02:	701a      	strb	r2, [r3, #0]
    fb04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0c:	781b      	ldrb	r3, [r3, #0]
    fb0e:	2bff      	cmp	r3, #255	; 0xff
    fb10:	d105      	bne.n	fb1e <send_gps_pos+0x125e>
    fb12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb1a:	2200      	movs	r2, #0
    fb1c:	701a      	strb	r2, [r3, #0]
    fb1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb26:	781b      	ldrb	r3, [r3, #0]
    fb28:	461a      	mov	r2, r3
    fb2a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb32:	7819      	ldrb	r1, [r3, #0]
    fb34:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3c:	5499      	strb	r1, [r3, r2]
    fb3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb46:	781b      	ldrb	r3, [r3, #0]
    fb48:	3301      	adds	r3, #1
    fb4a:	b2da      	uxtb	r2, r3
    fb4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb54:	701a      	strb	r2, [r3, #0]
    fb56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	2bff      	cmp	r3, #255	; 0xff
    fb62:	d105      	bne.n	fb70 <send_gps_pos+0x12b0>
    fb64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6c:	2200      	movs	r2, #0
    fb6e:	701a      	strb	r2, [r3, #0]
    fb70:	f242 0339 	movw	r3, #8249	; 0x2039
    fb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	b2db      	uxtb	r3, r3
    fb7c:	f003 0310 	and.w	r3, r3, #16
    fb80:	2b00      	cmp	r3, #0
    fb82:	d15a      	bne.n	fc3a <send_gps_pos+0x137a>
    fb84:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8c:	781b      	ldrb	r3, [r3, #0]
    fb8e:	b2db      	uxtb	r3, r3
    fb90:	461a      	mov	r2, r3
    fb92:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb9a:	5c9a      	ldrb	r2, [r3, r2]
    fb9c:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    fba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba4:	701a      	strb	r2, [r3, #0]
    fba6:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    fbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbae:	2200      	movs	r2, #0
    fbb0:	701a      	strb	r2, [r3, #0]
    fbb2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbba:	781b      	ldrb	r3, [r3, #0]
    fbbc:	b2db      	uxtb	r3, r3
    fbbe:	3301      	adds	r3, #1
    fbc0:	b2da      	uxtb	r2, r3
    fbc2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbca:	701a      	strb	r2, [r3, #0]
    fbcc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	b2db      	uxtb	r3, r3
    fbd8:	2bff      	cmp	r3, #255	; 0xff
    fbda:	d105      	bne.n	fbe8 <send_gps_pos+0x1328>
    fbdc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fbe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe4:	2200      	movs	r2, #0
    fbe6:	701a      	strb	r2, [r3, #0]
    fbe8:	f242 0338 	movw	r3, #8248	; 0x2038
    fbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf0:	f242 0238 	movw	r2, #8248	; 0x2038
    fbf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fbf8:	7812      	ldrb	r2, [r2, #0]
    fbfa:	b2d2      	uxtb	r2, r2
    fbfc:	f042 0201 	orr.w	r2, r2, #1
    fc00:	b2d2      	uxtb	r2, r2
    fc02:	701a      	strb	r2, [r3, #0]
    fc04:	f242 0339 	movw	r3, #8249	; 0x2039
    fc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0c:	f242 0239 	movw	r2, #8249	; 0x2039
    fc10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc14:	7812      	ldrb	r2, [r2, #0]
    fc16:	b2d2      	uxtb	r2, r2
    fc18:	f042 0210 	orr.w	r2, r2, #16
    fc1c:	b2d2      	uxtb	r2, r2
    fc1e:	701a      	strb	r2, [r3, #0]
    fc20:	e00b      	b.n	fc3a <send_gps_pos+0x137a>
    fc22:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc2a:	781b      	ldrb	r3, [r3, #0]
    fc2c:	3301      	adds	r3, #1
    fc2e:	b2da      	uxtb	r2, r3
    fc30:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc38:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fc3a:	f005 fbfd 	bl	15438 <estimator_update_state_gps>
  }
}
    fc3e:	bd80      	pop	{r7, pc}
    fc40:	2000b041 	.word	0x2000b041
    fc44:	2000b042 	.word	0x2000b042
    fc48:	2000b043 	.word	0x2000b043

0000fc4c <send_radIR>:

void send_radIR(void){
    fc4c:	b480      	push	{r7}
    fc4e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fc50:	f24b 0366 	movw	r3, #45158	; 0xb066
    fc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc58:	781b      	ldrb	r3, [r3, #0]
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	f000 85e8 	beq.w	10830 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fc60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc68:	781a      	ldrb	r2, [r3, #0]
    fc6a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc72:	781b      	ldrb	r3, [r3, #0]
    fc74:	b2db      	uxtb	r3, r3
    fc76:	429a      	cmp	r2, r3
    fc78:	d313      	bcc.n	fca2 <send_radIR+0x56>
    fc7a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	b2db      	uxtb	r3, r3
    fc86:	461a      	mov	r2, r3
    fc88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	1ad3      	subs	r3, r2, r3
    fc94:	33ff      	adds	r3, #255	; 0xff
    fc96:	2b14      	cmp	r3, #20
    fc98:	bfd4      	ite	le
    fc9a:	2300      	movle	r3, #0
    fc9c:	2301      	movgt	r3, #1
    fc9e:	b2db      	uxtb	r3, r3
    fca0:	e011      	b.n	fcc6 <send_radIR+0x7a>
    fca2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcaa:	781b      	ldrb	r3, [r3, #0]
    fcac:	b2db      	uxtb	r3, r3
    fcae:	461a      	mov	r2, r3
    fcb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb8:	781b      	ldrb	r3, [r3, #0]
    fcba:	1ad3      	subs	r3, r2, r3
    fcbc:	2b14      	cmp	r3, #20
    fcbe:	bfd4      	ite	le
    fcc0:	2300      	movle	r3, #0
    fcc2:	2301      	movgt	r3, #1
    fcc4:	b2db      	uxtb	r3, r3
    fcc6:	2b00      	cmp	r3, #0
    fcc8:	f000 85a6 	beq.w	10818 <send_radIR+0xbcc>
    fccc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	461a      	mov	r2, r3
    fcd8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fcdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce0:	2105      	movs	r1, #5
    fce2:	5499      	strb	r1, [r3, r2]
    fce4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcec:	781b      	ldrb	r3, [r3, #0]
    fcee:	3301      	adds	r3, #1
    fcf0:	b2da      	uxtb	r2, r3
    fcf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fcf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	2bff      	cmp	r3, #255	; 0xff
    fd08:	d105      	bne.n	fd16 <send_radIR+0xca>
    fd0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd12:	2200      	movs	r2, #0
    fd14:	701a      	strb	r2, [r3, #0]
    fd16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	461a      	mov	r2, r3
    fd22:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fd26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd2a:	2105      	movs	r1, #5
    fd2c:	5499      	strb	r1, [r3, r2]
    fd2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd36:	781b      	ldrb	r3, [r3, #0]
    fd38:	3301      	adds	r3, #1
    fd3a:	b2da      	uxtb	r2, r3
    fd3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd44:	701a      	strb	r2, [r3, #0]
    fd46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd4e:	781b      	ldrb	r3, [r3, #0]
    fd50:	2bff      	cmp	r3, #255	; 0xff
    fd52:	d105      	bne.n	fd60 <send_radIR+0x114>
    fd54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5c:	2200      	movs	r2, #0
    fd5e:	701a      	strb	r2, [r3, #0]
    fd60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd68:	2205      	movs	r2, #5
    fd6a:	701a      	strb	r2, [r3, #0]
    fd6c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd74:	2205      	movs	r2, #5
    fd76:	701a      	strb	r2, [r3, #0]
    fd78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd80:	781b      	ldrb	r3, [r3, #0]
    fd82:	461a      	mov	r2, r3
    fd84:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd8c:	7819      	ldrb	r1, [r3, #0]
    fd8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd96:	5499      	strb	r1, [r3, r2]
    fd98:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda0:	781a      	ldrb	r2, [r3, #0]
    fda2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	4413      	add	r3, r2
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	781a      	ldrb	r2, [r3, #0]
    fdc4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	4413      	add	r3, r2
    fdd0:	b2da      	uxtb	r2, r3
    fdd2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdda:	701a      	strb	r2, [r3, #0]
    fddc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde4:	781b      	ldrb	r3, [r3, #0]
    fde6:	3301      	adds	r3, #1
    fde8:	b2da      	uxtb	r2, r3
    fdea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf2:	701a      	strb	r2, [r3, #0]
    fdf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdfc:	781b      	ldrb	r3, [r3, #0]
    fdfe:	2bff      	cmp	r3, #255	; 0xff
    fe00:	d105      	bne.n	fe0e <send_radIR+0x1c2>
    fe02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0a:	2200      	movs	r2, #0
    fe0c:	701a      	strb	r2, [r3, #0]
    fe0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe16:	781b      	ldrb	r3, [r3, #0]
    fe18:	461a      	mov	r2, r3
    fe1a:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fe1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe22:	7859      	ldrb	r1, [r3, #1]
    fe24:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fe28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe2c:	5499      	strb	r1, [r3, r2]
    fe2e:	4bd2      	ldr	r3, [pc, #840]	; (10178 <send_radIR+0x52c>)
    fe30:	781a      	ldrb	r2, [r3, #0]
    fe32:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	4413      	add	r3, r2
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	781a      	ldrb	r2, [r3, #0]
    fe54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe5c:	781b      	ldrb	r3, [r3, #0]
    fe5e:	4413      	add	r3, r2
    fe60:	b2da      	uxtb	r2, r3
    fe62:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6a:	701a      	strb	r2, [r3, #0]
    fe6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe74:	781b      	ldrb	r3, [r3, #0]
    fe76:	3301      	adds	r3, #1
    fe78:	b2da      	uxtb	r2, r3
    fe7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe82:	701a      	strb	r2, [r3, #0]
    fe84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe8c:	781b      	ldrb	r3, [r3, #0]
    fe8e:	2bff      	cmp	r3, #255	; 0xff
    fe90:	d105      	bne.n	fe9e <send_radIR+0x252>
    fe92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9a:	2200      	movs	r2, #0
    fe9c:	701a      	strb	r2, [r3, #0]
    fe9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea6:	781b      	ldrb	r3, [r3, #0]
    fea8:	461a      	mov	r2, r3
    feaa:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    feae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb2:	7899      	ldrb	r1, [r3, #2]
    feb4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    feb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    febc:	5499      	strb	r1, [r3, r2]
    febe:	4baf      	ldr	r3, [pc, #700]	; (1017c <send_radIR+0x530>)
    fec0:	781a      	ldrb	r2, [r3, #0]
    fec2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feca:	781b      	ldrb	r3, [r3, #0]
    fecc:	4413      	add	r3, r2
    fece:	b2da      	uxtb	r2, r3
    fed0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee2:	781a      	ldrb	r2, [r3, #0]
    fee4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feec:	781b      	ldrb	r3, [r3, #0]
    feee:	4413      	add	r3, r2
    fef0:	b2da      	uxtb	r2, r3
    fef2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefa:	701a      	strb	r2, [r3, #0]
    fefc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff04:	781b      	ldrb	r3, [r3, #0]
    ff06:	3301      	adds	r3, #1
    ff08:	b2da      	uxtb	r2, r3
    ff0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff12:	701a      	strb	r2, [r3, #0]
    ff14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1c:	781b      	ldrb	r3, [r3, #0]
    ff1e:	2bff      	cmp	r3, #255	; 0xff
    ff20:	d105      	bne.n	ff2e <send_radIR+0x2e2>
    ff22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	2200      	movs	r2, #0
    ff2c:	701a      	strb	r2, [r3, #0]
    ff2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff36:	781b      	ldrb	r3, [r3, #0]
    ff38:	461a      	mov	r2, r3
    ff3a:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    ff3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff42:	78d9      	ldrb	r1, [r3, #3]
    ff44:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ff48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff4c:	5499      	strb	r1, [r3, r2]
    ff4e:	4b8c      	ldr	r3, [pc, #560]	; (10180 <send_radIR+0x534>)
    ff50:	781a      	ldrb	r2, [r3, #0]
    ff52:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5a:	781b      	ldrb	r3, [r3, #0]
    ff5c:	4413      	add	r3, r2
    ff5e:	b2da      	uxtb	r2, r3
    ff60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff68:	701a      	strb	r2, [r3, #0]
    ff6a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff72:	781a      	ldrb	r2, [r3, #0]
    ff74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff7c:	781b      	ldrb	r3, [r3, #0]
    ff7e:	4413      	add	r3, r2
    ff80:	b2da      	uxtb	r2, r3
    ff82:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8a:	701a      	strb	r2, [r3, #0]
    ff8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff94:	781b      	ldrb	r3, [r3, #0]
    ff96:	3301      	adds	r3, #1
    ff98:	b2da      	uxtb	r2, r3
    ff9a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa2:	701a      	strb	r2, [r3, #0]
    ffa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	2bff      	cmp	r3, #255	; 0xff
    ffb0:	d105      	bne.n	ffbe <send_radIR+0x372>
    ffb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	2200      	movs	r2, #0
    ffbc:	701a      	strb	r2, [r3, #0]
    ffbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ffc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc6:	781b      	ldrb	r3, [r3, #0]
    ffc8:	461a      	mov	r2, r3
    ffca:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    ffce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd2:	7819      	ldrb	r1, [r3, #0]
    ffd4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ffd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffdc:	5499      	strb	r1, [r3, r2]
    ffde:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    ffe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe6:	781a      	ldrb	r2, [r3, #0]
    ffe8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ffec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	4413      	add	r3, r2
    fff4:	b2da      	uxtb	r2, r3
    fff6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffe:	701a      	strb	r2, [r3, #0]
   10000:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10008:	781a      	ldrb	r2, [r3, #0]
   1000a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1000e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10012:	781b      	ldrb	r3, [r3, #0]
   10014:	4413      	add	r3, r2
   10016:	b2da      	uxtb	r2, r3
   10018:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1001c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10020:	701a      	strb	r2, [r3, #0]
   10022:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002a:	781b      	ldrb	r3, [r3, #0]
   1002c:	3301      	adds	r3, #1
   1002e:	b2da      	uxtb	r2, r3
   10030:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10038:	701a      	strb	r2, [r3, #0]
   1003a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1003e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	2bff      	cmp	r3, #255	; 0xff
   10046:	d105      	bne.n	10054 <send_radIR+0x408>
   10048:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	2200      	movs	r2, #0
   10052:	701a      	strb	r2, [r3, #0]
   10054:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005c:	781b      	ldrb	r3, [r3, #0]
   1005e:	461a      	mov	r2, r3
   10060:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10068:	7859      	ldrb	r1, [r3, #1]
   1006a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1006e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10072:	5499      	strb	r1, [r3, r2]
   10074:	4b43      	ldr	r3, [pc, #268]	; (10184 <send_radIR+0x538>)
   10076:	781a      	ldrb	r2, [r3, #0]
   10078:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	4413      	add	r3, r2
   10084:	b2da      	uxtb	r2, r3
   10086:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1008a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008e:	701a      	strb	r2, [r3, #0]
   10090:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10098:	781a      	ldrb	r2, [r3, #0]
   1009a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1009e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a2:	781b      	ldrb	r3, [r3, #0]
   100a4:	4413      	add	r3, r2
   100a6:	b2da      	uxtb	r2, r3
   100a8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	701a      	strb	r2, [r3, #0]
   100b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	3301      	adds	r3, #1
   100be:	b2da      	uxtb	r2, r3
   100c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c8:	701a      	strb	r2, [r3, #0]
   100ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	2bff      	cmp	r3, #255	; 0xff
   100d6:	d105      	bne.n	100e4 <send_radIR+0x498>
   100d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e0:	2200      	movs	r2, #0
   100e2:	701a      	strb	r2, [r3, #0]
   100e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	461a      	mov	r2, r3
   100f0:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	7899      	ldrb	r1, [r3, #2]
   100fa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   100fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10102:	5499      	strb	r1, [r3, r2]
   10104:	4b20      	ldr	r3, [pc, #128]	; (10188 <send_radIR+0x53c>)
   10106:	781a      	ldrb	r2, [r3, #0]
   10108:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	781b      	ldrb	r3, [r3, #0]
   10112:	4413      	add	r3, r2
   10114:	b2da      	uxtb	r2, r3
   10116:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1011a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011e:	701a      	strb	r2, [r3, #0]
   10120:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10128:	781a      	ldrb	r2, [r3, #0]
   1012a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1012e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10132:	781b      	ldrb	r3, [r3, #0]
   10134:	4413      	add	r3, r2
   10136:	b2da      	uxtb	r2, r3
   10138:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10140:	701a      	strb	r2, [r3, #0]
   10142:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014a:	781b      	ldrb	r3, [r3, #0]
   1014c:	3301      	adds	r3, #1
   1014e:	b2da      	uxtb	r2, r3
   10150:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10158:	701a      	strb	r2, [r3, #0]
   1015a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1015e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10162:	781b      	ldrb	r3, [r3, #0]
   10164:	2bff      	cmp	r3, #255	; 0xff
   10166:	d111      	bne.n	1018c <send_radIR+0x540>
   10168:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10170:	2200      	movs	r2, #0
   10172:	701a      	strb	r2, [r3, #0]
   10174:	e00a      	b.n	1018c <send_radIR+0x540>
   10176:	bf00      	nop
   10178:	2000b4c9 	.word	0x2000b4c9
   1017c:	2000b4ca 	.word	0x2000b4ca
   10180:	2000b4cb 	.word	0x2000b4cb
   10184:	2000b4cd 	.word	0x2000b4cd
   10188:	2000b4ce 	.word	0x2000b4ce
   1018c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	461a      	mov	r2, r3
   10198:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a0:	78d9      	ldrb	r1, [r3, #3]
   101a2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   101a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101aa:	5499      	strb	r1, [r3, r2]
   101ac:	4bd3      	ldr	r3, [pc, #844]	; (104fc <send_radIR+0x8b0>)
   101ae:	781a      	ldrb	r2, [r3, #0]
   101b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	4413      	add	r3, r2
   101bc:	b2da      	uxtb	r2, r3
   101be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c6:	701a      	strb	r2, [r3, #0]
   101c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   101cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d0:	781a      	ldrb	r2, [r3, #0]
   101d2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   101d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	4413      	add	r3, r2
   101de:	b2da      	uxtb	r2, r3
   101e0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   101e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e8:	701a      	strb	r2, [r3, #0]
   101ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f2:	781b      	ldrb	r3, [r3, #0]
   101f4:	3301      	adds	r3, #1
   101f6:	b2da      	uxtb	r2, r3
   101f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10200:	701a      	strb	r2, [r3, #0]
   10202:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1020a:	781b      	ldrb	r3, [r3, #0]
   1020c:	2bff      	cmp	r3, #255	; 0xff
   1020e:	d105      	bne.n	1021c <send_radIR+0x5d0>
   10210:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10218:	2200      	movs	r2, #0
   1021a:	701a      	strb	r2, [r3, #0]
   1021c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	461a      	mov	r2, r3
   10228:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1022c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10230:	7819      	ldrb	r1, [r3, #0]
   10232:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1023a:	5499      	strb	r1, [r3, r2]
   1023c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   10240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10244:	781a      	ldrb	r2, [r3, #0]
   10246:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1024a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	4413      	add	r3, r2
   10252:	b2da      	uxtb	r2, r3
   10254:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025c:	701a      	strb	r2, [r3, #0]
   1025e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10266:	781a      	ldrb	r2, [r3, #0]
   10268:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1026c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10270:	781b      	ldrb	r3, [r3, #0]
   10272:	4413      	add	r3, r2
   10274:	b2da      	uxtb	r2, r3
   10276:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1027a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1027e:	701a      	strb	r2, [r3, #0]
   10280:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	3301      	adds	r3, #1
   1028c:	b2da      	uxtb	r2, r3
   1028e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10296:	701a      	strb	r2, [r3, #0]
   10298:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1029c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a0:	781b      	ldrb	r3, [r3, #0]
   102a2:	2bff      	cmp	r3, #255	; 0xff
   102a4:	d105      	bne.n	102b2 <send_radIR+0x666>
   102a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ae:	2200      	movs	r2, #0
   102b0:	701a      	strb	r2, [r3, #0]
   102b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ba:	781b      	ldrb	r3, [r3, #0]
   102bc:	461a      	mov	r2, r3
   102be:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   102c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c6:	7859      	ldrb	r1, [r3, #1]
   102c8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   102cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d0:	5499      	strb	r1, [r3, r2]
   102d2:	4b8b      	ldr	r3, [pc, #556]	; (10500 <send_radIR+0x8b4>)
   102d4:	781a      	ldrb	r2, [r3, #0]
   102d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	4413      	add	r3, r2
   102e2:	b2da      	uxtb	r2, r3
   102e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ec:	701a      	strb	r2, [r3, #0]
   102ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   102f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f6:	781a      	ldrb	r2, [r3, #0]
   102f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	4413      	add	r3, r2
   10304:	b2da      	uxtb	r2, r3
   10306:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030e:	701a      	strb	r2, [r3, #0]
   10310:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	3301      	adds	r3, #1
   1031c:	b2da      	uxtb	r2, r3
   1031e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10326:	701a      	strb	r2, [r3, #0]
   10328:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10330:	781b      	ldrb	r3, [r3, #0]
   10332:	2bff      	cmp	r3, #255	; 0xff
   10334:	d105      	bne.n	10342 <send_radIR+0x6f6>
   10336:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1033a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1033e:	2200      	movs	r2, #0
   10340:	701a      	strb	r2, [r3, #0]
   10342:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1034a:	781b      	ldrb	r3, [r3, #0]
   1034c:	461a      	mov	r2, r3
   1034e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   10352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10356:	7899      	ldrb	r1, [r3, #2]
   10358:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10360:	5499      	strb	r1, [r3, r2]
   10362:	4b68      	ldr	r3, [pc, #416]	; (10504 <send_radIR+0x8b8>)
   10364:	781a      	ldrb	r2, [r3, #0]
   10366:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1036a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	4413      	add	r3, r2
   10372:	b2da      	uxtb	r2, r3
   10374:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1037c:	701a      	strb	r2, [r3, #0]
   1037e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10386:	781a      	ldrb	r2, [r3, #0]
   10388:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1038c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10390:	781b      	ldrb	r3, [r3, #0]
   10392:	4413      	add	r3, r2
   10394:	b2da      	uxtb	r2, r3
   10396:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1039a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1039e:	701a      	strb	r2, [r3, #0]
   103a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	3301      	adds	r3, #1
   103ac:	b2da      	uxtb	r2, r3
   103ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b6:	701a      	strb	r2, [r3, #0]
   103b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c0:	781b      	ldrb	r3, [r3, #0]
   103c2:	2bff      	cmp	r3, #255	; 0xff
   103c4:	d105      	bne.n	103d2 <send_radIR+0x786>
   103c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ce:	2200      	movs	r2, #0
   103d0:	701a      	strb	r2, [r3, #0]
   103d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103da:	781b      	ldrb	r3, [r3, #0]
   103dc:	461a      	mov	r2, r3
   103de:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   103e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e6:	78d9      	ldrb	r1, [r3, #3]
   103e8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   103ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f0:	5499      	strb	r1, [r3, r2]
   103f2:	4b45      	ldr	r3, [pc, #276]	; (10508 <send_radIR+0x8bc>)
   103f4:	781a      	ldrb	r2, [r3, #0]
   103f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103fe:	781b      	ldrb	r3, [r3, #0]
   10400:	4413      	add	r3, r2
   10402:	b2da      	uxtb	r2, r3
   10404:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040c:	701a      	strb	r2, [r3, #0]
   1040e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10416:	781a      	ldrb	r2, [r3, #0]
   10418:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1041c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	4413      	add	r3, r2
   10424:	b2da      	uxtb	r2, r3
   10426:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1042a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1042e:	701a      	strb	r2, [r3, #0]
   10430:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	3301      	adds	r3, #1
   1043c:	b2da      	uxtb	r2, r3
   1043e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10446:	701a      	strb	r2, [r3, #0]
   10448:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1044c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10450:	781b      	ldrb	r3, [r3, #0]
   10452:	2bff      	cmp	r3, #255	; 0xff
   10454:	d105      	bne.n	10462 <send_radIR+0x816>
   10456:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1045a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1045e:	2200      	movs	r2, #0
   10460:	701a      	strb	r2, [r3, #0]
   10462:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046a:	781b      	ldrb	r3, [r3, #0]
   1046c:	461a      	mov	r2, r3
   1046e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10476:	7819      	ldrb	r1, [r3, #0]
   10478:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1047c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10480:	5499      	strb	r1, [r3, r2]
   10482:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1048a:	781a      	ldrb	r2, [r3, #0]
   1048c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	4413      	add	r3, r2
   10498:	b2da      	uxtb	r2, r3
   1049a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1049e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a2:	701a      	strb	r2, [r3, #0]
   104a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   104a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ac:	781a      	ldrb	r2, [r3, #0]
   104ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   104b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b6:	781b      	ldrb	r3, [r3, #0]
   104b8:	4413      	add	r3, r2
   104ba:	b2da      	uxtb	r2, r3
   104bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   104c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c4:	701a      	strb	r2, [r3, #0]
   104c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ce:	781b      	ldrb	r3, [r3, #0]
   104d0:	3301      	adds	r3, #1
   104d2:	b2da      	uxtb	r2, r3
   104d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104dc:	701a      	strb	r2, [r3, #0]
   104de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e6:	781b      	ldrb	r3, [r3, #0]
   104e8:	2bff      	cmp	r3, #255	; 0xff
   104ea:	d10f      	bne.n	1050c <send_radIR+0x8c0>
   104ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f4:	2200      	movs	r2, #0
   104f6:	701a      	strb	r2, [r3, #0]
   104f8:	e008      	b.n	1050c <send_radIR+0x8c0>
   104fa:	bf00      	nop
   104fc:	2000b4cf 	.word	0x2000b4cf
   10500:	2000b4c5 	.word	0x2000b4c5
   10504:	2000b4c6 	.word	0x2000b4c6
   10508:	2000b4c7 	.word	0x2000b4c7
   1050c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10514:	781b      	ldrb	r3, [r3, #0]
   10516:	461a      	mov	r2, r3
   10518:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1051c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10520:	7859      	ldrb	r1, [r3, #1]
   10522:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052a:	5499      	strb	r1, [r3, r2]
   1052c:	4bc2      	ldr	r3, [pc, #776]	; (10838 <send_radIR+0xbec>)
   1052e:	781a      	ldrb	r2, [r3, #0]
   10530:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	4413      	add	r3, r2
   1053c:	b2da      	uxtb	r2, r3
   1053e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10546:	701a      	strb	r2, [r3, #0]
   10548:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1054c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10550:	781a      	ldrb	r2, [r3, #0]
   10552:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	4413      	add	r3, r2
   1055e:	b2da      	uxtb	r2, r3
   10560:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10568:	701a      	strb	r2, [r3, #0]
   1056a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10572:	781b      	ldrb	r3, [r3, #0]
   10574:	3301      	adds	r3, #1
   10576:	b2da      	uxtb	r2, r3
   10578:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1057c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10580:	701a      	strb	r2, [r3, #0]
   10582:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1058a:	781b      	ldrb	r3, [r3, #0]
   1058c:	2bff      	cmp	r3, #255	; 0xff
   1058e:	d105      	bne.n	1059c <send_radIR+0x950>
   10590:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10598:	2200      	movs	r2, #0
   1059a:	701a      	strb	r2, [r3, #0]
   1059c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a4:	781b      	ldrb	r3, [r3, #0]
   105a6:	461a      	mov	r2, r3
   105a8:	f240 33f4 	movw	r3, #1012	; 0x3f4
   105ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b0:	7819      	ldrb	r1, [r3, #0]
   105b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   105b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ba:	5499      	strb	r1, [r3, r2]
   105bc:	f240 33f4 	movw	r3, #1012	; 0x3f4
   105c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c4:	781a      	ldrb	r2, [r3, #0]
   105c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ce:	781b      	ldrb	r3, [r3, #0]
   105d0:	4413      	add	r3, r2
   105d2:	b2da      	uxtb	r2, r3
   105d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105dc:	701a      	strb	r2, [r3, #0]
   105de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   105e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e6:	781a      	ldrb	r2, [r3, #0]
   105e8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f0:	781b      	ldrb	r3, [r3, #0]
   105f2:	4413      	add	r3, r2
   105f4:	b2da      	uxtb	r2, r3
   105f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   105fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fe:	701a      	strb	r2, [r3, #0]
   10600:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10608:	781b      	ldrb	r3, [r3, #0]
   1060a:	3301      	adds	r3, #1
   1060c:	b2da      	uxtb	r2, r3
   1060e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10616:	701a      	strb	r2, [r3, #0]
   10618:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1061c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10620:	781b      	ldrb	r3, [r3, #0]
   10622:	2bff      	cmp	r3, #255	; 0xff
   10624:	d105      	bne.n	10632 <send_radIR+0x9e6>
   10626:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1062a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062e:	2200      	movs	r2, #0
   10630:	701a      	strb	r2, [r3, #0]
   10632:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1063a:	781b      	ldrb	r3, [r3, #0]
   1063c:	461a      	mov	r2, r3
   1063e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10646:	7859      	ldrb	r1, [r3, #1]
   10648:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1064c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10650:	5499      	strb	r1, [r3, r2]
   10652:	4b7a      	ldr	r3, [pc, #488]	; (1083c <send_radIR+0xbf0>)
   10654:	781a      	ldrb	r2, [r3, #0]
   10656:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1065a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1065e:	781b      	ldrb	r3, [r3, #0]
   10660:	4413      	add	r3, r2
   10662:	b2da      	uxtb	r2, r3
   10664:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066c:	701a      	strb	r2, [r3, #0]
   1066e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10672:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10676:	781a      	ldrb	r2, [r3, #0]
   10678:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1067c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10680:	781b      	ldrb	r3, [r3, #0]
   10682:	4413      	add	r3, r2
   10684:	b2da      	uxtb	r2, r3
   10686:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1068a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1068e:	701a      	strb	r2, [r3, #0]
   10690:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10698:	781b      	ldrb	r3, [r3, #0]
   1069a:	3301      	adds	r3, #1
   1069c:	b2da      	uxtb	r2, r3
   1069e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a6:	701a      	strb	r2, [r3, #0]
   106a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b0:	781b      	ldrb	r3, [r3, #0]
   106b2:	2bff      	cmp	r3, #255	; 0xff
   106b4:	d105      	bne.n	106c2 <send_radIR+0xa76>
   106b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106be:	2200      	movs	r2, #0
   106c0:	701a      	strb	r2, [r3, #0]
   106c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	461a      	mov	r2, r3
   106ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d6:	7819      	ldrb	r1, [r3, #0]
   106d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   106dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e0:	5499      	strb	r1, [r3, r2]
   106e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ea:	781b      	ldrb	r3, [r3, #0]
   106ec:	3301      	adds	r3, #1
   106ee:	b2da      	uxtb	r2, r3
   106f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f8:	701a      	strb	r2, [r3, #0]
   106fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	2bff      	cmp	r3, #255	; 0xff
   10706:	d105      	bne.n	10714 <send_radIR+0xac8>
   10708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10710:	2200      	movs	r2, #0
   10712:	701a      	strb	r2, [r3, #0]
   10714:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1071c:	781b      	ldrb	r3, [r3, #0]
   1071e:	461a      	mov	r2, r3
   10720:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10728:	7819      	ldrb	r1, [r3, #0]
   1072a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1072e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10732:	5499      	strb	r1, [r3, r2]
   10734:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073c:	781b      	ldrb	r3, [r3, #0]
   1073e:	3301      	adds	r3, #1
   10740:	b2da      	uxtb	r2, r3
   10742:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074a:	701a      	strb	r2, [r3, #0]
   1074c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10754:	781b      	ldrb	r3, [r3, #0]
   10756:	2bff      	cmp	r3, #255	; 0xff
   10758:	d105      	bne.n	10766 <send_radIR+0xb1a>
   1075a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1075e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10762:	2200      	movs	r2, #0
   10764:	701a      	strb	r2, [r3, #0]
   10766:	f242 0339 	movw	r3, #8249	; 0x2039
   1076a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076e:	781b      	ldrb	r3, [r3, #0]
   10770:	b2db      	uxtb	r3, r3
   10772:	f003 0310 	and.w	r3, r3, #16
   10776:	2b00      	cmp	r3, #0
   10778:	d15a      	bne.n	10830 <send_radIR+0xbe4>
   1077a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1077e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	b2db      	uxtb	r3, r3
   10786:	461a      	mov	r2, r3
   10788:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1078c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10790:	5c9a      	ldrb	r2, [r3, r2]
   10792:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079a:	701a      	strb	r2, [r3, #0]
   1079c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   107a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a4:	2200      	movs	r2, #0
   107a6:	701a      	strb	r2, [r3, #0]
   107a8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   107ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b0:	781b      	ldrb	r3, [r3, #0]
   107b2:	b2db      	uxtb	r3, r3
   107b4:	3301      	adds	r3, #1
   107b6:	b2da      	uxtb	r2, r3
   107b8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   107bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c0:	701a      	strb	r2, [r3, #0]
   107c2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   107c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ca:	781b      	ldrb	r3, [r3, #0]
   107cc:	b2db      	uxtb	r3, r3
   107ce:	2bff      	cmp	r3, #255	; 0xff
   107d0:	d105      	bne.n	107de <send_radIR+0xb92>
   107d2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   107d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107da:	2200      	movs	r2, #0
   107dc:	701a      	strb	r2, [r3, #0]
   107de:	f242 0338 	movw	r3, #8248	; 0x2038
   107e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e6:	f242 0238 	movw	r2, #8248	; 0x2038
   107ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   107ee:	7812      	ldrb	r2, [r2, #0]
   107f0:	b2d2      	uxtb	r2, r2
   107f2:	f042 0201 	orr.w	r2, r2, #1
   107f6:	b2d2      	uxtb	r2, r2
   107f8:	701a      	strb	r2, [r3, #0]
   107fa:	f242 0339 	movw	r3, #8249	; 0x2039
   107fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10802:	f242 0239 	movw	r2, #8249	; 0x2039
   10806:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1080a:	7812      	ldrb	r2, [r2, #0]
   1080c:	b2d2      	uxtb	r2, r2
   1080e:	f042 0210 	orr.w	r2, r2, #16
   10812:	b2d2      	uxtb	r2, r2
   10814:	701a      	strb	r2, [r3, #0]
   10816:	e00b      	b.n	10830 <send_radIR+0xbe4>
   10818:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1081c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	3301      	adds	r3, #1
   10824:	b2da      	uxtb	r2, r3
   10826:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1082a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1082e:	701a      	strb	r2, [r3, #0]
}
   10830:	46bd      	mov	sp, r7
   10832:	f85d 7b04 	ldr.w	r7, [sp], #4
   10836:	4770      	bx	lr
   10838:	200003f3 	.word	0x200003f3
   1083c:	200003f5 	.word	0x200003f5

00010840 <send_takeOff>:

void send_takeOff(void){
   10840:	b580      	push	{r7, lr}
   10842:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10844:	f24b 0366 	movw	r3, #45158	; 0xb066
   10848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084c:	781b      	ldrb	r3, [r3, #0]
   1084e:	2b00      	cmp	r3, #0
   10850:	f000 8200 	beq.w	10c54 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10854:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   10858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1085c:	881b      	ldrh	r3, [r3, #0]
   1085e:	2b00      	cmp	r3, #0
   10860:	f040 81f2 	bne.w	10c48 <send_takeOff+0x408>
   10864:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   10868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086c:	681b      	ldr	r3, [r3, #0]
   1086e:	4618      	mov	r0, r3
   10870:	f04f 0100 	mov.w	r1, #0
   10874:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10878:	f007 fe12 	bl	184a0 <__aeabi_fcmpgt>
   1087c:	4603      	mov	r3, r0
   1087e:	2b00      	cmp	r3, #0
   10880:	f000 81e2 	beq.w	10c48 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10884:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   10888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1088c:	2201      	movs	r2, #1
   1088e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10890:	f64a 63c8 	movw	r3, #44744	; 0xaec8
   10894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10898:	2201      	movs	r2, #1
   1089a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   1089c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   108a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a4:	781a      	ldrb	r2, [r3, #0]
   108a6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   108aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ae:	781b      	ldrb	r3, [r3, #0]
   108b0:	b2db      	uxtb	r3, r3
   108b2:	429a      	cmp	r2, r3
   108b4:	d313      	bcc.n	108de <send_takeOff+0x9e>
   108b6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   108ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	b2db      	uxtb	r3, r3
   108c2:	461a      	mov	r2, r3
   108c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   108c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108cc:	781b      	ldrb	r3, [r3, #0]
   108ce:	1ad3      	subs	r3, r2, r3
   108d0:	33ff      	adds	r3, #255	; 0xff
   108d2:	2b06      	cmp	r3, #6
   108d4:	bfd4      	ite	le
   108d6:	2300      	movle	r3, #0
   108d8:	2301      	movgt	r3, #1
   108da:	b2db      	uxtb	r3, r3
   108dc:	e011      	b.n	10902 <send_takeOff+0xc2>
   108de:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   108e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e6:	781b      	ldrb	r3, [r3, #0]
   108e8:	b2db      	uxtb	r3, r3
   108ea:	461a      	mov	r2, r3
   108ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   108f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f4:	781b      	ldrb	r3, [r3, #0]
   108f6:	1ad3      	subs	r3, r2, r3
   108f8:	2b06      	cmp	r3, #6
   108fa:	bfd4      	ite	le
   108fc:	2300      	movle	r3, #0
   108fe:	2301      	movgt	r3, #1
   10900:	b2db      	uxtb	r3, r3
   10902:	2b00      	cmp	r3, #0
   10904:	f000 8194 	beq.w	10c30 <send_takeOff+0x3f0>
   10908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1090c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10910:	781b      	ldrb	r3, [r3, #0]
   10912:	461a      	mov	r2, r3
   10914:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1091c:	2105      	movs	r1, #5
   1091e:	5499      	strb	r1, [r3, r2]
   10920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10928:	781b      	ldrb	r3, [r3, #0]
   1092a:	3301      	adds	r3, #1
   1092c:	b2da      	uxtb	r2, r3
   1092e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10936:	701a      	strb	r2, [r3, #0]
   10938:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1093c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10940:	781b      	ldrb	r3, [r3, #0]
   10942:	2bff      	cmp	r3, #255	; 0xff
   10944:	d105      	bne.n	10952 <send_takeOff+0x112>
   10946:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094e:	2200      	movs	r2, #0
   10950:	701a      	strb	r2, [r3, #0]
   10952:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095a:	781b      	ldrb	r3, [r3, #0]
   1095c:	461a      	mov	r2, r3
   1095e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10966:	2104      	movs	r1, #4
   10968:	5499      	strb	r1, [r3, r2]
   1096a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10972:	781b      	ldrb	r3, [r3, #0]
   10974:	3301      	adds	r3, #1
   10976:	b2da      	uxtb	r2, r3
   10978:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1097c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10980:	701a      	strb	r2, [r3, #0]
   10982:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1098a:	781b      	ldrb	r3, [r3, #0]
   1098c:	2bff      	cmp	r3, #255	; 0xff
   1098e:	d105      	bne.n	1099c <send_takeOff+0x15c>
   10990:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10994:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10998:	2200      	movs	r2, #0
   1099a:	701a      	strb	r2, [r3, #0]
   1099c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   109a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a4:	2204      	movs	r2, #4
   109a6:	701a      	strb	r2, [r3, #0]
   109a8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   109ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b0:	2204      	movs	r2, #4
   109b2:	701a      	strb	r2, [r3, #0]
   109b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109bc:	781b      	ldrb	r3, [r3, #0]
   109be:	461a      	mov	r2, r3
   109c0:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   109c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c8:	7819      	ldrb	r1, [r3, #0]
   109ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   109ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d2:	5499      	strb	r1, [r3, r2]
   109d4:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   109d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109dc:	781a      	ldrb	r2, [r3, #0]
   109de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   109e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e6:	781b      	ldrb	r3, [r3, #0]
   109e8:	4413      	add	r3, r2
   109ea:	b2da      	uxtb	r2, r3
   109ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   109f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f4:	701a      	strb	r2, [r3, #0]
   109f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   109fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fe:	781a      	ldrb	r2, [r3, #0]
   10a00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	4413      	add	r3, r2
   10a0c:	b2da      	uxtb	r2, r3
   10a0e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a16:	701a      	strb	r2, [r3, #0]
   10a18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a20:	781b      	ldrb	r3, [r3, #0]
   10a22:	3301      	adds	r3, #1
   10a24:	b2da      	uxtb	r2, r3
   10a26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a2e:	701a      	strb	r2, [r3, #0]
   10a30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	2bff      	cmp	r3, #255	; 0xff
   10a3c:	d105      	bne.n	10a4a <send_takeOff+0x20a>
   10a3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a46:	2200      	movs	r2, #0
   10a48:	701a      	strb	r2, [r3, #0]
   10a4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a52:	781b      	ldrb	r3, [r3, #0]
   10a54:	461a      	mov	r2, r3
   10a56:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a5e:	7859      	ldrb	r1, [r3, #1]
   10a60:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a68:	5499      	strb	r1, [r3, r2]
   10a6a:	4b7b      	ldr	r3, [pc, #492]	; (10c58 <send_takeOff+0x418>)
   10a6c:	781a      	ldrb	r2, [r3, #0]
   10a6e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a76:	781b      	ldrb	r3, [r3, #0]
   10a78:	4413      	add	r3, r2
   10a7a:	b2da      	uxtb	r2, r3
   10a7c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a84:	701a      	strb	r2, [r3, #0]
   10a86:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a8e:	781a      	ldrb	r2, [r3, #0]
   10a90:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	4413      	add	r3, r2
   10a9c:	b2da      	uxtb	r2, r3
   10a9e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa6:	701a      	strb	r2, [r3, #0]
   10aa8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	3301      	adds	r3, #1
   10ab4:	b2da      	uxtb	r2, r3
   10ab6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abe:	701a      	strb	r2, [r3, #0]
   10ac0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac8:	781b      	ldrb	r3, [r3, #0]
   10aca:	2bff      	cmp	r3, #255	; 0xff
   10acc:	d105      	bne.n	10ada <send_takeOff+0x29a>
   10ace:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad6:	2200      	movs	r2, #0
   10ad8:	701a      	strb	r2, [r3, #0]
   10ada:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae2:	781b      	ldrb	r3, [r3, #0]
   10ae4:	461a      	mov	r2, r3
   10ae6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aee:	7819      	ldrb	r1, [r3, #0]
   10af0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af8:	5499      	strb	r1, [r3, r2]
   10afa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b02:	781b      	ldrb	r3, [r3, #0]
   10b04:	3301      	adds	r3, #1
   10b06:	b2da      	uxtb	r2, r3
   10b08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b10:	701a      	strb	r2, [r3, #0]
   10b12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1a:	781b      	ldrb	r3, [r3, #0]
   10b1c:	2bff      	cmp	r3, #255	; 0xff
   10b1e:	d105      	bne.n	10b2c <send_takeOff+0x2ec>
   10b20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
   10b2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b34:	781b      	ldrb	r3, [r3, #0]
   10b36:	461a      	mov	r2, r3
   10b38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b40:	7819      	ldrb	r1, [r3, #0]
   10b42:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4a:	5499      	strb	r1, [r3, r2]
   10b4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b54:	781b      	ldrb	r3, [r3, #0]
   10b56:	3301      	adds	r3, #1
   10b58:	b2da      	uxtb	r2, r3
   10b5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b62:	701a      	strb	r2, [r3, #0]
   10b64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b6c:	781b      	ldrb	r3, [r3, #0]
   10b6e:	2bff      	cmp	r3, #255	; 0xff
   10b70:	d105      	bne.n	10b7e <send_takeOff+0x33e>
   10b72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b7a:	2200      	movs	r2, #0
   10b7c:	701a      	strb	r2, [r3, #0]
   10b7e:	f242 0339 	movw	r3, #8249	; 0x2039
   10b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b86:	781b      	ldrb	r3, [r3, #0]
   10b88:	b2db      	uxtb	r3, r3
   10b8a:	f003 0310 	and.w	r3, r3, #16
   10b8e:	2b00      	cmp	r3, #0
   10b90:	d15a      	bne.n	10c48 <send_takeOff+0x408>
   10b92:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	b2db      	uxtb	r3, r3
   10b9e:	461a      	mov	r2, r3
   10ba0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba8:	5c9a      	ldrb	r2, [r3, r2]
   10baa:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb2:	701a      	strb	r2, [r3, #0]
   10bb4:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bbc:	2200      	movs	r2, #0
   10bbe:	701a      	strb	r2, [r3, #0]
   10bc0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc8:	781b      	ldrb	r3, [r3, #0]
   10bca:	b2db      	uxtb	r3, r3
   10bcc:	3301      	adds	r3, #1
   10bce:	b2da      	uxtb	r2, r3
   10bd0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd8:	701a      	strb	r2, [r3, #0]
   10bda:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	b2db      	uxtb	r3, r3
   10be6:	2bff      	cmp	r3, #255	; 0xff
   10be8:	d105      	bne.n	10bf6 <send_takeOff+0x3b6>
   10bea:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf2:	2200      	movs	r2, #0
   10bf4:	701a      	strb	r2, [r3, #0]
   10bf6:	f242 0338 	movw	r3, #8248	; 0x2038
   10bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfe:	f242 0238 	movw	r2, #8248	; 0x2038
   10c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c06:	7812      	ldrb	r2, [r2, #0]
   10c08:	b2d2      	uxtb	r2, r2
   10c0a:	f042 0201 	orr.w	r2, r2, #1
   10c0e:	b2d2      	uxtb	r2, r2
   10c10:	701a      	strb	r2, [r3, #0]
   10c12:	f242 0339 	movw	r3, #8249	; 0x2039
   10c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1a:	f242 0239 	movw	r2, #8249	; 0x2039
   10c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c22:	7812      	ldrb	r2, [r2, #0]
   10c24:	b2d2      	uxtb	r2, r2
   10c26:	f042 0210 	orr.w	r2, r2, #16
   10c2a:	b2d2      	uxtb	r2, r2
   10c2c:	701a      	strb	r2, [r3, #0]
   10c2e:	e00b      	b.n	10c48 <send_takeOff+0x408>
   10c30:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c38:	781b      	ldrb	r3, [r3, #0]
   10c3a:	3301      	adds	r3, #1
   10c3c:	b2da      	uxtb	r2, r3
   10c3e:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c46:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10c48:	f24b 0366 	movw	r3, #45158	; 0xb066
   10c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c50:	2200      	movs	r2, #0
   10c52:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10c54:	bd80      	pop	{r7, pc}
   10c56:	bf00      	nop
   10c58:	2000aeb3 	.word	0x2000aeb3
   10c5c:	f3af 8000 	nop.w

00010c60 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10c60:	b480      	push	{r7}
   10c62:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10c64:	f242 0317 	movw	r3, #8215	; 0x2017
   10c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6c:	f242 0217 	movw	r2, #8215	; 0x2017
   10c70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c74:	7812      	ldrb	r2, [r2, #0]
   10c76:	b2d2      	uxtb	r2, r2
   10c78:	f042 0210 	orr.w	r2, r2, #16
   10c7c:	b2d2      	uxtb	r2, r2
   10c7e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10c80:	f242 0331 	movw	r3, #8241	; 0x2031
   10c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c88:	2201      	movs	r2, #1
   10c8a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10c8c:	f242 0333 	movw	r3, #8243	; 0x2033
   10c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c94:	2219      	movs	r2, #25
   10c96:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10c98:	f242 0311 	movw	r3, #8209	; 0x2011
   10c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca0:	f242 0211 	movw	r2, #8209	; 0x2011
   10ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ca8:	7812      	ldrb	r2, [r2, #0]
   10caa:	b2d2      	uxtb	r2, r2
   10cac:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10cb0:	b2d2      	uxtb	r2, r2
   10cb2:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10cb4:	f242 0312 	movw	r3, #8210	; 0x2012
   10cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cbc:	f242 0212 	movw	r2, #8210	; 0x2012
   10cc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cc4:	7812      	ldrb	r2, [r2, #0]
   10cc6:	b2d2      	uxtb	r2, r2
   10cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ccc:	b2d2      	uxtb	r2, r2
   10cce:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10cd0:	f242 0312 	movw	r3, #8210	; 0x2012
   10cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd8:	f242 0212 	movw	r2, #8210	; 0x2012
   10cdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ce0:	7812      	ldrb	r2, [r2, #0]
   10ce2:	b2d2      	uxtb	r2, r2
   10ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ce8:	b2d2      	uxtb	r2, r2
   10cea:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10cec:	f242 033a 	movw	r3, #8250	; 0x203a
   10cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf4:	f242 023a 	movw	r2, #8250	; 0x203a
   10cf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cfc:	7812      	ldrb	r2, [r2, #0]
   10cfe:	b2d2      	uxtb	r2, r2
   10d00:	f042 0202 	orr.w	r2, r2, #2
   10d04:	b2d2      	uxtb	r2, r2
   10d06:	701a      	strb	r2, [r3, #0]
}
   10d08:	46bd      	mov	sp, r7
   10d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d0e:	4770      	bx	lr

00010d10 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10d10:	b480      	push	{r7}
   10d12:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10d14:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d1c:	781b      	ldrb	r3, [r3, #0]
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d10e      	bne.n	10d40 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d22:	f242 0312 	movw	r3, #8210	; 0x2012
   10d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d2a:	f242 0212 	movw	r2, #8210	; 0x2012
   10d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d32:	7812      	ldrb	r2, [r2, #0]
   10d34:	b2d2      	uxtb	r2, r2
   10d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10d3a:	b2d2      	uxtb	r2, r2
   10d3c:	701a      	strb	r2, [r3, #0]
   10d3e:	e047      	b.n	10dd0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10d40:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d48:	781b      	ldrb	r3, [r3, #0]
   10d4a:	2b08      	cmp	r3, #8
   10d4c:	d832      	bhi.n	10db4 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10d4e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d56:	781b      	ldrb	r3, [r3, #0]
   10d58:	f003 0301 	and.w	r3, r3, #1
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d00e      	beq.n	10d7e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d60:	f242 0312 	movw	r3, #8210	; 0x2012
   10d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d68:	f242 0212 	movw	r2, #8210	; 0x2012
   10d6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d70:	7812      	ldrb	r2, [r2, #0]
   10d72:	b2d2      	uxtb	r2, r2
   10d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10d78:	b2d2      	uxtb	r2, r2
   10d7a:	701a      	strb	r2, [r3, #0]
   10d7c:	e00d      	b.n	10d9a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d7e:	f242 0312 	movw	r3, #8210	; 0x2012
   10d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d86:	f242 0212 	movw	r2, #8210	; 0x2012
   10d8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d8e:	7812      	ldrb	r2, [r2, #0]
   10d90:	b2d2      	uxtb	r2, r2
   10d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10d96:	b2d2      	uxtb	r2, r2
   10d98:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10d9a:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	085b      	lsrs	r3, r3, #1
   10da6:	b2da      	uxtb	r2, r3
   10da8:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db0:	701a      	strb	r2, [r3, #0]
   10db2:	e00d      	b.n	10dd0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10db4:	f242 0312 	movw	r3, #8210	; 0x2012
   10db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dbc:	f242 0212 	movw	r2, #8210	; 0x2012
   10dc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dc4:	7812      	ldrb	r2, [r2, #0]
   10dc6:	b2d2      	uxtb	r2, r2
   10dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10dcc:	b2d2      	uxtb	r2, r2
   10dce:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10dd0:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	3301      	adds	r3, #1
   10ddc:	b2da      	uxtb	r2, r3
   10dde:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10de8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df0:	781b      	ldrb	r3, [r3, #0]
   10df2:	2b09      	cmp	r3, #9
   10df4:	d94d      	bls.n	10e92 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10df6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dfe:	781a      	ldrb	r2, [r3, #0]
   10e00:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e08:	781b      	ldrb	r3, [r3, #0]
   10e0a:	b2db      	uxtb	r3, r3
   10e0c:	429a      	cmp	r2, r3
   10e0e:	d10e      	bne.n	10e2e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10e10:	f242 0339 	movw	r3, #8249	; 0x2039
   10e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e18:	f242 0239 	movw	r2, #8249	; 0x2039
   10e1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e20:	7812      	ldrb	r2, [r2, #0]
   10e22:	b2d2      	uxtb	r2, r2
   10e24:	f022 0210 	bic.w	r2, r2, #16
   10e28:	b2d2      	uxtb	r2, r2
   10e2a:	701a      	strb	r2, [r3, #0]
   10e2c:	e031      	b.n	10e92 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10e2e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e36:	781b      	ldrb	r3, [r3, #0]
   10e38:	b2db      	uxtb	r3, r3
   10e3a:	461a      	mov	r2, r3
   10e3c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e44:	5c9a      	ldrb	r2, [r3, r2]
   10e46:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4e:	701a      	strb	r2, [r3, #0]
   10e50:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e58:	2200      	movs	r2, #0
   10e5a:	701a      	strb	r2, [r3, #0]
   10e5c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e64:	781b      	ldrb	r3, [r3, #0]
   10e66:	b2db      	uxtb	r3, r3
   10e68:	3301      	adds	r3, #1
   10e6a:	b2da      	uxtb	r2, r3
   10e6c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e74:	701a      	strb	r2, [r3, #0]
   10e76:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e7e:	781b      	ldrb	r3, [r3, #0]
   10e80:	b2db      	uxtb	r3, r3
   10e82:	2bff      	cmp	r3, #255	; 0xff
   10e84:	d105      	bne.n	10e92 <__vector_5+0x182>
   10e86:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e8e:	2200      	movs	r2, #0
   10e90:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10e92:	46bd      	mov	sp, r7
   10e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop

00010e9c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10e9c:	b480      	push	{r7}
   10e9e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10ea0:	f24b 0307 	movw	r3, #45063	; 0xb007
   10ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10eaa:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb2:	2200      	movs	r2, #0
   10eb4:	701a      	strb	r2, [r3, #0]
}
   10eb6:	46bd      	mov	sp, r7
   10eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ebc:	4770      	bx	lr
   10ebe:	bf00      	nop

00010ec0 <link_fbw_send>:

void link_fbw_send(void) {
   10ec0:	b480      	push	{r7}
   10ec2:	b083      	sub	sp, #12
   10ec4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10ec6:	f24b 030c 	movw	r3, #45068	; 0xb00c
   10eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ece:	781b      	ldrb	r3, [r3, #0]
   10ed0:	b2db      	uxtb	r3, r3
   10ed2:	2b00      	cmp	r3, #0
   10ed4:	d00c      	beq.n	10ef0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10ed6:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ede:	781b      	ldrb	r3, [r3, #0]
   10ee0:	3301      	adds	r3, #1
   10ee2:	b2da      	uxtb	r2, r3
   10ee4:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eec:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10eee:	e064      	b.n	10fba <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10ef0:	f242 030d 	movw	r3, #8205	; 0x200d
   10ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef8:	2251      	movs	r2, #81	; 0x51
   10efa:	701a      	strb	r2, [r3, #0]
   10efc:	f242 030e 	movw	r3, #8206	; 0x200e
   10f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	b2db      	uxtb	r3, r3
   10f08:	b2db      	uxtb	r3, r3
   10f0a:	b25b      	sxtb	r3, r3
   10f0c:	2b00      	cmp	r3, #0
   10f0e:	da05      	bge.n	10f1c <link_fbw_send+0x5c>
   10f10:	f242 030f 	movw	r3, #8207	; 0x200f
   10f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f18:	781b      	ldrb	r3, [r3, #0]
   10f1a:	71fb      	strb	r3, [r7, #7]
   10f1c:	f242 030d 	movw	r3, #8205	; 0x200d
   10f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f24:	f242 020d 	movw	r2, #8205	; 0x200d
   10f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f2c:	7812      	ldrb	r2, [r2, #0]
   10f2e:	b2d2      	uxtb	r2, r2
   10f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10f34:	b2d2      	uxtb	r2, r2
   10f36:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10f38:	f24b 030c 	movw	r3, #45068	; 0xb00c
   10f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f40:	2201      	movs	r2, #1
   10f42:	701a      	strb	r2, [r3, #0]
   10f44:	f242 0318 	movw	r3, #8216	; 0x2018
   10f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f4c:	f242 0218 	movw	r2, #8216	; 0x2018
   10f50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f54:	7812      	ldrb	r2, [r2, #0]
   10f56:	b2d2      	uxtb	r2, r2
   10f58:	f022 0201 	bic.w	r2, r2, #1
   10f5c:	b2d2      	uxtb	r2, r2
   10f5e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10f60:	f24b 0309 	movw	r3, #45065	; 0xb009
   10f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f68:	2200      	movs	r2, #0
   10f6a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10f6c:	f24b 030a 	movw	r3, #45066	; 0xb00a
   10f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f74:	2200      	movs	r2, #0
   10f76:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10f78:	f24b 0309 	movw	r3, #45065	; 0xb009
   10f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f80:	781b      	ldrb	r3, [r3, #0]
   10f82:	461a      	mov	r2, r3
   10f84:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   10f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8c:	4413      	add	r3, r2
   10f8e:	781a      	ldrb	r2, [r3, #0]
   10f90:	f24b 030b 	movw	r3, #45067	; 0xb00b
   10f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f98:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10f9a:	f242 030f 	movw	r3, #8207	; 0x200f
   10f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa2:	f24b 020b 	movw	r2, #45067	; 0xb00b
   10fa6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10faa:	7812      	ldrb	r2, [r2, #0]
   10fac:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10fae:	f24b 0306 	movw	r3, #45062	; 0xb006
   10fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb6:	2200      	movs	r2, #0
   10fb8:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10fba:	370c      	adds	r7, #12
   10fbc:	46bd      	mov	sp, r7
   10fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fc2:	4770      	bx	lr

00010fc4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10fc4:	b480      	push	{r7}
   10fc6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10fc8:	f242 032a 	movw	r3, #8234	; 0x202a
   10fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd0:	f242 022c 	movw	r2, #8236	; 0x202c
   10fd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd8:	8812      	ldrh	r2, [r2, #0]
   10fda:	b292      	uxth	r2, r2
   10fdc:	32c8      	adds	r2, #200	; 0xc8
   10fde:	b292      	uxth	r2, r2
   10fe0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10fe2:	f242 0336 	movw	r3, #8246	; 0x2036
   10fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fea:	f242 0236 	movw	r2, #8246	; 0x2036
   10fee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff2:	7812      	ldrb	r2, [r2, #0]
   10ff4:	b2d2      	uxtb	r2, r2
   10ff6:	f042 0210 	orr.w	r2, r2, #16
   10ffa:	b2d2      	uxtb	r2, r2
   10ffc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10ffe:	f242 0337 	movw	r3, #8247	; 0x2037
   11002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11006:	f242 0237 	movw	r2, #8247	; 0x2037
   1100a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1100e:	7812      	ldrb	r2, [r2, #0]
   11010:	b2d2      	uxtb	r2, r2
   11012:	f042 0210 	orr.w	r2, r2, #16
   11016:	b2d2      	uxtb	r2, r2
   11018:	701a      	strb	r2, [r3, #0]
}
   1101a:	46bd      	mov	sp, r7
   1101c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11020:	4770      	bx	lr
   11022:	bf00      	nop

00011024 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11024:	b480      	push	{r7}
   11026:	b083      	sub	sp, #12
   11028:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1102a:	f242 0337 	movw	r3, #8247	; 0x2037
   1102e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11032:	f242 0237 	movw	r2, #8247	; 0x2037
   11036:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1103a:	7812      	ldrb	r2, [r2, #0]
   1103c:	b2d2      	uxtb	r2, r2
   1103e:	f022 0210 	bic.w	r2, r2, #16
   11042:	b2d2      	uxtb	r2, r2
   11044:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11046:	f24b 0309 	movw	r3, #45065	; 0xb009
   1104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1104e:	781b      	ldrb	r3, [r3, #0]
   11050:	3301      	adds	r3, #1
   11052:	b2da      	uxtb	r2, r3
   11054:	f24b 0309 	movw	r3, #45065	; 0xb009
   11058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1105c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1105e:	f24b 0309 	movw	r3, #45065	; 0xb009
   11062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11066:	781b      	ldrb	r3, [r3, #0]
   11068:	2b17      	cmp	r3, #23
   1106a:	d162      	bne.n	11132 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1106c:	f242 030f 	movw	r3, #8207	; 0x200f
   11070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11074:	781b      	ldrb	r3, [r3, #0]
   11076:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11078:	f24b 030a 	movw	r3, #45066	; 0xb00a
   1107c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11080:	781b      	ldrb	r3, [r3, #0]
   11082:	79fa      	ldrb	r2, [r7, #7]
   11084:	429a      	cmp	r2, r3
   11086:	d110      	bne.n	110aa <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11088:	f24b 0306 	movw	r3, #45062	; 0xb006
   1108c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11090:	2201      	movs	r2, #1
   11092:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11094:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   11098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109c:	7d1a      	ldrb	r2, [r3, #20]
   1109e:	f24b 0308 	movw	r3, #45064	; 0xb008
   110a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a6:	701a      	strb	r2, [r3, #0]
   110a8:	e00c      	b.n	110c4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   110aa:	f24b 0307 	movw	r3, #45063	; 0xb007
   110ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b2:	781b      	ldrb	r3, [r3, #0]
   110b4:	b2db      	uxtb	r3, r3
   110b6:	3301      	adds	r3, #1
   110b8:	b2da      	uxtb	r2, r3
   110ba:	f24b 0307 	movw	r3, #45063	; 0xb007
   110be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   110c4:	f240 33ee 	movw	r3, #1006	; 0x3ee
   110c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110cc:	2201      	movs	r2, #1
   110ce:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   110d0:	f24b 030c 	movw	r3, #45068	; 0xb00c
   110d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d8:	2200      	movs	r2, #0
   110da:	701a      	strb	r2, [r3, #0]
   110dc:	f242 0318 	movw	r3, #8216	; 0x2018
   110e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e4:	f242 0218 	movw	r2, #8216	; 0x2018
   110e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ec:	7812      	ldrb	r2, [r2, #0]
   110ee:	b2d2      	uxtb	r2, r2
   110f0:	f042 0201 	orr.w	r2, r2, #1
   110f4:	b2d2      	uxtb	r2, r2
   110f6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   110f8:	f242 030d 	movw	r3, #8205	; 0x200d
   110fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11100:	f242 020d 	movw	r2, #8205	; 0x200d
   11104:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11108:	7812      	ldrb	r2, [r2, #0]
   1110a:	b2d2      	uxtb	r2, r2
   1110c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11110:	b2d2      	uxtb	r2, r2
   11112:	701a      	strb	r2, [r3, #0]
   11114:	f242 030d 	movw	r3, #8205	; 0x200d
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	f242 020d 	movw	r2, #8205	; 0x200d
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	b2d2      	uxtb	r2, r2
   11128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1112c:	b2d2      	uxtb	r2, r2
   1112e:	701a      	strb	r2, [r3, #0]
    return;
   11130:	e051      	b.n	111d6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11132:	f24b 0309 	movw	r3, #45065	; 0xb009
   11136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1113a:	781b      	ldrb	r3, [r3, #0]
   1113c:	2b15      	cmp	r3, #21
   1113e:	d820      	bhi.n	11182 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11140:	f24b 0309 	movw	r3, #45065	; 0xb009
   11144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11148:	781b      	ldrb	r3, [r3, #0]
   1114a:	461a      	mov	r2, r3
   1114c:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   11150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11154:	4413      	add	r3, r2
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1115a:	f242 030f 	movw	r3, #8207	; 0x200f
   1115e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11162:	79fa      	ldrb	r2, [r7, #7]
   11164:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11166:	f24b 030b 	movw	r3, #45067	; 0xb00b
   1116a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116e:	781a      	ldrb	r2, [r3, #0]
   11170:	79fb      	ldrb	r3, [r7, #7]
   11172:	4053      	eors	r3, r2
   11174:	b2da      	uxtb	r2, r3
   11176:	f24b 030b 	movw	r3, #45067	; 0xb00b
   1117a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1117e:	701a      	strb	r2, [r3, #0]
   11180:	e009      	b.n	11196 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11182:	f242 030f 	movw	r3, #8207	; 0x200f
   11186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1118a:	f24b 020b 	movw	r2, #45067	; 0xb00b
   1118e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11192:	7812      	ldrb	r2, [r2, #0]
   11194:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11196:	f242 030f 	movw	r3, #8207	; 0x200f
   1119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1119e:	781b      	ldrb	r3, [r3, #0]
   111a0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   111a2:	f24b 0309 	movw	r3, #45065	; 0xb009
   111a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111aa:	781b      	ldrb	r3, [r3, #0]
   111ac:	1e5a      	subs	r2, r3, #1
   111ae:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   111b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b6:	4413      	add	r3, r2
   111b8:	79fa      	ldrb	r2, [r7, #7]
   111ba:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   111bc:	f24b 030a 	movw	r3, #45066	; 0xb00a
   111c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c4:	781a      	ldrb	r2, [r3, #0]
   111c6:	79fb      	ldrb	r3, [r7, #7]
   111c8:	4053      	eors	r3, r2
   111ca:	b2da      	uxtb	r2, r3
   111cc:	f24b 030a 	movw	r3, #45066	; 0xb00a
   111d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d4:	701a      	strb	r2, [r3, #0]
}
   111d6:	370c      	adds	r7, #12
   111d8:	46bd      	mov	sp, r7
   111da:	f85d 7b04 	ldr.w	r7, [sp], #4
   111de:	4770      	bx	lr

000111e0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   111e0:	b480      	push	{r7}
   111e2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   111e4:	f242 0317 	movw	r3, #8215	; 0x2017
   111e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ec:	f242 0217 	movw	r2, #8215	; 0x2017
   111f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111f4:	7812      	ldrb	r2, [r2, #0]
   111f6:	b2d2      	uxtb	r2, r2
   111f8:	f042 0206 	orr.w	r2, r2, #6
   111fc:	b2d2      	uxtb	r2, r2
   111fe:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11200:	f242 0317 	movw	r3, #8215	; 0x2017
   11204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11208:	f242 0217 	movw	r2, #8215	; 0x2017
   1120c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11210:	7812      	ldrb	r2, [r2, #0]
   11212:	b2d2      	uxtb	r2, r2
   11214:	f042 0201 	orr.w	r2, r2, #1
   11218:	b2d2      	uxtb	r2, r2
   1121a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   1121c:	f24b 030c 	movw	r3, #45068	; 0xb00c
   11220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11224:	2200      	movs	r2, #0
   11226:	701a      	strb	r2, [r3, #0]
   11228:	f242 0318 	movw	r3, #8216	; 0x2018
   1122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11230:	f242 0218 	movw	r2, #8216	; 0x2018
   11234:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11238:	7812      	ldrb	r2, [r2, #0]
   1123a:	b2d2      	uxtb	r2, r2
   1123c:	f042 0201 	orr.w	r2, r2, #1
   11240:	b2d2      	uxtb	r2, r2
   11242:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11244:	f242 0302 	movw	r3, #8194	; 0x2002
   11248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1124c:	f242 0202 	movw	r2, #8194	; 0x2002
   11250:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11254:	7812      	ldrb	r2, [r2, #0]
   11256:	b2d2      	uxtb	r2, r2
   11258:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1125c:	b2d2      	uxtb	r2, r2
   1125e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11260:	f24b 030c 	movw	r3, #45068	; 0xb00c
   11264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11268:	2200      	movs	r2, #0
   1126a:	701a      	strb	r2, [r3, #0]
   1126c:	f242 0303 	movw	r3, #8195	; 0x2003
   11270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11274:	f242 0203 	movw	r2, #8195	; 0x2003
   11278:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1127c:	7812      	ldrb	r2, [r2, #0]
   1127e:	b2d2      	uxtb	r2, r2
   11280:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11284:	b2d2      	uxtb	r2, r2
   11286:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11288:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1128c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11290:	2200      	movs	r2, #0
   11292:	701a      	strb	r2, [r3, #0]
}
   11294:	46bd      	mov	sp, r7
   11296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1129a:	4770      	bx	lr

0001129c <__vector_17>:


SIGNAL(SIG_SPI) {
   1129c:	b580      	push	{r7, lr}
   1129e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   112a0:	f24b 030c 	movw	r3, #45068	; 0xb00c
   112a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a8:	781b      	ldrb	r3, [r3, #0]
   112aa:	b2db      	uxtb	r3, r3
   112ac:	2b01      	cmp	r3, #1
   112ae:	d102      	bne.n	112b6 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   112b0:	f7ff fe88 	bl	10fc4 <link_fbw_on_spi_it>
   112b4:	e00b      	b.n	112ce <__vector_17+0x32>
  else
    fatal_error_nb++;
   112b6:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   112ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112be:	781b      	ldrb	r3, [r3, #0]
   112c0:	3301      	adds	r3, #1
   112c2:	b2da      	uxtb	r2, r3
   112c4:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   112c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112cc:	701a      	strb	r2, [r3, #0]
}
   112ce:	bd80      	pop	{r7, pc}

000112d0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   112d0:	b480      	push	{r7}
   112d2:	b083      	sub	sp, #12
   112d4:	af00      	add	r7, sp, #0
   112d6:	4603      	mov	r3, r0
   112d8:	6039      	str	r1, [r7, #0]
   112da:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   112dc:	79fa      	ldrb	r2, [r7, #7]
   112de:	f24b 0320 	movw	r3, #45088	; 0xb020
   112e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e6:	6839      	ldr	r1, [r7, #0]
   112e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   112ec:	370c      	adds	r7, #12
   112ee:	46bd      	mov	sp, r7
   112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   112f4:	4770      	bx	lr
   112f6:	bf00      	nop

000112f8 <adc_init>:

void 
adc_init( void )
{
   112f8:	b480      	push	{r7}
   112fa:	b083      	sub	sp, #12
   112fc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   112fe:	f242 0362 	movw	r3, #8290	; 0x2062
   11302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11306:	2200      	movs	r2, #0
   11308:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1130a:	f242 0361 	movw	r3, #8289	; 0x2061
   1130e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11312:	2200      	movs	r2, #0
   11314:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11316:	f242 0307 	movw	r3, #8199	; 0x2007
   1131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131e:	2240      	movs	r2, #64	; 0x40
   11320:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11322:	f242 0308 	movw	r3, #8200	; 0x2008
   11326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132a:	f242 0208 	movw	r2, #8200	; 0x2008
   1132e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11332:	7812      	ldrb	r2, [r2, #0]
   11334:	b2d2      	uxtb	r2, r2
   11336:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1133a:	b2d2      	uxtb	r2, r2
   1133c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1133e:	f242 0306 	movw	r3, #8198	; 0x2006
   11342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11346:	22cf      	movs	r2, #207	; 0xcf
   11348:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1134a:	2300      	movs	r3, #0
   1134c:	71fb      	strb	r3, [r7, #7]
   1134e:	e00a      	b.n	11366 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11350:	79fa      	ldrb	r2, [r7, #7]
   11352:	f24b 0320 	movw	r3, #45088	; 0xb020
   11356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135a:	2100      	movs	r1, #0
   1135c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11360:	79fb      	ldrb	r3, [r7, #7]
   11362:	3301      	adds	r3, #1
   11364:	71fb      	strb	r3, [r7, #7]
   11366:	79fb      	ldrb	r3, [r7, #7]
   11368:	2b07      	cmp	r3, #7
   1136a:	d9f1      	bls.n	11350 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1136c:	370c      	adds	r7, #12
   1136e:	46bd      	mov	sp, r7
   11370:	f85d 7b04 	ldr.w	r7, [sp], #4
   11374:	4770      	bx	lr
   11376:	bf00      	nop

00011378 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11378:	b480      	push	{r7}
   1137a:	b085      	sub	sp, #20
   1137c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1137e:	f242 0307 	movw	r3, #8199	; 0x2007
   11382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11386:	781b      	ldrb	r3, [r3, #0]
   11388:	b2db      	uxtb	r3, r3
   1138a:	f003 0307 	and.w	r3, r3, #7
   1138e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11390:	7bfa      	ldrb	r2, [r7, #15]
   11392:	f24b 0320 	movw	r3, #45088	; 0xb020
   11396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1139e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   113a0:	f242 0304 	movw	r3, #8196	; 0x2004
   113a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a8:	881b      	ldrh	r3, [r3, #0]
   113aa:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   113ac:	7bfa      	ldrb	r2, [r7, #15]
   113ae:	f24b 0310 	movw	r3, #45072	; 0xb010
   113b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b6:	88f9      	ldrh	r1, [r7, #6]
   113b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   113bc:	68bb      	ldr	r3, [r7, #8]
   113be:	2b00      	cmp	r3, #0
   113c0:	d025      	beq.n	1140e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   113c2:	68bb      	ldr	r3, [r7, #8]
   113c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   113c8:	3301      	adds	r3, #1
   113ca:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   113cc:	7bbb      	ldrb	r3, [r7, #14]
   113ce:	2b1f      	cmp	r3, #31
   113d0:	d901      	bls.n	113d6 <__vector_21+0x5e>
   113d2:	2300      	movs	r3, #0
   113d4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   113d6:	68bb      	ldr	r3, [r7, #8]
   113d8:	881a      	ldrh	r2, [r3, #0]
   113da:	7bbb      	ldrb	r3, [r7, #14]
   113dc:	68b9      	ldr	r1, [r7, #8]
   113de:	005b      	lsls	r3, r3, #1
   113e0:	440b      	add	r3, r1
   113e2:	885b      	ldrh	r3, [r3, #2]
   113e4:	1ad3      	subs	r3, r2, r3
   113e6:	b29a      	uxth	r2, r3
   113e8:	68bb      	ldr	r3, [r7, #8]
   113ea:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   113ec:	7bbb      	ldrb	r3, [r7, #14]
   113ee:	68ba      	ldr	r2, [r7, #8]
   113f0:	005b      	lsls	r3, r3, #1
   113f2:	4413      	add	r3, r2
   113f4:	88fa      	ldrh	r2, [r7, #6]
   113f6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   113f8:	68bb      	ldr	r3, [r7, #8]
   113fa:	881a      	ldrh	r2, [r3, #0]
   113fc:	88fb      	ldrh	r3, [r7, #6]
   113fe:	4413      	add	r3, r2
   11400:	b29a      	uxth	r2, r3
   11402:	68bb      	ldr	r3, [r7, #8]
   11404:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11406:	68bb      	ldr	r3, [r7, #8]
   11408:	7bba      	ldrb	r2, [r7, #14]
   1140a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1140e:	7bfb      	ldrb	r3, [r7, #15]
   11410:	3301      	adds	r3, #1
   11412:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11414:	7bfb      	ldrb	r3, [r7, #15]
   11416:	2b07      	cmp	r3, #7
   11418:	d901      	bls.n	1141e <__vector_21+0xa6>
    adc_input = 0;
   1141a:	2300      	movs	r3, #0
   1141c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1141e:	f242 0307 	movw	r3, #8199	; 0x2007
   11422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11426:	7bfa      	ldrb	r2, [r7, #15]
   11428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1142c:	b2d2      	uxtb	r2, r2
   1142e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11430:	f242 0306 	movw	r3, #8198	; 0x2006
   11434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11438:	f242 0206 	movw	r2, #8198	; 0x2006
   1143c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11440:	7812      	ldrb	r2, [r2, #0]
   11442:	b2d2      	uxtb	r2, r2
   11444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11448:	b2d2      	uxtb	r2, r2
   1144a:	701a      	strb	r2, [r3, #0]
  
}
   1144c:	3714      	adds	r7, #20
   1144e:	46bd      	mov	sp, r7
   11450:	f85d 7b04 	ldr.w	r7, [sp], #4
   11454:	4770      	bx	lr
   11456:	bf00      	nop

00011458 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11458:	b580      	push	{r7, lr}
   1145a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1145c:	f003 fca8 	bl	14db0 <uart1_init>
#endif
  ubx_status = UNINIT;
   11460:	f24b 1367 	movw	r3, #45415	; 0xb167
   11464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11468:	2200      	movs	r2, #0
   1146a:	701a      	strb	r2, [r3, #0]
}
   1146c:	bd80      	pop	{r7, pc}
   1146e:	bf00      	nop

00011470 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11470:	b580      	push	{r7, lr}
   11472:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11474:	f24b 136e 	movw	r3, #45422	; 0xb16e
   11478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147c:	781b      	ldrb	r3, [r3, #0]
   1147e:	2b01      	cmp	r3, #1
   11480:	f040 80f9 	bne.w	11676 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11484:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148c:	781b      	ldrb	r3, [r3, #0]
   1148e:	2b08      	cmp	r3, #8
   11490:	d128      	bne.n	114e4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11492:	f24b 0368 	movw	r3, #45160	; 0xb068
   11496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149a:	685a      	ldr	r2, [r3, #4]
   1149c:	f24b 0354 	movw	r3, #45140	; 0xb054
   114a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   114a6:	f24b 0368 	movw	r3, #45160	; 0xb068
   114aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ae:	689a      	ldr	r2, [r3, #8]
   114b0:	f24b 0358 	movw	r3, #45144	; 0xb058
   114b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b8:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   114ba:	4b73      	ldr	r3, [pc, #460]	; (11688 <parse_gps_msg+0x218>)
   114bc:	681b      	ldr	r3, [r3, #0]
   114be:	4618      	mov	r0, r3
   114c0:	f006 fdde 	bl	18080 <__aeabi_i2f>
   114c4:	4603      	mov	r3, r0
   114c6:	4618      	mov	r0, r3
   114c8:	f04f 0100 	mov.w	r1, #0
   114cc:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   114d0:	f006 fede 	bl	18290 <__aeabi_fdiv>
   114d4:	4603      	mov	r3, r0
   114d6:	461a      	mov	r2, r3
   114d8:	f24b 0344 	movw	r3, #45124	; 0xb044
   114dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e0:	601a      	str	r2, [r3, #0]
   114e2:	e0c8      	b.n	11676 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   114e4:	f24b 136d 	movw	r3, #45421	; 0xb16d
   114e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ec:	781b      	ldrb	r3, [r3, #0]
   114ee:	2b03      	cmp	r3, #3
   114f0:	d10a      	bne.n	11508 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   114f2:	f24b 0368 	movw	r3, #45160	; 0xb068
   114f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fa:	791a      	ldrb	r2, [r3, #4]
   114fc:	f24b 0364 	movw	r3, #45156	; 0xb064
   11500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11504:	701a      	strb	r2, [r3, #0]
   11506:	e0b6      	b.n	11676 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11508:	f24b 136d 	movw	r3, #45421	; 0xb16d
   1150c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11510:	781b      	ldrb	r3, [r3, #0]
   11512:	2b12      	cmp	r3, #18
   11514:	f040 80af 	bne.w	11676 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11518:	4b5c      	ldr	r3, [pc, #368]	; (1168c <parse_gps_msg+0x21c>)
   1151a:	681b      	ldr	r3, [r3, #0]
   1151c:	4618      	mov	r0, r3
   1151e:	f006 fdab 	bl	18078 <__aeabi_ui2f>
   11522:	4603      	mov	r3, r0
   11524:	4618      	mov	r0, r3
   11526:	f04f 0100 	mov.w	r1, #0
   1152a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1152e:	f006 feaf 	bl	18290 <__aeabi_fdiv>
   11532:	4603      	mov	r3, r0
   11534:	461a      	mov	r2, r3
   11536:	f24b 0348 	movw	r3, #45128	; 0xb048
   1153a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11540:	4b51      	ldr	r3, [pc, #324]	; (11688 <parse_gps_msg+0x218>)
   11542:	681b      	ldr	r3, [r3, #0]
   11544:	4618      	mov	r0, r3
   11546:	f006 fd9b 	bl	18080 <__aeabi_i2f>
   1154a:	4603      	mov	r3, r0
   1154c:	4618      	mov	r0, r3
   1154e:	f04f 0100 	mov.w	r1, #0
   11552:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11556:	f006 fe9b 	bl	18290 <__aeabi_fdiv>
   1155a:	4603      	mov	r3, r0
   1155c:	461a      	mov	r2, r3
   1155e:	f24b 034c 	movw	r3, #45132	; 0xb04c
   11562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11566:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11568:	4b49      	ldr	r3, [pc, #292]	; (11690 <parse_gps_msg+0x220>)
   1156a:	681b      	ldr	r3, [r3, #0]
   1156c:	4618      	mov	r0, r3
   1156e:	f006 fd87 	bl	18080 <__aeabi_i2f>
   11572:	4603      	mov	r3, r0
   11574:	4618      	mov	r0, r3
   11576:	f006 f943 	bl	17800 <__aeabi_f2d>
   1157a:	4602      	mov	r2, r0
   1157c:	460b      	mov	r3, r1
   1157e:	4610      	mov	r0, r2
   11580:	4619      	mov	r1, r3
   11582:	a33d      	add	r3, pc, #244	; (adr r3, 11678 <parse_gps_msg+0x208>)
   11584:	e9d3 2300 	ldrd	r2, r3, [r3]
   11588:	f006 fab8 	bl	17afc <__aeabi_ddiv>
   1158c:	4602      	mov	r2, r0
   1158e:	460b      	mov	r3, r1
   11590:	4610      	mov	r0, r2
   11592:	4619      	mov	r1, r3
   11594:	f04f 0200 	mov.w	r2, #0
   11598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1159c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   115a0:	f006 faac 	bl	17afc <__aeabi_ddiv>
   115a4:	4602      	mov	r2, r0
   115a6:	460b      	mov	r3, r1
   115a8:	4610      	mov	r0, r2
   115aa:	4619      	mov	r1, r3
   115ac:	a334      	add	r3, pc, #208	; (adr r3, 11680 <parse_gps_msg+0x210>)
   115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   115b2:	f006 f979 	bl	178a8 <__aeabi_dmul>
   115b6:	4602      	mov	r2, r0
   115b8:	460b      	mov	r3, r1
   115ba:	4610      	mov	r0, r2
   115bc:	4619      	mov	r1, r3
   115be:	f006 fc55 	bl	17e6c <__aeabi_d2f>
   115c2:	4602      	mov	r2, r0
   115c4:	f24b 0350 	movw	r3, #45136	; 0xb050
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   115ce:	f24b 0368 	movw	r3, #45160	; 0xb068
   115d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d6:	681b      	ldr	r3, [r3, #0]
   115d8:	4618      	mov	r0, r3
   115da:	f006 fd4d 	bl	18078 <__aeabi_ui2f>
   115de:	4603      	mov	r3, r0
   115e0:	4618      	mov	r0, r3
   115e2:	f04f 0100 	mov.w	r1, #0
   115e6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   115ea:	f006 fe51 	bl	18290 <__aeabi_fdiv>
   115ee:	4603      	mov	r3, r0
   115f0:	461a      	mov	r2, r3
   115f2:	f24b 0340 	movw	r3, #45120	; 0xb040
   115f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fa:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   115fc:	f24b 0354 	movw	r3, #45140	; 0xb054
   11600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11604:	681a      	ldr	r2, [r3, #0]
   11606:	f248 531f 	movw	r3, #34079	; 0x851f
   1160a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1160e:	fb83 1302 	smull	r1, r3, r3, r2
   11612:	1159      	asrs	r1, r3, #5
   11614:	17d3      	asrs	r3, r2, #31
   11616:	1acb      	subs	r3, r1, r3
   11618:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1161c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11620:	4618      	mov	r0, r3
   11622:	f006 fd2d 	bl	18080 <__aeabi_i2f>
   11626:	4602      	mov	r2, r0
   11628:	f24b 035c 	movw	r3, #45148	; 0xb05c
   1162c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11630:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11632:	f24b 0358 	movw	r3, #45144	; 0xb058
   11636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163a:	681a      	ldr	r2, [r3, #0]
   1163c:	f248 531f 	movw	r3, #34079	; 0x851f
   11640:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11644:	fb83 1302 	smull	r1, r3, r3, r2
   11648:	1159      	asrs	r1, r3, #5
   1164a:	17d3      	asrs	r3, r2, #31
   1164c:	1aca      	subs	r2, r1, r3
   1164e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11652:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11656:	4413      	add	r3, r2
   11658:	4618      	mov	r0, r3
   1165a:	f006 fd11 	bl	18080 <__aeabi_i2f>
   1165e:	4602      	mov	r2, r0
   11660:	f24b 0360 	movw	r3, #45152	; 0xb060
   11664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11668:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1166a:	f24b 0366 	movw	r3, #45158	; 0xb066
   1166e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11672:	2201      	movs	r2, #1
   11674:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11676:	bd80      	pop	{r7, pc}
   11678:	00000000 	.word	0x00000000
   1167c:	40f86a00 	.word	0x40f86a00
   11680:	5a7ed197 	.word	0x5a7ed197
   11684:	400921fb 	.word	0x400921fb
   11688:	2000b074 	.word	0x2000b074
   1168c:	2000b07c 	.word	0x2000b07c
   11690:	2000b080 	.word	0x2000b080

00011694 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11694:	b480      	push	{r7}
   11696:	b083      	sub	sp, #12
   11698:	af00      	add	r7, sp, #0
   1169a:	4603      	mov	r3, r0
   1169c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1169e:	f24b 1367 	movw	r3, #45415	; 0xb167
   116a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a6:	781b      	ldrb	r3, [r3, #0]
   116a8:	2b06      	cmp	r3, #6
   116aa:	d81d      	bhi.n	116e8 <parse_ubx+0x54>
    ck_a += c;
   116ac:	f24b 136b 	movw	r3, #45419	; 0xb16b
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	781a      	ldrb	r2, [r3, #0]
   116b6:	79fb      	ldrb	r3, [r7, #7]
   116b8:	4413      	add	r3, r2
   116ba:	b2da      	uxtb	r2, r3
   116bc:	f24b 136b 	movw	r3, #45419	; 0xb16b
   116c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   116c6:	f24b 136c 	movw	r3, #45420	; 0xb16c
   116ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ce:	781a      	ldrb	r2, [r3, #0]
   116d0:	f24b 136b 	movw	r3, #45419	; 0xb16b
   116d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d8:	781b      	ldrb	r3, [r3, #0]
   116da:	4413      	add	r3, r2
   116dc:	b2da      	uxtb	r2, r3
   116de:	f24b 136c 	movw	r3, #45420	; 0xb16c
   116e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   116e8:	f24b 1367 	movw	r3, #45415	; 0xb167
   116ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f0:	781b      	ldrb	r3, [r3, #0]
   116f2:	2b00      	cmp	r3, #0
   116f4:	d110      	bne.n	11718 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   116f6:	79fb      	ldrb	r3, [r7, #7]
   116f8:	2bb5      	cmp	r3, #181	; 0xb5
   116fa:	f040 8135 	bne.w	11968 <parse_ubx+0x2d4>
      ubx_status++;
   116fe:	f24b 1367 	movw	r3, #45415	; 0xb167
   11702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11706:	781b      	ldrb	r3, [r3, #0]
   11708:	3301      	adds	r3, #1
   1170a:	b2da      	uxtb	r2, r3
   1170c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11710:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11714:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11716:	e12f      	b.n	11978 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11718:	f24b 1367 	movw	r3, #45415	; 0xb167
   1171c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11720:	781b      	ldrb	r3, [r3, #0]
   11722:	2b01      	cmp	r3, #1
   11724:	d11c      	bne.n	11760 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11726:	79fb      	ldrb	r3, [r7, #7]
   11728:	2b62      	cmp	r3, #98	; 0x62
   1172a:	d000      	beq.n	1172e <parse_ubx+0x9a>
      goto error;
   1172c:	e11d      	b.n	1196a <parse_ubx+0x2d6>
    ck_a = 0;
   1172e:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	2200      	movs	r2, #0
   11738:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1173a:	f24b 136c 	movw	r3, #45420	; 0xb16c
   1173e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11742:	2200      	movs	r2, #0
   11744:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11746:	f24b 1367 	movw	r3, #45415	; 0xb167
   1174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1174e:	781b      	ldrb	r3, [r3, #0]
   11750:	3301      	adds	r3, #1
   11752:	b2da      	uxtb	r2, r3
   11754:	f24b 1367 	movw	r3, #45415	; 0xb167
   11758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175c:	701a      	strb	r2, [r3, #0]
   1175e:	e103      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11760:	f24b 1367 	movw	r3, #45415	; 0xb167
   11764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11768:	781b      	ldrb	r3, [r3, #0]
   1176a:	2b02      	cmp	r3, #2
   1176c:	d127      	bne.n	117be <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1176e:	f24b 0365 	movw	r3, #45157	; 0xb065
   11772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11776:	781b      	ldrb	r3, [r3, #0]
   11778:	b2db      	uxtb	r3, r3
   1177a:	2b00      	cmp	r3, #0
   1177c:	d00c      	beq.n	11798 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   1177e:	f24b 136f 	movw	r3, #45423	; 0xb16f
   11782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11786:	781b      	ldrb	r3, [r3, #0]
   11788:	3301      	adds	r3, #1
   1178a:	b2da      	uxtb	r2, r3
   1178c:	f24b 136f 	movw	r3, #45423	; 0xb16f
   11790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11794:	701a      	strb	r2, [r3, #0]
      goto error;
   11796:	e0e8      	b.n	1196a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11798:	f24b 136e 	movw	r3, #45422	; 0xb16e
   1179c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a0:	79fa      	ldrb	r2, [r7, #7]
   117a2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   117a4:	f24b 1367 	movw	r3, #45415	; 0xb167
   117a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ac:	781b      	ldrb	r3, [r3, #0]
   117ae:	3301      	adds	r3, #1
   117b0:	b2da      	uxtb	r2, r3
   117b2:	f24b 1367 	movw	r3, #45415	; 0xb167
   117b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ba:	701a      	strb	r2, [r3, #0]
   117bc:	e0d4      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   117be:	f24b 1367 	movw	r3, #45415	; 0xb167
   117c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c6:	781b      	ldrb	r3, [r3, #0]
   117c8:	2b03      	cmp	r3, #3
   117ca:	d112      	bne.n	117f2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   117cc:	f24b 136d 	movw	r3, #45421	; 0xb16d
   117d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d4:	79fa      	ldrb	r2, [r7, #7]
   117d6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   117d8:	f24b 1367 	movw	r3, #45415	; 0xb167
   117dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e0:	781b      	ldrb	r3, [r3, #0]
   117e2:	3301      	adds	r3, #1
   117e4:	b2da      	uxtb	r2, r3
   117e6:	f24b 1367 	movw	r3, #45415	; 0xb167
   117ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ee:	701a      	strb	r2, [r3, #0]
   117f0:	e0ba      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   117f2:	f24b 1367 	movw	r3, #45415	; 0xb167
   117f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fa:	781b      	ldrb	r3, [r3, #0]
   117fc:	2b04      	cmp	r3, #4
   117fe:	d113      	bne.n	11828 <parse_ubx+0x194>
  {
    ubx_len = c;
   11800:	79fb      	ldrb	r3, [r7, #7]
   11802:	b29a      	uxth	r2, r3
   11804:	f24b 1368 	movw	r3, #45416	; 0xb168
   11808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1180c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   1180e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11816:	781b      	ldrb	r3, [r3, #0]
   11818:	3301      	adds	r3, #1
   1181a:	b2da      	uxtb	r2, r3
   1181c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11824:	701a      	strb	r2, [r3, #0]
   11826:	e09f      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11828:	f24b 1367 	movw	r3, #45415	; 0xb167
   1182c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	2b05      	cmp	r3, #5
   11834:	d12b      	bne.n	1188e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11836:	79fb      	ldrb	r3, [r7, #7]
   11838:	021b      	lsls	r3, r3, #8
   1183a:	b29a      	uxth	r2, r3
   1183c:	f24b 1368 	movw	r3, #45416	; 0xb168
   11840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11844:	881b      	ldrh	r3, [r3, #0]
   11846:	b29b      	uxth	r3, r3
   11848:	4313      	orrs	r3, r2
   1184a:	b29b      	uxth	r3, r3
   1184c:	b29a      	uxth	r2, r3
   1184e:	f24b 1368 	movw	r3, #45416	; 0xb168
   11852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11856:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11858:	f24b 1368 	movw	r3, #45416	; 0xb168
   1185c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11860:	881b      	ldrh	r3, [r3, #0]
   11862:	2bff      	cmp	r3, #255	; 0xff
   11864:	d900      	bls.n	11868 <parse_ubx+0x1d4>
      goto error;
   11866:	e080      	b.n	1196a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11868:	f24b 136a 	movw	r3, #45418	; 0xb16a
   1186c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11870:	2200      	movs	r2, #0
   11872:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11874:	f24b 1367 	movw	r3, #45415	; 0xb167
   11878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1187c:	781b      	ldrb	r3, [r3, #0]
   1187e:	3301      	adds	r3, #1
   11880:	b2da      	uxtb	r2, r3
   11882:	f24b 1367 	movw	r3, #45415	; 0xb167
   11886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1188a:	701a      	strb	r2, [r3, #0]
   1188c:	e06c      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   1188e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11896:	781b      	ldrb	r3, [r3, #0]
   11898:	2b06      	cmp	r3, #6
   1189a:	d131      	bne.n	11900 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   1189c:	f24b 136a 	movw	r3, #45418	; 0xb16a
   118a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a4:	781b      	ldrb	r3, [r3, #0]
   118a6:	461a      	mov	r2, r3
   118a8:	f24b 0368 	movw	r3, #45160	; 0xb068
   118ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b0:	79f9      	ldrb	r1, [r7, #7]
   118b2:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   118b4:	f24b 136a 	movw	r3, #45418	; 0xb16a
   118b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118bc:	781b      	ldrb	r3, [r3, #0]
   118be:	3301      	adds	r3, #1
   118c0:	b2da      	uxtb	r2, r3
   118c2:	f24b 136a 	movw	r3, #45418	; 0xb16a
   118c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ca:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   118cc:	f24b 136a 	movw	r3, #45418	; 0xb16a
   118d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d4:	781b      	ldrb	r3, [r3, #0]
   118d6:	461a      	mov	r2, r3
   118d8:	f24b 1368 	movw	r3, #45416	; 0xb168
   118dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e0:	881b      	ldrh	r3, [r3, #0]
   118e2:	429a      	cmp	r2, r3
   118e4:	d340      	bcc.n	11968 <parse_ubx+0x2d4>
      ubx_status++;
   118e6:	f24b 1367 	movw	r3, #45415	; 0xb167
   118ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ee:	781b      	ldrb	r3, [r3, #0]
   118f0:	3301      	adds	r3, #1
   118f2:	b2da      	uxtb	r2, r3
   118f4:	f24b 1367 	movw	r3, #45415	; 0xb167
   118f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118fc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   118fe:	e03b      	b.n	11978 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11900:	f24b 1367 	movw	r3, #45415	; 0xb167
   11904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11908:	781b      	ldrb	r3, [r3, #0]
   1190a:	2b07      	cmp	r3, #7
   1190c:	d115      	bne.n	1193a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   1190e:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11916:	781b      	ldrb	r3, [r3, #0]
   11918:	79fa      	ldrb	r2, [r7, #7]
   1191a:	429a      	cmp	r2, r3
   1191c:	d000      	beq.n	11920 <parse_ubx+0x28c>
      goto error;
   1191e:	e024      	b.n	1196a <parse_ubx+0x2d6>
    ubx_status++;
   11920:	f24b 1367 	movw	r3, #45415	; 0xb167
   11924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11928:	781b      	ldrb	r3, [r3, #0]
   1192a:	3301      	adds	r3, #1
   1192c:	b2da      	uxtb	r2, r3
   1192e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11936:	701a      	strb	r2, [r3, #0]
   11938:	e016      	b.n	11968 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   1193a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1193e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11942:	781b      	ldrb	r3, [r3, #0]
   11944:	2b08      	cmp	r3, #8
   11946:	d10f      	bne.n	11968 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11948:	f24b 136c 	movw	r3, #45420	; 0xb16c
   1194c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11950:	781b      	ldrb	r3, [r3, #0]
   11952:	79fa      	ldrb	r2, [r7, #7]
   11954:	429a      	cmp	r2, r3
   11956:	d000      	beq.n	1195a <parse_ubx+0x2c6>
      goto error;
   11958:	e007      	b.n	1196a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   1195a:	f24b 0365 	movw	r3, #45157	; 0xb065
   1195e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11962:	2201      	movs	r2, #1
   11964:	701a      	strb	r2, [r3, #0]
    goto restart;
   11966:	e000      	b.n	1196a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11968:	e006      	b.n	11978 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   1196a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1196e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11972:	2200      	movs	r2, #0
   11974:	701a      	strb	r2, [r3, #0]
  return;
   11976:	bf00      	nop
}
   11978:	370c      	adds	r7, #12
   1197a:	46bd      	mov	sp, r7
   1197c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11980:	4770      	bx	lr
   11982:	bf00      	nop

00011984 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11984:	b580      	push	{r7, lr}
   11986:	b082      	sub	sp, #8
   11988:	af00      	add	r7, sp, #0
   1198a:	f242 039c 	movw	r3, #8348	; 0x209c
   1198e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11992:	781b      	ldrb	r3, [r3, #0]
   11994:	71fb      	strb	r3, [r7, #7]
   11996:	79fb      	ldrb	r3, [r7, #7]
   11998:	4618      	mov	r0, r3
   1199a:	f7ff fe7b 	bl	11694 <parse_ubx>
   1199e:	3708      	adds	r7, #8
   119a0:	46bd      	mov	sp, r7
   119a2:	bd80      	pop	{r7, pc}
   119a4:	f3af 8000 	nop.w

000119a8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   119a8:	b580      	push	{r7, lr}
   119aa:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   119ac:	f240 33f8 	movw	r3, #1016	; 0x3f8
   119b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b4:	f24c 228f 	movw	r2, #49807	; 0xc28f
   119b8:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   119bc:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   119be:	2001      	movs	r0, #1
   119c0:	f24b 1174 	movw	r1, #45428	; 0xb174
   119c4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   119c8:	f7ff fc82 	bl	112d0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   119cc:	2002      	movs	r0, #2
   119ce:	f24b 11b8 	movw	r1, #45496	; 0xb1b8
   119d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   119d6:	f7ff fc7b 	bl	112d0 <adc_buf_channel>
}
   119da:	bd80      	pop	{r7, pc}

000119dc <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   119dc:	b480      	push	{r7}
   119de:	b083      	sub	sp, #12
   119e0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   119e2:	f24b 1374 	movw	r3, #45428	; 0xb174
   119e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ea:	881b      	ldrh	r3, [r3, #0]
   119ec:	095b      	lsrs	r3, r3, #5
   119ee:	b29b      	uxth	r3, r3
   119f0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   119f2:	f24b 13b8 	movw	r3, #45496	; 0xb1b8
   119f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119fa:	881b      	ldrh	r3, [r3, #0]
   119fc:	095b      	lsrs	r3, r3, #5
   119fe:	b29b      	uxth	r3, r3
   11a00:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11a02:	88fb      	ldrh	r3, [r7, #6]
   11a04:	425b      	negs	r3, r3
   11a06:	b29a      	uxth	r2, r3
   11a08:	88bb      	ldrh	r3, [r7, #4]
   11a0a:	1ad3      	subs	r3, r2, r3
   11a0c:	b29a      	uxth	r2, r3
   11a0e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a16:	881b      	ldrh	r3, [r3, #0]
   11a18:	b29b      	uxth	r3, r3
   11a1a:	1ad3      	subs	r3, r2, r3
   11a1c:	b29b      	uxth	r3, r3
   11a1e:	b29a      	uxth	r2, r3
   11a20:	f24b 1370 	movw	r3, #45424	; 0xb170
   11a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a28:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11a2a:	88ba      	ldrh	r2, [r7, #4]
   11a2c:	88fb      	ldrh	r3, [r7, #6]
   11a2e:	1ad3      	subs	r3, r2, r3
   11a30:	b29a      	uxth	r2, r3
   11a32:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3a:	881b      	ldrh	r3, [r3, #0]
   11a3c:	b29b      	uxth	r3, r3
   11a3e:	1ad3      	subs	r3, r2, r3
   11a40:	b29b      	uxth	r3, r3
   11a42:	b29a      	uxth	r2, r3
   11a44:	f24b 1372 	movw	r3, #45426	; 0xb172
   11a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a4c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11a4e:	370c      	adds	r7, #12
   11a50:	46bd      	mov	sp, r7
   11a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a56:	4770      	bx	lr

00011a58 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11a58:	b580      	push	{r7, lr}
   11a5a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11a5c:	f24b 1372 	movw	r3, #45426	; 0xb172
   11a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a64:	881b      	ldrh	r3, [r3, #0]
   11a66:	b29b      	uxth	r3, r3
   11a68:	425b      	negs	r3, r3
   11a6a:	b29b      	uxth	r3, r3
   11a6c:	b29a      	uxth	r2, r3
   11a6e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a76:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11a78:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a80:	881b      	ldrh	r3, [r3, #0]
   11a82:	b21b      	sxth	r3, r3
   11a84:	4618      	mov	r0, r3
   11a86:	f005 fea9 	bl	177dc <__aeabi_i2d>
   11a8a:	4602      	mov	r2, r0
   11a8c:	460b      	mov	r3, r1
   11a8e:	f04f 0000 	mov.w	r0, #0
   11a92:	f04f 0100 	mov.w	r1, #0
   11a96:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11a9a:	f006 f82f 	bl	17afc <__aeabi_ddiv>
   11a9e:	4602      	mov	r2, r0
   11aa0:	460b      	mov	r3, r1
   11aa2:	4610      	mov	r0, r2
   11aa4:	4619      	mov	r1, r3
   11aa6:	f006 f9e1 	bl	17e6c <__aeabi_d2f>
   11aaa:	4602      	mov	r2, r0
   11aac:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab4:	601a      	str	r2, [r3, #0]
}
   11ab6:	bd80      	pop	{r7, pc}

00011ab8 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11ab8:	b590      	push	{r4, r7, lr}
   11aba:	b083      	sub	sp, #12
   11abc:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11abe:	f24b 4390 	movw	r3, #46224	; 0xb490
   11ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac6:	681a      	ldr	r2, [r3, #0]
   11ac8:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   11acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ad0:	681b      	ldr	r3, [r3, #0]
   11ad2:	4610      	mov	r0, r2
   11ad4:	4619      	mov	r1, r3
   11ad6:	f006 fa1d 	bl	17f14 <__aeabi_fsub>
   11ada:	4603      	mov	r3, r0
   11adc:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11ade:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae6:	681b      	ldr	r3, [r3, #0]
   11ae8:	4618      	mov	r0, r3
   11aea:	6879      	ldr	r1, [r7, #4]
   11aec:	f006 fb1c 	bl	18128 <__aeabi_fmul>
   11af0:	4603      	mov	r3, r0
   11af2:	4618      	mov	r0, r3
   11af4:	f04f 0100 	mov.w	r1, #0
   11af8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11afc:	f006 fcb2 	bl	18464 <__aeabi_fcmplt>
   11b00:	4603      	mov	r3, r0
   11b02:	2b00      	cmp	r3, #0
   11b04:	d002      	beq.n	11b0c <roll_pitch_pid_run+0x54>
   11b06:	f64d 2280 	movw	r2, #55936	; 0xda80
   11b0a:	e026      	b.n	11b5a <roll_pitch_pid_run+0xa2>
   11b0c:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b14:	681b      	ldr	r3, [r3, #0]
   11b16:	4618      	mov	r0, r3
   11b18:	6879      	ldr	r1, [r7, #4]
   11b1a:	f006 fb05 	bl	18128 <__aeabi_fmul>
   11b1e:	4603      	mov	r3, r0
   11b20:	4618      	mov	r0, r3
   11b22:	f04f 0100 	mov.w	r1, #0
   11b26:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11b2a:	f006 fcb9 	bl	184a0 <__aeabi_fcmpgt>
   11b2e:	4603      	mov	r3, r0
   11b30:	2b00      	cmp	r3, #0
   11b32:	d002      	beq.n	11b3a <roll_pitch_pid_run+0x82>
   11b34:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11b38:	e00e      	b.n	11b58 <roll_pitch_pid_run+0xa0>
   11b3a:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b42:	681b      	ldr	r3, [r3, #0]
   11b44:	4618      	mov	r0, r3
   11b46:	6879      	ldr	r1, [r7, #4]
   11b48:	f006 faee 	bl	18128 <__aeabi_fmul>
   11b4c:	4603      	mov	r3, r0
   11b4e:	4618      	mov	r0, r3
   11b50:	f006 fcb0 	bl	184b4 <__aeabi_f2iz>
   11b54:	4603      	mov	r3, r0
   11b56:	b29b      	uxth	r3, r3
   11b58:	b29a      	uxth	r2, r3
   11b5a:	f24b 2306 	movw	r3, #45574	; 0xb206
   11b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b62:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11b64:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b6c:	681b      	ldr	r3, [r3, #0]
   11b6e:	4618      	mov	r0, r3
   11b70:	f04f 0100 	mov.w	r1, #0
   11b74:	f006 fc76 	bl	18464 <__aeabi_fcmplt>
   11b78:	4603      	mov	r3, r0
   11b7a:	2b00      	cmp	r3, #0
   11b7c:	d006      	beq.n	11b8c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11b7e:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b86:	f04f 0200 	mov.w	r2, #0
   11b8a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11b8c:	f24b 4398 	movw	r3, #46232	; 0xb498
   11b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b94:	681a      	ldr	r2, [r3, #0]
   11b96:	f24b 2300 	movw	r3, #45568	; 0xb200
   11b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b9e:	681b      	ldr	r3, [r3, #0]
   11ba0:	4610      	mov	r0, r2
   11ba2:	4619      	mov	r1, r3
   11ba4:	f006 f9b6 	bl	17f14 <__aeabi_fsub>
   11ba8:	4603      	mov	r3, r0
   11baa:	461c      	mov	r4, r3
   11bac:	f24b 4390 	movw	r3, #46224	; 0xb490
   11bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bb4:	681b      	ldr	r3, [r3, #0]
   11bb6:	4618      	mov	r0, r3
   11bb8:	f04f 0100 	mov.w	r1, #0
   11bbc:	f006 fc52 	bl	18464 <__aeabi_fcmplt>
   11bc0:	4603      	mov	r3, r0
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	d007      	beq.n	11bd6 <roll_pitch_pid_run+0x11e>
   11bc6:	f24b 4390 	movw	r3, #46224	; 0xb490
   11bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11bd4:	e004      	b.n	11be0 <roll_pitch_pid_run+0x128>
   11bd6:	f24b 4390 	movw	r3, #46224	; 0xb490
   11bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bde:	681a      	ldr	r2, [r3, #0]
   11be0:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11be8:	681b      	ldr	r3, [r3, #0]
   11bea:	4610      	mov	r0, r2
   11bec:	4619      	mov	r1, r3
   11bee:	f006 fa9b 	bl	18128 <__aeabi_fmul>
   11bf2:	4603      	mov	r3, r0
   11bf4:	4620      	mov	r0, r4
   11bf6:	4619      	mov	r1, r3
   11bf8:	f006 f98c 	bl	17f14 <__aeabi_fsub>
   11bfc:	4603      	mov	r3, r0
   11bfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11c02:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11c04:	f240 4300 	movw	r3, #1024	; 0x400
   11c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	4618      	mov	r0, r3
   11c10:	6879      	ldr	r1, [r7, #4]
   11c12:	f006 fa89 	bl	18128 <__aeabi_fmul>
   11c16:	4603      	mov	r3, r0
   11c18:	4618      	mov	r0, r3
   11c1a:	f04f 0100 	mov.w	r1, #0
   11c1e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11c22:	f006 fc1f 	bl	18464 <__aeabi_fcmplt>
   11c26:	4603      	mov	r3, r0
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d002      	beq.n	11c32 <roll_pitch_pid_run+0x17a>
   11c2c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11c30:	e026      	b.n	11c80 <roll_pitch_pid_run+0x1c8>
   11c32:	f240 4300 	movw	r3, #1024	; 0x400
   11c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c3a:	681b      	ldr	r3, [r3, #0]
   11c3c:	4618      	mov	r0, r3
   11c3e:	6879      	ldr	r1, [r7, #4]
   11c40:	f006 fa72 	bl	18128 <__aeabi_fmul>
   11c44:	4603      	mov	r3, r0
   11c46:	4618      	mov	r0, r3
   11c48:	f04f 0100 	mov.w	r1, #0
   11c4c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c50:	f006 fc26 	bl	184a0 <__aeabi_fcmpgt>
   11c54:	4603      	mov	r3, r0
   11c56:	2b00      	cmp	r3, #0
   11c58:	d002      	beq.n	11c60 <roll_pitch_pid_run+0x1a8>
   11c5a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c5e:	e00e      	b.n	11c7e <roll_pitch_pid_run+0x1c6>
   11c60:	f240 4300 	movw	r3, #1024	; 0x400
   11c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c68:	681b      	ldr	r3, [r3, #0]
   11c6a:	4618      	mov	r0, r3
   11c6c:	6879      	ldr	r1, [r7, #4]
   11c6e:	f006 fa5b 	bl	18128 <__aeabi_fmul>
   11c72:	4603      	mov	r3, r0
   11c74:	4618      	mov	r0, r3
   11c76:	f006 fc1d 	bl	184b4 <__aeabi_f2iz>
   11c7a:	4603      	mov	r3, r0
   11c7c:	b29b      	uxth	r3, r3
   11c7e:	b29a      	uxth	r2, r3
   11c80:	f24b 2308 	movw	r3, #45576	; 0xb208
   11c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c88:	801a      	strh	r2, [r3, #0]
}
   11c8a:	370c      	adds	r7, #12
   11c8c:	46bd      	mov	sp, r7
   11c8e:	bd90      	pop	{r4, r7, pc}

00011c90 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11c90:	b580      	push	{r7, lr}
   11c92:	b082      	sub	sp, #8
   11c94:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11c96:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   11c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c9e:	681a      	ldr	r2, [r3, #0]
   11ca0:	f24b 2314 	movw	r3, #45588	; 0xb214
   11ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca8:	681b      	ldr	r3, [r3, #0]
   11caa:	4610      	mov	r0, r2
   11cac:	4619      	mov	r1, r3
   11cae:	f006 f931 	bl	17f14 <__aeabi_fsub>
   11cb2:	4603      	mov	r3, r0
   11cb4:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11cb6:	e013      	b.n	11ce0 <course_pid_run+0x50>
   11cb8:	6878      	ldr	r0, [r7, #4]
   11cba:	f005 fda1 	bl	17800 <__aeabi_f2d>
   11cbe:	4602      	mov	r2, r0
   11cc0:	460b      	mov	r3, r1
   11cc2:	4610      	mov	r0, r2
   11cc4:	4619      	mov	r1, r3
   11cc6:	a348      	add	r3, pc, #288	; (adr r3, 11de8 <course_pid_run+0x158>)
   11cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ccc:	f005 fc38 	bl	17540 <__aeabi_dsub>
   11cd0:	4602      	mov	r2, r0
   11cd2:	460b      	mov	r3, r1
   11cd4:	4610      	mov	r0, r2
   11cd6:	4619      	mov	r1, r3
   11cd8:	f006 f8c8 	bl	17e6c <__aeabi_d2f>
   11cdc:	4603      	mov	r3, r0
   11cde:	607b      	str	r3, [r7, #4]
   11ce0:	6878      	ldr	r0, [r7, #4]
   11ce2:	f005 fd8d 	bl	17800 <__aeabi_f2d>
   11ce6:	4602      	mov	r2, r0
   11ce8:	460b      	mov	r3, r1
   11cea:	4610      	mov	r0, r2
   11cec:	4619      	mov	r1, r3
   11cee:	a340      	add	r3, pc, #256	; (adr r3, 11df0 <course_pid_run+0x160>)
   11cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cf4:	f006 f868 	bl	17dc8 <__aeabi_dcmpgt>
   11cf8:	4603      	mov	r3, r0
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d1dc      	bne.n	11cb8 <course_pid_run+0x28>
   11cfe:	e013      	b.n	11d28 <course_pid_run+0x98>
   11d00:	6878      	ldr	r0, [r7, #4]
   11d02:	f005 fd7d 	bl	17800 <__aeabi_f2d>
   11d06:	4602      	mov	r2, r0
   11d08:	460b      	mov	r3, r1
   11d0a:	4610      	mov	r0, r2
   11d0c:	4619      	mov	r1, r3
   11d0e:	a336      	add	r3, pc, #216	; (adr r3, 11de8 <course_pid_run+0x158>)
   11d10:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d14:	f005 fc16 	bl	17544 <__adddf3>
   11d18:	4602      	mov	r2, r0
   11d1a:	460b      	mov	r3, r1
   11d1c:	4610      	mov	r0, r2
   11d1e:	4619      	mov	r1, r3
   11d20:	f006 f8a4 	bl	17e6c <__aeabi_d2f>
   11d24:	4603      	mov	r3, r0
   11d26:	607b      	str	r3, [r7, #4]
   11d28:	6878      	ldr	r0, [r7, #4]
   11d2a:	f005 fd69 	bl	17800 <__aeabi_f2d>
   11d2e:	4602      	mov	r2, r0
   11d30:	460b      	mov	r3, r1
   11d32:	4610      	mov	r0, r2
   11d34:	4619      	mov	r1, r3
   11d36:	a330      	add	r3, pc, #192	; (adr r3, 11df8 <course_pid_run+0x168>)
   11d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d3c:	f006 f826 	bl	17d8c <__aeabi_dcmplt>
   11d40:	4603      	mov	r3, r0
   11d42:	2b00      	cmp	r3, #0
   11d44:	d1dc      	bne.n	11d00 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11d46:	f240 4308 	movw	r3, #1032	; 0x408
   11d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d4e:	681b      	ldr	r3, [r3, #0]
   11d50:	4618      	mov	r0, r3
   11d52:	6879      	ldr	r1, [r7, #4]
   11d54:	f006 f9e8 	bl	18128 <__aeabi_fmul>
   11d58:	4603      	mov	r3, r0
   11d5a:	461a      	mov	r2, r3
   11d5c:	f24b 2358 	movw	r3, #45656	; 0xb258
   11d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d64:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11d66:	f24b 2358 	movw	r3, #45656	; 0xb258
   11d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d6e:	681a      	ldr	r2, [r3, #0]
   11d70:	f240 430c 	movw	r3, #1036	; 0x40c
   11d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d78:	681b      	ldr	r3, [r3, #0]
   11d7a:	4610      	mov	r0, r2
   11d7c:	4619      	mov	r1, r3
   11d7e:	f006 fb8f 	bl	184a0 <__aeabi_fcmpgt>
   11d82:	4603      	mov	r3, r0
   11d84:	2b00      	cmp	r3, #0
   11d86:	d00a      	beq.n	11d9e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11d88:	f240 430c 	movw	r3, #1036	; 0x40c
   11d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d90:	681a      	ldr	r2, [r3, #0]
   11d92:	f24b 2358 	movw	r3, #45656	; 0xb258
   11d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d9a:	601a      	str	r2, [r3, #0]
   11d9c:	e01e      	b.n	11ddc <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11d9e:	f240 430c 	movw	r3, #1036	; 0x40c
   11da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da6:	681b      	ldr	r3, [r3, #0]
   11da8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11dac:	f24b 2358 	movw	r3, #45656	; 0xb258
   11db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db4:	681b      	ldr	r3, [r3, #0]
   11db6:	4610      	mov	r0, r2
   11db8:	4619      	mov	r1, r3
   11dba:	f006 fb71 	bl	184a0 <__aeabi_fcmpgt>
   11dbe:	4603      	mov	r3, r0
   11dc0:	2b00      	cmp	r3, #0
   11dc2:	d00b      	beq.n	11ddc <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11dc4:	f240 430c 	movw	r3, #1036	; 0x40c
   11dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dcc:	681b      	ldr	r3, [r3, #0]
   11dce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11dd2:	f24b 2358 	movw	r3, #45656	; 0xb258
   11dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dda:	601a      	str	r2, [r3, #0]
}
   11ddc:	3708      	adds	r7, #8
   11dde:	46bd      	mov	sp, r7
   11de0:	bd80      	pop	{r7, pc}
   11de2:	bf00      	nop
   11de4:	f3af 8000 	nop.w
   11de8:	54442d18 	.word	0x54442d18
   11dec:	401921fb 	.word	0x401921fb
   11df0:	54442d18 	.word	0x54442d18
   11df4:	400921fb 	.word	0x400921fb
   11df8:	54442d18 	.word	0x54442d18
   11dfc:	c00921fb 	.word	0xc00921fb

00011e00 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11e00:	b5b0      	push	{r4, r5, r7, lr}
   11e02:	b082      	sub	sp, #8
   11e04:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11e06:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   11e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0e:	681a      	ldr	r2, [r3, #0]
   11e10:	f24b 2318 	movw	r3, #45592	; 0xb218
   11e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e18:	681b      	ldr	r3, [r3, #0]
   11e1a:	4610      	mov	r0, r2
   11e1c:	4619      	mov	r1, r3
   11e1e:	f006 f879 	bl	17f14 <__aeabi_fsub>
   11e22:	4603      	mov	r3, r0
   11e24:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11e26:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   11e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2e:	781b      	ldrb	r3, [r3, #0]
   11e30:	2b00      	cmp	r3, #0
   11e32:	f000 80a8 	beq.w	11f86 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11e36:	f24b 2350 	movw	r3, #45648	; 0xb250
   11e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3e:	881b      	ldrh	r3, [r3, #0]
   11e40:	b29a      	uxth	r2, r3
   11e42:	f24b 2304 	movw	r3, #45572	; 0xb204
   11e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e4a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11e4c:	f240 4314 	movw	r3, #1044	; 0x414
   11e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e54:	681a      	ldr	r2, [r3, #0]
   11e56:	f24b 2324 	movw	r3, #45604	; 0xb224
   11e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5e:	681b      	ldr	r3, [r3, #0]
   11e60:	4610      	mov	r0, r2
   11e62:	4619      	mov	r1, r3
   11e64:	f006 f960 	bl	18128 <__aeabi_fmul>
   11e68:	4603      	mov	r3, r0
   11e6a:	4618      	mov	r0, r3
   11e6c:	6879      	ldr	r1, [r7, #4]
   11e6e:	f006 f853 	bl	17f18 <__addsf3>
   11e72:	4603      	mov	r3, r0
   11e74:	461a      	mov	r2, r3
   11e76:	f240 4310 	movw	r3, #1040	; 0x410
   11e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e7e:	681b      	ldr	r3, [r3, #0]
   11e80:	4610      	mov	r0, r2
   11e82:	4619      	mov	r1, r3
   11e84:	f006 f950 	bl	18128 <__aeabi_fmul>
   11e88:	4603      	mov	r3, r0
   11e8a:	461a      	mov	r2, r3
   11e8c:	f24b 2300 	movw	r3, #45568	; 0xb200
   11e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e94:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11e96:	f24b 2300 	movw	r3, #45568	; 0xb200
   11e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e9e:	681a      	ldr	r2, [r3, #0]
   11ea0:	f240 4318 	movw	r3, #1048	; 0x418
   11ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	4610      	mov	r0, r2
   11eac:	4619      	mov	r1, r3
   11eae:	f006 faf7 	bl	184a0 <__aeabi_fcmpgt>
   11eb2:	4603      	mov	r3, r0
   11eb4:	2b00      	cmp	r3, #0
   11eb6:	d009      	beq.n	11ecc <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11eb8:	f240 4318 	movw	r3, #1048	; 0x418
   11ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec0:	681a      	ldr	r2, [r3, #0]
   11ec2:	f24b 2300 	movw	r3, #45568	; 0xb200
   11ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eca:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11ecc:	f24b 2300 	movw	r3, #45568	; 0xb200
   11ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed4:	681a      	ldr	r2, [r3, #0]
   11ed6:	f240 431c 	movw	r3, #1052	; 0x41c
   11eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ede:	681b      	ldr	r3, [r3, #0]
   11ee0:	4610      	mov	r0, r2
   11ee2:	4619      	mov	r1, r3
   11ee4:	f006 fabe 	bl	18464 <__aeabi_fcmplt>
   11ee8:	4603      	mov	r3, r0
   11eea:	2b00      	cmp	r3, #0
   11eec:	d009      	beq.n	11f02 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11eee:	f240 431c 	movw	r3, #1052	; 0x41c
   11ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef6:	681a      	ldr	r2, [r3, #0]
   11ef8:	f24b 2300 	movw	r3, #45568	; 0xb200
   11efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f00:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11f02:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f0a:	681b      	ldr	r3, [r3, #0]
   11f0c:	4618      	mov	r0, r3
   11f0e:	6879      	ldr	r1, [r7, #4]
   11f10:	f006 f802 	bl	17f18 <__addsf3>
   11f14:	4603      	mov	r3, r0
   11f16:	461a      	mov	r2, r3
   11f18:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f20:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11f22:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f2a:	681b      	ldr	r3, [r3, #0]
   11f2c:	4618      	mov	r0, r3
   11f2e:	f04f 0100 	mov.w	r1, #0
   11f32:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11f36:	f006 fab3 	bl	184a0 <__aeabi_fcmpgt>
   11f3a:	4603      	mov	r3, r0
   11f3c:	2b00      	cmp	r3, #0
   11f3e:	d008      	beq.n	11f52 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11f40:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f48:	f04f 0200 	mov.w	r2, #0
   11f4c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11f50:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11f52:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5a:	681b      	ldr	r3, [r3, #0]
   11f5c:	4618      	mov	r0, r3
   11f5e:	f04f 0100 	mov.w	r1, #0
   11f62:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11f66:	f006 fa7d 	bl	18464 <__aeabi_fcmplt>
   11f6a:	4603      	mov	r3, r0
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d100      	bne.n	11f72 <climb_pid_run+0x172>
   11f70:	e109      	b.n	12186 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11f72:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f7a:	f04f 0200 	mov.w	r2, #0
   11f7e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11f82:	601a      	str	r2, [r3, #0]
   11f84:	e0ff      	b.n	12186 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11f86:	f24b 2318 	movw	r3, #45592	; 0xb218
   11f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8e:	681b      	ldr	r3, [r3, #0]
   11f90:	4618      	mov	r0, r3
   11f92:	f04f 0100 	mov.w	r1, #0
   11f96:	f006 fa83 	bl	184a0 <__aeabi_fcmpgt>
   11f9a:	4603      	mov	r3, r0
   11f9c:	2b00      	cmp	r3, #0
   11f9e:	d010      	beq.n	11fc2 <climb_pid_run+0x1c2>
   11fa0:	f24b 2318 	movw	r3, #45592	; 0xb218
   11fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa8:	681a      	ldr	r2, [r3, #0]
   11faa:	f240 4304 	movw	r3, #1028	; 0x404
   11fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb2:	681b      	ldr	r3, [r3, #0]
   11fb4:	4610      	mov	r0, r2
   11fb6:	4619      	mov	r1, r3
   11fb8:	f006 f8b6 	bl	18128 <__aeabi_fmul>
   11fbc:	4603      	mov	r3, r0
   11fbe:	461a      	mov	r2, r3
   11fc0:	e001      	b.n	11fc6 <climb_pid_run+0x1c6>
   11fc2:	f04f 0200 	mov.w	r2, #0
   11fc6:	f24b 2310 	movw	r3, #45584	; 0xb210
   11fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fce:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11fd0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11fd4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11fd8:	f24b 2320 	movw	r3, #45600	; 0xb220
   11fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	4610      	mov	r0, r2
   11fe4:	4619      	mov	r1, r3
   11fe6:	f006 f89f 	bl	18128 <__aeabi_fmul>
   11fea:	4603      	mov	r3, r0
   11fec:	4618      	mov	r0, r3
   11fee:	6879      	ldr	r1, [r7, #4]
   11ff0:	f005 ff92 	bl	17f18 <__addsf3>
   11ff4:	4603      	mov	r3, r0
   11ff6:	461a      	mov	r2, r3
   11ff8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11ffc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12000:	4610      	mov	r0, r2
   12002:	4619      	mov	r1, r3
   12004:	f006 f890 	bl	18128 <__aeabi_fmul>
   12008:	4603      	mov	r3, r0
   1200a:	4618      	mov	r0, r3
   1200c:	f005 fbf8 	bl	17800 <__aeabi_f2d>
   12010:	4602      	mov	r2, r0
   12012:	460b      	mov	r3, r1
   12014:	4610      	mov	r0, r2
   12016:	4619      	mov	r1, r3
   12018:	a35d      	add	r3, pc, #372	; (adr r3, 12190 <climb_pid_run+0x390>)
   1201a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1201e:	f005 fa91 	bl	17544 <__adddf3>
   12022:	4602      	mov	r2, r0
   12024:	460b      	mov	r3, r1
   12026:	4614      	mov	r4, r2
   12028:	461d      	mov	r5, r3
   1202a:	f24b 2318 	movw	r3, #45592	; 0xb218
   1202e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12032:	681b      	ldr	r3, [r3, #0]
   12034:	4618      	mov	r0, r3
   12036:	f005 fbe3 	bl	17800 <__aeabi_f2d>
   1203a:	4602      	mov	r2, r0
   1203c:	460b      	mov	r3, r1
   1203e:	4610      	mov	r0, r2
   12040:	4619      	mov	r1, r3
   12042:	a355      	add	r3, pc, #340	; (adr r3, 12198 <climb_pid_run+0x398>)
   12044:	e9d3 2300 	ldrd	r2, r3, [r3]
   12048:	f005 fc2e 	bl	178a8 <__aeabi_dmul>
   1204c:	4602      	mov	r2, r0
   1204e:	460b      	mov	r3, r1
   12050:	4620      	mov	r0, r4
   12052:	4629      	mov	r1, r5
   12054:	f005 fa76 	bl	17544 <__adddf3>
   12058:	4602      	mov	r2, r0
   1205a:	460b      	mov	r3, r1
   1205c:	4610      	mov	r0, r2
   1205e:	4619      	mov	r1, r3
   12060:	f005 ff04 	bl	17e6c <__aeabi_d2f>
   12064:	4603      	mov	r3, r0
   12066:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12068:	f24b 2320 	movw	r3, #45600	; 0xb220
   1206c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12070:	681b      	ldr	r3, [r3, #0]
   12072:	4618      	mov	r0, r3
   12074:	6879      	ldr	r1, [r7, #4]
   12076:	f005 ff4f 	bl	17f18 <__addsf3>
   1207a:	4603      	mov	r3, r0
   1207c:	461a      	mov	r2, r3
   1207e:	f24b 2320 	movw	r3, #45600	; 0xb220
   12082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12086:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12088:	f24b 2320 	movw	r3, #45600	; 0xb220
   1208c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	4618      	mov	r0, r3
   12094:	f04f 0100 	mov.w	r1, #0
   12098:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1209c:	f006 fa00 	bl	184a0 <__aeabi_fcmpgt>
   120a0:	4603      	mov	r3, r0
   120a2:	2b00      	cmp	r3, #0
   120a4:	d008      	beq.n	120b8 <climb_pid_run+0x2b8>
   120a6:	f24b 2320 	movw	r3, #45600	; 0xb220
   120aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ae:	f04f 0200 	mov.w	r2, #0
   120b2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   120b6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   120b8:	f24b 2320 	movw	r3, #45600	; 0xb220
   120bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c0:	681b      	ldr	r3, [r3, #0]
   120c2:	4618      	mov	r0, r3
   120c4:	f04f 0100 	mov.w	r1, #0
   120c8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   120cc:	f006 f9ca 	bl	18464 <__aeabi_fcmplt>
   120d0:	4603      	mov	r3, r0
   120d2:	2b00      	cmp	r3, #0
   120d4:	d008      	beq.n	120e8 <climb_pid_run+0x2e8>
   120d6:	f24b 2320 	movw	r3, #45600	; 0xb220
   120da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120de:	f04f 0200 	mov.w	r2, #0
   120e2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   120e6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   120e8:	6838      	ldr	r0, [r7, #0]
   120ea:	f04f 0100 	mov.w	r1, #0
   120ee:	f2c4 6116 	movt	r1, #17942	; 0x4616
   120f2:	f006 f819 	bl	18128 <__aeabi_fmul>
   120f6:	4603      	mov	r3, r0
   120f8:	4618      	mov	r0, r3
   120fa:	f04f 0100 	mov.w	r1, #0
   120fe:	f006 f9b1 	bl	18464 <__aeabi_fcmplt>
   12102:	4603      	mov	r3, r0
   12104:	2b00      	cmp	r3, #0
   12106:	d001      	beq.n	1210c <climb_pid_run+0x30c>
   12108:	2200      	movs	r2, #0
   1210a:	e022      	b.n	12152 <climb_pid_run+0x352>
   1210c:	6838      	ldr	r0, [r7, #0]
   1210e:	f04f 0100 	mov.w	r1, #0
   12112:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12116:	f006 f807 	bl	18128 <__aeabi_fmul>
   1211a:	4603      	mov	r3, r0
   1211c:	4618      	mov	r0, r3
   1211e:	f04f 0100 	mov.w	r1, #0
   12122:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12126:	f006 f9bb 	bl	184a0 <__aeabi_fcmpgt>
   1212a:	4603      	mov	r3, r0
   1212c:	2b00      	cmp	r3, #0
   1212e:	d002      	beq.n	12136 <climb_pid_run+0x336>
   12130:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12134:	e00c      	b.n	12150 <climb_pid_run+0x350>
   12136:	6838      	ldr	r0, [r7, #0]
   12138:	f04f 0100 	mov.w	r1, #0
   1213c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12140:	f005 fff2 	bl	18128 <__aeabi_fmul>
   12144:	4603      	mov	r3, r0
   12146:	4618      	mov	r0, r3
   12148:	f006 f9b4 	bl	184b4 <__aeabi_f2iz>
   1214c:	4603      	mov	r3, r0
   1214e:	b29b      	uxth	r3, r3
   12150:	b29a      	uxth	r2, r3
   12152:	f24b 2304 	movw	r3, #45572	; 0xb204
   12156:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1215a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1215c:	f24b 2354 	movw	r3, #45652	; 0xb254
   12160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12164:	681a      	ldr	r2, [r3, #0]
   12166:	f24b 2310 	movw	r3, #45584	; 0xb210
   1216a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	4610      	mov	r0, r2
   12172:	4619      	mov	r1, r3
   12174:	f005 fed0 	bl	17f18 <__addsf3>
   12178:	4603      	mov	r3, r0
   1217a:	461a      	mov	r2, r3
   1217c:	f24b 2300 	movw	r3, #45568	; 0xb200
   12180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12184:	601a      	str	r2, [r3, #0]
  }
}
   12186:	3708      	adds	r7, #8
   12188:	46bd      	mov	sp, r7
   1218a:	bdb0      	pop	{r4, r5, r7, pc}
   1218c:	f3af 8000 	nop.w
   12190:	3d70a3d7 	.word	0x3d70a3d7
   12194:	3fd3d70a 	.word	0x3fd3d70a
   12198:	9999999a 	.word	0x9999999a
   1219c:	3fc99999 	.word	0x3fc99999

000121a0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   121a0:	b580      	push	{r7, lr}
   121a2:	b082      	sub	sp, #8
   121a4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   121a6:	f24b 438c 	movw	r3, #46220	; 0xb48c
   121aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ae:	681a      	ldr	r2, [r3, #0]
   121b0:	f240 4324 	movw	r3, #1060	; 0x424
   121b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b8:	681b      	ldr	r3, [r3, #0]
   121ba:	4610      	mov	r0, r2
   121bc:	4619      	mov	r1, r3
   121be:	f005 fea9 	bl	17f14 <__aeabi_fsub>
   121c2:	4603      	mov	r3, r0
   121c4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   121c6:	f240 4320 	movw	r3, #1056	; 0x420
   121ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	4618      	mov	r0, r3
   121d2:	6879      	ldr	r1, [r7, #4]
   121d4:	f005 ffa8 	bl	18128 <__aeabi_fmul>
   121d8:	4603      	mov	r3, r0
   121da:	461a      	mov	r2, r3
   121dc:	f24b 231c 	movw	r3, #45596	; 0xb21c
   121e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	4610      	mov	r0, r2
   121e8:	4619      	mov	r1, r3
   121ea:	f005 fe95 	bl	17f18 <__addsf3>
   121ee:	4603      	mov	r3, r0
   121f0:	461a      	mov	r2, r3
   121f2:	f24b 2318 	movw	r3, #45592	; 0xb218
   121f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121fa:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   121fc:	f24b 2318 	movw	r3, #45592	; 0xb218
   12200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12204:	681b      	ldr	r3, [r3, #0]
   12206:	4618      	mov	r0, r3
   12208:	f04f 0100 	mov.w	r1, #0
   1220c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12210:	f006 f928 	bl	18464 <__aeabi_fcmplt>
   12214:	4603      	mov	r3, r0
   12216:	2b00      	cmp	r3, #0
   12218:	d008      	beq.n	1222c <altitude_pid_run+0x8c>
   1221a:	f24b 2318 	movw	r3, #45592	; 0xb218
   1221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12222:	f04f 0200 	mov.w	r2, #0
   12226:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1222a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1222c:	f24b 2318 	movw	r3, #45592	; 0xb218
   12230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12234:	681b      	ldr	r3, [r3, #0]
   12236:	4618      	mov	r0, r3
   12238:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1223c:	f006 f930 	bl	184a0 <__aeabi_fcmpgt>
   12240:	4603      	mov	r3, r0
   12242:	2b00      	cmp	r3, #0
   12244:	d006      	beq.n	12254 <altitude_pid_run+0xb4>
   12246:	f24b 2318 	movw	r3, #45592	; 0xb218
   1224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12252:	601a      	str	r2, [r3, #0]
}
   12254:	3708      	adds	r7, #8
   12256:	46bd      	mov	sp, r7
   12258:	bd80      	pop	{r7, pc}
   1225a:	bf00      	nop
   1225c:	f3af 8000 	nop.w

00012260 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12260:	b5f0      	push	{r4, r5, r6, r7, lr}
   12262:	b08b      	sub	sp, #44	; 0x2c
   12264:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12266:	f24b 2329 	movw	r3, #45609	; 0xb229
   1226a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226e:	781b      	ldrb	r3, [r3, #0]
   12270:	2b00      	cmp	r3, #0
   12272:	f040 8169 	bne.w	12548 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12276:	f24b 2328 	movw	r3, #45608	; 0xb228
   1227a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227e:	781b      	ldrb	r3, [r3, #0]
   12280:	2b00      	cmp	r3, #0
   12282:	d13c      	bne.n	122fe <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12284:	f24b 2328 	movw	r3, #45608	; 0xb228
   12288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228c:	2200      	movs	r2, #0
   1228e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12290:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   12294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12298:	881b      	ldrh	r3, [r3, #0]
   1229a:	2b00      	cmp	r3, #0
   1229c:	d000      	beq.n	122a0 <auto_nav+0x40>
   1229e:	e03d      	b.n	1231c <auto_nav+0xbc>
	else NextStage(); 
   122a0:	f24b 2328 	movw	r3, #45608	; 0xb228
   122a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a8:	781b      	ldrb	r3, [r3, #0]
   122aa:	3301      	adds	r3, #1
   122ac:	b2da      	uxtb	r2, r3
   122ae:	f24b 2328 	movw	r3, #45608	; 0xb228
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	701a      	strb	r2, [r3, #0]
   122b8:	f24b 4384 	movw	r3, #46212	; 0xb484
   122bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c0:	681a      	ldr	r2, [r3, #0]
   122c2:	f24b 232c 	movw	r3, #45612	; 0xb22c
   122c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ca:	601a      	str	r2, [r3, #0]
   122cc:	f24b 4388 	movw	r3, #46216	; 0xb488
   122d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d4:	681a      	ldr	r2, [r3, #0]
   122d6:	f24b 2330 	movw	r3, #45616	; 0xb230
   122da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122de:	601a      	str	r2, [r3, #0]
   122e0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   122e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e8:	2200      	movs	r2, #0
   122ea:	801a      	strh	r2, [r3, #0]
   122ec:	f24b 2340 	movw	r3, #45632	; 0xb240
   122f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f4:	f04f 0200 	mov.w	r2, #0
   122f8:	601a      	str	r2, [r3, #0]
   122fa:	f002 b883 	b.w	14404 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   122fe:	f24b 2328 	movw	r3, #45608	; 0xb228
   12302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12306:	781b      	ldrb	r3, [r3, #0]
   12308:	2b01      	cmp	r3, #1
   1230a:	d100      	bne.n	1230e <auto_nav+0xae>
    {   Goto(while_1)}
   1230c:	e7ba      	b.n	12284 <auto_nav+0x24>
    else if (nav_stage == 2)
   1230e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12316:	781b      	ldrb	r3, [r3, #0]
   12318:	2b02      	cmp	r3, #2
   1231a:	d162      	bne.n	123e2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1231c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12324:	2202      	movs	r2, #2
   12326:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12328:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   1232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12330:	881b      	ldrh	r3, [r3, #0]
   12332:	2b08      	cmp	r3, #8
   12334:	d92e      	bls.n	12394 <auto_nav+0x134>
   12336:	f24b 2328 	movw	r3, #45608	; 0xb228
   1233a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233e:	781b      	ldrb	r3, [r3, #0]
   12340:	3301      	adds	r3, #1
   12342:	b2da      	uxtb	r2, r3
   12344:	f24b 2328 	movw	r3, #45608	; 0xb228
   12348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1234c:	701a      	strb	r2, [r3, #0]
   1234e:	f24b 4384 	movw	r3, #46212	; 0xb484
   12352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12356:	681a      	ldr	r2, [r3, #0]
   12358:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12360:	601a      	str	r2, [r3, #0]
   12362:	f24b 4388 	movw	r3, #46216	; 0xb488
   12366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1236a:	681a      	ldr	r2, [r3, #0]
   1236c:	f24b 2330 	movw	r3, #45616	; 0xb230
   12370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12374:	601a      	str	r2, [r3, #0]
   12376:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237e:	2200      	movs	r2, #0
   12380:	801a      	strh	r2, [r3, #0]
   12382:	f24b 2340 	movw	r3, #45632	; 0xb240
   12386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238a:	f04f 0200 	mov.w	r2, #0
   1238e:	601a      	str	r2, [r3, #0]
   12390:	f002 b838 	b.w	14404 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12394:	f24b 2314 	movw	r3, #45588	; 0xb214
   12398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1239c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   123a0:	f2c4 0296 	movt	r2, #16534	; 0x4096
   123a4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   123a6:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   123aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ae:	2200      	movs	r2, #0
   123b0:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   123b2:	f24b 2354 	movw	r3, #45652	; 0xb254
   123b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ba:	f649 129a 	movw	r2, #39322	; 0x999a
   123be:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   123c2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   123c4:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   123c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123cc:	2201      	movs	r2, #1
   123ce:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   123d0:	f24b 2350 	movw	r3, #45648	; 0xb250
   123d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   123dc:	801a      	strh	r2, [r3, #0]
        }
        return;
   123de:	f002 b811 	b.w	14404 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   123e2:	f24b 2328 	movw	r3, #45608	; 0xb228
   123e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ea:	781b      	ldrb	r3, [r3, #0]
   123ec:	2b03      	cmp	r3, #3
   123ee:	d168      	bne.n	124c2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   123f0:	f24b 2328 	movw	r3, #45608	; 0xb228
   123f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f8:	2203      	movs	r2, #3
   123fa:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   123fc:	f24b 438c 	movw	r3, #46220	; 0xb48c
   12400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	4618      	mov	r0, r3
   12408:	f04f 0100 	mov.w	r1, #0
   1240c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12410:	f006 f846 	bl	184a0 <__aeabi_fcmpgt>
   12414:	4603      	mov	r3, r0
   12416:	2b00      	cmp	r3, #0
   12418:	d02e      	beq.n	12478 <auto_nav+0x218>
   1241a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1241e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12422:	781b      	ldrb	r3, [r3, #0]
   12424:	3301      	adds	r3, #1
   12426:	b2da      	uxtb	r2, r3
   12428:	f24b 2328 	movw	r3, #45608	; 0xb228
   1242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12430:	701a      	strb	r2, [r3, #0]
   12432:	f24b 4384 	movw	r3, #46212	; 0xb484
   12436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243a:	681a      	ldr	r2, [r3, #0]
   1243c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12444:	601a      	str	r2, [r3, #0]
   12446:	f24b 4388 	movw	r3, #46216	; 0xb488
   1244a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1244e:	681a      	ldr	r2, [r3, #0]
   12450:	f24b 2330 	movw	r3, #45616	; 0xb230
   12454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12458:	601a      	str	r2, [r3, #0]
   1245a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1245e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12462:	2200      	movs	r2, #0
   12464:	801a      	strh	r2, [r3, #0]
   12466:	f24b 2340 	movw	r3, #45632	; 0xb240
   1246a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1246e:	f04f 0200 	mov.w	r2, #0
   12472:	601a      	str	r2, [r3, #0]
   12474:	f001 bfc6 	b.w	14404 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12478:	f24b 2314 	movw	r3, #45588	; 0xb214
   1247c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12480:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12484:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12488:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1248a:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   1248e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12492:	2200      	movs	r2, #0
   12494:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12496:	f24b 2354 	movw	r3, #45652	; 0xb254
   1249a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249e:	f04f 0200 	mov.w	r2, #0
   124a2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   124a4:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   124a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ac:	2202      	movs	r2, #2
   124ae:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   124b0:	f24b 2318 	movw	r3, #45592	; 0xb218
   124b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   124bc:	601a      	str	r2, [r3, #0]
        }
        return;
   124be:	f001 bfa1 	b.w	14404 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   124c2:	f24b 2328 	movw	r3, #45608	; 0xb228
   124c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ca:	781b      	ldrb	r3, [r3, #0]
   124cc:	2b04      	cmp	r3, #4
   124ce:	f041 8799 	bne.w	14404 <auto_nav+0x21a4>
        NextBlock()
   124d2:	f24b 2329 	movw	r3, #45609	; 0xb229
   124d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124da:	781b      	ldrb	r3, [r3, #0]
   124dc:	3301      	adds	r3, #1
   124de:	b2da      	uxtb	r2, r3
   124e0:	f24b 2329 	movw	r3, #45609	; 0xb229
   124e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e8:	701a      	strb	r2, [r3, #0]
   124ea:	f24b 2328 	movw	r3, #45608	; 0xb228
   124ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f2:	2200      	movs	r2, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	f24b 233e 	movw	r3, #45630	; 0xb23e
   124fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124fe:	2200      	movs	r2, #0
   12500:	801a      	strh	r2, [r3, #0]
   12502:	f24b 4384 	movw	r3, #46212	; 0xb484
   12506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250a:	681a      	ldr	r2, [r3, #0]
   1250c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12514:	601a      	str	r2, [r3, #0]
   12516:	f24b 4388 	movw	r3, #46216	; 0xb488
   1251a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1251e:	681a      	ldr	r2, [r3, #0]
   12520:	f24b 2330 	movw	r3, #45616	; 0xb230
   12524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12528:	601a      	str	r2, [r3, #0]
   1252a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1252e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12532:	2200      	movs	r2, #0
   12534:	801a      	strh	r2, [r3, #0]
   12536:	f24b 2340 	movw	r3, #45632	; 0xb240
   1253a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1253e:	f04f 0200 	mov.w	r2, #0
   12542:	601a      	str	r2, [r3, #0]
   12544:	f001 bf5e 	b.w	14404 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12548:	f24b 2329 	movw	r3, #45609	; 0xb229
   1254c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12550:	781b      	ldrb	r3, [r3, #0]
   12552:	2b01      	cmp	r3, #1
   12554:	f040 81bc 	bne.w	128d0 <auto_nav+0x670>
{
    nav_block = 1;
   12558:	f24b 2329 	movw	r3, #45609	; 0xb229
   1255c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12560:	2201      	movs	r2, #1
   12562:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12564:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   12568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1256c:	781b      	ldrb	r3, [r3, #0]
   1256e:	2b00      	cmp	r3, #0
   12570:	d007      	beq.n	12582 <auto_nav+0x322>
   12572:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   12576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257a:	2200      	movs	r2, #0
   1257c:	701a      	strb	r2, [r3, #0]
   1257e:	2301      	movs	r3, #1
   12580:	e000      	b.n	12584 <auto_nav+0x324>
   12582:	2300      	movs	r3, #0
   12584:	2b00      	cmp	r3, #0
   12586:	d034      	beq.n	125f2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12588:	f24b 2329 	movw	r3, #45609	; 0xb229
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	2202      	movs	r2, #2
   12592:	701a      	strb	r2, [r3, #0]
   12594:	f24b 2328 	movw	r3, #45608	; 0xb228
   12598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1259c:	2200      	movs	r2, #0
   1259e:	701a      	strb	r2, [r3, #0]
   125a0:	f24b 233e 	movw	r3, #45630	; 0xb23e
   125a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a8:	2200      	movs	r2, #0
   125aa:	801a      	strh	r2, [r3, #0]
   125ac:	f24b 4384 	movw	r3, #46212	; 0xb484
   125b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b4:	681a      	ldr	r2, [r3, #0]
   125b6:	f24b 232c 	movw	r3, #45612	; 0xb22c
   125ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125be:	601a      	str	r2, [r3, #0]
   125c0:	f24b 4388 	movw	r3, #46216	; 0xb488
   125c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c8:	681a      	ldr	r2, [r3, #0]
   125ca:	f24b 2330 	movw	r3, #45616	; 0xb230
   125ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d2:	601a      	str	r2, [r3, #0]
   125d4:	f24b 233c 	movw	r3, #45628	; 0xb23c
   125d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125dc:	2200      	movs	r2, #0
   125de:	801a      	strh	r2, [r3, #0]
   125e0:	f24b 2340 	movw	r3, #45632	; 0xb240
   125e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e8:	f04f 0200 	mov.w	r2, #0
   125ec:	601a      	str	r2, [r3, #0]
   125ee:	f001 bf09 	b.w	14404 <auto_nav+0x21a4>
    if(nav_stage == 0)
   125f2:	f24b 2328 	movw	r3, #45608	; 0xb228
   125f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125fa:	781b      	ldrb	r3, [r3, #0]
   125fc:	2b00      	cmp	r3, #0
   125fe:	d12e      	bne.n	1265e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12600:	f24b 2328 	movw	r3, #45608	; 0xb228
   12604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12608:	781b      	ldrb	r3, [r3, #0]
   1260a:	3301      	adds	r3, #1
   1260c:	b2da      	uxtb	r2, r3
   1260e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12616:	701a      	strb	r2, [r3, #0]
   12618:	f24b 4384 	movw	r3, #46212	; 0xb484
   1261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12620:	681a      	ldr	r2, [r3, #0]
   12622:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1262a:	601a      	str	r2, [r3, #0]
   1262c:	f24b 4388 	movw	r3, #46216	; 0xb488
   12630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12634:	681a      	ldr	r2, [r3, #0]
   12636:	f24b 2330 	movw	r3, #45616	; 0xb230
   1263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263e:	601a      	str	r2, [r3, #0]
   12640:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12648:	2200      	movs	r2, #0
   1264a:	801a      	strh	r2, [r3, #0]
   1264c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12654:	f04f 0200 	mov.w	r2, #0
   12658:	601a      	str	r2, [r3, #0]
   1265a:	f001 bed3 	b.w	14404 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1265e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	2b01      	cmp	r3, #1
   1266a:	d169      	bne.n	12740 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1266c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12674:	2201      	movs	r2, #1
   12676:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12678:	2001      	movs	r0, #1
   1267a:	f001 fed1 	bl	14420 <approaching>
   1267e:	4603      	mov	r3, r0
   12680:	2b00      	cmp	r3, #0
   12682:	d034      	beq.n	126ee <auto_nav+0x48e>
   12684:	f24b 2334 	movw	r3, #45620	; 0xb234
   12688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1268c:	2201      	movs	r2, #1
   1268e:	701a      	strb	r2, [r3, #0]
   12690:	f24b 2328 	movw	r3, #45608	; 0xb228
   12694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12698:	781b      	ldrb	r3, [r3, #0]
   1269a:	3301      	adds	r3, #1
   1269c:	b2da      	uxtb	r2, r3
   1269e:	f24b 2328 	movw	r3, #45608	; 0xb228
   126a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a6:	701a      	strb	r2, [r3, #0]
   126a8:	f24b 4384 	movw	r3, #46212	; 0xb484
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	681a      	ldr	r2, [r3, #0]
   126b2:	f24b 232c 	movw	r3, #45612	; 0xb22c
   126b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ba:	601a      	str	r2, [r3, #0]
   126bc:	f24b 4388 	movw	r3, #46216	; 0xb488
   126c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c4:	681a      	ldr	r2, [r3, #0]
   126c6:	f24b 2330 	movw	r3, #45616	; 0xb230
   126ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ce:	601a      	str	r2, [r3, #0]
   126d0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   126d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d8:	2200      	movs	r2, #0
   126da:	801a      	strh	r2, [r3, #0]
   126dc:	f24b 2340 	movw	r3, #45632	; 0xb240
   126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e4:	f04f 0200 	mov.w	r2, #0
   126e8:	601a      	str	r2, [r3, #0]
   126ea:	f001 be8b 	b.w	14404 <auto_nav+0x21a4>
            fly_to(1);
   126ee:	2001      	movs	r0, #1
   126f0:	f001 ffca 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   126f4:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   126f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126fc:	2200      	movs	r2, #0
   126fe:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12700:	f24b 2354 	movw	r3, #45652	; 0xb254
   12704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12708:	f04f 0200 	mov.w	r2, #0
   1270c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1270e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12716:	2203      	movs	r2, #3
   12718:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   1271a:	f240 4328 	movw	r3, #1064	; 0x428
   1271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12722:	695a      	ldr	r2, [r3, #20]
   12724:	f240 4324 	movw	r3, #1060	; 0x424
   12728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1272e:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12736:	f04f 0200 	mov.w	r2, #0
   1273a:	601a      	str	r2, [r3, #0]
          }
          return;
   1273c:	f001 be62 	b.w	14404 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12740:	f24b 2328 	movw	r3, #45608	; 0xb228
   12744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12748:	781b      	ldrb	r3, [r3, #0]
   1274a:	2b02      	cmp	r3, #2
   1274c:	d169      	bne.n	12822 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1274e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12756:	2202      	movs	r2, #2
   12758:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1275a:	2004      	movs	r0, #4
   1275c:	f001 fe60 	bl	14420 <approaching>
   12760:	4603      	mov	r3, r0
   12762:	2b00      	cmp	r3, #0
   12764:	d034      	beq.n	127d0 <auto_nav+0x570>
   12766:	f24b 2334 	movw	r3, #45620	; 0xb234
   1276a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1276e:	2204      	movs	r2, #4
   12770:	701a      	strb	r2, [r3, #0]
   12772:	f24b 2328 	movw	r3, #45608	; 0xb228
   12776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277a:	781b      	ldrb	r3, [r3, #0]
   1277c:	3301      	adds	r3, #1
   1277e:	b2da      	uxtb	r2, r3
   12780:	f24b 2328 	movw	r3, #45608	; 0xb228
   12784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12788:	701a      	strb	r2, [r3, #0]
   1278a:	f24b 4384 	movw	r3, #46212	; 0xb484
   1278e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12792:	681a      	ldr	r2, [r3, #0]
   12794:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1279c:	601a      	str	r2, [r3, #0]
   1279e:	f24b 4388 	movw	r3, #46216	; 0xb488
   127a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a6:	681a      	ldr	r2, [r3, #0]
   127a8:	f24b 2330 	movw	r3, #45616	; 0xb230
   127ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b0:	601a      	str	r2, [r3, #0]
   127b2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   127b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ba:	2200      	movs	r2, #0
   127bc:	801a      	strh	r2, [r3, #0]
   127be:	f24b 2340 	movw	r3, #45632	; 0xb240
   127c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c6:	f04f 0200 	mov.w	r2, #0
   127ca:	601a      	str	r2, [r3, #0]
   127cc:	f001 be1a 	b.w	14404 <auto_nav+0x21a4>
            fly_to(4);
   127d0:	2004      	movs	r0, #4
   127d2:	f001 ff59 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   127d6:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   127da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127de:	2200      	movs	r2, #0
   127e0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   127e2:	f24b 2354 	movw	r3, #45652	; 0xb254
   127e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ea:	f04f 0200 	mov.w	r2, #0
   127ee:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   127f0:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   127f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f8:	2203      	movs	r2, #3
   127fa:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   127fc:	f240 4328 	movw	r3, #1064	; 0x428
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12806:	f240 4324 	movw	r3, #1060	; 0x424
   1280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1280e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12810:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12818:	f04f 0200 	mov.w	r2, #0
   1281c:	601a      	str	r2, [r3, #0]
          }
          return;
   1281e:	f001 bdf1 	b.w	14404 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12822:	f24b 2328 	movw	r3, #45608	; 0xb228
   12826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282a:	781b      	ldrb	r3, [r3, #0]
   1282c:	2b03      	cmp	r3, #3
   1282e:	d106      	bne.n	1283e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12830:	f24b 2328 	movw	r3, #45608	; 0xb228
   12834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12838:	2203      	movs	r2, #3
   1283a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   1283c:	e6e0      	b.n	12600 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   1283e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	2b04      	cmp	r3, #4
   1284a:	f041 85db 	bne.w	14404 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   1284e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12856:	2204      	movs	r2, #4
   12858:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1285a:	f24b 2329 	movw	r3, #45609	; 0xb229
   1285e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	3301      	adds	r3, #1
   12866:	b2da      	uxtb	r2, r3
   12868:	f24b 2329 	movw	r3, #45609	; 0xb229
   1286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12870:	701a      	strb	r2, [r3, #0]
   12872:	f24b 2328 	movw	r3, #45608	; 0xb228
   12876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1287a:	2200      	movs	r2, #0
   1287c:	701a      	strb	r2, [r3, #0]
   1287e:	f24b 233e 	movw	r3, #45630	; 0xb23e
   12882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12886:	2200      	movs	r2, #0
   12888:	801a      	strh	r2, [r3, #0]
   1288a:	f24b 4384 	movw	r3, #46212	; 0xb484
   1288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12892:	681a      	ldr	r2, [r3, #0]
   12894:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1289c:	601a      	str	r2, [r3, #0]
   1289e:	f24b 4388 	movw	r3, #46216	; 0xb488
   128a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a6:	681a      	ldr	r2, [r3, #0]
   128a8:	f24b 2330 	movw	r3, #45616	; 0xb230
   128ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b0:	601a      	str	r2, [r3, #0]
   128b2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   128b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ba:	2200      	movs	r2, #0
   128bc:	801a      	strh	r2, [r3, #0]
   128be:	f24b 2340 	movw	r3, #45632	; 0xb240
   128c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c6:	f04f 0200 	mov.w	r2, #0
   128ca:	601a      	str	r2, [r3, #0]
   128cc:	f001 bd9a 	b.w	14404 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   128d0:	f24b 2329 	movw	r3, #45609	; 0xb229
   128d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d8:	781b      	ldrb	r3, [r3, #0]
   128da:	2b02      	cmp	r3, #2
   128dc:	f040 8392 	bne.w	13004 <auto_nav+0xda4>
{
	nav_block = 2;
   128e0:	f24b 2329 	movw	r3, #45609	; 0xb229
   128e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e8:	2202      	movs	r2, #2
   128ea:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   128ec:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   128f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f4:	781b      	ldrb	r3, [r3, #0]
   128f6:	2b00      	cmp	r3, #0
   128f8:	d007      	beq.n	1290a <auto_nav+0x6aa>
   128fa:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   128fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12902:	2200      	movs	r2, #0
   12904:	701a      	strb	r2, [r3, #0]
   12906:	2301      	movs	r3, #1
   12908:	e000      	b.n	1290c <auto_nav+0x6ac>
   1290a:	2300      	movs	r3, #0
   1290c:	2b00      	cmp	r3, #0
   1290e:	d034      	beq.n	1297a <auto_nav+0x71a>
   12910:	f24b 2329 	movw	r3, #45609	; 0xb229
   12914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12918:	2203      	movs	r2, #3
   1291a:	701a      	strb	r2, [r3, #0]
   1291c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12924:	2200      	movs	r2, #0
   12926:	701a      	strb	r2, [r3, #0]
   12928:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1292c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12930:	2200      	movs	r2, #0
   12932:	801a      	strh	r2, [r3, #0]
   12934:	f24b 4384 	movw	r3, #46212	; 0xb484
   12938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1293c:	681a      	ldr	r2, [r3, #0]
   1293e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12946:	601a      	str	r2, [r3, #0]
   12948:	f24b 4388 	movw	r3, #46216	; 0xb488
   1294c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12950:	681a      	ldr	r2, [r3, #0]
   12952:	f24b 2330 	movw	r3, #45616	; 0xb230
   12956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1295a:	601a      	str	r2, [r3, #0]
   1295c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12964:	2200      	movs	r2, #0
   12966:	801a      	strh	r2, [r3, #0]
   12968:	f24b 2340 	movw	r3, #45632	; 0xb240
   1296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12970:	f04f 0200 	mov.w	r2, #0
   12974:	601a      	str	r2, [r3, #0]
   12976:	f001 bd45 	b.w	14404 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   1297a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12982:	781b      	ldrb	r3, [r3, #0]
   12984:	2b00      	cmp	r3, #0
   12986:	d134      	bne.n	129f2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12988:	f24b 2328 	movw	r3, #45608	; 0xb228
   1298c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12990:	2200      	movs	r2, #0
   12992:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12994:	f24b 2328 	movw	r3, #45608	; 0xb228
   12998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1299c:	781b      	ldrb	r3, [r3, #0]
   1299e:	3301      	adds	r3, #1
   129a0:	b2da      	uxtb	r2, r3
   129a2:	f24b 2328 	movw	r3, #45608	; 0xb228
   129a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129aa:	701a      	strb	r2, [r3, #0]
   129ac:	f24b 4384 	movw	r3, #46212	; 0xb484
   129b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b4:	681a      	ldr	r2, [r3, #0]
   129b6:	f24b 232c 	movw	r3, #45612	; 0xb22c
   129ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129be:	601a      	str	r2, [r3, #0]
   129c0:	f24b 4388 	movw	r3, #46216	; 0xb488
   129c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c8:	681a      	ldr	r2, [r3, #0]
   129ca:	f24b 2330 	movw	r3, #45616	; 0xb230
   129ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d2:	601a      	str	r2, [r3, #0]
   129d4:	f24b 233c 	movw	r3, #45628	; 0xb23c
   129d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129dc:	2200      	movs	r2, #0
   129de:	801a      	strh	r2, [r3, #0]
   129e0:	f24b 2340 	movw	r3, #45632	; 0xb240
   129e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e8:	f04f 0200 	mov.w	r2, #0
   129ec:	601a      	str	r2, [r3, #0]
   129ee:	f001 bd09 	b.w	14404 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   129f2:	f24b 2328 	movw	r3, #45608	; 0xb228
   129f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fa:	781b      	ldrb	r3, [r3, #0]
   129fc:	2b01      	cmp	r3, #1
   129fe:	d169      	bne.n	12ad4 <auto_nav+0x874>
    {
         nav_stage =1;
   12a00:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a08:	2201      	movs	r2, #1
   12a0a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12a0c:	2006      	movs	r0, #6
   12a0e:	f001 fd07 	bl	14420 <approaching>
   12a12:	4603      	mov	r3, r0
   12a14:	2b00      	cmp	r3, #0
   12a16:	d034      	beq.n	12a82 <auto_nav+0x822>
   12a18:	f24b 2334 	movw	r3, #45620	; 0xb234
   12a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a20:	2206      	movs	r2, #6
   12a22:	701a      	strb	r2, [r3, #0]
   12a24:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	3301      	adds	r3, #1
   12a30:	b2da      	uxtb	r2, r3
   12a32:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	701a      	strb	r2, [r3, #0]
   12a3c:	f24b 4384 	movw	r3, #46212	; 0xb484
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	681a      	ldr	r2, [r3, #0]
   12a46:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4e:	601a      	str	r2, [r3, #0]
   12a50:	f24b 4388 	movw	r3, #46216	; 0xb488
   12a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a58:	681a      	ldr	r2, [r3, #0]
   12a5a:	f24b 2330 	movw	r3, #45616	; 0xb230
   12a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a62:	601a      	str	r2, [r3, #0]
   12a64:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a6c:	2200      	movs	r2, #0
   12a6e:	801a      	strh	r2, [r3, #0]
   12a70:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a78:	f04f 0200 	mov.w	r2, #0
   12a7c:	601a      	str	r2, [r3, #0]
   12a7e:	f001 bcc1 	b.w	14404 <auto_nav+0x21a4>
            fly_to(6);
   12a82:	2006      	movs	r0, #6
   12a84:	f001 fe00 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   12a88:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a90:	2200      	movs	r2, #0
   12a92:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a94:	f24b 2354 	movw	r3, #45652	; 0xb254
   12a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a9c:	f04f 0200 	mov.w	r2, #0
   12aa0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12aa2:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aaa:	2203      	movs	r2, #3
   12aac:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12aae:	f240 4328 	movw	r3, #1064	; 0x428
   12ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12ab8:	f240 4324 	movw	r3, #1060	; 0x424
   12abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ac2:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aca:	f04f 0200 	mov.w	r2, #0
   12ace:	601a      	str	r2, [r3, #0]
          }
          return;
   12ad0:	f001 bc98 	b.w	14404 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12ad4:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12adc:	781b      	ldrb	r3, [r3, #0]
   12ade:	2b02      	cmp	r3, #2
   12ae0:	d169      	bne.n	12bb6 <auto_nav+0x956>
     {
         nav_stage =2; 
   12ae2:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aea:	2202      	movs	r2, #2
   12aec:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12aee:	2001      	movs	r0, #1
   12af0:	f001 fc96 	bl	14420 <approaching>
   12af4:	4603      	mov	r3, r0
   12af6:	2b00      	cmp	r3, #0
   12af8:	d034      	beq.n	12b64 <auto_nav+0x904>
   12afa:	f24b 2334 	movw	r3, #45620	; 0xb234
   12afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b02:	2201      	movs	r2, #1
   12b04:	701a      	strb	r2, [r3, #0]
   12b06:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0e:	781b      	ldrb	r3, [r3, #0]
   12b10:	3301      	adds	r3, #1
   12b12:	b2da      	uxtb	r2, r3
   12b14:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1c:	701a      	strb	r2, [r3, #0]
   12b1e:	f24b 4384 	movw	r3, #46212	; 0xb484
   12b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b26:	681a      	ldr	r2, [r3, #0]
   12b28:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b30:	601a      	str	r2, [r3, #0]
   12b32:	f24b 4388 	movw	r3, #46216	; 0xb488
   12b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b3a:	681a      	ldr	r2, [r3, #0]
   12b3c:	f24b 2330 	movw	r3, #45616	; 0xb230
   12b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b44:	601a      	str	r2, [r3, #0]
   12b46:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4e:	2200      	movs	r2, #0
   12b50:	801a      	strh	r2, [r3, #0]
   12b52:	f24b 2340 	movw	r3, #45632	; 0xb240
   12b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b5a:	f04f 0200 	mov.w	r2, #0
   12b5e:	601a      	str	r2, [r3, #0]
   12b60:	f001 bc50 	b.w	14404 <auto_nav+0x21a4>
            fly_to(1);
   12b64:	2001      	movs	r0, #1
   12b66:	f001 fd8f 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   12b6a:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b72:	2200      	movs	r2, #0
   12b74:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b76:	f24b 2354 	movw	r3, #45652	; 0xb254
   12b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7e:	f04f 0200 	mov.w	r2, #0
   12b82:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b84:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b8c:	2203      	movs	r2, #3
   12b8e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12b90:	f240 4328 	movw	r3, #1064	; 0x428
   12b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b98:	695a      	ldr	r2, [r3, #20]
   12b9a:	f240 4324 	movw	r3, #1060	; 0x424
   12b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ba4:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bac:	f04f 0200 	mov.w	r2, #0
   12bb0:	601a      	str	r2, [r3, #0]
          }
          return;
   12bb2:	f001 bc27 	b.w	14404 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12bb6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbe:	781b      	ldrb	r3, [r3, #0]
   12bc0:	2b03      	cmp	r3, #3
   12bc2:	d16f      	bne.n	12ca4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12bc4:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bcc:	2203      	movs	r2, #3
   12bce:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12bd0:	2002      	movs	r0, #2
   12bd2:	f001 fc25 	bl	14420 <approaching>
   12bd6:	4603      	mov	r3, r0
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d034      	beq.n	12c46 <auto_nav+0x9e6>
   12bdc:	f24b 2334 	movw	r3, #45620	; 0xb234
   12be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be4:	2202      	movs	r2, #2
   12be6:	701a      	strb	r2, [r3, #0]
   12be8:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf0:	781b      	ldrb	r3, [r3, #0]
   12bf2:	3301      	adds	r3, #1
   12bf4:	b2da      	uxtb	r2, r3
   12bf6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	f24b 4384 	movw	r3, #46212	; 0xb484
   12c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c08:	681a      	ldr	r2, [r3, #0]
   12c0a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c12:	601a      	str	r2, [r3, #0]
   12c14:	f24b 4388 	movw	r3, #46216	; 0xb488
   12c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c1c:	681a      	ldr	r2, [r3, #0]
   12c1e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c26:	601a      	str	r2, [r3, #0]
   12c28:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c30:	2200      	movs	r2, #0
   12c32:	801a      	strh	r2, [r3, #0]
   12c34:	f24b 2340 	movw	r3, #45632	; 0xb240
   12c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c3c:	f04f 0200 	mov.w	r2, #0
   12c40:	601a      	str	r2, [r3, #0]
   12c42:	f001 bbdf 	b.w	14404 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12c46:	f24b 2334 	movw	r3, #45620	; 0xb234
   12c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4e:	781b      	ldrb	r3, [r3, #0]
   12c50:	4618      	mov	r0, r3
   12c52:	2102      	movs	r1, #2
   12c54:	f001 fd3a 	bl	146cc <route_to>
            auto_pitch = FALSE;
   12c58:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c60:	2200      	movs	r2, #0
   12c62:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c64:	f24b 2354 	movw	r3, #45652	; 0xb254
   12c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c6c:	f04f 0200 	mov.w	r2, #0
   12c70:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c72:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7a:	2203      	movs	r2, #3
   12c7c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12c7e:	f240 4328 	movw	r3, #1064	; 0x428
   12c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c86:	6a1a      	ldr	r2, [r3, #32]
   12c88:	f240 4324 	movw	r3, #1060	; 0x424
   12c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c90:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c92:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c9a:	f04f 0200 	mov.w	r2, #0
   12c9e:	601a      	str	r2, [r3, #0]
          }
          return;
   12ca0:	f001 bbb0 	b.w	14404 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12ca4:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cac:	781b      	ldrb	r3, [r3, #0]
   12cae:	2b04      	cmp	r3, #4
   12cb0:	d169      	bne.n	12d86 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12cb2:	f24b 2328 	movw	r3, #45608	; 0xb228
   12cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cba:	2204      	movs	r2, #4
   12cbc:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12cbe:	2003      	movs	r0, #3
   12cc0:	f001 fbae 	bl	14420 <approaching>
   12cc4:	4603      	mov	r3, r0
   12cc6:	2b00      	cmp	r3, #0
   12cc8:	d034      	beq.n	12d34 <auto_nav+0xad4>
   12cca:	f24b 2334 	movw	r3, #45620	; 0xb234
   12cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd2:	2203      	movs	r2, #3
   12cd4:	701a      	strb	r2, [r3, #0]
   12cd6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cde:	781b      	ldrb	r3, [r3, #0]
   12ce0:	3301      	adds	r3, #1
   12ce2:	b2da      	uxtb	r2, r3
   12ce4:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cec:	701a      	strb	r2, [r3, #0]
   12cee:	f24b 4384 	movw	r3, #46212	; 0xb484
   12cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf6:	681a      	ldr	r2, [r3, #0]
   12cf8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d00:	601a      	str	r2, [r3, #0]
   12d02:	f24b 4388 	movw	r3, #46216	; 0xb488
   12d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d0a:	681a      	ldr	r2, [r3, #0]
   12d0c:	f24b 2330 	movw	r3, #45616	; 0xb230
   12d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d14:	601a      	str	r2, [r3, #0]
   12d16:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d1e:	2200      	movs	r2, #0
   12d20:	801a      	strh	r2, [r3, #0]
   12d22:	f24b 2340 	movw	r3, #45632	; 0xb240
   12d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d2a:	f04f 0200 	mov.w	r2, #0
   12d2e:	601a      	str	r2, [r3, #0]
   12d30:	f001 bb68 	b.w	14404 <auto_nav+0x21a4>
            fly_to(3);
   12d34:	2003      	movs	r0, #3
   12d36:	f001 fca7 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   12d3a:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d42:	2200      	movs	r2, #0
   12d44:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d46:	f24b 2354 	movw	r3, #45652	; 0xb254
   12d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d4e:	f04f 0200 	mov.w	r2, #0
   12d52:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d54:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d5c:	2203      	movs	r2, #3
   12d5e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12d60:	f240 4328 	movw	r3, #1064	; 0x428
   12d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12d6a:	f240 4324 	movw	r3, #1060	; 0x424
   12d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d72:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d74:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d7c:	f04f 0200 	mov.w	r2, #0
   12d80:	601a      	str	r2, [r3, #0]
          }
          return;
   12d82:	f001 bb3f 	b.w	14404 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12d86:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d8e:	781b      	ldrb	r3, [r3, #0]
   12d90:	2b05      	cmp	r3, #5
   12d92:	d169      	bne.n	12e68 <auto_nav+0xc08>
       {
          nav_stage =5;
   12d94:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9c:	2205      	movs	r2, #5
   12d9e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12da0:	2004      	movs	r0, #4
   12da2:	f001 fb3d 	bl	14420 <approaching>
   12da6:	4603      	mov	r3, r0
   12da8:	2b00      	cmp	r3, #0
   12daa:	d034      	beq.n	12e16 <auto_nav+0xbb6>
   12dac:	f24b 2334 	movw	r3, #45620	; 0xb234
   12db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db4:	2204      	movs	r2, #4
   12db6:	701a      	strb	r2, [r3, #0]
   12db8:	f24b 2328 	movw	r3, #45608	; 0xb228
   12dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc0:	781b      	ldrb	r3, [r3, #0]
   12dc2:	3301      	adds	r3, #1
   12dc4:	b2da      	uxtb	r2, r3
   12dc6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dce:	701a      	strb	r2, [r3, #0]
   12dd0:	f24b 4384 	movw	r3, #46212	; 0xb484
   12dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd8:	681a      	ldr	r2, [r3, #0]
   12dda:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de2:	601a      	str	r2, [r3, #0]
   12de4:	f24b 4388 	movw	r3, #46216	; 0xb488
   12de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dec:	681a      	ldr	r2, [r3, #0]
   12dee:	f24b 2330 	movw	r3, #45616	; 0xb230
   12df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df6:	601a      	str	r2, [r3, #0]
   12df8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e00:	2200      	movs	r2, #0
   12e02:	801a      	strh	r2, [r3, #0]
   12e04:	f24b 2340 	movw	r3, #45632	; 0xb240
   12e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e0c:	f04f 0200 	mov.w	r2, #0
   12e10:	601a      	str	r2, [r3, #0]
   12e12:	f001 baf7 	b.w	14404 <auto_nav+0x21a4>
            fly_to(4);
   12e16:	2004      	movs	r0, #4
   12e18:	f001 fc36 	bl	14688 <fly_to>
            auto_pitch = FALSE;
   12e1c:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e24:	2200      	movs	r2, #0
   12e26:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e28:	f24b 2354 	movw	r3, #45652	; 0xb254
   12e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e30:	f04f 0200 	mov.w	r2, #0
   12e34:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e36:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e3e:	2203      	movs	r2, #3
   12e40:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12e42:	f240 4328 	movw	r3, #1064	; 0x428
   12e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12e4c:	f240 4324 	movw	r3, #1060	; 0x424
   12e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e54:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e56:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e5e:	f04f 0200 	mov.w	r2, #0
   12e62:	601a      	str	r2, [r3, #0]
          }
          return;
   12e64:	f001 bace 	b.w	14404 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12e68:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e70:	781b      	ldrb	r3, [r3, #0]
   12e72:	2b06      	cmp	r3, #6
   12e74:	d16f      	bne.n	12f56 <auto_nav+0xcf6>
       {
          nav_stage =6;
   12e76:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7e:	2206      	movs	r2, #6
   12e80:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12e82:	2005      	movs	r0, #5
   12e84:	f001 facc 	bl	14420 <approaching>
   12e88:	4603      	mov	r3, r0
   12e8a:	2b00      	cmp	r3, #0
   12e8c:	d034      	beq.n	12ef8 <auto_nav+0xc98>
   12e8e:	f24b 2334 	movw	r3, #45620	; 0xb234
   12e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e96:	2205      	movs	r2, #5
   12e98:	701a      	strb	r2, [r3, #0]
   12e9a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	3301      	adds	r3, #1
   12ea6:	b2da      	uxtb	r2, r3
   12ea8:	f24b 2328 	movw	r3, #45608	; 0xb228
   12eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb0:	701a      	strb	r2, [r3, #0]
   12eb2:	f24b 4384 	movw	r3, #46212	; 0xb484
   12eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eba:	681a      	ldr	r2, [r3, #0]
   12ebc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec4:	601a      	str	r2, [r3, #0]
   12ec6:	f24b 4388 	movw	r3, #46216	; 0xb488
   12eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ece:	681a      	ldr	r2, [r3, #0]
   12ed0:	f24b 2330 	movw	r3, #45616	; 0xb230
   12ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ed8:	601a      	str	r2, [r3, #0]
   12eda:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee2:	2200      	movs	r2, #0
   12ee4:	801a      	strh	r2, [r3, #0]
   12ee6:	f24b 2340 	movw	r3, #45632	; 0xb240
   12eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eee:	f04f 0200 	mov.w	r2, #0
   12ef2:	601a      	str	r2, [r3, #0]
   12ef4:	f001 ba86 	b.w	14404 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12ef8:	f24b 2334 	movw	r3, #45620	; 0xb234
   12efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f00:	781b      	ldrb	r3, [r3, #0]
   12f02:	4618      	mov	r0, r3
   12f04:	2105      	movs	r1, #5
   12f06:	f001 fbe1 	bl	146cc <route_to>
            auto_pitch = FALSE;
   12f0a:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f12:	2200      	movs	r2, #0
   12f14:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f16:	f24b 2354 	movw	r3, #45652	; 0xb254
   12f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f1e:	f04f 0200 	mov.w	r2, #0
   12f22:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f24:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2c:	2203      	movs	r2, #3
   12f2e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12f30:	f240 4328 	movw	r3, #1064	; 0x428
   12f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12f3a:	f240 4324 	movw	r3, #1060	; 0x424
   12f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f42:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f44:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f4c:	f04f 0200 	mov.w	r2, #0
   12f50:	601a      	str	r2, [r3, #0]
          }
          return;
   12f52:	f001 ba57 	b.w	14404 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12f56:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5e:	781b      	ldrb	r3, [r3, #0]
   12f60:	2b07      	cmp	r3, #7
   12f62:	d106      	bne.n	12f72 <auto_nav+0xd12>
       {
	   nav_stage =7;
   12f64:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f6c:	2207      	movs	r2, #7
   12f6e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12f70:	e50a      	b.n	12988 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12f72:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7a:	781b      	ldrb	r3, [r3, #0]
   12f7c:	2b08      	cmp	r3, #8
   12f7e:	f041 8241 	bne.w	14404 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12f82:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f8a:	2208      	movs	r2, #8
   12f8c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12f8e:	f24b 2329 	movw	r3, #45609	; 0xb229
   12f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	3301      	adds	r3, #1
   12f9a:	b2da      	uxtb	r2, r3
   12f9c:	f24b 2329 	movw	r3, #45609	; 0xb229
   12fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa4:	701a      	strb	r2, [r3, #0]
   12fa6:	f24b 2328 	movw	r3, #45608	; 0xb228
   12faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fae:	2200      	movs	r2, #0
   12fb0:	701a      	strb	r2, [r3, #0]
   12fb2:	f24b 233e 	movw	r3, #45630	; 0xb23e
   12fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fba:	2200      	movs	r2, #0
   12fbc:	801a      	strh	r2, [r3, #0]
   12fbe:	f24b 4384 	movw	r3, #46212	; 0xb484
   12fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc6:	681a      	ldr	r2, [r3, #0]
   12fc8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd0:	601a      	str	r2, [r3, #0]
   12fd2:	f24b 4388 	movw	r3, #46216	; 0xb488
   12fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fda:	681a      	ldr	r2, [r3, #0]
   12fdc:	f24b 2330 	movw	r3, #45616	; 0xb230
   12fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe4:	601a      	str	r2, [r3, #0]
   12fe6:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fee:	2200      	movs	r2, #0
   12ff0:	801a      	strh	r2, [r3, #0]
   12ff2:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ffa:	f04f 0200 	mov.w	r2, #0
   12ffe:	601a      	str	r2, [r3, #0]
   13000:	f001 ba00 	b.w	14404 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   13004:	f24b 2329 	movw	r3, #45609	; 0xb229
   13008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1300c:	781b      	ldrb	r3, [r3, #0]
   1300e:	2b03      	cmp	r3, #3
   13010:	f040 8388 	bne.w	13724 <auto_nav+0x14c4>
{
    nav_block = 3;
   13014:	f24b 2329 	movw	r3, #45609	; 0xb229
   13018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1301c:	2203      	movs	r2, #3
   1301e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13020:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13028:	781b      	ldrb	r3, [r3, #0]
   1302a:	2b00      	cmp	r3, #0
   1302c:	d007      	beq.n	1303e <auto_nav+0xdde>
   1302e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13036:	2200      	movs	r2, #0
   13038:	701a      	strb	r2, [r3, #0]
   1303a:	2301      	movs	r3, #1
   1303c:	e000      	b.n	13040 <auto_nav+0xde0>
   1303e:	2300      	movs	r3, #0
   13040:	2b00      	cmp	r3, #0
   13042:	d034      	beq.n	130ae <auto_nav+0xe4e>
   13044:	f24b 2329 	movw	r3, #45609	; 0xb229
   13048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1304c:	2204      	movs	r2, #4
   1304e:	701a      	strb	r2, [r3, #0]
   13050:	f24b 2328 	movw	r3, #45608	; 0xb228
   13054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13058:	2200      	movs	r2, #0
   1305a:	701a      	strb	r2, [r3, #0]
   1305c:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13064:	2200      	movs	r2, #0
   13066:	801a      	strh	r2, [r3, #0]
   13068:	f24b 4384 	movw	r3, #46212	; 0xb484
   1306c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13070:	681a      	ldr	r2, [r3, #0]
   13072:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1307a:	601a      	str	r2, [r3, #0]
   1307c:	f24b 4388 	movw	r3, #46216	; 0xb488
   13080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13084:	681a      	ldr	r2, [r3, #0]
   13086:	f24b 2330 	movw	r3, #45616	; 0xb230
   1308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1308e:	601a      	str	r2, [r3, #0]
   13090:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13098:	2200      	movs	r2, #0
   1309a:	801a      	strh	r2, [r3, #0]
   1309c:	f24b 2340 	movw	r3, #45632	; 0xb240
   130a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a4:	f04f 0200 	mov.w	r2, #0
   130a8:	601a      	str	r2, [r3, #0]
   130aa:	f001 b9ab 	b.w	14404 <auto_nav+0x21a4>
    if(nav_stage == 0)
   130ae:	f24b 2328 	movw	r3, #45608	; 0xb228
   130b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	2b00      	cmp	r3, #0
   130ba:	f040 82ea 	bne.w	13692 <auto_nav+0x1432>
    {
        nav_stage = 0;
   130be:	f24b 2328 	movw	r3, #45608	; 0xb228
   130c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c6:	2200      	movs	r2, #0
   130c8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   130ca:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   130ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d2:	781b      	ldrb	r3, [r3, #0]
   130d4:	2b02      	cmp	r3, #2
   130d6:	f040 81a5 	bne.w	13424 <auto_nav+0x11c4>
   130da:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   130de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e2:	88db      	ldrh	r3, [r3, #6]
   130e4:	84fb      	strh	r3, [r7, #38]	; 0x26
   130e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   130ea:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   130ee:	dc04      	bgt.n	130fa <auto_nav+0xe9a>
   130f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   130f4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   130f8:	da7e      	bge.n	131f8 <auto_nav+0xf98>
   130fa:	f24b 2374 	movw	r3, #45684	; 0xb274
   130fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13102:	681b      	ldr	r3, [r3, #0]
   13104:	4618      	mov	r0, r3
   13106:	f004 fb7b 	bl	17800 <__aeabi_f2d>
   1310a:	4604      	mov	r4, r0
   1310c:	460d      	mov	r5, r1
   1310e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13112:	4618      	mov	r0, r3
   13114:	f004 ffb4 	bl	18080 <__aeabi_i2f>
   13118:	4603      	mov	r3, r0
   1311a:	4618      	mov	r0, r3
   1311c:	f04f 0100 	mov.w	r1, #0
   13120:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13124:	f005 f8b4 	bl	18290 <__aeabi_fdiv>
   13128:	4603      	mov	r3, r0
   1312a:	4618      	mov	r0, r3
   1312c:	f004 fb68 	bl	17800 <__aeabi_f2d>
   13130:	4602      	mov	r2, r0
   13132:	460b      	mov	r3, r1
   13134:	4610      	mov	r0, r2
   13136:	4619      	mov	r1, r3
   13138:	f04f 0200 	mov.w	r2, #0
   1313c:	f04f 0300 	mov.w	r3, #0
   13140:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13144:	f004 fbb0 	bl	178a8 <__aeabi_dmul>
   13148:	4602      	mov	r2, r0
   1314a:	460b      	mov	r3, r1
   1314c:	4610      	mov	r0, r2
   1314e:	4619      	mov	r1, r3
   13150:	f04f 0200 	mov.w	r2, #0
   13154:	f04f 0300 	mov.w	r3, #0
   13158:	f004 f9f4 	bl	17544 <__adddf3>
   1315c:	4602      	mov	r2, r0
   1315e:	460b      	mov	r3, r1
   13160:	4620      	mov	r0, r4
   13162:	4629      	mov	r1, r5
   13164:	f004 f9ee 	bl	17544 <__adddf3>
   13168:	4602      	mov	r2, r0
   1316a:	460b      	mov	r3, r1
   1316c:	4610      	mov	r0, r2
   1316e:	4619      	mov	r1, r3
   13170:	f004 fe7c 	bl	17e6c <__aeabi_d2f>
   13174:	4602      	mov	r2, r0
   13176:	f24b 2374 	movw	r3, #45684	; 0xb274
   1317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1317e:	601a      	str	r2, [r3, #0]
   13180:	f24b 2374 	movw	r3, #45684	; 0xb274
   13184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13188:	681b      	ldr	r3, [r3, #0]
   1318a:	4618      	mov	r0, r3
   1318c:	f04f 0100 	mov.w	r1, #0
   13190:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13194:	f005 f970 	bl	18478 <__aeabi_fcmple>
   13198:	4603      	mov	r3, r0
   1319a:	2b00      	cmp	r3, #0
   1319c:	d005      	beq.n	131aa <auto_nav+0xf4a>
   1319e:	f24b 2374 	movw	r3, #45684	; 0xb274
   131a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131a6:	681a      	ldr	r2, [r3, #0]
   131a8:	e003      	b.n	131b2 <auto_nav+0xf52>
   131aa:	f04f 0200 	mov.w	r2, #0
   131ae:	f2c4 327a 	movt	r2, #17274	; 0x437a
   131b2:	f24b 2374 	movw	r3, #45684	; 0xb274
   131b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ba:	601a      	str	r2, [r3, #0]
   131bc:	f24b 2374 	movw	r3, #45684	; 0xb274
   131c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131c4:	681b      	ldr	r3, [r3, #0]
   131c6:	4618      	mov	r0, r3
   131c8:	f04f 0100 	mov.w	r1, #0
   131cc:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   131d0:	f005 f95c 	bl	1848c <__aeabi_fcmpge>
   131d4:	4603      	mov	r3, r0
   131d6:	2b00      	cmp	r3, #0
   131d8:	d005      	beq.n	131e6 <auto_nav+0xf86>
   131da:	f24b 2374 	movw	r3, #45684	; 0xb274
   131de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131e2:	681a      	ldr	r2, [r3, #0]
   131e4:	e003      	b.n	131ee <auto_nav+0xf8e>
   131e6:	f04f 0200 	mov.w	r2, #0
   131ea:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   131ee:	f24b 2374 	movw	r3, #45684	; 0xb274
   131f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f6:	601a      	str	r2, [r3, #0]
   131f8:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   131fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13200:	889b      	ldrh	r3, [r3, #4]
   13202:	84bb      	strh	r3, [r7, #36]	; 0x24
   13204:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13208:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1320c:	dc04      	bgt.n	13218 <auto_nav+0xfb8>
   1320e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13212:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13216:	da7e      	bge.n	13316 <auto_nav+0x10b6>
   13218:	f24b 2378 	movw	r3, #45688	; 0xb278
   1321c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13220:	681b      	ldr	r3, [r3, #0]
   13222:	4618      	mov	r0, r3
   13224:	f004 faec 	bl	17800 <__aeabi_f2d>
   13228:	4604      	mov	r4, r0
   1322a:	460d      	mov	r5, r1
   1322c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13230:	4618      	mov	r0, r3
   13232:	f004 ff25 	bl	18080 <__aeabi_i2f>
   13236:	4603      	mov	r3, r0
   13238:	4618      	mov	r0, r3
   1323a:	f04f 0100 	mov.w	r1, #0
   1323e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13242:	f005 f825 	bl	18290 <__aeabi_fdiv>
   13246:	4603      	mov	r3, r0
   13248:	4618      	mov	r0, r3
   1324a:	f004 fad9 	bl	17800 <__aeabi_f2d>
   1324e:	4602      	mov	r2, r0
   13250:	460b      	mov	r3, r1
   13252:	4610      	mov	r0, r2
   13254:	4619      	mov	r1, r3
   13256:	f04f 0200 	mov.w	r2, #0
   1325a:	f04f 0300 	mov.w	r3, #0
   1325e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13262:	f004 fb21 	bl	178a8 <__aeabi_dmul>
   13266:	4602      	mov	r2, r0
   13268:	460b      	mov	r3, r1
   1326a:	4610      	mov	r0, r2
   1326c:	4619      	mov	r1, r3
   1326e:	f04f 0200 	mov.w	r2, #0
   13272:	f04f 0300 	mov.w	r3, #0
   13276:	f004 f965 	bl	17544 <__adddf3>
   1327a:	4602      	mov	r2, r0
   1327c:	460b      	mov	r3, r1
   1327e:	4620      	mov	r0, r4
   13280:	4629      	mov	r1, r5
   13282:	f004 f95f 	bl	17544 <__adddf3>
   13286:	4602      	mov	r2, r0
   13288:	460b      	mov	r3, r1
   1328a:	4610      	mov	r0, r2
   1328c:	4619      	mov	r1, r3
   1328e:	f004 fded 	bl	17e6c <__aeabi_d2f>
   13292:	4602      	mov	r2, r0
   13294:	f24b 2378 	movw	r3, #45688	; 0xb278
   13298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1329c:	601a      	str	r2, [r3, #0]
   1329e:	f24b 2378 	movw	r3, #45688	; 0xb278
   132a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132a6:	681b      	ldr	r3, [r3, #0]
   132a8:	4618      	mov	r0, r3
   132aa:	f04f 0100 	mov.w	r1, #0
   132ae:	f2c4 317a 	movt	r1, #17274	; 0x437a
   132b2:	f005 f8e1 	bl	18478 <__aeabi_fcmple>
   132b6:	4603      	mov	r3, r0
   132b8:	2b00      	cmp	r3, #0
   132ba:	d005      	beq.n	132c8 <auto_nav+0x1068>
   132bc:	f24b 2378 	movw	r3, #45688	; 0xb278
   132c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c4:	681a      	ldr	r2, [r3, #0]
   132c6:	e003      	b.n	132d0 <auto_nav+0x1070>
   132c8:	f04f 0200 	mov.w	r2, #0
   132cc:	f2c4 327a 	movt	r2, #17274	; 0x437a
   132d0:	f24b 2378 	movw	r3, #45688	; 0xb278
   132d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132d8:	601a      	str	r2, [r3, #0]
   132da:	f24b 2378 	movw	r3, #45688	; 0xb278
   132de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132e2:	681b      	ldr	r3, [r3, #0]
   132e4:	4618      	mov	r0, r3
   132e6:	f04f 0100 	mov.w	r1, #0
   132ea:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   132ee:	f005 f8cd 	bl	1848c <__aeabi_fcmpge>
   132f2:	4603      	mov	r3, r0
   132f4:	2b00      	cmp	r3, #0
   132f6:	d005      	beq.n	13304 <auto_nav+0x10a4>
   132f8:	f24b 2378 	movw	r3, #45688	; 0xb278
   132fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13300:	681a      	ldr	r2, [r3, #0]
   13302:	e003      	b.n	1330c <auto_nav+0x10ac>
   13304:	f04f 0200 	mov.w	r2, #0
   13308:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1330c:	f24b 2378 	movw	r3, #45688	; 0xb278
   13310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13314:	601a      	str	r2, [r3, #0]
   13316:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   1331a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1331e:	2203      	movs	r2, #3
   13320:	701a      	strb	r2, [r3, #0]
   13322:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   13326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1332a:	885b      	ldrh	r3, [r3, #2]
   1332c:	847b      	strh	r3, [r7, #34]	; 0x22
   1332e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13332:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13336:	dc04      	bgt.n	13342 <auto_nav+0x10e2>
   13338:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1333c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13340:	da70      	bge.n	13424 <auto_nav+0x11c4>
   13342:	f240 4324 	movw	r3, #1060	; 0x424
   13346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	4618      	mov	r0, r3
   1334e:	f004 fa57 	bl	17800 <__aeabi_f2d>
   13352:	4604      	mov	r4, r0
   13354:	460d      	mov	r5, r1
   13356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1335a:	4618      	mov	r0, r3
   1335c:	f004 fe90 	bl	18080 <__aeabi_i2f>
   13360:	4603      	mov	r3, r0
   13362:	4618      	mov	r0, r3
   13364:	f04f 0100 	mov.w	r1, #0
   13368:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1336c:	f004 ff90 	bl	18290 <__aeabi_fdiv>
   13370:	4603      	mov	r3, r0
   13372:	4618      	mov	r0, r3
   13374:	f004 fa44 	bl	17800 <__aeabi_f2d>
   13378:	4602      	mov	r2, r0
   1337a:	460b      	mov	r3, r1
   1337c:	f04f 0000 	mov.w	r0, #0
   13380:	f04f 0100 	mov.w	r1, #0
   13384:	f004 f8dc 	bl	17540 <__aeabi_dsub>
   13388:	4602      	mov	r2, r0
   1338a:	460b      	mov	r3, r1
   1338c:	4620      	mov	r0, r4
   1338e:	4629      	mov	r1, r5
   13390:	f004 f8d8 	bl	17544 <__adddf3>
   13394:	4602      	mov	r2, r0
   13396:	460b      	mov	r3, r1
   13398:	4610      	mov	r0, r2
   1339a:	4619      	mov	r1, r3
   1339c:	f004 fd66 	bl	17e6c <__aeabi_d2f>
   133a0:	4602      	mov	r2, r0
   133a2:	f240 4324 	movw	r3, #1060	; 0x424
   133a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133aa:	601a      	str	r2, [r3, #0]
   133ac:	f240 4324 	movw	r3, #1060	; 0x424
   133b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133b4:	681b      	ldr	r3, [r3, #0]
   133b6:	4618      	mov	r0, r3
   133b8:	f04f 0100 	mov.w	r1, #0
   133bc:	f2c4 312f 	movt	r1, #17199	; 0x432f
   133c0:	f005 f864 	bl	1848c <__aeabi_fcmpge>
   133c4:	4603      	mov	r3, r0
   133c6:	2b00      	cmp	r3, #0
   133c8:	d005      	beq.n	133d6 <auto_nav+0x1176>
   133ca:	f240 4324 	movw	r3, #1060	; 0x424
   133ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133d2:	681a      	ldr	r2, [r3, #0]
   133d4:	e003      	b.n	133de <auto_nav+0x117e>
   133d6:	f04f 0200 	mov.w	r2, #0
   133da:	f2c4 322f 	movt	r2, #17199	; 0x432f
   133de:	f240 4324 	movw	r3, #1060	; 0x424
   133e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e6:	601a      	str	r2, [r3, #0]
   133e8:	f240 4324 	movw	r3, #1060	; 0x424
   133ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f0:	681b      	ldr	r3, [r3, #0]
   133f2:	4618      	mov	r0, r3
   133f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   133f8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   133fc:	f005 f83c 	bl	18478 <__aeabi_fcmple>
   13400:	4603      	mov	r3, r0
   13402:	2b00      	cmp	r3, #0
   13404:	d005      	beq.n	13412 <auto_nav+0x11b2>
   13406:	f240 4324 	movw	r3, #1060	; 0x424
   1340a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1340e:	681a      	ldr	r2, [r3, #0]
   13410:	e003      	b.n	1341a <auto_nav+0x11ba>
   13412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13416:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1341a:	f240 4324 	movw	r3, #1060	; 0x424
   1341e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13422:	601a      	str	r2, [r3, #0]
   13424:	f24b 4388 	movw	r3, #46216	; 0xb488
   13428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1342c:	681a      	ldr	r2, [r3, #0]
   1342e:	f24b 2378 	movw	r3, #45688	; 0xb278
   13432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13436:	681b      	ldr	r3, [r3, #0]
   13438:	4610      	mov	r0, r2
   1343a:	4619      	mov	r1, r3
   1343c:	f004 fd6a 	bl	17f14 <__aeabi_fsub>
   13440:	4603      	mov	r3, r0
   13442:	4618      	mov	r0, r3
   13444:	f004 f9dc 	bl	17800 <__aeabi_f2d>
   13448:	4604      	mov	r4, r0
   1344a:	460d      	mov	r5, r1
   1344c:	f24b 4384 	movw	r3, #46212	; 0xb484
   13450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13454:	681a      	ldr	r2, [r3, #0]
   13456:	f24b 2374 	movw	r3, #45684	; 0xb274
   1345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1345e:	681b      	ldr	r3, [r3, #0]
   13460:	4610      	mov	r0, r2
   13462:	4619      	mov	r1, r3
   13464:	f004 fd56 	bl	17f14 <__aeabi_fsub>
   13468:	4603      	mov	r3, r0
   1346a:	4618      	mov	r0, r3
   1346c:	f004 f9c8 	bl	17800 <__aeabi_f2d>
   13470:	4602      	mov	r2, r0
   13472:	460b      	mov	r3, r1
   13474:	4620      	mov	r0, r4
   13476:	4629      	mov	r1, r5
   13478:	f002 fa12 	bl	158a0 <pp_atan2>
   1347c:	4602      	mov	r2, r0
   1347e:	460b      	mov	r3, r1
   13480:	4610      	mov	r0, r2
   13482:	4619      	mov	r1, r3
   13484:	f004 fcf2 	bl	17e6c <__aeabi_d2f>
   13488:	4603      	mov	r3, r0
   1348a:	61fb      	str	r3, [r7, #28]
   1348c:	69f8      	ldr	r0, [r7, #28]
   1348e:	f004 f9b7 	bl	17800 <__aeabi_f2d>
   13492:	4604      	mov	r4, r0
   13494:	460d      	mov	r5, r1
   13496:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   1349a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1349e:	681b      	ldr	r3, [r3, #0]
   134a0:	4618      	mov	r0, r3
   134a2:	f04f 0100 	mov.w	r1, #0
   134a6:	f2cc 2148 	movt	r1, #49736	; 0xc248
   134aa:	f004 fe3d 	bl	18128 <__aeabi_fmul>
   134ae:	4603      	mov	r3, r0
   134b0:	4618      	mov	r0, r3
   134b2:	f004 f9a5 	bl	17800 <__aeabi_f2d>
   134b6:	4602      	mov	r2, r0
   134b8:	460b      	mov	r3, r1
   134ba:	f04f 0000 	mov.w	r0, #0
   134be:	f04f 0100 	mov.w	r1, #0
   134c2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   134c6:	f004 fb19 	bl	17afc <__aeabi_ddiv>
   134ca:	4602      	mov	r2, r0
   134cc:	460b      	mov	r3, r1
   134ce:	4620      	mov	r0, r4
   134d0:	4629      	mov	r1, r5
   134d2:	f004 f837 	bl	17544 <__adddf3>
   134d6:	4602      	mov	r2, r0
   134d8:	460b      	mov	r3, r1
   134da:	4610      	mov	r0, r2
   134dc:	4619      	mov	r1, r3
   134de:	f004 fcc5 	bl	17e6c <__aeabi_d2f>
   134e2:	4603      	mov	r3, r0
   134e4:	61bb      	str	r3, [r7, #24]
   134e6:	f24b 2374 	movw	r3, #45684	; 0xb274
   134ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ee:	681b      	ldr	r3, [r3, #0]
   134f0:	4618      	mov	r0, r3
   134f2:	f004 f985 	bl	17800 <__aeabi_f2d>
   134f6:	4604      	mov	r4, r0
   134f8:	460d      	mov	r5, r1
   134fa:	69b8      	ldr	r0, [r7, #24]
   134fc:	f004 f980 	bl	17800 <__aeabi_f2d>
   13500:	4602      	mov	r2, r0
   13502:	460b      	mov	r3, r1
   13504:	4610      	mov	r0, r2
   13506:	4619      	mov	r1, r3
   13508:	a3b1      	add	r3, pc, #708	; (adr r3, 137d0 <auto_nav+0x1570>)
   1350a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1350e:	f004 f819 	bl	17544 <__adddf3>
   13512:	4602      	mov	r2, r0
   13514:	460b      	mov	r3, r1
   13516:	4610      	mov	r0, r2
   13518:	4619      	mov	r1, r3
   1351a:	f002 fa81 	bl	15a20 <pp_sin>
   1351e:	4602      	mov	r2, r0
   13520:	460b      	mov	r3, r1
   13522:	4610      	mov	r0, r2
   13524:	4619      	mov	r1, r3
   13526:	f04f 0200 	mov.w	r2, #0
   1352a:	f04f 0300 	mov.w	r3, #0
   1352e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13532:	f004 f9b9 	bl	178a8 <__aeabi_dmul>
   13536:	4602      	mov	r2, r0
   13538:	460b      	mov	r3, r1
   1353a:	4620      	mov	r0, r4
   1353c:	4629      	mov	r1, r5
   1353e:	f004 f801 	bl	17544 <__adddf3>
   13542:	4602      	mov	r2, r0
   13544:	460b      	mov	r3, r1
   13546:	4610      	mov	r0, r2
   13548:	4619      	mov	r1, r3
   1354a:	f004 fc8f 	bl	17e6c <__aeabi_d2f>
   1354e:	4606      	mov	r6, r0
   13550:	f24b 2378 	movw	r3, #45688	; 0xb278
   13554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13558:	681b      	ldr	r3, [r3, #0]
   1355a:	4618      	mov	r0, r3
   1355c:	f004 f950 	bl	17800 <__aeabi_f2d>
   13560:	4604      	mov	r4, r0
   13562:	460d      	mov	r5, r1
   13564:	69b8      	ldr	r0, [r7, #24]
   13566:	f004 f94b 	bl	17800 <__aeabi_f2d>
   1356a:	4602      	mov	r2, r0
   1356c:	460b      	mov	r3, r1
   1356e:	4610      	mov	r0, r2
   13570:	4619      	mov	r1, r3
   13572:	f002 fa55 	bl	15a20 <pp_sin>
   13576:	4602      	mov	r2, r0
   13578:	460b      	mov	r3, r1
   1357a:	4610      	mov	r0, r2
   1357c:	4619      	mov	r1, r3
   1357e:	f04f 0200 	mov.w	r2, #0
   13582:	f04f 0300 	mov.w	r3, #0
   13586:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1358a:	f004 f98d 	bl	178a8 <__aeabi_dmul>
   1358e:	4602      	mov	r2, r0
   13590:	460b      	mov	r3, r1
   13592:	4620      	mov	r0, r4
   13594:	4629      	mov	r1, r5
   13596:	f003 ffd5 	bl	17544 <__adddf3>
   1359a:	4602      	mov	r2, r0
   1359c:	460b      	mov	r3, r1
   1359e:	4610      	mov	r0, r2
   135a0:	4619      	mov	r1, r3
   135a2:	f004 fc63 	bl	17e6c <__aeabi_d2f>
   135a6:	4603      	mov	r3, r0
   135a8:	4630      	mov	r0, r6
   135aa:	4619      	mov	r1, r3
   135ac:	f001 f81c 	bl	145e8 <fly_to_xy>
   135b0:	69b8      	ldr	r0, [r7, #24]
   135b2:	f004 f925 	bl	17800 <__aeabi_f2d>
   135b6:	4602      	mov	r2, r0
   135b8:	460b      	mov	r3, r1
   135ba:	a185      	add	r1, pc, #532	; (adr r1, 137d0 <auto_nav+0x1570>)
   135bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   135c0:	f003 ffbe 	bl	17540 <__aeabi_dsub>
   135c4:	4602      	mov	r2, r0
   135c6:	460b      	mov	r3, r1
   135c8:	4610      	mov	r0, r2
   135ca:	4619      	mov	r1, r3
   135cc:	a382      	add	r3, pc, #520	; (adr r3, 137d8 <auto_nav+0x1578>)
   135ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   135d2:	f004 fa93 	bl	17afc <__aeabi_ddiv>
   135d6:	4602      	mov	r2, r0
   135d8:	460b      	mov	r3, r1
   135da:	4610      	mov	r0, r2
   135dc:	4619      	mov	r1, r3
   135de:	f04f 0200 	mov.w	r2, #0
   135e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   135e6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   135ea:	f004 f95d 	bl	178a8 <__aeabi_dmul>
   135ee:	4602      	mov	r2, r0
   135f0:	460b      	mov	r3, r1
   135f2:	4610      	mov	r0, r2
   135f4:	4619      	mov	r1, r3
   135f6:	f004 fc39 	bl	17e6c <__aeabi_d2f>
   135fa:	4602      	mov	r2, r0
   135fc:	f24b 2344 	movw	r3, #45636	; 0xb244
   13600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13604:	601a      	str	r2, [r3, #0]
   13606:	e012      	b.n	1362e <auto_nav+0x13ce>
   13608:	f24b 2344 	movw	r3, #45636	; 0xb244
   1360c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13610:	681b      	ldr	r3, [r3, #0]
   13612:	4618      	mov	r0, r3
   13614:	f04f 0100 	mov.w	r1, #0
   13618:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1361c:	f004 fc7c 	bl	17f18 <__addsf3>
   13620:	4603      	mov	r3, r0
   13622:	461a      	mov	r2, r3
   13624:	f24b 2344 	movw	r3, #45636	; 0xb244
   13628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1362c:	601a      	str	r2, [r3, #0]
   1362e:	f24b 2344 	movw	r3, #45636	; 0xb244
   13632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13636:	681b      	ldr	r3, [r3, #0]
   13638:	4618      	mov	r0, r3
   1363a:	f04f 0100 	mov.w	r1, #0
   1363e:	f004 ff11 	bl	18464 <__aeabi_fcmplt>
   13642:	4603      	mov	r3, r0
   13644:	2b00      	cmp	r3, #0
   13646:	d1df      	bne.n	13608 <auto_nav+0x13a8>
   13648:	e012      	b.n	13670 <auto_nav+0x1410>
   1364a:	f24b 2344 	movw	r3, #45636	; 0xb244
   1364e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	4618      	mov	r0, r3
   13656:	f04f 0100 	mov.w	r1, #0
   1365a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1365e:	f004 fc59 	bl	17f14 <__aeabi_fsub>
   13662:	4603      	mov	r3, r0
   13664:	461a      	mov	r2, r3
   13666:	f24b 2344 	movw	r3, #45636	; 0xb244
   1366a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1366e:	601a      	str	r2, [r3, #0]
   13670:	f24b 2344 	movw	r3, #45636	; 0xb244
   13674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13678:	681b      	ldr	r3, [r3, #0]
   1367a:	4618      	mov	r0, r3
   1367c:	f04f 0100 	mov.w	r1, #0
   13680:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13684:	f004 ff02 	bl	1848c <__aeabi_fcmpge>
   13688:	4603      	mov	r3, r0
   1368a:	2b00      	cmp	r3, #0
   1368c:	d1dd      	bne.n	1364a <auto_nav+0x13ea>
        return;
   1368e:	f000 beb9 	b.w	14404 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13692:	f24b 2328 	movw	r3, #45608	; 0xb228
   13696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	2b01      	cmp	r3, #1
   1369e:	f040 86b1 	bne.w	14404 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   136a2:	f24b 2328 	movw	r3, #45608	; 0xb228
   136a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136aa:	2201      	movs	r2, #1
   136ac:	701a      	strb	r2, [r3, #0]
        NextBlock()
   136ae:	f24b 2329 	movw	r3, #45609	; 0xb229
   136b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136b6:	781b      	ldrb	r3, [r3, #0]
   136b8:	3301      	adds	r3, #1
   136ba:	b2da      	uxtb	r2, r3
   136bc:	f24b 2329 	movw	r3, #45609	; 0xb229
   136c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c4:	701a      	strb	r2, [r3, #0]
   136c6:	f24b 2328 	movw	r3, #45608	; 0xb228
   136ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ce:	2200      	movs	r2, #0
   136d0:	701a      	strb	r2, [r3, #0]
   136d2:	f24b 233e 	movw	r3, #45630	; 0xb23e
   136d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136da:	2200      	movs	r2, #0
   136dc:	801a      	strh	r2, [r3, #0]
   136de:	f24b 4384 	movw	r3, #46212	; 0xb484
   136e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e6:	681a      	ldr	r2, [r3, #0]
   136e8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   136ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f0:	601a      	str	r2, [r3, #0]
   136f2:	f24b 4388 	movw	r3, #46216	; 0xb488
   136f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fa:	681a      	ldr	r2, [r3, #0]
   136fc:	f24b 2330 	movw	r3, #45616	; 0xb230
   13700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13704:	601a      	str	r2, [r3, #0]
   13706:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370e:	2200      	movs	r2, #0
   13710:	801a      	strh	r2, [r3, #0]
   13712:	f24b 2340 	movw	r3, #45632	; 0xb240
   13716:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1371a:	f04f 0200 	mov.w	r2, #0
   1371e:	601a      	str	r2, [r3, #0]
   13720:	f000 be70 	b.w	14404 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13724:	f24b 2329 	movw	r3, #45609	; 0xb229
   13728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1372c:	781b      	ldrb	r3, [r3, #0]
   1372e:	2b04      	cmp	r3, #4
   13730:	f040 8202 	bne.w	13b38 <auto_nav+0x18d8>
{
    nav_block = 4;
   13734:	f24b 2329 	movw	r3, #45609	; 0xb229
   13738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1373c:	2204      	movs	r2, #4
   1373e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13740:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13748:	781b      	ldrb	r3, [r3, #0]
   1374a:	2b00      	cmp	r3, #0
   1374c:	d007      	beq.n	1375e <auto_nav+0x14fe>
   1374e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13756:	2200      	movs	r2, #0
   13758:	701a      	strb	r2, [r3, #0]
   1375a:	2301      	movs	r3, #1
   1375c:	e000      	b.n	13760 <auto_nav+0x1500>
   1375e:	2300      	movs	r3, #0
   13760:	2b00      	cmp	r3, #0
   13762:	d03d      	beq.n	137e0 <auto_nav+0x1580>
   13764:	f24b 2329 	movw	r3, #45609	; 0xb229
   13768:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1376c:	2205      	movs	r2, #5
   1376e:	701a      	strb	r2, [r3, #0]
   13770:	f24b 2328 	movw	r3, #45608	; 0xb228
   13774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13778:	2200      	movs	r2, #0
   1377a:	701a      	strb	r2, [r3, #0]
   1377c:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13784:	2200      	movs	r2, #0
   13786:	801a      	strh	r2, [r3, #0]
   13788:	f24b 4384 	movw	r3, #46212	; 0xb484
   1378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13790:	681a      	ldr	r2, [r3, #0]
   13792:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1379a:	601a      	str	r2, [r3, #0]
   1379c:	f24b 4388 	movw	r3, #46216	; 0xb488
   137a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a4:	681a      	ldr	r2, [r3, #0]
   137a6:	f24b 2330 	movw	r3, #45616	; 0xb230
   137aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ae:	601a      	str	r2, [r3, #0]
   137b0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   137b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b8:	2200      	movs	r2, #0
   137ba:	801a      	strh	r2, [r3, #0]
   137bc:	f24b 2340 	movw	r3, #45632	; 0xb240
   137c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c4:	f04f 0200 	mov.w	r2, #0
   137c8:	601a      	str	r2, [r3, #0]
   137ca:	f000 be1b 	b.w	14404 <auto_nav+0x21a4>
   137ce:	bf00      	nop
   137d0:	54442d18 	.word	0x54442d18
   137d4:	3ff921fb 	.word	0x3ff921fb
   137d8:	54442d18 	.word	0x54442d18
   137dc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   137e0:	f24b 2328 	movw	r3, #45608	; 0xb228
   137e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e8:	781b      	ldrb	r3, [r3, #0]
   137ea:	2b00      	cmp	r3, #0
   137ec:	f040 815b 	bne.w	13aa6 <auto_nav+0x1846>
    {
        nav_stage = 0;
   137f0:	f24b 2328 	movw	r3, #45608	; 0xb228
   137f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f8:	2200      	movs	r2, #0
   137fa:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   137fc:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   13800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13804:	2200      	movs	r2, #0
   13806:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13808:	f24b 2354 	movw	r3, #45652	; 0xb254
   1380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13810:	f04f 0200 	mov.w	r2, #0
   13814:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13816:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   1381a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1381e:	2203      	movs	r2, #3
   13820:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13822:	f240 4328 	movw	r3, #1064	; 0x428
   13826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1382a:	689a      	ldr	r2, [r3, #8]
   1382c:	f240 4324 	movw	r3, #1060	; 0x424
   13830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13834:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13836:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1383e:	f04f 0200 	mov.w	r2, #0
   13842:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13844:	f24b 4388 	movw	r3, #46216	; 0xb488
   13848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384c:	681a      	ldr	r2, [r3, #0]
   1384e:	f240 4328 	movw	r3, #1064	; 0x428
   13852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13856:	685b      	ldr	r3, [r3, #4]
   13858:	4610      	mov	r0, r2
   1385a:	4619      	mov	r1, r3
   1385c:	f004 fb5a 	bl	17f14 <__aeabi_fsub>
   13860:	4603      	mov	r3, r0
   13862:	4618      	mov	r0, r3
   13864:	f003 ffcc 	bl	17800 <__aeabi_f2d>
   13868:	4604      	mov	r4, r0
   1386a:	460d      	mov	r5, r1
   1386c:	f24b 4384 	movw	r3, #46212	; 0xb484
   13870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13874:	681a      	ldr	r2, [r3, #0]
   13876:	f240 4328 	movw	r3, #1064	; 0x428
   1387a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1387e:	681b      	ldr	r3, [r3, #0]
   13880:	4610      	mov	r0, r2
   13882:	4619      	mov	r1, r3
   13884:	f004 fb46 	bl	17f14 <__aeabi_fsub>
   13888:	4603      	mov	r3, r0
   1388a:	4618      	mov	r0, r3
   1388c:	f003 ffb8 	bl	17800 <__aeabi_f2d>
   13890:	4602      	mov	r2, r0
   13892:	460b      	mov	r3, r1
   13894:	4620      	mov	r0, r4
   13896:	4629      	mov	r1, r5
   13898:	f002 f802 	bl	158a0 <pp_atan2>
   1389c:	4602      	mov	r2, r0
   1389e:	460b      	mov	r3, r1
   138a0:	4610      	mov	r0, r2
   138a2:	4619      	mov	r1, r3
   138a4:	f004 fae2 	bl	17e6c <__aeabi_d2f>
   138a8:	4603      	mov	r3, r0
   138aa:	617b      	str	r3, [r7, #20]
   138ac:	6978      	ldr	r0, [r7, #20]
   138ae:	f003 ffa7 	bl	17800 <__aeabi_f2d>
   138b2:	4604      	mov	r4, r0
   138b4:	460d      	mov	r5, r1
   138b6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   138ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138be:	681b      	ldr	r3, [r3, #0]
   138c0:	4618      	mov	r0, r3
   138c2:	f04f 0100 	mov.w	r1, #0
   138c6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   138ca:	f004 fc2d 	bl	18128 <__aeabi_fmul>
   138ce:	4603      	mov	r3, r0
   138d0:	4618      	mov	r0, r3
   138d2:	f003 ff95 	bl	17800 <__aeabi_f2d>
   138d6:	4602      	mov	r2, r0
   138d8:	460b      	mov	r3, r1
   138da:	f04f 0000 	mov.w	r0, #0
   138de:	f04f 0100 	mov.w	r1, #0
   138e2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   138e6:	f004 f909 	bl	17afc <__aeabi_ddiv>
   138ea:	4602      	mov	r2, r0
   138ec:	460b      	mov	r3, r1
   138ee:	4620      	mov	r0, r4
   138f0:	4629      	mov	r1, r5
   138f2:	f003 fe27 	bl	17544 <__adddf3>
   138f6:	4602      	mov	r2, r0
   138f8:	460b      	mov	r3, r1
   138fa:	4610      	mov	r0, r2
   138fc:	4619      	mov	r1, r3
   138fe:	f004 fab5 	bl	17e6c <__aeabi_d2f>
   13902:	4603      	mov	r3, r0
   13904:	613b      	str	r3, [r7, #16]
   13906:	f240 4328 	movw	r3, #1064	; 0x428
   1390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390e:	681b      	ldr	r3, [r3, #0]
   13910:	4618      	mov	r0, r3
   13912:	f003 ff75 	bl	17800 <__aeabi_f2d>
   13916:	4604      	mov	r4, r0
   13918:	460d      	mov	r5, r1
   1391a:	6938      	ldr	r0, [r7, #16]
   1391c:	f003 ff70 	bl	17800 <__aeabi_f2d>
   13920:	4602      	mov	r2, r0
   13922:	460b      	mov	r3, r1
   13924:	4610      	mov	r0, r2
   13926:	4619      	mov	r1, r3
   13928:	a3af      	add	r3, pc, #700	; (adr r3, 13be8 <auto_nav+0x1988>)
   1392a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1392e:	f003 fe09 	bl	17544 <__adddf3>
   13932:	4602      	mov	r2, r0
   13934:	460b      	mov	r3, r1
   13936:	4610      	mov	r0, r2
   13938:	4619      	mov	r1, r3
   1393a:	f002 f871 	bl	15a20 <pp_sin>
   1393e:	4602      	mov	r2, r0
   13940:	460b      	mov	r3, r1
   13942:	4610      	mov	r0, r2
   13944:	4619      	mov	r1, r3
   13946:	a3aa      	add	r3, pc, #680	; (adr r3, 13bf0 <auto_nav+0x1990>)
   13948:	e9d3 2300 	ldrd	r2, r3, [r3]
   1394c:	f003 ffac 	bl	178a8 <__aeabi_dmul>
   13950:	4602      	mov	r2, r0
   13952:	460b      	mov	r3, r1
   13954:	4620      	mov	r0, r4
   13956:	4629      	mov	r1, r5
   13958:	f003 fdf4 	bl	17544 <__adddf3>
   1395c:	4602      	mov	r2, r0
   1395e:	460b      	mov	r3, r1
   13960:	4610      	mov	r0, r2
   13962:	4619      	mov	r1, r3
   13964:	f004 fa82 	bl	17e6c <__aeabi_d2f>
   13968:	4606      	mov	r6, r0
   1396a:	f240 4328 	movw	r3, #1064	; 0x428
   1396e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13972:	685b      	ldr	r3, [r3, #4]
   13974:	4618      	mov	r0, r3
   13976:	f003 ff43 	bl	17800 <__aeabi_f2d>
   1397a:	4604      	mov	r4, r0
   1397c:	460d      	mov	r5, r1
   1397e:	6938      	ldr	r0, [r7, #16]
   13980:	f003 ff3e 	bl	17800 <__aeabi_f2d>
   13984:	4602      	mov	r2, r0
   13986:	460b      	mov	r3, r1
   13988:	4610      	mov	r0, r2
   1398a:	4619      	mov	r1, r3
   1398c:	f002 f848 	bl	15a20 <pp_sin>
   13990:	4602      	mov	r2, r0
   13992:	460b      	mov	r3, r1
   13994:	4610      	mov	r0, r2
   13996:	4619      	mov	r1, r3
   13998:	a395      	add	r3, pc, #596	; (adr r3, 13bf0 <auto_nav+0x1990>)
   1399a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1399e:	f003 ff83 	bl	178a8 <__aeabi_dmul>
   139a2:	4602      	mov	r2, r0
   139a4:	460b      	mov	r3, r1
   139a6:	4620      	mov	r0, r4
   139a8:	4629      	mov	r1, r5
   139aa:	f003 fdcb 	bl	17544 <__adddf3>
   139ae:	4602      	mov	r2, r0
   139b0:	460b      	mov	r3, r1
   139b2:	4610      	mov	r0, r2
   139b4:	4619      	mov	r1, r3
   139b6:	f004 fa59 	bl	17e6c <__aeabi_d2f>
   139ba:	4603      	mov	r3, r0
   139bc:	4630      	mov	r0, r6
   139be:	4619      	mov	r1, r3
   139c0:	f000 fe12 	bl	145e8 <fly_to_xy>
   139c4:	6938      	ldr	r0, [r7, #16]
   139c6:	f003 ff1b 	bl	17800 <__aeabi_f2d>
   139ca:	4602      	mov	r2, r0
   139cc:	460b      	mov	r3, r1
   139ce:	a186      	add	r1, pc, #536	; (adr r1, 13be8 <auto_nav+0x1988>)
   139d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   139d4:	f003 fdb4 	bl	17540 <__aeabi_dsub>
   139d8:	4602      	mov	r2, r0
   139da:	460b      	mov	r3, r1
   139dc:	4610      	mov	r0, r2
   139de:	4619      	mov	r1, r3
   139e0:	a385      	add	r3, pc, #532	; (adr r3, 13bf8 <auto_nav+0x1998>)
   139e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   139e6:	f004 f889 	bl	17afc <__aeabi_ddiv>
   139ea:	4602      	mov	r2, r0
   139ec:	460b      	mov	r3, r1
   139ee:	4610      	mov	r0, r2
   139f0:	4619      	mov	r1, r3
   139f2:	f04f 0200 	mov.w	r2, #0
   139f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139fa:	f2c4 0366 	movt	r3, #16486	; 0x4066
   139fe:	f003 ff53 	bl	178a8 <__aeabi_dmul>
   13a02:	4602      	mov	r2, r0
   13a04:	460b      	mov	r3, r1
   13a06:	4610      	mov	r0, r2
   13a08:	4619      	mov	r1, r3
   13a0a:	f004 fa2f 	bl	17e6c <__aeabi_d2f>
   13a0e:	4602      	mov	r2, r0
   13a10:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a18:	601a      	str	r2, [r3, #0]
   13a1a:	e012      	b.n	13a42 <auto_nav+0x17e2>
   13a1c:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a24:	681b      	ldr	r3, [r3, #0]
   13a26:	4618      	mov	r0, r3
   13a28:	f04f 0100 	mov.w	r1, #0
   13a2c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a30:	f004 fa72 	bl	17f18 <__addsf3>
   13a34:	4603      	mov	r3, r0
   13a36:	461a      	mov	r2, r3
   13a38:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a40:	601a      	str	r2, [r3, #0]
   13a42:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4a:	681b      	ldr	r3, [r3, #0]
   13a4c:	4618      	mov	r0, r3
   13a4e:	f04f 0100 	mov.w	r1, #0
   13a52:	f004 fd07 	bl	18464 <__aeabi_fcmplt>
   13a56:	4603      	mov	r3, r0
   13a58:	2b00      	cmp	r3, #0
   13a5a:	d1df      	bne.n	13a1c <auto_nav+0x17bc>
   13a5c:	e012      	b.n	13a84 <auto_nav+0x1824>
   13a5e:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a66:	681b      	ldr	r3, [r3, #0]
   13a68:	4618      	mov	r0, r3
   13a6a:	f04f 0100 	mov.w	r1, #0
   13a6e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a72:	f004 fa4f 	bl	17f14 <__aeabi_fsub>
   13a76:	4603      	mov	r3, r0
   13a78:	461a      	mov	r2, r3
   13a7a:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a82:	601a      	str	r2, [r3, #0]
   13a84:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8c:	681b      	ldr	r3, [r3, #0]
   13a8e:	4618      	mov	r0, r3
   13a90:	f04f 0100 	mov.w	r1, #0
   13a94:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a98:	f004 fcf8 	bl	1848c <__aeabi_fcmpge>
   13a9c:	4603      	mov	r3, r0
   13a9e:	2b00      	cmp	r3, #0
   13aa0:	d1dd      	bne.n	13a5e <auto_nav+0x17fe>
        return;
   13aa2:	f000 bcaf 	b.w	14404 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13aa6:	f24b 2328 	movw	r3, #45608	; 0xb228
   13aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	2b01      	cmp	r3, #1
   13ab2:	f040 84a7 	bne.w	14404 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13ab6:	f24b 2328 	movw	r3, #45608	; 0xb228
   13aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13abe:	2201      	movs	r2, #1
   13ac0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ac2:	f24b 2329 	movw	r3, #45609	; 0xb229
   13ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aca:	781b      	ldrb	r3, [r3, #0]
   13acc:	3301      	adds	r3, #1
   13ace:	b2da      	uxtb	r2, r3
   13ad0:	f24b 2329 	movw	r3, #45609	; 0xb229
   13ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ad8:	701a      	strb	r2, [r3, #0]
   13ada:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ae2:	2200      	movs	r2, #0
   13ae4:	701a      	strb	r2, [r3, #0]
   13ae6:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aee:	2200      	movs	r2, #0
   13af0:	801a      	strh	r2, [r3, #0]
   13af2:	f24b 4384 	movw	r3, #46212	; 0xb484
   13af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13afa:	681a      	ldr	r2, [r3, #0]
   13afc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b04:	601a      	str	r2, [r3, #0]
   13b06:	f24b 4388 	movw	r3, #46216	; 0xb488
   13b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b0e:	681a      	ldr	r2, [r3, #0]
   13b10:	f24b 2330 	movw	r3, #45616	; 0xb230
   13b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b18:	601a      	str	r2, [r3, #0]
   13b1a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b22:	2200      	movs	r2, #0
   13b24:	801a      	strh	r2, [r3, #0]
   13b26:	f24b 2340 	movw	r3, #45632	; 0xb240
   13b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2e:	f04f 0200 	mov.w	r2, #0
   13b32:	601a      	str	r2, [r3, #0]
   13b34:	f000 bc66 	b.w	14404 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13b38:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b40:	781b      	ldrb	r3, [r3, #0]
   13b42:	2b05      	cmp	r3, #5
   13b44:	f040 845e 	bne.w	14404 <auto_nav+0x21a4>
{
    nav_block = 5;
   13b48:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b50:	2205      	movs	r2, #5
   13b52:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13b54:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	2b00      	cmp	r3, #0
   13b60:	d007      	beq.n	13b72 <auto_nav+0x1912>
   13b62:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6a:	2200      	movs	r2, #0
   13b6c:	701a      	strb	r2, [r3, #0]
   13b6e:	2301      	movs	r3, #1
   13b70:	e000      	b.n	13b74 <auto_nav+0x1914>
   13b72:	2300      	movs	r3, #0
   13b74:	2b00      	cmp	r3, #0
   13b76:	d043      	beq.n	13c00 <auto_nav+0x19a0>
   13b78:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b80:	2201      	movs	r2, #1
   13b82:	701a      	strb	r2, [r3, #0]
   13b84:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b8c:	2200      	movs	r2, #0
   13b8e:	701a      	strb	r2, [r3, #0]
   13b90:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b98:	2200      	movs	r2, #0
   13b9a:	801a      	strh	r2, [r3, #0]
   13b9c:	f24b 4384 	movw	r3, #46212	; 0xb484
   13ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba4:	681a      	ldr	r2, [r3, #0]
   13ba6:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bae:	601a      	str	r2, [r3, #0]
   13bb0:	f24b 4388 	movw	r3, #46216	; 0xb488
   13bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb8:	681a      	ldr	r2, [r3, #0]
   13bba:	f24b 2330 	movw	r3, #45616	; 0xb230
   13bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc2:	601a      	str	r2, [r3, #0]
   13bc4:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bcc:	2200      	movs	r2, #0
   13bce:	801a      	strh	r2, [r3, #0]
   13bd0:	f24b 2340 	movw	r3, #45632	; 0xb240
   13bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bd8:	f04f 0200 	mov.w	r2, #0
   13bdc:	601a      	str	r2, [r3, #0]
   13bde:	f000 bc11 	b.w	14404 <auto_nav+0x21a4>
   13be2:	bf00      	nop
   13be4:	f3af 8000 	nop.w
   13be8:	54442d18 	.word	0x54442d18
   13bec:	3ff921fb 	.word	0x3ff921fb
   13bf0:	00000000 	.word	0x00000000
   13bf4:	4062c000 	.word	0x4062c000
   13bf8:	54442d18 	.word	0x54442d18
   13bfc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13c00:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c08:	781b      	ldrb	r3, [r3, #0]
   13c0a:	2b00      	cmp	r3, #0
   13c0c:	d133      	bne.n	13c76 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13c0e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c16:	2200      	movs	r2, #0
   13c18:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13c1a:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c22:	781b      	ldrb	r3, [r3, #0]
   13c24:	3301      	adds	r3, #1
   13c26:	b2da      	uxtb	r2, r3
   13c28:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c30:	701a      	strb	r2, [r3, #0]
   13c32:	f24b 4384 	movw	r3, #46212	; 0xb484
   13c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c3a:	681a      	ldr	r2, [r3, #0]
   13c3c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c44:	601a      	str	r2, [r3, #0]
   13c46:	f24b 4388 	movw	r3, #46216	; 0xb488
   13c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c4e:	681a      	ldr	r2, [r3, #0]
   13c50:	f24b 2330 	movw	r3, #45616	; 0xb230
   13c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c58:	601a      	str	r2, [r3, #0]
   13c5a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c62:	2200      	movs	r2, #0
   13c64:	801a      	strh	r2, [r3, #0]
   13c66:	f24b 2340 	movw	r3, #45632	; 0xb240
   13c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c6e:	f04f 0200 	mov.w	r2, #0
   13c72:	601a      	str	r2, [r3, #0]
   13c74:	e3c6      	b.n	14404 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13c76:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c7e:	781b      	ldrb	r3, [r3, #0]
   13c80:	2b01      	cmp	r3, #1
   13c82:	f040 81b5 	bne.w	13ff0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13c86:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c8e:	2201      	movs	r2, #1
   13c90:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13c92:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   13c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c9a:	2200      	movs	r2, #0
   13c9c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13c9e:	f24b 2354 	movw	r3, #45652	; 0xb254
   13ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca6:	f04f 0200 	mov.w	r2, #0
   13caa:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13cac:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   13cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cb4:	2203      	movs	r2, #3
   13cb6:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13cb8:	f240 4328 	movw	r3, #1064	; 0x428
   13cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cc0:	695a      	ldr	r2, [r3, #20]
   13cc2:	f240 4324 	movw	r3, #1060	; 0x424
   13cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cca:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13ccc:	f24b 231c 	movw	r3, #45596	; 0xb21c
   13cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cd4:	f04f 0200 	mov.w	r2, #0
   13cd8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13cda:	f24b 4388 	movw	r3, #46216	; 0xb488
   13cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce2:	681a      	ldr	r2, [r3, #0]
   13ce4:	f240 4328 	movw	r3, #1064	; 0x428
   13ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cec:	691b      	ldr	r3, [r3, #16]
   13cee:	4610      	mov	r0, r2
   13cf0:	4619      	mov	r1, r3
   13cf2:	f004 f90f 	bl	17f14 <__aeabi_fsub>
   13cf6:	4603      	mov	r3, r0
   13cf8:	4618      	mov	r0, r3
   13cfa:	f003 fd81 	bl	17800 <__aeabi_f2d>
   13cfe:	4604      	mov	r4, r0
   13d00:	460d      	mov	r5, r1
   13d02:	f24b 4384 	movw	r3, #46212	; 0xb484
   13d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d0a:	681a      	ldr	r2, [r3, #0]
   13d0c:	f240 4328 	movw	r3, #1064	; 0x428
   13d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d14:	68db      	ldr	r3, [r3, #12]
   13d16:	4610      	mov	r0, r2
   13d18:	4619      	mov	r1, r3
   13d1a:	f004 f8fb 	bl	17f14 <__aeabi_fsub>
   13d1e:	4603      	mov	r3, r0
   13d20:	4618      	mov	r0, r3
   13d22:	f003 fd6d 	bl	17800 <__aeabi_f2d>
   13d26:	4602      	mov	r2, r0
   13d28:	460b      	mov	r3, r1
   13d2a:	4620      	mov	r0, r4
   13d2c:	4629      	mov	r1, r5
   13d2e:	f001 fdb7 	bl	158a0 <pp_atan2>
   13d32:	4602      	mov	r2, r0
   13d34:	460b      	mov	r3, r1
   13d36:	4610      	mov	r0, r2
   13d38:	4619      	mov	r1, r3
   13d3a:	f004 f897 	bl	17e6c <__aeabi_d2f>
   13d3e:	4603      	mov	r3, r0
   13d40:	60fb      	str	r3, [r7, #12]
   13d42:	68f8      	ldr	r0, [r7, #12]
   13d44:	f003 fd5c 	bl	17800 <__aeabi_f2d>
   13d48:	4604      	mov	r4, r0
   13d4a:	460d      	mov	r5, r1
   13d4c:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d54:	681b      	ldr	r3, [r3, #0]
   13d56:	4618      	mov	r0, r3
   13d58:	f04f 0100 	mov.w	r1, #0
   13d5c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13d60:	f004 f9e2 	bl	18128 <__aeabi_fmul>
   13d64:	4603      	mov	r3, r0
   13d66:	4618      	mov	r0, r3
   13d68:	f003 fd4a 	bl	17800 <__aeabi_f2d>
   13d6c:	4602      	mov	r2, r0
   13d6e:	460b      	mov	r3, r1
   13d70:	f04f 0000 	mov.w	r0, #0
   13d74:	f04f 0100 	mov.w	r1, #0
   13d78:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13d7c:	f003 febe 	bl	17afc <__aeabi_ddiv>
   13d80:	4602      	mov	r2, r0
   13d82:	460b      	mov	r3, r1
   13d84:	4620      	mov	r0, r4
   13d86:	4629      	mov	r1, r5
   13d88:	f003 fbdc 	bl	17544 <__adddf3>
   13d8c:	4602      	mov	r2, r0
   13d8e:	460b      	mov	r3, r1
   13d90:	4610      	mov	r0, r2
   13d92:	4619      	mov	r1, r3
   13d94:	f004 f86a 	bl	17e6c <__aeabi_d2f>
   13d98:	4603      	mov	r3, r0
   13d9a:	60bb      	str	r3, [r7, #8]
   13d9c:	f240 4328 	movw	r3, #1064	; 0x428
   13da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13da4:	68db      	ldr	r3, [r3, #12]
   13da6:	4618      	mov	r0, r3
   13da8:	f003 fd2a 	bl	17800 <__aeabi_f2d>
   13dac:	4604      	mov	r4, r0
   13dae:	460d      	mov	r5, r1
   13db0:	68b8      	ldr	r0, [r7, #8]
   13db2:	f003 fd25 	bl	17800 <__aeabi_f2d>
   13db6:	4602      	mov	r2, r0
   13db8:	460b      	mov	r3, r1
   13dba:	4610      	mov	r0, r2
   13dbc:	4619      	mov	r1, r3
   13dbe:	a388      	add	r3, pc, #544	; (adr r3, 13fe0 <auto_nav+0x1d80>)
   13dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dc4:	f003 fbbe 	bl	17544 <__adddf3>
   13dc8:	4602      	mov	r2, r0
   13dca:	460b      	mov	r3, r1
   13dcc:	4610      	mov	r0, r2
   13dce:	4619      	mov	r1, r3
   13dd0:	f001 fe26 	bl	15a20 <pp_sin>
   13dd4:	4602      	mov	r2, r0
   13dd6:	460b      	mov	r3, r1
   13dd8:	4610      	mov	r0, r2
   13dda:	4619      	mov	r1, r3
   13ddc:	f04f 0200 	mov.w	r2, #0
   13de0:	f04f 0300 	mov.w	r3, #0
   13de4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13de8:	f003 fd5e 	bl	178a8 <__aeabi_dmul>
   13dec:	4602      	mov	r2, r0
   13dee:	460b      	mov	r3, r1
   13df0:	4620      	mov	r0, r4
   13df2:	4629      	mov	r1, r5
   13df4:	f003 fba6 	bl	17544 <__adddf3>
   13df8:	4602      	mov	r2, r0
   13dfa:	460b      	mov	r3, r1
   13dfc:	4610      	mov	r0, r2
   13dfe:	4619      	mov	r1, r3
   13e00:	f004 f834 	bl	17e6c <__aeabi_d2f>
   13e04:	4606      	mov	r6, r0
   13e06:	f240 4328 	movw	r3, #1064	; 0x428
   13e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e0e:	691b      	ldr	r3, [r3, #16]
   13e10:	4618      	mov	r0, r3
   13e12:	f003 fcf5 	bl	17800 <__aeabi_f2d>
   13e16:	4604      	mov	r4, r0
   13e18:	460d      	mov	r5, r1
   13e1a:	68b8      	ldr	r0, [r7, #8]
   13e1c:	f003 fcf0 	bl	17800 <__aeabi_f2d>
   13e20:	4602      	mov	r2, r0
   13e22:	460b      	mov	r3, r1
   13e24:	4610      	mov	r0, r2
   13e26:	4619      	mov	r1, r3
   13e28:	f001 fdfa 	bl	15a20 <pp_sin>
   13e2c:	4602      	mov	r2, r0
   13e2e:	460b      	mov	r3, r1
   13e30:	4610      	mov	r0, r2
   13e32:	4619      	mov	r1, r3
   13e34:	f04f 0200 	mov.w	r2, #0
   13e38:	f04f 0300 	mov.w	r3, #0
   13e3c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13e40:	f003 fd32 	bl	178a8 <__aeabi_dmul>
   13e44:	4602      	mov	r2, r0
   13e46:	460b      	mov	r3, r1
   13e48:	4620      	mov	r0, r4
   13e4a:	4629      	mov	r1, r5
   13e4c:	f003 fb7a 	bl	17544 <__adddf3>
   13e50:	4602      	mov	r2, r0
   13e52:	460b      	mov	r3, r1
   13e54:	4610      	mov	r0, r2
   13e56:	4619      	mov	r1, r3
   13e58:	f004 f808 	bl	17e6c <__aeabi_d2f>
   13e5c:	4603      	mov	r3, r0
   13e5e:	4630      	mov	r0, r6
   13e60:	4619      	mov	r1, r3
   13e62:	f000 fbc1 	bl	145e8 <fly_to_xy>
   13e66:	68b8      	ldr	r0, [r7, #8]
   13e68:	f003 fcca 	bl	17800 <__aeabi_f2d>
   13e6c:	4602      	mov	r2, r0
   13e6e:	460b      	mov	r3, r1
   13e70:	a15b      	add	r1, pc, #364	; (adr r1, 13fe0 <auto_nav+0x1d80>)
   13e72:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e76:	f003 fb63 	bl	17540 <__aeabi_dsub>
   13e7a:	4602      	mov	r2, r0
   13e7c:	460b      	mov	r3, r1
   13e7e:	4610      	mov	r0, r2
   13e80:	4619      	mov	r1, r3
   13e82:	a359      	add	r3, pc, #356	; (adr r3, 13fe8 <auto_nav+0x1d88>)
   13e84:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e88:	f003 fe38 	bl	17afc <__aeabi_ddiv>
   13e8c:	4602      	mov	r2, r0
   13e8e:	460b      	mov	r3, r1
   13e90:	4610      	mov	r0, r2
   13e92:	4619      	mov	r1, r3
   13e94:	f04f 0200 	mov.w	r2, #0
   13e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13e9c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13ea0:	f003 fd02 	bl	178a8 <__aeabi_dmul>
   13ea4:	4602      	mov	r2, r0
   13ea6:	460b      	mov	r3, r1
   13ea8:	4610      	mov	r0, r2
   13eaa:	4619      	mov	r1, r3
   13eac:	f003 ffde 	bl	17e6c <__aeabi_d2f>
   13eb0:	4602      	mov	r2, r0
   13eb2:	f24b 2344 	movw	r3, #45636	; 0xb244
   13eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eba:	601a      	str	r2, [r3, #0]
   13ebc:	e012      	b.n	13ee4 <auto_nav+0x1c84>
   13ebe:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ec6:	681b      	ldr	r3, [r3, #0]
   13ec8:	4618      	mov	r0, r3
   13eca:	f04f 0100 	mov.w	r1, #0
   13ece:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ed2:	f004 f821 	bl	17f18 <__addsf3>
   13ed6:	4603      	mov	r3, r0
   13ed8:	461a      	mov	r2, r3
   13eda:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ee2:	601a      	str	r2, [r3, #0]
   13ee4:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eec:	681b      	ldr	r3, [r3, #0]
   13eee:	4618      	mov	r0, r3
   13ef0:	f04f 0100 	mov.w	r1, #0
   13ef4:	f004 fab6 	bl	18464 <__aeabi_fcmplt>
   13ef8:	4603      	mov	r3, r0
   13efa:	2b00      	cmp	r3, #0
   13efc:	d1df      	bne.n	13ebe <auto_nav+0x1c5e>
   13efe:	e012      	b.n	13f26 <auto_nav+0x1cc6>
   13f00:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f08:	681b      	ldr	r3, [r3, #0]
   13f0a:	4618      	mov	r0, r3
   13f0c:	f04f 0100 	mov.w	r1, #0
   13f10:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f14:	f003 fffe 	bl	17f14 <__aeabi_fsub>
   13f18:	4603      	mov	r3, r0
   13f1a:	461a      	mov	r2, r3
   13f1c:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f24:	601a      	str	r2, [r3, #0]
   13f26:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f2e:	681b      	ldr	r3, [r3, #0]
   13f30:	4618      	mov	r0, r3
   13f32:	f04f 0100 	mov.w	r1, #0
   13f36:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f3a:	f004 faa7 	bl	1848c <__aeabi_fcmpge>
   13f3e:	4603      	mov	r3, r0
   13f40:	2b00      	cmp	r3, #0
   13f42:	d1dd      	bne.n	13f00 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13f44:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f4c:	681b      	ldr	r3, [r3, #0]
   13f4e:	4618      	mov	r0, r3
   13f50:	f04f 0100 	mov.w	r1, #0
   13f54:	f004 faa4 	bl	184a0 <__aeabi_fcmpgt>
   13f58:	4603      	mov	r3, r0
   13f5a:	2b00      	cmp	r3, #0
   13f5c:	d100      	bne.n	13f60 <auto_nav+0x1d00>
        return;
   13f5e:	e251      	b.n	14404 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13f60:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f68:	681b      	ldr	r3, [r3, #0]
   13f6a:	4618      	mov	r0, r3
   13f6c:	f04f 0100 	mov.w	r1, #0
   13f70:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13f74:	f004 fa76 	bl	18464 <__aeabi_fcmplt>
   13f78:	4603      	mov	r3, r0
   13f7a:	2b00      	cmp	r3, #0
   13f7c:	d100      	bne.n	13f80 <auto_nav+0x1d20>
        return;
   13f7e:	e241      	b.n	14404 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13f80:	f24b 2328 	movw	r3, #45608	; 0xb228
   13f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f88:	781b      	ldrb	r3, [r3, #0]
   13f8a:	3301      	adds	r3, #1
   13f8c:	b2da      	uxtb	r2, r3
   13f8e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f96:	701a      	strb	r2, [r3, #0]
   13f98:	f24b 4384 	movw	r3, #46212	; 0xb484
   13f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fa0:	681a      	ldr	r2, [r3, #0]
   13fa2:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13faa:	601a      	str	r2, [r3, #0]
   13fac:	f24b 4388 	movw	r3, #46216	; 0xb488
   13fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fb4:	681a      	ldr	r2, [r3, #0]
   13fb6:	f24b 2330 	movw	r3, #45616	; 0xb230
   13fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fbe:	601a      	str	r2, [r3, #0]
   13fc0:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc8:	2200      	movs	r2, #0
   13fca:	801a      	strh	r2, [r3, #0]
   13fcc:	f24b 2340 	movw	r3, #45632	; 0xb240
   13fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd4:	f04f 0200 	mov.w	r2, #0
   13fd8:	601a      	str	r2, [r3, #0]
   13fda:	e213      	b.n	14404 <auto_nav+0x21a4>
   13fdc:	f3af 8000 	nop.w
   13fe0:	54442d18 	.word	0x54442d18
   13fe4:	3ff921fb 	.word	0x3ff921fb
   13fe8:	54442d18 	.word	0x54442d18
   13fec:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13ff0:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff8:	781b      	ldrb	r3, [r3, #0]
   13ffa:	2b02      	cmp	r3, #2
   13ffc:	f040 81ad 	bne.w	1435a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14000:	f24b 2328 	movw	r3, #45608	; 0xb228
   14004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14008:	2202      	movs	r2, #2
   1400a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   1400c:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	2200      	movs	r2, #0
   14016:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14018:	f24b 2354 	movw	r3, #45652	; 0xb254
   1401c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14020:	f04f 0200 	mov.w	r2, #0
   14024:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14026:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   1402a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1402e:	2203      	movs	r2, #3
   14030:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14032:	f240 4328 	movw	r3, #1064	; 0x428
   14036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1403c:	f240 4324 	movw	r3, #1060	; 0x424
   14040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14044:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14046:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1404a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1404e:	f04f 0200 	mov.w	r2, #0
   14052:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14054:	f24b 4388 	movw	r3, #46216	; 0xb488
   14058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1405c:	681a      	ldr	r2, [r3, #0]
   1405e:	f240 4328 	movw	r3, #1064	; 0x428
   14062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14068:	4610      	mov	r0, r2
   1406a:	4619      	mov	r1, r3
   1406c:	f003 ff52 	bl	17f14 <__aeabi_fsub>
   14070:	4603      	mov	r3, r0
   14072:	4618      	mov	r0, r3
   14074:	f003 fbc4 	bl	17800 <__aeabi_f2d>
   14078:	4604      	mov	r4, r0
   1407a:	460d      	mov	r5, r1
   1407c:	f24b 4384 	movw	r3, #46212	; 0xb484
   14080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14084:	681a      	ldr	r2, [r3, #0]
   14086:	f240 4328 	movw	r3, #1064	; 0x428
   1408a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14090:	4610      	mov	r0, r2
   14092:	4619      	mov	r1, r3
   14094:	f003 ff3e 	bl	17f14 <__aeabi_fsub>
   14098:	4603      	mov	r3, r0
   1409a:	4618      	mov	r0, r3
   1409c:	f003 fbb0 	bl	17800 <__aeabi_f2d>
   140a0:	4602      	mov	r2, r0
   140a2:	460b      	mov	r3, r1
   140a4:	4620      	mov	r0, r4
   140a6:	4629      	mov	r1, r5
   140a8:	f001 fbfa 	bl	158a0 <pp_atan2>
   140ac:	4602      	mov	r2, r0
   140ae:	460b      	mov	r3, r1
   140b0:	4610      	mov	r0, r2
   140b2:	4619      	mov	r1, r3
   140b4:	f003 feda 	bl	17e6c <__aeabi_d2f>
   140b8:	4603      	mov	r3, r0
   140ba:	607b      	str	r3, [r7, #4]
   140bc:	6878      	ldr	r0, [r7, #4]
   140be:	f003 fb9f 	bl	17800 <__aeabi_f2d>
   140c2:	4604      	mov	r4, r0
   140c4:	460d      	mov	r5, r1
   140c6:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   140ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ce:	681b      	ldr	r3, [r3, #0]
   140d0:	4618      	mov	r0, r3
   140d2:	f04f 0100 	mov.w	r1, #0
   140d6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   140da:	f004 f825 	bl	18128 <__aeabi_fmul>
   140de:	4603      	mov	r3, r0
   140e0:	4618      	mov	r0, r3
   140e2:	f003 fb8d 	bl	17800 <__aeabi_f2d>
   140e6:	4602      	mov	r2, r0
   140e8:	460b      	mov	r3, r1
   140ea:	f04f 0000 	mov.w	r0, #0
   140ee:	f04f 0100 	mov.w	r1, #0
   140f2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   140f6:	f003 fd01 	bl	17afc <__aeabi_ddiv>
   140fa:	4602      	mov	r2, r0
   140fc:	460b      	mov	r3, r1
   140fe:	4620      	mov	r0, r4
   14100:	4629      	mov	r1, r5
   14102:	f003 fa1f 	bl	17544 <__adddf3>
   14106:	4602      	mov	r2, r0
   14108:	460b      	mov	r3, r1
   1410a:	4610      	mov	r0, r2
   1410c:	4619      	mov	r1, r3
   1410e:	f003 fead 	bl	17e6c <__aeabi_d2f>
   14112:	4603      	mov	r3, r0
   14114:	603b      	str	r3, [r7, #0]
   14116:	f240 4328 	movw	r3, #1064	; 0x428
   1411a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14120:	4618      	mov	r0, r3
   14122:	f003 fb6d 	bl	17800 <__aeabi_f2d>
   14126:	4604      	mov	r4, r0
   14128:	460d      	mov	r5, r1
   1412a:	6838      	ldr	r0, [r7, #0]
   1412c:	f003 fb68 	bl	17800 <__aeabi_f2d>
   14130:	4602      	mov	r2, r0
   14132:	460b      	mov	r3, r1
   14134:	4610      	mov	r0, r2
   14136:	4619      	mov	r1, r3
   14138:	a3b5      	add	r3, pc, #724	; (adr r3, 14410 <auto_nav+0x21b0>)
   1413a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1413e:	f003 fa01 	bl	17544 <__adddf3>
   14142:	4602      	mov	r2, r0
   14144:	460b      	mov	r3, r1
   14146:	4610      	mov	r0, r2
   14148:	4619      	mov	r1, r3
   1414a:	f001 fc69 	bl	15a20 <pp_sin>
   1414e:	4602      	mov	r2, r0
   14150:	460b      	mov	r3, r1
   14152:	4610      	mov	r0, r2
   14154:	4619      	mov	r1, r3
   14156:	f04f 0200 	mov.w	r2, #0
   1415a:	f04f 0300 	mov.w	r3, #0
   1415e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14162:	f003 fba1 	bl	178a8 <__aeabi_dmul>
   14166:	4602      	mov	r2, r0
   14168:	460b      	mov	r3, r1
   1416a:	4620      	mov	r0, r4
   1416c:	4629      	mov	r1, r5
   1416e:	f003 f9e9 	bl	17544 <__adddf3>
   14172:	4602      	mov	r2, r0
   14174:	460b      	mov	r3, r1
   14176:	4610      	mov	r0, r2
   14178:	4619      	mov	r1, r3
   1417a:	f003 fe77 	bl	17e6c <__aeabi_d2f>
   1417e:	4606      	mov	r6, r0
   14180:	f240 4328 	movw	r3, #1064	; 0x428
   14184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1418a:	4618      	mov	r0, r3
   1418c:	f003 fb38 	bl	17800 <__aeabi_f2d>
   14190:	4604      	mov	r4, r0
   14192:	460d      	mov	r5, r1
   14194:	6838      	ldr	r0, [r7, #0]
   14196:	f003 fb33 	bl	17800 <__aeabi_f2d>
   1419a:	4602      	mov	r2, r0
   1419c:	460b      	mov	r3, r1
   1419e:	4610      	mov	r0, r2
   141a0:	4619      	mov	r1, r3
   141a2:	f001 fc3d 	bl	15a20 <pp_sin>
   141a6:	4602      	mov	r2, r0
   141a8:	460b      	mov	r3, r1
   141aa:	4610      	mov	r0, r2
   141ac:	4619      	mov	r1, r3
   141ae:	f04f 0200 	mov.w	r2, #0
   141b2:	f04f 0300 	mov.w	r3, #0
   141b6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141ba:	f003 fb75 	bl	178a8 <__aeabi_dmul>
   141be:	4602      	mov	r2, r0
   141c0:	460b      	mov	r3, r1
   141c2:	4620      	mov	r0, r4
   141c4:	4629      	mov	r1, r5
   141c6:	f003 f9bd 	bl	17544 <__adddf3>
   141ca:	4602      	mov	r2, r0
   141cc:	460b      	mov	r3, r1
   141ce:	4610      	mov	r0, r2
   141d0:	4619      	mov	r1, r3
   141d2:	f003 fe4b 	bl	17e6c <__aeabi_d2f>
   141d6:	4603      	mov	r3, r0
   141d8:	4630      	mov	r0, r6
   141da:	4619      	mov	r1, r3
   141dc:	f000 fa04 	bl	145e8 <fly_to_xy>
   141e0:	6838      	ldr	r0, [r7, #0]
   141e2:	f003 fb0d 	bl	17800 <__aeabi_f2d>
   141e6:	4602      	mov	r2, r0
   141e8:	460b      	mov	r3, r1
   141ea:	a189      	add	r1, pc, #548	; (adr r1, 14410 <auto_nav+0x21b0>)
   141ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   141f0:	f003 f9a6 	bl	17540 <__aeabi_dsub>
   141f4:	4602      	mov	r2, r0
   141f6:	460b      	mov	r3, r1
   141f8:	4610      	mov	r0, r2
   141fa:	4619      	mov	r1, r3
   141fc:	a386      	add	r3, pc, #536	; (adr r3, 14418 <auto_nav+0x21b8>)
   141fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14202:	f003 fc7b 	bl	17afc <__aeabi_ddiv>
   14206:	4602      	mov	r2, r0
   14208:	460b      	mov	r3, r1
   1420a:	4610      	mov	r0, r2
   1420c:	4619      	mov	r1, r3
   1420e:	f04f 0200 	mov.w	r2, #0
   14212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14216:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1421a:	f003 fb45 	bl	178a8 <__aeabi_dmul>
   1421e:	4602      	mov	r2, r0
   14220:	460b      	mov	r3, r1
   14222:	4610      	mov	r0, r2
   14224:	4619      	mov	r1, r3
   14226:	f003 fe21 	bl	17e6c <__aeabi_d2f>
   1422a:	4602      	mov	r2, r0
   1422c:	f24b 2344 	movw	r3, #45636	; 0xb244
   14230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14234:	601a      	str	r2, [r3, #0]
   14236:	e012      	b.n	1425e <auto_nav+0x1ffe>
   14238:	f24b 2344 	movw	r3, #45636	; 0xb244
   1423c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14240:	681b      	ldr	r3, [r3, #0]
   14242:	4618      	mov	r0, r3
   14244:	f04f 0100 	mov.w	r1, #0
   14248:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1424c:	f003 fe64 	bl	17f18 <__addsf3>
   14250:	4603      	mov	r3, r0
   14252:	461a      	mov	r2, r3
   14254:	f24b 2344 	movw	r3, #45636	; 0xb244
   14258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1425c:	601a      	str	r2, [r3, #0]
   1425e:	f24b 2344 	movw	r3, #45636	; 0xb244
   14262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14266:	681b      	ldr	r3, [r3, #0]
   14268:	4618      	mov	r0, r3
   1426a:	f04f 0100 	mov.w	r1, #0
   1426e:	f004 f8f9 	bl	18464 <__aeabi_fcmplt>
   14272:	4603      	mov	r3, r0
   14274:	2b00      	cmp	r3, #0
   14276:	d1df      	bne.n	14238 <auto_nav+0x1fd8>
   14278:	e012      	b.n	142a0 <auto_nav+0x2040>
   1427a:	f24b 2344 	movw	r3, #45636	; 0xb244
   1427e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14282:	681b      	ldr	r3, [r3, #0]
   14284:	4618      	mov	r0, r3
   14286:	f04f 0100 	mov.w	r1, #0
   1428a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1428e:	f003 fe41 	bl	17f14 <__aeabi_fsub>
   14292:	4603      	mov	r3, r0
   14294:	461a      	mov	r2, r3
   14296:	f24b 2344 	movw	r3, #45636	; 0xb244
   1429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1429e:	601a      	str	r2, [r3, #0]
   142a0:	f24b 2344 	movw	r3, #45636	; 0xb244
   142a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	4618      	mov	r0, r3
   142ac:	f04f 0100 	mov.w	r1, #0
   142b0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142b4:	f004 f8ea 	bl	1848c <__aeabi_fcmpge>
   142b8:	4603      	mov	r3, r0
   142ba:	2b00      	cmp	r3, #0
   142bc:	d1dd      	bne.n	1427a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   142be:	f24b 2344 	movw	r3, #45636	; 0xb244
   142c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142c6:	681b      	ldr	r3, [r3, #0]
   142c8:	4618      	mov	r0, r3
   142ca:	f04f 0100 	mov.w	r1, #0
   142ce:	f2c4 3134 	movt	r1, #17204	; 0x4334
   142d2:	f004 f8e5 	bl	184a0 <__aeabi_fcmpgt>
   142d6:	4603      	mov	r3, r0
   142d8:	2b00      	cmp	r3, #0
   142da:	d100      	bne.n	142de <auto_nav+0x207e>
          return;
   142dc:	e092      	b.n	14404 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   142de:	f24b 2344 	movw	r3, #45636	; 0xb244
   142e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e6:	681b      	ldr	r3, [r3, #0]
   142e8:	4618      	mov	r0, r3
   142ea:	f04f 0100 	mov.w	r1, #0
   142ee:	f2c4 313e 	movt	r1, #17214	; 0x433e
   142f2:	f004 f8b7 	bl	18464 <__aeabi_fcmplt>
   142f6:	4603      	mov	r3, r0
   142f8:	2b00      	cmp	r3, #0
   142fa:	d100      	bne.n	142fe <auto_nav+0x209e>
          return;
   142fc:	e082      	b.n	14404 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   142fe:	f24b 2328 	movw	r3, #45608	; 0xb228
   14302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14306:	781b      	ldrb	r3, [r3, #0]
   14308:	3301      	adds	r3, #1
   1430a:	b2da      	uxtb	r2, r3
   1430c:	f24b 2328 	movw	r3, #45608	; 0xb228
   14310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14314:	701a      	strb	r2, [r3, #0]
   14316:	f24b 4384 	movw	r3, #46212	; 0xb484
   1431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431e:	681a      	ldr	r2, [r3, #0]
   14320:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14328:	601a      	str	r2, [r3, #0]
   1432a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1432e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14332:	681a      	ldr	r2, [r3, #0]
   14334:	f24b 2330 	movw	r3, #45616	; 0xb230
   14338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1433c:	601a      	str	r2, [r3, #0]
   1433e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   14342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14346:	2200      	movs	r2, #0
   14348:	801a      	strh	r2, [r3, #0]
   1434a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1434e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14352:	f04f 0200 	mov.w	r2, #0
   14356:	601a      	str	r2, [r3, #0]
   14358:	e054      	b.n	14404 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1435a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1435e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14362:	781b      	ldrb	r3, [r3, #0]
   14364:	2b03      	cmp	r3, #3
   14366:	d106      	bne.n	14376 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14368:	f24b 2328 	movw	r3, #45608	; 0xb228
   1436c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14370:	2203      	movs	r2, #3
   14372:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14374:	e44b      	b.n	13c0e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14376:	f24b 2328 	movw	r3, #45608	; 0xb228
   1437a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1437e:	781b      	ldrb	r3, [r3, #0]
   14380:	2b04      	cmp	r3, #4
   14382:	d13f      	bne.n	14404 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14384:	f24b 2328 	movw	r3, #45608	; 0xb228
   14388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438c:	2204      	movs	r2, #4
   1438e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14390:	f24b 2329 	movw	r3, #45609	; 0xb229
   14394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14398:	781b      	ldrb	r3, [r3, #0]
   1439a:	3301      	adds	r3, #1
   1439c:	b2da      	uxtb	r2, r3
   1439e:	f24b 2329 	movw	r3, #45609	; 0xb229
   143a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143a6:	701a      	strb	r2, [r3, #0]
   143a8:	f24b 2328 	movw	r3, #45608	; 0xb228
   143ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b0:	2200      	movs	r2, #0
   143b2:	701a      	strb	r2, [r3, #0]
   143b4:	f24b 233e 	movw	r3, #45630	; 0xb23e
   143b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143bc:	2200      	movs	r2, #0
   143be:	801a      	strh	r2, [r3, #0]
   143c0:	f24b 4384 	movw	r3, #46212	; 0xb484
   143c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143c8:	681a      	ldr	r2, [r3, #0]
   143ca:	f24b 232c 	movw	r3, #45612	; 0xb22c
   143ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143d2:	601a      	str	r2, [r3, #0]
   143d4:	f24b 4388 	movw	r3, #46216	; 0xb488
   143d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143dc:	681a      	ldr	r2, [r3, #0]
   143de:	f24b 2330 	movw	r3, #45616	; 0xb230
   143e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e6:	601a      	str	r2, [r3, #0]
   143e8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   143ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f0:	2200      	movs	r2, #0
   143f2:	801a      	strh	r2, [r3, #0]
   143f4:	f24b 2340 	movw	r3, #45632	; 0xb240
   143f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143fc:	f04f 0200 	mov.w	r2, #0
   14400:	601a      	str	r2, [r3, #0]
   14402:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14404:	372c      	adds	r7, #44	; 0x2c
   14406:	46bd      	mov	sp, r7
   14408:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1440a:	bf00      	nop
   1440c:	f3af 8000 	nop.w
   14410:	54442d18 	.word	0x54442d18
   14414:	3ff921fb 	.word	0x3ff921fb
   14418:	54442d18 	.word	0x54442d18
   1441c:	400921fb 	.word	0x400921fb

00014420 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14420:	b590      	push	{r4, r7, lr}
   14422:	b087      	sub	sp, #28
   14424:	af00      	add	r7, sp, #0
   14426:	4603      	mov	r3, r0
   14428:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1442a:	79f9      	ldrb	r1, [r7, #7]
   1442c:	f240 4228 	movw	r2, #1064	; 0x428
   14430:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14434:	460b      	mov	r3, r1
   14436:	005b      	lsls	r3, r3, #1
   14438:	440b      	add	r3, r1
   1443a:	009b      	lsls	r3, r3, #2
   1443c:	4413      	add	r3, r2
   1443e:	681a      	ldr	r2, [r3, #0]
   14440:	f24b 4384 	movw	r3, #46212	; 0xb484
   14444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14448:	681b      	ldr	r3, [r3, #0]
   1444a:	4610      	mov	r0, r2
   1444c:	4619      	mov	r1, r3
   1444e:	f003 fd61 	bl	17f14 <__aeabi_fsub>
   14452:	4603      	mov	r3, r0
   14454:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14456:	79f9      	ldrb	r1, [r7, #7]
   14458:	f240 4228 	movw	r2, #1064	; 0x428
   1445c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14460:	460b      	mov	r3, r1
   14462:	005b      	lsls	r3, r3, #1
   14464:	440b      	add	r3, r1
   14466:	009b      	lsls	r3, r3, #2
   14468:	4413      	add	r3, r2
   1446a:	3304      	adds	r3, #4
   1446c:	681a      	ldr	r2, [r3, #0]
   1446e:	f24b 4388 	movw	r3, #46216	; 0xb488
   14472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14476:	681b      	ldr	r3, [r3, #0]
   14478:	4610      	mov	r0, r2
   1447a:	4619      	mov	r1, r3
   1447c:	f003 fd4a 	bl	17f14 <__aeabi_fsub>
   14480:	4603      	mov	r3, r0
   14482:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14484:	6978      	ldr	r0, [r7, #20]
   14486:	6979      	ldr	r1, [r7, #20]
   14488:	f003 fe4e 	bl	18128 <__aeabi_fmul>
   1448c:	4603      	mov	r3, r0
   1448e:	461c      	mov	r4, r3
   14490:	6938      	ldr	r0, [r7, #16]
   14492:	6939      	ldr	r1, [r7, #16]
   14494:	f003 fe48 	bl	18128 <__aeabi_fmul>
   14498:	4603      	mov	r3, r0
   1449a:	4620      	mov	r0, r4
   1449c:	4619      	mov	r1, r3
   1449e:	f003 fd3b 	bl	17f18 <__addsf3>
   144a2:	4603      	mov	r3, r0
   144a4:	461a      	mov	r2, r3
   144a6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   144aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ae:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   144b0:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   144b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b8:	681b      	ldr	r3, [r3, #0]
   144ba:	4618      	mov	r0, r3
   144bc:	f04f 0100 	mov.w	r1, #0
   144c0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   144c4:	f003 fe30 	bl	18128 <__aeabi_fmul>
   144c8:	4603      	mov	r3, r0
   144ca:	461a      	mov	r2, r3
   144cc:	f24b 2368 	movw	r3, #45672	; 0xb268
   144d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144d4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   144d6:	f24b 2368 	movw	r3, #45672	; 0xb268
   144da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	4618      	mov	r0, r3
   144e2:	f04f 0100 	mov.w	r1, #0
   144e6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   144ea:	f003 ffbb 	bl	18464 <__aeabi_fcmplt>
   144ee:	4603      	mov	r3, r0
   144f0:	2b00      	cmp	r3, #0
   144f2:	d004      	beq.n	144fe <approaching+0xde>
   144f4:	f04f 0200 	mov.w	r2, #0
   144f8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   144fc:	e004      	b.n	14508 <approaching+0xe8>
   144fe:	f24b 2368 	movw	r3, #45672	; 0xb268
   14502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14506:	681a      	ldr	r2, [r3, #0]
   14508:	f24b 2368 	movw	r3, #45672	; 0xb268
   1450c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14510:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14512:	f24b 2368 	movw	r3, #45672	; 0xb268
   14516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1451a:	681a      	ldr	r2, [r3, #0]
   1451c:	f24b 2368 	movw	r3, #45672	; 0xb268
   14520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	4610      	mov	r0, r2
   14528:	4619      	mov	r1, r3
   1452a:	f003 fdfd 	bl	18128 <__aeabi_fmul>
   1452e:	4603      	mov	r3, r0
   14530:	461a      	mov	r2, r3
   14532:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1453a:	681b      	ldr	r3, [r3, #0]
   1453c:	4610      	mov	r0, r2
   1453e:	4619      	mov	r1, r3
   14540:	f003 ffae 	bl	184a0 <__aeabi_fcmpgt>
   14544:	4603      	mov	r3, r0
   14546:	2b00      	cmp	r3, #0
   14548:	d001      	beq.n	1454e <approaching+0x12e>
    return TRUE;
   1454a:	2301      	movs	r3, #1
   1454c:	e048      	b.n	145e0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1454e:	79f9      	ldrb	r1, [r7, #7]
   14550:	f240 4228 	movw	r2, #1064	; 0x428
   14554:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14558:	460b      	mov	r3, r1
   1455a:	005b      	lsls	r3, r3, #1
   1455c:	440b      	add	r3, r1
   1455e:	009b      	lsls	r3, r3, #2
   14560:	4413      	add	r3, r2
   14562:	681a      	ldr	r2, [r3, #0]
   14564:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1456c:	681b      	ldr	r3, [r3, #0]
   1456e:	4610      	mov	r0, r2
   14570:	4619      	mov	r1, r3
   14572:	f003 fccf 	bl	17f14 <__aeabi_fsub>
   14576:	4603      	mov	r3, r0
   14578:	4618      	mov	r0, r3
   1457a:	6979      	ldr	r1, [r7, #20]
   1457c:	f003 fdd4 	bl	18128 <__aeabi_fmul>
   14580:	4603      	mov	r3, r0
   14582:	461c      	mov	r4, r3
   14584:	79f9      	ldrb	r1, [r7, #7]
   14586:	f240 4228 	movw	r2, #1064	; 0x428
   1458a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1458e:	460b      	mov	r3, r1
   14590:	005b      	lsls	r3, r3, #1
   14592:	440b      	add	r3, r1
   14594:	009b      	lsls	r3, r3, #2
   14596:	4413      	add	r3, r2
   14598:	3304      	adds	r3, #4
   1459a:	681a      	ldr	r2, [r3, #0]
   1459c:	f24b 2330 	movw	r3, #45616	; 0xb230
   145a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a4:	681b      	ldr	r3, [r3, #0]
   145a6:	4610      	mov	r0, r2
   145a8:	4619      	mov	r1, r3
   145aa:	f003 fcb3 	bl	17f14 <__aeabi_fsub>
   145ae:	4603      	mov	r3, r0
   145b0:	4618      	mov	r0, r3
   145b2:	6939      	ldr	r1, [r7, #16]
   145b4:	f003 fdb8 	bl	18128 <__aeabi_fmul>
   145b8:	4603      	mov	r3, r0
   145ba:	4620      	mov	r0, r4
   145bc:	4619      	mov	r1, r3
   145be:	f003 fcab 	bl	17f18 <__addsf3>
   145c2:	4603      	mov	r3, r0
   145c4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   145c6:	2301      	movs	r3, #1
   145c8:	461c      	mov	r4, r3
   145ca:	68f8      	ldr	r0, [r7, #12]
   145cc:	f04f 0100 	mov.w	r1, #0
   145d0:	f003 ff48 	bl	18464 <__aeabi_fcmplt>
   145d4:	4603      	mov	r3, r0
   145d6:	2b00      	cmp	r3, #0
   145d8:	d101      	bne.n	145de <approaching+0x1be>
   145da:	2300      	movs	r3, #0
   145dc:	461c      	mov	r4, r3
   145de:	b2e3      	uxtb	r3, r4
}
   145e0:	4618      	mov	r0, r3
   145e2:	371c      	adds	r7, #28
   145e4:	46bd      	mov	sp, r7
   145e6:	bd90      	pop	{r4, r7, pc}

000145e8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   145e8:	b5b0      	push	{r4, r5, r7, lr}
   145ea:	b082      	sub	sp, #8
   145ec:	af00      	add	r7, sp, #0
   145ee:	6078      	str	r0, [r7, #4]
   145f0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   145f2:	f24b 2348 	movw	r3, #45640	; 0xb248
   145f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145fa:	687a      	ldr	r2, [r7, #4]
   145fc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   145fe:	f24b 234c 	movw	r3, #45644	; 0xb24c
   14602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14606:	683a      	ldr	r2, [r7, #0]
   14608:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1460a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1460e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14612:	681b      	ldr	r3, [r3, #0]
   14614:	6838      	ldr	r0, [r7, #0]
   14616:	4619      	mov	r1, r3
   14618:	f003 fc7c 	bl	17f14 <__aeabi_fsub>
   1461c:	4603      	mov	r3, r0
   1461e:	4618      	mov	r0, r3
   14620:	f003 f8ee 	bl	17800 <__aeabi_f2d>
   14624:	4604      	mov	r4, r0
   14626:	460d      	mov	r5, r1
   14628:	f24b 4384 	movw	r3, #46212	; 0xb484
   1462c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14630:	681b      	ldr	r3, [r3, #0]
   14632:	6878      	ldr	r0, [r7, #4]
   14634:	4619      	mov	r1, r3
   14636:	f003 fc6d 	bl	17f14 <__aeabi_fsub>
   1463a:	4603      	mov	r3, r0
   1463c:	4618      	mov	r0, r3
   1463e:	f003 f8df 	bl	17800 <__aeabi_f2d>
   14642:	4602      	mov	r2, r0
   14644:	460b      	mov	r3, r1
   14646:	4620      	mov	r0, r4
   14648:	4629      	mov	r1, r5
   1464a:	f001 f929 	bl	158a0 <pp_atan2>
   1464e:	4602      	mov	r2, r0
   14650:	460b      	mov	r3, r1
   14652:	a10b      	add	r1, pc, #44	; (adr r1, 14680 <fly_to_xy+0x98>)
   14654:	e9d1 0100 	ldrd	r0, r1, [r1]
   14658:	f002 ff72 	bl	17540 <__aeabi_dsub>
   1465c:	4602      	mov	r2, r0
   1465e:	460b      	mov	r3, r1
   14660:	4610      	mov	r0, r2
   14662:	4619      	mov	r1, r3
   14664:	f003 fc02 	bl	17e6c <__aeabi_d2f>
   14668:	4602      	mov	r2, r0
   1466a:	f24b 2314 	movw	r3, #45588	; 0xb214
   1466e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14672:	601a      	str	r2, [r3, #0]
}
   14674:	3708      	adds	r7, #8
   14676:	46bd      	mov	sp, r7
   14678:	bdb0      	pop	{r4, r5, r7, pc}
   1467a:	bf00      	nop
   1467c:	f3af 8000 	nop.w
   14680:	54442d18 	.word	0x54442d18
   14684:	3ff921fb 	.word	0x3ff921fb

00014688 <fly_to>:

static void fly_to(uint8_t wp) { 
   14688:	b580      	push	{r7, lr}
   1468a:	b082      	sub	sp, #8
   1468c:	af00      	add	r7, sp, #0
   1468e:	4603      	mov	r3, r0
   14690:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14692:	79f9      	ldrb	r1, [r7, #7]
   14694:	f240 4228 	movw	r2, #1064	; 0x428
   14698:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1469c:	460b      	mov	r3, r1
   1469e:	005b      	lsls	r3, r3, #1
   146a0:	440b      	add	r3, r1
   146a2:	009b      	lsls	r3, r3, #2
   146a4:	4413      	add	r3, r2
   146a6:	6818      	ldr	r0, [r3, #0]
   146a8:	79f9      	ldrb	r1, [r7, #7]
   146aa:	f240 4228 	movw	r2, #1064	; 0x428
   146ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146b2:	460b      	mov	r3, r1
   146b4:	005b      	lsls	r3, r3, #1
   146b6:	440b      	add	r3, r1
   146b8:	009b      	lsls	r3, r3, #2
   146ba:	4413      	add	r3, r2
   146bc:	3304      	adds	r3, #4
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	4619      	mov	r1, r3
   146c2:	f7ff ff91 	bl	145e8 <fly_to_xy>
}
   146c6:	3708      	adds	r7, #8
   146c8:	46bd      	mov	sp, r7
   146ca:	bd80      	pop	{r7, pc}

000146cc <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   146cc:	b5b0      	push	{r4, r5, r7, lr}
   146ce:	b088      	sub	sp, #32
   146d0:	af00      	add	r7, sp, #0
   146d2:	4602      	mov	r2, r0
   146d4:	460b      	mov	r3, r1
   146d6:	71fa      	strb	r2, [r7, #7]
   146d8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   146da:	79f9      	ldrb	r1, [r7, #7]
   146dc:	f240 4228 	movw	r2, #1064	; 0x428
   146e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146e4:	460b      	mov	r3, r1
   146e6:	005b      	lsls	r3, r3, #1
   146e8:	440b      	add	r3, r1
   146ea:	009b      	lsls	r3, r3, #2
   146ec:	4413      	add	r3, r2
   146ee:	681b      	ldr	r3, [r3, #0]
   146f0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   146f2:	79f9      	ldrb	r1, [r7, #7]
   146f4:	f240 4228 	movw	r2, #1064	; 0x428
   146f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146fc:	460b      	mov	r3, r1
   146fe:	005b      	lsls	r3, r3, #1
   14700:	440b      	add	r3, r1
   14702:	009b      	lsls	r3, r3, #2
   14704:	4413      	add	r3, r2
   14706:	3304      	adds	r3, #4
   14708:	681b      	ldr	r3, [r3, #0]
   1470a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   1470c:	79b9      	ldrb	r1, [r7, #6]
   1470e:	f240 4228 	movw	r2, #1064	; 0x428
   14712:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14716:	460b      	mov	r3, r1
   14718:	005b      	lsls	r3, r3, #1
   1471a:	440b      	add	r3, r1
   1471c:	009b      	lsls	r3, r3, #2
   1471e:	4413      	add	r3, r2
   14720:	681b      	ldr	r3, [r3, #0]
   14722:	4618      	mov	r0, r3
   14724:	69f9      	ldr	r1, [r7, #28]
   14726:	f003 fbf5 	bl	17f14 <__aeabi_fsub>
   1472a:	4603      	mov	r3, r0
   1472c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1472e:	79b9      	ldrb	r1, [r7, #6]
   14730:	f240 4228 	movw	r2, #1064	; 0x428
   14734:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14738:	460b      	mov	r3, r1
   1473a:	005b      	lsls	r3, r3, #1
   1473c:	440b      	add	r3, r1
   1473e:	009b      	lsls	r3, r3, #2
   14740:	4413      	add	r3, r2
   14742:	3304      	adds	r3, #4
   14744:	681b      	ldr	r3, [r3, #0]
   14746:	4618      	mov	r0, r3
   14748:	69b9      	ldr	r1, [r7, #24]
   1474a:	f003 fbe3 	bl	17f14 <__aeabi_fsub>
   1474e:	4603      	mov	r3, r0
   14750:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14752:	6978      	ldr	r0, [r7, #20]
   14754:	6979      	ldr	r1, [r7, #20]
   14756:	f003 fce7 	bl	18128 <__aeabi_fmul>
   1475a:	4603      	mov	r3, r0
   1475c:	461c      	mov	r4, r3
   1475e:	6938      	ldr	r0, [r7, #16]
   14760:	6939      	ldr	r1, [r7, #16]
   14762:	f003 fce1 	bl	18128 <__aeabi_fmul>
   14766:	4603      	mov	r3, r0
   14768:	4620      	mov	r0, r4
   1476a:	4619      	mov	r1, r3
   1476c:	f003 fbd4 	bl	17f18 <__addsf3>
   14770:	4603      	mov	r3, r0
   14772:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14774:	f24b 4384 	movw	r3, #46212	; 0xb484
   14778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1477c:	681b      	ldr	r3, [r3, #0]
   1477e:	4618      	mov	r0, r3
   14780:	69f9      	ldr	r1, [r7, #28]
   14782:	f003 fbc7 	bl	17f14 <__aeabi_fsub>
   14786:	4603      	mov	r3, r0
   14788:	4618      	mov	r0, r3
   1478a:	6979      	ldr	r1, [r7, #20]
   1478c:	f003 fccc 	bl	18128 <__aeabi_fmul>
   14790:	4603      	mov	r3, r0
   14792:	461c      	mov	r4, r3
   14794:	f24b 4388 	movw	r3, #46216	; 0xb488
   14798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1479c:	681b      	ldr	r3, [r3, #0]
   1479e:	4618      	mov	r0, r3
   147a0:	69b9      	ldr	r1, [r7, #24]
   147a2:	f003 fbb7 	bl	17f14 <__aeabi_fsub>
   147a6:	4603      	mov	r3, r0
   147a8:	4618      	mov	r0, r3
   147aa:	6939      	ldr	r1, [r7, #16]
   147ac:	f003 fcbc 	bl	18128 <__aeabi_fmul>
   147b0:	4603      	mov	r3, r0
   147b2:	4620      	mov	r0, r4
   147b4:	4619      	mov	r1, r3
   147b6:	f003 fbaf 	bl	17f18 <__addsf3>
   147ba:	4603      	mov	r3, r0
   147bc:	4618      	mov	r0, r3
   147be:	68f9      	ldr	r1, [r7, #12]
   147c0:	f003 fd66 	bl	18290 <__aeabi_fdiv>
   147c4:	4603      	mov	r3, r0
   147c6:	461a      	mov	r2, r3
   147c8:	f24b 236c 	movw	r3, #45676	; 0xb26c
   147cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147d0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   147d2:	f24b 236c 	movw	r3, #45676	; 0xb26c
   147d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147da:	681b      	ldr	r3, [r3, #0]
   147dc:	4618      	mov	r0, r3
   147de:	f04f 0100 	mov.w	r1, #0
   147e2:	f003 fe53 	bl	1848c <__aeabi_fcmpge>
   147e6:	4603      	mov	r3, r0
   147e8:	2b00      	cmp	r3, #0
   147ea:	d005      	beq.n	147f8 <route_to+0x12c>
   147ec:	f24b 236c 	movw	r3, #45676	; 0xb26c
   147f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147f4:	681a      	ldr	r2, [r3, #0]
   147f6:	e001      	b.n	147fc <route_to+0x130>
   147f8:	f04f 0200 	mov.w	r2, #0
   147fc:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14804:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14806:	68f8      	ldr	r0, [r7, #12]
   14808:	f002 fffa 	bl	17800 <__aeabi_f2d>
   1480c:	4602      	mov	r2, r0
   1480e:	460b      	mov	r3, r1
   14810:	4610      	mov	r0, r2
   14812:	4619      	mov	r1, r3
   14814:	f001 f9f4 	bl	15c00 <pp_sqrt>
   14818:	4602      	mov	r2, r0
   1481a:	460b      	mov	r3, r1
   1481c:	4610      	mov	r0, r2
   1481e:	4619      	mov	r1, r3
   14820:	f003 fb24 	bl	17e6c <__aeabi_d2f>
   14824:	4602      	mov	r2, r0
   14826:	f24b 2370 	movw	r3, #45680	; 0xb270
   1482a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1482e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14830:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14838:	681b      	ldr	r3, [r3, #0]
   1483a:	4618      	mov	r0, r3
   1483c:	f002 ffe0 	bl	17800 <__aeabi_f2d>
   14840:	4604      	mov	r4, r0
   14842:	460d      	mov	r5, r1
   14844:	f24b 2368 	movw	r3, #45672	; 0xb268
   14848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1484c:	681a      	ldr	r2, [r3, #0]
   1484e:	f24b 2370 	movw	r3, #45680	; 0xb270
   14852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14856:	681b      	ldr	r3, [r3, #0]
   14858:	4610      	mov	r0, r2
   1485a:	4619      	mov	r1, r3
   1485c:	f003 fd18 	bl	18290 <__aeabi_fdiv>
   14860:	4603      	mov	r3, r0
   14862:	4618      	mov	r0, r3
   14864:	f04f 0100 	mov.w	r1, #0
   14868:	f003 fe10 	bl	1848c <__aeabi_fcmpge>
   1486c:	4603      	mov	r3, r0
   1486e:	2b00      	cmp	r3, #0
   14870:	d014      	beq.n	1489c <route_to+0x1d0>
   14872:	f24b 2368 	movw	r3, #45672	; 0xb268
   14876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1487a:	681a      	ldr	r2, [r3, #0]
   1487c:	f24b 2370 	movw	r3, #45680	; 0xb270
   14880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14884:	681b      	ldr	r3, [r3, #0]
   14886:	4610      	mov	r0, r2
   14888:	4619      	mov	r1, r3
   1488a:	f003 fd01 	bl	18290 <__aeabi_fdiv>
   1488e:	4603      	mov	r3, r0
   14890:	4618      	mov	r0, r3
   14892:	f002 ffb5 	bl	17800 <__aeabi_f2d>
   14896:	4602      	mov	r2, r0
   14898:	460b      	mov	r3, r1
   1489a:	e003      	b.n	148a4 <route_to+0x1d8>
   1489c:	f04f 0200 	mov.w	r2, #0
   148a0:	f04f 0300 	mov.w	r3, #0
   148a4:	4620      	mov	r0, r4
   148a6:	4629      	mov	r1, r5
   148a8:	f002 fe4c 	bl	17544 <__adddf3>
   148ac:	4602      	mov	r2, r0
   148ae:	460b      	mov	r3, r1
   148b0:	4610      	mov	r0, r2
   148b2:	4619      	mov	r1, r3
   148b4:	f003 fada 	bl	17e6c <__aeabi_d2f>
   148b8:	4602      	mov	r2, r0
   148ba:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   148c4:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148cc:	681b      	ldr	r3, [r3, #0]
   148ce:	4618      	mov	r0, r3
   148d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   148d4:	f003 fdda 	bl	1848c <__aeabi_fcmpge>
   148d8:	4603      	mov	r3, r0
   148da:	2b00      	cmp	r3, #0
   148dc:	d002      	beq.n	148e4 <route_to+0x218>
   148de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   148e2:	e004      	b.n	148ee <route_to+0x222>
   148e4:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ec:	681a      	ldr	r2, [r3, #0]
   148ee:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   148f8:	f24b 236c 	movw	r3, #45676	; 0xb26c
   148fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14900:	681b      	ldr	r3, [r3, #0]
   14902:	4618      	mov	r0, r3
   14904:	6979      	ldr	r1, [r7, #20]
   14906:	f003 fc0f 	bl	18128 <__aeabi_fmul>
   1490a:	4603      	mov	r3, r0
   1490c:	4618      	mov	r0, r3
   1490e:	69f9      	ldr	r1, [r7, #28]
   14910:	f003 fb02 	bl	17f18 <__addsf3>
   14914:	4603      	mov	r3, r0
   14916:	461c      	mov	r4, r3
   14918:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1491c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14920:	681b      	ldr	r3, [r3, #0]
   14922:	4618      	mov	r0, r3
   14924:	6939      	ldr	r1, [r7, #16]
   14926:	f003 fbff 	bl	18128 <__aeabi_fmul>
   1492a:	4603      	mov	r3, r0
   1492c:	4618      	mov	r0, r3
   1492e:	69b9      	ldr	r1, [r7, #24]
   14930:	f003 faf2 	bl	17f18 <__addsf3>
   14934:	4603      	mov	r3, r0
   14936:	4620      	mov	r0, r4
   14938:	4619      	mov	r1, r3
   1493a:	f7ff fe55 	bl	145e8 <fly_to_xy>
}
   1493e:	3720      	adds	r7, #32
   14940:	46bd      	mov	sp, r7
   14942:	bdb0      	pop	{r4, r5, r7, pc}

00014944 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14944:	b590      	push	{r4, r7, lr}
   14946:	b083      	sub	sp, #12
   14948:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   1494a:	f240 4328 	movw	r3, #1064	; 0x428
   1494e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14952:	681a      	ldr	r2, [r3, #0]
   14954:	f24b 4384 	movw	r3, #46212	; 0xb484
   14958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1495c:	681b      	ldr	r3, [r3, #0]
   1495e:	4610      	mov	r0, r2
   14960:	4619      	mov	r1, r3
   14962:	f003 fad7 	bl	17f14 <__aeabi_fsub>
   14966:	4603      	mov	r3, r0
   14968:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   1496a:	f240 4328 	movw	r3, #1064	; 0x428
   1496e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14972:	685a      	ldr	r2, [r3, #4]
   14974:	f24b 4388 	movw	r3, #46216	; 0xb488
   14978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	4610      	mov	r0, r2
   14980:	4619      	mov	r1, r3
   14982:	f003 fac7 	bl	17f14 <__aeabi_fsub>
   14986:	4603      	mov	r3, r0
   14988:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   1498a:	6878      	ldr	r0, [r7, #4]
   1498c:	6879      	ldr	r1, [r7, #4]
   1498e:	f003 fbcb 	bl	18128 <__aeabi_fmul>
   14992:	4603      	mov	r3, r0
   14994:	461c      	mov	r4, r3
   14996:	6838      	ldr	r0, [r7, #0]
   14998:	6839      	ldr	r1, [r7, #0]
   1499a:	f003 fbc5 	bl	18128 <__aeabi_fmul>
   1499e:	4603      	mov	r3, r0
   149a0:	4620      	mov	r0, r4
   149a2:	4619      	mov	r1, r3
   149a4:	f003 fab8 	bl	17f18 <__addsf3>
   149a8:	4603      	mov	r3, r0
   149aa:	461a      	mov	r2, r3
   149ac:	f24b 2360 	movw	r3, #45664	; 0xb260
   149b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149b4:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   149b6:	f24b 2360 	movw	r3, #45664	; 0xb260
   149ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	2201      	movs	r2, #1
   149c2:	4614      	mov	r4, r2
   149c4:	4618      	mov	r0, r3
   149c6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   149ca:	f6c4 0174 	movt	r1, #18548	; 0x4874
   149ce:	f003 fd67 	bl	184a0 <__aeabi_fcmpgt>
   149d2:	4603      	mov	r3, r0
   149d4:	2b00      	cmp	r3, #0
   149d6:	d101      	bne.n	149dc <compute_dist2_to_home+0x98>
   149d8:	2300      	movs	r3, #0
   149da:	461c      	mov	r4, r3
   149dc:	b2e3      	uxtb	r3, r4
   149de:	461a      	mov	r2, r3
   149e0:	f24b 2364 	movw	r3, #45668	; 0xb264
   149e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149e8:	701a      	strb	r2, [r3, #0]
}
   149ea:	370c      	adds	r7, #12
   149ec:	46bd      	mov	sp, r7
   149ee:	bd90      	pop	{r4, r7, pc}

000149f0 <nav_home>:

void nav_home(void) {
   149f0:	b580      	push	{r7, lr}
   149f2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   149f4:	f24b 2354 	movw	r3, #45652	; 0xb254
   149f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149fc:	f04f 0200 	mov.w	r2, #0
   14a00:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14a02:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   14a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a0a:	2203      	movs	r2, #3
   14a0c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14a0e:	f240 4324 	movw	r3, #1060	; 0x424
   14a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a16:	f04f 0200 	mov.w	r2, #0
   14a1a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14a1e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14a20:	f7ff ff90 	bl	14944 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14a24:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a2c:	681a      	ldr	r2, [r3, #0]
   14a2e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a36:	601a      	str	r2, [r3, #0]
}
   14a38:	bd80      	pop	{r7, pc}
   14a3a:	bf00      	nop

00014a3c <nav_update>:

void nav_update(void) {
   14a3c:	b580      	push	{r7, lr}
   14a3e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14a40:	f7ff ff80 	bl	14944 <compute_dist2_to_home>

  auto_nav();
   14a44:	f7fd fc0c 	bl	12260 <auto_nav>
}
   14a48:	bd80      	pop	{r7, pc}
   14a4a:	bf00      	nop

00014a4c <nav_init>:


void nav_init(void) {
   14a4c:	b480      	push	{r7}
   14a4e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14a50:	f24b 2329 	movw	r3, #45609	; 0xb229
   14a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a58:	2200      	movs	r2, #0
   14a5a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14a5c:	f24b 2328 	movw	r3, #45608	; 0xb228
   14a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a64:	2200      	movs	r2, #0
   14a66:	701a      	strb	r2, [r3, #0]
}
   14a68:	46bd      	mov	sp, r7
   14a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a6e:	4770      	bx	lr

00014a70 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14a70:	b480      	push	{r7}
   14a72:	b083      	sub	sp, #12
   14a74:	af00      	add	r7, sp, #0
   14a76:	4603      	mov	r3, r0
   14a78:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14a7a:	f242 030a 	movw	r3, #8202	; 0x200a
   14a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a82:	781b      	ldrb	r3, [r3, #0]
   14a84:	b2db      	uxtb	r3, r3
   14a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14a8a:	2b00      	cmp	r3, #0
   14a8c:	d028      	beq.n	14ae0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14a8e:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a96:	781b      	ldrb	r3, [r3, #0]
   14a98:	b2db      	uxtb	r3, r3
   14a9a:	461a      	mov	r2, r3
   14a9c:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aa4:	781b      	ldrb	r3, [r3, #0]
   14aa6:	3301      	adds	r3, #1
   14aa8:	429a      	cmp	r2, r3
   14aaa:	d100      	bne.n	14aae <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14aac:	e02c      	b.n	14b08 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14aae:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab6:	781b      	ldrb	r3, [r3, #0]
   14ab8:	461a      	mov	r2, r3
   14aba:	f24b 2380 	movw	r3, #45696	; 0xb280
   14abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac2:	79f9      	ldrb	r1, [r7, #7]
   14ac4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14ac6:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ace:	781b      	ldrb	r3, [r3, #0]
   14ad0:	3301      	adds	r3, #1
   14ad2:	b2da      	uxtb	r2, r3
   14ad4:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14adc:	701a      	strb	r2, [r3, #0]
   14ade:	e013      	b.n	14b08 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14ae0:	f242 030c 	movw	r3, #8204	; 0x200c
   14ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ae8:	79fa      	ldrb	r2, [r7, #7]
   14aea:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14aec:	f242 030a 	movw	r3, #8202	; 0x200a
   14af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af4:	f242 020a 	movw	r2, #8202	; 0x200a
   14af8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14afc:	7812      	ldrb	r2, [r2, #0]
   14afe:	b2d2      	uxtb	r2, r2
   14b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14b04:	b2d2      	uxtb	r2, r2
   14b06:	701a      	strb	r2, [r3, #0]
  }
}
   14b08:	370c      	adds	r7, #12
   14b0a:	46bd      	mov	sp, r7
   14b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b10:	4770      	bx	lr
   14b12:	bf00      	nop

00014b14 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14b14:	b480      	push	{r7}
   14b16:	b083      	sub	sp, #12
   14b18:	af00      	add	r7, sp, #0
   14b1a:	4603      	mov	r3, r0
   14b1c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14b1e:	f242 039a 	movw	r3, #8346	; 0x209a
   14b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b26:	781b      	ldrb	r3, [r3, #0]
   14b28:	b2db      	uxtb	r3, r3
   14b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d028      	beq.n	14b84 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14b32:	f24b 3381 	movw	r3, #45953	; 0xb381
   14b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b3a:	781b      	ldrb	r3, [r3, #0]
   14b3c:	b2db      	uxtb	r3, r3
   14b3e:	461a      	mov	r2, r3
   14b40:	f24b 3380 	movw	r3, #45952	; 0xb380
   14b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b48:	781b      	ldrb	r3, [r3, #0]
   14b4a:	3301      	adds	r3, #1
   14b4c:	429a      	cmp	r2, r3
   14b4e:	d100      	bne.n	14b52 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14b50:	e02c      	b.n	14bac <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14b52:	f24b 3380 	movw	r3, #45952	; 0xb380
   14b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5a:	781b      	ldrb	r3, [r3, #0]
   14b5c:	461a      	mov	r2, r3
   14b5e:	f24b 3384 	movw	r3, #45956	; 0xb384
   14b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b66:	79f9      	ldrb	r1, [r7, #7]
   14b68:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14b6a:	f24b 3380 	movw	r3, #45952	; 0xb380
   14b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b72:	781b      	ldrb	r3, [r3, #0]
   14b74:	3301      	adds	r3, #1
   14b76:	b2da      	uxtb	r2, r3
   14b78:	f24b 3380 	movw	r3, #45952	; 0xb380
   14b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b80:	701a      	strb	r2, [r3, #0]
   14b82:	e013      	b.n	14bac <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14b84:	f242 039c 	movw	r3, #8348	; 0x209c
   14b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8c:	79fa      	ldrb	r2, [r7, #7]
   14b8e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14b90:	f242 039a 	movw	r3, #8346	; 0x209a
   14b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b98:	f242 029a 	movw	r2, #8346	; 0x209a
   14b9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ba0:	7812      	ldrb	r2, [r2, #0]
   14ba2:	b2d2      	uxtb	r2, r2
   14ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ba8:	b2d2      	uxtb	r2, r2
   14baa:	701a      	strb	r2, [r3, #0]
  }
}
   14bac:	370c      	adds	r7, #12
   14bae:	46bd      	mov	sp, r7
   14bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bb4:	4770      	bx	lr
   14bb6:	bf00      	nop

00014bb8 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14bb8:	b580      	push	{r7, lr}
   14bba:	b084      	sub	sp, #16
   14bbc:	af00      	add	r7, sp, #0
   14bbe:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14bc0:	2300      	movs	r3, #0
   14bc2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14bc4:	e009      	b.n	14bda <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14bc6:	7bfb      	ldrb	r3, [r7, #15]
   14bc8:	687a      	ldr	r2, [r7, #4]
   14bca:	4413      	add	r3, r2
   14bcc:	781b      	ldrb	r3, [r3, #0]
   14bce:	4618      	mov	r0, r3
   14bd0:	f7ff ff4e 	bl	14a70 <uart0_transmit>
    i++;
   14bd4:	7bfb      	ldrb	r3, [r7, #15]
   14bd6:	3301      	adds	r3, #1
   14bd8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14bda:	7bfb      	ldrb	r3, [r7, #15]
   14bdc:	687a      	ldr	r2, [r7, #4]
   14bde:	4413      	add	r3, r2
   14be0:	781b      	ldrb	r3, [r3, #0]
   14be2:	2b00      	cmp	r3, #0
   14be4:	d1ef      	bne.n	14bc6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14be6:	3710      	adds	r7, #16
   14be8:	46bd      	mov	sp, r7
   14bea:	bd80      	pop	{r7, pc}

00014bec <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14bec:	b590      	push	{r4, r7, lr}
   14bee:	b089      	sub	sp, #36	; 0x24
   14bf0:	af00      	add	r7, sp, #0
   14bf2:	4603      	mov	r3, r0
   14bf4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14bf6:	f248 73b8 	movw	r3, #34744	; 0x87b8
   14bfa:	f2c0 0301 	movt	r3, #1
   14bfe:	f107 040c 	add.w	r4, r7, #12
   14c02:	6818      	ldr	r0, [r3, #0]
   14c04:	6859      	ldr	r1, [r3, #4]
   14c06:	689a      	ldr	r2, [r3, #8]
   14c08:	68db      	ldr	r3, [r3, #12]
   14c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14c0c:	79fb      	ldrb	r3, [r7, #7]
   14c0e:	091b      	lsrs	r3, r3, #4
   14c10:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14c12:	79fb      	ldrb	r3, [r7, #7]
   14c14:	f003 030f 	and.w	r3, r3, #15
   14c18:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14c1a:	230f      	movs	r3, #15
   14c1c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14c1e:	230f      	movs	r3, #15
   14c20:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14c22:	7ffb      	ldrb	r3, [r7, #31]
   14c24:	f107 0220 	add.w	r2, r7, #32
   14c28:	4413      	add	r3, r2
   14c2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14c2e:	4618      	mov	r0, r3
   14c30:	f7ff ff1e 	bl	14a70 <uart0_transmit>
  uart0_transmit(hex[low]);
   14c34:	7fbb      	ldrb	r3, [r7, #30]
   14c36:	f107 0220 	add.w	r2, r7, #32
   14c3a:	4413      	add	r3, r2
   14c3c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14c40:	4618      	mov	r0, r3
   14c42:	f7ff ff15 	bl	14a70 <uart0_transmit>
}
   14c46:	3724      	adds	r7, #36	; 0x24
   14c48:	46bd      	mov	sp, r7
   14c4a:	bd90      	pop	{r4, r7, pc}

00014c4c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14c4c:	b480      	push	{r7}
   14c4e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14c50:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c58:	781a      	ldrb	r2, [r3, #0]
   14c5a:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c62:	781b      	ldrb	r3, [r3, #0]
   14c64:	b2db      	uxtb	r3, r3
   14c66:	429a      	cmp	r2, r3
   14c68:	d10e      	bne.n	14c88 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14c6a:	f242 030a 	movw	r3, #8202	; 0x200a
   14c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c72:	f242 020a 	movw	r2, #8202	; 0x200a
   14c76:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c7a:	7812      	ldrb	r2, [r2, #0]
   14c7c:	b2d2      	uxtb	r2, r2
   14c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14c82:	b2d2      	uxtb	r2, r2
   14c84:	701a      	strb	r2, [r3, #0]
   14c86:	e01d      	b.n	14cc4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14c88:	f242 030c 	movw	r3, #8204	; 0x200c
   14c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c90:	f24b 227d 	movw	r2, #45693	; 0xb27d
   14c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c98:	7812      	ldrb	r2, [r2, #0]
   14c9a:	b2d2      	uxtb	r2, r2
   14c9c:	4611      	mov	r1, r2
   14c9e:	f24b 2280 	movw	r2, #45696	; 0xb280
   14ca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ca6:	5c52      	ldrb	r2, [r2, r1]
   14ca8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14caa:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cb2:	781b      	ldrb	r3, [r3, #0]
   14cb4:	b2db      	uxtb	r3, r3
   14cb6:	3301      	adds	r3, #1
   14cb8:	b2da      	uxtb	r2, r3
   14cba:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc2:	701a      	strb	r2, [r3, #0]
  }
}
   14cc4:	46bd      	mov	sp, r7
   14cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cca:	4770      	bx	lr

00014ccc <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14ccc:	b480      	push	{r7}
   14cce:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14cd0:	f24b 3380 	movw	r3, #45952	; 0xb380
   14cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd8:	781a      	ldrb	r2, [r3, #0]
   14cda:	f24b 3381 	movw	r3, #45953	; 0xb381
   14cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ce2:	781b      	ldrb	r3, [r3, #0]
   14ce4:	b2db      	uxtb	r3, r3
   14ce6:	429a      	cmp	r2, r3
   14ce8:	d10e      	bne.n	14d08 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14cea:	f242 039a 	movw	r3, #8346	; 0x209a
   14cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cf2:	f242 029a 	movw	r2, #8346	; 0x209a
   14cf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14cfa:	7812      	ldrb	r2, [r2, #0]
   14cfc:	b2d2      	uxtb	r2, r2
   14cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14d02:	b2d2      	uxtb	r2, r2
   14d04:	701a      	strb	r2, [r3, #0]
   14d06:	e01d      	b.n	14d44 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14d08:	f242 039c 	movw	r3, #8348	; 0x209c
   14d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d10:	f24b 3281 	movw	r2, #45953	; 0xb381
   14d14:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d18:	7812      	ldrb	r2, [r2, #0]
   14d1a:	b2d2      	uxtb	r2, r2
   14d1c:	4611      	mov	r1, r2
   14d1e:	f24b 3284 	movw	r2, #45956	; 0xb384
   14d22:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d26:	5c52      	ldrb	r2, [r2, r1]
   14d28:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14d2a:	f24b 3381 	movw	r3, #45953	; 0xb381
   14d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d32:	781b      	ldrb	r3, [r3, #0]
   14d34:	b2db      	uxtb	r3, r3
   14d36:	3301      	adds	r3, #1
   14d38:	b2da      	uxtb	r2, r3
   14d3a:	f24b 3381 	movw	r3, #45953	; 0xb381
   14d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d42:	701a      	strb	r2, [r3, #0]
  }
}
   14d44:	46bd      	mov	sp, r7
   14d46:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d4a:	4770      	bx	lr

00014d4c <uart0_init>:

void uart0_init( void ) {
   14d4c:	b480      	push	{r7}
   14d4e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14d50:	f242 0390 	movw	r3, #8336	; 0x2090
   14d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d58:	2200      	movs	r2, #0
   14d5a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14d5c:	f242 0309 	movw	r3, #8201	; 0x2009
   14d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d64:	2219      	movs	r2, #25
   14d66:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14d68:	f242 030b 	movw	r3, #8203	; 0x200b
   14d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d70:	2200      	movs	r2, #0
   14d72:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14d74:	f242 030a 	movw	r3, #8202	; 0x200a
   14d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7c:	2218      	movs	r2, #24
   14d7e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14d80:	f242 0395 	movw	r3, #8341	; 0x2095
   14d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d88:	2206      	movs	r2, #6
   14d8a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14d8c:	f242 030a 	movw	r3, #8202	; 0x200a
   14d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d94:	f242 020a 	movw	r2, #8202	; 0x200a
   14d98:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d9c:	7812      	ldrb	r2, [r2, #0]
   14d9e:	b2d2      	uxtb	r2, r2
   14da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14da4:	b2d2      	uxtb	r2, r2
   14da6:	701a      	strb	r2, [r3, #0]
}
   14da8:	46bd      	mov	sp, r7
   14daa:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dae:	4770      	bx	lr

00014db0 <uart1_init>:

void uart1_init( void ) {
   14db0:	b480      	push	{r7}
   14db2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14db4:	f242 0398 	movw	r3, #8344	; 0x2098
   14db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dbc:	2200      	movs	r2, #0
   14dbe:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14dc0:	f242 0399 	movw	r3, #8345	; 0x2099
   14dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc8:	2219      	movs	r2, #25
   14dca:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14dcc:	f242 039b 	movw	r3, #8347	; 0x209b
   14dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd4:	2200      	movs	r2, #0
   14dd6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14dd8:	f242 039a 	movw	r3, #8346	; 0x209a
   14ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de0:	2218      	movs	r2, #24
   14de2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14de4:	f242 039d 	movw	r3, #8349	; 0x209d
   14de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dec:	2206      	movs	r2, #6
   14dee:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14df0:	f242 039a 	movw	r3, #8346	; 0x209a
   14df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df8:	f242 029a 	movw	r2, #8346	; 0x209a
   14dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e00:	7812      	ldrb	r2, [r2, #0]
   14e02:	b2d2      	uxtb	r2, r2
   14e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e08:	b2d2      	uxtb	r2, r2
   14e0a:	701a      	strb	r2, [r3, #0]
}
   14e0c:	46bd      	mov	sp, r7
   14e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e12:	4770      	bx	lr
   14e14:	0000      	movs	r0, r0
	...

00014e18 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14e18:	b480      	push	{r7}
   14e1a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14e1c:	f24b 4384 	movw	r3, #46212	; 0xb484
   14e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e24:	f04f 0200 	mov.w	r2, #0
   14e28:	601a      	str	r2, [r3, #0]
   14e2a:	f24b 4388 	movw	r3, #46216	; 0xb488
   14e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e32:	f04f 0200 	mov.w	r2, #0
   14e36:	601a      	str	r2, [r3, #0]
   14e38:	f24b 438c 	movw	r3, #46220	; 0xb48c
   14e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e40:	f04f 0200 	mov.w	r2, #0
   14e44:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14e46:	f24b 4390 	movw	r3, #46224	; 0xb490
   14e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4e:	f04f 0200 	mov.w	r2, #0
   14e52:	601a      	str	r2, [r3, #0]
   14e54:	f24b 4394 	movw	r3, #46228	; 0xb494
   14e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e5c:	f04f 0200 	mov.w	r2, #0
   14e60:	601a      	str	r2, [r3, #0]
   14e62:	f24b 4398 	movw	r3, #46232	; 0xb498
   14e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e6a:	f04f 0200 	mov.w	r2, #0
   14e6e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14e70:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e78:	f04f 0200 	mov.w	r2, #0
   14e7c:	601a      	str	r2, [r3, #0]
   14e7e:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e86:	f04f 0200 	mov.w	r2, #0
   14e8a:	601a      	str	r2, [r3, #0]
   14e8c:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e94:	f04f 0200 	mov.w	r2, #0
   14e98:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14e9a:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea2:	f04f 0200 	mov.w	r2, #0
   14ea6:	601a      	str	r2, [r3, #0]
   14ea8:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb0:	f04f 0200 	mov.w	r2, #0
   14eb4:	601a      	str	r2, [r3, #0]
   14eb6:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   14eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ebe:	f04f 0200 	mov.w	r2, #0
   14ec2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14ec4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   14ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ecc:	2200      	movs	r2, #0
   14ece:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14ed0:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed8:	681a      	ldr	r2, [r3, #0]
   14eda:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee2:	601a      	str	r2, [r3, #0]
}
   14ee4:	46bd      	mov	sp, r7
   14ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14eea:	4770      	bx	lr

00014eec <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14eec:	b580      	push	{r7, lr}
   14eee:	b082      	sub	sp, #8
   14ef0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14ef2:	f240 33ec 	movw	r3, #1004	; 0x3ec
   14ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efa:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14efc:	2b01      	cmp	r3, #1
   14efe:	d105      	bne.n	14f0c <estimator_update_state_infrared+0x20>
   14f00:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f08:	681b      	ldr	r3, [r3, #0]
   14f0a:	e004      	b.n	14f16 <estimator_update_state_infrared+0x2a>
   14f0c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f14:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14f16:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14f18:	f24b 1370 	movw	r3, #45424	; 0xb170
   14f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f20:	881b      	ldrh	r3, [r3, #0]
   14f22:	b21b      	sxth	r3, r3
   14f24:	4618      	mov	r0, r3
   14f26:	f003 f8ab 	bl	18080 <__aeabi_i2f>
   14f2a:	4603      	mov	r3, r0
   14f2c:	4618      	mov	r0, r3
   14f2e:	6879      	ldr	r1, [r7, #4]
   14f30:	f003 f8fa 	bl	18128 <__aeabi_fmul>
   14f34:	4603      	mov	r3, r0
   14f36:	461a      	mov	r2, r3
   14f38:	f24b 4390 	movw	r3, #46224	; 0xb490
   14f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f40:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14f42:	f24b 1372 	movw	r3, #45426	; 0xb172
   14f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4a:	881b      	ldrh	r3, [r3, #0]
   14f4c:	b21b      	sxth	r3, r3
   14f4e:	4618      	mov	r0, r3
   14f50:	f003 f896 	bl	18080 <__aeabi_i2f>
   14f54:	4603      	mov	r3, r0
   14f56:	4618      	mov	r0, r3
   14f58:	6879      	ldr	r1, [r7, #4]
   14f5a:	f003 f8e5 	bl	18128 <__aeabi_fmul>
   14f5e:	4603      	mov	r3, r0
   14f60:	461a      	mov	r2, r3
   14f62:	f24b 4398 	movw	r3, #46232	; 0xb498
   14f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f6a:	601a      	str	r2, [r3, #0]
}
   14f6c:	3708      	adds	r7, #8
   14f6e:	46bd      	mov	sp, r7
   14f70:	bd80      	pop	{r7, pc}
   14f72:	bf00      	nop

00014f74 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14f74:	b5b0      	push	{r4, r5, r7, lr}
   14f76:	b084      	sub	sp, #16
   14f78:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14f7a:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   14f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	2b00      	cmp	r3, #0
   14f86:	f000 81e8 	beq.w	1535a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14f8a:	f24b 0340 	movw	r3, #45120	; 0xb040
   14f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f92:	681a      	ldr	r2, [r3, #0]
   14f94:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   14f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9c:	681b      	ldr	r3, [r3, #0]
   14f9e:	4610      	mov	r0, r2
   14fa0:	4619      	mov	r1, r3
   14fa2:	f002 ffb7 	bl	17f14 <__aeabi_fsub>
   14fa6:	4603      	mov	r3, r0
   14fa8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14faa:	68b8      	ldr	r0, [r7, #8]
   14fac:	f002 fc28 	bl	17800 <__aeabi_f2d>
   14fb0:	4602      	mov	r2, r0
   14fb2:	460b      	mov	r3, r1
   14fb4:	4610      	mov	r0, r2
   14fb6:	4619      	mov	r1, r3
   14fb8:	a385      	add	r3, pc, #532	; (adr r3, 151d0 <estimator_update_ir_estim+0x25c>)
   14fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fbe:	f002 ff03 	bl	17dc8 <__aeabi_dcmpgt>
   14fc2:	4603      	mov	r3, r0
   14fc4:	2b00      	cmp	r3, #0
   14fc6:	d100      	bne.n	14fca <estimator_update_ir_estim+0x56>
   14fc8:	e219      	b.n	153fe <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14fca:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd2:	681a      	ldr	r2, [r3, #0]
   14fd4:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   14fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	4610      	mov	r0, r2
   14fe0:	4619      	mov	r1, r3
   14fe2:	f002 ff97 	bl	17f14 <__aeabi_fsub>
   14fe6:	4603      	mov	r3, r0
   14fe8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14fea:	e013      	b.n	15014 <estimator_update_ir_estim+0xa0>
   14fec:	68f8      	ldr	r0, [r7, #12]
   14fee:	f002 fc07 	bl	17800 <__aeabi_f2d>
   14ff2:	4602      	mov	r2, r0
   14ff4:	460b      	mov	r3, r1
   14ff6:	4610      	mov	r0, r2
   14ff8:	4619      	mov	r1, r3
   14ffa:	a377      	add	r3, pc, #476	; (adr r3, 151d8 <estimator_update_ir_estim+0x264>)
   14ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15000:	f002 fa9e 	bl	17540 <__aeabi_dsub>
   15004:	4602      	mov	r2, r0
   15006:	460b      	mov	r3, r1
   15008:	4610      	mov	r0, r2
   1500a:	4619      	mov	r1, r3
   1500c:	f002 ff2e 	bl	17e6c <__aeabi_d2f>
   15010:	4603      	mov	r3, r0
   15012:	60fb      	str	r3, [r7, #12]
   15014:	68f8      	ldr	r0, [r7, #12]
   15016:	f002 fbf3 	bl	17800 <__aeabi_f2d>
   1501a:	4602      	mov	r2, r0
   1501c:	460b      	mov	r3, r1
   1501e:	4610      	mov	r0, r2
   15020:	4619      	mov	r1, r3
   15022:	a36f      	add	r3, pc, #444	; (adr r3, 151e0 <estimator_update_ir_estim+0x26c>)
   15024:	e9d3 2300 	ldrd	r2, r3, [r3]
   15028:	f002 fece 	bl	17dc8 <__aeabi_dcmpgt>
   1502c:	4603      	mov	r3, r0
   1502e:	2b00      	cmp	r3, #0
   15030:	d1dc      	bne.n	14fec <estimator_update_ir_estim+0x78>
   15032:	e013      	b.n	1505c <estimator_update_ir_estim+0xe8>
   15034:	68f8      	ldr	r0, [r7, #12]
   15036:	f002 fbe3 	bl	17800 <__aeabi_f2d>
   1503a:	4602      	mov	r2, r0
   1503c:	460b      	mov	r3, r1
   1503e:	4610      	mov	r0, r2
   15040:	4619      	mov	r1, r3
   15042:	a365      	add	r3, pc, #404	; (adr r3, 151d8 <estimator_update_ir_estim+0x264>)
   15044:	e9d3 2300 	ldrd	r2, r3, [r3]
   15048:	f002 fa7c 	bl	17544 <__adddf3>
   1504c:	4602      	mov	r2, r0
   1504e:	460b      	mov	r3, r1
   15050:	4610      	mov	r0, r2
   15052:	4619      	mov	r1, r3
   15054:	f002 ff0a 	bl	17e6c <__aeabi_d2f>
   15058:	4603      	mov	r3, r0
   1505a:	60fb      	str	r3, [r7, #12]
   1505c:	68f8      	ldr	r0, [r7, #12]
   1505e:	f002 fbcf 	bl	17800 <__aeabi_f2d>
   15062:	4602      	mov	r2, r0
   15064:	460b      	mov	r3, r1
   15066:	4610      	mov	r0, r2
   15068:	4619      	mov	r1, r3
   1506a:	a35f      	add	r3, pc, #380	; (adr r3, 151e8 <estimator_update_ir_estim+0x274>)
   1506c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15070:	f002 fe8c 	bl	17d8c <__aeabi_dcmplt>
   15074:	4603      	mov	r3, r0
   15076:	2b00      	cmp	r3, #0
   15078:	d1dc      	bne.n	15034 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1507a:	68f8      	ldr	r0, [r7, #12]
   1507c:	68b9      	ldr	r1, [r7, #8]
   1507e:	f003 f907 	bl	18290 <__aeabi_fdiv>
   15082:	4603      	mov	r3, r0
   15084:	4618      	mov	r0, r3
   15086:	f002 fbbb 	bl	17800 <__aeabi_f2d>
   1508a:	4602      	mov	r2, r0
   1508c:	460b      	mov	r3, r1
   1508e:	4610      	mov	r0, r2
   15090:	4619      	mov	r1, r3
   15092:	f04f 0200 	mov.w	r2, #0
   15096:	f04f 0300 	mov.w	r3, #0
   1509a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1509e:	f002 fc03 	bl	178a8 <__aeabi_dmul>
   150a2:	4602      	mov	r2, r0
   150a4:	460b      	mov	r3, r1
   150a6:	4610      	mov	r0, r2
   150a8:	4619      	mov	r1, r3
   150aa:	a351      	add	r3, pc, #324	; (adr r3, 151f0 <estimator_update_ir_estim+0x27c>)
   150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   150b0:	f002 fd24 	bl	17afc <__aeabi_ddiv>
   150b4:	4602      	mov	r2, r0
   150b6:	460b      	mov	r3, r1
   150b8:	4610      	mov	r0, r2
   150ba:	4619      	mov	r1, r3
   150bc:	f002 fed6 	bl	17e6c <__aeabi_d2f>
   150c0:	4603      	mov	r3, r0
   150c2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   150c4:	e013      	b.n	150ee <estimator_update_ir_estim+0x17a>
   150c6:	68f8      	ldr	r0, [r7, #12]
   150c8:	f002 fb9a 	bl	17800 <__aeabi_f2d>
   150cc:	4602      	mov	r2, r0
   150ce:	460b      	mov	r3, r1
   150d0:	4610      	mov	r0, r2
   150d2:	4619      	mov	r1, r3
   150d4:	a340      	add	r3, pc, #256	; (adr r3, 151d8 <estimator_update_ir_estim+0x264>)
   150d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   150da:	f002 fa31 	bl	17540 <__aeabi_dsub>
   150de:	4602      	mov	r2, r0
   150e0:	460b      	mov	r3, r1
   150e2:	4610      	mov	r0, r2
   150e4:	4619      	mov	r1, r3
   150e6:	f002 fec1 	bl	17e6c <__aeabi_d2f>
   150ea:	4603      	mov	r3, r0
   150ec:	60fb      	str	r3, [r7, #12]
   150ee:	68f8      	ldr	r0, [r7, #12]
   150f0:	f002 fb86 	bl	17800 <__aeabi_f2d>
   150f4:	4602      	mov	r2, r0
   150f6:	460b      	mov	r3, r1
   150f8:	4610      	mov	r0, r2
   150fa:	4619      	mov	r1, r3
   150fc:	a338      	add	r3, pc, #224	; (adr r3, 151e0 <estimator_update_ir_estim+0x26c>)
   150fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15102:	f002 fe61 	bl	17dc8 <__aeabi_dcmpgt>
   15106:	4603      	mov	r3, r0
   15108:	2b00      	cmp	r3, #0
   1510a:	d1dc      	bne.n	150c6 <estimator_update_ir_estim+0x152>
   1510c:	e013      	b.n	15136 <estimator_update_ir_estim+0x1c2>
   1510e:	68f8      	ldr	r0, [r7, #12]
   15110:	f002 fb76 	bl	17800 <__aeabi_f2d>
   15114:	4602      	mov	r2, r0
   15116:	460b      	mov	r3, r1
   15118:	4610      	mov	r0, r2
   1511a:	4619      	mov	r1, r3
   1511c:	a32e      	add	r3, pc, #184	; (adr r3, 151d8 <estimator_update_ir_estim+0x264>)
   1511e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15122:	f002 fa0f 	bl	17544 <__adddf3>
   15126:	4602      	mov	r2, r0
   15128:	460b      	mov	r3, r1
   1512a:	4610      	mov	r0, r2
   1512c:	4619      	mov	r1, r3
   1512e:	f002 fe9d 	bl	17e6c <__aeabi_d2f>
   15132:	4603      	mov	r3, r0
   15134:	60fb      	str	r3, [r7, #12]
   15136:	68f8      	ldr	r0, [r7, #12]
   15138:	f002 fb62 	bl	17800 <__aeabi_f2d>
   1513c:	4602      	mov	r2, r0
   1513e:	460b      	mov	r3, r1
   15140:	4610      	mov	r0, r2
   15142:	4619      	mov	r1, r3
   15144:	a328      	add	r3, pc, #160	; (adr r3, 151e8 <estimator_update_ir_estim+0x274>)
   15146:	e9d3 2300 	ldrd	r2, r3, [r3]
   1514a:	f002 fe1f 	bl	17d8c <__aeabi_dcmplt>
   1514e:	4603      	mov	r3, r0
   15150:	2b00      	cmp	r3, #0
   15152:	d1dc      	bne.n	1510e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15154:	f24b 1370 	movw	r3, #45424	; 0xb170
   15158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1515c:	881b      	ldrh	r3, [r3, #0]
   1515e:	b21b      	sxth	r3, r3
   15160:	4618      	mov	r0, r3
   15162:	f002 ff8d 	bl	18080 <__aeabi_i2f>
   15166:	4602      	mov	r2, r0
   15168:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   1516c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15170:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15172:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   15176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517a:	68fa      	ldr	r2, [r7, #12]
   1517c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1517e:	68f8      	ldr	r0, [r7, #12]
   15180:	f04f 0100 	mov.w	r1, #0
   15184:	f003 f96e 	bl	18464 <__aeabi_fcmplt>
   15188:	4603      	mov	r3, r0
   1518a:	2b00      	cmp	r3, #0
   1518c:	d003      	beq.n	15196 <estimator_update_ir_estim+0x222>
   1518e:	68fb      	ldr	r3, [r7, #12]
   15190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15194:	e000      	b.n	15198 <estimator_update_ir_estim+0x224>
   15196:	68fb      	ldr	r3, [r7, #12]
   15198:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1519a:	6878      	ldr	r0, [r7, #4]
   1519c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   151a0:	f003 f960 	bl	18464 <__aeabi_fcmplt>
   151a4:	4603      	mov	r3, r0
   151a6:	2b00      	cmp	r3, #0
   151a8:	d100      	bne.n	151ac <estimator_update_ir_estim+0x238>
   151aa:	e128      	b.n	153fe <estimator_update_ir_estim+0x48a>
   151ac:	6878      	ldr	r0, [r7, #4]
   151ae:	f002 fb27 	bl	17800 <__aeabi_f2d>
   151b2:	4602      	mov	r2, r0
   151b4:	460b      	mov	r3, r1
   151b6:	4610      	mov	r0, r2
   151b8:	4619      	mov	r1, r3
   151ba:	a30f      	add	r3, pc, #60	; (adr r3, 151f8 <estimator_update_ir_estim+0x284>)
   151bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   151c0:	f002 fe02 	bl	17dc8 <__aeabi_dcmpgt>
   151c4:	4603      	mov	r3, r0
   151c6:	2b00      	cmp	r3, #0
   151c8:	d11a      	bne.n	15200 <estimator_update_ir_estim+0x28c>
   151ca:	e118      	b.n	153fe <estimator_update_ir_estim+0x48a>
   151cc:	f3af 8000 	nop.w
   151d0:	9999999a 	.word	0x9999999a
   151d4:	3fb99999 	.word	0x3fb99999
   151d8:	54442d18 	.word	0x54442d18
   151dc:	401921fb 	.word	0x401921fb
   151e0:	54442d18 	.word	0x54442d18
   151e4:	400921fb 	.word	0x400921fb
   151e8:	54442d18 	.word	0x54442d18
   151ec:	c00921fb 	.word	0xc00921fb
   151f0:	51eb851f 	.word	0x51eb851f
   151f4:	40239eb8 	.word	0x40239eb8
   151f8:	9999999a 	.word	0x9999999a
   151fc:	3fa99999 	.word	0x3fa99999
   15200:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15208:	881b      	ldrh	r3, [r3, #0]
   1520a:	b21b      	sxth	r3, r3
   1520c:	425b      	negs	r3, r3
   1520e:	0fda      	lsrs	r2, r3, #31
   15210:	4413      	add	r3, r2
   15212:	105b      	asrs	r3, r3, #1
   15214:	461a      	mov	r2, r3
   15216:	f24b 1370 	movw	r3, #45424	; 0xb170
   1521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521e:	881b      	ldrh	r3, [r3, #0]
   15220:	b21b      	sxth	r3, r3
   15222:	429a      	cmp	r2, r3
   15224:	f280 8098 	bge.w	15358 <estimator_update_ir_estim+0x3e4>
   15228:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1522c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15230:	881b      	ldrh	r3, [r3, #0]
   15232:	b21b      	sxth	r3, r3
   15234:	0fda      	lsrs	r2, r3, #31
   15236:	4413      	add	r3, r2
   15238:	105b      	asrs	r3, r3, #1
   1523a:	b29a      	uxth	r2, r3
   1523c:	f24b 1370 	movw	r3, #45424	; 0xb170
   15240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15244:	881b      	ldrh	r3, [r3, #0]
   15246:	b212      	sxth	r2, r2
   15248:	b21b      	sxth	r3, r3
   1524a:	429a      	cmp	r2, r3
   1524c:	f340 8084 	ble.w	15358 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15250:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   15254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15258:	681a      	ldr	r2, [r3, #0]
   1525a:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   1525e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15262:	681b      	ldr	r3, [r3, #0]
   15264:	4610      	mov	r0, r2
   15266:	4619      	mov	r1, r3
   15268:	f002 ff5e 	bl	18128 <__aeabi_fmul>
   1526c:	4603      	mov	r3, r0
   1526e:	4618      	mov	r0, r3
   15270:	f002 fac6 	bl	17800 <__aeabi_f2d>
   15274:	4604      	mov	r4, r0
   15276:	460d      	mov	r5, r1
   15278:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   1527c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15280:	681b      	ldr	r3, [r3, #0]
   15282:	4618      	mov	r0, r3
   15284:	f002 fabc 	bl	17800 <__aeabi_f2d>
   15288:	4602      	mov	r2, r0
   1528a:	460b      	mov	r3, r1
   1528c:	4610      	mov	r0, r2
   1528e:	4619      	mov	r1, r3
   15290:	a367      	add	r3, pc, #412	; (adr r3, 15430 <estimator_update_ir_estim+0x4bc>)
   15292:	e9d3 2300 	ldrd	r2, r3, [r3]
   15296:	f002 fb07 	bl	178a8 <__aeabi_dmul>
   1529a:	4602      	mov	r2, r0
   1529c:	460b      	mov	r3, r1
   1529e:	4620      	mov	r0, r4
   152a0:	4629      	mov	r1, r5
   152a2:	f002 f94f 	bl	17544 <__adddf3>
   152a6:	4602      	mov	r2, r0
   152a8:	460b      	mov	r3, r1
   152aa:	4610      	mov	r0, r2
   152ac:	4619      	mov	r1, r3
   152ae:	f002 fddd 	bl	17e6c <__aeabi_d2f>
   152b2:	4602      	mov	r2, r0
   152b4:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   152b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152bc:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   152be:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   152c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c6:	681a      	ldr	r2, [r3, #0]
   152c8:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   152cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d0:	681b      	ldr	r3, [r3, #0]
   152d2:	4610      	mov	r0, r2
   152d4:	4619      	mov	r1, r3
   152d6:	f002 ff27 	bl	18128 <__aeabi_fmul>
   152da:	4603      	mov	r3, r0
   152dc:	4618      	mov	r0, r3
   152de:	f002 fa8f 	bl	17800 <__aeabi_f2d>
   152e2:	4604      	mov	r4, r0
   152e4:	460d      	mov	r5, r1
   152e6:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   152ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ee:	681b      	ldr	r3, [r3, #0]
   152f0:	4618      	mov	r0, r3
   152f2:	f002 fa85 	bl	17800 <__aeabi_f2d>
   152f6:	4602      	mov	r2, r0
   152f8:	460b      	mov	r3, r1
   152fa:	4610      	mov	r0, r2
   152fc:	4619      	mov	r1, r3
   152fe:	a34c      	add	r3, pc, #304	; (adr r3, 15430 <estimator_update_ir_estim+0x4bc>)
   15300:	e9d3 2300 	ldrd	r2, r3, [r3]
   15304:	f002 fad0 	bl	178a8 <__aeabi_dmul>
   15308:	4602      	mov	r2, r0
   1530a:	460b      	mov	r3, r1
   1530c:	4620      	mov	r0, r4
   1530e:	4629      	mov	r1, r5
   15310:	f002 f918 	bl	17544 <__adddf3>
   15314:	4602      	mov	r2, r0
   15316:	460b      	mov	r3, r1
   15318:	4610      	mov	r0, r2
   1531a:	4619      	mov	r1, r3
   1531c:	f002 fda6 	bl	17e6c <__aeabi_d2f>
   15320:	4602      	mov	r2, r0
   15322:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1532a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1532c:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15334:	681a      	ldr	r2, [r3, #0]
   15336:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   1533a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1533e:	681b      	ldr	r3, [r3, #0]
   15340:	4610      	mov	r0, r2
   15342:	4619      	mov	r1, r3
   15344:	f002 ffa4 	bl	18290 <__aeabi_fdiv>
   15348:	4603      	mov	r3, r0
   1534a:	461a      	mov	r2, r3
   1534c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   15350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15354:	601a      	str	r2, [r3, #0]
   15356:	e052      	b.n	153fe <estimator_update_ir_estim+0x48a>
   15358:	e051      	b.n	153fe <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1535a:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   1535e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15362:	2201      	movs	r2, #1
   15364:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15366:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1536e:	881b      	ldrh	r3, [r3, #0]
   15370:	b21b      	sxth	r3, r3
   15372:	4618      	mov	r0, r3
   15374:	f002 fe84 	bl	18080 <__aeabi_i2f>
   15378:	4603      	mov	r3, r0
   1537a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1537c:	6838      	ldr	r0, [r7, #0]
   1537e:	6839      	ldr	r1, [r7, #0]
   15380:	f002 fed2 	bl	18128 <__aeabi_fmul>
   15384:	4603      	mov	r3, r0
   15386:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15388:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15390:	681b      	ldr	r3, [r3, #0]
   15392:	4618      	mov	r0, r3
   15394:	f002 fa34 	bl	17800 <__aeabi_f2d>
   15398:	4602      	mov	r2, r0
   1539a:	460b      	mov	r3, r1
   1539c:	4610      	mov	r0, r2
   1539e:	4619      	mov	r1, r3
   153a0:	f04f 0200 	mov.w	r2, #0
   153a4:	f04f 0300 	mov.w	r3, #0
   153a8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   153ac:	f002 fa7c 	bl	178a8 <__aeabi_dmul>
   153b0:	4602      	mov	r2, r0
   153b2:	460b      	mov	r3, r1
   153b4:	4614      	mov	r4, r2
   153b6:	461d      	mov	r5, r3
   153b8:	6838      	ldr	r0, [r7, #0]
   153ba:	f002 fa21 	bl	17800 <__aeabi_f2d>
   153be:	4602      	mov	r2, r0
   153c0:	460b      	mov	r3, r1
   153c2:	4620      	mov	r0, r4
   153c4:	4629      	mov	r1, r5
   153c6:	f002 fa6f 	bl	178a8 <__aeabi_dmul>
   153ca:	4602      	mov	r2, r0
   153cc:	460b      	mov	r3, r1
   153ce:	4610      	mov	r0, r2
   153d0:	4619      	mov	r1, r3
   153d2:	f002 fd4b 	bl	17e6c <__aeabi_d2f>
   153d6:	4602      	mov	r2, r0
   153d8:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   153dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153e0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   153e2:	6838      	ldr	r0, [r7, #0]
   153e4:	f04f 0100 	mov.w	r1, #0
   153e8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   153ec:	f002 fe9c 	bl	18128 <__aeabi_fmul>
   153f0:	4603      	mov	r3, r0
   153f2:	461a      	mov	r2, r3
   153f4:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153fc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   153fe:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   15402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15406:	681a      	ldr	r2, [r3, #0]
   15408:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   1540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15410:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15412:	f24b 0340 	movw	r3, #45120	; 0xb040
   15416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1541a:	681a      	ldr	r2, [r3, #0]
   1541c:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   15420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15424:	601a      	str	r2, [r3, #0]
}
   15426:	3710      	adds	r7, #16
   15428:	46bd      	mov	sp, r7
   1542a:	bdb0      	pop	{r4, r5, r7, pc}
   1542c:	f3af 8000 	nop.w
   15430:	d916872b 	.word	0xd916872b
   15434:	3feff7ce 	.word	0x3feff7ce

00015438 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15438:	b580      	push	{r7, lr}
   1543a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1543c:	f24b 0364 	movw	r3, #45156	; 0xb064
   15440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15444:	781b      	ldrb	r3, [r3, #0]
   15446:	f003 0320 	and.w	r3, r3, #32
   1544a:	2b00      	cmp	r3, #0
   1544c:	d044      	beq.n	154d8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1544e:	f24b 035c 	movw	r3, #45148	; 0xb05c
   15452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15456:	681a      	ldr	r2, [r3, #0]
   15458:	f24b 4384 	movw	r3, #46212	; 0xb484
   1545c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15460:	601a      	str	r2, [r3, #0]
   15462:	f24b 0360 	movw	r3, #45152	; 0xb060
   15466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1546a:	681a      	ldr	r2, [r3, #0]
   1546c:	f24b 4388 	movw	r3, #46216	; 0xb488
   15470:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15474:	601a      	str	r2, [r3, #0]
   15476:	f24b 0344 	movw	r3, #45124	; 0xb044
   1547a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1547e:	681a      	ldr	r2, [r3, #0]
   15480:	f24b 438c 	movw	r3, #46220	; 0xb48c
   15484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15488:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1548a:	f24b 0348 	movw	r3, #45128	; 0xb048
   1548e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15492:	681a      	ldr	r2, [r3, #0]
   15494:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   15498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1549c:	601a      	str	r2, [r3, #0]
   1549e:	f24b 0350 	movw	r3, #45136	; 0xb050
   154a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154a6:	681a      	ldr	r2, [r3, #0]
   154a8:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   154ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154b0:	601a      	str	r2, [r3, #0]
   154b2:	f24b 034c 	movw	r3, #45132	; 0xb04c
   154b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ba:	681a      	ldr	r2, [r3, #0]
   154bc:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   154c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   154c6:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   154ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ce:	881b      	ldrh	r3, [r3, #0]
   154d0:	2b00      	cmp	r3, #0
   154d2:	d001      	beq.n	154d8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   154d4:	f7ff fd4e 	bl	14f74 <estimator_update_ir_estim>
  }
}
   154d8:	bd80      	pop	{r7, pc}
   154da:	bf00      	nop

000154dc <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   154dc:	b480      	push	{r7}
   154de:	af00      	add	r7, sp, #0
  
}
   154e0:	46bd      	mov	sp, r7
   154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   154e6:	4770      	bx	lr

000154e8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   154e8:	b5b0      	push	{r4, r5, r7, lr}
   154ea:	b082      	sub	sp, #8
   154ec:	af00      	add	r7, sp, #0
   154ee:	4603      	mov	r3, r0
   154f0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   154f2:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   154f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154fa:	781b      	ldrb	r3, [r3, #0]
   154fc:	2b01      	cmp	r3, #1
   154fe:	f040 80e0 	bne.w	156c2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15502:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   15506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550a:	781b      	ldrb	r3, [r3, #0]
   1550c:	2b02      	cmp	r3, #2
   1550e:	d168      	bne.n	155e2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15510:	79fb      	ldrb	r3, [r7, #7]
   15512:	2b00      	cmp	r3, #0
   15514:	d013      	beq.n	1553e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15516:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1551a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1551e:	881a      	ldrh	r2, [r3, #0]
   15520:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   15524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15528:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1552a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1552e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15532:	895a      	ldrh	r2, [r3, #10]
   15534:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1553c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1553e:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15546:	895b      	ldrh	r3, [r3, #10]
   15548:	b21a      	sxth	r2, r3
   1554a:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   1554e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15552:	881b      	ldrh	r3, [r3, #0]
   15554:	b21b      	sxth	r3, r3
   15556:	1ad3      	subs	r3, r2, r3
   15558:	4618      	mov	r0, r3
   1555a:	f002 fd91 	bl	18080 <__aeabi_i2f>
   1555e:	4603      	mov	r3, r0
   15560:	4618      	mov	r0, r3
   15562:	f002 f94d 	bl	17800 <__aeabi_f2d>
   15566:	4602      	mov	r2, r0
   15568:	460b      	mov	r3, r1
   1556a:	4610      	mov	r0, r2
   1556c:	4619      	mov	r1, r3
   1556e:	f04f 0200 	mov.w	r2, #0
   15572:	f04f 0300 	mov.w	r3, #0
   15576:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1557a:	f002 f995 	bl	178a8 <__aeabi_dmul>
   1557e:	4602      	mov	r2, r0
   15580:	460b      	mov	r3, r1
   15582:	4610      	mov	r0, r2
   15584:	4619      	mov	r1, r3
   15586:	f04f 0200 	mov.w	r2, #0
   1558a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1558e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15592:	f002 fab3 	bl	17afc <__aeabi_ddiv>
   15596:	4602      	mov	r2, r0
   15598:	460b      	mov	r3, r1
   1559a:	4610      	mov	r0, r2
   1559c:	4619      	mov	r1, r3
   1559e:	f002 fc1d 	bl	17ddc <__aeabi_d2iz>
   155a2:	4603      	mov	r3, r0
   155a4:	b29b      	uxth	r3, r3
   155a6:	b29a      	uxth	r2, r3
   155a8:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   155ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155b0:	881b      	ldrh	r3, [r3, #0]
   155b2:	b29b      	uxth	r3, r3
   155b4:	4413      	add	r3, r2
   155b6:	b29b      	uxth	r3, r3
   155b8:	b29a      	uxth	r2, r3
   155ba:	f240 33f4 	movw	r3, #1012	; 0x3f4
   155be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155c2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   155c4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   155c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155cc:	881b      	ldrh	r3, [r3, #0]
   155ce:	b21b      	sxth	r3, r3
   155d0:	4618      	mov	r0, r3
   155d2:	f002 fd55 	bl	18080 <__aeabi_i2f>
   155d6:	4602      	mov	r2, r0
   155d8:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   155dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   155e2:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   155e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ea:	781b      	ldrb	r3, [r3, #0]
   155ec:	2b02      	cmp	r3, #2
   155ee:	d168      	bne.n	156c2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   155f0:	79fb      	ldrb	r3, [r7, #7]
   155f2:	2b00      	cmp	r3, #0
   155f4:	d013      	beq.n	1561e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   155f6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   155fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155fe:	881a      	ldrh	r2, [r3, #0]
   15600:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   15604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15608:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1560a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1560e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15612:	899a      	ldrh	r2, [r3, #12]
   15614:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1561c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1561e:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15626:	899b      	ldrh	r3, [r3, #12]
   15628:	b21a      	sxth	r2, r3
   1562a:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   1562e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15632:	881b      	ldrh	r3, [r3, #0]
   15634:	b21b      	sxth	r3, r3
   15636:	1ad3      	subs	r3, r2, r3
   15638:	4618      	mov	r0, r3
   1563a:	f002 fd21 	bl	18080 <__aeabi_i2f>
   1563e:	4603      	mov	r3, r0
   15640:	4618      	mov	r0, r3
   15642:	f002 f8dd 	bl	17800 <__aeabi_f2d>
   15646:	4602      	mov	r2, r0
   15648:	460b      	mov	r3, r1
   1564a:	4610      	mov	r0, r2
   1564c:	4619      	mov	r1, r3
   1564e:	f04f 0200 	mov.w	r2, #0
   15652:	f04f 0300 	mov.w	r3, #0
   15656:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1565a:	f002 f925 	bl	178a8 <__aeabi_dmul>
   1565e:	4602      	mov	r2, r0
   15660:	460b      	mov	r3, r1
   15662:	4610      	mov	r0, r2
   15664:	4619      	mov	r1, r3
   15666:	f04f 0200 	mov.w	r2, #0
   1566a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1566e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15672:	f002 fa43 	bl	17afc <__aeabi_ddiv>
   15676:	4602      	mov	r2, r0
   15678:	460b      	mov	r3, r1
   1567a:	4610      	mov	r0, r2
   1567c:	4619      	mov	r1, r3
   1567e:	f002 fbad 	bl	17ddc <__aeabi_d2iz>
   15682:	4603      	mov	r3, r0
   15684:	b29b      	uxth	r3, r3
   15686:	b29a      	uxth	r2, r3
   15688:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   1568c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15690:	881b      	ldrh	r3, [r3, #0]
   15692:	b29b      	uxth	r3, r3
   15694:	4413      	add	r3, r2
   15696:	b29b      	uxth	r3, r3
   15698:	b29a      	uxth	r2, r3
   1569a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156a2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   156a4:	f240 33f2 	movw	r3, #1010	; 0x3f2
   156a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ac:	881b      	ldrh	r3, [r3, #0]
   156ae:	b21b      	sxth	r3, r3
   156b0:	4618      	mov	r0, r3
   156b2:	f002 fce5 	bl	18080 <__aeabi_i2f>
   156b6:	4602      	mov	r2, r0
   156b8:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   156bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156c0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   156c2:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   156c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ca:	781b      	ldrb	r3, [r3, #0]
   156cc:	2b02      	cmp	r3, #2
   156ce:	f040 80da 	bne.w	15886 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156d2:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   156d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156da:	781b      	ldrb	r3, [r3, #0]
   156dc:	2b02      	cmp	r3, #2
   156de:	d165      	bne.n	157ac <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   156e0:	79fb      	ldrb	r3, [r7, #7]
   156e2:	2b00      	cmp	r3, #0
   156e4:	d013      	beq.n	1570e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   156e6:	f240 4308 	movw	r3, #1032	; 0x408
   156ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ee:	681a      	ldr	r2, [r3, #0]
   156f0:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   156f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156f8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   156fa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   156fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15702:	895a      	ldrh	r2, [r3, #10]
   15704:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1570c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1570e:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   15712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	4618      	mov	r0, r3
   1571a:	f002 f871 	bl	17800 <__aeabi_f2d>
   1571e:	4604      	mov	r4, r0
   15720:	460d      	mov	r5, r1
   15722:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1572a:	895b      	ldrh	r3, [r3, #10]
   1572c:	b21a      	sxth	r2, r3
   1572e:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15736:	881b      	ldrh	r3, [r3, #0]
   15738:	b21b      	sxth	r3, r3
   1573a:	1ad3      	subs	r3, r2, r3
   1573c:	4618      	mov	r0, r3
   1573e:	f002 fc9f 	bl	18080 <__aeabi_i2f>
   15742:	4603      	mov	r3, r0
   15744:	4618      	mov	r0, r3
   15746:	f002 f85b 	bl	17800 <__aeabi_f2d>
   1574a:	4602      	mov	r2, r0
   1574c:	460b      	mov	r3, r1
   1574e:	4610      	mov	r0, r2
   15750:	4619      	mov	r1, r3
   15752:	a34f      	add	r3, pc, #316	; (adr r3, 15890 <inflight_calib+0x3a8>)
   15754:	e9d3 2300 	ldrd	r2, r3, [r3]
   15758:	f002 f8a6 	bl	178a8 <__aeabi_dmul>
   1575c:	4602      	mov	r2, r0
   1575e:	460b      	mov	r3, r1
   15760:	4610      	mov	r0, r2
   15762:	4619      	mov	r1, r3
   15764:	f04f 0200 	mov.w	r2, #0
   15768:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1576c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15770:	f002 f9c4 	bl	17afc <__aeabi_ddiv>
   15774:	4602      	mov	r2, r0
   15776:	460b      	mov	r3, r1
   15778:	4620      	mov	r0, r4
   1577a:	4629      	mov	r1, r5
   1577c:	f001 fee2 	bl	17544 <__adddf3>
   15780:	4602      	mov	r2, r0
   15782:	460b      	mov	r3, r1
   15784:	4610      	mov	r0, r2
   15786:	4619      	mov	r1, r3
   15788:	f002 fb70 	bl	17e6c <__aeabi_d2f>
   1578c:	4602      	mov	r2, r0
   1578e:	f240 4308 	movw	r3, #1032	; 0x408
   15792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15796:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15798:	f240 4308 	movw	r3, #1032	; 0x408
   1579c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157a0:	681a      	ldr	r2, [r3, #0]
   157a2:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   157a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157aa:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157ac:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   157b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157b4:	781b      	ldrb	r3, [r3, #0]
   157b6:	2b02      	cmp	r3, #2
   157b8:	d165      	bne.n	15886 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   157ba:	79fb      	ldrb	r3, [r7, #7]
   157bc:	2b00      	cmp	r3, #0
   157be:	d013      	beq.n	157e8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   157c0:	f240 430c 	movw	r3, #1036	; 0x40c
   157c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157c8:	681a      	ldr	r2, [r3, #0]
   157ca:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   157ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157d2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   157d4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   157d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157dc:	899a      	ldrh	r2, [r3, #12]
   157de:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   157e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157e6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   157e8:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   157ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f0:	681b      	ldr	r3, [r3, #0]
   157f2:	4618      	mov	r0, r3
   157f4:	f002 f804 	bl	17800 <__aeabi_f2d>
   157f8:	4604      	mov	r4, r0
   157fa:	460d      	mov	r5, r1
   157fc:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15804:	899b      	ldrh	r3, [r3, #12]
   15806:	b21a      	sxth	r2, r3
   15808:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   1580c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15810:	881b      	ldrh	r3, [r3, #0]
   15812:	b21b      	sxth	r3, r3
   15814:	1ad3      	subs	r3, r2, r3
   15816:	4618      	mov	r0, r3
   15818:	f002 fc32 	bl	18080 <__aeabi_i2f>
   1581c:	4603      	mov	r3, r0
   1581e:	4618      	mov	r0, r3
   15820:	f001 ffee 	bl	17800 <__aeabi_f2d>
   15824:	4602      	mov	r2, r0
   15826:	460b      	mov	r3, r1
   15828:	4610      	mov	r0, r2
   1582a:	4619      	mov	r1, r3
   1582c:	a31a      	add	r3, pc, #104	; (adr r3, 15898 <inflight_calib+0x3b0>)
   1582e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15832:	f002 f839 	bl	178a8 <__aeabi_dmul>
   15836:	4602      	mov	r2, r0
   15838:	460b      	mov	r3, r1
   1583a:	4610      	mov	r0, r2
   1583c:	4619      	mov	r1, r3
   1583e:	f04f 0200 	mov.w	r2, #0
   15842:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15846:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1584a:	f002 f957 	bl	17afc <__aeabi_ddiv>
   1584e:	4602      	mov	r2, r0
   15850:	460b      	mov	r3, r1
   15852:	4620      	mov	r0, r4
   15854:	4629      	mov	r1, r5
   15856:	f001 fe75 	bl	17544 <__adddf3>
   1585a:	4602      	mov	r2, r0
   1585c:	460b      	mov	r3, r1
   1585e:	4610      	mov	r0, r2
   15860:	4619      	mov	r1, r3
   15862:	f002 fb03 	bl	17e6c <__aeabi_d2f>
   15866:	4602      	mov	r2, r0
   15868:	f240 430c 	movw	r3, #1036	; 0x40c
   1586c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15870:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15872:	f240 430c 	movw	r3, #1036	; 0x40c
   15876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1587a:	681a      	ldr	r2, [r3, #0]
   1587c:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   15880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15884:	601a      	str	r2, [r3, #0]
    }
  }
}
   15886:	3708      	adds	r7, #8
   15888:	46bd      	mov	sp, r7
   1588a:	bdb0      	pop	{r4, r5, r7, pc}
   1588c:	f3af 8000 	nop.w
   15890:	9999999a 	.word	0x9999999a
   15894:	3fb99999 	.word	0x3fb99999
   15898:	9999999a 	.word	0x9999999a
   1589c:	bfc99999 	.word	0xbfc99999

000158a0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   158a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   158a4:	b08e      	sub	sp, #56	; 0x38
   158a6:	af00      	add	r7, sp, #0
   158a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   158ac:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   158b0:	a357      	add	r3, pc, #348	; (adr r3, 15a10 <pp_atan2+0x170>)
   158b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   158b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   158ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158be:	f04f 0200 	mov.w	r2, #0
   158c2:	f04f 0300 	mov.w	r3, #0
   158c6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   158ca:	f001 ffed 	bl	178a8 <__aeabi_dmul>
   158ce:	4602      	mov	r2, r0
   158d0:	460b      	mov	r3, r1
   158d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   158d6:	e9d7 0100 	ldrd	r0, r1, [r7]
   158da:	f04f 0200 	mov.w	r2, #0
   158de:	f04f 0300 	mov.w	r3, #0
   158e2:	f002 fa53 	bl	17d8c <__aeabi_dcmplt>
   158e6:	4603      	mov	r3, r0
   158e8:	2b00      	cmp	r3, #0
   158ea:	d009      	beq.n	15900 <pp_atan2+0x60>
   158ec:	a14a      	add	r1, pc, #296	; (adr r1, 15a18 <pp_atan2+0x178>)
   158ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   158f2:	e9d7 2300 	ldrd	r2, r3, [r7]
   158f6:	f001 fe23 	bl	17540 <__aeabi_dsub>
   158fa:	4602      	mov	r2, r0
   158fc:	460b      	mov	r3, r1
   158fe:	e008      	b.n	15912 <pp_atan2+0x72>
   15900:	e9d7 0100 	ldrd	r0, r1, [r7]
   15904:	a344      	add	r3, pc, #272	; (adr r3, 15a18 <pp_atan2+0x178>)
   15906:	e9d3 2300 	ldrd	r2, r3, [r3]
   1590a:	f001 fe1b 	bl	17544 <__adddf3>
   1590e:	4602      	mov	r2, r0
   15910:	460b      	mov	r3, r1
   15912:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1591a:	f04f 0200 	mov.w	r2, #0
   1591e:	f04f 0300 	mov.w	r3, #0
   15922:	f002 fa51 	bl	17dc8 <__aeabi_dcmpgt>
   15926:	4603      	mov	r3, r0
   15928:	2b00      	cmp	r3, #0
   1592a:	d02a      	beq.n	15982 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   1592c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15934:	f001 fe04 	bl	17540 <__aeabi_dsub>
   15938:	4602      	mov	r2, r0
   1593a:	460b      	mov	r3, r1
   1593c:	4690      	mov	r8, r2
   1593e:	4699      	mov	r9, r3
   15940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15948:	f001 fdfc 	bl	17544 <__adddf3>
   1594c:	4602      	mov	r2, r0
   1594e:	460b      	mov	r3, r1
   15950:	4640      	mov	r0, r8
   15952:	4649      	mov	r1, r9
   15954:	f002 f8d2 	bl	17afc <__aeabi_ddiv>
   15958:	4602      	mov	r2, r0
   1595a:	460b      	mov	r3, r1
   1595c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15960:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15964:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15968:	f001 ff9e 	bl	178a8 <__aeabi_dmul>
   1596c:	4602      	mov	r2, r0
   1596e:	460b      	mov	r3, r1
   15970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15974:	f001 fde4 	bl	17540 <__aeabi_dsub>
   15978:	4602      	mov	r2, r0
   1597a:	460b      	mov	r3, r1
   1597c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15980:	e029      	b.n	159d6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1598a:	f001 fddb 	bl	17544 <__adddf3>
   1598e:	4602      	mov	r2, r0
   15990:	460b      	mov	r3, r1
   15992:	4690      	mov	r8, r2
   15994:	4699      	mov	r9, r3
   15996:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1599e:	f001 fdcf 	bl	17540 <__aeabi_dsub>
   159a2:	4602      	mov	r2, r0
   159a4:	460b      	mov	r3, r1
   159a6:	4640      	mov	r0, r8
   159a8:	4649      	mov	r1, r9
   159aa:	f002 f8a7 	bl	17afc <__aeabi_ddiv>
   159ae:	4602      	mov	r2, r0
   159b0:	460b      	mov	r3, r1
   159b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   159b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   159be:	f001 ff73 	bl	178a8 <__aeabi_dmul>
   159c2:	4602      	mov	r2, r0
   159c4:	460b      	mov	r3, r1
   159c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   159ca:	f001 fdb9 	bl	17540 <__aeabi_dsub>
   159ce:	4602      	mov	r2, r0
   159d0:	460b      	mov	r3, r1
   159d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   159d6:	e9d7 0100 	ldrd	r0, r1, [r7]
   159da:	f04f 0200 	mov.w	r2, #0
   159de:	f04f 0300 	mov.w	r3, #0
   159e2:	f002 f9d3 	bl	17d8c <__aeabi_dcmplt>
   159e6:	4603      	mov	r3, r0
   159e8:	2b00      	cmp	r3, #0
   159ea:	d004      	beq.n	159f6 <pp_atan2+0x156>
		return (-angle);
   159ec:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   159ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   159f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   159f4:	e001      	b.n	159fa <pp_atan2+0x15a>
	else
		return angle;
   159f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   159fa:	4622      	mov	r2, r4
   159fc:	462b      	mov	r3, r5
}
   159fe:	4610      	mov	r0, r2
   15a00:	4619      	mov	r1, r3
   15a02:	3738      	adds	r7, #56	; 0x38
   15a04:	46bd      	mov	sp, r7
   15a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15a0a:	bf00      	nop
   15a0c:	f3af 8000 	nop.w
   15a10:	54442d18 	.word	0x54442d18
   15a14:	3fe921fb 	.word	0x3fe921fb
   15a18:	d9d7bdbb 	.word	0xd9d7bdbb
   15a1c:	3ddb7cdf 	.word	0x3ddb7cdf

00015a20 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15a20:	b5b0      	push	{r4, r5, r7, lr}
   15a22:	b08c      	sub	sp, #48	; 0x30
   15a24:	af00      	add	r7, sp, #0
   15a26:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15a2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15a32:	2301      	movs	r3, #1
   15a34:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15a36:	e00a      	b.n	15a4e <pp_sin+0x2e>
   15a38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a3c:	a35a      	add	r3, pc, #360	; (adr r3, 15ba8 <pp_sin+0x188>)
   15a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a42:	f001 fd7f 	bl	17544 <__adddf3>
   15a46:	4602      	mov	r2, r0
   15a48:	460b      	mov	r3, r1
   15a4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a52:	a357      	add	r3, pc, #348	; (adr r3, 15bb0 <pp_sin+0x190>)
   15a54:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a58:	f002 f998 	bl	17d8c <__aeabi_dcmplt>
   15a5c:	4603      	mov	r3, r0
   15a5e:	2b00      	cmp	r3, #0
   15a60:	d1ea      	bne.n	15a38 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15a62:	e00a      	b.n	15a7a <pp_sin+0x5a>
   15a64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a68:	a34f      	add	r3, pc, #316	; (adr r3, 15ba8 <pp_sin+0x188>)
   15a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a6e:	f001 fd67 	bl	17540 <__aeabi_dsub>
   15a72:	4602      	mov	r2, r0
   15a74:	460b      	mov	r3, r1
   15a76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15a7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a7e:	a34e      	add	r3, pc, #312	; (adr r3, 15bb8 <pp_sin+0x198>)
   15a80:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a84:	f002 f9a0 	bl	17dc8 <__aeabi_dcmpgt>
   15a88:	4603      	mov	r3, r0
   15a8a:	2b00      	cmp	r3, #0
   15a8c:	d1ea      	bne.n	15a64 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15a8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a92:	a34b      	add	r3, pc, #300	; (adr r3, 15bc0 <pp_sin+0x1a0>)
   15a94:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a98:	f002 f996 	bl	17dc8 <__aeabi_dcmpgt>
   15a9c:	4603      	mov	r3, r0
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d00d      	beq.n	15abe <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15aa6:	a348      	add	r3, pc, #288	; (adr r3, 15bc8 <pp_sin+0x1a8>)
   15aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aac:	f001 fd48 	bl	17540 <__aeabi_dsub>
   15ab0:	4602      	mov	r2, r0
   15ab2:	460b      	mov	r3, r1
   15ab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15ab8:	f04f 33ff 	mov.w	r3, #4294967295
   15abc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ac2:	a343      	add	r3, pc, #268	; (adr r3, 15bd0 <pp_sin+0x1b0>)
   15ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ac8:	f002 f818 	bl	17afc <__aeabi_ddiv>
   15acc:	4602      	mov	r2, r0
   15ace:	460b      	mov	r3, r1
   15ad0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15ad4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15adc:	f001 fee4 	bl	178a8 <__aeabi_dmul>
   15ae0:	4602      	mov	r2, r0
   15ae2:	460b      	mov	r3, r1
   15ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15ae8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15aec:	a33a      	add	r3, pc, #232	; (adr r3, 15bd8 <pp_sin+0x1b8>)
   15aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15af2:	f001 fed9 	bl	178a8 <__aeabi_dmul>
   15af6:	4602      	mov	r2, r0
   15af8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15afa:	4610      	mov	r0, r2
   15afc:	4619      	mov	r1, r3
   15afe:	a338      	add	r3, pc, #224	; (adr r3, 15be0 <pp_sin+0x1c0>)
   15b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b04:	f001 fd1c 	bl	17540 <__aeabi_dsub>
   15b08:	4602      	mov	r2, r0
   15b0a:	460b      	mov	r3, r1
   15b0c:	4610      	mov	r0, r2
   15b0e:	4619      	mov	r1, r3
   15b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b14:	f001 fec8 	bl	178a8 <__aeabi_dmul>
   15b18:	4602      	mov	r2, r0
   15b1a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15b1c:	4610      	mov	r0, r2
   15b1e:	4619      	mov	r1, r3
   15b20:	a331      	add	r3, pc, #196	; (adr r3, 15be8 <pp_sin+0x1c8>)
   15b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b26:	f001 fd0d 	bl	17544 <__adddf3>
   15b2a:	4602      	mov	r2, r0
   15b2c:	460b      	mov	r3, r1
   15b2e:	4610      	mov	r0, r2
   15b30:	4619      	mov	r1, r3
   15b32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b36:	f001 feb7 	bl	178a8 <__aeabi_dmul>
   15b3a:	4602      	mov	r2, r0
   15b3c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15b3e:	4610      	mov	r0, r2
   15b40:	4619      	mov	r1, r3
   15b42:	a32b      	add	r3, pc, #172	; (adr r3, 15bf0 <pp_sin+0x1d0>)
   15b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b48:	f001 fcfa 	bl	17540 <__aeabi_dsub>
   15b4c:	4602      	mov	r2, r0
   15b4e:	460b      	mov	r3, r1
   15b50:	4610      	mov	r0, r2
   15b52:	4619      	mov	r1, r3
   15b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b58:	f001 fea6 	bl	178a8 <__aeabi_dmul>
   15b5c:	4602      	mov	r2, r0
   15b5e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15b60:	4610      	mov	r0, r2
   15b62:	4619      	mov	r1, r3
   15b64:	a324      	add	r3, pc, #144	; (adr r3, 15bf8 <pp_sin+0x1d8>)
   15b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b6a:	f001 fceb 	bl	17544 <__adddf3>
   15b6e:	4602      	mov	r2, r0
   15b70:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15b72:	4610      	mov	r0, r2
   15b74:	4619      	mov	r1, r3
   15b76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b7a:	f001 fe95 	bl	178a8 <__aeabi_dmul>
   15b7e:	4602      	mov	r2, r0
   15b80:	460b      	mov	r3, r1
   15b82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b88:	2b00      	cmp	r3, #0
   15b8a:	da04      	bge.n	15b96 <pp_sin+0x176>
   15b8c:	68bc      	ldr	r4, [r7, #8]
   15b8e:	68fb      	ldr	r3, [r7, #12]
   15b90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15b94:	e001      	b.n	15b9a <pp_sin+0x17a>
   15b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15b9a:	4622      	mov	r2, r4
   15b9c:	462b      	mov	r3, r5
}
   15b9e:	4610      	mov	r0, r2
   15ba0:	4619      	mov	r1, r3
   15ba2:	3730      	adds	r7, #48	; 0x30
   15ba4:	46bd      	mov	sp, r7
   15ba6:	bdb0      	pop	{r4, r5, r7, pc}
   15ba8:	54442d18 	.word	0x54442d18
   15bac:	401921fb 	.word	0x401921fb
   15bb0:	54442d18 	.word	0x54442d18
   15bb4:	bff921fb 	.word	0xbff921fb
   15bb8:	7f3321d2 	.word	0x7f3321d2
   15bbc:	4012d97c 	.word	0x4012d97c
   15bc0:	54442d18 	.word	0x54442d18
   15bc4:	3ff921fb 	.word	0x3ff921fb
   15bc8:	54442d18 	.word	0x54442d18
   15bcc:	400921fb 	.word	0x400921fb
   15bd0:	5443d6f4 	.word	0x5443d6f4
   15bd4:	3ff921fb 	.word	0x3ff921fb
   15bd8:	48a890af 	.word	0x48a890af
   15bdc:	3f23daf7 	.word	0x3f23daf7
   15be0:	645b6d0e 	.word	0x645b6d0e
   15be4:	3f7324cc 	.word	0x3f7324cc
   15be8:	f65619a5 	.word	0xf65619a5
   15bec:	3fb4668a 	.word	0x3fb4668a
   15bf0:	16acf9cd 	.word	0x16acf9cd
   15bf4:	3fe4abbc 	.word	0x3fe4abbc
   15bf8:	520817f7 	.word	0x520817f7
   15bfc:	3ff921fb 	.word	0x3ff921fb

00015c00 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15c00:	b480      	push	{r7}
   15c02:	b083      	sub	sp, #12
   15c04:	af00      	add	r7, sp, #0
   15c06:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15c0a:	4610      	mov	r0, r2
   15c0c:	4619      	mov	r1, r3
   15c0e:	370c      	adds	r7, #12
   15c10:	46bd      	mov	sp, r7
   15c12:	f85d 7b04 	ldr.w	r7, [sp], #4
   15c16:	4770      	bx	lr

00015c18 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15c18:	b480      	push	{r7}
   15c1a:	b083      	sub	sp, #12
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	4603      	mov	r3, r0
   15c20:	6039      	str	r1, [r7, #0]
   15c22:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15c24:	79fa      	ldrb	r2, [r7, #7]
   15c26:	f24b 5308 	movw	r3, #46344	; 0xb508
   15c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c2e:	6839      	ldr	r1, [r7, #0]
   15c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15c34:	370c      	adds	r7, #12
   15c36:	46bd      	mov	sp, r7
   15c38:	f85d 7b04 	ldr.w	r7, [sp], #4
   15c3c:	4770      	bx	lr
   15c3e:	bf00      	nop

00015c40 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15c40:	b480      	push	{r7}
   15c42:	b083      	sub	sp, #12
   15c44:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15c46:	f242 0315 	movw	r3, #8213	; 0x2015
   15c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c4e:	2200      	movs	r2, #0
   15c50:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15c52:	f242 0314 	movw	r3, #8212	; 0x2014
   15c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c5a:	2200      	movs	r2, #0
   15c5c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15c5e:	f242 0307 	movw	r3, #8199	; 0x2007
   15c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c66:	22c0      	movs	r2, #192	; 0xc0
   15c68:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15c6a:	f242 0306 	movw	r3, #8198	; 0x2006
   15c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c72:	22cf      	movs	r2, #207	; 0xcf
   15c74:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15c76:	2300      	movs	r3, #0
   15c78:	71fb      	strb	r3, [r7, #7]
   15c7a:	e00a      	b.n	15c92 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15c7c:	79fa      	ldrb	r2, [r7, #7]
   15c7e:	f24b 5308 	movw	r3, #46344	; 0xb508
   15c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c86:	2100      	movs	r1, #0
   15c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15c8c:	79fb      	ldrb	r3, [r7, #7]
   15c8e:	3301      	adds	r3, #1
   15c90:	71fb      	strb	r3, [r7, #7]
   15c92:	79fb      	ldrb	r3, [r7, #7]
   15c94:	2b07      	cmp	r3, #7
   15c96:	d9f1      	bls.n	15c7c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15c98:	370c      	adds	r7, #12
   15c9a:	46bd      	mov	sp, r7
   15c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ca0:	4770      	bx	lr
   15ca2:	bf00      	nop

00015ca4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15ca4:	b480      	push	{r7}
   15ca6:	b083      	sub	sp, #12
   15ca8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15caa:	f242 0326 	movw	r3, #8230	; 0x2026
   15cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cb2:	881b      	ldrh	r3, [r3, #0]
   15cb4:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15cb6:	f24b 5364 	movw	r3, #46436	; 0xb564
   15cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cbe:	881b      	ldrh	r3, [r3, #0]
   15cc0:	88fa      	ldrh	r2, [r7, #6]
   15cc2:	1ad3      	subs	r3, r2, r3
   15cc4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15cc6:	f24b 5364 	movw	r3, #46436	; 0xb564
   15cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cce:	88fa      	ldrh	r2, [r7, #6]
   15cd0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15cd2:	f24b 5366 	movw	r3, #46438	; 0xb566
   15cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cda:	781b      	ldrb	r3, [r3, #0]
   15cdc:	2b00      	cmp	r3, #0
   15cde:	d11e      	bne.n	15d1e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15ce0:	f242 0324 	movw	r3, #8228	; 0x2024
   15ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ce8:	781b      	ldrb	r3, [r3, #0]
   15cea:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15cec:	f24b 5367 	movw	r3, #46439	; 0xb567
   15cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf4:	781b      	ldrb	r3, [r3, #0]
   15cf6:	78fa      	ldrb	r2, [r7, #3]
   15cf8:	1ad3      	subs	r3, r2, r3
   15cfa:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15cfc:	f24b 5367 	movw	r3, #46439	; 0xb567
   15d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d04:	78fa      	ldrb	r2, [r7, #3]
   15d06:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15d08:	78bb      	ldrb	r3, [r7, #2]
   15d0a:	2b6d      	cmp	r3, #109	; 0x6d
   15d0c:	d906      	bls.n	15d1c <__vector_34+0x78>
      state = 1;
   15d0e:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d16:	2201      	movs	r2, #1
   15d18:	701a      	strb	r2, [r3, #0]
   15d1a:	e053      	b.n	15dc4 <__vector_34+0x120>
   15d1c:	e052      	b.n	15dc4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15d1e:	88bb      	ldrh	r3, [r7, #4]
   15d20:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15d24:	d304      	bcc.n	15d30 <__vector_34+0x8c>
   15d26:	88ba      	ldrh	r2, [r7, #4]
   15d28:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15d2c:	429a      	cmp	r2, r3
   15d2e:	d911      	bls.n	15d54 <__vector_34+0xb0>
      RestartPpmCycle();
   15d30:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d38:	2200      	movs	r2, #0
   15d3a:	701a      	strb	r2, [r3, #0]
   15d3c:	f242 0324 	movw	r3, #8228	; 0x2024
   15d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d44:	781b      	ldrb	r3, [r3, #0]
   15d46:	b2da      	uxtb	r2, r3
   15d48:	f24b 5367 	movw	r3, #46439	; 0xb567
   15d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d50:	701a      	strb	r2, [r3, #0]
   15d52:	e038      	b.n	15dc6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15d54:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	1e5a      	subs	r2, r3, #1
   15d60:	f24b 5328 	movw	r3, #46376	; 0xb528
   15d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d68:	88b9      	ldrh	r1, [r7, #4]
   15d6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15d6e:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d76:	781b      	ldrb	r3, [r3, #0]
   15d78:	2b08      	cmp	r3, #8
   15d7a:	d917      	bls.n	15dac <__vector_34+0x108>
      ppm_valid	= 1;
   15d7c:	f24b 5363 	movw	r3, #46435	; 0xb563
   15d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d84:	2201      	movs	r2, #1
   15d86:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15d88:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d90:	2200      	movs	r2, #0
   15d92:	701a      	strb	r2, [r3, #0]
   15d94:	f242 0324 	movw	r3, #8228	; 0x2024
   15d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d9c:	781b      	ldrb	r3, [r3, #0]
   15d9e:	b2da      	uxtb	r2, r3
   15da0:	f24b 5367 	movw	r3, #46439	; 0xb567
   15da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da8:	701a      	strb	r2, [r3, #0]
   15daa:	e00c      	b.n	15dc6 <__vector_34+0x122>
    } else 
      state++;
   15dac:	f24b 5366 	movw	r3, #46438	; 0xb566
   15db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	3301      	adds	r3, #1
   15db8:	b2da      	uxtb	r2, r3
   15dba:	f24b 5366 	movw	r3, #46438	; 0xb566
   15dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dc2:	701a      	strb	r2, [r3, #0]
  }
  return;
   15dc4:	bf00      	nop
}
   15dc6:	370c      	adds	r7, #12
   15dc8:	46bd      	mov	sp, r7
   15dca:	f85d 7b04 	ldr.w	r7, [sp], #4
   15dce:	4770      	bx	lr

00015dd0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15dd0:	b590      	push	{r4, r7, lr}
   15dd2:	b083      	sub	sp, #12
   15dd4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15dd6:	f24b 5328 	movw	r3, #46376	; 0xb528
   15dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dde:	881b      	ldrh	r3, [r3, #0]
   15de0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15de4:	b29b      	uxth	r3, r3
   15de6:	80fb      	strh	r3, [r7, #6]
   15de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15dec:	4618      	mov	r0, r3
   15dee:	f002 f947 	bl	18080 <__aeabi_i2f>
   15df2:	4603      	mov	r3, r0
   15df4:	4618      	mov	r0, r3
   15df6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15dfa:	f002 f995 	bl	18128 <__aeabi_fmul>
   15dfe:	4603      	mov	r3, r0
   15e00:	4618      	mov	r0, r3
   15e02:	f002 fb57 	bl	184b4 <__aeabi_f2iz>
   15e06:	4603      	mov	r3, r0
   15e08:	b29a      	uxth	r2, r3
   15e0a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e12:	801a      	strh	r2, [r3, #0]
   15e14:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e1c:	881b      	ldrh	r3, [r3, #0]
   15e1e:	b21b      	sxth	r3, r3
   15e20:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e24:	dd07      	ble.n	15e36 <last_radio_from_ppm+0x66>
   15e26:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e2e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15e32:	801a      	strh	r2, [r3, #0]
   15e34:	e00d      	b.n	15e52 <last_radio_from_ppm+0x82>
   15e36:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e3e:	881b      	ldrh	r3, [r3, #0]
   15e40:	b21b      	sxth	r3, r3
   15e42:	2b00      	cmp	r3, #0
   15e44:	da05      	bge.n	15e52 <last_radio_from_ppm+0x82>
   15e46:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4e:	2200      	movs	r2, #0
   15e50:	801a      	strh	r2, [r3, #0]
   15e52:	f24b 5328 	movw	r3, #46376	; 0xb528
   15e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e5a:	885b      	ldrh	r3, [r3, #2]
   15e5c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e60:	b29b      	uxth	r3, r3
   15e62:	80fb      	strh	r3, [r7, #6]
   15e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e68:	4618      	mov	r0, r3
   15e6a:	f002 f909 	bl	18080 <__aeabi_i2f>
   15e6e:	4603      	mov	r3, r0
   15e70:	4618      	mov	r0, r3
   15e72:	f002 fb1f 	bl	184b4 <__aeabi_f2iz>
   15e76:	4603      	mov	r3, r0
   15e78:	b29a      	uxth	r2, r3
   15e7a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e82:	805a      	strh	r2, [r3, #2]
   15e84:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e8c:	885b      	ldrh	r3, [r3, #2]
   15e8e:	b21b      	sxth	r3, r3
   15e90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e94:	dd07      	ble.n	15ea6 <last_radio_from_ppm+0xd6>
   15e96:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15ea2:	805a      	strh	r2, [r3, #2]
   15ea4:	e00f      	b.n	15ec6 <last_radio_from_ppm+0xf6>
   15ea6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eae:	885b      	ldrh	r3, [r3, #2]
   15eb0:	b21b      	sxth	r3, r3
   15eb2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15eb6:	da06      	bge.n	15ec6 <last_radio_from_ppm+0xf6>
   15eb8:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ec0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15ec4:	805a      	strh	r2, [r3, #2]
   15ec6:	f24b 5328 	movw	r3, #46376	; 0xb528
   15eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ece:	889b      	ldrh	r3, [r3, #4]
   15ed0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ed4:	b29b      	uxth	r3, r3
   15ed6:	80fb      	strh	r3, [r7, #6]
   15ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15edc:	4618      	mov	r0, r3
   15ede:	f002 f8cf 	bl	18080 <__aeabi_i2f>
   15ee2:	4603      	mov	r3, r0
   15ee4:	4618      	mov	r0, r3
   15ee6:	f002 fae5 	bl	184b4 <__aeabi_f2iz>
   15eea:	4603      	mov	r3, r0
   15eec:	b29a      	uxth	r2, r3
   15eee:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef6:	809a      	strh	r2, [r3, #4]
   15ef8:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f00:	889b      	ldrh	r3, [r3, #4]
   15f02:	b21b      	sxth	r3, r3
   15f04:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f08:	dd07      	ble.n	15f1a <last_radio_from_ppm+0x14a>
   15f0a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f12:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f16:	809a      	strh	r2, [r3, #4]
   15f18:	e00f      	b.n	15f3a <last_radio_from_ppm+0x16a>
   15f1a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f22:	889b      	ldrh	r3, [r3, #4]
   15f24:	b21b      	sxth	r3, r3
   15f26:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f2a:	da06      	bge.n	15f3a <last_radio_from_ppm+0x16a>
   15f2c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f34:	f64d 2280 	movw	r2, #55936	; 0xda80
   15f38:	809a      	strh	r2, [r3, #4]
   15f3a:	f24b 5328 	movw	r3, #46376	; 0xb528
   15f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f42:	88db      	ldrh	r3, [r3, #6]
   15f44:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f48:	b29b      	uxth	r3, r3
   15f4a:	80fb      	strh	r3, [r7, #6]
   15f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f50:	4618      	mov	r0, r3
   15f52:	f002 f895 	bl	18080 <__aeabi_i2f>
   15f56:	4603      	mov	r3, r0
   15f58:	4618      	mov	r0, r3
   15f5a:	f002 faab 	bl	184b4 <__aeabi_f2iz>
   15f5e:	4603      	mov	r3, r0
   15f60:	b29a      	uxth	r2, r3
   15f62:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f6a:	80da      	strh	r2, [r3, #6]
   15f6c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f74:	88db      	ldrh	r3, [r3, #6]
   15f76:	b21b      	sxth	r3, r3
   15f78:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f7c:	dd07      	ble.n	15f8e <last_radio_from_ppm+0x1be>
   15f7e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f86:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f8a:	80da      	strh	r2, [r3, #6]
   15f8c:	e00f      	b.n	15fae <last_radio_from_ppm+0x1de>
   15f8e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f96:	88db      	ldrh	r3, [r3, #6]
   15f98:	b21b      	sxth	r3, r3
   15f9a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f9e:	da06      	bge.n	15fae <last_radio_from_ppm+0x1de>
   15fa0:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fa8:	f64d 2280 	movw	r2, #55936	; 0xda80
   15fac:	80da      	strh	r2, [r3, #6]
   15fae:	f24b 5328 	movw	r3, #46376	; 0xb528
   15fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb6:	891b      	ldrh	r3, [r3, #8]
   15fb8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15fbc:	b29b      	uxth	r3, r3
   15fbe:	80fb      	strh	r3, [r7, #6]
   15fc0:	f24b 5350 	movw	r3, #46416	; 0xb550
   15fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc8:	891b      	ldrh	r3, [r3, #8]
   15fca:	b21b      	sxth	r3, r3
   15fcc:	4618      	mov	r0, r3
   15fce:	f002 f857 	bl	18080 <__aeabi_i2f>
   15fd2:	4604      	mov	r4, r0
   15fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fd8:	4618      	mov	r0, r3
   15fda:	f002 f851 	bl	18080 <__aeabi_i2f>
   15fde:	4603      	mov	r3, r0
   15fe0:	4618      	mov	r0, r3
   15fe2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15fe6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15fea:	f002 f89d 	bl	18128 <__aeabi_fmul>
   15fee:	4603      	mov	r3, r0
   15ff0:	4620      	mov	r0, r4
   15ff2:	4619      	mov	r1, r3
   15ff4:	f001 ff90 	bl	17f18 <__addsf3>
   15ff8:	4603      	mov	r3, r0
   15ffa:	4618      	mov	r0, r3
   15ffc:	f002 fa5a 	bl	184b4 <__aeabi_f2iz>
   16000:	4603      	mov	r3, r0
   16002:	b29a      	uxth	r2, r3
   16004:	f24b 5350 	movw	r3, #46416	; 0xb550
   16008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600c:	811a      	strh	r2, [r3, #8]
   1600e:	f24b 5328 	movw	r3, #46376	; 0xb528
   16012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16016:	895b      	ldrh	r3, [r3, #10]
   16018:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1601c:	b29b      	uxth	r3, r3
   1601e:	80fb      	strh	r3, [r7, #6]
   16020:	f24b 5350 	movw	r3, #46416	; 0xb550
   16024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16028:	895b      	ldrh	r3, [r3, #10]
   1602a:	b21b      	sxth	r3, r3
   1602c:	4618      	mov	r0, r3
   1602e:	f002 f827 	bl	18080 <__aeabi_i2f>
   16032:	4604      	mov	r4, r0
   16034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16038:	4618      	mov	r0, r3
   1603a:	f002 f821 	bl	18080 <__aeabi_i2f>
   1603e:	4603      	mov	r3, r0
   16040:	4618      	mov	r0, r3
   16042:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16046:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1604a:	f002 f86d 	bl	18128 <__aeabi_fmul>
   1604e:	4603      	mov	r3, r0
   16050:	4620      	mov	r0, r4
   16052:	4619      	mov	r1, r3
   16054:	f001 ff60 	bl	17f18 <__addsf3>
   16058:	4603      	mov	r3, r0
   1605a:	4618      	mov	r0, r3
   1605c:	f002 fa2a 	bl	184b4 <__aeabi_f2iz>
   16060:	4603      	mov	r3, r0
   16062:	b29a      	uxth	r2, r3
   16064:	f24b 5350 	movw	r3, #46416	; 0xb550
   16068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1606c:	815a      	strh	r2, [r3, #10]
   1606e:	f24b 5328 	movw	r3, #46376	; 0xb528
   16072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16076:	899b      	ldrh	r3, [r3, #12]
   16078:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1607c:	b29b      	uxth	r3, r3
   1607e:	80fb      	strh	r3, [r7, #6]
   16080:	f24b 5350 	movw	r3, #46416	; 0xb550
   16084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16088:	899b      	ldrh	r3, [r3, #12]
   1608a:	b21b      	sxth	r3, r3
   1608c:	4618      	mov	r0, r3
   1608e:	f001 fff7 	bl	18080 <__aeabi_i2f>
   16092:	4604      	mov	r4, r0
   16094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16098:	4618      	mov	r0, r3
   1609a:	f001 fff1 	bl	18080 <__aeabi_i2f>
   1609e:	4603      	mov	r3, r0
   160a0:	4618      	mov	r0, r3
   160a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   160a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   160aa:	f002 f83d 	bl	18128 <__aeabi_fmul>
   160ae:	4603      	mov	r3, r0
   160b0:	4620      	mov	r0, r4
   160b2:	4619      	mov	r1, r3
   160b4:	f001 ff30 	bl	17f18 <__addsf3>
   160b8:	4603      	mov	r3, r0
   160ba:	4618      	mov	r0, r3
   160bc:	f002 f9fa 	bl	184b4 <__aeabi_f2iz>
   160c0:	4603      	mov	r3, r0
   160c2:	b29a      	uxth	r2, r3
   160c4:	f24b 5350 	movw	r3, #46416	; 0xb550
   160c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160cc:	819a      	strh	r2, [r3, #12]
   160ce:	f24b 5328 	movw	r3, #46376	; 0xb528
   160d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d6:	89db      	ldrh	r3, [r3, #14]
   160d8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160dc:	b29b      	uxth	r3, r3
   160de:	80fb      	strh	r3, [r7, #6]
   160e0:	f24b 5350 	movw	r3, #46416	; 0xb550
   160e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e8:	89db      	ldrh	r3, [r3, #14]
   160ea:	b21b      	sxth	r3, r3
   160ec:	4618      	mov	r0, r3
   160ee:	f001 ffc7 	bl	18080 <__aeabi_i2f>
   160f2:	4604      	mov	r4, r0
   160f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160f8:	4618      	mov	r0, r3
   160fa:	f001 ffc1 	bl	18080 <__aeabi_i2f>
   160fe:	4603      	mov	r3, r0
   16100:	4618      	mov	r0, r3
   16102:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16106:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1610a:	f002 f80d 	bl	18128 <__aeabi_fmul>
   1610e:	4603      	mov	r3, r0
   16110:	4620      	mov	r0, r4
   16112:	4619      	mov	r1, r3
   16114:	f001 ff00 	bl	17f18 <__addsf3>
   16118:	4603      	mov	r3, r0
   1611a:	4618      	mov	r0, r3
   1611c:	f002 f9ca 	bl	184b4 <__aeabi_f2iz>
   16120:	4603      	mov	r3, r0
   16122:	b29a      	uxth	r2, r3
   16124:	f24b 5350 	movw	r3, #46416	; 0xb550
   16128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1612c:	81da      	strh	r2, [r3, #14]
   1612e:	f24b 5328 	movw	r3, #46376	; 0xb528
   16132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16136:	8a1b      	ldrh	r3, [r3, #16]
   16138:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1613c:	b29b      	uxth	r3, r3
   1613e:	80fb      	strh	r3, [r7, #6]
   16140:	f24b 5350 	movw	r3, #46416	; 0xb550
   16144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16148:	8a1b      	ldrh	r3, [r3, #16]
   1614a:	b21b      	sxth	r3, r3
   1614c:	4618      	mov	r0, r3
   1614e:	f001 ff97 	bl	18080 <__aeabi_i2f>
   16152:	4604      	mov	r4, r0
   16154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16158:	4618      	mov	r0, r3
   1615a:	f001 ff91 	bl	18080 <__aeabi_i2f>
   1615e:	4603      	mov	r3, r0
   16160:	4618      	mov	r0, r3
   16162:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16166:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1616a:	f001 ffdd 	bl	18128 <__aeabi_fmul>
   1616e:	4603      	mov	r3, r0
   16170:	4620      	mov	r0, r4
   16172:	4619      	mov	r1, r3
   16174:	f001 fed0 	bl	17f18 <__addsf3>
   16178:	4603      	mov	r3, r0
   1617a:	4618      	mov	r0, r3
   1617c:	f002 f99a 	bl	184b4 <__aeabi_f2iz>
   16180:	4603      	mov	r3, r0
   16182:	b29a      	uxth	r2, r3
   16184:	f24b 5350 	movw	r3, #46416	; 0xb550
   16188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1618c:	821a      	strh	r2, [r3, #16]
   1618e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16196:	781b      	ldrb	r3, [r3, #0]
   16198:	3301      	adds	r3, #1
   1619a:	b2da      	uxtb	r2, r3
   1619c:	f24b 5368 	movw	r3, #46440	; 0xb568
   161a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161a4:	701a      	strb	r2, [r3, #0]
   161a6:	f24b 5368 	movw	r3, #46440	; 0xb568
   161aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ae:	781b      	ldrb	r3, [r3, #0]
   161b0:	2b0a      	cmp	r3, #10
   161b2:	f040 8101 	bne.w	163b8 <last_radio_from_ppm+0x5e8>
   161b6:	f24b 5368 	movw	r3, #46440	; 0xb568
   161ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161be:	2200      	movs	r2, #0
   161c0:	701a      	strb	r2, [r3, #0]
   161c2:	f24b 5350 	movw	r3, #46416	; 0xb550
   161c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ca:	891a      	ldrh	r2, [r3, #8]
   161cc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   161d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161d4:	811a      	strh	r2, [r3, #8]
   161d6:	f24b 5350 	movw	r3, #46416	; 0xb550
   161da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161de:	2200      	movs	r2, #0
   161e0:	811a      	strh	r2, [r3, #8]
   161e2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   161e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ea:	891b      	ldrh	r3, [r3, #8]
   161ec:	b21b      	sxth	r3, r3
   161ee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161f2:	dd07      	ble.n	16204 <last_radio_from_ppm+0x434>
   161f4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   161f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16200:	811a      	strh	r2, [r3, #8]
   16202:	e00f      	b.n	16224 <last_radio_from_ppm+0x454>
   16204:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1620c:	891b      	ldrh	r3, [r3, #8]
   1620e:	b21b      	sxth	r3, r3
   16210:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16214:	da06      	bge.n	16224 <last_radio_from_ppm+0x454>
   16216:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1621e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16222:	811a      	strh	r2, [r3, #8]
   16224:	f24b 5350 	movw	r3, #46416	; 0xb550
   16228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1622c:	895a      	ldrh	r2, [r3, #10]
   1622e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16236:	815a      	strh	r2, [r3, #10]
   16238:	f24b 5350 	movw	r3, #46416	; 0xb550
   1623c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16240:	2200      	movs	r2, #0
   16242:	815a      	strh	r2, [r3, #10]
   16244:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1624c:	895b      	ldrh	r3, [r3, #10]
   1624e:	b21b      	sxth	r3, r3
   16250:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16254:	dd07      	ble.n	16266 <last_radio_from_ppm+0x496>
   16256:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1625a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1625e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16262:	815a      	strh	r2, [r3, #10]
   16264:	e00f      	b.n	16286 <last_radio_from_ppm+0x4b6>
   16266:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1626a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1626e:	895b      	ldrh	r3, [r3, #10]
   16270:	b21b      	sxth	r3, r3
   16272:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16276:	da06      	bge.n	16286 <last_radio_from_ppm+0x4b6>
   16278:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1627c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16280:	f64d 2280 	movw	r2, #55936	; 0xda80
   16284:	815a      	strh	r2, [r3, #10]
   16286:	f24b 5350 	movw	r3, #46416	; 0xb550
   1628a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1628e:	899a      	ldrh	r2, [r3, #12]
   16290:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16298:	819a      	strh	r2, [r3, #12]
   1629a:	f24b 5350 	movw	r3, #46416	; 0xb550
   1629e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a2:	2200      	movs	r2, #0
   162a4:	819a      	strh	r2, [r3, #12]
   162a6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162ae:	899b      	ldrh	r3, [r3, #12]
   162b0:	b21b      	sxth	r3, r3
   162b2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162b6:	dd07      	ble.n	162c8 <last_radio_from_ppm+0x4f8>
   162b8:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162c4:	819a      	strh	r2, [r3, #12]
   162c6:	e00f      	b.n	162e8 <last_radio_from_ppm+0x518>
   162c8:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d0:	899b      	ldrh	r3, [r3, #12]
   162d2:	b21b      	sxth	r3, r3
   162d4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162d8:	da06      	bge.n	162e8 <last_radio_from_ppm+0x518>
   162da:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e2:	f64d 2280 	movw	r2, #55936	; 0xda80
   162e6:	819a      	strh	r2, [r3, #12]
   162e8:	f24b 5350 	movw	r3, #46416	; 0xb550
   162ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162f0:	89da      	ldrh	r2, [r3, #14]
   162f2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162fa:	81da      	strh	r2, [r3, #14]
   162fc:	f24b 5350 	movw	r3, #46416	; 0xb550
   16300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16304:	2200      	movs	r2, #0
   16306:	81da      	strh	r2, [r3, #14]
   16308:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1630c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16310:	89db      	ldrh	r3, [r3, #14]
   16312:	b21b      	sxth	r3, r3
   16314:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16318:	dd07      	ble.n	1632a <last_radio_from_ppm+0x55a>
   1631a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1631e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16322:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16326:	81da      	strh	r2, [r3, #14]
   16328:	e00f      	b.n	1634a <last_radio_from_ppm+0x57a>
   1632a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1632e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16332:	89db      	ldrh	r3, [r3, #14]
   16334:	b21b      	sxth	r3, r3
   16336:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1633a:	da06      	bge.n	1634a <last_radio_from_ppm+0x57a>
   1633c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16344:	f64d 2280 	movw	r2, #55936	; 0xda80
   16348:	81da      	strh	r2, [r3, #14]
   1634a:	f24b 5350 	movw	r3, #46416	; 0xb550
   1634e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16352:	8a1a      	ldrh	r2, [r3, #16]
   16354:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1635c:	821a      	strh	r2, [r3, #16]
   1635e:	f24b 5350 	movw	r3, #46416	; 0xb550
   16362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16366:	2200      	movs	r2, #0
   16368:	821a      	strh	r2, [r3, #16]
   1636a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1636e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16372:	8a1b      	ldrh	r3, [r3, #16]
   16374:	b21b      	sxth	r3, r3
   16376:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1637a:	dd07      	ble.n	1638c <last_radio_from_ppm+0x5bc>
   1637c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16388:	821a      	strh	r2, [r3, #16]
   1638a:	e00f      	b.n	163ac <last_radio_from_ppm+0x5dc>
   1638c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16394:	8a1b      	ldrh	r3, [r3, #16]
   16396:	b21b      	sxth	r3, r3
   16398:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1639c:	da06      	bge.n	163ac <last_radio_from_ppm+0x5dc>
   1639e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163a6:	f64d 2280 	movw	r2, #55936	; 0xda80
   163aa:	821a      	strh	r2, [r3, #16]
   163ac:	f24b 5362 	movw	r3, #46434	; 0xb562
   163b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163b4:	2201      	movs	r2, #1
   163b6:	701a      	strb	r2, [r3, #0]
}
   163b8:	370c      	adds	r7, #12
   163ba:	46bd      	mov	sp, r7
   163bc:	bd90      	pop	{r4, r7, pc}
   163be:	bf00      	nop

000163c0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   163c0:	b480      	push	{r7}
   163c2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   163c4:	f24b 539c 	movw	r3, #46492	; 0xb59c
   163c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163cc:	2200      	movs	r2, #0
   163ce:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   163d0:	f24b 539d 	movw	r3, #46493	; 0xb59d
   163d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d8:	2200      	movs	r2, #0
   163da:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   163dc:	f24b 539c 	movw	r3, #46492	; 0xb59c
   163e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163e4:	781b      	ldrb	r3, [r3, #0]
   163e6:	b2db      	uxtb	r3, r3
   163e8:	461a      	mov	r2, r3
   163ea:	f24b 5384 	movw	r3, #46468	; 0xb584
   163ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163f2:	4413      	add	r3, r2
   163f4:	781a      	ldrb	r2, [r3, #0]
   163f6:	f24b 539e 	movw	r3, #46494	; 0xb59e
   163fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163fe:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16400:	f242 030f 	movw	r3, #8207	; 0x200f
   16404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16408:	f24b 529e 	movw	r2, #46494	; 0xb59e
   1640c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16410:	7812      	ldrb	r2, [r2, #0]
   16412:	b2d2      	uxtb	r2, r2
   16414:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16416:	f24b 539a 	movw	r3, #46490	; 0xb59a
   1641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1641e:	2200      	movs	r2, #0
   16420:	701a      	strb	r2, [r3, #0]
}
   16422:	46bd      	mov	sp, r7
   16424:	f85d 7b04 	ldr.w	r7, [sp], #4
   16428:	4770      	bx	lr
   1642a:	bf00      	nop

0001642c <fbw_spi_init>:

void fbw_spi_init(void) {
   1642c:	b480      	push	{r7}
   1642e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16430:	f24b 5384 	movw	r3, #46468	; 0xb584
   16434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16438:	2200      	movs	r2, #0
   1643a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1643c:	f24b 5384 	movw	r3, #46468	; 0xb584
   16440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16444:	2200      	movs	r2, #0
   16446:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16448:	f242 0317 	movw	r3, #8215	; 0x2017
   1644c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16450:	f242 0217 	movw	r2, #8215	; 0x2017
   16454:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16458:	7812      	ldrb	r2, [r2, #0]
   1645a:	b2d2      	uxtb	r2, r2
   1645c:	f042 0210 	orr.w	r2, r2, #16
   16460:	b2d2      	uxtb	r2, r2
   16462:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16464:	f242 030d 	movw	r3, #8205	; 0x200d
   16468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1646c:	2240      	movs	r2, #64	; 0x40
   1646e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16470:	f242 030d 	movw	r3, #8205	; 0x200d
   16474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16478:	f242 020d 	movw	r2, #8205	; 0x200d
   1647c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16480:	7812      	ldrb	r2, [r2, #0]
   16482:	b2d2      	uxtb	r2, r2
   16484:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16488:	b2d2      	uxtb	r2, r2
   1648a:	701a      	strb	r2, [r3, #0]
}
   1648c:	46bd      	mov	sp, r7
   1648e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16492:	4770      	bx	lr
   16494:	0000      	movs	r0, r0
	...

00016498 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16498:	b480      	push	{r7}
   1649a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1649c:	f242 032f 	movw	r3, #8239	; 0x202f
   164a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164a4:	2200      	movs	r2, #0
   164a6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   164a8:	f242 032e 	movw	r3, #8238	; 0x202e
   164ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164b0:	2201      	movs	r2, #1
   164b2:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   164b4:	f242 0325 	movw	r3, #8229	; 0x2025
   164b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164bc:	2207      	movs	r2, #7
   164be:	701a      	strb	r2, [r3, #0]
}
   164c0:	46bd      	mov	sp, r7
   164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   164c6:	4770      	bx	lr

000164c8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   164c8:	b480      	push	{r7}
   164ca:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   164cc:	f242 032e 	movw	r3, #8238	; 0x202e
   164d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d4:	f242 022e 	movw	r2, #8238	; 0x202e
   164d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   164dc:	7812      	ldrb	r2, [r2, #0]
   164de:	b2d2      	uxtb	r2, r2
   164e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   164e4:	b2d2      	uxtb	r2, r2
   164e6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   164e8:	f242 032e 	movw	r3, #8238	; 0x202e
   164ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164f0:	f242 022e 	movw	r2, #8238	; 0x202e
   164f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   164f8:	7812      	ldrb	r2, [r2, #0]
   164fa:	b2d2      	uxtb	r2, r2
   164fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16500:	b2d2      	uxtb	r2, r2
   16502:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16504:	f242 0317 	movw	r3, #8215	; 0x2017
   16508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1650c:	f242 0217 	movw	r2, #8215	; 0x2017
   16510:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16514:	7812      	ldrb	r2, [r2, #0]
   16516:	b2d2      	uxtb	r2, r2
   16518:	f022 0201 	bic.w	r2, r2, #1
   1651c:	b2d2      	uxtb	r2, r2
   1651e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16520:	f242 0337 	movw	r3, #8247	; 0x2037
   16524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16528:	f242 0237 	movw	r2, #8247	; 0x2037
   1652c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16530:	7812      	ldrb	r2, [r2, #0]
   16532:	b2d2      	uxtb	r2, r2
   16534:	f042 0220 	orr.w	r2, r2, #32
   16538:	b2d2      	uxtb	r2, r2
   1653a:	701a      	strb	r2, [r3, #0]
}
   1653c:	46bd      	mov	sp, r7
   1653e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16542:	4770      	bx	lr

00016544 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16544:	b580      	push	{r7, lr}
   16546:	b082      	sub	sp, #8
   16548:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1654a:	2300      	movs	r3, #0
   1654c:	71fb      	strb	r3, [r7, #7]
   1654e:	e010      	b.n	16572 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16550:	79fa      	ldrb	r2, [r7, #7]
   16552:	79f9      	ldrb	r1, [r7, #7]
   16554:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1655c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16560:	f24b 5384 	movw	r3, #46468	; 0xb584
   16564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16568:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1656c:	79fb      	ldrb	r3, [r7, #7]
   1656e:	3301      	adds	r3, #1
   16570:	71fb      	strb	r3, [r7, #7]
   16572:	79fb      	ldrb	r3, [r7, #7]
   16574:	2b08      	cmp	r3, #8
   16576:	d9eb      	bls.n	16550 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16578:	f24b 632c 	movw	r3, #46636	; 0xb62c
   1657c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16580:	781b      	ldrb	r3, [r3, #0]
   16582:	2b00      	cmp	r3, #0
   16584:	bf0c      	ite	eq
   16586:	2300      	moveq	r3, #0
   16588:	2301      	movne	r3, #1
   1658a:	b2db      	uxtb	r3, r3
   1658c:	461a      	mov	r2, r3
   1658e:	f24b 5384 	movw	r3, #46468	; 0xb584
   16592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16596:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16598:	f24b 5384 	movw	r3, #46468	; 0xb584
   1659c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165a0:	7cdb      	ldrb	r3, [r3, #19]
   165a2:	b2da      	uxtb	r2, r3
   165a4:	f24b 632e 	movw	r3, #46638	; 0xb62e
   165a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165ac:	781b      	ldrb	r3, [r3, #0]
   165ae:	2b00      	cmp	r3, #0
   165b0:	d001      	beq.n	165b6 <to_autopilot_from_last_radio+0x72>
   165b2:	2302      	movs	r3, #2
   165b4:	e000      	b.n	165b8 <to_autopilot_from_last_radio+0x74>
   165b6:	2300      	movs	r3, #0
   165b8:	4313      	orrs	r3, r2
   165ba:	b2db      	uxtb	r3, r3
   165bc:	b2da      	uxtb	r2, r3
   165be:	f24b 5384 	movw	r3, #46468	; 0xb584
   165c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   165c8:	f24b 5362 	movw	r3, #46434	; 0xb562
   165cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d0:	781b      	ldrb	r3, [r3, #0]
   165d2:	2b00      	cmp	r3, #0
   165d4:	d012      	beq.n	165fc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   165d6:	f24b 5384 	movw	r3, #46468	; 0xb584
   165da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165de:	7cdb      	ldrb	r3, [r3, #19]
   165e0:	f043 0304 	orr.w	r3, r3, #4
   165e4:	b2da      	uxtb	r2, r3
   165e6:	f24b 5384 	movw	r3, #46468	; 0xb584
   165ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165ee:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   165f0:	f24b 5362 	movw	r3, #46434	; 0xb562
   165f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165f8:	2200      	movs	r2, #0
   165fa:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   165fc:	f24b 6330 	movw	r3, #46640	; 0xb630
   16600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16604:	781a      	ldrb	r2, [r3, #0]
   16606:	f24b 5384 	movw	r3, #46468	; 0xb584
   1660a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1660e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16610:	f24b 53a0 	movw	r3, #46496	; 0xb5a0
   16614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16618:	881b      	ldrh	r3, [r3, #0]
   1661a:	4618      	mov	r0, r3
   1661c:	f001 f8de 	bl	177dc <__aeabi_i2d>
   16620:	4602      	mov	r2, r0
   16622:	460b      	mov	r3, r1
   16624:	4610      	mov	r0, r2
   16626:	4619      	mov	r1, r3
   16628:	a31b      	add	r3, pc, #108	; (adr r3, 16698 <to_autopilot_from_last_radio+0x154>)
   1662a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1662e:	f001 f93b 	bl	178a8 <__aeabi_dmul>
   16632:	4602      	mov	r2, r0
   16634:	460b      	mov	r3, r1
   16636:	4610      	mov	r0, r2
   16638:	4619      	mov	r1, r3
   1663a:	f04f 0200 	mov.w	r2, #0
   1663e:	f04f 0300 	mov.w	r3, #0
   16642:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16646:	f001 fa59 	bl	17afc <__aeabi_ddiv>
   1664a:	4602      	mov	r2, r0
   1664c:	460b      	mov	r3, r1
   1664e:	4610      	mov	r0, r2
   16650:	4619      	mov	r1, r3
   16652:	a313      	add	r3, pc, #76	; (adr r3, 166a0 <to_autopilot_from_last_radio+0x15c>)
   16654:	e9d3 2300 	ldrd	r2, r3, [r3]
   16658:	f000 ff74 	bl	17544 <__adddf3>
   1665c:	4602      	mov	r2, r0
   1665e:	460b      	mov	r3, r1
   16660:	4610      	mov	r0, r2
   16662:	4619      	mov	r1, r3
   16664:	f04f 0200 	mov.w	r2, #0
   16668:	f04f 0300 	mov.w	r3, #0
   1666c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16670:	f001 f91a 	bl	178a8 <__aeabi_dmul>
   16674:	4602      	mov	r2, r0
   16676:	460b      	mov	r3, r1
   16678:	4610      	mov	r0, r2
   1667a:	4619      	mov	r1, r3
   1667c:	f001 fbd6 	bl	17e2c <__aeabi_d2uiz>
   16680:	4603      	mov	r3, r0
   16682:	b2da      	uxtb	r2, r3
   16684:	f24b 5384 	movw	r3, #46468	; 0xb584
   16688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1668c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1668e:	3708      	adds	r7, #8
   16690:	46bd      	mov	sp, r7
   16692:	bd80      	pop	{r7, pc}
   16694:	f3af 8000 	nop.w
   16698:	1eb851ec 	.word	0x1eb851ec
   1669c:	3f91eb85 	.word	0x3f91eb85
   166a0:	020c49ba 	.word	0x020c49ba
   166a4:	3fb6872b 	.word	0x3fb6872b

000166a8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   166a8:	b580      	push	{r7, lr}
   166aa:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   166ac:	f24b 539b 	movw	r3, #46491	; 0xb59b
   166b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b4:	2200      	movs	r2, #0
   166b6:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   166b8:	f7ff ff44 	bl	16544 <to_autopilot_from_last_radio>
      spi_reset();
   166bc:	f7ff fe80 	bl	163c0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   166c0:	bd80      	pop	{r7, pc}
   166c2:	bf00      	nop

000166c4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   166c4:	b580      	push	{r7, lr}
   166c6:	af00      	add	r7, sp, #0
  uart_init_tx();
   166c8:	f000 fb02 	bl	16cd0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   166cc:	f248 70dc 	movw	r0, #34780	; 0x87dc
   166d0:	f2c0 0001 	movt	r0, #1
   166d4:	f000 fbda 	bl	16e8c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   166d8:	f7ff fab2 	bl	15c40 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   166dc:	2003      	movs	r0, #3
   166de:	f24b 51a0 	movw	r1, #46496	; 0xb5a0
   166e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   166e6:	f7ff fa97 	bl	15c18 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   166ea:	2006      	movs	r0, #6
   166ec:	f24b 51e4 	movw	r1, #46564	; 0xb5e4
   166f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   166f4:	f7ff fa90 	bl	15c18 <fbw_adc_buf_channel>
#endif
  timer_init();
   166f8:	f7ff fece 	bl	16498 <timer_init>
  servo_init();
   166fc:	f000 f894 	bl	16828 <servo_init>
  ppm_init();
   16700:	f7ff fee2 	bl	164c8 <ppm_init>
  fbw_spi_init();
   16704:	f7ff fe92 	bl	1642c <fbw_spi_init>
  //sei(); //FN
}
   16708:	bd80      	pop	{r7, pc}
   1670a:	bf00      	nop

0001670c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1670c:	b580      	push	{r7, lr}
   1670e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16710:	f24b 5363 	movw	r3, #46435	; 0xb563
   16714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16718:	2200      	movs	r2, #0
   1671a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1671c:	f24b 632f 	movw	r3, #46639	; 0xb62f
   16720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16724:	781b      	ldrb	r3, [r3, #0]
   16726:	3301      	adds	r3, #1
   16728:	b2da      	uxtb	r2, r3
   1672a:	f24b 632f 	movw	r3, #46639	; 0xb62f
   1672e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16732:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16734:	f24b 632c 	movw	r3, #46636	; 0xb62c
   16738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1673c:	2201      	movs	r2, #1
   1673e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16740:	f24b 632e 	movw	r3, #46638	; 0xb62e
   16744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16748:	2200      	movs	r2, #0
   1674a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1674c:	f24b 632a 	movw	r3, #46634	; 0xb62a
   16750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16754:	2200      	movs	r2, #0
   16756:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16758:	f7ff fb3a 	bl	15dd0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1675c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16764:	891b      	ldrh	r3, [r3, #8]
   16766:	b21b      	sxth	r3, r3
   16768:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1676c:	bfb4      	ite	lt
   1676e:	2300      	movlt	r3, #0
   16770:	2301      	movge	r3, #1
   16772:	b2db      	uxtb	r3, r3
   16774:	461a      	mov	r2, r3
   16776:	f24b 6328 	movw	r3, #46632	; 0xb628
   1677a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1677e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16780:	f24b 6328 	movw	r3, #46632	; 0xb628
   16784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16788:	781b      	ldrb	r3, [r3, #0]
   1678a:	2b00      	cmp	r3, #0
   1678c:	d105      	bne.n	1679a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1678e:	f24b 503c 	movw	r0, #46396	; 0xb53c
   16792:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16796:	f000 f925 	bl	169e4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   1679a:	f24b 6328 	movw	r3, #46632	; 0xb628
   1679e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a2:	2201      	movs	r2, #1
   167a4:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   167a6:	f24b 632c 	movw	r3, #46636	; 0xb62c
   167aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ae:	2200      	movs	r2, #0
   167b0:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   167b2:	f24b 632e 	movw	r3, #46638	; 0xb62e
   167b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ba:	2201      	movs	r2, #1
   167bc:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   167be:	bd80      	pop	{r7, pc}

000167c0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   167c0:	b580      	push	{r7, lr}
   167c2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   167c4:	f248 70c8 	movw	r0, #34760	; 0x87c8
   167c8:	f2c0 0001 	movt	r0, #1
   167cc:	f000 f90a 	bl	169e4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   167d0:	bd80      	pop	{r7, pc}
   167d2:	bf00      	nop

000167d4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   167d4:	b580      	push	{r7, lr}
   167d6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   167d8:	f24b 539a 	movw	r3, #46490	; 0xb59a
   167dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e0:	781b      	ldrb	r3, [r3, #0]
   167e2:	b2db      	uxtb	r3, r3
   167e4:	2b00      	cmp	r3, #0
   167e6:	d018      	beq.n	1681a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   167e8:	f24b 6329 	movw	r3, #46633	; 0xb629
   167ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167f0:	2200      	movs	r2, #0
   167f2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   167f4:	f24b 632d 	movw	r3, #46637	; 0xb62d
   167f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167fc:	2201      	movs	r2, #1
   167fe:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16800:	f24b 6328 	movw	r3, #46632	; 0xb628
   16804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	2b01      	cmp	r3, #1
   1680c:	d105      	bne.n	1681a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1680e:	f24b 506c 	movw	r0, #46444	; 0xb56c
   16812:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16816:	f000 f8e5 	bl	169e4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1681a:	f24b 632d 	movw	r3, #46637	; 0xb62d
   1681e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16822:	2200      	movs	r2, #0
   16824:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16826:	bd80      	pop	{r7, pc}

00016828 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16828:	b480      	push	{r7}
   1682a:	b083      	sub	sp, #12
   1682c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1682e:	f242 0311 	movw	r3, #8209	; 0x2011
   16832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16836:	f242 0211 	movw	r2, #8209	; 0x2011
   1683a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1683e:	7812      	ldrb	r2, [r2, #0]
   16840:	b2d2      	uxtb	r2, r2
   16842:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16846:	b2d2      	uxtb	r2, r2
   16848:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1684a:	f242 0317 	movw	r3, #8215	; 0x2017
   1684e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16852:	f242 0217 	movw	r2, #8215	; 0x2017
   16856:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1685a:	7812      	ldrb	r2, [r2, #0]
   1685c:	b2d2      	uxtb	r2, r2
   1685e:	f042 0202 	orr.w	r2, r2, #2
   16862:	b2d2      	uxtb	r2, r2
   16864:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16866:	f242 0312 	movw	r3, #8210	; 0x2012
   1686a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1686e:	f242 0212 	movw	r2, #8210	; 0x2012
   16872:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16876:	7812      	ldrb	r2, [r2, #0]
   16878:	b2d2      	uxtb	r2, r2
   1687a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1687e:	b2d2      	uxtb	r2, r2
   16880:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16882:	f242 0318 	movw	r3, #8216	; 0x2018
   16886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1688a:	f242 0218 	movw	r2, #8216	; 0x2018
   1688e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16892:	7812      	ldrb	r2, [r2, #0]
   16894:	b2d2      	uxtb	r2, r2
   16896:	f022 0202 	bic.w	r2, r2, #2
   1689a:	b2d2      	uxtb	r2, r2
   1689c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1689e:	2300      	movs	r3, #0
   168a0:	71fb      	strb	r3, [r7, #7]
   168a2:	e00b      	b.n	168bc <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   168a4:	79fa      	ldrb	r2, [r7, #7]
   168a6:	f24b 6334 	movw	r3, #46644	; 0xb634
   168aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ae:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   168b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   168b6:	79fb      	ldrb	r3, [r7, #7]
   168b8:	3301      	adds	r3, #1
   168ba:	71fb      	strb	r3, [r7, #7]
   168bc:	79fb      	ldrb	r3, [r7, #7]
   168be:	2b09      	cmp	r3, #9
   168c0:	d9f0      	bls.n	168a4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   168c2:	f242 032a 	movw	r3, #8234	; 0x202a
   168c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   168ce:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   168d0:	f242 032f 	movw	r3, #8239	; 0x202f
   168d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d8:	f242 022f 	movw	r2, #8239	; 0x202f
   168dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168e0:	7812      	ldrb	r2, [r2, #0]
   168e2:	b2d2      	uxtb	r2, r2
   168e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   168e8:	b2d2      	uxtb	r2, r2
   168ea:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   168ec:	f242 0336 	movw	r3, #8246	; 0x2036
   168f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168f4:	2210      	movs	r2, #16
   168f6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   168f8:	f242 0312 	movw	r3, #8210	; 0x2012
   168fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16900:	f242 0212 	movw	r2, #8210	; 0x2012
   16904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16908:	7812      	ldrb	r2, [r2, #0]
   1690a:	b2d2      	uxtb	r2, r2
   1690c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16910:	b2d2      	uxtb	r2, r2
   16912:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16914:	f242 0337 	movw	r3, #8247	; 0x2037
   16918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1691c:	f242 0237 	movw	r2, #8247	; 0x2037
   16920:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16924:	7812      	ldrb	r2, [r2, #0]
   16926:	b2d2      	uxtb	r2, r2
   16928:	f042 0210 	orr.w	r2, r2, #16
   1692c:	b2d2      	uxtb	r2, r2
   1692e:	701a      	strb	r2, [r3, #0]
}
   16930:	370c      	adds	r7, #12
   16932:	46bd      	mov	sp, r7
   16934:	f85d 7b04 	ldr.w	r7, [sp], #4
   16938:	4770      	bx	lr
   1693a:	bf00      	nop

0001693c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   1693c:	b480      	push	{r7}
   1693e:	b083      	sub	sp, #12
   16940:	af00      	add	r7, sp, #0
   16942:	4602      	mov	r2, r0
   16944:	460b      	mov	r3, r1
   16946:	71fa      	strb	r2, [r7, #7]
   16948:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   1694a:	79f9      	ldrb	r1, [r7, #7]
   1694c:	88bb      	ldrh	r3, [r7, #4]
   1694e:	011b      	lsls	r3, r3, #4
   16950:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16954:	d308      	bcc.n	16968 <servo_set_one+0x2c>
   16956:	88bb      	ldrh	r3, [r7, #4]
   16958:	011b      	lsls	r3, r3, #4
   1695a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1695e:	bf28      	it	cs
   16960:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16964:	b29a      	uxth	r2, r3
   16966:	e001      	b.n	1696c <servo_set_one+0x30>
   16968:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1696c:	f24b 6334 	movw	r3, #46644	; 0xb634
   16970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16974:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16978:	370c      	adds	r7, #12
   1697a:	46bd      	mov	sp, r7
   1697c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16980:	4770      	bx	lr
   16982:	bf00      	nop

00016984 <servo_transmit>:

void 
servo_transmit(void) {
   16984:	b580      	push	{r7, lr}
   16986:	b082      	sub	sp, #8
   16988:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   1698a:	2000      	movs	r0, #0
   1698c:	f000 f9e6 	bl	16d5c <uart_transmit>
   16990:	2000      	movs	r0, #0
   16992:	f000 f9e3 	bl	16d5c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16996:	2300      	movs	r3, #0
   16998:	71fb      	strb	r3, [r7, #7]
   1699a:	e01a      	b.n	169d2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   1699c:	79fa      	ldrb	r2, [r7, #7]
   1699e:	f24b 6334 	movw	r3, #46644	; 0xb634
   169a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   169aa:	0a1b      	lsrs	r3, r3, #8
   169ac:	b29b      	uxth	r3, r3
   169ae:	b2db      	uxtb	r3, r3
   169b0:	4618      	mov	r0, r3
   169b2:	f000 f9d3 	bl	16d5c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   169b6:	79fa      	ldrb	r2, [r7, #7]
   169b8:	f24b 6334 	movw	r3, #46644	; 0xb634
   169bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   169c4:	b2db      	uxtb	r3, r3
   169c6:	4618      	mov	r0, r3
   169c8:	f000 f9c8 	bl	16d5c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   169cc:	79fb      	ldrb	r3, [r7, #7]
   169ce:	3301      	adds	r3, #1
   169d0:	71fb      	strb	r3, [r7, #7]
   169d2:	79fb      	ldrb	r3, [r7, #7]
   169d4:	2b09      	cmp	r3, #9
   169d6:	d9e1      	bls.n	1699c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   169d8:	200a      	movs	r0, #10
   169da:	f000 f9bf 	bl	16d5c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   169de:	3708      	adds	r7, #8
   169e0:	46bd      	mov	sp, r7
   169e2:	bd80      	pop	{r7, pc}

000169e4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   169e4:	b5b0      	push	{r4, r5, r7, lr}
   169e6:	b084      	sub	sp, #16
   169e8:	af00      	add	r7, sp, #0
   169ea:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	330a      	adds	r3, #10
   169f0:	881b      	ldrh	r3, [r3, #0]
   169f2:	b21b      	sxth	r3, r3
   169f4:	005b      	lsls	r3, r3, #1
   169f6:	4618      	mov	r0, r3
   169f8:	f000 fef0 	bl	177dc <__aeabi_i2d>
   169fc:	4602      	mov	r2, r0
   169fe:	460b      	mov	r3, r1
   16a00:	4610      	mov	r0, r2
   16a02:	4619      	mov	r1, r3
   16a04:	a3a6      	add	r3, pc, #664	; (adr r3, 16ca0 <servo_set+0x2bc>)
   16a06:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a0a:	f000 ff4d 	bl	178a8 <__aeabi_dmul>
   16a0e:	4602      	mov	r2, r0
   16a10:	460b      	mov	r3, r1
   16a12:	4610      	mov	r0, r2
   16a14:	4619      	mov	r1, r3
   16a16:	f001 f9e1 	bl	17ddc <__aeabi_d2iz>
   16a1a:	4603      	mov	r3, r0
   16a1c:	b29b      	uxth	r3, r3
   16a1e:	b29b      	uxth	r3, r3
   16a20:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16a24:	81fb      	strh	r3, [r7, #14]
   16a26:	89fb      	ldrh	r3, [r7, #14]
   16a28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a2c:	d307      	bcc.n	16a3e <servo_set+0x5a>
   16a2e:	89fb      	ldrh	r3, [r7, #14]
   16a30:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a34:	bf28      	it	cs
   16a36:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a3a:	b29a      	uxth	r2, r3
   16a3c:	e001      	b.n	16a42 <servo_set+0x5e>
   16a3e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a42:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a4a:	80da      	strh	r2, [r3, #6]
   16a4c:	687b      	ldr	r3, [r7, #4]
   16a4e:	881b      	ldrh	r3, [r3, #0]
   16a50:	b21b      	sxth	r3, r3
   16a52:	005b      	lsls	r3, r3, #1
   16a54:	4618      	mov	r0, r3
   16a56:	f000 fec1 	bl	177dc <__aeabi_i2d>
   16a5a:	4602      	mov	r2, r0
   16a5c:	460b      	mov	r3, r1
   16a5e:	4610      	mov	r0, r2
   16a60:	4619      	mov	r1, r3
   16a62:	a38f      	add	r3, pc, #572	; (adr r3, 16ca0 <servo_set+0x2bc>)
   16a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a68:	f000 ff1e 	bl	178a8 <__aeabi_dmul>
   16a6c:	4602      	mov	r2, r0
   16a6e:	460b      	mov	r3, r1
   16a70:	4610      	mov	r0, r2
   16a72:	4619      	mov	r1, r3
   16a74:	f001 f9b2 	bl	17ddc <__aeabi_d2iz>
   16a78:	4603      	mov	r3, r0
   16a7a:	b29b      	uxth	r3, r3
   16a7c:	b29b      	uxth	r3, r3
   16a7e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16a82:	81fb      	strh	r3, [r7, #14]
   16a84:	89fb      	ldrh	r3, [r7, #14]
   16a86:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a8a:	d307      	bcc.n	16a9c <servo_set+0xb8>
   16a8c:	89fb      	ldrh	r3, [r7, #14]
   16a8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a92:	bf28      	it	cs
   16a94:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a98:	b29a      	uxth	r2, r3
   16a9a:	e001      	b.n	16aa0 <servo_set+0xbc>
   16a9c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16aa0:	f24b 6334 	movw	r3, #46644	; 0xb634
   16aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aa8:	825a      	strh	r2, [r3, #18]
   16aaa:	687b      	ldr	r3, [r7, #4]
   16aac:	3304      	adds	r3, #4
   16aae:	881b      	ldrh	r3, [r3, #0]
   16ab0:	b21b      	sxth	r3, r3
   16ab2:	4618      	mov	r0, r3
   16ab4:	f000 fe92 	bl	177dc <__aeabi_i2d>
   16ab8:	4602      	mov	r2, r0
   16aba:	460b      	mov	r3, r1
   16abc:	4610      	mov	r0, r2
   16abe:	4619      	mov	r1, r3
   16ac0:	a379      	add	r3, pc, #484	; (adr r3, 16ca8 <servo_set+0x2c4>)
   16ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ac6:	f000 feef 	bl	178a8 <__aeabi_dmul>
   16aca:	4602      	mov	r2, r0
   16acc:	460b      	mov	r3, r1
   16ace:	4610      	mov	r0, r2
   16ad0:	4619      	mov	r1, r3
   16ad2:	f001 f983 	bl	17ddc <__aeabi_d2iz>
   16ad6:	4603      	mov	r3, r0
   16ad8:	b29b      	uxth	r3, r3
   16ada:	b29b      	uxth	r3, r3
   16adc:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16ae0:	3320      	adds	r3, #32
   16ae2:	81fb      	strh	r3, [r7, #14]
   16ae4:	89fb      	ldrh	r3, [r7, #14]
   16ae6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16aea:	d307      	bcc.n	16afc <servo_set+0x118>
   16aec:	89fb      	ldrh	r3, [r7, #14]
   16aee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16af2:	bf28      	it	cs
   16af4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16af8:	b29a      	uxth	r2, r3
   16afa:	e001      	b.n	16b00 <servo_set+0x11c>
   16afc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b00:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b08:	819a      	strh	r2, [r3, #12]
   16b0a:	687b      	ldr	r3, [r7, #4]
   16b0c:	885b      	ldrh	r3, [r3, #2]
   16b0e:	81bb      	strh	r3, [r7, #12]
   16b10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16b14:	2b00      	cmp	r3, #0
   16b16:	dd06      	ble.n	16b26 <servo_set+0x142>
   16b18:	f04f 0400 	mov.w	r4, #0
   16b1c:	f04f 0500 	mov.w	r5, #0
   16b20:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16b24:	e002      	b.n	16b2c <servo_set+0x148>
   16b26:	a562      	add	r5, pc, #392	; (adr r5, 16cb0 <servo_set+0x2cc>)
   16b28:	e9d5 4500 	ldrd	r4, r5, [r5]
   16b2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16b30:	4618      	mov	r0, r3
   16b32:	f000 fe53 	bl	177dc <__aeabi_i2d>
   16b36:	4602      	mov	r2, r0
   16b38:	460b      	mov	r3, r1
   16b3a:	4620      	mov	r0, r4
   16b3c:	4629      	mov	r1, r5
   16b3e:	f000 feb3 	bl	178a8 <__aeabi_dmul>
   16b42:	4602      	mov	r2, r0
   16b44:	460b      	mov	r3, r1
   16b46:	4610      	mov	r0, r2
   16b48:	4619      	mov	r1, r3
   16b4a:	a35b      	add	r3, pc, #364	; (adr r3, 16cb8 <servo_set+0x2d4>)
   16b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b50:	f000 feaa 	bl	178a8 <__aeabi_dmul>
   16b54:	4602      	mov	r2, r0
   16b56:	460b      	mov	r3, r1
   16b58:	4610      	mov	r0, r2
   16b5a:	4619      	mov	r1, r3
   16b5c:	f001 f93e 	bl	17ddc <__aeabi_d2iz>
   16b60:	4603      	mov	r3, r0
   16b62:	b29b      	uxth	r3, r3
   16b64:	b29b      	uxth	r3, r3
   16b66:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16b6a:	81fb      	strh	r3, [r7, #14]
   16b6c:	89fb      	ldrh	r3, [r7, #14]
   16b6e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b72:	d307      	bcc.n	16b84 <servo_set+0x1a0>
   16b74:	89fb      	ldrh	r3, [r7, #14]
   16b76:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b7a:	bf28      	it	cs
   16b7c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b80:	b29a      	uxth	r2, r3
   16b82:	e001      	b.n	16b88 <servo_set+0x1a4>
   16b84:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b88:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b90:	801a      	strh	r2, [r3, #0]
   16b92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16b96:	2b00      	cmp	r3, #0
   16b98:	dd03      	ble.n	16ba2 <servo_set+0x1be>
   16b9a:	a545      	add	r5, pc, #276	; (adr r5, 16cb0 <servo_set+0x2cc>)
   16b9c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ba0:	e005      	b.n	16bae <servo_set+0x1ca>
   16ba2:	f04f 0400 	mov.w	r4, #0
   16ba6:	f04f 0500 	mov.w	r5, #0
   16baa:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16bb2:	4618      	mov	r0, r3
   16bb4:	f000 fe12 	bl	177dc <__aeabi_i2d>
   16bb8:	4602      	mov	r2, r0
   16bba:	460b      	mov	r3, r1
   16bbc:	4620      	mov	r0, r4
   16bbe:	4629      	mov	r1, r5
   16bc0:	f000 fe72 	bl	178a8 <__aeabi_dmul>
   16bc4:	4602      	mov	r2, r0
   16bc6:	460b      	mov	r3, r1
   16bc8:	4610      	mov	r0, r2
   16bca:	4619      	mov	r1, r3
   16bcc:	a33c      	add	r3, pc, #240	; (adr r3, 16cc0 <servo_set+0x2dc>)
   16bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bd2:	f000 fe69 	bl	178a8 <__aeabi_dmul>
   16bd6:	4602      	mov	r2, r0
   16bd8:	460b      	mov	r3, r1
   16bda:	4610      	mov	r0, r2
   16bdc:	4619      	mov	r1, r3
   16bde:	f001 f8fd 	bl	17ddc <__aeabi_d2iz>
   16be2:	4603      	mov	r3, r0
   16be4:	b29b      	uxth	r3, r3
   16be6:	b29b      	uxth	r3, r3
   16be8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16bec:	3320      	adds	r3, #32
   16bee:	81fb      	strh	r3, [r7, #14]
   16bf0:	89fb      	ldrh	r3, [r7, #14]
   16bf2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16bf6:	d307      	bcc.n	16c08 <servo_set+0x224>
   16bf8:	89fb      	ldrh	r3, [r7, #14]
   16bfa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16bfe:	bf28      	it	cs
   16c00:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c04:	b29a      	uxth	r2, r3
   16c06:	e001      	b.n	16c0c <servo_set+0x228>
   16c08:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c0c:	f24b 6334 	movw	r3, #46644	; 0xb634
   16c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c14:	809a      	strh	r2, [r3, #4]
   16c16:	687b      	ldr	r3, [r7, #4]
   16c18:	3306      	adds	r3, #6
   16c1a:	881b      	ldrh	r3, [r3, #0]
   16c1c:	b21b      	sxth	r3, r3
   16c1e:	4618      	mov	r0, r3
   16c20:	f000 fddc 	bl	177dc <__aeabi_i2d>
   16c24:	4604      	mov	r4, r0
   16c26:	460d      	mov	r5, r1
   16c28:	687b      	ldr	r3, [r7, #4]
   16c2a:	3302      	adds	r3, #2
   16c2c:	881b      	ldrh	r3, [r3, #0]
   16c2e:	b21b      	sxth	r3, r3
   16c30:	4618      	mov	r0, r3
   16c32:	f000 fdd3 	bl	177dc <__aeabi_i2d>
   16c36:	4602      	mov	r2, r0
   16c38:	460b      	mov	r3, r1
   16c3a:	4620      	mov	r0, r4
   16c3c:	4629      	mov	r1, r5
   16c3e:	f000 fc81 	bl	17544 <__adddf3>
   16c42:	4602      	mov	r2, r0
   16c44:	460b      	mov	r3, r1
   16c46:	4610      	mov	r0, r2
   16c48:	4619      	mov	r1, r3
   16c4a:	a31f      	add	r3, pc, #124	; (adr r3, 16cc8 <servo_set+0x2e4>)
   16c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c50:	f000 fe2a 	bl	178a8 <__aeabi_dmul>
   16c54:	4602      	mov	r2, r0
   16c56:	460b      	mov	r3, r1
   16c58:	4610      	mov	r0, r2
   16c5a:	4619      	mov	r1, r3
   16c5c:	f001 f8be 	bl	17ddc <__aeabi_d2iz>
   16c60:	4603      	mov	r3, r0
   16c62:	b29b      	uxth	r3, r3
   16c64:	b29b      	uxth	r3, r3
   16c66:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16c6a:	3320      	adds	r3, #32
   16c6c:	81fb      	strh	r3, [r7, #14]
   16c6e:	89fb      	ldrh	r3, [r7, #14]
   16c70:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c74:	d307      	bcc.n	16c86 <servo_set+0x2a2>
   16c76:	89fb      	ldrh	r3, [r7, #14]
   16c78:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c7c:	bf28      	it	cs
   16c7e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c82:	b29a      	uxth	r2, r3
   16c84:	e001      	b.n	16c8a <servo_set+0x2a6>
   16c86:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c8a:	f24b 6334 	movw	r3, #46644	; 0xb634
   16c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c92:	81da      	strh	r2, [r3, #14]
}
   16c94:	3710      	adds	r7, #16
   16c96:	46bd      	mov	sp, r7
   16c98:	bdb0      	pop	{r4, r5, r7, pc}
   16c9a:	bf00      	nop
   16c9c:	f3af 8000 	nop.w
   16ca0:	aaaa9ef0 	.word	0xaaaa9ef0
   16ca4:	3feaaaaa 	.word	0x3feaaaaa
   16ca8:	fc96473e 	.word	0xfc96473e
   16cac:	3fdfc962 	.word	0x3fdfc962
   16cb0:	51eb851f 	.word	0x51eb851f
   16cb4:	3fe51eb8 	.word	0x3fe51eb8
   16cb8:	9999999a 	.word	0x9999999a
   16cbc:	bfe19999 	.word	0xbfe19999
   16cc0:	aaaa9ef0 	.word	0xaaaa9ef0
   16cc4:	bfe0aaaa 	.word	0xbfe0aaaa
   16cc8:	eeeed77a 	.word	0xeeeed77a
   16ccc:	bfdeeeee 	.word	0xbfdeeeee

00016cd0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16cd0:	b480      	push	{r7}
   16cd2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16cd4:	f242 0320 	movw	r3, #8224	; 0x2020
   16cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cdc:	2200      	movs	r2, #0
   16cde:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16ce0:	f242 0309 	movw	r3, #8201	; 0x2009
   16ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ce8:	2219      	movs	r2, #25
   16cea:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16cec:	f242 030b 	movw	r3, #8203	; 0x200b
   16cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cf4:	2200      	movs	r2, #0
   16cf6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16cf8:	f242 030a 	movw	r3, #8202	; 0x200a
   16cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d00:	2208      	movs	r2, #8
   16d02:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16d04:	f242 0320 	movw	r3, #8224	; 0x2020
   16d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d0c:	2286      	movs	r2, #134	; 0x86
   16d0e:	701a      	strb	r2, [r3, #0]
}
   16d10:	46bd      	mov	sp, r7
   16d12:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d16:	4770      	bx	lr

00016d18 <uart_init_rx>:

void uart_init_rx() {
   16d18:	b480      	push	{r7}
   16d1a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16d1c:	f242 030a 	movw	r3, #8202	; 0x200a
   16d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d24:	f242 020a 	movw	r2, #8202	; 0x200a
   16d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d2c:	7812      	ldrb	r2, [r2, #0]
   16d2e:	b2d2      	uxtb	r2, r2
   16d30:	f042 0210 	orr.w	r2, r2, #16
   16d34:	b2d2      	uxtb	r2, r2
   16d36:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16d38:	f242 030a 	movw	r3, #8202	; 0x200a
   16d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d40:	f242 020a 	movw	r2, #8202	; 0x200a
   16d44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d48:	7812      	ldrb	r2, [r2, #0]
   16d4a:	b2d2      	uxtb	r2, r2
   16d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d50:	b2d2      	uxtb	r2, r2
   16d52:	701a      	strb	r2, [r3, #0]
}
   16d54:	46bd      	mov	sp, r7
   16d56:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d5a:	4770      	bx	lr

00016d5c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16d5c:	b480      	push	{r7}
   16d5e:	b083      	sub	sp, #12
   16d60:	af00      	add	r7, sp, #0
   16d62:	4603      	mov	r3, r0
   16d64:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16d66:	f242 030a 	movw	r3, #8202	; 0x200a
   16d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d6e:	781b      	ldrb	r3, [r3, #0]
   16d70:	b2db      	uxtb	r3, r3
   16d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16d76:	2b00      	cmp	r3, #0
   16d78:	d028      	beq.n	16dcc <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16d7a:	f24b 6349 	movw	r3, #46665	; 0xb649
   16d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d82:	781b      	ldrb	r3, [r3, #0]
   16d84:	b2db      	uxtb	r3, r3
   16d86:	461a      	mov	r2, r3
   16d88:	f24b 6348 	movw	r3, #46664	; 0xb648
   16d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d90:	781b      	ldrb	r3, [r3, #0]
   16d92:	3301      	adds	r3, #1
   16d94:	429a      	cmp	r2, r3
   16d96:	d100      	bne.n	16d9a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16d98:	e02c      	b.n	16df4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16d9a:	f24b 6348 	movw	r3, #46664	; 0xb648
   16d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da2:	781b      	ldrb	r3, [r3, #0]
   16da4:	461a      	mov	r2, r3
   16da6:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dae:	79f9      	ldrb	r1, [r7, #7]
   16db0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16db2:	f24b 6348 	movw	r3, #46664	; 0xb648
   16db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dba:	781b      	ldrb	r3, [r3, #0]
   16dbc:	3301      	adds	r3, #1
   16dbe:	b2da      	uxtb	r2, r3
   16dc0:	f24b 6348 	movw	r3, #46664	; 0xb648
   16dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dc8:	701a      	strb	r2, [r3, #0]
   16dca:	e013      	b.n	16df4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16dcc:	f242 030c 	movw	r3, #8204	; 0x200c
   16dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dd4:	79fa      	ldrb	r2, [r7, #7]
   16dd6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16dd8:	f242 030a 	movw	r3, #8202	; 0x200a
   16ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de0:	f242 020a 	movw	r2, #8202	; 0x200a
   16de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16de8:	7812      	ldrb	r2, [r2, #0]
   16dea:	b2d2      	uxtb	r2, r2
   16dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16df0:	b2d2      	uxtb	r2, r2
   16df2:	701a      	strb	r2, [r3, #0]
  }
}
   16df4:	370c      	adds	r7, #12
   16df6:	46bd      	mov	sp, r7
   16df8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dfc:	4770      	bx	lr
   16dfe:	bf00      	nop

00016e00 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16e00:	b590      	push	{r4, r7, lr}
   16e02:	b089      	sub	sp, #36	; 0x24
   16e04:	af00      	add	r7, sp, #0
   16e06:	4603      	mov	r3, r0
   16e08:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16e0a:	f648 031c 	movw	r3, #34844	; 0x881c
   16e0e:	f2c0 0301 	movt	r3, #1
   16e12:	f107 040c 	add.w	r4, r7, #12
   16e16:	6818      	ldr	r0, [r3, #0]
   16e18:	6859      	ldr	r1, [r3, #4]
   16e1a:	689a      	ldr	r2, [r3, #8]
   16e1c:	68db      	ldr	r3, [r3, #12]
   16e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16e20:	79fb      	ldrb	r3, [r7, #7]
   16e22:	091b      	lsrs	r3, r3, #4
   16e24:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16e26:	79fb      	ldrb	r3, [r7, #7]
   16e28:	f003 030f 	and.w	r3, r3, #15
   16e2c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16e2e:	230f      	movs	r3, #15
   16e30:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16e32:	230f      	movs	r3, #15
   16e34:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16e36:	7ffb      	ldrb	r3, [r7, #31]
   16e38:	f107 0220 	add.w	r2, r7, #32
   16e3c:	4413      	add	r3, r2
   16e3e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16e42:	4618      	mov	r0, r3
   16e44:	f7ff ff8a 	bl	16d5c <uart_transmit>
  uart_transmit(hex[low]);
   16e48:	7fbb      	ldrb	r3, [r7, #30]
   16e4a:	f107 0220 	add.w	r2, r7, #32
   16e4e:	4413      	add	r3, r2
   16e50:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16e54:	4618      	mov	r0, r3
   16e56:	f7ff ff81 	bl	16d5c <uart_transmit>
} 
   16e5a:	3724      	adds	r7, #36	; 0x24
   16e5c:	46bd      	mov	sp, r7
   16e5e:	bd90      	pop	{r4, r7, pc}

00016e60 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16e60:	b580      	push	{r7, lr}
   16e62:	b084      	sub	sp, #16
   16e64:	af00      	add	r7, sp, #0
   16e66:	4603      	mov	r3, r0
   16e68:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16e6a:	88fb      	ldrh	r3, [r7, #6]
   16e6c:	0a1b      	lsrs	r3, r3, #8
   16e6e:	b29b      	uxth	r3, r3
   16e70:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16e72:	88fb      	ldrh	r3, [r7, #6]
   16e74:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16e76:	7bfb      	ldrb	r3, [r7, #15]
   16e78:	4618      	mov	r0, r3
   16e7a:	f7ff ffc1 	bl	16e00 <uart_print_hex>
  uart_print_hex(low);
   16e7e:	7bbb      	ldrb	r3, [r7, #14]
   16e80:	4618      	mov	r0, r3
   16e82:	f7ff ffbd 	bl	16e00 <uart_print_hex>
}
   16e86:	3710      	adds	r7, #16
   16e88:	46bd      	mov	sp, r7
   16e8a:	bd80      	pop	{r7, pc}

00016e8c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16e8c:	b580      	push	{r7, lr}
   16e8e:	b084      	sub	sp, #16
   16e90:	af00      	add	r7, sp, #0
   16e92:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16e94:	2300      	movs	r3, #0
   16e96:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16e98:	e009      	b.n	16eae <uart_print_string+0x22>
    uart_transmit(s[i]);
   16e9a:	7bfb      	ldrb	r3, [r7, #15]
   16e9c:	687a      	ldr	r2, [r7, #4]
   16e9e:	4413      	add	r3, r2
   16ea0:	781b      	ldrb	r3, [r3, #0]
   16ea2:	4618      	mov	r0, r3
   16ea4:	f7ff ff5a 	bl	16d5c <uart_transmit>
    i++;
   16ea8:	7bfb      	ldrb	r3, [r7, #15]
   16eaa:	3301      	adds	r3, #1
   16eac:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16eae:	7bfb      	ldrb	r3, [r7, #15]
   16eb0:	687a      	ldr	r2, [r7, #4]
   16eb2:	4413      	add	r3, r2
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	2b00      	cmp	r3, #0
   16eb8:	d1ef      	bne.n	16e9a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16eba:	3710      	adds	r7, #16
   16ebc:	46bd      	mov	sp, r7
   16ebe:	bd80      	pop	{r7, pc}

00016ec0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16ec0:	b480      	push	{r7}
   16ec2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16ec4:	f24b 6348 	movw	r3, #46664	; 0xb648
   16ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ecc:	781a      	ldrb	r2, [r3, #0]
   16ece:	f24b 6349 	movw	r3, #46665	; 0xb649
   16ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ed6:	781b      	ldrb	r3, [r3, #0]
   16ed8:	b2db      	uxtb	r3, r3
   16eda:	429a      	cmp	r2, r3
   16edc:	d10e      	bne.n	16efc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16ede:	f242 030a 	movw	r3, #8202	; 0x200a
   16ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee6:	f242 020a 	movw	r2, #8202	; 0x200a
   16eea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16eee:	7812      	ldrb	r2, [r2, #0]
   16ef0:	b2d2      	uxtb	r2, r2
   16ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16ef6:	b2d2      	uxtb	r2, r2
   16ef8:	701a      	strb	r2, [r3, #0]
   16efa:	e01d      	b.n	16f38 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16efc:	f242 030c 	movw	r3, #8204	; 0x200c
   16f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f04:	f24b 6249 	movw	r2, #46665	; 0xb649
   16f08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f0c:	7812      	ldrb	r2, [r2, #0]
   16f0e:	b2d2      	uxtb	r2, r2
   16f10:	4611      	mov	r1, r2
   16f12:	f24b 624c 	movw	r2, #46668	; 0xb64c
   16f16:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f1a:	5c52      	ldrb	r2, [r2, r1]
   16f1c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16f1e:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f26:	781b      	ldrb	r3, [r3, #0]
   16f28:	b2db      	uxtb	r3, r3
   16f2a:	3301      	adds	r3, #1
   16f2c:	b2da      	uxtb	r2, r3
   16f2e:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f36:	701a      	strb	r2, [r3, #0]
  }
}
   16f38:	46bd      	mov	sp, r7
   16f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f3e:	4770      	bx	lr

00016f40 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16f40:	b580      	push	{r7, lr}
   16f42:	b082      	sub	sp, #8
   16f44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16f46:	2010      	movs	r0, #16
   16f48:	2101      	movs	r1, #1
   16f4a:	f7e9 ff39 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16f4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16f52:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16f5a:	2201      	movs	r2, #1
   16f5c:	f7ea fa40 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f64:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16f66:	2310      	movs	r3, #16
   16f68:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16f6a:	2303      	movs	r3, #3
   16f6c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16f6e:	1d3b      	adds	r3, r7, #4
   16f70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16f74:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16f78:	4619      	mov	r1, r3
   16f7a:	f7ea f8f5 	bl	1168 <GPIO_Init>
}
   16f7e:	3708      	adds	r7, #8
   16f80:	46bd      	mov	sp, r7
   16f82:	bd80      	pop	{r7, pc}

00016f84 <init_button>:

void init_button(void)
{
   16f84:	b580      	push	{r7, lr}
   16f86:	b082      	sub	sp, #8
   16f88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16f8a:	2004      	movs	r0, #4
   16f8c:	2101      	movs	r1, #1
   16f8e:	f7e9 ff17 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16f92:	2301      	movs	r3, #1
   16f94:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16f96:	2304      	movs	r3, #4
   16f98:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16f9a:	2303      	movs	r3, #3
   16f9c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16f9e:	1d3b      	adds	r3, r7, #4
   16fa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16fa4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16fa8:	4619      	mov	r1, r3
   16faa:	f7ea f8dd 	bl	1168 <GPIO_Init>
}
   16fae:	3708      	adds	r7, #8
   16fb0:	46bd      	mov	sp, r7
   16fb2:	bd80      	pop	{r7, pc}

00016fb4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16fb4:	b580      	push	{r7, lr}
   16fb6:	b084      	sub	sp, #16
   16fb8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16fba:	2001      	movs	r0, #1
   16fbc:	2101      	movs	r1, #1
   16fbe:	f7e9 feff 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16fc2:	2000      	movs	r0, #0
   16fc4:	2100      	movs	r1, #0
   16fc6:	f7ea fb03 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16fca:	2301      	movs	r3, #1
   16fcc:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16fce:	2300      	movs	r3, #0
   16fd0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16fd2:	2308      	movs	r3, #8
   16fd4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16fd6:	2301      	movs	r3, #1
   16fd8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16fda:	f107 0308 	add.w	r3, r7, #8
   16fde:	4618      	mov	r0, r3
   16fe0:	f7ea fffc 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16fe4:	2306      	movs	r3, #6
   16fe6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16fe8:	230f      	movs	r3, #15
   16fea:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16fec:	230f      	movs	r3, #15
   16fee:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16ff0:	2301      	movs	r3, #1
   16ff2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16ff4:	1d3b      	adds	r3, r7, #4
   16ff6:	4618      	mov	r0, r3
   16ff8:	f7eb f92a 	bl	2250 <NVIC_Init>
}
   16ffc:	3710      	adds	r7, #16
   16ffe:	46bd      	mov	sp, r7
   17000:	bd80      	pop	{r7, pc}
   17002:	bf00      	nop

00017004 <init_rs232>:

void init_rs232(void)
{
   17004:	b580      	push	{r7, lr}
   17006:	b086      	sub	sp, #24
   17008:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1700a:	2005      	movs	r0, #5
   1700c:	2101      	movs	r1, #1
   1700e:	f7e9 fed7 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   17012:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17016:	2101      	movs	r1, #1
   17018:	f7e9 fefa 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1701c:	2308      	movs	r3, #8
   1701e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17020:	2304      	movs	r3, #4
   17022:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17024:	1d3b      	adds	r3, r7, #4
   17026:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1702a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1702e:	4619      	mov	r1, r3
   17030:	f7ea f89a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17034:	2304      	movs	r3, #4
   17036:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17038:	2303      	movs	r3, #3
   1703a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1703c:	2318      	movs	r3, #24
   1703e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17040:	1d3b      	adds	r3, r7, #4
   17042:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17046:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1704a:	4619      	mov	r1, r3
   1704c:	f7ea f88c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17050:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17054:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17056:	2300      	movs	r3, #0
   17058:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1705a:	2300      	movs	r3, #0
   1705c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1705e:	2300      	movs	r3, #0
   17060:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17062:	2300      	movs	r3, #0
   17064:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17066:	230c      	movs	r3, #12
   17068:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1706a:	f107 0308 	add.w	r3, r7, #8
   1706e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17072:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17076:	4619      	mov	r1, r3
   17078:	f7ea fb5e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1707c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17080:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17084:	2101      	movs	r1, #1
   17086:	f7ea fc75 	bl	1974 <USART_Cmd>
}
   1708a:	3718      	adds	r7, #24
   1708c:	46bd      	mov	sp, r7
   1708e:	bd80      	pop	{r7, pc}

00017090 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17090:	b580      	push	{r7, lr}
   17092:	b082      	sub	sp, #8
   17094:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17096:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1709a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1709e:	f240 7127 	movw	r1, #1831	; 0x727
   170a2:	2200      	movs	r2, #0
   170a4:	f7ea fc86 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   170a8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   170ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
   170b0:	f240 5125 	movw	r1, #1317	; 0x525
   170b4:	2201      	movs	r2, #1
   170b6:	f7ea fc7d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   170ba:	2326      	movs	r3, #38	; 0x26
   170bc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   170be:	2300      	movs	r3, #0
   170c0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   170c2:	2301      	movs	r3, #1
   170c4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   170c6:	1d3b      	adds	r3, r7, #4
   170c8:	4618      	mov	r0, r3
   170ca:	f7eb f8c1 	bl	2250 <NVIC_Init>
}
   170ce:	3708      	adds	r7, #8
   170d0:	46bd      	mov	sp, r7
   170d2:	bd80      	pop	{r7, pc}

000170d4 <enable_rs232>:

void enable_rs232(void)
{
   170d4:	b580      	push	{r7, lr}
   170d6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   170d8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   170dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   170e0:	2101      	movs	r1, #1
   170e2:	f7ea fc47 	bl	1974 <USART_Cmd>
}
   170e6:	bd80      	pop	{r7, pc}

000170e8 <send_byte>:

void send_byte(uint8_t b)
{
   170e8:	b580      	push	{r7, lr}
   170ea:	b082      	sub	sp, #8
   170ec:	af00      	add	r7, sp, #0
   170ee:	4603      	mov	r3, r0
   170f0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   170f2:	bf00      	nop
   170f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   170f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   170fc:	2180      	movs	r1, #128	; 0x80
   170fe:	f7ea fea5 	bl	1e4c <USART_GetFlagStatus>
   17102:	4603      	mov	r3, r0
   17104:	2b00      	cmp	r3, #0
   17106:	d0f5      	beq.n	170f4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1710c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17114:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17118:	68d2      	ldr	r2, [r2, #12]
   1711a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1711e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17120:	79fb      	ldrb	r3, [r7, #7]
   17122:	b29b      	uxth	r3, r3
   17124:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17128:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1712c:	4619      	mov	r1, r3
   1712e:	f7ea fd41 	bl	1bb4 <USART_SendData>
}
   17132:	3708      	adds	r7, #8
   17134:	46bd      	mov	sp, r7
   17136:	bd80      	pop	{r7, pc}

00017138 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17138:	b580      	push	{r7, lr}
   1713a:	b082      	sub	sp, #8
   1713c:	af00      	add	r7, sp, #0
   1713e:	4603      	mov	r3, r0
   17140:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17142:	79fb      	ldrb	r3, [r7, #7]
   17144:	3330      	adds	r3, #48	; 0x30
   17146:	b2db      	uxtb	r3, r3
   17148:	4618      	mov	r0, r3
   1714a:	f7ff ffcd 	bl	170e8 <send_byte>
}
   1714e:	3708      	adds	r7, #8
   17150:	46bd      	mov	sp, r7
   17152:	bd80      	pop	{r7, pc}

00017154 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17154:	b580      	push	{r7, lr}
   17156:	b084      	sub	sp, #16
   17158:	af00      	add	r7, sp, #0
   1715a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1715c:	2300      	movs	r3, #0
   1715e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17160:	e009      	b.n	17176 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17162:	68fb      	ldr	r3, [r7, #12]
   17164:	687a      	ldr	r2, [r7, #4]
   17166:	4413      	add	r3, r2
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	4618      	mov	r0, r3
   1716c:	f7ff ffbc 	bl	170e8 <send_byte>
        i++;
   17170:	68fb      	ldr	r3, [r7, #12]
   17172:	3301      	adds	r3, #1
   17174:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17176:	68fb      	ldr	r3, [r7, #12]
   17178:	687a      	ldr	r2, [r7, #4]
   1717a:	4413      	add	r3, r2
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	2b00      	cmp	r3, #0
   17180:	d1ef      	bne.n	17162 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17182:	3710      	adds	r7, #16
   17184:	46bd      	mov	sp, r7
   17186:	bd80      	pop	{r7, pc}

00017188 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17188:	b580      	push	{r7, lr}
   1718a:	b08a      	sub	sp, #40	; 0x28
   1718c:	af00      	add	r7, sp, #0
   1718e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17190:	2300      	movs	r3, #0
   17192:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17194:	687b      	ldr	r3, [r7, #4]
   17196:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17198:	69fb      	ldr	r3, [r7, #28]
   1719a:	2b00      	cmp	r3, #0
   1719c:	d106      	bne.n	171ac <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1719e:	f648 002c 	movw	r0, #34860	; 0x882c
   171a2:	f2c0 0001 	movt	r0, #1
   171a6:	f7ff ffd5 	bl	17154 <vPrintString>
   171aa:	e062      	b.n	17272 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   171ac:	e024      	b.n	171f8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   171ae:	69f9      	ldr	r1, [r7, #28]
   171b0:	f246 6367 	movw	r3, #26215	; 0x6667
   171b4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   171b8:	fb83 2301 	smull	r2, r3, r3, r1
   171bc:	109a      	asrs	r2, r3, #2
   171be:	17cb      	asrs	r3, r1, #31
   171c0:	1ad2      	subs	r2, r2, r3
   171c2:	4613      	mov	r3, r2
   171c4:	009b      	lsls	r3, r3, #2
   171c6:	4413      	add	r3, r2
   171c8:	005b      	lsls	r3, r3, #1
   171ca:	1aca      	subs	r2, r1, r3
   171cc:	b2d3      	uxtb	r3, r2
   171ce:	3330      	adds	r3, #48	; 0x30
   171d0:	b2da      	uxtb	r2, r3
   171d2:	f107 010c 	add.w	r1, r7, #12
   171d6:	6a3b      	ldr	r3, [r7, #32]
   171d8:	440b      	add	r3, r1
   171da:	701a      	strb	r2, [r3, #0]
            count ++;
   171dc:	6a3b      	ldr	r3, [r7, #32]
   171de:	3301      	adds	r3, #1
   171e0:	623b      	str	r3, [r7, #32]
            num /= 10;
   171e2:	69fa      	ldr	r2, [r7, #28]
   171e4:	f246 6367 	movw	r3, #26215	; 0x6667
   171e8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   171ec:	fb83 1302 	smull	r1, r3, r3, r2
   171f0:	1099      	asrs	r1, r3, #2
   171f2:	17d3      	asrs	r3, r2, #31
   171f4:	1acb      	subs	r3, r1, r3
   171f6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   171f8:	69fb      	ldr	r3, [r7, #28]
   171fa:	2b00      	cmp	r3, #0
   171fc:	d1d7      	bne.n	171ae <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   171fe:	f107 020c 	add.w	r2, r7, #12
   17202:	6a3b      	ldr	r3, [r7, #32]
   17204:	4413      	add	r3, r2
   17206:	2200      	movs	r2, #0
   17208:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   1720a:	2300      	movs	r3, #0
   1720c:	627b      	str	r3, [r7, #36]	; 0x24
   1720e:	e020      	b.n	17252 <vPrintNumber+0xca>
        {
            tmp = time[i];
   17210:	f107 020c 	add.w	r2, r7, #12
   17214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17216:	4413      	add	r3, r2
   17218:	781b      	ldrb	r3, [r3, #0]
   1721a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   1721c:	6a3a      	ldr	r2, [r7, #32]
   1721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17220:	1ad3      	subs	r3, r2, r3
   17222:	3b01      	subs	r3, #1
   17224:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17228:	4413      	add	r3, r2
   1722a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1722e:	f107 010c 	add.w	r1, r7, #12
   17232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17234:	440b      	add	r3, r1
   17236:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17238:	6a3a      	ldr	r2, [r7, #32]
   1723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1723c:	1ad3      	subs	r3, r2, r3
   1723e:	3b01      	subs	r3, #1
   17240:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17244:	440b      	add	r3, r1
   17246:	7efa      	ldrb	r2, [r7, #27]
   17248:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1724e:	3301      	adds	r3, #1
   17250:	627b      	str	r3, [r7, #36]	; 0x24
   17252:	6a3b      	ldr	r3, [r7, #32]
   17254:	085a      	lsrs	r2, r3, #1
   17256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17258:	429a      	cmp	r2, r3
   1725a:	d8d9      	bhi.n	17210 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1725c:	f107 030c 	add.w	r3, r7, #12
   17260:	4618      	mov	r0, r3
   17262:	f7ff ff77 	bl	17154 <vPrintString>
        vPrintString("\n\r");
   17266:	f648 0030 	movw	r0, #34864	; 0x8830
   1726a:	f2c0 0001 	movt	r0, #1
   1726e:	f7ff ff71 	bl	17154 <vPrintString>
    }
}
   17272:	3728      	adds	r7, #40	; 0x28
   17274:	46bd      	mov	sp, r7
   17276:	bd80      	pop	{r7, pc}

00017278 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17278:	b480      	push	{r7}
   1727a:	b083      	sub	sp, #12
   1727c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1727e:	2300      	movs	r3, #0
   17280:	607b      	str	r3, [r7, #4]
   17282:	e00a      	b.n	1729a <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   17284:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1728c:	687a      	ldr	r2, [r7, #4]
   1728e:	2100      	movs	r1, #0
   17290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17294:	687b      	ldr	r3, [r7, #4]
   17296:	3301      	adds	r3, #1
   17298:	607b      	str	r3, [r7, #4]
   1729a:	687b      	ldr	r3, [r7, #4]
   1729c:	2b0c      	cmp	r3, #12
   1729e:	ddf1      	ble.n	17284 <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   172a0:	370c      	adds	r7, #12
   172a2:	46bd      	mov	sp, r7
   172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   172a8:	4770      	bx	lr
   172aa:	bf00      	nop

000172ac <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   172ac:	b590      	push	{r4, r7, lr}
   172ae:	b089      	sub	sp, #36	; 0x24
   172b0:	af04      	add	r7, sp, #16
    init_led();
   172b2:	f7ff fe45 	bl	16f40 <init_led>
    init_rs232();
   172b6:	f7ff fea5 	bl	17004 <init_rs232>
    enable_rs232_interrupts();
   172ba:	f7ff fee9 	bl	17090 <enable_rs232_interrupts>
    enable_rs232();
   172be:	f7ff ff09 	bl	170d4 <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   172c2:	f7ff ffd9 	bl	17278 <vInitInitialise>
    vSemaphoreInitialise();
   172c6:	f7eb fe5b 	bl	2f80 <vSemaphoreInitialise>
    vParameterInitialise();
   172ca:	f7eb fe99 	bl	3000 <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   172ce:	2300      	movs	r3, #0
   172d0:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   172d2:	2301      	movs	r3, #1
   172d4:	9300      	str	r3, [sp, #0]
   172d6:	4b42      	ldr	r3, [pc, #264]	; (173e0 <main+0x134>)
   172d8:	9301      	str	r3, [sp, #4]
   172da:	2300      	movs	r3, #0
   172dc:	9302      	str	r3, [sp, #8]
   172de:	2300      	movs	r3, #0
   172e0:	9303      	str	r3, [sp, #12]
   172e2:	f643 0031 	movw	r0, #14385	; 0x3831
   172e6:	f2c0 0000 	movt	r0, #0
   172ea:	f648 0134 	movw	r1, #34868	; 0x8834
   172ee:	f2c0 0101 	movt	r1, #1
   172f2:	2280      	movs	r2, #128	; 0x80
   172f4:	4b3b      	ldr	r3, [pc, #236]	; (173e4 <main+0x138>)
   172f6:	f7ed fa07 	bl	4708 <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   172fa:	2300      	movs	r3, #0
   172fc:	60fb      	str	r3, [r7, #12]
   172fe:	e064      	b.n	173ca <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17300:	2300      	movs	r3, #0
   17302:	60bb      	str	r3, [r7, #8]
   17304:	e00f      	b.n	17326 <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   17306:	f240 0360 	movw	r3, #96	; 0x60
   1730a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1730e:	68ba      	ldr	r2, [r7, #8]
   17310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17314:	68fb      	ldr	r3, [r7, #12]
   17316:	429a      	cmp	r2, r3
   17318:	d102      	bne.n	17320 <main+0x74>
            {
                flag = 1;  // sensor 
   1731a:	2301      	movs	r3, #1
   1731c:	607b      	str	r3, [r7, #4]
                break;
   1731e:	e005      	b.n	1732c <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17320:	68bb      	ldr	r3, [r7, #8]
   17322:	3301      	adds	r3, #1
   17324:	60bb      	str	r3, [r7, #8]
   17326:	68bb      	ldr	r3, [r7, #8]
   17328:	2b0c      	cmp	r3, #12
   1732a:	ddec      	ble.n	17306 <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   1732c:	687b      	ldr	r3, [r7, #4]
   1732e:	2b01      	cmp	r3, #1
   17330:	d125      	bne.n	1737e <main+0xd2>
        {
            flag = 0; 
   17332:	2300      	movs	r3, #0
   17334:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17336:	68fb      	ldr	r3, [r7, #12]
   17338:	222c      	movs	r2, #44	; 0x2c
   1733a:	fb02 f203 	mul.w	r2, r2, r3
   1733e:	f240 534c 	movw	r3, #1356	; 0x54c
   17342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17346:	18d4      	adds	r4, r2, r3
   17348:	68fb      	ldr	r3, [r7, #12]
   1734a:	009a      	lsls	r2, r3, #2
   1734c:	f640 33dc 	movw	r3, #3036	; 0xbdc
   17350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17354:	4413      	add	r3, r2
   17356:	2202      	movs	r2, #2
   17358:	9200      	str	r2, [sp, #0]
   1735a:	9301      	str	r3, [sp, #4]
   1735c:	2300      	movs	r3, #0
   1735e:	9302      	str	r3, [sp, #8]
   17360:	2300      	movs	r3, #0
   17362:	9303      	str	r3, [sp, #12]
   17364:	f243 4079 	movw	r0, #13433	; 0x3479
   17368:	f2c0 0000 	movt	r0, #0
   1736c:	f648 0140 	movw	r1, #34880	; 0x8840
   17370:	f2c0 0101 	movt	r1, #1
   17374:	2280      	movs	r2, #128	; 0x80
   17376:	4623      	mov	r3, r4
   17378:	f7ed f9c6 	bl	4708 <xTaskGenericCreate>
   1737c:	e022      	b.n	173c4 <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1737e:	68fb      	ldr	r3, [r7, #12]
   17380:	222c      	movs	r2, #44	; 0x2c
   17382:	fb02 f203 	mul.w	r2, r2, r3
   17386:	f240 534c 	movw	r3, #1356	; 0x54c
   1738a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1738e:	18d4      	adds	r4, r2, r3
   17390:	68fb      	ldr	r3, [r7, #12]
   17392:	009a      	lsls	r2, r3, #2
   17394:	f640 33dc 	movw	r3, #3036	; 0xbdc
   17398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1739c:	4413      	add	r3, r2
   1739e:	2202      	movs	r2, #2
   173a0:	9200      	str	r2, [sp, #0]
   173a2:	9301      	str	r3, [sp, #4]
   173a4:	2300      	movs	r3, #0
   173a6:	9302      	str	r3, [sp, #8]
   173a8:	2300      	movs	r3, #0
   173aa:	9303      	str	r3, [sp, #12]
   173ac:	f243 6079 	movw	r0, #13945	; 0x3679
   173b0:	f2c0 0000 	movt	r0, #0
   173b4:	f648 0148 	movw	r1, #34888	; 0x8848
   173b8:	f2c0 0101 	movt	r1, #1
   173bc:	2280      	movs	r2, #128	; 0x80
   173be:	4623      	mov	r3, r4
   173c0:	f7ed f9a2 	bl	4708 <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   173c4:	68fb      	ldr	r3, [r7, #12]
   173c6:	3301      	adds	r3, #1
   173c8:	60fb      	str	r3, [r7, #12]
   173ca:	68fb      	ldr	r3, [r7, #12]
   173cc:	2b21      	cmp	r3, #33	; 0x21
   173ce:	dd97      	ble.n	17300 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   173d0:	f7ed fd18 	bl	4e04 <vTaskStartScheduler>

    return 0;
   173d4:	2300      	movs	r3, #0
}
   173d6:	4618      	mov	r0, r3
   173d8:	3714      	adds	r7, #20
   173da:	46bd      	mov	sp, r7
   173dc:	bd90      	pop	{r4, r7, pc}
   173de:	bf00      	nop
   173e0:	20000c64 	.word	0x20000c64
   173e4:	20000b24 	.word	0x20000b24

000173e8 <myTraceCreate>:

void myTraceCreate      (){
   173e8:	b480      	push	{r7}
   173ea:	af00      	add	r7, sp, #0
}
   173ec:	46bd      	mov	sp, r7
   173ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   173f2:	4770      	bx	lr

000173f4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   173f4:	b480      	push	{r7}
   173f6:	af00      	add	r7, sp, #0
}
   173f8:	46bd      	mov	sp, r7
   173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   173fe:	4770      	bx	lr

00017400 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17400:	b480      	push	{r7}
   17402:	af00      	add	r7, sp, #0
}
   17404:	46bd      	mov	sp, r7
   17406:	f85d 7b04 	ldr.w	r7, [sp], #4
   1740a:	4770      	bx	lr

0001740c <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   1740c:	b580      	push	{r7, lr}
   1740e:	b082      	sub	sp, #8
   17410:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   17412:	f7ed fde1 	bl	4fd8 <xTaskGetTickCount>
   17416:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
   17418:	683b      	ldr	r3, [r7, #0]
   1741a:	2b00      	cmp	r3, #0
   1741c:	d03f      	beq.n	1749e <vApplicationTickHook+0x92>
   1741e:	683b      	ldr	r3, [r7, #0]
   17420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17424:	d83b      	bhi.n	1749e <vApplicationTickHook+0x92>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17426:	2300      	movs	r3, #0
   17428:	607b      	str	r3, [r7, #4]
   1742a:	e035      	b.n	17498 <vApplicationTickHook+0x8c>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   1742c:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17434:	687a      	ldr	r2, [r7, #4]
   17436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1743a:	2b00      	cmp	r3, #0
   1743c:	d129      	bne.n	17492 <vApplicationTickHook+0x86>
   1743e:	f240 032c 	movw	r3, #44	; 0x2c
   17442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17446:	687a      	ldr	r2, [r7, #4]
   17448:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1744c:	683b      	ldr	r3, [r7, #0]
   1744e:	fbb3 f1f2 	udiv	r1, r3, r2
   17452:	fb02 f201 	mul.w	r2, r2, r1
   17456:	1a9b      	subs	r3, r3, r2
   17458:	2b00      	cmp	r3, #0
   1745a:	d11a      	bne.n	17492 <vApplicationTickHook+0x86>
            {
                IS_INIT[i] = 1;
   1745c:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17464:	687a      	ldr	r2, [r7, #4]
   17466:	2101      	movs	r1, #1
   17468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   1746c:	f240 0360 	movw	r3, #96	; 0x60
   17470:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17474:	687a      	ldr	r2, [r7, #4]
   17476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1747a:	f640 3350 	movw	r3, #2896	; 0xb50
   1747e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17486:	4618      	mov	r0, r3
   17488:	2100      	movs	r1, #0
   1748a:	2200      	movs	r2, #0
   1748c:	2300      	movs	r3, #0
   1748e:	f7ec fe29 	bl	40e4 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17492:	687b      	ldr	r3, [r7, #4]
   17494:	3301      	adds	r3, #1
   17496:	607b      	str	r3, [r7, #4]
   17498:	687b      	ldr	r3, [r7, #4]
   1749a:	2b0c      	cmp	r3, #12
   1749c:	ddc6      	ble.n	1742c <vApplicationTickHook+0x20>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   1749e:	f240 032c 	movw	r3, #44	; 0x2c
   174a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174a6:	681b      	ldr	r3, [r3, #0]
   174a8:	005a      	lsls	r2, r3, #1
   174aa:	683b      	ldr	r3, [r7, #0]
   174ac:	429a      	cmp	r2, r3
   174ae:	d83f      	bhi.n	17530 <vApplicationTickHook+0x124>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   174b0:	f240 032c 	movw	r3, #44	; 0x2c
   174b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174b8:	681a      	ldr	r2, [r3, #0]
   174ba:	683b      	ldr	r3, [r7, #0]
   174bc:	fbb3 f1f2 	udiv	r1, r3, r2
   174c0:	fb02 f201 	mul.w	r2, r2, r1
   174c4:	1a9b      	subs	r3, r3, r2
   174c6:	2b00      	cmp	r3, #0
   174c8:	d026      	beq.n	17518 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   174ca:	f240 032c 	movw	r3, #44	; 0x2c
   174ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174d2:	689a      	ldr	r2, [r3, #8]
   174d4:	683b      	ldr	r3, [r7, #0]
   174d6:	fbb3 f1f2 	udiv	r1, r3, r2
   174da:	fb02 f201 	mul.w	r2, r2, r1
   174de:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   174e0:	2b00      	cmp	r3, #0
   174e2:	d019      	beq.n	17518 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   174e4:	f240 032c 	movw	r3, #44	; 0x2c
   174e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174ec:	6a1a      	ldr	r2, [r3, #32]
   174ee:	683b      	ldr	r3, [r7, #0]
   174f0:	fbb3 f1f2 	udiv	r1, r3, r2
   174f4:	fb02 f201 	mul.w	r2, r2, r1
   174f8:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   174fa:	2b00      	cmp	r3, #0
   174fc:	d00c      	beq.n	17518 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   174fe:	f240 032c 	movw	r3, #44	; 0x2c
   17502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17508:	683b      	ldr	r3, [r7, #0]
   1750a:	fbb3 f1f2 	udiv	r1, r3, r2
   1750e:	fb02 f201 	mul.w	r2, r2, r1
   17512:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   17514:	2b00      	cmp	r3, #0
   17516:	d10b      	bne.n	17530 <vApplicationTickHook+0x124>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   17518:	f640 3350 	movw	r3, #2896	; 0xb50
   1751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   17524:	4618      	mov	r0, r3
   17526:	2100      	movs	r1, #0
   17528:	2200      	movs	r2, #0
   1752a:	2300      	movs	r3, #0
   1752c:	f7ec fdda 	bl	40e4 <xQueueGenericSend>
        }
    }
}
   17530:	3708      	adds	r7, #8
   17532:	46bd      	mov	sp, r7
   17534:	bd80      	pop	{r7, pc}
   17536:	bf00      	nop

00017538 <__aeabi_drsub>:
   17538:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1753c:	e002      	b.n	17544 <__adddf3>
   1753e:	bf00      	nop

00017540 <__aeabi_dsub>:
   17540:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017544 <__adddf3>:
   17544:	b530      	push	{r4, r5, lr}
   17546:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1754a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1754e:	ea94 0f05 	teq	r4, r5
   17552:	bf08      	it	eq
   17554:	ea90 0f02 	teqeq	r0, r2
   17558:	bf1f      	itttt	ne
   1755a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1755e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17562:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17566:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1756a:	f000 80e2 	beq.w	17732 <__adddf3+0x1ee>
   1756e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17572:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17576:	bfb8      	it	lt
   17578:	426d      	neglt	r5, r5
   1757a:	dd0c      	ble.n	17596 <__adddf3+0x52>
   1757c:	442c      	add	r4, r5
   1757e:	ea80 0202 	eor.w	r2, r0, r2
   17582:	ea81 0303 	eor.w	r3, r1, r3
   17586:	ea82 0000 	eor.w	r0, r2, r0
   1758a:	ea83 0101 	eor.w	r1, r3, r1
   1758e:	ea80 0202 	eor.w	r2, r0, r2
   17592:	ea81 0303 	eor.w	r3, r1, r3
   17596:	2d36      	cmp	r5, #54	; 0x36
   17598:	bf88      	it	hi
   1759a:	bd30      	pophi	{r4, r5, pc}
   1759c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   175a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   175a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   175a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   175ac:	d002      	beq.n	175b4 <__adddf3+0x70>
   175ae:	4240      	negs	r0, r0
   175b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   175b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   175b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   175bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   175c0:	d002      	beq.n	175c8 <__adddf3+0x84>
   175c2:	4252      	negs	r2, r2
   175c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   175c8:	ea94 0f05 	teq	r4, r5
   175cc:	f000 80a7 	beq.w	1771e <__adddf3+0x1da>
   175d0:	f1a4 0401 	sub.w	r4, r4, #1
   175d4:	f1d5 0e20 	rsbs	lr, r5, #32
   175d8:	db0d      	blt.n	175f6 <__adddf3+0xb2>
   175da:	fa02 fc0e 	lsl.w	ip, r2, lr
   175de:	fa22 f205 	lsr.w	r2, r2, r5
   175e2:	1880      	adds	r0, r0, r2
   175e4:	f141 0100 	adc.w	r1, r1, #0
   175e8:	fa03 f20e 	lsl.w	r2, r3, lr
   175ec:	1880      	adds	r0, r0, r2
   175ee:	fa43 f305 	asr.w	r3, r3, r5
   175f2:	4159      	adcs	r1, r3
   175f4:	e00e      	b.n	17614 <__adddf3+0xd0>
   175f6:	f1a5 0520 	sub.w	r5, r5, #32
   175fa:	f10e 0e20 	add.w	lr, lr, #32
   175fe:	2a01      	cmp	r2, #1
   17600:	fa03 fc0e 	lsl.w	ip, r3, lr
   17604:	bf28      	it	cs
   17606:	f04c 0c02 	orrcs.w	ip, ip, #2
   1760a:	fa43 f305 	asr.w	r3, r3, r5
   1760e:	18c0      	adds	r0, r0, r3
   17610:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17614:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17618:	d507      	bpl.n	1762a <__adddf3+0xe6>
   1761a:	f04f 0e00 	mov.w	lr, #0
   1761e:	f1dc 0c00 	rsbs	ip, ip, #0
   17622:	eb7e 0000 	sbcs.w	r0, lr, r0
   17626:	eb6e 0101 	sbc.w	r1, lr, r1
   1762a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1762e:	d31b      	bcc.n	17668 <__adddf3+0x124>
   17630:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17634:	d30c      	bcc.n	17650 <__adddf3+0x10c>
   17636:	0849      	lsrs	r1, r1, #1
   17638:	ea5f 0030 	movs.w	r0, r0, rrx
   1763c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17640:	f104 0401 	add.w	r4, r4, #1
   17644:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17648:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1764c:	f080 809a 	bcs.w	17784 <__adddf3+0x240>
   17650:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17654:	bf08      	it	eq
   17656:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1765a:	f150 0000 	adcs.w	r0, r0, #0
   1765e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17662:	ea41 0105 	orr.w	r1, r1, r5
   17666:	bd30      	pop	{r4, r5, pc}
   17668:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1766c:	4140      	adcs	r0, r0
   1766e:	eb41 0101 	adc.w	r1, r1, r1
   17672:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17676:	f1a4 0401 	sub.w	r4, r4, #1
   1767a:	d1e9      	bne.n	17650 <__adddf3+0x10c>
   1767c:	f091 0f00 	teq	r1, #0
   17680:	bf04      	itt	eq
   17682:	4601      	moveq	r1, r0
   17684:	2000      	moveq	r0, #0
   17686:	fab1 f381 	clz	r3, r1
   1768a:	bf08      	it	eq
   1768c:	3320      	addeq	r3, #32
   1768e:	f1a3 030b 	sub.w	r3, r3, #11
   17692:	f1b3 0220 	subs.w	r2, r3, #32
   17696:	da0c      	bge.n	176b2 <__adddf3+0x16e>
   17698:	320c      	adds	r2, #12
   1769a:	dd08      	ble.n	176ae <__adddf3+0x16a>
   1769c:	f102 0c14 	add.w	ip, r2, #20
   176a0:	f1c2 020c 	rsb	r2, r2, #12
   176a4:	fa01 f00c 	lsl.w	r0, r1, ip
   176a8:	fa21 f102 	lsr.w	r1, r1, r2
   176ac:	e00c      	b.n	176c8 <__adddf3+0x184>
   176ae:	f102 0214 	add.w	r2, r2, #20
   176b2:	bfd8      	it	le
   176b4:	f1c2 0c20 	rsble	ip, r2, #32
   176b8:	fa01 f102 	lsl.w	r1, r1, r2
   176bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   176c0:	bfdc      	itt	le
   176c2:	ea41 010c 	orrle.w	r1, r1, ip
   176c6:	4090      	lslle	r0, r2
   176c8:	1ae4      	subs	r4, r4, r3
   176ca:	bfa2      	ittt	ge
   176cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   176d0:	4329      	orrge	r1, r5
   176d2:	bd30      	popge	{r4, r5, pc}
   176d4:	ea6f 0404 	mvn.w	r4, r4
   176d8:	3c1f      	subs	r4, #31
   176da:	da1c      	bge.n	17716 <__adddf3+0x1d2>
   176dc:	340c      	adds	r4, #12
   176de:	dc0e      	bgt.n	176fe <__adddf3+0x1ba>
   176e0:	f104 0414 	add.w	r4, r4, #20
   176e4:	f1c4 0220 	rsb	r2, r4, #32
   176e8:	fa20 f004 	lsr.w	r0, r0, r4
   176ec:	fa01 f302 	lsl.w	r3, r1, r2
   176f0:	ea40 0003 	orr.w	r0, r0, r3
   176f4:	fa21 f304 	lsr.w	r3, r1, r4
   176f8:	ea45 0103 	orr.w	r1, r5, r3
   176fc:	bd30      	pop	{r4, r5, pc}
   176fe:	f1c4 040c 	rsb	r4, r4, #12
   17702:	f1c4 0220 	rsb	r2, r4, #32
   17706:	fa20 f002 	lsr.w	r0, r0, r2
   1770a:	fa01 f304 	lsl.w	r3, r1, r4
   1770e:	ea40 0003 	orr.w	r0, r0, r3
   17712:	4629      	mov	r1, r5
   17714:	bd30      	pop	{r4, r5, pc}
   17716:	fa21 f004 	lsr.w	r0, r1, r4
   1771a:	4629      	mov	r1, r5
   1771c:	bd30      	pop	{r4, r5, pc}
   1771e:	f094 0f00 	teq	r4, #0
   17722:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17726:	bf06      	itte	eq
   17728:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1772c:	3401      	addeq	r4, #1
   1772e:	3d01      	subne	r5, #1
   17730:	e74e      	b.n	175d0 <__adddf3+0x8c>
   17732:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17736:	bf18      	it	ne
   17738:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1773c:	d029      	beq.n	17792 <__adddf3+0x24e>
   1773e:	ea94 0f05 	teq	r4, r5
   17742:	bf08      	it	eq
   17744:	ea90 0f02 	teqeq	r0, r2
   17748:	d005      	beq.n	17756 <__adddf3+0x212>
   1774a:	ea54 0c00 	orrs.w	ip, r4, r0
   1774e:	bf04      	itt	eq
   17750:	4619      	moveq	r1, r3
   17752:	4610      	moveq	r0, r2
   17754:	bd30      	pop	{r4, r5, pc}
   17756:	ea91 0f03 	teq	r1, r3
   1775a:	bf1e      	ittt	ne
   1775c:	2100      	movne	r1, #0
   1775e:	2000      	movne	r0, #0
   17760:	bd30      	popne	{r4, r5, pc}
   17762:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17766:	d105      	bne.n	17774 <__adddf3+0x230>
   17768:	0040      	lsls	r0, r0, #1
   1776a:	4149      	adcs	r1, r1
   1776c:	bf28      	it	cs
   1776e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17772:	bd30      	pop	{r4, r5, pc}
   17774:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17778:	bf3c      	itt	cc
   1777a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1777e:	bd30      	popcc	{r4, r5, pc}
   17780:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17784:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1778c:	f04f 0000 	mov.w	r0, #0
   17790:	bd30      	pop	{r4, r5, pc}
   17792:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17796:	bf1a      	itte	ne
   17798:	4619      	movne	r1, r3
   1779a:	4610      	movne	r0, r2
   1779c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   177a0:	bf1c      	itt	ne
   177a2:	460b      	movne	r3, r1
   177a4:	4602      	movne	r2, r0
   177a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   177aa:	bf06      	itte	eq
   177ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   177b0:	ea91 0f03 	teqeq	r1, r3
   177b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   177b8:	bd30      	pop	{r4, r5, pc}
   177ba:	bf00      	nop

000177bc <__aeabi_ui2d>:
   177bc:	f090 0f00 	teq	r0, #0
   177c0:	bf04      	itt	eq
   177c2:	2100      	moveq	r1, #0
   177c4:	4770      	bxeq	lr
   177c6:	b530      	push	{r4, r5, lr}
   177c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   177cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   177d0:	f04f 0500 	mov.w	r5, #0
   177d4:	f04f 0100 	mov.w	r1, #0
   177d8:	e750      	b.n	1767c <__adddf3+0x138>
   177da:	bf00      	nop

000177dc <__aeabi_i2d>:
   177dc:	f090 0f00 	teq	r0, #0
   177e0:	bf04      	itt	eq
   177e2:	2100      	moveq	r1, #0
   177e4:	4770      	bxeq	lr
   177e6:	b530      	push	{r4, r5, lr}
   177e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   177ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   177f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   177f4:	bf48      	it	mi
   177f6:	4240      	negmi	r0, r0
   177f8:	f04f 0100 	mov.w	r1, #0
   177fc:	e73e      	b.n	1767c <__adddf3+0x138>
   177fe:	bf00      	nop

00017800 <__aeabi_f2d>:
   17800:	0042      	lsls	r2, r0, #1
   17802:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17806:	ea4f 0131 	mov.w	r1, r1, rrx
   1780a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1780e:	bf1f      	itttt	ne
   17810:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17818:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1781c:	4770      	bxne	lr
   1781e:	f092 0f00 	teq	r2, #0
   17822:	bf14      	ite	ne
   17824:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17828:	4770      	bxeq	lr
   1782a:	b530      	push	{r4, r5, lr}
   1782c:	f44f 7460 	mov.w	r4, #896	; 0x380
   17830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17838:	e720      	b.n	1767c <__adddf3+0x138>
   1783a:	bf00      	nop

0001783c <__aeabi_ul2d>:
   1783c:	ea50 0201 	orrs.w	r2, r0, r1
   17840:	bf08      	it	eq
   17842:	4770      	bxeq	lr
   17844:	b530      	push	{r4, r5, lr}
   17846:	f04f 0500 	mov.w	r5, #0
   1784a:	e00a      	b.n	17862 <__aeabi_l2d+0x16>

0001784c <__aeabi_l2d>:
   1784c:	ea50 0201 	orrs.w	r2, r0, r1
   17850:	bf08      	it	eq
   17852:	4770      	bxeq	lr
   17854:	b530      	push	{r4, r5, lr}
   17856:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1785a:	d502      	bpl.n	17862 <__aeabi_l2d+0x16>
   1785c:	4240      	negs	r0, r0
   1785e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17862:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17866:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1786a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1786e:	f43f aedc 	beq.w	1762a <__adddf3+0xe6>
   17872:	f04f 0203 	mov.w	r2, #3
   17876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1787a:	bf18      	it	ne
   1787c:	3203      	addne	r2, #3
   1787e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17882:	bf18      	it	ne
   17884:	3203      	addne	r2, #3
   17886:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1788a:	f1c2 0320 	rsb	r3, r2, #32
   1788e:	fa00 fc03 	lsl.w	ip, r0, r3
   17892:	fa20 f002 	lsr.w	r0, r0, r2
   17896:	fa01 fe03 	lsl.w	lr, r1, r3
   1789a:	ea40 000e 	orr.w	r0, r0, lr
   1789e:	fa21 f102 	lsr.w	r1, r1, r2
   178a2:	4414      	add	r4, r2
   178a4:	e6c1      	b.n	1762a <__adddf3+0xe6>
   178a6:	bf00      	nop

000178a8 <__aeabi_dmul>:
   178a8:	b570      	push	{r4, r5, r6, lr}
   178aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   178ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   178b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   178b6:	bf1d      	ittte	ne
   178b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   178bc:	ea94 0f0c 	teqne	r4, ip
   178c0:	ea95 0f0c 	teqne	r5, ip
   178c4:	f000 f8de 	bleq	17a84 <__aeabi_dmul+0x1dc>
   178c8:	442c      	add	r4, r5
   178ca:	ea81 0603 	eor.w	r6, r1, r3
   178ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   178d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   178d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   178da:	bf18      	it	ne
   178dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   178e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   178e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   178e8:	d038      	beq.n	1795c <__aeabi_dmul+0xb4>
   178ea:	fba0 ce02 	umull	ip, lr, r0, r2
   178ee:	f04f 0500 	mov.w	r5, #0
   178f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   178f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   178fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   178fe:	f04f 0600 	mov.w	r6, #0
   17902:	fbe1 5603 	umlal	r5, r6, r1, r3
   17906:	f09c 0f00 	teq	ip, #0
   1790a:	bf18      	it	ne
   1790c:	f04e 0e01 	orrne.w	lr, lr, #1
   17910:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17914:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17918:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1791c:	d204      	bcs.n	17928 <__aeabi_dmul+0x80>
   1791e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17922:	416d      	adcs	r5, r5
   17924:	eb46 0606 	adc.w	r6, r6, r6
   17928:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1792c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17930:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17934:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17938:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1793c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17940:	bf88      	it	hi
   17942:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17946:	d81e      	bhi.n	17986 <__aeabi_dmul+0xde>
   17948:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1794c:	bf08      	it	eq
   1794e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17952:	f150 0000 	adcs.w	r0, r0, #0
   17956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1795a:	bd70      	pop	{r4, r5, r6, pc}
   1795c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17960:	ea46 0101 	orr.w	r1, r6, r1
   17964:	ea40 0002 	orr.w	r0, r0, r2
   17968:	ea81 0103 	eor.w	r1, r1, r3
   1796c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17970:	bfc2      	ittt	gt
   17972:	ebd4 050c 	rsbsgt	r5, r4, ip
   17976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1797a:	bd70      	popgt	{r4, r5, r6, pc}
   1797c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17980:	f04f 0e00 	mov.w	lr, #0
   17984:	3c01      	subs	r4, #1
   17986:	f300 80ab 	bgt.w	17ae0 <__aeabi_dmul+0x238>
   1798a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1798e:	bfde      	ittt	le
   17990:	2000      	movle	r0, #0
   17992:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17996:	bd70      	pople	{r4, r5, r6, pc}
   17998:	f1c4 0400 	rsb	r4, r4, #0
   1799c:	3c20      	subs	r4, #32
   1799e:	da35      	bge.n	17a0c <__aeabi_dmul+0x164>
   179a0:	340c      	adds	r4, #12
   179a2:	dc1b      	bgt.n	179dc <__aeabi_dmul+0x134>
   179a4:	f104 0414 	add.w	r4, r4, #20
   179a8:	f1c4 0520 	rsb	r5, r4, #32
   179ac:	fa00 f305 	lsl.w	r3, r0, r5
   179b0:	fa20 f004 	lsr.w	r0, r0, r4
   179b4:	fa01 f205 	lsl.w	r2, r1, r5
   179b8:	ea40 0002 	orr.w	r0, r0, r2
   179bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   179c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   179c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   179c8:	fa21 f604 	lsr.w	r6, r1, r4
   179cc:	eb42 0106 	adc.w	r1, r2, r6
   179d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   179d4:	bf08      	it	eq
   179d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   179da:	bd70      	pop	{r4, r5, r6, pc}
   179dc:	f1c4 040c 	rsb	r4, r4, #12
   179e0:	f1c4 0520 	rsb	r5, r4, #32
   179e4:	fa00 f304 	lsl.w	r3, r0, r4
   179e8:	fa20 f005 	lsr.w	r0, r0, r5
   179ec:	fa01 f204 	lsl.w	r2, r1, r4
   179f0:	ea40 0002 	orr.w	r0, r0, r2
   179f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   179f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   179fc:	f141 0100 	adc.w	r1, r1, #0
   17a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17a04:	bf08      	it	eq
   17a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17a0a:	bd70      	pop	{r4, r5, r6, pc}
   17a0c:	f1c4 0520 	rsb	r5, r4, #32
   17a10:	fa00 f205 	lsl.w	r2, r0, r5
   17a14:	ea4e 0e02 	orr.w	lr, lr, r2
   17a18:	fa20 f304 	lsr.w	r3, r0, r4
   17a1c:	fa01 f205 	lsl.w	r2, r1, r5
   17a20:	ea43 0302 	orr.w	r3, r3, r2
   17a24:	fa21 f004 	lsr.w	r0, r1, r4
   17a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17a2c:	fa21 f204 	lsr.w	r2, r1, r4
   17a30:	ea20 0002 	bic.w	r0, r0, r2
   17a34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17a38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17a3c:	bf08      	it	eq
   17a3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17a42:	bd70      	pop	{r4, r5, r6, pc}
   17a44:	f094 0f00 	teq	r4, #0
   17a48:	d10f      	bne.n	17a6a <__aeabi_dmul+0x1c2>
   17a4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17a4e:	0040      	lsls	r0, r0, #1
   17a50:	eb41 0101 	adc.w	r1, r1, r1
   17a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17a58:	bf08      	it	eq
   17a5a:	3c01      	subeq	r4, #1
   17a5c:	d0f7      	beq.n	17a4e <__aeabi_dmul+0x1a6>
   17a5e:	ea41 0106 	orr.w	r1, r1, r6
   17a62:	f095 0f00 	teq	r5, #0
   17a66:	bf18      	it	ne
   17a68:	4770      	bxne	lr
   17a6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17a6e:	0052      	lsls	r2, r2, #1
   17a70:	eb43 0303 	adc.w	r3, r3, r3
   17a74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17a78:	bf08      	it	eq
   17a7a:	3d01      	subeq	r5, #1
   17a7c:	d0f7      	beq.n	17a6e <__aeabi_dmul+0x1c6>
   17a7e:	ea43 0306 	orr.w	r3, r3, r6
   17a82:	4770      	bx	lr
   17a84:	ea94 0f0c 	teq	r4, ip
   17a88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17a8c:	bf18      	it	ne
   17a8e:	ea95 0f0c 	teqne	r5, ip
   17a92:	d00c      	beq.n	17aae <__aeabi_dmul+0x206>
   17a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17a98:	bf18      	it	ne
   17a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17a9e:	d1d1      	bne.n	17a44 <__aeabi_dmul+0x19c>
   17aa0:	ea81 0103 	eor.w	r1, r1, r3
   17aa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17aa8:	f04f 0000 	mov.w	r0, #0
   17aac:	bd70      	pop	{r4, r5, r6, pc}
   17aae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ab2:	bf06      	itte	eq
   17ab4:	4610      	moveq	r0, r2
   17ab6:	4619      	moveq	r1, r3
   17ab8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17abc:	d019      	beq.n	17af2 <__aeabi_dmul+0x24a>
   17abe:	ea94 0f0c 	teq	r4, ip
   17ac2:	d102      	bne.n	17aca <__aeabi_dmul+0x222>
   17ac4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17ac8:	d113      	bne.n	17af2 <__aeabi_dmul+0x24a>
   17aca:	ea95 0f0c 	teq	r5, ip
   17ace:	d105      	bne.n	17adc <__aeabi_dmul+0x234>
   17ad0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17ad4:	bf1c      	itt	ne
   17ad6:	4610      	movne	r0, r2
   17ad8:	4619      	movne	r1, r3
   17ada:	d10a      	bne.n	17af2 <__aeabi_dmul+0x24a>
   17adc:	ea81 0103 	eor.w	r1, r1, r3
   17ae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ae4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ae8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17aec:	f04f 0000 	mov.w	r0, #0
   17af0:	bd70      	pop	{r4, r5, r6, pc}
   17af2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17af6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17afa:	bd70      	pop	{r4, r5, r6, pc}

00017afc <__aeabi_ddiv>:
   17afc:	b570      	push	{r4, r5, r6, lr}
   17afe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17b02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17b06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17b0a:	bf1d      	ittte	ne
   17b0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17b10:	ea94 0f0c 	teqne	r4, ip
   17b14:	ea95 0f0c 	teqne	r5, ip
   17b18:	f000 f8a7 	bleq	17c6a <__aeabi_ddiv+0x16e>
   17b1c:	eba4 0405 	sub.w	r4, r4, r5
   17b20:	ea81 0e03 	eor.w	lr, r1, r3
   17b24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17b28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17b2c:	f000 8088 	beq.w	17c40 <__aeabi_ddiv+0x144>
   17b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17b34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17b38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17b3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17b40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17b44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17b48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17b4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17b50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17b54:	429d      	cmp	r5, r3
   17b56:	bf08      	it	eq
   17b58:	4296      	cmpeq	r6, r2
   17b5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17b5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17b62:	d202      	bcs.n	17b6a <__aeabi_ddiv+0x6e>
   17b64:	085b      	lsrs	r3, r3, #1
   17b66:	ea4f 0232 	mov.w	r2, r2, rrx
   17b6a:	1ab6      	subs	r6, r6, r2
   17b6c:	eb65 0503 	sbc.w	r5, r5, r3
   17b70:	085b      	lsrs	r3, r3, #1
   17b72:	ea4f 0232 	mov.w	r2, r2, rrx
   17b76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17b7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17b7e:	ebb6 0e02 	subs.w	lr, r6, r2
   17b82:	eb75 0e03 	sbcs.w	lr, r5, r3
   17b86:	bf22      	ittt	cs
   17b88:	1ab6      	subcs	r6, r6, r2
   17b8a:	4675      	movcs	r5, lr
   17b8c:	ea40 000c 	orrcs.w	r0, r0, ip
   17b90:	085b      	lsrs	r3, r3, #1
   17b92:	ea4f 0232 	mov.w	r2, r2, rrx
   17b96:	ebb6 0e02 	subs.w	lr, r6, r2
   17b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17b9e:	bf22      	ittt	cs
   17ba0:	1ab6      	subcs	r6, r6, r2
   17ba2:	4675      	movcs	r5, lr
   17ba4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17ba8:	085b      	lsrs	r3, r3, #1
   17baa:	ea4f 0232 	mov.w	r2, r2, rrx
   17bae:	ebb6 0e02 	subs.w	lr, r6, r2
   17bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17bb6:	bf22      	ittt	cs
   17bb8:	1ab6      	subcs	r6, r6, r2
   17bba:	4675      	movcs	r5, lr
   17bbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17bc0:	085b      	lsrs	r3, r3, #1
   17bc2:	ea4f 0232 	mov.w	r2, r2, rrx
   17bc6:	ebb6 0e02 	subs.w	lr, r6, r2
   17bca:	eb75 0e03 	sbcs.w	lr, r5, r3
   17bce:	bf22      	ittt	cs
   17bd0:	1ab6      	subcs	r6, r6, r2
   17bd2:	4675      	movcs	r5, lr
   17bd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17bd8:	ea55 0e06 	orrs.w	lr, r5, r6
   17bdc:	d018      	beq.n	17c10 <__aeabi_ddiv+0x114>
   17bde:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17be2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17be6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17bea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17bee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17bf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17bf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17bfa:	d1c0      	bne.n	17b7e <__aeabi_ddiv+0x82>
   17bfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c00:	d10b      	bne.n	17c1a <__aeabi_ddiv+0x11e>
   17c02:	ea41 0100 	orr.w	r1, r1, r0
   17c06:	f04f 0000 	mov.w	r0, #0
   17c0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17c0e:	e7b6      	b.n	17b7e <__aeabi_ddiv+0x82>
   17c10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c14:	bf04      	itt	eq
   17c16:	4301      	orreq	r1, r0
   17c18:	2000      	moveq	r0, #0
   17c1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c1e:	bf88      	it	hi
   17c20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c24:	f63f aeaf 	bhi.w	17986 <__aeabi_dmul+0xde>
   17c28:	ebb5 0c03 	subs.w	ip, r5, r3
   17c2c:	bf04      	itt	eq
   17c2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   17c32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17c36:	f150 0000 	adcs.w	r0, r0, #0
   17c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17c3e:	bd70      	pop	{r4, r5, r6, pc}
   17c40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17c44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17c48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17c4c:	bfc2      	ittt	gt
   17c4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17c52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17c56:	bd70      	popgt	{r4, r5, r6, pc}
   17c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c5c:	f04f 0e00 	mov.w	lr, #0
   17c60:	3c01      	subs	r4, #1
   17c62:	e690      	b.n	17986 <__aeabi_dmul+0xde>
   17c64:	ea45 0e06 	orr.w	lr, r5, r6
   17c68:	e68d      	b.n	17986 <__aeabi_dmul+0xde>
   17c6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c6e:	ea94 0f0c 	teq	r4, ip
   17c72:	bf08      	it	eq
   17c74:	ea95 0f0c 	teqeq	r5, ip
   17c78:	f43f af3b 	beq.w	17af2 <__aeabi_dmul+0x24a>
   17c7c:	ea94 0f0c 	teq	r4, ip
   17c80:	d10a      	bne.n	17c98 <__aeabi_ddiv+0x19c>
   17c82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17c86:	f47f af34 	bne.w	17af2 <__aeabi_dmul+0x24a>
   17c8a:	ea95 0f0c 	teq	r5, ip
   17c8e:	f47f af25 	bne.w	17adc <__aeabi_dmul+0x234>
   17c92:	4610      	mov	r0, r2
   17c94:	4619      	mov	r1, r3
   17c96:	e72c      	b.n	17af2 <__aeabi_dmul+0x24a>
   17c98:	ea95 0f0c 	teq	r5, ip
   17c9c:	d106      	bne.n	17cac <__aeabi_ddiv+0x1b0>
   17c9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17ca2:	f43f aefd 	beq.w	17aa0 <__aeabi_dmul+0x1f8>
   17ca6:	4610      	mov	r0, r2
   17ca8:	4619      	mov	r1, r3
   17caa:	e722      	b.n	17af2 <__aeabi_dmul+0x24a>
   17cac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17cb0:	bf18      	it	ne
   17cb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17cb6:	f47f aec5 	bne.w	17a44 <__aeabi_dmul+0x19c>
   17cba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17cbe:	f47f af0d 	bne.w	17adc <__aeabi_dmul+0x234>
   17cc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17cc6:	f47f aeeb 	bne.w	17aa0 <__aeabi_dmul+0x1f8>
   17cca:	e712      	b.n	17af2 <__aeabi_dmul+0x24a>

00017ccc <__gedf2>:
   17ccc:	f04f 3cff 	mov.w	ip, #4294967295
   17cd0:	e006      	b.n	17ce0 <__cmpdf2+0x4>
   17cd2:	bf00      	nop

00017cd4 <__ledf2>:
   17cd4:	f04f 0c01 	mov.w	ip, #1
   17cd8:	e002      	b.n	17ce0 <__cmpdf2+0x4>
   17cda:	bf00      	nop

00017cdc <__cmpdf2>:
   17cdc:	f04f 0c01 	mov.w	ip, #1
   17ce0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17cec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17cf0:	bf18      	it	ne
   17cf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17cf6:	d01b      	beq.n	17d30 <__cmpdf2+0x54>
   17cf8:	b001      	add	sp, #4
   17cfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17cfe:	bf0c      	ite	eq
   17d00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17d04:	ea91 0f03 	teqne	r1, r3
   17d08:	bf02      	ittt	eq
   17d0a:	ea90 0f02 	teqeq	r0, r2
   17d0e:	2000      	moveq	r0, #0
   17d10:	4770      	bxeq	lr
   17d12:	f110 0f00 	cmn.w	r0, #0
   17d16:	ea91 0f03 	teq	r1, r3
   17d1a:	bf58      	it	pl
   17d1c:	4299      	cmppl	r1, r3
   17d1e:	bf08      	it	eq
   17d20:	4290      	cmpeq	r0, r2
   17d22:	bf2c      	ite	cs
   17d24:	17d8      	asrcs	r0, r3, #31
   17d26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17d2a:	f040 0001 	orr.w	r0, r0, #1
   17d2e:	4770      	bx	lr
   17d30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17d38:	d102      	bne.n	17d40 <__cmpdf2+0x64>
   17d3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17d3e:	d107      	bne.n	17d50 <__cmpdf2+0x74>
   17d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17d48:	d1d6      	bne.n	17cf8 <__cmpdf2+0x1c>
   17d4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17d4e:	d0d3      	beq.n	17cf8 <__cmpdf2+0x1c>
   17d50:	f85d 0b04 	ldr.w	r0, [sp], #4
   17d54:	4770      	bx	lr
   17d56:	bf00      	nop

00017d58 <__aeabi_cdrcmple>:
   17d58:	4684      	mov	ip, r0
   17d5a:	4610      	mov	r0, r2
   17d5c:	4662      	mov	r2, ip
   17d5e:	468c      	mov	ip, r1
   17d60:	4619      	mov	r1, r3
   17d62:	4663      	mov	r3, ip
   17d64:	e000      	b.n	17d68 <__aeabi_cdcmpeq>
   17d66:	bf00      	nop

00017d68 <__aeabi_cdcmpeq>:
   17d68:	b501      	push	{r0, lr}
   17d6a:	f7ff ffb7 	bl	17cdc <__cmpdf2>
   17d6e:	2800      	cmp	r0, #0
   17d70:	bf48      	it	mi
   17d72:	f110 0f00 	cmnmi.w	r0, #0
   17d76:	bd01      	pop	{r0, pc}

00017d78 <__aeabi_dcmpeq>:
   17d78:	f84d ed08 	str.w	lr, [sp, #-8]!
   17d7c:	f7ff fff4 	bl	17d68 <__aeabi_cdcmpeq>
   17d80:	bf0c      	ite	eq
   17d82:	2001      	moveq	r0, #1
   17d84:	2000      	movne	r0, #0
   17d86:	f85d fb08 	ldr.w	pc, [sp], #8
   17d8a:	bf00      	nop

00017d8c <__aeabi_dcmplt>:
   17d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17d90:	f7ff ffea 	bl	17d68 <__aeabi_cdcmpeq>
   17d94:	bf34      	ite	cc
   17d96:	2001      	movcc	r0, #1
   17d98:	2000      	movcs	r0, #0
   17d9a:	f85d fb08 	ldr.w	pc, [sp], #8
   17d9e:	bf00      	nop

00017da0 <__aeabi_dcmple>:
   17da0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17da4:	f7ff ffe0 	bl	17d68 <__aeabi_cdcmpeq>
   17da8:	bf94      	ite	ls
   17daa:	2001      	movls	r0, #1
   17dac:	2000      	movhi	r0, #0
   17dae:	f85d fb08 	ldr.w	pc, [sp], #8
   17db2:	bf00      	nop

00017db4 <__aeabi_dcmpge>:
   17db4:	f84d ed08 	str.w	lr, [sp, #-8]!
   17db8:	f7ff ffce 	bl	17d58 <__aeabi_cdrcmple>
   17dbc:	bf94      	ite	ls
   17dbe:	2001      	movls	r0, #1
   17dc0:	2000      	movhi	r0, #0
   17dc2:	f85d fb08 	ldr.w	pc, [sp], #8
   17dc6:	bf00      	nop

00017dc8 <__aeabi_dcmpgt>:
   17dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17dcc:	f7ff ffc4 	bl	17d58 <__aeabi_cdrcmple>
   17dd0:	bf34      	ite	cc
   17dd2:	2001      	movcc	r0, #1
   17dd4:	2000      	movcs	r0, #0
   17dd6:	f85d fb08 	ldr.w	pc, [sp], #8
   17dda:	bf00      	nop

00017ddc <__aeabi_d2iz>:
   17ddc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17de4:	d215      	bcs.n	17e12 <__aeabi_d2iz+0x36>
   17de6:	d511      	bpl.n	17e0c <__aeabi_d2iz+0x30>
   17de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17df0:	d912      	bls.n	17e18 <__aeabi_d2iz+0x3c>
   17df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17dfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17e02:	fa23 f002 	lsr.w	r0, r3, r2
   17e06:	bf18      	it	ne
   17e08:	4240      	negne	r0, r0
   17e0a:	4770      	bx	lr
   17e0c:	f04f 0000 	mov.w	r0, #0
   17e10:	4770      	bx	lr
   17e12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17e16:	d105      	bne.n	17e24 <__aeabi_d2iz+0x48>
   17e18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17e1c:	bf08      	it	eq
   17e1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17e22:	4770      	bx	lr
   17e24:	f04f 0000 	mov.w	r0, #0
   17e28:	4770      	bx	lr
   17e2a:	bf00      	nop

00017e2c <__aeabi_d2uiz>:
   17e2c:	004a      	lsls	r2, r1, #1
   17e2e:	d211      	bcs.n	17e54 <__aeabi_d2uiz+0x28>
   17e30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17e34:	d211      	bcs.n	17e5a <__aeabi_d2uiz+0x2e>
   17e36:	d50d      	bpl.n	17e54 <__aeabi_d2uiz+0x28>
   17e38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17e3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17e40:	d40e      	bmi.n	17e60 <__aeabi_d2uiz+0x34>
   17e42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17e4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17e4e:	fa23 f002 	lsr.w	r0, r3, r2
   17e52:	4770      	bx	lr
   17e54:	f04f 0000 	mov.w	r0, #0
   17e58:	4770      	bx	lr
   17e5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17e5e:	d102      	bne.n	17e66 <__aeabi_d2uiz+0x3a>
   17e60:	f04f 30ff 	mov.w	r0, #4294967295
   17e64:	4770      	bx	lr
   17e66:	f04f 0000 	mov.w	r0, #0
   17e6a:	4770      	bx	lr

00017e6c <__aeabi_d2f>:
   17e6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17e70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17e74:	bf24      	itt	cs
   17e76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17e7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17e7e:	d90d      	bls.n	17e9c <__aeabi_d2f+0x30>
   17e80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17e84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17e88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17e8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17e90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17e94:	bf08      	it	eq
   17e96:	f020 0001 	biceq.w	r0, r0, #1
   17e9a:	4770      	bx	lr
   17e9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17ea0:	d121      	bne.n	17ee6 <__aeabi_d2f+0x7a>
   17ea2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17ea6:	bfbc      	itt	lt
   17ea8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17eac:	4770      	bxlt	lr
   17eae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17eb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17eb6:	f1c2 0218 	rsb	r2, r2, #24
   17eba:	f1c2 0c20 	rsb	ip, r2, #32
   17ebe:	fa10 f30c 	lsls.w	r3, r0, ip
   17ec2:	fa20 f002 	lsr.w	r0, r0, r2
   17ec6:	bf18      	it	ne
   17ec8:	f040 0001 	orrne.w	r0, r0, #1
   17ecc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17ed0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17ed4:	fa03 fc0c 	lsl.w	ip, r3, ip
   17ed8:	ea40 000c 	orr.w	r0, r0, ip
   17edc:	fa23 f302 	lsr.w	r3, r3, r2
   17ee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17ee4:	e7cc      	b.n	17e80 <__aeabi_d2f+0x14>
   17ee6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17eea:	d107      	bne.n	17efc <__aeabi_d2f+0x90>
   17eec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17ef0:	bf1e      	ittt	ne
   17ef2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17ef6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17efa:	4770      	bxne	lr
   17efc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17f00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17f04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17f08:	4770      	bx	lr
   17f0a:	bf00      	nop

00017f0c <__aeabi_frsub>:
   17f0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17f10:	e002      	b.n	17f18 <__addsf3>
   17f12:	bf00      	nop

00017f14 <__aeabi_fsub>:
   17f14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017f18 <__addsf3>:
   17f18:	0042      	lsls	r2, r0, #1
   17f1a:	bf1f      	itttt	ne
   17f1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17f20:	ea92 0f03 	teqne	r2, r3
   17f24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17f28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17f2c:	d06a      	beq.n	18004 <__addsf3+0xec>
   17f2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17f32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17f36:	bfc1      	itttt	gt
   17f38:	18d2      	addgt	r2, r2, r3
   17f3a:	4041      	eorgt	r1, r0
   17f3c:	4048      	eorgt	r0, r1
   17f3e:	4041      	eorgt	r1, r0
   17f40:	bfb8      	it	lt
   17f42:	425b      	neglt	r3, r3
   17f44:	2b19      	cmp	r3, #25
   17f46:	bf88      	it	hi
   17f48:	4770      	bxhi	lr
   17f4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17f4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17f52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17f56:	bf18      	it	ne
   17f58:	4240      	negne	r0, r0
   17f5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17f5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   17f62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   17f66:	bf18      	it	ne
   17f68:	4249      	negne	r1, r1
   17f6a:	ea92 0f03 	teq	r2, r3
   17f6e:	d03f      	beq.n	17ff0 <__addsf3+0xd8>
   17f70:	f1a2 0201 	sub.w	r2, r2, #1
   17f74:	fa41 fc03 	asr.w	ip, r1, r3
   17f78:	eb10 000c 	adds.w	r0, r0, ip
   17f7c:	f1c3 0320 	rsb	r3, r3, #32
   17f80:	fa01 f103 	lsl.w	r1, r1, r3
   17f84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17f88:	d502      	bpl.n	17f90 <__addsf3+0x78>
   17f8a:	4249      	negs	r1, r1
   17f8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   17f90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17f94:	d313      	bcc.n	17fbe <__addsf3+0xa6>
   17f96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   17f9a:	d306      	bcc.n	17faa <__addsf3+0x92>
   17f9c:	0840      	lsrs	r0, r0, #1
   17f9e:	ea4f 0131 	mov.w	r1, r1, rrx
   17fa2:	f102 0201 	add.w	r2, r2, #1
   17fa6:	2afe      	cmp	r2, #254	; 0xfe
   17fa8:	d251      	bcs.n	1804e <__addsf3+0x136>
   17faa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   17fae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   17fb2:	bf08      	it	eq
   17fb4:	f020 0001 	biceq.w	r0, r0, #1
   17fb8:	ea40 0003 	orr.w	r0, r0, r3
   17fbc:	4770      	bx	lr
   17fbe:	0049      	lsls	r1, r1, #1
   17fc0:	eb40 0000 	adc.w	r0, r0, r0
   17fc4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   17fc8:	f1a2 0201 	sub.w	r2, r2, #1
   17fcc:	d1ed      	bne.n	17faa <__addsf3+0x92>
   17fce:	fab0 fc80 	clz	ip, r0
   17fd2:	f1ac 0c08 	sub.w	ip, ip, #8
   17fd6:	ebb2 020c 	subs.w	r2, r2, ip
   17fda:	fa00 f00c 	lsl.w	r0, r0, ip
   17fde:	bfaa      	itet	ge
   17fe0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   17fe4:	4252      	neglt	r2, r2
   17fe6:	4318      	orrge	r0, r3
   17fe8:	bfbc      	itt	lt
   17fea:	40d0      	lsrlt	r0, r2
   17fec:	4318      	orrlt	r0, r3
   17fee:	4770      	bx	lr
   17ff0:	f092 0f00 	teq	r2, #0
   17ff4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   17ff8:	bf06      	itte	eq
   17ffa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   17ffe:	3201      	addeq	r2, #1
   18000:	3b01      	subne	r3, #1
   18002:	e7b5      	b.n	17f70 <__addsf3+0x58>
   18004:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1800c:	bf18      	it	ne
   1800e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18012:	d021      	beq.n	18058 <__addsf3+0x140>
   18014:	ea92 0f03 	teq	r2, r3
   18018:	d004      	beq.n	18024 <__addsf3+0x10c>
   1801a:	f092 0f00 	teq	r2, #0
   1801e:	bf08      	it	eq
   18020:	4608      	moveq	r0, r1
   18022:	4770      	bx	lr
   18024:	ea90 0f01 	teq	r0, r1
   18028:	bf1c      	itt	ne
   1802a:	2000      	movne	r0, #0
   1802c:	4770      	bxne	lr
   1802e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18032:	d104      	bne.n	1803e <__addsf3+0x126>
   18034:	0040      	lsls	r0, r0, #1
   18036:	bf28      	it	cs
   18038:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1803c:	4770      	bx	lr
   1803e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18042:	bf3c      	itt	cc
   18044:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18048:	4770      	bxcc	lr
   1804a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1804e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18052:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18056:	4770      	bx	lr
   18058:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1805c:	bf16      	itet	ne
   1805e:	4608      	movne	r0, r1
   18060:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18064:	4601      	movne	r1, r0
   18066:	0242      	lsls	r2, r0, #9
   18068:	bf06      	itte	eq
   1806a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1806e:	ea90 0f01 	teqeq	r0, r1
   18072:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18076:	4770      	bx	lr

00018078 <__aeabi_ui2f>:
   18078:	f04f 0300 	mov.w	r3, #0
   1807c:	e004      	b.n	18088 <__aeabi_i2f+0x8>
   1807e:	bf00      	nop

00018080 <__aeabi_i2f>:
   18080:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18084:	bf48      	it	mi
   18086:	4240      	negmi	r0, r0
   18088:	ea5f 0c00 	movs.w	ip, r0
   1808c:	bf08      	it	eq
   1808e:	4770      	bxeq	lr
   18090:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18094:	4601      	mov	r1, r0
   18096:	f04f 0000 	mov.w	r0, #0
   1809a:	e01c      	b.n	180d6 <__aeabi_l2f+0x2a>

0001809c <__aeabi_ul2f>:
   1809c:	ea50 0201 	orrs.w	r2, r0, r1
   180a0:	bf08      	it	eq
   180a2:	4770      	bxeq	lr
   180a4:	f04f 0300 	mov.w	r3, #0
   180a8:	e00a      	b.n	180c0 <__aeabi_l2f+0x14>
   180aa:	bf00      	nop

000180ac <__aeabi_l2f>:
   180ac:	ea50 0201 	orrs.w	r2, r0, r1
   180b0:	bf08      	it	eq
   180b2:	4770      	bxeq	lr
   180b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   180b8:	d502      	bpl.n	180c0 <__aeabi_l2f+0x14>
   180ba:	4240      	negs	r0, r0
   180bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   180c0:	ea5f 0c01 	movs.w	ip, r1
   180c4:	bf02      	ittt	eq
   180c6:	4684      	moveq	ip, r0
   180c8:	4601      	moveq	r1, r0
   180ca:	2000      	moveq	r0, #0
   180cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   180d0:	bf08      	it	eq
   180d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   180d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   180da:	fabc f28c 	clz	r2, ip
   180de:	3a08      	subs	r2, #8
   180e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   180e4:	db10      	blt.n	18108 <__aeabi_l2f+0x5c>
   180e6:	fa01 fc02 	lsl.w	ip, r1, r2
   180ea:	4463      	add	r3, ip
   180ec:	fa00 fc02 	lsl.w	ip, r0, r2
   180f0:	f1c2 0220 	rsb	r2, r2, #32
   180f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   180f8:	fa20 f202 	lsr.w	r2, r0, r2
   180fc:	eb43 0002 	adc.w	r0, r3, r2
   18100:	bf08      	it	eq
   18102:	f020 0001 	biceq.w	r0, r0, #1
   18106:	4770      	bx	lr
   18108:	f102 0220 	add.w	r2, r2, #32
   1810c:	fa01 fc02 	lsl.w	ip, r1, r2
   18110:	f1c2 0220 	rsb	r2, r2, #32
   18114:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18118:	fa21 f202 	lsr.w	r2, r1, r2
   1811c:	eb43 0002 	adc.w	r0, r3, r2
   18120:	bf08      	it	eq
   18122:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18126:	4770      	bx	lr

00018128 <__aeabi_fmul>:
   18128:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1812c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18130:	bf1e      	ittt	ne
   18132:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18136:	ea92 0f0c 	teqne	r2, ip
   1813a:	ea93 0f0c 	teqne	r3, ip
   1813e:	d06f      	beq.n	18220 <__aeabi_fmul+0xf8>
   18140:	441a      	add	r2, r3
   18142:	ea80 0c01 	eor.w	ip, r0, r1
   18146:	0240      	lsls	r0, r0, #9
   18148:	bf18      	it	ne
   1814a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1814e:	d01e      	beq.n	1818e <__aeabi_fmul+0x66>
   18150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18154:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18158:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1815c:	fba0 3101 	umull	r3, r1, r0, r1
   18160:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18164:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18168:	bf3e      	ittt	cc
   1816a:	0049      	lslcc	r1, r1, #1
   1816c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18170:	005b      	lslcc	r3, r3, #1
   18172:	ea40 0001 	orr.w	r0, r0, r1
   18176:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1817a:	2afd      	cmp	r2, #253	; 0xfd
   1817c:	d81d      	bhi.n	181ba <__aeabi_fmul+0x92>
   1817e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18182:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18186:	bf08      	it	eq
   18188:	f020 0001 	biceq.w	r0, r0, #1
   1818c:	4770      	bx	lr
   1818e:	f090 0f00 	teq	r0, #0
   18192:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18196:	bf08      	it	eq
   18198:	0249      	lsleq	r1, r1, #9
   1819a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1819e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181a2:	3a7f      	subs	r2, #127	; 0x7f
   181a4:	bfc2      	ittt	gt
   181a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ae:	4770      	bxgt	lr
   181b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181b4:	f04f 0300 	mov.w	r3, #0
   181b8:	3a01      	subs	r2, #1
   181ba:	dc5d      	bgt.n	18278 <__aeabi_fmul+0x150>
   181bc:	f112 0f19 	cmn.w	r2, #25
   181c0:	bfdc      	itt	le
   181c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181c6:	4770      	bxle	lr
   181c8:	f1c2 0200 	rsb	r2, r2, #0
   181cc:	0041      	lsls	r1, r0, #1
   181ce:	fa21 f102 	lsr.w	r1, r1, r2
   181d2:	f1c2 0220 	rsb	r2, r2, #32
   181d6:	fa00 fc02 	lsl.w	ip, r0, r2
   181da:	ea5f 0031 	movs.w	r0, r1, rrx
   181de:	f140 0000 	adc.w	r0, r0, #0
   181e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   181e6:	bf08      	it	eq
   181e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   181ec:	4770      	bx	lr
   181ee:	f092 0f00 	teq	r2, #0
   181f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   181f6:	bf02      	ittt	eq
   181f8:	0040      	lsleq	r0, r0, #1
   181fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   181fe:	3a01      	subeq	r2, #1
   18200:	d0f9      	beq.n	181f6 <__aeabi_fmul+0xce>
   18202:	ea40 000c 	orr.w	r0, r0, ip
   18206:	f093 0f00 	teq	r3, #0
   1820a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1820e:	bf02      	ittt	eq
   18210:	0049      	lsleq	r1, r1, #1
   18212:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18216:	3b01      	subeq	r3, #1
   18218:	d0f9      	beq.n	1820e <__aeabi_fmul+0xe6>
   1821a:	ea41 010c 	orr.w	r1, r1, ip
   1821e:	e78f      	b.n	18140 <__aeabi_fmul+0x18>
   18220:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18224:	ea92 0f0c 	teq	r2, ip
   18228:	bf18      	it	ne
   1822a:	ea93 0f0c 	teqne	r3, ip
   1822e:	d00a      	beq.n	18246 <__aeabi_fmul+0x11e>
   18230:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18234:	bf18      	it	ne
   18236:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1823a:	d1d8      	bne.n	181ee <__aeabi_fmul+0xc6>
   1823c:	ea80 0001 	eor.w	r0, r0, r1
   18240:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18244:	4770      	bx	lr
   18246:	f090 0f00 	teq	r0, #0
   1824a:	bf17      	itett	ne
   1824c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18250:	4608      	moveq	r0, r1
   18252:	f091 0f00 	teqne	r1, #0
   18256:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1825a:	d014      	beq.n	18286 <__aeabi_fmul+0x15e>
   1825c:	ea92 0f0c 	teq	r2, ip
   18260:	d101      	bne.n	18266 <__aeabi_fmul+0x13e>
   18262:	0242      	lsls	r2, r0, #9
   18264:	d10f      	bne.n	18286 <__aeabi_fmul+0x15e>
   18266:	ea93 0f0c 	teq	r3, ip
   1826a:	d103      	bne.n	18274 <__aeabi_fmul+0x14c>
   1826c:	024b      	lsls	r3, r1, #9
   1826e:	bf18      	it	ne
   18270:	4608      	movne	r0, r1
   18272:	d108      	bne.n	18286 <__aeabi_fmul+0x15e>
   18274:	ea80 0001 	eor.w	r0, r0, r1
   18278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1827c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18284:	4770      	bx	lr
   18286:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1828a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1828e:	4770      	bx	lr

00018290 <__aeabi_fdiv>:
   18290:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18298:	bf1e      	ittt	ne
   1829a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1829e:	ea92 0f0c 	teqne	r2, ip
   182a2:	ea93 0f0c 	teqne	r3, ip
   182a6:	d069      	beq.n	1837c <__aeabi_fdiv+0xec>
   182a8:	eba2 0203 	sub.w	r2, r2, r3
   182ac:	ea80 0c01 	eor.w	ip, r0, r1
   182b0:	0249      	lsls	r1, r1, #9
   182b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   182b6:	d037      	beq.n	18328 <__aeabi_fdiv+0x98>
   182b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   182bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   182c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   182c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   182c8:	428b      	cmp	r3, r1
   182ca:	bf38      	it	cc
   182cc:	005b      	lslcc	r3, r3, #1
   182ce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   182d2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   182d6:	428b      	cmp	r3, r1
   182d8:	bf24      	itt	cs
   182da:	1a5b      	subcs	r3, r3, r1
   182dc:	ea40 000c 	orrcs.w	r0, r0, ip
   182e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   182e4:	bf24      	itt	cs
   182e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   182ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   182ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   182f2:	bf24      	itt	cs
   182f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   182f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   182fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18300:	bf24      	itt	cs
   18302:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18306:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1830a:	011b      	lsls	r3, r3, #4
   1830c:	bf18      	it	ne
   1830e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18312:	d1e0      	bne.n	182d6 <__aeabi_fdiv+0x46>
   18314:	2afd      	cmp	r2, #253	; 0xfd
   18316:	f63f af50 	bhi.w	181ba <__aeabi_fmul+0x92>
   1831a:	428b      	cmp	r3, r1
   1831c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18320:	bf08      	it	eq
   18322:	f020 0001 	biceq.w	r0, r0, #1
   18326:	4770      	bx	lr
   18328:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1832c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18330:	327f      	adds	r2, #127	; 0x7f
   18332:	bfc2      	ittt	gt
   18334:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18338:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1833c:	4770      	bxgt	lr
   1833e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18342:	f04f 0300 	mov.w	r3, #0
   18346:	3a01      	subs	r2, #1
   18348:	e737      	b.n	181ba <__aeabi_fmul+0x92>
   1834a:	f092 0f00 	teq	r2, #0
   1834e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18352:	bf02      	ittt	eq
   18354:	0040      	lsleq	r0, r0, #1
   18356:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1835a:	3a01      	subeq	r2, #1
   1835c:	d0f9      	beq.n	18352 <__aeabi_fdiv+0xc2>
   1835e:	ea40 000c 	orr.w	r0, r0, ip
   18362:	f093 0f00 	teq	r3, #0
   18366:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1836a:	bf02      	ittt	eq
   1836c:	0049      	lsleq	r1, r1, #1
   1836e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18372:	3b01      	subeq	r3, #1
   18374:	d0f9      	beq.n	1836a <__aeabi_fdiv+0xda>
   18376:	ea41 010c 	orr.w	r1, r1, ip
   1837a:	e795      	b.n	182a8 <__aeabi_fdiv+0x18>
   1837c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18380:	ea92 0f0c 	teq	r2, ip
   18384:	d108      	bne.n	18398 <__aeabi_fdiv+0x108>
   18386:	0242      	lsls	r2, r0, #9
   18388:	f47f af7d 	bne.w	18286 <__aeabi_fmul+0x15e>
   1838c:	ea93 0f0c 	teq	r3, ip
   18390:	f47f af70 	bne.w	18274 <__aeabi_fmul+0x14c>
   18394:	4608      	mov	r0, r1
   18396:	e776      	b.n	18286 <__aeabi_fmul+0x15e>
   18398:	ea93 0f0c 	teq	r3, ip
   1839c:	d104      	bne.n	183a8 <__aeabi_fdiv+0x118>
   1839e:	024b      	lsls	r3, r1, #9
   183a0:	f43f af4c 	beq.w	1823c <__aeabi_fmul+0x114>
   183a4:	4608      	mov	r0, r1
   183a6:	e76e      	b.n	18286 <__aeabi_fmul+0x15e>
   183a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   183ac:	bf18      	it	ne
   183ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   183b2:	d1ca      	bne.n	1834a <__aeabi_fdiv+0xba>
   183b4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   183b8:	f47f af5c 	bne.w	18274 <__aeabi_fmul+0x14c>
   183bc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   183c0:	f47f af3c 	bne.w	1823c <__aeabi_fmul+0x114>
   183c4:	e75f      	b.n	18286 <__aeabi_fmul+0x15e>
   183c6:	bf00      	nop

000183c8 <__gesf2>:
   183c8:	f04f 3cff 	mov.w	ip, #4294967295
   183cc:	e006      	b.n	183dc <__cmpsf2+0x4>
   183ce:	bf00      	nop

000183d0 <__lesf2>:
   183d0:	f04f 0c01 	mov.w	ip, #1
   183d4:	e002      	b.n	183dc <__cmpsf2+0x4>
   183d6:	bf00      	nop

000183d8 <__cmpsf2>:
   183d8:	f04f 0c01 	mov.w	ip, #1
   183dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   183e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   183e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   183e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   183ec:	bf18      	it	ne
   183ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   183f2:	d011      	beq.n	18418 <__cmpsf2+0x40>
   183f4:	b001      	add	sp, #4
   183f6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   183fa:	bf18      	it	ne
   183fc:	ea90 0f01 	teqne	r0, r1
   18400:	bf58      	it	pl
   18402:	ebb2 0003 	subspl.w	r0, r2, r3
   18406:	bf88      	it	hi
   18408:	17c8      	asrhi	r0, r1, #31
   1840a:	bf38      	it	cc
   1840c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18410:	bf18      	it	ne
   18412:	f040 0001 	orrne.w	r0, r0, #1
   18416:	4770      	bx	lr
   18418:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1841c:	d102      	bne.n	18424 <__cmpsf2+0x4c>
   1841e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18422:	d105      	bne.n	18430 <__cmpsf2+0x58>
   18424:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18428:	d1e4      	bne.n	183f4 <__cmpsf2+0x1c>
   1842a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1842e:	d0e1      	beq.n	183f4 <__cmpsf2+0x1c>
   18430:	f85d 0b04 	ldr.w	r0, [sp], #4
   18434:	4770      	bx	lr
   18436:	bf00      	nop

00018438 <__aeabi_cfrcmple>:
   18438:	4684      	mov	ip, r0
   1843a:	4608      	mov	r0, r1
   1843c:	4661      	mov	r1, ip
   1843e:	e7ff      	b.n	18440 <__aeabi_cfcmpeq>

00018440 <__aeabi_cfcmpeq>:
   18440:	b50f      	push	{r0, r1, r2, r3, lr}
   18442:	f7ff ffc9 	bl	183d8 <__cmpsf2>
   18446:	2800      	cmp	r0, #0
   18448:	bf48      	it	mi
   1844a:	f110 0f00 	cmnmi.w	r0, #0
   1844e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018450 <__aeabi_fcmpeq>:
   18450:	f84d ed08 	str.w	lr, [sp, #-8]!
   18454:	f7ff fff4 	bl	18440 <__aeabi_cfcmpeq>
   18458:	bf0c      	ite	eq
   1845a:	2001      	moveq	r0, #1
   1845c:	2000      	movne	r0, #0
   1845e:	f85d fb08 	ldr.w	pc, [sp], #8
   18462:	bf00      	nop

00018464 <__aeabi_fcmplt>:
   18464:	f84d ed08 	str.w	lr, [sp, #-8]!
   18468:	f7ff ffea 	bl	18440 <__aeabi_cfcmpeq>
   1846c:	bf34      	ite	cc
   1846e:	2001      	movcc	r0, #1
   18470:	2000      	movcs	r0, #0
   18472:	f85d fb08 	ldr.w	pc, [sp], #8
   18476:	bf00      	nop

00018478 <__aeabi_fcmple>:
   18478:	f84d ed08 	str.w	lr, [sp, #-8]!
   1847c:	f7ff ffe0 	bl	18440 <__aeabi_cfcmpeq>
   18480:	bf94      	ite	ls
   18482:	2001      	movls	r0, #1
   18484:	2000      	movhi	r0, #0
   18486:	f85d fb08 	ldr.w	pc, [sp], #8
   1848a:	bf00      	nop

0001848c <__aeabi_fcmpge>:
   1848c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18490:	f7ff ffd2 	bl	18438 <__aeabi_cfrcmple>
   18494:	bf94      	ite	ls
   18496:	2001      	movls	r0, #1
   18498:	2000      	movhi	r0, #0
   1849a:	f85d fb08 	ldr.w	pc, [sp], #8
   1849e:	bf00      	nop

000184a0 <__aeabi_fcmpgt>:
   184a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   184a4:	f7ff ffc8 	bl	18438 <__aeabi_cfrcmple>
   184a8:	bf34      	ite	cc
   184aa:	2001      	movcc	r0, #1
   184ac:	2000      	movcs	r0, #0
   184ae:	f85d fb08 	ldr.w	pc, [sp], #8
   184b2:	bf00      	nop

000184b4 <__aeabi_f2iz>:
   184b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   184b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   184bc:	d30f      	bcc.n	184de <__aeabi_f2iz+0x2a>
   184be:	f04f 039e 	mov.w	r3, #158	; 0x9e
   184c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   184c6:	d90d      	bls.n	184e4 <__aeabi_f2iz+0x30>
   184c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   184cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   184d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   184d4:	fa23 f002 	lsr.w	r0, r3, r2
   184d8:	bf18      	it	ne
   184da:	4240      	negne	r0, r0
   184dc:	4770      	bx	lr
   184de:	f04f 0000 	mov.w	r0, #0
   184e2:	4770      	bx	lr
   184e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   184e8:	d101      	bne.n	184ee <__aeabi_f2iz+0x3a>
   184ea:	0242      	lsls	r2, r0, #9
   184ec:	d105      	bne.n	184fa <__aeabi_f2iz+0x46>
   184ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   184f2:	bf08      	it	eq
   184f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   184f8:	4770      	bx	lr
   184fa:	f04f 0000 	mov.w	r0, #0
   184fe:	4770      	bx	lr

00018500 <memcpy>:
   18500:	2a0f      	cmp	r2, #15
   18502:	b4f0      	push	{r4, r5, r6, r7}
   18504:	d945      	bls.n	18592 <memcpy+0x92>
   18506:	ea40 0301 	orr.w	r3, r0, r1
   1850a:	079b      	lsls	r3, r3, #30
   1850c:	d145      	bne.n	1859a <memcpy+0x9a>
   1850e:	f1a2 0710 	sub.w	r7, r2, #16
   18512:	460c      	mov	r4, r1
   18514:	4603      	mov	r3, r0
   18516:	093f      	lsrs	r7, r7, #4
   18518:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1851c:	3610      	adds	r6, #16
   1851e:	6825      	ldr	r5, [r4, #0]
   18520:	3310      	adds	r3, #16
   18522:	3410      	adds	r4, #16
   18524:	f843 5c10 	str.w	r5, [r3, #-16]
   18528:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1852c:	f843 5c0c 	str.w	r5, [r3, #-12]
   18530:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18534:	f843 5c08 	str.w	r5, [r3, #-8]
   18538:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1853c:	f843 5c04 	str.w	r5, [r3, #-4]
   18540:	42b3      	cmp	r3, r6
   18542:	d1ec      	bne.n	1851e <memcpy+0x1e>
   18544:	1c7b      	adds	r3, r7, #1
   18546:	f002 0c0f 	and.w	ip, r2, #15
   1854a:	f1bc 0f03 	cmp.w	ip, #3
   1854e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18552:	4419      	add	r1, r3
   18554:	4403      	add	r3, r0
   18556:	d922      	bls.n	1859e <memcpy+0x9e>
   18558:	460e      	mov	r6, r1
   1855a:	461d      	mov	r5, r3
   1855c:	4664      	mov	r4, ip
   1855e:	f856 7b04 	ldr.w	r7, [r6], #4
   18562:	3c04      	subs	r4, #4
   18564:	2c03      	cmp	r4, #3
   18566:	f845 7b04 	str.w	r7, [r5], #4
   1856a:	d8f8      	bhi.n	1855e <memcpy+0x5e>
   1856c:	f1ac 0404 	sub.w	r4, ip, #4
   18570:	f002 0203 	and.w	r2, r2, #3
   18574:	f024 0403 	bic.w	r4, r4, #3
   18578:	3404      	adds	r4, #4
   1857a:	4423      	add	r3, r4
   1857c:	4421      	add	r1, r4
   1857e:	b132      	cbz	r2, 1858e <memcpy+0x8e>
   18580:	440a      	add	r2, r1
   18582:	f811 4b01 	ldrb.w	r4, [r1], #1
   18586:	4291      	cmp	r1, r2
   18588:	f803 4b01 	strb.w	r4, [r3], #1
   1858c:	d1f9      	bne.n	18582 <memcpy+0x82>
   1858e:	bcf0      	pop	{r4, r5, r6, r7}
   18590:	4770      	bx	lr
   18592:	4603      	mov	r3, r0
   18594:	2a00      	cmp	r2, #0
   18596:	d1f3      	bne.n	18580 <memcpy+0x80>
   18598:	e7f9      	b.n	1858e <memcpy+0x8e>
   1859a:	4603      	mov	r3, r0
   1859c:	e7f0      	b.n	18580 <memcpy+0x80>
   1859e:	4662      	mov	r2, ip
   185a0:	2a00      	cmp	r2, #0
   185a2:	d1ed      	bne.n	18580 <memcpy+0x80>
   185a4:	e7f3      	b.n	1858e <memcpy+0x8e>
   185a6:	bf00      	nop

000185a8 <memset>:
   185a8:	0783      	lsls	r3, r0, #30
   185aa:	b4f0      	push	{r4, r5, r6, r7}
   185ac:	d048      	beq.n	18640 <memset+0x98>
   185ae:	1e54      	subs	r4, r2, #1
   185b0:	2a00      	cmp	r2, #0
   185b2:	d043      	beq.n	1863c <memset+0x94>
   185b4:	b2cd      	uxtb	r5, r1
   185b6:	4603      	mov	r3, r0
   185b8:	e002      	b.n	185c0 <memset+0x18>
   185ba:	2c00      	cmp	r4, #0
   185bc:	d03e      	beq.n	1863c <memset+0x94>
   185be:	4614      	mov	r4, r2
   185c0:	f803 5b01 	strb.w	r5, [r3], #1
   185c4:	f013 0f03 	tst.w	r3, #3
   185c8:	f104 32ff 	add.w	r2, r4, #4294967295
   185cc:	d1f5      	bne.n	185ba <memset+0x12>
   185ce:	2c03      	cmp	r4, #3
   185d0:	d92d      	bls.n	1862e <memset+0x86>
   185d2:	b2cd      	uxtb	r5, r1
   185d4:	2c0f      	cmp	r4, #15
   185d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   185da:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   185de:	d918      	bls.n	18612 <memset+0x6a>
   185e0:	f1a4 0710 	sub.w	r7, r4, #16
   185e4:	f103 0610 	add.w	r6, r3, #16
   185e8:	461a      	mov	r2, r3
   185ea:	093f      	lsrs	r7, r7, #4
   185ec:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   185f0:	6015      	str	r5, [r2, #0]
   185f2:	3210      	adds	r2, #16
   185f4:	f842 5c0c 	str.w	r5, [r2, #-12]
   185f8:	f842 5c08 	str.w	r5, [r2, #-8]
   185fc:	f842 5c04 	str.w	r5, [r2, #-4]
   18600:	42b2      	cmp	r2, r6
   18602:	d1f5      	bne.n	185f0 <memset+0x48>
   18604:	f004 040f 	and.w	r4, r4, #15
   18608:	3701      	adds	r7, #1
   1860a:	2c03      	cmp	r4, #3
   1860c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18610:	d90d      	bls.n	1862e <memset+0x86>
   18612:	461e      	mov	r6, r3
   18614:	4622      	mov	r2, r4
   18616:	3a04      	subs	r2, #4
   18618:	f846 5b04 	str.w	r5, [r6], #4
   1861c:	2a03      	cmp	r2, #3
   1861e:	d8fa      	bhi.n	18616 <memset+0x6e>
   18620:	1f22      	subs	r2, r4, #4
   18622:	f004 0403 	and.w	r4, r4, #3
   18626:	f022 0203 	bic.w	r2, r2, #3
   1862a:	3204      	adds	r2, #4
   1862c:	4413      	add	r3, r2
   1862e:	b12c      	cbz	r4, 1863c <memset+0x94>
   18630:	b2c9      	uxtb	r1, r1
   18632:	441c      	add	r4, r3
   18634:	f803 1b01 	strb.w	r1, [r3], #1
   18638:	42a3      	cmp	r3, r4
   1863a:	d1fb      	bne.n	18634 <memset+0x8c>
   1863c:	bcf0      	pop	{r4, r5, r6, r7}
   1863e:	4770      	bx	lr
   18640:	4614      	mov	r4, r2
   18642:	4603      	mov	r3, r0
   18644:	e7c3      	b.n	185ce <memset+0x26>
   18646:	bf00      	nop

00018648 <strncpy>:
   18648:	ea40 0301 	orr.w	r3, r0, r1
   1864c:	079b      	lsls	r3, r3, #30
   1864e:	b470      	push	{r4, r5, r6}
   18650:	d12b      	bne.n	186aa <strncpy+0x62>
   18652:	2a03      	cmp	r2, #3
   18654:	bf84      	itt	hi
   18656:	460b      	movhi	r3, r1
   18658:	4605      	movhi	r5, r0
   1865a:	d926      	bls.n	186aa <strncpy+0x62>
   1865c:	4619      	mov	r1, r3
   1865e:	f853 4b04 	ldr.w	r4, [r3], #4
   18662:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18666:	ea26 0604 	bic.w	r6, r6, r4
   1866a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1866e:	d105      	bne.n	1867c <strncpy+0x34>
   18670:	3a04      	subs	r2, #4
   18672:	f845 4b04 	str.w	r4, [r5], #4
   18676:	2a03      	cmp	r2, #3
   18678:	4619      	mov	r1, r3
   1867a:	d8ef      	bhi.n	1865c <strncpy+0x14>
   1867c:	b19a      	cbz	r2, 186a6 <strncpy+0x5e>
   1867e:	780c      	ldrb	r4, [r1, #0]
   18680:	3a01      	subs	r2, #1
   18682:	1c6b      	adds	r3, r5, #1
   18684:	702c      	strb	r4, [r5, #0]
   18686:	b13c      	cbz	r4, 18698 <strncpy+0x50>
   18688:	b16a      	cbz	r2, 186a6 <strncpy+0x5e>
   1868a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1868e:	3a01      	subs	r2, #1
   18690:	f803 4b01 	strb.w	r4, [r3], #1
   18694:	2c00      	cmp	r4, #0
   18696:	d1f7      	bne.n	18688 <strncpy+0x40>
   18698:	b12a      	cbz	r2, 186a6 <strncpy+0x5e>
   1869a:	441a      	add	r2, r3
   1869c:	2100      	movs	r1, #0
   1869e:	f803 1b01 	strb.w	r1, [r3], #1
   186a2:	4293      	cmp	r3, r2
   186a4:	d1fb      	bne.n	1869e <strncpy+0x56>
   186a6:	bc70      	pop	{r4, r5, r6}
   186a8:	4770      	bx	lr
   186aa:	4605      	mov	r5, r0
   186ac:	e7e6      	b.n	1867c <strncpy+0x34>
   186ae:	bf00      	nop

000186b0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   186b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   186b2:	e003      	b.n	186bc <LoopCopyDataInit>

000186b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   186b4:	4b0a      	ldr	r3, [pc, #40]	; (186e0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   186b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   186b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   186ba:	3104      	adds	r1, #4

000186bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   186bc:	4809      	ldr	r0, [pc, #36]	; (186e4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   186be:	4b0a      	ldr	r3, [pc, #40]	; (186e8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   186c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   186c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   186c4:	d3f6      	bcc.n	186b4 <CopyDataInit>
	ldr	r2, =_sbss
   186c6:	4a09      	ldr	r2, [pc, #36]	; (186ec <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   186c8:	e002      	b.n	186d0 <LoopFillZerobss>

000186ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   186ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
   186cc:	f842 3b04 	str.w	r3, [r2], #4

000186d0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   186d0:	4b07      	ldr	r3, [pc, #28]	; (186f0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   186d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   186d4:	d3f9      	bcc.n	186ca <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   186d6:	f7e7 fe31 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   186da:	f7fe fde7 	bl	172ac <main>
	bx	lr    
   186de:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   186e0:	00018850 	.word	0x00018850
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   186e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   186e8:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   186ec:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   186f0:	2000b780 	.word	0x2000b780

000186f4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   186f4:	e7fe      	b.n	186f4 <ADC1_2_IRQHandler>
   186f6:	0000      	movs	r0, r0
   186f8:	6c6c616d 	.word	0x6c6c616d
   186fc:	6620636f 	.word	0x6620636f
   18700:	6520726f 	.word	0x6520726f
   18704:	746e6576 	.word	0x746e6576
   18708:	61747320 	.word	0x61747320
   1870c:	66206b63 	.word	0x66206b63
   18710:	656c6961 	.word	0x656c6961
   18714:	000d0a64 	.word	0x000d0a64
   18718:	72656874 	.word	0x72656874
   1871c:	72612065 	.word	0x72612065
   18720:	65732065 	.word	0x65732065
   18724:	726f736e 	.word	0x726f736e
   18728:	73696d20 	.word	0x73696d20
   1872c:	676e6973 	.word	0x676e6973
   18730:	61656420 	.word	0x61656420
   18734:	6e696c64 	.word	0x6e696c64
   18738:	000d0a65 	.word	0x000d0a65
   1873c:	72656874 	.word	0x72656874
   18740:	72612065 	.word	0x72612065
   18744:	65732065 	.word	0x65732065
   18748:	6e617672 	.word	0x6e617672
   1874c:	6d207374 	.word	0x6d207374
   18750:	69737369 	.word	0x69737369
   18754:	6420676e 	.word	0x6420676e
   18758:	6c646165 	.word	0x6c646165
   1875c:	0a656e69 	.word	0x0a656e69
   18760:	0000000d 	.word	0x0000000d
   18764:	6f727245 	.word	0x6f727245
   18768:	54203a72 	.word	0x54203a72
   1876c:	20736968 	.word	0x20736968
   18770:	6e657665 	.word	0x6e657665
   18774:	61682074 	.word	0x61682074
   18778:	72612073 	.word	0x72612073
   1877c:	65766972 	.word	0x65766972
   18780:	0a212164 	.word	0x0a212164
   18784:	0000000d 	.word	0x0000000d
   18788:	454c4449 	.word	0x454c4449
   1878c:	00000000 	.word	0x00000000

00018790 <ulKernelPriority>:
   18790:	0000007f                                ....

00018794 <heapSTRUCT_SIZE>:
   18794:	00010010                                         ..

00018796 <version>:
   18796:	3d5a0001                                         ..

00018798 <utm_east0>:
   18798:	00093d5a                                Z=..

0001879c <utm_north0>:
   1879c:	005875e6                                .uX.

000187a0 <climb_pgain>:
   187a0:	bcf5c28f                                ....

000187a4 <climb_igain>:
   187a4:	3dcccccd                                ...=

000187a8 <level_gaz>:
   187a8:	3e9eb852                                R..>

000187ac <nav_east0>:
   187ac:	00093d5a                                Z=..

000187b0 <nav_north0>:
   187b0:	005875e6                                .uX.

000187b4 <nb_waypoint>:
   187b4:	00000007 33323130 37363534 42413938     ....0123456789AB
   187c4:	46454443                                CDEF

000187c8 <failsafe>:
	...
   187dc:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   187ec:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   187fc:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   1880c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1881c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1882c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   1883c:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   1884c:	00746e61                                ant.
