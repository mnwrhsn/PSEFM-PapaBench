
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 65 8b 01 00 a9 8b 01 00 a9 8b 01 00     .P. e...........
      10:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 00 00 00 00     ................
	...
      2c:	0d 5d 00 00 a9 8b 01 00 00 00 00 00 19 5e 00 00     .]...........^..
      3c:	55 5e 00 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     U^..............
      4c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      5c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      6c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      7c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      8c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      9c:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      ac:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      bc:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      cc:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
      dc:	a9 8b 01 00 a9 8b 01 00 a9 8b 01 00 a9 8b 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018c90 	.word	0x00018c90
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd8 	.word	0x2004cdd8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd55 	bl	5ea8 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe94 	bl	4178 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe8f 	bl	4178 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe6f 	bl	4190 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 feae 	bl	4250 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe58 	bl	41e0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe48 	bl	41e0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe3b 	bl	41e0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe5c 	bl	4250 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe53 	bl	4250 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fdd2 	bl	4190 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fea1 	bl	534c <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fdc6 	bl	4250 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fdbd 	bl	4250 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd38 	bl	4190 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc6f 	bl	4138 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc63 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc5d 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc57 	bl	4138 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fcc1 	bl	4250 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc58 	bl	4190 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f835 	bl	29ac <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fd02 	bl	534c <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	3308      	adds	r3, #8
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	fbb3 f2f2 	udiv	r2, r3, r2
    29ee:	6839      	ldr	r1, [r7, #0]
    29f0:	fb01 f202 	mul.w	r2, r1, r2
    29f4:	1a9b      	subs	r3, r3, r2
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00d      	beq.n	2a16 <getGCD+0x3a>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	683a      	ldr	r2, [r7, #0]
    29fe:	fbb3 f2f2 	udiv	r2, r3, r2
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	fb01 f202 	mul.w	r2, r1, r2
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	6838      	ldr	r0, [r7, #0]
    2a0c:	4619      	mov	r1, r3
    2a0e:	f7ff ffe5 	bl	29dc <getGCD>
    2a12:	4603      	mov	r3, r0
    2a14:	e000      	b.n	2a18 <getGCD+0x3c>
    2a16:	683b      	ldr	r3, [r7, #0]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3708      	adds	r7, #8
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a26:	f240 0328 	movw	r3, #40	; 0x28
    2a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a32:	2301      	movs	r3, #1
    2a34:	607b      	str	r3, [r7, #4]
    2a36:	e00f      	b.n	2a58 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a38:	f240 0328 	movw	r3, #40	; 0x28
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a46:	6838      	ldr	r0, [r7, #0]
    2a48:	4619      	mov	r1, r3
    2a4a:	f7ff ffc7 	bl	29dc <getGCD>
    2a4e:	4603      	mov	r3, r0
    2a50:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3301      	adds	r3, #1
    2a56:	607b      	str	r3, [r7, #4]
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	2b0c      	cmp	r3, #12
    2a5c:	ddec      	ble.n	2a38 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a5e:	683b      	ldr	r3, [r7, #0]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b091      	sub	sp, #68	; 0x44
    2a6c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a6e:	f7ff ffd7 	bl	2a20 <GCDOfTaskPeriod>
    2a72:	4602      	mov	r2, r0
    2a74:	f240 6358 	movw	r3, #1624	; 0x658
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a7e:	f640 0094 	movw	r0, #2196	; 0x894
    2a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a86:	f001 fb57 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2a8a:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a92:	f001 fb51 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2a96:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb4b 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aa2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb45 	bl	4138 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2aae:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb3f 	bl	4138 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2aba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb39 	bl	4138 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ac6:	2300      	movs	r3, #0
    2ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    2aca:	e02b      	b.n	2b24 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2acc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ace:	2034      	movs	r0, #52	; 0x34
    2ad0:	f003 f9ea 	bl	5ea8 <pvPortMalloc>
    2ad4:	4602      	mov	r2, r0
    2ad6:	00a3      	lsls	r3, r4, #2
    2ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2adc:	440b      	add	r3, r1
    2ade:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2aea:	4413      	add	r3, r2
    2aec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af8:	440b      	add	r3, r1
    2afa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2afe:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b08:	4413      	add	r3, r2
    2b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b0e:	3320      	adds	r3, #32
    2b10:	f640 0094 	movw	r0, #2196	; 0x894
    2b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b18:	4619      	mov	r1, r3
    2b1a:	f001 fb39 	bl	4190 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b20:	3301      	adds	r3, #1
    2b22:	63bb      	str	r3, [r7, #56]	; 0x38
    2b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b26:	2b0c      	cmp	r3, #12
    2b28:	ddd0      	ble.n	2acc <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b2a:	3744      	adds	r7, #68	; 0x44
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd90      	pop	{r4, r7, pc}

00002b30 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b36:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	60fb      	str	r3, [r7, #12]
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	dd22      	ble.n	2b8e <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b48:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	68db      	ldr	r3, [r3, #12]
    2b52:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b54:	f002 fbfa 	bl	534c <xTaskGetTickCount>
    2b58:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b5a:	2300      	movs	r3, #0
    2b5c:	613b      	str	r3, [r7, #16]
    2b5e:	e012      	b.n	2b86 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff21 	bl	29ac <xEventGetxTag>
    2b6a:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	429a      	cmp	r2, r3
    2b74:	d801      	bhi.n	2b7a <xIsExecutableEventArrive+0x4a>
    2b76:	2301      	movs	r3, #1
    2b78:	e00a      	b.n	2b90 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b7a:	697b      	ldr	r3, [r7, #20]
    2b7c:	685b      	ldr	r3, [r3, #4]
    2b7e:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b80:	693b      	ldr	r3, [r7, #16]
    2b82:	3301      	adds	r3, #1
    2b84:	613b      	str	r3, [r7, #16]
    2b86:	693a      	ldr	r2, [r7, #16]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	dbe8      	blt.n	2b60 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3718      	adds	r7, #24
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	429a      	cmp	r2, r3
    2bac:	d201      	bcs.n	2bb2 <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bae:	2301      	movs	r3, #1
    2bb0:	e02a      	b.n	2c08 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d123      	bne.n	2c06 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d201      	bcs.n	2bce <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bca:	2301      	movs	r3, #1
    2bcc:	e01c      	b.n	2c08 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	685b      	ldr	r3, [r3, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d115      	bne.n	2c06 <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	68da      	ldr	r2, [r3, #12]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	68db      	ldr	r3, [r3, #12]
    2be2:	429a      	cmp	r2, r3
    2be4:	da01      	bge.n	2bea <xCompareFunction+0x52>
            {
                return pdTRUE;
    2be6:	2301      	movs	r3, #1
    2be8:	e00e      	b.n	2c08 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	68da      	ldr	r2, [r3, #12]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	68db      	ldr	r3, [r3, #12]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d107      	bne.n	2c06 <xCompareFunction+0x6e>
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	689a      	ldr	r2, [r3, #8]
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	689b      	ldr	r3, [r3, #8]
    2bfe:	429a      	cmp	r2, r3
    2c00:	da01      	bge.n	2c06 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c02:	2301      	movs	r3, #1
    2c04:	e000      	b.n	2c08 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	370c      	adds	r7, #12
    2c0c:	46bd      	mov	sp, r7
    2c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c12:	4770      	bx	lr

00002c14 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c14:	b480      	push	{r7}
    2c16:	b087      	sub	sp, #28
    2c18:	af00      	add	r7, sp, #0
    2c1a:	60f8      	str	r0, [r7, #12]
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	68fa      	ldr	r2, [r7, #12]
    2c28:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c2a:	697b      	ldr	r3, [r7, #20]
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2200      	movs	r2, #0
    2c34:	615a      	str	r2, [r3, #20]
}
    2c36:	371c      	adds	r7, #28
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b088      	sub	sp, #32
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c48:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c50:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	68db      	ldr	r3, [r3, #12]
    2c56:	4618      	mov	r0, r3
    2c58:	f7ff fea8 	bl	29ac <xEventGetxTag>
    2c5c:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c5e:	f003 f8a9 	bl	5db4 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c62:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c6e:	697b      	ldr	r3, [r7, #20]
    2c70:	3308      	adds	r3, #8
    2c72:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c74:	2300      	movs	r3, #0
    2c76:	61bb      	str	r3, [r7, #24]
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2c7a:	69fb      	ldr	r3, [r7, #28]
    2c7c:	689b      	ldr	r3, [r3, #8]
    2c7e:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	3301      	adds	r3, #1
    2c84:	61bb      	str	r3, [r7, #24]
    2c86:	69ba      	ldr	r2, [r7, #24]
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da0d      	bge.n	2caa <prvEventListGenericInsert+0x6a>
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	4618      	mov	r0, r3
    2c96:	f7ff fe89 	bl	29ac <xEventGetxTag>
    2c9a:	4603      	mov	r3, r0
    2c9c:	6938      	ldr	r0, [r7, #16]
    2c9e:	4619      	mov	r1, r3
    2ca0:	f7ff ff7a 	bl	2b98 <xCompareFunction>
    2ca4:	4603      	mov	r3, r0
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1e7      	bne.n	2c7a <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2caa:	f003 f899 	bl	5de0 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	689b      	ldr	r3, [r3, #8]
    2cb2:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cb4:	69fb      	ldr	r3, [r7, #28]
    2cb6:	685a      	ldr	r2, [r3, #4]
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	687a      	ldr	r2, [r7, #4]
    2cc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	69fa      	ldr	r2, [r7, #28]
    2cc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cca:	69fb      	ldr	r3, [r7, #28]
    2ccc:	687a      	ldr	r2, [r7, #4]
    2cce:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	697a      	ldr	r2, [r7, #20]
    2cd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cd6:	697b      	ldr	r3, [r7, #20]
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	1c5a      	adds	r2, r3, #1
    2cdc:	697b      	ldr	r3, [r7, #20]
    2cde:	601a      	str	r2, [r3, #0]
}
    2ce0:	3720      	adds	r7, #32
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	bf00      	nop

00002ce8 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b086      	sub	sp, #24
    2cec:	af00      	add	r7, sp, #0
    2cee:	60f8      	str	r0, [r7, #12]
    2cf0:	60b9      	str	r1, [r7, #8]
    2cf2:	607a      	str	r2, [r7, #4]
    2cf4:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2cf6:	2300      	movs	r3, #0
    2cf8:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2cfa:	f003 f85b 	bl	5db4 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2cfe:	f640 0394 	movw	r3, #2196	; 0x894
    2d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d06:	68db      	ldr	r3, [r3, #12]
    2d08:	68db      	ldr	r3, [r3, #12]
    2d0a:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d0c:	697b      	ldr	r3, [r7, #20]
    2d0e:	3320      	adds	r3, #32
    2d10:	4618      	mov	r0, r3
    2d12:	f001 fa9d 	bl	4250 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d16:	697b      	ldr	r3, [r7, #20]
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d1c:	68b8      	ldr	r0, [r7, #8]
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	697a      	ldr	r2, [r7, #20]
    2d22:	f7ff ff77 	bl	2c14 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	683a      	ldr	r2, [r7, #0]
    2d2a:	3318      	adds	r3, #24
    2d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d30:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	697a      	ldr	r2, [r7, #20]
    2d38:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d3a:	f003 f851 	bl	5de0 <vPortExitCritical>

    return pxNewEvent;
    2d3e:	697b      	ldr	r3, [r7, #20]
}
    2d40:	4618      	mov	r0, r3
    2d42:	3718      	adds	r7, #24
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}

00002d48 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b08c      	sub	sp, #48	; 0x30
    2d4c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d4e:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d56:	68db      	ldr	r3, [r3, #12]
    2d58:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d5a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	623b      	str	r3, [r7, #32]
    2d66:	6a3b      	ldr	r3, [r7, #32]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	f340 80d1 	ble.w	2f10 <vEventGenericScatter+0x1c8>
    {
        xCurrentTime = xTaskGetTickCount();
    2d6e:	f002 faed 	bl	534c <xTaskGetTickCount>
    2d72:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d74:	2300      	movs	r3, #0
    2d76:	62bb      	str	r3, [r7, #40]	; 0x28
    2d78:	e0c5      	b.n	2f06 <vEventGenericScatter+0x1be>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d7c:	68db      	ldr	r3, [r3, #12]
    2d7e:	4618      	mov	r0, r3
    2d80:	f7ff fe14 	bl	29ac <xEventGetxTag>
    2d84:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d86:	69bb      	ldr	r3, [r7, #24]
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	429a      	cmp	r2, r3
    2d8e:	f200 80b4 	bhi.w	2efa <vEventGenericScatter+0x1b2>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2d98:	697b      	ldr	r3, [r7, #20]
    2d9a:	6819      	ldr	r1, [r3, #0]
    2d9c:	f640 120c 	movw	r2, #2316	; 0x90c
    2da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2da4:	460b      	mov	r3, r1
    2da6:	00db      	lsls	r3, r3, #3
    2da8:	1a5b      	subs	r3, r3, r1
    2daa:	00db      	lsls	r3, r3, #3
    2dac:	4413      	add	r3, r2
    2dae:	3310      	adds	r3, #16
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2db4:	f002 fffe 	bl	5db4 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dba:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dbe:	685b      	ldr	r3, [r3, #4]
    2dc0:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f001 fa44 	bl	4250 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	6819      	ldr	r1, [r3, #0]
    2dcc:	f640 120c 	movw	r2, #2316	; 0x90c
    2dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd4:	460b      	mov	r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	1a5b      	subs	r3, r3, r1
    2dda:	00db      	lsls	r3, r3, #3
    2ddc:	4413      	add	r3, r2
    2dde:	331c      	adds	r3, #28
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	697b      	ldr	r3, [r7, #20]
    2de4:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2de6:	697b      	ldr	r3, [r7, #20]
    2de8:	685a      	ldr	r2, [r3, #4]
    2dea:	f640 110c 	movw	r1, #2316	; 0x90c
    2dee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2df2:	4613      	mov	r3, r2
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	1a9b      	subs	r3, r3, r2
    2df8:	00db      	lsls	r3, r3, #3
    2dfa:	440b      	add	r3, r1
    2dfc:	3334      	adds	r3, #52	; 0x34
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	1c58      	adds	r0, r3, #1
    2e02:	f640 110c 	movw	r1, #2316	; 0x90c
    2e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	1a9b      	subs	r3, r3, r2
    2e10:	00db      	lsls	r3, r3, #3
    2e12:	440b      	add	r3, r1
    2e14:	3334      	adds	r3, #52	; 0x34
    2e16:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e18:	697b      	ldr	r3, [r7, #20]
    2e1a:	6859      	ldr	r1, [r3, #4]
    2e1c:	f640 120c 	movw	r2, #2316	; 0x90c
    2e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e24:	460b      	mov	r3, r1
    2e26:	00db      	lsls	r3, r3, #3
    2e28:	1a5b      	subs	r3, r3, r1
    2e2a:	00db      	lsls	r3, r3, #3
    2e2c:	4413      	add	r3, r2
    2e2e:	681a      	ldr	r2, [r3, #0]
    2e30:	697b      	ldr	r3, [r7, #20]
    2e32:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e34:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e3c:	68f9      	ldr	r1, [r7, #12]
    2e3e:	f001 f9a7 	bl	4190 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e42:	2301      	movs	r3, #1
    2e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e46:	e051      	b.n	2eec <vEventGenericScatter+0x1a4>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e48:	697b      	ldr	r3, [r7, #20]
    2e4a:	6899      	ldr	r1, [r3, #8]
    2e4c:	697b      	ldr	r3, [r7, #20]
    2e4e:	68da      	ldr	r2, [r3, #12]
    2e50:	697b      	ldr	r3, [r7, #20]
    2e52:	3318      	adds	r3, #24
    2e54:	68b8      	ldr	r0, [r7, #8]
    2e56:	f7ff ff47 	bl	2ce8 <pxEventGenericCreate>
    2e5a:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e60:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	f640 120c 	movw	r2, #2316	; 0x90c
    2e6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e6e:	460b      	mov	r3, r1
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	1a5b      	subs	r3, r3, r1
    2e74:	005b      	lsls	r3, r3, #1
    2e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e78:	440b      	add	r3, r1
    2e7a:	3306      	adds	r3, #6
    2e7c:	009b      	lsls	r3, r3, #2
    2e7e:	4413      	add	r3, r2
    2e80:	685a      	ldr	r2, [r3, #4]
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	685a      	ldr	r2, [r3, #4]
    2e8a:	f640 110c 	movw	r1, #2316	; 0x90c
    2e8e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e92:	4613      	mov	r3, r2
    2e94:	00db      	lsls	r3, r3, #3
    2e96:	1a9b      	subs	r3, r3, r2
    2e98:	00db      	lsls	r3, r3, #3
    2e9a:	440b      	add	r3, r1
    2e9c:	3334      	adds	r3, #52	; 0x34
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	1c58      	adds	r0, r3, #1
    2ea2:	f640 110c 	movw	r1, #2316	; 0x90c
    2ea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eaa:	4613      	mov	r3, r2
    2eac:	00db      	lsls	r3, r3, #3
    2eae:	1a9b      	subs	r3, r3, r2
    2eb0:	00db      	lsls	r3, r3, #3
    2eb2:	440b      	add	r3, r1
    2eb4:	3334      	adds	r3, #52	; 0x34
    2eb6:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2eb8:	697b      	ldr	r3, [r7, #20]
    2eba:	6859      	ldr	r1, [r3, #4]
    2ebc:	f640 120c 	movw	r2, #2316	; 0x90c
    2ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ec4:	460b      	mov	r3, r1
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	1a5b      	subs	r3, r3, r1
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	4413      	add	r3, r2
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	3320      	adds	r3, #32
    2ed8:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2edc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ee0:	4619      	mov	r1, r3
    2ee2:	f001 f955 	bl	4190 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ee8:	3301      	adds	r3, #1
    2eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    2eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2eee:	693b      	ldr	r3, [r7, #16]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	dba9      	blt.n	2e48 <vEventGenericScatter+0x100>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2ef4:	f002 ff74 	bl	5de0 <vPortExitCritical>
    2ef8:	e002      	b.n	2f00 <vEventGenericScatter+0x1b8>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f02:	3301      	adds	r3, #1
    2f04:	62bb      	str	r3, [r7, #40]	; 0x28
    2f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f08:	6a3b      	ldr	r3, [r7, #32]
    2f0a:	429a      	cmp	r2, r3
    2f0c:	f6ff af35 	blt.w	2d7a <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f10:	3730      	adds	r7, #48	; 0x30
    2f12:	46bd      	mov	sp, r7
    2f14:	bd80      	pop	{r7, pc}
    2f16:	bf00      	nop

00002f18 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f18:	b480      	push	{r7}
    2f1a:	b083      	sub	sp, #12
    2f1c:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f1e:	232f      	movs	r3, #47	; 0x2f
    2f20:	607b      	str	r3, [r7, #4]
    while(i--)
    2f22:	e030      	b.n	2f86 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f24:	f240 6260 	movw	r2, #1632	; 0x660
    2f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f2c:	6879      	ldr	r1, [r7, #4]
    2f2e:	460b      	mov	r3, r1
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	440b      	add	r3, r1
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	4413      	add	r3, r2
    2f38:	2200      	movs	r2, #0
    2f3a:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f3c:	f240 6260 	movw	r2, #1632	; 0x660
    2f40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f44:	6879      	ldr	r1, [r7, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	005b      	lsls	r3, r3, #1
    2f4a:	440b      	add	r3, r1
    2f4c:	009b      	lsls	r3, r3, #2
    2f4e:	4413      	add	r3, r2
    2f50:	3308      	adds	r3, #8
    2f52:	2200      	movs	r2, #0
    2f54:	601a      	str	r2, [r3, #0]
    2f56:	f240 6260 	movw	r2, #1632	; 0x660
    2f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5e:	6879      	ldr	r1, [r7, #4]
    2f60:	460b      	mov	r3, r1
    2f62:	005b      	lsls	r3, r3, #1
    2f64:	440b      	add	r3, r1
    2f66:	009b      	lsls	r3, r3, #2
    2f68:	4413      	add	r3, r2
    2f6a:	3308      	adds	r3, #8
    2f6c:	6818      	ldr	r0, [r3, #0]
    2f6e:	f240 6260 	movw	r2, #1632	; 0x660
    2f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f76:	6879      	ldr	r1, [r7, #4]
    2f78:	460b      	mov	r3, r1
    2f7a:	005b      	lsls	r3, r3, #1
    2f7c:	440b      	add	r3, r1
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	4413      	add	r3, r2
    2f82:	3304      	adds	r3, #4
    2f84:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	1e5a      	subs	r2, r3, #1
    2f8a:	607a      	str	r2, [r7, #4]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d1c9      	bne.n	2f24 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2f90:	370c      	adds	r7, #12
    2f92:	46bd      	mov	sp, r7
    2f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f98:	4770      	bx	lr
    2f9a:	bf00      	nop

00002f9c <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b08a      	sub	sp, #40	; 0x28
    2fa0:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fa2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	61fb      	str	r3, [r7, #28]
    2fae:	69fb      	ldr	r3, [r7, #28]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	f340 80ea 	ble.w	318a <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fb6:	f7ff ffaf 	bl	2f18 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fba:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc2:	68db      	ldr	r3, [r3, #12]
    2fc4:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2fc6:	2300      	movs	r3, #0
    2fc8:	627b      	str	r3, [r7, #36]	; 0x24
    2fca:	e0a6      	b.n	311a <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fcc:	6a3b      	ldr	r3, [r7, #32]
    2fce:	68db      	ldr	r3, [r3, #12]
    2fd0:	4618      	mov	r0, r3
    2fd2:	f7ff fcdf 	bl	2994 <xEventGetpxDestination>
    2fd6:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2fd8:	f640 120c 	movw	r2, #2316	; 0x90c
    2fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fe0:	69b9      	ldr	r1, [r7, #24]
    2fe2:	460b      	mov	r3, r1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	1a5b      	subs	r3, r3, r1
    2fe8:	00db      	lsls	r3, r3, #3
    2fea:	4413      	add	r3, r2
    2fec:	3334      	adds	r3, #52	; 0x34
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	f640 120c 	movw	r2, #2316	; 0x90c
    2ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ff8:	69b9      	ldr	r1, [r7, #24]
    2ffa:	460b      	mov	r3, r1
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	1a5b      	subs	r3, r3, r1
    3000:	00db      	lsls	r3, r3, #3
    3002:	4413      	add	r3, r2
    3004:	330c      	adds	r3, #12
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	4298      	cmp	r0, r3
    300a:	f040 8083 	bne.w	3114 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    300e:	69ba      	ldr	r2, [r7, #24]
    3010:	4613      	mov	r3, r2
    3012:	005b      	lsls	r3, r3, #1
    3014:	4413      	add	r3, r2
    3016:	009b      	lsls	r3, r3, #2
    3018:	f240 6260 	movw	r2, #1632	; 0x660
    301c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3020:	4413      	add	r3, r2
    3022:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3024:	f640 120c 	movw	r2, #2316	; 0x90c
    3028:	f2c2 0200 	movt	r2, #8192	; 0x2000
    302c:	69b9      	ldr	r1, [r7, #24]
    302e:	460b      	mov	r3, r1
    3030:	00db      	lsls	r3, r3, #3
    3032:	1a5b      	subs	r3, r3, r1
    3034:	00db      	lsls	r3, r3, #3
    3036:	4413      	add	r3, r2
    3038:	3334      	adds	r3, #52	; 0x34
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	2b01      	cmp	r3, #1
    303e:	dd57      	ble.n	30f0 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3040:	697b      	ldr	r3, [r7, #20]
    3042:	685b      	ldr	r3, [r3, #4]
    3044:	613b      	str	r3, [r7, #16]
    3046:	693b      	ldr	r3, [r7, #16]
    3048:	2b00      	cmp	r3, #0
    304a:	dd41      	ble.n	30d0 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    304c:	6a3b      	ldr	r3, [r7, #32]
    304e:	68db      	ldr	r3, [r3, #12]
    3050:	4618      	mov	r0, r3
    3052:	f7ff fcb7 	bl	29c4 <xEventGetxData>
    3056:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3058:	6a3b      	ldr	r3, [r7, #32]
    305a:	68db      	ldr	r3, [r3, #12]
    305c:	4618      	mov	r0, r3
    305e:	f7ff fca5 	bl	29ac <xEventGetxTag>
    3062:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3064:	697b      	ldr	r3, [r7, #20]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	68fa      	ldr	r2, [r7, #12]
    306a:	6811      	ldr	r1, [r2, #0]
    306c:	693a      	ldr	r2, [r7, #16]
    306e:	3206      	adds	r2, #6
    3070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    3074:	697b      	ldr	r3, [r7, #20]
    3076:	6859      	ldr	r1, [r3, #4]
    3078:	1c4a      	adds	r2, r1, #1
    307a:	697b      	ldr	r3, [r7, #20]
    307c:	605a      	str	r2, [r3, #4]
    307e:	f640 120c 	movw	r2, #2316	; 0x90c
    3082:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3086:	69b8      	ldr	r0, [r7, #24]
    3088:	4603      	mov	r3, r0
    308a:	00db      	lsls	r3, r3, #3
    308c:	1a1b      	subs	r3, r3, r0
    308e:	00db      	lsls	r3, r3, #3
    3090:	4413      	add	r3, r2
    3092:	3334      	adds	r3, #52	; 0x34
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	3b01      	subs	r3, #1
    3098:	4299      	cmp	r1, r3
    309a:	d102      	bne.n	30a2 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	2201      	movs	r2, #1
    30a0:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30a2:	697b      	ldr	r3, [r7, #20]
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	68da      	ldr	r2, [r3, #12]
    30a8:	68bb      	ldr	r3, [r7, #8]
    30aa:	685b      	ldr	r3, [r3, #4]
    30ac:	429a      	cmp	r2, r3
    30ae:	d204      	bcs.n	30ba <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30b0:	697b      	ldr	r3, [r7, #20]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	68ba      	ldr	r2, [r7, #8]
    30b6:	6852      	ldr	r2, [r2, #4]
    30b8:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ba:	6a3b      	ldr	r3, [r7, #32]
    30bc:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30be:	6a3b      	ldr	r3, [r7, #32]
    30c0:	685b      	ldr	r3, [r3, #4]
    30c2:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	68db      	ldr	r3, [r3, #12]
    30c8:	4618      	mov	r0, r3
    30ca:	f000 fa1d 	bl	3508 <vEventGenericDelete>
    30ce:	e021      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30d0:	6a3b      	ldr	r3, [r7, #32]
    30d2:	68da      	ldr	r2, [r3, #12]
    30d4:	697b      	ldr	r3, [r7, #20]
    30d6:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30d8:	697b      	ldr	r3, [r7, #20]
    30da:	2201      	movs	r2, #1
    30dc:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30de:	6a3b      	ldr	r3, [r7, #32]
    30e0:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30e2:	6a3b      	ldr	r3, [r7, #32]
    30e4:	685b      	ldr	r3, [r3, #4]
    30e6:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    30e8:	6878      	ldr	r0, [r7, #4]
    30ea:	f001 f8b1 	bl	4250 <vListRemove>
    30ee:	e011      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    30f0:	6a3b      	ldr	r3, [r7, #32]
    30f2:	68da      	ldr	r2, [r3, #12]
    30f4:	697b      	ldr	r3, [r7, #20]
    30f6:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	2201      	movs	r2, #1
    30fc:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2201      	movs	r2, #1
    3102:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    3104:	6a3b      	ldr	r3, [r7, #32]
    3106:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3108:	6a3b      	ldr	r3, [r7, #32]
    310a:	685b      	ldr	r3, [r3, #4]
    310c:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    310e:	6878      	ldr	r0, [r7, #4]
    3110:	f001 f89e 	bl	4250 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3116:	3301      	adds	r3, #1
    3118:	627b      	str	r3, [r7, #36]	; 0x24
    311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    311c:	69fb      	ldr	r3, [r7, #28]
    311e:	429a      	cmp	r2, r3
    3120:	f6ff af54 	blt.w	2fcc <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3124:	2300      	movs	r3, #0
    3126:	627b      	str	r3, [r7, #36]	; 0x24
    3128:	e02c      	b.n	3184 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    312a:	f240 6260 	movw	r2, #1632	; 0x660
    312e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3132:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3134:	460b      	mov	r3, r1
    3136:	005b      	lsls	r3, r3, #1
    3138:	440b      	add	r3, r1
    313a:	009b      	lsls	r3, r3, #2
    313c:	4413      	add	r3, r2
    313e:	3308      	adds	r3, #8
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d01b      	beq.n	317e <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3146:	f240 6260 	movw	r2, #1632	; 0x660
    314a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3150:	460b      	mov	r3, r1
    3152:	005b      	lsls	r3, r3, #1
    3154:	440b      	add	r3, r1
    3156:	009b      	lsls	r3, r3, #2
    3158:	4413      	add	r3, r2
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	3320      	adds	r3, #32
    315e:	4618      	mov	r0, r3
    3160:	f7ff fd6e 	bl	2c40 <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    3164:	f640 120c 	movw	r2, #2316	; 0x90c
    3168:	f2c2 0200 	movt	r2, #8192	; 0x2000
    316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    316e:	460b      	mov	r3, r1
    3170:	00db      	lsls	r3, r3, #3
    3172:	1a5b      	subs	r3, r3, r1
    3174:	00db      	lsls	r3, r3, #3
    3176:	4413      	add	r3, r2
    3178:	3334      	adds	r3, #52	; 0x34
    317a:	2200      	movs	r2, #0
    317c:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3180:	3301      	adds	r3, #1
    3182:	627b      	str	r3, [r7, #36]	; 0x24
    3184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3186:	2b2e      	cmp	r3, #46	; 0x2e
    3188:	ddcf      	ble.n	312a <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    318a:	3728      	adds	r7, #40	; 0x28
    318c:	46bd      	mov	sp, r7
    318e:	bd80      	pop	{r7, pc}

00003190 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    3190:	b480      	push	{r7}
    3192:	b087      	sub	sp, #28
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	68db      	ldr	r3, [r3, #12]
    319c:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    319e:	697b      	ldr	r3, [r7, #20]
    31a0:	685b      	ldr	r3, [r3, #4]
    31a2:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31a4:	697b      	ldr	r3, [r7, #20]
    31a6:	68db      	ldr	r3, [r3, #12]
    31a8:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31aa:	f640 120c 	movw	r2, #2316	; 0x90c
    31ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31b2:	6939      	ldr	r1, [r7, #16]
    31b4:	460b      	mov	r3, r1
    31b6:	00db      	lsls	r3, r3, #3
    31b8:	1a5b      	subs	r3, r3, r1
    31ba:	00db      	lsls	r3, r3, #3
    31bc:	4413      	add	r3, r2
    31be:	3324      	adds	r3, #36	; 0x24
    31c0:	681a      	ldr	r2, [r3, #0]
    31c2:	68fb      	ldr	r3, [r7, #12]
    31c4:	4413      	add	r3, r2
    31c6:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31c8:	f240 6358 	movw	r3, #1624	; 0x658
    31cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d0:	681a      	ldr	r2, [r3, #0]
    31d2:	68fb      	ldr	r3, [r7, #12]
    31d4:	fbb3 f1f2 	udiv	r1, r3, r2
    31d8:	fb02 f201 	mul.w	r2, r2, r1
    31dc:	1a9b      	subs	r3, r3, r2
    31de:	2b02      	cmp	r3, #2
    31e0:	d932      	bls.n	3248 <pOverLap+0xb8>
    31e2:	f240 6358 	movw	r3, #1624	; 0x658
    31e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ea:	681a      	ldr	r2, [r3, #0]
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	fbb3 f1f2 	udiv	r1, r3, r2
    31f2:	fb02 f201 	mul.w	r2, r2, r1
    31f6:	1a9a      	subs	r2, r3, r2
    31f8:	f240 6358 	movw	r3, #1624	; 0x658
    31fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	3b03      	subs	r3, #3
    3204:	429a      	cmp	r2, r3
    3206:	d81f      	bhi.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3208:	f240 6358 	movw	r3, #1624	; 0x658
    320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3210:	681a      	ldr	r2, [r3, #0]
    3212:	68bb      	ldr	r3, [r7, #8]
    3214:	fbb3 f1f2 	udiv	r1, r3, r2
    3218:	fb02 f201 	mul.w	r2, r2, r1
    321c:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    321e:	2b02      	cmp	r3, #2
    3220:	d912      	bls.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3222:	f240 6358 	movw	r3, #1624	; 0x658
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	681a      	ldr	r2, [r3, #0]
    322c:	68bb      	ldr	r3, [r7, #8]
    322e:	fbb3 f1f2 	udiv	r1, r3, r2
    3232:	fb02 f201 	mul.w	r2, r2, r1
    3236:	1a9a      	subs	r2, r3, r2
    3238:	f240 6358 	movw	r3, #1624	; 0x658
    323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3240:	681b      	ldr	r3, [r3, #0]
    3242:	3b03      	subs	r3, #3
    3244:	429a      	cmp	r2, r3
    3246:	d901      	bls.n	324c <pOverLap+0xbc>
    {
        return 1;
    3248:	2301      	movs	r3, #1
    324a:	e000      	b.n	324e <pOverLap+0xbe>
    }
    return 0;
    324c:	2300      	movs	r3, #0
}
    324e:	4618      	mov	r0, r3
    3250:	371c      	adds	r7, #28
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
    325a:	bf00      	nop

0000325c <vSetTimestamp>:

static void vSetTimestamp( xListItem * pxEventListItem)
{
    325c:	b580      	push	{r7, lr}
    325e:	b086      	sub	sp, #24
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i, flag;
    portTickType nextComputingStart;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	68db      	ldr	r3, [r3, #12]
    3268:	617b      	str	r3, [r7, #20]
    pxEvent->xTag.xTimestamp = xFutureModelTime;// update model time
    326a:	f240 635c 	movw	r3, #1628	; 0x65c
    326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3272:	681a      	ldr	r2, [r3, #0]
    3274:	697b      	ldr	r3, [r7, #20]
    3276:	60da      	str	r2, [r3, #12]
    nextComputingStart = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;
    3278:	f240 635c 	movw	r3, #1628	; 0x65c
    327c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3280:	681a      	ldr	r2, [r3, #0]
    3282:	f240 6358 	movw	r3, #1624	; 0x658
    3286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	fbb2 f3f3 	udiv	r3, r2, r3
    3290:	1c5a      	adds	r2, r3, #1
    3292:	f240 6358 	movw	r3, #1624	; 0x658
    3296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	fb03 f302 	mul.w	r3, r3, r2
    32a0:	3303      	adds	r3, #3
    32a2:	613b      	str	r3, [r7, #16]
    flag = pOverLap(pxEventListItem);
    32a4:	6878      	ldr	r0, [r7, #4]
    32a6:	f7ff ff73 	bl	3190 <pOverLap>
    32aa:	60f8      	str	r0, [r7, #12]

    if( !flag  && xFutureModelTime < nextComputingStart) // not overlaped
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d112      	bne.n	32d8 <vSetTimestamp+0x7c>
    32b2:	f240 635c 	movw	r3, #1628	; 0x65c
    32b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ba:	681a      	ldr	r2, [r3, #0]
    32bc:	693b      	ldr	r3, [r7, #16]
    32be:	429a      	cmp	r2, r3
    32c0:	d20a      	bcs.n	32d8 <vSetTimestamp+0x7c>
    {
        vListRemove( pxEventListItem); 
    32c2:	6878      	ldr	r0, [r7, #4]
    32c4:	f000 ffc4 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32c8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32d0:	6879      	ldr	r1, [r7, #4]
    32d2:	f000 ff5d 	bl	4190 <vListInsertEnd>
    32d6:	e02c      	b.n	3332 <vSetTimestamp+0xd6>
    }
    else if ( flag && xFutureModelTime < nextComputingStart ) 
    32d8:	68fb      	ldr	r3, [r7, #12]
    32da:	2b00      	cmp	r3, #0
    32dc:	d01f      	beq.n	331e <vSetTimestamp+0xc2>
    32de:	f240 635c 	movw	r3, #1628	; 0x65c
    32e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e6:	681a      	ldr	r2, [r3, #0]
    32e8:	693b      	ldr	r3, [r7, #16]
    32ea:	429a      	cmp	r2, r3
    32ec:	d217      	bcs.n	331e <vSetTimestamp+0xc2>
    {
        // set the future model time to start time of next LET
        xFutureModelTime = nextComputingStart; 
    32ee:	f240 635c 	movw	r3, #1628	; 0x65c
    32f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f6:	693a      	ldr	r2, [r7, #16]
    32f8:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32fa:	f240 635c 	movw	r3, #1628	; 0x65c
    32fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3302:	681a      	ldr	r2, [r3, #0]
    3304:	697b      	ldr	r3, [r7, #20]
    3306:	60da      	str	r2, [r3, #12]

        vListRemove( pxEventListItem); 
    3308:	6878      	ldr	r0, [r7, #4]
    330a:	f000 ffa1 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    330e:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3312:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3316:	6879      	ldr	r1, [r7, #4]
    3318:	f000 ff3a 	bl	4190 <vListInsertEnd>
    331c:	e009      	b.n	3332 <vSetTimestamp+0xd6>
    }
    else
    {
        vListRemove( pxEventListItem); 
    331e:	6878      	ldr	r0, [r7, #4]
    3320:	f000 ff96 	bl	4250 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3324:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3328:	f2c2 0000 	movt	r0, #8192	; 0x2000
    332c:	6879      	ldr	r1, [r7, #4]
    332e:	f000 ff2f 	bl	4190 <vListInsertEnd>
    }
    xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;  
    3332:	697b      	ldr	r3, [r7, #20]
    3334:	6859      	ldr	r1, [r3, #4]
    3336:	f640 120c 	movw	r2, #2316	; 0x90c
    333a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    333e:	460b      	mov	r3, r1
    3340:	00db      	lsls	r3, r3, #3
    3342:	1a5b      	subs	r3, r3, r1
    3344:	00db      	lsls	r3, r3, #3
    3346:	4413      	add	r3, r2
    3348:	3324      	adds	r3, #36	; 0x24
    334a:	681a      	ldr	r2, [r3, #0]
    334c:	f240 635c 	movw	r3, #1628	; 0x65c
    3350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	441a      	add	r2, r3
    3358:	f240 635c 	movw	r3, #1628	; 0x65c
    335c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3360:	601a      	str	r2, [r3, #0]
}
    3362:	3718      	adds	r7, #24
    3364:	46bd      	mov	sp, r7
    3366:	bd80      	pop	{r7, pc}

00003368 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3368:	b480      	push	{r7}
    336a:	b083      	sub	sp, #12
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    3370:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	681a      	ldr	r2, [r3, #0]
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	429a      	cmp	r2, r3
    337c:	bf14      	ite	ne
    337e:	2300      	movne	r3, #0
    3380:	2301      	moveq	r3, #1
    3382:	b2db      	uxtb	r3, r3
}
    3384:	4618      	mov	r0, r3
    3386:	370c      	adds	r7, #12
    3388:	46bd      	mov	sp, r7
    338a:	f85d 7b04 	ldr.w	r7, [sp], #4
    338e:	4770      	bx	lr

00003390 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    3390:	b580      	push	{r7, lr}
    3392:	b084      	sub	sp, #16
    3394:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3396:	2301      	movs	r3, #1
    3398:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    339a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    339e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d00a      	beq.n	33be <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33a8:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b0:	68db      	ldr	r3, [r3, #12]
    33b2:	68db      	ldr	r3, [r3, #12]
    33b4:	4618      	mov	r0, r3
    33b6:	f7ff faf9 	bl	29ac <xEventGetxTag>
    33ba:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    33bc:	e035      	b.n	342a <xEventGenericSerialize+0x9a>
    33be:	e034      	b.n	342a <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33c0:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c8:	68db      	ldr	r3, [r3, #12]
    33ca:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	68db      	ldr	r3, [r3, #12]
    33d0:	4618      	mov	r0, r3
    33d2:	f7ff fadf 	bl	2994 <xEventGetpxDestination>
    33d6:	4601      	mov	r1, r0
    33d8:	f640 120c 	movw	r2, #2316	; 0x90c
    33dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33e0:	460b      	mov	r3, r1
    33e2:	00db      	lsls	r3, r3, #3
    33e4:	1a5b      	subs	r3, r3, r1
    33e6:	00db      	lsls	r3, r3, #3
    33e8:	4413      	add	r3, r2
    33ea:	3304      	adds	r3, #4
    33ec:	681b      	ldr	r3, [r3, #0]
    33ee:	2b02      	cmp	r3, #2
    33f0:	d111      	bne.n	3416 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	4618      	mov	r0, r3
    33f8:	f7ff fad8 	bl	29ac <xEventGetxTag>
    33fc:	4603      	mov	r3, r0
    33fe:	4618      	mov	r0, r3
    3400:	68f9      	ldr	r1, [r7, #12]
    3402:	f7ff ffb1 	bl	3368 <pEqualxDeadline>
    3406:	4603      	mov	r3, r0
    3408:	2b00      	cmp	r3, #0
    340a:	d003      	beq.n	3414 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                vSetTimestamp( flag_pxEventListItem);
    340c:	6878      	ldr	r0, [r7, #4]
    340e:	f7ff ff25 	bl	325c <vSetTimestamp>
    3412:	e00a      	b.n	342a <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    3414:	e010      	b.n	3438 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    3416:	6878      	ldr	r0, [r7, #4]
    3418:	f000 ff1a 	bl	4250 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    341c:	f640 00f8 	movw	r0, #2296	; 0x8f8
    3420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3424:	6879      	ldr	r1, [r7, #4]
    3426:	f000 feb3 	bl	4190 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    342a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d1c3      	bne.n	33c0 <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3438:	f640 03f8 	movw	r3, #2296	; 0x8f8
    343c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	2b00      	cmp	r3, #0
    3444:	d00a      	beq.n	345c <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3446:	f640 03f8 	movw	r3, #2296	; 0x8f8
    344a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    344e:	68db      	ldr	r3, [r3, #12]
    3450:	68db      	ldr	r3, [r3, #12]
    3452:	4618      	mov	r0, r3
    3454:	f7ff fa9e 	bl	2994 <xEventGetpxDestination>
    3458:	4603      	mov	r3, r0
    345a:	e001      	b.n	3460 <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    345c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3460:	4618      	mov	r0, r3
    3462:	3710      	adds	r7, #16
    3464:	46bd      	mov	sp, r7
    3466:	bd80      	pop	{r7, pc}

00003468 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3468:	b580      	push	{r7, lr}
    346a:	b082      	sub	sp, #8
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	3320      	adds	r3, #32
    3474:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3478:	f2c2 0000 	movt	r0, #8192	; 0x2000
    347c:	4619      	mov	r1, r3
    347e:	f000 fe87 	bl	4190 <vListInsertEnd>
}
    3482:	3708      	adds	r7, #8
    3484:	46bd      	mov	sp, r7
    3486:	bd80      	pop	{r7, pc}

00003488 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    348e:	f002 fc91 	bl	5db4 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    3492:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    349a:	68db      	ldr	r3, [r3, #12]
    349c:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    349e:	6878      	ldr	r0, [r7, #4]
    34a0:	f000 fed6 	bl	4250 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    34a4:	f640 00a8 	movw	r0, #2216	; 0x8a8
    34a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34ac:	6879      	ldr	r1, [r7, #4]
    34ae:	f000 fe6f 	bl	4190 <vListInsertEnd>
    taskEXIT_CRITICAL();
    34b2:	f002 fc95 	bl	5de0 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	68db      	ldr	r3, [r3, #12]
}
    34ba:	4618      	mov	r0, r3
    34bc:	3708      	adds	r7, #8
    34be:	46bd      	mov	sp, r7
    34c0:	bd80      	pop	{r7, pc}
    34c2:	bf00      	nop

000034c4 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34c4:	b480      	push	{r7}
    34c6:	b087      	sub	sp, #28
    34c8:	af00      	add	r7, sp, #0
    34ca:	60f8      	str	r0, [r7, #12]
    34cc:	60b9      	str	r1, [r7, #8]
    34ce:	607a      	str	r2, [r7, #4]
    34d0:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34d6:	697b      	ldr	r3, [r7, #20]
    34d8:	68ba      	ldr	r2, [r7, #8]
    34da:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34dc:	697b      	ldr	r3, [r7, #20]
    34de:	687a      	ldr	r2, [r7, #4]
    34e0:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34e2:	697b      	ldr	r3, [r7, #20]
    34e4:	683a      	ldr	r2, [r7, #0]
    34e6:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34e8:	697b      	ldr	r3, [r7, #20]
    34ea:	2200      	movs	r2, #0
    34ec:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34ee:	697b      	ldr	r3, [r7, #20]
    34f0:	6a3a      	ldr	r2, [r7, #32]
    34f2:	3318      	adds	r3, #24
    34f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    34f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34fc:	371c      	adds	r7, #28
    34fe:	46bd      	mov	sp, r7
    3500:	f85d 7b04 	ldr.w	r7, [sp], #4
    3504:	4770      	bx	lr
    3506:	bf00      	nop

00003508 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3508:	b580      	push	{r7, lr}
    350a:	b084      	sub	sp, #16
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    3510:	f002 fc50 	bl	5db4 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	3320      	adds	r3, #32
    3518:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    351a:	68f8      	ldr	r0, [r7, #12]
    351c:	f000 fe98 	bl	4250 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3520:	f640 0094 	movw	r0, #2196	; 0x894
    3524:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3528:	68f9      	ldr	r1, [r7, #12]
    352a:	f000 fe31 	bl	4190 <vListInsertEnd>

    taskEXIT_CRITICAL();
    352e:	f002 fc57 	bl	5de0 <vPortExitCritical>
}
    3532:	3710      	adds	r7, #16
    3534:	46bd      	mov	sp, r7
    3536:	bd80      	pop	{r7, pc}

00003538 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3538:	b580      	push	{r7, lr}
    353a:	b082      	sub	sp, #8
    353c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    353e:	2300      	movs	r3, #0
    3540:	607b      	str	r3, [r7, #4]
    3542:	e033      	b.n	35ac <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3544:	2001      	movs	r0, #1
    3546:	2100      	movs	r1, #0
    3548:	2203      	movs	r2, #3
    354a:	f000 fef7 	bl	433c <xQueueGenericCreate>
    354e:	4601      	mov	r1, r0
    3550:	f241 3354 	movw	r3, #4948	; 0x1354
    3554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3558:	687a      	ldr	r2, [r7, #4]
    355a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    355e:	f241 3354 	movw	r3, #4948	; 0x1354
    3562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3566:	687a      	ldr	r2, [r7, #4]
    3568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    356c:	2b00      	cmp	r3, #0
    356e:	d00c      	beq.n	358a <vSemaphoreInitialise+0x52>
    3570:	f241 3354 	movw	r3, #4948	; 0x1354
    3574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3578:	687a      	ldr	r2, [r7, #4]
    357a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    357e:	4618      	mov	r0, r3
    3580:	2100      	movs	r1, #0
    3582:	2200      	movs	r2, #0
    3584:	2300      	movs	r3, #0
    3586:	f000 ff67 	bl	4458 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    358a:	f241 3354 	movw	r3, #4948	; 0x1354
    358e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3592:	687a      	ldr	r2, [r7, #4]
    3594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3598:	4618      	mov	r0, r3
    359a:	2100      	movs	r1, #0
    359c:	f04f 32ff 	mov.w	r2, #4294967295
    35a0:	2300      	movs	r3, #0
    35a2:	f001 f81f 	bl	45e4 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	3301      	adds	r3, #1
    35aa:	607b      	str	r3, [r7, #4]
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	2b03      	cmp	r3, #3
    35b0:	ddc8      	ble.n	3544 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35b2:	3708      	adds	r7, #8
    35b4:	46bd      	mov	sp, r7
    35b6:	bd80      	pop	{r7, pc}

000035b8 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35b8:	b480      	push	{r7}
    35ba:	b085      	sub	sp, #20
    35bc:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35be:	2300      	movs	r3, #0
    35c0:	60fb      	str	r3, [r7, #12]
    35c2:	e0a1      	b.n	3708 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35c4:	f640 120c 	movw	r2, #2316	; 0x90c
    35c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35cc:	68f9      	ldr	r1, [r7, #12]
    35ce:	460b      	mov	r3, r1
    35d0:	00db      	lsls	r3, r3, #3
    35d2:	1a5b      	subs	r3, r3, r1
    35d4:	00db      	lsls	r3, r3, #3
    35d6:	4413      	add	r3, r2
    35d8:	68fa      	ldr	r2, [r7, #12]
    35da:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35dc:	f640 120c 	movw	r2, #2316	; 0x90c
    35e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35e4:	68f9      	ldr	r1, [r7, #12]
    35e6:	460b      	mov	r3, r1
    35e8:	00db      	lsls	r3, r3, #3
    35ea:	1a5b      	subs	r3, r3, r1
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	4413      	add	r3, r2
    35f0:	3304      	adds	r3, #4
    35f2:	2202      	movs	r2, #2
    35f4:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35f6:	f640 120c 	movw	r2, #2316	; 0x90c
    35fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35fe:	68f9      	ldr	r1, [r7, #12]
    3600:	460b      	mov	r3, r1
    3602:	00db      	lsls	r3, r3, #3
    3604:	1a5b      	subs	r3, r3, r1
    3606:	00db      	lsls	r3, r3, #3
    3608:	4413      	add	r3, r2
    360a:	3308      	adds	r3, #8
    360c:	2201      	movs	r2, #1
    360e:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3610:	f640 120c 	movw	r2, #2316	; 0x90c
    3614:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3618:	68f9      	ldr	r1, [r7, #12]
    361a:	460b      	mov	r3, r1
    361c:	00db      	lsls	r3, r3, #3
    361e:	1a5b      	subs	r3, r3, r1
    3620:	00db      	lsls	r3, r3, #3
    3622:	4413      	add	r3, r2
    3624:	330c      	adds	r3, #12
    3626:	2200      	movs	r2, #0
    3628:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    362a:	f640 120c 	movw	r2, #2316	; 0x90c
    362e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3632:	68f9      	ldr	r1, [r7, #12]
    3634:	460b      	mov	r3, r1
    3636:	00db      	lsls	r3, r3, #3
    3638:	1a5b      	subs	r3, r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	4413      	add	r3, r2
    363e:	3310      	adds	r3, #16
    3640:	2200      	movs	r2, #0
    3642:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3644:	f240 03c4 	movw	r3, #196	; 0xc4
    3648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364c:	68fa      	ldr	r2, [r7, #12]
    364e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3652:	f640 120c 	movw	r2, #2316	; 0x90c
    3656:	f2c2 0200 	movt	r2, #8192	; 0x2000
    365a:	68f9      	ldr	r1, [r7, #12]
    365c:	460b      	mov	r3, r1
    365e:	00db      	lsls	r3, r3, #3
    3660:	1a5b      	subs	r3, r3, r1
    3662:	00db      	lsls	r3, r3, #3
    3664:	4413      	add	r3, r2
    3666:	3324      	adds	r3, #36	; 0x24
    3668:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    366a:	f240 4374 	movw	r3, #1140	; 0x474
    366e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3672:	68fa      	ldr	r2, [r7, #12]
    3674:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3678:	f640 120c 	movw	r2, #2316	; 0x90c
    367c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3680:	68f9      	ldr	r1, [r7, #12]
    3682:	460b      	mov	r3, r1
    3684:	00db      	lsls	r3, r3, #3
    3686:	1a5b      	subs	r3, r3, r1
    3688:	00db      	lsls	r3, r3, #3
    368a:	4413      	add	r3, r2
    368c:	3328      	adds	r3, #40	; 0x28
    368e:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    3690:	f240 1380 	movw	r3, #384	; 0x180
    3694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3698:	68fa      	ldr	r2, [r7, #12]
    369a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    369e:	f640 120c 	movw	r2, #2316	; 0x90c
    36a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36a6:	68f9      	ldr	r1, [r7, #12]
    36a8:	460b      	mov	r3, r1
    36aa:	00db      	lsls	r3, r3, #3
    36ac:	1a5b      	subs	r3, r3, r1
    36ae:	00db      	lsls	r3, r3, #3
    36b0:	4413      	add	r3, r2
    36b2:	3330      	adds	r3, #48	; 0x30
    36b4:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36b6:	f240 1380 	movw	r3, #384	; 0x180
    36ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36be:	68fa      	ldr	r2, [r7, #12]
    36c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36c4:	f240 0328 	movw	r3, #40	; 0x28
    36c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36d0:	f640 120c 	movw	r2, #2316	; 0x90c
    36d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36d8:	68f9      	ldr	r1, [r7, #12]
    36da:	460b      	mov	r3, r1
    36dc:	00db      	lsls	r3, r3, #3
    36de:	1a5b      	subs	r3, r3, r1
    36e0:	00db      	lsls	r3, r3, #3
    36e2:	4413      	add	r3, r2
    36e4:	332c      	adds	r3, #44	; 0x2c
    36e6:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36e8:	f640 120c 	movw	r2, #2316	; 0x90c
    36ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36f0:	68f9      	ldr	r1, [r7, #12]
    36f2:	460b      	mov	r3, r1
    36f4:	00db      	lsls	r3, r3, #3
    36f6:	1a5b      	subs	r3, r3, r1
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	3334      	adds	r3, #52	; 0x34
    36fe:	2200      	movs	r2, #0
    3700:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3702:	68fb      	ldr	r3, [r7, #12]
    3704:	3301      	adds	r3, #1
    3706:	60fb      	str	r3, [r7, #12]
    3708:	68fb      	ldr	r3, [r7, #12]
    370a:	2b2e      	cmp	r3, #46	; 0x2e
    370c:	f77f af5a 	ble.w	35c4 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3710:	2300      	movs	r3, #0
    3712:	60fb      	str	r3, [r7, #12]
    3714:	e028      	b.n	3768 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    3716:	f240 035c 	movw	r3, #92	; 0x5c
    371a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    371e:	68fa      	ldr	r2, [r7, #12]
    3720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3724:	f640 120c 	movw	r2, #2316	; 0x90c
    3728:	f2c2 0200 	movt	r2, #8192	; 0x2000
    372c:	460b      	mov	r3, r1
    372e:	00db      	lsls	r3, r3, #3
    3730:	1a5b      	subs	r3, r3, r1
    3732:	00db      	lsls	r3, r3, #3
    3734:	4413      	add	r3, r2
    3736:	3304      	adds	r3, #4
    3738:	2201      	movs	r2, #1
    373a:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    373c:	f240 0390 	movw	r3, #144	; 0x90
    3740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3744:	68fa      	ldr	r2, [r7, #12]
    3746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    374a:	f640 120c 	movw	r2, #2316	; 0x90c
    374e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3752:	460b      	mov	r3, r1
    3754:	00db      	lsls	r3, r3, #3
    3756:	1a5b      	subs	r3, r3, r1
    3758:	00db      	lsls	r3, r3, #3
    375a:	4413      	add	r3, r2
    375c:	3304      	adds	r3, #4
    375e:	2203      	movs	r2, #3
    3760:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3762:	68fb      	ldr	r3, [r7, #12]
    3764:	3301      	adds	r3, #1
    3766:	60fb      	str	r3, [r7, #12]
    3768:	68fb      	ldr	r3, [r7, #12]
    376a:	2b0c      	cmp	r3, #12
    376c:	ddd3      	ble.n	3716 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    376e:	2300      	movs	r3, #0
    3770:	60fb      	str	r3, [r7, #12]
    3772:	e084      	b.n	387e <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3774:	f240 223c 	movw	r2, #572	; 0x23c
    3778:	f2c2 0200 	movt	r2, #8192	; 0x2000
    377c:	68f9      	ldr	r1, [r7, #12]
    377e:	460b      	mov	r3, r1
    3780:	005b      	lsls	r3, r3, #1
    3782:	440b      	add	r3, r1
    3784:	009b      	lsls	r3, r3, #2
    3786:	4413      	add	r3, r2
    3788:	3304      	adds	r3, #4
    378a:	681b      	ldr	r3, [r3, #0]
    378c:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    378e:	f240 223c 	movw	r2, #572	; 0x23c
    3792:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3796:	68f9      	ldr	r1, [r7, #12]
    3798:	460b      	mov	r3, r1
    379a:	005b      	lsls	r3, r3, #1
    379c:	440b      	add	r3, r1
    379e:	009b      	lsls	r3, r3, #2
    37a0:	4413      	add	r3, r2
    37a2:	3308      	adds	r3, #8
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    37a8:	f640 120c 	movw	r2, #2316	; 0x90c
    37ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b0:	68b9      	ldr	r1, [r7, #8]
    37b2:	460b      	mov	r3, r1
    37b4:	00db      	lsls	r3, r3, #3
    37b6:	1a5b      	subs	r3, r3, r1
    37b8:	00db      	lsls	r3, r3, #3
    37ba:	4413      	add	r3, r2
    37bc:	3310      	adds	r3, #16
    37be:	6818      	ldr	r0, [r3, #0]
    37c0:	f640 120c 	movw	r2, #2316	; 0x90c
    37c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c8:	68b9      	ldr	r1, [r7, #8]
    37ca:	460b      	mov	r3, r1
    37cc:	00db      	lsls	r3, r3, #3
    37ce:	1a5b      	subs	r3, r3, r1
    37d0:	005b      	lsls	r3, r3, #1
    37d2:	4403      	add	r3, r0
    37d4:	3306      	adds	r3, #6
    37d6:	009b      	lsls	r3, r3, #2
    37d8:	4413      	add	r3, r2
    37da:	687a      	ldr	r2, [r7, #4]
    37dc:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37de:	f640 120c 	movw	r2, #2316	; 0x90c
    37e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e6:	68b9      	ldr	r1, [r7, #8]
    37e8:	460b      	mov	r3, r1
    37ea:	00db      	lsls	r3, r3, #3
    37ec:	1a5b      	subs	r3, r3, r1
    37ee:	00db      	lsls	r3, r3, #3
    37f0:	4413      	add	r3, r2
    37f2:	3310      	adds	r3, #16
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	1c58      	adds	r0, r3, #1
    37f8:	f640 120c 	movw	r2, #2316	; 0x90c
    37fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3800:	68b9      	ldr	r1, [r7, #8]
    3802:	460b      	mov	r3, r1
    3804:	00db      	lsls	r3, r3, #3
    3806:	1a5b      	subs	r3, r3, r1
    3808:	00db      	lsls	r3, r3, #3
    380a:	4413      	add	r3, r2
    380c:	3310      	adds	r3, #16
    380e:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3810:	f640 120c 	movw	r2, #2316	; 0x90c
    3814:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3818:	6879      	ldr	r1, [r7, #4]
    381a:	460b      	mov	r3, r1
    381c:	00db      	lsls	r3, r3, #3
    381e:	1a5b      	subs	r3, r3, r1
    3820:	00db      	lsls	r3, r3, #3
    3822:	4413      	add	r3, r2
    3824:	330c      	adds	r3, #12
    3826:	6818      	ldr	r0, [r3, #0]
    3828:	f640 120c 	movw	r2, #2316	; 0x90c
    382c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3830:	6879      	ldr	r1, [r7, #4]
    3832:	460b      	mov	r3, r1
    3834:	00db      	lsls	r3, r3, #3
    3836:	1a5b      	subs	r3, r3, r1
    3838:	005b      	lsls	r3, r3, #1
    383a:	4403      	add	r3, r0
    383c:	3304      	adds	r3, #4
    383e:	009b      	lsls	r3, r3, #2
    3840:	4413      	add	r3, r2
    3842:	68ba      	ldr	r2, [r7, #8]
    3844:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3846:	f640 120c 	movw	r2, #2316	; 0x90c
    384a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    384e:	6879      	ldr	r1, [r7, #4]
    3850:	460b      	mov	r3, r1
    3852:	00db      	lsls	r3, r3, #3
    3854:	1a5b      	subs	r3, r3, r1
    3856:	00db      	lsls	r3, r3, #3
    3858:	4413      	add	r3, r2
    385a:	330c      	adds	r3, #12
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	1c58      	adds	r0, r3, #1
    3860:	f640 120c 	movw	r2, #2316	; 0x90c
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	6879      	ldr	r1, [r7, #4]
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	00db      	lsls	r3, r3, #3
    3872:	4413      	add	r3, r2
    3874:	330c      	adds	r3, #12
    3876:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	3301      	adds	r3, #1
    387c:	60fb      	str	r3, [r7, #12]
    387e:	f240 233c 	movw	r3, #572	; 0x23c
    3882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3886:	681a      	ldr	r2, [r3, #0]
    3888:	68fb      	ldr	r3, [r7, #12]
    388a:	429a      	cmp	r2, r3
    388c:	f73f af72 	bgt.w	3774 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    3890:	3714      	adds	r7, #20
    3892:	46bd      	mov	sp, r7
    3894:	f85d 7b04 	ldr.w	r7, [sp], #4
    3898:	4770      	bx	lr
    389a:	bf00      	nop

0000389c <vSensor>:

void vSensor( void * pvParameter )
{
    389c:	b580      	push	{r7, lr}
    389e:	b08c      	sub	sp, #48	; 0x30
    38a0:	af02      	add	r7, sp, #8
    38a2:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38a4:	f241 3354 	movw	r3, #4948	; 0x1354
    38a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ac:	685b      	ldr	r3, [r3, #4]
    38ae:	4618      	mov	r0, r3
    38b0:	2100      	movs	r1, #0
    38b2:	f04f 32ff 	mov.w	r2, #4294967295
    38b6:	2300      	movs	r3, #0
    38b8:	f000 fe94 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38bc:	e06f      	b.n	399e <vSensor+0x102>
        {
            if(boolFlag == 0)
    38be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38c0:	2b00      	cmp	r3, #0
    38c2:	d100      	bne.n	38c6 <vSensor+0x2a>
                continue;
    38c4:	e06b      	b.n	399e <vSensor+0x102>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38c6:	f7ff fddf 	bl	3488 <pxEventGenericReceive>
    38ca:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38cc:	6a38      	ldr	r0, [r7, #32]
    38ce:	f7ff f861 	bl	2994 <xEventGetpxDestination>
    38d2:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38d4:	6a38      	ldr	r0, [r7, #32]
    38d6:	f7ff f875 	bl	29c4 <xEventGetxData>
    38da:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38dc:	6a38      	ldr	r0, [r7, #32]
    38de:	f7ff f865 	bl	29ac <xEventGetxTag>
    38e2:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38e4:	f640 120c 	movw	r2, #2316	; 0x90c
    38e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38ec:	69f9      	ldr	r1, [r7, #28]
    38ee:	460b      	mov	r3, r1
    38f0:	00db      	lsls	r3, r3, #3
    38f2:	1a5b      	subs	r3, r3, r1
    38f4:	00db      	lsls	r3, r3, #3
    38f6:	4413      	add	r3, r2
    38f8:	3308      	adds	r3, #8
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	1c58      	adds	r0, r3, #1
    38fe:	f640 120c 	movw	r2, #2316	; 0x90c
    3902:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3906:	69f9      	ldr	r1, [r7, #28]
    3908:	460b      	mov	r3, r1
    390a:	00db      	lsls	r3, r3, #3
    390c:	1a5b      	subs	r3, r3, r1
    390e:	00db      	lsls	r3, r3, #3
    3910:	4413      	add	r3, r2
    3912:	3308      	adds	r3, #8
    3914:	6018      	str	r0, [r3, #0]
            xDeadline= xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3916:	f640 120c 	movw	r2, #2316	; 0x90c
    391a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    391e:	69f9      	ldr	r1, [r7, #28]
    3920:	460b      	mov	r3, r1
    3922:	00db      	lsls	r3, r3, #3
    3924:	1a5b      	subs	r3, r3, r1
    3926:	00db      	lsls	r3, r3, #3
    3928:	4413      	add	r3, r2
    392a:	332c      	adds	r3, #44	; 0x2c
    392c:	6818      	ldr	r0, [r3, #0]
    392e:	f640 120c 	movw	r2, #2316	; 0x90c
    3932:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3936:	69f9      	ldr	r1, [r7, #28]
    3938:	460b      	mov	r3, r1
    393a:	00db      	lsls	r3, r3, #3
    393c:	1a5b      	subs	r3, r3, r1
    393e:	00db      	lsls	r3, r3, #3
    3940:	4413      	add	r3, r2
    3942:	3308      	adds	r3, #8
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	fb03 f300 	mul.w	r3, r3, r0
    394a:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	685b      	ldr	r3, [r3, #4]
    3950:	3303      	adds	r3, #3
    3952:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3954:	f240 635c 	movw	r3, #1628	; 0x65c
    3958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    395c:	68fa      	ldr	r2, [r7, #12]
    395e:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3960:	69f8      	ldr	r0, [r7, #28]
    3962:	f013 fe9d 	bl	176a0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3966:	f001 fcf1 	bl	534c <xTaskGetTickCount>
    396a:	4603      	mov	r3, r0
    396c:	4618      	mov	r0, r3
    396e:	f013 fe97 	bl	176a0 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3972:	f640 120c 	movw	r2, #2316	; 0x90c
    3976:	f2c2 0200 	movt	r2, #8192	; 0x2000
    397a:	69f9      	ldr	r1, [r7, #28]
    397c:	460b      	mov	r3, r1
    397e:	00db      	lsls	r3, r3, #3
    3980:	1a5b      	subs	r3, r3, r1
    3982:	00db      	lsls	r3, r3, #3
    3984:	4413      	add	r3, r2
    3986:	3328      	adds	r3, #40	; 0x28
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	69b8      	ldr	r0, [r7, #24]
    398c:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    398e:	69bb      	ldr	r3, [r7, #24]
    3990:	9300      	str	r3, [sp, #0]
    3992:	6a38      	ldr	r0, [r7, #32]
    3994:	69f9      	ldr	r1, [r7, #28]
    3996:	693a      	ldr	r2, [r7, #16]
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	f7ff fd93 	bl	34c4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    399e:	f7fe ffb3 	bl	2908 <xIsERLNull>
    39a2:	6278      	str	r0, [r7, #36]	; 0x24
    39a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    39aa:	d188      	bne.n	38be <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    39ac:	f241 3354 	movw	r3, #4948	; 0x1354
    39b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	4618      	mov	r0, r3
    39b8:	2100      	movs	r1, #0
    39ba:	2200      	movs	r2, #0
    39bc:	2300      	movs	r3, #0
    39be:	f000 fd4b 	bl	4458 <xQueueGenericSend>
    }
    39c2:	e76f      	b.n	38a4 <vSensor+0x8>

000039c4 <vServant>:
}

void vServant( void * pvParameter )
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b08c      	sub	sp, #48	; 0x30
    39c8:	af02      	add	r7, sp, #8
    39ca:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    39cc:	f241 3354 	movw	r3, #4948	; 0x1354
    39d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d4:	689b      	ldr	r3, [r3, #8]
    39d6:	4618      	mov	r0, r3
    39d8:	2100      	movs	r1, #0
    39da:	f04f 32ff 	mov.w	r2, #4294967295
    39de:	2300      	movs	r3, #0
    39e0:	f000 fe00 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39e4:	e098      	b.n	3b18 <vServant+0x154>
        {
            if(boolFlag == 0)
    39e6:	6a3b      	ldr	r3, [r7, #32]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d100      	bne.n	39ee <vServant+0x2a>
                continue;
    39ec:	e094      	b.n	3b18 <vServant+0x154>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39ee:	f7ff fd4b 	bl	3488 <pxEventGenericReceive>
    39f2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39f4:	69f8      	ldr	r0, [r7, #28]
    39f6:	f7fe ffcd 	bl	2994 <xEventGetpxDestination>
    39fa:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39fc:	69f8      	ldr	r0, [r7, #28]
    39fe:	f7fe ffe1 	bl	29c4 <xEventGetxData>
    3a02:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    3a04:	69f8      	ldr	r0, [r7, #28]
    3a06:	f7fe ffd1 	bl	29ac <xEventGetxTag>
    3a0a:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    3a0c:	f640 120c 	movw	r2, #2316	; 0x90c
    3a10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a14:	69b9      	ldr	r1, [r7, #24]
    3a16:	460b      	mov	r3, r1
    3a18:	00db      	lsls	r3, r3, #3
    3a1a:	1a5b      	subs	r3, r3, r1
    3a1c:	00db      	lsls	r3, r3, #3
    3a1e:	4413      	add	r3, r2
    3a20:	3308      	adds	r3, #8
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	1c58      	adds	r0, r3, #1
    3a26:	f640 120c 	movw	r2, #2316	; 0x90c
    3a2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a2e:	69b9      	ldr	r1, [r7, #24]
    3a30:	460b      	mov	r3, r1
    3a32:	00db      	lsls	r3, r3, #3
    3a34:	1a5b      	subs	r3, r3, r1
    3a36:	00db      	lsls	r3, r3, #3
    3a38:	4413      	add	r3, r2
    3a3a:	3308      	adds	r3, #8
    3a3c:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3a3e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a46:	69b9      	ldr	r1, [r7, #24]
    3a48:	460b      	mov	r3, r1
    3a4a:	00db      	lsls	r3, r3, #3
    3a4c:	1a5b      	subs	r3, r3, r1
    3a4e:	00db      	lsls	r3, r3, #3
    3a50:	4413      	add	r3, r2
    3a52:	332c      	adds	r3, #44	; 0x2c
    3a54:	6818      	ldr	r0, [r3, #0]
    3a56:	f640 120c 	movw	r2, #2316	; 0x90c
    3a5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a5e:	69b9      	ldr	r1, [r7, #24]
    3a60:	460b      	mov	r3, r1
    3a62:	00db      	lsls	r3, r3, #3
    3a64:	1a5b      	subs	r3, r3, r1
    3a66:	00db      	lsls	r3, r3, #3
    3a68:	4413      	add	r3, r2
    3a6a:	3308      	adds	r3, #8
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	fb03 f300 	mul.w	r3, r3, r0
    3a72:	60fb      	str	r3, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a74:	f640 120c 	movw	r2, #2316	; 0x90c
    3a78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7c:	69b9      	ldr	r1, [r7, #24]
    3a7e:	460b      	mov	r3, r1
    3a80:	00db      	lsls	r3, r3, #3
    3a82:	1a5b      	subs	r3, r3, r1
    3a84:	00db      	lsls	r3, r3, #3
    3a86:	4413      	add	r3, r2
    3a88:	331c      	adds	r3, #28
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a8e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a96:	68b9      	ldr	r1, [r7, #8]
    3a98:	460b      	mov	r3, r1
    3a9a:	00db      	lsls	r3, r3, #3
    3a9c:	1a5b      	subs	r3, r3, r1
    3a9e:	00db      	lsls	r3, r3, #3
    3aa0:	4413      	add	r3, r2
    3aa2:	3304      	adds	r3, #4
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	2b02      	cmp	r3, #2
    3aa8:	d002      	beq.n	3ab0 <vServant+0xec>
    3aaa:	2b03      	cmp	r3, #3
    3aac:	d011      	beq.n	3ad2 <vServant+0x10e>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3aae:	e014      	b.n	3ada <vServant+0x116>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3ab0:	693b      	ldr	r3, [r7, #16]
    3ab2:	6858      	ldr	r0, [r3, #4]
    3ab4:	f640 120c 	movw	r2, #2316	; 0x90c
    3ab8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3abc:	69b9      	ldr	r1, [r7, #24]
    3abe:	460b      	mov	r3, r1
    3ac0:	00db      	lsls	r3, r3, #3
    3ac2:	1a5b      	subs	r3, r3, r1
    3ac4:	00db      	lsls	r3, r3, #3
    3ac6:	4413      	add	r3, r2
    3ac8:	3324      	adds	r3, #36	; 0x24
    3aca:	681b      	ldr	r3, [r3, #0]
    3acc:	4403      	add	r3, r0
    3ace:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ad0:	e003      	b.n	3ada <vServant+0x116>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3ad2:	68fb      	ldr	r3, [r7, #12]
    3ad4:	3b03      	subs	r3, #3
    3ad6:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ad8:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3ada:	69b8      	ldr	r0, [r7, #24]
    3adc:	f013 fde0 	bl	176a0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3ae0:	f001 fc34 	bl	534c <xTaskGetTickCount>
    3ae4:	4603      	mov	r3, r0
    3ae6:	4618      	mov	r0, r3
    3ae8:	f013 fdda 	bl	176a0 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3aec:	f640 120c 	movw	r2, #2316	; 0x90c
    3af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af4:	69b9      	ldr	r1, [r7, #24]
    3af6:	460b      	mov	r3, r1
    3af8:	00db      	lsls	r3, r3, #3
    3afa:	1a5b      	subs	r3, r3, r1
    3afc:	00db      	lsls	r3, r3, #3
    3afe:	4413      	add	r3, r2
    3b00:	3328      	adds	r3, #40	; 0x28
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	6978      	ldr	r0, [r7, #20]
    3b06:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3b08:	697b      	ldr	r3, [r7, #20]
    3b0a:	9300      	str	r3, [sp, #0]
    3b0c:	69f8      	ldr	r0, [r7, #28]
    3b0e:	69b9      	ldr	r1, [r7, #24]
    3b10:	68fa      	ldr	r2, [r7, #12]
    3b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b14:	f7ff fcd6 	bl	34c4 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b18:	f7fe fef6 	bl	2908 <xIsERLNull>
    3b1c:	6238      	str	r0, [r7, #32]
    3b1e:	6a3b      	ldr	r3, [r7, #32]
    3b20:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b24:	f47f af5f 	bne.w	39e6 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b28:	f241 3354 	movw	r3, #4948	; 0x1354
    3b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	4618      	mov	r0, r3
    3b34:	2100      	movs	r1, #0
    3b36:	2200      	movs	r2, #0
    3b38:	2300      	movs	r3, #0
    3b3a:	f000 fc8d 	bl	4458 <xQueueGenericSend>
    }
    3b3e:	e745      	b.n	39cc <vServant+0x8>

00003b40 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b08c      	sub	sp, #48	; 0x30
    3b44:	af02      	add	r7, sp, #8
    3b46:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b48:	f241 3354 	movw	r3, #4948	; 0x1354
    3b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b50:	68db      	ldr	r3, [r3, #12]
    3b52:	4618      	mov	r0, r3
    3b54:	2100      	movs	r1, #0
    3b56:	f04f 32ff 	mov.w	r2, #4294967295
    3b5a:	2300      	movs	r3, #0
    3b5c:	f000 fd42 	bl	45e4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b60:	e069      	b.n	3c36 <vActuator+0xf6>
        {
            if(boolFlag == 0)
    3b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b64:	2b00      	cmp	r3, #0
    3b66:	d100      	bne.n	3b6a <vActuator+0x2a>
                continue;
    3b68:	e065      	b.n	3c36 <vActuator+0xf6>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b6a:	f7ff fc8d 	bl	3488 <pxEventGenericReceive>
    3b6e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b70:	6a38      	ldr	r0, [r7, #32]
    3b72:	f7fe ff0f 	bl	2994 <xEventGetpxDestination>
    3b76:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b78:	6a38      	ldr	r0, [r7, #32]
    3b7a:	f7fe ff23 	bl	29c4 <xEventGetxData>
    3b7e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b80:	6a38      	ldr	r0, [r7, #32]
    3b82:	f7fe ff13 	bl	29ac <xEventGetxTag>
    3b86:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3b88:	f640 120c 	movw	r2, #2316	; 0x90c
    3b8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b90:	69f9      	ldr	r1, [r7, #28]
    3b92:	460b      	mov	r3, r1
    3b94:	00db      	lsls	r3, r3, #3
    3b96:	1a5b      	subs	r3, r3, r1
    3b98:	00db      	lsls	r3, r3, #3
    3b9a:	4413      	add	r3, r2
    3b9c:	3308      	adds	r3, #8
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	1c58      	adds	r0, r3, #1
    3ba2:	f640 120c 	movw	r2, #2316	; 0x90c
    3ba6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3baa:	69f9      	ldr	r1, [r7, #28]
    3bac:	460b      	mov	r3, r1
    3bae:	00db      	lsls	r3, r3, #3
    3bb0:	1a5b      	subs	r3, r3, r1
    3bb2:	00db      	lsls	r3, r3, #3
    3bb4:	4413      	add	r3, r2
    3bb6:	3308      	adds	r3, #8
    3bb8:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3bba:	f640 120c 	movw	r2, #2316	; 0x90c
    3bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bc2:	69f9      	ldr	r1, [r7, #28]
    3bc4:	460b      	mov	r3, r1
    3bc6:	00db      	lsls	r3, r3, #3
    3bc8:	1a5b      	subs	r3, r3, r1
    3bca:	00db      	lsls	r3, r3, #3
    3bcc:	4413      	add	r3, r2
    3bce:	332c      	adds	r3, #44	; 0x2c
    3bd0:	6818      	ldr	r0, [r3, #0]
    3bd2:	f640 120c 	movw	r2, #2316	; 0x90c
    3bd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bda:	69f9      	ldr	r1, [r7, #28]
    3bdc:	460b      	mov	r3, r1
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	1a5b      	subs	r3, r3, r1
    3be2:	00db      	lsls	r3, r3, #3
    3be4:	4413      	add	r3, r2
    3be6:	3308      	adds	r3, #8
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	fb03 f300 	mul.w	r3, r3, r0
    3bee:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3bf0:	697b      	ldr	r3, [r7, #20]
    3bf2:	685b      	ldr	r3, [r3, #4]
    3bf4:	3303      	adds	r3, #3
    3bf6:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3bf8:	69f8      	ldr	r0, [r7, #28]
    3bfa:	f013 fd51 	bl	176a0 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3bfe:	f001 fba5 	bl	534c <xTaskGetTickCount>
    3c02:	4603      	mov	r3, r0
    3c04:	4618      	mov	r0, r3
    3c06:	f013 fd4b 	bl	176a0 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3c0a:	f640 120c 	movw	r2, #2316	; 0x90c
    3c0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c12:	69f9      	ldr	r1, [r7, #28]
    3c14:	460b      	mov	r3, r1
    3c16:	00db      	lsls	r3, r3, #3
    3c18:	1a5b      	subs	r3, r3, r1
    3c1a:	00db      	lsls	r3, r3, #3
    3c1c:	4413      	add	r3, r2
    3c1e:	3328      	adds	r3, #40	; 0x28
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	69b8      	ldr	r0, [r7, #24]
    3c24:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3c26:	69bb      	ldr	r3, [r7, #24]
    3c28:	9300      	str	r3, [sp, #0]
    3c2a:	6a38      	ldr	r0, [r7, #32]
    3c2c:	69f9      	ldr	r1, [r7, #28]
    3c2e:	693a      	ldr	r2, [r7, #16]
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	f7ff fc47 	bl	34c4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c36:	f7fe fe67 	bl	2908 <xIsERLNull>
    3c3a:	6278      	str	r0, [r7, #36]	; 0x24
    3c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c42:	d18e      	bne.n	3b62 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3c44:	f241 3354 	movw	r3, #4948	; 0x1354
    3c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	4618      	mov	r0, r3
    3c50:	2100      	movs	r1, #0
    3c52:	2200      	movs	r2, #0
    3c54:	2300      	movs	r3, #0
    3c56:	f000 fbff 	bl	4458 <xQueueGenericSend>
    }
    3c5a:	e775      	b.n	3b48 <vActuator+0x8>

00003c5c <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c64:	f241 3354 	movw	r3, #4948	; 0x1354
    3c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	4618      	mov	r0, r3
    3c70:	2100      	movs	r1, #0
    3c72:	f04f 32ff 	mov.w	r2, #4294967295
    3c76:	2300      	movs	r3, #0
    3c78:	f000 fcb4 	bl	45e4 <xQueueGenericReceive>
        //vPrintString("Actuator\n\r");

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c7c:	f7ff f864 	bl	2d48 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c80:	f7ff f98c 	bl	2f9c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c84:	f7ff fb84 	bl	3390 <xEventGenericSerialize>
    3c88:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c8a:	68fb      	ldr	r3, [r7, #12]
    3c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c90:	d036      	beq.n	3d00 <vR_Servant+0xa4>
        {
            switch(xContexts[pxDestination].xType)
    3c92:	f640 120c 	movw	r2, #2316	; 0x90c
    3c96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c9a:	68f9      	ldr	r1, [r7, #12]
    3c9c:	460b      	mov	r3, r1
    3c9e:	00db      	lsls	r3, r3, #3
    3ca0:	1a5b      	subs	r3, r3, r1
    3ca2:	00db      	lsls	r3, r3, #3
    3ca4:	4413      	add	r3, r2
    3ca6:	3304      	adds	r3, #4
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	2b02      	cmp	r3, #2
    3cac:	d010      	beq.n	3cd0 <vR_Servant+0x74>
    3cae:	2b03      	cmp	r3, #3
    3cb0:	d01a      	beq.n	3ce8 <vR_Servant+0x8c>
    3cb2:	2b01      	cmp	r3, #1
    3cb4:	d000      	beq.n	3cb8 <vR_Servant+0x5c>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3cb6:	e023      	b.n	3d00 <vR_Servant+0xa4>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3cb8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc0:	685b      	ldr	r3, [r3, #4]
    3cc2:	4618      	mov	r0, r3
    3cc4:	2100      	movs	r1, #0
    3cc6:	2200      	movs	r2, #0
    3cc8:	2300      	movs	r3, #0
    3cca:	f000 fbc5 	bl	4458 <xQueueGenericSend>
                    break;
    3cce:	e017      	b.n	3d00 <vR_Servant+0xa4>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3cd0:	f241 3354 	movw	r3, #4948	; 0x1354
    3cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd8:	689b      	ldr	r3, [r3, #8]
    3cda:	4618      	mov	r0, r3
    3cdc:	2100      	movs	r1, #0
    3cde:	2200      	movs	r2, #0
    3ce0:	2300      	movs	r3, #0
    3ce2:	f000 fbb9 	bl	4458 <xQueueGenericSend>
                    break;
    3ce6:	e00b      	b.n	3d00 <vR_Servant+0xa4>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3ce8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf0:	68db      	ldr	r3, [r3, #12]
    3cf2:	4618      	mov	r0, r3
    3cf4:	2100      	movs	r1, #0
    3cf6:	2200      	movs	r2, #0
    3cf8:	2300      	movs	r3, #0
    3cfa:	f000 fbad 	bl	4458 <xQueueGenericSend>
                    break;
    3cfe:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3d00:	e7b0      	b.n	3c64 <vR_Servant+0x8>
    3d02:	bf00      	nop

00003d04 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3d04:	b480      	push	{r7}
    3d06:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3d08:	f242 032f 	movw	r3, #8239	; 0x202f
    3d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d10:	2200      	movs	r2, #0
    3d12:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3d14:	f242 032e 	movw	r3, #8238	; 0x202e
    3d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1c:	2201      	movs	r2, #1
    3d1e:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3d20:	f242 0325 	movw	r3, #8229	; 0x2025
    3d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d28:	2207      	movs	r2, #7
    3d2a:	701a      	strb	r2, [r3, #0]
}
    3d2c:	46bd      	mov	sp, r7
    3d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d32:	4770      	bx	lr

00003d34 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3d34:	b580      	push	{r7, lr}
    3d36:	af00      	add	r7, sp, #0
    timer_init();
    3d38:	f7ff ffe4 	bl	3d04 <timer_init>
    modem_init();
    3d3c:	f00d f9a4 	bl	11088 <modem_init>
    adc_init();
    3d40:	f00d fcee 	bl	11720 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3d44:	f00d fc60 	bl	11608 <spi_init>
    link_fbw_init();
    3d48:	f00d fabc 	bl	112c4 <link_fbw_init>
    gps_init();
    3d4c:	f00d fd98 	bl	11880 <gps_init>
    nav_init();
    3d50:	f011 f890 	bl	14e74 <nav_init>
    ir_init();
    3d54:	f00e f83c 	bl	11dd0 <ir_init>
    estimator_init();
    3d58:	f011 fa72 	bl	15240 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	bf00      	nop

00003d60 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d68:	370c      	adds	r7, #12
    3d6a:	46bd      	mov	sp, r7
    3d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d7c:	f012 fa3c 	bl	161f8 <last_radio_from_ppm>
}
    3d80:	3708      	adds	r7, #8
    3d82:	46bd      	mov	sp, r7
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop

00003d88 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
}
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop

00003db0 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
}
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop

00003dc4 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3dc4:	b580      	push	{r7, lr}
    3dc6:	b082      	sub	sp, #8
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3dcc:	f012 fdce 	bl	1696c <to_autopilot_from_last_radio>
}
    3dd0:	3708      	adds	r7, #8
    3dd2:	46bd      	mov	sp, r7
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	bf00      	nop

00003dd8 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3de0:	f012 fd02 	bl	167e8 <spi_reset>
}
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop

00003dec <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3dec:	b480      	push	{r7}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
}
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop

00003e00 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
}
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop

00003e14 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3e1c:	f012 ff4a 	bl	16cb4 <check_mega128_values_task>
}
    3e20:	3708      	adds	r7, #8
    3e22:	46bd      	mov	sp, r7
    3e24:	bd80      	pop	{r7, pc}
    3e26:	bf00      	nop

00003e28 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
}
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop

00003e50 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e58:	f013 f820 	bl	16e9c <servo_transmit>
}
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop

00003e64 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e64:	b480      	push	{r7}
    3e66:	b083      	sub	sp, #12
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
}
    3e6c:	370c      	adds	r7, #12
    3e6e:	46bd      	mov	sp, r7
    3e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop

00003e78 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
}
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e94:	f012 fee8 	bl	16c68 <check_failsafe_task>
}
    3e98:	3708      	adds	r7, #8
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	bf00      	nop

00003ea0 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3ea0:	b480      	push	{r7}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
}
    3ea8:	370c      	adds	r7, #12
    3eaa:	46bd      	mov	sp, r7
    3eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop

00003eb4 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
}
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3ed0:	f009 f91c 	bl	d10c <radio_control_task>
}
    3ed4:	3708      	adds	r7, #8
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	bf00      	nop

00003edc <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3ee4:	f00d ffcc 	bl	11e80 <ir_gain_calib>
}
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop

00003ef0 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
}
    3ef8:	370c      	adds	r7, #12
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
}
    3f0c:	370c      	adds	r7, #12
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3f20:	f00d ff70 	bl	11e04 <ir_update>
}
    3f24:	3708      	adds	r7, #8
    3f26:	46bd      	mov	sp, r7
    3f28:	bd80      	pop	{r7, pc}
    3f2a:	bf00      	nop

00003f2c <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3f34:	f011 f9ee 	bl	15314 <estimator_update_state_infrared>
}
    3f38:	3708      	adds	r7, #8
    3f3a:	46bd      	mov	sp, r7
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	bf00      	nop

00003f40 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3f48:	f00d ffca 	bl	11ee0 <roll_pitch_pid_run>
}
    3f4c:	3708      	adds	r7, #8
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	bf00      	nop

00003f54 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f54:	b480      	push	{r7}
    3f56:	b083      	sub	sp, #12
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
}
    3f5c:	370c      	adds	r7, #12
    3f5e:	46bd      	mov	sp, r7
    3f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop

00003f68 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f68:	b480      	push	{r7}
    3f6a:	b083      	sub	sp, #12
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
}
    3f70:	370c      	adds	r7, #12
    3f72:	46bd      	mov	sp, r7
    3f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop

00003f7c <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f84:	f00d f9b0 	bl	112e8 <link_fbw_send>
}
    3f88:	3708      	adds	r7, #8
    3f8a:	46bd      	mov	sp, r7
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	bf00      	nop

00003f90 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f90:	b480      	push	{r7}
    3f92:	b083      	sub	sp, #12
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
    3f98:	370c      	adds	r7, #12
    3f9a:	46bd      	mov	sp, r7
    3f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa0:	4770      	bx	lr
    3fa2:	bf00      	nop

00003fa4 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3fa4:	b480      	push	{r7}
    3fa6:	b083      	sub	sp, #12
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
}
    3fac:	370c      	adds	r7, #12
    3fae:	46bd      	mov	sp, r7
    3fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop

00003fb8 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3fc0:	f00d fc6a 	bl	11898 <parse_gps_msg>
}
    3fc4:	3708      	adds	r7, #8
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	bf00      	nop

00003fcc <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3fd4:	f00a fe88 	bl	ece8 <send_gps_pos>
    send_radIR();
    3fd8:	f00c f84c 	bl	10074 <send_radIR>
    send_takeOff();
    3fdc:	f00c fe44 	bl	10c68 <send_takeOff>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3ffc:	b480      	push	{r7}
    3ffe:	b083      	sub	sp, #12
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
}
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr
    400e:	bf00      	nop

00004010 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    4010:	b580      	push	{r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    4018:	f010 fefe 	bl	14e18 <nav_home>
}
    401c:	3708      	adds	r7, #8
    401e:	46bd      	mov	sp, r7
    4020:	bd80      	pop	{r7, pc}
    4022:	bf00      	nop

00004024 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    402c:	f010 ff1a 	bl	14e64 <nav_update>
}
    4030:	3708      	adds	r7, #8
    4032:	46bd      	mov	sp, r7
    4034:	bd80      	pop	{r7, pc}
    4036:	bf00      	nop

00004038 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    4038:	b580      	push	{r7, lr}
    403a:	b082      	sub	sp, #8
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    4040:	f00e f83a 	bl	120b8 <course_pid_run>
}
    4044:	3708      	adds	r7, #8
    4046:	46bd      	mov	sp, r7
    4048:	bd80      	pop	{r7, pc}
    404a:	bf00      	nop

0000404c <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    4060:	b480      	push	{r7}
    4062:	b083      	sub	sp, #12
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
}
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr
    4072:	bf00      	nop

00004074 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    4074:	b580      	push	{r7, lr}
    4076:	b082      	sub	sp, #8
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    407c:	f00e faa4 	bl	125c8 <altitude_pid_run>
}
    4080:	3708      	adds	r7, #8
    4082:	46bd      	mov	sp, r7
    4084:	bd80      	pop	{r7, pc}
    4086:	bf00      	nop

00004088 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4088:	b480      	push	{r7}
    408a:	b083      	sub	sp, #12
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	370c      	adds	r7, #12
    4092:	46bd      	mov	sp, r7
    4094:	f85d 7b04 	ldr.w	r7, [sp], #4
    4098:	4770      	bx	lr
    409a:	bf00      	nop

0000409c <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    409c:	b480      	push	{r7}
    409e:	b083      	sub	sp, #12
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
}
    40a4:	370c      	adds	r7, #12
    40a6:	46bd      	mov	sp, r7
    40a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ac:	4770      	bx	lr
    40ae:	bf00      	nop

000040b0 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
    40b6:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    40b8:	f00e f8b6 	bl	12228 <climb_pid_run>
}
    40bc:	3708      	adds	r7, #8
    40be:	46bd      	mov	sp, r7
    40c0:	bd80      	pop	{r7, pc}
    40c2:	bf00      	nop

000040c4 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    40c4:	b480      	push	{r7}
    40c6:	b083      	sub	sp, #12
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	370c      	adds	r7, #12
    40ce:	46bd      	mov	sp, r7
    40d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop

000040d8 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
}
    40e0:	370c      	adds	r7, #12
    40e2:	46bd      	mov	sp, r7
    40e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e8:	4770      	bx	lr
    40ea:	bf00      	nop

000040ec <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40f4:	f003 fa82 	bl	75fc <send_boot>
    send_attitude();
    40f8:	f004 fa58 	bl	85ac <send_attitude>
    send_adc();
    40fc:	f004 ff52 	bl	8fa4 <send_adc>
    send_settings();
    4100:	f005 f9e0 	bl	94c4 <send_settings>
    send_desired();
    4104:	f005 fdea 	bl	9cdc <send_desired>
    send_bat();
    4108:	f006 fd20 	bl	ab4c <send_bat>
    send_climb();
    410c:	f007 f8dc 	bl	b2c8 <send_climb>
    send_mode();
    4110:	f007 fe54 	bl	bdbc <send_mode>
    send_debug();
    4114:	f008 f92e 	bl	c374 <send_debug>
    send_nav_ref();
    4118:	f008 fc0a 	bl	c930 <send_nav_ref>
}
    411c:	3708      	adds	r7, #8
    411e:	46bd      	mov	sp, r7
    4120:	bd80      	pop	{r7, pc}
    4122:	bf00      	nop

00004124 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
    412c:	370c      	adds	r7, #12
    412e:	46bd      	mov	sp, r7
    4130:	f85d 7b04 	ldr.w	r7, [sp], #4
    4134:	4770      	bx	lr
    4136:	bf00      	nop

00004138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	f103 0208 	add.w	r2, r3, #8
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	f04f 32ff 	mov.w	r2, #4294967295
    4150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	f103 0208 	add.w	r2, r3, #8
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	f103 0208 	add.w	r2, r3, #8
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	2200      	movs	r2, #0
    416a:	601a      	str	r2, [r3, #0]
}
    416c:	370c      	adds	r7, #12
    416e:	46bd      	mov	sp, r7
    4170:	f85d 7b04 	ldr.w	r7, [sp], #4
    4174:	4770      	bx	lr
    4176:	bf00      	nop

00004178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2200      	movs	r2, #0
    4184:	611a      	str	r2, [r3, #16]
}
    4186:	370c      	adds	r7, #12
    4188:	46bd      	mov	sp, r7
    418a:	f85d 7b04 	ldr.w	r7, [sp], #4
    418e:	4770      	bx	lr

00004190 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4190:	b480      	push	{r7}
    4192:	b085      	sub	sp, #20
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
    4198:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	685b      	ldr	r3, [r3, #4]
    419e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	685a      	ldr	r2, [r3, #4]
    41a4:	683b      	ldr	r3, [r7, #0]
    41a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	685a      	ldr	r2, [r3, #4]
    41ac:	683b      	ldr	r3, [r7, #0]
    41ae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41b0:	68fb      	ldr	r3, [r7, #12]
    41b2:	685b      	ldr	r3, [r3, #4]
    41b4:	683a      	ldr	r2, [r7, #0]
    41b6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	683a      	ldr	r2, [r7, #0]
    41bc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	683a      	ldr	r2, [r7, #0]
    41c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41c4:	683b      	ldr	r3, [r7, #0]
    41c6:	687a      	ldr	r2, [r7, #4]
    41c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	1c5a      	adds	r2, r3, #1
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	601a      	str	r2, [r3, #0]
}
    41d4:	3714      	adds	r7, #20
    41d6:	46bd      	mov	sp, r7
    41d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41dc:	4770      	bx	lr
    41de:	bf00      	nop

000041e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    41e0:	b480      	push	{r7}
    41e2:	b085      	sub	sp, #20
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    41ea:	683b      	ldr	r3, [r7, #0]
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    41f0:	68bb      	ldr	r3, [r7, #8]
    41f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    41f6:	d103      	bne.n	4200 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	691b      	ldr	r3, [r3, #16]
    41fc:	60fb      	str	r3, [r7, #12]
    41fe:	e00c      	b.n	421a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	3308      	adds	r3, #8
    4204:	60fb      	str	r3, [r7, #12]
    4206:	e002      	b.n	420e <vListInsert+0x2e>
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	685b      	ldr	r3, [r3, #4]
    420c:	60fb      	str	r3, [r7, #12]
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	685b      	ldr	r3, [r3, #4]
    4212:	681a      	ldr	r2, [r3, #0]
    4214:	68bb      	ldr	r3, [r7, #8]
    4216:	429a      	cmp	r2, r3
    4218:	d9f6      	bls.n	4208 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	685a      	ldr	r2, [r3, #4]
    421e:	683b      	ldr	r3, [r7, #0]
    4220:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4222:	683b      	ldr	r3, [r7, #0]
    4224:	685b      	ldr	r3, [r3, #4]
    4226:	683a      	ldr	r2, [r7, #0]
    4228:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    422a:	683b      	ldr	r3, [r7, #0]
    422c:	68fa      	ldr	r2, [r7, #12]
    422e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4230:	68fb      	ldr	r3, [r7, #12]
    4232:	683a      	ldr	r2, [r7, #0]
    4234:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	687a      	ldr	r2, [r7, #4]
    423a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	1c5a      	adds	r2, r3, #1
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	601a      	str	r2, [r3, #0]
}
    4246:	3714      	adds	r7, #20
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4250:	b480      	push	{r7}
    4252:	b085      	sub	sp, #20
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	685b      	ldr	r3, [r3, #4]
    425c:	687a      	ldr	r2, [r7, #4]
    425e:	6892      	ldr	r2, [r2, #8]
    4260:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	689b      	ldr	r3, [r3, #8]
    4266:	687a      	ldr	r2, [r7, #4]
    4268:	6852      	ldr	r2, [r2, #4]
    426a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	691b      	ldr	r3, [r3, #16]
    4270:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	685a      	ldr	r2, [r3, #4]
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	429a      	cmp	r2, r3
    427a:	d103      	bne.n	4284 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	689a      	ldr	r2, [r3, #8]
    4280:	68fb      	ldr	r3, [r7, #12]
    4282:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	2200      	movs	r2, #0
    4288:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    428a:	68fb      	ldr	r3, [r7, #12]
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	1e5a      	subs	r2, r3, #1
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	601a      	str	r2, [r3, #0]
}
    4294:	3714      	adds	r7, #20
    4296:	46bd      	mov	sp, r7
    4298:	f85d 7b04 	ldr.w	r7, [sp], #4
    429c:	4770      	bx	lr
    429e:	bf00      	nop

000042a0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b084      	sub	sp, #16
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
    42a8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    42aa:	2301      	movs	r3, #1
    42ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    42ae:	683b      	ldr	r3, [r7, #0]
    42b0:	2b01      	cmp	r3, #1
    42b2:	d00b      	beq.n	42cc <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42b8:	2b00      	cmp	r3, #0
    42ba:	d001      	beq.n	42c0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    42bc:	2300      	movs	r3, #0
    42be:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	691b      	ldr	r3, [r3, #16]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d001      	beq.n	42cc <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    42c8:	2300      	movs	r3, #0
    42ca:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	2b01      	cmp	r3, #1
    42d0:	d12f      	bne.n	4332 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	681a      	ldr	r2, [r3, #0]
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42da:	6879      	ldr	r1, [r7, #4]
    42dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42de:	fb01 f303 	mul.w	r3, r1, r3
    42e2:	441a      	add	r2, r3
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	2200      	movs	r2, #0
    42ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	681a      	ldr	r2, [r3, #0]
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681a      	ldr	r2, [r3, #0]
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42fe:	3b01      	subs	r3, #1
    4300:	6879      	ldr	r1, [r7, #4]
    4302:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4304:	fb01 f303 	mul.w	r3, r1, r3
    4308:	441a      	add	r2, r3
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	f04f 32ff 	mov.w	r2, #4294967295
    4314:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	f04f 32ff 	mov.w	r2, #4294967295
    431c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	3310      	adds	r3, #16
    4322:	4618      	mov	r0, r3
    4324:	f7ff ff08 	bl	4138 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	3324      	adds	r3, #36	; 0x24
    432c:	4618      	mov	r0, r3
    432e:	f7ff ff03 	bl	4138 <vListInitialise>
	}

	return xReturn;
    4332:	68fb      	ldr	r3, [r7, #12]
}
    4334:	4618      	mov	r0, r3
    4336:	3710      	adds	r7, #16
    4338:	46bd      	mov	sp, r7
    433a:	bd80      	pop	{r7, pc}

0000433c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    433c:	b580      	push	{r7, lr}
    433e:	b088      	sub	sp, #32
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	60b9      	str	r1, [r7, #8]
    4346:	4613      	mov	r3, r2
    4348:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    434a:	2300      	movs	r3, #0
    434c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	2b00      	cmp	r3, #0
    4352:	d026      	beq.n	43a2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4354:	204c      	movs	r0, #76	; 0x4c
    4356:	f001 fda7 	bl	5ea8 <pvPortMalloc>
    435a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    435c:	69bb      	ldr	r3, [r7, #24]
    435e:	2b00      	cmp	r3, #0
    4360:	d01f      	beq.n	43a2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	68ba      	ldr	r2, [r7, #8]
    4366:	fb02 f303 	mul.w	r3, r2, r3
    436a:	3301      	adds	r3, #1
    436c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    436e:	6978      	ldr	r0, [r7, #20]
    4370:	f001 fd9a 	bl	5ea8 <pvPortMalloc>
    4374:	4602      	mov	r2, r0
    4376:	69bb      	ldr	r3, [r7, #24]
    4378:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    437a:	69bb      	ldr	r3, [r7, #24]
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	2b00      	cmp	r3, #0
    4380:	d00c      	beq.n	439c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4382:	69bb      	ldr	r3, [r7, #24]
    4384:	68fa      	ldr	r2, [r7, #12]
    4386:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4388:	69bb      	ldr	r3, [r7, #24]
    438a:	68ba      	ldr	r2, [r7, #8]
    438c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    438e:	69b8      	ldr	r0, [r7, #24]
    4390:	2101      	movs	r1, #1
    4392:	f7ff ff85 	bl	42a0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4396:	69bb      	ldr	r3, [r7, #24]
    4398:	61fb      	str	r3, [r7, #28]
    439a:	e002      	b.n	43a2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    439c:	69b8      	ldr	r0, [r7, #24]
    439e:	f001 fe47 	bl	6030 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    43a2:	69fb      	ldr	r3, [r7, #28]
}
    43a4:	4618      	mov	r0, r3
    43a6:	3720      	adds	r7, #32
    43a8:	46bd      	mov	sp, r7
    43aa:	bd80      	pop	{r7, pc}

000043ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    43ac:	b580      	push	{r7, lr}
    43ae:	b084      	sub	sp, #16
    43b0:	af00      	add	r7, sp, #0
    43b2:	4603      	mov	r3, r0
    43b4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43b6:	204c      	movs	r0, #76	; 0x4c
    43b8:	f001 fd76 	bl	5ea8 <pvPortMalloc>
    43bc:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d02c      	beq.n	441e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    43c4:	68fb      	ldr	r3, [r7, #12]
    43c6:	2200      	movs	r2, #0
    43c8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2200      	movs	r2, #0
    43ce:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    43d0:	68fb      	ldr	r3, [r7, #12]
    43d2:	2200      	movs	r2, #0
    43d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    43d6:	68fb      	ldr	r3, [r7, #12]
    43d8:	2200      	movs	r2, #0
    43da:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	2200      	movs	r2, #0
    43e0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    43e2:	68fb      	ldr	r3, [r7, #12]
    43e4:	2201      	movs	r2, #1
    43e6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	2200      	movs	r2, #0
    43ec:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	f04f 32ff 	mov.w	r2, #4294967295
    43f4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43f6:	68fb      	ldr	r3, [r7, #12]
    43f8:	f04f 32ff 	mov.w	r2, #4294967295
    43fc:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	3310      	adds	r3, #16
    4402:	4618      	mov	r0, r3
    4404:	f7ff fe98 	bl	4138 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	3324      	adds	r3, #36	; 0x24
    440c:	4618      	mov	r0, r3
    440e:	f7ff fe93 	bl	4138 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4412:	68f8      	ldr	r0, [r7, #12]
    4414:	2100      	movs	r1, #0
    4416:	2200      	movs	r2, #0
    4418:	2300      	movs	r3, #0
    441a:	f000 f81d 	bl	4458 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    441e:	68fb      	ldr	r3, [r7, #12]
	}
    4420:	4618      	mov	r0, r3
    4422:	3710      	adds	r7, #16
    4424:	46bd      	mov	sp, r7
    4426:	bd80      	pop	{r7, pc}

00004428 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4428:	b580      	push	{r7, lr}
    442a:	b084      	sub	sp, #16
    442c:	af00      	add	r7, sp, #0
    442e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4430:	f001 fcc0 	bl	5db4 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	2b00      	cmp	r3, #0
    443a:	d103      	bne.n	4444 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	685b      	ldr	r3, [r3, #4]
    4440:	60fb      	str	r3, [r7, #12]
    4442:	e001      	b.n	4448 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4444:	2300      	movs	r3, #0
    4446:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    4448:	f001 fcca 	bl	5de0 <vPortExitCritical>
		
		return pxReturn;
    444c:	68fb      	ldr	r3, [r7, #12]
	}
    444e:	4618      	mov	r0, r3
    4450:	3710      	adds	r7, #16
    4452:	46bd      	mov	sp, r7
    4454:	bd80      	pop	{r7, pc}
    4456:	bf00      	nop

00004458 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4458:	b580      	push	{r7, lr}
    445a:	b088      	sub	sp, #32
    445c:	af00      	add	r7, sp, #0
    445e:	60f8      	str	r0, [r7, #12]
    4460:	60b9      	str	r1, [r7, #8]
    4462:	607a      	str	r2, [r7, #4]
    4464:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4466:	2300      	movs	r3, #0
    4468:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    446a:	f001 fca3 	bl	5db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4476:	429a      	cmp	r2, r3
    4478:	d216      	bcs.n	44a8 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    447a:	68f8      	ldr	r0, [r7, #12]
    447c:	68b9      	ldr	r1, [r7, #8]
    447e:	683a      	ldr	r2, [r7, #0]
    4480:	f000 f9d6 	bl	4830 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4488:	2b00      	cmp	r3, #0
    448a:	d009      	beq.n	44a0 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    448c:	68fb      	ldr	r3, [r7, #12]
    448e:	3324      	adds	r3, #36	; 0x24
    4490:	4618      	mov	r0, r3
    4492:	f001 f905 	bl	56a0 <xTaskRemoveFromEventList>
    4496:	4603      	mov	r3, r0
    4498:	2b01      	cmp	r3, #1
    449a:	d101      	bne.n	44a0 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    449c:	f001 fc7c 	bl	5d98 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    44a0:	f001 fc9e 	bl	5de0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    44a4:	2301      	movs	r3, #1
    44a6:	e059      	b.n	455c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d103      	bne.n	44b6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    44ae:	f001 fc97 	bl	5de0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    44b2:	2300      	movs	r3, #0
    44b4:	e052      	b.n	455c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    44b6:	69fb      	ldr	r3, [r7, #28]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d106      	bne.n	44ca <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    44bc:	f107 0314 	add.w	r3, r7, #20
    44c0:	4618      	mov	r0, r3
    44c2:	f001 f945 	bl	5750 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    44c6:	2301      	movs	r3, #1
    44c8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    44ca:	f001 fc89 	bl	5de0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    44ce:	f000 fe93 	bl	51f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    44d2:	f001 fc6f 	bl	5db4 <vPortEnterCritical>
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	d102      	bne.n	44e6 <xQueueGenericSend+0x8e>
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	2200      	movs	r2, #0
    44e4:	645a      	str	r2, [r3, #68]	; 0x44
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    44ee:	d102      	bne.n	44f6 <xQueueGenericSend+0x9e>
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	2200      	movs	r2, #0
    44f4:	649a      	str	r2, [r3, #72]	; 0x48
    44f6:	f001 fc73 	bl	5de0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44fa:	f107 0214 	add.w	r2, r7, #20
    44fe:	1d3b      	adds	r3, r7, #4
    4500:	4610      	mov	r0, r2
    4502:	4619      	mov	r1, r3
    4504:	f001 f93c 	bl	5780 <xTaskCheckForTimeOut>
    4508:	4603      	mov	r3, r0
    450a:	2b00      	cmp	r3, #0
    450c:	d11e      	bne.n	454c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    450e:	68f8      	ldr	r0, [r7, #12]
    4510:	f000 fa86 	bl	4a20 <prvIsQueueFull>
    4514:	4603      	mov	r3, r0
    4516:	2b00      	cmp	r3, #0
    4518:	d012      	beq.n	4540 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	f103 0210 	add.w	r2, r3, #16
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	4610      	mov	r0, r2
    4524:	4619      	mov	r1, r3
    4526:	f001 f883 	bl	5630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    452a:	68f8      	ldr	r0, [r7, #12]
    452c:	f000 fa02 	bl	4934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4530:	f000 fe74 	bl	521c <xTaskResumeAll>
    4534:	4603      	mov	r3, r0
    4536:	2b00      	cmp	r3, #0
    4538:	d10f      	bne.n	455a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    453a:	f001 fc2d 	bl	5d98 <vPortYieldFromISR>
    453e:	e00c      	b.n	455a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4540:	68f8      	ldr	r0, [r7, #12]
    4542:	f000 f9f7 	bl	4934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4546:	f000 fe69 	bl	521c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    454a:	e78e      	b.n	446a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    454c:	68f8      	ldr	r0, [r7, #12]
    454e:	f000 f9f1 	bl	4934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4552:	f000 fe63 	bl	521c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4556:	2300      	movs	r3, #0
    4558:	e000      	b.n	455c <xQueueGenericSend+0x104>
		}
	}
    455a:	e786      	b.n	446a <xQueueGenericSend+0x12>
}
    455c:	4618      	mov	r0, r3
    455e:	3720      	adds	r7, #32
    4560:	46bd      	mov	sp, r7
    4562:	bd80      	pop	{r7, pc}

00004564 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4564:	b580      	push	{r7, lr}
    4566:	b086      	sub	sp, #24
    4568:	af00      	add	r7, sp, #0
    456a:	60f8      	str	r0, [r7, #12]
    456c:	60b9      	str	r1, [r7, #8]
    456e:	607a      	str	r2, [r7, #4]
    4570:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4572:	2300      	movs	r3, #0
    4574:	613b      	str	r3, [r7, #16]
    4576:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    457a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4586:	429a      	cmp	r2, r3
    4588:	d221      	bcs.n	45ce <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    458a:	68f8      	ldr	r0, [r7, #12]
    458c:	68b9      	ldr	r1, [r7, #8]
    458e:	683a      	ldr	r2, [r7, #0]
    4590:	f000 f94e 	bl	4830 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4598:	f1b3 3fff 	cmp.w	r3, #4294967295
    459c:	d10f      	bne.n	45be <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45a2:	2b00      	cmp	r3, #0
    45a4:	d010      	beq.n	45c8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	3324      	adds	r3, #36	; 0x24
    45aa:	4618      	mov	r0, r3
    45ac:	f001 f878 	bl	56a0 <xTaskRemoveFromEventList>
    45b0:	4603      	mov	r3, r0
    45b2:	2b00      	cmp	r3, #0
    45b4:	d008      	beq.n	45c8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	2201      	movs	r2, #1
    45ba:	601a      	str	r2, [r3, #0]
    45bc:	e004      	b.n	45c8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45c2:	1c5a      	adds	r2, r3, #1
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    45c8:	2301      	movs	r3, #1
    45ca:	617b      	str	r3, [r7, #20]
    45cc:	e001      	b.n	45d2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    45ce:	2300      	movs	r3, #0
    45d0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    45d2:	f04f 0000 	mov.w	r0, #0
    45d6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    45da:	697b      	ldr	r3, [r7, #20]
}
    45dc:	4618      	mov	r0, r3
    45de:	3718      	adds	r7, #24
    45e0:	46bd      	mov	sp, r7
    45e2:	bd80      	pop	{r7, pc}

000045e4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b088      	sub	sp, #32
    45e8:	af00      	add	r7, sp, #0
    45ea:	60f8      	str	r0, [r7, #12]
    45ec:	60b9      	str	r1, [r7, #8]
    45ee:	607a      	str	r2, [r7, #4]
    45f0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45f2:	2300      	movs	r3, #0
    45f4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45f6:	f001 fbdd 	bl	5db4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45fe:	2b00      	cmp	r3, #0
    4600:	d03b      	beq.n	467a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	68db      	ldr	r3, [r3, #12]
    4606:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4608:	68f8      	ldr	r0, [r7, #12]
    460a:	68b9      	ldr	r1, [r7, #8]
    460c:	f000 f96c 	bl	48e8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4610:	683b      	ldr	r3, [r7, #0]
    4612:	2b00      	cmp	r3, #0
    4614:	d11c      	bne.n	4650 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4616:	68fb      	ldr	r3, [r7, #12]
    4618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    461a:	1e5a      	subs	r2, r3, #1
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	d104      	bne.n	4632 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4628:	f001 fa5c 	bl	5ae4 <xTaskGetCurrentTaskHandle>
    462c:	4602      	mov	r2, r0
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	691b      	ldr	r3, [r3, #16]
    4636:	2b00      	cmp	r3, #0
    4638:	d01b      	beq.n	4672 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	3310      	adds	r3, #16
    463e:	4618      	mov	r0, r3
    4640:	f001 f82e 	bl	56a0 <xTaskRemoveFromEventList>
    4644:	4603      	mov	r3, r0
    4646:	2b01      	cmp	r3, #1
    4648:	d113      	bne.n	4672 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    464a:	f001 fba5 	bl	5d98 <vPortYieldFromISR>
    464e:	e010      	b.n	4672 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4650:	68fb      	ldr	r3, [r7, #12]
    4652:	69ba      	ldr	r2, [r7, #24]
    4654:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    465a:	2b00      	cmp	r3, #0
    465c:	d009      	beq.n	4672 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	3324      	adds	r3, #36	; 0x24
    4662:	4618      	mov	r0, r3
    4664:	f001 f81c 	bl	56a0 <xTaskRemoveFromEventList>
    4668:	4603      	mov	r3, r0
    466a:	2b00      	cmp	r3, #0
    466c:	d001      	beq.n	4672 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    466e:	f001 fb93 	bl	5d98 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4672:	f001 fbb5 	bl	5de0 <vPortExitCritical>
				return pdPASS;
    4676:	2301      	movs	r3, #1
    4678:	e066      	b.n	4748 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	2b00      	cmp	r3, #0
    467e:	d103      	bne.n	4688 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4680:	f001 fbae 	bl	5de0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4684:	2300      	movs	r3, #0
    4686:	e05f      	b.n	4748 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4688:	69fb      	ldr	r3, [r7, #28]
    468a:	2b00      	cmp	r3, #0
    468c:	d106      	bne.n	469c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    468e:	f107 0310 	add.w	r3, r7, #16
    4692:	4618      	mov	r0, r3
    4694:	f001 f85c 	bl	5750 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4698:	2301      	movs	r3, #1
    469a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    469c:	f001 fba0 	bl	5de0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    46a0:	f000 fdaa 	bl	51f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    46a4:	f001 fb86 	bl	5db4 <vPortEnterCritical>
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    46b0:	d102      	bne.n	46b8 <xQueueGenericReceive+0xd4>
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	2200      	movs	r2, #0
    46b6:	645a      	str	r2, [r3, #68]	; 0x44
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    46c0:	d102      	bne.n	46c8 <xQueueGenericReceive+0xe4>
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	2200      	movs	r2, #0
    46c6:	649a      	str	r2, [r3, #72]	; 0x48
    46c8:	f001 fb8a 	bl	5de0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    46cc:	f107 0210 	add.w	r2, r7, #16
    46d0:	1d3b      	adds	r3, r7, #4
    46d2:	4610      	mov	r0, r2
    46d4:	4619      	mov	r1, r3
    46d6:	f001 f853 	bl	5780 <xTaskCheckForTimeOut>
    46da:	4603      	mov	r3, r0
    46dc:	2b00      	cmp	r3, #0
    46de:	d12b      	bne.n	4738 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    46e0:	68f8      	ldr	r0, [r7, #12]
    46e2:	f000 f973 	bl	49cc <prvIsQueueEmpty>
    46e6:	4603      	mov	r3, r0
    46e8:	2b00      	cmp	r3, #0
    46ea:	d01f      	beq.n	472c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	681b      	ldr	r3, [r3, #0]
    46f0:	2b00      	cmp	r3, #0
    46f2:	d108      	bne.n	4706 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46f4:	f001 fb5e 	bl	5db4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46f8:	68fb      	ldr	r3, [r7, #12]
    46fa:	685b      	ldr	r3, [r3, #4]
    46fc:	4618      	mov	r0, r3
    46fe:	f001 fa01 	bl	5b04 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4702:	f001 fb6d 	bl	5de0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	f103 0224 	add.w	r2, r3, #36	; 0x24
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	4610      	mov	r0, r2
    4710:	4619      	mov	r1, r3
    4712:	f000 ff8d 	bl	5630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4716:	68f8      	ldr	r0, [r7, #12]
    4718:	f000 f90c 	bl	4934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    471c:	f000 fd7e 	bl	521c <xTaskResumeAll>
    4720:	4603      	mov	r3, r0
    4722:	2b00      	cmp	r3, #0
    4724:	d10f      	bne.n	4746 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4726:	f001 fb37 	bl	5d98 <vPortYieldFromISR>
    472a:	e00c      	b.n	4746 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    472c:	68f8      	ldr	r0, [r7, #12]
    472e:	f000 f901 	bl	4934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4732:	f000 fd73 	bl	521c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4736:	e75e      	b.n	45f6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4738:	68f8      	ldr	r0, [r7, #12]
    473a:	f000 f8fb 	bl	4934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    473e:	f000 fd6d 	bl	521c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4742:	2300      	movs	r3, #0
    4744:	e000      	b.n	4748 <xQueueGenericReceive+0x164>
		}
	}
    4746:	e756      	b.n	45f6 <xQueueGenericReceive+0x12>
}
    4748:	4618      	mov	r0, r3
    474a:	3720      	adds	r7, #32
    474c:	46bd      	mov	sp, r7
    474e:	bd80      	pop	{r7, pc}

00004750 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4750:	b580      	push	{r7, lr}
    4752:	b086      	sub	sp, #24
    4754:	af00      	add	r7, sp, #0
    4756:	60f8      	str	r0, [r7, #12]
    4758:	60b9      	str	r1, [r7, #8]
    475a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    475c:	2300      	movs	r3, #0
    475e:	613b      	str	r3, [r7, #16]
    4760:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4764:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	2b00      	cmp	r3, #0
    476e:	d025      	beq.n	47bc <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4770:	68f8      	ldr	r0, [r7, #12]
    4772:	68b9      	ldr	r1, [r7, #8]
    4774:	f000 f8b8 	bl	48e8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4778:	68fb      	ldr	r3, [r7, #12]
    477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    477c:	1e5a      	subs	r2, r3, #1
    477e:	68fb      	ldr	r3, [r7, #12]
    4780:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4786:	f1b3 3fff 	cmp.w	r3, #4294967295
    478a:	d10f      	bne.n	47ac <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    478c:	68fb      	ldr	r3, [r7, #12]
    478e:	691b      	ldr	r3, [r3, #16]
    4790:	2b00      	cmp	r3, #0
    4792:	d010      	beq.n	47b6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4794:	68fb      	ldr	r3, [r7, #12]
    4796:	3310      	adds	r3, #16
    4798:	4618      	mov	r0, r3
    479a:	f000 ff81 	bl	56a0 <xTaskRemoveFromEventList>
    479e:	4603      	mov	r3, r0
    47a0:	2b00      	cmp	r3, #0
    47a2:	d008      	beq.n	47b6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	2201      	movs	r2, #1
    47a8:	601a      	str	r2, [r3, #0]
    47aa:	e004      	b.n	47b6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47b0:	1c5a      	adds	r2, r3, #1
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    47b6:	2301      	movs	r3, #1
    47b8:	617b      	str	r3, [r7, #20]
    47ba:	e001      	b.n	47c0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    47bc:	2300      	movs	r3, #0
    47be:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    47c0:	f04f 0000 	mov.w	r0, #0
    47c4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    47c8:	697b      	ldr	r3, [r7, #20]
}
    47ca:	4618      	mov	r0, r3
    47cc:	3718      	adds	r7, #24
    47ce:	46bd      	mov	sp, r7
    47d0:	bd80      	pop	{r7, pc}
    47d2:	bf00      	nop

000047d4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b084      	sub	sp, #16
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    47dc:	f001 faea 	bl	5db4 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47e4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    47e6:	f001 fafb 	bl	5de0 <vPortExitCritical>

	return uxReturn;
    47ea:	68fb      	ldr	r3, [r7, #12]
}
    47ec:	4618      	mov	r0, r3
    47ee:	3710      	adds	r7, #16
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}

000047f4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47f4:	b480      	push	{r7}
    47f6:	b085      	sub	sp, #20
    47f8:	af00      	add	r7, sp, #0
    47fa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4800:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4802:	68fb      	ldr	r3, [r7, #12]
}
    4804:	4618      	mov	r0, r3
    4806:	3714      	adds	r7, #20
    4808:	46bd      	mov	sp, r7
    480a:	f85d 7b04 	ldr.w	r7, [sp], #4
    480e:	4770      	bx	lr

00004810 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4810:	b580      	push	{r7, lr}
    4812:	b082      	sub	sp, #8
    4814:	af00      	add	r7, sp, #0
    4816:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	681b      	ldr	r3, [r3, #0]
    481c:	4618      	mov	r0, r3
    481e:	f001 fc07 	bl	6030 <vPortFree>
	vPortFree( pxQueue );
    4822:	6878      	ldr	r0, [r7, #4]
    4824:	f001 fc04 	bl	6030 <vPortFree>
}
    4828:	3708      	adds	r7, #8
    482a:	46bd      	mov	sp, r7
    482c:	bd80      	pop	{r7, pc}
    482e:	bf00      	nop

00004830 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4830:	b580      	push	{r7, lr}
    4832:	b084      	sub	sp, #16
    4834:	af00      	add	r7, sp, #0
    4836:	60f8      	str	r0, [r7, #12]
    4838:	60b9      	str	r1, [r7, #8]
    483a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4840:	2b00      	cmp	r3, #0
    4842:	d10c      	bne.n	485e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	2b00      	cmp	r3, #0
    484a:	d145      	bne.n	48d8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    484c:	68fb      	ldr	r3, [r7, #12]
    484e:	685b      	ldr	r3, [r3, #4]
    4850:	4618      	mov	r0, r3
    4852:	f001 f9bb 	bl	5bcc <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	2200      	movs	r2, #0
    485a:	605a      	str	r2, [r3, #4]
    485c:	e03c      	b.n	48d8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	2b00      	cmp	r3, #0
    4862:	d11a      	bne.n	489a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	689a      	ldr	r2, [r3, #8]
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    486c:	4610      	mov	r0, r2
    486e:	68b9      	ldr	r1, [r7, #8]
    4870:	461a      	mov	r2, r3
    4872:	f014 f89f 	bl	189b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4876:	68fb      	ldr	r3, [r7, #12]
    4878:	689a      	ldr	r2, [r3, #8]
    487a:	68fb      	ldr	r3, [r7, #12]
    487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    487e:	441a      	add	r2, r3
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	689a      	ldr	r2, [r3, #8]
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	685b      	ldr	r3, [r3, #4]
    488c:	429a      	cmp	r2, r3
    488e:	d323      	bcc.n	48d8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	68fb      	ldr	r3, [r7, #12]
    4896:	609a      	str	r2, [r3, #8]
    4898:	e01e      	b.n	48d8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	68da      	ldr	r2, [r3, #12]
    489e:	68fb      	ldr	r3, [r7, #12]
    48a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48a2:	4610      	mov	r0, r2
    48a4:	68b9      	ldr	r1, [r7, #8]
    48a6:	461a      	mov	r2, r3
    48a8:	f014 f884 	bl	189b4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	68da      	ldr	r2, [r3, #12]
    48b0:	68fb      	ldr	r3, [r7, #12]
    48b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48b4:	425b      	negs	r3, r3
    48b6:	441a      	add	r2, r3
    48b8:	68fb      	ldr	r3, [r7, #12]
    48ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    48bc:	68fb      	ldr	r3, [r7, #12]
    48be:	68da      	ldr	r2, [r3, #12]
    48c0:	68fb      	ldr	r3, [r7, #12]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	429a      	cmp	r2, r3
    48c6:	d207      	bcs.n	48d8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    48c8:	68fb      	ldr	r3, [r7, #12]
    48ca:	685a      	ldr	r2, [r3, #4]
    48cc:	68fb      	ldr	r3, [r7, #12]
    48ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48d0:	425b      	negs	r3, r3
    48d2:	441a      	add	r2, r3
    48d4:	68fb      	ldr	r3, [r7, #12]
    48d6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48dc:	1c5a      	adds	r2, r3, #1
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	639a      	str	r2, [r3, #56]	; 0x38
}
    48e2:	3710      	adds	r7, #16
    48e4:	46bd      	mov	sp, r7
    48e6:	bd80      	pop	{r7, pc}

000048e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    48e8:	b580      	push	{r7, lr}
    48ea:	b082      	sub	sp, #8
    48ec:	af00      	add	r7, sp, #0
    48ee:	6078      	str	r0, [r7, #4]
    48f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d019      	beq.n	492e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	68da      	ldr	r2, [r3, #12]
    48fe:	687b      	ldr	r3, [r7, #4]
    4900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4902:	441a      	add	r2, r3
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	68da      	ldr	r2, [r3, #12]
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	429a      	cmp	r2, r3
    4912:	d303      	bcc.n	491c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	681a      	ldr	r2, [r3, #0]
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	68da      	ldr	r2, [r3, #12]
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4924:	6838      	ldr	r0, [r7, #0]
    4926:	4611      	mov	r1, r2
    4928:	461a      	mov	r2, r3
    492a:	f014 f843 	bl	189b4 <memcpy>
	}
}
    492e:	3708      	adds	r7, #8
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}

00004934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4934:	b580      	push	{r7, lr}
    4936:	b082      	sub	sp, #8
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    493c:	f001 fa3a 	bl	5db4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4940:	e014      	b.n	496c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4946:	2b00      	cmp	r3, #0
    4948:	d00f      	beq.n	496a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	3324      	adds	r3, #36	; 0x24
    494e:	4618      	mov	r0, r3
    4950:	f000 fea6 	bl	56a0 <xTaskRemoveFromEventList>
    4954:	4603      	mov	r3, r0
    4956:	2b00      	cmp	r3, #0
    4958:	d001      	beq.n	495e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    495a:	f000 ff5d 	bl	5818 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4962:	1e5a      	subs	r2, r3, #1
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	649a      	str	r2, [r3, #72]	; 0x48
    4968:	e000      	b.n	496c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    496a:	e003      	b.n	4974 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4970:	2b00      	cmp	r3, #0
    4972:	dce6      	bgt.n	4942 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	f04f 32ff 	mov.w	r2, #4294967295
    497a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    497c:	f001 fa30 	bl	5de0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4980:	f001 fa18 	bl	5db4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4984:	e014      	b.n	49b0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	691b      	ldr	r3, [r3, #16]
    498a:	2b00      	cmp	r3, #0
    498c:	d00f      	beq.n	49ae <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    498e:	687b      	ldr	r3, [r7, #4]
    4990:	3310      	adds	r3, #16
    4992:	4618      	mov	r0, r3
    4994:	f000 fe84 	bl	56a0 <xTaskRemoveFromEventList>
    4998:	4603      	mov	r3, r0
    499a:	2b00      	cmp	r3, #0
    499c:	d001      	beq.n	49a2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    499e:	f000 ff3b 	bl	5818 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    49a6:	1e5a      	subs	r2, r3, #1
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	645a      	str	r2, [r3, #68]	; 0x44
    49ac:	e000      	b.n	49b0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    49ae:	e003      	b.n	49b8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    49b4:	2b00      	cmp	r3, #0
    49b6:	dce6      	bgt.n	4986 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	f04f 32ff 	mov.w	r2, #4294967295
    49be:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    49c0:	f001 fa0e 	bl	5de0 <vPortExitCritical>
}
    49c4:	3708      	adds	r7, #8
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}
    49ca:	bf00      	nop

000049cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b084      	sub	sp, #16
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49d4:	f001 f9ee 	bl	5db4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49dc:	2b00      	cmp	r3, #0
    49de:	bf14      	ite	ne
    49e0:	2300      	movne	r3, #0
    49e2:	2301      	moveq	r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49e8:	f001 f9fa 	bl	5de0 <vPortExitCritical>

	return xReturn;
    49ec:	68fb      	ldr	r3, [r7, #12]
}
    49ee:	4618      	mov	r0, r3
    49f0:	3710      	adds	r7, #16
    49f2:	46bd      	mov	sp, r7
    49f4:	bd80      	pop	{r7, pc}
    49f6:	bf00      	nop

000049f8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49f8:	b480      	push	{r7}
    49fa:	b085      	sub	sp, #20
    49fc:	af00      	add	r7, sp, #0
    49fe:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a04:	2b00      	cmp	r3, #0
    4a06:	bf14      	ite	ne
    4a08:	2300      	movne	r3, #0
    4a0a:	2301      	moveq	r3, #1
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a10:	68fb      	ldr	r3, [r7, #12]
}
    4a12:	4618      	mov	r0, r3
    4a14:	3714      	adds	r7, #20
    4a16:	46bd      	mov	sp, r7
    4a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a1c:	4770      	bx	lr
    4a1e:	bf00      	nop

00004a20 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4a20:	b580      	push	{r7, lr}
    4a22:	b084      	sub	sp, #16
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a28:	f001 f9c4 	bl	5db4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a34:	429a      	cmp	r2, r3
    4a36:	bf14      	ite	ne
    4a38:	2300      	movne	r3, #0
    4a3a:	2301      	moveq	r3, #1
    4a3c:	b2db      	uxtb	r3, r3
    4a3e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a40:	f001 f9ce 	bl	5de0 <vPortExitCritical>

	return xReturn;
    4a44:	68fb      	ldr	r3, [r7, #12]
}
    4a46:	4618      	mov	r0, r3
    4a48:	3710      	adds	r7, #16
    4a4a:	46bd      	mov	sp, r7
    4a4c:	bd80      	pop	{r7, pc}
    4a4e:	bf00      	nop

00004a50 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4a50:	b480      	push	{r7}
    4a52:	b085      	sub	sp, #20
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a60:	429a      	cmp	r2, r3
    4a62:	bf14      	ite	ne
    4a64:	2300      	movne	r3, #0
    4a66:	2301      	moveq	r3, #1
    4a68:	b2db      	uxtb	r3, r3
    4a6a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a6c:	68fb      	ldr	r3, [r7, #12]
}
    4a6e:	4618      	mov	r0, r3
    4a70:	3714      	adds	r7, #20
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop

00004a7c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b08a      	sub	sp, #40	; 0x28
    4a80:	af02      	add	r7, sp, #8
    4a82:	60f8      	str	r0, [r7, #12]
    4a84:	60b9      	str	r1, [r7, #8]
    4a86:	603b      	str	r3, [r7, #0]
    4a88:	4613      	mov	r3, r2
    4a8a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a8c:	88fb      	ldrh	r3, [r7, #6]
    4a8e:	4618      	mov	r0, r3
    4a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a92:	f000 ffe5 	bl	5a60 <prvAllocateTCBAndStack>
    4a96:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a98:	69bb      	ldr	r3, [r7, #24]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	f000 80a1 	beq.w	4be2 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4aa0:	69bb      	ldr	r3, [r7, #24]
    4aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4aa4:	88fb      	ldrh	r3, [r7, #6]
    4aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4aaa:	3b01      	subs	r3, #1
    4aac:	009b      	lsls	r3, r3, #2
    4aae:	4413      	add	r3, r2
    4ab0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4ab2:	697b      	ldr	r3, [r7, #20]
    4ab4:	f023 0307 	bic.w	r3, r3, #7
    4ab8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4aba:	88fb      	ldrh	r3, [r7, #6]
    4abc:	9300      	str	r3, [sp, #0]
    4abe:	69b8      	ldr	r0, [r7, #24]
    4ac0:	68b9      	ldr	r1, [r7, #8]
    4ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4ac6:	f000 febd 	bl	5844 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4aca:	6978      	ldr	r0, [r7, #20]
    4acc:	68f9      	ldr	r1, [r7, #12]
    4ace:	683a      	ldr	r2, [r7, #0]
    4ad0:	f001 f8f2 	bl	5cb8 <pxPortInitialiseStack>
    4ad4:	4602      	mov	r2, r0
    4ad6:	69bb      	ldr	r3, [r7, #24]
    4ad8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4adc:	2b00      	cmp	r3, #0
    4ade:	d002      	beq.n	4ae6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ae2:	69ba      	ldr	r2, [r7, #24]
    4ae4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4ae6:	f001 f965 	bl	5db4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4aea:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	1c5a      	adds	r2, r3, #1
    4af6:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4b00:	f241 4310 	movw	r3, #5136	; 0x1410
    4b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d10f      	bne.n	4b2e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4b0e:	f241 4310 	movw	r3, #5136	; 0x1410
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	69ba      	ldr	r2, [r7, #24]
    4b18:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4b1a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2b01      	cmp	r3, #1
    4b26:	d118      	bne.n	4b5a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4b28:	f000 fec2 	bl	58b0 <prvInitialiseTaskLists>
    4b2c:	e015      	b.n	4b5a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4b2e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d10e      	bne.n	4b5a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4b3c:	f241 4310 	movw	r3, #5136	; 0x1410
    4b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d805      	bhi.n	4b5a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4b4e:	f241 4310 	movw	r3, #5136	; 0x1410
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	69ba      	ldr	r2, [r7, #24]
    4b58:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b5a:	69bb      	ldr	r3, [r7, #24]
    4b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b5e:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b66:	681b      	ldr	r3, [r3, #0]
    4b68:	429a      	cmp	r2, r3
    4b6a:	d906      	bls.n	4b7a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b6c:	69bb      	ldr	r3, [r7, #24]
    4b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b70:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b78:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b7a:	f241 530c 	movw	r3, #5388	; 0x150c
    4b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	1c5a      	adds	r2, r3, #1
    4b86:	f241 530c 	movw	r3, #5388	; 0x150c
    4b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b90:	69bb      	ldr	r3, [r7, #24]
    4b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b94:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	429a      	cmp	r2, r3
    4ba0:	d906      	bls.n	4bb0 <xTaskGenericCreate+0x134>
    4ba2:	69bb      	ldr	r3, [r7, #24]
    4ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bae:	601a      	str	r2, [r3, #0]
    4bb0:	69bb      	ldr	r3, [r7, #24]
    4bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bb4:	4613      	mov	r3, r2
    4bb6:	009b      	lsls	r3, r3, #2
    4bb8:	4413      	add	r3, r2
    4bba:	009b      	lsls	r3, r3, #2
    4bbc:	f241 4214 	movw	r2, #5140	; 0x1414
    4bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bc4:	441a      	add	r2, r3
    4bc6:	69bb      	ldr	r3, [r7, #24]
    4bc8:	3304      	adds	r3, #4
    4bca:	4610      	mov	r0, r2
    4bcc:	4619      	mov	r1, r3
    4bce:	f7ff fadf 	bl	4190 <vListInsertEnd>

			xReturn = pdPASS;
    4bd2:	2301      	movs	r3, #1
    4bd4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4bd6:	69b8      	ldr	r0, [r7, #24]
    4bd8:	f012 fee8 	bl	179ac <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4bdc:	f001 f900 	bl	5de0 <vPortExitCritical>
    4be0:	e002      	b.n	4be8 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4be2:	f04f 33ff 	mov.w	r3, #4294967295
    4be6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4be8:	69fb      	ldr	r3, [r7, #28]
    4bea:	2b01      	cmp	r3, #1
    4bec:	d111      	bne.n	4c12 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4bee:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d00a      	beq.n	4c12 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4bfc:	f241 4310 	movw	r3, #5136	; 0x1410
    4c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d201      	bcs.n	4c12 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4c0e:	f001 f8c3 	bl	5d98 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c12:	69fb      	ldr	r3, [r7, #28]
}
    4c14:	4618      	mov	r0, r3
    4c16:	3720      	adds	r7, #32
    4c18:	46bd      	mov	sp, r7
    4c1a:	bd80      	pop	{r7, pc}

00004c1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b084      	sub	sp, #16
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c24:	f001 f8c6 	bl	5db4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4c28:	f241 4310 	movw	r3, #5136	; 0x1410
    4c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	687a      	ldr	r2, [r7, #4]
    4c34:	429a      	cmp	r2, r3
    4c36:	d101      	bne.n	4c3c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4c38:	2300      	movs	r3, #0
    4c3a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d105      	bne.n	4c4e <vTaskDelete+0x32>
    4c42:	f241 4310 	movw	r3, #5136	; 0x1410
    4c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	e000      	b.n	4c50 <vTaskDelete+0x34>
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	3304      	adds	r3, #4
    4c56:	4618      	mov	r0, r3
    4c58:	f7ff fafa 	bl	4250 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c60:	2b00      	cmp	r3, #0
    4c62:	d004      	beq.n	4c6e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c64:	68fb      	ldr	r3, [r7, #12]
    4c66:	3318      	adds	r3, #24
    4c68:	4618      	mov	r0, r3
    4c6a:	f7ff faf1 	bl	4250 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	3304      	adds	r3, #4
    4c72:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4c76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c7a:	4619      	mov	r1, r3
    4c7c:	f7ff fa88 	bl	4190 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c80:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c88:	681b      	ldr	r3, [r3, #0]
    4c8a:	1c5a      	adds	r2, r3, #1
    4c8c:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c96:	f241 530c 	movw	r3, #5388	; 0x150c
    4c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	1c5a      	adds	r2, r3, #1
    4ca2:	f241 530c 	movw	r3, #5388	; 0x150c
    4ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4caa:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4cac:	f001 f898 	bl	5de0 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4cb0:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d004      	beq.n	4cc8 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d101      	bne.n	4cc8 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4cc4:	f001 f868 	bl	5d98 <vPortYieldFromISR>
			}
		}
	}
    4cc8:	3710      	adds	r7, #16
    4cca:	46bd      	mov	sp, r7
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	bf00      	nop

00004cd0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	b086      	sub	sp, #24
    4cd4:	af00      	add	r7, sp, #0
    4cd6:	6078      	str	r0, [r7, #4]
    4cd8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4cda:	2300      	movs	r3, #0
    4cdc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4cde:	f000 fa8b 	bl	51f8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	681a      	ldr	r2, [r3, #0]
    4ce6:	683b      	ldr	r3, [r7, #0]
    4ce8:	4413      	add	r3, r2
    4cea:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	681a      	ldr	r2, [r3, #0]
    4cf0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf8:	681b      	ldr	r3, [r3, #0]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d90f      	bls.n	4d1e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	681a      	ldr	r2, [r3, #0]
    4d02:	693b      	ldr	r3, [r7, #16]
    4d04:	429a      	cmp	r2, r3
    4d06:	d919      	bls.n	4d3c <vTaskDelayUntil+0x6c>
    4d08:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	693a      	ldr	r2, [r7, #16]
    4d14:	429a      	cmp	r2, r3
    4d16:	d911      	bls.n	4d3c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d18:	2301      	movs	r3, #1
    4d1a:	617b      	str	r3, [r7, #20]
    4d1c:	e00e      	b.n	4d3c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	681a      	ldr	r2, [r3, #0]
    4d22:	693b      	ldr	r3, [r7, #16]
    4d24:	429a      	cmp	r2, r3
    4d26:	d807      	bhi.n	4d38 <vTaskDelayUntil+0x68>
    4d28:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	693a      	ldr	r2, [r7, #16]
    4d34:	429a      	cmp	r2, r3
    4d36:	d901      	bls.n	4d3c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d38:	2301      	movs	r3, #1
    4d3a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	693a      	ldr	r2, [r7, #16]
    4d40:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4d42:	697b      	ldr	r3, [r7, #20]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d00b      	beq.n	4d60 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d48:	f241 4310 	movw	r3, #5136	; 0x1410
    4d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	3304      	adds	r3, #4
    4d54:	4618      	mov	r0, r3
    4d56:	f7ff fa7b 	bl	4250 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d5a:	6938      	ldr	r0, [r7, #16]
    4d5c:	f000 fe3c 	bl	59d8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d60:	f000 fa5c 	bl	521c <xTaskResumeAll>
    4d64:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d66:	68fb      	ldr	r3, [r7, #12]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d101      	bne.n	4d70 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d6c:	f001 f814 	bl	5d98 <vPortYieldFromISR>
		}
	}
    4d70:	3718      	adds	r7, #24
    4d72:	46bd      	mov	sp, r7
    4d74:	bd80      	pop	{r7, pc}
    4d76:	bf00      	nop

00004d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d78:	b580      	push	{r7, lr}
    4d7a:	b084      	sub	sp, #16
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d80:	2300      	movs	r3, #0
    4d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d018      	beq.n	4dbc <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d8a:	f000 fa35 	bl	51f8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d8e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d96:	681a      	ldr	r2, [r3, #0]
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	4413      	add	r3, r2
    4d9c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d9e:	f241 4310 	movw	r3, #5136	; 0x1410
    4da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	3304      	adds	r3, #4
    4daa:	4618      	mov	r0, r3
    4dac:	f7ff fa50 	bl	4250 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4db0:	68b8      	ldr	r0, [r7, #8]
    4db2:	f000 fe11 	bl	59d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4db6:	f000 fa31 	bl	521c <xTaskResumeAll>
    4dba:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d101      	bne.n	4dc6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4dc2:	f000 ffe9 	bl	5d98 <vPortYieldFromISR>
		}
	}
    4dc6:	3710      	adds	r7, #16
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}

00004dcc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4dd4:	f000 ffee 	bl	5db4 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d105      	bne.n	4dea <uxTaskPriorityGet+0x1e>
    4dde:	f241 4310 	movw	r3, #5136	; 0x1410
    4de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	e000      	b.n	4dec <uxTaskPriorityGet+0x20>
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4df4:	f000 fff4 	bl	5de0 <vPortExitCritical>

		return uxReturn;
    4df8:	68bb      	ldr	r3, [r7, #8]
	}
    4dfa:	4618      	mov	r0, r3
    4dfc:	3710      	adds	r7, #16
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop

00004e04 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4e04:	b580      	push	{r7, lr}
    4e06:	b086      	sub	sp, #24
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
    4e0c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e0e:	2300      	movs	r3, #0
    4e10:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e12:	683b      	ldr	r3, [r7, #0]
    4e14:	2b04      	cmp	r3, #4
    4e16:	d901      	bls.n	4e1c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4e18:	2304      	movs	r3, #4
    4e1a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4e1c:	f000 ffca 	bl	5db4 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4e20:	f241 4310 	movw	r3, #5136	; 0x1410
    4e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	687a      	ldr	r2, [r7, #4]
    4e2c:	429a      	cmp	r2, r3
    4e2e:	d101      	bne.n	4e34 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4e30:	2300      	movs	r3, #0
    4e32:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d105      	bne.n	4e46 <vTaskPrioritySet+0x42>
    4e3a:	f241 4310 	movw	r3, #5136	; 0x1410
    4e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	e000      	b.n	4e48 <vTaskPrioritySet+0x44>
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4e4a:	693b      	ldr	r3, [r7, #16]
    4e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4e4e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4e50:	68fa      	ldr	r2, [r7, #12]
    4e52:	683b      	ldr	r3, [r7, #0]
    4e54:	429a      	cmp	r2, r3
    4e56:	d058      	beq.n	4f0a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e58:	683a      	ldr	r2, [r7, #0]
    4e5a:	68fb      	ldr	r3, [r7, #12]
    4e5c:	429a      	cmp	r2, r3
    4e5e:	d905      	bls.n	4e6c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d007      	beq.n	4e76 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e66:	2301      	movs	r3, #1
    4e68:	617b      	str	r3, [r7, #20]
    4e6a:	e004      	b.n	4e76 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d101      	bne.n	4e76 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e72:	2301      	movs	r3, #1
    4e74:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e76:	693b      	ldr	r3, [r7, #16]
    4e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e7a:	693b      	ldr	r3, [r7, #16]
    4e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e7e:	429a      	cmp	r2, r3
    4e80:	d102      	bne.n	4e88 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e82:	693b      	ldr	r3, [r7, #16]
    4e84:	683a      	ldr	r2, [r7, #0]
    4e86:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e88:	693b      	ldr	r3, [r7, #16]
    4e8a:	683a      	ldr	r2, [r7, #0]
    4e8c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e8e:	683b      	ldr	r3, [r7, #0]
    4e90:	f1c3 0205 	rsb	r2, r3, #5
    4e94:	693b      	ldr	r3, [r7, #16]
    4e96:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e98:	693b      	ldr	r3, [r7, #16]
    4e9a:	6959      	ldr	r1, [r3, #20]
    4e9c:	68fa      	ldr	r2, [r7, #12]
    4e9e:	4613      	mov	r3, r2
    4ea0:	009b      	lsls	r3, r3, #2
    4ea2:	4413      	add	r3, r2
    4ea4:	009b      	lsls	r3, r3, #2
    4ea6:	f241 4214 	movw	r2, #5140	; 0x1414
    4eaa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4eae:	4413      	add	r3, r2
    4eb0:	4299      	cmp	r1, r3
    4eb2:	d125      	bne.n	4f00 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4eb4:	693b      	ldr	r3, [r7, #16]
    4eb6:	3304      	adds	r3, #4
    4eb8:	4618      	mov	r0, r3
    4eba:	f7ff f9c9 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ebe:	693b      	ldr	r3, [r7, #16]
    4ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	429a      	cmp	r2, r3
    4ece:	d906      	bls.n	4ede <vTaskPrioritySet+0xda>
    4ed0:	693b      	ldr	r3, [r7, #16]
    4ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	601a      	str	r2, [r3, #0]
    4ede:	693b      	ldr	r3, [r7, #16]
    4ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ee2:	4613      	mov	r3, r2
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	4413      	add	r3, r2
    4ee8:	009b      	lsls	r3, r3, #2
    4eea:	f241 4214 	movw	r2, #5140	; 0x1414
    4eee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ef2:	441a      	add	r2, r3
    4ef4:	693b      	ldr	r3, [r7, #16]
    4ef6:	3304      	adds	r3, #4
    4ef8:	4610      	mov	r0, r2
    4efa:	4619      	mov	r1, r3
    4efc:	f7ff f948 	bl	4190 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4f00:	697b      	ldr	r3, [r7, #20]
    4f02:	2b01      	cmp	r3, #1
    4f04:	d101      	bne.n	4f0a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4f06:	f000 ff47 	bl	5d98 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4f0a:	f000 ff69 	bl	5de0 <vPortExitCritical>
	}
    4f0e:	3718      	adds	r7, #24
    4f10:	46bd      	mov	sp, r7
    4f12:	bd80      	pop	{r7, pc}

00004f14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f1c:	f000 ff4a 	bl	5db4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4f20:	f241 4310 	movw	r3, #5136	; 0x1410
    4f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	687a      	ldr	r2, [r7, #4]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d101      	bne.n	4f34 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4f30:	2300      	movs	r3, #0
    4f32:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d105      	bne.n	4f46 <vTaskSuspend+0x32>
    4f3a:	f241 4310 	movw	r3, #5136	; 0x1410
    4f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	e000      	b.n	4f48 <vTaskSuspend+0x34>
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4f4a:	68fb      	ldr	r3, [r7, #12]
    4f4c:	3304      	adds	r3, #4
    4f4e:	4618      	mov	r0, r3
    4f50:	f7ff f97e 	bl	4250 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f54:	68fb      	ldr	r3, [r7, #12]
    4f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d004      	beq.n	4f66 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f5c:	68fb      	ldr	r3, [r7, #12]
    4f5e:	3318      	adds	r3, #24
    4f60:	4618      	mov	r0, r3
    4f62:	f7ff f975 	bl	4250 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	3304      	adds	r3, #4
    4f6a:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4f6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f72:	4619      	mov	r1, r3
    4f74:	f7ff f90c 	bl	4190 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f78:	f000 ff32 	bl	5de0 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d11e      	bne.n	4fc0 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f82:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d002      	beq.n	4f96 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f90:	f000 ff02 	bl	5d98 <vPortYieldFromISR>
    4f94:	e014      	b.n	4fc0 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f96:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	681a      	ldr	r2, [r3, #0]
    4fa0:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	429a      	cmp	r2, r3
    4fac:	d106      	bne.n	4fbc <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4fae:	f241 4310 	movw	r3, #5136	; 0x1410
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	2200      	movs	r2, #0
    4fb8:	601a      	str	r2, [r3, #0]
    4fba:	e001      	b.n	4fc0 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4fbc:	f000 fadc 	bl	5578 <vTaskSwitchContext>
				}
			}
		}
	}
    4fc0:	3710      	adds	r7, #16
    4fc2:	46bd      	mov	sp, r7
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	bf00      	nop

00004fc8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4fc8:	b480      	push	{r7}
    4fca:	b085      	sub	sp, #20
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4fd0:	2300      	movs	r3, #0
    4fd2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4fd8:	68bb      	ldr	r3, [r7, #8]
    4fda:	695a      	ldr	r2, [r3, #20]
    4fdc:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	429a      	cmp	r2, r3
    4fe6:	d10d      	bne.n	5004 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4fe8:	68bb      	ldr	r3, [r7, #8]
    4fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fec:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff4:	429a      	cmp	r2, r3
    4ff6:	d005      	beq.n	5004 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4ff8:	68bb      	ldr	r3, [r7, #8]
    4ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d101      	bne.n	5004 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    5000:	2301      	movs	r3, #1
    5002:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    5004:	68fb      	ldr	r3, [r7, #12]
	}
    5006:	4618      	mov	r0, r3
    5008:	3714      	adds	r7, #20
    500a:	46bd      	mov	sp, r7
    500c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5010:	4770      	bx	lr
    5012:	bf00      	nop

00005014 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    5014:	b580      	push	{r7, lr}
    5016:	b084      	sub	sp, #16
    5018:	af00      	add	r7, sp, #0
    501a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	2b00      	cmp	r3, #0
    5024:	d043      	beq.n	50ae <vTaskResume+0x9a>
    5026:	f241 4310 	movw	r3, #5136	; 0x1410
    502a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502e:	681b      	ldr	r3, [r3, #0]
    5030:	68fa      	ldr	r2, [r7, #12]
    5032:	429a      	cmp	r2, r3
    5034:	d03b      	beq.n	50ae <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    5036:	f000 febd 	bl	5db4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    503a:	68f8      	ldr	r0, [r7, #12]
    503c:	f7ff ffc4 	bl	4fc8 <xTaskIsTaskSuspended>
    5040:	4603      	mov	r3, r0
    5042:	2b01      	cmp	r3, #1
    5044:	d131      	bne.n	50aa <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5046:	68fb      	ldr	r3, [r7, #12]
    5048:	3304      	adds	r3, #4
    504a:	4618      	mov	r0, r3
    504c:	f7ff f900 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5054:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	429a      	cmp	r2, r3
    5060:	d906      	bls.n	5070 <vTaskResume+0x5c>
    5062:	68fb      	ldr	r3, [r7, #12]
    5064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5066:	f241 43f4 	movw	r3, #5364	; 0x14f4
    506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506e:	601a      	str	r2, [r3, #0]
    5070:	68fb      	ldr	r3, [r7, #12]
    5072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5074:	4613      	mov	r3, r2
    5076:	009b      	lsls	r3, r3, #2
    5078:	4413      	add	r3, r2
    507a:	009b      	lsls	r3, r3, #2
    507c:	f241 4214 	movw	r2, #5140	; 0x1414
    5080:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5084:	441a      	add	r2, r3
    5086:	68fb      	ldr	r3, [r7, #12]
    5088:	3304      	adds	r3, #4
    508a:	4610      	mov	r0, r2
    508c:	4619      	mov	r1, r3
    508e:	f7ff f87f 	bl	4190 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5096:	f241 4310 	movw	r3, #5136	; 0x1410
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50a2:	429a      	cmp	r2, r3
    50a4:	d301      	bcc.n	50aa <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    50a6:	f000 fe77 	bl	5d98 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    50aa:	f000 fe99 	bl	5de0 <vPortExitCritical>
		}
	}
    50ae:	3710      	adds	r7, #16
    50b0:	46bd      	mov	sp, r7
    50b2:	bd80      	pop	{r7, pc}

000050b4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    50b4:	b580      	push	{r7, lr}
    50b6:	b086      	sub	sp, #24
    50b8:	af00      	add	r7, sp, #0
    50ba:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    50bc:	2300      	movs	r3, #0
    50be:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    50c4:	2300      	movs	r3, #0
    50c6:	60fb      	str	r3, [r7, #12]
    50c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    50cc:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    50d0:	6938      	ldr	r0, [r7, #16]
    50d2:	f7ff ff79 	bl	4fc8 <xTaskIsTaskSuspended>
    50d6:	4603      	mov	r3, r0
    50d8:	2b01      	cmp	r3, #1
    50da:	d144      	bne.n	5166 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50dc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    50e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d134      	bne.n	5154 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    50ea:	693b      	ldr	r3, [r7, #16]
    50ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ee:	f241 4310 	movw	r3, #5136	; 0x1410
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50fa:	429a      	cmp	r2, r3
    50fc:	bf34      	ite	cc
    50fe:	2300      	movcc	r3, #0
    5100:	2301      	movcs	r3, #1
    5102:	b2db      	uxtb	r3, r3
    5104:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5106:	693b      	ldr	r3, [r7, #16]
    5108:	3304      	adds	r3, #4
    510a:	4618      	mov	r0, r3
    510c:	f7ff f8a0 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5110:	693b      	ldr	r3, [r7, #16]
    5112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5114:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	429a      	cmp	r2, r3
    5120:	d906      	bls.n	5130 <xTaskResumeFromISR+0x7c>
    5122:	693b      	ldr	r3, [r7, #16]
    5124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5126:	f241 43f4 	movw	r3, #5364	; 0x14f4
    512a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512e:	601a      	str	r2, [r3, #0]
    5130:	693b      	ldr	r3, [r7, #16]
    5132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5134:	4613      	mov	r3, r2
    5136:	009b      	lsls	r3, r3, #2
    5138:	4413      	add	r3, r2
    513a:	009b      	lsls	r3, r3, #2
    513c:	f241 4214 	movw	r2, #5140	; 0x1414
    5140:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5144:	441a      	add	r2, r3
    5146:	693b      	ldr	r3, [r7, #16]
    5148:	3304      	adds	r3, #4
    514a:	4610      	mov	r0, r2
    514c:	4619      	mov	r1, r3
    514e:	f7ff f81f 	bl	4190 <vListInsertEnd>
    5152:	e008      	b.n	5166 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5154:	693b      	ldr	r3, [r7, #16]
    5156:	3318      	adds	r3, #24
    5158:	f241 40a8 	movw	r0, #5288	; 0x14a8
    515c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5160:	4619      	mov	r1, r3
    5162:	f7ff f815 	bl	4190 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5166:	f04f 0000 	mov.w	r0, #0
    516a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    516e:	697b      	ldr	r3, [r7, #20]
	}
    5170:	4618      	mov	r0, r3
    5172:	3718      	adds	r7, #24
    5174:	46bd      	mov	sp, r7
    5176:	bd80      	pop	{r7, pc}

00005178 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5178:	b580      	push	{r7, lr}
    517a:	b086      	sub	sp, #24
    517c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    517e:	2300      	movs	r3, #0
    5180:	9300      	str	r3, [sp, #0]
    5182:	2300      	movs	r3, #0
    5184:	9301      	str	r3, [sp, #4]
    5186:	2300      	movs	r3, #0
    5188:	9302      	str	r3, [sp, #8]
    518a:	2300      	movs	r3, #0
    518c:	9303      	str	r3, [sp, #12]
    518e:	f645 0031 	movw	r0, #22577	; 0x5831
    5192:	f2c0 0000 	movt	r0, #0
    5196:	f648 31ac 	movw	r1, #35756	; 0x8bac
    519a:	f2c0 0101 	movt	r1, #1
    519e:	2280      	movs	r2, #128	; 0x80
    51a0:	2300      	movs	r3, #0
    51a2:	f7ff fc6b 	bl	4a7c <xTaskGenericCreate>
    51a6:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d111      	bne.n	51d2 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    51ae:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51b2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    51b6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51be:	2201      	movs	r2, #1
    51c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    51c2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    51c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ca:	2200      	movs	r2, #0
    51cc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    51ce:	f000 fdb5 	bl	5d3c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    51d2:	3708      	adds	r7, #8
    51d4:	46bd      	mov	sp, r7
    51d6:	bd80      	pop	{r7, pc}

000051d8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    51d8:	b580      	push	{r7, lr}
    51da:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    51dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51e0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    51e4:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ec:	2200      	movs	r2, #0
    51ee:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    51f0:	f000 fdcc 	bl	5d8c <vPortEndScheduler>
}
    51f4:	bd80      	pop	{r7, pc}
    51f6:	bf00      	nop

000051f8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51f8:	b480      	push	{r7}
    51fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51fc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	1c5a      	adds	r2, r3, #1
    5208:	f241 43fc 	movw	r3, #5372	; 0x14fc
    520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5210:	601a      	str	r2, [r3, #0]
}
    5212:	46bd      	mov	sp, r7
    5214:	f85d 7b04 	ldr.w	r7, [sp], #4
    5218:	4770      	bx	lr
    521a:	bf00      	nop

0000521c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    521c:	b590      	push	{r4, r7, lr}
    521e:	b083      	sub	sp, #12
    5220:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5222:	2300      	movs	r3, #0
    5224:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5226:	f000 fdc5 	bl	5db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    522a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	1e5a      	subs	r2, r3, #1
    5236:	f241 43fc 	movw	r3, #5372	; 0x14fc
    523a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    523e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5240:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	d177      	bne.n	533e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    524e:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	d070      	beq.n	533e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    525c:	2300      	movs	r3, #0
    525e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5260:	e036      	b.n	52d0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5262:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526a:	68db      	ldr	r3, [r3, #12]
    526c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    526e:	f104 0318 	add.w	r3, r4, #24
    5272:	4618      	mov	r0, r3
    5274:	f7fe ffec 	bl	4250 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5278:	1d23      	adds	r3, r4, #4
    527a:	4618      	mov	r0, r3
    527c:	f7fe ffe8 	bl	4250 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5282:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528a:	681b      	ldr	r3, [r3, #0]
    528c:	429a      	cmp	r2, r3
    528e:	d905      	bls.n	529c <xTaskResumeAll+0x80>
    5290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5292:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529a:	601a      	str	r2, [r3, #0]
    529c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    529e:	4613      	mov	r3, r2
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	4413      	add	r3, r2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	f241 4214 	movw	r2, #5140	; 0x1414
    52aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52ae:	441a      	add	r2, r3
    52b0:	1d23      	adds	r3, r4, #4
    52b2:	4610      	mov	r0, r2
    52b4:	4619      	mov	r1, r3
    52b6:	f7fe ff6b 	bl	4190 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    52ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52bc:	f241 4310 	movw	r3, #5136	; 0x1410
    52c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52c8:	429a      	cmp	r2, r3
    52ca:	d301      	bcc.n	52d0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    52cc:	2301      	movs	r3, #1
    52ce:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52d0:	f241 43a8 	movw	r3, #5288	; 0x14a8
    52d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	2b00      	cmp	r3, #0
    52dc:	d1c1      	bne.n	5262 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52de:	f241 5300 	movw	r3, #5376	; 0x1500
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d014      	beq.n	5316 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52ec:	e00c      	b.n	5308 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    52ee:	f000 f865 	bl	53bc <vTaskIncrementTick>
						--uxMissedTicks;
    52f2:	f241 5300 	movw	r3, #5376	; 0x1500
    52f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52fa:	681b      	ldr	r3, [r3, #0]
    52fc:	1e5a      	subs	r2, r3, #1
    52fe:	f241 5300 	movw	r3, #5376	; 0x1500
    5302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5306:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5308:	f241 5300 	movw	r3, #5376	; 0x1500
    530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	2b00      	cmp	r3, #0
    5314:	d1eb      	bne.n	52ee <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5316:	683b      	ldr	r3, [r7, #0]
    5318:	2b01      	cmp	r3, #1
    531a:	d006      	beq.n	532a <xTaskResumeAll+0x10e>
    531c:	f241 5304 	movw	r3, #5380	; 0x1504
    5320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	2b01      	cmp	r3, #1
    5328:	d109      	bne.n	533e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    532a:	2301      	movs	r3, #1
    532c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    532e:	f241 5304 	movw	r3, #5380	; 0x1504
    5332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5336:	2200      	movs	r2, #0
    5338:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    533a:	f000 fd2d 	bl	5d98 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    533e:	f000 fd4f 	bl	5de0 <vPortExitCritical>

	return xAlreadyYielded;
    5342:	687b      	ldr	r3, [r7, #4]
}
    5344:	4618      	mov	r0, r3
    5346:	370c      	adds	r7, #12
    5348:	46bd      	mov	sp, r7
    534a:	bd90      	pop	{r4, r7, pc}

0000534c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    534c:	b580      	push	{r7, lr}
    534e:	b082      	sub	sp, #8
    5350:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5352:	f000 fd2f 	bl	5db4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5356:	f241 43ec 	movw	r3, #5356	; 0x14ec
    535a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5362:	f000 fd3d 	bl	5de0 <vPortExitCritical>

	return xTicks;
    5366:	687b      	ldr	r3, [r7, #4]
}
    5368:	4618      	mov	r0, r3
    536a:	3708      	adds	r7, #8
    536c:	46bd      	mov	sp, r7
    536e:	bd80      	pop	{r7, pc}

00005370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5370:	b480      	push	{r7}
    5372:	b083      	sub	sp, #12
    5374:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5376:	2300      	movs	r3, #0
    5378:	607b      	str	r3, [r7, #4]
    537a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    537e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5382:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    538e:	f04f 0000 	mov.w	r0, #0
    5392:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5396:	683b      	ldr	r3, [r7, #0]
}
    5398:	4618      	mov	r0, r3
    539a:	370c      	adds	r7, #12
    539c:	46bd      	mov	sp, r7
    539e:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a2:	4770      	bx	lr

000053a4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    53a4:	b480      	push	{r7}
    53a6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    53a8:	f241 43e8 	movw	r3, #5352	; 0x14e8
    53ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b0:	681b      	ldr	r3, [r3, #0]
}
    53b2:	4618      	mov	r0, r3
    53b4:	46bd      	mov	sp, r7
    53b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ba:	4770      	bx	lr

000053bc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    53bc:	b580      	push	{r7, lr}
    53be:	b084      	sub	sp, #16
    53c0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    53c2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	f040 80b9 	bne.w	5544 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    53d2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	1c5a      	adds	r2, r3, #1
    53de:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    53e8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d13f      	bne.n	5476 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53f6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fe:	681b      	ldr	r3, [r3, #0]
    5400:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5402:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540a:	681a      	ldr	r2, [r3, #0]
    540c:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5414:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5416:	f241 43a4 	movw	r3, #5284	; 0x14a4
    541a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541e:	68fa      	ldr	r2, [r7, #12]
    5420:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5422:	f241 5308 	movw	r3, #5384	; 0x1508
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	681b      	ldr	r3, [r3, #0]
    542c:	1c5a      	adds	r2, r3, #1
    542e:	f241 5308 	movw	r3, #5384	; 0x1508
    5432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5436:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5438:	f241 43a0 	movw	r3, #5280	; 0x14a0
    543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5440:	681b      	ldr	r3, [r3, #0]
    5442:	681b      	ldr	r3, [r3, #0]
    5444:	2b00      	cmp	r3, #0
    5446:	d107      	bne.n	5458 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    5448:	f240 5330 	movw	r3, #1328	; 0x530
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	f04f 32ff 	mov.w	r2, #4294967295
    5454:	601a      	str	r2, [r3, #0]
    5456:	e00e      	b.n	5476 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5458:	f241 43a0 	movw	r3, #5280	; 0x14a0
    545c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	68db      	ldr	r3, [r3, #12]
    5464:	68db      	ldr	r3, [r3, #12]
    5466:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5468:	68bb      	ldr	r3, [r7, #8]
    546a:	685a      	ldr	r2, [r3, #4]
    546c:	f240 5330 	movw	r3, #1328	; 0x530
    5470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5474:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5476:	f241 43ec 	movw	r3, #5356	; 0x14ec
    547a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547e:	681a      	ldr	r2, [r3, #0]
    5480:	f240 5330 	movw	r3, #1328	; 0x530
    5484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	429a      	cmp	r2, r3
    548c:	d359      	bcc.n	5542 <vTaskIncrementTick+0x186>
    548e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	2b00      	cmp	r3, #0
    549c:	d107      	bne.n	54ae <vTaskIncrementTick+0xf2>
    549e:	f240 5330 	movw	r3, #1328	; 0x530
    54a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a6:	f04f 32ff 	mov.w	r2, #4294967295
    54aa:	601a      	str	r2, [r3, #0]
    54ac:	e049      	b.n	5542 <vTaskIncrementTick+0x186>
    54ae:	f241 43a0 	movw	r3, #5280	; 0x14a0
    54b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	68db      	ldr	r3, [r3, #12]
    54ba:	68db      	ldr	r3, [r3, #12]
    54bc:	60bb      	str	r3, [r7, #8]
    54be:	68bb      	ldr	r3, [r7, #8]
    54c0:	685b      	ldr	r3, [r3, #4]
    54c2:	607b      	str	r3, [r7, #4]
    54c4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    54c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54cc:	681a      	ldr	r2, [r3, #0]
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	429a      	cmp	r2, r3
    54d2:	d206      	bcs.n	54e2 <vTaskIncrementTick+0x126>
    54d4:	f240 5330 	movw	r3, #1328	; 0x530
    54d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54dc:	687a      	ldr	r2, [r7, #4]
    54de:	601a      	str	r2, [r3, #0]
    54e0:	e02f      	b.n	5542 <vTaskIncrementTick+0x186>
    54e2:	68bb      	ldr	r3, [r7, #8]
    54e4:	3304      	adds	r3, #4
    54e6:	4618      	mov	r0, r3
    54e8:	f7fe feb2 	bl	4250 <vListRemove>
    54ec:	68bb      	ldr	r3, [r7, #8]
    54ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54f0:	2b00      	cmp	r3, #0
    54f2:	d004      	beq.n	54fe <vTaskIncrementTick+0x142>
    54f4:	68bb      	ldr	r3, [r7, #8]
    54f6:	3318      	adds	r3, #24
    54f8:	4618      	mov	r0, r3
    54fa:	f7fe fea9 	bl	4250 <vListRemove>
    54fe:	68bb      	ldr	r3, [r7, #8]
    5500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5502:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	429a      	cmp	r2, r3
    550e:	d906      	bls.n	551e <vTaskIncrementTick+0x162>
    5510:	68bb      	ldr	r3, [r7, #8]
    5512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5514:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551c:	601a      	str	r2, [r3, #0]
    551e:	68bb      	ldr	r3, [r7, #8]
    5520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5522:	4613      	mov	r3, r2
    5524:	009b      	lsls	r3, r3, #2
    5526:	4413      	add	r3, r2
    5528:	009b      	lsls	r3, r3, #2
    552a:	f241 4214 	movw	r2, #5140	; 0x1414
    552e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5532:	441a      	add	r2, r3
    5534:	68bb      	ldr	r3, [r7, #8]
    5536:	3304      	adds	r3, #4
    5538:	4610      	mov	r0, r2
    553a:	4619      	mov	r1, r3
    553c:	f7fe fe28 	bl	4190 <vListInsertEnd>
    5540:	e7a5      	b.n	548e <vTaskIncrementTick+0xd2>
    5542:	e00c      	b.n	555e <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    5544:	f241 5300 	movw	r3, #5376	; 0x1500
    5548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	1c5a      	adds	r2, r3, #1
    5550:	f241 5300 	movw	r3, #5376	; 0x1500
    5554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5558:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    555a:	f012 fa39 	bl	179d0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    555e:	f241 5300 	movw	r3, #5376	; 0x1500
    5562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	2b00      	cmp	r3, #0
    556a:	d101      	bne.n	5570 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    556c:	f012 fa30 	bl	179d0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5570:	3710      	adds	r7, #16
    5572:	46bd      	mov	sp, r7
    5574:	bd80      	pop	{r7, pc}
    5576:	bf00      	nop

00005578 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5578:	b580      	push	{r7, lr}
    557a:	b082      	sub	sp, #8
    557c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    557e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	2b00      	cmp	r3, #0
    558a:	d006      	beq.n	559a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    558c:	f241 5304 	movw	r3, #5380	; 0x1504
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	2201      	movs	r2, #1
    5596:	601a      	str	r2, [r3, #0]
    5598:	e047      	b.n	562a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    559a:	f012 fa13 	bl	179c4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    559e:	e00a      	b.n	55b6 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    55a0:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	1e5a      	subs	r2, r3, #1
    55ac:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b4:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    55b6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55be:	6819      	ldr	r1, [r3, #0]
    55c0:	f241 4214 	movw	r2, #5140	; 0x1414
    55c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55c8:	460b      	mov	r3, r1
    55ca:	009b      	lsls	r3, r3, #2
    55cc:	440b      	add	r3, r1
    55ce:	009b      	lsls	r3, r3, #2
    55d0:	4413      	add	r3, r2
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d0e3      	beq.n	55a0 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    55d8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e0:	681a      	ldr	r2, [r3, #0]
    55e2:	4613      	mov	r3, r2
    55e4:	009b      	lsls	r3, r3, #2
    55e6:	4413      	add	r3, r2
    55e8:	009b      	lsls	r3, r3, #2
    55ea:	f241 4214 	movw	r2, #5140	; 0x1414
    55ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55f2:	4413      	add	r3, r2
    55f4:	607b      	str	r3, [r7, #4]
    55f6:	687b      	ldr	r3, [r7, #4]
    55f8:	685b      	ldr	r3, [r3, #4]
    55fa:	685a      	ldr	r2, [r3, #4]
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	605a      	str	r2, [r3, #4]
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	685a      	ldr	r2, [r3, #4]
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	3308      	adds	r3, #8
    5608:	429a      	cmp	r2, r3
    560a:	d104      	bne.n	5616 <vTaskSwitchContext+0x9e>
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	685b      	ldr	r3, [r3, #4]
    5610:	685a      	ldr	r2, [r3, #4]
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	605a      	str	r2, [r3, #4]
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	685b      	ldr	r3, [r3, #4]
    561a:	68da      	ldr	r2, [r3, #12]
    561c:	f241 4310 	movw	r3, #5136	; 0x1410
    5620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5624:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5626:	f012 f9c7 	bl	179b8 <myTraceSwitchedIn>
	}
}
    562a:	3708      	adds	r7, #8
    562c:	46bd      	mov	sp, r7
    562e:	bd80      	pop	{r7, pc}

00005630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5630:	b580      	push	{r7, lr}
    5632:	b084      	sub	sp, #16
    5634:	af00      	add	r7, sp, #0
    5636:	6078      	str	r0, [r7, #4]
    5638:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    563a:	f241 4310 	movw	r3, #5136	; 0x1410
    563e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	3318      	adds	r3, #24
    5646:	6878      	ldr	r0, [r7, #4]
    5648:	4619      	mov	r1, r3
    564a:	f7fe fdc9 	bl	41e0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    564e:	f241 4310 	movw	r3, #5136	; 0x1410
    5652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	3304      	adds	r3, #4
    565a:	4618      	mov	r0, r3
    565c:	f7fe fdf8 	bl	4250 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5660:	683b      	ldr	r3, [r7, #0]
    5662:	f1b3 3fff 	cmp.w	r3, #4294967295
    5666:	d10d      	bne.n	5684 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5668:	f241 4310 	movw	r3, #5136	; 0x1410
    566c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	3304      	adds	r3, #4
    5674:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5678:	f2c2 0000 	movt	r0, #8192	; 0x2000
    567c:	4619      	mov	r1, r3
    567e:	f7fe fd87 	bl	4190 <vListInsertEnd>
    5682:	e00a      	b.n	569a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5684:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568c:	681a      	ldr	r2, [r3, #0]
    568e:	683b      	ldr	r3, [r7, #0]
    5690:	4413      	add	r3, r2
    5692:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5694:	68f8      	ldr	r0, [r7, #12]
    5696:	f000 f99f 	bl	59d8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    569a:	3710      	adds	r7, #16
    569c:	46bd      	mov	sp, r7
    569e:	bd80      	pop	{r7, pc}

000056a0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    56a0:	b580      	push	{r7, lr}
    56a2:	b084      	sub	sp, #16
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	68db      	ldr	r3, [r3, #12]
    56ac:	68db      	ldr	r3, [r3, #12]
    56ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    56b0:	68bb      	ldr	r3, [r7, #8]
    56b2:	3318      	adds	r3, #24
    56b4:	4618      	mov	r0, r3
    56b6:	f7fe fdcb 	bl	4250 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    56ba:	f241 43fc 	movw	r3, #5372	; 0x14fc
    56be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	2b00      	cmp	r3, #0
    56c6:	d126      	bne.n	5716 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    56c8:	68bb      	ldr	r3, [r7, #8]
    56ca:	3304      	adds	r3, #4
    56cc:	4618      	mov	r0, r3
    56ce:	f7fe fdbf 	bl	4250 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    56d2:	68bb      	ldr	r3, [r7, #8]
    56d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56d6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    56da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	429a      	cmp	r2, r3
    56e2:	d906      	bls.n	56f2 <xTaskRemoveFromEventList+0x52>
    56e4:	68bb      	ldr	r3, [r7, #8]
    56e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56e8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    56ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f0:	601a      	str	r2, [r3, #0]
    56f2:	68bb      	ldr	r3, [r7, #8]
    56f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56f6:	4613      	mov	r3, r2
    56f8:	009b      	lsls	r3, r3, #2
    56fa:	4413      	add	r3, r2
    56fc:	009b      	lsls	r3, r3, #2
    56fe:	f241 4214 	movw	r2, #5140	; 0x1414
    5702:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5706:	441a      	add	r2, r3
    5708:	68bb      	ldr	r3, [r7, #8]
    570a:	3304      	adds	r3, #4
    570c:	4610      	mov	r0, r2
    570e:	4619      	mov	r1, r3
    5710:	f7fe fd3e 	bl	4190 <vListInsertEnd>
    5714:	e008      	b.n	5728 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5716:	68bb      	ldr	r3, [r7, #8]
    5718:	3318      	adds	r3, #24
    571a:	f241 40a8 	movw	r0, #5288	; 0x14a8
    571e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5722:	4619      	mov	r1, r3
    5724:	f7fe fd34 	bl	4190 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5728:	68bb      	ldr	r3, [r7, #8]
    572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    572c:	f241 4310 	movw	r3, #5136	; 0x1410
    5730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5738:	429a      	cmp	r2, r3
    573a:	d302      	bcc.n	5742 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    573c:	2301      	movs	r3, #1
    573e:	60fb      	str	r3, [r7, #12]
    5740:	e001      	b.n	5746 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5742:	2300      	movs	r3, #0
    5744:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    5746:	68fb      	ldr	r3, [r7, #12]
}
    5748:	4618      	mov	r0, r3
    574a:	3710      	adds	r7, #16
    574c:	46bd      	mov	sp, r7
    574e:	bd80      	pop	{r7, pc}

00005750 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5750:	b480      	push	{r7}
    5752:	b083      	sub	sp, #12
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5758:	f241 5308 	movw	r3, #5384	; 0x1508
    575c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5760:	681a      	ldr	r2, [r3, #0]
    5762:	687b      	ldr	r3, [r7, #4]
    5764:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5766:	f241 43ec 	movw	r3, #5356	; 0x14ec
    576a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    576e:	681a      	ldr	r2, [r3, #0]
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	605a      	str	r2, [r3, #4]
}
    5774:	370c      	adds	r7, #12
    5776:	46bd      	mov	sp, r7
    5778:	f85d 7b04 	ldr.w	r7, [sp], #4
    577c:	4770      	bx	lr
    577e:	bf00      	nop

00005780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5780:	b580      	push	{r7, lr}
    5782:	b084      	sub	sp, #16
    5784:	af00      	add	r7, sp, #0
    5786:	6078      	str	r0, [r7, #4]
    5788:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    578a:	f000 fb13 	bl	5db4 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    578e:	683b      	ldr	r3, [r7, #0]
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	f1b3 3fff 	cmp.w	r3, #4294967295
    5796:	d102      	bne.n	579e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5798:	2300      	movs	r3, #0
    579a:	60fb      	str	r3, [r7, #12]
    579c:	e035      	b.n	580a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    579e:	687b      	ldr	r3, [r7, #4]
    57a0:	681a      	ldr	r2, [r3, #0]
    57a2:	f241 5308 	movw	r3, #5384	; 0x1508
    57a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57aa:	681b      	ldr	r3, [r3, #0]
    57ac:	429a      	cmp	r2, r3
    57ae:	d00b      	beq.n	57c8 <xTaskCheckForTimeOut+0x48>
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	685a      	ldr	r2, [r3, #4]
    57b4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	429a      	cmp	r2, r3
    57c0:	d802      	bhi.n	57c8 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    57c2:	2301      	movs	r3, #1
    57c4:	60fb      	str	r3, [r7, #12]
    57c6:	e020      	b.n	580a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    57c8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d0:	681a      	ldr	r2, [r3, #0]
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	685b      	ldr	r3, [r3, #4]
    57d6:	1ad2      	subs	r2, r2, r3
    57d8:	683b      	ldr	r3, [r7, #0]
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	429a      	cmp	r2, r3
    57de:	d212      	bcs.n	5806 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    57e0:	683b      	ldr	r3, [r7, #0]
    57e2:	681a      	ldr	r2, [r3, #0]
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	6859      	ldr	r1, [r3, #4]
    57e8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f0:	681b      	ldr	r3, [r3, #0]
    57f2:	1acb      	subs	r3, r1, r3
    57f4:	441a      	add	r2, r3
    57f6:	683b      	ldr	r3, [r7, #0]
    57f8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    57fa:	6878      	ldr	r0, [r7, #4]
    57fc:	f7ff ffa8 	bl	5750 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5800:	2300      	movs	r3, #0
    5802:	60fb      	str	r3, [r7, #12]
    5804:	e001      	b.n	580a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5806:	2301      	movs	r3, #1
    5808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    580a:	f000 fae9 	bl	5de0 <vPortExitCritical>

	return xReturn;
    580e:	68fb      	ldr	r3, [r7, #12]
}
    5810:	4618      	mov	r0, r3
    5812:	3710      	adds	r7, #16
    5814:	46bd      	mov	sp, r7
    5816:	bd80      	pop	{r7, pc}

00005818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5818:	b480      	push	{r7}
    581a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    581c:	f241 5304 	movw	r3, #5380	; 0x1504
    5820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5824:	2201      	movs	r2, #1
    5826:	601a      	str	r2, [r3, #0]
}
    5828:	46bd      	mov	sp, r7
    582a:	f85d 7b04 	ldr.w	r7, [sp], #4
    582e:	4770      	bx	lr

00005830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5830:	b580      	push	{r7, lr}
    5832:	b082      	sub	sp, #8
    5834:	af00      	add	r7, sp, #0
    5836:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5838:	f000 f886 	bl	5948 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    583c:	f000 faac 	bl	5d98 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5840:	e7fa      	b.n	5838 <prvIdleTask+0x8>
    5842:	bf00      	nop

00005844 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5844:	b580      	push	{r7, lr}
    5846:	b084      	sub	sp, #16
    5848:	af00      	add	r7, sp, #0
    584a:	60f8      	str	r0, [r7, #12]
    584c:	60b9      	str	r1, [r7, #8]
    584e:	607a      	str	r2, [r7, #4]
    5850:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	3334      	adds	r3, #52	; 0x34
    5856:	4618      	mov	r0, r3
    5858:	68b9      	ldr	r1, [r7, #8]
    585a:	2210      	movs	r2, #16
    585c:	f013 f94e 	bl	18afc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	2200      	movs	r2, #0
    5864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	2b04      	cmp	r3, #4
    586c:	d901      	bls.n	5872 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    586e:	2304      	movs	r3, #4
    5870:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5872:	68fb      	ldr	r3, [r7, #12]
    5874:	687a      	ldr	r2, [r7, #4]
    5876:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5878:	68fb      	ldr	r3, [r7, #12]
    587a:	687a      	ldr	r2, [r7, #4]
    587c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    587e:	68fb      	ldr	r3, [r7, #12]
    5880:	3304      	adds	r3, #4
    5882:	4618      	mov	r0, r3
    5884:	f7fe fc78 	bl	4178 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5888:	68fb      	ldr	r3, [r7, #12]
    588a:	3318      	adds	r3, #24
    588c:	4618      	mov	r0, r3
    588e:	f7fe fc73 	bl	4178 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5892:	68fb      	ldr	r3, [r7, #12]
    5894:	68fa      	ldr	r2, [r7, #12]
    5896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	f1c3 0205 	rsb	r2, r3, #5
    589e:	68fb      	ldr	r3, [r7, #12]
    58a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    58a2:	68fb      	ldr	r3, [r7, #12]
    58a4:	68fa      	ldr	r2, [r7, #12]
    58a6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    58a8:	3710      	adds	r7, #16
    58aa:	46bd      	mov	sp, r7
    58ac:	bd80      	pop	{r7, pc}
    58ae:	bf00      	nop

000058b0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    58b0:	b580      	push	{r7, lr}
    58b2:	b082      	sub	sp, #8
    58b4:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    58b6:	2300      	movs	r3, #0
    58b8:	607b      	str	r3, [r7, #4]
    58ba:	e00f      	b.n	58dc <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    58bc:	687a      	ldr	r2, [r7, #4]
    58be:	4613      	mov	r3, r2
    58c0:	009b      	lsls	r3, r3, #2
    58c2:	4413      	add	r3, r2
    58c4:	009b      	lsls	r3, r3, #2
    58c6:	f241 4214 	movw	r2, #5140	; 0x1414
    58ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58ce:	4413      	add	r3, r2
    58d0:	4618      	mov	r0, r3
    58d2:	f7fe fc31 	bl	4138 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	3301      	adds	r3, #1
    58da:	607b      	str	r3, [r7, #4]
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	2b04      	cmp	r3, #4
    58e0:	d9ec      	bls.n	58bc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    58e2:	f241 4078 	movw	r0, #5240	; 0x1478
    58e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58ea:	f7fe fc25 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    58ee:	f241 408c 	movw	r0, #5260	; 0x148c
    58f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58f6:	f7fe fc1f 	bl	4138 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    58fa:	f241 40a8 	movw	r0, #5288	; 0x14a8
    58fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5902:	f7fe fc19 	bl	4138 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5906:	f241 40bc 	movw	r0, #5308	; 0x14bc
    590a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    590e:	f7fe fc13 	bl	4138 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5912:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5916:	f2c2 0000 	movt	r0, #8192	; 0x2000
    591a:	f7fe fc0d 	bl	4138 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    591e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5926:	f241 4278 	movw	r2, #5240	; 0x1478
    592a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    592e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5930:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5938:	f241 428c 	movw	r2, #5260	; 0x148c
    593c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5940:	601a      	str	r2, [r3, #0]
}
    5942:	3708      	adds	r7, #8
    5944:	46bd      	mov	sp, r7
    5946:	bd80      	pop	{r7, pc}

00005948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5948:	b580      	push	{r7, lr}
    594a:	b082      	sub	sp, #8
    594c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    594e:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	2b00      	cmp	r3, #0
    595a:	d03a      	beq.n	59d2 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    595c:	f7ff fc4c 	bl	51f8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5960:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	2b00      	cmp	r3, #0
    596c:	bf14      	ite	ne
    596e:	2300      	movne	r3, #0
    5970:	2301      	moveq	r3, #1
    5972:	b2db      	uxtb	r3, r3
    5974:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5976:	f7ff fc51 	bl	521c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	2b00      	cmp	r3, #0
    597e:	d128      	bne.n	59d2 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5980:	f000 fa18 	bl	5db4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5984:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598c:	68db      	ldr	r3, [r3, #12]
    598e:	68db      	ldr	r3, [r3, #12]
    5990:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5992:	683b      	ldr	r3, [r7, #0]
    5994:	3304      	adds	r3, #4
    5996:	4618      	mov	r0, r3
    5998:	f7fe fc5a 	bl	4250 <vListRemove>
					--uxCurrentNumberOfTasks;
    599c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    59a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	1e5a      	subs	r2, r3, #1
    59a8:	f241 43e8 	movw	r3, #5352	; 0x14e8
    59ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    59b2:	f241 43d0 	movw	r3, #5328	; 0x14d0
    59b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	1e5a      	subs	r2, r3, #1
    59be:	f241 43d0 	movw	r3, #5328	; 0x14d0
    59c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    59c8:	f000 fa0a 	bl	5de0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    59cc:	6838      	ldr	r0, [r7, #0]
    59ce:	f000 f879 	bl	5ac4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    59d2:	3708      	adds	r7, #8
    59d4:	46bd      	mov	sp, r7
    59d6:	bd80      	pop	{r7, pc}

000059d8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    59e0:	f241 4310 	movw	r3, #5136	; 0x1410
    59e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	687a      	ldr	r2, [r7, #4]
    59ec:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    59ee:	f241 43ec 	movw	r3, #5356	; 0x14ec
    59f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	687a      	ldr	r2, [r7, #4]
    59fa:	429a      	cmp	r2, r3
    59fc:	d20f      	bcs.n	5a1e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59fe:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a06:	681a      	ldr	r2, [r3, #0]
    5a08:	f241 4310 	movw	r3, #5136	; 0x1410
    5a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	3304      	adds	r3, #4
    5a14:	4610      	mov	r0, r2
    5a16:	4619      	mov	r1, r3
    5a18:	f7fe fbe2 	bl	41e0 <vListInsert>
    5a1c:	e01c      	b.n	5a58 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a1e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a26:	681a      	ldr	r2, [r3, #0]
    5a28:	f241 4310 	movw	r3, #5136	; 0x1410
    5a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a30:	681b      	ldr	r3, [r3, #0]
    5a32:	3304      	adds	r3, #4
    5a34:	4610      	mov	r0, r2
    5a36:	4619      	mov	r1, r3
    5a38:	f7fe fbd2 	bl	41e0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5a3c:	f240 5330 	movw	r3, #1328	; 0x530
    5a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	687a      	ldr	r2, [r7, #4]
    5a48:	429a      	cmp	r2, r3
    5a4a:	d205      	bcs.n	5a58 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5a4c:	f240 5330 	movw	r3, #1328	; 0x530
    5a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a54:	687a      	ldr	r2, [r7, #4]
    5a56:	601a      	str	r2, [r3, #0]
		}
	}
}
    5a58:	3708      	adds	r7, #8
    5a5a:	46bd      	mov	sp, r7
    5a5c:	bd80      	pop	{r7, pc}
    5a5e:	bf00      	nop

00005a60 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b084      	sub	sp, #16
    5a64:	af00      	add	r7, sp, #0
    5a66:	4603      	mov	r3, r0
    5a68:	6039      	str	r1, [r7, #0]
    5a6a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5a6c:	2050      	movs	r0, #80	; 0x50
    5a6e:	f000 fa1b 	bl	5ea8 <pvPortMalloc>
    5a72:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d01f      	beq.n	5aba <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a7a:	683b      	ldr	r3, [r7, #0]
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	d106      	bne.n	5a8e <prvAllocateTCBAndStack+0x2e>
    5a80:	88fb      	ldrh	r3, [r7, #6]
    5a82:	009b      	lsls	r3, r3, #2
    5a84:	4618      	mov	r0, r3
    5a86:	f000 fa0f 	bl	5ea8 <pvPortMalloc>
    5a8a:	4603      	mov	r3, r0
    5a8c:	e000      	b.n	5a90 <prvAllocateTCBAndStack+0x30>
    5a8e:	683b      	ldr	r3, [r7, #0]
    5a90:	68fa      	ldr	r2, [r7, #12]
    5a92:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a94:	68fb      	ldr	r3, [r7, #12]
    5a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d105      	bne.n	5aa8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a9c:	68f8      	ldr	r0, [r7, #12]
    5a9e:	f000 fac7 	bl	6030 <vPortFree>
			pxNewTCB = NULL;
    5aa2:	2300      	movs	r3, #0
    5aa4:	60fb      	str	r3, [r7, #12]
    5aa6:	e008      	b.n	5aba <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5aa8:	68fb      	ldr	r3, [r7, #12]
    5aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5aac:	88fb      	ldrh	r3, [r7, #6]
    5aae:	009b      	lsls	r3, r3, #2
    5ab0:	4610      	mov	r0, r2
    5ab2:	21a5      	movs	r1, #165	; 0xa5
    5ab4:	461a      	mov	r2, r3
    5ab6:	f012 ffd1 	bl	18a5c <memset>
		}
	}

	return pxNewTCB;
    5aba:	68fb      	ldr	r3, [r7, #12]
}
    5abc:	4618      	mov	r0, r3
    5abe:	3710      	adds	r7, #16
    5ac0:	46bd      	mov	sp, r7
    5ac2:	bd80      	pop	{r7, pc}

00005ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b082      	sub	sp, #8
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ad0:	4618      	mov	r0, r3
    5ad2:	f000 faad 	bl	6030 <vPortFree>
		vPortFree( pxTCB );
    5ad6:	6878      	ldr	r0, [r7, #4]
    5ad8:	f000 faaa 	bl	6030 <vPortFree>
	}
    5adc:	3708      	adds	r7, #8
    5ade:	46bd      	mov	sp, r7
    5ae0:	bd80      	pop	{r7, pc}
    5ae2:	bf00      	nop

00005ae4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5ae4:	b480      	push	{r7}
    5ae6:	b083      	sub	sp, #12
    5ae8:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5aea:	f241 4310 	movw	r3, #5136	; 0x1410
    5aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	607b      	str	r3, [r7, #4]

		return xReturn;
    5af6:	687b      	ldr	r3, [r7, #4]
	}
    5af8:	4618      	mov	r0, r3
    5afa:	370c      	adds	r7, #12
    5afc:	46bd      	mov	sp, r7
    5afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b02:	4770      	bx	lr

00005b04 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5b04:	b580      	push	{r7, lr}
    5b06:	b084      	sub	sp, #16
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5b10:	68fb      	ldr	r3, [r7, #12]
    5b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b14:	f241 4310 	movw	r3, #5136	; 0x1410
    5b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b20:	429a      	cmp	r2, r3
    5b22:	d24f      	bcs.n	5bc4 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5b24:	f241 4310 	movw	r3, #5136	; 0x1410
    5b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b30:	f1c3 0205 	rsb	r2, r3, #5
    5b34:	68fb      	ldr	r3, [r7, #12]
    5b36:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5b38:	68fb      	ldr	r3, [r7, #12]
    5b3a:	6959      	ldr	r1, [r3, #20]
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b40:	4613      	mov	r3, r2
    5b42:	009b      	lsls	r3, r3, #2
    5b44:	4413      	add	r3, r2
    5b46:	009b      	lsls	r3, r3, #2
    5b48:	f241 4214 	movw	r2, #5140	; 0x1414
    5b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b50:	4413      	add	r3, r2
    5b52:	4299      	cmp	r1, r3
    5b54:	d12e      	bne.n	5bb4 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b56:	68fb      	ldr	r3, [r7, #12]
    5b58:	3304      	adds	r3, #4
    5b5a:	4618      	mov	r0, r3
    5b5c:	f7fe fb78 	bl	4250 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b60:	f241 4310 	movw	r3, #5136	; 0x1410
    5b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b6c:	68fb      	ldr	r3, [r7, #12]
    5b6e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5b70:	68fb      	ldr	r3, [r7, #12]
    5b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b74:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	429a      	cmp	r2, r3
    5b80:	d906      	bls.n	5b90 <vTaskPriorityInherit+0x8c>
    5b82:	68fb      	ldr	r3, [r7, #12]
    5b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b86:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8e:	601a      	str	r2, [r3, #0]
    5b90:	68fb      	ldr	r3, [r7, #12]
    5b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b94:	4613      	mov	r3, r2
    5b96:	009b      	lsls	r3, r3, #2
    5b98:	4413      	add	r3, r2
    5b9a:	009b      	lsls	r3, r3, #2
    5b9c:	f241 4214 	movw	r2, #5140	; 0x1414
    5ba0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ba4:	441a      	add	r2, r3
    5ba6:	68fb      	ldr	r3, [r7, #12]
    5ba8:	3304      	adds	r3, #4
    5baa:	4610      	mov	r0, r2
    5bac:	4619      	mov	r1, r3
    5bae:	f7fe faef 	bl	4190 <vListInsertEnd>
    5bb2:	e007      	b.n	5bc4 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5bb4:	f241 4310 	movw	r3, #5136	; 0x1410
    5bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bc0:	68fb      	ldr	r3, [r7, #12]
    5bc2:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5bc4:	3710      	adds	r7, #16
    5bc6:	46bd      	mov	sp, r7
    5bc8:	bd80      	pop	{r7, pc}
    5bca:	bf00      	nop

00005bcc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b084      	sub	sp, #16
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5bd4:	687b      	ldr	r3, [r7, #4]
    5bd6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d035      	beq.n	5c4a <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5be2:	68fb      	ldr	r3, [r7, #12]
    5be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5be6:	429a      	cmp	r2, r3
    5be8:	d02f      	beq.n	5c4a <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5bea:	68fb      	ldr	r3, [r7, #12]
    5bec:	3304      	adds	r3, #4
    5bee:	4618      	mov	r0, r3
    5bf0:	f7fe fb2e 	bl	4250 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5bfc:	68fb      	ldr	r3, [r7, #12]
    5bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c00:	f1c3 0205 	rsb	r2, r3, #5
    5c04:	68fb      	ldr	r3, [r7, #12]
    5c06:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5c08:	68fb      	ldr	r3, [r7, #12]
    5c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c0c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c14:	681b      	ldr	r3, [r3, #0]
    5c16:	429a      	cmp	r2, r3
    5c18:	d906      	bls.n	5c28 <vTaskPriorityDisinherit+0x5c>
    5c1a:	68fb      	ldr	r3, [r7, #12]
    5c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c1e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c26:	601a      	str	r2, [r3, #0]
    5c28:	68fb      	ldr	r3, [r7, #12]
    5c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c2c:	4613      	mov	r3, r2
    5c2e:	009b      	lsls	r3, r3, #2
    5c30:	4413      	add	r3, r2
    5c32:	009b      	lsls	r3, r3, #2
    5c34:	f241 4214 	movw	r2, #5140	; 0x1414
    5c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c3c:	441a      	add	r2, r3
    5c3e:	68fb      	ldr	r3, [r7, #12]
    5c40:	3304      	adds	r3, #4
    5c42:	4610      	mov	r0, r2
    5c44:	4619      	mov	r1, r3
    5c46:	f7fe faa3 	bl	4190 <vListInsertEnd>
			}
		}
	}
    5c4a:	3710      	adds	r7, #16
    5c4c:	46bd      	mov	sp, r7
    5c4e:	bd80      	pop	{r7, pc}

00005c50 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5c50:	b480      	push	{r7}
    5c52:	b083      	sub	sp, #12
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5c5c:	4618      	mov	r0, r3
    5c5e:	370c      	adds	r7, #12
    5c60:	46bd      	mov	sp, r7
    5c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c66:	4770      	bx	lr

00005c68 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5c68:	b480      	push	{r7}
    5c6a:	b083      	sub	sp, #12
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5c74:	4618      	mov	r0, r3
    5c76:	370c      	adds	r7, #12
    5c78:	46bd      	mov	sp, r7
    5c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7e:	4770      	bx	lr

00005c80 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c80:	b480      	push	{r7}
    5c82:	b083      	sub	sp, #12
    5c84:	af00      	add	r7, sp, #0
    5c86:	6078      	str	r0, [r7, #4]
    5c88:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	683a      	ldr	r2, [r7, #0]
    5c8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c90:	370c      	adds	r7, #12
    5c92:	46bd      	mov	sp, r7
    5c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c98:	4770      	bx	lr
    5c9a:	bf00      	nop

00005c9c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c9c:	b480      	push	{r7}
    5c9e:	b083      	sub	sp, #12
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
    5ca4:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	683a      	ldr	r2, [r7, #0]
    5caa:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5cac:	370c      	adds	r7, #12
    5cae:	46bd      	mov	sp, r7
    5cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb4:	4770      	bx	lr
    5cb6:	bf00      	nop

00005cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5cb8:	b480      	push	{r7}
    5cba:	b085      	sub	sp, #20
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	60f8      	str	r0, [r7, #12]
    5cc0:	60b9      	str	r1, [r7, #8]
    5cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5cc4:	68fb      	ldr	r3, [r7, #12]
    5cc6:	3b04      	subs	r3, #4
    5cc8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5cca:	68fb      	ldr	r3, [r7, #12]
    5ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	3b04      	subs	r3, #4
    5cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5cd8:	68ba      	ldr	r2, [r7, #8]
    5cda:	68fb      	ldr	r3, [r7, #12]
    5cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	3b04      	subs	r3, #4
    5ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5ce4:	68fb      	ldr	r3, [r7, #12]
    5ce6:	2200      	movs	r2, #0
    5ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5cea:	68fb      	ldr	r3, [r7, #12]
    5cec:	3b14      	subs	r3, #20
    5cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5cf0:	687a      	ldr	r2, [r7, #4]
    5cf2:	68fb      	ldr	r3, [r7, #12]
    5cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	3b20      	subs	r3, #32
    5cfa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5cfc:	68fb      	ldr	r3, [r7, #12]
}
    5cfe:	4618      	mov	r0, r3
    5d00:	3714      	adds	r7, #20
    5d02:	46bd      	mov	sp, r7
    5d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop

00005d0c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5d0c:	4b06      	ldr	r3, [pc, #24]	; (5d28 <pxCurrentTCBConst2>)
    5d0e:	6819      	ldr	r1, [r3, #0]
    5d10:	6808      	ldr	r0, [r1, #0]
    5d12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d16:	f380 8809 	msr	PSP, r0
    5d1a:	f04f 0000 	mov.w	r0, #0
    5d1e:	f380 8811 	msr	BASEPRI, r0
    5d22:	f04e 0e0d 	orr.w	lr, lr, #13
    5d26:	4770      	bx	lr

00005d28 <pxCurrentTCBConst2>:
    5d28:	20001410 	.word	0x20001410

00005d2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5d2c:	485d      	ldr	r0, [pc, #372]	; (5ea4 <prvSetupTimerInterrupt+0x2c>)
    5d2e:	6800      	ldr	r0, [r0, #0]
    5d30:	6800      	ldr	r0, [r0, #0]
    5d32:	f380 8808 	msr	MSP, r0
    5d36:	b662      	cpsie	i
    5d38:	df00      	svc	0
    5d3a:	bf00      	nop

00005d3c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5d40:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d44:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d48:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d4c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d50:	6812      	ldr	r2, [r2, #0]
    5d52:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5d56:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5d58:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d5c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d60:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d64:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d68:	6812      	ldr	r2, [r2, #0]
    5d6a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5d6e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5d70:	f000 f882 	bl	5e78 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5d74:	f240 5334 	movw	r3, #1332	; 0x534
    5d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d7c:	2200      	movs	r2, #0
    5d7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d80:	f7ff ffd4 	bl	5d2c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d84:	2300      	movs	r3, #0
}
    5d86:	4618      	mov	r0, r3
    5d88:	bd80      	pop	{r7, pc}
    5d8a:	bf00      	nop

00005d8c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d8c:	b480      	push	{r7}
    5d8e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d90:	46bd      	mov	sp, r7
    5d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d96:	4770      	bx	lr

00005d98 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d98:	b480      	push	{r7}
    5d9a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d9c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5da0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5da8:	601a      	str	r2, [r3, #0]
}
    5daa:	46bd      	mov	sp, r7
    5dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db0:	4770      	bx	lr
    5db2:	bf00      	nop

00005db4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5db4:	b480      	push	{r7}
    5db6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5db8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dbc:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5dc0:	f240 5334 	movw	r3, #1332	; 0x534
    5dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	1c5a      	adds	r2, r3, #1
    5dcc:	f240 5334 	movw	r3, #1332	; 0x534
    5dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd4:	601a      	str	r2, [r3, #0]
}
    5dd6:	46bd      	mov	sp, r7
    5dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ddc:	4770      	bx	lr
    5dde:	bf00      	nop

00005de0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5de0:	b480      	push	{r7}
    5de2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5de4:	f240 5334 	movw	r3, #1332	; 0x534
    5de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	1e5a      	subs	r2, r3, #1
    5df0:	f240 5334 	movw	r3, #1332	; 0x534
    5df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5dfa:	f240 5334 	movw	r3, #1332	; 0x534
    5dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e02:	681b      	ldr	r3, [r3, #0]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d103      	bne.n	5e10 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5e08:	f04f 0000 	mov.w	r0, #0
    5e0c:	f380 8811 	msr	BASEPRI, r0
	}
}
    5e10:	46bd      	mov	sp, r7
    5e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e16:	4770      	bx	lr

00005e18 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5e18:	f3ef 8009 	mrs	r0, PSP
    5e1c:	4b0c      	ldr	r3, [pc, #48]	; (5e50 <pxCurrentTCBConst>)
    5e1e:	681a      	ldr	r2, [r3, #0]
    5e20:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e24:	6010      	str	r0, [r2, #0]
    5e26:	e92d 4008 	stmdb	sp!, {r3, lr}
    5e2a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e2e:	f380 8811 	msr	BASEPRI, r0
    5e32:	f7ff fba1 	bl	5578 <vTaskSwitchContext>
    5e36:	f04f 0000 	mov.w	r0, #0
    5e3a:	f380 8811 	msr	BASEPRI, r0
    5e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e42:	6819      	ldr	r1, [r3, #0]
    5e44:	6808      	ldr	r0, [r1, #0]
    5e46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e4a:	f380 8809 	msr	PSP, r0
    5e4e:	4770      	bx	lr

00005e50 <pxCurrentTCBConst>:
    5e50:	20001410 	.word	0x20001410

00005e54 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b082      	sub	sp, #8
    5e58:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5e5a:	2300      	movs	r3, #0
    5e5c:	607b      	str	r3, [r7, #4]
    5e5e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e62:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5e66:	f7ff faa9 	bl	53bc <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5e6a:	f04f 0000 	mov.w	r0, #0
    5e6e:	f380 8811 	msr	BASEPRI, r0
}
    5e72:	3708      	adds	r7, #8
    5e74:	46bd      	mov	sp, r7
    5e76:	bd80      	pop	{r7, pc}

00005e78 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e78:	b480      	push	{r7}
    5e7a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e7c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e80:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e84:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e88:	f2c0 0203 	movt	r2, #3
    5e8c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e8e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e92:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e96:	2207      	movs	r2, #7
    5e98:	601a      	str	r2, [r3, #0]
}
    5e9a:	46bd      	mov	sp, r7
    5e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea0:	4770      	bx	lr
    5ea2:	0000      	.short	0x0000
    5ea4:	e000ed08 	.word	0xe000ed08

00005ea8 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b08a      	sub	sp, #40	; 0x28
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5eb0:	2300      	movs	r3, #0
    5eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5eb4:	f7ff f9a0 	bl	51f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5eb8:	f24c 5320 	movw	r3, #50464	; 0xc520
    5ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d130      	bne.n	5f28 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5ec6:	f24c 5310 	movw	r3, #50448	; 0xc510
    5eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ece:	f241 5210 	movw	r2, #5392	; 0x1510
    5ed2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ed6:	601a      	str	r2, [r3, #0]
    5ed8:	f24c 5310 	movw	r3, #50448	; 0xc510
    5edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee0:	2200      	movs	r2, #0
    5ee2:	605a      	str	r2, [r3, #4]
    5ee4:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eec:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ef0:	605a      	str	r2, [r3, #4]
    5ef2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5efa:	2200      	movs	r2, #0
    5efc:	601a      	str	r2, [r3, #0]
    5efe:	f241 5310 	movw	r3, #5392	; 0x1510
    5f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f06:	617b      	str	r3, [r7, #20]
    5f08:	697b      	ldr	r3, [r7, #20]
    5f0a:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f0e:	605a      	str	r2, [r3, #4]
    5f10:	697a      	ldr	r2, [r7, #20]
    5f12:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1a:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5f1c:	f24c 5320 	movw	r3, #50464	; 0xc520
    5f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f24:	2201      	movs	r2, #1
    5f26:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d00d      	beq.n	5f4a <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5f2e:	2310      	movs	r3, #16
    5f30:	687a      	ldr	r2, [r7, #4]
    5f32:	4413      	add	r3, r2
    5f34:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	f003 0307 	and.w	r3, r3, #7
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d004      	beq.n	5f4a <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	f023 0307 	bic.w	r3, r3, #7
    5f46:	3308      	adds	r3, #8
    5f48:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d068      	beq.n	6022 <pvPortMalloc+0x17a>
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5f56:	d264      	bcs.n	6022 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5f58:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f60:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5f62:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6a:	681b      	ldr	r3, [r3, #0]
    5f6c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f6e:	e004      	b.n	5f7a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f72:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f7c:	685a      	ldr	r2, [r3, #4]
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	429a      	cmp	r2, r3
    5f82:	d203      	bcs.n	5f8c <pvPortMalloc+0xe4>
    5f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f86:	681b      	ldr	r3, [r3, #0]
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d1f1      	bne.n	5f70 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f8e:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f96:	429a      	cmp	r2, r3
    5f98:	d043      	beq.n	6022 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f9a:	6a3b      	ldr	r3, [r7, #32]
    5f9c:	681a      	ldr	r2, [r3, #0]
    5f9e:	2310      	movs	r3, #16
    5fa0:	4413      	add	r3, r2
    5fa2:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	6a3b      	ldr	r3, [r7, #32]
    5faa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fae:	685a      	ldr	r2, [r3, #4]
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	1ad2      	subs	r2, r2, r3
    5fb4:	2310      	movs	r3, #16
    5fb6:	005b      	lsls	r3, r3, #1
    5fb8:	429a      	cmp	r2, r3
    5fba:	d925      	bls.n	6008 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	4413      	add	r3, r2
    5fc2:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fc6:	685a      	ldr	r2, [r3, #4]
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	1ad2      	subs	r2, r2, r3
    5fcc:	693b      	ldr	r3, [r7, #16]
    5fce:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fd2:	687a      	ldr	r2, [r7, #4]
    5fd4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5fd6:	693b      	ldr	r3, [r7, #16]
    5fd8:	685b      	ldr	r3, [r3, #4]
    5fda:	60fb      	str	r3, [r7, #12]
    5fdc:	f24c 5310 	movw	r3, #50448	; 0xc510
    5fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe4:	61bb      	str	r3, [r7, #24]
    5fe6:	e002      	b.n	5fee <pvPortMalloc+0x146>
    5fe8:	69bb      	ldr	r3, [r7, #24]
    5fea:	681b      	ldr	r3, [r3, #0]
    5fec:	61bb      	str	r3, [r7, #24]
    5fee:	69bb      	ldr	r3, [r7, #24]
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	685a      	ldr	r2, [r3, #4]
    5ff4:	68fb      	ldr	r3, [r7, #12]
    5ff6:	429a      	cmp	r2, r3
    5ff8:	d3f6      	bcc.n	5fe8 <pvPortMalloc+0x140>
    5ffa:	69bb      	ldr	r3, [r7, #24]
    5ffc:	681a      	ldr	r2, [r3, #0]
    5ffe:	693b      	ldr	r3, [r7, #16]
    6000:	601a      	str	r2, [r3, #0]
    6002:	69bb      	ldr	r3, [r7, #24]
    6004:	693a      	ldr	r2, [r7, #16]
    6006:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    6008:	f240 5338 	movw	r3, #1336	; 0x538
    600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6010:	681a      	ldr	r2, [r3, #0]
    6012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6014:	685b      	ldr	r3, [r3, #4]
    6016:	1ad2      	subs	r2, r2, r3
    6018:	f240 5338 	movw	r3, #1336	; 0x538
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    6022:	f7ff f8fb 	bl	521c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    6026:	69fb      	ldr	r3, [r7, #28]
}
    6028:	4618      	mov	r0, r3
    602a:	3728      	adds	r7, #40	; 0x28
    602c:	46bd      	mov	sp, r7
    602e:	bd80      	pop	{r7, pc}

00006030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    6030:	b580      	push	{r7, lr}
    6032:	b086      	sub	sp, #24
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	2b00      	cmp	r3, #0
    6040:	d030      	beq.n	60a4 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    6042:	2310      	movs	r3, #16
    6044:	425b      	negs	r3, r3
    6046:	693a      	ldr	r2, [r7, #16]
    6048:	4413      	add	r3, r2
    604a:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    604c:	693b      	ldr	r3, [r7, #16]
    604e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    6050:	f7ff f8d2 	bl	51f8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    6054:	68fb      	ldr	r3, [r7, #12]
    6056:	685b      	ldr	r3, [r3, #4]
    6058:	60bb      	str	r3, [r7, #8]
    605a:	f24c 5310 	movw	r3, #50448	; 0xc510
    605e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6062:	617b      	str	r3, [r7, #20]
    6064:	e002      	b.n	606c <vPortFree+0x3c>
    6066:	697b      	ldr	r3, [r7, #20]
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	617b      	str	r3, [r7, #20]
    606c:	697b      	ldr	r3, [r7, #20]
    606e:	681b      	ldr	r3, [r3, #0]
    6070:	685a      	ldr	r2, [r3, #4]
    6072:	68bb      	ldr	r3, [r7, #8]
    6074:	429a      	cmp	r2, r3
    6076:	d3f6      	bcc.n	6066 <vPortFree+0x36>
    6078:	697b      	ldr	r3, [r7, #20]
    607a:	681a      	ldr	r2, [r3, #0]
    607c:	68fb      	ldr	r3, [r7, #12]
    607e:	601a      	str	r2, [r3, #0]
    6080:	697b      	ldr	r3, [r7, #20]
    6082:	68fa      	ldr	r2, [r7, #12]
    6084:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    6086:	68fb      	ldr	r3, [r7, #12]
    6088:	685a      	ldr	r2, [r3, #4]
    608a:	f240 5338 	movw	r3, #1336	; 0x538
    608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6092:	681b      	ldr	r3, [r3, #0]
    6094:	441a      	add	r2, r3
    6096:	f240 5338 	movw	r3, #1336	; 0x538
    609a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    60a0:	f7ff f8bc 	bl	521c <xTaskResumeAll>
	}
}
    60a4:	3718      	adds	r7, #24
    60a6:	46bd      	mov	sp, r7
    60a8:	bd80      	pop	{r7, pc}
    60aa:	bf00      	nop

000060ac <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    60ac:	b480      	push	{r7}
    60ae:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    60b0:	f240 5338 	movw	r3, #1336	; 0x538
    60b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b8:	681b      	ldr	r3, [r3, #0]
}
    60ba:	4618      	mov	r0, r3
    60bc:	46bd      	mov	sp, r7
    60be:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c2:	4770      	bx	lr

000060c4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    60c4:	b480      	push	{r7}
    60c6:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    60c8:	46bd      	mov	sp, r7
    60ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ce:	4770      	bx	lr

000060d0 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    60d0:	b580      	push	{r7, lr}
    60d2:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    60d4:	f24c 5342 	movw	r3, #50498	; 0xc542
    60d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	2b00      	cmp	r3, #0
    60e0:	f040 815d 	bne.w	639e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    60e4:	f24c 532a 	movw	r3, #50474	; 0xc52a
    60e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ec:	881b      	ldrh	r3, [r3, #0]
    60ee:	2b09      	cmp	r3, #9
    60f0:	f201 8145 	bhi.w	737e <ground_calibrate+0x12ae>
    60f4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    60f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fc:	781b      	ldrb	r3, [r3, #0]
    60fe:	2b01      	cmp	r3, #1
    6100:	f041 813d 	bne.w	737e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    6104:	f24c 5342 	movw	r3, #50498	; 0xc542
    6108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610c:	2201      	movs	r2, #1
    610e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6110:	f24c 5349 	movw	r3, #50505	; 0xc549
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	781a      	ldrb	r2, [r3, #0]
    611a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	b2db      	uxtb	r3, r3
    6126:	429a      	cmp	r2, r3
    6128:	d313      	bcc.n	6152 <ground_calibrate+0x82>
    612a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    612e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	b2db      	uxtb	r3, r3
    6136:	461a      	mov	r2, r3
    6138:	f24c 5349 	movw	r3, #50505	; 0xc549
    613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	1ad3      	subs	r3, r2, r3
    6144:	33ff      	adds	r3, #255	; 0xff
    6146:	2b04      	cmp	r3, #4
    6148:	bfd4      	ite	le
    614a:	2300      	movle	r3, #0
    614c:	2301      	movgt	r3, #1
    614e:	b2db      	uxtb	r3, r3
    6150:	e011      	b.n	6176 <ground_calibrate+0xa6>
    6152:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615a:	781b      	ldrb	r3, [r3, #0]
    615c:	b2db      	uxtb	r3, r3
    615e:	461a      	mov	r2, r3
    6160:	f24c 5349 	movw	r3, #50505	; 0xc549
    6164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	1ad3      	subs	r3, r2, r3
    616c:	2b04      	cmp	r3, #4
    616e:	bfd4      	ite	le
    6170:	2300      	movle	r3, #0
    6172:	2301      	movgt	r3, #1
    6174:	b2db      	uxtb	r3, r3
    6176:	2b00      	cmp	r3, #0
    6178:	f000 8103 	beq.w	6382 <ground_calibrate+0x2b2>
    617c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	461a      	mov	r2, r3
    6188:	f24c 534c 	movw	r3, #50508	; 0xc54c
    618c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6190:	2105      	movs	r1, #5
    6192:	5499      	strb	r1, [r3, r2]
    6194:	f24c 5349 	movw	r3, #50505	; 0xc549
    6198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	3301      	adds	r3, #1
    61a0:	b2da      	uxtb	r2, r3
    61a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    61a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61aa:	701a      	strb	r2, [r3, #0]
    61ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    61b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	2bff      	cmp	r3, #255	; 0xff
    61b8:	d105      	bne.n	61c6 <ground_calibrate+0xf6>
    61ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    61be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c2:	2200      	movs	r2, #0
    61c4:	701a      	strb	r2, [r3, #0]
    61c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ce:	781b      	ldrb	r3, [r3, #0]
    61d0:	461a      	mov	r2, r3
    61d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61da:	2102      	movs	r1, #2
    61dc:	5499      	strb	r1, [r3, r2]
    61de:	f24c 5349 	movw	r3, #50505	; 0xc549
    61e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	3301      	adds	r3, #1
    61ea:	b2da      	uxtb	r2, r3
    61ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    61f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f4:	701a      	strb	r2, [r3, #0]
    61f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	2bff      	cmp	r3, #255	; 0xff
    6202:	d105      	bne.n	6210 <ground_calibrate+0x140>
    6204:	f24c 5349 	movw	r3, #50505	; 0xc549
    6208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620c:	2200      	movs	r2, #0
    620e:	701a      	strb	r2, [r3, #0]
    6210:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	2202      	movs	r2, #2
    621a:	701a      	strb	r2, [r3, #0]
    621c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6224:	2202      	movs	r2, #2
    6226:	701a      	strb	r2, [r3, #0]
    6228:	f24c 5349 	movw	r3, #50505	; 0xc549
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	781b      	ldrb	r3, [r3, #0]
    6232:	461a      	mov	r2, r3
    6234:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623c:	7819      	ldrb	r1, [r3, #0]
    623e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6246:	5499      	strb	r1, [r3, r2]
    6248:	f24c 5349 	movw	r3, #50505	; 0xc549
    624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	3301      	adds	r3, #1
    6254:	b2da      	uxtb	r2, r3
    6256:	f24c 5349 	movw	r3, #50505	; 0xc549
    625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625e:	701a      	strb	r2, [r3, #0]
    6260:	f24c 5349 	movw	r3, #50505	; 0xc549
    6264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	2bff      	cmp	r3, #255	; 0xff
    626c:	d105      	bne.n	627a <ground_calibrate+0x1aa>
    626e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6276:	2200      	movs	r2, #0
    6278:	701a      	strb	r2, [r3, #0]
    627a:	f24c 5349 	movw	r3, #50505	; 0xc549
    627e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6282:	781b      	ldrb	r3, [r3, #0]
    6284:	461a      	mov	r2, r3
    6286:	f24c 634e 	movw	r3, #50766	; 0xc64e
    628a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628e:	7819      	ldrb	r1, [r3, #0]
    6290:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6298:	5499      	strb	r1, [r3, r2]
    629a:	f24c 5349 	movw	r3, #50505	; 0xc549
    629e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a2:	781b      	ldrb	r3, [r3, #0]
    62a4:	3301      	adds	r3, #1
    62a6:	b2da      	uxtb	r2, r3
    62a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    62b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	2bff      	cmp	r3, #255	; 0xff
    62be:	d105      	bne.n	62cc <ground_calibrate+0x1fc>
    62c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	2200      	movs	r2, #0
    62ca:	701a      	strb	r2, [r3, #0]
    62cc:	f242 0339 	movw	r3, #8249	; 0x2039
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	b2db      	uxtb	r3, r3
    62d8:	f003 0310 	and.w	r3, r3, #16
    62dc:	2b00      	cmp	r3, #0
    62de:	f041 804e 	bne.w	737e <ground_calibrate+0x12ae>
    62e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ea:	781b      	ldrb	r3, [r3, #0]
    62ec:	b2db      	uxtb	r3, r3
    62ee:	461a      	mov	r2, r3
    62f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	5c9a      	ldrb	r2, [r3, r2]
    62fa:	f24c 634b 	movw	r3, #50763	; 0xc64b
    62fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6302:	701a      	strb	r2, [r3, #0]
    6304:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630c:	2200      	movs	r2, #0
    630e:	701a      	strb	r2, [r3, #0]
    6310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6318:	781b      	ldrb	r3, [r3, #0]
    631a:	b2db      	uxtb	r3, r3
    631c:	3301      	adds	r3, #1
    631e:	b2da      	uxtb	r2, r3
    6320:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	701a      	strb	r2, [r3, #0]
    632a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    632e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6332:	781b      	ldrb	r3, [r3, #0]
    6334:	b2db      	uxtb	r3, r3
    6336:	2bff      	cmp	r3, #255	; 0xff
    6338:	d105      	bne.n	6346 <ground_calibrate+0x276>
    633a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6342:	2200      	movs	r2, #0
    6344:	701a      	strb	r2, [r3, #0]
    6346:	f242 0338 	movw	r3, #8248	; 0x2038
    634a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634e:	f242 0238 	movw	r2, #8248	; 0x2038
    6352:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6356:	7812      	ldrb	r2, [r2, #0]
    6358:	b2d2      	uxtb	r2, r2
    635a:	f042 0201 	orr.w	r2, r2, #1
    635e:	b2d2      	uxtb	r2, r2
    6360:	701a      	strb	r2, [r3, #0]
    6362:	f242 0339 	movw	r3, #8249	; 0x2039
    6366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636a:	f242 0239 	movw	r2, #8249	; 0x2039
    636e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6372:	7812      	ldrb	r2, [r2, #0]
    6374:	b2d2      	uxtb	r2, r2
    6376:	f042 0210 	orr.w	r2, r2, #16
    637a:	b2d2      	uxtb	r2, r2
    637c:	701a      	strb	r2, [r3, #0]
    637e:	f000 bffe 	b.w	737e <ground_calibrate+0x12ae>
    6382:	f24c 5348 	movw	r3, #50504	; 0xc548
    6386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	3301      	adds	r3, #1
    638e:	b2da      	uxtb	r2, r3
    6390:	f24c 5348 	movw	r3, #50504	; 0xc548
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	701a      	strb	r2, [r3, #0]
    639a:	f000 bff0 	b.w	737e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    639e:	f24c 5342 	movw	r3, #50498	; 0xc542
    63a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a6:	781b      	ldrb	r3, [r3, #0]
    63a8:	2b01      	cmp	r3, #1
    63aa:	f040 87e8 	bne.w	737e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    63ae:	f24c 6350 	movw	r3, #50768	; 0xc650
    63b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b6:	885b      	ldrh	r3, [r3, #2]
    63b8:	b21b      	sxth	r3, r3
    63ba:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    63be:	db09      	blt.n	63d4 <ground_calibrate+0x304>
    63c0:	f24c 6350 	movw	r3, #50768	; 0xc650
    63c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c8:	885b      	ldrh	r3, [r3, #2]
    63ca:	b21b      	sxth	r3, r3
    63cc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    63d0:	f340 87d5 	ble.w	737e <ground_calibrate+0x12ae>
      ir_gain_calib();
    63d4:	f00b fd54 	bl	11e80 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    63d8:	f240 5348 	movw	r3, #1352	; 0x548
    63dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e0:	681a      	ldr	r2, [r3, #0]
    63e2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    63ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	781a      	ldrb	r2, [r3, #0]
    63f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	781b      	ldrb	r3, [r3, #0]
    6400:	b2db      	uxtb	r3, r3
    6402:	429a      	cmp	r2, r3
    6404:	d313      	bcc.n	642e <ground_calibrate+0x35e>
    6406:	f24c 534a 	movw	r3, #50506	; 0xc54a
    640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640e:	781b      	ldrb	r3, [r3, #0]
    6410:	b2db      	uxtb	r3, r3
    6412:	461a      	mov	r2, r3
    6414:	f24c 5349 	movw	r3, #50505	; 0xc549
    6418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641c:	781b      	ldrb	r3, [r3, #0]
    641e:	1ad3      	subs	r3, r2, r3
    6420:	33ff      	adds	r3, #255	; 0xff
    6422:	2b14      	cmp	r3, #20
    6424:	bfd4      	ite	le
    6426:	2300      	movle	r3, #0
    6428:	2301      	movgt	r3, #1
    642a:	b2db      	uxtb	r3, r3
    642c:	e011      	b.n	6452 <ground_calibrate+0x382>
    642e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	b2db      	uxtb	r3, r3
    643a:	461a      	mov	r2, r3
    643c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	1ad3      	subs	r3, r2, r3
    6448:	2b14      	cmp	r3, #20
    644a:	bfd4      	ite	le
    644c:	2300      	movle	r3, #0
    644e:	2301      	movgt	r3, #1
    6450:	b2db      	uxtb	r3, r3
    6452:	2b00      	cmp	r3, #0
    6454:	f000 85a6 	beq.w	6fa4 <ground_calibrate+0xed4>
    6458:	f24c 5349 	movw	r3, #50505	; 0xc549
    645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	461a      	mov	r2, r3
    6464:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646c:	2105      	movs	r1, #5
    646e:	5499      	strb	r1, [r3, r2]
    6470:	f24c 5349 	movw	r3, #50505	; 0xc549
    6474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6478:	781b      	ldrb	r3, [r3, #0]
    647a:	3301      	adds	r3, #1
    647c:	b2da      	uxtb	r2, r3
    647e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	701a      	strb	r2, [r3, #0]
    6488:	f24c 5349 	movw	r3, #50505	; 0xc549
    648c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6490:	781b      	ldrb	r3, [r3, #0]
    6492:	2bff      	cmp	r3, #255	; 0xff
    6494:	d105      	bne.n	64a2 <ground_calibrate+0x3d2>
    6496:	f24c 5349 	movw	r3, #50505	; 0xc549
    649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649e:	2200      	movs	r2, #0
    64a0:	701a      	strb	r2, [r3, #0]
    64a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    64a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64aa:	781b      	ldrb	r3, [r3, #0]
    64ac:	461a      	mov	r2, r3
    64ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b6:	2105      	movs	r1, #5
    64b8:	5499      	strb	r1, [r3, r2]
    64ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    64be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	3301      	adds	r3, #1
    64c6:	b2da      	uxtb	r2, r3
    64c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d0:	701a      	strb	r2, [r3, #0]
    64d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    64d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	2bff      	cmp	r3, #255	; 0xff
    64de:	d105      	bne.n	64ec <ground_calibrate+0x41c>
    64e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    64e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e8:	2200      	movs	r2, #0
    64ea:	701a      	strb	r2, [r3, #0]
    64ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f4:	2205      	movs	r2, #5
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6500:	2205      	movs	r2, #5
    6502:	701a      	strb	r2, [r3, #0]
    6504:	f24c 5349 	movw	r3, #50505	; 0xc549
    6508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	461a      	mov	r2, r3
    6510:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6518:	7819      	ldrb	r1, [r3, #0]
    651a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    651e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6522:	5499      	strb	r1, [r3, r2]
    6524:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652c:	781a      	ldrb	r2, [r3, #0]
    652e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	781b      	ldrb	r3, [r3, #0]
    6538:	4413      	add	r3, r2
    653a:	b2da      	uxtb	r2, r3
    653c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6544:	701a      	strb	r2, [r3, #0]
    6546:	f24c 634e 	movw	r3, #50766	; 0xc64e
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781a      	ldrb	r2, [r3, #0]
    6550:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	4413      	add	r3, r2
    655c:	b2da      	uxtb	r2, r3
    655e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	701a      	strb	r2, [r3, #0]
    6568:	f24c 5349 	movw	r3, #50505	; 0xc549
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	3301      	adds	r3, #1
    6574:	b2da      	uxtb	r2, r3
    6576:	f24c 5349 	movw	r3, #50505	; 0xc549
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f24c 5349 	movw	r3, #50505	; 0xc549
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	2bff      	cmp	r3, #255	; 0xff
    658c:	d105      	bne.n	659a <ground_calibrate+0x4ca>
    658e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	2200      	movs	r2, #0
    6598:	701a      	strb	r2, [r3, #0]
    659a:	f24c 5349 	movw	r3, #50505	; 0xc549
    659e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a2:	781b      	ldrb	r3, [r3, #0]
    65a4:	461a      	mov	r2, r3
    65a6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	7859      	ldrb	r1, [r3, #1]
    65b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	5499      	strb	r1, [r3, r2]
    65ba:	4bd2      	ldr	r3, [pc, #840]	; (6904 <ground_calibrate+0x834>)
    65bc:	781a      	ldrb	r2, [r3, #0]
    65be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	4413      	add	r3, r2
    65ca:	b2da      	uxtb	r2, r3
    65cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d4:	701a      	strb	r2, [r3, #0]
    65d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	781a      	ldrb	r2, [r3, #0]
    65e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	4413      	add	r3, r2
    65ec:	b2da      	uxtb	r2, r3
    65ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	701a      	strb	r2, [r3, #0]
    65f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6600:	781b      	ldrb	r3, [r3, #0]
    6602:	3301      	adds	r3, #1
    6604:	b2da      	uxtb	r2, r3
    6606:	f24c 5349 	movw	r3, #50505	; 0xc549
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	701a      	strb	r2, [r3, #0]
    6610:	f24c 5349 	movw	r3, #50505	; 0xc549
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	2bff      	cmp	r3, #255	; 0xff
    661c:	d105      	bne.n	662a <ground_calibrate+0x55a>
    661e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	2200      	movs	r2, #0
    6628:	701a      	strb	r2, [r3, #0]
    662a:	f24c 5349 	movw	r3, #50505	; 0xc549
    662e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6632:	781b      	ldrb	r3, [r3, #0]
    6634:	461a      	mov	r2, r3
    6636:	f64c 3340 	movw	r3, #52032	; 0xcb40
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	7899      	ldrb	r1, [r3, #2]
    6640:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6648:	5499      	strb	r1, [r3, r2]
    664a:	4baf      	ldr	r3, [pc, #700]	; (6908 <ground_calibrate+0x838>)
    664c:	781a      	ldrb	r2, [r3, #0]
    664e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	781b      	ldrb	r3, [r3, #0]
    6658:	4413      	add	r3, r2
    665a:	b2da      	uxtb	r2, r3
    665c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6664:	701a      	strb	r2, [r3, #0]
    6666:	f24c 634e 	movw	r3, #50766	; 0xc64e
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	781a      	ldrb	r2, [r3, #0]
    6670:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	4413      	add	r3, r2
    667c:	b2da      	uxtb	r2, r3
    667e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	701a      	strb	r2, [r3, #0]
    6688:	f24c 5349 	movw	r3, #50505	; 0xc549
    668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	3301      	adds	r3, #1
    6694:	b2da      	uxtb	r2, r3
    6696:	f24c 5349 	movw	r3, #50505	; 0xc549
    669a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669e:	701a      	strb	r2, [r3, #0]
    66a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	2bff      	cmp	r3, #255	; 0xff
    66ac:	d105      	bne.n	66ba <ground_calibrate+0x5ea>
    66ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    66b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b6:	2200      	movs	r2, #0
    66b8:	701a      	strb	r2, [r3, #0]
    66ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    66be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c2:	781b      	ldrb	r3, [r3, #0]
    66c4:	461a      	mov	r2, r3
    66c6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	78d9      	ldrb	r1, [r3, #3]
    66d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    66d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d8:	5499      	strb	r1, [r3, r2]
    66da:	4b8c      	ldr	r3, [pc, #560]	; (690c <ground_calibrate+0x83c>)
    66dc:	781a      	ldrb	r2, [r3, #0]
    66de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	781b      	ldrb	r3, [r3, #0]
    66e8:	4413      	add	r3, r2
    66ea:	b2da      	uxtb	r2, r3
    66ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f4:	701a      	strb	r2, [r3, #0]
    66f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fe:	781a      	ldrb	r2, [r3, #0]
    6700:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	4413      	add	r3, r2
    670c:	b2da      	uxtb	r2, r3
    670e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6716:	701a      	strb	r2, [r3, #0]
    6718:	f24c 5349 	movw	r3, #50505	; 0xc549
    671c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6720:	781b      	ldrb	r3, [r3, #0]
    6722:	3301      	adds	r3, #1
    6724:	b2da      	uxtb	r2, r3
    6726:	f24c 5349 	movw	r3, #50505	; 0xc549
    672a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672e:	701a      	strb	r2, [r3, #0]
    6730:	f24c 5349 	movw	r3, #50505	; 0xc549
    6734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6738:	781b      	ldrb	r3, [r3, #0]
    673a:	2bff      	cmp	r3, #255	; 0xff
    673c:	d105      	bne.n	674a <ground_calibrate+0x67a>
    673e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6746:	2200      	movs	r2, #0
    6748:	701a      	strb	r2, [r3, #0]
    674a:	f24c 5349 	movw	r3, #50505	; 0xc549
    674e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6752:	781b      	ldrb	r3, [r3, #0]
    6754:	461a      	mov	r2, r3
    6756:	f64c 3344 	movw	r3, #52036	; 0xcb44
    675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675e:	7819      	ldrb	r1, [r3, #0]
    6760:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	5499      	strb	r1, [r3, r2]
    676a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    676e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6772:	781a      	ldrb	r2, [r3, #0]
    6774:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	4413      	add	r3, r2
    6780:	b2da      	uxtb	r2, r3
    6782:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678a:	701a      	strb	r2, [r3, #0]
    678c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	781a      	ldrb	r2, [r3, #0]
    6796:	f24c 634d 	movw	r3, #50765	; 0xc64d
    679a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	4413      	add	r3, r2
    67a2:	b2da      	uxtb	r2, r3
    67a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	701a      	strb	r2, [r3, #0]
    67ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	3301      	adds	r3, #1
    67ba:	b2da      	uxtb	r2, r3
    67bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	701a      	strb	r2, [r3, #0]
    67c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	2bff      	cmp	r3, #255	; 0xff
    67d2:	d105      	bne.n	67e0 <ground_calibrate+0x710>
    67d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	2200      	movs	r2, #0
    67de:	701a      	strb	r2, [r3, #0]
    67e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    67e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	461a      	mov	r2, r3
    67ec:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	7859      	ldrb	r1, [r3, #1]
    67f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	5499      	strb	r1, [r3, r2]
    6800:	4b43      	ldr	r3, [pc, #268]	; (6910 <ground_calibrate+0x840>)
    6802:	781a      	ldrb	r2, [r3, #0]
    6804:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	4413      	add	r3, r2
    6810:	b2da      	uxtb	r2, r3
    6812:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681a:	701a      	strb	r2, [r3, #0]
    681c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781a      	ldrb	r2, [r3, #0]
    6826:	f24c 634d 	movw	r3, #50765	; 0xc64d
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	4413      	add	r3, r2
    6832:	b2da      	uxtb	r2, r3
    6834:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	701a      	strb	r2, [r3, #0]
    683e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	3301      	adds	r3, #1
    684a:	b2da      	uxtb	r2, r3
    684c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	701a      	strb	r2, [r3, #0]
    6856:	f24c 5349 	movw	r3, #50505	; 0xc549
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	2bff      	cmp	r3, #255	; 0xff
    6862:	d105      	bne.n	6870 <ground_calibrate+0x7a0>
    6864:	f24c 5349 	movw	r3, #50505	; 0xc549
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	2200      	movs	r2, #0
    686e:	701a      	strb	r2, [r3, #0]
    6870:	f24c 5349 	movw	r3, #50505	; 0xc549
    6874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	461a      	mov	r2, r3
    687c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	7899      	ldrb	r1, [r3, #2]
    6886:	f24c 534c 	movw	r3, #50508	; 0xc54c
    688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688e:	5499      	strb	r1, [r3, r2]
    6890:	4b20      	ldr	r3, [pc, #128]	; (6914 <ground_calibrate+0x844>)
    6892:	781a      	ldrb	r2, [r3, #0]
    6894:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	4413      	add	r3, r2
    68a0:	b2da      	uxtb	r2, r3
    68a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68aa:	701a      	strb	r2, [r3, #0]
    68ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	781a      	ldrb	r2, [r3, #0]
    68b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	4413      	add	r3, r2
    68c2:	b2da      	uxtb	r2, r3
    68c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	701a      	strb	r2, [r3, #0]
    68ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    68d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d6:	781b      	ldrb	r3, [r3, #0]
    68d8:	3301      	adds	r3, #1
    68da:	b2da      	uxtb	r2, r3
    68dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	701a      	strb	r2, [r3, #0]
    68e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	781b      	ldrb	r3, [r3, #0]
    68f0:	2bff      	cmp	r3, #255	; 0xff
    68f2:	d111      	bne.n	6918 <ground_calibrate+0x848>
    68f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fc:	2200      	movs	r2, #0
    68fe:	701a      	strb	r2, [r3, #0]
    6900:	e00a      	b.n	6918 <ground_calibrate+0x848>
    6902:	bf00      	nop
    6904:	2004cb41 	.word	0x2004cb41
    6908:	2004cb42 	.word	0x2004cb42
    690c:	2004cb43 	.word	0x2004cb43
    6910:	2004cb45 	.word	0x2004cb45
    6914:	2004cb46 	.word	0x2004cb46
    6918:	f24c 5349 	movw	r3, #50505	; 0xc549
    691c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	461a      	mov	r2, r3
    6924:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692c:	78d9      	ldrb	r1, [r3, #3]
    692e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	5499      	strb	r1, [r3, r2]
    6938:	4bd3      	ldr	r3, [pc, #844]	; (6c88 <ground_calibrate+0xbb8>)
    693a:	781a      	ldrb	r2, [r3, #0]
    693c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	4413      	add	r3, r2
    6948:	b2da      	uxtb	r2, r3
    694a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    694e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6952:	701a      	strb	r2, [r3, #0]
    6954:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695c:	781a      	ldrb	r2, [r3, #0]
    695e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6966:	781b      	ldrb	r3, [r3, #0]
    6968:	4413      	add	r3, r2
    696a:	b2da      	uxtb	r2, r3
    696c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6974:	701a      	strb	r2, [r3, #0]
    6976:	f24c 5349 	movw	r3, #50505	; 0xc549
    697a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697e:	781b      	ldrb	r3, [r3, #0]
    6980:	3301      	adds	r3, #1
    6982:	b2da      	uxtb	r2, r3
    6984:	f24c 5349 	movw	r3, #50505	; 0xc549
    6988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698c:	701a      	strb	r2, [r3, #0]
    698e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6996:	781b      	ldrb	r3, [r3, #0]
    6998:	2bff      	cmp	r3, #255	; 0xff
    699a:	d105      	bne.n	69a8 <ground_calibrate+0x8d8>
    699c:	f24c 5349 	movw	r3, #50505	; 0xc549
    69a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a4:	2200      	movs	r2, #0
    69a6:	701a      	strb	r2, [r3, #0]
    69a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    69ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b0:	781b      	ldrb	r3, [r3, #0]
    69b2:	461a      	mov	r2, r3
    69b4:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69bc:	7819      	ldrb	r1, [r3, #0]
    69be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	5499      	strb	r1, [r3, r2]
    69c8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d0:	781a      	ldrb	r2, [r3, #0]
    69d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	4413      	add	r3, r2
    69de:	b2da      	uxtb	r2, r3
    69e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e8:	701a      	strb	r2, [r3, #0]
    69ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781a      	ldrb	r2, [r3, #0]
    69f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	4413      	add	r3, r2
    6a00:	b2da      	uxtb	r2, r3
    6a02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	701a      	strb	r2, [r3, #0]
    6a0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	3301      	adds	r3, #1
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	2bff      	cmp	r3, #255	; 0xff
    6a30:	d105      	bne.n	6a3e <ground_calibrate+0x96e>
    6a32:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	2200      	movs	r2, #0
    6a3c:	701a      	strb	r2, [r3, #0]
    6a3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	461a      	mov	r2, r3
    6a4a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	7859      	ldrb	r1, [r3, #1]
    6a54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	5499      	strb	r1, [r3, r2]
    6a5e:	4b8b      	ldr	r3, [pc, #556]	; (6c8c <ground_calibrate+0xbbc>)
    6a60:	781a      	ldrb	r2, [r3, #0]
    6a62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	781b      	ldrb	r3, [r3, #0]
    6a6c:	4413      	add	r3, r2
    6a6e:	b2da      	uxtb	r2, r3
    6a70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a78:	701a      	strb	r2, [r3, #0]
    6a7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	781a      	ldrb	r2, [r3, #0]
    6a84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	781b      	ldrb	r3, [r3, #0]
    6a8e:	4413      	add	r3, r2
    6a90:	b2da      	uxtb	r2, r3
    6a92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	701a      	strb	r2, [r3, #0]
    6a9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	3301      	adds	r3, #1
    6aa8:	b2da      	uxtb	r2, r3
    6aaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	701a      	strb	r2, [r3, #0]
    6ab4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	2bff      	cmp	r3, #255	; 0xff
    6ac0:	d105      	bne.n	6ace <ground_calibrate+0x9fe>
    6ac2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	2200      	movs	r2, #0
    6acc:	701a      	strb	r2, [r3, #0]
    6ace:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	461a      	mov	r2, r3
    6ada:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	7899      	ldrb	r1, [r3, #2]
    6ae4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aec:	5499      	strb	r1, [r3, r2]
    6aee:	4b68      	ldr	r3, [pc, #416]	; (6c90 <ground_calibrate+0xbc0>)
    6af0:	781a      	ldrb	r2, [r3, #0]
    6af2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	4413      	add	r3, r2
    6afe:	b2da      	uxtb	r2, r3
    6b00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b08:	701a      	strb	r2, [r3, #0]
    6b0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	781a      	ldrb	r2, [r3, #0]
    6b14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1c:	781b      	ldrb	r3, [r3, #0]
    6b1e:	4413      	add	r3, r2
    6b20:	b2da      	uxtb	r2, r3
    6b22:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2a:	701a      	strb	r2, [r3, #0]
    6b2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	3301      	adds	r3, #1
    6b38:	b2da      	uxtb	r2, r3
    6b3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b42:	701a      	strb	r2, [r3, #0]
    6b44:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4c:	781b      	ldrb	r3, [r3, #0]
    6b4e:	2bff      	cmp	r3, #255	; 0xff
    6b50:	d105      	bne.n	6b5e <ground_calibrate+0xa8e>
    6b52:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	2200      	movs	r2, #0
    6b5c:	701a      	strb	r2, [r3, #0]
    6b5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	461a      	mov	r2, r3
    6b6a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	78d9      	ldrb	r1, [r3, #3]
    6b74:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7c:	5499      	strb	r1, [r3, r2]
    6b7e:	4b45      	ldr	r3, [pc, #276]	; (6c94 <ground_calibrate+0xbc4>)
    6b80:	781a      	ldrb	r2, [r3, #0]
    6b82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	4413      	add	r3, r2
    6b8e:	b2da      	uxtb	r2, r3
    6b90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b98:	701a      	strb	r2, [r3, #0]
    6b9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba2:	781a      	ldrb	r2, [r3, #0]
    6ba4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	4413      	add	r3, r2
    6bb0:	b2da      	uxtb	r2, r3
    6bb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bba:	701a      	strb	r2, [r3, #0]
    6bbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	3301      	adds	r3, #1
    6bc8:	b2da      	uxtb	r2, r3
    6bca:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd2:	701a      	strb	r2, [r3, #0]
    6bd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	2bff      	cmp	r3, #255	; 0xff
    6be0:	d105      	bne.n	6bee <ground_calibrate+0xb1e>
    6be2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bea:	2200      	movs	r2, #0
    6bec:	701a      	strb	r2, [r3, #0]
    6bee:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf6:	781b      	ldrb	r3, [r3, #0]
    6bf8:	461a      	mov	r2, r3
    6bfa:	f240 5342 	movw	r3, #1346	; 0x542
    6bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c02:	7819      	ldrb	r1, [r3, #0]
    6c04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0c:	5499      	strb	r1, [r3, r2]
    6c0e:	f240 5342 	movw	r3, #1346	; 0x542
    6c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c16:	781a      	ldrb	r2, [r3, #0]
    6c18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	4413      	add	r3, r2
    6c24:	b2da      	uxtb	r2, r3
    6c26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2e:	701a      	strb	r2, [r3, #0]
    6c30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c38:	781a      	ldrb	r2, [r3, #0]
    6c3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c42:	781b      	ldrb	r3, [r3, #0]
    6c44:	4413      	add	r3, r2
    6c46:	b2da      	uxtb	r2, r3
    6c48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c50:	701a      	strb	r2, [r3, #0]
    6c52:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5a:	781b      	ldrb	r3, [r3, #0]
    6c5c:	3301      	adds	r3, #1
    6c5e:	b2da      	uxtb	r2, r3
    6c60:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c68:	701a      	strb	r2, [r3, #0]
    6c6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	2bff      	cmp	r3, #255	; 0xff
    6c76:	d10f      	bne.n	6c98 <ground_calibrate+0xbc8>
    6c78:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c80:	2200      	movs	r2, #0
    6c82:	701a      	strb	r2, [r3, #0]
    6c84:	e008      	b.n	6c98 <ground_calibrate+0xbc8>
    6c86:	bf00      	nop
    6c88:	2004cb47 	.word	0x2004cb47
    6c8c:	2004cb3d 	.word	0x2004cb3d
    6c90:	2004cb3e 	.word	0x2004cb3e
    6c94:	2004cb3f 	.word	0x2004cb3f
    6c98:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	461a      	mov	r2, r3
    6ca4:	f240 5342 	movw	r3, #1346	; 0x542
    6ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cac:	7859      	ldrb	r1, [r3, #1]
    6cae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb6:	5499      	strb	r1, [r3, r2]
    6cb8:	4bd4      	ldr	r3, [pc, #848]	; (700c <ground_calibrate+0xf3c>)
    6cba:	781a      	ldrb	r2, [r3, #0]
    6cbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc4:	781b      	ldrb	r3, [r3, #0]
    6cc6:	4413      	add	r3, r2
    6cc8:	b2da      	uxtb	r2, r3
    6cca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd2:	701a      	strb	r2, [r3, #0]
    6cd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cdc:	781a      	ldrb	r2, [r3, #0]
    6cde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce6:	781b      	ldrb	r3, [r3, #0]
    6ce8:	4413      	add	r3, r2
    6cea:	b2da      	uxtb	r2, r3
    6cec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf4:	701a      	strb	r2, [r3, #0]
    6cf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	3301      	adds	r3, #1
    6d02:	b2da      	uxtb	r2, r3
    6d04:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0c:	701a      	strb	r2, [r3, #0]
    6d0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	2bff      	cmp	r3, #255	; 0xff
    6d1a:	d105      	bne.n	6d28 <ground_calibrate+0xc58>
    6d1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d24:	2200      	movs	r2, #0
    6d26:	701a      	strb	r2, [r3, #0]
    6d28:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	461a      	mov	r2, r3
    6d34:	f240 5344 	movw	r3, #1348	; 0x544
    6d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3c:	7819      	ldrb	r1, [r3, #0]
    6d3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d46:	5499      	strb	r1, [r3, r2]
    6d48:	f240 5344 	movw	r3, #1348	; 0x544
    6d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d50:	781a      	ldrb	r2, [r3, #0]
    6d52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5a:	781b      	ldrb	r3, [r3, #0]
    6d5c:	4413      	add	r3, r2
    6d5e:	b2da      	uxtb	r2, r3
    6d60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d68:	701a      	strb	r2, [r3, #0]
    6d6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d72:	781a      	ldrb	r2, [r3, #0]
    6d74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	4413      	add	r3, r2
    6d80:	b2da      	uxtb	r2, r3
    6d82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8a:	701a      	strb	r2, [r3, #0]
    6d8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	781b      	ldrb	r3, [r3, #0]
    6d96:	3301      	adds	r3, #1
    6d98:	b2da      	uxtb	r2, r3
    6d9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da2:	701a      	strb	r2, [r3, #0]
    6da4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	2bff      	cmp	r3, #255	; 0xff
    6db0:	d105      	bne.n	6dbe <ground_calibrate+0xcee>
    6db2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dba:	2200      	movs	r2, #0
    6dbc:	701a      	strb	r2, [r3, #0]
    6dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	461a      	mov	r2, r3
    6dca:	f240 5344 	movw	r3, #1348	; 0x544
    6dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd2:	7859      	ldrb	r1, [r3, #1]
    6dd4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ddc:	5499      	strb	r1, [r3, r2]
    6dde:	4b8c      	ldr	r3, [pc, #560]	; (7010 <ground_calibrate+0xf40>)
    6de0:	781a      	ldrb	r2, [r3, #0]
    6de2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	781b      	ldrb	r3, [r3, #0]
    6dec:	4413      	add	r3, r2
    6dee:	b2da      	uxtb	r2, r3
    6df0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df8:	701a      	strb	r2, [r3, #0]
    6dfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e02:	781a      	ldrb	r2, [r3, #0]
    6e04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	4413      	add	r3, r2
    6e10:	b2da      	uxtb	r2, r3
    6e12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	3301      	adds	r3, #1
    6e28:	b2da      	uxtb	r2, r3
    6e2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e32:	701a      	strb	r2, [r3, #0]
    6e34:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	2bff      	cmp	r3, #255	; 0xff
    6e40:	d105      	bne.n	6e4e <ground_calibrate+0xd7e>
    6e42:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4a:	2200      	movs	r2, #0
    6e4c:	701a      	strb	r2, [r3, #0]
    6e4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e56:	781b      	ldrb	r3, [r3, #0]
    6e58:	461a      	mov	r2, r3
    6e5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e62:	7819      	ldrb	r1, [r3, #0]
    6e64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6c:	5499      	strb	r1, [r3, r2]
    6e6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e76:	781b      	ldrb	r3, [r3, #0]
    6e78:	3301      	adds	r3, #1
    6e7a:	b2da      	uxtb	r2, r3
    6e7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e84:	701a      	strb	r2, [r3, #0]
    6e86:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	2bff      	cmp	r3, #255	; 0xff
    6e92:	d105      	bne.n	6ea0 <ground_calibrate+0xdd0>
    6e94:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	2200      	movs	r2, #0
    6e9e:	701a      	strb	r2, [r3, #0]
    6ea0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea8:	781b      	ldrb	r3, [r3, #0]
    6eaa:	461a      	mov	r2, r3
    6eac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	7819      	ldrb	r1, [r3, #0]
    6eb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ebe:	5499      	strb	r1, [r3, r2]
    6ec0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec8:	781b      	ldrb	r3, [r3, #0]
    6eca:	3301      	adds	r3, #1
    6ecc:	b2da      	uxtb	r2, r3
    6ece:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	701a      	strb	r2, [r3, #0]
    6ed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	2bff      	cmp	r3, #255	; 0xff
    6ee4:	d105      	bne.n	6ef2 <ground_calibrate+0xe22>
    6ee6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	2200      	movs	r2, #0
    6ef0:	701a      	strb	r2, [r3, #0]
    6ef2:	f242 0339 	movw	r3, #8249	; 0x2039
    6ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	b2db      	uxtb	r3, r3
    6efe:	f003 0310 	and.w	r3, r3, #16
    6f02:	2b00      	cmp	r3, #0
    6f04:	d15a      	bne.n	6fbc <ground_calibrate+0xeec>
    6f06:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	b2db      	uxtb	r3, r3
    6f12:	461a      	mov	r2, r3
    6f14:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1c:	5c9a      	ldrb	r2, [r3, r2]
    6f1e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f26:	701a      	strb	r2, [r3, #0]
    6f28:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f30:	2200      	movs	r2, #0
    6f32:	701a      	strb	r2, [r3, #0]
    6f34:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	3301      	adds	r3, #1
    6f42:	b2da      	uxtb	r2, r3
    6f44:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4c:	701a      	strb	r2, [r3, #0]
    6f4e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f56:	781b      	ldrb	r3, [r3, #0]
    6f58:	b2db      	uxtb	r3, r3
    6f5a:	2bff      	cmp	r3, #255	; 0xff
    6f5c:	d105      	bne.n	6f6a <ground_calibrate+0xe9a>
    6f5e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	2200      	movs	r2, #0
    6f68:	701a      	strb	r2, [r3, #0]
    6f6a:	f242 0338 	movw	r3, #8248	; 0x2038
    6f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f72:	f242 0238 	movw	r2, #8248	; 0x2038
    6f76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f7a:	7812      	ldrb	r2, [r2, #0]
    6f7c:	b2d2      	uxtb	r2, r2
    6f7e:	f042 0201 	orr.w	r2, r2, #1
    6f82:	b2d2      	uxtb	r2, r2
    6f84:	701a      	strb	r2, [r3, #0]
    6f86:	f242 0339 	movw	r3, #8249	; 0x2039
    6f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f8e:	f242 0239 	movw	r2, #8249	; 0x2039
    6f92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f96:	7812      	ldrb	r2, [r2, #0]
    6f98:	b2d2      	uxtb	r2, r2
    6f9a:	f042 0210 	orr.w	r2, r2, #16
    6f9e:	b2d2      	uxtb	r2, r2
    6fa0:	701a      	strb	r2, [r3, #0]
    6fa2:	e00b      	b.n	6fbc <ground_calibrate+0xeec>
    6fa4:	f24c 5348 	movw	r3, #50504	; 0xc548
    6fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fac:	781b      	ldrb	r3, [r3, #0]
    6fae:	3301      	adds	r3, #1
    6fb0:	b2da      	uxtb	r2, r3
    6fb2:	f24c 5348 	movw	r3, #50504	; 0xc548
    6fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fba:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6fbc:	f24c 5342 	movw	r3, #50498	; 0xc542
    6fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc4:	2202      	movs	r2, #2
    6fc6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6fc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd0:	781a      	ldrb	r2, [r3, #0]
    6fd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	b2db      	uxtb	r3, r3
    6fde:	429a      	cmp	r2, r3
    6fe0:	d318      	bcc.n	7014 <ground_calibrate+0xf44>
    6fe2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fea:	781b      	ldrb	r3, [r3, #0]
    6fec:	b2db      	uxtb	r3, r3
    6fee:	461a      	mov	r2, r3
    6ff0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	1ad3      	subs	r3, r2, r3
    6ffc:	33ff      	adds	r3, #255	; 0xff
    6ffe:	2b06      	cmp	r3, #6
    7000:	bfd4      	ite	le
    7002:	2300      	movle	r3, #0
    7004:	2301      	movgt	r3, #1
    7006:	b2db      	uxtb	r3, r3
    7008:	e016      	b.n	7038 <ground_calibrate+0xf68>
    700a:	bf00      	nop
    700c:	20000543 	.word	0x20000543
    7010:	20000545 	.word	0x20000545
    7014:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701c:	781b      	ldrb	r3, [r3, #0]
    701e:	b2db      	uxtb	r3, r3
    7020:	461a      	mov	r2, r3
    7022:	f24c 5349 	movw	r3, #50505	; 0xc549
    7026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	1ad3      	subs	r3, r2, r3
    702e:	2b06      	cmp	r3, #6
    7030:	bfd4      	ite	le
    7032:	2300      	movle	r3, #0
    7034:	2301      	movgt	r3, #1
    7036:	b2db      	uxtb	r3, r3
    7038:	2b00      	cmp	r3, #0
    703a:	f000 8194 	beq.w	7366 <ground_calibrate+0x1296>
    703e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	461a      	mov	r2, r3
    704a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    704e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7052:	2105      	movs	r1, #5
    7054:	5499      	strb	r1, [r3, r2]
    7056:	f24c 5349 	movw	r3, #50505	; 0xc549
    705a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705e:	781b      	ldrb	r3, [r3, #0]
    7060:	3301      	adds	r3, #1
    7062:	b2da      	uxtb	r2, r3
    7064:	f24c 5349 	movw	r3, #50505	; 0xc549
    7068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706c:	701a      	strb	r2, [r3, #0]
    706e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7076:	781b      	ldrb	r3, [r3, #0]
    7078:	2bff      	cmp	r3, #255	; 0xff
    707a:	d105      	bne.n	7088 <ground_calibrate+0xfb8>
    707c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7084:	2200      	movs	r2, #0
    7086:	701a      	strb	r2, [r3, #0]
    7088:	f24c 5349 	movw	r3, #50505	; 0xc549
    708c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7090:	781b      	ldrb	r3, [r3, #0]
    7092:	461a      	mov	r2, r3
    7094:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    709c:	2103      	movs	r1, #3
    709e:	5499      	strb	r1, [r3, r2]
    70a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    70a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a8:	781b      	ldrb	r3, [r3, #0]
    70aa:	3301      	adds	r3, #1
    70ac:	b2da      	uxtb	r2, r3
    70ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    70b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b6:	701a      	strb	r2, [r3, #0]
    70b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	2bff      	cmp	r3, #255	; 0xff
    70c4:	d105      	bne.n	70d2 <ground_calibrate+0x1002>
    70c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ce:	2200      	movs	r2, #0
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70da:	2203      	movs	r2, #3
    70dc:	701a      	strb	r2, [r3, #0]
    70de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e6:	2203      	movs	r2, #3
    70e8:	701a      	strb	r2, [r3, #0]
    70ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	461a      	mov	r2, r3
    70f6:	f240 5340 	movw	r3, #1344	; 0x540
    70fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70fe:	7819      	ldrb	r1, [r3, #0]
    7100:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7108:	5499      	strb	r1, [r3, r2]
    710a:	f240 5340 	movw	r3, #1344	; 0x540
    710e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7112:	781a      	ldrb	r2, [r3, #0]
    7114:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	4413      	add	r3, r2
    7120:	b2da      	uxtb	r2, r3
    7122:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712a:	701a      	strb	r2, [r3, #0]
    712c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7134:	781a      	ldrb	r2, [r3, #0]
    7136:	f24c 634d 	movw	r3, #50765	; 0xc64d
    713a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	4413      	add	r3, r2
    7142:	b2da      	uxtb	r2, r3
    7144:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	701a      	strb	r2, [r3, #0]
    714e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	3301      	adds	r3, #1
    715a:	b2da      	uxtb	r2, r3
    715c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24c 5349 	movw	r3, #50505	; 0xc549
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	2bff      	cmp	r3, #255	; 0xff
    7172:	d105      	bne.n	7180 <ground_calibrate+0x10b0>
    7174:	f24c 5349 	movw	r3, #50505	; 0xc549
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	2200      	movs	r2, #0
    717e:	701a      	strb	r2, [r3, #0]
    7180:	f24c 5349 	movw	r3, #50505	; 0xc549
    7184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	461a      	mov	r2, r3
    718c:	f240 5340 	movw	r3, #1344	; 0x540
    7190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7194:	7859      	ldrb	r1, [r3, #1]
    7196:	f24c 534c 	movw	r3, #50508	; 0xc54c
    719a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719e:	5499      	strb	r1, [r3, r2]
    71a0:	4b77      	ldr	r3, [pc, #476]	; (7380 <ground_calibrate+0x12b0>)
    71a2:	781a      	ldrb	r2, [r3, #0]
    71a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	4413      	add	r3, r2
    71b0:	b2da      	uxtb	r2, r3
    71b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ba:	701a      	strb	r2, [r3, #0]
    71bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c4:	781a      	ldrb	r2, [r3, #0]
    71c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	781b      	ldrb	r3, [r3, #0]
    71d0:	4413      	add	r3, r2
    71d2:	b2da      	uxtb	r2, r3
    71d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71dc:	701a      	strb	r2, [r3, #0]
    71de:	f24c 5349 	movw	r3, #50505	; 0xc549
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	3301      	adds	r3, #1
    71ea:	b2da      	uxtb	r2, r3
    71ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    71f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	2bff      	cmp	r3, #255	; 0xff
    7202:	d105      	bne.n	7210 <ground_calibrate+0x1140>
    7204:	f24c 5349 	movw	r3, #50505	; 0xc549
    7208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720c:	2200      	movs	r2, #0
    720e:	701a      	strb	r2, [r3, #0]
    7210:	f24c 5349 	movw	r3, #50505	; 0xc549
    7214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	461a      	mov	r2, r3
    721c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7224:	7819      	ldrb	r1, [r3, #0]
    7226:	f24c 534c 	movw	r3, #50508	; 0xc54c
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	5499      	strb	r1, [r3, r2]
    7230:	f24c 5349 	movw	r3, #50505	; 0xc549
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	3301      	adds	r3, #1
    723c:	b2da      	uxtb	r2, r3
    723e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	701a      	strb	r2, [r3, #0]
    7248:	f24c 5349 	movw	r3, #50505	; 0xc549
    724c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7250:	781b      	ldrb	r3, [r3, #0]
    7252:	2bff      	cmp	r3, #255	; 0xff
    7254:	d105      	bne.n	7262 <ground_calibrate+0x1192>
    7256:	f24c 5349 	movw	r3, #50505	; 0xc549
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	2200      	movs	r2, #0
    7260:	701a      	strb	r2, [r3, #0]
    7262:	f24c 5349 	movw	r3, #50505	; 0xc549
    7266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726a:	781b      	ldrb	r3, [r3, #0]
    726c:	461a      	mov	r2, r3
    726e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7276:	7819      	ldrb	r1, [r3, #0]
    7278:	f24c 534c 	movw	r3, #50508	; 0xc54c
    727c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7280:	5499      	strb	r1, [r3, r2]
    7282:	f24c 5349 	movw	r3, #50505	; 0xc549
    7286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	3301      	adds	r3, #1
    728e:	b2da      	uxtb	r2, r3
    7290:	f24c 5349 	movw	r3, #50505	; 0xc549
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	701a      	strb	r2, [r3, #0]
    729a:	f24c 5349 	movw	r3, #50505	; 0xc549
    729e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a2:	781b      	ldrb	r3, [r3, #0]
    72a4:	2bff      	cmp	r3, #255	; 0xff
    72a6:	d105      	bne.n	72b4 <ground_calibrate+0x11e4>
    72a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	2200      	movs	r2, #0
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	f242 0339 	movw	r3, #8249	; 0x2039
    72b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72bc:	781b      	ldrb	r3, [r3, #0]
    72be:	b2db      	uxtb	r3, r3
    72c0:	f003 0310 	and.w	r3, r3, #16
    72c4:	2b00      	cmp	r3, #0
    72c6:	d15a      	bne.n	737e <ground_calibrate+0x12ae>
    72c8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	b2db      	uxtb	r3, r3
    72d4:	461a      	mov	r2, r3
    72d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    72da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72de:	5c9a      	ldrb	r2, [r3, r2]
    72e0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    72e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e8:	701a      	strb	r2, [r3, #0]
    72ea:	f24c 634c 	movw	r3, #50764	; 0xc64c
    72ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f2:	2200      	movs	r2, #0
    72f4:	701a      	strb	r2, [r3, #0]
    72f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	b2db      	uxtb	r3, r3
    7302:	3301      	adds	r3, #1
    7304:	b2da      	uxtb	r2, r3
    7306:	f24c 534a 	movw	r3, #50506	; 0xc54a
    730a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    730e:	701a      	strb	r2, [r3, #0]
    7310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7318:	781b      	ldrb	r3, [r3, #0]
    731a:	b2db      	uxtb	r3, r3
    731c:	2bff      	cmp	r3, #255	; 0xff
    731e:	d105      	bne.n	732c <ground_calibrate+0x125c>
    7320:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	2200      	movs	r2, #0
    732a:	701a      	strb	r2, [r3, #0]
    732c:	f242 0338 	movw	r3, #8248	; 0x2038
    7330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7334:	f242 0238 	movw	r2, #8248	; 0x2038
    7338:	f2c2 0200 	movt	r2, #8192	; 0x2000
    733c:	7812      	ldrb	r2, [r2, #0]
    733e:	b2d2      	uxtb	r2, r2
    7340:	f042 0201 	orr.w	r2, r2, #1
    7344:	b2d2      	uxtb	r2, r2
    7346:	701a      	strb	r2, [r3, #0]
    7348:	f242 0339 	movw	r3, #8249	; 0x2039
    734c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7350:	f242 0239 	movw	r2, #8249	; 0x2039
    7354:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7358:	7812      	ldrb	r2, [r2, #0]
    735a:	b2d2      	uxtb	r2, r2
    735c:	f042 0210 	orr.w	r2, r2, #16
    7360:	b2d2      	uxtb	r2, r2
    7362:	701a      	strb	r2, [r3, #0]
    7364:	e00b      	b.n	737e <ground_calibrate+0x12ae>
    7366:	f24c 5348 	movw	r3, #50504	; 0xc548
    736a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	3301      	adds	r3, #1
    7372:	b2da      	uxtb	r2, r3
    7374:	f24c 5348 	movw	r3, #50504	; 0xc548
    7378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    737e:	bd80      	pop	{r7, pc}
    7380:	20000541 	.word	0x20000541

00007384 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7384:	b480      	push	{r7}
    7386:	b083      	sub	sp, #12
    7388:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    738a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    738e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7392:	781b      	ldrb	r3, [r3, #0]
    7394:	2b03      	cmp	r3, #3
    7396:	d10c      	bne.n	73b2 <pprz_mode_update+0x2e>
    7398:	f24c 5330 	movw	r3, #50480	; 0xc530
    739c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d032      	beq.n	740c <pprz_mode_update+0x88>
    73a6:	f24c 5330 	movw	r3, #50480	; 0xc530
    73aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ae:	2200      	movs	r2, #0
    73b0:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    73b2:	f24c 6350 	movw	r3, #50768	; 0xc650
    73b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ba:	891b      	ldrh	r3, [r3, #8]
    73bc:	b21b      	sxth	r3, r3
    73be:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    73c2:	dc0f      	bgt.n	73e4 <pprz_mode_update+0x60>
    73c4:	f24c 6350 	movw	r3, #50768	; 0xc650
    73c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73cc:	891b      	ldrh	r3, [r3, #8]
    73ce:	b21a      	sxth	r2, r3
    73d0:	f64e 5341 	movw	r3, #60737	; 0xed41
    73d4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    73d8:	429a      	cmp	r2, r3
    73da:	bfb4      	ite	lt
    73dc:	2300      	movlt	r3, #0
    73de:	2301      	movge	r3, #1
    73e0:	b2db      	uxtb	r3, r3
    73e2:	e000      	b.n	73e6 <pprz_mode_update+0x62>
    73e4:	2302      	movs	r3, #2
    73e6:	71fb      	strb	r3, [r7, #7]
    73e8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    73ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	79fa      	ldrb	r2, [r7, #7]
    73f4:	429a      	cmp	r2, r3
    73f6:	d007      	beq.n	7408 <pprz_mode_update+0x84>
    73f8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    73fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7400:	79fa      	ldrb	r2, [r7, #7]
    7402:	701a      	strb	r2, [r3, #0]
    7404:	2301      	movs	r3, #1
    7406:	e002      	b.n	740e <pprz_mode_update+0x8a>
    7408:	2300      	movs	r3, #0
    740a:	e000      	b.n	740e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    740c:	2300      	movs	r3, #0
}
    740e:	4618      	mov	r0, r3
    7410:	370c      	adds	r7, #12
    7412:	46bd      	mov	sp, r7
    7414:	f85d 7b04 	ldr.w	r7, [sp], #4
    7418:	4770      	bx	lr
    741a:	bf00      	nop

0000741c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    741c:	b480      	push	{r7}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7422:	f24c 6350 	movw	r3, #50768	; 0xc650
    7426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742a:	89db      	ldrh	r3, [r3, #14]
    742c:	b21a      	sxth	r2, r3
    742e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7432:	429a      	cmp	r2, r3
    7434:	bfd4      	ite	le
    7436:	2300      	movle	r3, #0
    7438:	2301      	movgt	r3, #1
    743a:	b2db      	uxtb	r3, r3
    743c:	71fb      	strb	r3, [r7, #7]
    743e:	f240 533c 	movw	r3, #1340	; 0x53c
    7442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	79fa      	ldrb	r2, [r7, #7]
    744a:	429a      	cmp	r2, r3
    744c:	d007      	beq.n	745e <ir_estim_mode_update+0x42>
    744e:	f240 533c 	movw	r3, #1340	; 0x53c
    7452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7456:	79fa      	ldrb	r2, [r7, #7]
    7458:	701a      	strb	r2, [r3, #0]
    745a:	2301      	movs	r3, #1
    745c:	e000      	b.n	7460 <ir_estim_mode_update+0x44>
    745e:	2300      	movs	r3, #0
}
    7460:	4618      	mov	r0, r3
    7462:	370c      	adds	r7, #12
    7464:	46bd      	mov	sp, r7
    7466:	f85d 7b04 	ldr.w	r7, [sp], #4
    746a:	4770      	bx	lr

0000746c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    746c:	b480      	push	{r7}
    746e:	b083      	sub	sp, #12
    7470:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7472:	f24c 6350 	movw	r3, #50768	; 0xc650
    7476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747a:	7cdb      	ldrb	r3, [r3, #19]
    747c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    747e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	79fa      	ldrb	r2, [r7, #7]
    748a:	429a      	cmp	r2, r3
    748c:	d017      	beq.n	74be <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    748e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	461a      	mov	r2, r3
    749a:	79fb      	ldrb	r3, [r7, #7]
    749c:	4053      	eors	r3, r2
    749e:	f003 0303 	and.w	r3, r3, #3
    74a2:	2b00      	cmp	r3, #0
    74a4:	bf0c      	ite	eq
    74a6:	2300      	moveq	r3, #0
    74a8:	2301      	movne	r3, #1
    74aa:	b2db      	uxtb	r3, r3
    74ac:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    74ae:	f24c 5333 	movw	r3, #50483	; 0xc533
    74b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b6:	79fa      	ldrb	r2, [r7, #7]
    74b8:	701a      	strb	r2, [r3, #0]
    return changed;
    74ba:	79bb      	ldrb	r3, [r7, #6]
    74bc:	e000      	b.n	74c0 <mcu1_status_update+0x54>
  }
  return FALSE;
    74be:	2300      	movs	r3, #0
}
    74c0:	4618      	mov	r0, r3
    74c2:	370c      	adds	r7, #12
    74c4:	46bd      	mov	sp, r7
    74c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ca:	4770      	bx	lr

000074cc <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    74cc:	b480      	push	{r7}
    74ce:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    74d0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    74d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	2b00      	cmp	r3, #0
    74dc:	d12a      	bne.n	7534 <events_update+0x68>
    74de:	f24c 6350 	movw	r3, #50768	; 0xc650
    74e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e6:	895b      	ldrh	r3, [r3, #10]
    74e8:	b21b      	sxth	r3, r3
    74ea:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    74ee:	dd21      	ble.n	7534 <events_update+0x68>
    74f0:	f24c 5344 	movw	r3, #50500	; 0xc544
    74f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f8:	881b      	ldrh	r3, [r3, #0]
    74fa:	2b13      	cmp	r3, #19
    74fc:	d819      	bhi.n	7532 <events_update+0x66>
    74fe:	f24c 5344 	movw	r3, #50500	; 0xc544
    7502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7506:	881b      	ldrh	r3, [r3, #0]
    7508:	3301      	adds	r3, #1
    750a:	b29a      	uxth	r2, r3
    750c:	f24c 5344 	movw	r3, #50500	; 0xc544
    7510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7514:	801a      	strh	r2, [r3, #0]
    7516:	f24c 5344 	movw	r3, #50500	; 0xc544
    751a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751e:	881b      	ldrh	r3, [r3, #0]
    7520:	2b14      	cmp	r3, #20
    7522:	d106      	bne.n	7532 <events_update+0x66>
    7524:	f24c 5330 	movw	r3, #50480	; 0xc530
    7528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752c:	2201      	movs	r2, #1
    752e:	701a      	strb	r2, [r3, #0]
    7530:	e00c      	b.n	754c <events_update+0x80>
    7532:	e00b      	b.n	754c <events_update+0x80>
    7534:	f24c 5344 	movw	r3, #50500	; 0xc544
    7538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753c:	2200      	movs	r2, #0
    753e:	801a      	strh	r2, [r3, #0]
    7540:	f24c 5330 	movw	r3, #50480	; 0xc530
    7544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7548:	2200      	movs	r2, #0
    754a:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    754c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7554:	781b      	ldrb	r3, [r3, #0]
    7556:	2b00      	cmp	r3, #0
    7558:	d12a      	bne.n	75b0 <events_update+0xe4>
    755a:	f24c 6350 	movw	r3, #50768	; 0xc650
    755e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7562:	895b      	ldrh	r3, [r3, #10]
    7564:	b21b      	sxth	r3, r3
    7566:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    756a:	da21      	bge.n	75b0 <events_update+0xe4>
    756c:	f24c 5346 	movw	r3, #50502	; 0xc546
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	881b      	ldrh	r3, [r3, #0]
    7576:	2b13      	cmp	r3, #19
    7578:	d819      	bhi.n	75ae <events_update+0xe2>
    757a:	f24c 5346 	movw	r3, #50502	; 0xc546
    757e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7582:	881b      	ldrh	r3, [r3, #0]
    7584:	3301      	adds	r3, #1
    7586:	b29a      	uxth	r2, r3
    7588:	f24c 5346 	movw	r3, #50502	; 0xc546
    758c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7590:	801a      	strh	r2, [r3, #0]
    7592:	f24c 5346 	movw	r3, #50502	; 0xc546
    7596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759a:	881b      	ldrh	r3, [r3, #0]
    759c:	2b14      	cmp	r3, #20
    759e:	d106      	bne.n	75ae <events_update+0xe2>
    75a0:	f24c 5331 	movw	r3, #50481	; 0xc531
    75a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a8:	2201      	movs	r2, #1
    75aa:	701a      	strb	r2, [r3, #0]
    75ac:	e00c      	b.n	75c8 <events_update+0xfc>
    75ae:	e00b      	b.n	75c8 <events_update+0xfc>
    75b0:	f24c 5346 	movw	r3, #50502	; 0xc546
    75b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b8:	2200      	movs	r2, #0
    75ba:	801a      	strh	r2, [r3, #0]
    75bc:	f24c 5331 	movw	r3, #50481	; 0xc531
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	2200      	movs	r2, #0
    75c6:	701a      	strb	r2, [r3, #0]
}  
    75c8:	46bd      	mov	sp, r7
    75ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ce:	4770      	bx	lr

000075d0 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    75d0:	b480      	push	{r7}
    75d2:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    75d4:	f24c 6350 	movw	r3, #50768	; 0xc650
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	88da      	ldrh	r2, [r3, #6]
    75de:	f24c 6368 	movw	r3, #50792	; 0xc668
    75e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e6:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    75e8:	f24c 6368 	movw	r3, #50792	; 0xc668
    75ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f0:	2200      	movs	r2, #0
    75f2:	74da      	strb	r2, [r3, #19]
}
    75f4:	46bd      	mov	sp, r7
    75f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75fa:	4770      	bx	lr

000075fc <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    75fc:	b480      	push	{r7}
    75fe:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7600:	f240 533d 	movw	r3, #1341	; 0x53d
    7604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7608:	781b      	ldrb	r3, [r3, #0]
    760a:	2b00      	cmp	r3, #0
    760c:	f000 87c6 	beq.w	859c <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7610:	f24c 5349 	movw	r3, #50505	; 0xc549
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	781a      	ldrb	r2, [r3, #0]
    761a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	781b      	ldrb	r3, [r3, #0]
    7624:	b2db      	uxtb	r3, r3
    7626:	429a      	cmp	r2, r3
    7628:	d313      	bcc.n	7652 <send_boot+0x56>
    762a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    762e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7632:	781b      	ldrb	r3, [r3, #0]
    7634:	b2db      	uxtb	r3, r3
    7636:	461a      	mov	r2, r3
    7638:	f24c 5349 	movw	r3, #50505	; 0xc549
    763c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	1ad3      	subs	r3, r2, r3
    7644:	33ff      	adds	r3, #255	; 0xff
    7646:	2b06      	cmp	r3, #6
    7648:	bfd4      	ite	le
    764a:	2300      	movle	r3, #0
    764c:	2301      	movgt	r3, #1
    764e:	b2db      	uxtb	r3, r3
    7650:	e011      	b.n	7676 <send_boot+0x7a>
    7652:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765a:	781b      	ldrb	r3, [r3, #0]
    765c:	b2db      	uxtb	r3, r3
    765e:	461a      	mov	r2, r3
    7660:	f24c 5349 	movw	r3, #50505	; 0xc549
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	1ad3      	subs	r3, r2, r3
    766c:	2b06      	cmp	r3, #6
    766e:	bfd4      	ite	le
    7670:	2300      	movle	r3, #0
    7672:	2301      	movgt	r3, #1
    7674:	b2db      	uxtb	r3, r3
    7676:	2b00      	cmp	r3, #0
    7678:	f000 8194 	beq.w	79a4 <send_boot+0x3a8>
    767c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	461a      	mov	r2, r3
    7688:	f24c 534c 	movw	r3, #50508	; 0xc54c
    768c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7690:	2105      	movs	r1, #5
    7692:	5499      	strb	r1, [r3, r2]
    7694:	f24c 5349 	movw	r3, #50505	; 0xc549
    7698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769c:	781b      	ldrb	r3, [r3, #0]
    769e:	3301      	adds	r3, #1
    76a0:	b2da      	uxtb	r2, r3
    76a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    76a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76aa:	701a      	strb	r2, [r3, #0]
    76ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    76b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	2bff      	cmp	r3, #255	; 0xff
    76b8:	d105      	bne.n	76c6 <send_boot+0xca>
    76ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    76be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c2:	2200      	movs	r2, #0
    76c4:	701a      	strb	r2, [r3, #0]
    76c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	461a      	mov	r2, r3
    76d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    76d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76da:	2101      	movs	r1, #1
    76dc:	5499      	strb	r1, [r3, r2]
    76de:	f24c 5349 	movw	r3, #50505	; 0xc549
    76e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	3301      	adds	r3, #1
    76ea:	b2da      	uxtb	r2, r3
    76ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    76f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f4:	701a      	strb	r2, [r3, #0]
    76f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fe:	781b      	ldrb	r3, [r3, #0]
    7700:	2bff      	cmp	r3, #255	; 0xff
    7702:	d105      	bne.n	7710 <send_boot+0x114>
    7704:	f24c 5349 	movw	r3, #50505	; 0xc549
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	2200      	movs	r2, #0
    770e:	701a      	strb	r2, [r3, #0]
    7710:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7718:	2201      	movs	r2, #1
    771a:	701a      	strb	r2, [r3, #0]
    771c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7724:	2201      	movs	r2, #1
    7726:	701a      	strb	r2, [r3, #0]
    7728:	f24c 5349 	movw	r3, #50505	; 0xc549
    772c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7730:	781b      	ldrb	r3, [r3, #0]
    7732:	461a      	mov	r2, r3
    7734:	f648 33ba 	movw	r3, #35770	; 0x8bba
    7738:	f2c0 0301 	movt	r3, #1
    773c:	7819      	ldrb	r1, [r3, #0]
    773e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	5499      	strb	r1, [r3, r2]
    7748:	f648 33ba 	movw	r3, #35770	; 0x8bba
    774c:	f2c0 0301 	movt	r3, #1
    7750:	781a      	ldrb	r2, [r3, #0]
    7752:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	4413      	add	r3, r2
    775e:	b2da      	uxtb	r2, r3
    7760:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7768:	701a      	strb	r2, [r3, #0]
    776a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    776e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7772:	781a      	ldrb	r2, [r3, #0]
    7774:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777c:	781b      	ldrb	r3, [r3, #0]
    777e:	4413      	add	r3, r2
    7780:	b2da      	uxtb	r2, r3
    7782:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778a:	701a      	strb	r2, [r3, #0]
    778c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	3301      	adds	r3, #1
    7798:	b2da      	uxtb	r2, r3
    779a:	f24c 5349 	movw	r3, #50505	; 0xc549
    779e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a2:	701a      	strb	r2, [r3, #0]
    77a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	2bff      	cmp	r3, #255	; 0xff
    77b0:	d105      	bne.n	77be <send_boot+0x1c2>
    77b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    77b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ba:	2200      	movs	r2, #0
    77bc:	701a      	strb	r2, [r3, #0]
    77be:	f24c 5349 	movw	r3, #50505	; 0xc549
    77c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c6:	781b      	ldrb	r3, [r3, #0]
    77c8:	461a      	mov	r2, r3
    77ca:	f648 33ba 	movw	r3, #35770	; 0x8bba
    77ce:	f2c0 0301 	movt	r3, #1
    77d2:	7859      	ldrb	r1, [r3, #1]
    77d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77dc:	5499      	strb	r1, [r3, r2]
    77de:	4b88      	ldr	r3, [pc, #544]	; (7a00 <send_boot+0x404>)
    77e0:	781a      	ldrb	r2, [r3, #0]
    77e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	4413      	add	r3, r2
    77ee:	b2da      	uxtb	r2, r3
    77f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f8:	701a      	strb	r2, [r3, #0]
    77fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7802:	781a      	ldrb	r2, [r3, #0]
    7804:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	781b      	ldrb	r3, [r3, #0]
    780e:	4413      	add	r3, r2
    7810:	b2da      	uxtb	r2, r3
    7812:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781a:	701a      	strb	r2, [r3, #0]
    781c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7824:	781b      	ldrb	r3, [r3, #0]
    7826:	3301      	adds	r3, #1
    7828:	b2da      	uxtb	r2, r3
    782a:	f24c 5349 	movw	r3, #50505	; 0xc549
    782e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7832:	701a      	strb	r2, [r3, #0]
    7834:	f24c 5349 	movw	r3, #50505	; 0xc549
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	2bff      	cmp	r3, #255	; 0xff
    7840:	d105      	bne.n	784e <send_boot+0x252>
    7842:	f24c 5349 	movw	r3, #50505	; 0xc549
    7846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784a:	2200      	movs	r2, #0
    784c:	701a      	strb	r2, [r3, #0]
    784e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7856:	781b      	ldrb	r3, [r3, #0]
    7858:	461a      	mov	r2, r3
    785a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    785e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7862:	7819      	ldrb	r1, [r3, #0]
    7864:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786c:	5499      	strb	r1, [r3, r2]
    786e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	3301      	adds	r3, #1
    787a:	b2da      	uxtb	r2, r3
    787c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7884:	701a      	strb	r2, [r3, #0]
    7886:	f24c 5349 	movw	r3, #50505	; 0xc549
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	2bff      	cmp	r3, #255	; 0xff
    7892:	d105      	bne.n	78a0 <send_boot+0x2a4>
    7894:	f24c 5349 	movw	r3, #50505	; 0xc549
    7898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789c:	2200      	movs	r2, #0
    789e:	701a      	strb	r2, [r3, #0]
    78a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    78a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a8:	781b      	ldrb	r3, [r3, #0]
    78aa:	461a      	mov	r2, r3
    78ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    78b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b4:	7819      	ldrb	r1, [r3, #0]
    78b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78be:	5499      	strb	r1, [r3, r2]
    78c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    78c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c8:	781b      	ldrb	r3, [r3, #0]
    78ca:	3301      	adds	r3, #1
    78cc:	b2da      	uxtb	r2, r3
    78ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    78d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d6:	701a      	strb	r2, [r3, #0]
    78d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    78dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e0:	781b      	ldrb	r3, [r3, #0]
    78e2:	2bff      	cmp	r3, #255	; 0xff
    78e4:	d105      	bne.n	78f2 <send_boot+0x2f6>
    78e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    78ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ee:	2200      	movs	r2, #0
    78f0:	701a      	strb	r2, [r3, #0]
    78f2:	f242 0339 	movw	r3, #8249	; 0x2039
    78f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fa:	781b      	ldrb	r3, [r3, #0]
    78fc:	b2db      	uxtb	r3, r3
    78fe:	f003 0310 	and.w	r3, r3, #16
    7902:	2b00      	cmp	r3, #0
    7904:	d15a      	bne.n	79bc <send_boot+0x3c0>
    7906:	f24c 534a 	movw	r3, #50506	; 0xc54a
    790a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790e:	781b      	ldrb	r3, [r3, #0]
    7910:	b2db      	uxtb	r3, r3
    7912:	461a      	mov	r2, r3
    7914:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    791c:	5c9a      	ldrb	r2, [r3, r2]
    791e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    7922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7926:	701a      	strb	r2, [r3, #0]
    7928:	f24c 634c 	movw	r3, #50764	; 0xc64c
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	2200      	movs	r2, #0
    7932:	701a      	strb	r2, [r3, #0]
    7934:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	781b      	ldrb	r3, [r3, #0]
    793e:	b2db      	uxtb	r3, r3
    7940:	3301      	adds	r3, #1
    7942:	b2da      	uxtb	r2, r3
    7944:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794c:	701a      	strb	r2, [r3, #0]
    794e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	b2db      	uxtb	r3, r3
    795a:	2bff      	cmp	r3, #255	; 0xff
    795c:	d105      	bne.n	796a <send_boot+0x36e>
    795e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7966:	2200      	movs	r2, #0
    7968:	701a      	strb	r2, [r3, #0]
    796a:	f242 0338 	movw	r3, #8248	; 0x2038
    796e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7972:	f242 0238 	movw	r2, #8248	; 0x2038
    7976:	f2c2 0200 	movt	r2, #8192	; 0x2000
    797a:	7812      	ldrb	r2, [r2, #0]
    797c:	b2d2      	uxtb	r2, r2
    797e:	f042 0201 	orr.w	r2, r2, #1
    7982:	b2d2      	uxtb	r2, r2
    7984:	701a      	strb	r2, [r3, #0]
    7986:	f242 0339 	movw	r3, #8249	; 0x2039
    798a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    798e:	f242 0239 	movw	r2, #8249	; 0x2039
    7992:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7996:	7812      	ldrb	r2, [r2, #0]
    7998:	b2d2      	uxtb	r2, r2
    799a:	f042 0210 	orr.w	r2, r2, #16
    799e:	b2d2      	uxtb	r2, r2
    79a0:	701a      	strb	r2, [r3, #0]
    79a2:	e00b      	b.n	79bc <send_boot+0x3c0>
    79a4:	f24c 5348 	movw	r3, #50504	; 0xc548
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	781b      	ldrb	r3, [r3, #0]
    79ae:	3301      	adds	r3, #1
    79b0:	b2da      	uxtb	r2, r3
    79b2:	f24c 5348 	movw	r3, #50504	; 0xc548
    79b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ba:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    79bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    79c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c4:	781a      	ldrb	r2, [r3, #0]
    79c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	b2db      	uxtb	r3, r3
    79d2:	429a      	cmp	r2, r3
    79d4:	d316      	bcc.n	7a04 <send_boot+0x408>
    79d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781b      	ldrb	r3, [r3, #0]
    79e0:	b2db      	uxtb	r3, r3
    79e2:	461a      	mov	r2, r3
    79e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    79e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	1ad3      	subs	r3, r2, r3
    79f0:	33ff      	adds	r3, #255	; 0xff
    79f2:	2b14      	cmp	r3, #20
    79f4:	bfd4      	ite	le
    79f6:	2300      	movle	r3, #0
    79f8:	2301      	movgt	r3, #1
    79fa:	b2db      	uxtb	r3, r3
    79fc:	e014      	b.n	7a28 <send_boot+0x42c>
    79fe:	bf00      	nop
    7a00:	00018bbb 	.word	0x00018bbb
    7a04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	b2db      	uxtb	r3, r3
    7a10:	461a      	mov	r2, r3
    7a12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	1ad3      	subs	r3, r2, r3
    7a1e:	2b14      	cmp	r3, #20
    7a20:	bfd4      	ite	le
    7a22:	2300      	movle	r3, #0
    7a24:	2301      	movgt	r3, #1
    7a26:	b2db      	uxtb	r3, r3
    7a28:	2b00      	cmp	r3, #0
    7a2a:	f000 85a5 	beq.w	8578 <send_boot+0xf7c>
    7a2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	461a      	mov	r2, r3
    7a3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a42:	2105      	movs	r1, #5
    7a44:	5499      	strb	r1, [r3, r2]
    7a46:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	3301      	adds	r3, #1
    7a52:	b2da      	uxtb	r2, r3
    7a54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	701a      	strb	r2, [r3, #0]
    7a5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	2bff      	cmp	r3, #255	; 0xff
    7a6a:	d105      	bne.n	7a78 <send_boot+0x47c>
    7a6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a74:	2200      	movs	r2, #0
    7a76:	701a      	strb	r2, [r3, #0]
    7a78:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a80:	781b      	ldrb	r3, [r3, #0]
    7a82:	461a      	mov	r2, r3
    7a84:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8c:	2105      	movs	r1, #5
    7a8e:	5499      	strb	r1, [r3, r2]
    7a90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a98:	781b      	ldrb	r3, [r3, #0]
    7a9a:	3301      	adds	r3, #1
    7a9c:	b2da      	uxtb	r2, r3
    7a9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa6:	701a      	strb	r2, [r3, #0]
    7aa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab0:	781b      	ldrb	r3, [r3, #0]
    7ab2:	2bff      	cmp	r3, #255	; 0xff
    7ab4:	d105      	bne.n	7ac2 <send_boot+0x4c6>
    7ab6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abe:	2200      	movs	r2, #0
    7ac0:	701a      	strb	r2, [r3, #0]
    7ac2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aca:	2205      	movs	r2, #5
    7acc:	701a      	strb	r2, [r3, #0]
    7ace:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad6:	2205      	movs	r2, #5
    7ad8:	701a      	strb	r2, [r3, #0]
    7ada:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	461a      	mov	r2, r3
    7ae6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aee:	7819      	ldrb	r1, [r3, #0]
    7af0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af8:	5499      	strb	r1, [r3, r2]
    7afa:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b02:	781a      	ldrb	r2, [r3, #0]
    7b04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	781b      	ldrb	r3, [r3, #0]
    7b0e:	4413      	add	r3, r2
    7b10:	b2da      	uxtb	r2, r3
    7b12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1a:	701a      	strb	r2, [r3, #0]
    7b1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	781a      	ldrb	r2, [r3, #0]
    7b26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	781b      	ldrb	r3, [r3, #0]
    7b30:	4413      	add	r3, r2
    7b32:	b2da      	uxtb	r2, r3
    7b34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	701a      	strb	r2, [r3, #0]
    7b3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	3301      	adds	r3, #1
    7b4a:	b2da      	uxtb	r2, r3
    7b4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	701a      	strb	r2, [r3, #0]
    7b56:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	2bff      	cmp	r3, #255	; 0xff
    7b62:	d105      	bne.n	7b70 <send_boot+0x574>
    7b64:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	2200      	movs	r2, #0
    7b6e:	701a      	strb	r2, [r3, #0]
    7b70:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	461a      	mov	r2, r3
    7b7c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	7859      	ldrb	r1, [r3, #1]
    7b86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	5499      	strb	r1, [r3, r2]
    7b90:	4bd1      	ldr	r3, [pc, #836]	; (7ed8 <send_boot+0x8dc>)
    7b92:	781a      	ldrb	r2, [r3, #0]
    7b94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	781b      	ldrb	r3, [r3, #0]
    7b9e:	4413      	add	r3, r2
    7ba0:	b2da      	uxtb	r2, r3
    7ba2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7baa:	701a      	strb	r2, [r3, #0]
    7bac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	781a      	ldrb	r2, [r3, #0]
    7bb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	4413      	add	r3, r2
    7bc2:	b2da      	uxtb	r2, r3
    7bc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	701a      	strb	r2, [r3, #0]
    7bce:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	3301      	adds	r3, #1
    7bda:	b2da      	uxtb	r2, r3
    7bdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	701a      	strb	r2, [r3, #0]
    7be6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	2bff      	cmp	r3, #255	; 0xff
    7bf2:	d105      	bne.n	7c00 <send_boot+0x604>
    7bf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	2200      	movs	r2, #0
    7bfe:	701a      	strb	r2, [r3, #0]
    7c00:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c08:	781b      	ldrb	r3, [r3, #0]
    7c0a:	461a      	mov	r2, r3
    7c0c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	7899      	ldrb	r1, [r3, #2]
    7c16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1e:	5499      	strb	r1, [r3, r2]
    7c20:	4bae      	ldr	r3, [pc, #696]	; (7edc <send_boot+0x8e0>)
    7c22:	781a      	ldrb	r2, [r3, #0]
    7c24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	4413      	add	r3, r2
    7c30:	b2da      	uxtb	r2, r3
    7c32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3a:	701a      	strb	r2, [r3, #0]
    7c3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	781a      	ldrb	r2, [r3, #0]
    7c46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4e:	781b      	ldrb	r3, [r3, #0]
    7c50:	4413      	add	r3, r2
    7c52:	b2da      	uxtb	r2, r3
    7c54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	701a      	strb	r2, [r3, #0]
    7c5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c66:	781b      	ldrb	r3, [r3, #0]
    7c68:	3301      	adds	r3, #1
    7c6a:	b2da      	uxtb	r2, r3
    7c6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	701a      	strb	r2, [r3, #0]
    7c76:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	2bff      	cmp	r3, #255	; 0xff
    7c82:	d105      	bne.n	7c90 <send_boot+0x694>
    7c84:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	2200      	movs	r2, #0
    7c8e:	701a      	strb	r2, [r3, #0]
    7c90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	461a      	mov	r2, r3
    7c9c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca4:	78d9      	ldrb	r1, [r3, #3]
    7ca6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	5499      	strb	r1, [r3, r2]
    7cb0:	4b8b      	ldr	r3, [pc, #556]	; (7ee0 <send_boot+0x8e4>)
    7cb2:	781a      	ldrb	r2, [r3, #0]
    7cb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbc:	781b      	ldrb	r3, [r3, #0]
    7cbe:	4413      	add	r3, r2
    7cc0:	b2da      	uxtb	r2, r3
    7cc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	701a      	strb	r2, [r3, #0]
    7ccc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	781a      	ldrb	r2, [r3, #0]
    7cd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	4413      	add	r3, r2
    7ce2:	b2da      	uxtb	r2, r3
    7ce4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cec:	701a      	strb	r2, [r3, #0]
    7cee:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	3301      	adds	r3, #1
    7cfa:	b2da      	uxtb	r2, r3
    7cfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d04:	701a      	strb	r2, [r3, #0]
    7d06:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0e:	781b      	ldrb	r3, [r3, #0]
    7d10:	2bff      	cmp	r3, #255	; 0xff
    7d12:	d105      	bne.n	7d20 <send_boot+0x724>
    7d14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	2200      	movs	r2, #0
    7d1e:	701a      	strb	r2, [r3, #0]
    7d20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d28:	781b      	ldrb	r3, [r3, #0]
    7d2a:	461a      	mov	r2, r3
    7d2c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d34:	7819      	ldrb	r1, [r3, #0]
    7d36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3e:	5499      	strb	r1, [r3, r2]
    7d40:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d48:	781a      	ldrb	r2, [r3, #0]
    7d4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	781b      	ldrb	r3, [r3, #0]
    7d54:	4413      	add	r3, r2
    7d56:	b2da      	uxtb	r2, r3
    7d58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d60:	701a      	strb	r2, [r3, #0]
    7d62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	781a      	ldrb	r2, [r3, #0]
    7d6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d74:	781b      	ldrb	r3, [r3, #0]
    7d76:	4413      	add	r3, r2
    7d78:	b2da      	uxtb	r2, r3
    7d7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d82:	701a      	strb	r2, [r3, #0]
    7d84:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	781b      	ldrb	r3, [r3, #0]
    7d8e:	3301      	adds	r3, #1
    7d90:	b2da      	uxtb	r2, r3
    7d92:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	2bff      	cmp	r3, #255	; 0xff
    7da8:	d105      	bne.n	7db6 <send_boot+0x7ba>
    7daa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db2:	2200      	movs	r2, #0
    7db4:	701a      	strb	r2, [r3, #0]
    7db6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	461a      	mov	r2, r3
    7dc2:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dca:	7859      	ldrb	r1, [r3, #1]
    7dcc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd4:	5499      	strb	r1, [r3, r2]
    7dd6:	4b43      	ldr	r3, [pc, #268]	; (7ee4 <send_boot+0x8e8>)
    7dd8:	781a      	ldrb	r2, [r3, #0]
    7dda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	4413      	add	r3, r2
    7de6:	b2da      	uxtb	r2, r3
    7de8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df0:	701a      	strb	r2, [r3, #0]
    7df2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	781a      	ldrb	r2, [r3, #0]
    7dfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e04:	781b      	ldrb	r3, [r3, #0]
    7e06:	4413      	add	r3, r2
    7e08:	b2da      	uxtb	r2, r3
    7e0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e12:	701a      	strb	r2, [r3, #0]
    7e14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	3301      	adds	r3, #1
    7e20:	b2da      	uxtb	r2, r3
    7e22:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2a:	701a      	strb	r2, [r3, #0]
    7e2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	2bff      	cmp	r3, #255	; 0xff
    7e38:	d105      	bne.n	7e46 <send_boot+0x84a>
    7e3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	2200      	movs	r2, #0
    7e44:	701a      	strb	r2, [r3, #0]
    7e46:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4e:	781b      	ldrb	r3, [r3, #0]
    7e50:	461a      	mov	r2, r3
    7e52:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5a:	7899      	ldrb	r1, [r3, #2]
    7e5c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e64:	5499      	strb	r1, [r3, r2]
    7e66:	4b20      	ldr	r3, [pc, #128]	; (7ee8 <send_boot+0x8ec>)
    7e68:	781a      	ldrb	r2, [r3, #0]
    7e6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	4413      	add	r3, r2
    7e76:	b2da      	uxtb	r2, r3
    7e78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	701a      	strb	r2, [r3, #0]
    7e82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	781a      	ldrb	r2, [r3, #0]
    7e8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	4413      	add	r3, r2
    7e98:	b2da      	uxtb	r2, r3
    7e9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea2:	701a      	strb	r2, [r3, #0]
    7ea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	3301      	adds	r3, #1
    7eb0:	b2da      	uxtb	r2, r3
    7eb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eba:	701a      	strb	r2, [r3, #0]
    7ebc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec4:	781b      	ldrb	r3, [r3, #0]
    7ec6:	2bff      	cmp	r3, #255	; 0xff
    7ec8:	d110      	bne.n	7eec <send_boot+0x8f0>
    7eca:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed2:	2200      	movs	r2, #0
    7ed4:	701a      	strb	r2, [r3, #0]
    7ed6:	e009      	b.n	7eec <send_boot+0x8f0>
    7ed8:	2004cb41 	.word	0x2004cb41
    7edc:	2004cb42 	.word	0x2004cb42
    7ee0:	2004cb43 	.word	0x2004cb43
    7ee4:	2004cb45 	.word	0x2004cb45
    7ee8:	2004cb46 	.word	0x2004cb46
    7eec:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	461a      	mov	r2, r3
    7ef8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f00:	78d9      	ldrb	r1, [r3, #3]
    7f02:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0a:	5499      	strb	r1, [r3, r2]
    7f0c:	4bd3      	ldr	r3, [pc, #844]	; (825c <send_boot+0xc60>)
    7f0e:	781a      	ldrb	r2, [r3, #0]
    7f10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	4413      	add	r3, r2
    7f1c:	b2da      	uxtb	r2, r3
    7f1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f26:	701a      	strb	r2, [r3, #0]
    7f28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f30:	781a      	ldrb	r2, [r3, #0]
    7f32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3a:	781b      	ldrb	r3, [r3, #0]
    7f3c:	4413      	add	r3, r2
    7f3e:	b2da      	uxtb	r2, r3
    7f40:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f48:	701a      	strb	r2, [r3, #0]
    7f4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f52:	781b      	ldrb	r3, [r3, #0]
    7f54:	3301      	adds	r3, #1
    7f56:	b2da      	uxtb	r2, r3
    7f58:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	701a      	strb	r2, [r3, #0]
    7f62:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6a:	781b      	ldrb	r3, [r3, #0]
    7f6c:	2bff      	cmp	r3, #255	; 0xff
    7f6e:	d105      	bne.n	7f7c <send_boot+0x980>
    7f70:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	2200      	movs	r2, #0
    7f7a:	701a      	strb	r2, [r3, #0]
    7f7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f84:	781b      	ldrb	r3, [r3, #0]
    7f86:	461a      	mov	r2, r3
    7f88:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f90:	7819      	ldrb	r1, [r3, #0]
    7f92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9a:	5499      	strb	r1, [r3, r2]
    7f9c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa4:	781a      	ldrb	r2, [r3, #0]
    7fa6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	4413      	add	r3, r2
    7fb2:	b2da      	uxtb	r2, r3
    7fb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fbc:	701a      	strb	r2, [r3, #0]
    7fbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	781a      	ldrb	r2, [r3, #0]
    7fc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	4413      	add	r3, r2
    7fd4:	b2da      	uxtb	r2, r3
    7fd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	701a      	strb	r2, [r3, #0]
    7fe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	3301      	adds	r3, #1
    7fec:	b2da      	uxtb	r2, r3
    7fee:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	701a      	strb	r2, [r3, #0]
    7ff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	2bff      	cmp	r3, #255	; 0xff
    8004:	d105      	bne.n	8012 <send_boot+0xa16>
    8006:	f24c 5349 	movw	r3, #50505	; 0xc549
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	2200      	movs	r2, #0
    8010:	701a      	strb	r2, [r3, #0]
    8012:	f24c 5349 	movw	r3, #50505	; 0xc549
    8016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	461a      	mov	r2, r3
    801e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	7859      	ldrb	r1, [r3, #1]
    8028:	f24c 534c 	movw	r3, #50508	; 0xc54c
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	5499      	strb	r1, [r3, r2]
    8032:	4b8b      	ldr	r3, [pc, #556]	; (8260 <send_boot+0xc64>)
    8034:	781a      	ldrb	r2, [r3, #0]
    8036:	f24c 634d 	movw	r3, #50765	; 0xc64d
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	781b      	ldrb	r3, [r3, #0]
    8040:	4413      	add	r3, r2
    8042:	b2da      	uxtb	r2, r3
    8044:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804c:	701a      	strb	r2, [r3, #0]
    804e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	781a      	ldrb	r2, [r3, #0]
    8058:	f24c 634d 	movw	r3, #50765	; 0xc64d
    805c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	4413      	add	r3, r2
    8064:	b2da      	uxtb	r2, r3
    8066:	f24c 634e 	movw	r3, #50766	; 0xc64e
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	701a      	strb	r2, [r3, #0]
    8070:	f24c 5349 	movw	r3, #50505	; 0xc549
    8074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8078:	781b      	ldrb	r3, [r3, #0]
    807a:	3301      	adds	r3, #1
    807c:	b2da      	uxtb	r2, r3
    807e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	701a      	strb	r2, [r3, #0]
    8088:	f24c 5349 	movw	r3, #50505	; 0xc549
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	2bff      	cmp	r3, #255	; 0xff
    8094:	d105      	bne.n	80a2 <send_boot+0xaa6>
    8096:	f24c 5349 	movw	r3, #50505	; 0xc549
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	2200      	movs	r2, #0
    80a0:	701a      	strb	r2, [r3, #0]
    80a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    80a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80aa:	781b      	ldrb	r3, [r3, #0]
    80ac:	461a      	mov	r2, r3
    80ae:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	7899      	ldrb	r1, [r3, #2]
    80b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    80bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c0:	5499      	strb	r1, [r3, r2]
    80c2:	4b68      	ldr	r3, [pc, #416]	; (8264 <send_boot+0xc68>)
    80c4:	781a      	ldrb	r2, [r3, #0]
    80c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	781b      	ldrb	r3, [r3, #0]
    80d0:	4413      	add	r3, r2
    80d2:	b2da      	uxtb	r2, r3
    80d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80dc:	701a      	strb	r2, [r3, #0]
    80de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	781a      	ldrb	r2, [r3, #0]
    80e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	4413      	add	r3, r2
    80f4:	b2da      	uxtb	r2, r3
    80f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	701a      	strb	r2, [r3, #0]
    8100:	f24c 5349 	movw	r3, #50505	; 0xc549
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	3301      	adds	r3, #1
    810c:	b2da      	uxtb	r2, r3
    810e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	701a      	strb	r2, [r3, #0]
    8118:	f24c 5349 	movw	r3, #50505	; 0xc549
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	2bff      	cmp	r3, #255	; 0xff
    8124:	d105      	bne.n	8132 <send_boot+0xb36>
    8126:	f24c 5349 	movw	r3, #50505	; 0xc549
    812a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812e:	2200      	movs	r2, #0
    8130:	701a      	strb	r2, [r3, #0]
    8132:	f24c 5349 	movw	r3, #50505	; 0xc549
    8136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813a:	781b      	ldrb	r3, [r3, #0]
    813c:	461a      	mov	r2, r3
    813e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	78d9      	ldrb	r1, [r3, #3]
    8148:	f24c 534c 	movw	r3, #50508	; 0xc54c
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	5499      	strb	r1, [r3, r2]
    8152:	4b45      	ldr	r3, [pc, #276]	; (8268 <send_boot+0xc6c>)
    8154:	781a      	ldrb	r2, [r3, #0]
    8156:	f24c 634d 	movw	r3, #50765	; 0xc64d
    815a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	4413      	add	r3, r2
    8162:	b2da      	uxtb	r2, r3
    8164:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816c:	701a      	strb	r2, [r3, #0]
    816e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8176:	781a      	ldrb	r2, [r3, #0]
    8178:	f24c 634d 	movw	r3, #50765	; 0xc64d
    817c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	4413      	add	r3, r2
    8184:	b2da      	uxtb	r2, r3
    8186:	f24c 634e 	movw	r3, #50766	; 0xc64e
    818a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818e:	701a      	strb	r2, [r3, #0]
    8190:	f24c 5349 	movw	r3, #50505	; 0xc549
    8194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8198:	781b      	ldrb	r3, [r3, #0]
    819a:	3301      	adds	r3, #1
    819c:	b2da      	uxtb	r2, r3
    819e:	f24c 5349 	movw	r3, #50505	; 0xc549
    81a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a6:	701a      	strb	r2, [r3, #0]
    81a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    81ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b0:	781b      	ldrb	r3, [r3, #0]
    81b2:	2bff      	cmp	r3, #255	; 0xff
    81b4:	d105      	bne.n	81c2 <send_boot+0xbc6>
    81b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    81ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81be:	2200      	movs	r2, #0
    81c0:	701a      	strb	r2, [r3, #0]
    81c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    81c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ca:	781b      	ldrb	r3, [r3, #0]
    81cc:	461a      	mov	r2, r3
    81ce:	f240 5342 	movw	r3, #1346	; 0x542
    81d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d6:	7819      	ldrb	r1, [r3, #0]
    81d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    81dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e0:	5499      	strb	r1, [r3, r2]
    81e2:	f240 5342 	movw	r3, #1346	; 0x542
    81e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ea:	781a      	ldrb	r2, [r3, #0]
    81ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	4413      	add	r3, r2
    81f8:	b2da      	uxtb	r2, r3
    81fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8202:	701a      	strb	r2, [r3, #0]
    8204:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820c:	781a      	ldrb	r2, [r3, #0]
    820e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	4413      	add	r3, r2
    821a:	b2da      	uxtb	r2, r3
    821c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8224:	701a      	strb	r2, [r3, #0]
    8226:	f24c 5349 	movw	r3, #50505	; 0xc549
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	3301      	adds	r3, #1
    8232:	b2da      	uxtb	r2, r3
    8234:	f24c 5349 	movw	r3, #50505	; 0xc549
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	701a      	strb	r2, [r3, #0]
    823e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	781b      	ldrb	r3, [r3, #0]
    8248:	2bff      	cmp	r3, #255	; 0xff
    824a:	d10f      	bne.n	826c <send_boot+0xc70>
    824c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8254:	2200      	movs	r2, #0
    8256:	701a      	strb	r2, [r3, #0]
    8258:	e008      	b.n	826c <send_boot+0xc70>
    825a:	bf00      	nop
    825c:	2004cb47 	.word	0x2004cb47
    8260:	2004cb3d 	.word	0x2004cb3d
    8264:	2004cb3e 	.word	0x2004cb3e
    8268:	2004cb3f 	.word	0x2004cb3f
    826c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8274:	781b      	ldrb	r3, [r3, #0]
    8276:	461a      	mov	r2, r3
    8278:	f240 5342 	movw	r3, #1346	; 0x542
    827c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8280:	7859      	ldrb	r1, [r3, #1]
    8282:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828a:	5499      	strb	r1, [r3, r2]
    828c:	4bc5      	ldr	r3, [pc, #788]	; (85a4 <send_boot+0xfa8>)
    828e:	781a      	ldrb	r2, [r3, #0]
    8290:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	4413      	add	r3, r2
    829c:	b2da      	uxtb	r2, r3
    829e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	701a      	strb	r2, [r3, #0]
    82a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b0:	781a      	ldrb	r2, [r3, #0]
    82b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ba:	781b      	ldrb	r3, [r3, #0]
    82bc:	4413      	add	r3, r2
    82be:	b2da      	uxtb	r2, r3
    82c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    82ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	3301      	adds	r3, #1
    82d6:	b2da      	uxtb	r2, r3
    82d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	701a      	strb	r2, [r3, #0]
    82e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    82e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ea:	781b      	ldrb	r3, [r3, #0]
    82ec:	2bff      	cmp	r3, #255	; 0xff
    82ee:	d105      	bne.n	82fc <send_boot+0xd00>
    82f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f8:	2200      	movs	r2, #0
    82fa:	701a      	strb	r2, [r3, #0]
    82fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8304:	781b      	ldrb	r3, [r3, #0]
    8306:	461a      	mov	r2, r3
    8308:	f240 5344 	movw	r3, #1348	; 0x544
    830c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8310:	7819      	ldrb	r1, [r3, #0]
    8312:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831a:	5499      	strb	r1, [r3, r2]
    831c:	f240 5344 	movw	r3, #1348	; 0x544
    8320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8324:	781a      	ldrb	r2, [r3, #0]
    8326:	f24c 634d 	movw	r3, #50765	; 0xc64d
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	4413      	add	r3, r2
    8332:	b2da      	uxtb	r2, r3
    8334:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833c:	701a      	strb	r2, [r3, #0]
    833e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8346:	781a      	ldrb	r2, [r3, #0]
    8348:	f24c 634d 	movw	r3, #50765	; 0xc64d
    834c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8350:	781b      	ldrb	r3, [r3, #0]
    8352:	4413      	add	r3, r2
    8354:	b2da      	uxtb	r2, r3
    8356:	f24c 634e 	movw	r3, #50766	; 0xc64e
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	701a      	strb	r2, [r3, #0]
    8360:	f24c 5349 	movw	r3, #50505	; 0xc549
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	781b      	ldrb	r3, [r3, #0]
    836a:	3301      	adds	r3, #1
    836c:	b2da      	uxtb	r2, r3
    836e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8376:	701a      	strb	r2, [r3, #0]
    8378:	f24c 5349 	movw	r3, #50505	; 0xc549
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	2bff      	cmp	r3, #255	; 0xff
    8384:	d105      	bne.n	8392 <send_boot+0xd96>
    8386:	f24c 5349 	movw	r3, #50505	; 0xc549
    838a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838e:	2200      	movs	r2, #0
    8390:	701a      	strb	r2, [r3, #0]
    8392:	f24c 5349 	movw	r3, #50505	; 0xc549
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	461a      	mov	r2, r3
    839e:	f240 5344 	movw	r3, #1348	; 0x544
    83a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a6:	7859      	ldrb	r1, [r3, #1]
    83a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    83ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b0:	5499      	strb	r1, [r3, r2]
    83b2:	4b7d      	ldr	r3, [pc, #500]	; (85a8 <send_boot+0xfac>)
    83b4:	781a      	ldrb	r2, [r3, #0]
    83b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	4413      	add	r3, r2
    83c2:	b2da      	uxtb	r2, r3
    83c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83cc:	701a      	strb	r2, [r3, #0]
    83ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    83d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d6:	781a      	ldrb	r2, [r3, #0]
    83d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	4413      	add	r3, r2
    83e4:	b2da      	uxtb	r2, r3
    83e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    83ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ee:	701a      	strb	r2, [r3, #0]
    83f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    83f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f8:	781b      	ldrb	r3, [r3, #0]
    83fa:	3301      	adds	r3, #1
    83fc:	b2da      	uxtb	r2, r3
    83fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8406:	701a      	strb	r2, [r3, #0]
    8408:	f24c 5349 	movw	r3, #50505	; 0xc549
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	781b      	ldrb	r3, [r3, #0]
    8412:	2bff      	cmp	r3, #255	; 0xff
    8414:	d105      	bne.n	8422 <send_boot+0xe26>
    8416:	f24c 5349 	movw	r3, #50505	; 0xc549
    841a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841e:	2200      	movs	r2, #0
    8420:	701a      	strb	r2, [r3, #0]
    8422:	f24c 5349 	movw	r3, #50505	; 0xc549
    8426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842a:	781b      	ldrb	r3, [r3, #0]
    842c:	461a      	mov	r2, r3
    842e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8436:	7819      	ldrb	r1, [r3, #0]
    8438:	f24c 534c 	movw	r3, #50508	; 0xc54c
    843c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8440:	5499      	strb	r1, [r3, r2]
    8442:	f24c 5349 	movw	r3, #50505	; 0xc549
    8446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844a:	781b      	ldrb	r3, [r3, #0]
    844c:	3301      	adds	r3, #1
    844e:	b2da      	uxtb	r2, r3
    8450:	f24c 5349 	movw	r3, #50505	; 0xc549
    8454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8458:	701a      	strb	r2, [r3, #0]
    845a:	f24c 5349 	movw	r3, #50505	; 0xc549
    845e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	2bff      	cmp	r3, #255	; 0xff
    8466:	d105      	bne.n	8474 <send_boot+0xe78>
    8468:	f24c 5349 	movw	r3, #50505	; 0xc549
    846c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8470:	2200      	movs	r2, #0
    8472:	701a      	strb	r2, [r3, #0]
    8474:	f24c 5349 	movw	r3, #50505	; 0xc549
    8478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847c:	781b      	ldrb	r3, [r3, #0]
    847e:	461a      	mov	r2, r3
    8480:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8488:	7819      	ldrb	r1, [r3, #0]
    848a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	5499      	strb	r1, [r3, r2]
    8494:	f24c 5349 	movw	r3, #50505	; 0xc549
    8498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849c:	781b      	ldrb	r3, [r3, #0]
    849e:	3301      	adds	r3, #1
    84a0:	b2da      	uxtb	r2, r3
    84a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	701a      	strb	r2, [r3, #0]
    84ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    84b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b4:	781b      	ldrb	r3, [r3, #0]
    84b6:	2bff      	cmp	r3, #255	; 0xff
    84b8:	d105      	bne.n	84c6 <send_boot+0xeca>
    84ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    84be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c2:	2200      	movs	r2, #0
    84c4:	701a      	strb	r2, [r3, #0]
    84c6:	f242 0339 	movw	r3, #8249	; 0x2039
    84ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ce:	781b      	ldrb	r3, [r3, #0]
    84d0:	b2db      	uxtb	r3, r3
    84d2:	f003 0310 	and.w	r3, r3, #16
    84d6:	2b00      	cmp	r3, #0
    84d8:	d15a      	bne.n	8590 <send_boot+0xf94>
    84da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	781b      	ldrb	r3, [r3, #0]
    84e4:	b2db      	uxtb	r3, r3
    84e6:	461a      	mov	r2, r3
    84e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    84ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f0:	5c9a      	ldrb	r2, [r3, r2]
    84f2:	f24c 634b 	movw	r3, #50763	; 0xc64b
    84f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8504:	2200      	movs	r2, #0
    8506:	701a      	strb	r2, [r3, #0]
    8508:	f24c 534a 	movw	r3, #50506	; 0xc54a
    850c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	b2db      	uxtb	r3, r3
    8514:	3301      	adds	r3, #1
    8516:	b2da      	uxtb	r2, r3
    8518:	f24c 534a 	movw	r3, #50506	; 0xc54a
    851c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8520:	701a      	strb	r2, [r3, #0]
    8522:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852a:	781b      	ldrb	r3, [r3, #0]
    852c:	b2db      	uxtb	r3, r3
    852e:	2bff      	cmp	r3, #255	; 0xff
    8530:	d105      	bne.n	853e <send_boot+0xf42>
    8532:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853a:	2200      	movs	r2, #0
    853c:	701a      	strb	r2, [r3, #0]
    853e:	f242 0338 	movw	r3, #8248	; 0x2038
    8542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8546:	f242 0238 	movw	r2, #8248	; 0x2038
    854a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    854e:	7812      	ldrb	r2, [r2, #0]
    8550:	b2d2      	uxtb	r2, r2
    8552:	f042 0201 	orr.w	r2, r2, #1
    8556:	b2d2      	uxtb	r2, r2
    8558:	701a      	strb	r2, [r3, #0]
    855a:	f242 0339 	movw	r3, #8249	; 0x2039
    855e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8562:	f242 0239 	movw	r2, #8249	; 0x2039
    8566:	f2c2 0200 	movt	r2, #8192	; 0x2000
    856a:	7812      	ldrb	r2, [r2, #0]
    856c:	b2d2      	uxtb	r2, r2
    856e:	f042 0210 	orr.w	r2, r2, #16
    8572:	b2d2      	uxtb	r2, r2
    8574:	701a      	strb	r2, [r3, #0]
    8576:	e00b      	b.n	8590 <send_boot+0xf94>
    8578:	f24c 5348 	movw	r3, #50504	; 0xc548
    857c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8580:	781b      	ldrb	r3, [r3, #0]
    8582:	3301      	adds	r3, #1
    8584:	b2da      	uxtb	r2, r3
    8586:	f24c 5348 	movw	r3, #50504	; 0xc548
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8590:	f240 533d 	movw	r3, #1341	; 0x53d
    8594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8598:	2200      	movs	r2, #0
    859a:	701a      	strb	r2, [r3, #0]
  }
}
    859c:	46bd      	mov	sp, r7
    859e:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a2:	4770      	bx	lr
    85a4:	20000543 	.word	0x20000543
    85a8:	20000545 	.word	0x20000545

000085ac <send_attitude>:
void send_attitude(void){ //499ms
    85ac:	b480      	push	{r7}
    85ae:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    85b0:	f240 533d 	movw	r3, #1341	; 0x53d
    85b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	2b00      	cmp	r3, #0
    85bc:	f040 84ee 	bne.w	8f9c <send_attitude+0x9f0>
  {
    count++;
    85c0:	f24c 5341 	movw	r3, #50497	; 0xc541
    85c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	3301      	adds	r3, #1
    85cc:	b2da      	uxtb	r2, r3
    85ce:	f24c 5341 	movw	r3, #50497	; 0xc541
    85d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d6:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    85d8:	f24c 5341 	movw	r3, #50497	; 0xc541
    85dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e0:	781b      	ldrb	r3, [r3, #0]
    85e2:	2bfa      	cmp	r3, #250	; 0xfa
    85e4:	d105      	bne.n	85f2 <send_attitude+0x46>
    85e6:	f24c 5341 	movw	r3, #50497	; 0xc541
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	2200      	movs	r2, #0
    85f0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    85f2:	f24c 5341 	movw	r3, #50497	; 0xc541
    85f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fa:	781a      	ldrb	r2, [r3, #0]
    85fc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8600:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8604:	fba3 1302 	umull	r1, r3, r3, r2
    8608:	0899      	lsrs	r1, r3, #2
    860a:	460b      	mov	r3, r1
    860c:	009b      	lsls	r3, r3, #2
    860e:	440b      	add	r3, r1
    8610:	1ad3      	subs	r3, r2, r3
    8612:	b2db      	uxtb	r3, r3
    8614:	2b00      	cmp	r3, #0
    8616:	f040 84c1 	bne.w	8f9c <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    861a:	f24c 5349 	movw	r3, #50505	; 0xc549
    861e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8622:	781a      	ldrb	r2, [r3, #0]
    8624:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	781b      	ldrb	r3, [r3, #0]
    862e:	b2db      	uxtb	r3, r3
    8630:	429a      	cmp	r2, r3
    8632:	d313      	bcc.n	865c <send_attitude+0xb0>
    8634:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863c:	781b      	ldrb	r3, [r3, #0]
    863e:	b2db      	uxtb	r3, r3
    8640:	461a      	mov	r2, r3
    8642:	f24c 5349 	movw	r3, #50505	; 0xc549
    8646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	1ad3      	subs	r3, r2, r3
    864e:	33ff      	adds	r3, #255	; 0xff
    8650:	2b10      	cmp	r3, #16
    8652:	bfd4      	ite	le
    8654:	2300      	movle	r3, #0
    8656:	2301      	movgt	r3, #1
    8658:	b2db      	uxtb	r3, r3
    865a:	e011      	b.n	8680 <send_attitude+0xd4>
    865c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	b2db      	uxtb	r3, r3
    8668:	461a      	mov	r2, r3
    866a:	f24c 5349 	movw	r3, #50505	; 0xc549
    866e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	1ad3      	subs	r3, r2, r3
    8676:	2b10      	cmp	r3, #16
    8678:	bfd4      	ite	le
    867a:	2300      	movle	r3, #0
    867c:	2301      	movgt	r3, #1
    867e:	b2db      	uxtb	r3, r3
    8680:	2b00      	cmp	r3, #0
    8682:	f000 847f 	beq.w	8f84 <send_attitude+0x9d8>
    8686:	f24c 5349 	movw	r3, #50505	; 0xc549
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	461a      	mov	r2, r3
    8692:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869a:	2105      	movs	r1, #5
    869c:	5499      	strb	r1, [r3, r2]
    869e:	f24c 5349 	movw	r3, #50505	; 0xc549
    86a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	3301      	adds	r3, #1
    86aa:	b2da      	uxtb	r2, r3
    86ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	2bff      	cmp	r3, #255	; 0xff
    86c2:	d105      	bne.n	86d0 <send_attitude+0x124>
    86c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	2200      	movs	r2, #0
    86ce:	701a      	strb	r2, [r3, #0]
    86d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    86d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d8:	781b      	ldrb	r3, [r3, #0]
    86da:	461a      	mov	r2, r3
    86dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	2106      	movs	r1, #6
    86e6:	5499      	strb	r1, [r3, r2]
    86e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    86ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f0:	781b      	ldrb	r3, [r3, #0]
    86f2:	3301      	adds	r3, #1
    86f4:	b2da      	uxtb	r2, r3
    86f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fe:	701a      	strb	r2, [r3, #0]
    8700:	f24c 5349 	movw	r3, #50505	; 0xc549
    8704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8708:	781b      	ldrb	r3, [r3, #0]
    870a:	2bff      	cmp	r3, #255	; 0xff
    870c:	d105      	bne.n	871a <send_attitude+0x16e>
    870e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8716:	2200      	movs	r2, #0
    8718:	701a      	strb	r2, [r3, #0]
    871a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    871e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8722:	2206      	movs	r2, #6
    8724:	701a      	strb	r2, [r3, #0]
    8726:	f24c 634e 	movw	r3, #50766	; 0xc64e
    872a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872e:	2206      	movs	r2, #6
    8730:	701a      	strb	r2, [r3, #0]
    8732:	f24c 5349 	movw	r3, #50505	; 0xc549
    8736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873a:	781b      	ldrb	r3, [r3, #0]
    873c:	461a      	mov	r2, r3
    873e:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8746:	7819      	ldrb	r1, [r3, #0]
    8748:	f24c 534c 	movw	r3, #50508	; 0xc54c
    874c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8750:	5499      	strb	r1, [r3, r2]
    8752:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875a:	781a      	ldrb	r2, [r3, #0]
    875c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8764:	781b      	ldrb	r3, [r3, #0]
    8766:	4413      	add	r3, r2
    8768:	b2da      	uxtb	r2, r3
    876a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    876e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8772:	701a      	strb	r2, [r3, #0]
    8774:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	781a      	ldrb	r2, [r3, #0]
    877e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	4413      	add	r3, r2
    878a:	b2da      	uxtb	r2, r3
    878c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8794:	701a      	strb	r2, [r3, #0]
    8796:	f24c 5349 	movw	r3, #50505	; 0xc549
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	3301      	adds	r3, #1
    87a2:	b2da      	uxtb	r2, r3
    87a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    87a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ac:	701a      	strb	r2, [r3, #0]
    87ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	2bff      	cmp	r3, #255	; 0xff
    87ba:	d105      	bne.n	87c8 <send_attitude+0x21c>
    87bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	2200      	movs	r2, #0
    87c6:	701a      	strb	r2, [r3, #0]
    87c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    87cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d0:	781b      	ldrb	r3, [r3, #0]
    87d2:	461a      	mov	r2, r3
    87d4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	7859      	ldrb	r1, [r3, #1]
    87de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	5499      	strb	r1, [r3, r2]
    87e8:	4bd1      	ldr	r3, [pc, #836]	; (8b30 <send_attitude+0x584>)
    87ea:	781a      	ldrb	r2, [r3, #0]
    87ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	4413      	add	r3, r2
    87f8:	b2da      	uxtb	r2, r3
    87fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8802:	701a      	strb	r2, [r3, #0]
    8804:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	781a      	ldrb	r2, [r3, #0]
    880e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	4413      	add	r3, r2
    881a:	b2da      	uxtb	r2, r3
    881c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	701a      	strb	r2, [r3, #0]
    8826:	f24c 5349 	movw	r3, #50505	; 0xc549
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	781b      	ldrb	r3, [r3, #0]
    8830:	3301      	adds	r3, #1
    8832:	b2da      	uxtb	r2, r3
    8834:	f24c 5349 	movw	r3, #50505	; 0xc549
    8838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883c:	701a      	strb	r2, [r3, #0]
    883e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	2bff      	cmp	r3, #255	; 0xff
    884a:	d105      	bne.n	8858 <send_attitude+0x2ac>
    884c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8854:	2200      	movs	r2, #0
    8856:	701a      	strb	r2, [r3, #0]
    8858:	f24c 5349 	movw	r3, #50505	; 0xc549
    885c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8860:	781b      	ldrb	r3, [r3, #0]
    8862:	461a      	mov	r2, r3
    8864:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886c:	7899      	ldrb	r1, [r3, #2]
    886e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8876:	5499      	strb	r1, [r3, r2]
    8878:	4bae      	ldr	r3, [pc, #696]	; (8b34 <send_attitude+0x588>)
    887a:	781a      	ldrb	r2, [r3, #0]
    887c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8884:	781b      	ldrb	r3, [r3, #0]
    8886:	4413      	add	r3, r2
    8888:	b2da      	uxtb	r2, r3
    888a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    888e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8892:	701a      	strb	r2, [r3, #0]
    8894:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889c:	781a      	ldrb	r2, [r3, #0]
    889e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	4413      	add	r3, r2
    88aa:	b2da      	uxtb	r2, r3
    88ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b4:	701a      	strb	r2, [r3, #0]
    88b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    88ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	3301      	adds	r3, #1
    88c2:	b2da      	uxtb	r2, r3
    88c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88cc:	701a      	strb	r2, [r3, #0]
    88ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    88d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	2bff      	cmp	r3, #255	; 0xff
    88da:	d105      	bne.n	88e8 <send_attitude+0x33c>
    88dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    88e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e4:	2200      	movs	r2, #0
    88e6:	701a      	strb	r2, [r3, #0]
    88e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    88ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f0:	781b      	ldrb	r3, [r3, #0]
    88f2:	461a      	mov	r2, r3
    88f4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    88f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fc:	78d9      	ldrb	r1, [r3, #3]
    88fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8906:	5499      	strb	r1, [r3, r2]
    8908:	4b8b      	ldr	r3, [pc, #556]	; (8b38 <send_attitude+0x58c>)
    890a:	781a      	ldrb	r2, [r3, #0]
    890c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	4413      	add	r3, r2
    8918:	b2da      	uxtb	r2, r3
    891a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    891e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8922:	701a      	strb	r2, [r3, #0]
    8924:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892c:	781a      	ldrb	r2, [r3, #0]
    892e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	4413      	add	r3, r2
    893a:	b2da      	uxtb	r2, r3
    893c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8944:	701a      	strb	r2, [r3, #0]
    8946:	f24c 5349 	movw	r3, #50505	; 0xc549
    894a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894e:	781b      	ldrb	r3, [r3, #0]
    8950:	3301      	adds	r3, #1
    8952:	b2da      	uxtb	r2, r3
    8954:	f24c 5349 	movw	r3, #50505	; 0xc549
    8958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895c:	701a      	strb	r2, [r3, #0]
    895e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	2bff      	cmp	r3, #255	; 0xff
    896a:	d105      	bne.n	8978 <send_attitude+0x3cc>
    896c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8974:	2200      	movs	r2, #0
    8976:	701a      	strb	r2, [r3, #0]
    8978:	f24c 5349 	movw	r3, #50505	; 0xc549
    897c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	461a      	mov	r2, r3
    8984:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898c:	7819      	ldrb	r1, [r3, #0]
    898e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8996:	5499      	strb	r1, [r3, r2]
    8998:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    899c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a0:	781a      	ldrb	r2, [r3, #0]
    89a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	4413      	add	r3, r2
    89ae:	b2da      	uxtb	r2, r3
    89b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b8:	701a      	strb	r2, [r3, #0]
    89ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	781a      	ldrb	r2, [r3, #0]
    89c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89cc:	781b      	ldrb	r3, [r3, #0]
    89ce:	4413      	add	r3, r2
    89d0:	b2da      	uxtb	r2, r3
    89d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89da:	701a      	strb	r2, [r3, #0]
    89dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	3301      	adds	r3, #1
    89e8:	b2da      	uxtb	r2, r3
    89ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	701a      	strb	r2, [r3, #0]
    89f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	2bff      	cmp	r3, #255	; 0xff
    8a00:	d105      	bne.n	8a0e <send_attitude+0x462>
    8a02:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	2200      	movs	r2, #0
    8a0c:	701a      	strb	r2, [r3, #0]
    8a0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a16:	781b      	ldrb	r3, [r3, #0]
    8a18:	461a      	mov	r2, r3
    8a1a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	7859      	ldrb	r1, [r3, #1]
    8a24:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2c:	5499      	strb	r1, [r3, r2]
    8a2e:	4b43      	ldr	r3, [pc, #268]	; (8b3c <send_attitude+0x590>)
    8a30:	781a      	ldrb	r2, [r3, #0]
    8a32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	781b      	ldrb	r3, [r3, #0]
    8a3c:	4413      	add	r3, r2
    8a3e:	b2da      	uxtb	r2, r3
    8a40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a48:	701a      	strb	r2, [r3, #0]
    8a4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	781a      	ldrb	r2, [r3, #0]
    8a54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	4413      	add	r3, r2
    8a60:	b2da      	uxtb	r2, r3
    8a62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6a:	701a      	strb	r2, [r3, #0]
    8a6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	3301      	adds	r3, #1
    8a78:	b2da      	uxtb	r2, r3
    8a7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	701a      	strb	r2, [r3, #0]
    8a84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	2bff      	cmp	r3, #255	; 0xff
    8a90:	d105      	bne.n	8a9e <send_attitude+0x4f2>
    8a92:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	2200      	movs	r2, #0
    8a9c:	701a      	strb	r2, [r3, #0]
    8a9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa6:	781b      	ldrb	r3, [r3, #0]
    8aa8:	461a      	mov	r2, r3
    8aaa:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	7899      	ldrb	r1, [r3, #2]
    8ab4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8abc:	5499      	strb	r1, [r3, r2]
    8abe:	4b20      	ldr	r3, [pc, #128]	; (8b40 <send_attitude+0x594>)
    8ac0:	781a      	ldrb	r2, [r3, #0]
    8ac2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	4413      	add	r3, r2
    8ace:	b2da      	uxtb	r2, r3
    8ad0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	701a      	strb	r2, [r3, #0]
    8ada:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	781a      	ldrb	r2, [r3, #0]
    8ae4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aec:	781b      	ldrb	r3, [r3, #0]
    8aee:	4413      	add	r3, r2
    8af0:	b2da      	uxtb	r2, r3
    8af2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afa:	701a      	strb	r2, [r3, #0]
    8afc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b04:	781b      	ldrb	r3, [r3, #0]
    8b06:	3301      	adds	r3, #1
    8b08:	b2da      	uxtb	r2, r3
    8b0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b12:	701a      	strb	r2, [r3, #0]
    8b14:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b1c:	781b      	ldrb	r3, [r3, #0]
    8b1e:	2bff      	cmp	r3, #255	; 0xff
    8b20:	d110      	bne.n	8b44 <send_attitude+0x598>
    8b22:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	2200      	movs	r2, #0
    8b2c:	701a      	strb	r2, [r3, #0]
    8b2e:	e009      	b.n	8b44 <send_attitude+0x598>
    8b30:	2004cb09 	.word	0x2004cb09
    8b34:	2004cb0a 	.word	0x2004cb0a
    8b38:	2004cb0b 	.word	0x2004cb0b
    8b3c:	2004cb0d 	.word	0x2004cb0d
    8b40:	2004cb0e 	.word	0x2004cb0e
    8b44:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4c:	781b      	ldrb	r3, [r3, #0]
    8b4e:	461a      	mov	r2, r3
    8b50:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b58:	78d9      	ldrb	r1, [r3, #3]
    8b5a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b62:	5499      	strb	r1, [r3, r2]
    8b64:	4bc2      	ldr	r3, [pc, #776]	; (8e70 <send_attitude+0x8c4>)
    8b66:	781a      	ldrb	r2, [r3, #0]
    8b68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b70:	781b      	ldrb	r3, [r3, #0]
    8b72:	4413      	add	r3, r2
    8b74:	b2da      	uxtb	r2, r3
    8b76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7e:	701a      	strb	r2, [r3, #0]
    8b80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b88:	781a      	ldrb	r2, [r3, #0]
    8b8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	4413      	add	r3, r2
    8b96:	b2da      	uxtb	r2, r3
    8b98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba0:	701a      	strb	r2, [r3, #0]
    8ba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	3301      	adds	r3, #1
    8bae:	b2da      	uxtb	r2, r3
    8bb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb8:	701a      	strb	r2, [r3, #0]
    8bba:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	2bff      	cmp	r3, #255	; 0xff
    8bc6:	d105      	bne.n	8bd4 <send_attitude+0x628>
    8bc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd0:	2200      	movs	r2, #0
    8bd2:	701a      	strb	r2, [r3, #0]
    8bd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bdc:	781b      	ldrb	r3, [r3, #0]
    8bde:	461a      	mov	r2, r3
    8be0:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be8:	7819      	ldrb	r1, [r3, #0]
    8bea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	5499      	strb	r1, [r3, r2]
    8bf4:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfc:	781a      	ldrb	r2, [r3, #0]
    8bfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	4413      	add	r3, r2
    8c0a:	b2da      	uxtb	r2, r3
    8c0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c14:	701a      	strb	r2, [r3, #0]
    8c16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1e:	781a      	ldrb	r2, [r3, #0]
    8c20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	4413      	add	r3, r2
    8c2c:	b2da      	uxtb	r2, r3
    8c2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	701a      	strb	r2, [r3, #0]
    8c38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	781b      	ldrb	r3, [r3, #0]
    8c42:	3301      	adds	r3, #1
    8c44:	b2da      	uxtb	r2, r3
    8c46:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	701a      	strb	r2, [r3, #0]
    8c50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	2bff      	cmp	r3, #255	; 0xff
    8c5c:	d105      	bne.n	8c6a <send_attitude+0x6be>
    8c5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	2200      	movs	r2, #0
    8c68:	701a      	strb	r2, [r3, #0]
    8c6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c72:	781b      	ldrb	r3, [r3, #0]
    8c74:	461a      	mov	r2, r3
    8c76:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	7859      	ldrb	r1, [r3, #1]
    8c80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	5499      	strb	r1, [r3, r2]
    8c8a:	4b7a      	ldr	r3, [pc, #488]	; (8e74 <send_attitude+0x8c8>)
    8c8c:	781a      	ldrb	r2, [r3, #0]
    8c8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	781b      	ldrb	r3, [r3, #0]
    8c98:	4413      	add	r3, r2
    8c9a:	b2da      	uxtb	r2, r3
    8c9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca4:	701a      	strb	r2, [r3, #0]
    8ca6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	781a      	ldrb	r2, [r3, #0]
    8cb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	4413      	add	r3, r2
    8cbc:	b2da      	uxtb	r2, r3
    8cbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	701a      	strb	r2, [r3, #0]
    8cc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	3301      	adds	r3, #1
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	701a      	strb	r2, [r3, #0]
    8ce0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	2bff      	cmp	r3, #255	; 0xff
    8cec:	d105      	bne.n	8cfa <send_attitude+0x74e>
    8cee:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf6:	2200      	movs	r2, #0
    8cf8:	701a      	strb	r2, [r3, #0]
    8cfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	461a      	mov	r2, r3
    8d06:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0e:	7899      	ldrb	r1, [r3, #2]
    8d10:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d18:	5499      	strb	r1, [r3, r2]
    8d1a:	4b57      	ldr	r3, [pc, #348]	; (8e78 <send_attitude+0x8cc>)
    8d1c:	781a      	ldrb	r2, [r3, #0]
    8d1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	4413      	add	r3, r2
    8d2a:	b2da      	uxtb	r2, r3
    8d2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d34:	701a      	strb	r2, [r3, #0]
    8d36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3e:	781a      	ldrb	r2, [r3, #0]
    8d40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d48:	781b      	ldrb	r3, [r3, #0]
    8d4a:	4413      	add	r3, r2
    8d4c:	b2da      	uxtb	r2, r3
    8d4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d56:	701a      	strb	r2, [r3, #0]
    8d58:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d60:	781b      	ldrb	r3, [r3, #0]
    8d62:	3301      	adds	r3, #1
    8d64:	b2da      	uxtb	r2, r3
    8d66:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d6e:	701a      	strb	r2, [r3, #0]
    8d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	2bff      	cmp	r3, #255	; 0xff
    8d7c:	d105      	bne.n	8d8a <send_attitude+0x7de>
    8d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d86:	2200      	movs	r2, #0
    8d88:	701a      	strb	r2, [r3, #0]
    8d8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	461a      	mov	r2, r3
    8d96:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9e:	78d9      	ldrb	r1, [r3, #3]
    8da0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da8:	5499      	strb	r1, [r3, r2]
    8daa:	4b34      	ldr	r3, [pc, #208]	; (8e7c <send_attitude+0x8d0>)
    8dac:	781a      	ldrb	r2, [r3, #0]
    8dae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db6:	781b      	ldrb	r3, [r3, #0]
    8db8:	4413      	add	r3, r2
    8dba:	b2da      	uxtb	r2, r3
    8dbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc4:	701a      	strb	r2, [r3, #0]
    8dc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dce:	781a      	ldrb	r2, [r3, #0]
    8dd0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	4413      	add	r3, r2
    8ddc:	b2da      	uxtb	r2, r3
    8dde:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de6:	701a      	strb	r2, [r3, #0]
    8de8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	3301      	adds	r3, #1
    8df4:	b2da      	uxtb	r2, r3
    8df6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfe:	701a      	strb	r2, [r3, #0]
    8e00:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e08:	781b      	ldrb	r3, [r3, #0]
    8e0a:	2bff      	cmp	r3, #255	; 0xff
    8e0c:	d105      	bne.n	8e1a <send_attitude+0x86e>
    8e0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e16:	2200      	movs	r2, #0
    8e18:	701a      	strb	r2, [r3, #0]
    8e1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	461a      	mov	r2, r3
    8e26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2e:	7819      	ldrb	r1, [r3, #0]
    8e30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	5499      	strb	r1, [r3, r2]
    8e3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	3301      	adds	r3, #1
    8e46:	b2da      	uxtb	r2, r3
    8e48:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e50:	701a      	strb	r2, [r3, #0]
    8e52:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5a:	781b      	ldrb	r3, [r3, #0]
    8e5c:	2bff      	cmp	r3, #255	; 0xff
    8e5e:	d10f      	bne.n	8e80 <send_attitude+0x8d4>
    8e60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e68:	2200      	movs	r2, #0
    8e6a:	701a      	strb	r2, [r3, #0]
    8e6c:	e008      	b.n	8e80 <send_attitude+0x8d4>
    8e6e:	bf00      	nop
    8e70:	2004cb0f 	.word	0x2004cb0f
    8e74:	2004cb11 	.word	0x2004cb11
    8e78:	2004cb12 	.word	0x2004cb12
    8e7c:	2004cb13 	.word	0x2004cb13
    8e80:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e88:	781b      	ldrb	r3, [r3, #0]
    8e8a:	461a      	mov	r2, r3
    8e8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e94:	7819      	ldrb	r1, [r3, #0]
    8e96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9e:	5499      	strb	r1, [r3, r2]
    8ea0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	3301      	adds	r3, #1
    8eac:	b2da      	uxtb	r2, r3
    8eae:	f24c 5349 	movw	r3, #50505	; 0xc549
    8eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb6:	701a      	strb	r2, [r3, #0]
    8eb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	2bff      	cmp	r3, #255	; 0xff
    8ec4:	d105      	bne.n	8ed2 <send_attitude+0x926>
    8ec6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ece:	2200      	movs	r2, #0
    8ed0:	701a      	strb	r2, [r3, #0]
    8ed2:	f242 0339 	movw	r3, #8249	; 0x2039
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	b2db      	uxtb	r3, r3
    8ede:	f003 0310 	and.w	r3, r3, #16
    8ee2:	2b00      	cmp	r3, #0
    8ee4:	d15a      	bne.n	8f9c <send_attitude+0x9f0>
    8ee6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eee:	781b      	ldrb	r3, [r3, #0]
    8ef0:	b2db      	uxtb	r3, r3
    8ef2:	461a      	mov	r2, r3
    8ef4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efc:	5c9a      	ldrb	r2, [r3, r2]
    8efe:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f06:	701a      	strb	r2, [r3, #0]
    8f08:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	2200      	movs	r2, #0
    8f12:	701a      	strb	r2, [r3, #0]
    8f14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	3301      	adds	r3, #1
    8f22:	b2da      	uxtb	r2, r3
    8f24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2c:	701a      	strb	r2, [r3, #0]
    8f2e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	b2db      	uxtb	r3, r3
    8f3a:	2bff      	cmp	r3, #255	; 0xff
    8f3c:	d105      	bne.n	8f4a <send_attitude+0x99e>
    8f3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f46:	2200      	movs	r2, #0
    8f48:	701a      	strb	r2, [r3, #0]
    8f4a:	f242 0338 	movw	r3, #8248	; 0x2038
    8f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f52:	f242 0238 	movw	r2, #8248	; 0x2038
    8f56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f5a:	7812      	ldrb	r2, [r2, #0]
    8f5c:	b2d2      	uxtb	r2, r2
    8f5e:	f042 0201 	orr.w	r2, r2, #1
    8f62:	b2d2      	uxtb	r2, r2
    8f64:	701a      	strb	r2, [r3, #0]
    8f66:	f242 0339 	movw	r3, #8249	; 0x2039
    8f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f6e:	f242 0239 	movw	r2, #8249	; 0x2039
    8f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f76:	7812      	ldrb	r2, [r2, #0]
    8f78:	b2d2      	uxtb	r2, r2
    8f7a:	f042 0210 	orr.w	r2, r2, #16
    8f7e:	b2d2      	uxtb	r2, r2
    8f80:	701a      	strb	r2, [r3, #0]
    8f82:	e00b      	b.n	8f9c <send_attitude+0x9f0>
    8f84:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	3301      	adds	r3, #1
    8f90:	b2da      	uxtb	r2, r3
    8f92:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9a:	701a      	strb	r2, [r3, #0]
  }
}
    8f9c:	46bd      	mov	sp, r7
    8f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa2:	4770      	bx	lr

00008fa4 <send_adc>:
  
void send_adc(void){  //500ms
    8fa4:	b480      	push	{r7}
    8fa6:	af00      	add	r7, sp, #0
  if(!boot)
    8fa8:	f240 533d 	movw	r3, #1341	; 0x53d
    8fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	f040 827d 	bne.w	94b2 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8fb8:	f24c 5341 	movw	r3, #50497	; 0xc541
    8fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc0:	781a      	ldrb	r2, [r3, #0]
    8fc2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8fc6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8fca:	fba3 1302 	umull	r1, r3, r3, r2
    8fce:	0899      	lsrs	r1, r3, #2
    8fd0:	460b      	mov	r3, r1
    8fd2:	009b      	lsls	r3, r3, #2
    8fd4:	440b      	add	r3, r1
    8fd6:	1ad3      	subs	r3, r2, r3
    8fd8:	b2db      	uxtb	r3, r3
    8fda:	2b01      	cmp	r3, #1
    8fdc:	f040 8269 	bne.w	94b2 <send_adc+0x50e>
    8fe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	781a      	ldrb	r2, [r3, #0]
    8fea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	429a      	cmp	r2, r3
    8ff8:	d313      	bcc.n	9022 <send_adc+0x7e>
    8ffa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9002:	781b      	ldrb	r3, [r3, #0]
    9004:	b2db      	uxtb	r3, r3
    9006:	461a      	mov	r2, r3
    9008:	f24c 5349 	movw	r3, #50505	; 0xc549
    900c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9010:	781b      	ldrb	r3, [r3, #0]
    9012:	1ad3      	subs	r3, r2, r3
    9014:	33ff      	adds	r3, #255	; 0xff
    9016:	2b08      	cmp	r3, #8
    9018:	bfd4      	ite	le
    901a:	2300      	movle	r3, #0
    901c:	2301      	movgt	r3, #1
    901e:	b2db      	uxtb	r3, r3
    9020:	e011      	b.n	9046 <send_adc+0xa2>
    9022:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	b2db      	uxtb	r3, r3
    902e:	461a      	mov	r2, r3
    9030:	f24c 5349 	movw	r3, #50505	; 0xc549
    9034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	1ad3      	subs	r3, r2, r3
    903c:	2b08      	cmp	r3, #8
    903e:	bfd4      	ite	le
    9040:	2300      	movle	r3, #0
    9042:	2301      	movgt	r3, #1
    9044:	b2db      	uxtb	r3, r3
    9046:	2b00      	cmp	r3, #0
    9048:	f000 8227 	beq.w	949a <send_adc+0x4f6>
    904c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9054:	781b      	ldrb	r3, [r3, #0]
    9056:	461a      	mov	r2, r3
    9058:	f24c 534c 	movw	r3, #50508	; 0xc54c
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	2105      	movs	r1, #5
    9062:	5499      	strb	r1, [r3, r2]
    9064:	f24c 5349 	movw	r3, #50505	; 0xc549
    9068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906c:	781b      	ldrb	r3, [r3, #0]
    906e:	3301      	adds	r3, #1
    9070:	b2da      	uxtb	r2, r3
    9072:	f24c 5349 	movw	r3, #50505	; 0xc549
    9076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907a:	701a      	strb	r2, [r3, #0]
    907c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	2bff      	cmp	r3, #255	; 0xff
    9088:	d105      	bne.n	9096 <send_adc+0xf2>
    908a:	f24c 5349 	movw	r3, #50505	; 0xc549
    908e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9092:	2200      	movs	r2, #0
    9094:	701a      	strb	r2, [r3, #0]
    9096:	f24c 5349 	movw	r3, #50505	; 0xc549
    909a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909e:	781b      	ldrb	r3, [r3, #0]
    90a0:	461a      	mov	r2, r3
    90a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	2107      	movs	r1, #7
    90ac:	5499      	strb	r1, [r3, r2]
    90ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    90b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b6:	781b      	ldrb	r3, [r3, #0]
    90b8:	3301      	adds	r3, #1
    90ba:	b2da      	uxtb	r2, r3
    90bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    90c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c4:	701a      	strb	r2, [r3, #0]
    90c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	2bff      	cmp	r3, #255	; 0xff
    90d2:	d105      	bne.n	90e0 <send_adc+0x13c>
    90d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    90d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90dc:	2200      	movs	r2, #0
    90de:	701a      	strb	r2, [r3, #0]
    90e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	2207      	movs	r2, #7
    90ea:	701a      	strb	r2, [r3, #0]
    90ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f4:	2207      	movs	r2, #7
    90f6:	701a      	strb	r2, [r3, #0]
    90f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	461a      	mov	r2, r3
    9104:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910c:	7819      	ldrb	r1, [r3, #0]
    910e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	5499      	strb	r1, [r3, r2]
    9118:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    911c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9120:	781a      	ldrb	r2, [r3, #0]
    9122:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912a:	781b      	ldrb	r3, [r3, #0]
    912c:	4413      	add	r3, r2
    912e:	b2da      	uxtb	r2, r3
    9130:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9138:	701a      	strb	r2, [r3, #0]
    913a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    913e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9142:	781a      	ldrb	r2, [r3, #0]
    9144:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	4413      	add	r3, r2
    9150:	b2da      	uxtb	r2, r3
    9152:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915a:	701a      	strb	r2, [r3, #0]
    915c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	3301      	adds	r3, #1
    9168:	b2da      	uxtb	r2, r3
    916a:	f24c 5349 	movw	r3, #50505	; 0xc549
    916e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9172:	701a      	strb	r2, [r3, #0]
    9174:	f24c 5349 	movw	r3, #50505	; 0xc549
    9178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917c:	781b      	ldrb	r3, [r3, #0]
    917e:	2bff      	cmp	r3, #255	; 0xff
    9180:	d105      	bne.n	918e <send_adc+0x1ea>
    9182:	f24c 5349 	movw	r3, #50505	; 0xc549
    9186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918a:	2200      	movs	r2, #0
    918c:	701a      	strb	r2, [r3, #0]
    918e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9196:	781b      	ldrb	r3, [r3, #0]
    9198:	461a      	mov	r2, r3
    919a:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    919e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a2:	7859      	ldrb	r1, [r3, #1]
    91a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    91a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ac:	5499      	strb	r1, [r3, r2]
    91ae:	4bc3      	ldr	r3, [pc, #780]	; (94bc <send_adc+0x518>)
    91b0:	781a      	ldrb	r2, [r3, #0]
    91b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ba:	781b      	ldrb	r3, [r3, #0]
    91bc:	4413      	add	r3, r2
    91be:	b2da      	uxtb	r2, r3
    91c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c8:	701a      	strb	r2, [r3, #0]
    91ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d2:	781a      	ldrb	r2, [r3, #0]
    91d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	4413      	add	r3, r2
    91e0:	b2da      	uxtb	r2, r3
    91e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ea:	701a      	strb	r2, [r3, #0]
    91ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    91f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f4:	781b      	ldrb	r3, [r3, #0]
    91f6:	3301      	adds	r3, #1
    91f8:	b2da      	uxtb	r2, r3
    91fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    91fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9202:	701a      	strb	r2, [r3, #0]
    9204:	f24c 5349 	movw	r3, #50505	; 0xc549
    9208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	2bff      	cmp	r3, #255	; 0xff
    9210:	d105      	bne.n	921e <send_adc+0x27a>
    9212:	f24c 5349 	movw	r3, #50505	; 0xc549
    9216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921a:	2200      	movs	r2, #0
    921c:	701a      	strb	r2, [r3, #0]
    921e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	461a      	mov	r2, r3
    922a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    922e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9232:	7819      	ldrb	r1, [r3, #0]
    9234:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	5499      	strb	r1, [r3, r2]
    923e:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9246:	781a      	ldrb	r2, [r3, #0]
    9248:	f24c 634d 	movw	r3, #50765	; 0xc64d
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	4413      	add	r3, r2
    9254:	b2da      	uxtb	r2, r3
    9256:	f24c 634d 	movw	r3, #50765	; 0xc64d
    925a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925e:	701a      	strb	r2, [r3, #0]
    9260:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9268:	781a      	ldrb	r2, [r3, #0]
    926a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    926e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	4413      	add	r3, r2
    9276:	b2da      	uxtb	r2, r3
    9278:	f24c 634e 	movw	r3, #50766	; 0xc64e
    927c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9280:	701a      	strb	r2, [r3, #0]
    9282:	f24c 5349 	movw	r3, #50505	; 0xc549
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	3301      	adds	r3, #1
    928e:	b2da      	uxtb	r2, r3
    9290:	f24c 5349 	movw	r3, #50505	; 0xc549
    9294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9298:	701a      	strb	r2, [r3, #0]
    929a:	f24c 5349 	movw	r3, #50505	; 0xc549
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	2bff      	cmp	r3, #255	; 0xff
    92a6:	d105      	bne.n	92b4 <send_adc+0x310>
    92a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    92ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b0:	2200      	movs	r2, #0
    92b2:	701a      	strb	r2, [r3, #0]
    92b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    92b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92bc:	781b      	ldrb	r3, [r3, #0]
    92be:	461a      	mov	r2, r3
    92c0:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    92c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c8:	7859      	ldrb	r1, [r3, #1]
    92ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d2:	5499      	strb	r1, [r3, r2]
    92d4:	4b7a      	ldr	r3, [pc, #488]	; (94c0 <send_adc+0x51c>)
    92d6:	781a      	ldrb	r2, [r3, #0]
    92d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	4413      	add	r3, r2
    92e4:	b2da      	uxtb	r2, r3
    92e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ee:	701a      	strb	r2, [r3, #0]
    92f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f8:	781a      	ldrb	r2, [r3, #0]
    92fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	4413      	add	r3, r2
    9306:	b2da      	uxtb	r2, r3
    9308:	f24c 634e 	movw	r3, #50766	; 0xc64e
    930c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9310:	701a      	strb	r2, [r3, #0]
    9312:	f24c 5349 	movw	r3, #50505	; 0xc549
    9316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931a:	781b      	ldrb	r3, [r3, #0]
    931c:	3301      	adds	r3, #1
    931e:	b2da      	uxtb	r2, r3
    9320:	f24c 5349 	movw	r3, #50505	; 0xc549
    9324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9328:	701a      	strb	r2, [r3, #0]
    932a:	f24c 5349 	movw	r3, #50505	; 0xc549
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	781b      	ldrb	r3, [r3, #0]
    9334:	2bff      	cmp	r3, #255	; 0xff
    9336:	d105      	bne.n	9344 <send_adc+0x3a0>
    9338:	f24c 5349 	movw	r3, #50505	; 0xc549
    933c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9340:	2200      	movs	r2, #0
    9342:	701a      	strb	r2, [r3, #0]
    9344:	f24c 5349 	movw	r3, #50505	; 0xc549
    9348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934c:	781b      	ldrb	r3, [r3, #0]
    934e:	461a      	mov	r2, r3
    9350:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	7819      	ldrb	r1, [r3, #0]
    935a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    935e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9362:	5499      	strb	r1, [r3, r2]
    9364:	f24c 5349 	movw	r3, #50505	; 0xc549
    9368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936c:	781b      	ldrb	r3, [r3, #0]
    936e:	3301      	adds	r3, #1
    9370:	b2da      	uxtb	r2, r3
    9372:	f24c 5349 	movw	r3, #50505	; 0xc549
    9376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937a:	701a      	strb	r2, [r3, #0]
    937c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	2bff      	cmp	r3, #255	; 0xff
    9388:	d105      	bne.n	9396 <send_adc+0x3f2>
    938a:	f24c 5349 	movw	r3, #50505	; 0xc549
    938e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9392:	2200      	movs	r2, #0
    9394:	701a      	strb	r2, [r3, #0]
    9396:	f24c 5349 	movw	r3, #50505	; 0xc549
    939a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	461a      	mov	r2, r3
    93a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    93a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93aa:	7819      	ldrb	r1, [r3, #0]
    93ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    93b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b4:	5499      	strb	r1, [r3, r2]
    93b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    93ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93be:	781b      	ldrb	r3, [r3, #0]
    93c0:	3301      	adds	r3, #1
    93c2:	b2da      	uxtb	r2, r3
    93c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    93c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93cc:	701a      	strb	r2, [r3, #0]
    93ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    93d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d6:	781b      	ldrb	r3, [r3, #0]
    93d8:	2bff      	cmp	r3, #255	; 0xff
    93da:	d105      	bne.n	93e8 <send_adc+0x444>
    93dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    93e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e4:	2200      	movs	r2, #0
    93e6:	701a      	strb	r2, [r3, #0]
    93e8:	f242 0339 	movw	r3, #8249	; 0x2039
    93ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	b2db      	uxtb	r3, r3
    93f4:	f003 0310 	and.w	r3, r3, #16
    93f8:	2b00      	cmp	r3, #0
    93fa:	d15a      	bne.n	94b2 <send_adc+0x50e>
    93fc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9404:	781b      	ldrb	r3, [r3, #0]
    9406:	b2db      	uxtb	r3, r3
    9408:	461a      	mov	r2, r3
    940a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    940e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9412:	5c9a      	ldrb	r2, [r3, r2]
    9414:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941c:	701a      	strb	r2, [r3, #0]
    941e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9426:	2200      	movs	r2, #0
    9428:	701a      	strb	r2, [r3, #0]
    942a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    942e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9432:	781b      	ldrb	r3, [r3, #0]
    9434:	b2db      	uxtb	r3, r3
    9436:	3301      	adds	r3, #1
    9438:	b2da      	uxtb	r2, r3
    943a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    943e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9442:	701a      	strb	r2, [r3, #0]
    9444:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	781b      	ldrb	r3, [r3, #0]
    944e:	b2db      	uxtb	r3, r3
    9450:	2bff      	cmp	r3, #255	; 0xff
    9452:	d105      	bne.n	9460 <send_adc+0x4bc>
    9454:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945c:	2200      	movs	r2, #0
    945e:	701a      	strb	r2, [r3, #0]
    9460:	f242 0338 	movw	r3, #8248	; 0x2038
    9464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9468:	f242 0238 	movw	r2, #8248	; 0x2038
    946c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9470:	7812      	ldrb	r2, [r2, #0]
    9472:	b2d2      	uxtb	r2, r2
    9474:	f042 0201 	orr.w	r2, r2, #1
    9478:	b2d2      	uxtb	r2, r2
    947a:	701a      	strb	r2, [r3, #0]
    947c:	f242 0339 	movw	r3, #8249	; 0x2039
    9480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9484:	f242 0239 	movw	r2, #8249	; 0x2039
    9488:	f2c2 0200 	movt	r2, #8192	; 0x2000
    948c:	7812      	ldrb	r2, [r2, #0]
    948e:	b2d2      	uxtb	r2, r2
    9490:	f042 0210 	orr.w	r2, r2, #16
    9494:	b2d2      	uxtb	r2, r2
    9496:	701a      	strb	r2, [r3, #0]
    9498:	e00b      	b.n	94b2 <send_adc+0x50e>
    949a:	f24c 5348 	movw	r3, #50504	; 0xc548
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	3301      	adds	r3, #1
    94a6:	b2da      	uxtb	r2, r3
    94a8:	f24c 5348 	movw	r3, #50504	; 0xc548
    94ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b0:	701a      	strb	r2, [r3, #0]
}
    94b2:	46bd      	mov	sp, r7
    94b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94b8:	4770      	bx	lr
    94ba:	bf00      	nop
    94bc:	2004c7e9 	.word	0x2004c7e9
    94c0:	2004c7eb 	.word	0x2004c7eb

000094c4 <send_settings>:
void send_settings(void){ //500ms
    94c4:	b480      	push	{r7}
    94c6:	af00      	add	r7, sp, #0
  if(!boot)
    94c8:	f240 533d 	movw	r3, #1341	; 0x53d
    94cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d0:	781b      	ldrb	r3, [r3, #0]
    94d2:	2b00      	cmp	r3, #0
    94d4:	f040 83fb 	bne.w	9cce <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    94d8:	f24c 5341 	movw	r3, #50497	; 0xc541
    94dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e0:	781a      	ldrb	r2, [r3, #0]
    94e2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    94e6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    94ea:	fba3 1302 	umull	r1, r3, r3, r2
    94ee:	0899      	lsrs	r1, r3, #2
    94f0:	460b      	mov	r3, r1
    94f2:	009b      	lsls	r3, r3, #2
    94f4:	440b      	add	r3, r1
    94f6:	1ad3      	subs	r3, r2, r3
    94f8:	b2db      	uxtb	r3, r3
    94fa:	2b02      	cmp	r3, #2
    94fc:	f040 83e7 	bne.w	9cce <send_settings+0x80a>
    9500:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9508:	781b      	ldrb	r3, [r3, #0]
    950a:	2b00      	cmp	r3, #0
    950c:	f000 83df 	beq.w	9cce <send_settings+0x80a>
    9510:	f24c 5349 	movw	r3, #50505	; 0xc549
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	781a      	ldrb	r2, [r3, #0]
    951a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    951e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	b2db      	uxtb	r3, r3
    9526:	429a      	cmp	r2, r3
    9528:	d313      	bcc.n	9552 <send_settings+0x8e>
    952a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    952e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	b2db      	uxtb	r3, r3
    9536:	461a      	mov	r2, r3
    9538:	f24c 5349 	movw	r3, #50505	; 0xc549
    953c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	1ad3      	subs	r3, r2, r3
    9544:	33ff      	adds	r3, #255	; 0xff
    9546:	2b0d      	cmp	r3, #13
    9548:	bfd4      	ite	le
    954a:	2300      	movle	r3, #0
    954c:	2301      	movgt	r3, #1
    954e:	b2db      	uxtb	r3, r3
    9550:	e011      	b.n	9576 <send_settings+0xb2>
    9552:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955a:	781b      	ldrb	r3, [r3, #0]
    955c:	b2db      	uxtb	r3, r3
    955e:	461a      	mov	r2, r3
    9560:	f24c 5349 	movw	r3, #50505	; 0xc549
    9564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	1ad3      	subs	r3, r2, r3
    956c:	2b0d      	cmp	r3, #13
    956e:	bfd4      	ite	le
    9570:	2300      	movle	r3, #0
    9572:	2301      	movgt	r3, #1
    9574:	b2db      	uxtb	r3, r3
    9576:	2b00      	cmp	r3, #0
    9578:	f000 839d 	beq.w	9cb6 <send_settings+0x7f2>
    957c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	461a      	mov	r2, r3
    9588:	f24c 534c 	movw	r3, #50508	; 0xc54c
    958c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9590:	2105      	movs	r1, #5
    9592:	5499      	strb	r1, [r3, r2]
    9594:	f24c 5349 	movw	r3, #50505	; 0xc549
    9598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	3301      	adds	r3, #1
    95a0:	b2da      	uxtb	r2, r3
    95a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    95a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95aa:	701a      	strb	r2, [r3, #0]
    95ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    95b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	2bff      	cmp	r3, #255	; 0xff
    95b8:	d105      	bne.n	95c6 <send_settings+0x102>
    95ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    95be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c2:	2200      	movs	r2, #0
    95c4:	701a      	strb	r2, [r3, #0]
    95c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ce:	781b      	ldrb	r3, [r3, #0]
    95d0:	461a      	mov	r2, r3
    95d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    95d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95da:	2111      	movs	r1, #17
    95dc:	5499      	strb	r1, [r3, r2]
    95de:	f24c 5349 	movw	r3, #50505	; 0xc549
    95e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	3301      	adds	r3, #1
    95ea:	b2da      	uxtb	r2, r3
    95ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    95f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f4:	701a      	strb	r2, [r3, #0]
    95f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fe:	781b      	ldrb	r3, [r3, #0]
    9600:	2bff      	cmp	r3, #255	; 0xff
    9602:	d105      	bne.n	9610 <send_settings+0x14c>
    9604:	f24c 5349 	movw	r3, #50505	; 0xc549
    9608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960c:	2200      	movs	r2, #0
    960e:	701a      	strb	r2, [r3, #0]
    9610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	2211      	movs	r2, #17
    961a:	701a      	strb	r2, [r3, #0]
    961c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9624:	2211      	movs	r2, #17
    9626:	701a      	strb	r2, [r3, #0]
    9628:	f24c 5349 	movw	r3, #50505	; 0xc549
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	461a      	mov	r2, r3
    9634:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963c:	7819      	ldrb	r1, [r3, #0]
    963e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9646:	5499      	strb	r1, [r3, r2]
    9648:	f24c 634d 	movw	r3, #50765	; 0xc64d
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	781a      	ldrb	r2, [r3, #0]
    9652:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	781b      	ldrb	r3, [r3, #0]
    965c:	4413      	add	r3, r2
    965e:	b2da      	uxtb	r2, r3
    9660:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9668:	701a      	strb	r2, [r3, #0]
    966a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	781a      	ldrb	r2, [r3, #0]
    9674:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	4413      	add	r3, r2
    9680:	b2da      	uxtb	r2, r3
    9682:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968a:	701a      	strb	r2, [r3, #0]
    968c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	3301      	adds	r3, #1
    9698:	b2da      	uxtb	r2, r3
    969a:	f24c 5349 	movw	r3, #50505	; 0xc549
    969e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a2:	701a      	strb	r2, [r3, #0]
    96a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    96a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ac:	781b      	ldrb	r3, [r3, #0]
    96ae:	2bff      	cmp	r3, #255	; 0xff
    96b0:	d105      	bne.n	96be <send_settings+0x1fa>
    96b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ba:	2200      	movs	r2, #0
    96bc:	701a      	strb	r2, [r3, #0]
    96be:	f24c 5349 	movw	r3, #50505	; 0xc549
    96c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c6:	781b      	ldrb	r3, [r3, #0]
    96c8:	461a      	mov	r2, r3
    96ca:	f24c 5338 	movw	r3, #50488	; 0xc538
    96ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d2:	7819      	ldrb	r1, [r3, #0]
    96d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96dc:	5499      	strb	r1, [r3, r2]
    96de:	f24c 5338 	movw	r3, #50488	; 0xc538
    96e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e6:	781a      	ldrb	r2, [r3, #0]
    96e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	4413      	add	r3, r2
    96f4:	b2da      	uxtb	r2, r3
    96f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fe:	701a      	strb	r2, [r3, #0]
    9700:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	781a      	ldrb	r2, [r3, #0]
    970a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    970e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9712:	781b      	ldrb	r3, [r3, #0]
    9714:	4413      	add	r3, r2
    9716:	b2da      	uxtb	r2, r3
    9718:	f24c 634e 	movw	r3, #50766	; 0xc64e
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	701a      	strb	r2, [r3, #0]
    9722:	f24c 5349 	movw	r3, #50505	; 0xc549
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	3301      	adds	r3, #1
    972e:	b2da      	uxtb	r2, r3
    9730:	f24c 5349 	movw	r3, #50505	; 0xc549
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	701a      	strb	r2, [r3, #0]
    973a:	f24c 5349 	movw	r3, #50505	; 0xc549
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	2bff      	cmp	r3, #255	; 0xff
    9746:	d105      	bne.n	9754 <send_settings+0x290>
    9748:	f24c 5349 	movw	r3, #50505	; 0xc549
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	2200      	movs	r2, #0
    9752:	701a      	strb	r2, [r3, #0]
    9754:	f24c 5349 	movw	r3, #50505	; 0xc549
    9758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975c:	781b      	ldrb	r3, [r3, #0]
    975e:	461a      	mov	r2, r3
    9760:	f24c 5338 	movw	r3, #50488	; 0xc538
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	7859      	ldrb	r1, [r3, #1]
    976a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	5499      	strb	r1, [r3, r2]
    9774:	4bd1      	ldr	r3, [pc, #836]	; (9abc <send_settings+0x5f8>)
    9776:	781a      	ldrb	r2, [r3, #0]
    9778:	f24c 634d 	movw	r3, #50765	; 0xc64d
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	781b      	ldrb	r3, [r3, #0]
    9782:	4413      	add	r3, r2
    9784:	b2da      	uxtb	r2, r3
    9786:	f24c 634d 	movw	r3, #50765	; 0xc64d
    978a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978e:	701a      	strb	r2, [r3, #0]
    9790:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	781a      	ldrb	r2, [r3, #0]
    979a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    979e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	4413      	add	r3, r2
    97a6:	b2da      	uxtb	r2, r3
    97a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	701a      	strb	r2, [r3, #0]
    97b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    97b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	3301      	adds	r3, #1
    97be:	b2da      	uxtb	r2, r3
    97c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    97ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	2bff      	cmp	r3, #255	; 0xff
    97d6:	d105      	bne.n	97e4 <send_settings+0x320>
    97d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	2200      	movs	r2, #0
    97e2:	701a      	strb	r2, [r3, #0]
    97e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    97e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	461a      	mov	r2, r3
    97f0:	f24c 5338 	movw	r3, #50488	; 0xc538
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	7899      	ldrb	r1, [r3, #2]
    97fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9802:	5499      	strb	r1, [r3, r2]
    9804:	4bae      	ldr	r3, [pc, #696]	; (9ac0 <send_settings+0x5fc>)
    9806:	781a      	ldrb	r2, [r3, #0]
    9808:	f24c 634d 	movw	r3, #50765	; 0xc64d
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	4413      	add	r3, r2
    9814:	b2da      	uxtb	r2, r3
    9816:	f24c 634d 	movw	r3, #50765	; 0xc64d
    981a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981e:	701a      	strb	r2, [r3, #0]
    9820:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	781a      	ldrb	r2, [r3, #0]
    982a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    982e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	4413      	add	r3, r2
    9836:	b2da      	uxtb	r2, r3
    9838:	f24c 634e 	movw	r3, #50766	; 0xc64e
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	701a      	strb	r2, [r3, #0]
    9842:	f24c 5349 	movw	r3, #50505	; 0xc549
    9846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984a:	781b      	ldrb	r3, [r3, #0]
    984c:	3301      	adds	r3, #1
    984e:	b2da      	uxtb	r2, r3
    9850:	f24c 5349 	movw	r3, #50505	; 0xc549
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	701a      	strb	r2, [r3, #0]
    985a:	f24c 5349 	movw	r3, #50505	; 0xc549
    985e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	2bff      	cmp	r3, #255	; 0xff
    9866:	d105      	bne.n	9874 <send_settings+0x3b0>
    9868:	f24c 5349 	movw	r3, #50505	; 0xc549
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	2200      	movs	r2, #0
    9872:	701a      	strb	r2, [r3, #0]
    9874:	f24c 5349 	movw	r3, #50505	; 0xc549
    9878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	461a      	mov	r2, r3
    9880:	f24c 5338 	movw	r3, #50488	; 0xc538
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	78d9      	ldrb	r1, [r3, #3]
    988a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    988e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9892:	5499      	strb	r1, [r3, r2]
    9894:	4b8b      	ldr	r3, [pc, #556]	; (9ac4 <send_settings+0x600>)
    9896:	781a      	ldrb	r2, [r3, #0]
    9898:	f24c 634d 	movw	r3, #50765	; 0xc64d
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	4413      	add	r3, r2
    98a4:	b2da      	uxtb	r2, r3
    98a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	701a      	strb	r2, [r3, #0]
    98b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b8:	781a      	ldrb	r2, [r3, #0]
    98ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	4413      	add	r3, r2
    98c6:	b2da      	uxtb	r2, r3
    98c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	701a      	strb	r2, [r3, #0]
    98d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    98d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98da:	781b      	ldrb	r3, [r3, #0]
    98dc:	3301      	adds	r3, #1
    98de:	b2da      	uxtb	r2, r3
    98e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    98e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e8:	701a      	strb	r2, [r3, #0]
    98ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f2:	781b      	ldrb	r3, [r3, #0]
    98f4:	2bff      	cmp	r3, #255	; 0xff
    98f6:	d105      	bne.n	9904 <send_settings+0x440>
    98f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9900:	2200      	movs	r2, #0
    9902:	701a      	strb	r2, [r3, #0]
    9904:	f24c 5349 	movw	r3, #50505	; 0xc549
    9908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990c:	781b      	ldrb	r3, [r3, #0]
    990e:	461a      	mov	r2, r3
    9910:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9918:	7819      	ldrb	r1, [r3, #0]
    991a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    991e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9922:	5499      	strb	r1, [r3, r2]
    9924:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992c:	781a      	ldrb	r2, [r3, #0]
    992e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	4413      	add	r3, r2
    993a:	b2da      	uxtb	r2, r3
    993c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9944:	701a      	strb	r2, [r3, #0]
    9946:	f24c 634e 	movw	r3, #50766	; 0xc64e
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	781a      	ldrb	r2, [r3, #0]
    9950:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	4413      	add	r3, r2
    995c:	b2da      	uxtb	r2, r3
    995e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	701a      	strb	r2, [r3, #0]
    9968:	f24c 5349 	movw	r3, #50505	; 0xc549
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	3301      	adds	r3, #1
    9974:	b2da      	uxtb	r2, r3
    9976:	f24c 5349 	movw	r3, #50505	; 0xc549
    997a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997e:	701a      	strb	r2, [r3, #0]
    9980:	f24c 5349 	movw	r3, #50505	; 0xc549
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	781b      	ldrb	r3, [r3, #0]
    998a:	2bff      	cmp	r3, #255	; 0xff
    998c:	d105      	bne.n	999a <send_settings+0x4d6>
    998e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9996:	2200      	movs	r2, #0
    9998:	701a      	strb	r2, [r3, #0]
    999a:	f24c 5349 	movw	r3, #50505	; 0xc549
    999e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	461a      	mov	r2, r3
    99a6:	f24c 533c 	movw	r3, #50492	; 0xc53c
    99aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ae:	7859      	ldrb	r1, [r3, #1]
    99b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    99b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b8:	5499      	strb	r1, [r3, r2]
    99ba:	4b43      	ldr	r3, [pc, #268]	; (9ac8 <send_settings+0x604>)
    99bc:	781a      	ldrb	r2, [r3, #0]
    99be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	4413      	add	r3, r2
    99ca:	b2da      	uxtb	r2, r3
    99cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d4:	701a      	strb	r2, [r3, #0]
    99d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	781a      	ldrb	r2, [r3, #0]
    99e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e8:	781b      	ldrb	r3, [r3, #0]
    99ea:	4413      	add	r3, r2
    99ec:	b2da      	uxtb	r2, r3
    99ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f6:	701a      	strb	r2, [r3, #0]
    99f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    99fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	3301      	adds	r3, #1
    9a04:	b2da      	uxtb	r2, r3
    9a06:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0e:	701a      	strb	r2, [r3, #0]
    9a10:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2bff      	cmp	r3, #255	; 0xff
    9a1c:	d105      	bne.n	9a2a <send_settings+0x566>
    9a1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	2200      	movs	r2, #0
    9a28:	701a      	strb	r2, [r3, #0]
    9a2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	461a      	mov	r2, r3
    9a36:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3e:	7899      	ldrb	r1, [r3, #2]
    9a40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a48:	5499      	strb	r1, [r3, r2]
    9a4a:	4b20      	ldr	r3, [pc, #128]	; (9acc <send_settings+0x608>)
    9a4c:	781a      	ldrb	r2, [r3, #0]
    9a4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	4413      	add	r3, r2
    9a5a:	b2da      	uxtb	r2, r3
    9a5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a64:	701a      	strb	r2, [r3, #0]
    9a66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	781a      	ldrb	r2, [r3, #0]
    9a70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	4413      	add	r3, r2
    9a7c:	b2da      	uxtb	r2, r3
    9a7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	701a      	strb	r2, [r3, #0]
    9a88:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	3301      	adds	r3, #1
    9a94:	b2da      	uxtb	r2, r3
    9a96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	2bff      	cmp	r3, #255	; 0xff
    9aac:	d110      	bne.n	9ad0 <send_settings+0x60c>
    9aae:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab6:	2200      	movs	r2, #0
    9ab8:	701a      	strb	r2, [r3, #0]
    9aba:	e009      	b.n	9ad0 <send_settings+0x60c>
    9abc:	2004c539 	.word	0x2004c539
    9ac0:	2004c53a 	.word	0x2004c53a
    9ac4:	2004c53b 	.word	0x2004c53b
    9ac8:	2004c53d 	.word	0x2004c53d
    9acc:	2004c53e 	.word	0x2004c53e
    9ad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	461a      	mov	r2, r3
    9adc:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae4:	78d9      	ldrb	r1, [r3, #3]
    9ae6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aee:	5499      	strb	r1, [r3, r2]
    9af0:	4b79      	ldr	r3, [pc, #484]	; (9cd8 <send_settings+0x814>)
    9af2:	781a      	ldrb	r2, [r3, #0]
    9af4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	4413      	add	r3, r2
    9b00:	b2da      	uxtb	r2, r3
    9b02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0a:	701a      	strb	r2, [r3, #0]
    9b0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b14:	781a      	ldrb	r2, [r3, #0]
    9b16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1e:	781b      	ldrb	r3, [r3, #0]
    9b20:	4413      	add	r3, r2
    9b22:	b2da      	uxtb	r2, r3
    9b24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2c:	701a      	strb	r2, [r3, #0]
    9b2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b36:	781b      	ldrb	r3, [r3, #0]
    9b38:	3301      	adds	r3, #1
    9b3a:	b2da      	uxtb	r2, r3
    9b3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b44:	701a      	strb	r2, [r3, #0]
    9b46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4e:	781b      	ldrb	r3, [r3, #0]
    9b50:	2bff      	cmp	r3, #255	; 0xff
    9b52:	d105      	bne.n	9b60 <send_settings+0x69c>
    9b54:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5c:	2200      	movs	r2, #0
    9b5e:	701a      	strb	r2, [r3, #0]
    9b60:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b68:	781b      	ldrb	r3, [r3, #0]
    9b6a:	461a      	mov	r2, r3
    9b6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b74:	7819      	ldrb	r1, [r3, #0]
    9b76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7e:	5499      	strb	r1, [r3, r2]
    9b80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b88:	781b      	ldrb	r3, [r3, #0]
    9b8a:	3301      	adds	r3, #1
    9b8c:	b2da      	uxtb	r2, r3
    9b8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b96:	701a      	strb	r2, [r3, #0]
    9b98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba0:	781b      	ldrb	r3, [r3, #0]
    9ba2:	2bff      	cmp	r3, #255	; 0xff
    9ba4:	d105      	bne.n	9bb2 <send_settings+0x6ee>
    9ba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bae:	2200      	movs	r2, #0
    9bb0:	701a      	strb	r2, [r3, #0]
    9bb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bba:	781b      	ldrb	r3, [r3, #0]
    9bbc:	461a      	mov	r2, r3
    9bbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc6:	7819      	ldrb	r1, [r3, #0]
    9bc8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd0:	5499      	strb	r1, [r3, r2]
    9bd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bda:	781b      	ldrb	r3, [r3, #0]
    9bdc:	3301      	adds	r3, #1
    9bde:	b2da      	uxtb	r2, r3
    9be0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be8:	701a      	strb	r2, [r3, #0]
    9bea:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf2:	781b      	ldrb	r3, [r3, #0]
    9bf4:	2bff      	cmp	r3, #255	; 0xff
    9bf6:	d105      	bne.n	9c04 <send_settings+0x740>
    9bf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c00:	2200      	movs	r2, #0
    9c02:	701a      	strb	r2, [r3, #0]
    9c04:	f242 0339 	movw	r3, #8249	; 0x2039
    9c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	b2db      	uxtb	r3, r3
    9c10:	f003 0310 	and.w	r3, r3, #16
    9c14:	2b00      	cmp	r3, #0
    9c16:	d15a      	bne.n	9cce <send_settings+0x80a>
    9c18:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c20:	781b      	ldrb	r3, [r3, #0]
    9c22:	b2db      	uxtb	r3, r3
    9c24:	461a      	mov	r2, r3
    9c26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2e:	5c9a      	ldrb	r2, [r3, r2]
    9c30:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c38:	701a      	strb	r2, [r3, #0]
    9c3a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c42:	2200      	movs	r2, #0
    9c44:	701a      	strb	r2, [r3, #0]
    9c46:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4e:	781b      	ldrb	r3, [r3, #0]
    9c50:	b2db      	uxtb	r3, r3
    9c52:	3301      	adds	r3, #1
    9c54:	b2da      	uxtb	r2, r3
    9c56:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5e:	701a      	strb	r2, [r3, #0]
    9c60:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c68:	781b      	ldrb	r3, [r3, #0]
    9c6a:	b2db      	uxtb	r3, r3
    9c6c:	2bff      	cmp	r3, #255	; 0xff
    9c6e:	d105      	bne.n	9c7c <send_settings+0x7b8>
    9c70:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c78:	2200      	movs	r2, #0
    9c7a:	701a      	strb	r2, [r3, #0]
    9c7c:	f242 0338 	movw	r3, #8248	; 0x2038
    9c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c84:	f242 0238 	movw	r2, #8248	; 0x2038
    9c88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c8c:	7812      	ldrb	r2, [r2, #0]
    9c8e:	b2d2      	uxtb	r2, r2
    9c90:	f042 0201 	orr.w	r2, r2, #1
    9c94:	b2d2      	uxtb	r2, r2
    9c96:	701a      	strb	r2, [r3, #0]
    9c98:	f242 0339 	movw	r3, #8249	; 0x2039
    9c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca0:	f242 0239 	movw	r2, #8249	; 0x2039
    9ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ca8:	7812      	ldrb	r2, [r2, #0]
    9caa:	b2d2      	uxtb	r2, r2
    9cac:	f042 0210 	orr.w	r2, r2, #16
    9cb0:	b2d2      	uxtb	r2, r2
    9cb2:	701a      	strb	r2, [r3, #0]
    9cb4:	e00b      	b.n	9cce <send_settings+0x80a>
    9cb6:	f24c 5348 	movw	r3, #50504	; 0xc548
    9cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	3301      	adds	r3, #1
    9cc2:	b2da      	uxtb	r2, r3
    9cc4:	f24c 5348 	movw	r3, #50504	; 0xc548
    9cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ccc:	701a      	strb	r2, [r3, #0]
}
    9cce:	46bd      	mov	sp, r7
    9cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cd4:	4770      	bx	lr
    9cd6:	bf00      	nop
    9cd8:	2004c53f 	.word	0x2004c53f

00009cdc <send_desired>:
void send_desired(void){  //1000ms
    9cdc:	b480      	push	{r7}
    9cde:	af00      	add	r7, sp, #0
  if(!boot)
    9ce0:	f240 533d 	movw	r3, #1341	; 0x53d
    9ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	2b00      	cmp	r3, #0
    9cec:	f040 8727 	bne.w	ab3e <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9cf0:	f24c 5341 	movw	r3, #50497	; 0xc541
    9cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf8:	781a      	ldrb	r2, [r3, #0]
    9cfa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9cfe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9d02:	fba3 1302 	umull	r1, r3, r3, r2
    9d06:	08d9      	lsrs	r1, r3, #3
    9d08:	460b      	mov	r3, r1
    9d0a:	009b      	lsls	r3, r3, #2
    9d0c:	440b      	add	r3, r1
    9d0e:	005b      	lsls	r3, r3, #1
    9d10:	1ad3      	subs	r3, r2, r3
    9d12:	b2db      	uxtb	r3, r3
    9d14:	2b03      	cmp	r3, #3
    9d16:	f040 8712 	bne.w	ab3e <send_desired+0xe62>
    9d1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d22:	781a      	ldrb	r2, [r3, #0]
    9d24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	b2db      	uxtb	r3, r3
    9d30:	429a      	cmp	r2, r3
    9d32:	d313      	bcc.n	9d5c <send_desired+0x80>
    9d34:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	461a      	mov	r2, r3
    9d42:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4a:	781b      	ldrb	r3, [r3, #0]
    9d4c:	1ad3      	subs	r3, r2, r3
    9d4e:	33ff      	adds	r3, #255	; 0xff
    9d50:	2b18      	cmp	r3, #24
    9d52:	bfd4      	ite	le
    9d54:	2300      	movle	r3, #0
    9d56:	2301      	movgt	r3, #1
    9d58:	b2db      	uxtb	r3, r3
    9d5a:	e011      	b.n	9d80 <send_desired+0xa4>
    9d5c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d64:	781b      	ldrb	r3, [r3, #0]
    9d66:	b2db      	uxtb	r3, r3
    9d68:	461a      	mov	r2, r3
    9d6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	1ad3      	subs	r3, r2, r3
    9d76:	2b18      	cmp	r3, #24
    9d78:	bfd4      	ite	le
    9d7a:	2300      	movle	r3, #0
    9d7c:	2301      	movgt	r3, #1
    9d7e:	b2db      	uxtb	r3, r3
    9d80:	2b00      	cmp	r3, #0
    9d82:	f000 86d0 	beq.w	ab26 <send_desired+0xe4a>
    9d86:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	461a      	mov	r2, r3
    9d92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9a:	2105      	movs	r1, #5
    9d9c:	5499      	strb	r1, [r3, r2]
    9d9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	3301      	adds	r3, #1
    9daa:	b2da      	uxtb	r2, r3
    9dac:	f24c 5349 	movw	r3, #50505	; 0xc549
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	701a      	strb	r2, [r3, #0]
    9db6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbe:	781b      	ldrb	r3, [r3, #0]
    9dc0:	2bff      	cmp	r3, #255	; 0xff
    9dc2:	d105      	bne.n	9dd0 <send_desired+0xf4>
    9dc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	2200      	movs	r2, #0
    9dce:	701a      	strb	r2, [r3, #0]
    9dd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd8:	781b      	ldrb	r3, [r3, #0]
    9dda:	461a      	mov	r2, r3
    9ddc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	2112      	movs	r1, #18
    9de6:	5499      	strb	r1, [r3, r2]
    9de8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	3301      	adds	r3, #1
    9df4:	b2da      	uxtb	r2, r3
    9df6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfe:	701a      	strb	r2, [r3, #0]
    9e00:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	2bff      	cmp	r3, #255	; 0xff
    9e0c:	d105      	bne.n	9e1a <send_desired+0x13e>
    9e0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e16:	2200      	movs	r2, #0
    9e18:	701a      	strb	r2, [r3, #0]
    9e1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e22:	2212      	movs	r2, #18
    9e24:	701a      	strb	r2, [r3, #0]
    9e26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2e:	2212      	movs	r2, #18
    9e30:	701a      	strb	r2, [r3, #0]
    9e32:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	781b      	ldrb	r3, [r3, #0]
    9e3c:	461a      	mov	r2, r3
    9e3e:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e46:	7819      	ldrb	r1, [r3, #0]
    9e48:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e50:	5499      	strb	r1, [r3, r2]
    9e52:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5a:	781a      	ldrb	r2, [r3, #0]
    9e5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	781b      	ldrb	r3, [r3, #0]
    9e66:	4413      	add	r3, r2
    9e68:	b2da      	uxtb	r2, r3
    9e6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e72:	701a      	strb	r2, [r3, #0]
    9e74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7c:	781a      	ldrb	r2, [r3, #0]
    9e7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e86:	781b      	ldrb	r3, [r3, #0]
    9e88:	4413      	add	r3, r2
    9e8a:	b2da      	uxtb	r2, r3
    9e8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e94:	701a      	strb	r2, [r3, #0]
    9e96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	781b      	ldrb	r3, [r3, #0]
    9ea0:	3301      	adds	r3, #1
    9ea2:	b2da      	uxtb	r2, r3
    9ea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eac:	701a      	strb	r2, [r3, #0]
    9eae:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	2bff      	cmp	r3, #255	; 0xff
    9eba:	d105      	bne.n	9ec8 <send_desired+0x1ec>
    9ebc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	2200      	movs	r2, #0
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	461a      	mov	r2, r3
    9ed4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	7859      	ldrb	r1, [r3, #1]
    9ede:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee6:	5499      	strb	r1, [r3, r2]
    9ee8:	4bd1      	ldr	r3, [pc, #836]	; (a230 <send_desired+0x554>)
    9eea:	781a      	ldrb	r2, [r3, #0]
    9eec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	4413      	add	r3, r2
    9ef8:	b2da      	uxtb	r2, r3
    9efa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f02:	701a      	strb	r2, [r3, #0]
    9f04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	781a      	ldrb	r2, [r3, #0]
    9f0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	4413      	add	r3, r2
    9f1a:	b2da      	uxtb	r2, r3
    9f1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	701a      	strb	r2, [r3, #0]
    9f26:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	3301      	adds	r3, #1
    9f32:	b2da      	uxtb	r2, r3
    9f34:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	701a      	strb	r2, [r3, #0]
    9f3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	781b      	ldrb	r3, [r3, #0]
    9f48:	2bff      	cmp	r3, #255	; 0xff
    9f4a:	d105      	bne.n	9f58 <send_desired+0x27c>
    9f4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	2200      	movs	r2, #0
    9f56:	701a      	strb	r2, [r3, #0]
    9f58:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	461a      	mov	r2, r3
    9f64:	f64c 0374 	movw	r3, #51316	; 0xc874
    9f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6c:	7899      	ldrb	r1, [r3, #2]
    9f6e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f76:	5499      	strb	r1, [r3, r2]
    9f78:	4bae      	ldr	r3, [pc, #696]	; (a234 <send_desired+0x558>)
    9f7a:	781a      	ldrb	r2, [r3, #0]
    9f7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f84:	781b      	ldrb	r3, [r3, #0]
    9f86:	4413      	add	r3, r2
    9f88:	b2da      	uxtb	r2, r3
    9f8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f92:	701a      	strb	r2, [r3, #0]
    9f94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	781a      	ldrb	r2, [r3, #0]
    9f9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	4413      	add	r3, r2
    9faa:	b2da      	uxtb	r2, r3
    9fac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb4:	701a      	strb	r2, [r3, #0]
    9fb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	3301      	adds	r3, #1
    9fc2:	b2da      	uxtb	r2, r3
    9fc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fcc:	701a      	strb	r2, [r3, #0]
    9fce:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd6:	781b      	ldrb	r3, [r3, #0]
    9fd8:	2bff      	cmp	r3, #255	; 0xff
    9fda:	d105      	bne.n	9fe8 <send_desired+0x30c>
    9fdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe4:	2200      	movs	r2, #0
    9fe6:	701a      	strb	r2, [r3, #0]
    9fe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	461a      	mov	r2, r3
    9ff4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffc:	78d9      	ldrb	r1, [r3, #3]
    9ffe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a006:	5499      	strb	r1, [r3, r2]
    a008:	4b8b      	ldr	r3, [pc, #556]	; (a238 <send_desired+0x55c>)
    a00a:	781a      	ldrb	r2, [r3, #0]
    a00c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a014:	781b      	ldrb	r3, [r3, #0]
    a016:	4413      	add	r3, r2
    a018:	b2da      	uxtb	r2, r3
    a01a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a022:	701a      	strb	r2, [r3, #0]
    a024:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02c:	781a      	ldrb	r2, [r3, #0]
    a02e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	4413      	add	r3, r2
    a03a:	b2da      	uxtb	r2, r3
    a03c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a044:	701a      	strb	r2, [r3, #0]
    a046:	f24c 5349 	movw	r3, #50505	; 0xc549
    a04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	3301      	adds	r3, #1
    a052:	b2da      	uxtb	r2, r3
    a054:	f24c 5349 	movw	r3, #50505	; 0xc549
    a058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05c:	701a      	strb	r2, [r3, #0]
    a05e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a066:	781b      	ldrb	r3, [r3, #0]
    a068:	2bff      	cmp	r3, #255	; 0xff
    a06a:	d105      	bne.n	a078 <send_desired+0x39c>
    a06c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a074:	2200      	movs	r2, #0
    a076:	701a      	strb	r2, [r3, #0]
    a078:	f24c 5349 	movw	r3, #50505	; 0xc549
    a07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	461a      	mov	r2, r3
    a084:	f64c 0378 	movw	r3, #51320	; 0xc878
    a088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08c:	7819      	ldrb	r1, [r3, #0]
    a08e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	5499      	strb	r1, [r3, r2]
    a098:	f64c 0378 	movw	r3, #51320	; 0xc878
    a09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a0:	781a      	ldrb	r2, [r3, #0]
    a0a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	781b      	ldrb	r3, [r3, #0]
    a0ac:	4413      	add	r3, r2
    a0ae:	b2da      	uxtb	r2, r3
    a0b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b8:	701a      	strb	r2, [r3, #0]
    a0ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	781a      	ldrb	r2, [r3, #0]
    a0c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	4413      	add	r3, r2
    a0d0:	b2da      	uxtb	r2, r3
    a0d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	701a      	strb	r2, [r3, #0]
    a0dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	3301      	adds	r3, #1
    a0e8:	b2da      	uxtb	r2, r3
    a0ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f2:	701a      	strb	r2, [r3, #0]
    a0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fc:	781b      	ldrb	r3, [r3, #0]
    a0fe:	2bff      	cmp	r3, #255	; 0xff
    a100:	d105      	bne.n	a10e <send_desired+0x432>
    a102:	f24c 5349 	movw	r3, #50505	; 0xc549
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	2200      	movs	r2, #0
    a10c:	701a      	strb	r2, [r3, #0]
    a10e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a116:	781b      	ldrb	r3, [r3, #0]
    a118:	461a      	mov	r2, r3
    a11a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a122:	7859      	ldrb	r1, [r3, #1]
    a124:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	5499      	strb	r1, [r3, r2]
    a12e:	4b43      	ldr	r3, [pc, #268]	; (a23c <send_desired+0x560>)
    a130:	781a      	ldrb	r2, [r3, #0]
    a132:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13a:	781b      	ldrb	r3, [r3, #0]
    a13c:	4413      	add	r3, r2
    a13e:	b2da      	uxtb	r2, r3
    a140:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a148:	701a      	strb	r2, [r3, #0]
    a14a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a152:	781a      	ldrb	r2, [r3, #0]
    a154:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	4413      	add	r3, r2
    a160:	b2da      	uxtb	r2, r3
    a162:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16a:	701a      	strb	r2, [r3, #0]
    a16c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	3301      	adds	r3, #1
    a178:	b2da      	uxtb	r2, r3
    a17a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a182:	701a      	strb	r2, [r3, #0]
    a184:	f24c 5349 	movw	r3, #50505	; 0xc549
    a188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	2bff      	cmp	r3, #255	; 0xff
    a190:	d105      	bne.n	a19e <send_desired+0x4c2>
    a192:	f24c 5349 	movw	r3, #50505	; 0xc549
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	2200      	movs	r2, #0
    a19c:	701a      	strb	r2, [r3, #0]
    a19e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	461a      	mov	r2, r3
    a1aa:	f64c 0378 	movw	r3, #51320	; 0xc878
    a1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b2:	7899      	ldrb	r1, [r3, #2]
    a1b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1bc:	5499      	strb	r1, [r3, r2]
    a1be:	4b20      	ldr	r3, [pc, #128]	; (a240 <send_desired+0x564>)
    a1c0:	781a      	ldrb	r2, [r3, #0]
    a1c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	4413      	add	r3, r2
    a1ce:	b2da      	uxtb	r2, r3
    a1d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	701a      	strb	r2, [r3, #0]
    a1da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e2:	781a      	ldrb	r2, [r3, #0]
    a1e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ec:	781b      	ldrb	r3, [r3, #0]
    a1ee:	4413      	add	r3, r2
    a1f0:	b2da      	uxtb	r2, r3
    a1f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fa:	701a      	strb	r2, [r3, #0]
    a1fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a204:	781b      	ldrb	r3, [r3, #0]
    a206:	3301      	adds	r3, #1
    a208:	b2da      	uxtb	r2, r3
    a20a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a212:	701a      	strb	r2, [r3, #0]
    a214:	f24c 5349 	movw	r3, #50505	; 0xc549
    a218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21c:	781b      	ldrb	r3, [r3, #0]
    a21e:	2bff      	cmp	r3, #255	; 0xff
    a220:	d110      	bne.n	a244 <send_desired+0x568>
    a222:	f24c 5349 	movw	r3, #50505	; 0xc549
    a226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22a:	2200      	movs	r2, #0
    a22c:	701a      	strb	r2, [r3, #0]
    a22e:	e009      	b.n	a244 <send_desired+0x568>
    a230:	2004c875 	.word	0x2004c875
    a234:	2004c876 	.word	0x2004c876
    a238:	2004c877 	.word	0x2004c877
    a23c:	2004c879 	.word	0x2004c879
    a240:	2004c87a 	.word	0x2004c87a
    a244:	f24c 5349 	movw	r3, #50505	; 0xc549
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	781b      	ldrb	r3, [r3, #0]
    a24e:	461a      	mov	r2, r3
    a250:	f64c 0378 	movw	r3, #51320	; 0xc878
    a254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a258:	78d9      	ldrb	r1, [r3, #3]
    a25a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a262:	5499      	strb	r1, [r3, r2]
    a264:	4bd3      	ldr	r3, [pc, #844]	; (a5b4 <send_desired+0x8d8>)
    a266:	781a      	ldrb	r2, [r3, #0]
    a268:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a270:	781b      	ldrb	r3, [r3, #0]
    a272:	4413      	add	r3, r2
    a274:	b2da      	uxtb	r2, r3
    a276:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a27e:	701a      	strb	r2, [r3, #0]
    a280:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a288:	781a      	ldrb	r2, [r3, #0]
    a28a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a292:	781b      	ldrb	r3, [r3, #0]
    a294:	4413      	add	r3, r2
    a296:	b2da      	uxtb	r2, r3
    a298:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	3301      	adds	r3, #1
    a2ae:	b2da      	uxtb	r2, r3
    a2b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b8:	701a      	strb	r2, [r3, #0]
    a2ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c2:	781b      	ldrb	r3, [r3, #0]
    a2c4:	2bff      	cmp	r3, #255	; 0xff
    a2c6:	d105      	bne.n	a2d4 <send_desired+0x5f8>
    a2c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d0:	2200      	movs	r2, #0
    a2d2:	701a      	strb	r2, [r3, #0]
    a2d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	461a      	mov	r2, r3
    a2e0:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e8:	7819      	ldrb	r1, [r3, #0]
    a2ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f2:	5499      	strb	r1, [r3, r2]
    a2f4:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fc:	781a      	ldrb	r2, [r3, #0]
    a2fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	4413      	add	r3, r2
    a30a:	b2da      	uxtb	r2, r3
    a30c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a314:	701a      	strb	r2, [r3, #0]
    a316:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	781a      	ldrb	r2, [r3, #0]
    a320:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	4413      	add	r3, r2
    a32c:	b2da      	uxtb	r2, r3
    a32e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	701a      	strb	r2, [r3, #0]
    a338:	f24c 5349 	movw	r3, #50505	; 0xc549
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	3301      	adds	r3, #1
    a344:	b2da      	uxtb	r2, r3
    a346:	f24c 5349 	movw	r3, #50505	; 0xc549
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	701a      	strb	r2, [r3, #0]
    a350:	f24c 5349 	movw	r3, #50505	; 0xc549
    a354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	2bff      	cmp	r3, #255	; 0xff
    a35c:	d105      	bne.n	a36a <send_desired+0x68e>
    a35e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	2200      	movs	r2, #0
    a368:	701a      	strb	r2, [r3, #0]
    a36a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	461a      	mov	r2, r3
    a376:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	7859      	ldrb	r1, [r3, #1]
    a380:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	5499      	strb	r1, [r3, r2]
    a38a:	4b8b      	ldr	r3, [pc, #556]	; (a5b8 <send_desired+0x8dc>)
    a38c:	781a      	ldrb	r2, [r3, #0]
    a38e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	781b      	ldrb	r3, [r3, #0]
    a398:	4413      	add	r3, r2
    a39a:	b2da      	uxtb	r2, r3
    a39c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a4:	701a      	strb	r2, [r3, #0]
    a3a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	781a      	ldrb	r2, [r3, #0]
    a3b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	4413      	add	r3, r2
    a3bc:	b2da      	uxtb	r2, r3
    a3be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	3301      	adds	r3, #1
    a3d4:	b2da      	uxtb	r2, r3
    a3d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	701a      	strb	r2, [r3, #0]
    a3e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	2bff      	cmp	r3, #255	; 0xff
    a3ec:	d105      	bne.n	a3fa <send_desired+0x71e>
    a3ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f6:	2200      	movs	r2, #0
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	461a      	mov	r2, r3
    a406:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40e:	7899      	ldrb	r1, [r3, #2]
    a410:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a418:	5499      	strb	r1, [r3, r2]
    a41a:	4b68      	ldr	r3, [pc, #416]	; (a5bc <send_desired+0x8e0>)
    a41c:	781a      	ldrb	r2, [r3, #0]
    a41e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	4413      	add	r3, r2
    a42a:	b2da      	uxtb	r2, r3
    a42c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a434:	701a      	strb	r2, [r3, #0]
    a436:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43e:	781a      	ldrb	r2, [r3, #0]
    a440:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	4413      	add	r3, r2
    a44c:	b2da      	uxtb	r2, r3
    a44e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a456:	701a      	strb	r2, [r3, #0]
    a458:	f24c 5349 	movw	r3, #50505	; 0xc549
    a45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	3301      	adds	r3, #1
    a464:	b2da      	uxtb	r2, r3
    a466:	f24c 5349 	movw	r3, #50505	; 0xc549
    a46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46e:	701a      	strb	r2, [r3, #0]
    a470:	f24c 5349 	movw	r3, #50505	; 0xc549
    a474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	2bff      	cmp	r3, #255	; 0xff
    a47c:	d105      	bne.n	a48a <send_desired+0x7ae>
    a47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a486:	2200      	movs	r2, #0
    a488:	701a      	strb	r2, [r3, #0]
    a48a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	461a      	mov	r2, r3
    a496:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49e:	78d9      	ldrb	r1, [r3, #3]
    a4a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a8:	5499      	strb	r1, [r3, r2]
    a4aa:	4b45      	ldr	r3, [pc, #276]	; (a5c0 <send_desired+0x8e4>)
    a4ac:	781a      	ldrb	r2, [r3, #0]
    a4ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b6:	781b      	ldrb	r3, [r3, #0]
    a4b8:	4413      	add	r3, r2
    a4ba:	b2da      	uxtb	r2, r3
    a4bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c4:	701a      	strb	r2, [r3, #0]
    a4c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ce:	781a      	ldrb	r2, [r3, #0]
    a4d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d8:	781b      	ldrb	r3, [r3, #0]
    a4da:	4413      	add	r3, r2
    a4dc:	b2da      	uxtb	r2, r3
    a4de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	3301      	adds	r3, #1
    a4f4:	b2da      	uxtb	r2, r3
    a4f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fe:	701a      	strb	r2, [r3, #0]
    a500:	f24c 5349 	movw	r3, #50505	; 0xc549
    a504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a508:	781b      	ldrb	r3, [r3, #0]
    a50a:	2bff      	cmp	r3, #255	; 0xff
    a50c:	d105      	bne.n	a51a <send_desired+0x83e>
    a50e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a516:	2200      	movs	r2, #0
    a518:	701a      	strb	r2, [r3, #0]
    a51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a522:	781b      	ldrb	r3, [r3, #0]
    a524:	461a      	mov	r2, r3
    a526:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a52e:	7819      	ldrb	r1, [r3, #0]
    a530:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a538:	5499      	strb	r1, [r3, r2]
    a53a:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a542:	781a      	ldrb	r2, [r3, #0]
    a544:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54c:	781b      	ldrb	r3, [r3, #0]
    a54e:	4413      	add	r3, r2
    a550:	b2da      	uxtb	r2, r3
    a552:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55a:	701a      	strb	r2, [r3, #0]
    a55c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a564:	781a      	ldrb	r2, [r3, #0]
    a566:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56e:	781b      	ldrb	r3, [r3, #0]
    a570:	4413      	add	r3, r2
    a572:	b2da      	uxtb	r2, r3
    a574:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57c:	701a      	strb	r2, [r3, #0]
    a57e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a586:	781b      	ldrb	r3, [r3, #0]
    a588:	3301      	adds	r3, #1
    a58a:	b2da      	uxtb	r2, r3
    a58c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a594:	701a      	strb	r2, [r3, #0]
    a596:	f24c 5349 	movw	r3, #50505	; 0xc549
    a59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	2bff      	cmp	r3, #255	; 0xff
    a5a2:	d10f      	bne.n	a5c4 <send_desired+0x8e8>
    a5a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ac:	2200      	movs	r2, #0
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	e008      	b.n	a5c4 <send_desired+0x8e8>
    a5b2:	bf00      	nop
    a5b4:	2004c87b 	.word	0x2004c87b
    a5b8:	2004c8c1 	.word	0x2004c8c1
    a5bc:	2004c8c2 	.word	0x2004c8c2
    a5c0:	2004c8c3 	.word	0x2004c8c3
    a5c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5cc:	781b      	ldrb	r3, [r3, #0]
    a5ce:	461a      	mov	r2, r3
    a5d0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	7859      	ldrb	r1, [r3, #1]
    a5da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	5499      	strb	r1, [r3, r2]
    a5e4:	4bd1      	ldr	r3, [pc, #836]	; (a92c <send_desired+0xc50>)
    a5e6:	781a      	ldrb	r2, [r3, #0]
    a5e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	4413      	add	r3, r2
    a5f4:	b2da      	uxtb	r2, r3
    a5f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fe:	701a      	strb	r2, [r3, #0]
    a600:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	781a      	ldrb	r2, [r3, #0]
    a60a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	4413      	add	r3, r2
    a616:	b2da      	uxtb	r2, r3
    a618:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a620:	701a      	strb	r2, [r3, #0]
    a622:	f24c 5349 	movw	r3, #50505	; 0xc549
    a626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	3301      	adds	r3, #1
    a62e:	b2da      	uxtb	r2, r3
    a630:	f24c 5349 	movw	r3, #50505	; 0xc549
    a634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a638:	701a      	strb	r2, [r3, #0]
    a63a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	2bff      	cmp	r3, #255	; 0xff
    a646:	d105      	bne.n	a654 <send_desired+0x978>
    a648:	f24c 5349 	movw	r3, #50505	; 0xc549
    a64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a650:	2200      	movs	r2, #0
    a652:	701a      	strb	r2, [r3, #0]
    a654:	f24c 5349 	movw	r3, #50505	; 0xc549
    a658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65c:	781b      	ldrb	r3, [r3, #0]
    a65e:	461a      	mov	r2, r3
    a660:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	7899      	ldrb	r1, [r3, #2]
    a66a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a672:	5499      	strb	r1, [r3, r2]
    a674:	4bae      	ldr	r3, [pc, #696]	; (a930 <send_desired+0xc54>)
    a676:	781a      	ldrb	r2, [r3, #0]
    a678:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a680:	781b      	ldrb	r3, [r3, #0]
    a682:	4413      	add	r3, r2
    a684:	b2da      	uxtb	r2, r3
    a686:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a68e:	701a      	strb	r2, [r3, #0]
    a690:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a698:	781a      	ldrb	r2, [r3, #0]
    a69a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a2:	781b      	ldrb	r3, [r3, #0]
    a6a4:	4413      	add	r3, r2
    a6a6:	b2da      	uxtb	r2, r3
    a6a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b0:	701a      	strb	r2, [r3, #0]
    a6b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	3301      	adds	r3, #1
    a6be:	b2da      	uxtb	r2, r3
    a6c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c8:	701a      	strb	r2, [r3, #0]
    a6ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d2:	781b      	ldrb	r3, [r3, #0]
    a6d4:	2bff      	cmp	r3, #255	; 0xff
    a6d6:	d105      	bne.n	a6e4 <send_desired+0xa08>
    a6d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e0:	2200      	movs	r2, #0
    a6e2:	701a      	strb	r2, [r3, #0]
    a6e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ec:	781b      	ldrb	r3, [r3, #0]
    a6ee:	461a      	mov	r2, r3
    a6f0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f8:	78d9      	ldrb	r1, [r3, #3]
    a6fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a702:	5499      	strb	r1, [r3, r2]
    a704:	4b8b      	ldr	r3, [pc, #556]	; (a934 <send_desired+0xc58>)
    a706:	781a      	ldrb	r2, [r3, #0]
    a708:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	4413      	add	r3, r2
    a714:	b2da      	uxtb	r2, r3
    a716:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71e:	701a      	strb	r2, [r3, #0]
    a720:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a728:	781a      	ldrb	r2, [r3, #0]
    a72a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a732:	781b      	ldrb	r3, [r3, #0]
    a734:	4413      	add	r3, r2
    a736:	b2da      	uxtb	r2, r3
    a738:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a740:	701a      	strb	r2, [r3, #0]
    a742:	f24c 5349 	movw	r3, #50505	; 0xc549
    a746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	3301      	adds	r3, #1
    a74e:	b2da      	uxtb	r2, r3
    a750:	f24c 5349 	movw	r3, #50505	; 0xc549
    a754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a758:	701a      	strb	r2, [r3, #0]
    a75a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	2bff      	cmp	r3, #255	; 0xff
    a766:	d105      	bne.n	a774 <send_desired+0xa98>
    a768:	f24c 5349 	movw	r3, #50505	; 0xc549
    a76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a770:	2200      	movs	r2, #0
    a772:	701a      	strb	r2, [r3, #0]
    a774:	f24c 5349 	movw	r3, #50505	; 0xc549
    a778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	461a      	mov	r2, r3
    a780:	f240 5374 	movw	r3, #1396	; 0x574
    a784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a788:	7819      	ldrb	r1, [r3, #0]
    a78a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a792:	5499      	strb	r1, [r3, r2]
    a794:	f240 5374 	movw	r3, #1396	; 0x574
    a798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a79c:	781a      	ldrb	r2, [r3, #0]
    a79e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	4413      	add	r3, r2
    a7aa:	b2da      	uxtb	r2, r3
    a7ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b4:	701a      	strb	r2, [r3, #0]
    a7b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	781a      	ldrb	r2, [r3, #0]
    a7c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c8:	781b      	ldrb	r3, [r3, #0]
    a7ca:	4413      	add	r3, r2
    a7cc:	b2da      	uxtb	r2, r3
    a7ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	701a      	strb	r2, [r3, #0]
    a7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e0:	781b      	ldrb	r3, [r3, #0]
    a7e2:	3301      	adds	r3, #1
    a7e4:	b2da      	uxtb	r2, r3
    a7e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	2bff      	cmp	r3, #255	; 0xff
    a7fc:	d105      	bne.n	a80a <send_desired+0xb2e>
    a7fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	2200      	movs	r2, #0
    a808:	701a      	strb	r2, [r3, #0]
    a80a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a812:	781b      	ldrb	r3, [r3, #0]
    a814:	461a      	mov	r2, r3
    a816:	f240 5374 	movw	r3, #1396	; 0x574
    a81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81e:	7859      	ldrb	r1, [r3, #1]
    a820:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a828:	5499      	strb	r1, [r3, r2]
    a82a:	4b43      	ldr	r3, [pc, #268]	; (a938 <send_desired+0xc5c>)
    a82c:	781a      	ldrb	r2, [r3, #0]
    a82e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a836:	781b      	ldrb	r3, [r3, #0]
    a838:	4413      	add	r3, r2
    a83a:	b2da      	uxtb	r2, r3
    a83c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a844:	701a      	strb	r2, [r3, #0]
    a846:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	781a      	ldrb	r2, [r3, #0]
    a850:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a858:	781b      	ldrb	r3, [r3, #0]
    a85a:	4413      	add	r3, r2
    a85c:	b2da      	uxtb	r2, r3
    a85e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	701a      	strb	r2, [r3, #0]
    a868:	f24c 5349 	movw	r3, #50505	; 0xc549
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	3301      	adds	r3, #1
    a874:	b2da      	uxtb	r2, r3
    a876:	f24c 5349 	movw	r3, #50505	; 0xc549
    a87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87e:	701a      	strb	r2, [r3, #0]
    a880:	f24c 5349 	movw	r3, #50505	; 0xc549
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	2bff      	cmp	r3, #255	; 0xff
    a88c:	d105      	bne.n	a89a <send_desired+0xbbe>
    a88e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	2200      	movs	r2, #0
    a898:	701a      	strb	r2, [r3, #0]
    a89a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a2:	781b      	ldrb	r3, [r3, #0]
    a8a4:	461a      	mov	r2, r3
    a8a6:	f240 5374 	movw	r3, #1396	; 0x574
    a8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ae:	7899      	ldrb	r1, [r3, #2]
    a8b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b8:	5499      	strb	r1, [r3, r2]
    a8ba:	4b20      	ldr	r3, [pc, #128]	; (a93c <send_desired+0xc60>)
    a8bc:	781a      	ldrb	r2, [r3, #0]
    a8be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c6:	781b      	ldrb	r3, [r3, #0]
    a8c8:	4413      	add	r3, r2
    a8ca:	b2da      	uxtb	r2, r3
    a8cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	701a      	strb	r2, [r3, #0]
    a8d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	781a      	ldrb	r2, [r3, #0]
    a8e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	4413      	add	r3, r2
    a8ec:	b2da      	uxtb	r2, r3
    a8ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f6:	701a      	strb	r2, [r3, #0]
    a8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a900:	781b      	ldrb	r3, [r3, #0]
    a902:	3301      	adds	r3, #1
    a904:	b2da      	uxtb	r2, r3
    a906:	f24c 5349 	movw	r3, #50505	; 0xc549
    a90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90e:	701a      	strb	r2, [r3, #0]
    a910:	f24c 5349 	movw	r3, #50505	; 0xc549
    a914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a918:	781b      	ldrb	r3, [r3, #0]
    a91a:	2bff      	cmp	r3, #255	; 0xff
    a91c:	d110      	bne.n	a940 <send_desired+0xc64>
    a91e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a926:	2200      	movs	r2, #0
    a928:	701a      	strb	r2, [r3, #0]
    a92a:	e009      	b.n	a940 <send_desired+0xc64>
    a92c:	2004c8c5 	.word	0x2004c8c5
    a930:	2004c8c6 	.word	0x2004c8c6
    a934:	2004c8c7 	.word	0x2004c8c7
    a938:	20000575 	.word	0x20000575
    a93c:	20000576 	.word	0x20000576
    a940:	f24c 5349 	movw	r3, #50505	; 0xc549
    a944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	461a      	mov	r2, r3
    a94c:	f240 5374 	movw	r3, #1396	; 0x574
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	78d9      	ldrb	r1, [r3, #3]
    a956:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95e:	5499      	strb	r1, [r3, r2]
    a960:	4b79      	ldr	r3, [pc, #484]	; (ab48 <send_desired+0xe6c>)
    a962:	781a      	ldrb	r2, [r3, #0]
    a964:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	4413      	add	r3, r2
    a970:	b2da      	uxtb	r2, r3
    a972:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97a:	701a      	strb	r2, [r3, #0]
    a97c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a984:	781a      	ldrb	r2, [r3, #0]
    a986:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	4413      	add	r3, r2
    a992:	b2da      	uxtb	r2, r3
    a994:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99c:	701a      	strb	r2, [r3, #0]
    a99e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a6:	781b      	ldrb	r3, [r3, #0]
    a9a8:	3301      	adds	r3, #1
    a9aa:	b2da      	uxtb	r2, r3
    a9ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b4:	701a      	strb	r2, [r3, #0]
    a9b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9be:	781b      	ldrb	r3, [r3, #0]
    a9c0:	2bff      	cmp	r3, #255	; 0xff
    a9c2:	d105      	bne.n	a9d0 <send_desired+0xcf4>
    a9c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9cc:	2200      	movs	r2, #0
    a9ce:	701a      	strb	r2, [r3, #0]
    a9d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d8:	781b      	ldrb	r3, [r3, #0]
    a9da:	461a      	mov	r2, r3
    a9dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e4:	7819      	ldrb	r1, [r3, #0]
    a9e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ee:	5499      	strb	r1, [r3, r2]
    a9f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f8:	781b      	ldrb	r3, [r3, #0]
    a9fa:	3301      	adds	r3, #1
    a9fc:	b2da      	uxtb	r2, r3
    a9fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa06:	701a      	strb	r2, [r3, #0]
    aa08:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	2bff      	cmp	r3, #255	; 0xff
    aa14:	d105      	bne.n	aa22 <send_desired+0xd46>
    aa16:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	2200      	movs	r2, #0
    aa20:	701a      	strb	r2, [r3, #0]
    aa22:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2a:	781b      	ldrb	r3, [r3, #0]
    aa2c:	461a      	mov	r2, r3
    aa2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa36:	7819      	ldrb	r1, [r3, #0]
    aa38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa40:	5499      	strb	r1, [r3, r2]
    aa42:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4a:	781b      	ldrb	r3, [r3, #0]
    aa4c:	3301      	adds	r3, #1
    aa4e:	b2da      	uxtb	r2, r3
    aa50:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa58:	701a      	strb	r2, [r3, #0]
    aa5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa62:	781b      	ldrb	r3, [r3, #0]
    aa64:	2bff      	cmp	r3, #255	; 0xff
    aa66:	d105      	bne.n	aa74 <send_desired+0xd98>
    aa68:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa70:	2200      	movs	r2, #0
    aa72:	701a      	strb	r2, [r3, #0]
    aa74:	f242 0339 	movw	r3, #8249	; 0x2039
    aa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	b2db      	uxtb	r3, r3
    aa80:	f003 0310 	and.w	r3, r3, #16
    aa84:	2b00      	cmp	r3, #0
    aa86:	d15a      	bne.n	ab3e <send_desired+0xe62>
    aa88:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa90:	781b      	ldrb	r3, [r3, #0]
    aa92:	b2db      	uxtb	r3, r3
    aa94:	461a      	mov	r2, r3
    aa96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9e:	5c9a      	ldrb	r2, [r3, r2]
    aaa0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    aaa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa8:	701a      	strb	r2, [r3, #0]
    aaaa:	f24c 634c 	movw	r3, #50764	; 0xc64c
    aaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab2:	2200      	movs	r2, #0
    aab4:	701a      	strb	r2, [r3, #0]
    aab6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	b2db      	uxtb	r3, r3
    aac2:	3301      	adds	r3, #1
    aac4:	b2da      	uxtb	r2, r3
    aac6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aaca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aace:	701a      	strb	r2, [r3, #0]
    aad0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad8:	781b      	ldrb	r3, [r3, #0]
    aada:	b2db      	uxtb	r3, r3
    aadc:	2bff      	cmp	r3, #255	; 0xff
    aade:	d105      	bne.n	aaec <send_desired+0xe10>
    aae0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae8:	2200      	movs	r2, #0
    aaea:	701a      	strb	r2, [r3, #0]
    aaec:	f242 0338 	movw	r3, #8248	; 0x2038
    aaf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf4:	f242 0238 	movw	r2, #8248	; 0x2038
    aaf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aafc:	7812      	ldrb	r2, [r2, #0]
    aafe:	b2d2      	uxtb	r2, r2
    ab00:	f042 0201 	orr.w	r2, r2, #1
    ab04:	b2d2      	uxtb	r2, r2
    ab06:	701a      	strb	r2, [r3, #0]
    ab08:	f242 0339 	movw	r3, #8249	; 0x2039
    ab0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab10:	f242 0239 	movw	r2, #8249	; 0x2039
    ab14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab18:	7812      	ldrb	r2, [r2, #0]
    ab1a:	b2d2      	uxtb	r2, r2
    ab1c:	f042 0210 	orr.w	r2, r2, #16
    ab20:	b2d2      	uxtb	r2, r2
    ab22:	701a      	strb	r2, [r3, #0]
    ab24:	e00b      	b.n	ab3e <send_desired+0xe62>
    ab26:	f24c 5348 	movw	r3, #50504	; 0xc548
    ab2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	3301      	adds	r3, #1
    ab32:	b2da      	uxtb	r2, r3
    ab34:	f24c 5348 	movw	r3, #50504	; 0xc548
    ab38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3c:	701a      	strb	r2, [r3, #0]
}
    ab3e:	46bd      	mov	sp, r7
    ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab44:	4770      	bx	lr
    ab46:	bf00      	nop
    ab48:	20000577 	.word	0x20000577

0000ab4c <send_bat>:
void send_bat(void){  //2000ms
    ab4c:	b480      	push	{r7}
    ab4e:	af00      	add	r7, sp, #0
  if(!boot)
    ab50:	f240 533d 	movw	r3, #1341	; 0x53d
    ab54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab58:	781b      	ldrb	r3, [r3, #0]
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	f040 83af 	bne.w	b2be <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    ab60:	f24c 5341 	movw	r3, #50497	; 0xc541
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	781a      	ldrb	r2, [r3, #0]
    ab6a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ab6e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ab72:	fba3 1302 	umull	r1, r3, r3, r2
    ab76:	0919      	lsrs	r1, r3, #4
    ab78:	460b      	mov	r3, r1
    ab7a:	009b      	lsls	r3, r3, #2
    ab7c:	440b      	add	r3, r1
    ab7e:	009b      	lsls	r3, r3, #2
    ab80:	1ad3      	subs	r3, r2, r3
    ab82:	b2db      	uxtb	r3, r3
    ab84:	2b08      	cmp	r3, #8
    ab86:	f040 839a 	bne.w	b2be <send_bat+0x772>
    ab8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	781a      	ldrb	r2, [r3, #0]
    ab94:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	781b      	ldrb	r3, [r3, #0]
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	429a      	cmp	r2, r3
    aba2:	d313      	bcc.n	abcc <send_bat+0x80>
    aba4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	b2db      	uxtb	r3, r3
    abb0:	461a      	mov	r2, r3
    abb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	1ad3      	subs	r3, r2, r3
    abbe:	33ff      	adds	r3, #255	; 0xff
    abc0:	2b0c      	cmp	r3, #12
    abc2:	bfd4      	ite	le
    abc4:	2300      	movle	r3, #0
    abc6:	2301      	movgt	r3, #1
    abc8:	b2db      	uxtb	r3, r3
    abca:	e011      	b.n	abf0 <send_bat+0xa4>
    abcc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    abd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd4:	781b      	ldrb	r3, [r3, #0]
    abd6:	b2db      	uxtb	r3, r3
    abd8:	461a      	mov	r2, r3
    abda:	f24c 5349 	movw	r3, #50505	; 0xc549
    abde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	1ad3      	subs	r3, r2, r3
    abe6:	2b0c      	cmp	r3, #12
    abe8:	bfd4      	ite	le
    abea:	2300      	movle	r3, #0
    abec:	2301      	movgt	r3, #1
    abee:	b2db      	uxtb	r3, r3
    abf0:	2b00      	cmp	r3, #0
    abf2:	f000 8358 	beq.w	b2a6 <send_bat+0x75a>
    abf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfe:	781b      	ldrb	r3, [r3, #0]
    ac00:	461a      	mov	r2, r3
    ac02:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0a:	2105      	movs	r1, #5
    ac0c:	5499      	strb	r1, [r3, r2]
    ac0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	3301      	adds	r3, #1
    ac1a:	b2da      	uxtb	r2, r3
    ac1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	701a      	strb	r2, [r3, #0]
    ac26:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2e:	781b      	ldrb	r3, [r3, #0]
    ac30:	2bff      	cmp	r3, #255	; 0xff
    ac32:	d105      	bne.n	ac40 <send_bat+0xf4>
    ac34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	2200      	movs	r2, #0
    ac3e:	701a      	strb	r2, [r3, #0]
    ac40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac48:	781b      	ldrb	r3, [r3, #0]
    ac4a:	461a      	mov	r2, r3
    ac4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	210c      	movs	r1, #12
    ac56:	5499      	strb	r1, [r3, r2]
    ac58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	3301      	adds	r3, #1
    ac64:	b2da      	uxtb	r2, r3
    ac66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	2bff      	cmp	r3, #255	; 0xff
    ac7c:	d105      	bne.n	ac8a <send_bat+0x13e>
    ac7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	2200      	movs	r2, #0
    ac88:	701a      	strb	r2, [r3, #0]
    ac8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	220c      	movs	r2, #12
    ac94:	701a      	strb	r2, [r3, #0]
    ac96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9e:	220c      	movs	r2, #12
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	461a      	mov	r2, r3
    acae:	f24c 5332 	movw	r3, #50482	; 0xc532
    acb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb6:	7819      	ldrb	r1, [r3, #0]
    acb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    acbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc0:	5499      	strb	r1, [r3, r2]
    acc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acca:	781a      	ldrb	r2, [r3, #0]
    accc:	f24c 5332 	movw	r3, #50482	; 0xc532
    acd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd4:	781b      	ldrb	r3, [r3, #0]
    acd6:	4413      	add	r3, r2
    acd8:	b2da      	uxtb	r2, r3
    acda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace2:	701a      	strb	r2, [r3, #0]
    ace4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ace8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acec:	781a      	ldrb	r2, [r3, #0]
    acee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf6:	781b      	ldrb	r3, [r3, #0]
    acf8:	4413      	add	r3, r2
    acfa:	b2da      	uxtb	r2, r3
    acfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad04:	701a      	strb	r2, [r3, #0]
    ad06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0e:	781b      	ldrb	r3, [r3, #0]
    ad10:	3301      	adds	r3, #1
    ad12:	b2da      	uxtb	r2, r3
    ad14:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1c:	701a      	strb	r2, [r3, #0]
    ad1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	2bff      	cmp	r3, #255	; 0xff
    ad2a:	d105      	bne.n	ad38 <send_bat+0x1ec>
    ad2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad34:	2200      	movs	r2, #0
    ad36:	701a      	strb	r2, [r3, #0]
    ad38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	461a      	mov	r2, r3
    ad44:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4c:	7819      	ldrb	r1, [r3, #0]
    ad4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad56:	5499      	strb	r1, [r3, r2]
    ad58:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad60:	781a      	ldrb	r2, [r3, #0]
    ad62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	781b      	ldrb	r3, [r3, #0]
    ad6c:	4413      	add	r3, r2
    ad6e:	b2da      	uxtb	r2, r3
    ad70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad78:	701a      	strb	r2, [r3, #0]
    ad7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	781a      	ldrb	r2, [r3, #0]
    ad84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8c:	781b      	ldrb	r3, [r3, #0]
    ad8e:	4413      	add	r3, r2
    ad90:	b2da      	uxtb	r2, r3
    ad92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	701a      	strb	r2, [r3, #0]
    ad9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	781b      	ldrb	r3, [r3, #0]
    ada6:	3301      	adds	r3, #1
    ada8:	b2da      	uxtb	r2, r3
    adaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    adae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    adb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	2bff      	cmp	r3, #255	; 0xff
    adc0:	d105      	bne.n	adce <send_bat+0x282>
    adc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	2200      	movs	r2, #0
    adcc:	701a      	strb	r2, [r3, #0]
    adce:	f24c 5349 	movw	r3, #50505	; 0xc549
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	461a      	mov	r2, r3
    adda:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    adde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade2:	7859      	ldrb	r1, [r3, #1]
    ade4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ade8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adec:	5499      	strb	r1, [r3, r2]
    adee:	4bd5      	ldr	r3, [pc, #852]	; (b144 <send_bat+0x5f8>)
    adf0:	781a      	ldrb	r2, [r3, #0]
    adf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfa:	781b      	ldrb	r3, [r3, #0]
    adfc:	4413      	add	r3, r2
    adfe:	b2da      	uxtb	r2, r3
    ae00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae08:	701a      	strb	r2, [r3, #0]
    ae0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae12:	781a      	ldrb	r2, [r3, #0]
    ae14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1c:	781b      	ldrb	r3, [r3, #0]
    ae1e:	4413      	add	r3, r2
    ae20:	b2da      	uxtb	r2, r3
    ae22:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2a:	701a      	strb	r2, [r3, #0]
    ae2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae34:	781b      	ldrb	r3, [r3, #0]
    ae36:	3301      	adds	r3, #1
    ae38:	b2da      	uxtb	r2, r3
    ae3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae42:	701a      	strb	r2, [r3, #0]
    ae44:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4c:	781b      	ldrb	r3, [r3, #0]
    ae4e:	2bff      	cmp	r3, #255	; 0xff
    ae50:	d105      	bne.n	ae5e <send_bat+0x312>
    ae52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5a:	2200      	movs	r2, #0
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	461a      	mov	r2, r3
    ae6a:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae72:	7819      	ldrb	r1, [r3, #0]
    ae74:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7c:	5499      	strb	r1, [r3, r2]
    ae7e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae86:	781a      	ldrb	r2, [r3, #0]
    ae88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	4413      	add	r3, r2
    ae94:	b2da      	uxtb	r2, r3
    ae96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea8:	781a      	ldrb	r2, [r3, #0]
    aeaa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb2:	781b      	ldrb	r3, [r3, #0]
    aeb4:	4413      	add	r3, r2
    aeb6:	b2da      	uxtb	r2, r3
    aeb8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec0:	701a      	strb	r2, [r3, #0]
    aec2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	3301      	adds	r3, #1
    aece:	b2da      	uxtb	r2, r3
    aed0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed8:	701a      	strb	r2, [r3, #0]
    aeda:	f24c 5349 	movw	r3, #50505	; 0xc549
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	2bff      	cmp	r3, #255	; 0xff
    aee6:	d105      	bne.n	aef4 <send_bat+0x3a8>
    aee8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	2200      	movs	r2, #0
    aef2:	701a      	strb	r2, [r3, #0]
    aef4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	461a      	mov	r2, r3
    af00:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af08:	7819      	ldrb	r1, [r3, #0]
    af0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af12:	5499      	strb	r1, [r3, r2]
    af14:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1c:	781a      	ldrb	r2, [r3, #0]
    af1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	4413      	add	r3, r2
    af2a:	b2da      	uxtb	r2, r3
    af2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af34:	701a      	strb	r2, [r3, #0]
    af36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	781a      	ldrb	r2, [r3, #0]
    af40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	4413      	add	r3, r2
    af4c:	b2da      	uxtb	r2, r3
    af4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	701a      	strb	r2, [r3, #0]
    af58:	f24c 5349 	movw	r3, #50505	; 0xc549
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	3301      	adds	r3, #1
    af64:	b2da      	uxtb	r2, r3
    af66:	f24c 5349 	movw	r3, #50505	; 0xc549
    af6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6e:	701a      	strb	r2, [r3, #0]
    af70:	f24c 5349 	movw	r3, #50505	; 0xc549
    af74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	2bff      	cmp	r3, #255	; 0xff
    af7c:	d105      	bne.n	af8a <send_bat+0x43e>
    af7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	2200      	movs	r2, #0
    af88:	701a      	strb	r2, [r3, #0]
    af8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    af8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af92:	781b      	ldrb	r3, [r3, #0]
    af94:	461a      	mov	r2, r3
    af96:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9e:	7859      	ldrb	r1, [r3, #1]
    afa0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    afa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa8:	5499      	strb	r1, [r3, r2]
    afaa:	4b67      	ldr	r3, [pc, #412]	; (b148 <send_bat+0x5fc>)
    afac:	781a      	ldrb	r2, [r3, #0]
    afae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	4413      	add	r3, r2
    afba:	b2da      	uxtb	r2, r3
    afbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc4:	701a      	strb	r2, [r3, #0]
    afc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afce:	781a      	ldrb	r2, [r3, #0]
    afd0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	4413      	add	r3, r2
    afdc:	b2da      	uxtb	r2, r3
    afde:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    afec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	3301      	adds	r3, #1
    aff4:	b2da      	uxtb	r2, r3
    aff6:	f24c 5349 	movw	r3, #50505	; 0xc549
    affa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affe:	701a      	strb	r2, [r3, #0]
    b000:	f24c 5349 	movw	r3, #50505	; 0xc549
    b004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	2bff      	cmp	r3, #255	; 0xff
    b00c:	d105      	bne.n	b01a <send_bat+0x4ce>
    b00e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b016:	2200      	movs	r2, #0
    b018:	701a      	strb	r2, [r3, #0]
    b01a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	461a      	mov	r2, r3
    b026:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02e:	7819      	ldrb	r1, [r3, #0]
    b030:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b038:	5499      	strb	r1, [r3, r2]
    b03a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b042:	781a      	ldrb	r2, [r3, #0]
    b044:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	4413      	add	r3, r2
    b050:	b2da      	uxtb	r2, r3
    b052:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05a:	701a      	strb	r2, [r3, #0]
    b05c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	781a      	ldrb	r2, [r3, #0]
    b066:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	4413      	add	r3, r2
    b072:	b2da      	uxtb	r2, r3
    b074:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	3301      	adds	r3, #1
    b08a:	b2da      	uxtb	r2, r3
    b08c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b094:	701a      	strb	r2, [r3, #0]
    b096:	f24c 5349 	movw	r3, #50505	; 0xc549
    b09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09e:	781b      	ldrb	r3, [r3, #0]
    b0a0:	2bff      	cmp	r3, #255	; 0xff
    b0a2:	d105      	bne.n	b0b0 <send_bat+0x564>
    b0a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	2200      	movs	r2, #0
    b0ae:	701a      	strb	r2, [r3, #0]
    b0b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	461a      	mov	r2, r3
    b0bc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	7859      	ldrb	r1, [r3, #1]
    b0c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	5499      	strb	r1, [r3, r2]
    b0d0:	4b1e      	ldr	r3, [pc, #120]	; (b14c <send_bat+0x600>)
    b0d2:	781a      	ldrb	r2, [r3, #0]
    b0d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	4413      	add	r3, r2
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ea:	701a      	strb	r2, [r3, #0]
    b0ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	781a      	ldrb	r2, [r3, #0]
    b0f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	4413      	add	r3, r2
    b102:	b2da      	uxtb	r2, r3
    b104:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10c:	701a      	strb	r2, [r3, #0]
    b10e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b116:	781b      	ldrb	r3, [r3, #0]
    b118:	3301      	adds	r3, #1
    b11a:	b2da      	uxtb	r2, r3
    b11c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b124:	701a      	strb	r2, [r3, #0]
    b126:	f24c 5349 	movw	r3, #50505	; 0xc549
    b12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	2bff      	cmp	r3, #255	; 0xff
    b132:	d10d      	bne.n	b150 <send_bat+0x604>
    b134:	f24c 5349 	movw	r3, #50505	; 0xc549
    b138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13c:	2200      	movs	r2, #0
    b13e:	701a      	strb	r2, [r3, #0]
    b140:	e006      	b.n	b150 <send_bat+0x604>
    b142:	bf00      	nop
    b144:	2004cb2d 	.word	0x2004cb2d
    b148:	2004c8b7 	.word	0x2004c8b7
    b14c:	2004c8b5 	.word	0x2004c8b5
    b150:	f24c 5349 	movw	r3, #50505	; 0xc549
    b154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b158:	781b      	ldrb	r3, [r3, #0]
    b15a:	461a      	mov	r2, r3
    b15c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	7819      	ldrb	r1, [r3, #0]
    b166:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16e:	5499      	strb	r1, [r3, r2]
    b170:	f24c 5349 	movw	r3, #50505	; 0xc549
    b174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b178:	781b      	ldrb	r3, [r3, #0]
    b17a:	3301      	adds	r3, #1
    b17c:	b2da      	uxtb	r2, r3
    b17e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b186:	701a      	strb	r2, [r3, #0]
    b188:	f24c 5349 	movw	r3, #50505	; 0xc549
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	781b      	ldrb	r3, [r3, #0]
    b192:	2bff      	cmp	r3, #255	; 0xff
    b194:	d105      	bne.n	b1a2 <send_bat+0x656>
    b196:	f24c 5349 	movw	r3, #50505	; 0xc549
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	2200      	movs	r2, #0
    b1a0:	701a      	strb	r2, [r3, #0]
    b1a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1aa:	781b      	ldrb	r3, [r3, #0]
    b1ac:	461a      	mov	r2, r3
    b1ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b6:	7819      	ldrb	r1, [r3, #0]
    b1b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c0:	5499      	strb	r1, [r3, r2]
    b1c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	3301      	adds	r3, #1
    b1ce:	b2da      	uxtb	r2, r3
    b1d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	701a      	strb	r2, [r3, #0]
    b1da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e2:	781b      	ldrb	r3, [r3, #0]
    b1e4:	2bff      	cmp	r3, #255	; 0xff
    b1e6:	d105      	bne.n	b1f4 <send_bat+0x6a8>
    b1e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f0:	2200      	movs	r2, #0
    b1f2:	701a      	strb	r2, [r3, #0]
    b1f4:	f242 0339 	movw	r3, #8249	; 0x2039
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	b2db      	uxtb	r3, r3
    b200:	f003 0310 	and.w	r3, r3, #16
    b204:	2b00      	cmp	r3, #0
    b206:	d15a      	bne.n	b2be <send_bat+0x772>
    b208:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	b2db      	uxtb	r3, r3
    b214:	461a      	mov	r2, r3
    b216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21e:	5c9a      	ldrb	r2, [r3, r2]
    b220:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b228:	701a      	strb	r2, [r3, #0]
    b22a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b232:	2200      	movs	r2, #0
    b234:	701a      	strb	r2, [r3, #0]
    b236:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23e:	781b      	ldrb	r3, [r3, #0]
    b240:	b2db      	uxtb	r3, r3
    b242:	3301      	adds	r3, #1
    b244:	b2da      	uxtb	r2, r3
    b246:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b24e:	701a      	strb	r2, [r3, #0]
    b250:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	b2db      	uxtb	r3, r3
    b25c:	2bff      	cmp	r3, #255	; 0xff
    b25e:	d105      	bne.n	b26c <send_bat+0x720>
    b260:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f242 0338 	movw	r3, #8248	; 0x2038
    b270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b274:	f242 0238 	movw	r2, #8248	; 0x2038
    b278:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b27c:	7812      	ldrb	r2, [r2, #0]
    b27e:	b2d2      	uxtb	r2, r2
    b280:	f042 0201 	orr.w	r2, r2, #1
    b284:	b2d2      	uxtb	r2, r2
    b286:	701a      	strb	r2, [r3, #0]
    b288:	f242 0339 	movw	r3, #8249	; 0x2039
    b28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b290:	f242 0239 	movw	r2, #8249	; 0x2039
    b294:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b298:	7812      	ldrb	r2, [r2, #0]
    b29a:	b2d2      	uxtb	r2, r2
    b29c:	f042 0210 	orr.w	r2, r2, #16
    b2a0:	b2d2      	uxtb	r2, r2
    b2a2:	701a      	strb	r2, [r3, #0]
    b2a4:	e00b      	b.n	b2be <send_bat+0x772>
    b2a6:	f24c 5348 	movw	r3, #50504	; 0xc548
    b2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ae:	781b      	ldrb	r3, [r3, #0]
    b2b0:	3301      	adds	r3, #1
    b2b2:	b2da      	uxtb	r2, r3
    b2b4:	f24c 5348 	movw	r3, #50504	; 0xc548
    b2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2bc:	701a      	strb	r2, [r3, #0]
}
    b2be:	46bd      	mov	sp, r7
    b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c4:	4770      	bx	lr
    b2c6:	bf00      	nop

0000b2c8 <send_climb>:
void send_climb(void){  //2000ms
    b2c8:	b480      	push	{r7}
    b2ca:	af00      	add	r7, sp, #0
  if(!boot)
    b2cc:	f240 533d 	movw	r3, #1341	; 0x53d
    b2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d4:	781b      	ldrb	r3, [r3, #0]
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	f040 8569 	bne.w	bdae <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b2dc:	f24c 5341 	movw	r3, #50497	; 0xc541
    b2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e4:	781a      	ldrb	r2, [r3, #0]
    b2e6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b2ea:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b2ee:	fba3 1302 	umull	r1, r3, r3, r2
    b2f2:	0919      	lsrs	r1, r3, #4
    b2f4:	460b      	mov	r3, r1
    b2f6:	009b      	lsls	r3, r3, #2
    b2f8:	440b      	add	r3, r1
    b2fa:	009b      	lsls	r3, r3, #2
    b2fc:	1ad3      	subs	r3, r2, r3
    b2fe:	b2db      	uxtb	r3, r3
    b300:	2b12      	cmp	r3, #18
    b302:	f040 8554 	bne.w	bdae <send_climb+0xae6>
    b306:	f24c 5349 	movw	r3, #50505	; 0xc549
    b30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30e:	781a      	ldrb	r2, [r3, #0]
    b310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	b2db      	uxtb	r3, r3
    b31c:	429a      	cmp	r2, r3
    b31e:	d313      	bcc.n	b348 <send_climb+0x80>
    b320:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b328:	781b      	ldrb	r3, [r3, #0]
    b32a:	b2db      	uxtb	r3, r3
    b32c:	461a      	mov	r2, r3
    b32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	781b      	ldrb	r3, [r3, #0]
    b338:	1ad3      	subs	r3, r2, r3
    b33a:	33ff      	adds	r3, #255	; 0xff
    b33c:	2b12      	cmp	r3, #18
    b33e:	bfd4      	ite	le
    b340:	2300      	movle	r3, #0
    b342:	2301      	movgt	r3, #1
    b344:	b2db      	uxtb	r3, r3
    b346:	e011      	b.n	b36c <send_climb+0xa4>
    b348:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b350:	781b      	ldrb	r3, [r3, #0]
    b352:	b2db      	uxtb	r3, r3
    b354:	461a      	mov	r2, r3
    b356:	f24c 5349 	movw	r3, #50505	; 0xc549
    b35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	1ad3      	subs	r3, r2, r3
    b362:	2b12      	cmp	r3, #18
    b364:	bfd4      	ite	le
    b366:	2300      	movle	r3, #0
    b368:	2301      	movgt	r3, #1
    b36a:	b2db      	uxtb	r3, r3
    b36c:	2b00      	cmp	r3, #0
    b36e:	f000 8512 	beq.w	bd96 <send_climb+0xace>
    b372:	f24c 5349 	movw	r3, #50505	; 0xc549
    b376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	461a      	mov	r2, r3
    b37e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	2105      	movs	r1, #5
    b388:	5499      	strb	r1, [r3, r2]
    b38a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	3301      	adds	r3, #1
    b396:	b2da      	uxtb	r2, r3
    b398:	f24c 5349 	movw	r3, #50505	; 0xc549
    b39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a0:	701a      	strb	r2, [r3, #0]
    b3a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3aa:	781b      	ldrb	r3, [r3, #0]
    b3ac:	2bff      	cmp	r3, #255	; 0xff
    b3ae:	d105      	bne.n	b3bc <send_climb+0xf4>
    b3b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b8:	2200      	movs	r2, #0
    b3ba:	701a      	strb	r2, [r3, #0]
    b3bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c4:	781b      	ldrb	r3, [r3, #0]
    b3c6:	461a      	mov	r2, r3
    b3c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d0:	210e      	movs	r1, #14
    b3d2:	5499      	strb	r1, [r3, r2]
    b3d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3dc:	781b      	ldrb	r3, [r3, #0]
    b3de:	3301      	adds	r3, #1
    b3e0:	b2da      	uxtb	r2, r3
    b3e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ea:	701a      	strb	r2, [r3, #0]
    b3ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f4:	781b      	ldrb	r3, [r3, #0]
    b3f6:	2bff      	cmp	r3, #255	; 0xff
    b3f8:	d105      	bne.n	b406 <send_climb+0x13e>
    b3fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b402:	2200      	movs	r2, #0
    b404:	701a      	strb	r2, [r3, #0]
    b406:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40e:	220e      	movs	r2, #14
    b410:	701a      	strb	r2, [r3, #0]
    b412:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41a:	220e      	movs	r2, #14
    b41c:	701a      	strb	r2, [r3, #0]
    b41e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b426:	781b      	ldrb	r3, [r3, #0]
    b428:	461a      	mov	r2, r3
    b42a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b432:	7819      	ldrb	r1, [r3, #0]
    b434:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43c:	5499      	strb	r1, [r3, r2]
    b43e:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b446:	781a      	ldrb	r2, [r3, #0]
    b448:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	781b      	ldrb	r3, [r3, #0]
    b452:	4413      	add	r3, r2
    b454:	b2da      	uxtb	r2, r3
    b456:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45e:	701a      	strb	r2, [r3, #0]
    b460:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b468:	781a      	ldrb	r2, [r3, #0]
    b46a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b472:	781b      	ldrb	r3, [r3, #0]
    b474:	4413      	add	r3, r2
    b476:	b2da      	uxtb	r2, r3
    b478:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	701a      	strb	r2, [r3, #0]
    b482:	f24c 5349 	movw	r3, #50505	; 0xc549
    b486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	3301      	adds	r3, #1
    b48e:	b2da      	uxtb	r2, r3
    b490:	f24c 5349 	movw	r3, #50505	; 0xc549
    b494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b498:	701a      	strb	r2, [r3, #0]
    b49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a2:	781b      	ldrb	r3, [r3, #0]
    b4a4:	2bff      	cmp	r3, #255	; 0xff
    b4a6:	d105      	bne.n	b4b4 <send_climb+0x1ec>
    b4a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	2200      	movs	r2, #0
    b4b2:	701a      	strb	r2, [r3, #0]
    b4b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	461a      	mov	r2, r3
    b4c0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	7859      	ldrb	r1, [r3, #1]
    b4ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d2:	5499      	strb	r1, [r3, r2]
    b4d4:	4bd3      	ldr	r3, [pc, #844]	; (b824 <send_climb+0x55c>)
    b4d6:	781a      	ldrb	r2, [r3, #0]
    b4d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	4413      	add	r3, r2
    b4e4:	b2da      	uxtb	r2, r3
    b4e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ee:	701a      	strb	r2, [r3, #0]
    b4f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f8:	781a      	ldrb	r2, [r3, #0]
    b4fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b502:	781b      	ldrb	r3, [r3, #0]
    b504:	4413      	add	r3, r2
    b506:	b2da      	uxtb	r2, r3
    b508:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b510:	701a      	strb	r2, [r3, #0]
    b512:	f24c 5349 	movw	r3, #50505	; 0xc549
    b516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51a:	781b      	ldrb	r3, [r3, #0]
    b51c:	3301      	adds	r3, #1
    b51e:	b2da      	uxtb	r2, r3
    b520:	f24c 5349 	movw	r3, #50505	; 0xc549
    b524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b528:	701a      	strb	r2, [r3, #0]
    b52a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b532:	781b      	ldrb	r3, [r3, #0]
    b534:	2bff      	cmp	r3, #255	; 0xff
    b536:	d105      	bne.n	b544 <send_climb+0x27c>
    b538:	f24c 5349 	movw	r3, #50505	; 0xc549
    b53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b540:	2200      	movs	r2, #0
    b542:	701a      	strb	r2, [r3, #0]
    b544:	f24c 5349 	movw	r3, #50505	; 0xc549
    b548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54c:	781b      	ldrb	r3, [r3, #0]
    b54e:	461a      	mov	r2, r3
    b550:	f64c 0390 	movw	r3, #51344	; 0xc890
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	7819      	ldrb	r1, [r3, #0]
    b55a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b562:	5499      	strb	r1, [r3, r2]
    b564:	f64c 0390 	movw	r3, #51344	; 0xc890
    b568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56c:	781a      	ldrb	r2, [r3, #0]
    b56e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	781b      	ldrb	r3, [r3, #0]
    b578:	4413      	add	r3, r2
    b57a:	b2da      	uxtb	r2, r3
    b57c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b584:	701a      	strb	r2, [r3, #0]
    b586:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	781a      	ldrb	r2, [r3, #0]
    b590:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	4413      	add	r3, r2
    b59c:	b2da      	uxtb	r2, r3
    b59e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	701a      	strb	r2, [r3, #0]
    b5a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	3301      	adds	r3, #1
    b5b4:	b2da      	uxtb	r2, r3
    b5b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	701a      	strb	r2, [r3, #0]
    b5c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	2bff      	cmp	r3, #255	; 0xff
    b5cc:	d105      	bne.n	b5da <send_climb+0x312>
    b5ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	2200      	movs	r2, #0
    b5d8:	701a      	strb	r2, [r3, #0]
    b5da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e2:	781b      	ldrb	r3, [r3, #0]
    b5e4:	461a      	mov	r2, r3
    b5e6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	7859      	ldrb	r1, [r3, #1]
    b5f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	5499      	strb	r1, [r3, r2]
    b5fa:	4b8b      	ldr	r3, [pc, #556]	; (b828 <send_climb+0x560>)
    b5fc:	781a      	ldrb	r2, [r3, #0]
    b5fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	4413      	add	r3, r2
    b60a:	b2da      	uxtb	r2, r3
    b60c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b614:	701a      	strb	r2, [r3, #0]
    b616:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	781a      	ldrb	r2, [r3, #0]
    b620:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	4413      	add	r3, r2
    b62c:	b2da      	uxtb	r2, r3
    b62e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	701a      	strb	r2, [r3, #0]
    b638:	f24c 5349 	movw	r3, #50505	; 0xc549
    b63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b640:	781b      	ldrb	r3, [r3, #0]
    b642:	3301      	adds	r3, #1
    b644:	b2da      	uxtb	r2, r3
    b646:	f24c 5349 	movw	r3, #50505	; 0xc549
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	701a      	strb	r2, [r3, #0]
    b650:	f24c 5349 	movw	r3, #50505	; 0xc549
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	781b      	ldrb	r3, [r3, #0]
    b65a:	2bff      	cmp	r3, #255	; 0xff
    b65c:	d105      	bne.n	b66a <send_climb+0x3a2>
    b65e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	2200      	movs	r2, #0
    b668:	701a      	strb	r2, [r3, #0]
    b66a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b672:	781b      	ldrb	r3, [r3, #0]
    b674:	461a      	mov	r2, r3
    b676:	f64c 0390 	movw	r3, #51344	; 0xc890
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	7899      	ldrb	r1, [r3, #2]
    b680:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	5499      	strb	r1, [r3, r2]
    b68a:	4b68      	ldr	r3, [pc, #416]	; (b82c <send_climb+0x564>)
    b68c:	781a      	ldrb	r2, [r3, #0]
    b68e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	4413      	add	r3, r2
    b69a:	b2da      	uxtb	r2, r3
    b69c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a4:	701a      	strb	r2, [r3, #0]
    b6a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ae:	781a      	ldrb	r2, [r3, #0]
    b6b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	4413      	add	r3, r2
    b6bc:	b2da      	uxtb	r2, r3
    b6be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	701a      	strb	r2, [r3, #0]
    b6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	781b      	ldrb	r3, [r3, #0]
    b6d2:	3301      	adds	r3, #1
    b6d4:	b2da      	uxtb	r2, r3
    b6d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6de:	701a      	strb	r2, [r3, #0]
    b6e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	2bff      	cmp	r3, #255	; 0xff
    b6ec:	d105      	bne.n	b6fa <send_climb+0x432>
    b6ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f6:	2200      	movs	r2, #0
    b6f8:	701a      	strb	r2, [r3, #0]
    b6fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b702:	781b      	ldrb	r3, [r3, #0]
    b704:	461a      	mov	r2, r3
    b706:	f64c 0390 	movw	r3, #51344	; 0xc890
    b70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70e:	78d9      	ldrb	r1, [r3, #3]
    b710:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b718:	5499      	strb	r1, [r3, r2]
    b71a:	4b45      	ldr	r3, [pc, #276]	; (b830 <send_climb+0x568>)
    b71c:	781a      	ldrb	r2, [r3, #0]
    b71e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	4413      	add	r3, r2
    b72a:	b2da      	uxtb	r2, r3
    b72c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b734:	701a      	strb	r2, [r3, #0]
    b736:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73e:	781a      	ldrb	r2, [r3, #0]
    b740:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	4413      	add	r3, r2
    b74c:	b2da      	uxtb	r2, r3
    b74e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b756:	701a      	strb	r2, [r3, #0]
    b758:	f24c 5349 	movw	r3, #50505	; 0xc549
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	3301      	adds	r3, #1
    b764:	b2da      	uxtb	r2, r3
    b766:	f24c 5349 	movw	r3, #50505	; 0xc549
    b76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f24c 5349 	movw	r3, #50505	; 0xc549
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	2bff      	cmp	r3, #255	; 0xff
    b77c:	d105      	bne.n	b78a <send_climb+0x4c2>
    b77e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	2200      	movs	r2, #0
    b788:	701a      	strb	r2, [r3, #0]
    b78a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	461a      	mov	r2, r3
    b796:	f64c 0398 	movw	r3, #51352	; 0xc898
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	7819      	ldrb	r1, [r3, #0]
    b7a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	5499      	strb	r1, [r3, r2]
    b7aa:	f64c 0398 	movw	r3, #51352	; 0xc898
    b7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b2:	781a      	ldrb	r2, [r3, #0]
    b7b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7bc:	781b      	ldrb	r3, [r3, #0]
    b7be:	4413      	add	r3, r2
    b7c0:	b2da      	uxtb	r2, r3
    b7c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	701a      	strb	r2, [r3, #0]
    b7cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d4:	781a      	ldrb	r2, [r3, #0]
    b7d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	4413      	add	r3, r2
    b7e2:	b2da      	uxtb	r2, r3
    b7e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ec:	701a      	strb	r2, [r3, #0]
    b7ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f6:	781b      	ldrb	r3, [r3, #0]
    b7f8:	3301      	adds	r3, #1
    b7fa:	b2da      	uxtb	r2, r3
    b7fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b804:	701a      	strb	r2, [r3, #0]
    b806:	f24c 5349 	movw	r3, #50505	; 0xc549
    b80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80e:	781b      	ldrb	r3, [r3, #0]
    b810:	2bff      	cmp	r3, #255	; 0xff
    b812:	d10f      	bne.n	b834 <send_climb+0x56c>
    b814:	f24c 5349 	movw	r3, #50505	; 0xc549
    b818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81c:	2200      	movs	r2, #0
    b81e:	701a      	strb	r2, [r3, #0]
    b820:	e008      	b.n	b834 <send_climb+0x56c>
    b822:	bf00      	nop
    b824:	2004c87d 	.word	0x2004c87d
    b828:	2004c891 	.word	0x2004c891
    b82c:	2004c892 	.word	0x2004c892
    b830:	2004c893 	.word	0x2004c893
    b834:	f24c 5349 	movw	r3, #50505	; 0xc549
    b838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83c:	781b      	ldrb	r3, [r3, #0]
    b83e:	461a      	mov	r2, r3
    b840:	f64c 0398 	movw	r3, #51352	; 0xc898
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	7859      	ldrb	r1, [r3, #1]
    b84a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	5499      	strb	r1, [r3, r2]
    b854:	4bd1      	ldr	r3, [pc, #836]	; (bb9c <send_climb+0x8d4>)
    b856:	781a      	ldrb	r2, [r3, #0]
    b858:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	4413      	add	r3, r2
    b864:	b2da      	uxtb	r2, r3
    b866:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	701a      	strb	r2, [r3, #0]
    b870:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	781a      	ldrb	r2, [r3, #0]
    b87a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b882:	781b      	ldrb	r3, [r3, #0]
    b884:	4413      	add	r3, r2
    b886:	b2da      	uxtb	r2, r3
    b888:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	701a      	strb	r2, [r3, #0]
    b892:	f24c 5349 	movw	r3, #50505	; 0xc549
    b896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	3301      	adds	r3, #1
    b89e:	b2da      	uxtb	r2, r3
    b8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	701a      	strb	r2, [r3, #0]
    b8aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	2bff      	cmp	r3, #255	; 0xff
    b8b6:	d105      	bne.n	b8c4 <send_climb+0x5fc>
    b8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	2200      	movs	r2, #0
    b8c2:	701a      	strb	r2, [r3, #0]
    b8c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8cc:	781b      	ldrb	r3, [r3, #0]
    b8ce:	461a      	mov	r2, r3
    b8d0:	f64c 0398 	movw	r3, #51352	; 0xc898
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	7899      	ldrb	r1, [r3, #2]
    b8da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e2:	5499      	strb	r1, [r3, r2]
    b8e4:	4bae      	ldr	r3, [pc, #696]	; (bba0 <send_climb+0x8d8>)
    b8e6:	781a      	ldrb	r2, [r3, #0]
    b8e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	4413      	add	r3, r2
    b8f4:	b2da      	uxtb	r2, r3
    b8f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fe:	701a      	strb	r2, [r3, #0]
    b900:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	781a      	ldrb	r2, [r3, #0]
    b90a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b912:	781b      	ldrb	r3, [r3, #0]
    b914:	4413      	add	r3, r2
    b916:	b2da      	uxtb	r2, r3
    b918:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	701a      	strb	r2, [r3, #0]
    b922:	f24c 5349 	movw	r3, #50505	; 0xc549
    b926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	3301      	adds	r3, #1
    b92e:	b2da      	uxtb	r2, r3
    b930:	f24c 5349 	movw	r3, #50505	; 0xc549
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	701a      	strb	r2, [r3, #0]
    b93a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b942:	781b      	ldrb	r3, [r3, #0]
    b944:	2bff      	cmp	r3, #255	; 0xff
    b946:	d105      	bne.n	b954 <send_climb+0x68c>
    b948:	f24c 5349 	movw	r3, #50505	; 0xc549
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	2200      	movs	r2, #0
    b952:	701a      	strb	r2, [r3, #0]
    b954:	f24c 5349 	movw	r3, #50505	; 0xc549
    b958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	461a      	mov	r2, r3
    b960:	f64c 0398 	movw	r3, #51352	; 0xc898
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	78d9      	ldrb	r1, [r3, #3]
    b96a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b972:	5499      	strb	r1, [r3, r2]
    b974:	4b8b      	ldr	r3, [pc, #556]	; (bba4 <send_climb+0x8dc>)
    b976:	781a      	ldrb	r2, [r3, #0]
    b978:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	4413      	add	r3, r2
    b984:	b2da      	uxtb	r2, r3
    b986:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98e:	701a      	strb	r2, [r3, #0]
    b990:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b998:	781a      	ldrb	r2, [r3, #0]
    b99a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	4413      	add	r3, r2
    b9a6:	b2da      	uxtb	r2, r3
    b9a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	701a      	strb	r2, [r3, #0]
    b9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	3301      	adds	r3, #1
    b9be:	b2da      	uxtb	r2, r3
    b9c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c8:	701a      	strb	r2, [r3, #0]
    b9ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d2:	781b      	ldrb	r3, [r3, #0]
    b9d4:	2bff      	cmp	r3, #255	; 0xff
    b9d6:	d105      	bne.n	b9e4 <send_climb+0x71c>
    b9d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e0:	2200      	movs	r2, #0
    b9e2:	701a      	strb	r2, [r3, #0]
    b9e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ec:	781b      	ldrb	r3, [r3, #0]
    b9ee:	461a      	mov	r2, r3
    b9f0:	f648 33c4 	movw	r3, #35780	; 0x8bc4
    b9f4:	f2c0 0301 	movt	r3, #1
    b9f8:	7819      	ldrb	r1, [r3, #0]
    b9fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba02:	5499      	strb	r1, [r3, r2]
    ba04:	f648 33c4 	movw	r3, #35780	; 0x8bc4
    ba08:	f2c0 0301 	movt	r3, #1
    ba0c:	781a      	ldrb	r2, [r3, #0]
    ba0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	781b      	ldrb	r3, [r3, #0]
    ba18:	4413      	add	r3, r2
    ba1a:	b2da      	uxtb	r2, r3
    ba1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba24:	701a      	strb	r2, [r3, #0]
    ba26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	781a      	ldrb	r2, [r3, #0]
    ba30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	4413      	add	r3, r2
    ba3c:	b2da      	uxtb	r2, r3
    ba3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba46:	701a      	strb	r2, [r3, #0]
    ba48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba50:	781b      	ldrb	r3, [r3, #0]
    ba52:	3301      	adds	r3, #1
    ba54:	b2da      	uxtb	r2, r3
    ba56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba5e:	701a      	strb	r2, [r3, #0]
    ba60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	2bff      	cmp	r3, #255	; 0xff
    ba6c:	d105      	bne.n	ba7a <send_climb+0x7b2>
    ba6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	2200      	movs	r2, #0
    ba78:	701a      	strb	r2, [r3, #0]
    ba7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba82:	781b      	ldrb	r3, [r3, #0]
    ba84:	461a      	mov	r2, r3
    ba86:	f648 33c4 	movw	r3, #35780	; 0x8bc4
    ba8a:	f2c0 0301 	movt	r3, #1
    ba8e:	7859      	ldrb	r1, [r3, #1]
    ba90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba98:	5499      	strb	r1, [r3, r2]
    ba9a:	4b43      	ldr	r3, [pc, #268]	; (bba8 <send_climb+0x8e0>)
    ba9c:	781a      	ldrb	r2, [r3, #0]
    ba9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa6:	781b      	ldrb	r3, [r3, #0]
    baa8:	4413      	add	r3, r2
    baaa:	b2da      	uxtb	r2, r3
    baac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab4:	701a      	strb	r2, [r3, #0]
    bab6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	781a      	ldrb	r2, [r3, #0]
    bac0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac8:	781b      	ldrb	r3, [r3, #0]
    baca:	4413      	add	r3, r2
    bacc:	b2da      	uxtb	r2, r3
    bace:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad6:	701a      	strb	r2, [r3, #0]
    bad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    badc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	3301      	adds	r3, #1
    bae4:	b2da      	uxtb	r2, r3
    bae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    baea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baee:	701a      	strb	r2, [r3, #0]
    baf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	2bff      	cmp	r3, #255	; 0xff
    bafc:	d105      	bne.n	bb0a <send_climb+0x842>
    bafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	2200      	movs	r2, #0
    bb08:	701a      	strb	r2, [r3, #0]
    bb0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	461a      	mov	r2, r3
    bb16:	f648 33c4 	movw	r3, #35780	; 0x8bc4
    bb1a:	f2c0 0301 	movt	r3, #1
    bb1e:	7899      	ldrb	r1, [r3, #2]
    bb20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb28:	5499      	strb	r1, [r3, r2]
    bb2a:	4b20      	ldr	r3, [pc, #128]	; (bbac <send_climb+0x8e4>)
    bb2c:	781a      	ldrb	r2, [r3, #0]
    bb2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	4413      	add	r3, r2
    bb3a:	b2da      	uxtb	r2, r3
    bb3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb44:	701a      	strb	r2, [r3, #0]
    bb46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	781a      	ldrb	r2, [r3, #0]
    bb50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	4413      	add	r3, r2
    bb5c:	b2da      	uxtb	r2, r3
    bb5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb66:	701a      	strb	r2, [r3, #0]
    bb68:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb70:	781b      	ldrb	r3, [r3, #0]
    bb72:	3301      	adds	r3, #1
    bb74:	b2da      	uxtb	r2, r3
    bb76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7e:	701a      	strb	r2, [r3, #0]
    bb80:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	2bff      	cmp	r3, #255	; 0xff
    bb8c:	d110      	bne.n	bbb0 <send_climb+0x8e8>
    bb8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	2200      	movs	r2, #0
    bb98:	701a      	strb	r2, [r3, #0]
    bb9a:	e009      	b.n	bbb0 <send_climb+0x8e8>
    bb9c:	2004c899 	.word	0x2004c899
    bba0:	2004c89a 	.word	0x2004c89a
    bba4:	2004c89b 	.word	0x2004c89b
    bba8:	00018bc5 	.word	0x00018bc5
    bbac:	00018bc6 	.word	0x00018bc6
    bbb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	461a      	mov	r2, r3
    bbbc:	f648 33c4 	movw	r3, #35780	; 0x8bc4
    bbc0:	f2c0 0301 	movt	r3, #1
    bbc4:	78d9      	ldrb	r1, [r3, #3]
    bbc6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbce:	5499      	strb	r1, [r3, r2]
    bbd0:	4b79      	ldr	r3, [pc, #484]	; (bdb8 <send_climb+0xaf0>)
    bbd2:	781a      	ldrb	r2, [r3, #0]
    bbd4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbdc:	781b      	ldrb	r3, [r3, #0]
    bbde:	4413      	add	r3, r2
    bbe0:	b2da      	uxtb	r2, r3
    bbe2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbea:	701a      	strb	r2, [r3, #0]
    bbec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf4:	781a      	ldrb	r2, [r3, #0]
    bbf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	4413      	add	r3, r2
    bc02:	b2da      	uxtb	r2, r3
    bc04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0c:	701a      	strb	r2, [r3, #0]
    bc0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc16:	781b      	ldrb	r3, [r3, #0]
    bc18:	3301      	adds	r3, #1
    bc1a:	b2da      	uxtb	r2, r3
    bc1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc24:	701a      	strb	r2, [r3, #0]
    bc26:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2e:	781b      	ldrb	r3, [r3, #0]
    bc30:	2bff      	cmp	r3, #255	; 0xff
    bc32:	d105      	bne.n	bc40 <send_climb+0x978>
    bc34:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc3c:	2200      	movs	r2, #0
    bc3e:	701a      	strb	r2, [r3, #0]
    bc40:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc48:	781b      	ldrb	r3, [r3, #0]
    bc4a:	461a      	mov	r2, r3
    bc4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc54:	7819      	ldrb	r1, [r3, #0]
    bc56:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5e:	5499      	strb	r1, [r3, r2]
    bc60:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc68:	781b      	ldrb	r3, [r3, #0]
    bc6a:	3301      	adds	r3, #1
    bc6c:	b2da      	uxtb	r2, r3
    bc6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc76:	701a      	strb	r2, [r3, #0]
    bc78:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	2bff      	cmp	r3, #255	; 0xff
    bc84:	d105      	bne.n	bc92 <send_climb+0x9ca>
    bc86:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8e:	2200      	movs	r2, #0
    bc90:	701a      	strb	r2, [r3, #0]
    bc92:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	461a      	mov	r2, r3
    bc9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca6:	7819      	ldrb	r1, [r3, #0]
    bca8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb0:	5499      	strb	r1, [r3, r2]
    bcb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcba:	781b      	ldrb	r3, [r3, #0]
    bcbc:	3301      	adds	r3, #1
    bcbe:	b2da      	uxtb	r2, r3
    bcc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc8:	701a      	strb	r2, [r3, #0]
    bcca:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd2:	781b      	ldrb	r3, [r3, #0]
    bcd4:	2bff      	cmp	r3, #255	; 0xff
    bcd6:	d105      	bne.n	bce4 <send_climb+0xa1c>
    bcd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce0:	2200      	movs	r2, #0
    bce2:	701a      	strb	r2, [r3, #0]
    bce4:	f242 0339 	movw	r3, #8249	; 0x2039
    bce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcec:	781b      	ldrb	r3, [r3, #0]
    bcee:	b2db      	uxtb	r3, r3
    bcf0:	f003 0310 	and.w	r3, r3, #16
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d15a      	bne.n	bdae <send_climb+0xae6>
    bcf8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	b2db      	uxtb	r3, r3
    bd04:	461a      	mov	r2, r3
    bd06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd0e:	5c9a      	ldrb	r2, [r3, r2]
    bd10:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd18:	701a      	strb	r2, [r3, #0]
    bd1a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd22:	2200      	movs	r2, #0
    bd24:	701a      	strb	r2, [r3, #0]
    bd26:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2e:	781b      	ldrb	r3, [r3, #0]
    bd30:	b2db      	uxtb	r3, r3
    bd32:	3301      	adds	r3, #1
    bd34:	b2da      	uxtb	r2, r3
    bd36:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd3e:	701a      	strb	r2, [r3, #0]
    bd40:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd48:	781b      	ldrb	r3, [r3, #0]
    bd4a:	b2db      	uxtb	r3, r3
    bd4c:	2bff      	cmp	r3, #255	; 0xff
    bd4e:	d105      	bne.n	bd5c <send_climb+0xa94>
    bd50:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd58:	2200      	movs	r2, #0
    bd5a:	701a      	strb	r2, [r3, #0]
    bd5c:	f242 0338 	movw	r3, #8248	; 0x2038
    bd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd64:	f242 0238 	movw	r2, #8248	; 0x2038
    bd68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd6c:	7812      	ldrb	r2, [r2, #0]
    bd6e:	b2d2      	uxtb	r2, r2
    bd70:	f042 0201 	orr.w	r2, r2, #1
    bd74:	b2d2      	uxtb	r2, r2
    bd76:	701a      	strb	r2, [r3, #0]
    bd78:	f242 0339 	movw	r3, #8249	; 0x2039
    bd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd80:	f242 0239 	movw	r2, #8249	; 0x2039
    bd84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd88:	7812      	ldrb	r2, [r2, #0]
    bd8a:	b2d2      	uxtb	r2, r2
    bd8c:	f042 0210 	orr.w	r2, r2, #16
    bd90:	b2d2      	uxtb	r2, r2
    bd92:	701a      	strb	r2, [r3, #0]
    bd94:	e00b      	b.n	bdae <send_climb+0xae6>
    bd96:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9e:	781b      	ldrb	r3, [r3, #0]
    bda0:	3301      	adds	r3, #1
    bda2:	b2da      	uxtb	r2, r3
    bda4:	f24c 5348 	movw	r3, #50504	; 0xc548
    bda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdac:	701a      	strb	r2, [r3, #0]
}
    bdae:	46bd      	mov	sp, r7
    bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdb4:	4770      	bx	lr
    bdb6:	bf00      	nop
    bdb8:	00018bc7 	.word	0x00018bc7

0000bdbc <send_mode>:
void send_mode(void){  //5000ms
    bdbc:	b480      	push	{r7}
    bdbe:	af00      	add	r7, sp, #0
  if(!boot)
    bdc0:	f240 533d 	movw	r3, #1341	; 0x53d
    bdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc8:	781b      	ldrb	r3, [r3, #0]
    bdca:	2b00      	cmp	r3, #0
    bdcc:	f040 82ce 	bne.w	c36c <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bdd0:	f24c 5341 	movw	r3, #50497	; 0xc541
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781a      	ldrb	r2, [r3, #0]
    bdda:	f248 531f 	movw	r3, #34079	; 0x851f
    bdde:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bde2:	fba3 1302 	umull	r1, r3, r3, r2
    bde6:	091b      	lsrs	r3, r3, #4
    bde8:	2132      	movs	r1, #50	; 0x32
    bdea:	fb01 f303 	mul.w	r3, r1, r3
    bdee:	1ad3      	subs	r3, r2, r3
    bdf0:	b2db      	uxtb	r3, r3
    bdf2:	2b09      	cmp	r3, #9
    bdf4:	f040 82ba 	bne.w	c36c <send_mode+0x5b0>
    bdf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be00:	781a      	ldrb	r2, [r3, #0]
    be02:	f24c 534a 	movw	r3, #50506	; 0xc54a
    be06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0a:	781b      	ldrb	r3, [r3, #0]
    be0c:	b2db      	uxtb	r3, r3
    be0e:	429a      	cmp	r2, r3
    be10:	d313      	bcc.n	be3a <send_mode+0x7e>
    be12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    be16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1a:	781b      	ldrb	r3, [r3, #0]
    be1c:	b2db      	uxtb	r3, r3
    be1e:	461a      	mov	r2, r3
    be20:	f24c 5349 	movw	r3, #50505	; 0xc549
    be24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be28:	781b      	ldrb	r3, [r3, #0]
    be2a:	1ad3      	subs	r3, r2, r3
    be2c:	33ff      	adds	r3, #255	; 0xff
    be2e:	2b09      	cmp	r3, #9
    be30:	bfd4      	ite	le
    be32:	2300      	movle	r3, #0
    be34:	2301      	movgt	r3, #1
    be36:	b2db      	uxtb	r3, r3
    be38:	e011      	b.n	be5e <send_mode+0xa2>
    be3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    be3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be42:	781b      	ldrb	r3, [r3, #0]
    be44:	b2db      	uxtb	r3, r3
    be46:	461a      	mov	r2, r3
    be48:	f24c 5349 	movw	r3, #50505	; 0xc549
    be4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be50:	781b      	ldrb	r3, [r3, #0]
    be52:	1ad3      	subs	r3, r2, r3
    be54:	2b09      	cmp	r3, #9
    be56:	bfd4      	ite	le
    be58:	2300      	movle	r3, #0
    be5a:	2301      	movgt	r3, #1
    be5c:	b2db      	uxtb	r3, r3
    be5e:	2b00      	cmp	r3, #0
    be60:	f000 8278 	beq.w	c354 <send_mode+0x598>
    be64:	f24c 5349 	movw	r3, #50505	; 0xc549
    be68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6c:	781b      	ldrb	r3, [r3, #0]
    be6e:	461a      	mov	r2, r3
    be70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be78:	2105      	movs	r1, #5
    be7a:	5499      	strb	r1, [r3, r2]
    be7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be84:	781b      	ldrb	r3, [r3, #0]
    be86:	3301      	adds	r3, #1
    be88:	b2da      	uxtb	r2, r3
    be8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	701a      	strb	r2, [r3, #0]
    be94:	f24c 5349 	movw	r3, #50505	; 0xc549
    be98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9c:	781b      	ldrb	r3, [r3, #0]
    be9e:	2bff      	cmp	r3, #255	; 0xff
    bea0:	d105      	bne.n	beae <send_mode+0xf2>
    bea2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	2200      	movs	r2, #0
    beac:	701a      	strb	r2, [r3, #0]
    beae:	f24c 5349 	movw	r3, #50505	; 0xc549
    beb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	461a      	mov	r2, r3
    beba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	210b      	movs	r1, #11
    bec4:	5499      	strb	r1, [r3, r2]
    bec6:	f24c 5349 	movw	r3, #50505	; 0xc549
    beca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bece:	781b      	ldrb	r3, [r3, #0]
    bed0:	3301      	adds	r3, #1
    bed2:	b2da      	uxtb	r2, r3
    bed4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bedc:	701a      	strb	r2, [r3, #0]
    bede:	f24c 5349 	movw	r3, #50505	; 0xc549
    bee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee6:	781b      	ldrb	r3, [r3, #0]
    bee8:	2bff      	cmp	r3, #255	; 0xff
    beea:	d105      	bne.n	bef8 <send_mode+0x13c>
    beec:	f24c 5349 	movw	r3, #50505	; 0xc549
    bef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef4:	2200      	movs	r2, #0
    bef6:	701a      	strb	r2, [r3, #0]
    bef8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    befc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf00:	220b      	movs	r2, #11
    bf02:	701a      	strb	r2, [r3, #0]
    bf04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0c:	220b      	movs	r2, #11
    bf0e:	701a      	strb	r2, [r3, #0]
    bf10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	461a      	mov	r2, r3
    bf1c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf24:	7819      	ldrb	r1, [r3, #0]
    bf26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2e:	5499      	strb	r1, [r3, r2]
    bf30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf38:	781a      	ldrb	r2, [r3, #0]
    bf3a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf42:	781b      	ldrb	r3, [r3, #0]
    bf44:	4413      	add	r3, r2
    bf46:	b2da      	uxtb	r2, r3
    bf48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf50:	701a      	strb	r2, [r3, #0]
    bf52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf5a:	781a      	ldrb	r2, [r3, #0]
    bf5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf64:	781b      	ldrb	r3, [r3, #0]
    bf66:	4413      	add	r3, r2
    bf68:	b2da      	uxtb	r2, r3
    bf6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf72:	701a      	strb	r2, [r3, #0]
    bf74:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7c:	781b      	ldrb	r3, [r3, #0]
    bf7e:	3301      	adds	r3, #1
    bf80:	b2da      	uxtb	r2, r3
    bf82:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8a:	701a      	strb	r2, [r3, #0]
    bf8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf94:	781b      	ldrb	r3, [r3, #0]
    bf96:	2bff      	cmp	r3, #255	; 0xff
    bf98:	d105      	bne.n	bfa6 <send_mode+0x1ea>
    bf9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa2:	2200      	movs	r2, #0
    bfa4:	701a      	strb	r2, [r3, #0]
    bfa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfae:	781b      	ldrb	r3, [r3, #0]
    bfb0:	461a      	mov	r2, r3
    bfb2:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfba:	7819      	ldrb	r1, [r3, #0]
    bfbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc4:	5499      	strb	r1, [r3, r2]
    bfc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfce:	781a      	ldrb	r2, [r3, #0]
    bfd0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	4413      	add	r3, r2
    bfdc:	b2da      	uxtb	r2, r3
    bfde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe6:	701a      	strb	r2, [r3, #0]
    bfe8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff0:	781a      	ldrb	r2, [r3, #0]
    bff2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffa:	781b      	ldrb	r3, [r3, #0]
    bffc:	4413      	add	r3, r2
    bffe:	b2da      	uxtb	r2, r3
    c000:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c008:	701a      	strb	r2, [r3, #0]
    c00a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	3301      	adds	r3, #1
    c016:	b2da      	uxtb	r2, r3
    c018:	f24c 5349 	movw	r3, #50505	; 0xc549
    c01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c020:	701a      	strb	r2, [r3, #0]
    c022:	f24c 5349 	movw	r3, #50505	; 0xc549
    c026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02a:	781b      	ldrb	r3, [r3, #0]
    c02c:	2bff      	cmp	r3, #255	; 0xff
    c02e:	d105      	bne.n	c03c <send_mode+0x280>
    c030:	f24c 5349 	movw	r3, #50505	; 0xc549
    c034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c038:	2200      	movs	r2, #0
    c03a:	701a      	strb	r2, [r3, #0]
    c03c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c044:	781b      	ldrb	r3, [r3, #0]
    c046:	461a      	mov	r2, r3
    c048:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    c04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c050:	7819      	ldrb	r1, [r3, #0]
    c052:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05a:	5499      	strb	r1, [r3, r2]
    c05c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c064:	781a      	ldrb	r2, [r3, #0]
    c066:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	781b      	ldrb	r3, [r3, #0]
    c070:	4413      	add	r3, r2
    c072:	b2da      	uxtb	r2, r3
    c074:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07c:	701a      	strb	r2, [r3, #0]
    c07e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c086:	781a      	ldrb	r2, [r3, #0]
    c088:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	4413      	add	r3, r2
    c094:	b2da      	uxtb	r2, r3
    c096:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09e:	701a      	strb	r2, [r3, #0]
    c0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a8:	781b      	ldrb	r3, [r3, #0]
    c0aa:	3301      	adds	r3, #1
    c0ac:	b2da      	uxtb	r2, r3
    c0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b6:	701a      	strb	r2, [r3, #0]
    c0b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c0:	781b      	ldrb	r3, [r3, #0]
    c0c2:	2bff      	cmp	r3, #255	; 0xff
    c0c4:	d105      	bne.n	c0d2 <send_mode+0x316>
    c0c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ce:	2200      	movs	r2, #0
    c0d0:	701a      	strb	r2, [r3, #0]
    c0d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0da:	781b      	ldrb	r3, [r3, #0]
    c0dc:	461a      	mov	r2, r3
    c0de:	f24c 5333 	movw	r3, #50483	; 0xc533
    c0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e6:	7819      	ldrb	r1, [r3, #0]
    c0e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f0:	5499      	strb	r1, [r3, r2]
    c0f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fa:	781a      	ldrb	r2, [r3, #0]
    c0fc:	f24c 5333 	movw	r3, #50483	; 0xc533
    c100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c104:	781b      	ldrb	r3, [r3, #0]
    c106:	4413      	add	r3, r2
    c108:	b2da      	uxtb	r2, r3
    c10a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c112:	701a      	strb	r2, [r3, #0]
    c114:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11c:	781a      	ldrb	r2, [r3, #0]
    c11e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c126:	781b      	ldrb	r3, [r3, #0]
    c128:	4413      	add	r3, r2
    c12a:	b2da      	uxtb	r2, r3
    c12c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c134:	701a      	strb	r2, [r3, #0]
    c136:	f24c 5349 	movw	r3, #50505	; 0xc549
    c13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13e:	781b      	ldrb	r3, [r3, #0]
    c140:	3301      	adds	r3, #1
    c142:	b2da      	uxtb	r2, r3
    c144:	f24c 5349 	movw	r3, #50505	; 0xc549
    c148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c14c:	701a      	strb	r2, [r3, #0]
    c14e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	2bff      	cmp	r3, #255	; 0xff
    c15a:	d105      	bne.n	c168 <send_mode+0x3ac>
    c15c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c164:	2200      	movs	r2, #0
    c166:	701a      	strb	r2, [r3, #0]
    c168:	f24c 5349 	movw	r3, #50505	; 0xc549
    c16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c170:	781b      	ldrb	r3, [r3, #0]
    c172:	461a      	mov	r2, r3
    c174:	f240 533c 	movw	r3, #1340	; 0x53c
    c178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17c:	7819      	ldrb	r1, [r3, #0]
    c17e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c186:	5499      	strb	r1, [r3, r2]
    c188:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c190:	781a      	ldrb	r2, [r3, #0]
    c192:	f240 533c 	movw	r3, #1340	; 0x53c
    c196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19a:	781b      	ldrb	r3, [r3, #0]
    c19c:	4413      	add	r3, r2
    c19e:	b2da      	uxtb	r2, r3
    c1a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a8:	701a      	strb	r2, [r3, #0]
    c1aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b2:	781a      	ldrb	r2, [r3, #0]
    c1b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1bc:	781b      	ldrb	r3, [r3, #0]
    c1be:	4413      	add	r3, r2
    c1c0:	b2da      	uxtb	r2, r3
    c1c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ca:	701a      	strb	r2, [r3, #0]
    c1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	781b      	ldrb	r3, [r3, #0]
    c1d6:	3301      	adds	r3, #1
    c1d8:	b2da      	uxtb	r2, r3
    c1da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e2:	701a      	strb	r2, [r3, #0]
    c1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ec:	781b      	ldrb	r3, [r3, #0]
    c1ee:	2bff      	cmp	r3, #255	; 0xff
    c1f0:	d105      	bne.n	c1fe <send_mode+0x442>
    c1f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fa:	2200      	movs	r2, #0
    c1fc:	701a      	strb	r2, [r3, #0]
    c1fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	461a      	mov	r2, r3
    c20a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c212:	7819      	ldrb	r1, [r3, #0]
    c214:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21c:	5499      	strb	r1, [r3, r2]
    c21e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c226:	781b      	ldrb	r3, [r3, #0]
    c228:	3301      	adds	r3, #1
    c22a:	b2da      	uxtb	r2, r3
    c22c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c234:	701a      	strb	r2, [r3, #0]
    c236:	f24c 5349 	movw	r3, #50505	; 0xc549
    c23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	2bff      	cmp	r3, #255	; 0xff
    c242:	d105      	bne.n	c250 <send_mode+0x494>
    c244:	f24c 5349 	movw	r3, #50505	; 0xc549
    c248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24c:	2200      	movs	r2, #0
    c24e:	701a      	strb	r2, [r3, #0]
    c250:	f24c 5349 	movw	r3, #50505	; 0xc549
    c254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c258:	781b      	ldrb	r3, [r3, #0]
    c25a:	461a      	mov	r2, r3
    c25c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c264:	7819      	ldrb	r1, [r3, #0]
    c266:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26e:	5499      	strb	r1, [r3, r2]
    c270:	f24c 5349 	movw	r3, #50505	; 0xc549
    c274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c278:	781b      	ldrb	r3, [r3, #0]
    c27a:	3301      	adds	r3, #1
    c27c:	b2da      	uxtb	r2, r3
    c27e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c286:	701a      	strb	r2, [r3, #0]
    c288:	f24c 5349 	movw	r3, #50505	; 0xc549
    c28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	2bff      	cmp	r3, #255	; 0xff
    c294:	d105      	bne.n	c2a2 <send_mode+0x4e6>
    c296:	f24c 5349 	movw	r3, #50505	; 0xc549
    c29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29e:	2200      	movs	r2, #0
    c2a0:	701a      	strb	r2, [r3, #0]
    c2a2:	f242 0339 	movw	r3, #8249	; 0x2039
    c2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	b2db      	uxtb	r3, r3
    c2ae:	f003 0310 	and.w	r3, r3, #16
    c2b2:	2b00      	cmp	r3, #0
    c2b4:	d15a      	bne.n	c36c <send_mode+0x5b0>
    c2b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2be:	781b      	ldrb	r3, [r3, #0]
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	461a      	mov	r2, r3
    c2c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2cc:	5c9a      	ldrb	r2, [r3, r2]
    c2ce:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d6:	701a      	strb	r2, [r3, #0]
    c2d8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	2200      	movs	r2, #0
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	b2db      	uxtb	r3, r3
    c2f0:	3301      	adds	r3, #1
    c2f2:	b2da      	uxtb	r2, r3
    c2f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fc:	701a      	strb	r2, [r3, #0]
    c2fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c306:	781b      	ldrb	r3, [r3, #0]
    c308:	b2db      	uxtb	r3, r3
    c30a:	2bff      	cmp	r3, #255	; 0xff
    c30c:	d105      	bne.n	c31a <send_mode+0x55e>
    c30e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c316:	2200      	movs	r2, #0
    c318:	701a      	strb	r2, [r3, #0]
    c31a:	f242 0338 	movw	r3, #8248	; 0x2038
    c31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c322:	f242 0238 	movw	r2, #8248	; 0x2038
    c326:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c32a:	7812      	ldrb	r2, [r2, #0]
    c32c:	b2d2      	uxtb	r2, r2
    c32e:	f042 0201 	orr.w	r2, r2, #1
    c332:	b2d2      	uxtb	r2, r2
    c334:	701a      	strb	r2, [r3, #0]
    c336:	f242 0339 	movw	r3, #8249	; 0x2039
    c33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c33e:	f242 0239 	movw	r2, #8249	; 0x2039
    c342:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c346:	7812      	ldrb	r2, [r2, #0]
    c348:	b2d2      	uxtb	r2, r2
    c34a:	f042 0210 	orr.w	r2, r2, #16
    c34e:	b2d2      	uxtb	r2, r2
    c350:	701a      	strb	r2, [r3, #0]
    c352:	e00b      	b.n	c36c <send_mode+0x5b0>
    c354:	f24c 5348 	movw	r3, #50504	; 0xc548
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	781b      	ldrb	r3, [r3, #0]
    c35e:	3301      	adds	r3, #1
    c360:	b2da      	uxtb	r2, r3
    c362:	f24c 5348 	movw	r3, #50504	; 0xc548
    c366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36a:	701a      	strb	r2, [r3, #0]
}
    c36c:	46bd      	mov	sp, r7
    c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c372:	4770      	bx	lr

0000c374 <send_debug>:
void send_debug(void){  //5000ms
    c374:	b480      	push	{r7}
    c376:	af00      	add	r7, sp, #0
  if(!boot)
    c378:	f240 533d 	movw	r3, #1341	; 0x53d
    c37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c380:	781b      	ldrb	r3, [r3, #0]
    c382:	2b00      	cmp	r3, #0
    c384:	f040 82cf 	bne.w	c926 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c388:	f24c 5341 	movw	r3, #50497	; 0xc541
    c38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c390:	781a      	ldrb	r2, [r3, #0]
    c392:	f248 531f 	movw	r3, #34079	; 0x851f
    c396:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c39a:	fba3 1302 	umull	r1, r3, r3, r2
    c39e:	091b      	lsrs	r3, r3, #4
    c3a0:	2132      	movs	r1, #50	; 0x32
    c3a2:	fb01 f303 	mul.w	r3, r1, r3
    c3a6:	1ad3      	subs	r3, r2, r3
    c3a8:	b2db      	uxtb	r3, r3
    c3aa:	2b1d      	cmp	r3, #29
    c3ac:	f040 82bb 	bne.w	c926 <send_debug+0x5b2>
    c3b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b8:	781a      	ldrb	r2, [r3, #0]
    c3ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c2:	781b      	ldrb	r3, [r3, #0]
    c3c4:	b2db      	uxtb	r3, r3
    c3c6:	429a      	cmp	r2, r3
    c3c8:	d313      	bcc.n	c3f2 <send_debug+0x7e>
    c3ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d2:	781b      	ldrb	r3, [r3, #0]
    c3d4:	b2db      	uxtb	r3, r3
    c3d6:	461a      	mov	r2, r3
    c3d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	1ad3      	subs	r3, r2, r3
    c3e4:	33ff      	adds	r3, #255	; 0xff
    c3e6:	2b09      	cmp	r3, #9
    c3e8:	bfd4      	ite	le
    c3ea:	2300      	movle	r3, #0
    c3ec:	2301      	movgt	r3, #1
    c3ee:	b2db      	uxtb	r3, r3
    c3f0:	e011      	b.n	c416 <send_debug+0xa2>
    c3f2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fa:	781b      	ldrb	r3, [r3, #0]
    c3fc:	b2db      	uxtb	r3, r3
    c3fe:	461a      	mov	r2, r3
    c400:	f24c 5349 	movw	r3, #50505	; 0xc549
    c404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	1ad3      	subs	r3, r2, r3
    c40c:	2b09      	cmp	r3, #9
    c40e:	bfd4      	ite	le
    c410:	2300      	movle	r3, #0
    c412:	2301      	movgt	r3, #1
    c414:	b2db      	uxtb	r3, r3
    c416:	2b00      	cmp	r3, #0
    c418:	f000 8279 	beq.w	c90e <send_debug+0x59a>
    c41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c424:	781b      	ldrb	r3, [r3, #0]
    c426:	461a      	mov	r2, r3
    c428:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c430:	2105      	movs	r1, #5
    c432:	5499      	strb	r1, [r3, r2]
    c434:	f24c 5349 	movw	r3, #50505	; 0xc549
    c438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43c:	781b      	ldrb	r3, [r3, #0]
    c43e:	3301      	adds	r3, #1
    c440:	b2da      	uxtb	r2, r3
    c442:	f24c 5349 	movw	r3, #50505	; 0xc549
    c446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44a:	701a      	strb	r2, [r3, #0]
    c44c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	2bff      	cmp	r3, #255	; 0xff
    c458:	d105      	bne.n	c466 <send_debug+0xf2>
    c45a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c462:	2200      	movs	r2, #0
    c464:	701a      	strb	r2, [r3, #0]
    c466:	f24c 5349 	movw	r3, #50505	; 0xc549
    c46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	461a      	mov	r2, r3
    c472:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47a:	210d      	movs	r1, #13
    c47c:	5499      	strb	r1, [r3, r2]
    c47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c486:	781b      	ldrb	r3, [r3, #0]
    c488:	3301      	adds	r3, #1
    c48a:	b2da      	uxtb	r2, r3
    c48c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	701a      	strb	r2, [r3, #0]
    c496:	f24c 5349 	movw	r3, #50505	; 0xc549
    c49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	2bff      	cmp	r3, #255	; 0xff
    c4a2:	d105      	bne.n	c4b0 <send_debug+0x13c>
    c4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	2200      	movs	r2, #0
    c4ae:	701a      	strb	r2, [r3, #0]
    c4b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b8:	220d      	movs	r2, #13
    c4ba:	701a      	strb	r2, [r3, #0]
    c4bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c4:	220d      	movs	r2, #13
    c4c6:	701a      	strb	r2, [r3, #0]
    c4c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	461a      	mov	r2, r3
    c4d4:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	b2d9      	uxtb	r1, r3
    c4e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e8:	5499      	strb	r1, [r3, r2]
    c4ea:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f2:	781a      	ldrb	r2, [r3, #0]
    c4f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fc:	781b      	ldrb	r3, [r3, #0]
    c4fe:	4413      	add	r3, r2
    c500:	b2da      	uxtb	r2, r3
    c502:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50a:	701a      	strb	r2, [r3, #0]
    c50c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c514:	781a      	ldrb	r2, [r3, #0]
    c516:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51e:	781b      	ldrb	r3, [r3, #0]
    c520:	4413      	add	r3, r2
    c522:	b2da      	uxtb	r2, r3
    c524:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52c:	701a      	strb	r2, [r3, #0]
    c52e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c536:	781b      	ldrb	r3, [r3, #0]
    c538:	3301      	adds	r3, #1
    c53a:	b2da      	uxtb	r2, r3
    c53c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c544:	701a      	strb	r2, [r3, #0]
    c546:	f24c 5349 	movw	r3, #50505	; 0xc549
    c54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	2bff      	cmp	r3, #255	; 0xff
    c552:	d105      	bne.n	c560 <send_debug+0x1ec>
    c554:	f24c 5349 	movw	r3, #50505	; 0xc549
    c558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55c:	2200      	movs	r2, #0
    c55e:	701a      	strb	r2, [r3, #0]
    c560:	f24c 5349 	movw	r3, #50505	; 0xc549
    c564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c568:	781b      	ldrb	r3, [r3, #0]
    c56a:	461a      	mov	r2, r3
    c56c:	f24c 6380 	movw	r3, #50816	; 0xc680
    c570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c574:	7819      	ldrb	r1, [r3, #0]
    c576:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57e:	5499      	strb	r1, [r3, r2]
    c580:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c588:	781a      	ldrb	r2, [r3, #0]
    c58a:	f24c 6380 	movw	r3, #50816	; 0xc680
    c58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c592:	781b      	ldrb	r3, [r3, #0]
    c594:	4413      	add	r3, r2
    c596:	b2da      	uxtb	r2, r3
    c598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a0:	701a      	strb	r2, [r3, #0]
    c5a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5aa:	781a      	ldrb	r2, [r3, #0]
    c5ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b4:	781b      	ldrb	r3, [r3, #0]
    c5b6:	4413      	add	r3, r2
    c5b8:	b2da      	uxtb	r2, r3
    c5ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c2:	701a      	strb	r2, [r3, #0]
    c5c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5cc:	781b      	ldrb	r3, [r3, #0]
    c5ce:	3301      	adds	r3, #1
    c5d0:	b2da      	uxtb	r2, r3
    c5d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5da:	701a      	strb	r2, [r3, #0]
    c5dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e4:	781b      	ldrb	r3, [r3, #0]
    c5e6:	2bff      	cmp	r3, #255	; 0xff
    c5e8:	d105      	bne.n	c5f6 <send_debug+0x282>
    c5ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f2:	2200      	movs	r2, #0
    c5f4:	701a      	strb	r2, [r3, #0]
    c5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fe:	781b      	ldrb	r3, [r3, #0]
    c600:	461a      	mov	r2, r3
    c602:	f24c 5348 	movw	r3, #50504	; 0xc548
    c606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60a:	7819      	ldrb	r1, [r3, #0]
    c60c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c614:	5499      	strb	r1, [r3, r2]
    c616:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61e:	781a      	ldrb	r2, [r3, #0]
    c620:	f24c 5348 	movw	r3, #50504	; 0xc548
    c624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c628:	781b      	ldrb	r3, [r3, #0]
    c62a:	4413      	add	r3, r2
    c62c:	b2da      	uxtb	r2, r3
    c62e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c636:	701a      	strb	r2, [r3, #0]
    c638:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c640:	781a      	ldrb	r2, [r3, #0]
    c642:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64a:	781b      	ldrb	r3, [r3, #0]
    c64c:	4413      	add	r3, r2
    c64e:	b2da      	uxtb	r2, r3
    c650:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c658:	701a      	strb	r2, [r3, #0]
    c65a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c662:	781b      	ldrb	r3, [r3, #0]
    c664:	3301      	adds	r3, #1
    c666:	b2da      	uxtb	r2, r3
    c668:	f24c 5349 	movw	r3, #50505	; 0xc549
    c66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c670:	701a      	strb	r2, [r3, #0]
    c672:	f24c 5349 	movw	r3, #50505	; 0xc549
    c676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67a:	781b      	ldrb	r3, [r3, #0]
    c67c:	2bff      	cmp	r3, #255	; 0xff
    c67e:	d105      	bne.n	c68c <send_debug+0x318>
    c680:	f24c 5349 	movw	r3, #50505	; 0xc549
    c684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c688:	2200      	movs	r2, #0
    c68a:	701a      	strb	r2, [r3, #0]
    c68c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c694:	781b      	ldrb	r3, [r3, #0]
    c696:	461a      	mov	r2, r3
    c698:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a0:	7819      	ldrb	r1, [r3, #0]
    c6a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6aa:	5499      	strb	r1, [r3, r2]
    c6ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b4:	781a      	ldrb	r2, [r3, #0]
    c6b6:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6be:	781b      	ldrb	r3, [r3, #0]
    c6c0:	4413      	add	r3, r2
    c6c2:	b2da      	uxtb	r2, r3
    c6c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6cc:	701a      	strb	r2, [r3, #0]
    c6ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d6:	781a      	ldrb	r2, [r3, #0]
    c6d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e0:	781b      	ldrb	r3, [r3, #0]
    c6e2:	4413      	add	r3, r2
    c6e4:	b2da      	uxtb	r2, r3
    c6e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ee:	701a      	strb	r2, [r3, #0]
    c6f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	3301      	adds	r3, #1
    c6fc:	b2da      	uxtb	r2, r3
    c6fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c706:	701a      	strb	r2, [r3, #0]
    c708:	f24c 5349 	movw	r3, #50505	; 0xc549
    c70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c710:	781b      	ldrb	r3, [r3, #0]
    c712:	2bff      	cmp	r3, #255	; 0xff
    c714:	d105      	bne.n	c722 <send_debug+0x3ae>
    c716:	f24c 5349 	movw	r3, #50505	; 0xc549
    c71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71e:	2200      	movs	r2, #0
    c720:	701a      	strb	r2, [r3, #0]
    c722:	f24c 5349 	movw	r3, #50505	; 0xc549
    c726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72a:	781b      	ldrb	r3, [r3, #0]
    c72c:	461a      	mov	r2, r3
    c72e:	f24c 5334 	movw	r3, #50484	; 0xc534
    c732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c736:	7819      	ldrb	r1, [r3, #0]
    c738:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c740:	5499      	strb	r1, [r3, r2]
    c742:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74a:	781a      	ldrb	r2, [r3, #0]
    c74c:	f24c 5334 	movw	r3, #50484	; 0xc534
    c750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c754:	781b      	ldrb	r3, [r3, #0]
    c756:	4413      	add	r3, r2
    c758:	b2da      	uxtb	r2, r3
    c75a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c762:	701a      	strb	r2, [r3, #0]
    c764:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76c:	781a      	ldrb	r2, [r3, #0]
    c76e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	4413      	add	r3, r2
    c77a:	b2da      	uxtb	r2, r3
    c77c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c784:	701a      	strb	r2, [r3, #0]
    c786:	f24c 5349 	movw	r3, #50505	; 0xc549
    c78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78e:	781b      	ldrb	r3, [r3, #0]
    c790:	3301      	adds	r3, #1
    c792:	b2da      	uxtb	r2, r3
    c794:	f24c 5349 	movw	r3, #50505	; 0xc549
    c798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79c:	701a      	strb	r2, [r3, #0]
    c79e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	2bff      	cmp	r3, #255	; 0xff
    c7aa:	d105      	bne.n	c7b8 <send_debug+0x444>
    c7ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b4:	2200      	movs	r2, #0
    c7b6:	701a      	strb	r2, [r3, #0]
    c7b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	461a      	mov	r2, r3
    c7c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7cc:	7819      	ldrb	r1, [r3, #0]
    c7ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d6:	5499      	strb	r1, [r3, r2]
    c7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	3301      	adds	r3, #1
    c7e4:	b2da      	uxtb	r2, r3
    c7e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ee:	701a      	strb	r2, [r3, #0]
    c7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	2bff      	cmp	r3, #255	; 0xff
    c7fc:	d105      	bne.n	c80a <send_debug+0x496>
    c7fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c806:	2200      	movs	r2, #0
    c808:	701a      	strb	r2, [r3, #0]
    c80a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c812:	781b      	ldrb	r3, [r3, #0]
    c814:	461a      	mov	r2, r3
    c816:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81e:	7819      	ldrb	r1, [r3, #0]
    c820:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c828:	5499      	strb	r1, [r3, r2]
    c82a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c832:	781b      	ldrb	r3, [r3, #0]
    c834:	3301      	adds	r3, #1
    c836:	b2da      	uxtb	r2, r3
    c838:	f24c 5349 	movw	r3, #50505	; 0xc549
    c83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c840:	701a      	strb	r2, [r3, #0]
    c842:	f24c 5349 	movw	r3, #50505	; 0xc549
    c846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84a:	781b      	ldrb	r3, [r3, #0]
    c84c:	2bff      	cmp	r3, #255	; 0xff
    c84e:	d105      	bne.n	c85c <send_debug+0x4e8>
    c850:	f24c 5349 	movw	r3, #50505	; 0xc549
    c854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c858:	2200      	movs	r2, #0
    c85a:	701a      	strb	r2, [r3, #0]
    c85c:	f242 0339 	movw	r3, #8249	; 0x2039
    c860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c864:	781b      	ldrb	r3, [r3, #0]
    c866:	b2db      	uxtb	r3, r3
    c868:	f003 0310 	and.w	r3, r3, #16
    c86c:	2b00      	cmp	r3, #0
    c86e:	d15a      	bne.n	c926 <send_debug+0x5b2>
    c870:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	b2db      	uxtb	r3, r3
    c87c:	461a      	mov	r2, r3
    c87e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c886:	5c9a      	ldrb	r2, [r3, r2]
    c888:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c890:	701a      	strb	r2, [r3, #0]
    c892:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89a:	2200      	movs	r2, #0
    c89c:	701a      	strb	r2, [r3, #0]
    c89e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a6:	781b      	ldrb	r3, [r3, #0]
    c8a8:	b2db      	uxtb	r3, r3
    c8aa:	3301      	adds	r3, #1
    c8ac:	b2da      	uxtb	r2, r3
    c8ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	701a      	strb	r2, [r3, #0]
    c8b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	b2db      	uxtb	r3, r3
    c8c4:	2bff      	cmp	r3, #255	; 0xff
    c8c6:	d105      	bne.n	c8d4 <send_debug+0x560>
    c8c8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d0:	2200      	movs	r2, #0
    c8d2:	701a      	strb	r2, [r3, #0]
    c8d4:	f242 0338 	movw	r3, #8248	; 0x2038
    c8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8dc:	f242 0238 	movw	r2, #8248	; 0x2038
    c8e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8e4:	7812      	ldrb	r2, [r2, #0]
    c8e6:	b2d2      	uxtb	r2, r2
    c8e8:	f042 0201 	orr.w	r2, r2, #1
    c8ec:	b2d2      	uxtb	r2, r2
    c8ee:	701a      	strb	r2, [r3, #0]
    c8f0:	f242 0339 	movw	r3, #8249	; 0x2039
    c8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f8:	f242 0239 	movw	r2, #8249	; 0x2039
    c8fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c900:	7812      	ldrb	r2, [r2, #0]
    c902:	b2d2      	uxtb	r2, r2
    c904:	f042 0210 	orr.w	r2, r2, #16
    c908:	b2d2      	uxtb	r2, r2
    c90a:	701a      	strb	r2, [r3, #0]
    c90c:	e00b      	b.n	c926 <send_debug+0x5b2>
    c90e:	f24c 5348 	movw	r3, #50504	; 0xc548
    c912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c916:	781b      	ldrb	r3, [r3, #0]
    c918:	3301      	adds	r3, #1
    c91a:	b2da      	uxtb	r2, r3
    c91c:	f24c 5348 	movw	r3, #50504	; 0xc548
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	701a      	strb	r2, [r3, #0]
}
    c926:	46bd      	mov	sp, r7
    c928:	f85d 7b04 	ldr.w	r7, [sp], #4
    c92c:	4770      	bx	lr
    c92e:	bf00      	nop

0000c930 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c930:	b480      	push	{r7}
    c932:	af00      	add	r7, sp, #0
  if(!boot)
    c934:	f240 533d 	movw	r3, #1341	; 0x53d
    c938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	2b00      	cmp	r3, #0
    c940:	f040 83a9 	bne.w	d096 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c944:	f24c 5341 	movw	r3, #50497	; 0xc541
    c948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94c:	781a      	ldrb	r2, [r3, #0]
    c94e:	f248 531f 	movw	r3, #34079	; 0x851f
    c952:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c956:	fba3 1302 	umull	r1, r3, r3, r2
    c95a:	095b      	lsrs	r3, r3, #5
    c95c:	2164      	movs	r1, #100	; 0x64
    c95e:	fb01 f303 	mul.w	r3, r1, r3
    c962:	1ad3      	subs	r3, r2, r3
    c964:	b2db      	uxtb	r3, r3
    c966:	2b31      	cmp	r3, #49	; 0x31
    c968:	f040 8395 	bne.w	d096 <send_nav_ref+0x766>
    c96c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c974:	781a      	ldrb	r2, [r3, #0]
    c976:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97e:	781b      	ldrb	r3, [r3, #0]
    c980:	b2db      	uxtb	r3, r3
    c982:	429a      	cmp	r2, r3
    c984:	d313      	bcc.n	c9ae <send_nav_ref+0x7e>
    c986:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98e:	781b      	ldrb	r3, [r3, #0]
    c990:	b2db      	uxtb	r3, r3
    c992:	461a      	mov	r2, r3
    c994:	f24c 5349 	movw	r3, #50505	; 0xc549
    c998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	1ad3      	subs	r3, r2, r3
    c9a0:	33ff      	adds	r3, #255	; 0xff
    c9a2:	2b0c      	cmp	r3, #12
    c9a4:	bfd4      	ite	le
    c9a6:	2300      	movle	r3, #0
    c9a8:	2301      	movgt	r3, #1
    c9aa:	b2db      	uxtb	r3, r3
    c9ac:	e011      	b.n	c9d2 <send_nav_ref+0xa2>
    c9ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b6:	781b      	ldrb	r3, [r3, #0]
    c9b8:	b2db      	uxtb	r3, r3
    c9ba:	461a      	mov	r2, r3
    c9bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c4:	781b      	ldrb	r3, [r3, #0]
    c9c6:	1ad3      	subs	r3, r2, r3
    c9c8:	2b0c      	cmp	r3, #12
    c9ca:	bfd4      	ite	le
    c9cc:	2300      	movle	r3, #0
    c9ce:	2301      	movgt	r3, #1
    c9d0:	b2db      	uxtb	r3, r3
    c9d2:	2b00      	cmp	r3, #0
    c9d4:	f000 8353 	beq.w	d07e <send_nav_ref+0x74e>
    c9d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e0:	781b      	ldrb	r3, [r3, #0]
    c9e2:	461a      	mov	r2, r3
    c9e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ec:	2105      	movs	r1, #5
    c9ee:	5499      	strb	r1, [r3, r2]
    c9f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	3301      	adds	r3, #1
    c9fc:	b2da      	uxtb	r2, r3
    c9fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca06:	701a      	strb	r2, [r3, #0]
    ca08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca10:	781b      	ldrb	r3, [r3, #0]
    ca12:	2bff      	cmp	r3, #255	; 0xff
    ca14:	d105      	bne.n	ca22 <send_nav_ref+0xf2>
    ca16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca1e:	2200      	movs	r2, #0
    ca20:	701a      	strb	r2, [r3, #0]
    ca22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2a:	781b      	ldrb	r3, [r3, #0]
    ca2c:	461a      	mov	r2, r3
    ca2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca36:	2109      	movs	r1, #9
    ca38:	5499      	strb	r1, [r3, r2]
    ca3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca42:	781b      	ldrb	r3, [r3, #0]
    ca44:	3301      	adds	r3, #1
    ca46:	b2da      	uxtb	r2, r3
    ca48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca50:	701a      	strb	r2, [r3, #0]
    ca52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5a:	781b      	ldrb	r3, [r3, #0]
    ca5c:	2bff      	cmp	r3, #255	; 0xff
    ca5e:	d105      	bne.n	ca6c <send_nav_ref+0x13c>
    ca60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	2200      	movs	r2, #0
    ca6a:	701a      	strb	r2, [r3, #0]
    ca6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca74:	2209      	movs	r2, #9
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	2209      	movs	r2, #9
    ca82:	701a      	strb	r2, [r3, #0]
    ca84:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8c:	781b      	ldrb	r3, [r3, #0]
    ca8e:	461a      	mov	r2, r3
    ca90:	f648 33bc 	movw	r3, #35772	; 0x8bbc
    ca94:	f2c0 0301 	movt	r3, #1
    ca98:	7819      	ldrb	r1, [r3, #0]
    ca9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa2:	5499      	strb	r1, [r3, r2]
    caa4:	f648 33bc 	movw	r3, #35772	; 0x8bbc
    caa8:	f2c0 0301 	movt	r3, #1
    caac:	781a      	ldrb	r2, [r3, #0]
    caae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab6:	781b      	ldrb	r3, [r3, #0]
    cab8:	4413      	add	r3, r2
    caba:	b2da      	uxtb	r2, r3
    cabc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac4:	701a      	strb	r2, [r3, #0]
    cac6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	781a      	ldrb	r2, [r3, #0]
    cad0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad8:	781b      	ldrb	r3, [r3, #0]
    cada:	4413      	add	r3, r2
    cadc:	b2da      	uxtb	r2, r3
    cade:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	701a      	strb	r2, [r3, #0]
    cae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	781b      	ldrb	r3, [r3, #0]
    caf2:	3301      	adds	r3, #1
    caf4:	b2da      	uxtb	r2, r3
    caf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	701a      	strb	r2, [r3, #0]
    cb00:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2bff      	cmp	r3, #255	; 0xff
    cb0c:	d105      	bne.n	cb1a <send_nav_ref+0x1ea>
    cb0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	2200      	movs	r2, #0
    cb18:	701a      	strb	r2, [r3, #0]
    cb1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb22:	781b      	ldrb	r3, [r3, #0]
    cb24:	461a      	mov	r2, r3
    cb26:	f648 33bc 	movw	r3, #35772	; 0x8bbc
    cb2a:	f2c0 0301 	movt	r3, #1
    cb2e:	7859      	ldrb	r1, [r3, #1]
    cb30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	5499      	strb	r1, [r3, r2]
    cb3a:	4bd2      	ldr	r3, [pc, #840]	; (ce84 <send_nav_ref+0x554>)
    cb3c:	781a      	ldrb	r2, [r3, #0]
    cb3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	781b      	ldrb	r3, [r3, #0]
    cb48:	4413      	add	r3, r2
    cb4a:	b2da      	uxtb	r2, r3
    cb4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb54:	701a      	strb	r2, [r3, #0]
    cb56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	781a      	ldrb	r2, [r3, #0]
    cb60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb68:	781b      	ldrb	r3, [r3, #0]
    cb6a:	4413      	add	r3, r2
    cb6c:	b2da      	uxtb	r2, r3
    cb6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	701a      	strb	r2, [r3, #0]
    cb78:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb80:	781b      	ldrb	r3, [r3, #0]
    cb82:	3301      	adds	r3, #1
    cb84:	b2da      	uxtb	r2, r3
    cb86:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	701a      	strb	r2, [r3, #0]
    cb90:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	2bff      	cmp	r3, #255	; 0xff
    cb9c:	d105      	bne.n	cbaa <send_nav_ref+0x27a>
    cb9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	2200      	movs	r2, #0
    cba8:	701a      	strb	r2, [r3, #0]
    cbaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb2:	781b      	ldrb	r3, [r3, #0]
    cbb4:	461a      	mov	r2, r3
    cbb6:	f648 33bc 	movw	r3, #35772	; 0x8bbc
    cbba:	f2c0 0301 	movt	r3, #1
    cbbe:	7899      	ldrb	r1, [r3, #2]
    cbc0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc8:	5499      	strb	r1, [r3, r2]
    cbca:	4baf      	ldr	r3, [pc, #700]	; (ce88 <send_nav_ref+0x558>)
    cbcc:	781a      	ldrb	r2, [r3, #0]
    cbce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd6:	781b      	ldrb	r3, [r3, #0]
    cbd8:	4413      	add	r3, r2
    cbda:	b2da      	uxtb	r2, r3
    cbdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe4:	701a      	strb	r2, [r3, #0]
    cbe6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbee:	781a      	ldrb	r2, [r3, #0]
    cbf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf8:	781b      	ldrb	r3, [r3, #0]
    cbfa:	4413      	add	r3, r2
    cbfc:	b2da      	uxtb	r2, r3
    cbfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	701a      	strb	r2, [r3, #0]
    cc08:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc10:	781b      	ldrb	r3, [r3, #0]
    cc12:	3301      	adds	r3, #1
    cc14:	b2da      	uxtb	r2, r3
    cc16:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1e:	701a      	strb	r2, [r3, #0]
    cc20:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc28:	781b      	ldrb	r3, [r3, #0]
    cc2a:	2bff      	cmp	r3, #255	; 0xff
    cc2c:	d105      	bne.n	cc3a <send_nav_ref+0x30a>
    cc2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	2200      	movs	r2, #0
    cc38:	701a      	strb	r2, [r3, #0]
    cc3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc42:	781b      	ldrb	r3, [r3, #0]
    cc44:	461a      	mov	r2, r3
    cc46:	f648 33bc 	movw	r3, #35772	; 0x8bbc
    cc4a:	f2c0 0301 	movt	r3, #1
    cc4e:	78d9      	ldrb	r1, [r3, #3]
    cc50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc58:	5499      	strb	r1, [r3, r2]
    cc5a:	4b8c      	ldr	r3, [pc, #560]	; (ce8c <send_nav_ref+0x55c>)
    cc5c:	781a      	ldrb	r2, [r3, #0]
    cc5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc66:	781b      	ldrb	r3, [r3, #0]
    cc68:	4413      	add	r3, r2
    cc6a:	b2da      	uxtb	r2, r3
    cc6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc74:	701a      	strb	r2, [r3, #0]
    cc76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7e:	781a      	ldrb	r2, [r3, #0]
    cc80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	4413      	add	r3, r2
    cc8c:	b2da      	uxtb	r2, r3
    cc8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc96:	701a      	strb	r2, [r3, #0]
    cc98:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	3301      	adds	r3, #1
    cca4:	b2da      	uxtb	r2, r3
    cca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccae:	701a      	strb	r2, [r3, #0]
    ccb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb8:	781b      	ldrb	r3, [r3, #0]
    ccba:	2bff      	cmp	r3, #255	; 0xff
    ccbc:	d105      	bne.n	ccca <send_nav_ref+0x39a>
    ccbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	2200      	movs	r2, #0
    ccc8:	701a      	strb	r2, [r3, #0]
    ccca:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	461a      	mov	r2, r3
    ccd6:	f648 33c0 	movw	r3, #35776	; 0x8bc0
    ccda:	f2c0 0301 	movt	r3, #1
    ccde:	7819      	ldrb	r1, [r3, #0]
    cce0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce8:	5499      	strb	r1, [r3, r2]
    ccea:	f648 33c0 	movw	r3, #35776	; 0x8bc0
    ccee:	f2c0 0301 	movt	r3, #1
    ccf2:	781a      	ldrb	r2, [r3, #0]
    ccf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	781b      	ldrb	r3, [r3, #0]
    ccfe:	4413      	add	r3, r2
    cd00:	b2da      	uxtb	r2, r3
    cd02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0a:	701a      	strb	r2, [r3, #0]
    cd0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	781a      	ldrb	r2, [r3, #0]
    cd16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	781b      	ldrb	r3, [r3, #0]
    cd20:	4413      	add	r3, r2
    cd22:	b2da      	uxtb	r2, r3
    cd24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2c:	701a      	strb	r2, [r3, #0]
    cd2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	3301      	adds	r3, #1
    cd3a:	b2da      	uxtb	r2, r3
    cd3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd44:	701a      	strb	r2, [r3, #0]
    cd46:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2bff      	cmp	r3, #255	; 0xff
    cd52:	d105      	bne.n	cd60 <send_nav_ref+0x430>
    cd54:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	2200      	movs	r2, #0
    cd5e:	701a      	strb	r2, [r3, #0]
    cd60:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	461a      	mov	r2, r3
    cd6c:	f648 33c0 	movw	r3, #35776	; 0x8bc0
    cd70:	f2c0 0301 	movt	r3, #1
    cd74:	7859      	ldrb	r1, [r3, #1]
    cd76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	5499      	strb	r1, [r3, r2]
    cd80:	4b43      	ldr	r3, [pc, #268]	; (ce90 <send_nav_ref+0x560>)
    cd82:	781a      	ldrb	r2, [r3, #0]
    cd84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	781b      	ldrb	r3, [r3, #0]
    cd8e:	4413      	add	r3, r2
    cd90:	b2da      	uxtb	r2, r3
    cd92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9a:	701a      	strb	r2, [r3, #0]
    cd9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	781a      	ldrb	r2, [r3, #0]
    cda6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	4413      	add	r3, r2
    cdb2:	b2da      	uxtb	r2, r3
    cdb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	701a      	strb	r2, [r3, #0]
    cdbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	3301      	adds	r3, #1
    cdca:	b2da      	uxtb	r2, r3
    cdcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd4:	701a      	strb	r2, [r3, #0]
    cdd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	2bff      	cmp	r3, #255	; 0xff
    cde2:	d105      	bne.n	cdf0 <send_nav_ref+0x4c0>
    cde4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	2200      	movs	r2, #0
    cdee:	701a      	strb	r2, [r3, #0]
    cdf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf8:	781b      	ldrb	r3, [r3, #0]
    cdfa:	461a      	mov	r2, r3
    cdfc:	f648 33c0 	movw	r3, #35776	; 0x8bc0
    ce00:	f2c0 0301 	movt	r3, #1
    ce04:	7899      	ldrb	r1, [r3, #2]
    ce06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	5499      	strb	r1, [r3, r2]
    ce10:	4b20      	ldr	r3, [pc, #128]	; (ce94 <send_nav_ref+0x564>)
    ce12:	781a      	ldrb	r2, [r3, #0]
    ce14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1c:	781b      	ldrb	r3, [r3, #0]
    ce1e:	4413      	add	r3, r2
    ce20:	b2da      	uxtb	r2, r3
    ce22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2a:	701a      	strb	r2, [r3, #0]
    ce2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce34:	781a      	ldrb	r2, [r3, #0]
    ce36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	4413      	add	r3, r2
    ce42:	b2da      	uxtb	r2, r3
    ce44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4c:	701a      	strb	r2, [r3, #0]
    ce4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	3301      	adds	r3, #1
    ce5a:	b2da      	uxtb	r2, r3
    ce5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce64:	701a      	strb	r2, [r3, #0]
    ce66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6e:	781b      	ldrb	r3, [r3, #0]
    ce70:	2bff      	cmp	r3, #255	; 0xff
    ce72:	d111      	bne.n	ce98 <send_nav_ref+0x568>
    ce74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7c:	2200      	movs	r2, #0
    ce7e:	701a      	strb	r2, [r3, #0]
    ce80:	e00a      	b.n	ce98 <send_nav_ref+0x568>
    ce82:	bf00      	nop
    ce84:	00018bbd 	.word	0x00018bbd
    ce88:	00018bbe 	.word	0x00018bbe
    ce8c:	00018bbf 	.word	0x00018bbf
    ce90:	00018bc1 	.word	0x00018bc1
    ce94:	00018bc2 	.word	0x00018bc2
    ce98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea0:	781b      	ldrb	r3, [r3, #0]
    cea2:	461a      	mov	r2, r3
    cea4:	f648 33c0 	movw	r3, #35776	; 0x8bc0
    cea8:	f2c0 0301 	movt	r3, #1
    ceac:	78d9      	ldrb	r1, [r3, #3]
    ceae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ceb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb6:	5499      	strb	r1, [r3, r2]
    ceb8:	4b79      	ldr	r3, [pc, #484]	; (d0a0 <send_nav_ref+0x770>)
    ceba:	781a      	ldrb	r2, [r3, #0]
    cebc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec4:	781b      	ldrb	r3, [r3, #0]
    cec6:	4413      	add	r3, r2
    cec8:	b2da      	uxtb	r2, r3
    ceca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced2:	701a      	strb	r2, [r3, #0]
    ced4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ced8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cedc:	781a      	ldrb	r2, [r3, #0]
    cede:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee6:	781b      	ldrb	r3, [r3, #0]
    cee8:	4413      	add	r3, r2
    ceea:	b2da      	uxtb	r2, r3
    ceec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef4:	701a      	strb	r2, [r3, #0]
    cef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	3301      	adds	r3, #1
    cf02:	b2da      	uxtb	r2, r3
    cf04:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0c:	701a      	strb	r2, [r3, #0]
    cf0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	781b      	ldrb	r3, [r3, #0]
    cf18:	2bff      	cmp	r3, #255	; 0xff
    cf1a:	d105      	bne.n	cf28 <send_nav_ref+0x5f8>
    cf1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf24:	2200      	movs	r2, #0
    cf26:	701a      	strb	r2, [r3, #0]
    cf28:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf30:	781b      	ldrb	r3, [r3, #0]
    cf32:	461a      	mov	r2, r3
    cf34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cf38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3c:	7819      	ldrb	r1, [r3, #0]
    cf3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf46:	5499      	strb	r1, [r3, r2]
    cf48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf50:	781b      	ldrb	r3, [r3, #0]
    cf52:	3301      	adds	r3, #1
    cf54:	b2da      	uxtb	r2, r3
    cf56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5e:	701a      	strb	r2, [r3, #0]
    cf60:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf68:	781b      	ldrb	r3, [r3, #0]
    cf6a:	2bff      	cmp	r3, #255	; 0xff
    cf6c:	d105      	bne.n	cf7a <send_nav_ref+0x64a>
    cf6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf76:	2200      	movs	r2, #0
    cf78:	701a      	strb	r2, [r3, #0]
    cf7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	461a      	mov	r2, r3
    cf86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf8e:	7819      	ldrb	r1, [r3, #0]
    cf90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf98:	5499      	strb	r1, [r3, r2]
    cf9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa2:	781b      	ldrb	r3, [r3, #0]
    cfa4:	3301      	adds	r3, #1
    cfa6:	b2da      	uxtb	r2, r3
    cfa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb0:	701a      	strb	r2, [r3, #0]
    cfb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfba:	781b      	ldrb	r3, [r3, #0]
    cfbc:	2bff      	cmp	r3, #255	; 0xff
    cfbe:	d105      	bne.n	cfcc <send_nav_ref+0x69c>
    cfc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc8:	2200      	movs	r2, #0
    cfca:	701a      	strb	r2, [r3, #0]
    cfcc:	f242 0339 	movw	r3, #8249	; 0x2039
    cfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd4:	781b      	ldrb	r3, [r3, #0]
    cfd6:	b2db      	uxtb	r3, r3
    cfd8:	f003 0310 	and.w	r3, r3, #16
    cfdc:	2b00      	cmp	r3, #0
    cfde:	d15a      	bne.n	d096 <send_nav_ref+0x766>
    cfe0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe8:	781b      	ldrb	r3, [r3, #0]
    cfea:	b2db      	uxtb	r3, r3
    cfec:	461a      	mov	r2, r3
    cfee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff6:	5c9a      	ldrb	r2, [r3, r2]
    cff8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    cffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d000:	701a      	strb	r2, [r3, #0]
    d002:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00a:	2200      	movs	r2, #0
    d00c:	701a      	strb	r2, [r3, #0]
    d00e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d016:	781b      	ldrb	r3, [r3, #0]
    d018:	b2db      	uxtb	r3, r3
    d01a:	3301      	adds	r3, #1
    d01c:	b2da      	uxtb	r2, r3
    d01e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d026:	701a      	strb	r2, [r3, #0]
    d028:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d030:	781b      	ldrb	r3, [r3, #0]
    d032:	b2db      	uxtb	r3, r3
    d034:	2bff      	cmp	r3, #255	; 0xff
    d036:	d105      	bne.n	d044 <send_nav_ref+0x714>
    d038:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d040:	2200      	movs	r2, #0
    d042:	701a      	strb	r2, [r3, #0]
    d044:	f242 0338 	movw	r3, #8248	; 0x2038
    d048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d04c:	f242 0238 	movw	r2, #8248	; 0x2038
    d050:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d054:	7812      	ldrb	r2, [r2, #0]
    d056:	b2d2      	uxtb	r2, r2
    d058:	f042 0201 	orr.w	r2, r2, #1
    d05c:	b2d2      	uxtb	r2, r2
    d05e:	701a      	strb	r2, [r3, #0]
    d060:	f242 0339 	movw	r3, #8249	; 0x2039
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	f242 0239 	movw	r2, #8249	; 0x2039
    d06c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d070:	7812      	ldrb	r2, [r2, #0]
    d072:	b2d2      	uxtb	r2, r2
    d074:	f042 0210 	orr.w	r2, r2, #16
    d078:	b2d2      	uxtb	r2, r2
    d07a:	701a      	strb	r2, [r3, #0]
    d07c:	e00b      	b.n	d096 <send_nav_ref+0x766>
    d07e:	f24c 5348 	movw	r3, #50504	; 0xc548
    d082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d086:	781b      	ldrb	r3, [r3, #0]
    d088:	3301      	adds	r3, #1
    d08a:	b2da      	uxtb	r2, r3
    d08c:	f24c 5348 	movw	r3, #50504	; 0xc548
    d090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d094:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d096:	46bd      	mov	sp, r7
    d098:	f85d 7b04 	ldr.w	r7, [sp], #4
    d09c:	4770      	bx	lr
    d09e:	bf00      	nop
    d0a0:	00018bc3 	.word	0x00018bc3

0000d0a4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d0a4:	b480      	push	{r7}
    d0a6:	b083      	sub	sp, #12
    d0a8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d0aa:	f24c 6350 	movw	r3, #50768	; 0xc650
    d0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b2:	8a1b      	ldrh	r3, [r3, #16]
    d0b4:	b21b      	sxth	r3, r3
    d0b6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d0ba:	db0d      	blt.n	d0d8 <inflight_calib_mode_update+0x34>
    d0bc:	f24c 6350 	movw	r3, #50768	; 0xc650
    d0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c4:	8a1b      	ldrh	r3, [r3, #16]
    d0c6:	b21a      	sxth	r2, r3
    d0c8:	f640 437f 	movw	r3, #3199	; 0xc7f
    d0cc:	429a      	cmp	r2, r3
    d0ce:	bfd4      	ite	le
    d0d0:	2300      	movle	r3, #0
    d0d2:	2301      	movgt	r3, #1
    d0d4:	b2db      	uxtb	r3, r3
    d0d6:	e000      	b.n	d0da <inflight_calib_mode_update+0x36>
    d0d8:	2302      	movs	r3, #2
    d0da:	71fb      	strb	r3, [r7, #7]
    d0dc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	79fa      	ldrb	r2, [r7, #7]
    d0e8:	429a      	cmp	r2, r3
    d0ea:	d007      	beq.n	d0fc <inflight_calib_mode_update+0x58>
    d0ec:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f4:	79fa      	ldrb	r2, [r7, #7]
    d0f6:	701a      	strb	r2, [r3, #0]
    d0f8:	2301      	movs	r3, #1
    d0fa:	e000      	b.n	d0fe <inflight_calib_mode_update+0x5a>
    d0fc:	2300      	movs	r3, #0
}
    d0fe:	4618      	mov	r0, r3
    d100:	370c      	adds	r7, #12
    d102:	46bd      	mov	sp, r7
    d104:	f85d 7b04 	ldr.w	r7, [sp], #4
    d108:	4770      	bx	lr
    d10a:	bf00      	nop

0000d10c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d10c:	b580      	push	{r7, lr}
    d10e:	b082      	sub	sp, #8
    d110:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d112:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11a:	2201      	movs	r2, #1
    d11c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d11e:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d126:	781b      	ldrb	r3, [r3, #0]
    d128:	b2db      	uxtb	r3, r3
    d12a:	2b00      	cmp	r3, #0
    d12c:	f000 83c0 	beq.w	d8b0 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d130:	2300      	movs	r3, #0
    d132:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d134:	f7fa fa4c 	bl	75d0 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d138:	4b3e      	ldr	r3, [pc, #248]	; (d234 <radio_control_task+0x128>)
    d13a:	781b      	ldrb	r3, [r3, #0]
    d13c:	b2db      	uxtb	r3, r3
    d13e:	f003 0302 	and.w	r3, r3, #2
    d142:	2b00      	cmp	r3, #0
    d144:	d00d      	beq.n	d162 <radio_control_task+0x56>
    d146:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14e:	781b      	ldrb	r3, [r3, #0]
    d150:	2b01      	cmp	r3, #1
    d152:	d00d      	beq.n	d170 <radio_control_task+0x64>
    d154:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d15c:	781b      	ldrb	r3, [r3, #0]
    d15e:	2b00      	cmp	r3, #0
    d160:	d006      	beq.n	d170 <radio_control_task+0x64>
    d162:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d16a:	781b      	ldrb	r3, [r3, #0]
    d16c:	2b00      	cmp	r3, #0
    d16e:	d007      	beq.n	d180 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d170:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d178:	2203      	movs	r2, #3
    d17a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d17c:	2301      	movs	r3, #1
    d17e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d180:	4b2c      	ldr	r3, [pc, #176]	; (d234 <radio_control_task+0x128>)
    d182:	781b      	ldrb	r3, [r3, #0]
    d184:	b2db      	uxtb	r3, r3
    d186:	f003 0304 	and.w	r3, r3, #4
    d18a:	2b00      	cmp	r3, #0
    d18c:	d023      	beq.n	d1d6 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d18e:	f7fa f8f9 	bl	7384 <pprz_mode_update>
    d192:	4603      	mov	r3, r0
    d194:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d196:	79fa      	ldrb	r2, [r7, #7]
    d198:	79bb      	ldrb	r3, [r7, #6]
    d19a:	4313      	orrs	r3, r2
    d19c:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d19e:	f7fa f93d 	bl	741c <ir_estim_mode_update>
    d1a2:	4603      	mov	r3, r0
    d1a4:	461a      	mov	r2, r3
    d1a6:	79fb      	ldrb	r3, [r7, #7]
    d1a8:	4313      	orrs	r3, r2
    d1aa:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d1ac:	f7ff ff7a 	bl	d0a4 <inflight_calib_mode_update>
    d1b0:	4603      	mov	r3, r0
    d1b2:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d1b4:	797b      	ldrb	r3, [r7, #5]
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d102      	bne.n	d1c0 <radio_control_task+0xb4>
    d1ba:	79bb      	ldrb	r3, [r7, #6]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d001      	beq.n	d1c4 <radio_control_task+0xb8>
    d1c0:	2301      	movs	r3, #1
    d1c2:	e000      	b.n	d1c6 <radio_control_task+0xba>
    d1c4:	2300      	movs	r3, #0
    d1c6:	b2db      	uxtb	r3, r3
    d1c8:	4618      	mov	r0, r3
    d1ca:	f008 fba1 	bl	15910 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d1ce:	79fa      	ldrb	r2, [r7, #7]
    d1d0:	797b      	ldrb	r3, [r7, #5]
    d1d2:	4313      	orrs	r3, r2
    d1d4:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d1d6:	f7fa f949 	bl	746c <mcu1_status_update>
    d1da:	4603      	mov	r3, r0
    d1dc:	461a      	mov	r2, r3
    d1de:	79fb      	ldrb	r3, [r7, #7]
    d1e0:	4313      	orrs	r3, r2
    d1e2:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d1e4:	2301      	movs	r3, #1
    d1e6:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d1e8:	79fb      	ldrb	r3, [r7, #7]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	f000 82bd 	beq.w	d76a <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d1f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f8:	781a      	ldrb	r2, [r3, #0]
    d1fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d202:	781b      	ldrb	r3, [r3, #0]
    d204:	b2db      	uxtb	r3, r3
    d206:	429a      	cmp	r2, r3
    d208:	d316      	bcc.n	d238 <radio_control_task+0x12c>
    d20a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	b2db      	uxtb	r3, r3
    d216:	461a      	mov	r2, r3
    d218:	f24c 5349 	movw	r3, #50505	; 0xc549
    d21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d220:	781b      	ldrb	r3, [r3, #0]
    d222:	1ad3      	subs	r3, r2, r3
    d224:	33ff      	adds	r3, #255	; 0xff
    d226:	2b09      	cmp	r3, #9
    d228:	bfd4      	ite	le
    d22a:	2300      	movle	r3, #0
    d22c:	2301      	movgt	r3, #1
    d22e:	b2db      	uxtb	r3, r3
    d230:	e014      	b.n	d25c <radio_control_task+0x150>
    d232:	bf00      	nop
    d234:	2004c663 	.word	0x2004c663
    d238:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d240:	781b      	ldrb	r3, [r3, #0]
    d242:	b2db      	uxtb	r3, r3
    d244:	461a      	mov	r2, r3
    d246:	f24c 5349 	movw	r3, #50505	; 0xc549
    d24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	1ad3      	subs	r3, r2, r3
    d252:	2b09      	cmp	r3, #9
    d254:	bfd4      	ite	le
    d256:	2300      	movle	r3, #0
    d258:	2301      	movgt	r3, #1
    d25a:	b2db      	uxtb	r3, r3
    d25c:	2b00      	cmp	r3, #0
    d25e:	f000 8278 	beq.w	d752 <radio_control_task+0x646>
    d262:	f24c 5349 	movw	r3, #50505	; 0xc549
    d266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26a:	781b      	ldrb	r3, [r3, #0]
    d26c:	461a      	mov	r2, r3
    d26e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d276:	2105      	movs	r1, #5
    d278:	5499      	strb	r1, [r3, r2]
    d27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d282:	781b      	ldrb	r3, [r3, #0]
    d284:	3301      	adds	r3, #1
    d286:	b2da      	uxtb	r2, r3
    d288:	f24c 5349 	movw	r3, #50505	; 0xc549
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	701a      	strb	r2, [r3, #0]
    d292:	f24c 5349 	movw	r3, #50505	; 0xc549
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	781b      	ldrb	r3, [r3, #0]
    d29c:	2bff      	cmp	r3, #255	; 0xff
    d29e:	d105      	bne.n	d2ac <radio_control_task+0x1a0>
    d2a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	2200      	movs	r2, #0
    d2aa:	701a      	strb	r2, [r3, #0]
    d2ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b4:	781b      	ldrb	r3, [r3, #0]
    d2b6:	461a      	mov	r2, r3
    d2b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c0:	210b      	movs	r1, #11
    d2c2:	5499      	strb	r1, [r3, r2]
    d2c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2cc:	781b      	ldrb	r3, [r3, #0]
    d2ce:	3301      	adds	r3, #1
    d2d0:	b2da      	uxtb	r2, r3
    d2d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2da:	701a      	strb	r2, [r3, #0]
    d2dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e4:	781b      	ldrb	r3, [r3, #0]
    d2e6:	2bff      	cmp	r3, #255	; 0xff
    d2e8:	d105      	bne.n	d2f6 <radio_control_task+0x1ea>
    d2ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f2:	2200      	movs	r2, #0
    d2f4:	701a      	strb	r2, [r3, #0]
    d2f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	220b      	movs	r2, #11
    d300:	701a      	strb	r2, [r3, #0]
    d302:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30a:	220b      	movs	r2, #11
    d30c:	701a      	strb	r2, [r3, #0]
    d30e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d316:	781b      	ldrb	r3, [r3, #0]
    d318:	461a      	mov	r2, r3
    d31a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d322:	7819      	ldrb	r1, [r3, #0]
    d324:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32c:	5499      	strb	r1, [r3, r2]
    d32e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d336:	781a      	ldrb	r2, [r3, #0]
    d338:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d340:	781b      	ldrb	r3, [r3, #0]
    d342:	4413      	add	r3, r2
    d344:	b2da      	uxtb	r2, r3
    d346:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34e:	701a      	strb	r2, [r3, #0]
    d350:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d358:	781a      	ldrb	r2, [r3, #0]
    d35a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d362:	781b      	ldrb	r3, [r3, #0]
    d364:	4413      	add	r3, r2
    d366:	b2da      	uxtb	r2, r3
    d368:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d370:	701a      	strb	r2, [r3, #0]
    d372:	f24c 5349 	movw	r3, #50505	; 0xc549
    d376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37a:	781b      	ldrb	r3, [r3, #0]
    d37c:	3301      	adds	r3, #1
    d37e:	b2da      	uxtb	r2, r3
    d380:	f24c 5349 	movw	r3, #50505	; 0xc549
    d384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d388:	701a      	strb	r2, [r3, #0]
    d38a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d392:	781b      	ldrb	r3, [r3, #0]
    d394:	2bff      	cmp	r3, #255	; 0xff
    d396:	d105      	bne.n	d3a4 <radio_control_task+0x298>
    d398:	f24c 5349 	movw	r3, #50505	; 0xc549
    d39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a0:	2200      	movs	r2, #0
    d3a2:	701a      	strb	r2, [r3, #0]
    d3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ac:	781b      	ldrb	r3, [r3, #0]
    d3ae:	461a      	mov	r2, r3
    d3b0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b8:	7819      	ldrb	r1, [r3, #0]
    d3ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c2:	5499      	strb	r1, [r3, r2]
    d3c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3cc:	781a      	ldrb	r2, [r3, #0]
    d3ce:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d6:	781b      	ldrb	r3, [r3, #0]
    d3d8:	4413      	add	r3, r2
    d3da:	b2da      	uxtb	r2, r3
    d3dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e4:	701a      	strb	r2, [r3, #0]
    d3e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ee:	781a      	ldrb	r2, [r3, #0]
    d3f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f8:	781b      	ldrb	r3, [r3, #0]
    d3fa:	4413      	add	r3, r2
    d3fc:	b2da      	uxtb	r2, r3
    d3fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d406:	701a      	strb	r2, [r3, #0]
    d408:	f24c 5349 	movw	r3, #50505	; 0xc549
    d40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d410:	781b      	ldrb	r3, [r3, #0]
    d412:	3301      	adds	r3, #1
    d414:	b2da      	uxtb	r2, r3
    d416:	f24c 5349 	movw	r3, #50505	; 0xc549
    d41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41e:	701a      	strb	r2, [r3, #0]
    d420:	f24c 5349 	movw	r3, #50505	; 0xc549
    d424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d428:	781b      	ldrb	r3, [r3, #0]
    d42a:	2bff      	cmp	r3, #255	; 0xff
    d42c:	d105      	bne.n	d43a <radio_control_task+0x32e>
    d42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d436:	2200      	movs	r2, #0
    d438:	701a      	strb	r2, [r3, #0]
    d43a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d442:	781b      	ldrb	r3, [r3, #0]
    d444:	461a      	mov	r2, r3
    d446:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44e:	7819      	ldrb	r1, [r3, #0]
    d450:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d458:	5499      	strb	r1, [r3, r2]
    d45a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d462:	781a      	ldrb	r2, [r3, #0]
    d464:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46c:	781b      	ldrb	r3, [r3, #0]
    d46e:	4413      	add	r3, r2
    d470:	b2da      	uxtb	r2, r3
    d472:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47a:	701a      	strb	r2, [r3, #0]
    d47c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d484:	781a      	ldrb	r2, [r3, #0]
    d486:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48e:	781b      	ldrb	r3, [r3, #0]
    d490:	4413      	add	r3, r2
    d492:	b2da      	uxtb	r2, r3
    d494:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49c:	701a      	strb	r2, [r3, #0]
    d49e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	3301      	adds	r3, #1
    d4aa:	b2da      	uxtb	r2, r3
    d4ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b4:	701a      	strb	r2, [r3, #0]
    d4b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4be:	781b      	ldrb	r3, [r3, #0]
    d4c0:	2bff      	cmp	r3, #255	; 0xff
    d4c2:	d105      	bne.n	d4d0 <radio_control_task+0x3c4>
    d4c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4cc:	2200      	movs	r2, #0
    d4ce:	701a      	strb	r2, [r3, #0]
    d4d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d8:	781b      	ldrb	r3, [r3, #0]
    d4da:	461a      	mov	r2, r3
    d4dc:	f24c 5333 	movw	r3, #50483	; 0xc533
    d4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e4:	7819      	ldrb	r1, [r3, #0]
    d4e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ee:	5499      	strb	r1, [r3, r2]
    d4f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f8:	781a      	ldrb	r2, [r3, #0]
    d4fa:	f24c 5333 	movw	r3, #50483	; 0xc533
    d4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d502:	781b      	ldrb	r3, [r3, #0]
    d504:	4413      	add	r3, r2
    d506:	b2da      	uxtb	r2, r3
    d508:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d510:	701a      	strb	r2, [r3, #0]
    d512:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51a:	781a      	ldrb	r2, [r3, #0]
    d51c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d524:	781b      	ldrb	r3, [r3, #0]
    d526:	4413      	add	r3, r2
    d528:	b2da      	uxtb	r2, r3
    d52a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d532:	701a      	strb	r2, [r3, #0]
    d534:	f24c 5349 	movw	r3, #50505	; 0xc549
    d538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	3301      	adds	r3, #1
    d540:	b2da      	uxtb	r2, r3
    d542:	f24c 5349 	movw	r3, #50505	; 0xc549
    d546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54a:	701a      	strb	r2, [r3, #0]
    d54c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d554:	781b      	ldrb	r3, [r3, #0]
    d556:	2bff      	cmp	r3, #255	; 0xff
    d558:	d105      	bne.n	d566 <radio_control_task+0x45a>
    d55a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	2200      	movs	r2, #0
    d564:	701a      	strb	r2, [r3, #0]
    d566:	f24c 5349 	movw	r3, #50505	; 0xc549
    d56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56e:	781b      	ldrb	r3, [r3, #0]
    d570:	461a      	mov	r2, r3
    d572:	f240 533c 	movw	r3, #1340	; 0x53c
    d576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57a:	7819      	ldrb	r1, [r3, #0]
    d57c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	5499      	strb	r1, [r3, r2]
    d586:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	781a      	ldrb	r2, [r3, #0]
    d590:	f240 533c 	movw	r3, #1340	; 0x53c
    d594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d598:	781b      	ldrb	r3, [r3, #0]
    d59a:	4413      	add	r3, r2
    d59c:	b2da      	uxtb	r2, r3
    d59e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a6:	701a      	strb	r2, [r3, #0]
    d5a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b0:	781a      	ldrb	r2, [r3, #0]
    d5b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ba:	781b      	ldrb	r3, [r3, #0]
    d5bc:	4413      	add	r3, r2
    d5be:	b2da      	uxtb	r2, r3
    d5c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c8:	701a      	strb	r2, [r3, #0]
    d5ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d2:	781b      	ldrb	r3, [r3, #0]
    d5d4:	3301      	adds	r3, #1
    d5d6:	b2da      	uxtb	r2, r3
    d5d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e0:	701a      	strb	r2, [r3, #0]
    d5e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	2bff      	cmp	r3, #255	; 0xff
    d5ee:	d105      	bne.n	d5fc <radio_control_task+0x4f0>
    d5f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f8:	2200      	movs	r2, #0
    d5fa:	701a      	strb	r2, [r3, #0]
    d5fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d604:	781b      	ldrb	r3, [r3, #0]
    d606:	461a      	mov	r2, r3
    d608:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d610:	7819      	ldrb	r1, [r3, #0]
    d612:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61a:	5499      	strb	r1, [r3, r2]
    d61c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d624:	781b      	ldrb	r3, [r3, #0]
    d626:	3301      	adds	r3, #1
    d628:	b2da      	uxtb	r2, r3
    d62a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	701a      	strb	r2, [r3, #0]
    d634:	f24c 5349 	movw	r3, #50505	; 0xc549
    d638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63c:	781b      	ldrb	r3, [r3, #0]
    d63e:	2bff      	cmp	r3, #255	; 0xff
    d640:	d105      	bne.n	d64e <radio_control_task+0x542>
    d642:	f24c 5349 	movw	r3, #50505	; 0xc549
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	2200      	movs	r2, #0
    d64c:	701a      	strb	r2, [r3, #0]
    d64e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d656:	781b      	ldrb	r3, [r3, #0]
    d658:	461a      	mov	r2, r3
    d65a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d662:	7819      	ldrb	r1, [r3, #0]
    d664:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d66c:	5499      	strb	r1, [r3, r2]
    d66e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d676:	781b      	ldrb	r3, [r3, #0]
    d678:	3301      	adds	r3, #1
    d67a:	b2da      	uxtb	r2, r3
    d67c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	701a      	strb	r2, [r3, #0]
    d686:	f24c 5349 	movw	r3, #50505	; 0xc549
    d68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68e:	781b      	ldrb	r3, [r3, #0]
    d690:	2bff      	cmp	r3, #255	; 0xff
    d692:	d105      	bne.n	d6a0 <radio_control_task+0x594>
    d694:	f24c 5349 	movw	r3, #50505	; 0xc549
    d698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69c:	2200      	movs	r2, #0
    d69e:	701a      	strb	r2, [r3, #0]
    d6a0:	f242 0339 	movw	r3, #8249	; 0x2039
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	b2db      	uxtb	r3, r3
    d6ac:	f003 0310 	and.w	r3, r3, #16
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d15a      	bne.n	d76a <radio_control_task+0x65e>
    d6b4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6bc:	781b      	ldrb	r3, [r3, #0]
    d6be:	b2db      	uxtb	r3, r3
    d6c0:	461a      	mov	r2, r3
    d6c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ca:	5c9a      	ldrb	r2, [r3, r2]
    d6cc:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d4:	701a      	strb	r2, [r3, #0]
    d6d6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6de:	2200      	movs	r2, #0
    d6e0:	701a      	strb	r2, [r3, #0]
    d6e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ea:	781b      	ldrb	r3, [r3, #0]
    d6ec:	b2db      	uxtb	r3, r3
    d6ee:	3301      	adds	r3, #1
    d6f0:	b2da      	uxtb	r2, r3
    d6f2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fa:	701a      	strb	r2, [r3, #0]
    d6fc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d704:	781b      	ldrb	r3, [r3, #0]
    d706:	b2db      	uxtb	r3, r3
    d708:	2bff      	cmp	r3, #255	; 0xff
    d70a:	d105      	bne.n	d718 <radio_control_task+0x60c>
    d70c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d714:	2200      	movs	r2, #0
    d716:	701a      	strb	r2, [r3, #0]
    d718:	f242 0338 	movw	r3, #8248	; 0x2038
    d71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d720:	f242 0238 	movw	r2, #8248	; 0x2038
    d724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d728:	7812      	ldrb	r2, [r2, #0]
    d72a:	b2d2      	uxtb	r2, r2
    d72c:	f042 0201 	orr.w	r2, r2, #1
    d730:	b2d2      	uxtb	r2, r2
    d732:	701a      	strb	r2, [r3, #0]
    d734:	f242 0339 	movw	r3, #8249	; 0x2039
    d738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73c:	f242 0239 	movw	r2, #8249	; 0x2039
    d740:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d744:	7812      	ldrb	r2, [r2, #0]
    d746:	b2d2      	uxtb	r2, r2
    d748:	f042 0210 	orr.w	r2, r2, #16
    d74c:	b2d2      	uxtb	r2, r2
    d74e:	701a      	strb	r2, [r3, #0]
    d750:	e00b      	b.n	d76a <radio_control_task+0x65e>
    d752:	f24c 5348 	movw	r3, #50504	; 0xc548
    d756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75a:	781b      	ldrb	r3, [r3, #0]
    d75c:	3301      	adds	r3, #1
    d75e:	b2da      	uxtb	r2, r3
    d760:	f24c 5348 	movw	r3, #50504	; 0xc548
    d764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d768:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d76a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	885b      	ldrh	r3, [r3, #2]
    d774:	b21b      	sxth	r3, r3
    d776:	4618      	mov	r0, r3
    d778:	f00a fedc 	bl	18534 <__aeabi_i2f>
    d77c:	4603      	mov	r3, r0
    d77e:	4618      	mov	r0, r3
    d780:	f04f 0100 	mov.w	r1, #0
    d784:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d788:	f00a ffdc 	bl	18744 <__aeabi_fdiv>
    d78c:	4603      	mov	r3, r0
    d78e:	4618      	mov	r0, r3
    d790:	f00a fa90 	bl	17cb4 <__aeabi_f2d>
    d794:	4602      	mov	r2, r0
    d796:	460b      	mov	r3, r1
    d798:	4610      	mov	r0, r2
    d79a:	4619      	mov	r1, r3
    d79c:	a346      	add	r3, pc, #280	; (adr r3, d8b8 <radio_control_task+0x7ac>)
    d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d7a2:	f00a fadb 	bl	17d5c <__aeabi_dmul>
    d7a6:	4602      	mov	r2, r0
    d7a8:	460b      	mov	r3, r1
    d7aa:	4610      	mov	r0, r2
    d7ac:	4619      	mov	r1, r3
    d7ae:	f04f 0200 	mov.w	r2, #0
    d7b2:	f04f 0300 	mov.w	r3, #0
    d7b6:	f00a f91f 	bl	179f8 <__adddf3>
    d7ba:	4602      	mov	r2, r0
    d7bc:	460b      	mov	r3, r1
    d7be:	4610      	mov	r0, r2
    d7c0:	4619      	mov	r1, r3
    d7c2:	f00a fdad 	bl	18320 <__aeabi_d2f>
    d7c6:	4602      	mov	r2, r0
    d7c8:	f64c 0374 	movw	r3, #51316	; 0xc874
    d7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d7d2:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7da:	889b      	ldrh	r3, [r3, #4]
    d7dc:	b21b      	sxth	r3, r3
    d7de:	4618      	mov	r0, r3
    d7e0:	f00a fea8 	bl	18534 <__aeabi_i2f>
    d7e4:	4603      	mov	r3, r0
    d7e6:	4618      	mov	r0, r3
    d7e8:	f04f 0100 	mov.w	r1, #0
    d7ec:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d7f0:	f00a ffa8 	bl	18744 <__aeabi_fdiv>
    d7f4:	4603      	mov	r3, r0
    d7f6:	4618      	mov	r0, r3
    d7f8:	f00a fa5c 	bl	17cb4 <__aeabi_f2d>
    d7fc:	4602      	mov	r2, r0
    d7fe:	460b      	mov	r3, r1
    d800:	4610      	mov	r0, r2
    d802:	4619      	mov	r1, r3
    d804:	f04f 0200 	mov.w	r2, #0
    d808:	f04f 0300 	mov.w	r3, #0
    d80c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d810:	f00a faa4 	bl	17d5c <__aeabi_dmul>
    d814:	4602      	mov	r2, r0
    d816:	460b      	mov	r3, r1
    d818:	4610      	mov	r0, r2
    d81a:	4619      	mov	r1, r3
    d81c:	f04f 0200 	mov.w	r2, #0
    d820:	f04f 0300 	mov.w	r3, #0
    d824:	f00a f8e8 	bl	179f8 <__adddf3>
    d828:	4602      	mov	r2, r0
    d82a:	460b      	mov	r3, r1
    d82c:	4610      	mov	r0, r2
    d82e:	4619      	mov	r1, r3
    d830:	f00a fd76 	bl	18320 <__aeabi_d2f>
    d834:	4602      	mov	r2, r0
    d836:	f64c 0378 	movw	r3, #51320	; 0xc878
    d83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d840:	f24c 6350 	movw	r3, #50768	; 0xc650
    d844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d848:	881a      	ldrh	r2, [r3, #0]
    d84a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d852:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d854:	f24c 6350 	movw	r3, #50768	; 0xc650
    d858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85c:	7c9a      	ldrb	r2, [r3, #18]
    d85e:	f24c 5334 	movw	r3, #50484	; 0xc534
    d862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d866:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d868:	f24c 6350 	movw	r3, #50768	; 0xc650
    d86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d870:	7d5a      	ldrb	r2, [r3, #21]
    d872:	f24c 5332 	movw	r3, #50482	; 0xc532
    d876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87a:	701a      	strb	r2, [r3, #0]

    events_update();
    d87c:	f7f9 fe26 	bl	74cc <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d880:	f7f8 fc26 	bl	60d0 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d884:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88c:	781b      	ldrb	r3, [r3, #0]
    d88e:	2b02      	cmp	r3, #2
    d890:	d10e      	bne.n	d8b0 <radio_control_task+0x7a4>
    d892:	f24c 6350 	movw	r3, #50768	; 0xc650
    d896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89a:	881b      	ldrh	r3, [r3, #0]
    d89c:	b21b      	sxth	r3, r3
    d89e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d8a2:	dd05      	ble.n	d8b0 <radio_control_task+0x7a4>
	launch = TRUE;
    d8a4:	f24c 5340 	movw	r3, #50496	; 0xc540
    d8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ac:	2201      	movs	r2, #1
    d8ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d8b0:	3708      	adds	r7, #8
    d8b2:	46bd      	mov	sp, r7
    d8b4:	bd80      	pop	{r7, pc}
    d8b6:	bf00      	nop
    d8b8:	33333333 	.word	0x33333333
    d8bc:	bfe33333 	.word	0xbfe33333

0000d8c0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d8c0:	b580      	push	{r7, lr}
    d8c2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d8c4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8cc:	2203      	movs	r2, #3
    d8ce:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d8d0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d8:	781b      	ldrb	r3, [r3, #0]
    d8da:	2b03      	cmp	r3, #3
    d8dc:	d102      	bne.n	d8e4 <navigation_update+0x24>
    nav_home();
    d8de:	f007 fa9b 	bl	14e18 <nav_home>
    d8e2:	e001      	b.n	d8e8 <navigation_update+0x28>
  else
    nav_update();
    d8e4:	f007 fabe 	bl	14e64 <nav_update>
}
    d8e8:	bd80      	pop	{r7, pc}
    d8ea:	bf00      	nop

0000d8ec <send_nav_values>:

void send_nav_values(void){
    d8ec:	b480      	push	{r7}
    d8ee:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d8f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	781a      	ldrb	r2, [r3, #0]
    d8fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	b2db      	uxtb	r3, r3
    d906:	429a      	cmp	r2, r3
    d908:	d313      	bcc.n	d932 <send_nav_values+0x46>
    d90a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d912:	781b      	ldrb	r3, [r3, #0]
    d914:	b2db      	uxtb	r3, r3
    d916:	461a      	mov	r2, r3
    d918:	f24c 5349 	movw	r3, #50505	; 0xc549
    d91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d920:	781b      	ldrb	r3, [r3, #0]
    d922:	1ad3      	subs	r3, r2, r3
    d924:	33ff      	adds	r3, #255	; 0xff
    d926:	2b1e      	cmp	r3, #30
    d928:	bfd4      	ite	le
    d92a:	2300      	movle	r3, #0
    d92c:	2301      	movgt	r3, #1
    d92e:	b2db      	uxtb	r3, r3
    d930:	e011      	b.n	d956 <send_nav_values+0x6a>
    d932:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93a:	781b      	ldrb	r3, [r3, #0]
    d93c:	b2db      	uxtb	r3, r3
    d93e:	461a      	mov	r2, r3
    d940:	f24c 5349 	movw	r3, #50505	; 0xc549
    d944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d948:	781b      	ldrb	r3, [r3, #0]
    d94a:	1ad3      	subs	r3, r2, r3
    d94c:	2b1e      	cmp	r3, #30
    d94e:	bfd4      	ite	le
    d950:	2300      	movle	r3, #0
    d952:	2301      	movgt	r3, #1
    d954:	b2db      	uxtb	r3, r3
    d956:	2b00      	cmp	r3, #0
    d958:	f001 8094 	beq.w	ea84 <send_nav_values+0x1198>
    d95c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d964:	781b      	ldrb	r3, [r3, #0]
    d966:	461a      	mov	r2, r3
    d968:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d970:	2105      	movs	r1, #5
    d972:	5499      	strb	r1, [r3, r2]
    d974:	f24c 5349 	movw	r3, #50505	; 0xc549
    d978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97c:	781b      	ldrb	r3, [r3, #0]
    d97e:	3301      	adds	r3, #1
    d980:	b2da      	uxtb	r2, r3
    d982:	f24c 5349 	movw	r3, #50505	; 0xc549
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	701a      	strb	r2, [r3, #0]
    d98c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d994:	781b      	ldrb	r3, [r3, #0]
    d996:	2bff      	cmp	r3, #255	; 0xff
    d998:	d105      	bne.n	d9a6 <send_nav_values+0xba>
    d99a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	2200      	movs	r2, #0
    d9a4:	701a      	strb	r2, [r3, #0]
    d9a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	461a      	mov	r2, r3
    d9b2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	210a      	movs	r1, #10
    d9bc:	5499      	strb	r1, [r3, r2]
    d9be:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	3301      	adds	r3, #1
    d9ca:	b2da      	uxtb	r2, r3
    d9cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d4:	701a      	strb	r2, [r3, #0]
    d9d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	781b      	ldrb	r3, [r3, #0]
    d9e0:	2bff      	cmp	r3, #255	; 0xff
    d9e2:	d105      	bne.n	d9f0 <send_nav_values+0x104>
    d9e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ec:	2200      	movs	r2, #0
    d9ee:	701a      	strb	r2, [r3, #0]
    d9f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	220a      	movs	r2, #10
    d9fa:	701a      	strb	r2, [r3, #0]
    d9fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da04:	220a      	movs	r2, #10
    da06:	701a      	strb	r2, [r3, #0]
    da08:	f24c 5349 	movw	r3, #50505	; 0xc549
    da0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da10:	781b      	ldrb	r3, [r3, #0]
    da12:	461a      	mov	r2, r3
    da14:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    da18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1c:	7819      	ldrb	r1, [r3, #0]
    da1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da26:	5499      	strb	r1, [r3, r2]
    da28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da30:	781a      	ldrb	r2, [r3, #0]
    da32:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    da36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3a:	781b      	ldrb	r3, [r3, #0]
    da3c:	4413      	add	r3, r2
    da3e:	b2da      	uxtb	r2, r3
    da40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da48:	701a      	strb	r2, [r3, #0]
    da4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da52:	781a      	ldrb	r2, [r3, #0]
    da54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5c:	781b      	ldrb	r3, [r3, #0]
    da5e:	4413      	add	r3, r2
    da60:	b2da      	uxtb	r2, r3
    da62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6a:	701a      	strb	r2, [r3, #0]
    da6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    da70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da74:	781b      	ldrb	r3, [r3, #0]
    da76:	3301      	adds	r3, #1
    da78:	b2da      	uxtb	r2, r3
    da7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da82:	701a      	strb	r2, [r3, #0]
    da84:	f24c 5349 	movw	r3, #50505	; 0xc549
    da88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	2bff      	cmp	r3, #255	; 0xff
    da90:	d105      	bne.n	da9e <send_nav_values+0x1b2>
    da92:	f24c 5349 	movw	r3, #50505	; 0xc549
    da96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9a:	2200      	movs	r2, #0
    da9c:	701a      	strb	r2, [r3, #0]
    da9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    daa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa6:	781b      	ldrb	r3, [r3, #0]
    daa8:	461a      	mov	r2, r3
    daaa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    daae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab2:	7819      	ldrb	r1, [r3, #0]
    dab4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabc:	5499      	strb	r1, [r3, r2]
    dabe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac6:	781a      	ldrb	r2, [r3, #0]
    dac8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    dacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad0:	781b      	ldrb	r3, [r3, #0]
    dad2:	4413      	add	r3, r2
    dad4:	b2da      	uxtb	r2, r3
    dad6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dade:	701a      	strb	r2, [r3, #0]
    dae0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae8:	781a      	ldrb	r2, [r3, #0]
    daea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf2:	781b      	ldrb	r3, [r3, #0]
    daf4:	4413      	add	r3, r2
    daf6:	b2da      	uxtb	r2, r3
    daf8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db00:	701a      	strb	r2, [r3, #0]
    db02:	f24c 5349 	movw	r3, #50505	; 0xc549
    db06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0a:	781b      	ldrb	r3, [r3, #0]
    db0c:	3301      	adds	r3, #1
    db0e:	b2da      	uxtb	r2, r3
    db10:	f24c 5349 	movw	r3, #50505	; 0xc549
    db14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db18:	701a      	strb	r2, [r3, #0]
    db1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db22:	781b      	ldrb	r3, [r3, #0]
    db24:	2bff      	cmp	r3, #255	; 0xff
    db26:	d105      	bne.n	db34 <send_nav_values+0x248>
    db28:	f24c 5349 	movw	r3, #50505	; 0xc549
    db2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db30:	2200      	movs	r2, #0
    db32:	701a      	strb	r2, [r3, #0]
    db34:	f24c 5349 	movw	r3, #50505	; 0xc549
    db38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3c:	781b      	ldrb	r3, [r3, #0]
    db3e:	461a      	mov	r2, r3
    db40:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db48:	7819      	ldrb	r1, [r3, #0]
    db4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	5499      	strb	r1, [r3, r2]
    db54:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5c:	781a      	ldrb	r2, [r3, #0]
    db5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	781b      	ldrb	r3, [r3, #0]
    db68:	4413      	add	r3, r2
    db6a:	b2da      	uxtb	r2, r3
    db6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db74:	701a      	strb	r2, [r3, #0]
    db76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	781a      	ldrb	r2, [r3, #0]
    db80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	781b      	ldrb	r3, [r3, #0]
    db8a:	4413      	add	r3, r2
    db8c:	b2da      	uxtb	r2, r3
    db8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db96:	701a      	strb	r2, [r3, #0]
    db98:	f24c 5349 	movw	r3, #50505	; 0xc549
    db9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba0:	781b      	ldrb	r3, [r3, #0]
    dba2:	3301      	adds	r3, #1
    dba4:	b2da      	uxtb	r2, r3
    dba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbae:	701a      	strb	r2, [r3, #0]
    dbb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb8:	781b      	ldrb	r3, [r3, #0]
    dbba:	2bff      	cmp	r3, #255	; 0xff
    dbbc:	d105      	bne.n	dbca <send_nav_values+0x2de>
    dbbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	2200      	movs	r2, #0
    dbc8:	701a      	strb	r2, [r3, #0]
    dbca:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd2:	781b      	ldrb	r3, [r3, #0]
    dbd4:	461a      	mov	r2, r3
    dbd6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	7859      	ldrb	r1, [r3, #1]
    dbe0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	5499      	strb	r1, [r3, r2]
    dbea:	4bd2      	ldr	r3, [pc, #840]	; (df34 <send_nav_values+0x648>)
    dbec:	781a      	ldrb	r2, [r3, #0]
    dbee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	781b      	ldrb	r3, [r3, #0]
    dbf8:	4413      	add	r3, r2
    dbfa:	b2da      	uxtb	r2, r3
    dbfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc04:	701a      	strb	r2, [r3, #0]
    dc06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	781a      	ldrb	r2, [r3, #0]
    dc10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	4413      	add	r3, r2
    dc1c:	b2da      	uxtb	r2, r3
    dc1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	701a      	strb	r2, [r3, #0]
    dc28:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc30:	781b      	ldrb	r3, [r3, #0]
    dc32:	3301      	adds	r3, #1
    dc34:	b2da      	uxtb	r2, r3
    dc36:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3e:	701a      	strb	r2, [r3, #0]
    dc40:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc48:	781b      	ldrb	r3, [r3, #0]
    dc4a:	2bff      	cmp	r3, #255	; 0xff
    dc4c:	d105      	bne.n	dc5a <send_nav_values+0x36e>
    dc4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc56:	2200      	movs	r2, #0
    dc58:	701a      	strb	r2, [r3, #0]
    dc5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc62:	781b      	ldrb	r3, [r3, #0]
    dc64:	461a      	mov	r2, r3
    dc66:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6e:	7899      	ldrb	r1, [r3, #2]
    dc70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc78:	5499      	strb	r1, [r3, r2]
    dc7a:	4baf      	ldr	r3, [pc, #700]	; (df38 <send_nav_values+0x64c>)
    dc7c:	781a      	ldrb	r2, [r3, #0]
    dc7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc86:	781b      	ldrb	r3, [r3, #0]
    dc88:	4413      	add	r3, r2
    dc8a:	b2da      	uxtb	r2, r3
    dc8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc94:	701a      	strb	r2, [r3, #0]
    dc96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9e:	781a      	ldrb	r2, [r3, #0]
    dca0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	4413      	add	r3, r2
    dcac:	b2da      	uxtb	r2, r3
    dcae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb6:	701a      	strb	r2, [r3, #0]
    dcb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc0:	781b      	ldrb	r3, [r3, #0]
    dcc2:	3301      	adds	r3, #1
    dcc4:	b2da      	uxtb	r2, r3
    dcc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcce:	701a      	strb	r2, [r3, #0]
    dcd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd8:	781b      	ldrb	r3, [r3, #0]
    dcda:	2bff      	cmp	r3, #255	; 0xff
    dcdc:	d105      	bne.n	dcea <send_nav_values+0x3fe>
    dcde:	f24c 5349 	movw	r3, #50505	; 0xc549
    dce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce6:	2200      	movs	r2, #0
    dce8:	701a      	strb	r2, [r3, #0]
    dcea:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf2:	781b      	ldrb	r3, [r3, #0]
    dcf4:	461a      	mov	r2, r3
    dcf6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfe:	78d9      	ldrb	r1, [r3, #3]
    dd00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd08:	5499      	strb	r1, [r3, r2]
    dd0a:	4b8c      	ldr	r3, [pc, #560]	; (df3c <send_nav_values+0x650>)
    dd0c:	781a      	ldrb	r2, [r3, #0]
    dd0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	4413      	add	r3, r2
    dd1a:	b2da      	uxtb	r2, r3
    dd1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd24:	701a      	strb	r2, [r3, #0]
    dd26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2e:	781a      	ldrb	r2, [r3, #0]
    dd30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd38:	781b      	ldrb	r3, [r3, #0]
    dd3a:	4413      	add	r3, r2
    dd3c:	b2da      	uxtb	r2, r3
    dd3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd46:	701a      	strb	r2, [r3, #0]
    dd48:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	3301      	adds	r3, #1
    dd54:	b2da      	uxtb	r2, r3
    dd56:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5e:	701a      	strb	r2, [r3, #0]
    dd60:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd68:	781b      	ldrb	r3, [r3, #0]
    dd6a:	2bff      	cmp	r3, #255	; 0xff
    dd6c:	d105      	bne.n	dd7a <send_nav_values+0x48e>
    dd6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd76:	2200      	movs	r2, #0
    dd78:	701a      	strb	r2, [r3, #0]
    dd7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd82:	781b      	ldrb	r3, [r3, #0]
    dd84:	461a      	mov	r2, r3
    dd86:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8e:	7819      	ldrb	r1, [r3, #0]
    dd90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	5499      	strb	r1, [r3, r2]
    dd9a:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda2:	781a      	ldrb	r2, [r3, #0]
    dda4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	781b      	ldrb	r3, [r3, #0]
    ddae:	4413      	add	r3, r2
    ddb0:	b2da      	uxtb	r2, r3
    ddb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddba:	701a      	strb	r2, [r3, #0]
    ddbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	781a      	ldrb	r2, [r3, #0]
    ddc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	4413      	add	r3, r2
    ddd2:	b2da      	uxtb	r2, r3
    ddd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dddc:	701a      	strb	r2, [r3, #0]
    ddde:	f24c 5349 	movw	r3, #50505	; 0xc549
    dde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde6:	781b      	ldrb	r3, [r3, #0]
    dde8:	3301      	adds	r3, #1
    ddea:	b2da      	uxtb	r2, r3
    ddec:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf4:	701a      	strb	r2, [r3, #0]
    ddf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	2bff      	cmp	r3, #255	; 0xff
    de02:	d105      	bne.n	de10 <send_nav_values+0x524>
    de04:	f24c 5349 	movw	r3, #50505	; 0xc549
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	2200      	movs	r2, #0
    de0e:	701a      	strb	r2, [r3, #0]
    de10:	f24c 5349 	movw	r3, #50505	; 0xc549
    de14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de18:	781b      	ldrb	r3, [r3, #0]
    de1a:	461a      	mov	r2, r3
    de1c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	7859      	ldrb	r1, [r3, #1]
    de26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2e:	5499      	strb	r1, [r3, r2]
    de30:	4b43      	ldr	r3, [pc, #268]	; (df40 <send_nav_values+0x654>)
    de32:	781a      	ldrb	r2, [r3, #0]
    de34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	781b      	ldrb	r3, [r3, #0]
    de3e:	4413      	add	r3, r2
    de40:	b2da      	uxtb	r2, r3
    de42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4a:	701a      	strb	r2, [r3, #0]
    de4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	781a      	ldrb	r2, [r3, #0]
    de56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	4413      	add	r3, r2
    de62:	b2da      	uxtb	r2, r3
    de64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	701a      	strb	r2, [r3, #0]
    de6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	3301      	adds	r3, #1
    de7a:	b2da      	uxtb	r2, r3
    de7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	701a      	strb	r2, [r3, #0]
    de86:	f24c 5349 	movw	r3, #50505	; 0xc549
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	781b      	ldrb	r3, [r3, #0]
    de90:	2bff      	cmp	r3, #255	; 0xff
    de92:	d105      	bne.n	dea0 <send_nav_values+0x5b4>
    de94:	f24c 5349 	movw	r3, #50505	; 0xc549
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	2200      	movs	r2, #0
    de9e:	701a      	strb	r2, [r3, #0]
    dea0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea8:	781b      	ldrb	r3, [r3, #0]
    deaa:	461a      	mov	r2, r3
    deac:	f64c 3300 	movw	r3, #51968	; 0xcb00
    deb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb4:	7899      	ldrb	r1, [r3, #2]
    deb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    deba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debe:	5499      	strb	r1, [r3, r2]
    dec0:	4b20      	ldr	r3, [pc, #128]	; (df44 <send_nav_values+0x658>)
    dec2:	781a      	ldrb	r2, [r3, #0]
    dec4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    decc:	781b      	ldrb	r3, [r3, #0]
    dece:	4413      	add	r3, r2
    ded0:	b2da      	uxtb	r2, r3
    ded2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ded6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	781a      	ldrb	r2, [r3, #0]
    dee6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	4413      	add	r3, r2
    def2:	b2da      	uxtb	r2, r3
    def4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    def8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defc:	701a      	strb	r2, [r3, #0]
    defe:	f24c 5349 	movw	r3, #50505	; 0xc549
    df02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	3301      	adds	r3, #1
    df0a:	b2da      	uxtb	r2, r3
    df0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df14:	701a      	strb	r2, [r3, #0]
    df16:	f24c 5349 	movw	r3, #50505	; 0xc549
    df1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	2bff      	cmp	r3, #255	; 0xff
    df22:	d111      	bne.n	df48 <send_nav_values+0x65c>
    df24:	f24c 5349 	movw	r3, #50505	; 0xc549
    df28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2c:	2200      	movs	r2, #0
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	e00a      	b.n	df48 <send_nav_values+0x65c>
    df32:	bf00      	nop
    df34:	2004cafd 	.word	0x2004cafd
    df38:	2004cafe 	.word	0x2004cafe
    df3c:	2004caff 	.word	0x2004caff
    df40:	2004cb01 	.word	0x2004cb01
    df44:	2004cb02 	.word	0x2004cb02
    df48:	f24c 5349 	movw	r3, #50505	; 0xc549
    df4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df50:	781b      	ldrb	r3, [r3, #0]
    df52:	461a      	mov	r2, r3
    df54:	f64c 3300 	movw	r3, #51968	; 0xcb00
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	78d9      	ldrb	r1, [r3, #3]
    df5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df66:	5499      	strb	r1, [r3, r2]
    df68:	4bd3      	ldr	r3, [pc, #844]	; (e2b8 <send_nav_values+0x9cc>)
    df6a:	781a      	ldrb	r2, [r3, #0]
    df6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	4413      	add	r3, r2
    df78:	b2da      	uxtb	r2, r3
    df7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df82:	701a      	strb	r2, [r3, #0]
    df84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8c:	781a      	ldrb	r2, [r3, #0]
    df8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df96:	781b      	ldrb	r3, [r3, #0]
    df98:	4413      	add	r3, r2
    df9a:	b2da      	uxtb	r2, r3
    df9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa4:	701a      	strb	r2, [r3, #0]
    dfa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	3301      	adds	r3, #1
    dfb2:	b2da      	uxtb	r2, r3
    dfb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfbc:	701a      	strb	r2, [r3, #0]
    dfbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	2bff      	cmp	r3, #255	; 0xff
    dfca:	d105      	bne.n	dfd8 <send_nav_values+0x6ec>
    dfcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd4:	2200      	movs	r2, #0
    dfd6:	701a      	strb	r2, [r3, #0]
    dfd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	461a      	mov	r2, r3
    dfe4:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfec:	7819      	ldrb	r1, [r3, #0]
    dfee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff6:	5499      	strb	r1, [r3, r2]
    dff8:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e000:	781a      	ldrb	r2, [r3, #0]
    e002:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	781b      	ldrb	r3, [r3, #0]
    e00c:	4413      	add	r3, r2
    e00e:	b2da      	uxtb	r2, r3
    e010:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e018:	701a      	strb	r2, [r3, #0]
    e01a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	781a      	ldrb	r2, [r3, #0]
    e024:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	4413      	add	r3, r2
    e030:	b2da      	uxtb	r2, r3
    e032:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03a:	701a      	strb	r2, [r3, #0]
    e03c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	781b      	ldrb	r3, [r3, #0]
    e046:	3301      	adds	r3, #1
    e048:	b2da      	uxtb	r2, r3
    e04a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	701a      	strb	r2, [r3, #0]
    e054:	f24c 5349 	movw	r3, #50505	; 0xc549
    e058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05c:	781b      	ldrb	r3, [r3, #0]
    e05e:	2bff      	cmp	r3, #255	; 0xff
    e060:	d105      	bne.n	e06e <send_nav_values+0x782>
    e062:	f24c 5349 	movw	r3, #50505	; 0xc549
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	2200      	movs	r2, #0
    e06c:	701a      	strb	r2, [r3, #0]
    e06e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	461a      	mov	r2, r3
    e07a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	7859      	ldrb	r1, [r3, #1]
    e084:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	5499      	strb	r1, [r3, r2]
    e08e:	4b8b      	ldr	r3, [pc, #556]	; (e2bc <send_nav_values+0x9d0>)
    e090:	781a      	ldrb	r2, [r3, #0]
    e092:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	4413      	add	r3, r2
    e09e:	b2da      	uxtb	r2, r3
    e0a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a8:	701a      	strb	r2, [r3, #0]
    e0aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	781a      	ldrb	r2, [r3, #0]
    e0b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0bc:	781b      	ldrb	r3, [r3, #0]
    e0be:	4413      	add	r3, r2
    e0c0:	b2da      	uxtb	r2, r3
    e0c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	701a      	strb	r2, [r3, #0]
    e0cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d4:	781b      	ldrb	r3, [r3, #0]
    e0d6:	3301      	adds	r3, #1
    e0d8:	b2da      	uxtb	r2, r3
    e0da:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e2:	701a      	strb	r2, [r3, #0]
    e0e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ec:	781b      	ldrb	r3, [r3, #0]
    e0ee:	2bff      	cmp	r3, #255	; 0xff
    e0f0:	d105      	bne.n	e0fe <send_nav_values+0x812>
    e0f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fa:	2200      	movs	r2, #0
    e0fc:	701a      	strb	r2, [r3, #0]
    e0fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e106:	781b      	ldrb	r3, [r3, #0]
    e108:	461a      	mov	r2, r3
    e10a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e112:	7899      	ldrb	r1, [r3, #2]
    e114:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11c:	5499      	strb	r1, [r3, r2]
    e11e:	4b68      	ldr	r3, [pc, #416]	; (e2c0 <send_nav_values+0x9d4>)
    e120:	781a      	ldrb	r2, [r3, #0]
    e122:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12a:	781b      	ldrb	r3, [r3, #0]
    e12c:	4413      	add	r3, r2
    e12e:	b2da      	uxtb	r2, r3
    e130:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e138:	701a      	strb	r2, [r3, #0]
    e13a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e142:	781a      	ldrb	r2, [r3, #0]
    e144:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	4413      	add	r3, r2
    e150:	b2da      	uxtb	r2, r3
    e152:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15a:	701a      	strb	r2, [r3, #0]
    e15c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e164:	781b      	ldrb	r3, [r3, #0]
    e166:	3301      	adds	r3, #1
    e168:	b2da      	uxtb	r2, r3
    e16a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	701a      	strb	r2, [r3, #0]
    e174:	f24c 5349 	movw	r3, #50505	; 0xc549
    e178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17c:	781b      	ldrb	r3, [r3, #0]
    e17e:	2bff      	cmp	r3, #255	; 0xff
    e180:	d105      	bne.n	e18e <send_nav_values+0x8a2>
    e182:	f24c 5349 	movw	r3, #50505	; 0xc549
    e186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18a:	2200      	movs	r2, #0
    e18c:	701a      	strb	r2, [r3, #0]
    e18e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e196:	781b      	ldrb	r3, [r3, #0]
    e198:	461a      	mov	r2, r3
    e19a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a2:	78d9      	ldrb	r1, [r3, #3]
    e1a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ac:	5499      	strb	r1, [r3, r2]
    e1ae:	4b45      	ldr	r3, [pc, #276]	; (e2c4 <send_nav_values+0x9d8>)
    e1b0:	781a      	ldrb	r2, [r3, #0]
    e1b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ba:	781b      	ldrb	r3, [r3, #0]
    e1bc:	4413      	add	r3, r2
    e1be:	b2da      	uxtb	r2, r3
    e1c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c8:	701a      	strb	r2, [r3, #0]
    e1ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d2:	781a      	ldrb	r2, [r3, #0]
    e1d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	4413      	add	r3, r2
    e1e0:	b2da      	uxtb	r2, r3
    e1e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ea:	701a      	strb	r2, [r3, #0]
    e1ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f4:	781b      	ldrb	r3, [r3, #0]
    e1f6:	3301      	adds	r3, #1
    e1f8:	b2da      	uxtb	r2, r3
    e1fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e202:	701a      	strb	r2, [r3, #0]
    e204:	f24c 5349 	movw	r3, #50505	; 0xc549
    e208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20c:	781b      	ldrb	r3, [r3, #0]
    e20e:	2bff      	cmp	r3, #255	; 0xff
    e210:	d105      	bne.n	e21e <send_nav_values+0x932>
    e212:	f24c 5349 	movw	r3, #50505	; 0xc549
    e216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21a:	2200      	movs	r2, #0
    e21c:	701a      	strb	r2, [r3, #0]
    e21e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	461a      	mov	r2, r3
    e22a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e232:	7819      	ldrb	r1, [r3, #0]
    e234:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23c:	5499      	strb	r1, [r3, r2]
    e23e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e246:	781a      	ldrb	r2, [r3, #0]
    e248:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	4413      	add	r3, r2
    e254:	b2da      	uxtb	r2, r3
    e256:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25e:	701a      	strb	r2, [r3, #0]
    e260:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e268:	781a      	ldrb	r2, [r3, #0]
    e26a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e272:	781b      	ldrb	r3, [r3, #0]
    e274:	4413      	add	r3, r2
    e276:	b2da      	uxtb	r2, r3
    e278:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e280:	701a      	strb	r2, [r3, #0]
    e282:	f24c 5349 	movw	r3, #50505	; 0xc549
    e286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28a:	781b      	ldrb	r3, [r3, #0]
    e28c:	3301      	adds	r3, #1
    e28e:	b2da      	uxtb	r2, r3
    e290:	f24c 5349 	movw	r3, #50505	; 0xc549
    e294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e298:	701a      	strb	r2, [r3, #0]
    e29a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a2:	781b      	ldrb	r3, [r3, #0]
    e2a4:	2bff      	cmp	r3, #255	; 0xff
    e2a6:	d10f      	bne.n	e2c8 <send_nav_values+0x9dc>
    e2a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b0:	2200      	movs	r2, #0
    e2b2:	701a      	strb	r2, [r3, #0]
    e2b4:	e008      	b.n	e2c8 <send_nav_values+0x9dc>
    e2b6:	bf00      	nop
    e2b8:	2004cb03 	.word	0x2004cb03
    e2bc:	2004c88d 	.word	0x2004c88d
    e2c0:	2004c88e 	.word	0x2004c88e
    e2c4:	2004c88f 	.word	0x2004c88f
    e2c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d0:	781b      	ldrb	r3, [r3, #0]
    e2d2:	461a      	mov	r2, r3
    e2d4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	7859      	ldrb	r1, [r3, #1]
    e2de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	5499      	strb	r1, [r3, r2]
    e2e8:	4bd1      	ldr	r3, [pc, #836]	; (e630 <send_nav_values+0xd44>)
    e2ea:	781a      	ldrb	r2, [r3, #0]
    e2ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f4:	781b      	ldrb	r3, [r3, #0]
    e2f6:	4413      	add	r3, r2
    e2f8:	b2da      	uxtb	r2, r3
    e2fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e302:	701a      	strb	r2, [r3, #0]
    e304:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30c:	781a      	ldrb	r2, [r3, #0]
    e30e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e316:	781b      	ldrb	r3, [r3, #0]
    e318:	4413      	add	r3, r2
    e31a:	b2da      	uxtb	r2, r3
    e31c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e324:	701a      	strb	r2, [r3, #0]
    e326:	f24c 5349 	movw	r3, #50505	; 0xc549
    e32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32e:	781b      	ldrb	r3, [r3, #0]
    e330:	3301      	adds	r3, #1
    e332:	b2da      	uxtb	r2, r3
    e334:	f24c 5349 	movw	r3, #50505	; 0xc549
    e338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33c:	701a      	strb	r2, [r3, #0]
    e33e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	2bff      	cmp	r3, #255	; 0xff
    e34a:	d105      	bne.n	e358 <send_nav_values+0xa6c>
    e34c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e354:	2200      	movs	r2, #0
    e356:	701a      	strb	r2, [r3, #0]
    e358:	f24c 5349 	movw	r3, #50505	; 0xc549
    e35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e360:	781b      	ldrb	r3, [r3, #0]
    e362:	461a      	mov	r2, r3
    e364:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36c:	7899      	ldrb	r1, [r3, #2]
    e36e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e376:	5499      	strb	r1, [r3, r2]
    e378:	4bae      	ldr	r3, [pc, #696]	; (e634 <send_nav_values+0xd48>)
    e37a:	781a      	ldrb	r2, [r3, #0]
    e37c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e384:	781b      	ldrb	r3, [r3, #0]
    e386:	4413      	add	r3, r2
    e388:	b2da      	uxtb	r2, r3
    e38a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e392:	701a      	strb	r2, [r3, #0]
    e394:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39c:	781a      	ldrb	r2, [r3, #0]
    e39e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	4413      	add	r3, r2
    e3aa:	b2da      	uxtb	r2, r3
    e3ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b4:	701a      	strb	r2, [r3, #0]
    e3b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3be:	781b      	ldrb	r3, [r3, #0]
    e3c0:	3301      	adds	r3, #1
    e3c2:	b2da      	uxtb	r2, r3
    e3c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3cc:	701a      	strb	r2, [r3, #0]
    e3ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d6:	781b      	ldrb	r3, [r3, #0]
    e3d8:	2bff      	cmp	r3, #255	; 0xff
    e3da:	d105      	bne.n	e3e8 <send_nav_values+0xafc>
    e3dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e4:	2200      	movs	r2, #0
    e3e6:	701a      	strb	r2, [r3, #0]
    e3e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f0:	781b      	ldrb	r3, [r3, #0]
    e3f2:	461a      	mov	r2, r3
    e3f4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	78d9      	ldrb	r1, [r3, #3]
    e3fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e406:	5499      	strb	r1, [r3, r2]
    e408:	4b8b      	ldr	r3, [pc, #556]	; (e638 <send_nav_values+0xd4c>)
    e40a:	781a      	ldrb	r2, [r3, #0]
    e40c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e414:	781b      	ldrb	r3, [r3, #0]
    e416:	4413      	add	r3, r2
    e418:	b2da      	uxtb	r2, r3
    e41a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e422:	701a      	strb	r2, [r3, #0]
    e424:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42c:	781a      	ldrb	r2, [r3, #0]
    e42e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e436:	781b      	ldrb	r3, [r3, #0]
    e438:	4413      	add	r3, r2
    e43a:	b2da      	uxtb	r2, r3
    e43c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e444:	701a      	strb	r2, [r3, #0]
    e446:	f24c 5349 	movw	r3, #50505	; 0xc549
    e44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44e:	781b      	ldrb	r3, [r3, #0]
    e450:	3301      	adds	r3, #1
    e452:	b2da      	uxtb	r2, r3
    e454:	f24c 5349 	movw	r3, #50505	; 0xc549
    e458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45c:	701a      	strb	r2, [r3, #0]
    e45e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e466:	781b      	ldrb	r3, [r3, #0]
    e468:	2bff      	cmp	r3, #255	; 0xff
    e46a:	d105      	bne.n	e478 <send_nav_values+0xb8c>
    e46c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e474:	2200      	movs	r2, #0
    e476:	701a      	strb	r2, [r3, #0]
    e478:	f24c 5349 	movw	r3, #50505	; 0xc549
    e47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e480:	781b      	ldrb	r3, [r3, #0]
    e482:	461a      	mov	r2, r3
    e484:	f240 5358 	movw	r3, #1368	; 0x558
    e488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48c:	7819      	ldrb	r1, [r3, #0]
    e48e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e496:	5499      	strb	r1, [r3, r2]
    e498:	f240 5358 	movw	r3, #1368	; 0x558
    e49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a0:	781a      	ldrb	r2, [r3, #0]
    e4a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	781b      	ldrb	r3, [r3, #0]
    e4ac:	4413      	add	r3, r2
    e4ae:	b2da      	uxtb	r2, r3
    e4b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b8:	701a      	strb	r2, [r3, #0]
    e4ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	781a      	ldrb	r2, [r3, #0]
    e4c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	4413      	add	r3, r2
    e4d0:	b2da      	uxtb	r2, r3
    e4d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4da:	701a      	strb	r2, [r3, #0]
    e4dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	3301      	adds	r3, #1
    e4e8:	b2da      	uxtb	r2, r3
    e4ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f2:	701a      	strb	r2, [r3, #0]
    e4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	2bff      	cmp	r3, #255	; 0xff
    e500:	d105      	bne.n	e50e <send_nav_values+0xc22>
    e502:	f24c 5349 	movw	r3, #50505	; 0xc549
    e506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50a:	2200      	movs	r2, #0
    e50c:	701a      	strb	r2, [r3, #0]
    e50e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e516:	781b      	ldrb	r3, [r3, #0]
    e518:	461a      	mov	r2, r3
    e51a:	f240 5358 	movw	r3, #1368	; 0x558
    e51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e522:	7859      	ldrb	r1, [r3, #1]
    e524:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52c:	5499      	strb	r1, [r3, r2]
    e52e:	4b43      	ldr	r3, [pc, #268]	; (e63c <send_nav_values+0xd50>)
    e530:	781a      	ldrb	r2, [r3, #0]
    e532:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	4413      	add	r3, r2
    e53e:	b2da      	uxtb	r2, r3
    e540:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e548:	701a      	strb	r2, [r3, #0]
    e54a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e552:	781a      	ldrb	r2, [r3, #0]
    e554:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55c:	781b      	ldrb	r3, [r3, #0]
    e55e:	4413      	add	r3, r2
    e560:	b2da      	uxtb	r2, r3
    e562:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56a:	701a      	strb	r2, [r3, #0]
    e56c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e574:	781b      	ldrb	r3, [r3, #0]
    e576:	3301      	adds	r3, #1
    e578:	b2da      	uxtb	r2, r3
    e57a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e582:	701a      	strb	r2, [r3, #0]
    e584:	f24c 5349 	movw	r3, #50505	; 0xc549
    e588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58c:	781b      	ldrb	r3, [r3, #0]
    e58e:	2bff      	cmp	r3, #255	; 0xff
    e590:	d105      	bne.n	e59e <send_nav_values+0xcb2>
    e592:	f24c 5349 	movw	r3, #50505	; 0xc549
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	2200      	movs	r2, #0
    e59c:	701a      	strb	r2, [r3, #0]
    e59e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a6:	781b      	ldrb	r3, [r3, #0]
    e5a8:	461a      	mov	r2, r3
    e5aa:	f240 5358 	movw	r3, #1368	; 0x558
    e5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b2:	7899      	ldrb	r1, [r3, #2]
    e5b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5bc:	5499      	strb	r1, [r3, r2]
    e5be:	4b20      	ldr	r3, [pc, #128]	; (e640 <send_nav_values+0xd54>)
    e5c0:	781a      	ldrb	r2, [r3, #0]
    e5c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ca:	781b      	ldrb	r3, [r3, #0]
    e5cc:	4413      	add	r3, r2
    e5ce:	b2da      	uxtb	r2, r3
    e5d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	701a      	strb	r2, [r3, #0]
    e5da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e2:	781a      	ldrb	r2, [r3, #0]
    e5e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ec:	781b      	ldrb	r3, [r3, #0]
    e5ee:	4413      	add	r3, r2
    e5f0:	b2da      	uxtb	r2, r3
    e5f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fa:	701a      	strb	r2, [r3, #0]
    e5fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e604:	781b      	ldrb	r3, [r3, #0]
    e606:	3301      	adds	r3, #1
    e608:	b2da      	uxtb	r2, r3
    e60a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e612:	701a      	strb	r2, [r3, #0]
    e614:	f24c 5349 	movw	r3, #50505	; 0xc549
    e618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61c:	781b      	ldrb	r3, [r3, #0]
    e61e:	2bff      	cmp	r3, #255	; 0xff
    e620:	d110      	bne.n	e644 <send_nav_values+0xd58>
    e622:	f24c 5349 	movw	r3, #50505	; 0xc549
    e626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62a:	2200      	movs	r2, #0
    e62c:	701a      	strb	r2, [r3, #0]
    e62e:	e009      	b.n	e644 <send_nav_values+0xd58>
    e630:	2004c8d5 	.word	0x2004c8d5
    e634:	2004c8d6 	.word	0x2004c8d6
    e638:	2004c8d7 	.word	0x2004c8d7
    e63c:	20000559 	.word	0x20000559
    e640:	2000055a 	.word	0x2000055a
    e644:	f24c 5349 	movw	r3, #50505	; 0xc549
    e648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64c:	781b      	ldrb	r3, [r3, #0]
    e64e:	461a      	mov	r2, r3
    e650:	f240 5358 	movw	r3, #1368	; 0x558
    e654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e658:	78d9      	ldrb	r1, [r3, #3]
    e65a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e662:	5499      	strb	r1, [r3, r2]
    e664:	4bc2      	ldr	r3, [pc, #776]	; (e970 <send_nav_values+0x1084>)
    e666:	781a      	ldrb	r2, [r3, #0]
    e668:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e670:	781b      	ldrb	r3, [r3, #0]
    e672:	4413      	add	r3, r2
    e674:	b2da      	uxtb	r2, r3
    e676:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67e:	701a      	strb	r2, [r3, #0]
    e680:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e688:	781a      	ldrb	r2, [r3, #0]
    e68a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e692:	781b      	ldrb	r3, [r3, #0]
    e694:	4413      	add	r3, r2
    e696:	b2da      	uxtb	r2, r3
    e698:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a0:	701a      	strb	r2, [r3, #0]
    e6a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6aa:	781b      	ldrb	r3, [r3, #0]
    e6ac:	3301      	adds	r3, #1
    e6ae:	b2da      	uxtb	r2, r3
    e6b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b8:	701a      	strb	r2, [r3, #0]
    e6ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c2:	781b      	ldrb	r3, [r3, #0]
    e6c4:	2bff      	cmp	r3, #255	; 0xff
    e6c6:	d105      	bne.n	e6d4 <send_nav_values+0xde8>
    e6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d0:	2200      	movs	r2, #0
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6dc:	781b      	ldrb	r3, [r3, #0]
    e6de:	461a      	mov	r2, r3
    e6e0:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e8:	7819      	ldrb	r1, [r3, #0]
    e6ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f2:	5499      	strb	r1, [r3, r2]
    e6f4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fc:	781a      	ldrb	r2, [r3, #0]
    e6fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	781b      	ldrb	r3, [r3, #0]
    e708:	4413      	add	r3, r2
    e70a:	b2da      	uxtb	r2, r3
    e70c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e714:	701a      	strb	r2, [r3, #0]
    e716:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	781a      	ldrb	r2, [r3, #0]
    e720:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	4413      	add	r3, r2
    e72c:	b2da      	uxtb	r2, r3
    e72e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e736:	701a      	strb	r2, [r3, #0]
    e738:	f24c 5349 	movw	r3, #50505	; 0xc549
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	781b      	ldrb	r3, [r3, #0]
    e742:	3301      	adds	r3, #1
    e744:	b2da      	uxtb	r2, r3
    e746:	f24c 5349 	movw	r3, #50505	; 0xc549
    e74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74e:	701a      	strb	r2, [r3, #0]
    e750:	f24c 5349 	movw	r3, #50505	; 0xc549
    e754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	2bff      	cmp	r3, #255	; 0xff
    e75c:	d105      	bne.n	e76a <send_nav_values+0xe7e>
    e75e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	2200      	movs	r2, #0
    e768:	701a      	strb	r2, [r3, #0]
    e76a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e772:	781b      	ldrb	r3, [r3, #0]
    e774:	461a      	mov	r2, r3
    e776:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	7859      	ldrb	r1, [r3, #1]
    e780:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e788:	5499      	strb	r1, [r3, r2]
    e78a:	4b7a      	ldr	r3, [pc, #488]	; (e974 <send_nav_values+0x1088>)
    e78c:	781a      	ldrb	r2, [r3, #0]
    e78e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	781b      	ldrb	r3, [r3, #0]
    e798:	4413      	add	r3, r2
    e79a:	b2da      	uxtb	r2, r3
    e79c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a4:	701a      	strb	r2, [r3, #0]
    e7a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	781a      	ldrb	r2, [r3, #0]
    e7b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	4413      	add	r3, r2
    e7bc:	b2da      	uxtb	r2, r3
    e7be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	701a      	strb	r2, [r3, #0]
    e7c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d0:	781b      	ldrb	r3, [r3, #0]
    e7d2:	3301      	adds	r3, #1
    e7d4:	b2da      	uxtb	r2, r3
    e7d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	701a      	strb	r2, [r3, #0]
    e7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	2bff      	cmp	r3, #255	; 0xff
    e7ec:	d105      	bne.n	e7fa <send_nav_values+0xf0e>
    e7ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f6:	2200      	movs	r2, #0
    e7f8:	701a      	strb	r2, [r3, #0]
    e7fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e802:	781b      	ldrb	r3, [r3, #0]
    e804:	461a      	mov	r2, r3
    e806:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80e:	7899      	ldrb	r1, [r3, #2]
    e810:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e818:	5499      	strb	r1, [r3, r2]
    e81a:	4b57      	ldr	r3, [pc, #348]	; (e978 <send_nav_values+0x108c>)
    e81c:	781a      	ldrb	r2, [r3, #0]
    e81e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e826:	781b      	ldrb	r3, [r3, #0]
    e828:	4413      	add	r3, r2
    e82a:	b2da      	uxtb	r2, r3
    e82c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e834:	701a      	strb	r2, [r3, #0]
    e836:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83e:	781a      	ldrb	r2, [r3, #0]
    e840:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e848:	781b      	ldrb	r3, [r3, #0]
    e84a:	4413      	add	r3, r2
    e84c:	b2da      	uxtb	r2, r3
    e84e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e856:	701a      	strb	r2, [r3, #0]
    e858:	f24c 5349 	movw	r3, #50505	; 0xc549
    e85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e860:	781b      	ldrb	r3, [r3, #0]
    e862:	3301      	adds	r3, #1
    e864:	b2da      	uxtb	r2, r3
    e866:	f24c 5349 	movw	r3, #50505	; 0xc549
    e86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86e:	701a      	strb	r2, [r3, #0]
    e870:	f24c 5349 	movw	r3, #50505	; 0xc549
    e874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e878:	781b      	ldrb	r3, [r3, #0]
    e87a:	2bff      	cmp	r3, #255	; 0xff
    e87c:	d105      	bne.n	e88a <send_nav_values+0xf9e>
    e87e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e886:	2200      	movs	r2, #0
    e888:	701a      	strb	r2, [r3, #0]
    e88a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e892:	781b      	ldrb	r3, [r3, #0]
    e894:	461a      	mov	r2, r3
    e896:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	78d9      	ldrb	r1, [r3, #3]
    e8a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a8:	5499      	strb	r1, [r3, r2]
    e8aa:	4b34      	ldr	r3, [pc, #208]	; (e97c <send_nav_values+0x1090>)
    e8ac:	781a      	ldrb	r2, [r3, #0]
    e8ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	781b      	ldrb	r3, [r3, #0]
    e8b8:	4413      	add	r3, r2
    e8ba:	b2da      	uxtb	r2, r3
    e8bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c4:	701a      	strb	r2, [r3, #0]
    e8c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ce:	781a      	ldrb	r2, [r3, #0]
    e8d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d8:	781b      	ldrb	r3, [r3, #0]
    e8da:	4413      	add	r3, r2
    e8dc:	b2da      	uxtb	r2, r3
    e8de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e6:	701a      	strb	r2, [r3, #0]
    e8e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f0:	781b      	ldrb	r3, [r3, #0]
    e8f2:	3301      	adds	r3, #1
    e8f4:	b2da      	uxtb	r2, r3
    e8f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fe:	701a      	strb	r2, [r3, #0]
    e900:	f24c 5349 	movw	r3, #50505	; 0xc549
    e904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e908:	781b      	ldrb	r3, [r3, #0]
    e90a:	2bff      	cmp	r3, #255	; 0xff
    e90c:	d105      	bne.n	e91a <send_nav_values+0x102e>
    e90e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e916:	2200      	movs	r2, #0
    e918:	701a      	strb	r2, [r3, #0]
    e91a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e922:	781b      	ldrb	r3, [r3, #0]
    e924:	461a      	mov	r2, r3
    e926:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92e:	7819      	ldrb	r1, [r3, #0]
    e930:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	5499      	strb	r1, [r3, r2]
    e93a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e942:	781b      	ldrb	r3, [r3, #0]
    e944:	3301      	adds	r3, #1
    e946:	b2da      	uxtb	r2, r3
    e948:	f24c 5349 	movw	r3, #50505	; 0xc549
    e94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e950:	701a      	strb	r2, [r3, #0]
    e952:	f24c 5349 	movw	r3, #50505	; 0xc549
    e956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e95a:	781b      	ldrb	r3, [r3, #0]
    e95c:	2bff      	cmp	r3, #255	; 0xff
    e95e:	d10f      	bne.n	e980 <send_nav_values+0x1094>
    e960:	f24c 5349 	movw	r3, #50505	; 0xc549
    e964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e968:	2200      	movs	r2, #0
    e96a:	701a      	strb	r2, [r3, #0]
    e96c:	e008      	b.n	e980 <send_nav_values+0x1094>
    e96e:	bf00      	nop
    e970:	2000055b 	.word	0x2000055b
    e974:	2004c8d9 	.word	0x2004c8d9
    e978:	2004c8da 	.word	0x2004c8da
    e97c:	2004c8db 	.word	0x2004c8db
    e980:	f24c 5349 	movw	r3, #50505	; 0xc549
    e984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e988:	781b      	ldrb	r3, [r3, #0]
    e98a:	461a      	mov	r2, r3
    e98c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e994:	7819      	ldrb	r1, [r3, #0]
    e996:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	5499      	strb	r1, [r3, r2]
    e9a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	3301      	adds	r3, #1
    e9ac:	b2da      	uxtb	r2, r3
    e9ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	701a      	strb	r2, [r3, #0]
    e9b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	781b      	ldrb	r3, [r3, #0]
    e9c2:	2bff      	cmp	r3, #255	; 0xff
    e9c4:	d105      	bne.n	e9d2 <send_nav_values+0x10e6>
    e9c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ce:	2200      	movs	r2, #0
    e9d0:	701a      	strb	r2, [r3, #0]
    e9d2:	f242 0339 	movw	r3, #8249	; 0x2039
    e9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	b2db      	uxtb	r3, r3
    e9de:	f003 0310 	and.w	r3, r3, #16
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d15a      	bne.n	ea9c <send_nav_values+0x11b0>
    e9e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ee:	781b      	ldrb	r3, [r3, #0]
    e9f0:	b2db      	uxtb	r3, r3
    e9f2:	461a      	mov	r2, r3
    e9f4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fc:	5c9a      	ldrb	r2, [r3, r2]
    e9fe:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ea02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea06:	701a      	strb	r2, [r3, #0]
    ea08:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ea0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea10:	2200      	movs	r2, #0
    ea12:	701a      	strb	r2, [r3, #0]
    ea14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	b2db      	uxtb	r3, r3
    ea20:	3301      	adds	r3, #1
    ea22:	b2da      	uxtb	r2, r3
    ea24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2c:	701a      	strb	r2, [r3, #0]
    ea2e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea36:	781b      	ldrb	r3, [r3, #0]
    ea38:	b2db      	uxtb	r3, r3
    ea3a:	2bff      	cmp	r3, #255	; 0xff
    ea3c:	d105      	bne.n	ea4a <send_nav_values+0x115e>
    ea3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea46:	2200      	movs	r2, #0
    ea48:	701a      	strb	r2, [r3, #0]
    ea4a:	f242 0338 	movw	r3, #8248	; 0x2038
    ea4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea52:	f242 0238 	movw	r2, #8248	; 0x2038
    ea56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea5a:	7812      	ldrb	r2, [r2, #0]
    ea5c:	b2d2      	uxtb	r2, r2
    ea5e:	f042 0201 	orr.w	r2, r2, #1
    ea62:	b2d2      	uxtb	r2, r2
    ea64:	701a      	strb	r2, [r3, #0]
    ea66:	f242 0339 	movw	r3, #8249	; 0x2039
    ea6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea6e:	f242 0239 	movw	r2, #8249	; 0x2039
    ea72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea76:	7812      	ldrb	r2, [r2, #0]
    ea78:	b2d2      	uxtb	r2, r2
    ea7a:	f042 0210 	orr.w	r2, r2, #16
    ea7e:	b2d2      	uxtb	r2, r2
    ea80:	701a      	strb	r2, [r3, #0]
    ea82:	e00b      	b.n	ea9c <send_nav_values+0x11b0>
    ea84:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8c:	781b      	ldrb	r3, [r3, #0]
    ea8e:	3301      	adds	r3, #1
    ea90:	b2da      	uxtb	r2, r3
    ea92:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9a:	701a      	strb	r2, [r3, #0]
}
    ea9c:	46bd      	mov	sp, r7
    ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    eaa2:	4770      	bx	lr

0000eaa4 <course_run>:

void course_run(void){
    eaa4:	b580      	push	{r7, lr}
    eaa6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eaa8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab0:	781b      	ldrb	r3, [r3, #0]
    eab2:	2b02      	cmp	r3, #2
    eab4:	d006      	beq.n	eac4 <course_run+0x20>
    eab6:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	2b03      	cmp	r3, #3
    eac2:	d112      	bne.n	eaea <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    eac4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    eac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	2b02      	cmp	r3, #2
    ead0:	d901      	bls.n	ead6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    ead2:	f003 faf1 	bl	120b8 <course_pid_run>
    desired_roll = nav_desired_roll;
    ead6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    eada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eade:	681a      	ldr	r2, [r3, #0]
    eae0:	f64c 0374 	movw	r3, #51316	; 0xc874
    eae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    eaea:	bd80      	pop	{r7, pc}

0000eaec <altitude_control_task>:

void altitude_control_task(void)
{
    eaec:	b580      	push	{r7, lr}
    eaee:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eaf0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	2b02      	cmp	r3, #2
    eafc:	d006      	beq.n	eb0c <altitude_control_task+0x20>
    eafe:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb06:	781b      	ldrb	r3, [r3, #0]
    eb08:	2b03      	cmp	r3, #3
    eb0a:	d108      	bne.n	eb1e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eb0c:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	2b03      	cmp	r3, #3
    eb18:	d101      	bne.n	eb1e <altitude_control_task+0x32>
      			altitude_pid_run();
    eb1a:	f003 fd55 	bl	125c8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eb1e:	bd80      	pop	{r7, pc}

0000eb20 <climb_control_task>:
void climb_control_task(void)
{
    eb20:	b580      	push	{r7, lr}
    eb22:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eb24:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	2b02      	cmp	r3, #2
    eb30:	d006      	beq.n	eb40 <climb_control_task+0x20>
    eb32:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3a:	781b      	ldrb	r3, [r3, #0]
    eb3c:	2b03      	cmp	r3, #3
    eb3e:	d135      	bne.n	ebac <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eb40:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb48:	781b      	ldrb	r3, [r3, #0]
    eb4a:	2b01      	cmp	r3, #1
    eb4c:	d901      	bls.n	eb52 <climb_control_task+0x32>
        	climb_pid_run();
    eb4e:	f003 fb6b 	bl	12228 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    eb52:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb5a:	781b      	ldrb	r3, [r3, #0]
    eb5c:	2b01      	cmp	r3, #1
    eb5e:	d10a      	bne.n	eb76 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    eb60:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    eb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb68:	881b      	ldrh	r3, [r3, #0]
    eb6a:	b29a      	uxth	r2, r3
    eb6c:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb74:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eb76:	f24c 5335 	movw	r3, #50485	; 0xc535
    eb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7e:	781b      	ldrb	r3, [r3, #0]
    eb80:	2b00      	cmp	r3, #0
    eb82:	d10d      	bne.n	eba0 <climb_control_task+0x80>
    eb84:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	881b      	ldrh	r3, [r3, #0]
    eb8e:	2b00      	cmp	r3, #0
    eb90:	d10c      	bne.n	ebac <climb_control_task+0x8c>
    eb92:	f24c 5340 	movw	r3, #50496	; 0xc540
    eb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	2b00      	cmp	r3, #0
    eb9e:	d105      	bne.n	ebac <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eba0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba8:	2200      	movs	r2, #0
    ebaa:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ebac:	bd80      	pop	{r7, pc}
    ebae:	bf00      	nop

0000ebb0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ebb0:	b580      	push	{r7, lr}
    ebb2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ebb4:	f003 f926 	bl	11e04 <ir_update>
    estimator_update_state_infrared();
    ebb8:	f006 fbac 	bl	15314 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ebbc:	f003 f990 	bl	11ee0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ebc0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ebc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc8:	881a      	ldrh	r2, [r3, #0]
    ebca:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ebd4:	f64c 037e 	movw	r3, #51326	; 0xc87e
    ebd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebdc:	881a      	ldrh	r2, [r3, #0]
    ebde:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ebe8:	f64c 0380 	movw	r3, #51328	; 0xc880
    ebec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf0:	881a      	ldrh	r2, [r3, #0]
    ebf2:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebfa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ebfc:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec04:	681b      	ldr	r3, [r3, #0]
    ec06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec0a:	4618      	mov	r0, r3
    ec0c:	f009 f852 	bl	17cb4 <__aeabi_f2d>
    ec10:	4602      	mov	r2, r0
    ec12:	460b      	mov	r3, r1
    ec14:	4610      	mov	r0, r2
    ec16:	4619      	mov	r1, r3
    ec18:	f04f 0200 	mov.w	r2, #0
    ec1c:	f04f 0300 	mov.w	r3, #0
    ec20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec24:	f009 f89a 	bl	17d5c <__aeabi_dmul>
    ec28:	4602      	mov	r2, r0
    ec2a:	460b      	mov	r3, r1
    ec2c:	4610      	mov	r0, r2
    ec2e:	4619      	mov	r1, r3
    ec30:	f04f 0200 	mov.w	r2, #0
    ec34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec38:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ec3c:	f009 fb00 	bl	18240 <__aeabi_dcmplt>
    ec40:	4603      	mov	r3, r0
    ec42:	2b00      	cmp	r3, #0
    ec44:	d002      	beq.n	ec4c <stabilisation_task+0x9c>
    ec46:	f64d 2280 	movw	r2, #55936	; 0xda80
    ec4a:	e046      	b.n	ecda <stabilisation_task+0x12a>
    ec4c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec54:	681b      	ldr	r3, [r3, #0]
    ec56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec5a:	4618      	mov	r0, r3
    ec5c:	f009 f82a 	bl	17cb4 <__aeabi_f2d>
    ec60:	4602      	mov	r2, r0
    ec62:	460b      	mov	r3, r1
    ec64:	4610      	mov	r0, r2
    ec66:	4619      	mov	r1, r3
    ec68:	f04f 0200 	mov.w	r2, #0
    ec6c:	f04f 0300 	mov.w	r3, #0
    ec70:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec74:	f009 f872 	bl	17d5c <__aeabi_dmul>
    ec78:	4602      	mov	r2, r0
    ec7a:	460b      	mov	r3, r1
    ec7c:	4610      	mov	r0, r2
    ec7e:	4619      	mov	r1, r3
    ec80:	f04f 0200 	mov.w	r2, #0
    ec84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec88:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ec8c:	f009 faf6 	bl	1827c <__aeabi_dcmpgt>
    ec90:	4603      	mov	r3, r0
    ec92:	2b00      	cmp	r3, #0
    ec94:	d002      	beq.n	ec9c <stabilisation_task+0xec>
    ec96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ec9a:	e01d      	b.n	ecd8 <stabilisation_task+0x128>
    ec9c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca4:	681b      	ldr	r3, [r3, #0]
    eca6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ecaa:	4618      	mov	r0, r3
    ecac:	f009 f802 	bl	17cb4 <__aeabi_f2d>
    ecb0:	4602      	mov	r2, r0
    ecb2:	460b      	mov	r3, r1
    ecb4:	4610      	mov	r0, r2
    ecb6:	4619      	mov	r1, r3
    ecb8:	f04f 0200 	mov.w	r2, #0
    ecbc:	f04f 0300 	mov.w	r3, #0
    ecc0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ecc4:	f009 f84a 	bl	17d5c <__aeabi_dmul>
    ecc8:	4602      	mov	r2, r0
    ecca:	460b      	mov	r3, r1
    eccc:	4610      	mov	r0, r2
    ecce:	4619      	mov	r1, r3
    ecd0:	f009 fade 	bl	18290 <__aeabi_d2iz>
    ecd4:	4603      	mov	r3, r0
    ecd6:	b29b      	uxth	r3, r3
    ecd8:	b29a      	uxth	r2, r3
    ecda:	f24c 6368 	movw	r3, #50792	; 0xc668
    ecde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ece4:	bd80      	pop	{r7, pc}
    ece6:	bf00      	nop

0000ece8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ece8:	b580      	push	{r7, lr}
    ecea:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ecec:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    ecf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf4:	2200      	movs	r2, #0
    ecf6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ecf8:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	781b      	ldrb	r3, [r3, #0]
    ed02:	2b00      	cmp	r3, #0
    ed04:	f001 81af 	beq.w	10066 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ed08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	781a      	ldrb	r2, [r3, #0]
    ed12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	b2db      	uxtb	r3, r3
    ed1e:	429a      	cmp	r2, r3
    ed20:	d313      	bcc.n	ed4a <send_gps_pos+0x62>
    ed22:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	b2db      	uxtb	r3, r3
    ed2e:	461a      	mov	r2, r3
    ed30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	781b      	ldrb	r3, [r3, #0]
    ed3a:	1ad3      	subs	r3, r2, r3
    ed3c:	33ff      	adds	r3, #255	; 0xff
    ed3e:	2b21      	cmp	r3, #33	; 0x21
    ed40:	bfd4      	ite	le
    ed42:	2300      	movle	r3, #0
    ed44:	2301      	movgt	r3, #1
    ed46:	b2db      	uxtb	r3, r3
    ed48:	e011      	b.n	ed6e <send_gps_pos+0x86>
    ed4a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed52:	781b      	ldrb	r3, [r3, #0]
    ed54:	b2db      	uxtb	r3, r3
    ed56:	461a      	mov	r2, r3
    ed58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	781b      	ldrb	r3, [r3, #0]
    ed62:	1ad3      	subs	r3, r2, r3
    ed64:	2b21      	cmp	r3, #33	; 0x21
    ed66:	bfd4      	ite	le
    ed68:	2300      	movle	r3, #0
    ed6a:	2301      	movgt	r3, #1
    ed6c:	b2db      	uxtb	r3, r3
    ed6e:	2b00      	cmp	r3, #0
    ed70:	f001 816b 	beq.w	1004a <send_gps_pos+0x1362>
    ed74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	461a      	mov	r2, r3
    ed80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed88:	2105      	movs	r1, #5
    ed8a:	5499      	strb	r1, [r3, r2]
    ed8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	3301      	adds	r3, #1
    ed98:	b2da      	uxtb	r2, r3
    ed9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	701a      	strb	r2, [r3, #0]
    eda4:	f24c 5349 	movw	r3, #50505	; 0xc549
    eda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	2bff      	cmp	r3, #255	; 0xff
    edb0:	d105      	bne.n	edbe <send_gps_pos+0xd6>
    edb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	2200      	movs	r2, #0
    edbc:	701a      	strb	r2, [r3, #0]
    edbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    edc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc6:	781b      	ldrb	r3, [r3, #0]
    edc8:	461a      	mov	r2, r3
    edca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd2:	2108      	movs	r1, #8
    edd4:	5499      	strb	r1, [r3, r2]
    edd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    edda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edde:	781b      	ldrb	r3, [r3, #0]
    ede0:	3301      	adds	r3, #1
    ede2:	b2da      	uxtb	r2, r3
    ede4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ede8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edec:	701a      	strb	r2, [r3, #0]
    edee:	f24c 5349 	movw	r3, #50505	; 0xc549
    edf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf6:	781b      	ldrb	r3, [r3, #0]
    edf8:	2bff      	cmp	r3, #255	; 0xff
    edfa:	d105      	bne.n	ee08 <send_gps_pos+0x120>
    edfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee04:	2200      	movs	r2, #0
    ee06:	701a      	strb	r2, [r3, #0]
    ee08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	2208      	movs	r2, #8
    ee12:	701a      	strb	r2, [r3, #0]
    ee14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1c:	2208      	movs	r2, #8
    ee1e:	701a      	strb	r2, [r3, #0]
    ee20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee28:	781b      	ldrb	r3, [r3, #0]
    ee2a:	461a      	mov	r2, r3
    ee2c:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ee30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee34:	7819      	ldrb	r1, [r3, #0]
    ee36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3e:	5499      	strb	r1, [r3, r2]
    ee40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee48:	781a      	ldrb	r2, [r3, #0]
    ee4a:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ee4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee52:	781b      	ldrb	r3, [r3, #0]
    ee54:	4413      	add	r3, r2
    ee56:	b2da      	uxtb	r2, r3
    ee58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee60:	701a      	strb	r2, [r3, #0]
    ee62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee6a:	781a      	ldrb	r2, [r3, #0]
    ee6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee74:	781b      	ldrb	r3, [r3, #0]
    ee76:	4413      	add	r3, r2
    ee78:	b2da      	uxtb	r2, r3
    ee7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee82:	701a      	strb	r2, [r3, #0]
    ee84:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8c:	781b      	ldrb	r3, [r3, #0]
    ee8e:	3301      	adds	r3, #1
    ee90:	b2da      	uxtb	r2, r3
    ee92:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9a:	701a      	strb	r2, [r3, #0]
    ee9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    eea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea4:	781b      	ldrb	r3, [r3, #0]
    eea6:	2bff      	cmp	r3, #255	; 0xff
    eea8:	d105      	bne.n	eeb6 <send_gps_pos+0x1ce>
    eeaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb2:	2200      	movs	r2, #0
    eeb4:	701a      	strb	r2, [r3, #0]
    eeb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebe:	781b      	ldrb	r3, [r3, #0]
    eec0:	461a      	mov	r2, r3
    eec2:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeca:	7819      	ldrb	r1, [r3, #0]
    eecc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed4:	5499      	strb	r1, [r3, r2]
    eed6:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eede:	781a      	ldrb	r2, [r3, #0]
    eee0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	781b      	ldrb	r3, [r3, #0]
    eeea:	4413      	add	r3, r2
    eeec:	b2da      	uxtb	r2, r3
    eeee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef6:	701a      	strb	r2, [r3, #0]
    eef8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef00:	781a      	ldrb	r2, [r3, #0]
    ef02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	4413      	add	r3, r2
    ef0e:	b2da      	uxtb	r2, r3
    ef10:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef18:	701a      	strb	r2, [r3, #0]
    ef1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef22:	781b      	ldrb	r3, [r3, #0]
    ef24:	3301      	adds	r3, #1
    ef26:	b2da      	uxtb	r2, r3
    ef28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef30:	701a      	strb	r2, [r3, #0]
    ef32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3a:	781b      	ldrb	r3, [r3, #0]
    ef3c:	2bff      	cmp	r3, #255	; 0xff
    ef3e:	d105      	bne.n	ef4c <send_gps_pos+0x264>
    ef40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	2200      	movs	r2, #0
    ef4a:	701a      	strb	r2, [r3, #0]
    ef4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef54:	781b      	ldrb	r3, [r3, #0]
    ef56:	461a      	mov	r2, r3
    ef58:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	7859      	ldrb	r1, [r3, #1]
    ef62:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	5499      	strb	r1, [r3, r2]
    ef6c:	4bd1      	ldr	r3, [pc, #836]	; (f2b4 <send_gps_pos+0x5cc>)
    ef6e:	781a      	ldrb	r2, [r3, #0]
    ef70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	781b      	ldrb	r3, [r3, #0]
    ef7a:	4413      	add	r3, r2
    ef7c:	b2da      	uxtb	r2, r3
    ef7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef86:	701a      	strb	r2, [r3, #0]
    ef88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	781a      	ldrb	r2, [r3, #0]
    ef92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9a:	781b      	ldrb	r3, [r3, #0]
    ef9c:	4413      	add	r3, r2
    ef9e:	b2da      	uxtb	r2, r3
    efa0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	701a      	strb	r2, [r3, #0]
    efaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    efae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb2:	781b      	ldrb	r3, [r3, #0]
    efb4:	3301      	adds	r3, #1
    efb6:	b2da      	uxtb	r2, r3
    efb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	701a      	strb	r2, [r3, #0]
    efc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    efc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	2bff      	cmp	r3, #255	; 0xff
    efce:	d105      	bne.n	efdc <send_gps_pos+0x2f4>
    efd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    efd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd8:	2200      	movs	r2, #0
    efda:	701a      	strb	r2, [r3, #0]
    efdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    efe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe4:	781b      	ldrb	r3, [r3, #0]
    efe6:	461a      	mov	r2, r3
    efe8:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    efec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff0:	7899      	ldrb	r1, [r3, #2]
    eff2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effa:	5499      	strb	r1, [r3, r2]
    effc:	4bae      	ldr	r3, [pc, #696]	; (f2b8 <send_gps_pos+0x5d0>)
    effe:	781a      	ldrb	r2, [r3, #0]
    f000:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	4413      	add	r3, r2
    f00c:	b2da      	uxtb	r2, r3
    f00e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f016:	701a      	strb	r2, [r3, #0]
    f018:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f020:	781a      	ldrb	r2, [r3, #0]
    f022:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02a:	781b      	ldrb	r3, [r3, #0]
    f02c:	4413      	add	r3, r2
    f02e:	b2da      	uxtb	r2, r3
    f030:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f038:	701a      	strb	r2, [r3, #0]
    f03a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f042:	781b      	ldrb	r3, [r3, #0]
    f044:	3301      	adds	r3, #1
    f046:	b2da      	uxtb	r2, r3
    f048:	f24c 5349 	movw	r3, #50505	; 0xc549
    f04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f050:	701a      	strb	r2, [r3, #0]
    f052:	f24c 5349 	movw	r3, #50505	; 0xc549
    f056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05a:	781b      	ldrb	r3, [r3, #0]
    f05c:	2bff      	cmp	r3, #255	; 0xff
    f05e:	d105      	bne.n	f06c <send_gps_pos+0x384>
    f060:	f24c 5349 	movw	r3, #50505	; 0xc549
    f064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f068:	2200      	movs	r2, #0
    f06a:	701a      	strb	r2, [r3, #0]
    f06c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f074:	781b      	ldrb	r3, [r3, #0]
    f076:	461a      	mov	r2, r3
    f078:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    f07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f080:	78d9      	ldrb	r1, [r3, #3]
    f082:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08a:	5499      	strb	r1, [r3, r2]
    f08c:	4b8b      	ldr	r3, [pc, #556]	; (f2bc <send_gps_pos+0x5d4>)
    f08e:	781a      	ldrb	r2, [r3, #0]
    f090:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f098:	781b      	ldrb	r3, [r3, #0]
    f09a:	4413      	add	r3, r2
    f09c:	b2da      	uxtb	r2, r3
    f09e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a6:	701a      	strb	r2, [r3, #0]
    f0a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b0:	781a      	ldrb	r2, [r3, #0]
    f0b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ba:	781b      	ldrb	r3, [r3, #0]
    f0bc:	4413      	add	r3, r2
    f0be:	b2da      	uxtb	r2, r3
    f0c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c8:	701a      	strb	r2, [r3, #0]
    f0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d2:	781b      	ldrb	r3, [r3, #0]
    f0d4:	3301      	adds	r3, #1
    f0d6:	b2da      	uxtb	r2, r3
    f0d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e0:	701a      	strb	r2, [r3, #0]
    f0e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ea:	781b      	ldrb	r3, [r3, #0]
    f0ec:	2bff      	cmp	r3, #255	; 0xff
    f0ee:	d105      	bne.n	f0fc <send_gps_pos+0x414>
    f0f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f8:	2200      	movs	r2, #0
    f0fa:	701a      	strb	r2, [r3, #0]
    f0fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f104:	781b      	ldrb	r3, [r3, #0]
    f106:	461a      	mov	r2, r3
    f108:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f110:	7819      	ldrb	r1, [r3, #0]
    f112:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11a:	5499      	strb	r1, [r3, r2]
    f11c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f124:	781a      	ldrb	r2, [r3, #0]
    f126:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	781b      	ldrb	r3, [r3, #0]
    f130:	4413      	add	r3, r2
    f132:	b2da      	uxtb	r2, r3
    f134:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13c:	701a      	strb	r2, [r3, #0]
    f13e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	781a      	ldrb	r2, [r3, #0]
    f148:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f150:	781b      	ldrb	r3, [r3, #0]
    f152:	4413      	add	r3, r2
    f154:	b2da      	uxtb	r2, r3
    f156:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15e:	701a      	strb	r2, [r3, #0]
    f160:	f24c 5349 	movw	r3, #50505	; 0xc549
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	781b      	ldrb	r3, [r3, #0]
    f16a:	3301      	adds	r3, #1
    f16c:	b2da      	uxtb	r2, r3
    f16e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f176:	701a      	strb	r2, [r3, #0]
    f178:	f24c 5349 	movw	r3, #50505	; 0xc549
    f17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	2bff      	cmp	r3, #255	; 0xff
    f184:	d105      	bne.n	f192 <send_gps_pos+0x4aa>
    f186:	f24c 5349 	movw	r3, #50505	; 0xc549
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	2200      	movs	r2, #0
    f190:	701a      	strb	r2, [r3, #0]
    f192:	f24c 5349 	movw	r3, #50505	; 0xc549
    f196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19a:	781b      	ldrb	r3, [r3, #0]
    f19c:	461a      	mov	r2, r3
    f19e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a6:	7859      	ldrb	r1, [r3, #1]
    f1a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b0:	5499      	strb	r1, [r3, r2]
    f1b2:	4b43      	ldr	r3, [pc, #268]	; (f2c0 <send_gps_pos+0x5d8>)
    f1b4:	781a      	ldrb	r2, [r3, #0]
    f1b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1be:	781b      	ldrb	r3, [r3, #0]
    f1c0:	4413      	add	r3, r2
    f1c2:	b2da      	uxtb	r2, r3
    f1c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1cc:	701a      	strb	r2, [r3, #0]
    f1ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	781a      	ldrb	r2, [r3, #0]
    f1d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e0:	781b      	ldrb	r3, [r3, #0]
    f1e2:	4413      	add	r3, r2
    f1e4:	b2da      	uxtb	r2, r3
    f1e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ee:	701a      	strb	r2, [r3, #0]
    f1f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f8:	781b      	ldrb	r3, [r3, #0]
    f1fa:	3301      	adds	r3, #1
    f1fc:	b2da      	uxtb	r2, r3
    f1fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f206:	701a      	strb	r2, [r3, #0]
    f208:	f24c 5349 	movw	r3, #50505	; 0xc549
    f20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	2bff      	cmp	r3, #255	; 0xff
    f214:	d105      	bne.n	f222 <send_gps_pos+0x53a>
    f216:	f24c 5349 	movw	r3, #50505	; 0xc549
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	2200      	movs	r2, #0
    f220:	701a      	strb	r2, [r3, #0]
    f222:	f24c 5349 	movw	r3, #50505	; 0xc549
    f226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22a:	781b      	ldrb	r3, [r3, #0]
    f22c:	461a      	mov	r2, r3
    f22e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f236:	7899      	ldrb	r1, [r3, #2]
    f238:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f240:	5499      	strb	r1, [r3, r2]
    f242:	4b20      	ldr	r3, [pc, #128]	; (f2c4 <send_gps_pos+0x5dc>)
    f244:	781a      	ldrb	r2, [r3, #0]
    f246:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	4413      	add	r3, r2
    f252:	b2da      	uxtb	r2, r3
    f254:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	701a      	strb	r2, [r3, #0]
    f25e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f266:	781a      	ldrb	r2, [r3, #0]
    f268:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f270:	781b      	ldrb	r3, [r3, #0]
    f272:	4413      	add	r3, r2
    f274:	b2da      	uxtb	r2, r3
    f276:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27e:	701a      	strb	r2, [r3, #0]
    f280:	f24c 5349 	movw	r3, #50505	; 0xc549
    f284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	3301      	adds	r3, #1
    f28c:	b2da      	uxtb	r2, r3
    f28e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f296:	701a      	strb	r2, [r3, #0]
    f298:	f24c 5349 	movw	r3, #50505	; 0xc549
    f29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	2bff      	cmp	r3, #255	; 0xff
    f2a4:	d110      	bne.n	f2c8 <send_gps_pos+0x5e0>
    f2a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ae:	2200      	movs	r2, #0
    f2b0:	701a      	strb	r2, [r3, #0]
    f2b2:	e009      	b.n	f2c8 <send_gps_pos+0x5e0>
    f2b4:	2004c6cd 	.word	0x2004c6cd
    f2b8:	2004c6ce 	.word	0x2004c6ce
    f2bc:	2004c6cf 	.word	0x2004c6cf
    f2c0:	2004c6d1 	.word	0x2004c6d1
    f2c4:	2004c6d2 	.word	0x2004c6d2
    f2c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d0:	781b      	ldrb	r3, [r3, #0]
    f2d2:	461a      	mov	r2, r3
    f2d4:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2dc:	78d9      	ldrb	r1, [r3, #3]
    f2de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e6:	5499      	strb	r1, [r3, r2]
    f2e8:	4bd3      	ldr	r3, [pc, #844]	; (f638 <send_gps_pos+0x950>)
    f2ea:	781a      	ldrb	r2, [r3, #0]
    f2ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f4:	781b      	ldrb	r3, [r3, #0]
    f2f6:	4413      	add	r3, r2
    f2f8:	b2da      	uxtb	r2, r3
    f2fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f302:	701a      	strb	r2, [r3, #0]
    f304:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30c:	781a      	ldrb	r2, [r3, #0]
    f30e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f316:	781b      	ldrb	r3, [r3, #0]
    f318:	4413      	add	r3, r2
    f31a:	b2da      	uxtb	r2, r3
    f31c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f324:	701a      	strb	r2, [r3, #0]
    f326:	f24c 5349 	movw	r3, #50505	; 0xc549
    f32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32e:	781b      	ldrb	r3, [r3, #0]
    f330:	3301      	adds	r3, #1
    f332:	b2da      	uxtb	r2, r3
    f334:	f24c 5349 	movw	r3, #50505	; 0xc549
    f338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33c:	701a      	strb	r2, [r3, #0]
    f33e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f346:	781b      	ldrb	r3, [r3, #0]
    f348:	2bff      	cmp	r3, #255	; 0xff
    f34a:	d105      	bne.n	f358 <send_gps_pos+0x670>
    f34c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f354:	2200      	movs	r2, #0
    f356:	701a      	strb	r2, [r3, #0]
    f358:	f24c 5349 	movw	r3, #50505	; 0xc549
    f35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	461a      	mov	r2, r3
    f364:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36c:	7819      	ldrb	r1, [r3, #0]
    f36e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f376:	5499      	strb	r1, [r3, r2]
    f378:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f380:	781a      	ldrb	r2, [r3, #0]
    f382:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	781b      	ldrb	r3, [r3, #0]
    f38c:	4413      	add	r3, r2
    f38e:	b2da      	uxtb	r2, r3
    f390:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f398:	701a      	strb	r2, [r3, #0]
    f39a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a2:	781a      	ldrb	r2, [r3, #0]
    f3a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ac:	781b      	ldrb	r3, [r3, #0]
    f3ae:	4413      	add	r3, r2
    f3b0:	b2da      	uxtb	r2, r3
    f3b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ba:	701a      	strb	r2, [r3, #0]
    f3bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c4:	781b      	ldrb	r3, [r3, #0]
    f3c6:	3301      	adds	r3, #1
    f3c8:	b2da      	uxtb	r2, r3
    f3ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d2:	701a      	strb	r2, [r3, #0]
    f3d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	2bff      	cmp	r3, #255	; 0xff
    f3e0:	d105      	bne.n	f3ee <send_gps_pos+0x706>
    f3e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	2200      	movs	r2, #0
    f3ec:	701a      	strb	r2, [r3, #0]
    f3ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	461a      	mov	r2, r3
    f3fa:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	7859      	ldrb	r1, [r3, #1]
    f404:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40c:	5499      	strb	r1, [r3, r2]
    f40e:	4b8b      	ldr	r3, [pc, #556]	; (f63c <send_gps_pos+0x954>)
    f410:	781a      	ldrb	r2, [r3, #0]
    f412:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	781b      	ldrb	r3, [r3, #0]
    f41c:	4413      	add	r3, r2
    f41e:	b2da      	uxtb	r2, r3
    f420:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f428:	701a      	strb	r2, [r3, #0]
    f42a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	781a      	ldrb	r2, [r3, #0]
    f434:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	4413      	add	r3, r2
    f440:	b2da      	uxtb	r2, r3
    f442:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	701a      	strb	r2, [r3, #0]
    f44c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	3301      	adds	r3, #1
    f458:	b2da      	uxtb	r2, r3
    f45a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f462:	701a      	strb	r2, [r3, #0]
    f464:	f24c 5349 	movw	r3, #50505	; 0xc549
    f468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46c:	781b      	ldrb	r3, [r3, #0]
    f46e:	2bff      	cmp	r3, #255	; 0xff
    f470:	d105      	bne.n	f47e <send_gps_pos+0x796>
    f472:	f24c 5349 	movw	r3, #50505	; 0xc549
    f476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47a:	2200      	movs	r2, #0
    f47c:	701a      	strb	r2, [r3, #0]
    f47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f486:	781b      	ldrb	r3, [r3, #0]
    f488:	461a      	mov	r2, r3
    f48a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f492:	7899      	ldrb	r1, [r3, #2]
    f494:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49c:	5499      	strb	r1, [r3, r2]
    f49e:	4b68      	ldr	r3, [pc, #416]	; (f640 <send_gps_pos+0x958>)
    f4a0:	781a      	ldrb	r2, [r3, #0]
    f4a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4aa:	781b      	ldrb	r3, [r3, #0]
    f4ac:	4413      	add	r3, r2
    f4ae:	b2da      	uxtb	r2, r3
    f4b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b8:	701a      	strb	r2, [r3, #0]
    f4ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c2:	781a      	ldrb	r2, [r3, #0]
    f4c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4cc:	781b      	ldrb	r3, [r3, #0]
    f4ce:	4413      	add	r3, r2
    f4d0:	b2da      	uxtb	r2, r3
    f4d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4da:	701a      	strb	r2, [r3, #0]
    f4dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e4:	781b      	ldrb	r3, [r3, #0]
    f4e6:	3301      	adds	r3, #1
    f4e8:	b2da      	uxtb	r2, r3
    f4ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f2:	701a      	strb	r2, [r3, #0]
    f4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fc:	781b      	ldrb	r3, [r3, #0]
    f4fe:	2bff      	cmp	r3, #255	; 0xff
    f500:	d105      	bne.n	f50e <send_gps_pos+0x826>
    f502:	f24c 5349 	movw	r3, #50505	; 0xc549
    f506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50a:	2200      	movs	r2, #0
    f50c:	701a      	strb	r2, [r3, #0]
    f50e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f516:	781b      	ldrb	r3, [r3, #0]
    f518:	461a      	mov	r2, r3
    f51a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f522:	78d9      	ldrb	r1, [r3, #3]
    f524:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52c:	5499      	strb	r1, [r3, r2]
    f52e:	4b45      	ldr	r3, [pc, #276]	; (f644 <send_gps_pos+0x95c>)
    f530:	781a      	ldrb	r2, [r3, #0]
    f532:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53a:	781b      	ldrb	r3, [r3, #0]
    f53c:	4413      	add	r3, r2
    f53e:	b2da      	uxtb	r2, r3
    f540:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f548:	701a      	strb	r2, [r3, #0]
    f54a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f552:	781a      	ldrb	r2, [r3, #0]
    f554:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	4413      	add	r3, r2
    f560:	b2da      	uxtb	r2, r3
    f562:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56a:	701a      	strb	r2, [r3, #0]
    f56c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	3301      	adds	r3, #1
    f578:	b2da      	uxtb	r2, r3
    f57a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f582:	701a      	strb	r2, [r3, #0]
    f584:	f24c 5349 	movw	r3, #50505	; 0xc549
    f588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58c:	781b      	ldrb	r3, [r3, #0]
    f58e:	2bff      	cmp	r3, #255	; 0xff
    f590:	d105      	bne.n	f59e <send_gps_pos+0x8b6>
    f592:	f24c 5349 	movw	r3, #50505	; 0xc549
    f596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59a:	2200      	movs	r2, #0
    f59c:	701a      	strb	r2, [r3, #0]
    f59e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a6:	781b      	ldrb	r3, [r3, #0]
    f5a8:	461a      	mov	r2, r3
    f5aa:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b2:	7819      	ldrb	r1, [r3, #0]
    f5b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5bc:	5499      	strb	r1, [r3, r2]
    f5be:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c6:	781a      	ldrb	r2, [r3, #0]
    f5c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	781b      	ldrb	r3, [r3, #0]
    f5d2:	4413      	add	r3, r2
    f5d4:	b2da      	uxtb	r2, r3
    f5d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5de:	701a      	strb	r2, [r3, #0]
    f5e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e8:	781a      	ldrb	r2, [r3, #0]
    f5ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f2:	781b      	ldrb	r3, [r3, #0]
    f5f4:	4413      	add	r3, r2
    f5f6:	b2da      	uxtb	r2, r3
    f5f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f600:	701a      	strb	r2, [r3, #0]
    f602:	f24c 5349 	movw	r3, #50505	; 0xc549
    f606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60a:	781b      	ldrb	r3, [r3, #0]
    f60c:	3301      	adds	r3, #1
    f60e:	b2da      	uxtb	r2, r3
    f610:	f24c 5349 	movw	r3, #50505	; 0xc549
    f614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f618:	701a      	strb	r2, [r3, #0]
    f61a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f622:	781b      	ldrb	r3, [r3, #0]
    f624:	2bff      	cmp	r3, #255	; 0xff
    f626:	d10f      	bne.n	f648 <send_gps_pos+0x960>
    f628:	f24c 5349 	movw	r3, #50505	; 0xc549
    f62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f630:	2200      	movs	r2, #0
    f632:	701a      	strb	r2, [r3, #0]
    f634:	e008      	b.n	f648 <send_gps_pos+0x960>
    f636:	bf00      	nop
    f638:	2004c6d3 	.word	0x2004c6d3
    f63c:	2004c6c9 	.word	0x2004c6c9
    f640:	2004c6ca 	.word	0x2004c6ca
    f644:	2004c6cb 	.word	0x2004c6cb
    f648:	f24c 5349 	movw	r3, #50505	; 0xc549
    f64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f650:	781b      	ldrb	r3, [r3, #0]
    f652:	461a      	mov	r2, r3
    f654:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65c:	7859      	ldrb	r1, [r3, #1]
    f65e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	5499      	strb	r1, [r3, r2]
    f668:	4bd1      	ldr	r3, [pc, #836]	; (f9b0 <send_gps_pos+0xcc8>)
    f66a:	781a      	ldrb	r2, [r3, #0]
    f66c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f674:	781b      	ldrb	r3, [r3, #0]
    f676:	4413      	add	r3, r2
    f678:	b2da      	uxtb	r2, r3
    f67a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f682:	701a      	strb	r2, [r3, #0]
    f684:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68c:	781a      	ldrb	r2, [r3, #0]
    f68e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f696:	781b      	ldrb	r3, [r3, #0]
    f698:	4413      	add	r3, r2
    f69a:	b2da      	uxtb	r2, r3
    f69c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	701a      	strb	r2, [r3, #0]
    f6a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	781b      	ldrb	r3, [r3, #0]
    f6b0:	3301      	adds	r3, #1
    f6b2:	b2da      	uxtb	r2, r3
    f6b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6bc:	701a      	strb	r2, [r3, #0]
    f6be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c6:	781b      	ldrb	r3, [r3, #0]
    f6c8:	2bff      	cmp	r3, #255	; 0xff
    f6ca:	d105      	bne.n	f6d8 <send_gps_pos+0x9f0>
    f6cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d4:	2200      	movs	r2, #0
    f6d6:	701a      	strb	r2, [r3, #0]
    f6d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e0:	781b      	ldrb	r3, [r3, #0]
    f6e2:	461a      	mov	r2, r3
    f6e4:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ec:	7899      	ldrb	r1, [r3, #2]
    f6ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f6:	5499      	strb	r1, [r3, r2]
    f6f8:	4bae      	ldr	r3, [pc, #696]	; (f9b4 <send_gps_pos+0xccc>)
    f6fa:	781a      	ldrb	r2, [r3, #0]
    f6fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f704:	781b      	ldrb	r3, [r3, #0]
    f706:	4413      	add	r3, r2
    f708:	b2da      	uxtb	r2, r3
    f70a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f712:	701a      	strb	r2, [r3, #0]
    f714:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	781a      	ldrb	r2, [r3, #0]
    f71e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f726:	781b      	ldrb	r3, [r3, #0]
    f728:	4413      	add	r3, r2
    f72a:	b2da      	uxtb	r2, r3
    f72c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f734:	701a      	strb	r2, [r3, #0]
    f736:	f24c 5349 	movw	r3, #50505	; 0xc549
    f73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73e:	781b      	ldrb	r3, [r3, #0]
    f740:	3301      	adds	r3, #1
    f742:	b2da      	uxtb	r2, r3
    f744:	f24c 5349 	movw	r3, #50505	; 0xc549
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	701a      	strb	r2, [r3, #0]
    f74e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f756:	781b      	ldrb	r3, [r3, #0]
    f758:	2bff      	cmp	r3, #255	; 0xff
    f75a:	d105      	bne.n	f768 <send_gps_pos+0xa80>
    f75c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	2200      	movs	r2, #0
    f766:	701a      	strb	r2, [r3, #0]
    f768:	f24c 5349 	movw	r3, #50505	; 0xc549
    f76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f770:	781b      	ldrb	r3, [r3, #0]
    f772:	461a      	mov	r2, r3
    f774:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77c:	78d9      	ldrb	r1, [r3, #3]
    f77e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f786:	5499      	strb	r1, [r3, r2]
    f788:	4b8b      	ldr	r3, [pc, #556]	; (f9b8 <send_gps_pos+0xcd0>)
    f78a:	781a      	ldrb	r2, [r3, #0]
    f78c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	4413      	add	r3, r2
    f798:	b2da      	uxtb	r2, r3
    f79a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a2:	701a      	strb	r2, [r3, #0]
    f7a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ac:	781a      	ldrb	r2, [r3, #0]
    f7ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	4413      	add	r3, r2
    f7ba:	b2da      	uxtb	r2, r3
    f7bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c4:	701a      	strb	r2, [r3, #0]
    f7c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ce:	781b      	ldrb	r3, [r3, #0]
    f7d0:	3301      	adds	r3, #1
    f7d2:	b2da      	uxtb	r2, r3
    f7d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7dc:	701a      	strb	r2, [r3, #0]
    f7de:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e6:	781b      	ldrb	r3, [r3, #0]
    f7e8:	2bff      	cmp	r3, #255	; 0xff
    f7ea:	d105      	bne.n	f7f8 <send_gps_pos+0xb10>
    f7ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f4:	2200      	movs	r2, #0
    f7f6:	701a      	strb	r2, [r3, #0]
    f7f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	461a      	mov	r2, r3
    f804:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80c:	7819      	ldrb	r1, [r3, #0]
    f80e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f816:	5499      	strb	r1, [r3, r2]
    f818:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f820:	781a      	ldrb	r2, [r3, #0]
    f822:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	781b      	ldrb	r3, [r3, #0]
    f82c:	4413      	add	r3, r2
    f82e:	b2da      	uxtb	r2, r3
    f830:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f838:	701a      	strb	r2, [r3, #0]
    f83a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	781a      	ldrb	r2, [r3, #0]
    f844:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84c:	781b      	ldrb	r3, [r3, #0]
    f84e:	4413      	add	r3, r2
    f850:	b2da      	uxtb	r2, r3
    f852:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85a:	701a      	strb	r2, [r3, #0]
    f85c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	781b      	ldrb	r3, [r3, #0]
    f866:	3301      	adds	r3, #1
    f868:	b2da      	uxtb	r2, r3
    f86a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f872:	701a      	strb	r2, [r3, #0]
    f874:	f24c 5349 	movw	r3, #50505	; 0xc549
    f878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	2bff      	cmp	r3, #255	; 0xff
    f880:	d105      	bne.n	f88e <send_gps_pos+0xba6>
    f882:	f24c 5349 	movw	r3, #50505	; 0xc549
    f886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88a:	2200      	movs	r2, #0
    f88c:	701a      	strb	r2, [r3, #0]
    f88e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f896:	781b      	ldrb	r3, [r3, #0]
    f898:	461a      	mov	r2, r3
    f89a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a2:	7859      	ldrb	r1, [r3, #1]
    f8a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ac:	5499      	strb	r1, [r3, r2]
    f8ae:	4b43      	ldr	r3, [pc, #268]	; (f9bc <send_gps_pos+0xcd4>)
    f8b0:	781a      	ldrb	r2, [r3, #0]
    f8b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ba:	781b      	ldrb	r3, [r3, #0]
    f8bc:	4413      	add	r3, r2
    f8be:	b2da      	uxtb	r2, r3
    f8c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c8:	701a      	strb	r2, [r3, #0]
    f8ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d2:	781a      	ldrb	r2, [r3, #0]
    f8d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8dc:	781b      	ldrb	r3, [r3, #0]
    f8de:	4413      	add	r3, r2
    f8e0:	b2da      	uxtb	r2, r3
    f8e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ea:	701a      	strb	r2, [r3, #0]
    f8ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f4:	781b      	ldrb	r3, [r3, #0]
    f8f6:	3301      	adds	r3, #1
    f8f8:	b2da      	uxtb	r2, r3
    f8fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f902:	701a      	strb	r2, [r3, #0]
    f904:	f24c 5349 	movw	r3, #50505	; 0xc549
    f908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	2bff      	cmp	r3, #255	; 0xff
    f910:	d105      	bne.n	f91e <send_gps_pos+0xc36>
    f912:	f24c 5349 	movw	r3, #50505	; 0xc549
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	2200      	movs	r2, #0
    f91c:	701a      	strb	r2, [r3, #0]
    f91e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	461a      	mov	r2, r3
    f92a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f932:	7899      	ldrb	r1, [r3, #2]
    f934:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f93c:	5499      	strb	r1, [r3, r2]
    f93e:	4b20      	ldr	r3, [pc, #128]	; (f9c0 <send_gps_pos+0xcd8>)
    f940:	781a      	ldrb	r2, [r3, #0]
    f942:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94a:	781b      	ldrb	r3, [r3, #0]
    f94c:	4413      	add	r3, r2
    f94e:	b2da      	uxtb	r2, r3
    f950:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	701a      	strb	r2, [r3, #0]
    f95a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f962:	781a      	ldrb	r2, [r3, #0]
    f964:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	4413      	add	r3, r2
    f970:	b2da      	uxtb	r2, r3
    f972:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97a:	701a      	strb	r2, [r3, #0]
    f97c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f984:	781b      	ldrb	r3, [r3, #0]
    f986:	3301      	adds	r3, #1
    f988:	b2da      	uxtb	r2, r3
    f98a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f992:	701a      	strb	r2, [r3, #0]
    f994:	f24c 5349 	movw	r3, #50505	; 0xc549
    f998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99c:	781b      	ldrb	r3, [r3, #0]
    f99e:	2bff      	cmp	r3, #255	; 0xff
    f9a0:	d110      	bne.n	f9c4 <send_gps_pos+0xcdc>
    f9a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9aa:	2200      	movs	r2, #0
    f9ac:	701a      	strb	r2, [r3, #0]
    f9ae:	e009      	b.n	f9c4 <send_gps_pos+0xcdc>
    f9b0:	2004c6bd 	.word	0x2004c6bd
    f9b4:	2004c6be 	.word	0x2004c6be
    f9b8:	2004c6bf 	.word	0x2004c6bf
    f9bc:	2004c6c1 	.word	0x2004c6c1
    f9c0:	2004c6c2 	.word	0x2004c6c2
    f9c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9cc:	781b      	ldrb	r3, [r3, #0]
    f9ce:	461a      	mov	r2, r3
    f9d0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d8:	78d9      	ldrb	r1, [r3, #3]
    f9da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e2:	5499      	strb	r1, [r3, r2]
    f9e4:	4bd3      	ldr	r3, [pc, #844]	; (fd34 <send_gps_pos+0x104c>)
    f9e6:	781a      	ldrb	r2, [r3, #0]
    f9e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f0:	781b      	ldrb	r3, [r3, #0]
    f9f2:	4413      	add	r3, r2
    f9f4:	b2da      	uxtb	r2, r3
    f9f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fe:	701a      	strb	r2, [r3, #0]
    fa00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa08:	781a      	ldrb	r2, [r3, #0]
    fa0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa12:	781b      	ldrb	r3, [r3, #0]
    fa14:	4413      	add	r3, r2
    fa16:	b2da      	uxtb	r2, r3
    fa18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa20:	701a      	strb	r2, [r3, #0]
    fa22:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	3301      	adds	r3, #1
    fa2e:	b2da      	uxtb	r2, r3
    fa30:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa38:	701a      	strb	r2, [r3, #0]
    fa3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa42:	781b      	ldrb	r3, [r3, #0]
    fa44:	2bff      	cmp	r3, #255	; 0xff
    fa46:	d105      	bne.n	fa54 <send_gps_pos+0xd6c>
    fa48:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa50:	2200      	movs	r2, #0
    fa52:	701a      	strb	r2, [r3, #0]
    fa54:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5c:	781b      	ldrb	r3, [r3, #0]
    fa5e:	461a      	mov	r2, r3
    fa60:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa68:	7819      	ldrb	r1, [r3, #0]
    fa6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa72:	5499      	strb	r1, [r3, r2]
    fa74:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7c:	781a      	ldrb	r2, [r3, #0]
    fa7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	781b      	ldrb	r3, [r3, #0]
    fa88:	4413      	add	r3, r2
    fa8a:	b2da      	uxtb	r2, r3
    fa8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa94:	701a      	strb	r2, [r3, #0]
    fa96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	781a      	ldrb	r2, [r3, #0]
    faa0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa8:	781b      	ldrb	r3, [r3, #0]
    faaa:	4413      	add	r3, r2
    faac:	b2da      	uxtb	r2, r3
    faae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab6:	701a      	strb	r2, [r3, #0]
    fab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac0:	781b      	ldrb	r3, [r3, #0]
    fac2:	3301      	adds	r3, #1
    fac4:	b2da      	uxtb	r2, r3
    fac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    faca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    face:	701a      	strb	r2, [r3, #0]
    fad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad8:	781b      	ldrb	r3, [r3, #0]
    fada:	2bff      	cmp	r3, #255	; 0xff
    fadc:	d105      	bne.n	faea <send_gps_pos+0xe02>
    fade:	f24c 5349 	movw	r3, #50505	; 0xc549
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	2200      	movs	r2, #0
    fae8:	701a      	strb	r2, [r3, #0]
    faea:	f24c 5349 	movw	r3, #50505	; 0xc549
    faee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf2:	781b      	ldrb	r3, [r3, #0]
    faf4:	461a      	mov	r2, r3
    faf6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	7859      	ldrb	r1, [r3, #1]
    fb00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb08:	5499      	strb	r1, [r3, r2]
    fb0a:	4b8b      	ldr	r3, [pc, #556]	; (fd38 <send_gps_pos+0x1050>)
    fb0c:	781a      	ldrb	r2, [r3, #0]
    fb0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	781b      	ldrb	r3, [r3, #0]
    fb18:	4413      	add	r3, r2
    fb1a:	b2da      	uxtb	r2, r3
    fb1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb24:	701a      	strb	r2, [r3, #0]
    fb26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	781a      	ldrb	r2, [r3, #0]
    fb30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb38:	781b      	ldrb	r3, [r3, #0]
    fb3a:	4413      	add	r3, r2
    fb3c:	b2da      	uxtb	r2, r3
    fb3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	701a      	strb	r2, [r3, #0]
    fb48:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb50:	781b      	ldrb	r3, [r3, #0]
    fb52:	3301      	adds	r3, #1
    fb54:	b2da      	uxtb	r2, r3
    fb56:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5e:	701a      	strb	r2, [r3, #0]
    fb60:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb68:	781b      	ldrb	r3, [r3, #0]
    fb6a:	2bff      	cmp	r3, #255	; 0xff
    fb6c:	d105      	bne.n	fb7a <send_gps_pos+0xe92>
    fb6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb76:	2200      	movs	r2, #0
    fb78:	701a      	strb	r2, [r3, #0]
    fb7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb82:	781b      	ldrb	r3, [r3, #0]
    fb84:	461a      	mov	r2, r3
    fb86:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb8e:	7899      	ldrb	r1, [r3, #2]
    fb90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb98:	5499      	strb	r1, [r3, r2]
    fb9a:	4b68      	ldr	r3, [pc, #416]	; (fd3c <send_gps_pos+0x1054>)
    fb9c:	781a      	ldrb	r2, [r3, #0]
    fb9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba6:	781b      	ldrb	r3, [r3, #0]
    fba8:	4413      	add	r3, r2
    fbaa:	b2da      	uxtb	r2, r3
    fbac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb4:	701a      	strb	r2, [r3, #0]
    fbb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbe:	781a      	ldrb	r2, [r3, #0]
    fbc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc8:	781b      	ldrb	r3, [r3, #0]
    fbca:	4413      	add	r3, r2
    fbcc:	b2da      	uxtb	r2, r3
    fbce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd6:	701a      	strb	r2, [r3, #0]
    fbd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe0:	781b      	ldrb	r3, [r3, #0]
    fbe2:	3301      	adds	r3, #1
    fbe4:	b2da      	uxtb	r2, r3
    fbe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbee:	701a      	strb	r2, [r3, #0]
    fbf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf8:	781b      	ldrb	r3, [r3, #0]
    fbfa:	2bff      	cmp	r3, #255	; 0xff
    fbfc:	d105      	bne.n	fc0a <send_gps_pos+0xf22>
    fbfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc06:	2200      	movs	r2, #0
    fc08:	701a      	strb	r2, [r3, #0]
    fc0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc12:	781b      	ldrb	r3, [r3, #0]
    fc14:	461a      	mov	r2, r3
    fc16:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1e:	78d9      	ldrb	r1, [r3, #3]
    fc20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc28:	5499      	strb	r1, [r3, r2]
    fc2a:	4b45      	ldr	r3, [pc, #276]	; (fd40 <send_gps_pos+0x1058>)
    fc2c:	781a      	ldrb	r2, [r3, #0]
    fc2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	4413      	add	r3, r2
    fc3a:	b2da      	uxtb	r2, r3
    fc3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc44:	701a      	strb	r2, [r3, #0]
    fc46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4e:	781a      	ldrb	r2, [r3, #0]
    fc50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc58:	781b      	ldrb	r3, [r3, #0]
    fc5a:	4413      	add	r3, r2
    fc5c:	b2da      	uxtb	r2, r3
    fc5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc66:	701a      	strb	r2, [r3, #0]
    fc68:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc70:	781b      	ldrb	r3, [r3, #0]
    fc72:	3301      	adds	r3, #1
    fc74:	b2da      	uxtb	r2, r3
    fc76:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7e:	701a      	strb	r2, [r3, #0]
    fc80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc88:	781b      	ldrb	r3, [r3, #0]
    fc8a:	2bff      	cmp	r3, #255	; 0xff
    fc8c:	d105      	bne.n	fc9a <send_gps_pos+0xfb2>
    fc8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc96:	2200      	movs	r2, #0
    fc98:	701a      	strb	r2, [r3, #0]
    fc9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca2:	781b      	ldrb	r3, [r3, #0]
    fca4:	461a      	mov	r2, r3
    fca6:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcae:	7819      	ldrb	r1, [r3, #0]
    fcb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb8:	5499      	strb	r1, [r3, r2]
    fcba:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc2:	781a      	ldrb	r2, [r3, #0]
    fcc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	4413      	add	r3, r2
    fcd0:	b2da      	uxtb	r2, r3
    fcd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcda:	701a      	strb	r2, [r3, #0]
    fcdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce4:	781a      	ldrb	r2, [r3, #0]
    fce6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcee:	781b      	ldrb	r3, [r3, #0]
    fcf0:	4413      	add	r3, r2
    fcf2:	b2da      	uxtb	r2, r3
    fcf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfc:	701a      	strb	r2, [r3, #0]
    fcfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd06:	781b      	ldrb	r3, [r3, #0]
    fd08:	3301      	adds	r3, #1
    fd0a:	b2da      	uxtb	r2, r3
    fd0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd14:	701a      	strb	r2, [r3, #0]
    fd16:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	2bff      	cmp	r3, #255	; 0xff
    fd22:	d10f      	bne.n	fd44 <send_gps_pos+0x105c>
    fd24:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2c:	2200      	movs	r2, #0
    fd2e:	701a      	strb	r2, [r3, #0]
    fd30:	e008      	b.n	fd44 <send_gps_pos+0x105c>
    fd32:	bf00      	nop
    fd34:	2004c6c3 	.word	0x2004c6c3
    fd38:	2004c6c5 	.word	0x2004c6c5
    fd3c:	2004c6c6 	.word	0x2004c6c6
    fd40:	2004c6c7 	.word	0x2004c6c7
    fd44:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4c:	781b      	ldrb	r3, [r3, #0]
    fd4e:	461a      	mov	r2, r3
    fd50:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd58:	7859      	ldrb	r1, [r3, #1]
    fd5a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd62:	5499      	strb	r1, [r3, r2]
    fd64:	4bc0      	ldr	r3, [pc, #768]	; (10068 <send_gps_pos+0x1380>)
    fd66:	781a      	ldrb	r2, [r3, #0]
    fd68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd70:	781b      	ldrb	r3, [r3, #0]
    fd72:	4413      	add	r3, r2
    fd74:	b2da      	uxtb	r2, r3
    fd76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7e:	701a      	strb	r2, [r3, #0]
    fd80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd88:	781a      	ldrb	r2, [r3, #0]
    fd8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	4413      	add	r3, r2
    fd96:	b2da      	uxtb	r2, r3
    fd98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	701a      	strb	r2, [r3, #0]
    fda2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	3301      	adds	r3, #1
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	2bff      	cmp	r3, #255	; 0xff
    fdc6:	d105      	bne.n	fdd4 <send_gps_pos+0x10ec>
    fdc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd0:	2200      	movs	r2, #0
    fdd2:	701a      	strb	r2, [r3, #0]
    fdd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fddc:	781b      	ldrb	r3, [r3, #0]
    fdde:	461a      	mov	r2, r3
    fde0:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde8:	7899      	ldrb	r1, [r3, #2]
    fdea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	5499      	strb	r1, [r3, r2]
    fdf4:	4b9d      	ldr	r3, [pc, #628]	; (1006c <send_gps_pos+0x1384>)
    fdf6:	781a      	ldrb	r2, [r3, #0]
    fdf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe00:	781b      	ldrb	r3, [r3, #0]
    fe02:	4413      	add	r3, r2
    fe04:	b2da      	uxtb	r2, r3
    fe06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0e:	701a      	strb	r2, [r3, #0]
    fe10:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	781a      	ldrb	r2, [r3, #0]
    fe1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	4413      	add	r3, r2
    fe26:	b2da      	uxtb	r2, r3
    fe28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe30:	701a      	strb	r2, [r3, #0]
    fe32:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	3301      	adds	r3, #1
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	2bff      	cmp	r3, #255	; 0xff
    fe56:	d105      	bne.n	fe64 <send_gps_pos+0x117c>
    fe58:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe60:	2200      	movs	r2, #0
    fe62:	701a      	strb	r2, [r3, #0]
    fe64:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	781b      	ldrb	r3, [r3, #0]
    fe6e:	461a      	mov	r2, r3
    fe70:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fe74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe78:	78d9      	ldrb	r1, [r3, #3]
    fe7a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe82:	5499      	strb	r1, [r3, r2]
    fe84:	4b7a      	ldr	r3, [pc, #488]	; (10070 <send_gps_pos+0x1388>)
    fe86:	781a      	ldrb	r2, [r3, #0]
    fe88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe90:	781b      	ldrb	r3, [r3, #0]
    fe92:	4413      	add	r3, r2
    fe94:	b2da      	uxtb	r2, r3
    fe96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9e:	701a      	strb	r2, [r3, #0]
    fea0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea8:	781a      	ldrb	r2, [r3, #0]
    feaa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    feae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	4413      	add	r3, r2
    feb6:	b2da      	uxtb	r2, r3
    feb8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    febc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec0:	701a      	strb	r2, [r3, #0]
    fec2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feca:	781b      	ldrb	r3, [r3, #0]
    fecc:	3301      	adds	r3, #1
    fece:	b2da      	uxtb	r2, r3
    fed0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	f24c 5349 	movw	r3, #50505	; 0xc549
    fede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee2:	781b      	ldrb	r3, [r3, #0]
    fee4:	2bff      	cmp	r3, #255	; 0xff
    fee6:	d105      	bne.n	fef4 <send_gps_pos+0x120c>
    fee8:	f24c 5349 	movw	r3, #50505	; 0xc549
    feec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef0:	2200      	movs	r2, #0
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefc:	781b      	ldrb	r3, [r3, #0]
    fefe:	461a      	mov	r2, r3
    ff00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ff04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff08:	7819      	ldrb	r1, [r3, #0]
    ff0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff12:	5499      	strb	r1, [r3, r2]
    ff14:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1c:	781b      	ldrb	r3, [r3, #0]
    ff1e:	3301      	adds	r3, #1
    ff20:	b2da      	uxtb	r2, r3
    ff22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2a:	701a      	strb	r2, [r3, #0]
    ff2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff34:	781b      	ldrb	r3, [r3, #0]
    ff36:	2bff      	cmp	r3, #255	; 0xff
    ff38:	d105      	bne.n	ff46 <send_gps_pos+0x125e>
    ff3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff42:	2200      	movs	r2, #0
    ff44:	701a      	strb	r2, [r3, #0]
    ff46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff4e:	781b      	ldrb	r3, [r3, #0]
    ff50:	461a      	mov	r2, r3
    ff52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ff56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff5a:	7819      	ldrb	r1, [r3, #0]
    ff5c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff64:	5499      	strb	r1, [r3, r2]
    ff66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6e:	781b      	ldrb	r3, [r3, #0]
    ff70:	3301      	adds	r3, #1
    ff72:	b2da      	uxtb	r2, r3
    ff74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7c:	701a      	strb	r2, [r3, #0]
    ff7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff86:	781b      	ldrb	r3, [r3, #0]
    ff88:	2bff      	cmp	r3, #255	; 0xff
    ff8a:	d105      	bne.n	ff98 <send_gps_pos+0x12b0>
    ff8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff94:	2200      	movs	r2, #0
    ff96:	701a      	strb	r2, [r3, #0]
    ff98:	f242 0339 	movw	r3, #8249	; 0x2039
    ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa0:	781b      	ldrb	r3, [r3, #0]
    ffa2:	b2db      	uxtb	r3, r3
    ffa4:	f003 0310 	and.w	r3, r3, #16
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d15a      	bne.n	10062 <send_gps_pos+0x137a>
    ffac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb4:	781b      	ldrb	r3, [r3, #0]
    ffb6:	b2db      	uxtb	r3, r3
    ffb8:	461a      	mov	r2, r3
    ffba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ffbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc2:	5c9a      	ldrb	r2, [r3, r2]
    ffc4:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ffc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffcc:	701a      	strb	r2, [r3, #0]
    ffce:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ffd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd6:	2200      	movs	r2, #0
    ffd8:	701a      	strb	r2, [r3, #0]
    ffda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe2:	781b      	ldrb	r3, [r3, #0]
    ffe4:	b2db      	uxtb	r3, r3
    ffe6:	3301      	adds	r3, #1
    ffe8:	b2da      	uxtb	r2, r3
    ffea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff2:	701a      	strb	r2, [r3, #0]
    fff4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	b2db      	uxtb	r3, r3
   10000:	2bff      	cmp	r3, #255	; 0xff
   10002:	d105      	bne.n	10010 <send_gps_pos+0x1328>
   10004:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000c:	2200      	movs	r2, #0
   1000e:	701a      	strb	r2, [r3, #0]
   10010:	f242 0338 	movw	r3, #8248	; 0x2038
   10014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10018:	f242 0238 	movw	r2, #8248	; 0x2038
   1001c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10020:	7812      	ldrb	r2, [r2, #0]
   10022:	b2d2      	uxtb	r2, r2
   10024:	f042 0201 	orr.w	r2, r2, #1
   10028:	b2d2      	uxtb	r2, r2
   1002a:	701a      	strb	r2, [r3, #0]
   1002c:	f242 0339 	movw	r3, #8249	; 0x2039
   10030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10034:	f242 0239 	movw	r2, #8249	; 0x2039
   10038:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1003c:	7812      	ldrb	r2, [r2, #0]
   1003e:	b2d2      	uxtb	r2, r2
   10040:	f042 0210 	orr.w	r2, r2, #16
   10044:	b2d2      	uxtb	r2, r2
   10046:	701a      	strb	r2, [r3, #0]
   10048:	e00b      	b.n	10062 <send_gps_pos+0x137a>
   1004a:	f24c 5348 	movw	r3, #50504	; 0xc548
   1004e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10052:	781b      	ldrb	r3, [r3, #0]
   10054:	3301      	adds	r3, #1
   10056:	b2da      	uxtb	r2, r3
   10058:	f24c 5348 	movw	r3, #50504	; 0xc548
   1005c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10060:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   10062:	f005 fbfd 	bl	15860 <estimator_update_state_gps>
  }
}
   10066:	bd80      	pop	{r7, pc}
   10068:	2004c6b9 	.word	0x2004c6b9
   1006c:	2004c6ba 	.word	0x2004c6ba
   10070:	2004c6bb 	.word	0x2004c6bb

00010074 <send_radIR>:

void send_radIR(void){
   10074:	b480      	push	{r7}
   10076:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10078:	f24c 63de 	movw	r3, #50910	; 0xc6de
   1007c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	2b00      	cmp	r3, #0
   10084:	f000 85e8 	beq.w	10c58 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10088:	f24c 5349 	movw	r3, #50505	; 0xc549
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	781a      	ldrb	r2, [r3, #0]
   10092:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	781b      	ldrb	r3, [r3, #0]
   1009c:	b2db      	uxtb	r3, r3
   1009e:	429a      	cmp	r2, r3
   100a0:	d313      	bcc.n	100ca <send_radIR+0x56>
   100a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	781b      	ldrb	r3, [r3, #0]
   100ac:	b2db      	uxtb	r3, r3
   100ae:	461a      	mov	r2, r3
   100b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	781b      	ldrb	r3, [r3, #0]
   100ba:	1ad3      	subs	r3, r2, r3
   100bc:	33ff      	adds	r3, #255	; 0xff
   100be:	2b14      	cmp	r3, #20
   100c0:	bfd4      	ite	le
   100c2:	2300      	movle	r3, #0
   100c4:	2301      	movgt	r3, #1
   100c6:	b2db      	uxtb	r3, r3
   100c8:	e011      	b.n	100ee <send_radIR+0x7a>
   100ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
   100ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	b2db      	uxtb	r3, r3
   100d6:	461a      	mov	r2, r3
   100d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   100dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	1ad3      	subs	r3, r2, r3
   100e4:	2b14      	cmp	r3, #20
   100e6:	bfd4      	ite	le
   100e8:	2300      	movle	r3, #0
   100ea:	2301      	movgt	r3, #1
   100ec:	b2db      	uxtb	r3, r3
   100ee:	2b00      	cmp	r3, #0
   100f0:	f000 85a6 	beq.w	10c40 <send_radIR+0xbcc>
   100f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	461a      	mov	r2, r3
   10100:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10108:	2105      	movs	r1, #5
   1010a:	5499      	strb	r1, [r3, r2]
   1010c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10114:	781b      	ldrb	r3, [r3, #0]
   10116:	3301      	adds	r3, #1
   10118:	b2da      	uxtb	r2, r3
   1011a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	701a      	strb	r2, [r3, #0]
   10124:	f24c 5349 	movw	r3, #50505	; 0xc549
   10128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012c:	781b      	ldrb	r3, [r3, #0]
   1012e:	2bff      	cmp	r3, #255	; 0xff
   10130:	d105      	bne.n	1013e <send_radIR+0xca>
   10132:	f24c 5349 	movw	r3, #50505	; 0xc549
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	2200      	movs	r2, #0
   1013c:	701a      	strb	r2, [r3, #0]
   1013e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10146:	781b      	ldrb	r3, [r3, #0]
   10148:	461a      	mov	r2, r3
   1014a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	2105      	movs	r1, #5
   10154:	5499      	strb	r1, [r3, r2]
   10156:	f24c 5349 	movw	r3, #50505	; 0xc549
   1015a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015e:	781b      	ldrb	r3, [r3, #0]
   10160:	3301      	adds	r3, #1
   10162:	b2da      	uxtb	r2, r3
   10164:	f24c 5349 	movw	r3, #50505	; 0xc549
   10168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016c:	701a      	strb	r2, [r3, #0]
   1016e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10176:	781b      	ldrb	r3, [r3, #0]
   10178:	2bff      	cmp	r3, #255	; 0xff
   1017a:	d105      	bne.n	10188 <send_radIR+0x114>
   1017c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10184:	2200      	movs	r2, #0
   10186:	701a      	strb	r2, [r3, #0]
   10188:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1018c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10190:	2205      	movs	r2, #5
   10192:	701a      	strb	r2, [r3, #0]
   10194:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019c:	2205      	movs	r2, #5
   1019e:	701a      	strb	r2, [r3, #0]
   101a0:	f24c 5349 	movw	r3, #50505	; 0xc549
   101a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a8:	781b      	ldrb	r3, [r3, #0]
   101aa:	461a      	mov	r2, r3
   101ac:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b4:	7819      	ldrb	r1, [r3, #0]
   101b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
   101ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101be:	5499      	strb	r1, [r3, r2]
   101c0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c8:	781a      	ldrb	r2, [r3, #0]
   101ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d2:	781b      	ldrb	r3, [r3, #0]
   101d4:	4413      	add	r3, r2
   101d6:	b2da      	uxtb	r2, r3
   101d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e0:	701a      	strb	r2, [r3, #0]
   101e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ea:	781a      	ldrb	r2, [r3, #0]
   101ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f4:	781b      	ldrb	r3, [r3, #0]
   101f6:	4413      	add	r3, r2
   101f8:	b2da      	uxtb	r2, r3
   101fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10202:	701a      	strb	r2, [r3, #0]
   10204:	f24c 5349 	movw	r3, #50505	; 0xc549
   10208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020c:	781b      	ldrb	r3, [r3, #0]
   1020e:	3301      	adds	r3, #1
   10210:	b2da      	uxtb	r2, r3
   10212:	f24c 5349 	movw	r3, #50505	; 0xc549
   10216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021a:	701a      	strb	r2, [r3, #0]
   1021c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	2bff      	cmp	r3, #255	; 0xff
   10228:	d105      	bne.n	10236 <send_radIR+0x1c2>
   1022a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	2200      	movs	r2, #0
   10234:	701a      	strb	r2, [r3, #0]
   10236:	f24c 5349 	movw	r3, #50505	; 0xc549
   1023a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023e:	781b      	ldrb	r3, [r3, #0]
   10240:	461a      	mov	r2, r3
   10242:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	7859      	ldrb	r1, [r3, #1]
   1024c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	5499      	strb	r1, [r3, r2]
   10256:	4bd2      	ldr	r3, [pc, #840]	; (105a0 <send_radIR+0x52c>)
   10258:	781a      	ldrb	r2, [r3, #0]
   1025a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	781b      	ldrb	r3, [r3, #0]
   10264:	4413      	add	r3, r2
   10266:	b2da      	uxtb	r2, r3
   10268:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1026c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10270:	701a      	strb	r2, [r3, #0]
   10272:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	781a      	ldrb	r2, [r3, #0]
   1027c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	4413      	add	r3, r2
   10288:	b2da      	uxtb	r2, r3
   1028a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	701a      	strb	r2, [r3, #0]
   10294:	f24c 5349 	movw	r3, #50505	; 0xc549
   10298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029c:	781b      	ldrb	r3, [r3, #0]
   1029e:	3301      	adds	r3, #1
   102a0:	b2da      	uxtb	r2, r3
   102a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   102a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102aa:	701a      	strb	r2, [r3, #0]
   102ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   102b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b4:	781b      	ldrb	r3, [r3, #0]
   102b6:	2bff      	cmp	r3, #255	; 0xff
   102b8:	d105      	bne.n	102c6 <send_radIR+0x252>
   102ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   102be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c2:	2200      	movs	r2, #0
   102c4:	701a      	strb	r2, [r3, #0]
   102c6:	f24c 5349 	movw	r3, #50505	; 0xc549
   102ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ce:	781b      	ldrb	r3, [r3, #0]
   102d0:	461a      	mov	r2, r3
   102d2:	f64c 3340 	movw	r3, #52032	; 0xcb40
   102d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102da:	7899      	ldrb	r1, [r3, #2]
   102dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e4:	5499      	strb	r1, [r3, r2]
   102e6:	4baf      	ldr	r3, [pc, #700]	; (105a4 <send_radIR+0x530>)
   102e8:	781a      	ldrb	r2, [r3, #0]
   102ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f2:	781b      	ldrb	r3, [r3, #0]
   102f4:	4413      	add	r3, r2
   102f6:	b2da      	uxtb	r2, r3
   102f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10300:	701a      	strb	r2, [r3, #0]
   10302:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030a:	781a      	ldrb	r2, [r3, #0]
   1030c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10314:	781b      	ldrb	r3, [r3, #0]
   10316:	4413      	add	r3, r2
   10318:	b2da      	uxtb	r2, r3
   1031a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	701a      	strb	r2, [r3, #0]
   10324:	f24c 5349 	movw	r3, #50505	; 0xc549
   10328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	3301      	adds	r3, #1
   10330:	b2da      	uxtb	r2, r3
   10332:	f24c 5349 	movw	r3, #50505	; 0xc549
   10336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033a:	701a      	strb	r2, [r3, #0]
   1033c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10344:	781b      	ldrb	r3, [r3, #0]
   10346:	2bff      	cmp	r3, #255	; 0xff
   10348:	d105      	bne.n	10356 <send_radIR+0x2e2>
   1034a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1034e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10352:	2200      	movs	r2, #0
   10354:	701a      	strb	r2, [r3, #0]
   10356:	f24c 5349 	movw	r3, #50505	; 0xc549
   1035a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035e:	781b      	ldrb	r3, [r3, #0]
   10360:	461a      	mov	r2, r3
   10362:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036a:	78d9      	ldrb	r1, [r3, #3]
   1036c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10374:	5499      	strb	r1, [r3, r2]
   10376:	4b8c      	ldr	r3, [pc, #560]	; (105a8 <send_radIR+0x534>)
   10378:	781a      	ldrb	r2, [r3, #0]
   1037a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1037e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10382:	781b      	ldrb	r3, [r3, #0]
   10384:	4413      	add	r3, r2
   10386:	b2da      	uxtb	r2, r3
   10388:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1038c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10390:	701a      	strb	r2, [r3, #0]
   10392:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039a:	781a      	ldrb	r2, [r3, #0]
   1039c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a4:	781b      	ldrb	r3, [r3, #0]
   103a6:	4413      	add	r3, r2
   103a8:	b2da      	uxtb	r2, r3
   103aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b2:	701a      	strb	r2, [r3, #0]
   103b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   103b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103bc:	781b      	ldrb	r3, [r3, #0]
   103be:	3301      	adds	r3, #1
   103c0:	b2da      	uxtb	r2, r3
   103c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   103c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ca:	701a      	strb	r2, [r3, #0]
   103cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   103d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	2bff      	cmp	r3, #255	; 0xff
   103d8:	d105      	bne.n	103e6 <send_radIR+0x372>
   103da:	f24c 5349 	movw	r3, #50505	; 0xc549
   103de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e2:	2200      	movs	r2, #0
   103e4:	701a      	strb	r2, [r3, #0]
   103e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   103ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	461a      	mov	r2, r3
   103f2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fa:	7819      	ldrb	r1, [r3, #0]
   103fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10404:	5499      	strb	r1, [r3, r2]
   10406:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1040a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040e:	781a      	ldrb	r2, [r3, #0]
   10410:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	4413      	add	r3, r2
   1041c:	b2da      	uxtb	r2, r3
   1041e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10426:	701a      	strb	r2, [r3, #0]
   10428:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1042c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10430:	781a      	ldrb	r2, [r3, #0]
   10432:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043a:	781b      	ldrb	r3, [r3, #0]
   1043c:	4413      	add	r3, r2
   1043e:	b2da      	uxtb	r2, r3
   10440:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10448:	701a      	strb	r2, [r3, #0]
   1044a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1044e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	3301      	adds	r3, #1
   10456:	b2da      	uxtb	r2, r3
   10458:	f24c 5349 	movw	r3, #50505	; 0xc549
   1045c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10460:	701a      	strb	r2, [r3, #0]
   10462:	f24c 5349 	movw	r3, #50505	; 0xc549
   10466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046a:	781b      	ldrb	r3, [r3, #0]
   1046c:	2bff      	cmp	r3, #255	; 0xff
   1046e:	d105      	bne.n	1047c <send_radIR+0x408>
   10470:	f24c 5349 	movw	r3, #50505	; 0xc549
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	2200      	movs	r2, #0
   1047a:	701a      	strb	r2, [r3, #0]
   1047c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10484:	781b      	ldrb	r3, [r3, #0]
   10486:	461a      	mov	r2, r3
   10488:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	7859      	ldrb	r1, [r3, #1]
   10492:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	5499      	strb	r1, [r3, r2]
   1049c:	4b43      	ldr	r3, [pc, #268]	; (105ac <send_radIR+0x538>)
   1049e:	781a      	ldrb	r2, [r3, #0]
   104a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	781b      	ldrb	r3, [r3, #0]
   104aa:	4413      	add	r3, r2
   104ac:	b2da      	uxtb	r2, r3
   104ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b6:	701a      	strb	r2, [r3, #0]
   104b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	781a      	ldrb	r2, [r3, #0]
   104c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	4413      	add	r3, r2
   104ce:	b2da      	uxtb	r2, r3
   104d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d8:	701a      	strb	r2, [r3, #0]
   104da:	f24c 5349 	movw	r3, #50505	; 0xc549
   104de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	3301      	adds	r3, #1
   104e6:	b2da      	uxtb	r2, r3
   104e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	701a      	strb	r2, [r3, #0]
   104f2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fa:	781b      	ldrb	r3, [r3, #0]
   104fc:	2bff      	cmp	r3, #255	; 0xff
   104fe:	d105      	bne.n	1050c <send_radIR+0x498>
   10500:	f24c 5349 	movw	r3, #50505	; 0xc549
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	2200      	movs	r2, #0
   1050a:	701a      	strb	r2, [r3, #0]
   1050c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10514:	781b      	ldrb	r3, [r3, #0]
   10516:	461a      	mov	r2, r3
   10518:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1051c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10520:	7899      	ldrb	r1, [r3, #2]
   10522:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1052a:	5499      	strb	r1, [r3, r2]
   1052c:	4b20      	ldr	r3, [pc, #128]	; (105b0 <send_radIR+0x53c>)
   1052e:	781a      	ldrb	r2, [r3, #0]
   10530:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	4413      	add	r3, r2
   1053c:	b2da      	uxtb	r2, r3
   1053e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10546:	701a      	strb	r2, [r3, #0]
   10548:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1054c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10550:	781a      	ldrb	r2, [r3, #0]
   10552:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	4413      	add	r3, r2
   1055e:	b2da      	uxtb	r2, r3
   10560:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10568:	701a      	strb	r2, [r3, #0]
   1056a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1056e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10572:	781b      	ldrb	r3, [r3, #0]
   10574:	3301      	adds	r3, #1
   10576:	b2da      	uxtb	r2, r3
   10578:	f24c 5349 	movw	r3, #50505	; 0xc549
   1057c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10580:	701a      	strb	r2, [r3, #0]
   10582:	f24c 5349 	movw	r3, #50505	; 0xc549
   10586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058a:	781b      	ldrb	r3, [r3, #0]
   1058c:	2bff      	cmp	r3, #255	; 0xff
   1058e:	d111      	bne.n	105b4 <send_radIR+0x540>
   10590:	f24c 5349 	movw	r3, #50505	; 0xc549
   10594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10598:	2200      	movs	r2, #0
   1059a:	701a      	strb	r2, [r3, #0]
   1059c:	e00a      	b.n	105b4 <send_radIR+0x540>
   1059e:	bf00      	nop
   105a0:	2004cb41 	.word	0x2004cb41
   105a4:	2004cb42 	.word	0x2004cb42
   105a8:	2004cb43 	.word	0x2004cb43
   105ac:	2004cb45 	.word	0x2004cb45
   105b0:	2004cb46 	.word	0x2004cb46
   105b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   105b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105bc:	781b      	ldrb	r3, [r3, #0]
   105be:	461a      	mov	r2, r3
   105c0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	78d9      	ldrb	r1, [r3, #3]
   105ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
   105ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d2:	5499      	strb	r1, [r3, r2]
   105d4:	4bd3      	ldr	r3, [pc, #844]	; (10924 <send_radIR+0x8b0>)
   105d6:	781a      	ldrb	r2, [r3, #0]
   105d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e0:	781b      	ldrb	r3, [r3, #0]
   105e2:	4413      	add	r3, r2
   105e4:	b2da      	uxtb	r2, r3
   105e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ee:	701a      	strb	r2, [r3, #0]
   105f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f8:	781a      	ldrb	r2, [r3, #0]
   105fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10602:	781b      	ldrb	r3, [r3, #0]
   10604:	4413      	add	r3, r2
   10606:	b2da      	uxtb	r2, r3
   10608:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1060c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10610:	701a      	strb	r2, [r3, #0]
   10612:	f24c 5349 	movw	r3, #50505	; 0xc549
   10616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061a:	781b      	ldrb	r3, [r3, #0]
   1061c:	3301      	adds	r3, #1
   1061e:	b2da      	uxtb	r2, r3
   10620:	f24c 5349 	movw	r3, #50505	; 0xc549
   10624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10628:	701a      	strb	r2, [r3, #0]
   1062a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1062e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10632:	781b      	ldrb	r3, [r3, #0]
   10634:	2bff      	cmp	r3, #255	; 0xff
   10636:	d105      	bne.n	10644 <send_radIR+0x5d0>
   10638:	f24c 5349 	movw	r3, #50505	; 0xc549
   1063c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10640:	2200      	movs	r2, #0
   10642:	701a      	strb	r2, [r3, #0]
   10644:	f24c 5349 	movw	r3, #50505	; 0xc549
   10648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064c:	781b      	ldrb	r3, [r3, #0]
   1064e:	461a      	mov	r2, r3
   10650:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10658:	7819      	ldrb	r1, [r3, #0]
   1065a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	5499      	strb	r1, [r3, r2]
   10664:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066c:	781a      	ldrb	r2, [r3, #0]
   1066e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	781b      	ldrb	r3, [r3, #0]
   10678:	4413      	add	r3, r2
   1067a:	b2da      	uxtb	r2, r3
   1067c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10684:	701a      	strb	r2, [r3, #0]
   10686:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	781a      	ldrb	r2, [r3, #0]
   10690:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10698:	781b      	ldrb	r3, [r3, #0]
   1069a:	4413      	add	r3, r2
   1069c:	b2da      	uxtb	r2, r3
   1069e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a6:	701a      	strb	r2, [r3, #0]
   106a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b0:	781b      	ldrb	r3, [r3, #0]
   106b2:	3301      	adds	r3, #1
   106b4:	b2da      	uxtb	r2, r3
   106b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106be:	701a      	strb	r2, [r3, #0]
   106c0:	f24c 5349 	movw	r3, #50505	; 0xc549
   106c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c8:	781b      	ldrb	r3, [r3, #0]
   106ca:	2bff      	cmp	r3, #255	; 0xff
   106cc:	d105      	bne.n	106da <send_radIR+0x666>
   106ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	2200      	movs	r2, #0
   106d8:	701a      	strb	r2, [r3, #0]
   106da:	f24c 5349 	movw	r3, #50505	; 0xc549
   106de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e2:	781b      	ldrb	r3, [r3, #0]
   106e4:	461a      	mov	r2, r3
   106e6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	7859      	ldrb	r1, [r3, #1]
   106f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f8:	5499      	strb	r1, [r3, r2]
   106fa:	4b8b      	ldr	r3, [pc, #556]	; (10928 <send_radIR+0x8b4>)
   106fc:	781a      	ldrb	r2, [r3, #0]
   106fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	781b      	ldrb	r3, [r3, #0]
   10708:	4413      	add	r3, r2
   1070a:	b2da      	uxtb	r2, r3
   1070c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10714:	701a      	strb	r2, [r3, #0]
   10716:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	781a      	ldrb	r2, [r3, #0]
   10720:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10728:	781b      	ldrb	r3, [r3, #0]
   1072a:	4413      	add	r3, r2
   1072c:	b2da      	uxtb	r2, r3
   1072e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10736:	701a      	strb	r2, [r3, #0]
   10738:	f24c 5349 	movw	r3, #50505	; 0xc549
   1073c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10740:	781b      	ldrb	r3, [r3, #0]
   10742:	3301      	adds	r3, #1
   10744:	b2da      	uxtb	r2, r3
   10746:	f24c 5349 	movw	r3, #50505	; 0xc549
   1074a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074e:	701a      	strb	r2, [r3, #0]
   10750:	f24c 5349 	movw	r3, #50505	; 0xc549
   10754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10758:	781b      	ldrb	r3, [r3, #0]
   1075a:	2bff      	cmp	r3, #255	; 0xff
   1075c:	d105      	bne.n	1076a <send_radIR+0x6f6>
   1075e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10766:	2200      	movs	r2, #0
   10768:	701a      	strb	r2, [r3, #0]
   1076a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1076e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10772:	781b      	ldrb	r3, [r3, #0]
   10774:	461a      	mov	r2, r3
   10776:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1077a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077e:	7899      	ldrb	r1, [r3, #2]
   10780:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10788:	5499      	strb	r1, [r3, r2]
   1078a:	4b68      	ldr	r3, [pc, #416]	; (1092c <send_radIR+0x8b8>)
   1078c:	781a      	ldrb	r2, [r3, #0]
   1078e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10796:	781b      	ldrb	r3, [r3, #0]
   10798:	4413      	add	r3, r2
   1079a:	b2da      	uxtb	r2, r3
   1079c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a4:	701a      	strb	r2, [r3, #0]
   107a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ae:	781a      	ldrb	r2, [r3, #0]
   107b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b8:	781b      	ldrb	r3, [r3, #0]
   107ba:	4413      	add	r3, r2
   107bc:	b2da      	uxtb	r2, r3
   107be:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c6:	701a      	strb	r2, [r3, #0]
   107c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   107cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	3301      	adds	r3, #1
   107d4:	b2da      	uxtb	r2, r3
   107d6:	f24c 5349 	movw	r3, #50505	; 0xc549
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	701a      	strb	r2, [r3, #0]
   107e0:	f24c 5349 	movw	r3, #50505	; 0xc549
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	2bff      	cmp	r3, #255	; 0xff
   107ec:	d105      	bne.n	107fa <send_radIR+0x786>
   107ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	2200      	movs	r2, #0
   107f8:	701a      	strb	r2, [r3, #0]
   107fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   107fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10802:	781b      	ldrb	r3, [r3, #0]
   10804:	461a      	mov	r2, r3
   10806:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	78d9      	ldrb	r1, [r3, #3]
   10810:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10818:	5499      	strb	r1, [r3, r2]
   1081a:	4b45      	ldr	r3, [pc, #276]	; (10930 <send_radIR+0x8bc>)
   1081c:	781a      	ldrb	r2, [r3, #0]
   1081e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10826:	781b      	ldrb	r3, [r3, #0]
   10828:	4413      	add	r3, r2
   1082a:	b2da      	uxtb	r2, r3
   1082c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10834:	701a      	strb	r2, [r3, #0]
   10836:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1083a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1083e:	781a      	ldrb	r2, [r3, #0]
   10840:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10848:	781b      	ldrb	r3, [r3, #0]
   1084a:	4413      	add	r3, r2
   1084c:	b2da      	uxtb	r2, r3
   1084e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10856:	701a      	strb	r2, [r3, #0]
   10858:	f24c 5349 	movw	r3, #50505	; 0xc549
   1085c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	3301      	adds	r3, #1
   10864:	b2da      	uxtb	r2, r3
   10866:	f24c 5349 	movw	r3, #50505	; 0xc549
   1086a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086e:	701a      	strb	r2, [r3, #0]
   10870:	f24c 5349 	movw	r3, #50505	; 0xc549
   10874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	2bff      	cmp	r3, #255	; 0xff
   1087c:	d105      	bne.n	1088a <send_radIR+0x816>
   1087e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10886:	2200      	movs	r2, #0
   10888:	701a      	strb	r2, [r3, #0]
   1088a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1088e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	461a      	mov	r2, r3
   10896:	f240 5342 	movw	r3, #1346	; 0x542
   1089a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089e:	7819      	ldrb	r1, [r3, #0]
   108a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   108a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a8:	5499      	strb	r1, [r3, r2]
   108aa:	f240 5342 	movw	r3, #1346	; 0x542
   108ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b2:	781a      	ldrb	r2, [r3, #0]
   108b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108bc:	781b      	ldrb	r3, [r3, #0]
   108be:	4413      	add	r3, r2
   108c0:	b2da      	uxtb	r2, r3
   108c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ca:	701a      	strb	r2, [r3, #0]
   108cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d4:	781a      	ldrb	r2, [r3, #0]
   108d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108de:	781b      	ldrb	r3, [r3, #0]
   108e0:	4413      	add	r3, r2
   108e2:	b2da      	uxtb	r2, r3
   108e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ec:	701a      	strb	r2, [r3, #0]
   108ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   108f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f6:	781b      	ldrb	r3, [r3, #0]
   108f8:	3301      	adds	r3, #1
   108fa:	b2da      	uxtb	r2, r3
   108fc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10904:	701a      	strb	r2, [r3, #0]
   10906:	f24c 5349 	movw	r3, #50505	; 0xc549
   1090a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090e:	781b      	ldrb	r3, [r3, #0]
   10910:	2bff      	cmp	r3, #255	; 0xff
   10912:	d10f      	bne.n	10934 <send_radIR+0x8c0>
   10914:	f24c 5349 	movw	r3, #50505	; 0xc549
   10918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091c:	2200      	movs	r2, #0
   1091e:	701a      	strb	r2, [r3, #0]
   10920:	e008      	b.n	10934 <send_radIR+0x8c0>
   10922:	bf00      	nop
   10924:	2004cb47 	.word	0x2004cb47
   10928:	2004cb3d 	.word	0x2004cb3d
   1092c:	2004cb3e 	.word	0x2004cb3e
   10930:	2004cb3f 	.word	0x2004cb3f
   10934:	f24c 5349 	movw	r3, #50505	; 0xc549
   10938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093c:	781b      	ldrb	r3, [r3, #0]
   1093e:	461a      	mov	r2, r3
   10940:	f240 5342 	movw	r3, #1346	; 0x542
   10944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10948:	7859      	ldrb	r1, [r3, #1]
   1094a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1094e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10952:	5499      	strb	r1, [r3, r2]
   10954:	4bc2      	ldr	r3, [pc, #776]	; (10c60 <send_radIR+0xbec>)
   10956:	781a      	ldrb	r2, [r3, #0]
   10958:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1095c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10960:	781b      	ldrb	r3, [r3, #0]
   10962:	4413      	add	r3, r2
   10964:	b2da      	uxtb	r2, r3
   10966:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1096a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096e:	701a      	strb	r2, [r3, #0]
   10970:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10978:	781a      	ldrb	r2, [r3, #0]
   1097a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1097e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10982:	781b      	ldrb	r3, [r3, #0]
   10984:	4413      	add	r3, r2
   10986:	b2da      	uxtb	r2, r3
   10988:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1098c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10990:	701a      	strb	r2, [r3, #0]
   10992:	f24c 5349 	movw	r3, #50505	; 0xc549
   10996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	3301      	adds	r3, #1
   1099e:	b2da      	uxtb	r2, r3
   109a0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a8:	701a      	strb	r2, [r3, #0]
   109aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   109ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b2:	781b      	ldrb	r3, [r3, #0]
   109b4:	2bff      	cmp	r3, #255	; 0xff
   109b6:	d105      	bne.n	109c4 <send_radIR+0x950>
   109b8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c0:	2200      	movs	r2, #0
   109c2:	701a      	strb	r2, [r3, #0]
   109c4:	f24c 5349 	movw	r3, #50505	; 0xc549
   109c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109cc:	781b      	ldrb	r3, [r3, #0]
   109ce:	461a      	mov	r2, r3
   109d0:	f240 5344 	movw	r3, #1348	; 0x544
   109d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d8:	7819      	ldrb	r1, [r3, #0]
   109da:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e2:	5499      	strb	r1, [r3, r2]
   109e4:	f240 5344 	movw	r3, #1348	; 0x544
   109e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ec:	781a      	ldrb	r2, [r3, #0]
   109ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f6:	781b      	ldrb	r3, [r3, #0]
   109f8:	4413      	add	r3, r2
   109fa:	b2da      	uxtb	r2, r3
   109fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a04:	701a      	strb	r2, [r3, #0]
   10a06:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0e:	781a      	ldrb	r2, [r3, #0]
   10a10:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a18:	781b      	ldrb	r3, [r3, #0]
   10a1a:	4413      	add	r3, r2
   10a1c:	b2da      	uxtb	r2, r3
   10a1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a26:	701a      	strb	r2, [r3, #0]
   10a28:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a30:	781b      	ldrb	r3, [r3, #0]
   10a32:	3301      	adds	r3, #1
   10a34:	b2da      	uxtb	r2, r3
   10a36:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3e:	701a      	strb	r2, [r3, #0]
   10a40:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a48:	781b      	ldrb	r3, [r3, #0]
   10a4a:	2bff      	cmp	r3, #255	; 0xff
   10a4c:	d105      	bne.n	10a5a <send_radIR+0x9e6>
   10a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a56:	2200      	movs	r2, #0
   10a58:	701a      	strb	r2, [r3, #0]
   10a5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a62:	781b      	ldrb	r3, [r3, #0]
   10a64:	461a      	mov	r2, r3
   10a66:	f240 5344 	movw	r3, #1348	; 0x544
   10a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6e:	7859      	ldrb	r1, [r3, #1]
   10a70:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a78:	5499      	strb	r1, [r3, r2]
   10a7a:	4b7a      	ldr	r3, [pc, #488]	; (10c64 <send_radIR+0xbf0>)
   10a7c:	781a      	ldrb	r2, [r3, #0]
   10a7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a86:	781b      	ldrb	r3, [r3, #0]
   10a88:	4413      	add	r3, r2
   10a8a:	b2da      	uxtb	r2, r3
   10a8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a94:	701a      	strb	r2, [r3, #0]
   10a96:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9e:	781a      	ldrb	r2, [r3, #0]
   10aa0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa8:	781b      	ldrb	r3, [r3, #0]
   10aaa:	4413      	add	r3, r2
   10aac:	b2da      	uxtb	r2, r3
   10aae:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab6:	701a      	strb	r2, [r3, #0]
   10ab8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac0:	781b      	ldrb	r3, [r3, #0]
   10ac2:	3301      	adds	r3, #1
   10ac4:	b2da      	uxtb	r2, r3
   10ac6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ace:	701a      	strb	r2, [r3, #0]
   10ad0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	781b      	ldrb	r3, [r3, #0]
   10ada:	2bff      	cmp	r3, #255	; 0xff
   10adc:	d105      	bne.n	10aea <send_radIR+0xa76>
   10ade:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae6:	2200      	movs	r2, #0
   10ae8:	701a      	strb	r2, [r3, #0]
   10aea:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af2:	781b      	ldrb	r3, [r3, #0]
   10af4:	461a      	mov	r2, r3
   10af6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10afe:	7819      	ldrb	r1, [r3, #0]
   10b00:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b08:	5499      	strb	r1, [r3, r2]
   10b0a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b12:	781b      	ldrb	r3, [r3, #0]
   10b14:	3301      	adds	r3, #1
   10b16:	b2da      	uxtb	r2, r3
   10b18:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	701a      	strb	r2, [r3, #0]
   10b22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2a:	781b      	ldrb	r3, [r3, #0]
   10b2c:	2bff      	cmp	r3, #255	; 0xff
   10b2e:	d105      	bne.n	10b3c <send_radIR+0xac8>
   10b30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b38:	2200      	movs	r2, #0
   10b3a:	701a      	strb	r2, [r3, #0]
   10b3c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	461a      	mov	r2, r3
   10b48:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b50:	7819      	ldrb	r1, [r3, #0]
   10b52:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5a:	5499      	strb	r1, [r3, r2]
   10b5c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b64:	781b      	ldrb	r3, [r3, #0]
   10b66:	3301      	adds	r3, #1
   10b68:	b2da      	uxtb	r2, r3
   10b6a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b72:	701a      	strb	r2, [r3, #0]
   10b74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7c:	781b      	ldrb	r3, [r3, #0]
   10b7e:	2bff      	cmp	r3, #255	; 0xff
   10b80:	d105      	bne.n	10b8e <send_radIR+0xb1a>
   10b82:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8a:	2200      	movs	r2, #0
   10b8c:	701a      	strb	r2, [r3, #0]
   10b8e:	f242 0339 	movw	r3, #8249	; 0x2039
   10b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b96:	781b      	ldrb	r3, [r3, #0]
   10b98:	b2db      	uxtb	r3, r3
   10b9a:	f003 0310 	and.w	r3, r3, #16
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d15a      	bne.n	10c58 <send_radIR+0xbe4>
   10ba2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10baa:	781b      	ldrb	r3, [r3, #0]
   10bac:	b2db      	uxtb	r3, r3
   10bae:	461a      	mov	r2, r3
   10bb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb8:	5c9a      	ldrb	r2, [r3, r2]
   10bba:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc2:	701a      	strb	r2, [r3, #0]
   10bc4:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	2200      	movs	r2, #0
   10bce:	701a      	strb	r2, [r3, #0]
   10bd0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd8:	781b      	ldrb	r3, [r3, #0]
   10bda:	b2db      	uxtb	r3, r3
   10bdc:	3301      	adds	r3, #1
   10bde:	b2da      	uxtb	r2, r3
   10be0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be8:	701a      	strb	r2, [r3, #0]
   10bea:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf2:	781b      	ldrb	r3, [r3, #0]
   10bf4:	b2db      	uxtb	r3, r3
   10bf6:	2bff      	cmp	r3, #255	; 0xff
   10bf8:	d105      	bne.n	10c06 <send_radIR+0xb92>
   10bfa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c02:	2200      	movs	r2, #0
   10c04:	701a      	strb	r2, [r3, #0]
   10c06:	f242 0338 	movw	r3, #8248	; 0x2038
   10c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0e:	f242 0238 	movw	r2, #8248	; 0x2038
   10c12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c16:	7812      	ldrb	r2, [r2, #0]
   10c18:	b2d2      	uxtb	r2, r2
   10c1a:	f042 0201 	orr.w	r2, r2, #1
   10c1e:	b2d2      	uxtb	r2, r2
   10c20:	701a      	strb	r2, [r3, #0]
   10c22:	f242 0339 	movw	r3, #8249	; 0x2039
   10c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c2a:	f242 0239 	movw	r2, #8249	; 0x2039
   10c2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c32:	7812      	ldrb	r2, [r2, #0]
   10c34:	b2d2      	uxtb	r2, r2
   10c36:	f042 0210 	orr.w	r2, r2, #16
   10c3a:	b2d2      	uxtb	r2, r2
   10c3c:	701a      	strb	r2, [r3, #0]
   10c3e:	e00b      	b.n	10c58 <send_radIR+0xbe4>
   10c40:	f24c 5348 	movw	r3, #50504	; 0xc548
   10c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c48:	781b      	ldrb	r3, [r3, #0]
   10c4a:	3301      	adds	r3, #1
   10c4c:	b2da      	uxtb	r2, r3
   10c4e:	f24c 5348 	movw	r3, #50504	; 0xc548
   10c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c56:	701a      	strb	r2, [r3, #0]
}
   10c58:	46bd      	mov	sp, r7
   10c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c5e:	4770      	bx	lr
   10c60:	20000543 	.word	0x20000543
   10c64:	20000545 	.word	0x20000545

00010c68 <send_takeOff>:

void send_takeOff(void){
   10c68:	b580      	push	{r7, lr}
   10c6a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10c6c:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c74:	781b      	ldrb	r3, [r3, #0]
   10c76:	2b00      	cmp	r3, #0
   10c78:	f000 8200 	beq.w	1107c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10c7c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c84:	881b      	ldrh	r3, [r3, #0]
   10c86:	2b00      	cmp	r3, #0
   10c88:	f040 81f2 	bne.w	11070 <send_takeOff+0x408>
   10c8c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c94:	681b      	ldr	r3, [r3, #0]
   10c96:	4618      	mov	r0, r3
   10c98:	f04f 0100 	mov.w	r1, #0
   10c9c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10ca0:	f007 fe58 	bl	18954 <__aeabi_fcmpgt>
   10ca4:	4603      	mov	r3, r0
   10ca6:	2b00      	cmp	r3, #0
   10ca8:	f000 81e2 	beq.w	11070 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10cac:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb4:	2201      	movs	r2, #1
   10cb6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10cb8:	f24c 5340 	movw	r3, #50496	; 0xc540
   10cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc0:	2201      	movs	r2, #1
   10cc2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	781a      	ldrb	r2, [r3, #0]
   10cce:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd6:	781b      	ldrb	r3, [r3, #0]
   10cd8:	b2db      	uxtb	r3, r3
   10cda:	429a      	cmp	r2, r3
   10cdc:	d313      	bcc.n	10d06 <send_takeOff+0x9e>
   10cde:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce6:	781b      	ldrb	r3, [r3, #0]
   10ce8:	b2db      	uxtb	r3, r3
   10cea:	461a      	mov	r2, r3
   10cec:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	781b      	ldrb	r3, [r3, #0]
   10cf6:	1ad3      	subs	r3, r2, r3
   10cf8:	33ff      	adds	r3, #255	; 0xff
   10cfa:	2b06      	cmp	r3, #6
   10cfc:	bfd4      	ite	le
   10cfe:	2300      	movle	r3, #0
   10d00:	2301      	movgt	r3, #1
   10d02:	b2db      	uxtb	r3, r3
   10d04:	e011      	b.n	10d2a <send_takeOff+0xc2>
   10d06:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0e:	781b      	ldrb	r3, [r3, #0]
   10d10:	b2db      	uxtb	r3, r3
   10d12:	461a      	mov	r2, r3
   10d14:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1c:	781b      	ldrb	r3, [r3, #0]
   10d1e:	1ad3      	subs	r3, r2, r3
   10d20:	2b06      	cmp	r3, #6
   10d22:	bfd4      	ite	le
   10d24:	2300      	movle	r3, #0
   10d26:	2301      	movgt	r3, #1
   10d28:	b2db      	uxtb	r3, r3
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	f000 8194 	beq.w	11058 <send_takeOff+0x3f0>
   10d30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d38:	781b      	ldrb	r3, [r3, #0]
   10d3a:	461a      	mov	r2, r3
   10d3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d44:	2105      	movs	r1, #5
   10d46:	5499      	strb	r1, [r3, r2]
   10d48:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d50:	781b      	ldrb	r3, [r3, #0]
   10d52:	3301      	adds	r3, #1
   10d54:	b2da      	uxtb	r2, r3
   10d56:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5e:	701a      	strb	r2, [r3, #0]
   10d60:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d68:	781b      	ldrb	r3, [r3, #0]
   10d6a:	2bff      	cmp	r3, #255	; 0xff
   10d6c:	d105      	bne.n	10d7a <send_takeOff+0x112>
   10d6e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d76:	2200      	movs	r2, #0
   10d78:	701a      	strb	r2, [r3, #0]
   10d7a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d82:	781b      	ldrb	r3, [r3, #0]
   10d84:	461a      	mov	r2, r3
   10d86:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8e:	2104      	movs	r1, #4
   10d90:	5499      	strb	r1, [r3, r2]
   10d92:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d9a:	781b      	ldrb	r3, [r3, #0]
   10d9c:	3301      	adds	r3, #1
   10d9e:	b2da      	uxtb	r2, r3
   10da0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da8:	701a      	strb	r2, [r3, #0]
   10daa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db2:	781b      	ldrb	r3, [r3, #0]
   10db4:	2bff      	cmp	r3, #255	; 0xff
   10db6:	d105      	bne.n	10dc4 <send_takeOff+0x15c>
   10db8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc0:	2200      	movs	r2, #0
   10dc2:	701a      	strb	r2, [r3, #0]
   10dc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dcc:	2204      	movs	r2, #4
   10dce:	701a      	strb	r2, [r3, #0]
   10dd0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd8:	2204      	movs	r2, #4
   10dda:	701a      	strb	r2, [r3, #0]
   10ddc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de4:	781b      	ldrb	r3, [r3, #0]
   10de6:	461a      	mov	r2, r3
   10de8:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df0:	7819      	ldrb	r1, [r3, #0]
   10df2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfa:	5499      	strb	r1, [r3, r2]
   10dfc:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e04:	781a      	ldrb	r2, [r3, #0]
   10e06:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0e:	781b      	ldrb	r3, [r3, #0]
   10e10:	4413      	add	r3, r2
   10e12:	b2da      	uxtb	r2, r3
   10e14:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e1c:	701a      	strb	r2, [r3, #0]
   10e1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e26:	781a      	ldrb	r2, [r3, #0]
   10e28:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e30:	781b      	ldrb	r3, [r3, #0]
   10e32:	4413      	add	r3, r2
   10e34:	b2da      	uxtb	r2, r3
   10e36:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3e:	701a      	strb	r2, [r3, #0]
   10e40:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e48:	781b      	ldrb	r3, [r3, #0]
   10e4a:	3301      	adds	r3, #1
   10e4c:	b2da      	uxtb	r2, r3
   10e4e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e56:	701a      	strb	r2, [r3, #0]
   10e58:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e60:	781b      	ldrb	r3, [r3, #0]
   10e62:	2bff      	cmp	r3, #255	; 0xff
   10e64:	d105      	bne.n	10e72 <send_takeOff+0x20a>
   10e66:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6e:	2200      	movs	r2, #0
   10e70:	701a      	strb	r2, [r3, #0]
   10e72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7a:	781b      	ldrb	r3, [r3, #0]
   10e7c:	461a      	mov	r2, r3
   10e7e:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e86:	7859      	ldrb	r1, [r3, #1]
   10e88:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e90:	5499      	strb	r1, [r3, r2]
   10e92:	4b7b      	ldr	r3, [pc, #492]	; (11080 <send_takeOff+0x418>)
   10e94:	781a      	ldrb	r2, [r3, #0]
   10e96:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	4413      	add	r3, r2
   10ea2:	b2da      	uxtb	r2, r3
   10ea4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eac:	701a      	strb	r2, [r3, #0]
   10eae:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb6:	781a      	ldrb	r2, [r3, #0]
   10eb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	4413      	add	r3, r2
   10ec4:	b2da      	uxtb	r2, r3
   10ec6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ece:	701a      	strb	r2, [r3, #0]
   10ed0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed8:	781b      	ldrb	r3, [r3, #0]
   10eda:	3301      	adds	r3, #1
   10edc:	b2da      	uxtb	r2, r3
   10ede:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee6:	701a      	strb	r2, [r3, #0]
   10ee8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef0:	781b      	ldrb	r3, [r3, #0]
   10ef2:	2bff      	cmp	r3, #255	; 0xff
   10ef4:	d105      	bne.n	10f02 <send_takeOff+0x29a>
   10ef6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efe:	2200      	movs	r2, #0
   10f00:	701a      	strb	r2, [r3, #0]
   10f02:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0a:	781b      	ldrb	r3, [r3, #0]
   10f0c:	461a      	mov	r2, r3
   10f0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f16:	7819      	ldrb	r1, [r3, #0]
   10f18:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f20:	5499      	strb	r1, [r3, r2]
   10f22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2a:	781b      	ldrb	r3, [r3, #0]
   10f2c:	3301      	adds	r3, #1
   10f2e:	b2da      	uxtb	r2, r3
   10f30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f38:	701a      	strb	r2, [r3, #0]
   10f3a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f42:	781b      	ldrb	r3, [r3, #0]
   10f44:	2bff      	cmp	r3, #255	; 0xff
   10f46:	d105      	bne.n	10f54 <send_takeOff+0x2ec>
   10f48:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f50:	2200      	movs	r2, #0
   10f52:	701a      	strb	r2, [r3, #0]
   10f54:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5c:	781b      	ldrb	r3, [r3, #0]
   10f5e:	461a      	mov	r2, r3
   10f60:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f68:	7819      	ldrb	r1, [r3, #0]
   10f6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f72:	5499      	strb	r1, [r3, r2]
   10f74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f7c:	781b      	ldrb	r3, [r3, #0]
   10f7e:	3301      	adds	r3, #1
   10f80:	b2da      	uxtb	r2, r3
   10f82:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8a:	701a      	strb	r2, [r3, #0]
   10f8c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	2bff      	cmp	r3, #255	; 0xff
   10f98:	d105      	bne.n	10fa6 <send_takeOff+0x33e>
   10f9a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa2:	2200      	movs	r2, #0
   10fa4:	701a      	strb	r2, [r3, #0]
   10fa6:	f242 0339 	movw	r3, #8249	; 0x2039
   10faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fae:	781b      	ldrb	r3, [r3, #0]
   10fb0:	b2db      	uxtb	r3, r3
   10fb2:	f003 0310 	and.w	r3, r3, #16
   10fb6:	2b00      	cmp	r3, #0
   10fb8:	d15a      	bne.n	11070 <send_takeOff+0x408>
   10fba:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc2:	781b      	ldrb	r3, [r3, #0]
   10fc4:	b2db      	uxtb	r3, r3
   10fc6:	461a      	mov	r2, r3
   10fc8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd0:	5c9a      	ldrb	r2, [r3, r2]
   10fd2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fda:	701a      	strb	r2, [r3, #0]
   10fdc:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe4:	2200      	movs	r2, #0
   10fe6:	701a      	strb	r2, [r3, #0]
   10fe8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff0:	781b      	ldrb	r3, [r3, #0]
   10ff2:	b2db      	uxtb	r3, r3
   10ff4:	3301      	adds	r3, #1
   10ff6:	b2da      	uxtb	r2, r3
   10ff8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11000:	701a      	strb	r2, [r3, #0]
   11002:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1100a:	781b      	ldrb	r3, [r3, #0]
   1100c:	b2db      	uxtb	r3, r3
   1100e:	2bff      	cmp	r3, #255	; 0xff
   11010:	d105      	bne.n	1101e <send_takeOff+0x3b6>
   11012:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1101a:	2200      	movs	r2, #0
   1101c:	701a      	strb	r2, [r3, #0]
   1101e:	f242 0338 	movw	r3, #8248	; 0x2038
   11022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11026:	f242 0238 	movw	r2, #8248	; 0x2038
   1102a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1102e:	7812      	ldrb	r2, [r2, #0]
   11030:	b2d2      	uxtb	r2, r2
   11032:	f042 0201 	orr.w	r2, r2, #1
   11036:	b2d2      	uxtb	r2, r2
   11038:	701a      	strb	r2, [r3, #0]
   1103a:	f242 0339 	movw	r3, #8249	; 0x2039
   1103e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11042:	f242 0239 	movw	r2, #8249	; 0x2039
   11046:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104a:	7812      	ldrb	r2, [r2, #0]
   1104c:	b2d2      	uxtb	r2, r2
   1104e:	f042 0210 	orr.w	r2, r2, #16
   11052:	b2d2      	uxtb	r2, r2
   11054:	701a      	strb	r2, [r3, #0]
   11056:	e00b      	b.n	11070 <send_takeOff+0x408>
   11058:	f24c 5348 	movw	r3, #50504	; 0xc548
   1105c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11060:	781b      	ldrb	r3, [r3, #0]
   11062:	3301      	adds	r3, #1
   11064:	b2da      	uxtb	r2, r3
   11066:	f24c 5348 	movw	r3, #50504	; 0xc548
   1106a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   11070:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11078:	2200      	movs	r2, #0
   1107a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   1107c:	bd80      	pop	{r7, pc}
   1107e:	bf00      	nop
   11080:	2004c52b 	.word	0x2004c52b
   11084:	f3af 8000 	nop.w

00011088 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11088:	b480      	push	{r7}
   1108a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   1108c:	f242 0317 	movw	r3, #8215	; 0x2017
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	f242 0217 	movw	r2, #8215	; 0x2017
   11098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1109c:	7812      	ldrb	r2, [r2, #0]
   1109e:	b2d2      	uxtb	r2, r2
   110a0:	f042 0210 	orr.w	r2, r2, #16
   110a4:	b2d2      	uxtb	r2, r2
   110a6:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   110a8:	f242 0331 	movw	r3, #8241	; 0x2031
   110ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b0:	2201      	movs	r2, #1
   110b2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   110b4:	f242 0333 	movw	r3, #8243	; 0x2033
   110b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110bc:	2219      	movs	r2, #25
   110be:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   110c0:	f242 0311 	movw	r3, #8209	; 0x2011
   110c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c8:	f242 0211 	movw	r2, #8209	; 0x2011
   110cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d0:	7812      	ldrb	r2, [r2, #0]
   110d2:	b2d2      	uxtb	r2, r2
   110d4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   110d8:	b2d2      	uxtb	r2, r2
   110da:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110dc:	f242 0312 	movw	r3, #8210	; 0x2012
   110e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e4:	f242 0212 	movw	r2, #8210	; 0x2012
   110e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ec:	7812      	ldrb	r2, [r2, #0]
   110ee:	b2d2      	uxtb	r2, r2
   110f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110f4:	b2d2      	uxtb	r2, r2
   110f6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   110f8:	f242 0312 	movw	r3, #8210	; 0x2012
   110fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11100:	f242 0212 	movw	r2, #8210	; 0x2012
   11104:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11108:	7812      	ldrb	r2, [r2, #0]
   1110a:	b2d2      	uxtb	r2, r2
   1110c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11110:	b2d2      	uxtb	r2, r2
   11112:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   11114:	f242 033a 	movw	r3, #8250	; 0x203a
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	f242 023a 	movw	r2, #8250	; 0x203a
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	b2d2      	uxtb	r2, r2
   11128:	f042 0202 	orr.w	r2, r2, #2
   1112c:	b2d2      	uxtb	r2, r2
   1112e:	701a      	strb	r2, [r3, #0]
}
   11130:	46bd      	mov	sp, r7
   11132:	f85d 7b04 	ldr.w	r7, [sp], #4
   11136:	4770      	bx	lr

00011138 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11138:	b480      	push	{r7}
   1113a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1113c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11140:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11144:	781b      	ldrb	r3, [r3, #0]
   11146:	2b00      	cmp	r3, #0
   11148:	d10e      	bne.n	11168 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1114a:	f242 0312 	movw	r3, #8210	; 0x2012
   1114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11152:	f242 0212 	movw	r2, #8210	; 0x2012
   11156:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1115a:	7812      	ldrb	r2, [r2, #0]
   1115c:	b2d2      	uxtb	r2, r2
   1115e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11162:	b2d2      	uxtb	r2, r2
   11164:	701a      	strb	r2, [r3, #0]
   11166:	e047      	b.n	111f8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11168:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1116c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11170:	781b      	ldrb	r3, [r3, #0]
   11172:	2b08      	cmp	r3, #8
   11174:	d832      	bhi.n	111dc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11176:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1117a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1117e:	781b      	ldrb	r3, [r3, #0]
   11180:	f003 0301 	and.w	r3, r3, #1
   11184:	2b00      	cmp	r3, #0
   11186:	d00e      	beq.n	111a6 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11188:	f242 0312 	movw	r3, #8210	; 0x2012
   1118c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11190:	f242 0212 	movw	r2, #8210	; 0x2012
   11194:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11198:	7812      	ldrb	r2, [r2, #0]
   1119a:	b2d2      	uxtb	r2, r2
   1119c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111a0:	b2d2      	uxtb	r2, r2
   111a2:	701a      	strb	r2, [r3, #0]
   111a4:	e00d      	b.n	111c2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   111a6:	f242 0312 	movw	r3, #8210	; 0x2012
   111aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ae:	f242 0212 	movw	r2, #8210	; 0x2012
   111b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111b6:	7812      	ldrb	r2, [r2, #0]
   111b8:	b2d2      	uxtb	r2, r2
   111ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   111be:	b2d2      	uxtb	r2, r2
   111c0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   111c2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ca:	781b      	ldrb	r3, [r3, #0]
   111cc:	085b      	lsrs	r3, r3, #1
   111ce:	b2da      	uxtb	r2, r3
   111d0:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d8:	701a      	strb	r2, [r3, #0]
   111da:	e00d      	b.n	111f8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   111dc:	f242 0312 	movw	r3, #8210	; 0x2012
   111e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e4:	f242 0212 	movw	r2, #8210	; 0x2012
   111e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ec:	7812      	ldrb	r2, [r2, #0]
   111ee:	b2d2      	uxtb	r2, r2
   111f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111f4:	b2d2      	uxtb	r2, r2
   111f6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   111f8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11200:	781b      	ldrb	r3, [r3, #0]
   11202:	3301      	adds	r3, #1
   11204:	b2da      	uxtb	r2, r3
   11206:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1120a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1120e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11210:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11218:	781b      	ldrb	r3, [r3, #0]
   1121a:	2b09      	cmp	r3, #9
   1121c:	d94d      	bls.n	112ba <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1121e:	f24c 5349 	movw	r3, #50505	; 0xc549
   11222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11226:	781a      	ldrb	r2, [r3, #0]
   11228:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1122c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11230:	781b      	ldrb	r3, [r3, #0]
   11232:	b2db      	uxtb	r3, r3
   11234:	429a      	cmp	r2, r3
   11236:	d10e      	bne.n	11256 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11238:	f242 0339 	movw	r3, #8249	; 0x2039
   1123c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11240:	f242 0239 	movw	r2, #8249	; 0x2039
   11244:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11248:	7812      	ldrb	r2, [r2, #0]
   1124a:	b2d2      	uxtb	r2, r2
   1124c:	f022 0210 	bic.w	r2, r2, #16
   11250:	b2d2      	uxtb	r2, r2
   11252:	701a      	strb	r2, [r3, #0]
   11254:	e031      	b.n	112ba <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11256:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1125a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1125e:	781b      	ldrb	r3, [r3, #0]
   11260:	b2db      	uxtb	r3, r3
   11262:	461a      	mov	r2, r3
   11264:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1126c:	5c9a      	ldrb	r2, [r3, r2]
   1126e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11276:	701a      	strb	r2, [r3, #0]
   11278:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1127c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11280:	2200      	movs	r2, #0
   11282:	701a      	strb	r2, [r3, #0]
   11284:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128c:	781b      	ldrb	r3, [r3, #0]
   1128e:	b2db      	uxtb	r3, r3
   11290:	3301      	adds	r3, #1
   11292:	b2da      	uxtb	r2, r3
   11294:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1129c:	701a      	strb	r2, [r3, #0]
   1129e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   112a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	b2db      	uxtb	r3, r3
   112aa:	2bff      	cmp	r3, #255	; 0xff
   112ac:	d105      	bne.n	112ba <__vector_5+0x182>
   112ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
   112b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b6:	2200      	movs	r2, #0
   112b8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   112ba:	46bd      	mov	sp, r7
   112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   112c0:	4770      	bx	lr
   112c2:	bf00      	nop

000112c4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   112c4:	b480      	push	{r7}
   112c6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   112c8:	f24c 637f 	movw	r3, #50815	; 0xc67f
   112cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   112d2:	f240 533e 	movw	r3, #1342	; 0x53e
   112d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112da:	2200      	movs	r2, #0
   112dc:	701a      	strb	r2, [r3, #0]
}
   112de:	46bd      	mov	sp, r7
   112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   112e4:	4770      	bx	lr
   112e6:	bf00      	nop

000112e8 <link_fbw_send>:

void link_fbw_send(void) {
   112e8:	b480      	push	{r7}
   112ea:	b083      	sub	sp, #12
   112ec:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   112ee:	f24c 6384 	movw	r3, #50820	; 0xc684
   112f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f6:	781b      	ldrb	r3, [r3, #0]
   112f8:	b2db      	uxtb	r3, r3
   112fa:	2b00      	cmp	r3, #0
   112fc:	d00c      	beq.n	11318 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   112fe:	f24c 6385 	movw	r3, #50821	; 0xc685
   11302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11306:	781b      	ldrb	r3, [r3, #0]
   11308:	3301      	adds	r3, #1
   1130a:	b2da      	uxtb	r2, r3
   1130c:	f24c 6385 	movw	r3, #50821	; 0xc685
   11310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11314:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   11316:	e064      	b.n	113e2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11318:	f242 030d 	movw	r3, #8205	; 0x200d
   1131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11320:	2251      	movs	r2, #81	; 0x51
   11322:	701a      	strb	r2, [r3, #0]
   11324:	f242 030e 	movw	r3, #8206	; 0x200e
   11328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132c:	781b      	ldrb	r3, [r3, #0]
   1132e:	b2db      	uxtb	r3, r3
   11330:	b2db      	uxtb	r3, r3
   11332:	b25b      	sxtb	r3, r3
   11334:	2b00      	cmp	r3, #0
   11336:	da05      	bge.n	11344 <link_fbw_send+0x5c>
   11338:	f242 030f 	movw	r3, #8207	; 0x200f
   1133c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11340:	781b      	ldrb	r3, [r3, #0]
   11342:	71fb      	strb	r3, [r7, #7]
   11344:	f242 030d 	movw	r3, #8205	; 0x200d
   11348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134c:	f242 020d 	movw	r2, #8205	; 0x200d
   11350:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11354:	7812      	ldrb	r2, [r2, #0]
   11356:	b2d2      	uxtb	r2, r2
   11358:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1135c:	b2d2      	uxtb	r2, r2
   1135e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11360:	f24c 6384 	movw	r3, #50820	; 0xc684
   11364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11368:	2201      	movs	r2, #1
   1136a:	701a      	strb	r2, [r3, #0]
   1136c:	f242 0318 	movw	r3, #8216	; 0x2018
   11370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11374:	f242 0218 	movw	r2, #8216	; 0x2018
   11378:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1137c:	7812      	ldrb	r2, [r2, #0]
   1137e:	b2d2      	uxtb	r2, r2
   11380:	f022 0201 	bic.w	r2, r2, #1
   11384:	b2d2      	uxtb	r2, r2
   11386:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11388:	f24c 6381 	movw	r3, #50817	; 0xc681
   1138c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11390:	2200      	movs	r2, #0
   11392:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11394:	f24c 6382 	movw	r3, #50818	; 0xc682
   11398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139c:	2200      	movs	r2, #0
   1139e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   113a0:	f24c 6381 	movw	r3, #50817	; 0xc681
   113a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a8:	781b      	ldrb	r3, [r3, #0]
   113aa:	461a      	mov	r2, r3
   113ac:	f24c 6368 	movw	r3, #50792	; 0xc668
   113b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b4:	4413      	add	r3, r2
   113b6:	781a      	ldrb	r2, [r3, #0]
   113b8:	f24c 6383 	movw	r3, #50819	; 0xc683
   113bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   113c2:	f242 030f 	movw	r3, #8207	; 0x200f
   113c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ca:	f24c 6283 	movw	r2, #50819	; 0xc683
   113ce:	f2c2 0204 	movt	r2, #8196	; 0x2004
   113d2:	7812      	ldrb	r2, [r2, #0]
   113d4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   113d6:	f24c 637e 	movw	r3, #50814	; 0xc67e
   113da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113de:	2200      	movs	r2, #0
   113e0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   113e2:	370c      	adds	r7, #12
   113e4:	46bd      	mov	sp, r7
   113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   113ea:	4770      	bx	lr

000113ec <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   113ec:	b480      	push	{r7}
   113ee:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   113f0:	f242 032a 	movw	r3, #8234	; 0x202a
   113f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f8:	f242 022c 	movw	r2, #8236	; 0x202c
   113fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11400:	8812      	ldrh	r2, [r2, #0]
   11402:	b292      	uxth	r2, r2
   11404:	32c8      	adds	r2, #200	; 0xc8
   11406:	b292      	uxth	r2, r2
   11408:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   1140a:	f242 0336 	movw	r3, #8246	; 0x2036
   1140e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11412:	f242 0236 	movw	r2, #8246	; 0x2036
   11416:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1141a:	7812      	ldrb	r2, [r2, #0]
   1141c:	b2d2      	uxtb	r2, r2
   1141e:	f042 0210 	orr.w	r2, r2, #16
   11422:	b2d2      	uxtb	r2, r2
   11424:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11426:	f242 0337 	movw	r3, #8247	; 0x2037
   1142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142e:	f242 0237 	movw	r2, #8247	; 0x2037
   11432:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11436:	7812      	ldrb	r2, [r2, #0]
   11438:	b2d2      	uxtb	r2, r2
   1143a:	f042 0210 	orr.w	r2, r2, #16
   1143e:	b2d2      	uxtb	r2, r2
   11440:	701a      	strb	r2, [r3, #0]
}
   11442:	46bd      	mov	sp, r7
   11444:	f85d 7b04 	ldr.w	r7, [sp], #4
   11448:	4770      	bx	lr
   1144a:	bf00      	nop

0001144c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1144c:	b480      	push	{r7}
   1144e:	b083      	sub	sp, #12
   11450:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11452:	f242 0337 	movw	r3, #8247	; 0x2037
   11456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1145a:	f242 0237 	movw	r2, #8247	; 0x2037
   1145e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11462:	7812      	ldrb	r2, [r2, #0]
   11464:	b2d2      	uxtb	r2, r2
   11466:	f022 0210 	bic.w	r2, r2, #16
   1146a:	b2d2      	uxtb	r2, r2
   1146c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1146e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11476:	781b      	ldrb	r3, [r3, #0]
   11478:	3301      	adds	r3, #1
   1147a:	b2da      	uxtb	r2, r3
   1147c:	f24c 6381 	movw	r3, #50817	; 0xc681
   11480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11484:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11486:	f24c 6381 	movw	r3, #50817	; 0xc681
   1148a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148e:	781b      	ldrb	r3, [r3, #0]
   11490:	2b17      	cmp	r3, #23
   11492:	d162      	bne.n	1155a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11494:	f242 030f 	movw	r3, #8207	; 0x200f
   11498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149c:	781b      	ldrb	r3, [r3, #0]
   1149e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   114a0:	f24c 6382 	movw	r3, #50818	; 0xc682
   114a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a8:	781b      	ldrb	r3, [r3, #0]
   114aa:	79fa      	ldrb	r2, [r7, #7]
   114ac:	429a      	cmp	r2, r3
   114ae:	d110      	bne.n	114d2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   114b0:	f24c 637e 	movw	r3, #50814	; 0xc67e
   114b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b8:	2201      	movs	r2, #1
   114ba:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   114bc:	f24c 6350 	movw	r3, #50768	; 0xc650
   114c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c4:	7d1a      	ldrb	r2, [r3, #20]
   114c6:	f24c 6380 	movw	r3, #50816	; 0xc680
   114ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ce:	701a      	strb	r2, [r3, #0]
   114d0:	e00c      	b.n	114ec <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   114d2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   114d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114da:	781b      	ldrb	r3, [r3, #0]
   114dc:	b2db      	uxtb	r3, r3
   114de:	3301      	adds	r3, #1
   114e0:	b2da      	uxtb	r2, r3
   114e2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   114e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ea:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   114ec:	f240 533e 	movw	r3, #1342	; 0x53e
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	2201      	movs	r2, #1
   114f6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   114f8:	f24c 6384 	movw	r3, #50820	; 0xc684
   114fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11500:	2200      	movs	r2, #0
   11502:	701a      	strb	r2, [r3, #0]
   11504:	f242 0318 	movw	r3, #8216	; 0x2018
   11508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150c:	f242 0218 	movw	r2, #8216	; 0x2018
   11510:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11514:	7812      	ldrb	r2, [r2, #0]
   11516:	b2d2      	uxtb	r2, r2
   11518:	f042 0201 	orr.w	r2, r2, #1
   1151c:	b2d2      	uxtb	r2, r2
   1151e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11520:	f242 030d 	movw	r3, #8205	; 0x200d
   11524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11528:	f242 020d 	movw	r2, #8205	; 0x200d
   1152c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11530:	7812      	ldrb	r2, [r2, #0]
   11532:	b2d2      	uxtb	r2, r2
   11534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11538:	b2d2      	uxtb	r2, r2
   1153a:	701a      	strb	r2, [r3, #0]
   1153c:	f242 030d 	movw	r3, #8205	; 0x200d
   11540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11544:	f242 020d 	movw	r2, #8205	; 0x200d
   11548:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1154c:	7812      	ldrb	r2, [r2, #0]
   1154e:	b2d2      	uxtb	r2, r2
   11550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11554:	b2d2      	uxtb	r2, r2
   11556:	701a      	strb	r2, [r3, #0]
    return;
   11558:	e051      	b.n	115fe <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1155a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1155e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11562:	781b      	ldrb	r3, [r3, #0]
   11564:	2b15      	cmp	r3, #21
   11566:	d820      	bhi.n	115aa <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11568:	f24c 6381 	movw	r3, #50817	; 0xc681
   1156c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11570:	781b      	ldrb	r3, [r3, #0]
   11572:	461a      	mov	r2, r3
   11574:	f24c 6368 	movw	r3, #50792	; 0xc668
   11578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157c:	4413      	add	r3, r2
   1157e:	781b      	ldrb	r3, [r3, #0]
   11580:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11582:	f242 030f 	movw	r3, #8207	; 0x200f
   11586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1158a:	79fa      	ldrb	r2, [r7, #7]
   1158c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1158e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11596:	781a      	ldrb	r2, [r3, #0]
   11598:	79fb      	ldrb	r3, [r7, #7]
   1159a:	4053      	eors	r3, r2
   1159c:	b2da      	uxtb	r2, r3
   1159e:	f24c 6383 	movw	r3, #50819	; 0xc683
   115a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a6:	701a      	strb	r2, [r3, #0]
   115a8:	e009      	b.n	115be <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   115aa:	f242 030f 	movw	r3, #8207	; 0x200f
   115ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b2:	f24c 6283 	movw	r2, #50819	; 0xc683
   115b6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   115ba:	7812      	ldrb	r2, [r2, #0]
   115bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   115be:	f242 030f 	movw	r3, #8207	; 0x200f
   115c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c6:	781b      	ldrb	r3, [r3, #0]
   115c8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   115ca:	f24c 6381 	movw	r3, #50817	; 0xc681
   115ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d2:	781b      	ldrb	r3, [r3, #0]
   115d4:	1e5a      	subs	r2, r3, #1
   115d6:	f24c 6350 	movw	r3, #50768	; 0xc650
   115da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115de:	4413      	add	r3, r2
   115e0:	79fa      	ldrb	r2, [r7, #7]
   115e2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   115e4:	f24c 6382 	movw	r3, #50818	; 0xc682
   115e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ec:	781a      	ldrb	r2, [r3, #0]
   115ee:	79fb      	ldrb	r3, [r7, #7]
   115f0:	4053      	eors	r3, r2
   115f2:	b2da      	uxtb	r2, r3
   115f4:	f24c 6382 	movw	r3, #50818	; 0xc682
   115f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fc:	701a      	strb	r2, [r3, #0]
}
   115fe:	370c      	adds	r7, #12
   11600:	46bd      	mov	sp, r7
   11602:	f85d 7b04 	ldr.w	r7, [sp], #4
   11606:	4770      	bx	lr

00011608 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11608:	b480      	push	{r7}
   1160a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   1160c:	f242 0317 	movw	r3, #8215	; 0x2017
   11610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11614:	f242 0217 	movw	r2, #8215	; 0x2017
   11618:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1161c:	7812      	ldrb	r2, [r2, #0]
   1161e:	b2d2      	uxtb	r2, r2
   11620:	f042 0206 	orr.w	r2, r2, #6
   11624:	b2d2      	uxtb	r2, r2
   11626:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11628:	f242 0317 	movw	r3, #8215	; 0x2017
   1162c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11630:	f242 0217 	movw	r2, #8215	; 0x2017
   11634:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11638:	7812      	ldrb	r2, [r2, #0]
   1163a:	b2d2      	uxtb	r2, r2
   1163c:	f042 0201 	orr.w	r2, r2, #1
   11640:	b2d2      	uxtb	r2, r2
   11642:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11644:	f24c 6384 	movw	r3, #50820	; 0xc684
   11648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1164c:	2200      	movs	r2, #0
   1164e:	701a      	strb	r2, [r3, #0]
   11650:	f242 0318 	movw	r3, #8216	; 0x2018
   11654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11658:	f242 0218 	movw	r2, #8216	; 0x2018
   1165c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11660:	7812      	ldrb	r2, [r2, #0]
   11662:	b2d2      	uxtb	r2, r2
   11664:	f042 0201 	orr.w	r2, r2, #1
   11668:	b2d2      	uxtb	r2, r2
   1166a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1166c:	f242 0302 	movw	r3, #8194	; 0x2002
   11670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11674:	f242 0202 	movw	r2, #8194	; 0x2002
   11678:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1167c:	7812      	ldrb	r2, [r2, #0]
   1167e:	b2d2      	uxtb	r2, r2
   11680:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11684:	b2d2      	uxtb	r2, r2
   11686:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11688:	f24c 6384 	movw	r3, #50820	; 0xc684
   1168c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11690:	2200      	movs	r2, #0
   11692:	701a      	strb	r2, [r3, #0]
   11694:	f242 0303 	movw	r3, #8195	; 0x2003
   11698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169c:	f242 0203 	movw	r2, #8195	; 0x2003
   116a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116a4:	7812      	ldrb	r2, [r2, #0]
   116a6:	b2d2      	uxtb	r2, r2
   116a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116ac:	b2d2      	uxtb	r2, r2
   116ae:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   116b0:	f24c 6384 	movw	r3, #50820	; 0xc684
   116b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116b8:	2200      	movs	r2, #0
   116ba:	701a      	strb	r2, [r3, #0]
}
   116bc:	46bd      	mov	sp, r7
   116be:	f85d 7b04 	ldr.w	r7, [sp], #4
   116c2:	4770      	bx	lr

000116c4 <__vector_17>:


SIGNAL(SIG_SPI) {
   116c4:	b580      	push	{r7, lr}
   116c6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   116c8:	f24c 6384 	movw	r3, #50820	; 0xc684
   116cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d0:	781b      	ldrb	r3, [r3, #0]
   116d2:	b2db      	uxtb	r3, r3
   116d4:	2b01      	cmp	r3, #1
   116d6:	d102      	bne.n	116de <__vector_17+0x1a>
    link_fbw_on_spi_it();
   116d8:	f7ff fe88 	bl	113ec <link_fbw_on_spi_it>
   116dc:	e00b      	b.n	116f6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   116de:	f24c 5328 	movw	r3, #50472	; 0xc528
   116e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e6:	781b      	ldrb	r3, [r3, #0]
   116e8:	3301      	adds	r3, #1
   116ea:	b2da      	uxtb	r2, r3
   116ec:	f24c 5328 	movw	r3, #50472	; 0xc528
   116f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116f4:	701a      	strb	r2, [r3, #0]
}
   116f6:	bd80      	pop	{r7, pc}

000116f8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   116f8:	b480      	push	{r7}
   116fa:	b083      	sub	sp, #12
   116fc:	af00      	add	r7, sp, #0
   116fe:	4603      	mov	r3, r0
   11700:	6039      	str	r1, [r7, #0]
   11702:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   11704:	79fa      	ldrb	r2, [r7, #7]
   11706:	f24c 6398 	movw	r3, #50840	; 0xc698
   1170a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1170e:	6839      	ldr	r1, [r7, #0]
   11710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11714:	370c      	adds	r7, #12
   11716:	46bd      	mov	sp, r7
   11718:	f85d 7b04 	ldr.w	r7, [sp], #4
   1171c:	4770      	bx	lr
   1171e:	bf00      	nop

00011720 <adc_init>:

void 
adc_init( void )
{
   11720:	b480      	push	{r7}
   11722:	b083      	sub	sp, #12
   11724:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11726:	f242 0362 	movw	r3, #8290	; 0x2062
   1172a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1172e:	2200      	movs	r2, #0
   11730:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11732:	f242 0361 	movw	r3, #8289	; 0x2061
   11736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1173a:	2200      	movs	r2, #0
   1173c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1173e:	f242 0307 	movw	r3, #8199	; 0x2007
   11742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11746:	2240      	movs	r2, #64	; 0x40
   11748:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1174a:	f242 0308 	movw	r3, #8200	; 0x2008
   1174e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11752:	f242 0208 	movw	r2, #8200	; 0x2008
   11756:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1175a:	7812      	ldrb	r2, [r2, #0]
   1175c:	b2d2      	uxtb	r2, r2
   1175e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11762:	b2d2      	uxtb	r2, r2
   11764:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11766:	f242 0306 	movw	r3, #8198	; 0x2006
   1176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176e:	22cf      	movs	r2, #207	; 0xcf
   11770:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11772:	2300      	movs	r3, #0
   11774:	71fb      	strb	r3, [r7, #7]
   11776:	e00a      	b.n	1178e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11778:	79fa      	ldrb	r2, [r7, #7]
   1177a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1177e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11782:	2100      	movs	r1, #0
   11784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11788:	79fb      	ldrb	r3, [r7, #7]
   1178a:	3301      	adds	r3, #1
   1178c:	71fb      	strb	r3, [r7, #7]
   1178e:	79fb      	ldrb	r3, [r7, #7]
   11790:	2b07      	cmp	r3, #7
   11792:	d9f1      	bls.n	11778 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11794:	370c      	adds	r7, #12
   11796:	46bd      	mov	sp, r7
   11798:	f85d 7b04 	ldr.w	r7, [sp], #4
   1179c:	4770      	bx	lr
   1179e:	bf00      	nop

000117a0 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   117a0:	b480      	push	{r7}
   117a2:	b085      	sub	sp, #20
   117a4:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   117a6:	f242 0307 	movw	r3, #8199	; 0x2007
   117aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	b2db      	uxtb	r3, r3
   117b2:	f003 0307 	and.w	r3, r3, #7
   117b6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   117b8:	7bfa      	ldrb	r2, [r7, #15]
   117ba:	f24c 6398 	movw	r3, #50840	; 0xc698
   117be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117c6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   117c8:	f242 0304 	movw	r3, #8196	; 0x2004
   117cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d0:	881b      	ldrh	r3, [r3, #0]
   117d2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   117d4:	7bfa      	ldrb	r2, [r7, #15]
   117d6:	f24c 6388 	movw	r3, #50824	; 0xc688
   117da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117de:	88f9      	ldrh	r1, [r7, #6]
   117e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   117e4:	68bb      	ldr	r3, [r7, #8]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d025      	beq.n	11836 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   117ea:	68bb      	ldr	r3, [r7, #8]
   117ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   117f0:	3301      	adds	r3, #1
   117f2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   117f4:	7bbb      	ldrb	r3, [r7, #14]
   117f6:	2b1f      	cmp	r3, #31
   117f8:	d901      	bls.n	117fe <__vector_21+0x5e>
   117fa:	2300      	movs	r3, #0
   117fc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   117fe:	68bb      	ldr	r3, [r7, #8]
   11800:	881a      	ldrh	r2, [r3, #0]
   11802:	7bbb      	ldrb	r3, [r7, #14]
   11804:	68b9      	ldr	r1, [r7, #8]
   11806:	005b      	lsls	r3, r3, #1
   11808:	440b      	add	r3, r1
   1180a:	885b      	ldrh	r3, [r3, #2]
   1180c:	1ad3      	subs	r3, r2, r3
   1180e:	b29a      	uxth	r2, r3
   11810:	68bb      	ldr	r3, [r7, #8]
   11812:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11814:	7bbb      	ldrb	r3, [r7, #14]
   11816:	68ba      	ldr	r2, [r7, #8]
   11818:	005b      	lsls	r3, r3, #1
   1181a:	4413      	add	r3, r2
   1181c:	88fa      	ldrh	r2, [r7, #6]
   1181e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11820:	68bb      	ldr	r3, [r7, #8]
   11822:	881a      	ldrh	r2, [r3, #0]
   11824:	88fb      	ldrh	r3, [r7, #6]
   11826:	4413      	add	r3, r2
   11828:	b29a      	uxth	r2, r3
   1182a:	68bb      	ldr	r3, [r7, #8]
   1182c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1182e:	68bb      	ldr	r3, [r7, #8]
   11830:	7bba      	ldrb	r2, [r7, #14]
   11832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11836:	7bfb      	ldrb	r3, [r7, #15]
   11838:	3301      	adds	r3, #1
   1183a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1183c:	7bfb      	ldrb	r3, [r7, #15]
   1183e:	2b07      	cmp	r3, #7
   11840:	d901      	bls.n	11846 <__vector_21+0xa6>
    adc_input = 0;
   11842:	2300      	movs	r3, #0
   11844:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11846:	f242 0307 	movw	r3, #8199	; 0x2007
   1184a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1184e:	7bfa      	ldrb	r2, [r7, #15]
   11850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11854:	b2d2      	uxtb	r2, r2
   11856:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11858:	f242 0306 	movw	r3, #8198	; 0x2006
   1185c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11860:	f242 0206 	movw	r2, #8198	; 0x2006
   11864:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11868:	7812      	ldrb	r2, [r2, #0]
   1186a:	b2d2      	uxtb	r2, r2
   1186c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11870:	b2d2      	uxtb	r2, r2
   11872:	701a      	strb	r2, [r3, #0]
  
}
   11874:	3714      	adds	r7, #20
   11876:	46bd      	mov	sp, r7
   11878:	f85d 7b04 	ldr.w	r7, [sp], #4
   1187c:	4770      	bx	lr
   1187e:	bf00      	nop

00011880 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11880:	b580      	push	{r7, lr}
   11882:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11884:	f003 fca8 	bl	151d8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11888:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1188c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11890:	2200      	movs	r2, #0
   11892:	701a      	strb	r2, [r3, #0]
}
   11894:	bd80      	pop	{r7, pc}
   11896:	bf00      	nop

00011898 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11898:	b580      	push	{r7, lr}
   1189a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1189c:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	781b      	ldrb	r3, [r3, #0]
   118a6:	2b01      	cmp	r3, #1
   118a8:	f040 80f9 	bne.w	11a9e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   118ac:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   118b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b4:	781b      	ldrb	r3, [r3, #0]
   118b6:	2b08      	cmp	r3, #8
   118b8:	d128      	bne.n	1190c <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   118ba:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c2:	685a      	ldr	r2, [r3, #4]
   118c4:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   118c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118cc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   118ce:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d6:	689a      	ldr	r2, [r3, #8]
   118d8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   118dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   118e2:	4b73      	ldr	r3, [pc, #460]	; (11ab0 <parse_gps_msg+0x218>)
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	4618      	mov	r0, r3
   118e8:	f006 fe24 	bl	18534 <__aeabi_i2f>
   118ec:	4603      	mov	r3, r0
   118ee:	4618      	mov	r0, r3
   118f0:	f04f 0100 	mov.w	r1, #0
   118f4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   118f8:	f006 ff24 	bl	18744 <__aeabi_fdiv>
   118fc:	4603      	mov	r3, r0
   118fe:	461a      	mov	r2, r3
   11900:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   11904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11908:	601a      	str	r2, [r3, #0]
   1190a:	e0c8      	b.n	11a9e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   1190c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11914:	781b      	ldrb	r3, [r3, #0]
   11916:	2b03      	cmp	r3, #3
   11918:	d10a      	bne.n	11930 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1191a:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1191e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11922:	791a      	ldrb	r2, [r3, #4]
   11924:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   11928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192c:	701a      	strb	r2, [r3, #0]
   1192e:	e0b6      	b.n	11a9e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11930:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11938:	781b      	ldrb	r3, [r3, #0]
   1193a:	2b12      	cmp	r3, #18
   1193c:	f040 80af 	bne.w	11a9e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11940:	4b5c      	ldr	r3, [pc, #368]	; (11ab4 <parse_gps_msg+0x21c>)
   11942:	681b      	ldr	r3, [r3, #0]
   11944:	4618      	mov	r0, r3
   11946:	f006 fdf1 	bl	1852c <__aeabi_ui2f>
   1194a:	4603      	mov	r3, r0
   1194c:	4618      	mov	r0, r3
   1194e:	f04f 0100 	mov.w	r1, #0
   11952:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11956:	f006 fef5 	bl	18744 <__aeabi_fdiv>
   1195a:	4603      	mov	r3, r0
   1195c:	461a      	mov	r2, r3
   1195e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   11962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11966:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11968:	4b51      	ldr	r3, [pc, #324]	; (11ab0 <parse_gps_msg+0x218>)
   1196a:	681b      	ldr	r3, [r3, #0]
   1196c:	4618      	mov	r0, r3
   1196e:	f006 fde1 	bl	18534 <__aeabi_i2f>
   11972:	4603      	mov	r3, r0
   11974:	4618      	mov	r0, r3
   11976:	f04f 0100 	mov.w	r1, #0
   1197a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1197e:	f006 fee1 	bl	18744 <__aeabi_fdiv>
   11982:	4603      	mov	r3, r0
   11984:	461a      	mov	r2, r3
   11986:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1198a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11990:	4b49      	ldr	r3, [pc, #292]	; (11ab8 <parse_gps_msg+0x220>)
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	4618      	mov	r0, r3
   11996:	f006 fdcd 	bl	18534 <__aeabi_i2f>
   1199a:	4603      	mov	r3, r0
   1199c:	4618      	mov	r0, r3
   1199e:	f006 f989 	bl	17cb4 <__aeabi_f2d>
   119a2:	4602      	mov	r2, r0
   119a4:	460b      	mov	r3, r1
   119a6:	4610      	mov	r0, r2
   119a8:	4619      	mov	r1, r3
   119aa:	a33d      	add	r3, pc, #244	; (adr r3, 11aa0 <parse_gps_msg+0x208>)
   119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   119b0:	f006 fafe 	bl	17fb0 <__aeabi_ddiv>
   119b4:	4602      	mov	r2, r0
   119b6:	460b      	mov	r3, r1
   119b8:	4610      	mov	r0, r2
   119ba:	4619      	mov	r1, r3
   119bc:	f04f 0200 	mov.w	r2, #0
   119c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   119c4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   119c8:	f006 faf2 	bl	17fb0 <__aeabi_ddiv>
   119cc:	4602      	mov	r2, r0
   119ce:	460b      	mov	r3, r1
   119d0:	4610      	mov	r0, r2
   119d2:	4619      	mov	r1, r3
   119d4:	a334      	add	r3, pc, #208	; (adr r3, 11aa8 <parse_gps_msg+0x210>)
   119d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   119da:	f006 f9bf 	bl	17d5c <__aeabi_dmul>
   119de:	4602      	mov	r2, r0
   119e0:	460b      	mov	r3, r1
   119e2:	4610      	mov	r0, r2
   119e4:	4619      	mov	r1, r3
   119e6:	f006 fc9b 	bl	18320 <__aeabi_d2f>
   119ea:	4602      	mov	r2, r0
   119ec:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   119f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   119f6:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   119fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119fe:	681b      	ldr	r3, [r3, #0]
   11a00:	4618      	mov	r0, r3
   11a02:	f006 fd93 	bl	1852c <__aeabi_ui2f>
   11a06:	4603      	mov	r3, r0
   11a08:	4618      	mov	r0, r3
   11a0a:	f04f 0100 	mov.w	r1, #0
   11a0e:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11a12:	f006 fe97 	bl	18744 <__aeabi_fdiv>
   11a16:	4603      	mov	r3, r0
   11a18:	461a      	mov	r2, r3
   11a1a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   11a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a22:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11a24:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a2c:	681a      	ldr	r2, [r3, #0]
   11a2e:	f248 531f 	movw	r3, #34079	; 0x851f
   11a32:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a36:	fb83 1302 	smull	r1, r3, r3, r2
   11a3a:	1159      	asrs	r1, r3, #5
   11a3c:	17d3      	asrs	r3, r2, #31
   11a3e:	1acb      	subs	r3, r1, r3
   11a40:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11a44:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11a48:	4618      	mov	r0, r3
   11a4a:	f006 fd73 	bl	18534 <__aeabi_i2f>
   11a4e:	4602      	mov	r2, r0
   11a50:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   11a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a58:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11a5a:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a62:	681a      	ldr	r2, [r3, #0]
   11a64:	f248 531f 	movw	r3, #34079	; 0x851f
   11a68:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a6c:	fb83 1302 	smull	r1, r3, r3, r2
   11a70:	1159      	asrs	r1, r3, #5
   11a72:	17d3      	asrs	r3, r2, #31
   11a74:	1aca      	subs	r2, r1, r3
   11a76:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11a7a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11a7e:	4413      	add	r3, r2
   11a80:	4618      	mov	r0, r3
   11a82:	f006 fd57 	bl	18534 <__aeabi_i2f>
   11a86:	4602      	mov	r2, r0
   11a88:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   11a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a90:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11a92:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9a:	2201      	movs	r2, #1
   11a9c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11a9e:	bd80      	pop	{r7, pc}
   11aa0:	00000000 	.word	0x00000000
   11aa4:	40f86a00 	.word	0x40f86a00
   11aa8:	5a7ed197 	.word	0x5a7ed197
   11aac:	400921fb 	.word	0x400921fb
   11ab0:	2004c6ec 	.word	0x2004c6ec
   11ab4:	2004c6f4 	.word	0x2004c6f4
   11ab8:	2004c6f8 	.word	0x2004c6f8

00011abc <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11abc:	b480      	push	{r7}
   11abe:	b083      	sub	sp, #12
   11ac0:	af00      	add	r7, sp, #0
   11ac2:	4603      	mov	r3, r0
   11ac4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11ac6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ace:	781b      	ldrb	r3, [r3, #0]
   11ad0:	2b06      	cmp	r3, #6
   11ad2:	d81d      	bhi.n	11b10 <parse_ubx+0x54>
    ck_a += c;
   11ad4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11adc:	781a      	ldrb	r2, [r3, #0]
   11ade:	79fb      	ldrb	r3, [r7, #7]
   11ae0:	4413      	add	r3, r2
   11ae2:	b2da      	uxtb	r2, r3
   11ae4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aec:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11aee:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af6:	781a      	ldrb	r2, [r3, #0]
   11af8:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b00:	781b      	ldrb	r3, [r3, #0]
   11b02:	4413      	add	r3, r2
   11b04:	b2da      	uxtb	r2, r3
   11b06:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11b10:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b18:	781b      	ldrb	r3, [r3, #0]
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d110      	bne.n	11b40 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11b1e:	79fb      	ldrb	r3, [r7, #7]
   11b20:	2bb5      	cmp	r3, #181	; 0xb5
   11b22:	f040 8135 	bne.w	11d90 <parse_ubx+0x2d4>
      ubx_status++;
   11b26:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2e:	781b      	ldrb	r3, [r3, #0]
   11b30:	3301      	adds	r3, #1
   11b32:	b2da      	uxtb	r2, r3
   11b34:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11b3e:	e12f      	b.n	11da0 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11b40:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b48:	781b      	ldrb	r3, [r3, #0]
   11b4a:	2b01      	cmp	r3, #1
   11b4c:	d11c      	bne.n	11b88 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11b4e:	79fb      	ldrb	r3, [r7, #7]
   11b50:	2b62      	cmp	r3, #98	; 0x62
   11b52:	d000      	beq.n	11b56 <parse_ubx+0x9a>
      goto error;
   11b54:	e11d      	b.n	11d92 <parse_ubx+0x2d6>
    ck_a = 0;
   11b56:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5e:	2200      	movs	r2, #0
   11b60:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11b62:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6a:	2200      	movs	r2, #0
   11b6c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b6e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b76:	781b      	ldrb	r3, [r3, #0]
   11b78:	3301      	adds	r3, #1
   11b7a:	b2da      	uxtb	r2, r3
   11b7c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b84:	701a      	strb	r2, [r3, #0]
   11b86:	e103      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11b88:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b90:	781b      	ldrb	r3, [r3, #0]
   11b92:	2b02      	cmp	r3, #2
   11b94:	d127      	bne.n	11be6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11b96:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	781b      	ldrb	r3, [r3, #0]
   11ba0:	b2db      	uxtb	r3, r3
   11ba2:	2b00      	cmp	r3, #0
   11ba4:	d00c      	beq.n	11bc0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11ba6:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	3301      	adds	r3, #1
   11bb2:	b2da      	uxtb	r2, r3
   11bb4:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbc:	701a      	strb	r2, [r3, #0]
      goto error;
   11bbe:	e0e8      	b.n	11d92 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11bc0:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc8:	79fa      	ldrb	r2, [r7, #7]
   11bca:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bcc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	3301      	adds	r3, #1
   11bd8:	b2da      	uxtb	r2, r3
   11bda:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be2:	701a      	strb	r2, [r3, #0]
   11be4:	e0d4      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11be6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	2b03      	cmp	r3, #3
   11bf2:	d112      	bne.n	11c1a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11bf4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfc:	79fa      	ldrb	r2, [r7, #7]
   11bfe:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c00:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	3301      	adds	r3, #1
   11c0c:	b2da      	uxtb	r2, r3
   11c0e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c16:	701a      	strb	r2, [r3, #0]
   11c18:	e0ba      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11c1a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c22:	781b      	ldrb	r3, [r3, #0]
   11c24:	2b04      	cmp	r3, #4
   11c26:	d113      	bne.n	11c50 <parse_ubx+0x194>
  {
    ubx_len = c;
   11c28:	79fb      	ldrb	r3, [r7, #7]
   11c2a:	b29a      	uxth	r2, r3
   11c2c:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c34:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11c36:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3e:	781b      	ldrb	r3, [r3, #0]
   11c40:	3301      	adds	r3, #1
   11c42:	b2da      	uxtb	r2, r3
   11c44:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4c:	701a      	strb	r2, [r3, #0]
   11c4e:	e09f      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11c50:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c58:	781b      	ldrb	r3, [r3, #0]
   11c5a:	2b05      	cmp	r3, #5
   11c5c:	d12b      	bne.n	11cb6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11c5e:	79fb      	ldrb	r3, [r7, #7]
   11c60:	021b      	lsls	r3, r3, #8
   11c62:	b29a      	uxth	r2, r3
   11c64:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6c:	881b      	ldrh	r3, [r3, #0]
   11c6e:	b29b      	uxth	r3, r3
   11c70:	4313      	orrs	r3, r2
   11c72:	b29b      	uxth	r3, r3
   11c74:	b29a      	uxth	r2, r3
   11c76:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11c80:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c88:	881b      	ldrh	r3, [r3, #0]
   11c8a:	2bff      	cmp	r3, #255	; 0xff
   11c8c:	d900      	bls.n	11c90 <parse_ubx+0x1d4>
      goto error;
   11c8e:	e080      	b.n	11d92 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11c90:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c98:	2200      	movs	r2, #0
   11c9a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c9c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca4:	781b      	ldrb	r3, [r3, #0]
   11ca6:	3301      	adds	r3, #1
   11ca8:	b2da      	uxtb	r2, r3
   11caa:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb2:	701a      	strb	r2, [r3, #0]
   11cb4:	e06c      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11cb6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cbe:	781b      	ldrb	r3, [r3, #0]
   11cc0:	2b06      	cmp	r3, #6
   11cc2:	d131      	bne.n	11d28 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11cc4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ccc:	781b      	ldrb	r3, [r3, #0]
   11cce:	461a      	mov	r2, r3
   11cd0:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd8:	79f9      	ldrb	r1, [r7, #7]
   11cda:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11cdc:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce4:	781b      	ldrb	r3, [r3, #0]
   11ce6:	3301      	adds	r3, #1
   11ce8:	b2da      	uxtb	r2, r3
   11cea:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11cf4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cfc:	781b      	ldrb	r3, [r3, #0]
   11cfe:	461a      	mov	r2, r3
   11d00:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d08:	881b      	ldrh	r3, [r3, #0]
   11d0a:	429a      	cmp	r2, r3
   11d0c:	d340      	bcc.n	11d90 <parse_ubx+0x2d4>
      ubx_status++;
   11d0e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d16:	781b      	ldrb	r3, [r3, #0]
   11d18:	3301      	adds	r3, #1
   11d1a:	b2da      	uxtb	r2, r3
   11d1c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d24:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11d26:	e03b      	b.n	11da0 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11d28:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d30:	781b      	ldrb	r3, [r3, #0]
   11d32:	2b07      	cmp	r3, #7
   11d34:	d115      	bne.n	11d62 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11d36:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3e:	781b      	ldrb	r3, [r3, #0]
   11d40:	79fa      	ldrb	r2, [r7, #7]
   11d42:	429a      	cmp	r2, r3
   11d44:	d000      	beq.n	11d48 <parse_ubx+0x28c>
      goto error;
   11d46:	e024      	b.n	11d92 <parse_ubx+0x2d6>
    ubx_status++;
   11d48:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d50:	781b      	ldrb	r3, [r3, #0]
   11d52:	3301      	adds	r3, #1
   11d54:	b2da      	uxtb	r2, r3
   11d56:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5e:	701a      	strb	r2, [r3, #0]
   11d60:	e016      	b.n	11d90 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11d62:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d6a:	781b      	ldrb	r3, [r3, #0]
   11d6c:	2b08      	cmp	r3, #8
   11d6e:	d10f      	bne.n	11d90 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11d70:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d78:	781b      	ldrb	r3, [r3, #0]
   11d7a:	79fa      	ldrb	r2, [r7, #7]
   11d7c:	429a      	cmp	r2, r3
   11d7e:	d000      	beq.n	11d82 <parse_ubx+0x2c6>
      goto error;
   11d80:	e007      	b.n	11d92 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11d82:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d8a:	2201      	movs	r2, #1
   11d8c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11d8e:	e000      	b.n	11d92 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11d90:	e006      	b.n	11da0 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11d92:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9a:	2200      	movs	r2, #0
   11d9c:	701a      	strb	r2, [r3, #0]
  return;
   11d9e:	bf00      	nop
}
   11da0:	370c      	adds	r7, #12
   11da2:	46bd      	mov	sp, r7
   11da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   11da8:	4770      	bx	lr
   11daa:	bf00      	nop

00011dac <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11dac:	b580      	push	{r7, lr}
   11dae:	b082      	sub	sp, #8
   11db0:	af00      	add	r7, sp, #0
   11db2:	f242 039c 	movw	r3, #8348	; 0x209c
   11db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dba:	781b      	ldrb	r3, [r3, #0]
   11dbc:	71fb      	strb	r3, [r7, #7]
   11dbe:	79fb      	ldrb	r3, [r7, #7]
   11dc0:	4618      	mov	r0, r3
   11dc2:	f7ff fe7b 	bl	11abc <parse_ubx>
   11dc6:	3708      	adds	r7, #8
   11dc8:	46bd      	mov	sp, r7
   11dca:	bd80      	pop	{r7, pc}
   11dcc:	f3af 8000 	nop.w

00011dd0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11dd0:	b580      	push	{r7, lr}
   11dd2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11dd4:	f240 5348 	movw	r3, #1352	; 0x548
   11dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ddc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11de0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11de4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11de6:	2001      	movs	r0, #1
   11de8:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11dec:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11df0:	f7ff fc82 	bl	116f8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11df4:	2002      	movs	r0, #2
   11df6:	f64c 0130 	movw	r1, #51248	; 0xc830
   11dfa:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11dfe:	f7ff fc7b 	bl	116f8 <adc_buf_channel>
}
   11e02:	bd80      	pop	{r7, pc}

00011e04 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11e04:	b480      	push	{r7}
   11e06:	b083      	sub	sp, #12
   11e08:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11e0a:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e12:	881b      	ldrh	r3, [r3, #0]
   11e14:	095b      	lsrs	r3, r3, #5
   11e16:	b29b      	uxth	r3, r3
   11e18:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11e1a:	f64c 0330 	movw	r3, #51248	; 0xc830
   11e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e22:	881b      	ldrh	r3, [r3, #0]
   11e24:	095b      	lsrs	r3, r3, #5
   11e26:	b29b      	uxth	r3, r3
   11e28:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11e2a:	88fb      	ldrh	r3, [r7, #6]
   11e2c:	425b      	negs	r3, r3
   11e2e:	b29a      	uxth	r2, r3
   11e30:	88bb      	ldrh	r3, [r7, #4]
   11e32:	1ad3      	subs	r3, r2, r3
   11e34:	b29a      	uxth	r2, r3
   11e36:	f240 5342 	movw	r3, #1346	; 0x542
   11e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3e:	881b      	ldrh	r3, [r3, #0]
   11e40:	b29b      	uxth	r3, r3
   11e42:	1ad3      	subs	r3, r2, r3
   11e44:	b29b      	uxth	r3, r3
   11e46:	b29a      	uxth	r2, r3
   11e48:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e50:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11e52:	88ba      	ldrh	r2, [r7, #4]
   11e54:	88fb      	ldrh	r3, [r7, #6]
   11e56:	1ad3      	subs	r3, r2, r3
   11e58:	b29a      	uxth	r2, r3
   11e5a:	f240 5344 	movw	r3, #1348	; 0x544
   11e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e62:	881b      	ldrh	r3, [r3, #0]
   11e64:	b29b      	uxth	r3, r3
   11e66:	1ad3      	subs	r3, r2, r3
   11e68:	b29b      	uxth	r3, r3
   11e6a:	b29a      	uxth	r2, r3
   11e6c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e74:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11e76:	370c      	adds	r7, #12
   11e78:	46bd      	mov	sp, r7
   11e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e7e:	4770      	bx	lr

00011e80 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11e80:	b580      	push	{r7, lr}
   11e82:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11e84:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e8c:	881b      	ldrh	r3, [r3, #0]
   11e8e:	b29b      	uxth	r3, r3
   11e90:	425b      	negs	r3, r3
   11e92:	b29b      	uxth	r3, r3
   11e94:	b29a      	uxth	r2, r3
   11e96:	f240 5340 	movw	r3, #1344	; 0x540
   11e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e9e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11ea0:	f240 5340 	movw	r3, #1344	; 0x540
   11ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea8:	881b      	ldrh	r3, [r3, #0]
   11eaa:	b21b      	sxth	r3, r3
   11eac:	4618      	mov	r0, r3
   11eae:	f005 feef 	bl	17c90 <__aeabi_i2d>
   11eb2:	4602      	mov	r2, r0
   11eb4:	460b      	mov	r3, r1
   11eb6:	f04f 0000 	mov.w	r0, #0
   11eba:	f04f 0100 	mov.w	r1, #0
   11ebe:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11ec2:	f006 f875 	bl	17fb0 <__aeabi_ddiv>
   11ec6:	4602      	mov	r2, r0
   11ec8:	460b      	mov	r3, r1
   11eca:	4610      	mov	r0, r2
   11ecc:	4619      	mov	r1, r3
   11ece:	f006 fa27 	bl	18320 <__aeabi_d2f>
   11ed2:	4602      	mov	r2, r0
   11ed4:	f240 5348 	movw	r3, #1352	; 0x548
   11ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11edc:	601a      	str	r2, [r3, #0]
}
   11ede:	bd80      	pop	{r7, pc}

00011ee0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11ee0:	b590      	push	{r4, r7, lr}
   11ee2:	b083      	sub	sp, #12
   11ee4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11ee6:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eee:	681a      	ldr	r2, [r3, #0]
   11ef0:	f64c 0374 	movw	r3, #51316	; 0xc874
   11ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ef8:	681b      	ldr	r3, [r3, #0]
   11efa:	4610      	mov	r0, r2
   11efc:	4619      	mov	r1, r3
   11efe:	f006 fa63 	bl	183c8 <__aeabi_fsub>
   11f02:	4603      	mov	r3, r0
   11f04:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11f06:	f240 534c 	movw	r3, #1356	; 0x54c
   11f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f0e:	681b      	ldr	r3, [r3, #0]
   11f10:	4618      	mov	r0, r3
   11f12:	6879      	ldr	r1, [r7, #4]
   11f14:	f006 fb62 	bl	185dc <__aeabi_fmul>
   11f18:	4603      	mov	r3, r0
   11f1a:	4618      	mov	r0, r3
   11f1c:	f04f 0100 	mov.w	r1, #0
   11f20:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f24:	f006 fcf8 	bl	18918 <__aeabi_fcmplt>
   11f28:	4603      	mov	r3, r0
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d002      	beq.n	11f34 <roll_pitch_pid_run+0x54>
   11f2e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f32:	e026      	b.n	11f82 <roll_pitch_pid_run+0xa2>
   11f34:	f240 534c 	movw	r3, #1356	; 0x54c
   11f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3c:	681b      	ldr	r3, [r3, #0]
   11f3e:	4618      	mov	r0, r3
   11f40:	6879      	ldr	r1, [r7, #4]
   11f42:	f006 fb4b 	bl	185dc <__aeabi_fmul>
   11f46:	4603      	mov	r3, r0
   11f48:	4618      	mov	r0, r3
   11f4a:	f04f 0100 	mov.w	r1, #0
   11f4e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f52:	f006 fcff 	bl	18954 <__aeabi_fcmpgt>
   11f56:	4603      	mov	r3, r0
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d002      	beq.n	11f62 <roll_pitch_pid_run+0x82>
   11f5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f60:	e00e      	b.n	11f80 <roll_pitch_pid_run+0xa0>
   11f62:	f240 534c 	movw	r3, #1356	; 0x54c
   11f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	4618      	mov	r0, r3
   11f6e:	6879      	ldr	r1, [r7, #4]
   11f70:	f006 fb34 	bl	185dc <__aeabi_fmul>
   11f74:	4603      	mov	r3, r0
   11f76:	4618      	mov	r0, r3
   11f78:	f006 fcf6 	bl	18968 <__aeabi_f2iz>
   11f7c:	4603      	mov	r3, r0
   11f7e:	b29b      	uxth	r3, r3
   11f80:	b29a      	uxth	r2, r3
   11f82:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f8a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11f8c:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f94:	681b      	ldr	r3, [r3, #0]
   11f96:	4618      	mov	r0, r3
   11f98:	f04f 0100 	mov.w	r1, #0
   11f9c:	f006 fcbc 	bl	18918 <__aeabi_fcmplt>
   11fa0:	4603      	mov	r3, r0
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d006      	beq.n	11fb4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11fa6:	f64c 0384 	movw	r3, #51332	; 0xc884
   11faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fae:	f04f 0200 	mov.w	r2, #0
   11fb2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11fb4:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fbc:	681a      	ldr	r2, [r3, #0]
   11fbe:	f64c 0378 	movw	r3, #51320	; 0xc878
   11fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fc6:	681b      	ldr	r3, [r3, #0]
   11fc8:	4610      	mov	r0, r2
   11fca:	4619      	mov	r1, r3
   11fcc:	f006 f9fc 	bl	183c8 <__aeabi_fsub>
   11fd0:	4603      	mov	r3, r0
   11fd2:	461c      	mov	r4, r3
   11fd4:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fdc:	681b      	ldr	r3, [r3, #0]
   11fde:	4618      	mov	r0, r3
   11fe0:	f04f 0100 	mov.w	r1, #0
   11fe4:	f006 fc98 	bl	18918 <__aeabi_fcmplt>
   11fe8:	4603      	mov	r3, r0
   11fea:	2b00      	cmp	r3, #0
   11fec:	d007      	beq.n	11ffe <roll_pitch_pid_run+0x11e>
   11fee:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff6:	681b      	ldr	r3, [r3, #0]
   11ff8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ffc:	e004      	b.n	12008 <roll_pitch_pid_run+0x128>
   11ffe:	f64c 3308 	movw	r3, #51976	; 0xcb08
   12002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12006:	681a      	ldr	r2, [r3, #0]
   12008:	f64c 0384 	movw	r3, #51332	; 0xc884
   1200c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12010:	681b      	ldr	r3, [r3, #0]
   12012:	4610      	mov	r0, r2
   12014:	4619      	mov	r1, r3
   12016:	f006 fae1 	bl	185dc <__aeabi_fmul>
   1201a:	4603      	mov	r3, r0
   1201c:	4620      	mov	r0, r4
   1201e:	4619      	mov	r1, r3
   12020:	f006 f9d2 	bl	183c8 <__aeabi_fsub>
   12024:	4603      	mov	r3, r0
   12026:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1202a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   1202c:	f240 5350 	movw	r3, #1360	; 0x550
   12030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12034:	681b      	ldr	r3, [r3, #0]
   12036:	4618      	mov	r0, r3
   12038:	6879      	ldr	r1, [r7, #4]
   1203a:	f006 facf 	bl	185dc <__aeabi_fmul>
   1203e:	4603      	mov	r3, r0
   12040:	4618      	mov	r0, r3
   12042:	f04f 0100 	mov.w	r1, #0
   12046:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1204a:	f006 fc65 	bl	18918 <__aeabi_fcmplt>
   1204e:	4603      	mov	r3, r0
   12050:	2b00      	cmp	r3, #0
   12052:	d002      	beq.n	1205a <roll_pitch_pid_run+0x17a>
   12054:	f64d 2280 	movw	r2, #55936	; 0xda80
   12058:	e026      	b.n	120a8 <roll_pitch_pid_run+0x1c8>
   1205a:	f240 5350 	movw	r3, #1360	; 0x550
   1205e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12062:	681b      	ldr	r3, [r3, #0]
   12064:	4618      	mov	r0, r3
   12066:	6879      	ldr	r1, [r7, #4]
   12068:	f006 fab8 	bl	185dc <__aeabi_fmul>
   1206c:	4603      	mov	r3, r0
   1206e:	4618      	mov	r0, r3
   12070:	f04f 0100 	mov.w	r1, #0
   12074:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12078:	f006 fc6c 	bl	18954 <__aeabi_fcmpgt>
   1207c:	4603      	mov	r3, r0
   1207e:	2b00      	cmp	r3, #0
   12080:	d002      	beq.n	12088 <roll_pitch_pid_run+0x1a8>
   12082:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12086:	e00e      	b.n	120a6 <roll_pitch_pid_run+0x1c6>
   12088:	f240 5350 	movw	r3, #1360	; 0x550
   1208c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	4618      	mov	r0, r3
   12094:	6879      	ldr	r1, [r7, #4]
   12096:	f006 faa1 	bl	185dc <__aeabi_fmul>
   1209a:	4603      	mov	r3, r0
   1209c:	4618      	mov	r0, r3
   1209e:	f006 fc63 	bl	18968 <__aeabi_f2iz>
   120a2:	4603      	mov	r3, r0
   120a4:	b29b      	uxth	r3, r3
   120a6:	b29a      	uxth	r2, r3
   120a8:	f64c 0380 	movw	r3, #51328	; 0xc880
   120ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b0:	801a      	strh	r2, [r3, #0]
}
   120b2:	370c      	adds	r7, #12
   120b4:	46bd      	mov	sp, r7
   120b6:	bd90      	pop	{r4, r7, pc}

000120b8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   120b8:	b580      	push	{r7, lr}
   120ba:	b082      	sub	sp, #8
   120bc:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   120be:	f64c 3338 	movw	r3, #52024	; 0xcb38
   120c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c6:	681a      	ldr	r2, [r3, #0]
   120c8:	f64c 038c 	movw	r3, #51340	; 0xc88c
   120cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120d0:	681b      	ldr	r3, [r3, #0]
   120d2:	4610      	mov	r0, r2
   120d4:	4619      	mov	r1, r3
   120d6:	f006 f977 	bl	183c8 <__aeabi_fsub>
   120da:	4603      	mov	r3, r0
   120dc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   120de:	e013      	b.n	12108 <course_pid_run+0x50>
   120e0:	6878      	ldr	r0, [r7, #4]
   120e2:	f005 fde7 	bl	17cb4 <__aeabi_f2d>
   120e6:	4602      	mov	r2, r0
   120e8:	460b      	mov	r3, r1
   120ea:	4610      	mov	r0, r2
   120ec:	4619      	mov	r1, r3
   120ee:	a348      	add	r3, pc, #288	; (adr r3, 12210 <course_pid_run+0x158>)
   120f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120f4:	f005 fc7e 	bl	179f4 <__aeabi_dsub>
   120f8:	4602      	mov	r2, r0
   120fa:	460b      	mov	r3, r1
   120fc:	4610      	mov	r0, r2
   120fe:	4619      	mov	r1, r3
   12100:	f006 f90e 	bl	18320 <__aeabi_d2f>
   12104:	4603      	mov	r3, r0
   12106:	607b      	str	r3, [r7, #4]
   12108:	6878      	ldr	r0, [r7, #4]
   1210a:	f005 fdd3 	bl	17cb4 <__aeabi_f2d>
   1210e:	4602      	mov	r2, r0
   12110:	460b      	mov	r3, r1
   12112:	4610      	mov	r0, r2
   12114:	4619      	mov	r1, r3
   12116:	a340      	add	r3, pc, #256	; (adr r3, 12218 <course_pid_run+0x160>)
   12118:	e9d3 2300 	ldrd	r2, r3, [r3]
   1211c:	f006 f8ae 	bl	1827c <__aeabi_dcmpgt>
   12120:	4603      	mov	r3, r0
   12122:	2b00      	cmp	r3, #0
   12124:	d1dc      	bne.n	120e0 <course_pid_run+0x28>
   12126:	e013      	b.n	12150 <course_pid_run+0x98>
   12128:	6878      	ldr	r0, [r7, #4]
   1212a:	f005 fdc3 	bl	17cb4 <__aeabi_f2d>
   1212e:	4602      	mov	r2, r0
   12130:	460b      	mov	r3, r1
   12132:	4610      	mov	r0, r2
   12134:	4619      	mov	r1, r3
   12136:	a336      	add	r3, pc, #216	; (adr r3, 12210 <course_pid_run+0x158>)
   12138:	e9d3 2300 	ldrd	r2, r3, [r3]
   1213c:	f005 fc5c 	bl	179f8 <__adddf3>
   12140:	4602      	mov	r2, r0
   12142:	460b      	mov	r3, r1
   12144:	4610      	mov	r0, r2
   12146:	4619      	mov	r1, r3
   12148:	f006 f8ea 	bl	18320 <__aeabi_d2f>
   1214c:	4603      	mov	r3, r0
   1214e:	607b      	str	r3, [r7, #4]
   12150:	6878      	ldr	r0, [r7, #4]
   12152:	f005 fdaf 	bl	17cb4 <__aeabi_f2d>
   12156:	4602      	mov	r2, r0
   12158:	460b      	mov	r3, r1
   1215a:	4610      	mov	r0, r2
   1215c:	4619      	mov	r1, r3
   1215e:	a330      	add	r3, pc, #192	; (adr r3, 12220 <course_pid_run+0x168>)
   12160:	e9d3 2300 	ldrd	r2, r3, [r3]
   12164:	f006 f86c 	bl	18240 <__aeabi_dcmplt>
   12168:	4603      	mov	r3, r0
   1216a:	2b00      	cmp	r3, #0
   1216c:	d1dc      	bne.n	12128 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1216e:	f240 5358 	movw	r3, #1368	; 0x558
   12172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12176:	681b      	ldr	r3, [r3, #0]
   12178:	4618      	mov	r0, r3
   1217a:	6879      	ldr	r1, [r7, #4]
   1217c:	f006 fa2e 	bl	185dc <__aeabi_fmul>
   12180:	4603      	mov	r3, r0
   12182:	461a      	mov	r2, r3
   12184:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1218e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12196:	681a      	ldr	r2, [r3, #0]
   12198:	f240 535c 	movw	r3, #1372	; 0x55c
   1219c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a0:	681b      	ldr	r3, [r3, #0]
   121a2:	4610      	mov	r0, r2
   121a4:	4619      	mov	r1, r3
   121a6:	f006 fbd5 	bl	18954 <__aeabi_fcmpgt>
   121aa:	4603      	mov	r3, r0
   121ac:	2b00      	cmp	r3, #0
   121ae:	d00a      	beq.n	121c6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   121b0:	f240 535c 	movw	r3, #1372	; 0x55c
   121b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b8:	681a      	ldr	r2, [r3, #0]
   121ba:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c2:	601a      	str	r2, [r3, #0]
   121c4:	e01e      	b.n	12204 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   121c6:	f240 535c 	movw	r3, #1372	; 0x55c
   121ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121d4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121dc:	681b      	ldr	r3, [r3, #0]
   121de:	4610      	mov	r0, r2
   121e0:	4619      	mov	r1, r3
   121e2:	f006 fbb7 	bl	18954 <__aeabi_fcmpgt>
   121e6:	4603      	mov	r3, r0
   121e8:	2b00      	cmp	r3, #0
   121ea:	d00b      	beq.n	12204 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   121ec:	f240 535c 	movw	r3, #1372	; 0x55c
   121f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121f4:	681b      	ldr	r3, [r3, #0]
   121f6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121fa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12202:	601a      	str	r2, [r3, #0]
}
   12204:	3708      	adds	r7, #8
   12206:	46bd      	mov	sp, r7
   12208:	bd80      	pop	{r7, pc}
   1220a:	bf00      	nop
   1220c:	f3af 8000 	nop.w
   12210:	54442d18 	.word	0x54442d18
   12214:	401921fb 	.word	0x401921fb
   12218:	54442d18 	.word	0x54442d18
   1221c:	400921fb 	.word	0x400921fb
   12220:	54442d18 	.word	0x54442d18
   12224:	c00921fb 	.word	0xc00921fb

00012228 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12228:	b5b0      	push	{r4, r5, r7, lr}
   1222a:	b082      	sub	sp, #8
   1222c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1222e:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   12232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12236:	681a      	ldr	r2, [r3, #0]
   12238:	f64c 0390 	movw	r3, #51344	; 0xc890
   1223c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12240:	681b      	ldr	r3, [r3, #0]
   12242:	4610      	mov	r0, r2
   12244:	4619      	mov	r1, r3
   12246:	f006 f8bf 	bl	183c8 <__aeabi_fsub>
   1224a:	4603      	mov	r3, r0
   1224c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1224e:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12256:	781b      	ldrb	r3, [r3, #0]
   12258:	2b00      	cmp	r3, #0
   1225a:	f000 80a8 	beq.w	123ae <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1225e:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12266:	881b      	ldrh	r3, [r3, #0]
   12268:	b29a      	uxth	r2, r3
   1226a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1226e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12272:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12274:	f240 5364 	movw	r3, #1380	; 0x564
   12278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227c:	681a      	ldr	r2, [r3, #0]
   1227e:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12286:	681b      	ldr	r3, [r3, #0]
   12288:	4610      	mov	r0, r2
   1228a:	4619      	mov	r1, r3
   1228c:	f006 f9a6 	bl	185dc <__aeabi_fmul>
   12290:	4603      	mov	r3, r0
   12292:	4618      	mov	r0, r3
   12294:	6879      	ldr	r1, [r7, #4]
   12296:	f006 f899 	bl	183cc <__addsf3>
   1229a:	4603      	mov	r3, r0
   1229c:	461a      	mov	r2, r3
   1229e:	f240 5360 	movw	r3, #1376	; 0x560
   122a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	4610      	mov	r0, r2
   122aa:	4619      	mov	r1, r3
   122ac:	f006 f996 	bl	185dc <__aeabi_fmul>
   122b0:	4603      	mov	r3, r0
   122b2:	461a      	mov	r2, r3
   122b4:	f64c 0378 	movw	r3, #51320	; 0xc878
   122b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122bc:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   122be:	f64c 0378 	movw	r3, #51320	; 0xc878
   122c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122c6:	681a      	ldr	r2, [r3, #0]
   122c8:	f240 5368 	movw	r3, #1384	; 0x568
   122cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d0:	681b      	ldr	r3, [r3, #0]
   122d2:	4610      	mov	r0, r2
   122d4:	4619      	mov	r1, r3
   122d6:	f006 fb3d 	bl	18954 <__aeabi_fcmpgt>
   122da:	4603      	mov	r3, r0
   122dc:	2b00      	cmp	r3, #0
   122de:	d009      	beq.n	122f4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   122e0:	f240 5368 	movw	r3, #1384	; 0x568
   122e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e8:	681a      	ldr	r2, [r3, #0]
   122ea:	f64c 0378 	movw	r3, #51320	; 0xc878
   122ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   122f4:	f64c 0378 	movw	r3, #51320	; 0xc878
   122f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122fc:	681a      	ldr	r2, [r3, #0]
   122fe:	f240 536c 	movw	r3, #1388	; 0x56c
   12302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	4610      	mov	r0, r2
   1230a:	4619      	mov	r1, r3
   1230c:	f006 fb04 	bl	18918 <__aeabi_fcmplt>
   12310:	4603      	mov	r3, r0
   12312:	2b00      	cmp	r3, #0
   12314:	d009      	beq.n	1232a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   12316:	f240 536c 	movw	r3, #1388	; 0x56c
   1231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231e:	681a      	ldr	r2, [r3, #0]
   12320:	f64c 0378 	movw	r3, #51320	; 0xc878
   12324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12328:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1232a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1232e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	4618      	mov	r0, r3
   12336:	6879      	ldr	r1, [r7, #4]
   12338:	f006 f848 	bl	183cc <__addsf3>
   1233c:	4603      	mov	r3, r0
   1233e:	461a      	mov	r2, r3
   12340:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12348:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1234a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1234e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12352:	681b      	ldr	r3, [r3, #0]
   12354:	4618      	mov	r0, r3
   12356:	f04f 0100 	mov.w	r1, #0
   1235a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1235e:	f006 faf9 	bl	18954 <__aeabi_fcmpgt>
   12362:	4603      	mov	r3, r0
   12364:	2b00      	cmp	r3, #0
   12366:	d008      	beq.n	1237a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12368:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1236c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12370:	f04f 0200 	mov.w	r2, #0
   12374:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12378:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1237a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1237e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12382:	681b      	ldr	r3, [r3, #0]
   12384:	4618      	mov	r0, r3
   12386:	f04f 0100 	mov.w	r1, #0
   1238a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1238e:	f006 fac3 	bl	18918 <__aeabi_fcmplt>
   12392:	4603      	mov	r3, r0
   12394:	2b00      	cmp	r3, #0
   12396:	d100      	bne.n	1239a <climb_pid_run+0x172>
   12398:	e109      	b.n	125ae <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1239a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1239e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a2:	f04f 0200 	mov.w	r2, #0
   123a6:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   123aa:	601a      	str	r2, [r3, #0]
   123ac:	e0ff      	b.n	125ae <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   123ae:	f64c 0390 	movw	r3, #51344	; 0xc890
   123b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b6:	681b      	ldr	r3, [r3, #0]
   123b8:	4618      	mov	r0, r3
   123ba:	f04f 0100 	mov.w	r1, #0
   123be:	f006 fac9 	bl	18954 <__aeabi_fcmpgt>
   123c2:	4603      	mov	r3, r0
   123c4:	2b00      	cmp	r3, #0
   123c6:	d010      	beq.n	123ea <climb_pid_run+0x1c2>
   123c8:	f64c 0390 	movw	r3, #51344	; 0xc890
   123cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d0:	681a      	ldr	r2, [r3, #0]
   123d2:	f240 5354 	movw	r3, #1364	; 0x554
   123d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123da:	681b      	ldr	r3, [r3, #0]
   123dc:	4610      	mov	r0, r2
   123de:	4619      	mov	r1, r3
   123e0:	f006 f8fc 	bl	185dc <__aeabi_fmul>
   123e4:	4603      	mov	r3, r0
   123e6:	461a      	mov	r2, r3
   123e8:	e001      	b.n	123ee <climb_pid_run+0x1c6>
   123ea:	f04f 0200 	mov.w	r2, #0
   123ee:	f64c 0388 	movw	r3, #51336	; 0xc888
   123f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   123f8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   123fc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12400:	f64c 0398 	movw	r3, #51352	; 0xc898
   12404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12408:	681b      	ldr	r3, [r3, #0]
   1240a:	4610      	mov	r0, r2
   1240c:	4619      	mov	r1, r3
   1240e:	f006 f8e5 	bl	185dc <__aeabi_fmul>
   12412:	4603      	mov	r3, r0
   12414:	4618      	mov	r0, r3
   12416:	6879      	ldr	r1, [r7, #4]
   12418:	f005 ffd8 	bl	183cc <__addsf3>
   1241c:	4603      	mov	r3, r0
   1241e:	461a      	mov	r2, r3
   12420:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12424:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12428:	4610      	mov	r0, r2
   1242a:	4619      	mov	r1, r3
   1242c:	f006 f8d6 	bl	185dc <__aeabi_fmul>
   12430:	4603      	mov	r3, r0
   12432:	4618      	mov	r0, r3
   12434:	f005 fc3e 	bl	17cb4 <__aeabi_f2d>
   12438:	4602      	mov	r2, r0
   1243a:	460b      	mov	r3, r1
   1243c:	4610      	mov	r0, r2
   1243e:	4619      	mov	r1, r3
   12440:	a35d      	add	r3, pc, #372	; (adr r3, 125b8 <climb_pid_run+0x390>)
   12442:	e9d3 2300 	ldrd	r2, r3, [r3]
   12446:	f005 fad7 	bl	179f8 <__adddf3>
   1244a:	4602      	mov	r2, r0
   1244c:	460b      	mov	r3, r1
   1244e:	4614      	mov	r4, r2
   12450:	461d      	mov	r5, r3
   12452:	f64c 0390 	movw	r3, #51344	; 0xc890
   12456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245a:	681b      	ldr	r3, [r3, #0]
   1245c:	4618      	mov	r0, r3
   1245e:	f005 fc29 	bl	17cb4 <__aeabi_f2d>
   12462:	4602      	mov	r2, r0
   12464:	460b      	mov	r3, r1
   12466:	4610      	mov	r0, r2
   12468:	4619      	mov	r1, r3
   1246a:	a355      	add	r3, pc, #340	; (adr r3, 125c0 <climb_pid_run+0x398>)
   1246c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12470:	f005 fc74 	bl	17d5c <__aeabi_dmul>
   12474:	4602      	mov	r2, r0
   12476:	460b      	mov	r3, r1
   12478:	4620      	mov	r0, r4
   1247a:	4629      	mov	r1, r5
   1247c:	f005 fabc 	bl	179f8 <__adddf3>
   12480:	4602      	mov	r2, r0
   12482:	460b      	mov	r3, r1
   12484:	4610      	mov	r0, r2
   12486:	4619      	mov	r1, r3
   12488:	f005 ff4a 	bl	18320 <__aeabi_d2f>
   1248c:	4603      	mov	r3, r0
   1248e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12490:	f64c 0398 	movw	r3, #51352	; 0xc898
   12494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12498:	681b      	ldr	r3, [r3, #0]
   1249a:	4618      	mov	r0, r3
   1249c:	6879      	ldr	r1, [r7, #4]
   1249e:	f005 ff95 	bl	183cc <__addsf3>
   124a2:	4603      	mov	r3, r0
   124a4:	461a      	mov	r2, r3
   124a6:	f64c 0398 	movw	r3, #51352	; 0xc898
   124aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ae:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   124b0:	f64c 0398 	movw	r3, #51352	; 0xc898
   124b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b8:	681b      	ldr	r3, [r3, #0]
   124ba:	4618      	mov	r0, r3
   124bc:	f04f 0100 	mov.w	r1, #0
   124c0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   124c4:	f006 fa46 	bl	18954 <__aeabi_fcmpgt>
   124c8:	4603      	mov	r3, r0
   124ca:	2b00      	cmp	r3, #0
   124cc:	d008      	beq.n	124e0 <climb_pid_run+0x2b8>
   124ce:	f64c 0398 	movw	r3, #51352	; 0xc898
   124d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d6:	f04f 0200 	mov.w	r2, #0
   124da:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   124de:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   124e0:	f64c 0398 	movw	r3, #51352	; 0xc898
   124e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e8:	681b      	ldr	r3, [r3, #0]
   124ea:	4618      	mov	r0, r3
   124ec:	f04f 0100 	mov.w	r1, #0
   124f0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   124f4:	f006 fa10 	bl	18918 <__aeabi_fcmplt>
   124f8:	4603      	mov	r3, r0
   124fa:	2b00      	cmp	r3, #0
   124fc:	d008      	beq.n	12510 <climb_pid_run+0x2e8>
   124fe:	f64c 0398 	movw	r3, #51352	; 0xc898
   12502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12506:	f04f 0200 	mov.w	r2, #0
   1250a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1250e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12510:	6838      	ldr	r0, [r7, #0]
   12512:	f04f 0100 	mov.w	r1, #0
   12516:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1251a:	f006 f85f 	bl	185dc <__aeabi_fmul>
   1251e:	4603      	mov	r3, r0
   12520:	4618      	mov	r0, r3
   12522:	f04f 0100 	mov.w	r1, #0
   12526:	f006 f9f7 	bl	18918 <__aeabi_fcmplt>
   1252a:	4603      	mov	r3, r0
   1252c:	2b00      	cmp	r3, #0
   1252e:	d001      	beq.n	12534 <climb_pid_run+0x30c>
   12530:	2200      	movs	r2, #0
   12532:	e022      	b.n	1257a <climb_pid_run+0x352>
   12534:	6838      	ldr	r0, [r7, #0]
   12536:	f04f 0100 	mov.w	r1, #0
   1253a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1253e:	f006 f84d 	bl	185dc <__aeabi_fmul>
   12542:	4603      	mov	r3, r0
   12544:	4618      	mov	r0, r3
   12546:	f04f 0100 	mov.w	r1, #0
   1254a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1254e:	f006 fa01 	bl	18954 <__aeabi_fcmpgt>
   12552:	4603      	mov	r3, r0
   12554:	2b00      	cmp	r3, #0
   12556:	d002      	beq.n	1255e <climb_pid_run+0x336>
   12558:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1255c:	e00c      	b.n	12578 <climb_pid_run+0x350>
   1255e:	6838      	ldr	r0, [r7, #0]
   12560:	f04f 0100 	mov.w	r1, #0
   12564:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12568:	f006 f838 	bl	185dc <__aeabi_fmul>
   1256c:	4603      	mov	r3, r0
   1256e:	4618      	mov	r0, r3
   12570:	f006 f9fa 	bl	18968 <__aeabi_f2iz>
   12574:	4603      	mov	r3, r0
   12576:	b29b      	uxth	r3, r3
   12578:	b29a      	uxth	r2, r3
   1257a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1257e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12582:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12584:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258c:	681a      	ldr	r2, [r3, #0]
   1258e:	f64c 0388 	movw	r3, #51336	; 0xc888
   12592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12596:	681b      	ldr	r3, [r3, #0]
   12598:	4610      	mov	r0, r2
   1259a:	4619      	mov	r1, r3
   1259c:	f005 ff16 	bl	183cc <__addsf3>
   125a0:	4603      	mov	r3, r0
   125a2:	461a      	mov	r2, r3
   125a4:	f64c 0378 	movw	r3, #51320	; 0xc878
   125a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ac:	601a      	str	r2, [r3, #0]
  }
}
   125ae:	3708      	adds	r7, #8
   125b0:	46bd      	mov	sp, r7
   125b2:	bdb0      	pop	{r4, r5, r7, pc}
   125b4:	f3af 8000 	nop.w
   125b8:	3d70a3d7 	.word	0x3d70a3d7
   125bc:	3fd3d70a 	.word	0x3fd3d70a
   125c0:	9999999a 	.word	0x9999999a
   125c4:	3fc99999 	.word	0x3fc99999

000125c8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   125c8:	b580      	push	{r7, lr}
   125ca:	b082      	sub	sp, #8
   125cc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   125ce:	f64c 3304 	movw	r3, #51972	; 0xcb04
   125d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d6:	681a      	ldr	r2, [r3, #0]
   125d8:	f240 5374 	movw	r3, #1396	; 0x574
   125dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e0:	681b      	ldr	r3, [r3, #0]
   125e2:	4610      	mov	r0, r2
   125e4:	4619      	mov	r1, r3
   125e6:	f005 feef 	bl	183c8 <__aeabi_fsub>
   125ea:	4603      	mov	r3, r0
   125ec:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   125ee:	f240 5370 	movw	r3, #1392	; 0x570
   125f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f6:	681b      	ldr	r3, [r3, #0]
   125f8:	4618      	mov	r0, r3
   125fa:	6879      	ldr	r1, [r7, #4]
   125fc:	f005 ffee 	bl	185dc <__aeabi_fmul>
   12600:	4603      	mov	r3, r0
   12602:	461a      	mov	r2, r3
   12604:	f64c 0394 	movw	r3, #51348	; 0xc894
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	4610      	mov	r0, r2
   12610:	4619      	mov	r1, r3
   12612:	f005 fedb 	bl	183cc <__addsf3>
   12616:	4603      	mov	r3, r0
   12618:	461a      	mov	r2, r3
   1261a:	f64c 0390 	movw	r3, #51344	; 0xc890
   1261e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12622:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12624:	f64c 0390 	movw	r3, #51344	; 0xc890
   12628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262c:	681b      	ldr	r3, [r3, #0]
   1262e:	4618      	mov	r0, r3
   12630:	f04f 0100 	mov.w	r1, #0
   12634:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12638:	f006 f96e 	bl	18918 <__aeabi_fcmplt>
   1263c:	4603      	mov	r3, r0
   1263e:	2b00      	cmp	r3, #0
   12640:	d008      	beq.n	12654 <altitude_pid_run+0x8c>
   12642:	f64c 0390 	movw	r3, #51344	; 0xc890
   12646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264a:	f04f 0200 	mov.w	r2, #0
   1264e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12652:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12654:	f64c 0390 	movw	r3, #51344	; 0xc890
   12658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1265c:	681b      	ldr	r3, [r3, #0]
   1265e:	4618      	mov	r0, r3
   12660:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12664:	f006 f976 	bl	18954 <__aeabi_fcmpgt>
   12668:	4603      	mov	r3, r0
   1266a:	2b00      	cmp	r3, #0
   1266c:	d006      	beq.n	1267c <altitude_pid_run+0xb4>
   1266e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12676:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1267a:	601a      	str	r2, [r3, #0]
}
   1267c:	3708      	adds	r7, #8
   1267e:	46bd      	mov	sp, r7
   12680:	bd80      	pop	{r7, pc}
   12682:	bf00      	nop
   12684:	f3af 8000 	nop.w

00012688 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12688:	b5f0      	push	{r4, r5, r6, r7, lr}
   1268a:	b08b      	sub	sp, #44	; 0x2c
   1268c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1268e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12696:	781b      	ldrb	r3, [r3, #0]
   12698:	2b00      	cmp	r3, #0
   1269a:	f040 8169 	bne.w	12970 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1269e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a6:	781b      	ldrb	r3, [r3, #0]
   126a8:	2b00      	cmp	r3, #0
   126aa:	d13c      	bne.n	12726 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   126ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b4:	2200      	movs	r2, #0
   126b6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   126b8:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   126bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c0:	881b      	ldrh	r3, [r3, #0]
   126c2:	2b00      	cmp	r3, #0
   126c4:	d000      	beq.n	126c8 <auto_nav+0x40>
   126c6:	e03d      	b.n	12744 <auto_nav+0xbc>
	else NextStage(); 
   126c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d0:	781b      	ldrb	r3, [r3, #0]
   126d2:	3301      	adds	r3, #1
   126d4:	b2da      	uxtb	r2, r3
   126d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126de:	701a      	strb	r2, [r3, #0]
   126e0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   126e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e8:	681a      	ldr	r2, [r3, #0]
   126ea:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   126ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f2:	601a      	str	r2, [r3, #0]
   126f4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   126f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fc:	681a      	ldr	r2, [r3, #0]
   126fe:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12706:	601a      	str	r2, [r3, #0]
   12708:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1270c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12710:	2200      	movs	r2, #0
   12712:	801a      	strh	r2, [r3, #0]
   12714:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271c:	f04f 0200 	mov.w	r2, #0
   12720:	601a      	str	r2, [r3, #0]
   12722:	f002 b883 	b.w	1482c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12726:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	781b      	ldrb	r3, [r3, #0]
   12730:	2b01      	cmp	r3, #1
   12732:	d100      	bne.n	12736 <auto_nav+0xae>
    {   Goto(while_1)}
   12734:	e7ba      	b.n	126ac <auto_nav+0x24>
    else if (nav_stage == 2)
   12736:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1273a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273e:	781b      	ldrb	r3, [r3, #0]
   12740:	2b02      	cmp	r3, #2
   12742:	d162      	bne.n	1280a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12744:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274c:	2202      	movs	r2, #2
   1274e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12750:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	881b      	ldrh	r3, [r3, #0]
   1275a:	2b08      	cmp	r3, #8
   1275c:	d92e      	bls.n	127bc <auto_nav+0x134>
   1275e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	3301      	adds	r3, #1
   1276a:	b2da      	uxtb	r2, r3
   1276c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12774:	701a      	strb	r2, [r3, #0]
   12776:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1277a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277e:	681a      	ldr	r2, [r3, #0]
   12780:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12788:	601a      	str	r2, [r3, #0]
   1278a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1278e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12792:	681a      	ldr	r2, [r3, #0]
   12794:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279c:	601a      	str	r2, [r3, #0]
   1279e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   127a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a6:	2200      	movs	r2, #0
   127a8:	801a      	strh	r2, [r3, #0]
   127aa:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   127ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b2:	f04f 0200 	mov.w	r2, #0
   127b6:	601a      	str	r2, [r3, #0]
   127b8:	f002 b838 	b.w	1482c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   127bc:	f64c 038c 	movw	r3, #51340	; 0xc88c
   127c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   127c8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127cc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127ce:	f24c 532f 	movw	r3, #50479	; 0xc52f
   127d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d6:	2200      	movs	r2, #0
   127d8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   127da:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   127de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e2:	f649 129a 	movw	r2, #39322	; 0x999a
   127e6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   127ea:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   127ec:	f24c 532d 	movw	r3, #50477	; 0xc52d
   127f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f4:	2201      	movs	r2, #1
   127f6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   127f8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   127fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12800:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   12804:	801a      	strh	r2, [r3, #0]
        }
        return;
   12806:	f002 b811 	b.w	1482c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   1280a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1280e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12812:	781b      	ldrb	r3, [r3, #0]
   12814:	2b03      	cmp	r3, #3
   12816:	d168      	bne.n	128ea <auto_nav+0x262>
     {
	nav_stage = 3;	
   12818:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1281c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12820:	2203      	movs	r2, #3
   12822:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12824:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282c:	681b      	ldr	r3, [r3, #0]
   1282e:	4618      	mov	r0, r3
   12830:	f04f 0100 	mov.w	r1, #0
   12834:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12838:	f006 f88c 	bl	18954 <__aeabi_fcmpgt>
   1283c:	4603      	mov	r3, r0
   1283e:	2b00      	cmp	r3, #0
   12840:	d02e      	beq.n	128a0 <auto_nav+0x218>
   12842:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284a:	781b      	ldrb	r3, [r3, #0]
   1284c:	3301      	adds	r3, #1
   1284e:	b2da      	uxtb	r2, r3
   12850:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12858:	701a      	strb	r2, [r3, #0]
   1285a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1285e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12862:	681a      	ldr	r2, [r3, #0]
   12864:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286c:	601a      	str	r2, [r3, #0]
   1286e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12876:	681a      	ldr	r2, [r3, #0]
   12878:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1287c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12880:	601a      	str	r2, [r3, #0]
   12882:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288a:	2200      	movs	r2, #0
   1288c:	801a      	strh	r2, [r3, #0]
   1288e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12896:	f04f 0200 	mov.w	r2, #0
   1289a:	601a      	str	r2, [r3, #0]
   1289c:	f001 bfc6 	b.w	1482c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   128a0:	f64c 038c 	movw	r3, #51340	; 0xc88c
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   128ac:	f2c4 0296 	movt	r2, #16534	; 0x4096
   128b0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   128b2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   128b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ba:	2200      	movs	r2, #0
   128bc:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   128be:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c6:	f04f 0200 	mov.w	r2, #0
   128ca:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   128cc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   128d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d4:	2202      	movs	r2, #2
   128d6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   128d8:	f64c 0390 	movw	r3, #51344	; 0xc890
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128e4:	601a      	str	r2, [r3, #0]
        }
        return;
   128e6:	f001 bfa1 	b.w	1482c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   128ea:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2b04      	cmp	r3, #4
   128f6:	f041 8799 	bne.w	1482c <auto_nav+0x21a4>
        NextBlock()
   128fa:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12902:	781b      	ldrb	r3, [r3, #0]
   12904:	3301      	adds	r3, #1
   12906:	b2da      	uxtb	r2, r3
   12908:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1290c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12910:	701a      	strb	r2, [r3, #0]
   12912:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1291a:	2200      	movs	r2, #0
   1291c:	701a      	strb	r2, [r3, #0]
   1291e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12926:	2200      	movs	r2, #0
   12928:	801a      	strh	r2, [r3, #0]
   1292a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1292e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12932:	681a      	ldr	r2, [r3, #0]
   12934:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293c:	601a      	str	r2, [r3, #0]
   1293e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12946:	681a      	ldr	r2, [r3, #0]
   12948:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1294c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12950:	601a      	str	r2, [r3, #0]
   12952:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1295a:	2200      	movs	r2, #0
   1295c:	801a      	strh	r2, [r3, #0]
   1295e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	f04f 0200 	mov.w	r2, #0
   1296a:	601a      	str	r2, [r3, #0]
   1296c:	f001 bf5e 	b.w	1482c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12970:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12978:	781b      	ldrb	r3, [r3, #0]
   1297a:	2b01      	cmp	r3, #1
   1297c:	f040 81bc 	bne.w	12cf8 <auto_nav+0x670>
{
    nav_block = 1;
   12980:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12988:	2201      	movs	r2, #1
   1298a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1298c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12994:	781b      	ldrb	r3, [r3, #0]
   12996:	2b00      	cmp	r3, #0
   12998:	d007      	beq.n	129aa <auto_nav+0x322>
   1299a:	f24c 5330 	movw	r3, #50480	; 0xc530
   1299e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a2:	2200      	movs	r2, #0
   129a4:	701a      	strb	r2, [r3, #0]
   129a6:	2301      	movs	r3, #1
   129a8:	e000      	b.n	129ac <auto_nav+0x324>
   129aa:	2300      	movs	r3, #0
   129ac:	2b00      	cmp	r3, #0
   129ae:	d034      	beq.n	12a1a <auto_nav+0x392>
	{ GotoBlock(2) }
   129b0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   129b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b8:	2202      	movs	r2, #2
   129ba:	701a      	strb	r2, [r3, #0]
   129bc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c4:	2200      	movs	r2, #0
   129c6:	701a      	strb	r2, [r3, #0]
   129c8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   129cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d0:	2200      	movs	r2, #0
   129d2:	801a      	strh	r2, [r3, #0]
   129d4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   129d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129dc:	681a      	ldr	r2, [r3, #0]
   129de:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   129e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e6:	601a      	str	r2, [r3, #0]
   129e8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   129ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f0:	681a      	ldr	r2, [r3, #0]
   129f2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129fa:	601a      	str	r2, [r3, #0]
   129fc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a04:	2200      	movs	r2, #0
   12a06:	801a      	strh	r2, [r3, #0]
   12a08:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a10:	f04f 0200 	mov.w	r2, #0
   12a14:	601a      	str	r2, [r3, #0]
   12a16:	f001 bf09 	b.w	1482c <auto_nav+0x21a4>
    if(nav_stage == 0)
   12a1a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a22:	781b      	ldrb	r3, [r3, #0]
   12a24:	2b00      	cmp	r3, #0
   12a26:	d12e      	bne.n	12a86 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12a28:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a30:	781b      	ldrb	r3, [r3, #0]
   12a32:	3301      	adds	r3, #1
   12a34:	b2da      	uxtb	r2, r3
   12a36:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3e:	701a      	strb	r2, [r3, #0]
   12a40:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a48:	681a      	ldr	r2, [r3, #0]
   12a4a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a52:	601a      	str	r2, [r3, #0]
   12a54:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5c:	681a      	ldr	r2, [r3, #0]
   12a5e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a66:	601a      	str	r2, [r3, #0]
   12a68:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	2200      	movs	r2, #0
   12a72:	801a      	strh	r2, [r3, #0]
   12a74:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7c:	f04f 0200 	mov.w	r2, #0
   12a80:	601a      	str	r2, [r3, #0]
   12a82:	f001 bed3 	b.w	1482c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12a86:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a8e:	781b      	ldrb	r3, [r3, #0]
   12a90:	2b01      	cmp	r3, #1
   12a92:	d169      	bne.n	12b68 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12a94:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9c:	2201      	movs	r2, #1
   12a9e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12aa0:	2001      	movs	r0, #1
   12aa2:	f001 fed1 	bl	14848 <approaching>
   12aa6:	4603      	mov	r3, r0
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	d034      	beq.n	12b16 <auto_nav+0x48e>
   12aac:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab4:	2201      	movs	r2, #1
   12ab6:	701a      	strb	r2, [r3, #0]
   12ab8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac0:	781b      	ldrb	r3, [r3, #0]
   12ac2:	3301      	adds	r3, #1
   12ac4:	b2da      	uxtb	r2, r3
   12ac6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ace:	701a      	strb	r2, [r3, #0]
   12ad0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad8:	681a      	ldr	r2, [r3, #0]
   12ada:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae2:	601a      	str	r2, [r3, #0]
   12ae4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aec:	681a      	ldr	r2, [r3, #0]
   12aee:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af6:	601a      	str	r2, [r3, #0]
   12af8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b00:	2200      	movs	r2, #0
   12b02:	801a      	strh	r2, [r3, #0]
   12b04:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b0c:	f04f 0200 	mov.w	r2, #0
   12b10:	601a      	str	r2, [r3, #0]
   12b12:	f001 be8b 	b.w	1482c <auto_nav+0x21a4>
            fly_to(1);
   12b16:	2001      	movs	r0, #1
   12b18:	f001 ffca 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   12b1c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b24:	2200      	movs	r2, #0
   12b26:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b28:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b30:	f04f 0200 	mov.w	r2, #0
   12b34:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b36:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3e:	2203      	movs	r2, #3
   12b40:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12b42:	f240 5378 	movw	r3, #1400	; 0x578
   12b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4a:	695a      	ldr	r2, [r3, #20]
   12b4c:	f240 5374 	movw	r3, #1396	; 0x574
   12b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b54:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b56:	f64c 0394 	movw	r3, #51348	; 0xc894
   12b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5e:	f04f 0200 	mov.w	r2, #0
   12b62:	601a      	str	r2, [r3, #0]
          }
          return;
   12b64:	f001 be62 	b.w	1482c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b68:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b70:	781b      	ldrb	r3, [r3, #0]
   12b72:	2b02      	cmp	r3, #2
   12b74:	d169      	bne.n	12c4a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12b76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	2202      	movs	r2, #2
   12b80:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b82:	2004      	movs	r0, #4
   12b84:	f001 fe60 	bl	14848 <approaching>
   12b88:	4603      	mov	r3, r0
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	d034      	beq.n	12bf8 <auto_nav+0x570>
   12b8e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b96:	2204      	movs	r2, #4
   12b98:	701a      	strb	r2, [r3, #0]
   12b9a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba2:	781b      	ldrb	r3, [r3, #0]
   12ba4:	3301      	adds	r3, #1
   12ba6:	b2da      	uxtb	r2, r3
   12ba8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb0:	701a      	strb	r2, [r3, #0]
   12bb2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bba:	681a      	ldr	r2, [r3, #0]
   12bbc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc4:	601a      	str	r2, [r3, #0]
   12bc6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bce:	681a      	ldr	r2, [r3, #0]
   12bd0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd8:	601a      	str	r2, [r3, #0]
   12bda:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be2:	2200      	movs	r2, #0
   12be4:	801a      	strh	r2, [r3, #0]
   12be6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bee:	f04f 0200 	mov.w	r2, #0
   12bf2:	601a      	str	r2, [r3, #0]
   12bf4:	f001 be1a 	b.w	1482c <auto_nav+0x21a4>
            fly_to(4);
   12bf8:	2004      	movs	r0, #4
   12bfa:	f001 ff59 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   12bfe:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c06:	2200      	movs	r2, #0
   12c08:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c0a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c12:	f04f 0200 	mov.w	r2, #0
   12c16:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c18:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c20:	2203      	movs	r2, #3
   12c22:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12c24:	f240 5378 	movw	r3, #1400	; 0x578
   12c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c2e:	f240 5374 	movw	r3, #1396	; 0x574
   12c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c36:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c38:	f64c 0394 	movw	r3, #51348	; 0xc894
   12c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c40:	f04f 0200 	mov.w	r2, #0
   12c44:	601a      	str	r2, [r3, #0]
          }
          return;
   12c46:	f001 bdf1 	b.w	1482c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12c4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c52:	781b      	ldrb	r3, [r3, #0]
   12c54:	2b03      	cmp	r3, #3
   12c56:	d106      	bne.n	12c66 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12c58:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c60:	2203      	movs	r2, #3
   12c62:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12c64:	e6e0      	b.n	12a28 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12c66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6e:	781b      	ldrb	r3, [r3, #0]
   12c70:	2b04      	cmp	r3, #4
   12c72:	f041 85db 	bne.w	1482c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12c76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7e:	2204      	movs	r2, #4
   12c80:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12c82:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8a:	781b      	ldrb	r3, [r3, #0]
   12c8c:	3301      	adds	r3, #1
   12c8e:	b2da      	uxtb	r2, r3
   12c90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c98:	701a      	strb	r2, [r3, #0]
   12c9a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca2:	2200      	movs	r2, #0
   12ca4:	701a      	strb	r2, [r3, #0]
   12ca6:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cae:	2200      	movs	r2, #0
   12cb0:	801a      	strh	r2, [r3, #0]
   12cb2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cba:	681a      	ldr	r2, [r3, #0]
   12cbc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc4:	601a      	str	r2, [r3, #0]
   12cc6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cce:	681a      	ldr	r2, [r3, #0]
   12cd0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd8:	601a      	str	r2, [r3, #0]
   12cda:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce2:	2200      	movs	r2, #0
   12ce4:	801a      	strh	r2, [r3, #0]
   12ce6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cee:	f04f 0200 	mov.w	r2, #0
   12cf2:	601a      	str	r2, [r3, #0]
   12cf4:	f001 bd9a 	b.w	1482c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12cf8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d00:	781b      	ldrb	r3, [r3, #0]
   12d02:	2b02      	cmp	r3, #2
   12d04:	f040 8392 	bne.w	1342c <auto_nav+0xda4>
{
	nav_block = 2;
   12d08:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d10:	2202      	movs	r2, #2
   12d12:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12d14:	f24c 5330 	movw	r3, #50480	; 0xc530
   12d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1c:	781b      	ldrb	r3, [r3, #0]
   12d1e:	2b00      	cmp	r3, #0
   12d20:	d007      	beq.n	12d32 <auto_nav+0x6aa>
   12d22:	f24c 5330 	movw	r3, #50480	; 0xc530
   12d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2a:	2200      	movs	r2, #0
   12d2c:	701a      	strb	r2, [r3, #0]
   12d2e:	2301      	movs	r3, #1
   12d30:	e000      	b.n	12d34 <auto_nav+0x6ac>
   12d32:	2300      	movs	r3, #0
   12d34:	2b00      	cmp	r3, #0
   12d36:	d034      	beq.n	12da2 <auto_nav+0x71a>
   12d38:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d40:	2203      	movs	r2, #3
   12d42:	701a      	strb	r2, [r3, #0]
   12d44:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4c:	2200      	movs	r2, #0
   12d4e:	701a      	strb	r2, [r3, #0]
   12d50:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d58:	2200      	movs	r2, #0
   12d5a:	801a      	strh	r2, [r3, #0]
   12d5c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d64:	681a      	ldr	r2, [r3, #0]
   12d66:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6e:	601a      	str	r2, [r3, #0]
   12d70:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d78:	681a      	ldr	r2, [r3, #0]
   12d7a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d82:	601a      	str	r2, [r3, #0]
   12d84:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	2200      	movs	r2, #0
   12d8e:	801a      	strh	r2, [r3, #0]
   12d90:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d98:	f04f 0200 	mov.w	r2, #0
   12d9c:	601a      	str	r2, [r3, #0]
   12d9e:	f001 bd45 	b.w	1482c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12da2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	781b      	ldrb	r3, [r3, #0]
   12dac:	2b00      	cmp	r3, #0
   12dae:	d134      	bne.n	12e1a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12db0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db8:	2200      	movs	r2, #0
   12dba:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12dbc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc4:	781b      	ldrb	r3, [r3, #0]
   12dc6:	3301      	adds	r3, #1
   12dc8:	b2da      	uxtb	r2, r3
   12dca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd2:	701a      	strb	r2, [r3, #0]
   12dd4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ddc:	681a      	ldr	r2, [r3, #0]
   12dde:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de6:	601a      	str	r2, [r3, #0]
   12de8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df0:	681a      	ldr	r2, [r3, #0]
   12df2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfa:	601a      	str	r2, [r3, #0]
   12dfc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e04:	2200      	movs	r2, #0
   12e06:	801a      	strh	r2, [r3, #0]
   12e08:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e10:	f04f 0200 	mov.w	r2, #0
   12e14:	601a      	str	r2, [r3, #0]
   12e16:	f001 bd09 	b.w	1482c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12e1a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e22:	781b      	ldrb	r3, [r3, #0]
   12e24:	2b01      	cmp	r3, #1
   12e26:	d169      	bne.n	12efc <auto_nav+0x874>
    {
         nav_stage =1;
   12e28:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e30:	2201      	movs	r2, #1
   12e32:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12e34:	2006      	movs	r0, #6
   12e36:	f001 fd07 	bl	14848 <approaching>
   12e3a:	4603      	mov	r3, r0
   12e3c:	2b00      	cmp	r3, #0
   12e3e:	d034      	beq.n	12eaa <auto_nav+0x822>
   12e40:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e48:	2206      	movs	r2, #6
   12e4a:	701a      	strb	r2, [r3, #0]
   12e4c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e54:	781b      	ldrb	r3, [r3, #0]
   12e56:	3301      	adds	r3, #1
   12e58:	b2da      	uxtb	r2, r3
   12e5a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e62:	701a      	strb	r2, [r3, #0]
   12e64:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6c:	681a      	ldr	r2, [r3, #0]
   12e6e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e76:	601a      	str	r2, [r3, #0]
   12e78:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e80:	681a      	ldr	r2, [r3, #0]
   12e82:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8a:	601a      	str	r2, [r3, #0]
   12e8c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e94:	2200      	movs	r2, #0
   12e96:	801a      	strh	r2, [r3, #0]
   12e98:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea0:	f04f 0200 	mov.w	r2, #0
   12ea4:	601a      	str	r2, [r3, #0]
   12ea6:	f001 bcc1 	b.w	1482c <auto_nav+0x21a4>
            fly_to(6);
   12eaa:	2006      	movs	r0, #6
   12eac:	f001 fe00 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   12eb0:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb8:	2200      	movs	r2, #0
   12eba:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ebc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec4:	f04f 0200 	mov.w	r2, #0
   12ec8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12eca:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed2:	2203      	movs	r2, #3
   12ed4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12ed6:	f240 5378 	movw	r3, #1400	; 0x578
   12eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12ee0:	f240 5374 	movw	r3, #1396	; 0x574
   12ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12eea:	f64c 0394 	movw	r3, #51348	; 0xc894
   12eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef2:	f04f 0200 	mov.w	r2, #0
   12ef6:	601a      	str	r2, [r3, #0]
          }
          return;
   12ef8:	f001 bc98 	b.w	1482c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12efc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f04:	781b      	ldrb	r3, [r3, #0]
   12f06:	2b02      	cmp	r3, #2
   12f08:	d169      	bne.n	12fde <auto_nav+0x956>
     {
         nav_stage =2; 
   12f0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f12:	2202      	movs	r2, #2
   12f14:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12f16:	2001      	movs	r0, #1
   12f18:	f001 fc96 	bl	14848 <approaching>
   12f1c:	4603      	mov	r3, r0
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d034      	beq.n	12f8c <auto_nav+0x904>
   12f22:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2a:	2201      	movs	r2, #1
   12f2c:	701a      	strb	r2, [r3, #0]
   12f2e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f36:	781b      	ldrb	r3, [r3, #0]
   12f38:	3301      	adds	r3, #1
   12f3a:	b2da      	uxtb	r2, r3
   12f3c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f44:	701a      	strb	r2, [r3, #0]
   12f46:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4e:	681a      	ldr	r2, [r3, #0]
   12f50:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f58:	601a      	str	r2, [r3, #0]
   12f5a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f62:	681a      	ldr	r2, [r3, #0]
   12f64:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6c:	601a      	str	r2, [r3, #0]
   12f6e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f76:	2200      	movs	r2, #0
   12f78:	801a      	strh	r2, [r3, #0]
   12f7a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f82:	f04f 0200 	mov.w	r2, #0
   12f86:	601a      	str	r2, [r3, #0]
   12f88:	f001 bc50 	b.w	1482c <auto_nav+0x21a4>
            fly_to(1);
   12f8c:	2001      	movs	r0, #1
   12f8e:	f001 fd8f 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   12f92:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9a:	2200      	movs	r2, #0
   12f9c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f9e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa6:	f04f 0200 	mov.w	r2, #0
   12faa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12fac:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb4:	2203      	movs	r2, #3
   12fb6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12fb8:	f240 5378 	movw	r3, #1400	; 0x578
   12fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc0:	695a      	ldr	r2, [r3, #20]
   12fc2:	f240 5374 	movw	r3, #1396	; 0x574
   12fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fca:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12fcc:	f64c 0394 	movw	r3, #51348	; 0xc894
   12fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd4:	f04f 0200 	mov.w	r2, #0
   12fd8:	601a      	str	r2, [r3, #0]
          }
          return;
   12fda:	f001 bc27 	b.w	1482c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12fde:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe6:	781b      	ldrb	r3, [r3, #0]
   12fe8:	2b03      	cmp	r3, #3
   12fea:	d16f      	bne.n	130cc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12fec:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff4:	2203      	movs	r2, #3
   12ff6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ff8:	2002      	movs	r0, #2
   12ffa:	f001 fc25 	bl	14848 <approaching>
   12ffe:	4603      	mov	r3, r0
   13000:	2b00      	cmp	r3, #0
   13002:	d034      	beq.n	1306e <auto_nav+0x9e6>
   13004:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300c:	2202      	movs	r2, #2
   1300e:	701a      	strb	r2, [r3, #0]
   13010:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13018:	781b      	ldrb	r3, [r3, #0]
   1301a:	3301      	adds	r3, #1
   1301c:	b2da      	uxtb	r2, r3
   1301e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13026:	701a      	strb	r2, [r3, #0]
   13028:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1302c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13030:	681a      	ldr	r2, [r3, #0]
   13032:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303a:	601a      	str	r2, [r3, #0]
   1303c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13044:	681a      	ldr	r2, [r3, #0]
   13046:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1304a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1304e:	601a      	str	r2, [r3, #0]
   13050:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13058:	2200      	movs	r2, #0
   1305a:	801a      	strh	r2, [r3, #0]
   1305c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13064:	f04f 0200 	mov.w	r2, #0
   13068:	601a      	str	r2, [r3, #0]
   1306a:	f001 bbdf 	b.w	1482c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1306e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13076:	781b      	ldrb	r3, [r3, #0]
   13078:	4618      	mov	r0, r3
   1307a:	2102      	movs	r1, #2
   1307c:	f001 fd3a 	bl	14af4 <route_to>
            auto_pitch = FALSE;
   13080:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13088:	2200      	movs	r2, #0
   1308a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1308c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13094:	f04f 0200 	mov.w	r2, #0
   13098:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1309a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1309e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a2:	2203      	movs	r2, #3
   130a4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   130a6:	f240 5378 	movw	r3, #1400	; 0x578
   130aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ae:	6a1a      	ldr	r2, [r3, #32]
   130b0:	f240 5374 	movw	r3, #1396	; 0x574
   130b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   130ba:	f64c 0394 	movw	r3, #51348	; 0xc894
   130be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c2:	f04f 0200 	mov.w	r2, #0
   130c6:	601a      	str	r2, [r3, #0]
          }
          return;
   130c8:	f001 bbb0 	b.w	1482c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   130cc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d4:	781b      	ldrb	r3, [r3, #0]
   130d6:	2b04      	cmp	r3, #4
   130d8:	d169      	bne.n	131ae <auto_nav+0xb26>
       {
          nav_stage = 4;
   130da:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e2:	2204      	movs	r2, #4
   130e4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   130e6:	2003      	movs	r0, #3
   130e8:	f001 fbae 	bl	14848 <approaching>
   130ec:	4603      	mov	r3, r0
   130ee:	2b00      	cmp	r3, #0
   130f0:	d034      	beq.n	1315c <auto_nav+0xad4>
   130f2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   130f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fa:	2203      	movs	r2, #3
   130fc:	701a      	strb	r2, [r3, #0]
   130fe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13106:	781b      	ldrb	r3, [r3, #0]
   13108:	3301      	adds	r3, #1
   1310a:	b2da      	uxtb	r2, r3
   1310c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13114:	701a      	strb	r2, [r3, #0]
   13116:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1311a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311e:	681a      	ldr	r2, [r3, #0]
   13120:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13128:	601a      	str	r2, [r3, #0]
   1312a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1312e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13132:	681a      	ldr	r2, [r3, #0]
   13134:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313c:	601a      	str	r2, [r3, #0]
   1313e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13146:	2200      	movs	r2, #0
   13148:	801a      	strh	r2, [r3, #0]
   1314a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1314e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13152:	f04f 0200 	mov.w	r2, #0
   13156:	601a      	str	r2, [r3, #0]
   13158:	f001 bb68 	b.w	1482c <auto_nav+0x21a4>
            fly_to(3);
   1315c:	2003      	movs	r0, #3
   1315e:	f001 fca7 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   13162:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1316a:	2200      	movs	r2, #0
   1316c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1316e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13176:	f04f 0200 	mov.w	r2, #0
   1317a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1317c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13184:	2203      	movs	r2, #3
   13186:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13188:	f240 5378 	movw	r3, #1400	; 0x578
   1318c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13192:	f240 5374 	movw	r3, #1396	; 0x574
   13196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1319a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1319c:	f64c 0394 	movw	r3, #51348	; 0xc894
   131a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a4:	f04f 0200 	mov.w	r2, #0
   131a8:	601a      	str	r2, [r3, #0]
          }
          return;
   131aa:	f001 bb3f 	b.w	1482c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   131ae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b6:	781b      	ldrb	r3, [r3, #0]
   131b8:	2b05      	cmp	r3, #5
   131ba:	d169      	bne.n	13290 <auto_nav+0xc08>
       {
          nav_stage =5;
   131bc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	2205      	movs	r2, #5
   131c6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   131c8:	2004      	movs	r0, #4
   131ca:	f001 fb3d 	bl	14848 <approaching>
   131ce:	4603      	mov	r3, r0
   131d0:	2b00      	cmp	r3, #0
   131d2:	d034      	beq.n	1323e <auto_nav+0xbb6>
   131d4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131dc:	2204      	movs	r2, #4
   131de:	701a      	strb	r2, [r3, #0]
   131e0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e8:	781b      	ldrb	r3, [r3, #0]
   131ea:	3301      	adds	r3, #1
   131ec:	b2da      	uxtb	r2, r3
   131ee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f6:	701a      	strb	r2, [r3, #0]
   131f8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   131fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13200:	681a      	ldr	r2, [r3, #0]
   13202:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320a:	601a      	str	r2, [r3, #0]
   1320c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13214:	681a      	ldr	r2, [r3, #0]
   13216:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1321a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1321e:	601a      	str	r2, [r3, #0]
   13220:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13228:	2200      	movs	r2, #0
   1322a:	801a      	strh	r2, [r3, #0]
   1322c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13234:	f04f 0200 	mov.w	r2, #0
   13238:	601a      	str	r2, [r3, #0]
   1323a:	f001 baf7 	b.w	1482c <auto_nav+0x21a4>
            fly_to(4);
   1323e:	2004      	movs	r0, #4
   13240:	f001 fc36 	bl	14ab0 <fly_to>
            auto_pitch = FALSE;
   13244:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1324c:	2200      	movs	r2, #0
   1324e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13250:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13258:	f04f 0200 	mov.w	r2, #0
   1325c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1325e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13266:	2203      	movs	r2, #3
   13268:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1326a:	f240 5378 	movw	r3, #1400	; 0x578
   1326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13274:	f240 5374 	movw	r3, #1396	; 0x574
   13278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1327c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1327e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13286:	f04f 0200 	mov.w	r2, #0
   1328a:	601a      	str	r2, [r3, #0]
          }
          return;
   1328c:	f001 bace 	b.w	1482c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13290:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13298:	781b      	ldrb	r3, [r3, #0]
   1329a:	2b06      	cmp	r3, #6
   1329c:	d16f      	bne.n	1337e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1329e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a6:	2206      	movs	r2, #6
   132a8:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   132aa:	2005      	movs	r0, #5
   132ac:	f001 facc 	bl	14848 <approaching>
   132b0:	4603      	mov	r3, r0
   132b2:	2b00      	cmp	r3, #0
   132b4:	d034      	beq.n	13320 <auto_nav+0xc98>
   132b6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   132ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132be:	2205      	movs	r2, #5
   132c0:	701a      	strb	r2, [r3, #0]
   132c2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	3301      	adds	r3, #1
   132ce:	b2da      	uxtb	r2, r3
   132d0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d8:	701a      	strb	r2, [r3, #0]
   132da:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   132de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e2:	681a      	ldr	r2, [r3, #0]
   132e4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   132e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ec:	601a      	str	r2, [r3, #0]
   132ee:	f64c 3300 	movw	r3, #51968	; 0xcb00
   132f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f6:	681a      	ldr	r2, [r3, #0]
   132f8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13300:	601a      	str	r2, [r3, #0]
   13302:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330a:	2200      	movs	r2, #0
   1330c:	801a      	strh	r2, [r3, #0]
   1330e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13316:	f04f 0200 	mov.w	r2, #0
   1331a:	601a      	str	r2, [r3, #0]
   1331c:	f001 ba86 	b.w	1482c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13320:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13328:	781b      	ldrb	r3, [r3, #0]
   1332a:	4618      	mov	r0, r3
   1332c:	2105      	movs	r1, #5
   1332e:	f001 fbe1 	bl	14af4 <route_to>
            auto_pitch = FALSE;
   13332:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333a:	2200      	movs	r2, #0
   1333c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1333e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13346:	f04f 0200 	mov.w	r2, #0
   1334a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1334c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13354:	2203      	movs	r2, #3
   13356:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13358:	f240 5378 	movw	r3, #1400	; 0x578
   1335c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13362:	f240 5374 	movw	r3, #1396	; 0x574
   13366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1336a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1336c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13374:	f04f 0200 	mov.w	r2, #0
   13378:	601a      	str	r2, [r3, #0]
          }
          return;
   1337a:	f001 ba57 	b.w	1482c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1337e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	781b      	ldrb	r3, [r3, #0]
   13388:	2b07      	cmp	r3, #7
   1338a:	d106      	bne.n	1339a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1338c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13394:	2207      	movs	r2, #7
   13396:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13398:	e50a      	b.n	12db0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1339a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1339e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a2:	781b      	ldrb	r3, [r3, #0]
   133a4:	2b08      	cmp	r3, #8
   133a6:	f041 8241 	bne.w	1482c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   133aa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b2:	2208      	movs	r2, #8
   133b4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   133b6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	3301      	adds	r3, #1
   133c2:	b2da      	uxtb	r2, r3
   133c4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133cc:	701a      	strb	r2, [r3, #0]
   133ce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d6:	2200      	movs	r2, #0
   133d8:	701a      	strb	r2, [r3, #0]
   133da:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   133de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e2:	2200      	movs	r2, #0
   133e4:	801a      	strh	r2, [r3, #0]
   133e6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   133ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ee:	681a      	ldr	r2, [r3, #0]
   133f0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   133f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f8:	601a      	str	r2, [r3, #0]
   133fa:	f64c 3300 	movw	r3, #51968	; 0xcb00
   133fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13402:	681a      	ldr	r2, [r3, #0]
   13404:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1340c:	601a      	str	r2, [r3, #0]
   1340e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13416:	2200      	movs	r2, #0
   13418:	801a      	strh	r2, [r3, #0]
   1341a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1341e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13422:	f04f 0200 	mov.w	r2, #0
   13426:	601a      	str	r2, [r3, #0]
   13428:	f001 ba00 	b.w	1482c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1342c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13434:	781b      	ldrb	r3, [r3, #0]
   13436:	2b03      	cmp	r3, #3
   13438:	f040 8388 	bne.w	13b4c <auto_nav+0x14c4>
{
    nav_block = 3;
   1343c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13444:	2203      	movs	r2, #3
   13446:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13448:	f24c 5330 	movw	r3, #50480	; 0xc530
   1344c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13450:	781b      	ldrb	r3, [r3, #0]
   13452:	2b00      	cmp	r3, #0
   13454:	d007      	beq.n	13466 <auto_nav+0xdde>
   13456:	f24c 5330 	movw	r3, #50480	; 0xc530
   1345a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1345e:	2200      	movs	r2, #0
   13460:	701a      	strb	r2, [r3, #0]
   13462:	2301      	movs	r3, #1
   13464:	e000      	b.n	13468 <auto_nav+0xde0>
   13466:	2300      	movs	r3, #0
   13468:	2b00      	cmp	r3, #0
   1346a:	d034      	beq.n	134d6 <auto_nav+0xe4e>
   1346c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13474:	2204      	movs	r2, #4
   13476:	701a      	strb	r2, [r3, #0]
   13478:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1347c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13480:	2200      	movs	r2, #0
   13482:	701a      	strb	r2, [r3, #0]
   13484:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1348c:	2200      	movs	r2, #0
   1348e:	801a      	strh	r2, [r3, #0]
   13490:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13498:	681a      	ldr	r2, [r3, #0]
   1349a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1349e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a2:	601a      	str	r2, [r3, #0]
   134a4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   134a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ac:	681a      	ldr	r2, [r3, #0]
   134ae:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   134b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b6:	601a      	str	r2, [r3, #0]
   134b8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   134bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134c0:	2200      	movs	r2, #0
   134c2:	801a      	strh	r2, [r3, #0]
   134c4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   134c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134cc:	f04f 0200 	mov.w	r2, #0
   134d0:	601a      	str	r2, [r3, #0]
   134d2:	f001 b9ab 	b.w	1482c <auto_nav+0x21a4>
    if(nav_stage == 0)
   134d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   134da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134de:	781b      	ldrb	r3, [r3, #0]
   134e0:	2b00      	cmp	r3, #0
   134e2:	f040 82ea 	bne.w	13aba <auto_nav+0x1432>
    {
        nav_stage = 0;
   134e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   134ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ee:	2200      	movs	r2, #0
   134f0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   134f2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   134f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134fa:	781b      	ldrb	r3, [r3, #0]
   134fc:	2b02      	cmp	r3, #2
   134fe:	f040 81a5 	bne.w	1384c <auto_nav+0x11c4>
   13502:	f24c 6350 	movw	r3, #50768	; 0xc650
   13506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350a:	88db      	ldrh	r3, [r3, #6]
   1350c:	84fb      	strh	r3, [r7, #38]	; 0x26
   1350e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13512:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13516:	dc04      	bgt.n	13522 <auto_nav+0xe9a>
   13518:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1351c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13520:	da7e      	bge.n	13620 <auto_nav+0xf98>
   13522:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1352a:	681b      	ldr	r3, [r3, #0]
   1352c:	4618      	mov	r0, r3
   1352e:	f004 fbc1 	bl	17cb4 <__aeabi_f2d>
   13532:	4604      	mov	r4, r0
   13534:	460d      	mov	r5, r1
   13536:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1353a:	4618      	mov	r0, r3
   1353c:	f004 fffa 	bl	18534 <__aeabi_i2f>
   13540:	4603      	mov	r3, r0
   13542:	4618      	mov	r0, r3
   13544:	f04f 0100 	mov.w	r1, #0
   13548:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1354c:	f005 f8fa 	bl	18744 <__aeabi_fdiv>
   13550:	4603      	mov	r3, r0
   13552:	4618      	mov	r0, r3
   13554:	f004 fbae 	bl	17cb4 <__aeabi_f2d>
   13558:	4602      	mov	r2, r0
   1355a:	460b      	mov	r3, r1
   1355c:	4610      	mov	r0, r2
   1355e:	4619      	mov	r1, r3
   13560:	f04f 0200 	mov.w	r2, #0
   13564:	f04f 0300 	mov.w	r3, #0
   13568:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1356c:	f004 fbf6 	bl	17d5c <__aeabi_dmul>
   13570:	4602      	mov	r2, r0
   13572:	460b      	mov	r3, r1
   13574:	4610      	mov	r0, r2
   13576:	4619      	mov	r1, r3
   13578:	f04f 0200 	mov.w	r2, #0
   1357c:	f04f 0300 	mov.w	r3, #0
   13580:	f004 fa3a 	bl	179f8 <__adddf3>
   13584:	4602      	mov	r2, r0
   13586:	460b      	mov	r3, r1
   13588:	4620      	mov	r0, r4
   1358a:	4629      	mov	r1, r5
   1358c:	f004 fa34 	bl	179f8 <__adddf3>
   13590:	4602      	mov	r2, r0
   13592:	460b      	mov	r3, r1
   13594:	4610      	mov	r0, r2
   13596:	4619      	mov	r1, r3
   13598:	f004 fec2 	bl	18320 <__aeabi_d2f>
   1359c:	4602      	mov	r2, r0
   1359e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135a6:	601a      	str	r2, [r3, #0]
   135a8:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135b0:	681b      	ldr	r3, [r3, #0]
   135b2:	4618      	mov	r0, r3
   135b4:	f04f 0100 	mov.w	r1, #0
   135b8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   135bc:	f005 f9b6 	bl	1892c <__aeabi_fcmple>
   135c0:	4603      	mov	r3, r0
   135c2:	2b00      	cmp	r3, #0
   135c4:	d005      	beq.n	135d2 <auto_nav+0xf4a>
   135c6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ce:	681a      	ldr	r2, [r3, #0]
   135d0:	e003      	b.n	135da <auto_nav+0xf52>
   135d2:	f04f 0200 	mov.w	r2, #0
   135d6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135da:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135e2:	601a      	str	r2, [r3, #0]
   135e4:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ec:	681b      	ldr	r3, [r3, #0]
   135ee:	4618      	mov	r0, r3
   135f0:	f04f 0100 	mov.w	r1, #0
   135f4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135f8:	f005 f9a2 	bl	18940 <__aeabi_fcmpge>
   135fc:	4603      	mov	r3, r0
   135fe:	2b00      	cmp	r3, #0
   13600:	d005      	beq.n	1360e <auto_nav+0xf86>
   13602:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1360a:	681a      	ldr	r2, [r3, #0]
   1360c:	e003      	b.n	13616 <auto_nav+0xf8e>
   1360e:	f04f 0200 	mov.w	r2, #0
   13612:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13616:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1361a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1361e:	601a      	str	r2, [r3, #0]
   13620:	f24c 6350 	movw	r3, #50768	; 0xc650
   13624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13628:	889b      	ldrh	r3, [r3, #4]
   1362a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1362c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13630:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13634:	dc04      	bgt.n	13640 <auto_nav+0xfb8>
   13636:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1363a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1363e:	da7e      	bge.n	1373e <auto_nav+0x10b6>
   13640:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13648:	681b      	ldr	r3, [r3, #0]
   1364a:	4618      	mov	r0, r3
   1364c:	f004 fb32 	bl	17cb4 <__aeabi_f2d>
   13650:	4604      	mov	r4, r0
   13652:	460d      	mov	r5, r1
   13654:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13658:	4618      	mov	r0, r3
   1365a:	f004 ff6b 	bl	18534 <__aeabi_i2f>
   1365e:	4603      	mov	r3, r0
   13660:	4618      	mov	r0, r3
   13662:	f04f 0100 	mov.w	r1, #0
   13666:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1366a:	f005 f86b 	bl	18744 <__aeabi_fdiv>
   1366e:	4603      	mov	r3, r0
   13670:	4618      	mov	r0, r3
   13672:	f004 fb1f 	bl	17cb4 <__aeabi_f2d>
   13676:	4602      	mov	r2, r0
   13678:	460b      	mov	r3, r1
   1367a:	4610      	mov	r0, r2
   1367c:	4619      	mov	r1, r3
   1367e:	f04f 0200 	mov.w	r2, #0
   13682:	f04f 0300 	mov.w	r3, #0
   13686:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1368a:	f004 fb67 	bl	17d5c <__aeabi_dmul>
   1368e:	4602      	mov	r2, r0
   13690:	460b      	mov	r3, r1
   13692:	4610      	mov	r0, r2
   13694:	4619      	mov	r1, r3
   13696:	f04f 0200 	mov.w	r2, #0
   1369a:	f04f 0300 	mov.w	r3, #0
   1369e:	f004 f9ab 	bl	179f8 <__adddf3>
   136a2:	4602      	mov	r2, r0
   136a4:	460b      	mov	r3, r1
   136a6:	4620      	mov	r0, r4
   136a8:	4629      	mov	r1, r5
   136aa:	f004 f9a5 	bl	179f8 <__adddf3>
   136ae:	4602      	mov	r2, r0
   136b0:	460b      	mov	r3, r1
   136b2:	4610      	mov	r0, r2
   136b4:	4619      	mov	r1, r3
   136b6:	f004 fe33 	bl	18320 <__aeabi_d2f>
   136ba:	4602      	mov	r2, r0
   136bc:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136c4:	601a      	str	r2, [r3, #0]
   136c6:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ce:	681b      	ldr	r3, [r3, #0]
   136d0:	4618      	mov	r0, r3
   136d2:	f04f 0100 	mov.w	r1, #0
   136d6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   136da:	f005 f927 	bl	1892c <__aeabi_fcmple>
   136de:	4603      	mov	r3, r0
   136e0:	2b00      	cmp	r3, #0
   136e2:	d005      	beq.n	136f0 <auto_nav+0x1068>
   136e4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ec:	681a      	ldr	r2, [r3, #0]
   136ee:	e003      	b.n	136f8 <auto_nav+0x1070>
   136f0:	f04f 0200 	mov.w	r2, #0
   136f4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   136f8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13700:	601a      	str	r2, [r3, #0]
   13702:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1370a:	681b      	ldr	r3, [r3, #0]
   1370c:	4618      	mov	r0, r3
   1370e:	f04f 0100 	mov.w	r1, #0
   13712:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13716:	f005 f913 	bl	18940 <__aeabi_fcmpge>
   1371a:	4603      	mov	r3, r0
   1371c:	2b00      	cmp	r3, #0
   1371e:	d005      	beq.n	1372c <auto_nav+0x10a4>
   13720:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13728:	681a      	ldr	r2, [r3, #0]
   1372a:	e003      	b.n	13734 <auto_nav+0x10ac>
   1372c:	f04f 0200 	mov.w	r2, #0
   13730:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13734:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1373c:	601a      	str	r2, [r3, #0]
   1373e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13746:	2203      	movs	r2, #3
   13748:	701a      	strb	r2, [r3, #0]
   1374a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1374e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13752:	885b      	ldrh	r3, [r3, #2]
   13754:	847b      	strh	r3, [r7, #34]	; 0x22
   13756:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1375a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1375e:	dc04      	bgt.n	1376a <auto_nav+0x10e2>
   13760:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13764:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13768:	da70      	bge.n	1384c <auto_nav+0x11c4>
   1376a:	f240 5374 	movw	r3, #1396	; 0x574
   1376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13772:	681b      	ldr	r3, [r3, #0]
   13774:	4618      	mov	r0, r3
   13776:	f004 fa9d 	bl	17cb4 <__aeabi_f2d>
   1377a:	4604      	mov	r4, r0
   1377c:	460d      	mov	r5, r1
   1377e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13782:	4618      	mov	r0, r3
   13784:	f004 fed6 	bl	18534 <__aeabi_i2f>
   13788:	4603      	mov	r3, r0
   1378a:	4618      	mov	r0, r3
   1378c:	f04f 0100 	mov.w	r1, #0
   13790:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13794:	f004 ffd6 	bl	18744 <__aeabi_fdiv>
   13798:	4603      	mov	r3, r0
   1379a:	4618      	mov	r0, r3
   1379c:	f004 fa8a 	bl	17cb4 <__aeabi_f2d>
   137a0:	4602      	mov	r2, r0
   137a2:	460b      	mov	r3, r1
   137a4:	f04f 0000 	mov.w	r0, #0
   137a8:	f04f 0100 	mov.w	r1, #0
   137ac:	f004 f922 	bl	179f4 <__aeabi_dsub>
   137b0:	4602      	mov	r2, r0
   137b2:	460b      	mov	r3, r1
   137b4:	4620      	mov	r0, r4
   137b6:	4629      	mov	r1, r5
   137b8:	f004 f91e 	bl	179f8 <__adddf3>
   137bc:	4602      	mov	r2, r0
   137be:	460b      	mov	r3, r1
   137c0:	4610      	mov	r0, r2
   137c2:	4619      	mov	r1, r3
   137c4:	f004 fdac 	bl	18320 <__aeabi_d2f>
   137c8:	4602      	mov	r2, r0
   137ca:	f240 5374 	movw	r3, #1396	; 0x574
   137ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d2:	601a      	str	r2, [r3, #0]
   137d4:	f240 5374 	movw	r3, #1396	; 0x574
   137d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137dc:	681b      	ldr	r3, [r3, #0]
   137de:	4618      	mov	r0, r3
   137e0:	f04f 0100 	mov.w	r1, #0
   137e4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   137e8:	f005 f8aa 	bl	18940 <__aeabi_fcmpge>
   137ec:	4603      	mov	r3, r0
   137ee:	2b00      	cmp	r3, #0
   137f0:	d005      	beq.n	137fe <auto_nav+0x1176>
   137f2:	f240 5374 	movw	r3, #1396	; 0x574
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	681a      	ldr	r2, [r3, #0]
   137fc:	e003      	b.n	13806 <auto_nav+0x117e>
   137fe:	f04f 0200 	mov.w	r2, #0
   13802:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13806:	f240 5374 	movw	r3, #1396	; 0x574
   1380a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1380e:	601a      	str	r2, [r3, #0]
   13810:	f240 5374 	movw	r3, #1396	; 0x574
   13814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13818:	681b      	ldr	r3, [r3, #0]
   1381a:	4618      	mov	r0, r3
   1381c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13820:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13824:	f005 f882 	bl	1892c <__aeabi_fcmple>
   13828:	4603      	mov	r3, r0
   1382a:	2b00      	cmp	r3, #0
   1382c:	d005      	beq.n	1383a <auto_nav+0x11b2>
   1382e:	f240 5374 	movw	r3, #1396	; 0x574
   13832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13836:	681a      	ldr	r2, [r3, #0]
   13838:	e003      	b.n	13842 <auto_nav+0x11ba>
   1383a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1383e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13842:	f240 5374 	movw	r3, #1396	; 0x574
   13846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384a:	601a      	str	r2, [r3, #0]
   1384c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13854:	681a      	ldr	r2, [r3, #0]
   13856:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1385a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1385e:	681b      	ldr	r3, [r3, #0]
   13860:	4610      	mov	r0, r2
   13862:	4619      	mov	r1, r3
   13864:	f004 fdb0 	bl	183c8 <__aeabi_fsub>
   13868:	4603      	mov	r3, r0
   1386a:	4618      	mov	r0, r3
   1386c:	f004 fa22 	bl	17cb4 <__aeabi_f2d>
   13870:	4604      	mov	r4, r0
   13872:	460d      	mov	r5, r1
   13874:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1387c:	681a      	ldr	r2, [r3, #0]
   1387e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13886:	681b      	ldr	r3, [r3, #0]
   13888:	4610      	mov	r0, r2
   1388a:	4619      	mov	r1, r3
   1388c:	f004 fd9c 	bl	183c8 <__aeabi_fsub>
   13890:	4603      	mov	r3, r0
   13892:	4618      	mov	r0, r3
   13894:	f004 fa0e 	bl	17cb4 <__aeabi_f2d>
   13898:	4602      	mov	r2, r0
   1389a:	460b      	mov	r3, r1
   1389c:	4620      	mov	r0, r4
   1389e:	4629      	mov	r1, r5
   138a0:	f002 fa12 	bl	15cc8 <pp_atan2>
   138a4:	4602      	mov	r2, r0
   138a6:	460b      	mov	r3, r1
   138a8:	4610      	mov	r0, r2
   138aa:	4619      	mov	r1, r3
   138ac:	f004 fd38 	bl	18320 <__aeabi_d2f>
   138b0:	4603      	mov	r3, r0
   138b2:	61fb      	str	r3, [r7, #28]
   138b4:	69f8      	ldr	r0, [r7, #28]
   138b6:	f004 f9fd 	bl	17cb4 <__aeabi_f2d>
   138ba:	4604      	mov	r4, r0
   138bc:	460d      	mov	r5, r1
   138be:	f64c 3334 	movw	r3, #52020	; 0xcb34
   138c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c6:	681b      	ldr	r3, [r3, #0]
   138c8:	4618      	mov	r0, r3
   138ca:	f04f 0100 	mov.w	r1, #0
   138ce:	f2cc 2148 	movt	r1, #49736	; 0xc248
   138d2:	f004 fe83 	bl	185dc <__aeabi_fmul>
   138d6:	4603      	mov	r3, r0
   138d8:	4618      	mov	r0, r3
   138da:	f004 f9eb 	bl	17cb4 <__aeabi_f2d>
   138de:	4602      	mov	r2, r0
   138e0:	460b      	mov	r3, r1
   138e2:	f04f 0000 	mov.w	r0, #0
   138e6:	f04f 0100 	mov.w	r1, #0
   138ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
   138ee:	f004 fb5f 	bl	17fb0 <__aeabi_ddiv>
   138f2:	4602      	mov	r2, r0
   138f4:	460b      	mov	r3, r1
   138f6:	4620      	mov	r0, r4
   138f8:	4629      	mov	r1, r5
   138fa:	f004 f87d 	bl	179f8 <__adddf3>
   138fe:	4602      	mov	r2, r0
   13900:	460b      	mov	r3, r1
   13902:	4610      	mov	r0, r2
   13904:	4619      	mov	r1, r3
   13906:	f004 fd0b 	bl	18320 <__aeabi_d2f>
   1390a:	4603      	mov	r3, r0
   1390c:	61bb      	str	r3, [r7, #24]
   1390e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13916:	681b      	ldr	r3, [r3, #0]
   13918:	4618      	mov	r0, r3
   1391a:	f004 f9cb 	bl	17cb4 <__aeabi_f2d>
   1391e:	4604      	mov	r4, r0
   13920:	460d      	mov	r5, r1
   13922:	69b8      	ldr	r0, [r7, #24]
   13924:	f004 f9c6 	bl	17cb4 <__aeabi_f2d>
   13928:	4602      	mov	r2, r0
   1392a:	460b      	mov	r3, r1
   1392c:	4610      	mov	r0, r2
   1392e:	4619      	mov	r1, r3
   13930:	a3b1      	add	r3, pc, #708	; (adr r3, 13bf8 <auto_nav+0x1570>)
   13932:	e9d3 2300 	ldrd	r2, r3, [r3]
   13936:	f004 f85f 	bl	179f8 <__adddf3>
   1393a:	4602      	mov	r2, r0
   1393c:	460b      	mov	r3, r1
   1393e:	4610      	mov	r0, r2
   13940:	4619      	mov	r1, r3
   13942:	f002 fa81 	bl	15e48 <pp_sin>
   13946:	4602      	mov	r2, r0
   13948:	460b      	mov	r3, r1
   1394a:	4610      	mov	r0, r2
   1394c:	4619      	mov	r1, r3
   1394e:	f04f 0200 	mov.w	r2, #0
   13952:	f04f 0300 	mov.w	r3, #0
   13956:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1395a:	f004 f9ff 	bl	17d5c <__aeabi_dmul>
   1395e:	4602      	mov	r2, r0
   13960:	460b      	mov	r3, r1
   13962:	4620      	mov	r0, r4
   13964:	4629      	mov	r1, r5
   13966:	f004 f847 	bl	179f8 <__adddf3>
   1396a:	4602      	mov	r2, r0
   1396c:	460b      	mov	r3, r1
   1396e:	4610      	mov	r0, r2
   13970:	4619      	mov	r1, r3
   13972:	f004 fcd5 	bl	18320 <__aeabi_d2f>
   13976:	4606      	mov	r6, r0
   13978:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1397c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13980:	681b      	ldr	r3, [r3, #0]
   13982:	4618      	mov	r0, r3
   13984:	f004 f996 	bl	17cb4 <__aeabi_f2d>
   13988:	4604      	mov	r4, r0
   1398a:	460d      	mov	r5, r1
   1398c:	69b8      	ldr	r0, [r7, #24]
   1398e:	f004 f991 	bl	17cb4 <__aeabi_f2d>
   13992:	4602      	mov	r2, r0
   13994:	460b      	mov	r3, r1
   13996:	4610      	mov	r0, r2
   13998:	4619      	mov	r1, r3
   1399a:	f002 fa55 	bl	15e48 <pp_sin>
   1399e:	4602      	mov	r2, r0
   139a0:	460b      	mov	r3, r1
   139a2:	4610      	mov	r0, r2
   139a4:	4619      	mov	r1, r3
   139a6:	f04f 0200 	mov.w	r2, #0
   139aa:	f04f 0300 	mov.w	r3, #0
   139ae:	f2c4 0349 	movt	r3, #16457	; 0x4049
   139b2:	f004 f9d3 	bl	17d5c <__aeabi_dmul>
   139b6:	4602      	mov	r2, r0
   139b8:	460b      	mov	r3, r1
   139ba:	4620      	mov	r0, r4
   139bc:	4629      	mov	r1, r5
   139be:	f004 f81b 	bl	179f8 <__adddf3>
   139c2:	4602      	mov	r2, r0
   139c4:	460b      	mov	r3, r1
   139c6:	4610      	mov	r0, r2
   139c8:	4619      	mov	r1, r3
   139ca:	f004 fca9 	bl	18320 <__aeabi_d2f>
   139ce:	4603      	mov	r3, r0
   139d0:	4630      	mov	r0, r6
   139d2:	4619      	mov	r1, r3
   139d4:	f001 f81c 	bl	14a10 <fly_to_xy>
   139d8:	69b8      	ldr	r0, [r7, #24]
   139da:	f004 f96b 	bl	17cb4 <__aeabi_f2d>
   139de:	4602      	mov	r2, r0
   139e0:	460b      	mov	r3, r1
   139e2:	a185      	add	r1, pc, #532	; (adr r1, 13bf8 <auto_nav+0x1570>)
   139e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   139e8:	f004 f804 	bl	179f4 <__aeabi_dsub>
   139ec:	4602      	mov	r2, r0
   139ee:	460b      	mov	r3, r1
   139f0:	4610      	mov	r0, r2
   139f2:	4619      	mov	r1, r3
   139f4:	a382      	add	r3, pc, #520	; (adr r3, 13c00 <auto_nav+0x1578>)
   139f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   139fa:	f004 fad9 	bl	17fb0 <__aeabi_ddiv>
   139fe:	4602      	mov	r2, r0
   13a00:	460b      	mov	r3, r1
   13a02:	4610      	mov	r0, r2
   13a04:	4619      	mov	r1, r3
   13a06:	f04f 0200 	mov.w	r2, #0
   13a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13a0e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13a12:	f004 f9a3 	bl	17d5c <__aeabi_dmul>
   13a16:	4602      	mov	r2, r0
   13a18:	460b      	mov	r3, r1
   13a1a:	4610      	mov	r0, r2
   13a1c:	4619      	mov	r1, r3
   13a1e:	f004 fc7f 	bl	18320 <__aeabi_d2f>
   13a22:	4602      	mov	r2, r0
   13a24:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2c:	601a      	str	r2, [r3, #0]
   13a2e:	e012      	b.n	13a56 <auto_nav+0x13ce>
   13a30:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a38:	681b      	ldr	r3, [r3, #0]
   13a3a:	4618      	mov	r0, r3
   13a3c:	f04f 0100 	mov.w	r1, #0
   13a40:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a44:	f004 fcc2 	bl	183cc <__addsf3>
   13a48:	4603      	mov	r3, r0
   13a4a:	461a      	mov	r2, r3
   13a4c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a54:	601a      	str	r2, [r3, #0]
   13a56:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5e:	681b      	ldr	r3, [r3, #0]
   13a60:	4618      	mov	r0, r3
   13a62:	f04f 0100 	mov.w	r1, #0
   13a66:	f004 ff57 	bl	18918 <__aeabi_fcmplt>
   13a6a:	4603      	mov	r3, r0
   13a6c:	2b00      	cmp	r3, #0
   13a6e:	d1df      	bne.n	13a30 <auto_nav+0x13a8>
   13a70:	e012      	b.n	13a98 <auto_nav+0x1410>
   13a72:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7a:	681b      	ldr	r3, [r3, #0]
   13a7c:	4618      	mov	r0, r3
   13a7e:	f04f 0100 	mov.w	r1, #0
   13a82:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a86:	f004 fc9f 	bl	183c8 <__aeabi_fsub>
   13a8a:	4603      	mov	r3, r0
   13a8c:	461a      	mov	r2, r3
   13a8e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a96:	601a      	str	r2, [r3, #0]
   13a98:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa0:	681b      	ldr	r3, [r3, #0]
   13aa2:	4618      	mov	r0, r3
   13aa4:	f04f 0100 	mov.w	r1, #0
   13aa8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13aac:	f004 ff48 	bl	18940 <__aeabi_fcmpge>
   13ab0:	4603      	mov	r3, r0
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d1dd      	bne.n	13a72 <auto_nav+0x13ea>
        return;
   13ab6:	f000 beb9 	b.w	1482c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13aba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac2:	781b      	ldrb	r3, [r3, #0]
   13ac4:	2b01      	cmp	r3, #1
   13ac6:	f040 86b1 	bne.w	1482c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13aca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad2:	2201      	movs	r2, #1
   13ad4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ad6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ade:	781b      	ldrb	r3, [r3, #0]
   13ae0:	3301      	adds	r3, #1
   13ae2:	b2da      	uxtb	r2, r3
   13ae4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aec:	701a      	strb	r2, [r3, #0]
   13aee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af6:	2200      	movs	r2, #0
   13af8:	701a      	strb	r2, [r3, #0]
   13afa:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b02:	2200      	movs	r2, #0
   13b04:	801a      	strh	r2, [r3, #0]
   13b06:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b0e:	681a      	ldr	r2, [r3, #0]
   13b10:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b18:	601a      	str	r2, [r3, #0]
   13b1a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b22:	681a      	ldr	r2, [r3, #0]
   13b24:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b2c:	601a      	str	r2, [r3, #0]
   13b2e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b36:	2200      	movs	r2, #0
   13b38:	801a      	strh	r2, [r3, #0]
   13b3a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b42:	f04f 0200 	mov.w	r2, #0
   13b46:	601a      	str	r2, [r3, #0]
   13b48:	f000 be70 	b.w	1482c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13b4c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b54:	781b      	ldrb	r3, [r3, #0]
   13b56:	2b04      	cmp	r3, #4
   13b58:	f040 8202 	bne.w	13f60 <auto_nav+0x18d8>
{
    nav_block = 4;
   13b5c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b64:	2204      	movs	r2, #4
   13b66:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13b68:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b70:	781b      	ldrb	r3, [r3, #0]
   13b72:	2b00      	cmp	r3, #0
   13b74:	d007      	beq.n	13b86 <auto_nav+0x14fe>
   13b76:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7e:	2200      	movs	r2, #0
   13b80:	701a      	strb	r2, [r3, #0]
   13b82:	2301      	movs	r3, #1
   13b84:	e000      	b.n	13b88 <auto_nav+0x1500>
   13b86:	2300      	movs	r3, #0
   13b88:	2b00      	cmp	r3, #0
   13b8a:	d03d      	beq.n	13c08 <auto_nav+0x1580>
   13b8c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b94:	2205      	movs	r2, #5
   13b96:	701a      	strb	r2, [r3, #0]
   13b98:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ba0:	2200      	movs	r2, #0
   13ba2:	701a      	strb	r2, [r3, #0]
   13ba4:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bac:	2200      	movs	r2, #0
   13bae:	801a      	strh	r2, [r3, #0]
   13bb0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bb8:	681a      	ldr	r2, [r3, #0]
   13bba:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc2:	601a      	str	r2, [r3, #0]
   13bc4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bcc:	681a      	ldr	r2, [r3, #0]
   13bce:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd6:	601a      	str	r2, [r3, #0]
   13bd8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13be0:	2200      	movs	r2, #0
   13be2:	801a      	strh	r2, [r3, #0]
   13be4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bec:	f04f 0200 	mov.w	r2, #0
   13bf0:	601a      	str	r2, [r3, #0]
   13bf2:	f000 be1b 	b.w	1482c <auto_nav+0x21a4>
   13bf6:	bf00      	nop
   13bf8:	54442d18 	.word	0x54442d18
   13bfc:	3ff921fb 	.word	0x3ff921fb
   13c00:	54442d18 	.word	0x54442d18
   13c04:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13c08:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	2b00      	cmp	r3, #0
   13c14:	f040 815b 	bne.w	13ece <auto_nav+0x1846>
    {
        nav_stage = 0;
   13c18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c20:	2200      	movs	r2, #0
   13c22:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13c24:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c2c:	2200      	movs	r2, #0
   13c2e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13c30:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c38:	f04f 0200 	mov.w	r2, #0
   13c3c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13c3e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c46:	2203      	movs	r2, #3
   13c48:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13c4a:	f240 5378 	movw	r3, #1400	; 0x578
   13c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c52:	689a      	ldr	r2, [r3, #8]
   13c54:	f240 5374 	movw	r3, #1396	; 0x574
   13c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c5c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13c5e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c66:	f04f 0200 	mov.w	r2, #0
   13c6a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13c6c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c74:	681a      	ldr	r2, [r3, #0]
   13c76:	f240 5378 	movw	r3, #1400	; 0x578
   13c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c7e:	685b      	ldr	r3, [r3, #4]
   13c80:	4610      	mov	r0, r2
   13c82:	4619      	mov	r1, r3
   13c84:	f004 fba0 	bl	183c8 <__aeabi_fsub>
   13c88:	4603      	mov	r3, r0
   13c8a:	4618      	mov	r0, r3
   13c8c:	f004 f812 	bl	17cb4 <__aeabi_f2d>
   13c90:	4604      	mov	r4, r0
   13c92:	460d      	mov	r5, r1
   13c94:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c9c:	681a      	ldr	r2, [r3, #0]
   13c9e:	f240 5378 	movw	r3, #1400	; 0x578
   13ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca6:	681b      	ldr	r3, [r3, #0]
   13ca8:	4610      	mov	r0, r2
   13caa:	4619      	mov	r1, r3
   13cac:	f004 fb8c 	bl	183c8 <__aeabi_fsub>
   13cb0:	4603      	mov	r3, r0
   13cb2:	4618      	mov	r0, r3
   13cb4:	f003 fffe 	bl	17cb4 <__aeabi_f2d>
   13cb8:	4602      	mov	r2, r0
   13cba:	460b      	mov	r3, r1
   13cbc:	4620      	mov	r0, r4
   13cbe:	4629      	mov	r1, r5
   13cc0:	f002 f802 	bl	15cc8 <pp_atan2>
   13cc4:	4602      	mov	r2, r0
   13cc6:	460b      	mov	r3, r1
   13cc8:	4610      	mov	r0, r2
   13cca:	4619      	mov	r1, r3
   13ccc:	f004 fb28 	bl	18320 <__aeabi_d2f>
   13cd0:	4603      	mov	r3, r0
   13cd2:	617b      	str	r3, [r7, #20]
   13cd4:	6978      	ldr	r0, [r7, #20]
   13cd6:	f003 ffed 	bl	17cb4 <__aeabi_f2d>
   13cda:	4604      	mov	r4, r0
   13cdc:	460d      	mov	r5, r1
   13cde:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	4618      	mov	r0, r3
   13cea:	f04f 0100 	mov.w	r1, #0
   13cee:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13cf2:	f004 fc73 	bl	185dc <__aeabi_fmul>
   13cf6:	4603      	mov	r3, r0
   13cf8:	4618      	mov	r0, r3
   13cfa:	f003 ffdb 	bl	17cb4 <__aeabi_f2d>
   13cfe:	4602      	mov	r2, r0
   13d00:	460b      	mov	r3, r1
   13d02:	f04f 0000 	mov.w	r0, #0
   13d06:	f04f 0100 	mov.w	r1, #0
   13d0a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13d0e:	f004 f94f 	bl	17fb0 <__aeabi_ddiv>
   13d12:	4602      	mov	r2, r0
   13d14:	460b      	mov	r3, r1
   13d16:	4620      	mov	r0, r4
   13d18:	4629      	mov	r1, r5
   13d1a:	f003 fe6d 	bl	179f8 <__adddf3>
   13d1e:	4602      	mov	r2, r0
   13d20:	460b      	mov	r3, r1
   13d22:	4610      	mov	r0, r2
   13d24:	4619      	mov	r1, r3
   13d26:	f004 fafb 	bl	18320 <__aeabi_d2f>
   13d2a:	4603      	mov	r3, r0
   13d2c:	613b      	str	r3, [r7, #16]
   13d2e:	f240 5378 	movw	r3, #1400	; 0x578
   13d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d36:	681b      	ldr	r3, [r3, #0]
   13d38:	4618      	mov	r0, r3
   13d3a:	f003 ffbb 	bl	17cb4 <__aeabi_f2d>
   13d3e:	4604      	mov	r4, r0
   13d40:	460d      	mov	r5, r1
   13d42:	6938      	ldr	r0, [r7, #16]
   13d44:	f003 ffb6 	bl	17cb4 <__aeabi_f2d>
   13d48:	4602      	mov	r2, r0
   13d4a:	460b      	mov	r3, r1
   13d4c:	4610      	mov	r0, r2
   13d4e:	4619      	mov	r1, r3
   13d50:	a3af      	add	r3, pc, #700	; (adr r3, 14010 <auto_nav+0x1988>)
   13d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d56:	f003 fe4f 	bl	179f8 <__adddf3>
   13d5a:	4602      	mov	r2, r0
   13d5c:	460b      	mov	r3, r1
   13d5e:	4610      	mov	r0, r2
   13d60:	4619      	mov	r1, r3
   13d62:	f002 f871 	bl	15e48 <pp_sin>
   13d66:	4602      	mov	r2, r0
   13d68:	460b      	mov	r3, r1
   13d6a:	4610      	mov	r0, r2
   13d6c:	4619      	mov	r1, r3
   13d6e:	a3aa      	add	r3, pc, #680	; (adr r3, 14018 <auto_nav+0x1990>)
   13d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d74:	f003 fff2 	bl	17d5c <__aeabi_dmul>
   13d78:	4602      	mov	r2, r0
   13d7a:	460b      	mov	r3, r1
   13d7c:	4620      	mov	r0, r4
   13d7e:	4629      	mov	r1, r5
   13d80:	f003 fe3a 	bl	179f8 <__adddf3>
   13d84:	4602      	mov	r2, r0
   13d86:	460b      	mov	r3, r1
   13d88:	4610      	mov	r0, r2
   13d8a:	4619      	mov	r1, r3
   13d8c:	f004 fac8 	bl	18320 <__aeabi_d2f>
   13d90:	4606      	mov	r6, r0
   13d92:	f240 5378 	movw	r3, #1400	; 0x578
   13d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d9a:	685b      	ldr	r3, [r3, #4]
   13d9c:	4618      	mov	r0, r3
   13d9e:	f003 ff89 	bl	17cb4 <__aeabi_f2d>
   13da2:	4604      	mov	r4, r0
   13da4:	460d      	mov	r5, r1
   13da6:	6938      	ldr	r0, [r7, #16]
   13da8:	f003 ff84 	bl	17cb4 <__aeabi_f2d>
   13dac:	4602      	mov	r2, r0
   13dae:	460b      	mov	r3, r1
   13db0:	4610      	mov	r0, r2
   13db2:	4619      	mov	r1, r3
   13db4:	f002 f848 	bl	15e48 <pp_sin>
   13db8:	4602      	mov	r2, r0
   13dba:	460b      	mov	r3, r1
   13dbc:	4610      	mov	r0, r2
   13dbe:	4619      	mov	r1, r3
   13dc0:	a395      	add	r3, pc, #596	; (adr r3, 14018 <auto_nav+0x1990>)
   13dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dc6:	f003 ffc9 	bl	17d5c <__aeabi_dmul>
   13dca:	4602      	mov	r2, r0
   13dcc:	460b      	mov	r3, r1
   13dce:	4620      	mov	r0, r4
   13dd0:	4629      	mov	r1, r5
   13dd2:	f003 fe11 	bl	179f8 <__adddf3>
   13dd6:	4602      	mov	r2, r0
   13dd8:	460b      	mov	r3, r1
   13dda:	4610      	mov	r0, r2
   13ddc:	4619      	mov	r1, r3
   13dde:	f004 fa9f 	bl	18320 <__aeabi_d2f>
   13de2:	4603      	mov	r3, r0
   13de4:	4630      	mov	r0, r6
   13de6:	4619      	mov	r1, r3
   13de8:	f000 fe12 	bl	14a10 <fly_to_xy>
   13dec:	6938      	ldr	r0, [r7, #16]
   13dee:	f003 ff61 	bl	17cb4 <__aeabi_f2d>
   13df2:	4602      	mov	r2, r0
   13df4:	460b      	mov	r3, r1
   13df6:	a186      	add	r1, pc, #536	; (adr r1, 14010 <auto_nav+0x1988>)
   13df8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13dfc:	f003 fdfa 	bl	179f4 <__aeabi_dsub>
   13e00:	4602      	mov	r2, r0
   13e02:	460b      	mov	r3, r1
   13e04:	4610      	mov	r0, r2
   13e06:	4619      	mov	r1, r3
   13e08:	a385      	add	r3, pc, #532	; (adr r3, 14020 <auto_nav+0x1998>)
   13e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e0e:	f004 f8cf 	bl	17fb0 <__aeabi_ddiv>
   13e12:	4602      	mov	r2, r0
   13e14:	460b      	mov	r3, r1
   13e16:	4610      	mov	r0, r2
   13e18:	4619      	mov	r1, r3
   13e1a:	f04f 0200 	mov.w	r2, #0
   13e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13e22:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13e26:	f003 ff99 	bl	17d5c <__aeabi_dmul>
   13e2a:	4602      	mov	r2, r0
   13e2c:	460b      	mov	r3, r1
   13e2e:	4610      	mov	r0, r2
   13e30:	4619      	mov	r1, r3
   13e32:	f004 fa75 	bl	18320 <__aeabi_d2f>
   13e36:	4602      	mov	r2, r0
   13e38:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e40:	601a      	str	r2, [r3, #0]
   13e42:	e012      	b.n	13e6a <auto_nav+0x17e2>
   13e44:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4c:	681b      	ldr	r3, [r3, #0]
   13e4e:	4618      	mov	r0, r3
   13e50:	f04f 0100 	mov.w	r1, #0
   13e54:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e58:	f004 fab8 	bl	183cc <__addsf3>
   13e5c:	4603      	mov	r3, r0
   13e5e:	461a      	mov	r2, r3
   13e60:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e68:	601a      	str	r2, [r3, #0]
   13e6a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e72:	681b      	ldr	r3, [r3, #0]
   13e74:	4618      	mov	r0, r3
   13e76:	f04f 0100 	mov.w	r1, #0
   13e7a:	f004 fd4d 	bl	18918 <__aeabi_fcmplt>
   13e7e:	4603      	mov	r3, r0
   13e80:	2b00      	cmp	r3, #0
   13e82:	d1df      	bne.n	13e44 <auto_nav+0x17bc>
   13e84:	e012      	b.n	13eac <auto_nav+0x1824>
   13e86:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e8e:	681b      	ldr	r3, [r3, #0]
   13e90:	4618      	mov	r0, r3
   13e92:	f04f 0100 	mov.w	r1, #0
   13e96:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e9a:	f004 fa95 	bl	183c8 <__aeabi_fsub>
   13e9e:	4603      	mov	r3, r0
   13ea0:	461a      	mov	r2, r3
   13ea2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eaa:	601a      	str	r2, [r3, #0]
   13eac:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb4:	681b      	ldr	r3, [r3, #0]
   13eb6:	4618      	mov	r0, r3
   13eb8:	f04f 0100 	mov.w	r1, #0
   13ebc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ec0:	f004 fd3e 	bl	18940 <__aeabi_fcmpge>
   13ec4:	4603      	mov	r3, r0
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d1dd      	bne.n	13e86 <auto_nav+0x17fe>
        return;
   13eca:	f000 bcaf 	b.w	1482c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13ece:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed6:	781b      	ldrb	r3, [r3, #0]
   13ed8:	2b01      	cmp	r3, #1
   13eda:	f040 84a7 	bne.w	1482c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13ede:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee6:	2201      	movs	r2, #1
   13ee8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13eea:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef2:	781b      	ldrb	r3, [r3, #0]
   13ef4:	3301      	adds	r3, #1
   13ef6:	b2da      	uxtb	r2, r3
   13ef8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f00:	701a      	strb	r2, [r3, #0]
   13f02:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f0a:	2200      	movs	r2, #0
   13f0c:	701a      	strb	r2, [r3, #0]
   13f0e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f16:	2200      	movs	r2, #0
   13f18:	801a      	strh	r2, [r3, #0]
   13f1a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f22:	681a      	ldr	r2, [r3, #0]
   13f24:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f2c:	601a      	str	r2, [r3, #0]
   13f2e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f36:	681a      	ldr	r2, [r3, #0]
   13f38:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f40:	601a      	str	r2, [r3, #0]
   13f42:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f4a:	2200      	movs	r2, #0
   13f4c:	801a      	strh	r2, [r3, #0]
   13f4e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f56:	f04f 0200 	mov.w	r2, #0
   13f5a:	601a      	str	r2, [r3, #0]
   13f5c:	f000 bc66 	b.w	1482c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13f60:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f68:	781b      	ldrb	r3, [r3, #0]
   13f6a:	2b05      	cmp	r3, #5
   13f6c:	f040 845e 	bne.w	1482c <auto_nav+0x21a4>
{
    nav_block = 5;
   13f70:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f78:	2205      	movs	r2, #5
   13f7a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13f7c:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f84:	781b      	ldrb	r3, [r3, #0]
   13f86:	2b00      	cmp	r3, #0
   13f88:	d007      	beq.n	13f9a <auto_nav+0x1912>
   13f8a:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f92:	2200      	movs	r2, #0
   13f94:	701a      	strb	r2, [r3, #0]
   13f96:	2301      	movs	r3, #1
   13f98:	e000      	b.n	13f9c <auto_nav+0x1914>
   13f9a:	2300      	movs	r3, #0
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d043      	beq.n	14028 <auto_nav+0x19a0>
   13fa0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa8:	2201      	movs	r2, #1
   13faa:	701a      	strb	r2, [r3, #0]
   13fac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb4:	2200      	movs	r2, #0
   13fb6:	701a      	strb	r2, [r3, #0]
   13fb8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc0:	2200      	movs	r2, #0
   13fc2:	801a      	strh	r2, [r3, #0]
   13fc4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fcc:	681a      	ldr	r2, [r3, #0]
   13fce:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd6:	601a      	str	r2, [r3, #0]
   13fd8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe0:	681a      	ldr	r2, [r3, #0]
   13fe2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fea:	601a      	str	r2, [r3, #0]
   13fec:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff4:	2200      	movs	r2, #0
   13ff6:	801a      	strh	r2, [r3, #0]
   13ff8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14000:	f04f 0200 	mov.w	r2, #0
   14004:	601a      	str	r2, [r3, #0]
   14006:	f000 bc11 	b.w	1482c <auto_nav+0x21a4>
   1400a:	bf00      	nop
   1400c:	f3af 8000 	nop.w
   14010:	54442d18 	.word	0x54442d18
   14014:	3ff921fb 	.word	0x3ff921fb
   14018:	00000000 	.word	0x00000000
   1401c:	4062c000 	.word	0x4062c000
   14020:	54442d18 	.word	0x54442d18
   14024:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   14028:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1402c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14030:	781b      	ldrb	r3, [r3, #0]
   14032:	2b00      	cmp	r3, #0
   14034:	d133      	bne.n	1409e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   14036:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1403a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403e:	2200      	movs	r2, #0
   14040:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   14042:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1404a:	781b      	ldrb	r3, [r3, #0]
   1404c:	3301      	adds	r3, #1
   1404e:	b2da      	uxtb	r2, r3
   14050:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14058:	701a      	strb	r2, [r3, #0]
   1405a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1405e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14062:	681a      	ldr	r2, [r3, #0]
   14064:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1406c:	601a      	str	r2, [r3, #0]
   1406e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14076:	681a      	ldr	r2, [r3, #0]
   14078:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1407c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14080:	601a      	str	r2, [r3, #0]
   14082:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1408a:	2200      	movs	r2, #0
   1408c:	801a      	strh	r2, [r3, #0]
   1408e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14096:	f04f 0200 	mov.w	r2, #0
   1409a:	601a      	str	r2, [r3, #0]
   1409c:	e3c6      	b.n	1482c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1409e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   140a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140a6:	781b      	ldrb	r3, [r3, #0]
   140a8:	2b01      	cmp	r3, #1
   140aa:	f040 81b5 	bne.w	14418 <auto_nav+0x1d90>
    {
        nav_stage =1;
   140ae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   140b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b6:	2201      	movs	r2, #1
   140b8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   140ba:	f24c 532f 	movw	r3, #50479	; 0xc52f
   140be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140c2:	2200      	movs	r2, #0
   140c4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   140c6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   140ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ce:	f04f 0200 	mov.w	r2, #0
   140d2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   140d4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   140d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140dc:	2203      	movs	r2, #3
   140de:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   140e0:	f240 5378 	movw	r3, #1400	; 0x578
   140e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e8:	695a      	ldr	r2, [r3, #20]
   140ea:	f240 5374 	movw	r3, #1396	; 0x574
   140ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   140f4:	f64c 0394 	movw	r3, #51348	; 0xc894
   140f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140fc:	f04f 0200 	mov.w	r2, #0
   14100:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   14102:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1410a:	681a      	ldr	r2, [r3, #0]
   1410c:	f240 5378 	movw	r3, #1400	; 0x578
   14110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14114:	691b      	ldr	r3, [r3, #16]
   14116:	4610      	mov	r0, r2
   14118:	4619      	mov	r1, r3
   1411a:	f004 f955 	bl	183c8 <__aeabi_fsub>
   1411e:	4603      	mov	r3, r0
   14120:	4618      	mov	r0, r3
   14122:	f003 fdc7 	bl	17cb4 <__aeabi_f2d>
   14126:	4604      	mov	r4, r0
   14128:	460d      	mov	r5, r1
   1412a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1412e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14132:	681a      	ldr	r2, [r3, #0]
   14134:	f240 5378 	movw	r3, #1400	; 0x578
   14138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1413c:	68db      	ldr	r3, [r3, #12]
   1413e:	4610      	mov	r0, r2
   14140:	4619      	mov	r1, r3
   14142:	f004 f941 	bl	183c8 <__aeabi_fsub>
   14146:	4603      	mov	r3, r0
   14148:	4618      	mov	r0, r3
   1414a:	f003 fdb3 	bl	17cb4 <__aeabi_f2d>
   1414e:	4602      	mov	r2, r0
   14150:	460b      	mov	r3, r1
   14152:	4620      	mov	r0, r4
   14154:	4629      	mov	r1, r5
   14156:	f001 fdb7 	bl	15cc8 <pp_atan2>
   1415a:	4602      	mov	r2, r0
   1415c:	460b      	mov	r3, r1
   1415e:	4610      	mov	r0, r2
   14160:	4619      	mov	r1, r3
   14162:	f004 f8dd 	bl	18320 <__aeabi_d2f>
   14166:	4603      	mov	r3, r0
   14168:	60fb      	str	r3, [r7, #12]
   1416a:	68f8      	ldr	r0, [r7, #12]
   1416c:	f003 fda2 	bl	17cb4 <__aeabi_f2d>
   14170:	4604      	mov	r4, r0
   14172:	460d      	mov	r5, r1
   14174:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1417c:	681b      	ldr	r3, [r3, #0]
   1417e:	4618      	mov	r0, r3
   14180:	f04f 0100 	mov.w	r1, #0
   14184:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14188:	f004 fa28 	bl	185dc <__aeabi_fmul>
   1418c:	4603      	mov	r3, r0
   1418e:	4618      	mov	r0, r3
   14190:	f003 fd90 	bl	17cb4 <__aeabi_f2d>
   14194:	4602      	mov	r2, r0
   14196:	460b      	mov	r3, r1
   14198:	f04f 0000 	mov.w	r0, #0
   1419c:	f04f 0100 	mov.w	r1, #0
   141a0:	f2c4 0114 	movt	r1, #16404	; 0x4014
   141a4:	f003 ff04 	bl	17fb0 <__aeabi_ddiv>
   141a8:	4602      	mov	r2, r0
   141aa:	460b      	mov	r3, r1
   141ac:	4620      	mov	r0, r4
   141ae:	4629      	mov	r1, r5
   141b0:	f003 fc22 	bl	179f8 <__adddf3>
   141b4:	4602      	mov	r2, r0
   141b6:	460b      	mov	r3, r1
   141b8:	4610      	mov	r0, r2
   141ba:	4619      	mov	r1, r3
   141bc:	f004 f8b0 	bl	18320 <__aeabi_d2f>
   141c0:	4603      	mov	r3, r0
   141c2:	60bb      	str	r3, [r7, #8]
   141c4:	f240 5378 	movw	r3, #1400	; 0x578
   141c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141cc:	68db      	ldr	r3, [r3, #12]
   141ce:	4618      	mov	r0, r3
   141d0:	f003 fd70 	bl	17cb4 <__aeabi_f2d>
   141d4:	4604      	mov	r4, r0
   141d6:	460d      	mov	r5, r1
   141d8:	68b8      	ldr	r0, [r7, #8]
   141da:	f003 fd6b 	bl	17cb4 <__aeabi_f2d>
   141de:	4602      	mov	r2, r0
   141e0:	460b      	mov	r3, r1
   141e2:	4610      	mov	r0, r2
   141e4:	4619      	mov	r1, r3
   141e6:	a388      	add	r3, pc, #544	; (adr r3, 14408 <auto_nav+0x1d80>)
   141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   141ec:	f003 fc04 	bl	179f8 <__adddf3>
   141f0:	4602      	mov	r2, r0
   141f2:	460b      	mov	r3, r1
   141f4:	4610      	mov	r0, r2
   141f6:	4619      	mov	r1, r3
   141f8:	f001 fe26 	bl	15e48 <pp_sin>
   141fc:	4602      	mov	r2, r0
   141fe:	460b      	mov	r3, r1
   14200:	4610      	mov	r0, r2
   14202:	4619      	mov	r1, r3
   14204:	f04f 0200 	mov.w	r2, #0
   14208:	f04f 0300 	mov.w	r3, #0
   1420c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14210:	f003 fda4 	bl	17d5c <__aeabi_dmul>
   14214:	4602      	mov	r2, r0
   14216:	460b      	mov	r3, r1
   14218:	4620      	mov	r0, r4
   1421a:	4629      	mov	r1, r5
   1421c:	f003 fbec 	bl	179f8 <__adddf3>
   14220:	4602      	mov	r2, r0
   14222:	460b      	mov	r3, r1
   14224:	4610      	mov	r0, r2
   14226:	4619      	mov	r1, r3
   14228:	f004 f87a 	bl	18320 <__aeabi_d2f>
   1422c:	4606      	mov	r6, r0
   1422e:	f240 5378 	movw	r3, #1400	; 0x578
   14232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14236:	691b      	ldr	r3, [r3, #16]
   14238:	4618      	mov	r0, r3
   1423a:	f003 fd3b 	bl	17cb4 <__aeabi_f2d>
   1423e:	4604      	mov	r4, r0
   14240:	460d      	mov	r5, r1
   14242:	68b8      	ldr	r0, [r7, #8]
   14244:	f003 fd36 	bl	17cb4 <__aeabi_f2d>
   14248:	4602      	mov	r2, r0
   1424a:	460b      	mov	r3, r1
   1424c:	4610      	mov	r0, r2
   1424e:	4619      	mov	r1, r3
   14250:	f001 fdfa 	bl	15e48 <pp_sin>
   14254:	4602      	mov	r2, r0
   14256:	460b      	mov	r3, r1
   14258:	4610      	mov	r0, r2
   1425a:	4619      	mov	r1, r3
   1425c:	f04f 0200 	mov.w	r2, #0
   14260:	f04f 0300 	mov.w	r3, #0
   14264:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14268:	f003 fd78 	bl	17d5c <__aeabi_dmul>
   1426c:	4602      	mov	r2, r0
   1426e:	460b      	mov	r3, r1
   14270:	4620      	mov	r0, r4
   14272:	4629      	mov	r1, r5
   14274:	f003 fbc0 	bl	179f8 <__adddf3>
   14278:	4602      	mov	r2, r0
   1427a:	460b      	mov	r3, r1
   1427c:	4610      	mov	r0, r2
   1427e:	4619      	mov	r1, r3
   14280:	f004 f84e 	bl	18320 <__aeabi_d2f>
   14284:	4603      	mov	r3, r0
   14286:	4630      	mov	r0, r6
   14288:	4619      	mov	r1, r3
   1428a:	f000 fbc1 	bl	14a10 <fly_to_xy>
   1428e:	68b8      	ldr	r0, [r7, #8]
   14290:	f003 fd10 	bl	17cb4 <__aeabi_f2d>
   14294:	4602      	mov	r2, r0
   14296:	460b      	mov	r3, r1
   14298:	a15b      	add	r1, pc, #364	; (adr r1, 14408 <auto_nav+0x1d80>)
   1429a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1429e:	f003 fba9 	bl	179f4 <__aeabi_dsub>
   142a2:	4602      	mov	r2, r0
   142a4:	460b      	mov	r3, r1
   142a6:	4610      	mov	r0, r2
   142a8:	4619      	mov	r1, r3
   142aa:	a359      	add	r3, pc, #356	; (adr r3, 14410 <auto_nav+0x1d88>)
   142ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   142b0:	f003 fe7e 	bl	17fb0 <__aeabi_ddiv>
   142b4:	4602      	mov	r2, r0
   142b6:	460b      	mov	r3, r1
   142b8:	4610      	mov	r0, r2
   142ba:	4619      	mov	r1, r3
   142bc:	f04f 0200 	mov.w	r2, #0
   142c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   142c4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   142c8:	f003 fd48 	bl	17d5c <__aeabi_dmul>
   142cc:	4602      	mov	r2, r0
   142ce:	460b      	mov	r3, r1
   142d0:	4610      	mov	r0, r2
   142d2:	4619      	mov	r1, r3
   142d4:	f004 f824 	bl	18320 <__aeabi_d2f>
   142d8:	4602      	mov	r2, r0
   142da:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e2:	601a      	str	r2, [r3, #0]
   142e4:	e012      	b.n	1430c <auto_nav+0x1c84>
   142e6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ee:	681b      	ldr	r3, [r3, #0]
   142f0:	4618      	mov	r0, r3
   142f2:	f04f 0100 	mov.w	r1, #0
   142f6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142fa:	f004 f867 	bl	183cc <__addsf3>
   142fe:	4603      	mov	r3, r0
   14300:	461a      	mov	r2, r3
   14302:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1430a:	601a      	str	r2, [r3, #0]
   1430c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14314:	681b      	ldr	r3, [r3, #0]
   14316:	4618      	mov	r0, r3
   14318:	f04f 0100 	mov.w	r1, #0
   1431c:	f004 fafc 	bl	18918 <__aeabi_fcmplt>
   14320:	4603      	mov	r3, r0
   14322:	2b00      	cmp	r3, #0
   14324:	d1df      	bne.n	142e6 <auto_nav+0x1c5e>
   14326:	e012      	b.n	1434e <auto_nav+0x1cc6>
   14328:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1432c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14330:	681b      	ldr	r3, [r3, #0]
   14332:	4618      	mov	r0, r3
   14334:	f04f 0100 	mov.w	r1, #0
   14338:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1433c:	f004 f844 	bl	183c8 <__aeabi_fsub>
   14340:	4603      	mov	r3, r0
   14342:	461a      	mov	r2, r3
   14344:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1434c:	601a      	str	r2, [r3, #0]
   1434e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14356:	681b      	ldr	r3, [r3, #0]
   14358:	4618      	mov	r0, r3
   1435a:	f04f 0100 	mov.w	r1, #0
   1435e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14362:	f004 faed 	bl	18940 <__aeabi_fcmpge>
   14366:	4603      	mov	r3, r0
   14368:	2b00      	cmp	r3, #0
   1436a:	d1dd      	bne.n	14328 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1436c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14374:	681b      	ldr	r3, [r3, #0]
   14376:	4618      	mov	r0, r3
   14378:	f04f 0100 	mov.w	r1, #0
   1437c:	f004 faea 	bl	18954 <__aeabi_fcmpgt>
   14380:	4603      	mov	r3, r0
   14382:	2b00      	cmp	r3, #0
   14384:	d100      	bne.n	14388 <auto_nav+0x1d00>
        return;
   14386:	e251      	b.n	1482c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14388:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1438c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14390:	681b      	ldr	r3, [r3, #0]
   14392:	4618      	mov	r0, r3
   14394:	f04f 0100 	mov.w	r1, #0
   14398:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1439c:	f004 fabc 	bl	18918 <__aeabi_fcmplt>
   143a0:	4603      	mov	r3, r0
   143a2:	2b00      	cmp	r3, #0
   143a4:	d100      	bne.n	143a8 <auto_nav+0x1d20>
        return;
   143a6:	e241      	b.n	1482c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   143a8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b0:	781b      	ldrb	r3, [r3, #0]
   143b2:	3301      	adds	r3, #1
   143b4:	b2da      	uxtb	r2, r3
   143b6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143be:	701a      	strb	r2, [r3, #0]
   143c0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   143c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143c8:	681a      	ldr	r2, [r3, #0]
   143ca:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   143ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d2:	601a      	str	r2, [r3, #0]
   143d4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   143d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143dc:	681a      	ldr	r2, [r3, #0]
   143de:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   143e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e6:	601a      	str	r2, [r3, #0]
   143e8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   143ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f0:	2200      	movs	r2, #0
   143f2:	801a      	strh	r2, [r3, #0]
   143f4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   143f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143fc:	f04f 0200 	mov.w	r2, #0
   14400:	601a      	str	r2, [r3, #0]
   14402:	e213      	b.n	1482c <auto_nav+0x21a4>
   14404:	f3af 8000 	nop.w
   14408:	54442d18 	.word	0x54442d18
   1440c:	3ff921fb 	.word	0x3ff921fb
   14410:	54442d18 	.word	0x54442d18
   14414:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14418:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1441c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14420:	781b      	ldrb	r3, [r3, #0]
   14422:	2b02      	cmp	r3, #2
   14424:	f040 81ad 	bne.w	14782 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14428:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1442c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14430:	2202      	movs	r2, #2
   14432:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14434:	f24c 532f 	movw	r3, #50479	; 0xc52f
   14438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1443c:	2200      	movs	r2, #0
   1443e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14440:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14448:	f04f 0200 	mov.w	r2, #0
   1444c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1444e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14456:	2203      	movs	r2, #3
   14458:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1445a:	f240 5378 	movw	r3, #1400	; 0x578
   1445e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14464:	f240 5374 	movw	r3, #1396	; 0x574
   14468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1446e:	f64c 0394 	movw	r3, #51348	; 0xc894
   14472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14476:	f04f 0200 	mov.w	r2, #0
   1447a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1447c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14484:	681a      	ldr	r2, [r3, #0]
   14486:	f240 5378 	movw	r3, #1400	; 0x578
   1448a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14490:	4610      	mov	r0, r2
   14492:	4619      	mov	r1, r3
   14494:	f003 ff98 	bl	183c8 <__aeabi_fsub>
   14498:	4603      	mov	r3, r0
   1449a:	4618      	mov	r0, r3
   1449c:	f003 fc0a 	bl	17cb4 <__aeabi_f2d>
   144a0:	4604      	mov	r4, r0
   144a2:	460d      	mov	r5, r1
   144a4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   144a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144ac:	681a      	ldr	r2, [r3, #0]
   144ae:	f240 5378 	movw	r3, #1400	; 0x578
   144b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   144b8:	4610      	mov	r0, r2
   144ba:	4619      	mov	r1, r3
   144bc:	f003 ff84 	bl	183c8 <__aeabi_fsub>
   144c0:	4603      	mov	r3, r0
   144c2:	4618      	mov	r0, r3
   144c4:	f003 fbf6 	bl	17cb4 <__aeabi_f2d>
   144c8:	4602      	mov	r2, r0
   144ca:	460b      	mov	r3, r1
   144cc:	4620      	mov	r0, r4
   144ce:	4629      	mov	r1, r5
   144d0:	f001 fbfa 	bl	15cc8 <pp_atan2>
   144d4:	4602      	mov	r2, r0
   144d6:	460b      	mov	r3, r1
   144d8:	4610      	mov	r0, r2
   144da:	4619      	mov	r1, r3
   144dc:	f003 ff20 	bl	18320 <__aeabi_d2f>
   144e0:	4603      	mov	r3, r0
   144e2:	607b      	str	r3, [r7, #4]
   144e4:	6878      	ldr	r0, [r7, #4]
   144e6:	f003 fbe5 	bl	17cb4 <__aeabi_f2d>
   144ea:	4604      	mov	r4, r0
   144ec:	460d      	mov	r5, r1
   144ee:	f64c 3334 	movw	r3, #52020	; 0xcb34
   144f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144f6:	681b      	ldr	r3, [r3, #0]
   144f8:	4618      	mov	r0, r3
   144fa:	f04f 0100 	mov.w	r1, #0
   144fe:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14502:	f004 f86b 	bl	185dc <__aeabi_fmul>
   14506:	4603      	mov	r3, r0
   14508:	4618      	mov	r0, r3
   1450a:	f003 fbd3 	bl	17cb4 <__aeabi_f2d>
   1450e:	4602      	mov	r2, r0
   14510:	460b      	mov	r3, r1
   14512:	f04f 0000 	mov.w	r0, #0
   14516:	f04f 0100 	mov.w	r1, #0
   1451a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1451e:	f003 fd47 	bl	17fb0 <__aeabi_ddiv>
   14522:	4602      	mov	r2, r0
   14524:	460b      	mov	r3, r1
   14526:	4620      	mov	r0, r4
   14528:	4629      	mov	r1, r5
   1452a:	f003 fa65 	bl	179f8 <__adddf3>
   1452e:	4602      	mov	r2, r0
   14530:	460b      	mov	r3, r1
   14532:	4610      	mov	r0, r2
   14534:	4619      	mov	r1, r3
   14536:	f003 fef3 	bl	18320 <__aeabi_d2f>
   1453a:	4603      	mov	r3, r0
   1453c:	603b      	str	r3, [r7, #0]
   1453e:	f240 5378 	movw	r3, #1400	; 0x578
   14542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14548:	4618      	mov	r0, r3
   1454a:	f003 fbb3 	bl	17cb4 <__aeabi_f2d>
   1454e:	4604      	mov	r4, r0
   14550:	460d      	mov	r5, r1
   14552:	6838      	ldr	r0, [r7, #0]
   14554:	f003 fbae 	bl	17cb4 <__aeabi_f2d>
   14558:	4602      	mov	r2, r0
   1455a:	460b      	mov	r3, r1
   1455c:	4610      	mov	r0, r2
   1455e:	4619      	mov	r1, r3
   14560:	a3b5      	add	r3, pc, #724	; (adr r3, 14838 <auto_nav+0x21b0>)
   14562:	e9d3 2300 	ldrd	r2, r3, [r3]
   14566:	f003 fa47 	bl	179f8 <__adddf3>
   1456a:	4602      	mov	r2, r0
   1456c:	460b      	mov	r3, r1
   1456e:	4610      	mov	r0, r2
   14570:	4619      	mov	r1, r3
   14572:	f001 fc69 	bl	15e48 <pp_sin>
   14576:	4602      	mov	r2, r0
   14578:	460b      	mov	r3, r1
   1457a:	4610      	mov	r0, r2
   1457c:	4619      	mov	r1, r3
   1457e:	f04f 0200 	mov.w	r2, #0
   14582:	f04f 0300 	mov.w	r3, #0
   14586:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1458a:	f003 fbe7 	bl	17d5c <__aeabi_dmul>
   1458e:	4602      	mov	r2, r0
   14590:	460b      	mov	r3, r1
   14592:	4620      	mov	r0, r4
   14594:	4629      	mov	r1, r5
   14596:	f003 fa2f 	bl	179f8 <__adddf3>
   1459a:	4602      	mov	r2, r0
   1459c:	460b      	mov	r3, r1
   1459e:	4610      	mov	r0, r2
   145a0:	4619      	mov	r1, r3
   145a2:	f003 febd 	bl	18320 <__aeabi_d2f>
   145a6:	4606      	mov	r6, r0
   145a8:	f240 5378 	movw	r3, #1400	; 0x578
   145ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   145b2:	4618      	mov	r0, r3
   145b4:	f003 fb7e 	bl	17cb4 <__aeabi_f2d>
   145b8:	4604      	mov	r4, r0
   145ba:	460d      	mov	r5, r1
   145bc:	6838      	ldr	r0, [r7, #0]
   145be:	f003 fb79 	bl	17cb4 <__aeabi_f2d>
   145c2:	4602      	mov	r2, r0
   145c4:	460b      	mov	r3, r1
   145c6:	4610      	mov	r0, r2
   145c8:	4619      	mov	r1, r3
   145ca:	f001 fc3d 	bl	15e48 <pp_sin>
   145ce:	4602      	mov	r2, r0
   145d0:	460b      	mov	r3, r1
   145d2:	4610      	mov	r0, r2
   145d4:	4619      	mov	r1, r3
   145d6:	f04f 0200 	mov.w	r2, #0
   145da:	f04f 0300 	mov.w	r3, #0
   145de:	f2c4 0359 	movt	r3, #16473	; 0x4059
   145e2:	f003 fbbb 	bl	17d5c <__aeabi_dmul>
   145e6:	4602      	mov	r2, r0
   145e8:	460b      	mov	r3, r1
   145ea:	4620      	mov	r0, r4
   145ec:	4629      	mov	r1, r5
   145ee:	f003 fa03 	bl	179f8 <__adddf3>
   145f2:	4602      	mov	r2, r0
   145f4:	460b      	mov	r3, r1
   145f6:	4610      	mov	r0, r2
   145f8:	4619      	mov	r1, r3
   145fa:	f003 fe91 	bl	18320 <__aeabi_d2f>
   145fe:	4603      	mov	r3, r0
   14600:	4630      	mov	r0, r6
   14602:	4619      	mov	r1, r3
   14604:	f000 fa04 	bl	14a10 <fly_to_xy>
   14608:	6838      	ldr	r0, [r7, #0]
   1460a:	f003 fb53 	bl	17cb4 <__aeabi_f2d>
   1460e:	4602      	mov	r2, r0
   14610:	460b      	mov	r3, r1
   14612:	a189      	add	r1, pc, #548	; (adr r1, 14838 <auto_nav+0x21b0>)
   14614:	e9d1 0100 	ldrd	r0, r1, [r1]
   14618:	f003 f9ec 	bl	179f4 <__aeabi_dsub>
   1461c:	4602      	mov	r2, r0
   1461e:	460b      	mov	r3, r1
   14620:	4610      	mov	r0, r2
   14622:	4619      	mov	r1, r3
   14624:	a386      	add	r3, pc, #536	; (adr r3, 14840 <auto_nav+0x21b8>)
   14626:	e9d3 2300 	ldrd	r2, r3, [r3]
   1462a:	f003 fcc1 	bl	17fb0 <__aeabi_ddiv>
   1462e:	4602      	mov	r2, r0
   14630:	460b      	mov	r3, r1
   14632:	4610      	mov	r0, r2
   14634:	4619      	mov	r1, r3
   14636:	f04f 0200 	mov.w	r2, #0
   1463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1463e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14642:	f003 fb8b 	bl	17d5c <__aeabi_dmul>
   14646:	4602      	mov	r2, r0
   14648:	460b      	mov	r3, r1
   1464a:	4610      	mov	r0, r2
   1464c:	4619      	mov	r1, r3
   1464e:	f003 fe67 	bl	18320 <__aeabi_d2f>
   14652:	4602      	mov	r2, r0
   14654:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1465c:	601a      	str	r2, [r3, #0]
   1465e:	e012      	b.n	14686 <auto_nav+0x1ffe>
   14660:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14668:	681b      	ldr	r3, [r3, #0]
   1466a:	4618      	mov	r0, r3
   1466c:	f04f 0100 	mov.w	r1, #0
   14670:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14674:	f003 feaa 	bl	183cc <__addsf3>
   14678:	4603      	mov	r3, r0
   1467a:	461a      	mov	r2, r3
   1467c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14684:	601a      	str	r2, [r3, #0]
   14686:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1468a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1468e:	681b      	ldr	r3, [r3, #0]
   14690:	4618      	mov	r0, r3
   14692:	f04f 0100 	mov.w	r1, #0
   14696:	f004 f93f 	bl	18918 <__aeabi_fcmplt>
   1469a:	4603      	mov	r3, r0
   1469c:	2b00      	cmp	r3, #0
   1469e:	d1df      	bne.n	14660 <auto_nav+0x1fd8>
   146a0:	e012      	b.n	146c8 <auto_nav+0x2040>
   146a2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	4618      	mov	r0, r3
   146ae:	f04f 0100 	mov.w	r1, #0
   146b2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146b6:	f003 fe87 	bl	183c8 <__aeabi_fsub>
   146ba:	4603      	mov	r3, r0
   146bc:	461a      	mov	r2, r3
   146be:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c6:	601a      	str	r2, [r3, #0]
   146c8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d0:	681b      	ldr	r3, [r3, #0]
   146d2:	4618      	mov	r0, r3
   146d4:	f04f 0100 	mov.w	r1, #0
   146d8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146dc:	f004 f930 	bl	18940 <__aeabi_fcmpge>
   146e0:	4603      	mov	r3, r0
   146e2:	2b00      	cmp	r3, #0
   146e4:	d1dd      	bne.n	146a2 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   146e6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ee:	681b      	ldr	r3, [r3, #0]
   146f0:	4618      	mov	r0, r3
   146f2:	f04f 0100 	mov.w	r1, #0
   146f6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   146fa:	f004 f92b 	bl	18954 <__aeabi_fcmpgt>
   146fe:	4603      	mov	r3, r0
   14700:	2b00      	cmp	r3, #0
   14702:	d100      	bne.n	14706 <auto_nav+0x207e>
          return;
   14704:	e092      	b.n	1482c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14706:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1470a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470e:	681b      	ldr	r3, [r3, #0]
   14710:	4618      	mov	r0, r3
   14712:	f04f 0100 	mov.w	r1, #0
   14716:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1471a:	f004 f8fd 	bl	18918 <__aeabi_fcmplt>
   1471e:	4603      	mov	r3, r0
   14720:	2b00      	cmp	r3, #0
   14722:	d100      	bne.n	14726 <auto_nav+0x209e>
          return;
   14724:	e082      	b.n	1482c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14726:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1472a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472e:	781b      	ldrb	r3, [r3, #0]
   14730:	3301      	adds	r3, #1
   14732:	b2da      	uxtb	r2, r3
   14734:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1473c:	701a      	strb	r2, [r3, #0]
   1473e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14746:	681a      	ldr	r2, [r3, #0]
   14748:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1474c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14750:	601a      	str	r2, [r3, #0]
   14752:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14756:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1475a:	681a      	ldr	r2, [r3, #0]
   1475c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14764:	601a      	str	r2, [r3, #0]
   14766:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1476a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1476e:	2200      	movs	r2, #0
   14770:	801a      	strh	r2, [r3, #0]
   14772:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1477a:	f04f 0200 	mov.w	r2, #0
   1477e:	601a      	str	r2, [r3, #0]
   14780:	e054      	b.n	1482c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14782:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1478a:	781b      	ldrb	r3, [r3, #0]
   1478c:	2b03      	cmp	r3, #3
   1478e:	d106      	bne.n	1479e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14790:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14798:	2203      	movs	r2, #3
   1479a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1479c:	e44b      	b.n	14036 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1479e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   147a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a6:	781b      	ldrb	r3, [r3, #0]
   147a8:	2b04      	cmp	r3, #4
   147aa:	d13f      	bne.n	1482c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   147ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   147b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b4:	2204      	movs	r2, #4
   147b6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   147b8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   147bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c0:	781b      	ldrb	r3, [r3, #0]
   147c2:	3301      	adds	r3, #1
   147c4:	b2da      	uxtb	r2, r3
   147c6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   147ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ce:	701a      	strb	r2, [r3, #0]
   147d0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   147d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d8:	2200      	movs	r2, #0
   147da:	701a      	strb	r2, [r3, #0]
   147dc:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   147e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e4:	2200      	movs	r2, #0
   147e6:	801a      	strh	r2, [r3, #0]
   147e8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   147ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f0:	681a      	ldr	r2, [r3, #0]
   147f2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   147f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fa:	601a      	str	r2, [r3, #0]
   147fc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14804:	681a      	ldr	r2, [r3, #0]
   14806:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1480a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1480e:	601a      	str	r2, [r3, #0]
   14810:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14818:	2200      	movs	r2, #0
   1481a:	801a      	strh	r2, [r3, #0]
   1481c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14824:	f04f 0200 	mov.w	r2, #0
   14828:	601a      	str	r2, [r3, #0]
   1482a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1482c:	372c      	adds	r7, #44	; 0x2c
   1482e:	46bd      	mov	sp, r7
   14830:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14832:	bf00      	nop
   14834:	f3af 8000 	nop.w
   14838:	54442d18 	.word	0x54442d18
   1483c:	3ff921fb 	.word	0x3ff921fb
   14840:	54442d18 	.word	0x54442d18
   14844:	400921fb 	.word	0x400921fb

00014848 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14848:	b590      	push	{r4, r7, lr}
   1484a:	b087      	sub	sp, #28
   1484c:	af00      	add	r7, sp, #0
   1484e:	4603      	mov	r3, r0
   14850:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14852:	79f9      	ldrb	r1, [r7, #7]
   14854:	f240 5278 	movw	r2, #1400	; 0x578
   14858:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1485c:	460b      	mov	r3, r1
   1485e:	005b      	lsls	r3, r3, #1
   14860:	440b      	add	r3, r1
   14862:	009b      	lsls	r3, r3, #2
   14864:	4413      	add	r3, r2
   14866:	681a      	ldr	r2, [r3, #0]
   14868:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1486c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	4610      	mov	r0, r2
   14874:	4619      	mov	r1, r3
   14876:	f003 fda7 	bl	183c8 <__aeabi_fsub>
   1487a:	4603      	mov	r3, r0
   1487c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1487e:	79f9      	ldrb	r1, [r7, #7]
   14880:	f240 5278 	movw	r2, #1400	; 0x578
   14884:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14888:	460b      	mov	r3, r1
   1488a:	005b      	lsls	r3, r3, #1
   1488c:	440b      	add	r3, r1
   1488e:	009b      	lsls	r3, r3, #2
   14890:	4413      	add	r3, r2
   14892:	3304      	adds	r3, #4
   14894:	681a      	ldr	r2, [r3, #0]
   14896:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1489a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1489e:	681b      	ldr	r3, [r3, #0]
   148a0:	4610      	mov	r0, r2
   148a2:	4619      	mov	r1, r3
   148a4:	f003 fd90 	bl	183c8 <__aeabi_fsub>
   148a8:	4603      	mov	r3, r0
   148aa:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   148ac:	6978      	ldr	r0, [r7, #20]
   148ae:	6979      	ldr	r1, [r7, #20]
   148b0:	f003 fe94 	bl	185dc <__aeabi_fmul>
   148b4:	4603      	mov	r3, r0
   148b6:	461c      	mov	r4, r3
   148b8:	6938      	ldr	r0, [r7, #16]
   148ba:	6939      	ldr	r1, [r7, #16]
   148bc:	f003 fe8e 	bl	185dc <__aeabi_fmul>
   148c0:	4603      	mov	r3, r0
   148c2:	4620      	mov	r0, r4
   148c4:	4619      	mov	r1, r3
   148c6:	f003 fd81 	bl	183cc <__addsf3>
   148ca:	4603      	mov	r3, r0
   148cc:	461a      	mov	r2, r3
   148ce:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   148d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   148d8:	f64c 3334 	movw	r3, #52020	; 0xcb34
   148dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148e0:	681b      	ldr	r3, [r3, #0]
   148e2:	4618      	mov	r0, r3
   148e4:	f04f 0100 	mov.w	r1, #0
   148e8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   148ec:	f003 fe76 	bl	185dc <__aeabi_fmul>
   148f0:	4603      	mov	r3, r0
   148f2:	461a      	mov	r2, r3
   148f4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148fc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   148fe:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14906:	681b      	ldr	r3, [r3, #0]
   14908:	4618      	mov	r0, r3
   1490a:	f04f 0100 	mov.w	r1, #0
   1490e:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14912:	f004 f801 	bl	18918 <__aeabi_fcmplt>
   14916:	4603      	mov	r3, r0
   14918:	2b00      	cmp	r3, #0
   1491a:	d004      	beq.n	14926 <approaching+0xde>
   1491c:	f04f 0200 	mov.w	r2, #0
   14920:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14924:	e004      	b.n	14930 <approaching+0xe8>
   14926:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1492a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1492e:	681a      	ldr	r2, [r3, #0]
   14930:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14938:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1493a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1493e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14942:	681a      	ldr	r2, [r3, #0]
   14944:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1494c:	681b      	ldr	r3, [r3, #0]
   1494e:	4610      	mov	r0, r2
   14950:	4619      	mov	r1, r3
   14952:	f003 fe43 	bl	185dc <__aeabi_fmul>
   14956:	4603      	mov	r3, r0
   14958:	461a      	mov	r2, r3
   1495a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1495e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14962:	681b      	ldr	r3, [r3, #0]
   14964:	4610      	mov	r0, r2
   14966:	4619      	mov	r1, r3
   14968:	f003 fff4 	bl	18954 <__aeabi_fcmpgt>
   1496c:	4603      	mov	r3, r0
   1496e:	2b00      	cmp	r3, #0
   14970:	d001      	beq.n	14976 <approaching+0x12e>
    return TRUE;
   14972:	2301      	movs	r3, #1
   14974:	e048      	b.n	14a08 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14976:	79f9      	ldrb	r1, [r7, #7]
   14978:	f240 5278 	movw	r2, #1400	; 0x578
   1497c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14980:	460b      	mov	r3, r1
   14982:	005b      	lsls	r3, r3, #1
   14984:	440b      	add	r3, r1
   14986:	009b      	lsls	r3, r3, #2
   14988:	4413      	add	r3, r2
   1498a:	681a      	ldr	r2, [r3, #0]
   1498c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14994:	681b      	ldr	r3, [r3, #0]
   14996:	4610      	mov	r0, r2
   14998:	4619      	mov	r1, r3
   1499a:	f003 fd15 	bl	183c8 <__aeabi_fsub>
   1499e:	4603      	mov	r3, r0
   149a0:	4618      	mov	r0, r3
   149a2:	6979      	ldr	r1, [r7, #20]
   149a4:	f003 fe1a 	bl	185dc <__aeabi_fmul>
   149a8:	4603      	mov	r3, r0
   149aa:	461c      	mov	r4, r3
   149ac:	79f9      	ldrb	r1, [r7, #7]
   149ae:	f240 5278 	movw	r2, #1400	; 0x578
   149b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149b6:	460b      	mov	r3, r1
   149b8:	005b      	lsls	r3, r3, #1
   149ba:	440b      	add	r3, r1
   149bc:	009b      	lsls	r3, r3, #2
   149be:	4413      	add	r3, r2
   149c0:	3304      	adds	r3, #4
   149c2:	681a      	ldr	r2, [r3, #0]
   149c4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   149c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149cc:	681b      	ldr	r3, [r3, #0]
   149ce:	4610      	mov	r0, r2
   149d0:	4619      	mov	r1, r3
   149d2:	f003 fcf9 	bl	183c8 <__aeabi_fsub>
   149d6:	4603      	mov	r3, r0
   149d8:	4618      	mov	r0, r3
   149da:	6939      	ldr	r1, [r7, #16]
   149dc:	f003 fdfe 	bl	185dc <__aeabi_fmul>
   149e0:	4603      	mov	r3, r0
   149e2:	4620      	mov	r0, r4
   149e4:	4619      	mov	r1, r3
   149e6:	f003 fcf1 	bl	183cc <__addsf3>
   149ea:	4603      	mov	r3, r0
   149ec:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   149ee:	2301      	movs	r3, #1
   149f0:	461c      	mov	r4, r3
   149f2:	68f8      	ldr	r0, [r7, #12]
   149f4:	f04f 0100 	mov.w	r1, #0
   149f8:	f003 ff8e 	bl	18918 <__aeabi_fcmplt>
   149fc:	4603      	mov	r3, r0
   149fe:	2b00      	cmp	r3, #0
   14a00:	d101      	bne.n	14a06 <approaching+0x1be>
   14a02:	2300      	movs	r3, #0
   14a04:	461c      	mov	r4, r3
   14a06:	b2e3      	uxtb	r3, r4
}
   14a08:	4618      	mov	r0, r3
   14a0a:	371c      	adds	r7, #28
   14a0c:	46bd      	mov	sp, r7
   14a0e:	bd90      	pop	{r4, r7, pc}

00014a10 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14a10:	b5b0      	push	{r4, r5, r7, lr}
   14a12:	b082      	sub	sp, #8
   14a14:	af00      	add	r7, sp, #0
   14a16:	6078      	str	r0, [r7, #4]
   14a18:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14a1a:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   14a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a22:	687a      	ldr	r2, [r7, #4]
   14a24:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14a26:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   14a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a2e:	683a      	ldr	r2, [r7, #0]
   14a30:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14a32:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a3a:	681b      	ldr	r3, [r3, #0]
   14a3c:	6838      	ldr	r0, [r7, #0]
   14a3e:	4619      	mov	r1, r3
   14a40:	f003 fcc2 	bl	183c8 <__aeabi_fsub>
   14a44:	4603      	mov	r3, r0
   14a46:	4618      	mov	r0, r3
   14a48:	f003 f934 	bl	17cb4 <__aeabi_f2d>
   14a4c:	4604      	mov	r4, r0
   14a4e:	460d      	mov	r5, r1
   14a50:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	6878      	ldr	r0, [r7, #4]
   14a5c:	4619      	mov	r1, r3
   14a5e:	f003 fcb3 	bl	183c8 <__aeabi_fsub>
   14a62:	4603      	mov	r3, r0
   14a64:	4618      	mov	r0, r3
   14a66:	f003 f925 	bl	17cb4 <__aeabi_f2d>
   14a6a:	4602      	mov	r2, r0
   14a6c:	460b      	mov	r3, r1
   14a6e:	4620      	mov	r0, r4
   14a70:	4629      	mov	r1, r5
   14a72:	f001 f929 	bl	15cc8 <pp_atan2>
   14a76:	4602      	mov	r2, r0
   14a78:	460b      	mov	r3, r1
   14a7a:	a10b      	add	r1, pc, #44	; (adr r1, 14aa8 <fly_to_xy+0x98>)
   14a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14a80:	f002 ffb8 	bl	179f4 <__aeabi_dsub>
   14a84:	4602      	mov	r2, r0
   14a86:	460b      	mov	r3, r1
   14a88:	4610      	mov	r0, r2
   14a8a:	4619      	mov	r1, r3
   14a8c:	f003 fc48 	bl	18320 <__aeabi_d2f>
   14a90:	4602      	mov	r2, r0
   14a92:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a9a:	601a      	str	r2, [r3, #0]
}
   14a9c:	3708      	adds	r7, #8
   14a9e:	46bd      	mov	sp, r7
   14aa0:	bdb0      	pop	{r4, r5, r7, pc}
   14aa2:	bf00      	nop
   14aa4:	f3af 8000 	nop.w
   14aa8:	54442d18 	.word	0x54442d18
   14aac:	3ff921fb 	.word	0x3ff921fb

00014ab0 <fly_to>:

static void fly_to(uint8_t wp) { 
   14ab0:	b580      	push	{r7, lr}
   14ab2:	b082      	sub	sp, #8
   14ab4:	af00      	add	r7, sp, #0
   14ab6:	4603      	mov	r3, r0
   14ab8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14aba:	79f9      	ldrb	r1, [r7, #7]
   14abc:	f240 5278 	movw	r2, #1400	; 0x578
   14ac0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ac4:	460b      	mov	r3, r1
   14ac6:	005b      	lsls	r3, r3, #1
   14ac8:	440b      	add	r3, r1
   14aca:	009b      	lsls	r3, r3, #2
   14acc:	4413      	add	r3, r2
   14ace:	6818      	ldr	r0, [r3, #0]
   14ad0:	79f9      	ldrb	r1, [r7, #7]
   14ad2:	f240 5278 	movw	r2, #1400	; 0x578
   14ad6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ada:	460b      	mov	r3, r1
   14adc:	005b      	lsls	r3, r3, #1
   14ade:	440b      	add	r3, r1
   14ae0:	009b      	lsls	r3, r3, #2
   14ae2:	4413      	add	r3, r2
   14ae4:	3304      	adds	r3, #4
   14ae6:	681b      	ldr	r3, [r3, #0]
   14ae8:	4619      	mov	r1, r3
   14aea:	f7ff ff91 	bl	14a10 <fly_to_xy>
}
   14aee:	3708      	adds	r7, #8
   14af0:	46bd      	mov	sp, r7
   14af2:	bd80      	pop	{r7, pc}

00014af4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14af4:	b5b0      	push	{r4, r5, r7, lr}
   14af6:	b088      	sub	sp, #32
   14af8:	af00      	add	r7, sp, #0
   14afa:	4602      	mov	r2, r0
   14afc:	460b      	mov	r3, r1
   14afe:	71fa      	strb	r2, [r7, #7]
   14b00:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14b02:	79f9      	ldrb	r1, [r7, #7]
   14b04:	f240 5278 	movw	r2, #1400	; 0x578
   14b08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b0c:	460b      	mov	r3, r1
   14b0e:	005b      	lsls	r3, r3, #1
   14b10:	440b      	add	r3, r1
   14b12:	009b      	lsls	r3, r3, #2
   14b14:	4413      	add	r3, r2
   14b16:	681b      	ldr	r3, [r3, #0]
   14b18:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14b1a:	79f9      	ldrb	r1, [r7, #7]
   14b1c:	f240 5278 	movw	r2, #1400	; 0x578
   14b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b24:	460b      	mov	r3, r1
   14b26:	005b      	lsls	r3, r3, #1
   14b28:	440b      	add	r3, r1
   14b2a:	009b      	lsls	r3, r3, #2
   14b2c:	4413      	add	r3, r2
   14b2e:	3304      	adds	r3, #4
   14b30:	681b      	ldr	r3, [r3, #0]
   14b32:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14b34:	79b9      	ldrb	r1, [r7, #6]
   14b36:	f240 5278 	movw	r2, #1400	; 0x578
   14b3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b3e:	460b      	mov	r3, r1
   14b40:	005b      	lsls	r3, r3, #1
   14b42:	440b      	add	r3, r1
   14b44:	009b      	lsls	r3, r3, #2
   14b46:	4413      	add	r3, r2
   14b48:	681b      	ldr	r3, [r3, #0]
   14b4a:	4618      	mov	r0, r3
   14b4c:	69f9      	ldr	r1, [r7, #28]
   14b4e:	f003 fc3b 	bl	183c8 <__aeabi_fsub>
   14b52:	4603      	mov	r3, r0
   14b54:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14b56:	79b9      	ldrb	r1, [r7, #6]
   14b58:	f240 5278 	movw	r2, #1400	; 0x578
   14b5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b60:	460b      	mov	r3, r1
   14b62:	005b      	lsls	r3, r3, #1
   14b64:	440b      	add	r3, r1
   14b66:	009b      	lsls	r3, r3, #2
   14b68:	4413      	add	r3, r2
   14b6a:	3304      	adds	r3, #4
   14b6c:	681b      	ldr	r3, [r3, #0]
   14b6e:	4618      	mov	r0, r3
   14b70:	69b9      	ldr	r1, [r7, #24]
   14b72:	f003 fc29 	bl	183c8 <__aeabi_fsub>
   14b76:	4603      	mov	r3, r0
   14b78:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14b7a:	6978      	ldr	r0, [r7, #20]
   14b7c:	6979      	ldr	r1, [r7, #20]
   14b7e:	f003 fd2d 	bl	185dc <__aeabi_fmul>
   14b82:	4603      	mov	r3, r0
   14b84:	461c      	mov	r4, r3
   14b86:	6938      	ldr	r0, [r7, #16]
   14b88:	6939      	ldr	r1, [r7, #16]
   14b8a:	f003 fd27 	bl	185dc <__aeabi_fmul>
   14b8e:	4603      	mov	r3, r0
   14b90:	4620      	mov	r0, r4
   14b92:	4619      	mov	r1, r3
   14b94:	f003 fc1a 	bl	183cc <__addsf3>
   14b98:	4603      	mov	r3, r0
   14b9a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14b9c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba4:	681b      	ldr	r3, [r3, #0]
   14ba6:	4618      	mov	r0, r3
   14ba8:	69f9      	ldr	r1, [r7, #28]
   14baa:	f003 fc0d 	bl	183c8 <__aeabi_fsub>
   14bae:	4603      	mov	r3, r0
   14bb0:	4618      	mov	r0, r3
   14bb2:	6979      	ldr	r1, [r7, #20]
   14bb4:	f003 fd12 	bl	185dc <__aeabi_fmul>
   14bb8:	4603      	mov	r3, r0
   14bba:	461c      	mov	r4, r3
   14bbc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc4:	681b      	ldr	r3, [r3, #0]
   14bc6:	4618      	mov	r0, r3
   14bc8:	69b9      	ldr	r1, [r7, #24]
   14bca:	f003 fbfd 	bl	183c8 <__aeabi_fsub>
   14bce:	4603      	mov	r3, r0
   14bd0:	4618      	mov	r0, r3
   14bd2:	6939      	ldr	r1, [r7, #16]
   14bd4:	f003 fd02 	bl	185dc <__aeabi_fmul>
   14bd8:	4603      	mov	r3, r0
   14bda:	4620      	mov	r0, r4
   14bdc:	4619      	mov	r1, r3
   14bde:	f003 fbf5 	bl	183cc <__addsf3>
   14be2:	4603      	mov	r3, r0
   14be4:	4618      	mov	r0, r3
   14be6:	68f9      	ldr	r1, [r7, #12]
   14be8:	f003 fdac 	bl	18744 <__aeabi_fdiv>
   14bec:	4603      	mov	r3, r0
   14bee:	461a      	mov	r2, r3
   14bf0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14bfa:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c02:	681b      	ldr	r3, [r3, #0]
   14c04:	4618      	mov	r0, r3
   14c06:	f04f 0100 	mov.w	r1, #0
   14c0a:	f003 fe99 	bl	18940 <__aeabi_fcmpge>
   14c0e:	4603      	mov	r3, r0
   14c10:	2b00      	cmp	r3, #0
   14c12:	d005      	beq.n	14c20 <route_to+0x12c>
   14c14:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c1c:	681a      	ldr	r2, [r3, #0]
   14c1e:	e001      	b.n	14c24 <route_to+0x130>
   14c20:	f04f 0200 	mov.w	r2, #0
   14c24:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14c2e:	68f8      	ldr	r0, [r7, #12]
   14c30:	f003 f840 	bl	17cb4 <__aeabi_f2d>
   14c34:	4602      	mov	r2, r0
   14c36:	460b      	mov	r3, r1
   14c38:	4610      	mov	r0, r2
   14c3a:	4619      	mov	r1, r3
   14c3c:	f001 f9f4 	bl	16028 <pp_sqrt>
   14c40:	4602      	mov	r2, r0
   14c42:	460b      	mov	r3, r1
   14c44:	4610      	mov	r0, r2
   14c46:	4619      	mov	r1, r3
   14c48:	f003 fb6a 	bl	18320 <__aeabi_d2f>
   14c4c:	4602      	mov	r2, r0
   14c4e:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c56:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14c58:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c60:	681b      	ldr	r3, [r3, #0]
   14c62:	4618      	mov	r0, r3
   14c64:	f003 f826 	bl	17cb4 <__aeabi_f2d>
   14c68:	4604      	mov	r4, r0
   14c6a:	460d      	mov	r5, r1
   14c6c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c74:	681a      	ldr	r2, [r3, #0]
   14c76:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	4610      	mov	r0, r2
   14c82:	4619      	mov	r1, r3
   14c84:	f003 fd5e 	bl	18744 <__aeabi_fdiv>
   14c88:	4603      	mov	r3, r0
   14c8a:	4618      	mov	r0, r3
   14c8c:	f04f 0100 	mov.w	r1, #0
   14c90:	f003 fe56 	bl	18940 <__aeabi_fcmpge>
   14c94:	4603      	mov	r3, r0
   14c96:	2b00      	cmp	r3, #0
   14c98:	d014      	beq.n	14cc4 <route_to+0x1d0>
   14c9a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca2:	681a      	ldr	r2, [r3, #0]
   14ca4:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	4610      	mov	r0, r2
   14cb0:	4619      	mov	r1, r3
   14cb2:	f003 fd47 	bl	18744 <__aeabi_fdiv>
   14cb6:	4603      	mov	r3, r0
   14cb8:	4618      	mov	r0, r3
   14cba:	f002 fffb 	bl	17cb4 <__aeabi_f2d>
   14cbe:	4602      	mov	r2, r0
   14cc0:	460b      	mov	r3, r1
   14cc2:	e003      	b.n	14ccc <route_to+0x1d8>
   14cc4:	f04f 0200 	mov.w	r2, #0
   14cc8:	f04f 0300 	mov.w	r3, #0
   14ccc:	4620      	mov	r0, r4
   14cce:	4629      	mov	r1, r5
   14cd0:	f002 fe92 	bl	179f8 <__adddf3>
   14cd4:	4602      	mov	r2, r0
   14cd6:	460b      	mov	r3, r1
   14cd8:	4610      	mov	r0, r2
   14cda:	4619      	mov	r1, r3
   14cdc:	f003 fb20 	bl	18320 <__aeabi_d2f>
   14ce0:	4602      	mov	r2, r0
   14ce2:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cea:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14cec:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cf4:	681b      	ldr	r3, [r3, #0]
   14cf6:	4618      	mov	r0, r3
   14cf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cfc:	f003 fe20 	bl	18940 <__aeabi_fcmpge>
   14d00:	4603      	mov	r3, r0
   14d02:	2b00      	cmp	r3, #0
   14d04:	d002      	beq.n	14d0c <route_to+0x218>
   14d06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14d0a:	e004      	b.n	14d16 <route_to+0x222>
   14d0c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d14:	681a      	ldr	r2, [r3, #0]
   14d16:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d1e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14d20:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d28:	681b      	ldr	r3, [r3, #0]
   14d2a:	4618      	mov	r0, r3
   14d2c:	6979      	ldr	r1, [r7, #20]
   14d2e:	f003 fc55 	bl	185dc <__aeabi_fmul>
   14d32:	4603      	mov	r3, r0
   14d34:	4618      	mov	r0, r3
   14d36:	69f9      	ldr	r1, [r7, #28]
   14d38:	f003 fb48 	bl	183cc <__addsf3>
   14d3c:	4603      	mov	r3, r0
   14d3e:	461c      	mov	r4, r3
   14d40:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d48:	681b      	ldr	r3, [r3, #0]
   14d4a:	4618      	mov	r0, r3
   14d4c:	6939      	ldr	r1, [r7, #16]
   14d4e:	f003 fc45 	bl	185dc <__aeabi_fmul>
   14d52:	4603      	mov	r3, r0
   14d54:	4618      	mov	r0, r3
   14d56:	69b9      	ldr	r1, [r7, #24]
   14d58:	f003 fb38 	bl	183cc <__addsf3>
   14d5c:	4603      	mov	r3, r0
   14d5e:	4620      	mov	r0, r4
   14d60:	4619      	mov	r1, r3
   14d62:	f7ff fe55 	bl	14a10 <fly_to_xy>
}
   14d66:	3720      	adds	r7, #32
   14d68:	46bd      	mov	sp, r7
   14d6a:	bdb0      	pop	{r4, r5, r7, pc}

00014d6c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14d6c:	b590      	push	{r4, r7, lr}
   14d6e:	b083      	sub	sp, #12
   14d70:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14d72:	f240 5378 	movw	r3, #1400	; 0x578
   14d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7a:	681a      	ldr	r2, [r3, #0]
   14d7c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d84:	681b      	ldr	r3, [r3, #0]
   14d86:	4610      	mov	r0, r2
   14d88:	4619      	mov	r1, r3
   14d8a:	f003 fb1d 	bl	183c8 <__aeabi_fsub>
   14d8e:	4603      	mov	r3, r0
   14d90:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14d92:	f240 5378 	movw	r3, #1400	; 0x578
   14d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d9a:	685a      	ldr	r2, [r3, #4]
   14d9c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da4:	681b      	ldr	r3, [r3, #0]
   14da6:	4610      	mov	r0, r2
   14da8:	4619      	mov	r1, r3
   14daa:	f003 fb0d 	bl	183c8 <__aeabi_fsub>
   14dae:	4603      	mov	r3, r0
   14db0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14db2:	6878      	ldr	r0, [r7, #4]
   14db4:	6879      	ldr	r1, [r7, #4]
   14db6:	f003 fc11 	bl	185dc <__aeabi_fmul>
   14dba:	4603      	mov	r3, r0
   14dbc:	461c      	mov	r4, r3
   14dbe:	6838      	ldr	r0, [r7, #0]
   14dc0:	6839      	ldr	r1, [r7, #0]
   14dc2:	f003 fc0b 	bl	185dc <__aeabi_fmul>
   14dc6:	4603      	mov	r3, r0
   14dc8:	4620      	mov	r0, r4
   14dca:	4619      	mov	r1, r3
   14dcc:	f003 fafe 	bl	183cc <__addsf3>
   14dd0:	4603      	mov	r3, r0
   14dd2:	461a      	mov	r2, r3
   14dd4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ddc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14dde:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de6:	681b      	ldr	r3, [r3, #0]
   14de8:	2201      	movs	r2, #1
   14dea:	4614      	mov	r4, r2
   14dec:	4618      	mov	r0, r3
   14dee:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14df2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14df6:	f003 fdad 	bl	18954 <__aeabi_fcmpgt>
   14dfa:	4603      	mov	r3, r0
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d101      	bne.n	14e04 <compute_dist2_to_home+0x98>
   14e00:	2300      	movs	r3, #0
   14e02:	461c      	mov	r4, r3
   14e04:	b2e3      	uxtb	r3, r4
   14e06:	461a      	mov	r2, r3
   14e08:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e10:	701a      	strb	r2, [r3, #0]
}
   14e12:	370c      	adds	r7, #12
   14e14:	46bd      	mov	sp, r7
   14e16:	bd90      	pop	{r4, r7, pc}

00014e18 <nav_home>:

void nav_home(void) {
   14e18:	b580      	push	{r7, lr}
   14e1a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14e1c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e24:	f04f 0200 	mov.w	r2, #0
   14e28:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14e2a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e32:	2203      	movs	r2, #3
   14e34:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14e36:	f240 5374 	movw	r3, #1396	; 0x574
   14e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e3e:	f04f 0200 	mov.w	r2, #0
   14e42:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14e46:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14e48:	f7ff ff90 	bl	14d6c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14e4c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e54:	681a      	ldr	r2, [r3, #0]
   14e56:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e5e:	601a      	str	r2, [r3, #0]
}
   14e60:	bd80      	pop	{r7, pc}
   14e62:	bf00      	nop

00014e64 <nav_update>:

void nav_update(void) {
   14e64:	b580      	push	{r7, lr}
   14e66:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14e68:	f7ff ff80 	bl	14d6c <compute_dist2_to_home>

  auto_nav();
   14e6c:	f7fd fc0c 	bl	12688 <auto_nav>
}
   14e70:	bd80      	pop	{r7, pc}
   14e72:	bf00      	nop

00014e74 <nav_init>:


void nav_init(void) {
   14e74:	b480      	push	{r7}
   14e76:	af00      	add	r7, sp, #0
  nav_block = 0;
   14e78:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e80:	2200      	movs	r2, #0
   14e82:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14e84:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8c:	2200      	movs	r2, #0
   14e8e:	701a      	strb	r2, [r3, #0]
}
   14e90:	46bd      	mov	sp, r7
   14e92:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e96:	4770      	bx	lr

00014e98 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14e98:	b480      	push	{r7}
   14e9a:	b083      	sub	sp, #12
   14e9c:	af00      	add	r7, sp, #0
   14e9e:	4603      	mov	r3, r0
   14ea0:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14ea2:	f242 030a 	movw	r3, #8202	; 0x200a
   14ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eaa:	781b      	ldrb	r3, [r3, #0]
   14eac:	b2db      	uxtb	r3, r3
   14eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d028      	beq.n	14f08 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14eb6:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ebe:	781b      	ldrb	r3, [r3, #0]
   14ec0:	b2db      	uxtb	r3, r3
   14ec2:	461a      	mov	r2, r3
   14ec4:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ecc:	781b      	ldrb	r3, [r3, #0]
   14ece:	3301      	adds	r3, #1
   14ed0:	429a      	cmp	r2, r3
   14ed2:	d100      	bne.n	14ed6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14ed4:	e02c      	b.n	14f30 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14ed6:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ede:	781b      	ldrb	r3, [r3, #0]
   14ee0:	461a      	mov	r2, r3
   14ee2:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eea:	79f9      	ldrb	r1, [r7, #7]
   14eec:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14eee:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ef6:	781b      	ldrb	r3, [r3, #0]
   14ef8:	3301      	adds	r3, #1
   14efa:	b2da      	uxtb	r2, r3
   14efc:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f04:	701a      	strb	r2, [r3, #0]
   14f06:	e013      	b.n	14f30 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14f08:	f242 030c 	movw	r3, #8204	; 0x200c
   14f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f10:	79fa      	ldrb	r2, [r7, #7]
   14f12:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14f14:	f242 030a 	movw	r3, #8202	; 0x200a
   14f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f1c:	f242 020a 	movw	r2, #8202	; 0x200a
   14f20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f24:	7812      	ldrb	r2, [r2, #0]
   14f26:	b2d2      	uxtb	r2, r2
   14f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f2c:	b2d2      	uxtb	r2, r2
   14f2e:	701a      	strb	r2, [r3, #0]
  }
}
   14f30:	370c      	adds	r7, #12
   14f32:	46bd      	mov	sp, r7
   14f34:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f38:	4770      	bx	lr
   14f3a:	bf00      	nop

00014f3c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14f3c:	b480      	push	{r7}
   14f3e:	b083      	sub	sp, #12
   14f40:	af00      	add	r7, sp, #0
   14f42:	4603      	mov	r3, r0
   14f44:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14f46:	f242 039a 	movw	r3, #8346	; 0x209a
   14f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4e:	781b      	ldrb	r3, [r3, #0]
   14f50:	b2db      	uxtb	r3, r3
   14f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f56:	2b00      	cmp	r3, #0
   14f58:	d028      	beq.n	14fac <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14f5a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f62:	781b      	ldrb	r3, [r3, #0]
   14f64:	b2db      	uxtb	r3, r3
   14f66:	461a      	mov	r2, r3
   14f68:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f70:	781b      	ldrb	r3, [r3, #0]
   14f72:	3301      	adds	r3, #1
   14f74:	429a      	cmp	r2, r3
   14f76:	d100      	bne.n	14f7a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f78:	e02c      	b.n	14fd4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14f7a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	461a      	mov	r2, r3
   14f86:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f8e:	79f9      	ldrb	r1, [r7, #7]
   14f90:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14f92:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f9a:	781b      	ldrb	r3, [r3, #0]
   14f9c:	3301      	adds	r3, #1
   14f9e:	b2da      	uxtb	r2, r3
   14fa0:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fa8:	701a      	strb	r2, [r3, #0]
   14faa:	e013      	b.n	14fd4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14fac:	f242 039c 	movw	r3, #8348	; 0x209c
   14fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb4:	79fa      	ldrb	r2, [r7, #7]
   14fb6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14fb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc0:	f242 029a 	movw	r2, #8346	; 0x209a
   14fc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fc8:	7812      	ldrb	r2, [r2, #0]
   14fca:	b2d2      	uxtb	r2, r2
   14fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14fd0:	b2d2      	uxtb	r2, r2
   14fd2:	701a      	strb	r2, [r3, #0]
  }
}
   14fd4:	370c      	adds	r7, #12
   14fd6:	46bd      	mov	sp, r7
   14fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fdc:	4770      	bx	lr
   14fde:	bf00      	nop

00014fe0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b084      	sub	sp, #16
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14fe8:	2300      	movs	r3, #0
   14fea:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14fec:	e009      	b.n	15002 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14fee:	7bfb      	ldrb	r3, [r7, #15]
   14ff0:	687a      	ldr	r2, [r7, #4]
   14ff2:	4413      	add	r3, r2
   14ff4:	781b      	ldrb	r3, [r3, #0]
   14ff6:	4618      	mov	r0, r3
   14ff8:	f7ff ff4e 	bl	14e98 <uart0_transmit>
    i++;
   14ffc:	7bfb      	ldrb	r3, [r7, #15]
   14ffe:	3301      	adds	r3, #1
   15000:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   15002:	7bfb      	ldrb	r3, [r7, #15]
   15004:	687a      	ldr	r2, [r7, #4]
   15006:	4413      	add	r3, r2
   15008:	781b      	ldrb	r3, [r3, #0]
   1500a:	2b00      	cmp	r3, #0
   1500c:	d1ef      	bne.n	14fee <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   1500e:	3710      	adds	r7, #16
   15010:	46bd      	mov	sp, r7
   15012:	bd80      	pop	{r7, pc}

00015014 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   15014:	b590      	push	{r4, r7, lr}
   15016:	b089      	sub	sp, #36	; 0x24
   15018:	af00      	add	r7, sp, #0
   1501a:	4603      	mov	r3, r0
   1501c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1501e:	f648 33dc 	movw	r3, #35804	; 0x8bdc
   15022:	f2c0 0301 	movt	r3, #1
   15026:	f107 040c 	add.w	r4, r7, #12
   1502a:	6818      	ldr	r0, [r3, #0]
   1502c:	6859      	ldr	r1, [r3, #4]
   1502e:	689a      	ldr	r2, [r3, #8]
   15030:	68db      	ldr	r3, [r3, #12]
   15032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   15034:	79fb      	ldrb	r3, [r7, #7]
   15036:	091b      	lsrs	r3, r3, #4
   15038:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1503a:	79fb      	ldrb	r3, [r7, #7]
   1503c:	f003 030f 	and.w	r3, r3, #15
   15040:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   15042:	230f      	movs	r3, #15
   15044:	77fb      	strb	r3, [r7, #31]
    low = 15;
   15046:	230f      	movs	r3, #15
   15048:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   1504a:	7ffb      	ldrb	r3, [r7, #31]
   1504c:	f107 0220 	add.w	r2, r7, #32
   15050:	4413      	add	r3, r2
   15052:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15056:	4618      	mov	r0, r3
   15058:	f7ff ff1e 	bl	14e98 <uart0_transmit>
  uart0_transmit(hex[low]);
   1505c:	7fbb      	ldrb	r3, [r7, #30]
   1505e:	f107 0220 	add.w	r2, r7, #32
   15062:	4413      	add	r3, r2
   15064:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15068:	4618      	mov	r0, r3
   1506a:	f7ff ff15 	bl	14e98 <uart0_transmit>
}
   1506e:	3724      	adds	r7, #36	; 0x24
   15070:	46bd      	mov	sp, r7
   15072:	bd90      	pop	{r4, r7, pc}

00015074 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   15074:	b480      	push	{r7}
   15076:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15078:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   1507c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15080:	781a      	ldrb	r2, [r3, #0]
   15082:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   15086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1508a:	781b      	ldrb	r3, [r3, #0]
   1508c:	b2db      	uxtb	r3, r3
   1508e:	429a      	cmp	r2, r3
   15090:	d10e      	bne.n	150b0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   15092:	f242 030a 	movw	r3, #8202	; 0x200a
   15096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1509a:	f242 020a 	movw	r2, #8202	; 0x200a
   1509e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150a2:	7812      	ldrb	r2, [r2, #0]
   150a4:	b2d2      	uxtb	r2, r2
   150a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150aa:	b2d2      	uxtb	r2, r2
   150ac:	701a      	strb	r2, [r3, #0]
   150ae:	e01d      	b.n	150ec <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   150b0:	f242 030c 	movw	r3, #8204	; 0x200c
   150b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b8:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   150bc:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150c0:	7812      	ldrb	r2, [r2, #0]
   150c2:	b2d2      	uxtb	r2, r2
   150c4:	4611      	mov	r1, r2
   150c6:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   150ca:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150ce:	5c52      	ldrb	r2, [r2, r1]
   150d0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   150d2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   150d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	b2db      	uxtb	r3, r3
   150de:	3301      	adds	r3, #1
   150e0:	b2da      	uxtb	r2, r3
   150e2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   150e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ea:	701a      	strb	r2, [r3, #0]
  }
}
   150ec:	46bd      	mov	sp, r7
   150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   150f2:	4770      	bx	lr

000150f4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   150f4:	b480      	push	{r7}
   150f6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   150f8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   150fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15100:	781a      	ldrb	r2, [r3, #0]
   15102:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1510a:	781b      	ldrb	r3, [r3, #0]
   1510c:	b2db      	uxtb	r3, r3
   1510e:	429a      	cmp	r2, r3
   15110:	d10e      	bne.n	15130 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   15112:	f242 039a 	movw	r3, #8346	; 0x209a
   15116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1511a:	f242 029a 	movw	r2, #8346	; 0x209a
   1511e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15122:	7812      	ldrb	r2, [r2, #0]
   15124:	b2d2      	uxtb	r2, r2
   15126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1512a:	b2d2      	uxtb	r2, r2
   1512c:	701a      	strb	r2, [r3, #0]
   1512e:	e01d      	b.n	1516c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15130:	f242 039c 	movw	r3, #8348	; 0x209c
   15134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15138:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   1513c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15140:	7812      	ldrb	r2, [r2, #0]
   15142:	b2d2      	uxtb	r2, r2
   15144:	4611      	mov	r1, r2
   15146:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   1514a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1514e:	5c52      	ldrb	r2, [r2, r1]
   15150:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15152:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1515a:	781b      	ldrb	r3, [r3, #0]
   1515c:	b2db      	uxtb	r3, r3
   1515e:	3301      	adds	r3, #1
   15160:	b2da      	uxtb	r2, r3
   15162:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1516a:	701a      	strb	r2, [r3, #0]
  }
}
   1516c:	46bd      	mov	sp, r7
   1516e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15172:	4770      	bx	lr

00015174 <uart0_init>:

void uart0_init( void ) {
   15174:	b480      	push	{r7}
   15176:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15178:	f242 0390 	movw	r3, #8336	; 0x2090
   1517c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15180:	2200      	movs	r2, #0
   15182:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15184:	f242 0309 	movw	r3, #8201	; 0x2009
   15188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1518c:	2219      	movs	r2, #25
   1518e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15190:	f242 030b 	movw	r3, #8203	; 0x200b
   15194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15198:	2200      	movs	r2, #0
   1519a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1519c:	f242 030a 	movw	r3, #8202	; 0x200a
   151a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a4:	2218      	movs	r2, #24
   151a6:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   151a8:	f242 0395 	movw	r3, #8341	; 0x2095
   151ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b0:	2206      	movs	r2, #6
   151b2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   151b4:	f242 030a 	movw	r3, #8202	; 0x200a
   151b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151bc:	f242 020a 	movw	r2, #8202	; 0x200a
   151c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151c4:	7812      	ldrb	r2, [r2, #0]
   151c6:	b2d2      	uxtb	r2, r2
   151c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   151cc:	b2d2      	uxtb	r2, r2
   151ce:	701a      	strb	r2, [r3, #0]
}
   151d0:	46bd      	mov	sp, r7
   151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   151d6:	4770      	bx	lr

000151d8 <uart1_init>:

void uart1_init( void ) {
   151d8:	b480      	push	{r7}
   151da:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   151dc:	f242 0398 	movw	r3, #8344	; 0x2098
   151e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e4:	2200      	movs	r2, #0
   151e6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   151e8:	f242 0399 	movw	r3, #8345	; 0x2099
   151ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f0:	2219      	movs	r2, #25
   151f2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   151f4:	f242 039b 	movw	r3, #8347	; 0x209b
   151f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151fc:	2200      	movs	r2, #0
   151fe:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15200:	f242 039a 	movw	r3, #8346	; 0x209a
   15204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15208:	2218      	movs	r2, #24
   1520a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   1520c:	f242 039d 	movw	r3, #8349	; 0x209d
   15210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15214:	2206      	movs	r2, #6
   15216:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15218:	f242 039a 	movw	r3, #8346	; 0x209a
   1521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15220:	f242 029a 	movw	r2, #8346	; 0x209a
   15224:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15228:	7812      	ldrb	r2, [r2, #0]
   1522a:	b2d2      	uxtb	r2, r2
   1522c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15230:	b2d2      	uxtb	r2, r2
   15232:	701a      	strb	r2, [r3, #0]
}
   15234:	46bd      	mov	sp, r7
   15236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1523a:	4770      	bx	lr
   1523c:	0000      	movs	r0, r0
	...

00015240 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15240:	b480      	push	{r7}
   15242:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   15244:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1524c:	f04f 0200 	mov.w	r2, #0
   15250:	601a      	str	r2, [r3, #0]
   15252:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1525a:	f04f 0200 	mov.w	r2, #0
   1525e:	601a      	str	r2, [r3, #0]
   15260:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15268:	f04f 0200 	mov.w	r2, #0
   1526c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1526e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15276:	f04f 0200 	mov.w	r2, #0
   1527a:	601a      	str	r2, [r3, #0]
   1527c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15284:	f04f 0200 	mov.w	r2, #0
   15288:	601a      	str	r2, [r3, #0]
   1528a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15292:	f04f 0200 	mov.w	r2, #0
   15296:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15298:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1529c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152a0:	f04f 0200 	mov.w	r2, #0
   152a4:	601a      	str	r2, [r3, #0]
   152a6:	f64c 3338 	movw	r3, #52024	; 0xcb38
   152aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ae:	f04f 0200 	mov.w	r2, #0
   152b2:	601a      	str	r2, [r3, #0]
   152b4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   152b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152bc:	f04f 0200 	mov.w	r2, #0
   152c0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   152c2:	f64c 3320 	movw	r3, #52000	; 0xcb20
   152c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ca:	f04f 0200 	mov.w	r2, #0
   152ce:	601a      	str	r2, [r3, #0]
   152d0:	f64c 3324 	movw	r3, #52004	; 0xcb24
   152d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d8:	f04f 0200 	mov.w	r2, #0
   152dc:	601a      	str	r2, [r3, #0]
   152de:	f64c 3328 	movw	r3, #52008	; 0xcb28
   152e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e6:	f04f 0200 	mov.w	r2, #0
   152ea:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   152ec:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   152f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f4:	2200      	movs	r2, #0
   152f6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   152f8:	f240 5348 	movw	r3, #1352	; 0x548
   152fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15300:	681a      	ldr	r2, [r3, #0]
   15302:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1530a:	601a      	str	r2, [r3, #0]
}
   1530c:	46bd      	mov	sp, r7
   1530e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15312:	4770      	bx	lr

00015314 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   15314:	b580      	push	{r7, lr}
   15316:	b082      	sub	sp, #8
   15318:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1531a:	f240 533c 	movw	r3, #1340	; 0x53c
   1531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15322:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15324:	2b01      	cmp	r3, #1
   15326:	d105      	bne.n	15334 <estimator_update_state_infrared+0x20>
   15328:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1532c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15330:	681b      	ldr	r3, [r3, #0]
   15332:	e004      	b.n	1533e <estimator_update_state_infrared+0x2a>
   15334:	f240 5348 	movw	r3, #1352	; 0x548
   15338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1533c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1533e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15340:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15348:	881b      	ldrh	r3, [r3, #0]
   1534a:	b21b      	sxth	r3, r3
   1534c:	4618      	mov	r0, r3
   1534e:	f003 f8f1 	bl	18534 <__aeabi_i2f>
   15352:	4603      	mov	r3, r0
   15354:	4618      	mov	r0, r3
   15356:	6879      	ldr	r1, [r7, #4]
   15358:	f003 f940 	bl	185dc <__aeabi_fmul>
   1535c:	4603      	mov	r3, r0
   1535e:	461a      	mov	r2, r3
   15360:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15368:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1536a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   1536e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15372:	881b      	ldrh	r3, [r3, #0]
   15374:	b21b      	sxth	r3, r3
   15376:	4618      	mov	r0, r3
   15378:	f003 f8dc 	bl	18534 <__aeabi_i2f>
   1537c:	4603      	mov	r3, r0
   1537e:	4618      	mov	r0, r3
   15380:	6879      	ldr	r1, [r7, #4]
   15382:	f003 f92b 	bl	185dc <__aeabi_fmul>
   15386:	4603      	mov	r3, r0
   15388:	461a      	mov	r2, r3
   1538a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1538e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15392:	601a      	str	r2, [r3, #0]
}
   15394:	3708      	adds	r7, #8
   15396:	46bd      	mov	sp, r7
   15398:	bd80      	pop	{r7, pc}
   1539a:	bf00      	nop

0001539c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1539c:	b5b0      	push	{r4, r5, r7, lr}
   1539e:	b084      	sub	sp, #16
   153a0:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   153a2:	f64c 3348 	movw	r3, #52040	; 0xcb48
   153a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153aa:	781b      	ldrb	r3, [r3, #0]
   153ac:	2b00      	cmp	r3, #0
   153ae:	f000 81e8 	beq.w	15782 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   153b2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   153b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153ba:	681a      	ldr	r2, [r3, #0]
   153bc:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   153c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153c4:	681b      	ldr	r3, [r3, #0]
   153c6:	4610      	mov	r0, r2
   153c8:	4619      	mov	r1, r3
   153ca:	f002 fffd 	bl	183c8 <__aeabi_fsub>
   153ce:	4603      	mov	r3, r0
   153d0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   153d2:	68b8      	ldr	r0, [r7, #8]
   153d4:	f002 fc6e 	bl	17cb4 <__aeabi_f2d>
   153d8:	4602      	mov	r2, r0
   153da:	460b      	mov	r3, r1
   153dc:	4610      	mov	r0, r2
   153de:	4619      	mov	r1, r3
   153e0:	a385      	add	r3, pc, #532	; (adr r3, 155f8 <estimator_update_ir_estim+0x25c>)
   153e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   153e6:	f002 ff49 	bl	1827c <__aeabi_dcmpgt>
   153ea:	4603      	mov	r3, r0
   153ec:	2b00      	cmp	r3, #0
   153ee:	d100      	bne.n	153f2 <estimator_update_ir_estim+0x56>
   153f0:	e219      	b.n	15826 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   153f2:	f64c 3338 	movw	r3, #52024	; 0xcb38
   153f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153fa:	681a      	ldr	r2, [r3, #0]
   153fc:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15404:	681b      	ldr	r3, [r3, #0]
   15406:	4610      	mov	r0, r2
   15408:	4619      	mov	r1, r3
   1540a:	f002 ffdd 	bl	183c8 <__aeabi_fsub>
   1540e:	4603      	mov	r3, r0
   15410:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15412:	e013      	b.n	1543c <estimator_update_ir_estim+0xa0>
   15414:	68f8      	ldr	r0, [r7, #12]
   15416:	f002 fc4d 	bl	17cb4 <__aeabi_f2d>
   1541a:	4602      	mov	r2, r0
   1541c:	460b      	mov	r3, r1
   1541e:	4610      	mov	r0, r2
   15420:	4619      	mov	r1, r3
   15422:	a377      	add	r3, pc, #476	; (adr r3, 15600 <estimator_update_ir_estim+0x264>)
   15424:	e9d3 2300 	ldrd	r2, r3, [r3]
   15428:	f002 fae4 	bl	179f4 <__aeabi_dsub>
   1542c:	4602      	mov	r2, r0
   1542e:	460b      	mov	r3, r1
   15430:	4610      	mov	r0, r2
   15432:	4619      	mov	r1, r3
   15434:	f002 ff74 	bl	18320 <__aeabi_d2f>
   15438:	4603      	mov	r3, r0
   1543a:	60fb      	str	r3, [r7, #12]
   1543c:	68f8      	ldr	r0, [r7, #12]
   1543e:	f002 fc39 	bl	17cb4 <__aeabi_f2d>
   15442:	4602      	mov	r2, r0
   15444:	460b      	mov	r3, r1
   15446:	4610      	mov	r0, r2
   15448:	4619      	mov	r1, r3
   1544a:	a36f      	add	r3, pc, #444	; (adr r3, 15608 <estimator_update_ir_estim+0x26c>)
   1544c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15450:	f002 ff14 	bl	1827c <__aeabi_dcmpgt>
   15454:	4603      	mov	r3, r0
   15456:	2b00      	cmp	r3, #0
   15458:	d1dc      	bne.n	15414 <estimator_update_ir_estim+0x78>
   1545a:	e013      	b.n	15484 <estimator_update_ir_estim+0xe8>
   1545c:	68f8      	ldr	r0, [r7, #12]
   1545e:	f002 fc29 	bl	17cb4 <__aeabi_f2d>
   15462:	4602      	mov	r2, r0
   15464:	460b      	mov	r3, r1
   15466:	4610      	mov	r0, r2
   15468:	4619      	mov	r1, r3
   1546a:	a365      	add	r3, pc, #404	; (adr r3, 15600 <estimator_update_ir_estim+0x264>)
   1546c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15470:	f002 fac2 	bl	179f8 <__adddf3>
   15474:	4602      	mov	r2, r0
   15476:	460b      	mov	r3, r1
   15478:	4610      	mov	r0, r2
   1547a:	4619      	mov	r1, r3
   1547c:	f002 ff50 	bl	18320 <__aeabi_d2f>
   15480:	4603      	mov	r3, r0
   15482:	60fb      	str	r3, [r7, #12]
   15484:	68f8      	ldr	r0, [r7, #12]
   15486:	f002 fc15 	bl	17cb4 <__aeabi_f2d>
   1548a:	4602      	mov	r2, r0
   1548c:	460b      	mov	r3, r1
   1548e:	4610      	mov	r0, r2
   15490:	4619      	mov	r1, r3
   15492:	a35f      	add	r3, pc, #380	; (adr r3, 15610 <estimator_update_ir_estim+0x274>)
   15494:	e9d3 2300 	ldrd	r2, r3, [r3]
   15498:	f002 fed2 	bl	18240 <__aeabi_dcmplt>
   1549c:	4603      	mov	r3, r0
   1549e:	2b00      	cmp	r3, #0
   154a0:	d1dc      	bne.n	1545c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   154a2:	68f8      	ldr	r0, [r7, #12]
   154a4:	68b9      	ldr	r1, [r7, #8]
   154a6:	f003 f94d 	bl	18744 <__aeabi_fdiv>
   154aa:	4603      	mov	r3, r0
   154ac:	4618      	mov	r0, r3
   154ae:	f002 fc01 	bl	17cb4 <__aeabi_f2d>
   154b2:	4602      	mov	r2, r0
   154b4:	460b      	mov	r3, r1
   154b6:	4610      	mov	r0, r2
   154b8:	4619      	mov	r1, r3
   154ba:	f04f 0200 	mov.w	r2, #0
   154be:	f04f 0300 	mov.w	r3, #0
   154c2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   154c6:	f002 fc49 	bl	17d5c <__aeabi_dmul>
   154ca:	4602      	mov	r2, r0
   154cc:	460b      	mov	r3, r1
   154ce:	4610      	mov	r0, r2
   154d0:	4619      	mov	r1, r3
   154d2:	a351      	add	r3, pc, #324	; (adr r3, 15618 <estimator_update_ir_estim+0x27c>)
   154d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d8:	f002 fd6a 	bl	17fb0 <__aeabi_ddiv>
   154dc:	4602      	mov	r2, r0
   154de:	460b      	mov	r3, r1
   154e0:	4610      	mov	r0, r2
   154e2:	4619      	mov	r1, r3
   154e4:	f002 ff1c 	bl	18320 <__aeabi_d2f>
   154e8:	4603      	mov	r3, r0
   154ea:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   154ec:	e013      	b.n	15516 <estimator_update_ir_estim+0x17a>
   154ee:	68f8      	ldr	r0, [r7, #12]
   154f0:	f002 fbe0 	bl	17cb4 <__aeabi_f2d>
   154f4:	4602      	mov	r2, r0
   154f6:	460b      	mov	r3, r1
   154f8:	4610      	mov	r0, r2
   154fa:	4619      	mov	r1, r3
   154fc:	a340      	add	r3, pc, #256	; (adr r3, 15600 <estimator_update_ir_estim+0x264>)
   154fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15502:	f002 fa77 	bl	179f4 <__aeabi_dsub>
   15506:	4602      	mov	r2, r0
   15508:	460b      	mov	r3, r1
   1550a:	4610      	mov	r0, r2
   1550c:	4619      	mov	r1, r3
   1550e:	f002 ff07 	bl	18320 <__aeabi_d2f>
   15512:	4603      	mov	r3, r0
   15514:	60fb      	str	r3, [r7, #12]
   15516:	68f8      	ldr	r0, [r7, #12]
   15518:	f002 fbcc 	bl	17cb4 <__aeabi_f2d>
   1551c:	4602      	mov	r2, r0
   1551e:	460b      	mov	r3, r1
   15520:	4610      	mov	r0, r2
   15522:	4619      	mov	r1, r3
   15524:	a338      	add	r3, pc, #224	; (adr r3, 15608 <estimator_update_ir_estim+0x26c>)
   15526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1552a:	f002 fea7 	bl	1827c <__aeabi_dcmpgt>
   1552e:	4603      	mov	r3, r0
   15530:	2b00      	cmp	r3, #0
   15532:	d1dc      	bne.n	154ee <estimator_update_ir_estim+0x152>
   15534:	e013      	b.n	1555e <estimator_update_ir_estim+0x1c2>
   15536:	68f8      	ldr	r0, [r7, #12]
   15538:	f002 fbbc 	bl	17cb4 <__aeabi_f2d>
   1553c:	4602      	mov	r2, r0
   1553e:	460b      	mov	r3, r1
   15540:	4610      	mov	r0, r2
   15542:	4619      	mov	r1, r3
   15544:	a32e      	add	r3, pc, #184	; (adr r3, 15600 <estimator_update_ir_estim+0x264>)
   15546:	e9d3 2300 	ldrd	r2, r3, [r3]
   1554a:	f002 fa55 	bl	179f8 <__adddf3>
   1554e:	4602      	mov	r2, r0
   15550:	460b      	mov	r3, r1
   15552:	4610      	mov	r0, r2
   15554:	4619      	mov	r1, r3
   15556:	f002 fee3 	bl	18320 <__aeabi_d2f>
   1555a:	4603      	mov	r3, r0
   1555c:	60fb      	str	r3, [r7, #12]
   1555e:	68f8      	ldr	r0, [r7, #12]
   15560:	f002 fba8 	bl	17cb4 <__aeabi_f2d>
   15564:	4602      	mov	r2, r0
   15566:	460b      	mov	r3, r1
   15568:	4610      	mov	r0, r2
   1556a:	4619      	mov	r1, r3
   1556c:	a328      	add	r3, pc, #160	; (adr r3, 15610 <estimator_update_ir_estim+0x274>)
   1556e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15572:	f002 fe65 	bl	18240 <__aeabi_dcmplt>
   15576:	4603      	mov	r3, r0
   15578:	2b00      	cmp	r3, #0
   1557a:	d1dc      	bne.n	15536 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1557c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15584:	881b      	ldrh	r3, [r3, #0]
   15586:	b21b      	sxth	r3, r3
   15588:	4618      	mov	r0, r3
   1558a:	f002 ffd3 	bl	18534 <__aeabi_i2f>
   1558e:	4602      	mov	r2, r0
   15590:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15598:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1559a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1559e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a2:	68fa      	ldr	r2, [r7, #12]
   155a4:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   155a6:	68f8      	ldr	r0, [r7, #12]
   155a8:	f04f 0100 	mov.w	r1, #0
   155ac:	f003 f9b4 	bl	18918 <__aeabi_fcmplt>
   155b0:	4603      	mov	r3, r0
   155b2:	2b00      	cmp	r3, #0
   155b4:	d003      	beq.n	155be <estimator_update_ir_estim+0x222>
   155b6:	68fb      	ldr	r3, [r7, #12]
   155b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   155bc:	e000      	b.n	155c0 <estimator_update_ir_estim+0x224>
   155be:	68fb      	ldr	r3, [r7, #12]
   155c0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   155c2:	6878      	ldr	r0, [r7, #4]
   155c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   155c8:	f003 f9a6 	bl	18918 <__aeabi_fcmplt>
   155cc:	4603      	mov	r3, r0
   155ce:	2b00      	cmp	r3, #0
   155d0:	d100      	bne.n	155d4 <estimator_update_ir_estim+0x238>
   155d2:	e128      	b.n	15826 <estimator_update_ir_estim+0x48a>
   155d4:	6878      	ldr	r0, [r7, #4]
   155d6:	f002 fb6d 	bl	17cb4 <__aeabi_f2d>
   155da:	4602      	mov	r2, r0
   155dc:	460b      	mov	r3, r1
   155de:	4610      	mov	r0, r2
   155e0:	4619      	mov	r1, r3
   155e2:	a30f      	add	r3, pc, #60	; (adr r3, 15620 <estimator_update_ir_estim+0x284>)
   155e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   155e8:	f002 fe48 	bl	1827c <__aeabi_dcmpgt>
   155ec:	4603      	mov	r3, r0
   155ee:	2b00      	cmp	r3, #0
   155f0:	d11a      	bne.n	15628 <estimator_update_ir_estim+0x28c>
   155f2:	e118      	b.n	15826 <estimator_update_ir_estim+0x48a>
   155f4:	f3af 8000 	nop.w
   155f8:	9999999a 	.word	0x9999999a
   155fc:	3fb99999 	.word	0x3fb99999
   15600:	54442d18 	.word	0x54442d18
   15604:	401921fb 	.word	0x401921fb
   15608:	54442d18 	.word	0x54442d18
   1560c:	400921fb 	.word	0x400921fb
   15610:	54442d18 	.word	0x54442d18
   15614:	c00921fb 	.word	0xc00921fb
   15618:	51eb851f 	.word	0x51eb851f
   1561c:	40239eb8 	.word	0x40239eb8
   15620:	9999999a 	.word	0x9999999a
   15624:	3fa99999 	.word	0x3fa99999
   15628:	f240 5340 	movw	r3, #1344	; 0x540
   1562c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15630:	881b      	ldrh	r3, [r3, #0]
   15632:	b21b      	sxth	r3, r3
   15634:	425b      	negs	r3, r3
   15636:	0fda      	lsrs	r2, r3, #31
   15638:	4413      	add	r3, r2
   1563a:	105b      	asrs	r3, r3, #1
   1563c:	461a      	mov	r2, r3
   1563e:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15646:	881b      	ldrh	r3, [r3, #0]
   15648:	b21b      	sxth	r3, r3
   1564a:	429a      	cmp	r2, r3
   1564c:	f280 8098 	bge.w	15780 <estimator_update_ir_estim+0x3e4>
   15650:	f240 5340 	movw	r3, #1344	; 0x540
   15654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15658:	881b      	ldrh	r3, [r3, #0]
   1565a:	b21b      	sxth	r3, r3
   1565c:	0fda      	lsrs	r2, r3, #31
   1565e:	4413      	add	r3, r2
   15660:	105b      	asrs	r3, r3, #1
   15662:	b29a      	uxth	r2, r3
   15664:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1566c:	881b      	ldrh	r3, [r3, #0]
   1566e:	b212      	sxth	r2, r2
   15670:	b21b      	sxth	r3, r3
   15672:	429a      	cmp	r2, r3
   15674:	f340 8084 	ble.w	15780 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15678:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1567c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15680:	681a      	ldr	r2, [r3, #0]
   15682:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1568a:	681b      	ldr	r3, [r3, #0]
   1568c:	4610      	mov	r0, r2
   1568e:	4619      	mov	r1, r3
   15690:	f002 ffa4 	bl	185dc <__aeabi_fmul>
   15694:	4603      	mov	r3, r0
   15696:	4618      	mov	r0, r3
   15698:	f002 fb0c 	bl	17cb4 <__aeabi_f2d>
   1569c:	4604      	mov	r4, r0
   1569e:	460d      	mov	r5, r1
   156a0:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	4618      	mov	r0, r3
   156ac:	f002 fb02 	bl	17cb4 <__aeabi_f2d>
   156b0:	4602      	mov	r2, r0
   156b2:	460b      	mov	r3, r1
   156b4:	4610      	mov	r0, r2
   156b6:	4619      	mov	r1, r3
   156b8:	a367      	add	r3, pc, #412	; (adr r3, 15858 <estimator_update_ir_estim+0x4bc>)
   156ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   156be:	f002 fb4d 	bl	17d5c <__aeabi_dmul>
   156c2:	4602      	mov	r2, r0
   156c4:	460b      	mov	r3, r1
   156c6:	4620      	mov	r0, r4
   156c8:	4629      	mov	r1, r5
   156ca:	f002 f995 	bl	179f8 <__adddf3>
   156ce:	4602      	mov	r2, r0
   156d0:	460b      	mov	r3, r1
   156d2:	4610      	mov	r0, r2
   156d4:	4619      	mov	r1, r3
   156d6:	f002 fe23 	bl	18320 <__aeabi_d2f>
   156da:	4602      	mov	r2, r0
   156dc:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   156e6:	f64c 3340 	movw	r3, #52032	; 0xcb40
   156ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ee:	681a      	ldr	r2, [r3, #0]
   156f0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   156f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f8:	681b      	ldr	r3, [r3, #0]
   156fa:	4610      	mov	r0, r2
   156fc:	4619      	mov	r1, r3
   156fe:	f002 ff6d 	bl	185dc <__aeabi_fmul>
   15702:	4603      	mov	r3, r0
   15704:	4618      	mov	r0, r3
   15706:	f002 fad5 	bl	17cb4 <__aeabi_f2d>
   1570a:	4604      	mov	r4, r0
   1570c:	460d      	mov	r5, r1
   1570e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	4618      	mov	r0, r3
   1571a:	f002 facb 	bl	17cb4 <__aeabi_f2d>
   1571e:	4602      	mov	r2, r0
   15720:	460b      	mov	r3, r1
   15722:	4610      	mov	r0, r2
   15724:	4619      	mov	r1, r3
   15726:	a34c      	add	r3, pc, #304	; (adr r3, 15858 <estimator_update_ir_estim+0x4bc>)
   15728:	e9d3 2300 	ldrd	r2, r3, [r3]
   1572c:	f002 fb16 	bl	17d5c <__aeabi_dmul>
   15730:	4602      	mov	r2, r0
   15732:	460b      	mov	r3, r1
   15734:	4620      	mov	r0, r4
   15736:	4629      	mov	r1, r5
   15738:	f002 f95e 	bl	179f8 <__adddf3>
   1573c:	4602      	mov	r2, r0
   1573e:	460b      	mov	r3, r1
   15740:	4610      	mov	r0, r2
   15742:	4619      	mov	r1, r3
   15744:	f002 fdec 	bl	18320 <__aeabi_d2f>
   15748:	4602      	mov	r2, r0
   1574a:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1574e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15752:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15754:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1575c:	681a      	ldr	r2, [r3, #0]
   1575e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15766:	681b      	ldr	r3, [r3, #0]
   15768:	4610      	mov	r0, r2
   1576a:	4619      	mov	r1, r3
   1576c:	f002 ffea 	bl	18744 <__aeabi_fdiv>
   15770:	4603      	mov	r3, r0
   15772:	461a      	mov	r2, r3
   15774:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577c:	601a      	str	r2, [r3, #0]
   1577e:	e052      	b.n	15826 <estimator_update_ir_estim+0x48a>
   15780:	e051      	b.n	15826 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15782:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1578a:	2201      	movs	r2, #1
   1578c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1578e:	f240 5340 	movw	r3, #1344	; 0x540
   15792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15796:	881b      	ldrh	r3, [r3, #0]
   15798:	b21b      	sxth	r3, r3
   1579a:	4618      	mov	r0, r3
   1579c:	f002 feca 	bl	18534 <__aeabi_i2f>
   157a0:	4603      	mov	r3, r0
   157a2:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   157a4:	6838      	ldr	r0, [r7, #0]
   157a6:	6839      	ldr	r1, [r7, #0]
   157a8:	f002 ff18 	bl	185dc <__aeabi_fmul>
   157ac:	4603      	mov	r3, r0
   157ae:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   157b0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   157b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b8:	681b      	ldr	r3, [r3, #0]
   157ba:	4618      	mov	r0, r3
   157bc:	f002 fa7a 	bl	17cb4 <__aeabi_f2d>
   157c0:	4602      	mov	r2, r0
   157c2:	460b      	mov	r3, r1
   157c4:	4610      	mov	r0, r2
   157c6:	4619      	mov	r1, r3
   157c8:	f04f 0200 	mov.w	r2, #0
   157cc:	f04f 0300 	mov.w	r3, #0
   157d0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   157d4:	f002 fac2 	bl	17d5c <__aeabi_dmul>
   157d8:	4602      	mov	r2, r0
   157da:	460b      	mov	r3, r1
   157dc:	4614      	mov	r4, r2
   157de:	461d      	mov	r5, r3
   157e0:	6838      	ldr	r0, [r7, #0]
   157e2:	f002 fa67 	bl	17cb4 <__aeabi_f2d>
   157e6:	4602      	mov	r2, r0
   157e8:	460b      	mov	r3, r1
   157ea:	4620      	mov	r0, r4
   157ec:	4629      	mov	r1, r5
   157ee:	f002 fab5 	bl	17d5c <__aeabi_dmul>
   157f2:	4602      	mov	r2, r0
   157f4:	460b      	mov	r3, r1
   157f6:	4610      	mov	r0, r2
   157f8:	4619      	mov	r1, r3
   157fa:	f002 fd91 	bl	18320 <__aeabi_d2f>
   157fe:	4602      	mov	r2, r0
   15800:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15808:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1580a:	6838      	ldr	r0, [r7, #0]
   1580c:	f04f 0100 	mov.w	r1, #0
   15810:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15814:	f002 fee2 	bl	185dc <__aeabi_fmul>
   15818:	4603      	mov	r3, r0
   1581a:	461a      	mov	r2, r3
   1581c:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15824:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15826:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582e:	681a      	ldr	r2, [r3, #0]
   15830:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15838:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1583a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1583e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15842:	681a      	ldr	r2, [r3, #0]
   15844:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584c:	601a      	str	r2, [r3, #0]
}
   1584e:	3710      	adds	r7, #16
   15850:	46bd      	mov	sp, r7
   15852:	bdb0      	pop	{r4, r5, r7, pc}
   15854:	f3af 8000 	nop.w
   15858:	d916872b 	.word	0xd916872b
   1585c:	3feff7ce 	.word	0x3feff7ce

00015860 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15860:	b580      	push	{r7, lr}
   15862:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15864:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586c:	781b      	ldrb	r3, [r3, #0]
   1586e:	f003 0320 	and.w	r3, r3, #32
   15872:	2b00      	cmp	r3, #0
   15874:	d044      	beq.n	15900 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15876:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1587a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1587e:	681a      	ldr	r2, [r3, #0]
   15880:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	601a      	str	r2, [r3, #0]
   1588a:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1588e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15892:	681a      	ldr	r2, [r3, #0]
   15894:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1589c:	601a      	str	r2, [r3, #0]
   1589e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   158a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a6:	681a      	ldr	r2, [r3, #0]
   158a8:	f64c 3304 	movw	r3, #51972	; 0xcb04
   158ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   158b2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   158b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ba:	681a      	ldr	r2, [r3, #0]
   158bc:	f64c 3334 	movw	r3, #52020	; 0xcb34
   158c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c4:	601a      	str	r2, [r3, #0]
   158c6:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   158ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ce:	681a      	ldr	r2, [r3, #0]
   158d0:	f64c 3338 	movw	r3, #52024	; 0xcb38
   158d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d8:	601a      	str	r2, [r3, #0]
   158da:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	681a      	ldr	r2, [r3, #0]
   158e4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   158e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ec:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   158ee:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   158f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f6:	881b      	ldrh	r3, [r3, #0]
   158f8:	2b00      	cmp	r3, #0
   158fa:	d001      	beq.n	15900 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   158fc:	f7ff fd4e 	bl	1539c <estimator_update_ir_estim>
  }
}
   15900:	bd80      	pop	{r7, pc}
   15902:	bf00      	nop

00015904 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   15904:	b480      	push	{r7}
   15906:	af00      	add	r7, sp, #0
  
}
   15908:	46bd      	mov	sp, r7
   1590a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1590e:	4770      	bx	lr

00015910 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15910:	b5b0      	push	{r4, r5, r7, lr}
   15912:	b082      	sub	sp, #8
   15914:	af00      	add	r7, sp, #0
   15916:	4603      	mov	r3, r0
   15918:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1591a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1591e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15922:	781b      	ldrb	r3, [r3, #0]
   15924:	2b01      	cmp	r3, #1
   15926:	f040 80e0 	bne.w	15aea <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1592a:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   1592e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15932:	781b      	ldrb	r3, [r3, #0]
   15934:	2b02      	cmp	r3, #2
   15936:	d168      	bne.n	15a0a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15938:	79fb      	ldrb	r3, [r7, #7]
   1593a:	2b00      	cmp	r3, #0
   1593c:	d013      	beq.n	15966 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1593e:	f240 5344 	movw	r3, #1348	; 0x544
   15942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15946:	881a      	ldrh	r2, [r3, #0]
   15948:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1594c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15950:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15952:	f24c 6350 	movw	r3, #50768	; 0xc650
   15956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1595a:	895a      	ldrh	r2, [r3, #10]
   1595c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15964:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15966:	f24c 6350 	movw	r3, #50768	; 0xc650
   1596a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1596e:	895b      	ldrh	r3, [r3, #10]
   15970:	b21a      	sxth	r2, r3
   15972:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1597a:	881b      	ldrh	r3, [r3, #0]
   1597c:	b21b      	sxth	r3, r3
   1597e:	1ad3      	subs	r3, r2, r3
   15980:	4618      	mov	r0, r3
   15982:	f002 fdd7 	bl	18534 <__aeabi_i2f>
   15986:	4603      	mov	r3, r0
   15988:	4618      	mov	r0, r3
   1598a:	f002 f993 	bl	17cb4 <__aeabi_f2d>
   1598e:	4602      	mov	r2, r0
   15990:	460b      	mov	r3, r1
   15992:	4610      	mov	r0, r2
   15994:	4619      	mov	r1, r3
   15996:	f04f 0200 	mov.w	r2, #0
   1599a:	f04f 0300 	mov.w	r3, #0
   1599e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   159a2:	f002 f9db 	bl	17d5c <__aeabi_dmul>
   159a6:	4602      	mov	r2, r0
   159a8:	460b      	mov	r3, r1
   159aa:	4610      	mov	r0, r2
   159ac:	4619      	mov	r1, r3
   159ae:	f04f 0200 	mov.w	r2, #0
   159b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   159b6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   159ba:	f002 faf9 	bl	17fb0 <__aeabi_ddiv>
   159be:	4602      	mov	r2, r0
   159c0:	460b      	mov	r3, r1
   159c2:	4610      	mov	r0, r2
   159c4:	4619      	mov	r1, r3
   159c6:	f002 fc63 	bl	18290 <__aeabi_d2iz>
   159ca:	4603      	mov	r3, r0
   159cc:	b29b      	uxth	r3, r3
   159ce:	b29a      	uxth	r2, r3
   159d0:	f64c 3362 	movw	r3, #52066	; 0xcb62
   159d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d8:	881b      	ldrh	r3, [r3, #0]
   159da:	b29b      	uxth	r3, r3
   159dc:	4413      	add	r3, r2
   159de:	b29b      	uxth	r3, r3
   159e0:	b29a      	uxth	r2, r3
   159e2:	f240 5344 	movw	r3, #1348	; 0x544
   159e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ea:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   159ec:	f240 5344 	movw	r3, #1348	; 0x544
   159f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159f4:	881b      	ldrh	r3, [r3, #0]
   159f6:	b21b      	sxth	r3, r3
   159f8:	4618      	mov	r0, r3
   159fa:	f002 fd9b 	bl	18534 <__aeabi_i2f>
   159fe:	4602      	mov	r2, r0
   15a00:	f24c 5338 	movw	r3, #50488	; 0xc538
   15a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a08:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a0a:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a12:	781b      	ldrb	r3, [r3, #0]
   15a14:	2b02      	cmp	r3, #2
   15a16:	d168      	bne.n	15aea <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15a18:	79fb      	ldrb	r3, [r7, #7]
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	d013      	beq.n	15a46 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15a1e:	f240 5342 	movw	r3, #1346	; 0x542
   15a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a26:	881a      	ldrh	r2, [r3, #0]
   15a28:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a30:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15a32:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a3a:	899a      	ldrh	r2, [r3, #12]
   15a3c:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a44:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15a46:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a4e:	899b      	ldrh	r3, [r3, #12]
   15a50:	b21a      	sxth	r2, r3
   15a52:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a5a:	881b      	ldrh	r3, [r3, #0]
   15a5c:	b21b      	sxth	r3, r3
   15a5e:	1ad3      	subs	r3, r2, r3
   15a60:	4618      	mov	r0, r3
   15a62:	f002 fd67 	bl	18534 <__aeabi_i2f>
   15a66:	4603      	mov	r3, r0
   15a68:	4618      	mov	r0, r3
   15a6a:	f002 f923 	bl	17cb4 <__aeabi_f2d>
   15a6e:	4602      	mov	r2, r0
   15a70:	460b      	mov	r3, r1
   15a72:	4610      	mov	r0, r2
   15a74:	4619      	mov	r1, r3
   15a76:	f04f 0200 	mov.w	r2, #0
   15a7a:	f04f 0300 	mov.w	r3, #0
   15a7e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15a82:	f002 f96b 	bl	17d5c <__aeabi_dmul>
   15a86:	4602      	mov	r2, r0
   15a88:	460b      	mov	r3, r1
   15a8a:	4610      	mov	r0, r2
   15a8c:	4619      	mov	r1, r3
   15a8e:	f04f 0200 	mov.w	r2, #0
   15a92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a96:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a9a:	f002 fa89 	bl	17fb0 <__aeabi_ddiv>
   15a9e:	4602      	mov	r2, r0
   15aa0:	460b      	mov	r3, r1
   15aa2:	4610      	mov	r0, r2
   15aa4:	4619      	mov	r1, r3
   15aa6:	f002 fbf3 	bl	18290 <__aeabi_d2iz>
   15aaa:	4603      	mov	r3, r0
   15aac:	b29b      	uxth	r3, r3
   15aae:	b29a      	uxth	r2, r3
   15ab0:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab8:	881b      	ldrh	r3, [r3, #0]
   15aba:	b29b      	uxth	r3, r3
   15abc:	4413      	add	r3, r2
   15abe:	b29b      	uxth	r3, r3
   15ac0:	b29a      	uxth	r2, r3
   15ac2:	f240 5342 	movw	r3, #1346	; 0x542
   15ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aca:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15acc:	f240 5342 	movw	r3, #1346	; 0x542
   15ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ad4:	881b      	ldrh	r3, [r3, #0]
   15ad6:	b21b      	sxth	r3, r3
   15ad8:	4618      	mov	r0, r3
   15ada:	f002 fd2b 	bl	18534 <__aeabi_i2f>
   15ade:	4602      	mov	r2, r0
   15ae0:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15aea:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15af2:	781b      	ldrb	r3, [r3, #0]
   15af4:	2b02      	cmp	r3, #2
   15af6:	f040 80da 	bne.w	15cae <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15afa:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b02:	781b      	ldrb	r3, [r3, #0]
   15b04:	2b02      	cmp	r3, #2
   15b06:	d165      	bne.n	15bd4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15b08:	79fb      	ldrb	r3, [r7, #7]
   15b0a:	2b00      	cmp	r3, #0
   15b0c:	d013      	beq.n	15b36 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15b0e:	f240 5358 	movw	r3, #1368	; 0x558
   15b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b16:	681a      	ldr	r2, [r3, #0]
   15b18:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b20:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15b22:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b2a:	895a      	ldrh	r2, [r3, #10]
   15b2c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b34:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15b36:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b3e:	681b      	ldr	r3, [r3, #0]
   15b40:	4618      	mov	r0, r3
   15b42:	f002 f8b7 	bl	17cb4 <__aeabi_f2d>
   15b46:	4604      	mov	r4, r0
   15b48:	460d      	mov	r5, r1
   15b4a:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b52:	895b      	ldrh	r3, [r3, #10]
   15b54:	b21a      	sxth	r2, r3
   15b56:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b5e:	881b      	ldrh	r3, [r3, #0]
   15b60:	b21b      	sxth	r3, r3
   15b62:	1ad3      	subs	r3, r2, r3
   15b64:	4618      	mov	r0, r3
   15b66:	f002 fce5 	bl	18534 <__aeabi_i2f>
   15b6a:	4603      	mov	r3, r0
   15b6c:	4618      	mov	r0, r3
   15b6e:	f002 f8a1 	bl	17cb4 <__aeabi_f2d>
   15b72:	4602      	mov	r2, r0
   15b74:	460b      	mov	r3, r1
   15b76:	4610      	mov	r0, r2
   15b78:	4619      	mov	r1, r3
   15b7a:	a34f      	add	r3, pc, #316	; (adr r3, 15cb8 <inflight_calib+0x3a8>)
   15b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b80:	f002 f8ec 	bl	17d5c <__aeabi_dmul>
   15b84:	4602      	mov	r2, r0
   15b86:	460b      	mov	r3, r1
   15b88:	4610      	mov	r0, r2
   15b8a:	4619      	mov	r1, r3
   15b8c:	f04f 0200 	mov.w	r2, #0
   15b90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b94:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b98:	f002 fa0a 	bl	17fb0 <__aeabi_ddiv>
   15b9c:	4602      	mov	r2, r0
   15b9e:	460b      	mov	r3, r1
   15ba0:	4620      	mov	r0, r4
   15ba2:	4629      	mov	r1, r5
   15ba4:	f001 ff28 	bl	179f8 <__adddf3>
   15ba8:	4602      	mov	r2, r0
   15baa:	460b      	mov	r3, r1
   15bac:	4610      	mov	r0, r2
   15bae:	4619      	mov	r1, r3
   15bb0:	f002 fbb6 	bl	18320 <__aeabi_d2f>
   15bb4:	4602      	mov	r2, r0
   15bb6:	f240 5358 	movw	r3, #1368	; 0x558
   15bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bbe:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15bc0:	f240 5358 	movw	r3, #1368	; 0x558
   15bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bc8:	681a      	ldr	r2, [r3, #0]
   15bca:	f24c 5338 	movw	r3, #50488	; 0xc538
   15bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bd2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15bd4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bdc:	781b      	ldrb	r3, [r3, #0]
   15bde:	2b02      	cmp	r3, #2
   15be0:	d165      	bne.n	15cae <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15be2:	79fb      	ldrb	r3, [r7, #7]
   15be4:	2b00      	cmp	r3, #0
   15be6:	d013      	beq.n	15c10 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15be8:	f240 535c 	movw	r3, #1372	; 0x55c
   15bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bf0:	681a      	ldr	r2, [r3, #0]
   15bf2:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bfa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15bfc:	f24c 6350 	movw	r3, #50768	; 0xc650
   15c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c04:	899a      	ldrh	r2, [r3, #12]
   15c06:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c0e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15c10:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c18:	681b      	ldr	r3, [r3, #0]
   15c1a:	4618      	mov	r0, r3
   15c1c:	f002 f84a 	bl	17cb4 <__aeabi_f2d>
   15c20:	4604      	mov	r4, r0
   15c22:	460d      	mov	r5, r1
   15c24:	f24c 6350 	movw	r3, #50768	; 0xc650
   15c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c2c:	899b      	ldrh	r3, [r3, #12]
   15c2e:	b21a      	sxth	r2, r3
   15c30:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c38:	881b      	ldrh	r3, [r3, #0]
   15c3a:	b21b      	sxth	r3, r3
   15c3c:	1ad3      	subs	r3, r2, r3
   15c3e:	4618      	mov	r0, r3
   15c40:	f002 fc78 	bl	18534 <__aeabi_i2f>
   15c44:	4603      	mov	r3, r0
   15c46:	4618      	mov	r0, r3
   15c48:	f002 f834 	bl	17cb4 <__aeabi_f2d>
   15c4c:	4602      	mov	r2, r0
   15c4e:	460b      	mov	r3, r1
   15c50:	4610      	mov	r0, r2
   15c52:	4619      	mov	r1, r3
   15c54:	a31a      	add	r3, pc, #104	; (adr r3, 15cc0 <inflight_calib+0x3b0>)
   15c56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c5a:	f002 f87f 	bl	17d5c <__aeabi_dmul>
   15c5e:	4602      	mov	r2, r0
   15c60:	460b      	mov	r3, r1
   15c62:	4610      	mov	r0, r2
   15c64:	4619      	mov	r1, r3
   15c66:	f04f 0200 	mov.w	r2, #0
   15c6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15c6e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15c72:	f002 f99d 	bl	17fb0 <__aeabi_ddiv>
   15c76:	4602      	mov	r2, r0
   15c78:	460b      	mov	r3, r1
   15c7a:	4620      	mov	r0, r4
   15c7c:	4629      	mov	r1, r5
   15c7e:	f001 febb 	bl	179f8 <__adddf3>
   15c82:	4602      	mov	r2, r0
   15c84:	460b      	mov	r3, r1
   15c86:	4610      	mov	r0, r2
   15c88:	4619      	mov	r1, r3
   15c8a:	f002 fb49 	bl	18320 <__aeabi_d2f>
   15c8e:	4602      	mov	r2, r0
   15c90:	f240 535c 	movw	r3, #1372	; 0x55c
   15c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c98:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15c9a:	f240 535c 	movw	r3, #1372	; 0x55c
   15c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ca2:	681a      	ldr	r2, [r3, #0]
   15ca4:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15cac:	601a      	str	r2, [r3, #0]
    }
  }
}
   15cae:	3708      	adds	r7, #8
   15cb0:	46bd      	mov	sp, r7
   15cb2:	bdb0      	pop	{r4, r5, r7, pc}
   15cb4:	f3af 8000 	nop.w
   15cb8:	9999999a 	.word	0x9999999a
   15cbc:	3fb99999 	.word	0x3fb99999
   15cc0:	9999999a 	.word	0x9999999a
   15cc4:	bfc99999 	.word	0xbfc99999

00015cc8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15ccc:	b08e      	sub	sp, #56	; 0x38
   15cce:	af00      	add	r7, sp, #0
   15cd0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15cd4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15cd8:	a357      	add	r3, pc, #348	; (adr r3, 15e38 <pp_atan2+0x170>)
   15cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ce6:	f04f 0200 	mov.w	r2, #0
   15cea:	f04f 0300 	mov.w	r3, #0
   15cee:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15cf2:	f002 f833 	bl	17d5c <__aeabi_dmul>
   15cf6:	4602      	mov	r2, r0
   15cf8:	460b      	mov	r3, r1
   15cfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d02:	f04f 0200 	mov.w	r2, #0
   15d06:	f04f 0300 	mov.w	r3, #0
   15d0a:	f002 fa99 	bl	18240 <__aeabi_dcmplt>
   15d0e:	4603      	mov	r3, r0
   15d10:	2b00      	cmp	r3, #0
   15d12:	d009      	beq.n	15d28 <pp_atan2+0x60>
   15d14:	a14a      	add	r1, pc, #296	; (adr r1, 15e40 <pp_atan2+0x178>)
   15d16:	e9d1 0100 	ldrd	r0, r1, [r1]
   15d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d1e:	f001 fe69 	bl	179f4 <__aeabi_dsub>
   15d22:	4602      	mov	r2, r0
   15d24:	460b      	mov	r3, r1
   15d26:	e008      	b.n	15d3a <pp_atan2+0x72>
   15d28:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d2c:	a344      	add	r3, pc, #272	; (adr r3, 15e40 <pp_atan2+0x178>)
   15d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d32:	f001 fe61 	bl	179f8 <__adddf3>
   15d36:	4602      	mov	r2, r0
   15d38:	460b      	mov	r3, r1
   15d3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d42:	f04f 0200 	mov.w	r2, #0
   15d46:	f04f 0300 	mov.w	r3, #0
   15d4a:	f002 fa97 	bl	1827c <__aeabi_dcmpgt>
   15d4e:	4603      	mov	r3, r0
   15d50:	2b00      	cmp	r3, #0
   15d52:	d02a      	beq.n	15daa <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d5c:	f001 fe4a 	bl	179f4 <__aeabi_dsub>
   15d60:	4602      	mov	r2, r0
   15d62:	460b      	mov	r3, r1
   15d64:	4690      	mov	r8, r2
   15d66:	4699      	mov	r9, r3
   15d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d70:	f001 fe42 	bl	179f8 <__adddf3>
   15d74:	4602      	mov	r2, r0
   15d76:	460b      	mov	r3, r1
   15d78:	4640      	mov	r0, r8
   15d7a:	4649      	mov	r1, r9
   15d7c:	f002 f918 	bl	17fb0 <__aeabi_ddiv>
   15d80:	4602      	mov	r2, r0
   15d82:	460b      	mov	r3, r1
   15d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15d88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d90:	f001 ffe4 	bl	17d5c <__aeabi_dmul>
   15d94:	4602      	mov	r2, r0
   15d96:	460b      	mov	r3, r1
   15d98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d9c:	f001 fe2a 	bl	179f4 <__aeabi_dsub>
   15da0:	4602      	mov	r2, r0
   15da2:	460b      	mov	r3, r1
   15da4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15da8:	e029      	b.n	15dfe <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15db2:	f001 fe21 	bl	179f8 <__adddf3>
   15db6:	4602      	mov	r2, r0
   15db8:	460b      	mov	r3, r1
   15dba:	4690      	mov	r8, r2
   15dbc:	4699      	mov	r9, r3
   15dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15dc6:	f001 fe15 	bl	179f4 <__aeabi_dsub>
   15dca:	4602      	mov	r2, r0
   15dcc:	460b      	mov	r3, r1
   15dce:	4640      	mov	r0, r8
   15dd0:	4649      	mov	r1, r9
   15dd2:	f002 f8ed 	bl	17fb0 <__aeabi_ddiv>
   15dd6:	4602      	mov	r2, r0
   15dd8:	460b      	mov	r3, r1
   15dda:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15de2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15de6:	f001 ffb9 	bl	17d5c <__aeabi_dmul>
   15dea:	4602      	mov	r2, r0
   15dec:	460b      	mov	r3, r1
   15dee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15df2:	f001 fdff 	bl	179f4 <__aeabi_dsub>
   15df6:	4602      	mov	r2, r0
   15df8:	460b      	mov	r3, r1
   15dfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
   15e02:	f04f 0200 	mov.w	r2, #0
   15e06:	f04f 0300 	mov.w	r3, #0
   15e0a:	f002 fa19 	bl	18240 <__aeabi_dcmplt>
   15e0e:	4603      	mov	r3, r0
   15e10:	2b00      	cmp	r3, #0
   15e12:	d004      	beq.n	15e1e <pp_atan2+0x156>
		return (-angle);
   15e14:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e1c:	e001      	b.n	15e22 <pp_atan2+0x15a>
	else
		return angle;
   15e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15e22:	4622      	mov	r2, r4
   15e24:	462b      	mov	r3, r5
}
   15e26:	4610      	mov	r0, r2
   15e28:	4619      	mov	r1, r3
   15e2a:	3738      	adds	r7, #56	; 0x38
   15e2c:	46bd      	mov	sp, r7
   15e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15e32:	bf00      	nop
   15e34:	f3af 8000 	nop.w
   15e38:	54442d18 	.word	0x54442d18
   15e3c:	3fe921fb 	.word	0x3fe921fb
   15e40:	d9d7bdbb 	.word	0xd9d7bdbb
   15e44:	3ddb7cdf 	.word	0x3ddb7cdf

00015e48 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15e48:	b5b0      	push	{r4, r5, r7, lr}
   15e4a:	b08c      	sub	sp, #48	; 0x30
   15e4c:	af00      	add	r7, sp, #0
   15e4e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15e52:	e9d7 2300 	ldrd	r2, r3, [r7]
   15e56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e5a:	2301      	movs	r3, #1
   15e5c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15e5e:	e00a      	b.n	15e76 <pp_sin+0x2e>
   15e60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e64:	a35a      	add	r3, pc, #360	; (adr r3, 15fd0 <pp_sin+0x188>)
   15e66:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e6a:	f001 fdc5 	bl	179f8 <__adddf3>
   15e6e:	4602      	mov	r2, r0
   15e70:	460b      	mov	r3, r1
   15e72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e7a:	a357      	add	r3, pc, #348	; (adr r3, 15fd8 <pp_sin+0x190>)
   15e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e80:	f002 f9de 	bl	18240 <__aeabi_dcmplt>
   15e84:	4603      	mov	r3, r0
   15e86:	2b00      	cmp	r3, #0
   15e88:	d1ea      	bne.n	15e60 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15e8a:	e00a      	b.n	15ea2 <pp_sin+0x5a>
   15e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e90:	a34f      	add	r3, pc, #316	; (adr r3, 15fd0 <pp_sin+0x188>)
   15e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e96:	f001 fdad 	bl	179f4 <__aeabi_dsub>
   15e9a:	4602      	mov	r2, r0
   15e9c:	460b      	mov	r3, r1
   15e9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15ea2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ea6:	a34e      	add	r3, pc, #312	; (adr r3, 15fe0 <pp_sin+0x198>)
   15ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eac:	f002 f9e6 	bl	1827c <__aeabi_dcmpgt>
   15eb0:	4603      	mov	r3, r0
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d1ea      	bne.n	15e8c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eba:	a34b      	add	r3, pc, #300	; (adr r3, 15fe8 <pp_sin+0x1a0>)
   15ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ec0:	f002 f9dc 	bl	1827c <__aeabi_dcmpgt>
   15ec4:	4603      	mov	r3, r0
   15ec6:	2b00      	cmp	r3, #0
   15ec8:	d00d      	beq.n	15ee6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ece:	a348      	add	r3, pc, #288	; (adr r3, 15ff0 <pp_sin+0x1a8>)
   15ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ed4:	f001 fd8e 	bl	179f4 <__aeabi_dsub>
   15ed8:	4602      	mov	r2, r0
   15eda:	460b      	mov	r3, r1
   15edc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15ee0:	f04f 33ff 	mov.w	r3, #4294967295
   15ee4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eea:	a343      	add	r3, pc, #268	; (adr r3, 15ff8 <pp_sin+0x1b0>)
   15eec:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ef0:	f002 f85e 	bl	17fb0 <__aeabi_ddiv>
   15ef4:	4602      	mov	r2, r0
   15ef6:	460b      	mov	r3, r1
   15ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15efc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f04:	f001 ff2a 	bl	17d5c <__aeabi_dmul>
   15f08:	4602      	mov	r2, r0
   15f0a:	460b      	mov	r3, r1
   15f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15f14:	a33a      	add	r3, pc, #232	; (adr r3, 16000 <pp_sin+0x1b8>)
   15f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f1a:	f001 ff1f 	bl	17d5c <__aeabi_dmul>
   15f1e:	4602      	mov	r2, r0
   15f20:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15f22:	4610      	mov	r0, r2
   15f24:	4619      	mov	r1, r3
   15f26:	a338      	add	r3, pc, #224	; (adr r3, 16008 <pp_sin+0x1c0>)
   15f28:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f2c:	f001 fd62 	bl	179f4 <__aeabi_dsub>
   15f30:	4602      	mov	r2, r0
   15f32:	460b      	mov	r3, r1
   15f34:	4610      	mov	r0, r2
   15f36:	4619      	mov	r1, r3
   15f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f3c:	f001 ff0e 	bl	17d5c <__aeabi_dmul>
   15f40:	4602      	mov	r2, r0
   15f42:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15f44:	4610      	mov	r0, r2
   15f46:	4619      	mov	r1, r3
   15f48:	a331      	add	r3, pc, #196	; (adr r3, 16010 <pp_sin+0x1c8>)
   15f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f4e:	f001 fd53 	bl	179f8 <__adddf3>
   15f52:	4602      	mov	r2, r0
   15f54:	460b      	mov	r3, r1
   15f56:	4610      	mov	r0, r2
   15f58:	4619      	mov	r1, r3
   15f5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f5e:	f001 fefd 	bl	17d5c <__aeabi_dmul>
   15f62:	4602      	mov	r2, r0
   15f64:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15f66:	4610      	mov	r0, r2
   15f68:	4619      	mov	r1, r3
   15f6a:	a32b      	add	r3, pc, #172	; (adr r3, 16018 <pp_sin+0x1d0>)
   15f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f70:	f001 fd40 	bl	179f4 <__aeabi_dsub>
   15f74:	4602      	mov	r2, r0
   15f76:	460b      	mov	r3, r1
   15f78:	4610      	mov	r0, r2
   15f7a:	4619      	mov	r1, r3
   15f7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f80:	f001 feec 	bl	17d5c <__aeabi_dmul>
   15f84:	4602      	mov	r2, r0
   15f86:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15f88:	4610      	mov	r0, r2
   15f8a:	4619      	mov	r1, r3
   15f8c:	a324      	add	r3, pc, #144	; (adr r3, 16020 <pp_sin+0x1d8>)
   15f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f92:	f001 fd31 	bl	179f8 <__adddf3>
   15f96:	4602      	mov	r2, r0
   15f98:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15f9a:	4610      	mov	r0, r2
   15f9c:	4619      	mov	r1, r3
   15f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15fa2:	f001 fedb 	bl	17d5c <__aeabi_dmul>
   15fa6:	4602      	mov	r2, r0
   15fa8:	460b      	mov	r3, r1
   15faa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15fb0:	2b00      	cmp	r3, #0
   15fb2:	da04      	bge.n	15fbe <pp_sin+0x176>
   15fb4:	68bc      	ldr	r4, [r7, #8]
   15fb6:	68fb      	ldr	r3, [r7, #12]
   15fb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15fbc:	e001      	b.n	15fc2 <pp_sin+0x17a>
   15fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15fc2:	4622      	mov	r2, r4
   15fc4:	462b      	mov	r3, r5
}
   15fc6:	4610      	mov	r0, r2
   15fc8:	4619      	mov	r1, r3
   15fca:	3730      	adds	r7, #48	; 0x30
   15fcc:	46bd      	mov	sp, r7
   15fce:	bdb0      	pop	{r4, r5, r7, pc}
   15fd0:	54442d18 	.word	0x54442d18
   15fd4:	401921fb 	.word	0x401921fb
   15fd8:	54442d18 	.word	0x54442d18
   15fdc:	bff921fb 	.word	0xbff921fb
   15fe0:	7f3321d2 	.word	0x7f3321d2
   15fe4:	4012d97c 	.word	0x4012d97c
   15fe8:	54442d18 	.word	0x54442d18
   15fec:	3ff921fb 	.word	0x3ff921fb
   15ff0:	54442d18 	.word	0x54442d18
   15ff4:	400921fb 	.word	0x400921fb
   15ff8:	5443d6f4 	.word	0x5443d6f4
   15ffc:	3ff921fb 	.word	0x3ff921fb
   16000:	48a890af 	.word	0x48a890af
   16004:	3f23daf7 	.word	0x3f23daf7
   16008:	645b6d0e 	.word	0x645b6d0e
   1600c:	3f7324cc 	.word	0x3f7324cc
   16010:	f65619a5 	.word	0xf65619a5
   16014:	3fb4668a 	.word	0x3fb4668a
   16018:	16acf9cd 	.word	0x16acf9cd
   1601c:	3fe4abbc 	.word	0x3fe4abbc
   16020:	520817f7 	.word	0x520817f7
   16024:	3ff921fb 	.word	0x3ff921fb

00016028 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   16028:	b480      	push	{r7}
   1602a:	b083      	sub	sp, #12
   1602c:	af00      	add	r7, sp, #0
   1602e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   16032:	4610      	mov	r0, r2
   16034:	4619      	mov	r1, r3
   16036:	370c      	adds	r7, #12
   16038:	46bd      	mov	sp, r7
   1603a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1603e:	4770      	bx	lr

00016040 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   16040:	b480      	push	{r7}
   16042:	b083      	sub	sp, #12
   16044:	af00      	add	r7, sp, #0
   16046:	4603      	mov	r3, r0
   16048:	6039      	str	r1, [r7, #0]
   1604a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1604c:	79fa      	ldrb	r2, [r7, #7]
   1604e:	f64c 3380 	movw	r3, #52096	; 0xcb80
   16052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16056:	6839      	ldr	r1, [r7, #0]
   16058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1605c:	370c      	adds	r7, #12
   1605e:	46bd      	mov	sp, r7
   16060:	f85d 7b04 	ldr.w	r7, [sp], #4
   16064:	4770      	bx	lr
   16066:	bf00      	nop

00016068 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   16068:	b480      	push	{r7}
   1606a:	b083      	sub	sp, #12
   1606c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1606e:	f242 0315 	movw	r3, #8213	; 0x2015
   16072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16076:	2200      	movs	r2, #0
   16078:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1607a:	f242 0314 	movw	r3, #8212	; 0x2014
   1607e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16082:	2200      	movs	r2, #0
   16084:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   16086:	f242 0307 	movw	r3, #8199	; 0x2007
   1608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608e:	22c0      	movs	r2, #192	; 0xc0
   16090:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   16092:	f242 0306 	movw	r3, #8198	; 0x2006
   16096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1609a:	22cf      	movs	r2, #207	; 0xcf
   1609c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1609e:	2300      	movs	r3, #0
   160a0:	71fb      	strb	r3, [r7, #7]
   160a2:	e00a      	b.n	160ba <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   160a4:	79fa      	ldrb	r2, [r7, #7]
   160a6:	f64c 3380 	movw	r3, #52096	; 0xcb80
   160aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ae:	2100      	movs	r1, #0
   160b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   160b4:	79fb      	ldrb	r3, [r7, #7]
   160b6:	3301      	adds	r3, #1
   160b8:	71fb      	strb	r3, [r7, #7]
   160ba:	79fb      	ldrb	r3, [r7, #7]
   160bc:	2b07      	cmp	r3, #7
   160be:	d9f1      	bls.n	160a4 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   160c0:	370c      	adds	r7, #12
   160c2:	46bd      	mov	sp, r7
   160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   160c8:	4770      	bx	lr
   160ca:	bf00      	nop

000160cc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   160cc:	b480      	push	{r7}
   160ce:	b083      	sub	sp, #12
   160d0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   160d2:	f242 0326 	movw	r3, #8230	; 0x2026
   160d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160da:	881b      	ldrh	r3, [r3, #0]
   160dc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   160de:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   160e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e6:	881b      	ldrh	r3, [r3, #0]
   160e8:	88fa      	ldrh	r2, [r7, #6]
   160ea:	1ad3      	subs	r3, r2, r3
   160ec:	80bb      	strh	r3, [r7, #4]
  last		= this;
   160ee:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   160f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f6:	88fa      	ldrh	r2, [r7, #6]
   160f8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   160fa:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16102:	781b      	ldrb	r3, [r3, #0]
   16104:	2b00      	cmp	r3, #0
   16106:	d11e      	bne.n	16146 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16108:	f242 0324 	movw	r3, #8228	; 0x2024
   1610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16110:	781b      	ldrb	r3, [r3, #0]
   16112:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   16114:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	78fa      	ldrb	r2, [r7, #3]
   16120:	1ad3      	subs	r3, r2, r3
   16122:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   16124:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612c:	78fa      	ldrb	r2, [r7, #3]
   1612e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16130:	78bb      	ldrb	r3, [r7, #2]
   16132:	2b6d      	cmp	r3, #109	; 0x6d
   16134:	d906      	bls.n	16144 <__vector_34+0x78>
      state = 1;
   16136:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1613a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1613e:	2201      	movs	r2, #1
   16140:	701a      	strb	r2, [r3, #0]
   16142:	e053      	b.n	161ec <__vector_34+0x120>
   16144:	e052      	b.n	161ec <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   16146:	88bb      	ldrh	r3, [r7, #4]
   16148:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1614c:	d304      	bcc.n	16158 <__vector_34+0x8c>
   1614e:	88ba      	ldrh	r2, [r7, #4]
   16150:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16154:	429a      	cmp	r2, r3
   16156:	d911      	bls.n	1617c <__vector_34+0xb0>
      RestartPpmCycle();
   16158:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1615c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16160:	2200      	movs	r2, #0
   16162:	701a      	strb	r2, [r3, #0]
   16164:	f242 0324 	movw	r3, #8228	; 0x2024
   16168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1616c:	781b      	ldrb	r3, [r3, #0]
   1616e:	b2da      	uxtb	r2, r3
   16170:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16178:	701a      	strb	r2, [r3, #0]
   1617a:	e038      	b.n	161ee <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1617c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16184:	781b      	ldrb	r3, [r3, #0]
   16186:	1e5a      	subs	r2, r3, #1
   16188:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1618c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16190:	88b9      	ldrh	r1, [r7, #4]
   16192:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16196:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619e:	781b      	ldrb	r3, [r3, #0]
   161a0:	2b08      	cmp	r3, #8
   161a2:	d917      	bls.n	161d4 <__vector_34+0x108>
      ppm_valid	= 1;
   161a4:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   161a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ac:	2201      	movs	r2, #1
   161ae:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   161b0:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b8:	2200      	movs	r2, #0
   161ba:	701a      	strb	r2, [r3, #0]
   161bc:	f242 0324 	movw	r3, #8228	; 0x2024
   161c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161c4:	781b      	ldrb	r3, [r3, #0]
   161c6:	b2da      	uxtb	r2, r3
   161c8:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   161cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d0:	701a      	strb	r2, [r3, #0]
   161d2:	e00c      	b.n	161ee <__vector_34+0x122>
    } else 
      state++;
   161d4:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	3301      	adds	r3, #1
   161e0:	b2da      	uxtb	r2, r3
   161e2:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ea:	701a      	strb	r2, [r3, #0]
  }
  return;
   161ec:	bf00      	nop
}
   161ee:	370c      	adds	r7, #12
   161f0:	46bd      	mov	sp, r7
   161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   161f6:	4770      	bx	lr

000161f8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   161f8:	b590      	push	{r4, r7, lr}
   161fa:	b083      	sub	sp, #12
   161fc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   161fe:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16206:	881b      	ldrh	r3, [r3, #0]
   16208:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   1620c:	b29b      	uxth	r3, r3
   1620e:	80fb      	strh	r3, [r7, #6]
   16210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16214:	4618      	mov	r0, r3
   16216:	f002 f98d 	bl	18534 <__aeabi_i2f>
   1621a:	4603      	mov	r3, r0
   1621c:	4618      	mov	r0, r3
   1621e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   16222:	f002 f9db 	bl	185dc <__aeabi_fmul>
   16226:	4603      	mov	r3, r0
   16228:	4618      	mov	r0, r3
   1622a:	f002 fb9d 	bl	18968 <__aeabi_f2iz>
   1622e:	4603      	mov	r3, r0
   16230:	b29a      	uxth	r2, r3
   16232:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623a:	801a      	strh	r2, [r3, #0]
   1623c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16244:	881b      	ldrh	r3, [r3, #0]
   16246:	b21b      	sxth	r3, r3
   16248:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1624c:	dd07      	ble.n	1625e <last_radio_from_ppm+0x66>
   1624e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16256:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1625a:	801a      	strh	r2, [r3, #0]
   1625c:	e00d      	b.n	1627a <last_radio_from_ppm+0x82>
   1625e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16266:	881b      	ldrh	r3, [r3, #0]
   16268:	b21b      	sxth	r3, r3
   1626a:	2b00      	cmp	r3, #0
   1626c:	da05      	bge.n	1627a <last_radio_from_ppm+0x82>
   1626e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16276:	2200      	movs	r2, #0
   16278:	801a      	strh	r2, [r3, #0]
   1627a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1627e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16282:	885b      	ldrh	r3, [r3, #2]
   16284:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16288:	b29b      	uxth	r3, r3
   1628a:	80fb      	strh	r3, [r7, #6]
   1628c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16290:	4618      	mov	r0, r3
   16292:	f002 f94f 	bl	18534 <__aeabi_i2f>
   16296:	4603      	mov	r3, r0
   16298:	4618      	mov	r0, r3
   1629a:	f002 fb65 	bl	18968 <__aeabi_f2iz>
   1629e:	4603      	mov	r3, r0
   162a0:	b29a      	uxth	r2, r3
   162a2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162aa:	805a      	strh	r2, [r3, #2]
   162ac:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b4:	885b      	ldrh	r3, [r3, #2]
   162b6:	b21b      	sxth	r3, r3
   162b8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162bc:	dd07      	ble.n	162ce <last_radio_from_ppm+0xd6>
   162be:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ca:	805a      	strh	r2, [r3, #2]
   162cc:	e00f      	b.n	162ee <last_radio_from_ppm+0xf6>
   162ce:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d6:	885b      	ldrh	r3, [r3, #2]
   162d8:	b21b      	sxth	r3, r3
   162da:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162de:	da06      	bge.n	162ee <last_radio_from_ppm+0xf6>
   162e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e8:	f64d 2280 	movw	r2, #55936	; 0xda80
   162ec:	805a      	strh	r2, [r3, #2]
   162ee:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162f6:	889b      	ldrh	r3, [r3, #4]
   162f8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162fc:	b29b      	uxth	r3, r3
   162fe:	80fb      	strh	r3, [r7, #6]
   16300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16304:	4618      	mov	r0, r3
   16306:	f002 f915 	bl	18534 <__aeabi_i2f>
   1630a:	4603      	mov	r3, r0
   1630c:	4618      	mov	r0, r3
   1630e:	f002 fb2b 	bl	18968 <__aeabi_f2iz>
   16312:	4603      	mov	r3, r0
   16314:	b29a      	uxth	r2, r3
   16316:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1631e:	809a      	strh	r2, [r3, #4]
   16320:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16328:	889b      	ldrh	r3, [r3, #4]
   1632a:	b21b      	sxth	r3, r3
   1632c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16330:	dd07      	ble.n	16342 <last_radio_from_ppm+0x14a>
   16332:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1633a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1633e:	809a      	strh	r2, [r3, #4]
   16340:	e00f      	b.n	16362 <last_radio_from_ppm+0x16a>
   16342:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634a:	889b      	ldrh	r3, [r3, #4]
   1634c:	b21b      	sxth	r3, r3
   1634e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16352:	da06      	bge.n	16362 <last_radio_from_ppm+0x16a>
   16354:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16360:	809a      	strh	r2, [r3, #4]
   16362:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636a:	88db      	ldrh	r3, [r3, #6]
   1636c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16370:	b29b      	uxth	r3, r3
   16372:	80fb      	strh	r3, [r7, #6]
   16374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16378:	4618      	mov	r0, r3
   1637a:	f002 f8db 	bl	18534 <__aeabi_i2f>
   1637e:	4603      	mov	r3, r0
   16380:	4618      	mov	r0, r3
   16382:	f002 faf1 	bl	18968 <__aeabi_f2iz>
   16386:	4603      	mov	r3, r0
   16388:	b29a      	uxth	r2, r3
   1638a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1638e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16392:	80da      	strh	r2, [r3, #6]
   16394:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639c:	88db      	ldrh	r3, [r3, #6]
   1639e:	b21b      	sxth	r3, r3
   163a0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163a4:	dd07      	ble.n	163b6 <last_radio_from_ppm+0x1be>
   163a6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   163aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163b2:	80da      	strh	r2, [r3, #6]
   163b4:	e00f      	b.n	163d6 <last_radio_from_ppm+0x1de>
   163b6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   163ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163be:	88db      	ldrh	r3, [r3, #6]
   163c0:	b21b      	sxth	r3, r3
   163c2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163c6:	da06      	bge.n	163d6 <last_radio_from_ppm+0x1de>
   163c8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   163cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d0:	f64d 2280 	movw	r2, #55936	; 0xda80
   163d4:	80da      	strh	r2, [r3, #6]
   163d6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163de:	891b      	ldrh	r3, [r3, #8]
   163e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163e4:	b29b      	uxth	r3, r3
   163e6:	80fb      	strh	r3, [r7, #6]
   163e8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f0:	891b      	ldrh	r3, [r3, #8]
   163f2:	b21b      	sxth	r3, r3
   163f4:	4618      	mov	r0, r3
   163f6:	f002 f89d 	bl	18534 <__aeabi_i2f>
   163fa:	4604      	mov	r4, r0
   163fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16400:	4618      	mov	r0, r3
   16402:	f002 f897 	bl	18534 <__aeabi_i2f>
   16406:	4603      	mov	r3, r0
   16408:	4618      	mov	r0, r3
   1640a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1640e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16412:	f002 f8e3 	bl	185dc <__aeabi_fmul>
   16416:	4603      	mov	r3, r0
   16418:	4620      	mov	r0, r4
   1641a:	4619      	mov	r1, r3
   1641c:	f001 ffd6 	bl	183cc <__addsf3>
   16420:	4603      	mov	r3, r0
   16422:	4618      	mov	r0, r3
   16424:	f002 faa0 	bl	18968 <__aeabi_f2iz>
   16428:	4603      	mov	r3, r0
   1642a:	b29a      	uxth	r2, r3
   1642c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16434:	811a      	strh	r2, [r3, #8]
   16436:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1643e:	895b      	ldrh	r3, [r3, #10]
   16440:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16444:	b29b      	uxth	r3, r3
   16446:	80fb      	strh	r3, [r7, #6]
   16448:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16450:	895b      	ldrh	r3, [r3, #10]
   16452:	b21b      	sxth	r3, r3
   16454:	4618      	mov	r0, r3
   16456:	f002 f86d 	bl	18534 <__aeabi_i2f>
   1645a:	4604      	mov	r4, r0
   1645c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16460:	4618      	mov	r0, r3
   16462:	f002 f867 	bl	18534 <__aeabi_i2f>
   16466:	4603      	mov	r3, r0
   16468:	4618      	mov	r0, r3
   1646a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1646e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16472:	f002 f8b3 	bl	185dc <__aeabi_fmul>
   16476:	4603      	mov	r3, r0
   16478:	4620      	mov	r0, r4
   1647a:	4619      	mov	r1, r3
   1647c:	f001 ffa6 	bl	183cc <__addsf3>
   16480:	4603      	mov	r3, r0
   16482:	4618      	mov	r0, r3
   16484:	f002 fa70 	bl	18968 <__aeabi_f2iz>
   16488:	4603      	mov	r3, r0
   1648a:	b29a      	uxth	r2, r3
   1648c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16494:	815a      	strh	r2, [r3, #10]
   16496:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1649e:	899b      	ldrh	r3, [r3, #12]
   164a0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164a4:	b29b      	uxth	r3, r3
   164a6:	80fb      	strh	r3, [r7, #6]
   164a8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b0:	899b      	ldrh	r3, [r3, #12]
   164b2:	b21b      	sxth	r3, r3
   164b4:	4618      	mov	r0, r3
   164b6:	f002 f83d 	bl	18534 <__aeabi_i2f>
   164ba:	4604      	mov	r4, r0
   164bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164c0:	4618      	mov	r0, r3
   164c2:	f002 f837 	bl	18534 <__aeabi_i2f>
   164c6:	4603      	mov	r3, r0
   164c8:	4618      	mov	r0, r3
   164ca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164ce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164d2:	f002 f883 	bl	185dc <__aeabi_fmul>
   164d6:	4603      	mov	r3, r0
   164d8:	4620      	mov	r0, r4
   164da:	4619      	mov	r1, r3
   164dc:	f001 ff76 	bl	183cc <__addsf3>
   164e0:	4603      	mov	r3, r0
   164e2:	4618      	mov	r0, r3
   164e4:	f002 fa40 	bl	18968 <__aeabi_f2iz>
   164e8:	4603      	mov	r3, r0
   164ea:	b29a      	uxth	r2, r3
   164ec:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f4:	819a      	strh	r2, [r3, #12]
   164f6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   164fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fe:	89db      	ldrh	r3, [r3, #14]
   16500:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16504:	b29b      	uxth	r3, r3
   16506:	80fb      	strh	r3, [r7, #6]
   16508:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16510:	89db      	ldrh	r3, [r3, #14]
   16512:	b21b      	sxth	r3, r3
   16514:	4618      	mov	r0, r3
   16516:	f002 f80d 	bl	18534 <__aeabi_i2f>
   1651a:	4604      	mov	r4, r0
   1651c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16520:	4618      	mov	r0, r3
   16522:	f002 f807 	bl	18534 <__aeabi_i2f>
   16526:	4603      	mov	r3, r0
   16528:	4618      	mov	r0, r3
   1652a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1652e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16532:	f002 f853 	bl	185dc <__aeabi_fmul>
   16536:	4603      	mov	r3, r0
   16538:	4620      	mov	r0, r4
   1653a:	4619      	mov	r1, r3
   1653c:	f001 ff46 	bl	183cc <__addsf3>
   16540:	4603      	mov	r3, r0
   16542:	4618      	mov	r0, r3
   16544:	f002 fa10 	bl	18968 <__aeabi_f2iz>
   16548:	4603      	mov	r3, r0
   1654a:	b29a      	uxth	r2, r3
   1654c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	81da      	strh	r2, [r3, #14]
   16556:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	8a1b      	ldrh	r3, [r3, #16]
   16560:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16564:	b29b      	uxth	r3, r3
   16566:	80fb      	strh	r3, [r7, #6]
   16568:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16570:	8a1b      	ldrh	r3, [r3, #16]
   16572:	b21b      	sxth	r3, r3
   16574:	4618      	mov	r0, r3
   16576:	f001 ffdd 	bl	18534 <__aeabi_i2f>
   1657a:	4604      	mov	r4, r0
   1657c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16580:	4618      	mov	r0, r3
   16582:	f001 ffd7 	bl	18534 <__aeabi_i2f>
   16586:	4603      	mov	r3, r0
   16588:	4618      	mov	r0, r3
   1658a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1658e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16592:	f002 f823 	bl	185dc <__aeabi_fmul>
   16596:	4603      	mov	r3, r0
   16598:	4620      	mov	r0, r4
   1659a:	4619      	mov	r1, r3
   1659c:	f001 ff16 	bl	183cc <__addsf3>
   165a0:	4603      	mov	r3, r0
   165a2:	4618      	mov	r0, r3
   165a4:	f002 f9e0 	bl	18968 <__aeabi_f2iz>
   165a8:	4603      	mov	r3, r0
   165aa:	b29a      	uxth	r2, r3
   165ac:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b4:	821a      	strh	r2, [r3, #16]
   165b6:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165be:	781b      	ldrb	r3, [r3, #0]
   165c0:	3301      	adds	r3, #1
   165c2:	b2da      	uxtb	r2, r3
   165c4:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165cc:	701a      	strb	r2, [r3, #0]
   165ce:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d6:	781b      	ldrb	r3, [r3, #0]
   165d8:	2b0a      	cmp	r3, #10
   165da:	f040 8101 	bne.w	167e0 <last_radio_from_ppm+0x5e8>
   165de:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e6:	2200      	movs	r2, #0
   165e8:	701a      	strb	r2, [r3, #0]
   165ea:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f2:	891a      	ldrh	r2, [r3, #8]
   165f4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fc:	811a      	strh	r2, [r3, #8]
   165fe:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16606:	2200      	movs	r2, #0
   16608:	811a      	strh	r2, [r3, #8]
   1660a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1660e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16612:	891b      	ldrh	r3, [r3, #8]
   16614:	b21b      	sxth	r3, r3
   16616:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1661a:	dd07      	ble.n	1662c <last_radio_from_ppm+0x434>
   1661c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16628:	811a      	strh	r2, [r3, #8]
   1662a:	e00f      	b.n	1664c <last_radio_from_ppm+0x454>
   1662c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16634:	891b      	ldrh	r3, [r3, #8]
   16636:	b21b      	sxth	r3, r3
   16638:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1663c:	da06      	bge.n	1664c <last_radio_from_ppm+0x454>
   1663e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16646:	f64d 2280 	movw	r2, #55936	; 0xda80
   1664a:	811a      	strh	r2, [r3, #8]
   1664c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16654:	895a      	ldrh	r2, [r3, #10]
   16656:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1665a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665e:	815a      	strh	r2, [r3, #10]
   16660:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16668:	2200      	movs	r2, #0
   1666a:	815a      	strh	r2, [r3, #10]
   1666c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16674:	895b      	ldrh	r3, [r3, #10]
   16676:	b21b      	sxth	r3, r3
   16678:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1667c:	dd07      	ble.n	1668e <last_radio_from_ppm+0x496>
   1667e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16686:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1668a:	815a      	strh	r2, [r3, #10]
   1668c:	e00f      	b.n	166ae <last_radio_from_ppm+0x4b6>
   1668e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16696:	895b      	ldrh	r3, [r3, #10]
   16698:	b21b      	sxth	r3, r3
   1669a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1669e:	da06      	bge.n	166ae <last_radio_from_ppm+0x4b6>
   166a0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a8:	f64d 2280 	movw	r2, #55936	; 0xda80
   166ac:	815a      	strh	r2, [r3, #10]
   166ae:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b6:	899a      	ldrh	r2, [r3, #12]
   166b8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c0:	819a      	strh	r2, [r3, #12]
   166c2:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ca:	2200      	movs	r2, #0
   166cc:	819a      	strh	r2, [r3, #12]
   166ce:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d6:	899b      	ldrh	r3, [r3, #12]
   166d8:	b21b      	sxth	r3, r3
   166da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166de:	dd07      	ble.n	166f0 <last_radio_from_ppm+0x4f8>
   166e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166ec:	819a      	strh	r2, [r3, #12]
   166ee:	e00f      	b.n	16710 <last_radio_from_ppm+0x518>
   166f0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f8:	899b      	ldrh	r3, [r3, #12]
   166fa:	b21b      	sxth	r3, r3
   166fc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16700:	da06      	bge.n	16710 <last_radio_from_ppm+0x518>
   16702:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1670e:	819a      	strh	r2, [r3, #12]
   16710:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16718:	89da      	ldrh	r2, [r3, #14]
   1671a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16722:	81da      	strh	r2, [r3, #14]
   16724:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1672c:	2200      	movs	r2, #0
   1672e:	81da      	strh	r2, [r3, #14]
   16730:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16738:	89db      	ldrh	r3, [r3, #14]
   1673a:	b21b      	sxth	r3, r3
   1673c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16740:	dd07      	ble.n	16752 <last_radio_from_ppm+0x55a>
   16742:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1674a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1674e:	81da      	strh	r2, [r3, #14]
   16750:	e00f      	b.n	16772 <last_radio_from_ppm+0x57a>
   16752:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16756:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675a:	89db      	ldrh	r3, [r3, #14]
   1675c:	b21b      	sxth	r3, r3
   1675e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16762:	da06      	bge.n	16772 <last_radio_from_ppm+0x57a>
   16764:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16770:	81da      	strh	r2, [r3, #14]
   16772:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677a:	8a1a      	ldrh	r2, [r3, #16]
   1677c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16784:	821a      	strh	r2, [r3, #16]
   16786:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678e:	2200      	movs	r2, #0
   16790:	821a      	strh	r2, [r3, #16]
   16792:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1679a:	8a1b      	ldrh	r3, [r3, #16]
   1679c:	b21b      	sxth	r3, r3
   1679e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   167a2:	dd07      	ble.n	167b4 <last_radio_from_ppm+0x5bc>
   167a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   167a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   167b0:	821a      	strh	r2, [r3, #16]
   167b2:	e00f      	b.n	167d4 <last_radio_from_ppm+0x5dc>
   167b4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   167b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167bc:	8a1b      	ldrh	r3, [r3, #16]
   167be:	b21b      	sxth	r3, r3
   167c0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   167c4:	da06      	bge.n	167d4 <last_radio_from_ppm+0x5dc>
   167c6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   167ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ce:	f64d 2280 	movw	r2, #55936	; 0xda80
   167d2:	821a      	strh	r2, [r3, #16]
   167d4:	f64c 33da 	movw	r3, #52186	; 0xcbda
   167d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167dc:	2201      	movs	r2, #1
   167de:	701a      	strb	r2, [r3, #0]
}
   167e0:	370c      	adds	r7, #12
   167e2:	46bd      	mov	sp, r7
   167e4:	bd90      	pop	{r4, r7, pc}
   167e6:	bf00      	nop

000167e8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   167e8:	b480      	push	{r7}
   167ea:	af00      	add	r7, sp, #0
  idx_buf = 0;
   167ec:	f64c 4314 	movw	r3, #52244	; 0xcc14
   167f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f4:	2200      	movs	r2, #0
   167f6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   167f8:	f64c 4315 	movw	r3, #52245	; 0xcc15
   167fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16800:	2200      	movs	r2, #0
   16802:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   16804:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1680c:	781b      	ldrb	r3, [r3, #0]
   1680e:	b2db      	uxtb	r3, r3
   16810:	461a      	mov	r2, r3
   16812:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1681a:	4413      	add	r3, r2
   1681c:	781a      	ldrb	r2, [r3, #0]
   1681e:	f64c 4316 	movw	r3, #52246	; 0xcc16
   16822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16826:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16828:	f242 030f 	movw	r3, #8207	; 0x200f
   1682c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16830:	f64c 4216 	movw	r2, #52246	; 0xcc16
   16834:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16838:	7812      	ldrb	r2, [r2, #0]
   1683a:	b2d2      	uxtb	r2, r2
   1683c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1683e:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16846:	2200      	movs	r2, #0
   16848:	701a      	strb	r2, [r3, #0]
}
   1684a:	46bd      	mov	sp, r7
   1684c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16850:	4770      	bx	lr
   16852:	bf00      	nop

00016854 <fbw_spi_init>:

void fbw_spi_init(void) {
   16854:	b480      	push	{r7}
   16856:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16858:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1685c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16860:	2200      	movs	r2, #0
   16862:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16864:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1686c:	2200      	movs	r2, #0
   1686e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16870:	f242 0317 	movw	r3, #8215	; 0x2017
   16874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16878:	f242 0217 	movw	r2, #8215	; 0x2017
   1687c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16880:	7812      	ldrb	r2, [r2, #0]
   16882:	b2d2      	uxtb	r2, r2
   16884:	f042 0210 	orr.w	r2, r2, #16
   16888:	b2d2      	uxtb	r2, r2
   1688a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1688c:	f242 030d 	movw	r3, #8205	; 0x200d
   16890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16894:	2240      	movs	r2, #64	; 0x40
   16896:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16898:	f242 030d 	movw	r3, #8205	; 0x200d
   1689c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168a0:	f242 020d 	movw	r2, #8205	; 0x200d
   168a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168a8:	7812      	ldrb	r2, [r2, #0]
   168aa:	b2d2      	uxtb	r2, r2
   168ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168b0:	b2d2      	uxtb	r2, r2
   168b2:	701a      	strb	r2, [r3, #0]
}
   168b4:	46bd      	mov	sp, r7
   168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   168ba:	4770      	bx	lr
   168bc:	0000      	movs	r0, r0
	...

000168c0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   168c0:	b480      	push	{r7}
   168c2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   168c4:	f242 032f 	movw	r3, #8239	; 0x202f
   168c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168cc:	2200      	movs	r2, #0
   168ce:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   168d0:	f242 032e 	movw	r3, #8238	; 0x202e
   168d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d8:	2201      	movs	r2, #1
   168da:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   168dc:	f242 0325 	movw	r3, #8229	; 0x2025
   168e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e4:	2207      	movs	r2, #7
   168e6:	701a      	strb	r2, [r3, #0]
}
   168e8:	46bd      	mov	sp, r7
   168ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   168ee:	4770      	bx	lr

000168f0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   168f0:	b480      	push	{r7}
   168f2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   168f4:	f242 032e 	movw	r3, #8238	; 0x202e
   168f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168fc:	f242 022e 	movw	r2, #8238	; 0x202e
   16900:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16904:	7812      	ldrb	r2, [r2, #0]
   16906:	b2d2      	uxtb	r2, r2
   16908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1690c:	b2d2      	uxtb	r2, r2
   1690e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16910:	f242 032e 	movw	r3, #8238	; 0x202e
   16914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16918:	f242 022e 	movw	r2, #8238	; 0x202e
   1691c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16920:	7812      	ldrb	r2, [r2, #0]
   16922:	b2d2      	uxtb	r2, r2
   16924:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16928:	b2d2      	uxtb	r2, r2
   1692a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1692c:	f242 0317 	movw	r3, #8215	; 0x2017
   16930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16934:	f242 0217 	movw	r2, #8215	; 0x2017
   16938:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1693c:	7812      	ldrb	r2, [r2, #0]
   1693e:	b2d2      	uxtb	r2, r2
   16940:	f022 0201 	bic.w	r2, r2, #1
   16944:	b2d2      	uxtb	r2, r2
   16946:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16948:	f242 0337 	movw	r3, #8247	; 0x2037
   1694c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16950:	f242 0237 	movw	r2, #8247	; 0x2037
   16954:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16958:	7812      	ldrb	r2, [r2, #0]
   1695a:	b2d2      	uxtb	r2, r2
   1695c:	f042 0220 	orr.w	r2, r2, #32
   16960:	b2d2      	uxtb	r2, r2
   16962:	701a      	strb	r2, [r3, #0]
}
   16964:	46bd      	mov	sp, r7
   16966:	f85d 7b04 	ldr.w	r7, [sp], #4
   1696a:	4770      	bx	lr

0001696c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1696c:	b580      	push	{r7, lr}
   1696e:	b082      	sub	sp, #8
   16970:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16972:	2300      	movs	r3, #0
   16974:	71fb      	strb	r3, [r7, #7]
   16976:	e010      	b.n	1699a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16978:	79fa      	ldrb	r2, [r7, #7]
   1697a:	79f9      	ldrb	r1, [r7, #7]
   1697c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16984:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16988:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1698c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16990:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16994:	79fb      	ldrb	r3, [r7, #7]
   16996:	3301      	adds	r3, #1
   16998:	71fb      	strb	r3, [r7, #7]
   1699a:	79fb      	ldrb	r3, [r7, #7]
   1699c:	2b08      	cmp	r3, #8
   1699e:	d9eb      	bls.n	16978 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   169a0:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   169a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a8:	781b      	ldrb	r3, [r3, #0]
   169aa:	2b00      	cmp	r3, #0
   169ac:	bf0c      	ite	eq
   169ae:	2300      	moveq	r3, #0
   169b0:	2301      	movne	r3, #1
   169b2:	b2db      	uxtb	r3, r3
   169b4:	461a      	mov	r2, r3
   169b6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169be:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   169c0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c8:	7cdb      	ldrb	r3, [r3, #19]
   169ca:	b2da      	uxtb	r2, r3
   169cc:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   169d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169d4:	781b      	ldrb	r3, [r3, #0]
   169d6:	2b00      	cmp	r3, #0
   169d8:	d001      	beq.n	169de <to_autopilot_from_last_radio+0x72>
   169da:	2302      	movs	r3, #2
   169dc:	e000      	b.n	169e0 <to_autopilot_from_last_radio+0x74>
   169de:	2300      	movs	r3, #0
   169e0:	4313      	orrs	r3, r2
   169e2:	b2db      	uxtb	r3, r3
   169e4:	b2da      	uxtb	r2, r3
   169e6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169ee:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   169f0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   169f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f8:	781b      	ldrb	r3, [r3, #0]
   169fa:	2b00      	cmp	r3, #0
   169fc:	d012      	beq.n	16a24 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   169fe:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a06:	7cdb      	ldrb	r3, [r3, #19]
   16a08:	f043 0304 	orr.w	r3, r3, #4
   16a0c:	b2da      	uxtb	r2, r3
   16a0e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a16:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16a18:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a20:	2200      	movs	r2, #0
   16a22:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16a24:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   16a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a2c:	781a      	ldrb	r2, [r3, #0]
   16a2e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a36:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16a38:	f64c 4318 	movw	r3, #52248	; 0xcc18
   16a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a40:	881b      	ldrh	r3, [r3, #0]
   16a42:	4618      	mov	r0, r3
   16a44:	f001 f924 	bl	17c90 <__aeabi_i2d>
   16a48:	4602      	mov	r2, r0
   16a4a:	460b      	mov	r3, r1
   16a4c:	4610      	mov	r0, r2
   16a4e:	4619      	mov	r1, r3
   16a50:	a31b      	add	r3, pc, #108	; (adr r3, 16ac0 <to_autopilot_from_last_radio+0x154>)
   16a52:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a56:	f001 f981 	bl	17d5c <__aeabi_dmul>
   16a5a:	4602      	mov	r2, r0
   16a5c:	460b      	mov	r3, r1
   16a5e:	4610      	mov	r0, r2
   16a60:	4619      	mov	r1, r3
   16a62:	f04f 0200 	mov.w	r2, #0
   16a66:	f04f 0300 	mov.w	r3, #0
   16a6a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16a6e:	f001 fa9f 	bl	17fb0 <__aeabi_ddiv>
   16a72:	4602      	mov	r2, r0
   16a74:	460b      	mov	r3, r1
   16a76:	4610      	mov	r0, r2
   16a78:	4619      	mov	r1, r3
   16a7a:	a313      	add	r3, pc, #76	; (adr r3, 16ac8 <to_autopilot_from_last_radio+0x15c>)
   16a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a80:	f000 ffba 	bl	179f8 <__adddf3>
   16a84:	4602      	mov	r2, r0
   16a86:	460b      	mov	r3, r1
   16a88:	4610      	mov	r0, r2
   16a8a:	4619      	mov	r1, r3
   16a8c:	f04f 0200 	mov.w	r2, #0
   16a90:	f04f 0300 	mov.w	r3, #0
   16a94:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16a98:	f001 f960 	bl	17d5c <__aeabi_dmul>
   16a9c:	4602      	mov	r2, r0
   16a9e:	460b      	mov	r3, r1
   16aa0:	4610      	mov	r0, r2
   16aa2:	4619      	mov	r1, r3
   16aa4:	f001 fc1c 	bl	182e0 <__aeabi_d2uiz>
   16aa8:	4603      	mov	r3, r0
   16aaa:	b2da      	uxtb	r2, r3
   16aac:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16ab6:	3708      	adds	r7, #8
   16ab8:	46bd      	mov	sp, r7
   16aba:	bd80      	pop	{r7, pc}
   16abc:	f3af 8000 	nop.w
   16ac0:	1eb851ec 	.word	0x1eb851ec
   16ac4:	3f91eb85 	.word	0x3f91eb85
   16ac8:	020c49ba 	.word	0x020c49ba
   16acc:	3fb6872b 	.word	0x3fb6872b

00016ad0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16ad0:	b580      	push	{r7, lr}
   16ad2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16ad4:	f242 0316 	movw	r3, #8214	; 0x2016
   16ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16adc:	781b      	ldrb	r3, [r3, #0]
   16ade:	b2db      	uxtb	r3, r3
   16ae0:	f003 0304 	and.w	r3, r3, #4
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d011      	beq.n	16b0c <send_data_to_autopilot_task+0x3c>
   16ae8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af0:	781b      	ldrb	r3, [r3, #0]
   16af2:	b2db      	uxtb	r3, r3
   16af4:	2b00      	cmp	r3, #0
   16af6:	d009      	beq.n	16b0c <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16af8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b00:	2200      	movs	r2, #0
   16b02:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16b04:	f7ff ff32 	bl	1696c <to_autopilot_from_last_radio>
      spi_reset();
   16b08:	f7ff fe6e 	bl	167e8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16b0c:	bd80      	pop	{r7, pc}
   16b0e:	bf00      	nop

00016b10 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16b10:	b580      	push	{r7, lr}
   16b12:	af00      	add	r7, sp, #0
  uart_init_tx();
   16b14:	f000 fb68 	bl	171e8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16b18:	f648 4000 	movw	r0, #35840	; 0x8c00
   16b1c:	f2c0 0001 	movt	r0, #1
   16b20:	f000 fc40 	bl	173a4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16b24:	f7ff faa0 	bl	16068 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16b28:	2003      	movs	r0, #3
   16b2a:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16b2e:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16b32:	f7ff fa85 	bl	16040 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16b36:	2006      	movs	r0, #6
   16b38:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16b3c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16b40:	f7ff fa7e 	bl	16040 <fbw_adc_buf_channel>
#endif
  timer_init();
   16b44:	f7ff febc 	bl	168c0 <timer_init>
  servo_init();
   16b48:	f000 f8fa 	bl	16d40 <servo_init>
  ppm_init();
   16b4c:	f7ff fed0 	bl	168f0 <ppm_init>
  fbw_spi_init();
   16b50:	f7ff fe80 	bl	16854 <fbw_spi_init>
  //sei(); //FN
}
   16b54:	bd80      	pop	{r7, pc}
   16b56:	bf00      	nop

00016b58 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16b58:	b580      	push	{r7, lr}
   16b5a:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16b5c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b64:	781b      	ldrb	r3, [r3, #0]
   16b66:	b2db      	uxtb	r3, r3
   16b68:	2b00      	cmp	r3, #0
   16b6a:	d04c      	beq.n	16c06 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16b6c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b74:	2200      	movs	r2, #0
   16b76:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16b78:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b80:	781b      	ldrb	r3, [r3, #0]
   16b82:	3301      	adds	r3, #1
   16b84:	b2da      	uxtb	r2, r3
   16b86:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b8e:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16b90:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b98:	2201      	movs	r2, #1
   16b9a:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16b9c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba4:	2200      	movs	r2, #0
   16ba6:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16ba8:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb0:	2200      	movs	r2, #0
   16bb2:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16bb4:	f7ff fb20 	bl	161f8 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16bb8:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc0:	781b      	ldrb	r3, [r3, #0]
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d011      	beq.n	16bea <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16bc6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bce:	891b      	ldrh	r3, [r3, #8]
   16bd0:	b21b      	sxth	r3, r3
   16bd2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16bd6:	bfb4      	ite	lt
   16bd8:	2300      	movlt	r3, #0
   16bda:	2301      	movge	r3, #1
   16bdc:	b2db      	uxtb	r3, r3
   16bde:	461a      	mov	r2, r3
   16be0:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be8:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16bea:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bf2:	781b      	ldrb	r3, [r3, #0]
   16bf4:	2b00      	cmp	r3, #0
   16bf6:	d11a      	bne.n	16c2e <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16bf8:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16bfc:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c00:	f000 f97c 	bl	16efc <servo_set>
   16c04:	e013      	b.n	16c2e <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16c06:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c0e:	781b      	ldrb	r3, [r3, #0]
   16c10:	2b00      	cmp	r3, #0
   16c12:	d10c      	bne.n	16c2e <test_ppm_task+0xd6>
   16c14:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c1c:	781b      	ldrb	r3, [r3, #0]
   16c1e:	2b00      	cmp	r3, #0
   16c20:	d005      	beq.n	16c2e <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16c22:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c2a:	2201      	movs	r2, #1
   16c2c:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16c2e:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c36:	881b      	ldrh	r3, [r3, #0]
   16c38:	2b1d      	cmp	r3, #29
   16c3a:	d905      	bls.n	16c48 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16c3c:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c44:	2200      	movs	r2, #0
   16c46:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16c48:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c50:	881b      	ldrh	r3, [r3, #0]
   16c52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16c56:	d305      	bcc.n	16c64 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16c58:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c60:	2201      	movs	r2, #1
   16c62:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16c64:	bd80      	pop	{r7, pc}
   16c66:	bf00      	nop

00016c68 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16c68:	b580      	push	{r7, lr}
   16c6a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16c6c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c74:	781b      	ldrb	r3, [r3, #0]
   16c76:	2b00      	cmp	r3, #0
   16c78:	d106      	bne.n	16c88 <check_failsafe_task+0x20>
   16c7a:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c82:	781b      	ldrb	r3, [r3, #0]
   16c84:	2b00      	cmp	r3, #0
   16c86:	d00d      	beq.n	16ca4 <check_failsafe_task+0x3c>
   16c88:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c90:	781b      	ldrb	r3, [r3, #0]
   16c92:	2b01      	cmp	r3, #1
   16c94:	d10c      	bne.n	16cb0 <check_failsafe_task+0x48>
   16c96:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c9e:	781b      	ldrb	r3, [r3, #0]
   16ca0:	2b00      	cmp	r3, #0
   16ca2:	d105      	bne.n	16cb0 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16ca4:	f648 30ec 	movw	r0, #35820	; 0x8bec
   16ca8:	f2c0 0001 	movt	r0, #1
   16cac:	f000 f926 	bl	16efc <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16cb0:	bd80      	pop	{r7, pc}
   16cb2:	bf00      	nop

00016cb4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16cb4:	b580      	push	{r7, lr}
   16cb6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16cb8:	f242 0316 	movw	r3, #8214	; 0x2016
   16cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cc0:	781b      	ldrb	r3, [r3, #0]
   16cc2:	b2db      	uxtb	r3, r3
   16cc4:	f003 0304 	and.w	r3, r3, #4
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d028      	beq.n	16d1e <check_mega128_values_task+0x6a>
   16ccc:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cd4:	781b      	ldrb	r3, [r3, #0]
   16cd6:	b2db      	uxtb	r3, r3
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d020      	beq.n	16d1e <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16cdc:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce4:	781b      	ldrb	r3, [r3, #0]
   16ce6:	b2db      	uxtb	r3, r3
   16ce8:	2b00      	cmp	r3, #0
   16cea:	d018      	beq.n	16d1e <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16cec:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cf4:	2200      	movs	r2, #0
   16cf6:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16cf8:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d00:	2201      	movs	r2, #1
   16d02:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16d04:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d0c:	781b      	ldrb	r3, [r3, #0]
   16d0e:	2b01      	cmp	r3, #1
   16d10:	d105      	bne.n	16d1e <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16d12:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16d16:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16d1a:	f000 f8ef 	bl	16efc <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16d1e:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d26:	781b      	ldrb	r3, [r3, #0]
   16d28:	2b1e      	cmp	r3, #30
   16d2a:	d105      	bne.n	16d38 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16d2c:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d34:	2200      	movs	r2, #0
   16d36:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16d38:	bd80      	pop	{r7, pc}
   16d3a:	bf00      	nop
   16d3c:	f3af 8000 	nop.w

00016d40 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16d40:	b480      	push	{r7}
   16d42:	b083      	sub	sp, #12
   16d44:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16d46:	f242 0311 	movw	r3, #8209	; 0x2011
   16d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d4e:	f242 0211 	movw	r2, #8209	; 0x2011
   16d52:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d56:	7812      	ldrb	r2, [r2, #0]
   16d58:	b2d2      	uxtb	r2, r2
   16d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d5e:	b2d2      	uxtb	r2, r2
   16d60:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16d62:	f242 0317 	movw	r3, #8215	; 0x2017
   16d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d6a:	f242 0217 	movw	r2, #8215	; 0x2017
   16d6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d72:	7812      	ldrb	r2, [r2, #0]
   16d74:	b2d2      	uxtb	r2, r2
   16d76:	f042 0202 	orr.w	r2, r2, #2
   16d7a:	b2d2      	uxtb	r2, r2
   16d7c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d7e:	f242 0312 	movw	r3, #8210	; 0x2012
   16d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d86:	f242 0212 	movw	r2, #8210	; 0x2012
   16d8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d8e:	7812      	ldrb	r2, [r2, #0]
   16d90:	b2d2      	uxtb	r2, r2
   16d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d96:	b2d2      	uxtb	r2, r2
   16d98:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16d9a:	f242 0318 	movw	r3, #8216	; 0x2018
   16d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da2:	f242 0218 	movw	r2, #8216	; 0x2018
   16da6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16daa:	7812      	ldrb	r2, [r2, #0]
   16dac:	b2d2      	uxtb	r2, r2
   16dae:	f022 0202 	bic.w	r2, r2, #2
   16db2:	b2d2      	uxtb	r2, r2
   16db4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16db6:	2300      	movs	r3, #0
   16db8:	71fb      	strb	r3, [r7, #7]
   16dba:	e00b      	b.n	16dd4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16dbc:	79fa      	ldrb	r2, [r7, #7]
   16dbe:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dc6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16dca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16dce:	79fb      	ldrb	r3, [r7, #7]
   16dd0:	3301      	adds	r3, #1
   16dd2:	71fb      	strb	r3, [r7, #7]
   16dd4:	79fb      	ldrb	r3, [r7, #7]
   16dd6:	2b09      	cmp	r3, #9
   16dd8:	d9f0      	bls.n	16dbc <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16dda:	f242 032a 	movw	r3, #8234	; 0x202a
   16dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16de6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16de8:	f242 032f 	movw	r3, #8239	; 0x202f
   16dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16df0:	f242 022f 	movw	r2, #8239	; 0x202f
   16df4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16df8:	7812      	ldrb	r2, [r2, #0]
   16dfa:	b2d2      	uxtb	r2, r2
   16dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16e00:	b2d2      	uxtb	r2, r2
   16e02:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16e04:	f242 0336 	movw	r3, #8246	; 0x2036
   16e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e0c:	2210      	movs	r2, #16
   16e0e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16e10:	f242 0312 	movw	r3, #8210	; 0x2012
   16e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e18:	f242 0212 	movw	r2, #8210	; 0x2012
   16e1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e20:	7812      	ldrb	r2, [r2, #0]
   16e22:	b2d2      	uxtb	r2, r2
   16e24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16e28:	b2d2      	uxtb	r2, r2
   16e2a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16e2c:	f242 0337 	movw	r3, #8247	; 0x2037
   16e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e34:	f242 0237 	movw	r2, #8247	; 0x2037
   16e38:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e3c:	7812      	ldrb	r2, [r2, #0]
   16e3e:	b2d2      	uxtb	r2, r2
   16e40:	f042 0210 	orr.w	r2, r2, #16
   16e44:	b2d2      	uxtb	r2, r2
   16e46:	701a      	strb	r2, [r3, #0]
}
   16e48:	370c      	adds	r7, #12
   16e4a:	46bd      	mov	sp, r7
   16e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e50:	4770      	bx	lr
   16e52:	bf00      	nop

00016e54 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16e54:	b480      	push	{r7}
   16e56:	b083      	sub	sp, #12
   16e58:	af00      	add	r7, sp, #0
   16e5a:	4602      	mov	r2, r0
   16e5c:	460b      	mov	r3, r1
   16e5e:	71fa      	strb	r2, [r7, #7]
   16e60:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16e62:	79f9      	ldrb	r1, [r7, #7]
   16e64:	88bb      	ldrh	r3, [r7, #4]
   16e66:	011b      	lsls	r3, r3, #4
   16e68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e6c:	d308      	bcc.n	16e80 <servo_set_one+0x2c>
   16e6e:	88bb      	ldrh	r3, [r7, #4]
   16e70:	011b      	lsls	r3, r3, #4
   16e72:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e76:	bf28      	it	cs
   16e78:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e7c:	b29a      	uxth	r2, r3
   16e7e:	e001      	b.n	16e84 <servo_set_one+0x30>
   16e80:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e84:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e8c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16e90:	370c      	adds	r7, #12
   16e92:	46bd      	mov	sp, r7
   16e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e98:	4770      	bx	lr
   16e9a:	bf00      	nop

00016e9c <servo_transmit>:

void 
servo_transmit(void) {
   16e9c:	b580      	push	{r7, lr}
   16e9e:	b082      	sub	sp, #8
   16ea0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16ea2:	2000      	movs	r0, #0
   16ea4:	f000 f9e6 	bl	17274 <uart_transmit>
   16ea8:	2000      	movs	r0, #0
   16eaa:	f000 f9e3 	bl	17274 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16eae:	2300      	movs	r3, #0
   16eb0:	71fb      	strb	r3, [r7, #7]
   16eb2:	e01a      	b.n	16eea <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16eb4:	79fa      	ldrb	r2, [r7, #7]
   16eb6:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ebe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ec2:	0a1b      	lsrs	r3, r3, #8
   16ec4:	b29b      	uxth	r3, r3
   16ec6:	b2db      	uxtb	r3, r3
   16ec8:	4618      	mov	r0, r3
   16eca:	f000 f9d3 	bl	17274 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16ece:	79fa      	ldrb	r2, [r7, #7]
   16ed0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ed8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16edc:	b2db      	uxtb	r3, r3
   16ede:	4618      	mov	r0, r3
   16ee0:	f000 f9c8 	bl	17274 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16ee4:	79fb      	ldrb	r3, [r7, #7]
   16ee6:	3301      	adds	r3, #1
   16ee8:	71fb      	strb	r3, [r7, #7]
   16eea:	79fb      	ldrb	r3, [r7, #7]
   16eec:	2b09      	cmp	r3, #9
   16eee:	d9e1      	bls.n	16eb4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16ef0:	200a      	movs	r0, #10
   16ef2:	f000 f9bf 	bl	17274 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16ef6:	3708      	adds	r7, #8
   16ef8:	46bd      	mov	sp, r7
   16efa:	bd80      	pop	{r7, pc}

00016efc <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16efc:	b5b0      	push	{r4, r5, r7, lr}
   16efe:	b084      	sub	sp, #16
   16f00:	af00      	add	r7, sp, #0
   16f02:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16f04:	687b      	ldr	r3, [r7, #4]
   16f06:	330a      	adds	r3, #10
   16f08:	881b      	ldrh	r3, [r3, #0]
   16f0a:	b21b      	sxth	r3, r3
   16f0c:	005b      	lsls	r3, r3, #1
   16f0e:	4618      	mov	r0, r3
   16f10:	f000 febe 	bl	17c90 <__aeabi_i2d>
   16f14:	4602      	mov	r2, r0
   16f16:	460b      	mov	r3, r1
   16f18:	4610      	mov	r0, r2
   16f1a:	4619      	mov	r1, r3
   16f1c:	a3a6      	add	r3, pc, #664	; (adr r3, 171b8 <servo_set+0x2bc>)
   16f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f22:	f000 ff1b 	bl	17d5c <__aeabi_dmul>
   16f26:	4602      	mov	r2, r0
   16f28:	460b      	mov	r3, r1
   16f2a:	4610      	mov	r0, r2
   16f2c:	4619      	mov	r1, r3
   16f2e:	f001 f9af 	bl	18290 <__aeabi_d2iz>
   16f32:	4603      	mov	r3, r0
   16f34:	b29b      	uxth	r3, r3
   16f36:	b29b      	uxth	r3, r3
   16f38:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f3c:	81fb      	strh	r3, [r7, #14]
   16f3e:	89fb      	ldrh	r3, [r7, #14]
   16f40:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f44:	d307      	bcc.n	16f56 <servo_set+0x5a>
   16f46:	89fb      	ldrh	r3, [r7, #14]
   16f48:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f4c:	bf28      	it	cs
   16f4e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f52:	b29a      	uxth	r2, r3
   16f54:	e001      	b.n	16f5a <servo_set+0x5e>
   16f56:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f5a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f62:	80da      	strh	r2, [r3, #6]
   16f64:	687b      	ldr	r3, [r7, #4]
   16f66:	881b      	ldrh	r3, [r3, #0]
   16f68:	b21b      	sxth	r3, r3
   16f6a:	005b      	lsls	r3, r3, #1
   16f6c:	4618      	mov	r0, r3
   16f6e:	f000 fe8f 	bl	17c90 <__aeabi_i2d>
   16f72:	4602      	mov	r2, r0
   16f74:	460b      	mov	r3, r1
   16f76:	4610      	mov	r0, r2
   16f78:	4619      	mov	r1, r3
   16f7a:	a38f      	add	r3, pc, #572	; (adr r3, 171b8 <servo_set+0x2bc>)
   16f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f80:	f000 feec 	bl	17d5c <__aeabi_dmul>
   16f84:	4602      	mov	r2, r0
   16f86:	460b      	mov	r3, r1
   16f88:	4610      	mov	r0, r2
   16f8a:	4619      	mov	r1, r3
   16f8c:	f001 f980 	bl	18290 <__aeabi_d2iz>
   16f90:	4603      	mov	r3, r0
   16f92:	b29b      	uxth	r3, r3
   16f94:	b29b      	uxth	r3, r3
   16f96:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f9a:	81fb      	strh	r3, [r7, #14]
   16f9c:	89fb      	ldrh	r3, [r7, #14]
   16f9e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fa2:	d307      	bcc.n	16fb4 <servo_set+0xb8>
   16fa4:	89fb      	ldrh	r3, [r7, #14]
   16fa6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16faa:	bf28      	it	cs
   16fac:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fb0:	b29a      	uxth	r2, r3
   16fb2:	e001      	b.n	16fb8 <servo_set+0xbc>
   16fb4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fb8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fc0:	825a      	strh	r2, [r3, #18]
   16fc2:	687b      	ldr	r3, [r7, #4]
   16fc4:	3304      	adds	r3, #4
   16fc6:	881b      	ldrh	r3, [r3, #0]
   16fc8:	b21b      	sxth	r3, r3
   16fca:	4618      	mov	r0, r3
   16fcc:	f000 fe60 	bl	17c90 <__aeabi_i2d>
   16fd0:	4602      	mov	r2, r0
   16fd2:	460b      	mov	r3, r1
   16fd4:	4610      	mov	r0, r2
   16fd6:	4619      	mov	r1, r3
   16fd8:	a379      	add	r3, pc, #484	; (adr r3, 171c0 <servo_set+0x2c4>)
   16fda:	e9d3 2300 	ldrd	r2, r3, [r3]
   16fde:	f000 febd 	bl	17d5c <__aeabi_dmul>
   16fe2:	4602      	mov	r2, r0
   16fe4:	460b      	mov	r3, r1
   16fe6:	4610      	mov	r0, r2
   16fe8:	4619      	mov	r1, r3
   16fea:	f001 f951 	bl	18290 <__aeabi_d2iz>
   16fee:	4603      	mov	r3, r0
   16ff0:	b29b      	uxth	r3, r3
   16ff2:	b29b      	uxth	r3, r3
   16ff4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16ff8:	3320      	adds	r3, #32
   16ffa:	81fb      	strh	r3, [r7, #14]
   16ffc:	89fb      	ldrh	r3, [r7, #14]
   16ffe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17002:	d307      	bcc.n	17014 <servo_set+0x118>
   17004:	89fb      	ldrh	r3, [r7, #14]
   17006:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1700a:	bf28      	it	cs
   1700c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17010:	b29a      	uxth	r2, r3
   17012:	e001      	b.n	17018 <servo_set+0x11c>
   17014:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17018:	f64c 43ac 	movw	r3, #52396	; 0xccac
   1701c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17020:	819a      	strh	r2, [r3, #12]
   17022:	687b      	ldr	r3, [r7, #4]
   17024:	885b      	ldrh	r3, [r3, #2]
   17026:	81bb      	strh	r3, [r7, #12]
   17028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1702c:	2b00      	cmp	r3, #0
   1702e:	dd06      	ble.n	1703e <servo_set+0x142>
   17030:	f04f 0400 	mov.w	r4, #0
   17034:	f04f 0500 	mov.w	r5, #0
   17038:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1703c:	e002      	b.n	17044 <servo_set+0x148>
   1703e:	a562      	add	r5, pc, #392	; (adr r5, 171c8 <servo_set+0x2cc>)
   17040:	e9d5 4500 	ldrd	r4, r5, [r5]
   17044:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17048:	4618      	mov	r0, r3
   1704a:	f000 fe21 	bl	17c90 <__aeabi_i2d>
   1704e:	4602      	mov	r2, r0
   17050:	460b      	mov	r3, r1
   17052:	4620      	mov	r0, r4
   17054:	4629      	mov	r1, r5
   17056:	f000 fe81 	bl	17d5c <__aeabi_dmul>
   1705a:	4602      	mov	r2, r0
   1705c:	460b      	mov	r3, r1
   1705e:	4610      	mov	r0, r2
   17060:	4619      	mov	r1, r3
   17062:	a35b      	add	r3, pc, #364	; (adr r3, 171d0 <servo_set+0x2d4>)
   17064:	e9d3 2300 	ldrd	r2, r3, [r3]
   17068:	f000 fe78 	bl	17d5c <__aeabi_dmul>
   1706c:	4602      	mov	r2, r0
   1706e:	460b      	mov	r3, r1
   17070:	4610      	mov	r0, r2
   17072:	4619      	mov	r1, r3
   17074:	f001 f90c 	bl	18290 <__aeabi_d2iz>
   17078:	4603      	mov	r3, r0
   1707a:	b29b      	uxth	r3, r3
   1707c:	b29b      	uxth	r3, r3
   1707e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   17082:	81fb      	strh	r3, [r7, #14]
   17084:	89fb      	ldrh	r3, [r7, #14]
   17086:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1708a:	d307      	bcc.n	1709c <servo_set+0x1a0>
   1708c:	89fb      	ldrh	r3, [r7, #14]
   1708e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17092:	bf28      	it	cs
   17094:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17098:	b29a      	uxth	r2, r3
   1709a:	e001      	b.n	170a0 <servo_set+0x1a4>
   1709c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170a0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   170a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170a8:	801a      	strh	r2, [r3, #0]
   170aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170ae:	2b00      	cmp	r3, #0
   170b0:	dd03      	ble.n	170ba <servo_set+0x1be>
   170b2:	a545      	add	r5, pc, #276	; (adr r5, 171c8 <servo_set+0x2cc>)
   170b4:	e9d5 4500 	ldrd	r4, r5, [r5]
   170b8:	e005      	b.n	170c6 <servo_set+0x1ca>
   170ba:	f04f 0400 	mov.w	r4, #0
   170be:	f04f 0500 	mov.w	r5, #0
   170c2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   170c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170ca:	4618      	mov	r0, r3
   170cc:	f000 fde0 	bl	17c90 <__aeabi_i2d>
   170d0:	4602      	mov	r2, r0
   170d2:	460b      	mov	r3, r1
   170d4:	4620      	mov	r0, r4
   170d6:	4629      	mov	r1, r5
   170d8:	f000 fe40 	bl	17d5c <__aeabi_dmul>
   170dc:	4602      	mov	r2, r0
   170de:	460b      	mov	r3, r1
   170e0:	4610      	mov	r0, r2
   170e2:	4619      	mov	r1, r3
   170e4:	a33c      	add	r3, pc, #240	; (adr r3, 171d8 <servo_set+0x2dc>)
   170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   170ea:	f000 fe37 	bl	17d5c <__aeabi_dmul>
   170ee:	4602      	mov	r2, r0
   170f0:	460b      	mov	r3, r1
   170f2:	4610      	mov	r0, r2
   170f4:	4619      	mov	r1, r3
   170f6:	f001 f8cb 	bl	18290 <__aeabi_d2iz>
   170fa:	4603      	mov	r3, r0
   170fc:	b29b      	uxth	r3, r3
   170fe:	b29b      	uxth	r3, r3
   17100:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   17104:	3320      	adds	r3, #32
   17106:	81fb      	strh	r3, [r7, #14]
   17108:	89fb      	ldrh	r3, [r7, #14]
   1710a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1710e:	d307      	bcc.n	17120 <servo_set+0x224>
   17110:	89fb      	ldrh	r3, [r7, #14]
   17112:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17116:	bf28      	it	cs
   17118:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1711c:	b29a      	uxth	r2, r3
   1711e:	e001      	b.n	17124 <servo_set+0x228>
   17120:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17124:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1712c:	809a      	strh	r2, [r3, #4]
   1712e:	687b      	ldr	r3, [r7, #4]
   17130:	3306      	adds	r3, #6
   17132:	881b      	ldrh	r3, [r3, #0]
   17134:	b21b      	sxth	r3, r3
   17136:	4618      	mov	r0, r3
   17138:	f000 fdaa 	bl	17c90 <__aeabi_i2d>
   1713c:	4604      	mov	r4, r0
   1713e:	460d      	mov	r5, r1
   17140:	687b      	ldr	r3, [r7, #4]
   17142:	3302      	adds	r3, #2
   17144:	881b      	ldrh	r3, [r3, #0]
   17146:	b21b      	sxth	r3, r3
   17148:	4618      	mov	r0, r3
   1714a:	f000 fda1 	bl	17c90 <__aeabi_i2d>
   1714e:	4602      	mov	r2, r0
   17150:	460b      	mov	r3, r1
   17152:	4620      	mov	r0, r4
   17154:	4629      	mov	r1, r5
   17156:	f000 fc4f 	bl	179f8 <__adddf3>
   1715a:	4602      	mov	r2, r0
   1715c:	460b      	mov	r3, r1
   1715e:	4610      	mov	r0, r2
   17160:	4619      	mov	r1, r3
   17162:	a31f      	add	r3, pc, #124	; (adr r3, 171e0 <servo_set+0x2e4>)
   17164:	e9d3 2300 	ldrd	r2, r3, [r3]
   17168:	f000 fdf8 	bl	17d5c <__aeabi_dmul>
   1716c:	4602      	mov	r2, r0
   1716e:	460b      	mov	r3, r1
   17170:	4610      	mov	r0, r2
   17172:	4619      	mov	r1, r3
   17174:	f001 f88c 	bl	18290 <__aeabi_d2iz>
   17178:	4603      	mov	r3, r0
   1717a:	b29b      	uxth	r3, r3
   1717c:	b29b      	uxth	r3, r3
   1717e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17182:	3320      	adds	r3, #32
   17184:	81fb      	strh	r3, [r7, #14]
   17186:	89fb      	ldrh	r3, [r7, #14]
   17188:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1718c:	d307      	bcc.n	1719e <servo_set+0x2a2>
   1718e:	89fb      	ldrh	r3, [r7, #14]
   17190:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17194:	bf28      	it	cs
   17196:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1719a:	b29a      	uxth	r2, r3
   1719c:	e001      	b.n	171a2 <servo_set+0x2a6>
   1719e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   171a2:	f64c 43ac 	movw	r3, #52396	; 0xccac
   171a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171aa:	81da      	strh	r2, [r3, #14]
}
   171ac:	3710      	adds	r7, #16
   171ae:	46bd      	mov	sp, r7
   171b0:	bdb0      	pop	{r4, r5, r7, pc}
   171b2:	bf00      	nop
   171b4:	f3af 8000 	nop.w
   171b8:	aaaa9ef0 	.word	0xaaaa9ef0
   171bc:	3feaaaaa 	.word	0x3feaaaaa
   171c0:	fc96473e 	.word	0xfc96473e
   171c4:	3fdfc962 	.word	0x3fdfc962
   171c8:	51eb851f 	.word	0x51eb851f
   171cc:	3fe51eb8 	.word	0x3fe51eb8
   171d0:	9999999a 	.word	0x9999999a
   171d4:	bfe19999 	.word	0xbfe19999
   171d8:	aaaa9ef0 	.word	0xaaaa9ef0
   171dc:	bfe0aaaa 	.word	0xbfe0aaaa
   171e0:	eeeed77a 	.word	0xeeeed77a
   171e4:	bfdeeeee 	.word	0xbfdeeeee

000171e8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   171e8:	b480      	push	{r7}
   171ea:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   171ec:	f242 0320 	movw	r3, #8224	; 0x2020
   171f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171f4:	2200      	movs	r2, #0
   171f6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   171f8:	f242 0309 	movw	r3, #8201	; 0x2009
   171fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17200:	2219      	movs	r2, #25
   17202:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   17204:	f242 030b 	movw	r3, #8203	; 0x200b
   17208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1720c:	2200      	movs	r2, #0
   1720e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17210:	f242 030a 	movw	r3, #8202	; 0x200a
   17214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17218:	2208      	movs	r2, #8
   1721a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1721c:	f242 0320 	movw	r3, #8224	; 0x2020
   17220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17224:	2286      	movs	r2, #134	; 0x86
   17226:	701a      	strb	r2, [r3, #0]
}
   17228:	46bd      	mov	sp, r7
   1722a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1722e:	4770      	bx	lr

00017230 <uart_init_rx>:

void uart_init_rx() {
   17230:	b480      	push	{r7}
   17232:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   17234:	f242 030a 	movw	r3, #8202	; 0x200a
   17238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1723c:	f242 020a 	movw	r2, #8202	; 0x200a
   17240:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17244:	7812      	ldrb	r2, [r2, #0]
   17246:	b2d2      	uxtb	r2, r2
   17248:	f042 0210 	orr.w	r2, r2, #16
   1724c:	b2d2      	uxtb	r2, r2
   1724e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17250:	f242 030a 	movw	r3, #8202	; 0x200a
   17254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17258:	f242 020a 	movw	r2, #8202	; 0x200a
   1725c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17260:	7812      	ldrb	r2, [r2, #0]
   17262:	b2d2      	uxtb	r2, r2
   17264:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17268:	b2d2      	uxtb	r2, r2
   1726a:	701a      	strb	r2, [r3, #0]
}
   1726c:	46bd      	mov	sp, r7
   1726e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17272:	4770      	bx	lr

00017274 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17274:	b480      	push	{r7}
   17276:	b083      	sub	sp, #12
   17278:	af00      	add	r7, sp, #0
   1727a:	4603      	mov	r3, r0
   1727c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1727e:	f242 030a 	movw	r3, #8202	; 0x200a
   17282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17286:	781b      	ldrb	r3, [r3, #0]
   17288:	b2db      	uxtb	r3, r3
   1728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1728e:	2b00      	cmp	r3, #0
   17290:	d028      	beq.n	172e4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17292:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	b2db      	uxtb	r3, r3
   1729e:	461a      	mov	r2, r3
   172a0:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172a8:	781b      	ldrb	r3, [r3, #0]
   172aa:	3301      	adds	r3, #1
   172ac:	429a      	cmp	r2, r3
   172ae:	d100      	bne.n	172b2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   172b0:	e02c      	b.n	1730c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   172b2:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172ba:	781b      	ldrb	r3, [r3, #0]
   172bc:	461a      	mov	r2, r3
   172be:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   172c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172c6:	79f9      	ldrb	r1, [r7, #7]
   172c8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   172ca:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172d2:	781b      	ldrb	r3, [r3, #0]
   172d4:	3301      	adds	r3, #1
   172d6:	b2da      	uxtb	r2, r3
   172d8:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172e0:	701a      	strb	r2, [r3, #0]
   172e2:	e013      	b.n	1730c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   172e4:	f242 030c 	movw	r3, #8204	; 0x200c
   172e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172ec:	79fa      	ldrb	r2, [r7, #7]
   172ee:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   172f0:	f242 030a 	movw	r3, #8202	; 0x200a
   172f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172f8:	f242 020a 	movw	r2, #8202	; 0x200a
   172fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17300:	7812      	ldrb	r2, [r2, #0]
   17302:	b2d2      	uxtb	r2, r2
   17304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17308:	b2d2      	uxtb	r2, r2
   1730a:	701a      	strb	r2, [r3, #0]
  }
}
   1730c:	370c      	adds	r7, #12
   1730e:	46bd      	mov	sp, r7
   17310:	f85d 7b04 	ldr.w	r7, [sp], #4
   17314:	4770      	bx	lr
   17316:	bf00      	nop

00017318 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17318:	b590      	push	{r4, r7, lr}
   1731a:	b089      	sub	sp, #36	; 0x24
   1731c:	af00      	add	r7, sp, #0
   1731e:	4603      	mov	r3, r0
   17320:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17322:	f648 4340 	movw	r3, #35904	; 0x8c40
   17326:	f2c0 0301 	movt	r3, #1
   1732a:	f107 040c 	add.w	r4, r7, #12
   1732e:	6818      	ldr	r0, [r3, #0]
   17330:	6859      	ldr	r1, [r3, #4]
   17332:	689a      	ldr	r2, [r3, #8]
   17334:	68db      	ldr	r3, [r3, #12]
   17336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17338:	79fb      	ldrb	r3, [r7, #7]
   1733a:	091b      	lsrs	r3, r3, #4
   1733c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1733e:	79fb      	ldrb	r3, [r7, #7]
   17340:	f003 030f 	and.w	r3, r3, #15
   17344:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17346:	230f      	movs	r3, #15
   17348:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1734a:	230f      	movs	r3, #15
   1734c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1734e:	7ffb      	ldrb	r3, [r7, #31]
   17350:	f107 0220 	add.w	r2, r7, #32
   17354:	4413      	add	r3, r2
   17356:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1735a:	4618      	mov	r0, r3
   1735c:	f7ff ff8a 	bl	17274 <uart_transmit>
  uart_transmit(hex[low]);
   17360:	7fbb      	ldrb	r3, [r7, #30]
   17362:	f107 0220 	add.w	r2, r7, #32
   17366:	4413      	add	r3, r2
   17368:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1736c:	4618      	mov	r0, r3
   1736e:	f7ff ff81 	bl	17274 <uart_transmit>
} 
   17372:	3724      	adds	r7, #36	; 0x24
   17374:	46bd      	mov	sp, r7
   17376:	bd90      	pop	{r4, r7, pc}

00017378 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17378:	b580      	push	{r7, lr}
   1737a:	b084      	sub	sp, #16
   1737c:	af00      	add	r7, sp, #0
   1737e:	4603      	mov	r3, r0
   17380:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17382:	88fb      	ldrh	r3, [r7, #6]
   17384:	0a1b      	lsrs	r3, r3, #8
   17386:	b29b      	uxth	r3, r3
   17388:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1738a:	88fb      	ldrh	r3, [r7, #6]
   1738c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1738e:	7bfb      	ldrb	r3, [r7, #15]
   17390:	4618      	mov	r0, r3
   17392:	f7ff ffc1 	bl	17318 <uart_print_hex>
  uart_print_hex(low);
   17396:	7bbb      	ldrb	r3, [r7, #14]
   17398:	4618      	mov	r0, r3
   1739a:	f7ff ffbd 	bl	17318 <uart_print_hex>
}
   1739e:	3710      	adds	r7, #16
   173a0:	46bd      	mov	sp, r7
   173a2:	bd80      	pop	{r7, pc}

000173a4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   173a4:	b580      	push	{r7, lr}
   173a6:	b084      	sub	sp, #16
   173a8:	af00      	add	r7, sp, #0
   173aa:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   173ac:	2300      	movs	r3, #0
   173ae:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   173b0:	e009      	b.n	173c6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   173b2:	7bfb      	ldrb	r3, [r7, #15]
   173b4:	687a      	ldr	r2, [r7, #4]
   173b6:	4413      	add	r3, r2
   173b8:	781b      	ldrb	r3, [r3, #0]
   173ba:	4618      	mov	r0, r3
   173bc:	f7ff ff5a 	bl	17274 <uart_transmit>
    i++;
   173c0:	7bfb      	ldrb	r3, [r7, #15]
   173c2:	3301      	adds	r3, #1
   173c4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   173c6:	7bfb      	ldrb	r3, [r7, #15]
   173c8:	687a      	ldr	r2, [r7, #4]
   173ca:	4413      	add	r3, r2
   173cc:	781b      	ldrb	r3, [r3, #0]
   173ce:	2b00      	cmp	r3, #0
   173d0:	d1ef      	bne.n	173b2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   173d2:	3710      	adds	r7, #16
   173d4:	46bd      	mov	sp, r7
   173d6:	bd80      	pop	{r7, pc}

000173d8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   173d8:	b480      	push	{r7}
   173da:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   173dc:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   173e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173e4:	781a      	ldrb	r2, [r3, #0]
   173e6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173ee:	781b      	ldrb	r3, [r3, #0]
   173f0:	b2db      	uxtb	r3, r3
   173f2:	429a      	cmp	r2, r3
   173f4:	d10e      	bne.n	17414 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   173f6:	f242 030a 	movw	r3, #8202	; 0x200a
   173fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173fe:	f242 020a 	movw	r2, #8202	; 0x200a
   17402:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17406:	7812      	ldrb	r2, [r2, #0]
   17408:	b2d2      	uxtb	r2, r2
   1740a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1740e:	b2d2      	uxtb	r2, r2
   17410:	701a      	strb	r2, [r3, #0]
   17412:	e01d      	b.n	17450 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17414:	f242 030c 	movw	r3, #8204	; 0x200c
   17418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1741c:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   17420:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17424:	7812      	ldrb	r2, [r2, #0]
   17426:	b2d2      	uxtb	r2, r2
   17428:	4611      	mov	r1, r2
   1742a:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   1742e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17432:	5c52      	ldrb	r2, [r2, r1]
   17434:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17436:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1743e:	781b      	ldrb	r3, [r3, #0]
   17440:	b2db      	uxtb	r3, r3
   17442:	3301      	adds	r3, #1
   17444:	b2da      	uxtb	r2, r3
   17446:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1744a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1744e:	701a      	strb	r2, [r3, #0]
  }
}
   17450:	46bd      	mov	sp, r7
   17452:	f85d 7b04 	ldr.w	r7, [sp], #4
   17456:	4770      	bx	lr

00017458 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17458:	b580      	push	{r7, lr}
   1745a:	b082      	sub	sp, #8
   1745c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1745e:	2010      	movs	r0, #16
   17460:	2101      	movs	r1, #1
   17462:	f7e9 fcad 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17466:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1746a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1746e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17472:	2201      	movs	r2, #1
   17474:	f7e9 ffb4 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1747c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1747e:	2310      	movs	r3, #16
   17480:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17482:	2303      	movs	r3, #3
   17484:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17486:	1d3b      	adds	r3, r7, #4
   17488:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1748c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17490:	4619      	mov	r1, r3
   17492:	f7e9 fe69 	bl	1168 <GPIO_Init>
}
   17496:	3708      	adds	r7, #8
   17498:	46bd      	mov	sp, r7
   1749a:	bd80      	pop	{r7, pc}

0001749c <init_button>:

void init_button(void)
{
   1749c:	b580      	push	{r7, lr}
   1749e:	b082      	sub	sp, #8
   174a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   174a2:	2004      	movs	r0, #4
   174a4:	2101      	movs	r1, #1
   174a6:	f7e9 fc8b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   174aa:	2301      	movs	r3, #1
   174ac:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   174ae:	2304      	movs	r3, #4
   174b0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   174b2:	2303      	movs	r3, #3
   174b4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   174b6:	1d3b      	adds	r3, r7, #4
   174b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   174bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174c0:	4619      	mov	r1, r3
   174c2:	f7e9 fe51 	bl	1168 <GPIO_Init>
}
   174c6:	3708      	adds	r7, #8
   174c8:	46bd      	mov	sp, r7
   174ca:	bd80      	pop	{r7, pc}

000174cc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   174cc:	b580      	push	{r7, lr}
   174ce:	b084      	sub	sp, #16
   174d0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   174d2:	2001      	movs	r0, #1
   174d4:	2101      	movs	r1, #1
   174d6:	f7e9 fc73 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   174da:	2000      	movs	r0, #0
   174dc:	2100      	movs	r1, #0
   174de:	f7ea f877 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   174e2:	2301      	movs	r3, #1
   174e4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   174e6:	2300      	movs	r3, #0
   174e8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   174ea:	2308      	movs	r3, #8
   174ec:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   174ee:	2301      	movs	r3, #1
   174f0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   174f2:	f107 0308 	add.w	r3, r7, #8
   174f6:	4618      	mov	r0, r3
   174f8:	f7ea fd70 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   174fc:	2306      	movs	r3, #6
   174fe:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17500:	230f      	movs	r3, #15
   17502:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   17504:	230f      	movs	r3, #15
   17506:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17508:	2301      	movs	r3, #1
   1750a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1750c:	1d3b      	adds	r3, r7, #4
   1750e:	4618      	mov	r0, r3
   17510:	f7ea fe9e 	bl	2250 <NVIC_Init>
}
   17514:	3710      	adds	r7, #16
   17516:	46bd      	mov	sp, r7
   17518:	bd80      	pop	{r7, pc}
   1751a:	bf00      	nop

0001751c <init_rs232>:

void init_rs232(void)
{
   1751c:	b580      	push	{r7, lr}
   1751e:	b086      	sub	sp, #24
   17520:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17522:	2005      	movs	r0, #5
   17524:	2101      	movs	r1, #1
   17526:	f7e9 fc4b 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1752a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1752e:	2101      	movs	r1, #1
   17530:	f7e9 fc6e 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17534:	2308      	movs	r3, #8
   17536:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17538:	2304      	movs	r3, #4
   1753a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1753c:	1d3b      	adds	r3, r7, #4
   1753e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17542:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17546:	4619      	mov	r1, r3
   17548:	f7e9 fe0e 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1754c:	2304      	movs	r3, #4
   1754e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17550:	2303      	movs	r3, #3
   17552:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17554:	2318      	movs	r3, #24
   17556:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17558:	1d3b      	adds	r3, r7, #4
   1755a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1755e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17562:	4619      	mov	r1, r3
   17564:	f7e9 fe00 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17568:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1756c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1756e:	2300      	movs	r3, #0
   17570:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17572:	2300      	movs	r3, #0
   17574:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17576:	2300      	movs	r3, #0
   17578:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1757a:	2300      	movs	r3, #0
   1757c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1757e:	230c      	movs	r3, #12
   17580:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17582:	f107 0308 	add.w	r3, r7, #8
   17586:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1758a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1758e:	4619      	mov	r1, r3
   17590:	f7ea f8d2 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17594:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17598:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1759c:	2101      	movs	r1, #1
   1759e:	f7ea f9e9 	bl	1974 <USART_Cmd>
}
   175a2:	3718      	adds	r7, #24
   175a4:	46bd      	mov	sp, r7
   175a6:	bd80      	pop	{r7, pc}

000175a8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   175a8:	b580      	push	{r7, lr}
   175aa:	b082      	sub	sp, #8
   175ac:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   175ae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175b6:	f240 7127 	movw	r1, #1831	; 0x727
   175ba:	2200      	movs	r2, #0
   175bc:	f7ea f9fa 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   175c0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175c8:	f240 5125 	movw	r1, #1317	; 0x525
   175cc:	2201      	movs	r2, #1
   175ce:	f7ea f9f1 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   175d2:	2326      	movs	r3, #38	; 0x26
   175d4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   175d6:	2300      	movs	r3, #0
   175d8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   175da:	2301      	movs	r3, #1
   175dc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   175de:	1d3b      	adds	r3, r7, #4
   175e0:	4618      	mov	r0, r3
   175e2:	f7ea fe35 	bl	2250 <NVIC_Init>
}
   175e6:	3708      	adds	r7, #8
   175e8:	46bd      	mov	sp, r7
   175ea:	bd80      	pop	{r7, pc}

000175ec <enable_rs232>:

void enable_rs232(void)
{
   175ec:	b580      	push	{r7, lr}
   175ee:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   175f0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175f8:	2101      	movs	r1, #1
   175fa:	f7ea f9bb 	bl	1974 <USART_Cmd>
}
   175fe:	bd80      	pop	{r7, pc}

00017600 <send_byte>:

void send_byte(uint8_t b)
{
   17600:	b580      	push	{r7, lr}
   17602:	b082      	sub	sp, #8
   17604:	af00      	add	r7, sp, #0
   17606:	4603      	mov	r3, r0
   17608:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   1760a:	bf00      	nop
   1760c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17610:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17614:	2180      	movs	r1, #128	; 0x80
   17616:	f7ea fc19 	bl	1e4c <USART_GetFlagStatus>
   1761a:	4603      	mov	r3, r0
   1761c:	2b00      	cmp	r3, #0
   1761e:	d0f5      	beq.n	1760c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17624:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1762c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17630:	68d2      	ldr	r2, [r2, #12]
   17632:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17636:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17638:	79fb      	ldrb	r3, [r7, #7]
   1763a:	b29b      	uxth	r3, r3
   1763c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17640:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17644:	4619      	mov	r1, r3
   17646:	f7ea fab5 	bl	1bb4 <USART_SendData>
}
   1764a:	3708      	adds	r7, #8
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}

00017650 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17650:	b580      	push	{r7, lr}
   17652:	b082      	sub	sp, #8
   17654:	af00      	add	r7, sp, #0
   17656:	4603      	mov	r3, r0
   17658:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1765a:	79fb      	ldrb	r3, [r7, #7]
   1765c:	3330      	adds	r3, #48	; 0x30
   1765e:	b2db      	uxtb	r3, r3
   17660:	4618      	mov	r0, r3
   17662:	f7ff ffcd 	bl	17600 <send_byte>
}
   17666:	3708      	adds	r7, #8
   17668:	46bd      	mov	sp, r7
   1766a:	bd80      	pop	{r7, pc}

0001766c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1766c:	b580      	push	{r7, lr}
   1766e:	b084      	sub	sp, #16
   17670:	af00      	add	r7, sp, #0
   17672:	6078      	str	r0, [r7, #4]
    int i = 0;
   17674:	2300      	movs	r3, #0
   17676:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17678:	e009      	b.n	1768e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1767a:	68fb      	ldr	r3, [r7, #12]
   1767c:	687a      	ldr	r2, [r7, #4]
   1767e:	4413      	add	r3, r2
   17680:	781b      	ldrb	r3, [r3, #0]
   17682:	4618      	mov	r0, r3
   17684:	f7ff ffbc 	bl	17600 <send_byte>
        i++;
   17688:	68fb      	ldr	r3, [r7, #12]
   1768a:	3301      	adds	r3, #1
   1768c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1768e:	68fb      	ldr	r3, [r7, #12]
   17690:	687a      	ldr	r2, [r7, #4]
   17692:	4413      	add	r3, r2
   17694:	781b      	ldrb	r3, [r3, #0]
   17696:	2b00      	cmp	r3, #0
   17698:	d1ef      	bne.n	1767a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1769a:	3710      	adds	r7, #16
   1769c:	46bd      	mov	sp, r7
   1769e:	bd80      	pop	{r7, pc}

000176a0 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   176a0:	b580      	push	{r7, lr}
   176a2:	b08a      	sub	sp, #40	; 0x28
   176a4:	af00      	add	r7, sp, #0
   176a6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   176a8:	2300      	movs	r3, #0
   176aa:	623b      	str	r3, [r7, #32]
    long num = c_num;
   176ac:	687b      	ldr	r3, [r7, #4]
   176ae:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   176b0:	69fb      	ldr	r3, [r7, #28]
   176b2:	2b00      	cmp	r3, #0
   176b4:	d106      	bne.n	176c4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   176b6:	f648 4050 	movw	r0, #35920	; 0x8c50
   176ba:	f2c0 0001 	movt	r0, #1
   176be:	f7ff ffd5 	bl	1766c <vPrintString>
   176c2:	e062      	b.n	1778a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   176c4:	e024      	b.n	17710 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   176c6:	69f9      	ldr	r1, [r7, #28]
   176c8:	f246 6367 	movw	r3, #26215	; 0x6667
   176cc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   176d0:	fb83 2301 	smull	r2, r3, r3, r1
   176d4:	109a      	asrs	r2, r3, #2
   176d6:	17cb      	asrs	r3, r1, #31
   176d8:	1ad2      	subs	r2, r2, r3
   176da:	4613      	mov	r3, r2
   176dc:	009b      	lsls	r3, r3, #2
   176de:	4413      	add	r3, r2
   176e0:	005b      	lsls	r3, r3, #1
   176e2:	1aca      	subs	r2, r1, r3
   176e4:	b2d3      	uxtb	r3, r2
   176e6:	3330      	adds	r3, #48	; 0x30
   176e8:	b2da      	uxtb	r2, r3
   176ea:	f107 010c 	add.w	r1, r7, #12
   176ee:	6a3b      	ldr	r3, [r7, #32]
   176f0:	440b      	add	r3, r1
   176f2:	701a      	strb	r2, [r3, #0]
            count ++;
   176f4:	6a3b      	ldr	r3, [r7, #32]
   176f6:	3301      	adds	r3, #1
   176f8:	623b      	str	r3, [r7, #32]
            num /= 10;
   176fa:	69fa      	ldr	r2, [r7, #28]
   176fc:	f246 6367 	movw	r3, #26215	; 0x6667
   17700:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17704:	fb83 1302 	smull	r1, r3, r3, r2
   17708:	1099      	asrs	r1, r3, #2
   1770a:	17d3      	asrs	r3, r2, #31
   1770c:	1acb      	subs	r3, r1, r3
   1770e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17710:	69fb      	ldr	r3, [r7, #28]
   17712:	2b00      	cmp	r3, #0
   17714:	d1d7      	bne.n	176c6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17716:	f107 020c 	add.w	r2, r7, #12
   1771a:	6a3b      	ldr	r3, [r7, #32]
   1771c:	4413      	add	r3, r2
   1771e:	2200      	movs	r2, #0
   17720:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17722:	2300      	movs	r3, #0
   17724:	627b      	str	r3, [r7, #36]	; 0x24
   17726:	e020      	b.n	1776a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17728:	f107 020c 	add.w	r2, r7, #12
   1772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1772e:	4413      	add	r3, r2
   17730:	781b      	ldrb	r3, [r3, #0]
   17732:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17734:	6a3a      	ldr	r2, [r7, #32]
   17736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17738:	1ad3      	subs	r3, r2, r3
   1773a:	3b01      	subs	r3, #1
   1773c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17740:	4413      	add	r3, r2
   17742:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17746:	f107 010c 	add.w	r1, r7, #12
   1774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1774c:	440b      	add	r3, r1
   1774e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17750:	6a3a      	ldr	r2, [r7, #32]
   17752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17754:	1ad3      	subs	r3, r2, r3
   17756:	3b01      	subs	r3, #1
   17758:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1775c:	440b      	add	r3, r1
   1775e:	7efa      	ldrb	r2, [r7, #27]
   17760:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17766:	3301      	adds	r3, #1
   17768:	627b      	str	r3, [r7, #36]	; 0x24
   1776a:	6a3b      	ldr	r3, [r7, #32]
   1776c:	085a      	lsrs	r2, r3, #1
   1776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17770:	429a      	cmp	r2, r3
   17772:	d8d9      	bhi.n	17728 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17774:	f107 030c 	add.w	r3, r7, #12
   17778:	4618      	mov	r0, r3
   1777a:	f7ff ff77 	bl	1766c <vPrintString>
        vPrintString("\n\r");
   1777e:	f648 4054 	movw	r0, #35924	; 0x8c54
   17782:	f2c0 0001 	movt	r0, #1
   17786:	f7ff ff71 	bl	1766c <vPrintString>
    }
}
   1778a:	3728      	adds	r7, #40	; 0x28
   1778c:	46bd      	mov	sp, r7
   1778e:	bd80      	pop	{r7, pc}

00017790 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17790:	b580      	push	{r7, lr}
   17792:	b084      	sub	sp, #16
   17794:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   17796:	2300      	movs	r3, #0
   17798:	60fb      	str	r3, [r7, #12]
   1779a:	e01e      	b.n	177da <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   1779c:	f240 0390 	movw	r3, #144	; 0x90
   177a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177a4:	68fa      	ldr	r2, [r7, #12]
   177a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   177aa:	f240 0328 	movw	r3, #40	; 0x28
   177ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177b2:	68fa      	ldr	r2, [r7, #12]
   177b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   177b8:	f240 0328 	movw	r3, #40	; 0x28
   177bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177c0:	68fa      	ldr	r2, [r7, #12]
   177c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   177c6:	463b      	mov	r3, r7
   177c8:	f7eb fa8e 	bl	2ce8 <pxEventGenericCreate>
   177cc:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   177ce:	68b8      	ldr	r0, [r7, #8]
   177d0:	f7eb fe4a 	bl	3468 <vEventGenericSend>
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   177d4:	68fb      	ldr	r3, [r7, #12]
   177d6:	3301      	adds	r3, #1
   177d8:	60fb      	str	r3, [r7, #12]
   177da:	68fb      	ldr	r3, [r7, #12]
   177dc:	2b0c      	cmp	r3, #12
   177de:	dddd      	ble.n	1779c <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   177e0:	3710      	adds	r7, #16
   177e2:	46bd      	mov	sp, r7
   177e4:	bd80      	pop	{r7, pc}
   177e6:	bf00      	nop

000177e8 <vEventInterrupt>:

void vEventInterrupt(void * pvParameters)
{
   177e8:	b580      	push	{r7, lr}
   177ea:	b082      	sub	sp, #8
   177ec:	af00      	add	r7, sp, #0
   177ee:	6078      	str	r0, [r7, #4]
    vSemaphoreCreateBinary( xInterruptSemaphore );
   177f0:	2001      	movs	r0, #1
   177f2:	2100      	movs	r1, #0
   177f4:	2203      	movs	r2, #3
   177f6:	f7ec fda1 	bl	433c <xQueueGenericCreate>
   177fa:	4602      	mov	r2, r0
   177fc:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17804:	601a      	str	r2, [r3, #0]
   17806:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   1780a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1780e:	681b      	ldr	r3, [r3, #0]
   17810:	2b00      	cmp	r3, #0
   17812:	d00a      	beq.n	1782a <vEventInterrupt+0x42>
   17814:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	4618      	mov	r0, r3
   17820:	2100      	movs	r1, #0
   17822:	2200      	movs	r2, #0
   17824:	2300      	movs	r3, #0
   17826:	f7ec fe17 	bl	4458 <xQueueGenericSend>
    xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   1782a:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   1782e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17832:	681b      	ldr	r3, [r3, #0]
   17834:	4618      	mov	r0, r3
   17836:	2100      	movs	r1, #0
   17838:	f04f 32ff 	mov.w	r2, #4294967295
   1783c:	2300      	movs	r3, #0
   1783e:	f7ec fed1 	bl	45e4 <xQueueGenericReceive>
    while(1)
    {
        xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   17842:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1784a:	681b      	ldr	r3, [r3, #0]
   1784c:	4618      	mov	r0, r3
   1784e:	2100      	movs	r1, #0
   17850:	f04f 32ff 	mov.w	r2, #4294967295
   17854:	2300      	movs	r3, #0
   17856:	f7ec fec5 	bl	45e4 <xQueueGenericReceive>
        if(xIsExecutableEventArrive())
   1785a:	f7eb f969 	bl	2b30 <xIsExecutableEventArrive>
   1785e:	4603      	mov	r3, r0
   17860:	2b00      	cmp	r3, #0
   17862:	d00b      	beq.n	1787c <vEventInterrupt+0x94>
        {
            xSemaphoreGive( xBinarySemaphore[0] );
   17864:	f241 3354 	movw	r3, #4948	; 0x1354
   17868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1786c:	681b      	ldr	r3, [r3, #0]
   1786e:	4618      	mov	r0, r3
   17870:	2100      	movs	r1, #0
   17872:	2200      	movs	r2, #0
   17874:	2300      	movs	r3, #0
   17876:	f7ec fdef 	bl	4458 <xQueueGenericSend>
        }
    }
   1787a:	e7e2      	b.n	17842 <vEventInterrupt+0x5a>
   1787c:	e7e1      	b.n	17842 <vEventInterrupt+0x5a>
   1787e:	bf00      	nop

00017880 <main>:
}

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17880:	b580      	push	{r7, lr}
   17882:	b086      	sub	sp, #24
   17884:	af04      	add	r7, sp, #16
    init_led();
   17886:	f7ff fde7 	bl	17458 <init_led>
    init_rs232();
   1788a:	f7ff fe47 	bl	1751c <init_rs232>
    enable_rs232_interrupts();
   1788e:	f7ff fe8b 	bl	175a8 <enable_rs232_interrupts>
    enable_rs232();
   17892:	f7ff feab 	bl	175ec <enable_rs232>
    vSemaphoreInitialise();
   17896:	f7eb fe4f 	bl	3538 <vSemaphoreInitialise>
    vContextInit();
   1789a:	f7eb fe8d 	bl	35b8 <vContextInit>
    vInitialiseEventLists();  
   1789e:	f7eb f8e3 	bl	2a68 <vInitialiseEventLists>
    vStartTask();
   178a2:	f7ff ff75 	bl	17790 <vStartTask>
    PapabenchInit();
   178a6:	f7ec fa45 	bl	3d34 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   178aa:	2300      	movs	r3, #0
   178ac:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   178ae:	2301      	movs	r3, #1
   178b0:	9300      	str	r3, [sp, #0]
   178b2:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   178b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   178ba:	9301      	str	r3, [sp, #4]
   178bc:	2300      	movs	r3, #0
   178be:	9302      	str	r3, [sp, #8]
   178c0:	2300      	movs	r3, #0
   178c2:	9303      	str	r3, [sp, #12]
   178c4:	f643 405d 	movw	r0, #15453	; 0x3c5d
   178c8:	f2c0 0000 	movt	r0, #0
   178cc:	f648 4158 	movw	r1, #35928	; 0x8c58
   178d0:	f2c0 0101 	movt	r1, #1
   178d4:	2280      	movs	r2, #128	; 0x80
   178d6:	2300      	movs	r3, #0
   178d8:	f7ed f8d0 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[1]);
   178dc:	2301      	movs	r3, #1
   178de:	9300      	str	r3, [sp, #0]
   178e0:	4b2f      	ldr	r3, [pc, #188]	; (179a0 <main+0x120>)
   178e2:	9301      	str	r3, [sp, #4]
   178e4:	2300      	movs	r3, #0
   178e6:	9302      	str	r3, [sp, #8]
   178e8:	2300      	movs	r3, #0
   178ea:	9303      	str	r3, [sp, #12]
   178ec:	f643 009d 	movw	r0, #14493	; 0x389d
   178f0:	f2c0 0000 	movt	r0, #0
   178f4:	f648 4164 	movw	r1, #35940	; 0x8c64
   178f8:	f2c0 0101 	movt	r1, #1
   178fc:	2280      	movs	r2, #128	; 0x80
   178fe:	2300      	movs	r3, #0
   17900:	f7ed f8bc 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[2]);
   17904:	2301      	movs	r3, #1
   17906:	9300      	str	r3, [sp, #0]
   17908:	4b26      	ldr	r3, [pc, #152]	; (179a4 <main+0x124>)
   1790a:	9301      	str	r3, [sp, #4]
   1790c:	2300      	movs	r3, #0
   1790e:	9302      	str	r3, [sp, #8]
   17910:	2300      	movs	r3, #0
   17912:	9303      	str	r3, [sp, #12]
   17914:	f643 10c5 	movw	r0, #14789	; 0x39c5
   17918:	f2c0 0000 	movt	r0, #0
   1791c:	f648 4170 	movw	r1, #35952	; 0x8c70
   17920:	f2c0 0101 	movt	r1, #1
   17924:	2280      	movs	r2, #128	; 0x80
   17926:	2300      	movs	r3, #0
   17928:	f7ed f8a8 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[3]);
   1792c:	2301      	movs	r3, #1
   1792e:	9300      	str	r3, [sp, #0]
   17930:	4b1d      	ldr	r3, [pc, #116]	; (179a8 <main+0x128>)
   17932:	9301      	str	r3, [sp, #4]
   17934:	2300      	movs	r3, #0
   17936:	9302      	str	r3, [sp, #8]
   17938:	2300      	movs	r3, #0
   1793a:	9303      	str	r3, [sp, #12]
   1793c:	f643 3041 	movw	r0, #15169	; 0x3b41
   17940:	f2c0 0000 	movt	r0, #0
   17944:	f648 417c 	movw	r1, #35964	; 0x8c7c
   17948:	f2c0 0101 	movt	r1, #1
   1794c:	2280      	movs	r2, #128	; 0x80
   1794e:	2300      	movs	r3, #0
   17950:	f7ed f894 	bl	4a7c <xTaskGenericCreate>
    xTaskCreate( vEventInterrupt, "event", SERVANT_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
   17954:	2301      	movs	r3, #1
   17956:	9300      	str	r3, [sp, #0]
   17958:	2300      	movs	r3, #0
   1795a:	9301      	str	r3, [sp, #4]
   1795c:	2300      	movs	r3, #0
   1795e:	9302      	str	r3, [sp, #8]
   17960:	2300      	movs	r3, #0
   17962:	9303      	str	r3, [sp, #12]
   17964:	f247 70e9 	movw	r0, #30697	; 0x77e9
   17968:	f2c0 0001 	movt	r0, #1
   1796c:	f648 4188 	movw	r1, #35976	; 0x8c88
   17970:	f2c0 0101 	movt	r1, #1
   17974:	2280      	movs	r2, #128	; 0x80
   17976:	2300      	movs	r3, #0
   17978:	f7ed f880 	bl	4a7c <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   1797c:	f241 3354 	movw	r3, #4948	; 0x1354
   17980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	4618      	mov	r0, r3
   17988:	2100      	movs	r1, #0
   1798a:	2200      	movs	r2, #0
   1798c:	2300      	movs	r3, #0
   1798e:	f7ec fd63 	bl	4458 <xQueueGenericSend>
    vTaskStartScheduler();
   17992:	f7ed fbf1 	bl	5178 <vTaskStartScheduler>

    return 0;
   17996:	2300      	movs	r3, #0
}
   17998:	4618      	mov	r0, r3
   1799a:	3708      	adds	r7, #8
   1799c:	46bd      	mov	sp, r7
   1799e:	bd80      	pop	{r7, pc}
   179a0:	2004cdc8 	.word	0x2004cdc8
   179a4:	2004cdcc 	.word	0x2004cdcc
   179a8:	2004cdd0 	.word	0x2004cdd0

000179ac <myTraceCreate>:

void myTraceCreate      (){
   179ac:	b480      	push	{r7}
   179ae:	af00      	add	r7, sp, #0
}
   179b0:	46bd      	mov	sp, r7
   179b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   179b6:	4770      	bx	lr

000179b8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   179b8:	b480      	push	{r7}
   179ba:	af00      	add	r7, sp, #0
}
   179bc:	46bd      	mov	sp, r7
   179be:	f85d 7b04 	ldr.w	r7, [sp], #4
   179c2:	4770      	bx	lr

000179c4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   179c4:	b480      	push	{r7}
   179c6:	af00      	add	r7, sp, #0
}
   179c8:	46bd      	mov	sp, r7
   179ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   179ce:	4770      	bx	lr

000179d0 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   179d0:	b580      	push	{r7, lr}
   179d2:	af00      	add	r7, sp, #0
    xSemaphoreGive( xInterruptSemaphore );
   179d4:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   179d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   179dc:	681b      	ldr	r3, [r3, #0]
   179de:	4618      	mov	r0, r3
   179e0:	2100      	movs	r1, #0
   179e2:	2200      	movs	r2, #0
   179e4:	2300      	movs	r3, #0
   179e6:	f7ec fd37 	bl	4458 <xQueueGenericSend>
}
   179ea:	bd80      	pop	{r7, pc}

000179ec <__aeabi_drsub>:
   179ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   179f0:	e002      	b.n	179f8 <__adddf3>
   179f2:	bf00      	nop

000179f4 <__aeabi_dsub>:
   179f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000179f8 <__adddf3>:
   179f8:	b530      	push	{r4, r5, lr}
   179fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   179fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17a02:	ea94 0f05 	teq	r4, r5
   17a06:	bf08      	it	eq
   17a08:	ea90 0f02 	teqeq	r0, r2
   17a0c:	bf1f      	itttt	ne
   17a0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   17a12:	ea55 0c02 	orrsne.w	ip, r5, r2
   17a16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17a1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17a1e:	f000 80e2 	beq.w	17be6 <__adddf3+0x1ee>
   17a22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17a26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17a2a:	bfb8      	it	lt
   17a2c:	426d      	neglt	r5, r5
   17a2e:	dd0c      	ble.n	17a4a <__adddf3+0x52>
   17a30:	442c      	add	r4, r5
   17a32:	ea80 0202 	eor.w	r2, r0, r2
   17a36:	ea81 0303 	eor.w	r3, r1, r3
   17a3a:	ea82 0000 	eor.w	r0, r2, r0
   17a3e:	ea83 0101 	eor.w	r1, r3, r1
   17a42:	ea80 0202 	eor.w	r2, r0, r2
   17a46:	ea81 0303 	eor.w	r3, r1, r3
   17a4a:	2d36      	cmp	r5, #54	; 0x36
   17a4c:	bf88      	it	hi
   17a4e:	bd30      	pophi	{r4, r5, pc}
   17a50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17a54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17a58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17a5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17a60:	d002      	beq.n	17a68 <__adddf3+0x70>
   17a62:	4240      	negs	r0, r0
   17a64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17a6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17a70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17a74:	d002      	beq.n	17a7c <__adddf3+0x84>
   17a76:	4252      	negs	r2, r2
   17a78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17a7c:	ea94 0f05 	teq	r4, r5
   17a80:	f000 80a7 	beq.w	17bd2 <__adddf3+0x1da>
   17a84:	f1a4 0401 	sub.w	r4, r4, #1
   17a88:	f1d5 0e20 	rsbs	lr, r5, #32
   17a8c:	db0d      	blt.n	17aaa <__adddf3+0xb2>
   17a8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   17a92:	fa22 f205 	lsr.w	r2, r2, r5
   17a96:	1880      	adds	r0, r0, r2
   17a98:	f141 0100 	adc.w	r1, r1, #0
   17a9c:	fa03 f20e 	lsl.w	r2, r3, lr
   17aa0:	1880      	adds	r0, r0, r2
   17aa2:	fa43 f305 	asr.w	r3, r3, r5
   17aa6:	4159      	adcs	r1, r3
   17aa8:	e00e      	b.n	17ac8 <__adddf3+0xd0>
   17aaa:	f1a5 0520 	sub.w	r5, r5, #32
   17aae:	f10e 0e20 	add.w	lr, lr, #32
   17ab2:	2a01      	cmp	r2, #1
   17ab4:	fa03 fc0e 	lsl.w	ip, r3, lr
   17ab8:	bf28      	it	cs
   17aba:	f04c 0c02 	orrcs.w	ip, ip, #2
   17abe:	fa43 f305 	asr.w	r3, r3, r5
   17ac2:	18c0      	adds	r0, r0, r3
   17ac4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17ac8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17acc:	d507      	bpl.n	17ade <__adddf3+0xe6>
   17ace:	f04f 0e00 	mov.w	lr, #0
   17ad2:	f1dc 0c00 	rsbs	ip, ip, #0
   17ad6:	eb7e 0000 	sbcs.w	r0, lr, r0
   17ada:	eb6e 0101 	sbc.w	r1, lr, r1
   17ade:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17ae2:	d31b      	bcc.n	17b1c <__adddf3+0x124>
   17ae4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17ae8:	d30c      	bcc.n	17b04 <__adddf3+0x10c>
   17aea:	0849      	lsrs	r1, r1, #1
   17aec:	ea5f 0030 	movs.w	r0, r0, rrx
   17af0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17af4:	f104 0401 	add.w	r4, r4, #1
   17af8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17afc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17b00:	f080 809a 	bcs.w	17c38 <__adddf3+0x240>
   17b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17b08:	bf08      	it	eq
   17b0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17b0e:	f150 0000 	adcs.w	r0, r0, #0
   17b12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b16:	ea41 0105 	orr.w	r1, r1, r5
   17b1a:	bd30      	pop	{r4, r5, pc}
   17b1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17b20:	4140      	adcs	r0, r0
   17b22:	eb41 0101 	adc.w	r1, r1, r1
   17b26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b2a:	f1a4 0401 	sub.w	r4, r4, #1
   17b2e:	d1e9      	bne.n	17b04 <__adddf3+0x10c>
   17b30:	f091 0f00 	teq	r1, #0
   17b34:	bf04      	itt	eq
   17b36:	4601      	moveq	r1, r0
   17b38:	2000      	moveq	r0, #0
   17b3a:	fab1 f381 	clz	r3, r1
   17b3e:	bf08      	it	eq
   17b40:	3320      	addeq	r3, #32
   17b42:	f1a3 030b 	sub.w	r3, r3, #11
   17b46:	f1b3 0220 	subs.w	r2, r3, #32
   17b4a:	da0c      	bge.n	17b66 <__adddf3+0x16e>
   17b4c:	320c      	adds	r2, #12
   17b4e:	dd08      	ble.n	17b62 <__adddf3+0x16a>
   17b50:	f102 0c14 	add.w	ip, r2, #20
   17b54:	f1c2 020c 	rsb	r2, r2, #12
   17b58:	fa01 f00c 	lsl.w	r0, r1, ip
   17b5c:	fa21 f102 	lsr.w	r1, r1, r2
   17b60:	e00c      	b.n	17b7c <__adddf3+0x184>
   17b62:	f102 0214 	add.w	r2, r2, #20
   17b66:	bfd8      	it	le
   17b68:	f1c2 0c20 	rsble	ip, r2, #32
   17b6c:	fa01 f102 	lsl.w	r1, r1, r2
   17b70:	fa20 fc0c 	lsr.w	ip, r0, ip
   17b74:	bfdc      	itt	le
   17b76:	ea41 010c 	orrle.w	r1, r1, ip
   17b7a:	4090      	lslle	r0, r2
   17b7c:	1ae4      	subs	r4, r4, r3
   17b7e:	bfa2      	ittt	ge
   17b80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17b84:	4329      	orrge	r1, r5
   17b86:	bd30      	popge	{r4, r5, pc}
   17b88:	ea6f 0404 	mvn.w	r4, r4
   17b8c:	3c1f      	subs	r4, #31
   17b8e:	da1c      	bge.n	17bca <__adddf3+0x1d2>
   17b90:	340c      	adds	r4, #12
   17b92:	dc0e      	bgt.n	17bb2 <__adddf3+0x1ba>
   17b94:	f104 0414 	add.w	r4, r4, #20
   17b98:	f1c4 0220 	rsb	r2, r4, #32
   17b9c:	fa20 f004 	lsr.w	r0, r0, r4
   17ba0:	fa01 f302 	lsl.w	r3, r1, r2
   17ba4:	ea40 0003 	orr.w	r0, r0, r3
   17ba8:	fa21 f304 	lsr.w	r3, r1, r4
   17bac:	ea45 0103 	orr.w	r1, r5, r3
   17bb0:	bd30      	pop	{r4, r5, pc}
   17bb2:	f1c4 040c 	rsb	r4, r4, #12
   17bb6:	f1c4 0220 	rsb	r2, r4, #32
   17bba:	fa20 f002 	lsr.w	r0, r0, r2
   17bbe:	fa01 f304 	lsl.w	r3, r1, r4
   17bc2:	ea40 0003 	orr.w	r0, r0, r3
   17bc6:	4629      	mov	r1, r5
   17bc8:	bd30      	pop	{r4, r5, pc}
   17bca:	fa21 f004 	lsr.w	r0, r1, r4
   17bce:	4629      	mov	r1, r5
   17bd0:	bd30      	pop	{r4, r5, pc}
   17bd2:	f094 0f00 	teq	r4, #0
   17bd6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17bda:	bf06      	itte	eq
   17bdc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17be0:	3401      	addeq	r4, #1
   17be2:	3d01      	subne	r5, #1
   17be4:	e74e      	b.n	17a84 <__adddf3+0x8c>
   17be6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17bea:	bf18      	it	ne
   17bec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17bf0:	d029      	beq.n	17c46 <__adddf3+0x24e>
   17bf2:	ea94 0f05 	teq	r4, r5
   17bf6:	bf08      	it	eq
   17bf8:	ea90 0f02 	teqeq	r0, r2
   17bfc:	d005      	beq.n	17c0a <__adddf3+0x212>
   17bfe:	ea54 0c00 	orrs.w	ip, r4, r0
   17c02:	bf04      	itt	eq
   17c04:	4619      	moveq	r1, r3
   17c06:	4610      	moveq	r0, r2
   17c08:	bd30      	pop	{r4, r5, pc}
   17c0a:	ea91 0f03 	teq	r1, r3
   17c0e:	bf1e      	ittt	ne
   17c10:	2100      	movne	r1, #0
   17c12:	2000      	movne	r0, #0
   17c14:	bd30      	popne	{r4, r5, pc}
   17c16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17c1a:	d105      	bne.n	17c28 <__adddf3+0x230>
   17c1c:	0040      	lsls	r0, r0, #1
   17c1e:	4149      	adcs	r1, r1
   17c20:	bf28      	it	cs
   17c22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17c26:	bd30      	pop	{r4, r5, pc}
   17c28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17c2c:	bf3c      	itt	cc
   17c2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17c32:	bd30      	popcc	{r4, r5, pc}
   17c34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17c38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17c3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c40:	f04f 0000 	mov.w	r0, #0
   17c44:	bd30      	pop	{r4, r5, pc}
   17c46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17c4a:	bf1a      	itte	ne
   17c4c:	4619      	movne	r1, r3
   17c4e:	4610      	movne	r0, r2
   17c50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17c54:	bf1c      	itt	ne
   17c56:	460b      	movne	r3, r1
   17c58:	4602      	movne	r2, r0
   17c5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17c5e:	bf06      	itte	eq
   17c60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17c64:	ea91 0f03 	teqeq	r1, r3
   17c68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17c6c:	bd30      	pop	{r4, r5, pc}
   17c6e:	bf00      	nop

00017c70 <__aeabi_ui2d>:
   17c70:	f090 0f00 	teq	r0, #0
   17c74:	bf04      	itt	eq
   17c76:	2100      	moveq	r1, #0
   17c78:	4770      	bxeq	lr
   17c7a:	b530      	push	{r4, r5, lr}
   17c7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c84:	f04f 0500 	mov.w	r5, #0
   17c88:	f04f 0100 	mov.w	r1, #0
   17c8c:	e750      	b.n	17b30 <__adddf3+0x138>
   17c8e:	bf00      	nop

00017c90 <__aeabi_i2d>:
   17c90:	f090 0f00 	teq	r0, #0
   17c94:	bf04      	itt	eq
   17c96:	2100      	moveq	r1, #0
   17c98:	4770      	bxeq	lr
   17c9a:	b530      	push	{r4, r5, lr}
   17c9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17ca0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17ca4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17ca8:	bf48      	it	mi
   17caa:	4240      	negmi	r0, r0
   17cac:	f04f 0100 	mov.w	r1, #0
   17cb0:	e73e      	b.n	17b30 <__adddf3+0x138>
   17cb2:	bf00      	nop

00017cb4 <__aeabi_f2d>:
   17cb4:	0042      	lsls	r2, r0, #1
   17cb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17cba:	ea4f 0131 	mov.w	r1, r1, rrx
   17cbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17cc2:	bf1f      	itttt	ne
   17cc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17cc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ccc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17cd0:	4770      	bxne	lr
   17cd2:	f092 0f00 	teq	r2, #0
   17cd6:	bf14      	ite	ne
   17cd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17cdc:	4770      	bxeq	lr
   17cde:	b530      	push	{r4, r5, lr}
   17ce0:	f44f 7460 	mov.w	r4, #896	; 0x380
   17ce4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17cec:	e720      	b.n	17b30 <__adddf3+0x138>
   17cee:	bf00      	nop

00017cf0 <__aeabi_ul2d>:
   17cf0:	ea50 0201 	orrs.w	r2, r0, r1
   17cf4:	bf08      	it	eq
   17cf6:	4770      	bxeq	lr
   17cf8:	b530      	push	{r4, r5, lr}
   17cfa:	f04f 0500 	mov.w	r5, #0
   17cfe:	e00a      	b.n	17d16 <__aeabi_l2d+0x16>

00017d00 <__aeabi_l2d>:
   17d00:	ea50 0201 	orrs.w	r2, r0, r1
   17d04:	bf08      	it	eq
   17d06:	4770      	bxeq	lr
   17d08:	b530      	push	{r4, r5, lr}
   17d0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17d0e:	d502      	bpl.n	17d16 <__aeabi_l2d+0x16>
   17d10:	4240      	negs	r0, r0
   17d12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17d16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17d1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17d1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17d22:	f43f aedc 	beq.w	17ade <__adddf3+0xe6>
   17d26:	f04f 0203 	mov.w	r2, #3
   17d2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d2e:	bf18      	it	ne
   17d30:	3203      	addne	r2, #3
   17d32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d36:	bf18      	it	ne
   17d38:	3203      	addne	r2, #3
   17d3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17d3e:	f1c2 0320 	rsb	r3, r2, #32
   17d42:	fa00 fc03 	lsl.w	ip, r0, r3
   17d46:	fa20 f002 	lsr.w	r0, r0, r2
   17d4a:	fa01 fe03 	lsl.w	lr, r1, r3
   17d4e:	ea40 000e 	orr.w	r0, r0, lr
   17d52:	fa21 f102 	lsr.w	r1, r1, r2
   17d56:	4414      	add	r4, r2
   17d58:	e6c1      	b.n	17ade <__adddf3+0xe6>
   17d5a:	bf00      	nop

00017d5c <__aeabi_dmul>:
   17d5c:	b570      	push	{r4, r5, r6, lr}
   17d5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17d62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17d66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17d6a:	bf1d      	ittte	ne
   17d6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17d70:	ea94 0f0c 	teqne	r4, ip
   17d74:	ea95 0f0c 	teqne	r5, ip
   17d78:	f000 f8de 	bleq	17f38 <__aeabi_dmul+0x1dc>
   17d7c:	442c      	add	r4, r5
   17d7e:	ea81 0603 	eor.w	r6, r1, r3
   17d82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17d86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17d8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17d8e:	bf18      	it	ne
   17d90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17d94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17d9c:	d038      	beq.n	17e10 <__aeabi_dmul+0xb4>
   17d9e:	fba0 ce02 	umull	ip, lr, r0, r2
   17da2:	f04f 0500 	mov.w	r5, #0
   17da6:	fbe1 e502 	umlal	lr, r5, r1, r2
   17daa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17dae:	fbe0 e503 	umlal	lr, r5, r0, r3
   17db2:	f04f 0600 	mov.w	r6, #0
   17db6:	fbe1 5603 	umlal	r5, r6, r1, r3
   17dba:	f09c 0f00 	teq	ip, #0
   17dbe:	bf18      	it	ne
   17dc0:	f04e 0e01 	orrne.w	lr, lr, #1
   17dc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17dc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17dcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17dd0:	d204      	bcs.n	17ddc <__aeabi_dmul+0x80>
   17dd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17dd6:	416d      	adcs	r5, r5
   17dd8:	eb46 0606 	adc.w	r6, r6, r6
   17ddc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17de0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17de4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17de8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17dec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17df0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17df4:	bf88      	it	hi
   17df6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17dfa:	d81e      	bhi.n	17e3a <__aeabi_dmul+0xde>
   17dfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17e00:	bf08      	it	eq
   17e02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17e06:	f150 0000 	adcs.w	r0, r0, #0
   17e0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17e0e:	bd70      	pop	{r4, r5, r6, pc}
   17e10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17e14:	ea46 0101 	orr.w	r1, r6, r1
   17e18:	ea40 0002 	orr.w	r0, r0, r2
   17e1c:	ea81 0103 	eor.w	r1, r1, r3
   17e20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17e24:	bfc2      	ittt	gt
   17e26:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e2e:	bd70      	popgt	{r4, r5, r6, pc}
   17e30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e34:	f04f 0e00 	mov.w	lr, #0
   17e38:	3c01      	subs	r4, #1
   17e3a:	f300 80ab 	bgt.w	17f94 <__aeabi_dmul+0x238>
   17e3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17e42:	bfde      	ittt	le
   17e44:	2000      	movle	r0, #0
   17e46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17e4a:	bd70      	pople	{r4, r5, r6, pc}
   17e4c:	f1c4 0400 	rsb	r4, r4, #0
   17e50:	3c20      	subs	r4, #32
   17e52:	da35      	bge.n	17ec0 <__aeabi_dmul+0x164>
   17e54:	340c      	adds	r4, #12
   17e56:	dc1b      	bgt.n	17e90 <__aeabi_dmul+0x134>
   17e58:	f104 0414 	add.w	r4, r4, #20
   17e5c:	f1c4 0520 	rsb	r5, r4, #32
   17e60:	fa00 f305 	lsl.w	r3, r0, r5
   17e64:	fa20 f004 	lsr.w	r0, r0, r4
   17e68:	fa01 f205 	lsl.w	r2, r1, r5
   17e6c:	ea40 0002 	orr.w	r0, r0, r2
   17e70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17e74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17e78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17e7c:	fa21 f604 	lsr.w	r6, r1, r4
   17e80:	eb42 0106 	adc.w	r1, r2, r6
   17e84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e88:	bf08      	it	eq
   17e8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e8e:	bd70      	pop	{r4, r5, r6, pc}
   17e90:	f1c4 040c 	rsb	r4, r4, #12
   17e94:	f1c4 0520 	rsb	r5, r4, #32
   17e98:	fa00 f304 	lsl.w	r3, r0, r4
   17e9c:	fa20 f005 	lsr.w	r0, r0, r5
   17ea0:	fa01 f204 	lsl.w	r2, r1, r4
   17ea4:	ea40 0002 	orr.w	r0, r0, r2
   17ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17eac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17eb0:	f141 0100 	adc.w	r1, r1, #0
   17eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17eb8:	bf08      	it	eq
   17eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ebe:	bd70      	pop	{r4, r5, r6, pc}
   17ec0:	f1c4 0520 	rsb	r5, r4, #32
   17ec4:	fa00 f205 	lsl.w	r2, r0, r5
   17ec8:	ea4e 0e02 	orr.w	lr, lr, r2
   17ecc:	fa20 f304 	lsr.w	r3, r0, r4
   17ed0:	fa01 f205 	lsl.w	r2, r1, r5
   17ed4:	ea43 0302 	orr.w	r3, r3, r2
   17ed8:	fa21 f004 	lsr.w	r0, r1, r4
   17edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ee0:	fa21 f204 	lsr.w	r2, r1, r4
   17ee4:	ea20 0002 	bic.w	r0, r0, r2
   17ee8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17eec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17ef0:	bf08      	it	eq
   17ef2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ef6:	bd70      	pop	{r4, r5, r6, pc}
   17ef8:	f094 0f00 	teq	r4, #0
   17efc:	d10f      	bne.n	17f1e <__aeabi_dmul+0x1c2>
   17efe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17f02:	0040      	lsls	r0, r0, #1
   17f04:	eb41 0101 	adc.w	r1, r1, r1
   17f08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f0c:	bf08      	it	eq
   17f0e:	3c01      	subeq	r4, #1
   17f10:	d0f7      	beq.n	17f02 <__aeabi_dmul+0x1a6>
   17f12:	ea41 0106 	orr.w	r1, r1, r6
   17f16:	f095 0f00 	teq	r5, #0
   17f1a:	bf18      	it	ne
   17f1c:	4770      	bxne	lr
   17f1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17f22:	0052      	lsls	r2, r2, #1
   17f24:	eb43 0303 	adc.w	r3, r3, r3
   17f28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17f2c:	bf08      	it	eq
   17f2e:	3d01      	subeq	r5, #1
   17f30:	d0f7      	beq.n	17f22 <__aeabi_dmul+0x1c6>
   17f32:	ea43 0306 	orr.w	r3, r3, r6
   17f36:	4770      	bx	lr
   17f38:	ea94 0f0c 	teq	r4, ip
   17f3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f40:	bf18      	it	ne
   17f42:	ea95 0f0c 	teqne	r5, ip
   17f46:	d00c      	beq.n	17f62 <__aeabi_dmul+0x206>
   17f48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f4c:	bf18      	it	ne
   17f4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f52:	d1d1      	bne.n	17ef8 <__aeabi_dmul+0x19c>
   17f54:	ea81 0103 	eor.w	r1, r1, r3
   17f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f5c:	f04f 0000 	mov.w	r0, #0
   17f60:	bd70      	pop	{r4, r5, r6, pc}
   17f62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f66:	bf06      	itte	eq
   17f68:	4610      	moveq	r0, r2
   17f6a:	4619      	moveq	r1, r3
   17f6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f70:	d019      	beq.n	17fa6 <__aeabi_dmul+0x24a>
   17f72:	ea94 0f0c 	teq	r4, ip
   17f76:	d102      	bne.n	17f7e <__aeabi_dmul+0x222>
   17f78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17f7c:	d113      	bne.n	17fa6 <__aeabi_dmul+0x24a>
   17f7e:	ea95 0f0c 	teq	r5, ip
   17f82:	d105      	bne.n	17f90 <__aeabi_dmul+0x234>
   17f84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17f88:	bf1c      	itt	ne
   17f8a:	4610      	movne	r0, r2
   17f8c:	4619      	movne	r1, r3
   17f8e:	d10a      	bne.n	17fa6 <__aeabi_dmul+0x24a>
   17f90:	ea81 0103 	eor.w	r1, r1, r3
   17f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17f9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17fa0:	f04f 0000 	mov.w	r0, #0
   17fa4:	bd70      	pop	{r4, r5, r6, pc}
   17fa6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17faa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17fae:	bd70      	pop	{r4, r5, r6, pc}

00017fb0 <__aeabi_ddiv>:
   17fb0:	b570      	push	{r4, r5, r6, lr}
   17fb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17fb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17fba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17fbe:	bf1d      	ittte	ne
   17fc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17fc4:	ea94 0f0c 	teqne	r4, ip
   17fc8:	ea95 0f0c 	teqne	r5, ip
   17fcc:	f000 f8a7 	bleq	1811e <__aeabi_ddiv+0x16e>
   17fd0:	eba4 0405 	sub.w	r4, r4, r5
   17fd4:	ea81 0e03 	eor.w	lr, r1, r3
   17fd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17fe0:	f000 8088 	beq.w	180f4 <__aeabi_ddiv+0x144>
   17fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17fe8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17fec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17ff0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ff4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17ff8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17ffc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18000:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18004:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18008:	429d      	cmp	r5, r3
   1800a:	bf08      	it	eq
   1800c:	4296      	cmpeq	r6, r2
   1800e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18012:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18016:	d202      	bcs.n	1801e <__aeabi_ddiv+0x6e>
   18018:	085b      	lsrs	r3, r3, #1
   1801a:	ea4f 0232 	mov.w	r2, r2, rrx
   1801e:	1ab6      	subs	r6, r6, r2
   18020:	eb65 0503 	sbc.w	r5, r5, r3
   18024:	085b      	lsrs	r3, r3, #1
   18026:	ea4f 0232 	mov.w	r2, r2, rrx
   1802a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1802e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18032:	ebb6 0e02 	subs.w	lr, r6, r2
   18036:	eb75 0e03 	sbcs.w	lr, r5, r3
   1803a:	bf22      	ittt	cs
   1803c:	1ab6      	subcs	r6, r6, r2
   1803e:	4675      	movcs	r5, lr
   18040:	ea40 000c 	orrcs.w	r0, r0, ip
   18044:	085b      	lsrs	r3, r3, #1
   18046:	ea4f 0232 	mov.w	r2, r2, rrx
   1804a:	ebb6 0e02 	subs.w	lr, r6, r2
   1804e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18052:	bf22      	ittt	cs
   18054:	1ab6      	subcs	r6, r6, r2
   18056:	4675      	movcs	r5, lr
   18058:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1805c:	085b      	lsrs	r3, r3, #1
   1805e:	ea4f 0232 	mov.w	r2, r2, rrx
   18062:	ebb6 0e02 	subs.w	lr, r6, r2
   18066:	eb75 0e03 	sbcs.w	lr, r5, r3
   1806a:	bf22      	ittt	cs
   1806c:	1ab6      	subcs	r6, r6, r2
   1806e:	4675      	movcs	r5, lr
   18070:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18074:	085b      	lsrs	r3, r3, #1
   18076:	ea4f 0232 	mov.w	r2, r2, rrx
   1807a:	ebb6 0e02 	subs.w	lr, r6, r2
   1807e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18082:	bf22      	ittt	cs
   18084:	1ab6      	subcs	r6, r6, r2
   18086:	4675      	movcs	r5, lr
   18088:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1808c:	ea55 0e06 	orrs.w	lr, r5, r6
   18090:	d018      	beq.n	180c4 <__aeabi_ddiv+0x114>
   18092:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18096:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1809a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1809e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   180a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   180a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   180aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   180ae:	d1c0      	bne.n	18032 <__aeabi_ddiv+0x82>
   180b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   180b4:	d10b      	bne.n	180ce <__aeabi_ddiv+0x11e>
   180b6:	ea41 0100 	orr.w	r1, r1, r0
   180ba:	f04f 0000 	mov.w	r0, #0
   180be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   180c2:	e7b6      	b.n	18032 <__aeabi_ddiv+0x82>
   180c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   180c8:	bf04      	itt	eq
   180ca:	4301      	orreq	r1, r0
   180cc:	2000      	moveq	r0, #0
   180ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   180d2:	bf88      	it	hi
   180d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   180d8:	f63f aeaf 	bhi.w	17e3a <__aeabi_dmul+0xde>
   180dc:	ebb5 0c03 	subs.w	ip, r5, r3
   180e0:	bf04      	itt	eq
   180e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   180e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   180ea:	f150 0000 	adcs.w	r0, r0, #0
   180ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   180f2:	bd70      	pop	{r4, r5, r6, pc}
   180f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   180f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   180fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18100:	bfc2      	ittt	gt
   18102:	ebd4 050c 	rsbsgt	r5, r4, ip
   18106:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1810a:	bd70      	popgt	{r4, r5, r6, pc}
   1810c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18110:	f04f 0e00 	mov.w	lr, #0
   18114:	3c01      	subs	r4, #1
   18116:	e690      	b.n	17e3a <__aeabi_dmul+0xde>
   18118:	ea45 0e06 	orr.w	lr, r5, r6
   1811c:	e68d      	b.n	17e3a <__aeabi_dmul+0xde>
   1811e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18122:	ea94 0f0c 	teq	r4, ip
   18126:	bf08      	it	eq
   18128:	ea95 0f0c 	teqeq	r5, ip
   1812c:	f43f af3b 	beq.w	17fa6 <__aeabi_dmul+0x24a>
   18130:	ea94 0f0c 	teq	r4, ip
   18134:	d10a      	bne.n	1814c <__aeabi_ddiv+0x19c>
   18136:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1813a:	f47f af34 	bne.w	17fa6 <__aeabi_dmul+0x24a>
   1813e:	ea95 0f0c 	teq	r5, ip
   18142:	f47f af25 	bne.w	17f90 <__aeabi_dmul+0x234>
   18146:	4610      	mov	r0, r2
   18148:	4619      	mov	r1, r3
   1814a:	e72c      	b.n	17fa6 <__aeabi_dmul+0x24a>
   1814c:	ea95 0f0c 	teq	r5, ip
   18150:	d106      	bne.n	18160 <__aeabi_ddiv+0x1b0>
   18152:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18156:	f43f aefd 	beq.w	17f54 <__aeabi_dmul+0x1f8>
   1815a:	4610      	mov	r0, r2
   1815c:	4619      	mov	r1, r3
   1815e:	e722      	b.n	17fa6 <__aeabi_dmul+0x24a>
   18160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18164:	bf18      	it	ne
   18166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1816a:	f47f aec5 	bne.w	17ef8 <__aeabi_dmul+0x19c>
   1816e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18172:	f47f af0d 	bne.w	17f90 <__aeabi_dmul+0x234>
   18176:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1817a:	f47f aeeb 	bne.w	17f54 <__aeabi_dmul+0x1f8>
   1817e:	e712      	b.n	17fa6 <__aeabi_dmul+0x24a>

00018180 <__gedf2>:
   18180:	f04f 3cff 	mov.w	ip, #4294967295
   18184:	e006      	b.n	18194 <__cmpdf2+0x4>
   18186:	bf00      	nop

00018188 <__ledf2>:
   18188:	f04f 0c01 	mov.w	ip, #1
   1818c:	e002      	b.n	18194 <__cmpdf2+0x4>
   1818e:	bf00      	nop

00018190 <__cmpdf2>:
   18190:	f04f 0c01 	mov.w	ip, #1
   18194:	f84d cd04 	str.w	ip, [sp, #-4]!
   18198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1819c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   181a4:	bf18      	it	ne
   181a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   181aa:	d01b      	beq.n	181e4 <__cmpdf2+0x54>
   181ac:	b001      	add	sp, #4
   181ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   181b2:	bf0c      	ite	eq
   181b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   181b8:	ea91 0f03 	teqne	r1, r3
   181bc:	bf02      	ittt	eq
   181be:	ea90 0f02 	teqeq	r0, r2
   181c2:	2000      	moveq	r0, #0
   181c4:	4770      	bxeq	lr
   181c6:	f110 0f00 	cmn.w	r0, #0
   181ca:	ea91 0f03 	teq	r1, r3
   181ce:	bf58      	it	pl
   181d0:	4299      	cmppl	r1, r3
   181d2:	bf08      	it	eq
   181d4:	4290      	cmpeq	r0, r2
   181d6:	bf2c      	ite	cs
   181d8:	17d8      	asrcs	r0, r3, #31
   181da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   181de:	f040 0001 	orr.w	r0, r0, #1
   181e2:	4770      	bx	lr
   181e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   181e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181ec:	d102      	bne.n	181f4 <__cmpdf2+0x64>
   181ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   181f2:	d107      	bne.n	18204 <__cmpdf2+0x74>
   181f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   181f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181fc:	d1d6      	bne.n	181ac <__cmpdf2+0x1c>
   181fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18202:	d0d3      	beq.n	181ac <__cmpdf2+0x1c>
   18204:	f85d 0b04 	ldr.w	r0, [sp], #4
   18208:	4770      	bx	lr
   1820a:	bf00      	nop

0001820c <__aeabi_cdrcmple>:
   1820c:	4684      	mov	ip, r0
   1820e:	4610      	mov	r0, r2
   18210:	4662      	mov	r2, ip
   18212:	468c      	mov	ip, r1
   18214:	4619      	mov	r1, r3
   18216:	4663      	mov	r3, ip
   18218:	e000      	b.n	1821c <__aeabi_cdcmpeq>
   1821a:	bf00      	nop

0001821c <__aeabi_cdcmpeq>:
   1821c:	b501      	push	{r0, lr}
   1821e:	f7ff ffb7 	bl	18190 <__cmpdf2>
   18222:	2800      	cmp	r0, #0
   18224:	bf48      	it	mi
   18226:	f110 0f00 	cmnmi.w	r0, #0
   1822a:	bd01      	pop	{r0, pc}

0001822c <__aeabi_dcmpeq>:
   1822c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18230:	f7ff fff4 	bl	1821c <__aeabi_cdcmpeq>
   18234:	bf0c      	ite	eq
   18236:	2001      	moveq	r0, #1
   18238:	2000      	movne	r0, #0
   1823a:	f85d fb08 	ldr.w	pc, [sp], #8
   1823e:	bf00      	nop

00018240 <__aeabi_dcmplt>:
   18240:	f84d ed08 	str.w	lr, [sp, #-8]!
   18244:	f7ff ffea 	bl	1821c <__aeabi_cdcmpeq>
   18248:	bf34      	ite	cc
   1824a:	2001      	movcc	r0, #1
   1824c:	2000      	movcs	r0, #0
   1824e:	f85d fb08 	ldr.w	pc, [sp], #8
   18252:	bf00      	nop

00018254 <__aeabi_dcmple>:
   18254:	f84d ed08 	str.w	lr, [sp, #-8]!
   18258:	f7ff ffe0 	bl	1821c <__aeabi_cdcmpeq>
   1825c:	bf94      	ite	ls
   1825e:	2001      	movls	r0, #1
   18260:	2000      	movhi	r0, #0
   18262:	f85d fb08 	ldr.w	pc, [sp], #8
   18266:	bf00      	nop

00018268 <__aeabi_dcmpge>:
   18268:	f84d ed08 	str.w	lr, [sp, #-8]!
   1826c:	f7ff ffce 	bl	1820c <__aeabi_cdrcmple>
   18270:	bf94      	ite	ls
   18272:	2001      	movls	r0, #1
   18274:	2000      	movhi	r0, #0
   18276:	f85d fb08 	ldr.w	pc, [sp], #8
   1827a:	bf00      	nop

0001827c <__aeabi_dcmpgt>:
   1827c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18280:	f7ff ffc4 	bl	1820c <__aeabi_cdrcmple>
   18284:	bf34      	ite	cc
   18286:	2001      	movcc	r0, #1
   18288:	2000      	movcs	r0, #0
   1828a:	f85d fb08 	ldr.w	pc, [sp], #8
   1828e:	bf00      	nop

00018290 <__aeabi_d2iz>:
   18290:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18298:	d215      	bcs.n	182c6 <__aeabi_d2iz+0x36>
   1829a:	d511      	bpl.n	182c0 <__aeabi_d2iz+0x30>
   1829c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   182a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   182a4:	d912      	bls.n	182cc <__aeabi_d2iz+0x3c>
   182a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   182aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   182ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   182b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   182b6:	fa23 f002 	lsr.w	r0, r3, r2
   182ba:	bf18      	it	ne
   182bc:	4240      	negne	r0, r0
   182be:	4770      	bx	lr
   182c0:	f04f 0000 	mov.w	r0, #0
   182c4:	4770      	bx	lr
   182c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   182ca:	d105      	bne.n	182d8 <__aeabi_d2iz+0x48>
   182cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   182d0:	bf08      	it	eq
   182d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   182d6:	4770      	bx	lr
   182d8:	f04f 0000 	mov.w	r0, #0
   182dc:	4770      	bx	lr
   182de:	bf00      	nop

000182e0 <__aeabi_d2uiz>:
   182e0:	004a      	lsls	r2, r1, #1
   182e2:	d211      	bcs.n	18308 <__aeabi_d2uiz+0x28>
   182e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   182e8:	d211      	bcs.n	1830e <__aeabi_d2uiz+0x2e>
   182ea:	d50d      	bpl.n	18308 <__aeabi_d2uiz+0x28>
   182ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   182f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   182f4:	d40e      	bmi.n	18314 <__aeabi_d2uiz+0x34>
   182f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   182fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   182fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18302:	fa23 f002 	lsr.w	r0, r3, r2
   18306:	4770      	bx	lr
   18308:	f04f 0000 	mov.w	r0, #0
   1830c:	4770      	bx	lr
   1830e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18312:	d102      	bne.n	1831a <__aeabi_d2uiz+0x3a>
   18314:	f04f 30ff 	mov.w	r0, #4294967295
   18318:	4770      	bx	lr
   1831a:	f04f 0000 	mov.w	r0, #0
   1831e:	4770      	bx	lr

00018320 <__aeabi_d2f>:
   18320:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18324:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18328:	bf24      	itt	cs
   1832a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1832e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18332:	d90d      	bls.n	18350 <__aeabi_d2f+0x30>
   18334:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18338:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1833c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18340:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18344:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18348:	bf08      	it	eq
   1834a:	f020 0001 	biceq.w	r0, r0, #1
   1834e:	4770      	bx	lr
   18350:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18354:	d121      	bne.n	1839a <__aeabi_d2f+0x7a>
   18356:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1835a:	bfbc      	itt	lt
   1835c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18360:	4770      	bxlt	lr
   18362:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18366:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1836a:	f1c2 0218 	rsb	r2, r2, #24
   1836e:	f1c2 0c20 	rsb	ip, r2, #32
   18372:	fa10 f30c 	lsls.w	r3, r0, ip
   18376:	fa20 f002 	lsr.w	r0, r0, r2
   1837a:	bf18      	it	ne
   1837c:	f040 0001 	orrne.w	r0, r0, #1
   18380:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18384:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18388:	fa03 fc0c 	lsl.w	ip, r3, ip
   1838c:	ea40 000c 	orr.w	r0, r0, ip
   18390:	fa23 f302 	lsr.w	r3, r3, r2
   18394:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18398:	e7cc      	b.n	18334 <__aeabi_d2f+0x14>
   1839a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1839e:	d107      	bne.n	183b0 <__aeabi_d2f+0x90>
   183a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   183a4:	bf1e      	ittt	ne
   183a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   183aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   183ae:	4770      	bxne	lr
   183b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   183b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   183b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183bc:	4770      	bx	lr
   183be:	bf00      	nop

000183c0 <__aeabi_frsub>:
   183c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   183c4:	e002      	b.n	183cc <__addsf3>
   183c6:	bf00      	nop

000183c8 <__aeabi_fsub>:
   183c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000183cc <__addsf3>:
   183cc:	0042      	lsls	r2, r0, #1
   183ce:	bf1f      	itttt	ne
   183d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   183d4:	ea92 0f03 	teqne	r2, r3
   183d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   183dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   183e0:	d06a      	beq.n	184b8 <__addsf3+0xec>
   183e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   183e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   183ea:	bfc1      	itttt	gt
   183ec:	18d2      	addgt	r2, r2, r3
   183ee:	4041      	eorgt	r1, r0
   183f0:	4048      	eorgt	r0, r1
   183f2:	4041      	eorgt	r1, r0
   183f4:	bfb8      	it	lt
   183f6:	425b      	neglt	r3, r3
   183f8:	2b19      	cmp	r3, #25
   183fa:	bf88      	it	hi
   183fc:	4770      	bxhi	lr
   183fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18406:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1840a:	bf18      	it	ne
   1840c:	4240      	negne	r0, r0
   1840e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18412:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18416:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1841a:	bf18      	it	ne
   1841c:	4249      	negne	r1, r1
   1841e:	ea92 0f03 	teq	r2, r3
   18422:	d03f      	beq.n	184a4 <__addsf3+0xd8>
   18424:	f1a2 0201 	sub.w	r2, r2, #1
   18428:	fa41 fc03 	asr.w	ip, r1, r3
   1842c:	eb10 000c 	adds.w	r0, r0, ip
   18430:	f1c3 0320 	rsb	r3, r3, #32
   18434:	fa01 f103 	lsl.w	r1, r1, r3
   18438:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1843c:	d502      	bpl.n	18444 <__addsf3+0x78>
   1843e:	4249      	negs	r1, r1
   18440:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18448:	d313      	bcc.n	18472 <__addsf3+0xa6>
   1844a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1844e:	d306      	bcc.n	1845e <__addsf3+0x92>
   18450:	0840      	lsrs	r0, r0, #1
   18452:	ea4f 0131 	mov.w	r1, r1, rrx
   18456:	f102 0201 	add.w	r2, r2, #1
   1845a:	2afe      	cmp	r2, #254	; 0xfe
   1845c:	d251      	bcs.n	18502 <__addsf3+0x136>
   1845e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18462:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18466:	bf08      	it	eq
   18468:	f020 0001 	biceq.w	r0, r0, #1
   1846c:	ea40 0003 	orr.w	r0, r0, r3
   18470:	4770      	bx	lr
   18472:	0049      	lsls	r1, r1, #1
   18474:	eb40 0000 	adc.w	r0, r0, r0
   18478:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1847c:	f1a2 0201 	sub.w	r2, r2, #1
   18480:	d1ed      	bne.n	1845e <__addsf3+0x92>
   18482:	fab0 fc80 	clz	ip, r0
   18486:	f1ac 0c08 	sub.w	ip, ip, #8
   1848a:	ebb2 020c 	subs.w	r2, r2, ip
   1848e:	fa00 f00c 	lsl.w	r0, r0, ip
   18492:	bfaa      	itet	ge
   18494:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18498:	4252      	neglt	r2, r2
   1849a:	4318      	orrge	r0, r3
   1849c:	bfbc      	itt	lt
   1849e:	40d0      	lsrlt	r0, r2
   184a0:	4318      	orrlt	r0, r3
   184a2:	4770      	bx	lr
   184a4:	f092 0f00 	teq	r2, #0
   184a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   184ac:	bf06      	itte	eq
   184ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   184b2:	3201      	addeq	r2, #1
   184b4:	3b01      	subne	r3, #1
   184b6:	e7b5      	b.n	18424 <__addsf3+0x58>
   184b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   184bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   184c0:	bf18      	it	ne
   184c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   184c6:	d021      	beq.n	1850c <__addsf3+0x140>
   184c8:	ea92 0f03 	teq	r2, r3
   184cc:	d004      	beq.n	184d8 <__addsf3+0x10c>
   184ce:	f092 0f00 	teq	r2, #0
   184d2:	bf08      	it	eq
   184d4:	4608      	moveq	r0, r1
   184d6:	4770      	bx	lr
   184d8:	ea90 0f01 	teq	r0, r1
   184dc:	bf1c      	itt	ne
   184de:	2000      	movne	r0, #0
   184e0:	4770      	bxne	lr
   184e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   184e6:	d104      	bne.n	184f2 <__addsf3+0x126>
   184e8:	0040      	lsls	r0, r0, #1
   184ea:	bf28      	it	cs
   184ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   184f0:	4770      	bx	lr
   184f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   184f6:	bf3c      	itt	cc
   184f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   184fc:	4770      	bxcc	lr
   184fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18502:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1850a:	4770      	bx	lr
   1850c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18510:	bf16      	itet	ne
   18512:	4608      	movne	r0, r1
   18514:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18518:	4601      	movne	r1, r0
   1851a:	0242      	lsls	r2, r0, #9
   1851c:	bf06      	itte	eq
   1851e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18522:	ea90 0f01 	teqeq	r0, r1
   18526:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1852a:	4770      	bx	lr

0001852c <__aeabi_ui2f>:
   1852c:	f04f 0300 	mov.w	r3, #0
   18530:	e004      	b.n	1853c <__aeabi_i2f+0x8>
   18532:	bf00      	nop

00018534 <__aeabi_i2f>:
   18534:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18538:	bf48      	it	mi
   1853a:	4240      	negmi	r0, r0
   1853c:	ea5f 0c00 	movs.w	ip, r0
   18540:	bf08      	it	eq
   18542:	4770      	bxeq	lr
   18544:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18548:	4601      	mov	r1, r0
   1854a:	f04f 0000 	mov.w	r0, #0
   1854e:	e01c      	b.n	1858a <__aeabi_l2f+0x2a>

00018550 <__aeabi_ul2f>:
   18550:	ea50 0201 	orrs.w	r2, r0, r1
   18554:	bf08      	it	eq
   18556:	4770      	bxeq	lr
   18558:	f04f 0300 	mov.w	r3, #0
   1855c:	e00a      	b.n	18574 <__aeabi_l2f+0x14>
   1855e:	bf00      	nop

00018560 <__aeabi_l2f>:
   18560:	ea50 0201 	orrs.w	r2, r0, r1
   18564:	bf08      	it	eq
   18566:	4770      	bxeq	lr
   18568:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1856c:	d502      	bpl.n	18574 <__aeabi_l2f+0x14>
   1856e:	4240      	negs	r0, r0
   18570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18574:	ea5f 0c01 	movs.w	ip, r1
   18578:	bf02      	ittt	eq
   1857a:	4684      	moveq	ip, r0
   1857c:	4601      	moveq	r1, r0
   1857e:	2000      	moveq	r0, #0
   18580:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18584:	bf08      	it	eq
   18586:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1858a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1858e:	fabc f28c 	clz	r2, ip
   18592:	3a08      	subs	r2, #8
   18594:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18598:	db10      	blt.n	185bc <__aeabi_l2f+0x5c>
   1859a:	fa01 fc02 	lsl.w	ip, r1, r2
   1859e:	4463      	add	r3, ip
   185a0:	fa00 fc02 	lsl.w	ip, r0, r2
   185a4:	f1c2 0220 	rsb	r2, r2, #32
   185a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   185ac:	fa20 f202 	lsr.w	r2, r0, r2
   185b0:	eb43 0002 	adc.w	r0, r3, r2
   185b4:	bf08      	it	eq
   185b6:	f020 0001 	biceq.w	r0, r0, #1
   185ba:	4770      	bx	lr
   185bc:	f102 0220 	add.w	r2, r2, #32
   185c0:	fa01 fc02 	lsl.w	ip, r1, r2
   185c4:	f1c2 0220 	rsb	r2, r2, #32
   185c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   185cc:	fa21 f202 	lsr.w	r2, r1, r2
   185d0:	eb43 0002 	adc.w	r0, r3, r2
   185d4:	bf08      	it	eq
   185d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   185da:	4770      	bx	lr

000185dc <__aeabi_fmul>:
   185dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   185e4:	bf1e      	ittt	ne
   185e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   185ea:	ea92 0f0c 	teqne	r2, ip
   185ee:	ea93 0f0c 	teqne	r3, ip
   185f2:	d06f      	beq.n	186d4 <__aeabi_fmul+0xf8>
   185f4:	441a      	add	r2, r3
   185f6:	ea80 0c01 	eor.w	ip, r0, r1
   185fa:	0240      	lsls	r0, r0, #9
   185fc:	bf18      	it	ne
   185fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18602:	d01e      	beq.n	18642 <__aeabi_fmul+0x66>
   18604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18608:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1860c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18610:	fba0 3101 	umull	r3, r1, r0, r1
   18614:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18618:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1861c:	bf3e      	ittt	cc
   1861e:	0049      	lslcc	r1, r1, #1
   18620:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18624:	005b      	lslcc	r3, r3, #1
   18626:	ea40 0001 	orr.w	r0, r0, r1
   1862a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1862e:	2afd      	cmp	r2, #253	; 0xfd
   18630:	d81d      	bhi.n	1866e <__aeabi_fmul+0x92>
   18632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18636:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1863a:	bf08      	it	eq
   1863c:	f020 0001 	biceq.w	r0, r0, #1
   18640:	4770      	bx	lr
   18642:	f090 0f00 	teq	r0, #0
   18646:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1864a:	bf08      	it	eq
   1864c:	0249      	lsleq	r1, r1, #9
   1864e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18652:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18656:	3a7f      	subs	r2, #127	; 0x7f
   18658:	bfc2      	ittt	gt
   1865a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1865e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18662:	4770      	bxgt	lr
   18664:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18668:	f04f 0300 	mov.w	r3, #0
   1866c:	3a01      	subs	r2, #1
   1866e:	dc5d      	bgt.n	1872c <__aeabi_fmul+0x150>
   18670:	f112 0f19 	cmn.w	r2, #25
   18674:	bfdc      	itt	le
   18676:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1867a:	4770      	bxle	lr
   1867c:	f1c2 0200 	rsb	r2, r2, #0
   18680:	0041      	lsls	r1, r0, #1
   18682:	fa21 f102 	lsr.w	r1, r1, r2
   18686:	f1c2 0220 	rsb	r2, r2, #32
   1868a:	fa00 fc02 	lsl.w	ip, r0, r2
   1868e:	ea5f 0031 	movs.w	r0, r1, rrx
   18692:	f140 0000 	adc.w	r0, r0, #0
   18696:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1869a:	bf08      	it	eq
   1869c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   186a0:	4770      	bx	lr
   186a2:	f092 0f00 	teq	r2, #0
   186a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   186aa:	bf02      	ittt	eq
   186ac:	0040      	lsleq	r0, r0, #1
   186ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   186b2:	3a01      	subeq	r2, #1
   186b4:	d0f9      	beq.n	186aa <__aeabi_fmul+0xce>
   186b6:	ea40 000c 	orr.w	r0, r0, ip
   186ba:	f093 0f00 	teq	r3, #0
   186be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   186c2:	bf02      	ittt	eq
   186c4:	0049      	lsleq	r1, r1, #1
   186c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   186ca:	3b01      	subeq	r3, #1
   186cc:	d0f9      	beq.n	186c2 <__aeabi_fmul+0xe6>
   186ce:	ea41 010c 	orr.w	r1, r1, ip
   186d2:	e78f      	b.n	185f4 <__aeabi_fmul+0x18>
   186d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186d8:	ea92 0f0c 	teq	r2, ip
   186dc:	bf18      	it	ne
   186de:	ea93 0f0c 	teqne	r3, ip
   186e2:	d00a      	beq.n	186fa <__aeabi_fmul+0x11e>
   186e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   186e8:	bf18      	it	ne
   186ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   186ee:	d1d8      	bne.n	186a2 <__aeabi_fmul+0xc6>
   186f0:	ea80 0001 	eor.w	r0, r0, r1
   186f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   186f8:	4770      	bx	lr
   186fa:	f090 0f00 	teq	r0, #0
   186fe:	bf17      	itett	ne
   18700:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18704:	4608      	moveq	r0, r1
   18706:	f091 0f00 	teqne	r1, #0
   1870a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1870e:	d014      	beq.n	1873a <__aeabi_fmul+0x15e>
   18710:	ea92 0f0c 	teq	r2, ip
   18714:	d101      	bne.n	1871a <__aeabi_fmul+0x13e>
   18716:	0242      	lsls	r2, r0, #9
   18718:	d10f      	bne.n	1873a <__aeabi_fmul+0x15e>
   1871a:	ea93 0f0c 	teq	r3, ip
   1871e:	d103      	bne.n	18728 <__aeabi_fmul+0x14c>
   18720:	024b      	lsls	r3, r1, #9
   18722:	bf18      	it	ne
   18724:	4608      	movne	r0, r1
   18726:	d108      	bne.n	1873a <__aeabi_fmul+0x15e>
   18728:	ea80 0001 	eor.w	r0, r0, r1
   1872c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18738:	4770      	bx	lr
   1873a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1873e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18742:	4770      	bx	lr

00018744 <__aeabi_fdiv>:
   18744:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18748:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1874c:	bf1e      	ittt	ne
   1874e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18752:	ea92 0f0c 	teqne	r2, ip
   18756:	ea93 0f0c 	teqne	r3, ip
   1875a:	d069      	beq.n	18830 <__aeabi_fdiv+0xec>
   1875c:	eba2 0203 	sub.w	r2, r2, r3
   18760:	ea80 0c01 	eor.w	ip, r0, r1
   18764:	0249      	lsls	r1, r1, #9
   18766:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1876a:	d037      	beq.n	187dc <__aeabi_fdiv+0x98>
   1876c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18770:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18774:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18778:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1877c:	428b      	cmp	r3, r1
   1877e:	bf38      	it	cc
   18780:	005b      	lslcc	r3, r3, #1
   18782:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18786:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1878a:	428b      	cmp	r3, r1
   1878c:	bf24      	itt	cs
   1878e:	1a5b      	subcs	r3, r3, r1
   18790:	ea40 000c 	orrcs.w	r0, r0, ip
   18794:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18798:	bf24      	itt	cs
   1879a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1879e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   187a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   187a6:	bf24      	itt	cs
   187a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   187ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   187b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   187b4:	bf24      	itt	cs
   187b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   187ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   187be:	011b      	lsls	r3, r3, #4
   187c0:	bf18      	it	ne
   187c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   187c6:	d1e0      	bne.n	1878a <__aeabi_fdiv+0x46>
   187c8:	2afd      	cmp	r2, #253	; 0xfd
   187ca:	f63f af50 	bhi.w	1866e <__aeabi_fmul+0x92>
   187ce:	428b      	cmp	r3, r1
   187d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   187d4:	bf08      	it	eq
   187d6:	f020 0001 	biceq.w	r0, r0, #1
   187da:	4770      	bx	lr
   187dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   187e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   187e4:	327f      	adds	r2, #127	; 0x7f
   187e6:	bfc2      	ittt	gt
   187e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   187ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   187f0:	4770      	bxgt	lr
   187f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   187f6:	f04f 0300 	mov.w	r3, #0
   187fa:	3a01      	subs	r2, #1
   187fc:	e737      	b.n	1866e <__aeabi_fmul+0x92>
   187fe:	f092 0f00 	teq	r2, #0
   18802:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18806:	bf02      	ittt	eq
   18808:	0040      	lsleq	r0, r0, #1
   1880a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1880e:	3a01      	subeq	r2, #1
   18810:	d0f9      	beq.n	18806 <__aeabi_fdiv+0xc2>
   18812:	ea40 000c 	orr.w	r0, r0, ip
   18816:	f093 0f00 	teq	r3, #0
   1881a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1881e:	bf02      	ittt	eq
   18820:	0049      	lsleq	r1, r1, #1
   18822:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18826:	3b01      	subeq	r3, #1
   18828:	d0f9      	beq.n	1881e <__aeabi_fdiv+0xda>
   1882a:	ea41 010c 	orr.w	r1, r1, ip
   1882e:	e795      	b.n	1875c <__aeabi_fdiv+0x18>
   18830:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18834:	ea92 0f0c 	teq	r2, ip
   18838:	d108      	bne.n	1884c <__aeabi_fdiv+0x108>
   1883a:	0242      	lsls	r2, r0, #9
   1883c:	f47f af7d 	bne.w	1873a <__aeabi_fmul+0x15e>
   18840:	ea93 0f0c 	teq	r3, ip
   18844:	f47f af70 	bne.w	18728 <__aeabi_fmul+0x14c>
   18848:	4608      	mov	r0, r1
   1884a:	e776      	b.n	1873a <__aeabi_fmul+0x15e>
   1884c:	ea93 0f0c 	teq	r3, ip
   18850:	d104      	bne.n	1885c <__aeabi_fdiv+0x118>
   18852:	024b      	lsls	r3, r1, #9
   18854:	f43f af4c 	beq.w	186f0 <__aeabi_fmul+0x114>
   18858:	4608      	mov	r0, r1
   1885a:	e76e      	b.n	1873a <__aeabi_fmul+0x15e>
   1885c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18860:	bf18      	it	ne
   18862:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18866:	d1ca      	bne.n	187fe <__aeabi_fdiv+0xba>
   18868:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1886c:	f47f af5c 	bne.w	18728 <__aeabi_fmul+0x14c>
   18870:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18874:	f47f af3c 	bne.w	186f0 <__aeabi_fmul+0x114>
   18878:	e75f      	b.n	1873a <__aeabi_fmul+0x15e>
   1887a:	bf00      	nop

0001887c <__gesf2>:
   1887c:	f04f 3cff 	mov.w	ip, #4294967295
   18880:	e006      	b.n	18890 <__cmpsf2+0x4>
   18882:	bf00      	nop

00018884 <__lesf2>:
   18884:	f04f 0c01 	mov.w	ip, #1
   18888:	e002      	b.n	18890 <__cmpsf2+0x4>
   1888a:	bf00      	nop

0001888c <__cmpsf2>:
   1888c:	f04f 0c01 	mov.w	ip, #1
   18890:	f84d cd04 	str.w	ip, [sp, #-4]!
   18894:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18898:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1889c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   188a0:	bf18      	it	ne
   188a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   188a6:	d011      	beq.n	188cc <__cmpsf2+0x40>
   188a8:	b001      	add	sp, #4
   188aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   188ae:	bf18      	it	ne
   188b0:	ea90 0f01 	teqne	r0, r1
   188b4:	bf58      	it	pl
   188b6:	ebb2 0003 	subspl.w	r0, r2, r3
   188ba:	bf88      	it	hi
   188bc:	17c8      	asrhi	r0, r1, #31
   188be:	bf38      	it	cc
   188c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   188c4:	bf18      	it	ne
   188c6:	f040 0001 	orrne.w	r0, r0, #1
   188ca:	4770      	bx	lr
   188cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   188d0:	d102      	bne.n	188d8 <__cmpsf2+0x4c>
   188d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   188d6:	d105      	bne.n	188e4 <__cmpsf2+0x58>
   188d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   188dc:	d1e4      	bne.n	188a8 <__cmpsf2+0x1c>
   188de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   188e2:	d0e1      	beq.n	188a8 <__cmpsf2+0x1c>
   188e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   188e8:	4770      	bx	lr
   188ea:	bf00      	nop

000188ec <__aeabi_cfrcmple>:
   188ec:	4684      	mov	ip, r0
   188ee:	4608      	mov	r0, r1
   188f0:	4661      	mov	r1, ip
   188f2:	e7ff      	b.n	188f4 <__aeabi_cfcmpeq>

000188f4 <__aeabi_cfcmpeq>:
   188f4:	b50f      	push	{r0, r1, r2, r3, lr}
   188f6:	f7ff ffc9 	bl	1888c <__cmpsf2>
   188fa:	2800      	cmp	r0, #0
   188fc:	bf48      	it	mi
   188fe:	f110 0f00 	cmnmi.w	r0, #0
   18902:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018904 <__aeabi_fcmpeq>:
   18904:	f84d ed08 	str.w	lr, [sp, #-8]!
   18908:	f7ff fff4 	bl	188f4 <__aeabi_cfcmpeq>
   1890c:	bf0c      	ite	eq
   1890e:	2001      	moveq	r0, #1
   18910:	2000      	movne	r0, #0
   18912:	f85d fb08 	ldr.w	pc, [sp], #8
   18916:	bf00      	nop

00018918 <__aeabi_fcmplt>:
   18918:	f84d ed08 	str.w	lr, [sp, #-8]!
   1891c:	f7ff ffea 	bl	188f4 <__aeabi_cfcmpeq>
   18920:	bf34      	ite	cc
   18922:	2001      	movcc	r0, #1
   18924:	2000      	movcs	r0, #0
   18926:	f85d fb08 	ldr.w	pc, [sp], #8
   1892a:	bf00      	nop

0001892c <__aeabi_fcmple>:
   1892c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18930:	f7ff ffe0 	bl	188f4 <__aeabi_cfcmpeq>
   18934:	bf94      	ite	ls
   18936:	2001      	movls	r0, #1
   18938:	2000      	movhi	r0, #0
   1893a:	f85d fb08 	ldr.w	pc, [sp], #8
   1893e:	bf00      	nop

00018940 <__aeabi_fcmpge>:
   18940:	f84d ed08 	str.w	lr, [sp, #-8]!
   18944:	f7ff ffd2 	bl	188ec <__aeabi_cfrcmple>
   18948:	bf94      	ite	ls
   1894a:	2001      	movls	r0, #1
   1894c:	2000      	movhi	r0, #0
   1894e:	f85d fb08 	ldr.w	pc, [sp], #8
   18952:	bf00      	nop

00018954 <__aeabi_fcmpgt>:
   18954:	f84d ed08 	str.w	lr, [sp, #-8]!
   18958:	f7ff ffc8 	bl	188ec <__aeabi_cfrcmple>
   1895c:	bf34      	ite	cc
   1895e:	2001      	movcc	r0, #1
   18960:	2000      	movcs	r0, #0
   18962:	f85d fb08 	ldr.w	pc, [sp], #8
   18966:	bf00      	nop

00018968 <__aeabi_f2iz>:
   18968:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1896c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18970:	d30f      	bcc.n	18992 <__aeabi_f2iz+0x2a>
   18972:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18976:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1897a:	d90d      	bls.n	18998 <__aeabi_f2iz+0x30>
   1897c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18984:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18988:	fa23 f002 	lsr.w	r0, r3, r2
   1898c:	bf18      	it	ne
   1898e:	4240      	negne	r0, r0
   18990:	4770      	bx	lr
   18992:	f04f 0000 	mov.w	r0, #0
   18996:	4770      	bx	lr
   18998:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1899c:	d101      	bne.n	189a2 <__aeabi_f2iz+0x3a>
   1899e:	0242      	lsls	r2, r0, #9
   189a0:	d105      	bne.n	189ae <__aeabi_f2iz+0x46>
   189a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   189a6:	bf08      	it	eq
   189a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   189ac:	4770      	bx	lr
   189ae:	f04f 0000 	mov.w	r0, #0
   189b2:	4770      	bx	lr

000189b4 <memcpy>:
   189b4:	2a0f      	cmp	r2, #15
   189b6:	b4f0      	push	{r4, r5, r6, r7}
   189b8:	d945      	bls.n	18a46 <memcpy+0x92>
   189ba:	ea40 0301 	orr.w	r3, r0, r1
   189be:	079b      	lsls	r3, r3, #30
   189c0:	d145      	bne.n	18a4e <memcpy+0x9a>
   189c2:	f1a2 0710 	sub.w	r7, r2, #16
   189c6:	460c      	mov	r4, r1
   189c8:	4603      	mov	r3, r0
   189ca:	093f      	lsrs	r7, r7, #4
   189cc:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   189d0:	3610      	adds	r6, #16
   189d2:	6825      	ldr	r5, [r4, #0]
   189d4:	3310      	adds	r3, #16
   189d6:	3410      	adds	r4, #16
   189d8:	f843 5c10 	str.w	r5, [r3, #-16]
   189dc:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   189e0:	f843 5c0c 	str.w	r5, [r3, #-12]
   189e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
   189e8:	f843 5c08 	str.w	r5, [r3, #-8]
   189ec:	f854 5c04 	ldr.w	r5, [r4, #-4]
   189f0:	f843 5c04 	str.w	r5, [r3, #-4]
   189f4:	42b3      	cmp	r3, r6
   189f6:	d1ec      	bne.n	189d2 <memcpy+0x1e>
   189f8:	1c7b      	adds	r3, r7, #1
   189fa:	f002 0c0f 	and.w	ip, r2, #15
   189fe:	f1bc 0f03 	cmp.w	ip, #3
   18a02:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18a06:	4419      	add	r1, r3
   18a08:	4403      	add	r3, r0
   18a0a:	d922      	bls.n	18a52 <memcpy+0x9e>
   18a0c:	460e      	mov	r6, r1
   18a0e:	461d      	mov	r5, r3
   18a10:	4664      	mov	r4, ip
   18a12:	f856 7b04 	ldr.w	r7, [r6], #4
   18a16:	3c04      	subs	r4, #4
   18a18:	2c03      	cmp	r4, #3
   18a1a:	f845 7b04 	str.w	r7, [r5], #4
   18a1e:	d8f8      	bhi.n	18a12 <memcpy+0x5e>
   18a20:	f1ac 0404 	sub.w	r4, ip, #4
   18a24:	f002 0203 	and.w	r2, r2, #3
   18a28:	f024 0403 	bic.w	r4, r4, #3
   18a2c:	3404      	adds	r4, #4
   18a2e:	4423      	add	r3, r4
   18a30:	4421      	add	r1, r4
   18a32:	b132      	cbz	r2, 18a42 <memcpy+0x8e>
   18a34:	440a      	add	r2, r1
   18a36:	f811 4b01 	ldrb.w	r4, [r1], #1
   18a3a:	4291      	cmp	r1, r2
   18a3c:	f803 4b01 	strb.w	r4, [r3], #1
   18a40:	d1f9      	bne.n	18a36 <memcpy+0x82>
   18a42:	bcf0      	pop	{r4, r5, r6, r7}
   18a44:	4770      	bx	lr
   18a46:	4603      	mov	r3, r0
   18a48:	2a00      	cmp	r2, #0
   18a4a:	d1f3      	bne.n	18a34 <memcpy+0x80>
   18a4c:	e7f9      	b.n	18a42 <memcpy+0x8e>
   18a4e:	4603      	mov	r3, r0
   18a50:	e7f0      	b.n	18a34 <memcpy+0x80>
   18a52:	4662      	mov	r2, ip
   18a54:	2a00      	cmp	r2, #0
   18a56:	d1ed      	bne.n	18a34 <memcpy+0x80>
   18a58:	e7f3      	b.n	18a42 <memcpy+0x8e>
   18a5a:	bf00      	nop

00018a5c <memset>:
   18a5c:	0783      	lsls	r3, r0, #30
   18a5e:	b4f0      	push	{r4, r5, r6, r7}
   18a60:	d048      	beq.n	18af4 <memset+0x98>
   18a62:	1e54      	subs	r4, r2, #1
   18a64:	2a00      	cmp	r2, #0
   18a66:	d043      	beq.n	18af0 <memset+0x94>
   18a68:	b2cd      	uxtb	r5, r1
   18a6a:	4603      	mov	r3, r0
   18a6c:	e002      	b.n	18a74 <memset+0x18>
   18a6e:	2c00      	cmp	r4, #0
   18a70:	d03e      	beq.n	18af0 <memset+0x94>
   18a72:	4614      	mov	r4, r2
   18a74:	f803 5b01 	strb.w	r5, [r3], #1
   18a78:	f013 0f03 	tst.w	r3, #3
   18a7c:	f104 32ff 	add.w	r2, r4, #4294967295
   18a80:	d1f5      	bne.n	18a6e <memset+0x12>
   18a82:	2c03      	cmp	r4, #3
   18a84:	d92d      	bls.n	18ae2 <memset+0x86>
   18a86:	b2cd      	uxtb	r5, r1
   18a88:	2c0f      	cmp	r4, #15
   18a8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18a8e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18a92:	d918      	bls.n	18ac6 <memset+0x6a>
   18a94:	f1a4 0710 	sub.w	r7, r4, #16
   18a98:	f103 0610 	add.w	r6, r3, #16
   18a9c:	461a      	mov	r2, r3
   18a9e:	093f      	lsrs	r7, r7, #4
   18aa0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18aa4:	6015      	str	r5, [r2, #0]
   18aa6:	3210      	adds	r2, #16
   18aa8:	f842 5c0c 	str.w	r5, [r2, #-12]
   18aac:	f842 5c08 	str.w	r5, [r2, #-8]
   18ab0:	f842 5c04 	str.w	r5, [r2, #-4]
   18ab4:	42b2      	cmp	r2, r6
   18ab6:	d1f5      	bne.n	18aa4 <memset+0x48>
   18ab8:	f004 040f 	and.w	r4, r4, #15
   18abc:	3701      	adds	r7, #1
   18abe:	2c03      	cmp	r4, #3
   18ac0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18ac4:	d90d      	bls.n	18ae2 <memset+0x86>
   18ac6:	461e      	mov	r6, r3
   18ac8:	4622      	mov	r2, r4
   18aca:	3a04      	subs	r2, #4
   18acc:	f846 5b04 	str.w	r5, [r6], #4
   18ad0:	2a03      	cmp	r2, #3
   18ad2:	d8fa      	bhi.n	18aca <memset+0x6e>
   18ad4:	1f22      	subs	r2, r4, #4
   18ad6:	f004 0403 	and.w	r4, r4, #3
   18ada:	f022 0203 	bic.w	r2, r2, #3
   18ade:	3204      	adds	r2, #4
   18ae0:	4413      	add	r3, r2
   18ae2:	b12c      	cbz	r4, 18af0 <memset+0x94>
   18ae4:	b2c9      	uxtb	r1, r1
   18ae6:	441c      	add	r4, r3
   18ae8:	f803 1b01 	strb.w	r1, [r3], #1
   18aec:	42a3      	cmp	r3, r4
   18aee:	d1fb      	bne.n	18ae8 <memset+0x8c>
   18af0:	bcf0      	pop	{r4, r5, r6, r7}
   18af2:	4770      	bx	lr
   18af4:	4614      	mov	r4, r2
   18af6:	4603      	mov	r3, r0
   18af8:	e7c3      	b.n	18a82 <memset+0x26>
   18afa:	bf00      	nop

00018afc <strncpy>:
   18afc:	ea40 0301 	orr.w	r3, r0, r1
   18b00:	079b      	lsls	r3, r3, #30
   18b02:	b470      	push	{r4, r5, r6}
   18b04:	d12b      	bne.n	18b5e <strncpy+0x62>
   18b06:	2a03      	cmp	r2, #3
   18b08:	bf84      	itt	hi
   18b0a:	460b      	movhi	r3, r1
   18b0c:	4605      	movhi	r5, r0
   18b0e:	d926      	bls.n	18b5e <strncpy+0x62>
   18b10:	4619      	mov	r1, r3
   18b12:	f853 4b04 	ldr.w	r4, [r3], #4
   18b16:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18b1a:	ea26 0604 	bic.w	r6, r6, r4
   18b1e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18b22:	d105      	bne.n	18b30 <strncpy+0x34>
   18b24:	3a04      	subs	r2, #4
   18b26:	f845 4b04 	str.w	r4, [r5], #4
   18b2a:	2a03      	cmp	r2, #3
   18b2c:	4619      	mov	r1, r3
   18b2e:	d8ef      	bhi.n	18b10 <strncpy+0x14>
   18b30:	b19a      	cbz	r2, 18b5a <strncpy+0x5e>
   18b32:	780c      	ldrb	r4, [r1, #0]
   18b34:	3a01      	subs	r2, #1
   18b36:	1c6b      	adds	r3, r5, #1
   18b38:	702c      	strb	r4, [r5, #0]
   18b3a:	b13c      	cbz	r4, 18b4c <strncpy+0x50>
   18b3c:	b16a      	cbz	r2, 18b5a <strncpy+0x5e>
   18b3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18b42:	3a01      	subs	r2, #1
   18b44:	f803 4b01 	strb.w	r4, [r3], #1
   18b48:	2c00      	cmp	r4, #0
   18b4a:	d1f7      	bne.n	18b3c <strncpy+0x40>
   18b4c:	b12a      	cbz	r2, 18b5a <strncpy+0x5e>
   18b4e:	441a      	add	r2, r3
   18b50:	2100      	movs	r1, #0
   18b52:	f803 1b01 	strb.w	r1, [r3], #1
   18b56:	4293      	cmp	r3, r2
   18b58:	d1fb      	bne.n	18b52 <strncpy+0x56>
   18b5a:	bc70      	pop	{r4, r5, r6}
   18b5c:	4770      	bx	lr
   18b5e:	4605      	mov	r5, r0
   18b60:	e7e6      	b.n	18b30 <strncpy+0x34>
   18b62:	bf00      	nop

00018b64 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18b66:	e003      	b.n	18b70 <LoopCopyDataInit>

00018b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18b68:	4b0a      	ldr	r3, [pc, #40]	; (18b94 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18b6e:	3104      	adds	r1, #4

00018b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b70:	4809      	ldr	r0, [pc, #36]	; (18b98 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18b72:	4b0a      	ldr	r3, [pc, #40]	; (18b9c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18b78:	d3f6      	bcc.n	18b68 <CopyDataInit>
	ldr	r2, =_sbss
   18b7a:	4a09      	ldr	r2, [pc, #36]	; (18ba0 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18b7c:	e002      	b.n	18b84 <LoopFillZerobss>

00018b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18b80:	f842 3b04 	str.w	r3, [r2], #4

00018b84 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18b84:	4b07      	ldr	r3, [pc, #28]	; (18ba4 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18b88:	d3f9      	bcc.n	18b7e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18b8a:	f7e7 fbd7 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18b8e:	f7fe fe77 	bl	17880 <main>
	bx	lr    
   18b92:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18b94:	00018c90 	.word	0x00018c90
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18b9c:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18ba0:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18ba4:	2004cdd8 	.word	0x2004cdd8

00018ba8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18ba8:	e7fe      	b.n	18ba8 <ADC1_2_IRQHandler>
   18baa:	0000      	movs	r0, r0
   18bac:	454c4449 	.word	0x454c4449
   18bb0:	00000000 	.word	0x00000000

00018bb4 <ulKernelPriority>:
   18bb4:	0000007f                                ....

00018bb8 <heapSTRUCT_SIZE>:
   18bb8:	00010010                                         ..

00018bba <version>:
   18bba:	3d5a0001                                         ..

00018bbc <utm_east0>:
   18bbc:	00093d5a                                Z=..

00018bc0 <utm_north0>:
   18bc0:	005875e6                                .uX.

00018bc4 <climb_pgain>:
   18bc4:	bcf5c28f                                ....

00018bc8 <climb_igain>:
   18bc8:	3dcccccd                                ...=

00018bcc <level_gaz>:
   18bcc:	3e9eb852                                R..>

00018bd0 <nav_east0>:
   18bd0:	00093d5a                                Z=..

00018bd4 <nav_north0>:
   18bd4:	005875e6                                .uX.

00018bd8 <nb_waypoint>:
   18bd8:	00000007 33323130 37363534 42413938     ....0123456789AB
   18be8:	46454443                                CDEF

00018bec <failsafe>:
	...
   18c00:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18c10:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18c20:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18c30:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18c40:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18c50:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18c60:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18c70:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18c80:	6e617672 00000074 6e657665 00000074     rvant...event...
