
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 d5 89 01 00 19 8a 01 00 19 8a 01 00     .P. ............
      10:	19 8a 01 00 19 8a 01 00 19 8a 01 00 00 00 00 00     ................
	...
      2c:	a1 5b 00 00 19 8a 01 00 00 00 00 00 ad 5c 00 00     .[...........\..
      3c:	e9 5c 00 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     .\..............
      4c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      5c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      6c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      7c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      8c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      9c:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      ac:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      bc:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      cc:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
      dc:	19 8a 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b0c 	.word	0x00018b0c
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd8 	.word	0x2004cdd8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fc9f 	bl	5d3c <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe44 	bl	40d8 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe3f 	bl	40d8 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe1f 	bl	40f0 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe5e 	bl	41b0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe08 	bl	4140 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fdf8 	bl	4140 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fdeb 	bl	4140 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe0c 	bl	41b0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe03 	bl	41b0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd82 	bl	40f0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe51 	bl	52ac <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd76 	bl	41b0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd6d 	bl	41b0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fce8 	bl	40f0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc1f 	bl	4098 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc13 	bl	4098 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc0d 	bl	4098 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc07 	bl	4098 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc71 	bl	41b0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc08 	bl	40f0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f83f 	bl	29ac <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f841 	bl	29c4 <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcb2 	bl	52ac <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetxDeadline>:

portTickType xEventGetxDeadline( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->xTag.xDeadline;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	689b      	ldr	r3, [r3, #8]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	681b      	ldr	r3, [r3, #0]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	685b      	ldr	r3, [r3, #4]
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3308      	adds	r3, #8
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29dc:	b480      	push	{r7}
    29de:	b083      	sub	sp, #12
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	3318      	adds	r3, #24
}
    29e8:	4618      	mov	r0, r3
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e019      	b.n	2a84 <GCDOfTaskPeriod+0x4c>
    {
        if( i==0 || i==1 || i==5 )
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d005      	beq.n	2a62 <GCDOfTaskPeriod+0x2a>
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	2b01      	cmp	r3, #1
    2a5a:	d002      	beq.n	2a62 <GCDOfTaskPeriod+0x2a>
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	2b05      	cmp	r3, #5
    2a60:	d100      	bne.n	2a64 <GCDOfTaskPeriod+0x2c>
            continue;
    2a62:	e00c      	b.n	2a7e <GCDOfTaskPeriod+0x46>
        result = getGCD(result , xPeriodOfTask[i]); 
    2a64:	f240 0328 	movw	r3, #40	; 0x28
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	687a      	ldr	r2, [r7, #4]
    2a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a72:	6838      	ldr	r0, [r7, #0]
    2a74:	4619      	mov	r1, r3
    2a76:	f7ff ffbd 	bl	29f4 <getGCD>
    2a7a:	4603      	mov	r3, r0
    2a7c:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	3301      	adds	r3, #1
    2a82:	607b      	str	r3, [r7, #4]
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	2b0c      	cmp	r3, #12
    2a88:	dde2      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        if( i==0 || i==1 || i==5 )
            continue;
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a8a:	683b      	ldr	r3, [r7, #0]
}
    2a8c:	4618      	mov	r0, r3
    2a8e:	3708      	adds	r7, #8
    2a90:	46bd      	mov	sp, r7
    2a92:	bd80      	pop	{r7, pc}

00002a94 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a94:	b590      	push	{r4, r7, lr}
    2a96:	b091      	sub	sp, #68	; 0x44
    2a98:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a9a:	f7ff ffcd 	bl	2a38 <GCDOfTaskPeriod>
    2a9e:	4602      	mov	r2, r0
    2aa0:	f240 6358 	movw	r3, #1624	; 0x658
    2aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aa8:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2aaa:	f640 0094 	movw	r0, #2196	; 0x894
    2aae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab2:	f001 faf1 	bl	4098 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2ab6:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2aba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2abe:	f001 faeb 	bl	4098 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2ac2:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aca:	f001 fae5 	bl	4098 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2ace:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2ad2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ad6:	f001 fadf 	bl	4098 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ada:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ade:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ae2:	f001 fad9 	bl	4098 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ae6:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aee:	f001 fad3 	bl	4098 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2af2:	2300      	movs	r3, #0
    2af4:	63bb      	str	r3, [r7, #56]	; 0x38
    2af6:	e02b      	b.n	2b50 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2af8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2afa:	2034      	movs	r0, #52	; 0x34
    2afc:	f003 f91e 	bl	5d3c <pvPortMalloc>
    2b00:	4602      	mov	r2, r0
    2b02:	00a3      	lsls	r3, r4, #2
    2b04:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b08:	440b      	add	r3, r1
    2b0a:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b16:	4413      	add	r3, r2
    2b18:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b1e:	009b      	lsls	r3, r3, #2
    2b20:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b24:	440b      	add	r3, r1
    2b26:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b2e:	009b      	lsls	r3, r3, #2
    2b30:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b34:	4413      	add	r3, r2
    2b36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b3a:	3320      	adds	r3, #32
    2b3c:	f640 0094 	movw	r0, #2196	; 0x894
    2b40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b44:	4619      	mov	r1, r3
    2b46:	f001 fad3 	bl	40f0 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b4c:	3301      	adds	r3, #1
    2b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    2b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b52:	2b0c      	cmp	r3, #12
    2b54:	ddd0      	ble.n	2af8 <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b56:	3744      	adds	r7, #68	; 0x44
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd90      	pop	{r4, r7, pc}

00002b5c <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b086      	sub	sp, #24
    2b60:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b62:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	60fb      	str	r3, [r7, #12]
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	2b00      	cmp	r3, #0
    2b72:	dd22      	ble.n	2bba <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b74:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b7c:	68db      	ldr	r3, [r3, #12]
    2b7e:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b80:	f002 fb94 	bl	52ac <xTaskGetTickCount>
    2b84:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b86:	2300      	movs	r3, #0
    2b88:	613b      	str	r3, [r7, #16]
    2b8a:	e012      	b.n	2bb2 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b8c:	697b      	ldr	r3, [r7, #20]
    2b8e:	68db      	ldr	r3, [r3, #12]
    2b90:	4618      	mov	r0, r3
    2b92:	f7ff ff17 	bl	29c4 <xEventGetxTag>
    2b96:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	685a      	ldr	r2, [r3, #4]
    2b9c:	68bb      	ldr	r3, [r7, #8]
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d801      	bhi.n	2ba6 <xIsExecutableEventArrive+0x4a>
    2ba2:	2301      	movs	r3, #1
    2ba4:	e00a      	b.n	2bbc <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2ba6:	697b      	ldr	r3, [r7, #20]
    2ba8:	685b      	ldr	r3, [r3, #4]
    2baa:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2bac:	693b      	ldr	r3, [r7, #16]
    2bae:	3301      	adds	r3, #1
    2bb0:	613b      	str	r3, [r7, #16]
    2bb2:	693a      	ldr	r2, [r7, #16]
    2bb4:	68fb      	ldr	r3, [r7, #12]
    2bb6:	429a      	cmp	r2, r3
    2bb8:	dbe8      	blt.n	2b8c <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2bba:	2300      	movs	r3, #0
}
    2bbc:	4618      	mov	r0, r3
    2bbe:	3718      	adds	r7, #24
    2bc0:	46bd      	mov	sp, r7
    2bc2:	bd80      	pop	{r7, pc}

00002bc4 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	681a      	ldr	r2, [r3, #0]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d201      	bcs.n	2bde <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bda:	2301      	movs	r3, #1
    2bdc:	e02a      	b.n	2c34 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	681a      	ldr	r2, [r3, #0]
    2be2:	683b      	ldr	r3, [r7, #0]
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	429a      	cmp	r2, r3
    2be8:	d123      	bne.n	2c32 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	685b      	ldr	r3, [r3, #4]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d201      	bcs.n	2bfa <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bf6:	2301      	movs	r3, #1
    2bf8:	e01c      	b.n	2c34 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	685a      	ldr	r2, [r3, #4]
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	685b      	ldr	r3, [r3, #4]
    2c02:	429a      	cmp	r2, r3
    2c04:	d115      	bne.n	2c32 <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	68da      	ldr	r2, [r3, #12]
    2c0a:	683b      	ldr	r3, [r7, #0]
    2c0c:	68db      	ldr	r3, [r3, #12]
    2c0e:	429a      	cmp	r2, r3
    2c10:	da01      	bge.n	2c16 <xCompareFunction+0x52>
            {
                return pdTRUE;
    2c12:	2301      	movs	r3, #1
    2c14:	e00e      	b.n	2c34 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	68da      	ldr	r2, [r3, #12]
    2c1a:	683b      	ldr	r3, [r7, #0]
    2c1c:	68db      	ldr	r3, [r3, #12]
    2c1e:	429a      	cmp	r2, r3
    2c20:	d107      	bne.n	2c32 <xCompareFunction+0x6e>
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	689a      	ldr	r2, [r3, #8]
    2c26:	683b      	ldr	r3, [r7, #0]
    2c28:	689b      	ldr	r3, [r3, #8]
    2c2a:	429a      	cmp	r2, r3
    2c2c:	da01      	bge.n	2c32 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c2e:	2301      	movs	r3, #1
    2c30:	e000      	b.n	2c34 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c32:	2300      	movs	r3, #0
}
    2c34:	4618      	mov	r0, r3
    2c36:	370c      	adds	r7, #12
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c40:	b480      	push	{r7}
    2c42:	b087      	sub	sp, #28
    2c44:	af00      	add	r7, sp, #0
    2c46:	60f8      	str	r0, [r7, #12]
    2c48:	60b9      	str	r1, [r7, #8]
    2c4a:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c50:	697b      	ldr	r3, [r7, #20]
    2c52:	68fa      	ldr	r2, [r7, #12]
    2c54:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c56:	697b      	ldr	r3, [r7, #20]
    2c58:	68ba      	ldr	r2, [r7, #8]
    2c5a:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c5c:	697b      	ldr	r3, [r7, #20]
    2c5e:	2200      	movs	r2, #0
    2c60:	615a      	str	r2, [r3, #20]
}
    2c62:	371c      	adds	r7, #28
    2c64:	46bd      	mov	sp, r7
    2c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c6a:	4770      	bx	lr

00002c6c <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b088      	sub	sp, #32
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c74:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c7c:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	68db      	ldr	r3, [r3, #12]
    2c82:	4618      	mov	r0, r3
    2c84:	f7ff fe9e 	bl	29c4 <xEventGetxTag>
    2c88:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c8a:	f002 ffdd 	bl	5c48 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c8e:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c9a:	697b      	ldr	r3, [r7, #20]
    2c9c:	3308      	adds	r3, #8
    2c9e:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2ca0:	2300      	movs	r3, #0
    2ca2:	61bb      	str	r3, [r7, #24]
    2ca4:	e005      	b.n	2cb2 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2ca6:	69fb      	ldr	r3, [r7, #28]
    2ca8:	689b      	ldr	r3, [r3, #8]
    2caa:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2cac:	69bb      	ldr	r3, [r7, #24]
    2cae:	3301      	adds	r3, #1
    2cb0:	61bb      	str	r3, [r7, #24]
    2cb2:	69ba      	ldr	r2, [r7, #24]
    2cb4:	68fb      	ldr	r3, [r7, #12]
    2cb6:	429a      	cmp	r2, r3
    2cb8:	da0d      	bge.n	2cd6 <prvEventListGenericInsert+0x6a>
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	689b      	ldr	r3, [r3, #8]
    2cbe:	68db      	ldr	r3, [r3, #12]
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe7f 	bl	29c4 <xEventGetxTag>
    2cc6:	4603      	mov	r3, r0
    2cc8:	6938      	ldr	r0, [r7, #16]
    2cca:	4619      	mov	r1, r3
    2ccc:	f7ff ff7a 	bl	2bc4 <xCompareFunction>
    2cd0:	4603      	mov	r3, r0
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d1e7      	bne.n	2ca6 <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2cd6:	f002 ffcd 	bl	5c74 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cda:	69fb      	ldr	r3, [r7, #28]
    2cdc:	689b      	ldr	r3, [r3, #8]
    2cde:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2ce0:	69fb      	ldr	r3, [r7, #28]
    2ce2:	685a      	ldr	r2, [r3, #4]
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	685b      	ldr	r3, [r3, #4]
    2cec:	687a      	ldr	r2, [r7, #4]
    2cee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	69fa      	ldr	r2, [r7, #28]
    2cf4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cf6:	69fb      	ldr	r3, [r7, #28]
    2cf8:	687a      	ldr	r2, [r7, #4]
    2cfa:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	697a      	ldr	r2, [r7, #20]
    2d00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2d02:	697b      	ldr	r3, [r7, #20]
    2d04:	681b      	ldr	r3, [r3, #0]
    2d06:	1c5a      	adds	r2, r3, #1
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	601a      	str	r2, [r3, #0]
}
    2d0c:	3720      	adds	r7, #32
    2d0e:	46bd      	mov	sp, r7
    2d10:	bd80      	pop	{r7, pc}
    2d12:	bf00      	nop

00002d14 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b086      	sub	sp, #24
    2d18:	af00      	add	r7, sp, #0
    2d1a:	60f8      	str	r0, [r7, #12]
    2d1c:	60b9      	str	r1, [r7, #8]
    2d1e:	607a      	str	r2, [r7, #4]
    2d20:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2d22:	2300      	movs	r3, #0
    2d24:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d26:	f002 ff8f 	bl	5c48 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2d2a:	f640 0394 	movw	r3, #2196	; 0x894
    2d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d32:	68db      	ldr	r3, [r3, #12]
    2d34:	68db      	ldr	r3, [r3, #12]
    2d36:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d38:	697b      	ldr	r3, [r7, #20]
    2d3a:	3320      	adds	r3, #32
    2d3c:	4618      	mov	r0, r3
    2d3e:	f001 fa37 	bl	41b0 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d42:	697b      	ldr	r3, [r7, #20]
    2d44:	68fa      	ldr	r2, [r7, #12]
    2d46:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d48:	68b8      	ldr	r0, [r7, #8]
    2d4a:	6879      	ldr	r1, [r7, #4]
    2d4c:	697a      	ldr	r2, [r7, #20]
    2d4e:	f7ff ff77 	bl	2c40 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d52:	697b      	ldr	r3, [r7, #20]
    2d54:	683a      	ldr	r2, [r7, #0]
    2d56:	3318      	adds	r3, #24
    2d58:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d5c:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d60:	697b      	ldr	r3, [r7, #20]
    2d62:	697a      	ldr	r2, [r7, #20]
    2d64:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d66:	f002 ff85 	bl	5c74 <vPortExitCritical>

    return pxNewEvent;
    2d6a:	697b      	ldr	r3, [r7, #20]
}
    2d6c:	4618      	mov	r0, r3
    2d6e:	3718      	adds	r7, #24
    2d70:	46bd      	mov	sp, r7
    2d72:	bd80      	pop	{r7, pc}

00002d74 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b08c      	sub	sp, #48	; 0x30
    2d78:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d7a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d82:	68db      	ldr	r3, [r3, #12]
    2d84:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d86:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	623b      	str	r3, [r7, #32]
    2d92:	6a3b      	ldr	r3, [r7, #32]
    2d94:	2b00      	cmp	r3, #0
    2d96:	f340 80d4 	ble.w	2f42 <vEventGenericScatter+0x1ce>
    {
        xCurrentTime = xTaskGetTickCount();
    2d9a:	f002 fa87 	bl	52ac <xTaskGetTickCount>
    2d9e:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2da0:	2300      	movs	r3, #0
    2da2:	62bb      	str	r3, [r7, #40]	; 0x28
    2da4:	e0c8      	b.n	2f38 <vEventGenericScatter+0x1c4>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2da8:	68db      	ldr	r3, [r3, #12]
    2daa:	4618      	mov	r0, r3
    2dac:	f7ff fe0a 	bl	29c4 <xEventGetxTag>
    2db0:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2db2:	69bb      	ldr	r3, [r7, #24]
    2db4:	685a      	ldr	r2, [r3, #4]
    2db6:	69fb      	ldr	r3, [r7, #28]
    2db8:	429a      	cmp	r2, r3
    2dba:	f200 80b7 	bhi.w	2f2c <vEventGenericScatter+0x1b8>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dc0:	68db      	ldr	r3, [r3, #12]
    2dc2:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2dc4:	697b      	ldr	r3, [r7, #20]
    2dc6:	6819      	ldr	r1, [r3, #0]
    2dc8:	f640 120c 	movw	r2, #2316	; 0x90c
    2dcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd0:	460b      	mov	r3, r1
    2dd2:	00db      	lsls	r3, r3, #3
    2dd4:	1a5b      	subs	r3, r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	4413      	add	r3, r2
    2dda:	3310      	adds	r3, #16
    2ddc:	681b      	ldr	r3, [r3, #0]
    2dde:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2de0:	f002 ff32 	bl	5c48 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2de6:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dea:	685b      	ldr	r3, [r3, #4]
    2dec:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dee:	68f8      	ldr	r0, [r7, #12]
    2df0:	f001 f9de 	bl	41b0 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2df4:	697b      	ldr	r3, [r7, #20]
    2df6:	6819      	ldr	r1, [r3, #0]
    2df8:	f640 120c 	movw	r2, #2316	; 0x90c
    2dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e00:	460b      	mov	r3, r1
    2e02:	00db      	lsls	r3, r3, #3
    2e04:	1a5b      	subs	r3, r3, r1
    2e06:	00db      	lsls	r3, r3, #3
    2e08:	4413      	add	r3, r2
    2e0a:	331c      	adds	r3, #28
    2e0c:	681a      	ldr	r2, [r3, #0]
    2e0e:	697b      	ldr	r3, [r7, #20]
    2e10:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2e12:	697b      	ldr	r3, [r7, #20]
    2e14:	685a      	ldr	r2, [r3, #4]
    2e16:	f640 110c 	movw	r1, #2316	; 0x90c
    2e1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e1e:	4613      	mov	r3, r2
    2e20:	00db      	lsls	r3, r3, #3
    2e22:	1a9b      	subs	r3, r3, r2
    2e24:	00db      	lsls	r3, r3, #3
    2e26:	440b      	add	r3, r1
    2e28:	3334      	adds	r3, #52	; 0x34
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	1c58      	adds	r0, r3, #1
    2e2e:	f640 110c 	movw	r1, #2316	; 0x90c
    2e32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e36:	4613      	mov	r3, r2
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	1a9b      	subs	r3, r3, r2
    2e3c:	00db      	lsls	r3, r3, #3
    2e3e:	440b      	add	r3, r1
    2e40:	3334      	adds	r3, #52	; 0x34
    2e42:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xMicroStep = 0;
    2e44:	697b      	ldr	r3, [r7, #20]
    2e46:	2200      	movs	r2, #0
    2e48:	615a      	str	r2, [r3, #20]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	6859      	ldr	r1, [r3, #4]
    2e4e:	f640 120c 	movw	r2, #2316	; 0x90c
    2e52:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e56:	460b      	mov	r3, r1
    2e58:	00db      	lsls	r3, r3, #3
    2e5a:	1a5b      	subs	r3, r3, r1
    2e5c:	00db      	lsls	r3, r3, #3
    2e5e:	4413      	add	r3, r2
    2e60:	681a      	ldr	r2, [r3, #0]
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e66:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e6e:	68f9      	ldr	r1, [r7, #12]
    2e70:	f001 f93e 	bl	40f0 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e74:	2301      	movs	r3, #1
    2e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e78:	e051      	b.n	2f1e <vEventGenericScatter+0x1aa>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e7a:	697b      	ldr	r3, [r7, #20]
    2e7c:	6899      	ldr	r1, [r3, #8]
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	68da      	ldr	r2, [r3, #12]
    2e82:	697b      	ldr	r3, [r7, #20]
    2e84:	3318      	adds	r3, #24
    2e86:	68b8      	ldr	r0, [r7, #8]
    2e88:	f7ff ff44 	bl	2d14 <pxEventGenericCreate>
    2e8c:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e92:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e94:	697b      	ldr	r3, [r7, #20]
    2e96:	6819      	ldr	r1, [r3, #0]
    2e98:	f640 120c 	movw	r2, #2316	; 0x90c
    2e9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ea0:	460b      	mov	r3, r1
    2ea2:	00db      	lsls	r3, r3, #3
    2ea4:	1a5b      	subs	r3, r3, r1
    2ea6:	005b      	lsls	r3, r3, #1
    2ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2eaa:	440b      	add	r3, r1
    2eac:	3306      	adds	r3, #6
    2eae:	009b      	lsls	r3, r3, #2
    2eb0:	4413      	add	r3, r2
    2eb2:	685a      	ldr	r2, [r3, #4]
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	685a      	ldr	r2, [r3, #4]
    2ebc:	f640 110c 	movw	r1, #2316	; 0x90c
    2ec0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ec4:	4613      	mov	r3, r2
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	1a9b      	subs	r3, r3, r2
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	440b      	add	r3, r1
    2ece:	3334      	adds	r3, #52	; 0x34
    2ed0:	681b      	ldr	r3, [r3, #0]
    2ed2:	1c58      	adds	r0, r3, #1
    2ed4:	f640 110c 	movw	r1, #2316	; 0x90c
    2ed8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2edc:	4613      	mov	r3, r2
    2ede:	00db      	lsls	r3, r3, #3
    2ee0:	1a9b      	subs	r3, r3, r2
    2ee2:	00db      	lsls	r3, r3, #3
    2ee4:	440b      	add	r3, r1
    2ee6:	3334      	adds	r3, #52	; 0x34
    2ee8:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2eea:	697b      	ldr	r3, [r7, #20]
    2eec:	6859      	ldr	r1, [r3, #4]
    2eee:	f640 120c 	movw	r2, #2316	; 0x90c
    2ef2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ef6:	460b      	mov	r3, r1
    2ef8:	00db      	lsls	r3, r3, #3
    2efa:	1a5b      	subs	r3, r3, r1
    2efc:	00db      	lsls	r3, r3, #3
    2efe:	4413      	add	r3, r2
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	3320      	adds	r3, #32
    2f0a:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f12:	4619      	mov	r1, r3
    2f14:	f001 f8ec 	bl	40f0 <vListInsertEnd>
                pxEvent->xTag.xMicroStep = 0;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f1a:	3301      	adds	r3, #1
    2f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f20:	693b      	ldr	r3, [r7, #16]
    2f22:	429a      	cmp	r2, r3
    2f24:	dba9      	blt.n	2e7a <vEventGenericScatter+0x106>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2f26:	f002 fea5 	bl	5c74 <vPortExitCritical>
    2f2a:	e002      	b.n	2f32 <vEventGenericScatter+0x1be>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f2e:	685b      	ldr	r3, [r3, #4]
    2f30:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f34:	3301      	adds	r3, #1
    2f36:	62bb      	str	r3, [r7, #40]	; 0x28
    2f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f3a:	6a3b      	ldr	r3, [r7, #32]
    2f3c:	429a      	cmp	r2, r3
    2f3e:	f6ff af32 	blt.w	2da6 <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f42:	3730      	adds	r7, #48	; 0x30
    2f44:	46bd      	mov	sp, r7
    2f46:	bd80      	pop	{r7, pc}

00002f48 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f48:	b480      	push	{r7}
    2f4a:	b083      	sub	sp, #12
    2f4c:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f4e:	232f      	movs	r3, #47	; 0x2f
    2f50:	607b      	str	r3, [r7, #4]
    while(i--)
    2f52:	e030      	b.n	2fb6 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f54:	f240 6260 	movw	r2, #1632	; 0x660
    2f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5c:	6879      	ldr	r1, [r7, #4]
    2f5e:	460b      	mov	r3, r1
    2f60:	005b      	lsls	r3, r3, #1
    2f62:	440b      	add	r3, r1
    2f64:	009b      	lsls	r3, r3, #2
    2f66:	4413      	add	r3, r2
    2f68:	2200      	movs	r2, #0
    2f6a:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f6c:	f240 6260 	movw	r2, #1632	; 0x660
    2f70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f74:	6879      	ldr	r1, [r7, #4]
    2f76:	460b      	mov	r3, r1
    2f78:	005b      	lsls	r3, r3, #1
    2f7a:	440b      	add	r3, r1
    2f7c:	009b      	lsls	r3, r3, #2
    2f7e:	4413      	add	r3, r2
    2f80:	3308      	adds	r3, #8
    2f82:	2200      	movs	r2, #0
    2f84:	601a      	str	r2, [r3, #0]
    2f86:	f240 6260 	movw	r2, #1632	; 0x660
    2f8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f8e:	6879      	ldr	r1, [r7, #4]
    2f90:	460b      	mov	r3, r1
    2f92:	005b      	lsls	r3, r3, #1
    2f94:	440b      	add	r3, r1
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	4413      	add	r3, r2
    2f9a:	3308      	adds	r3, #8
    2f9c:	6818      	ldr	r0, [r3, #0]
    2f9e:	f240 6260 	movw	r2, #1632	; 0x660
    2fa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa6:	6879      	ldr	r1, [r7, #4]
    2fa8:	460b      	mov	r3, r1
    2faa:	005b      	lsls	r3, r3, #1
    2fac:	440b      	add	r3, r1
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	4413      	add	r3, r2
    2fb2:	3304      	adds	r3, #4
    2fb4:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	1e5a      	subs	r2, r3, #1
    2fba:	607a      	str	r2, [r7, #4]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d1c9      	bne.n	2f54 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2fc0:	370c      	adds	r7, #12
    2fc2:	46bd      	mov	sp, r7
    2fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc8:	4770      	bx	lr
    2fca:	bf00      	nop

00002fcc <vEventGenericReduce>:

void vEventGenericReduce()
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b08a      	sub	sp, #40	; 0x28
    2fd0:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fd2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	61fb      	str	r3, [r7, #28]
    2fde:	69fb      	ldr	r3, [r7, #28]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	f340 80ea 	ble.w	31ba <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fe6:	f7ff ffaf 	bl	2f48 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fea:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	68db      	ldr	r3, [r3, #12]
    2ff4:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2ff6:	2300      	movs	r3, #0
    2ff8:	627b      	str	r3, [r7, #36]	; 0x24
    2ffa:	e0a6      	b.n	314a <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2ffc:	6a3b      	ldr	r3, [r7, #32]
    2ffe:	68db      	ldr	r3, [r3, #12]
    3000:	4618      	mov	r0, r3
    3002:	f7ff fcd3 	bl	29ac <xEventGetpxDestination>
    3006:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3008:	f640 120c 	movw	r2, #2316	; 0x90c
    300c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3010:	69b9      	ldr	r1, [r7, #24]
    3012:	460b      	mov	r3, r1
    3014:	00db      	lsls	r3, r3, #3
    3016:	1a5b      	subs	r3, r3, r1
    3018:	00db      	lsls	r3, r3, #3
    301a:	4413      	add	r3, r2
    301c:	3334      	adds	r3, #52	; 0x34
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	f640 120c 	movw	r2, #2316	; 0x90c
    3024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3028:	69b9      	ldr	r1, [r7, #24]
    302a:	460b      	mov	r3, r1
    302c:	00db      	lsls	r3, r3, #3
    302e:	1a5b      	subs	r3, r3, r1
    3030:	00db      	lsls	r3, r3, #3
    3032:	4413      	add	r3, r2
    3034:	330c      	adds	r3, #12
    3036:	681b      	ldr	r3, [r3, #0]
    3038:	4298      	cmp	r0, r3
    303a:	f040 8083 	bne.w	3144 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    303e:	69ba      	ldr	r2, [r7, #24]
    3040:	4613      	mov	r3, r2
    3042:	005b      	lsls	r3, r3, #1
    3044:	4413      	add	r3, r2
    3046:	009b      	lsls	r3, r3, #2
    3048:	f240 6260 	movw	r2, #1632	; 0x660
    304c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3050:	4413      	add	r3, r2
    3052:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3054:	f640 120c 	movw	r2, #2316	; 0x90c
    3058:	f2c2 0200 	movt	r2, #8192	; 0x2000
    305c:	69b9      	ldr	r1, [r7, #24]
    305e:	460b      	mov	r3, r1
    3060:	00db      	lsls	r3, r3, #3
    3062:	1a5b      	subs	r3, r3, r1
    3064:	00db      	lsls	r3, r3, #3
    3066:	4413      	add	r3, r2
    3068:	3334      	adds	r3, #52	; 0x34
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	2b01      	cmp	r3, #1
    306e:	dd57      	ble.n	3120 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3070:	697b      	ldr	r3, [r7, #20]
    3072:	685b      	ldr	r3, [r3, #4]
    3074:	613b      	str	r3, [r7, #16]
    3076:	693b      	ldr	r3, [r7, #16]
    3078:	2b00      	cmp	r3, #0
    307a:	dd41      	ble.n	3100 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    307c:	6a3b      	ldr	r3, [r7, #32]
    307e:	68db      	ldr	r3, [r3, #12]
    3080:	4618      	mov	r0, r3
    3082:	f7ff fcab 	bl	29dc <xEventGetxData>
    3086:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3088:	6a3b      	ldr	r3, [r7, #32]
    308a:	68db      	ldr	r3, [r3, #12]
    308c:	4618      	mov	r0, r3
    308e:	f7ff fc99 	bl	29c4 <xEventGetxTag>
    3092:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3094:	697b      	ldr	r3, [r7, #20]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	6811      	ldr	r1, [r2, #0]
    309c:	693a      	ldr	r2, [r7, #16]
    309e:	3206      	adds	r2, #6
    30a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    30a4:	697b      	ldr	r3, [r7, #20]
    30a6:	6859      	ldr	r1, [r3, #4]
    30a8:	1c4a      	adds	r2, r1, #1
    30aa:	697b      	ldr	r3, [r7, #20]
    30ac:	605a      	str	r2, [r3, #4]
    30ae:	f640 120c 	movw	r2, #2316	; 0x90c
    30b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30b6:	69b8      	ldr	r0, [r7, #24]
    30b8:	4603      	mov	r3, r0
    30ba:	00db      	lsls	r3, r3, #3
    30bc:	1a1b      	subs	r3, r3, r0
    30be:	00db      	lsls	r3, r3, #3
    30c0:	4413      	add	r3, r2
    30c2:	3334      	adds	r3, #52	; 0x34
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	3b01      	subs	r3, #1
    30c8:	4299      	cmp	r1, r3
    30ca:	d102      	bne.n	30d2 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;  // all events are found
    30cc:	697b      	ldr	r3, [r7, #20]
    30ce:	2201      	movs	r2, #1
    30d0:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30d2:	697b      	ldr	r3, [r7, #20]
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	68da      	ldr	r2, [r3, #12]
    30d8:	68bb      	ldr	r3, [r7, #8]
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	429a      	cmp	r2, r3
    30de:	d204      	bcs.n	30ea <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30e0:	697b      	ldr	r3, [r7, #20]
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	68ba      	ldr	r2, [r7, #8]
    30e6:	6852      	ldr	r2, [r2, #4]
    30e8:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ea:	6a3b      	ldr	r3, [r7, #32]
    30ec:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30ee:	6a3b      	ldr	r3, [r7, #32]
    30f0:	685b      	ldr	r3, [r3, #4]
    30f2:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	68db      	ldr	r3, [r3, #12]
    30f8:	4618      	mov	r0, r3
    30fa:	f000 f9f3 	bl	34e4 <vEventGenericDelete>
    30fe:	e021      	b.n	3144 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    3100:	6a3b      	ldr	r3, [r7, #32]
    3102:	68da      	ldr	r2, [r3, #12]
    3104:	697b      	ldr	r3, [r7, #20]
    3106:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    3108:	697b      	ldr	r3, [r7, #20]
    310a:	2201      	movs	r2, #1
    310c:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    310e:	6a3b      	ldr	r3, [r7, #32]
    3110:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    3112:	6a3b      	ldr	r3, [r7, #32]
    3114:	685b      	ldr	r3, [r3, #4]
    3116:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    3118:	6878      	ldr	r0, [r7, #4]
    311a:	f001 f849 	bl	41b0 <vListRemove>
    311e:	e011      	b.n	3144 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    3120:	6a3b      	ldr	r3, [r7, #32]
    3122:	68da      	ldr	r2, [r3, #12]
    3124:	697b      	ldr	r3, [r7, #20]
    3126:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    3128:	697b      	ldr	r3, [r7, #20]
    312a:	2201      	movs	r2, #1
    312c:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    312e:	697b      	ldr	r3, [r7, #20]
    3130:	2201      	movs	r2, #1
    3132:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    3134:	6a3b      	ldr	r3, [r7, #32]
    3136:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3138:	6a3b      	ldr	r3, [r7, #32]
    313a:	685b      	ldr	r3, [r3, #4]
    313c:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    313e:	6878      	ldr	r0, [r7, #4]
    3140:	f001 f836 	bl	41b0 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3146:	3301      	adds	r3, #1
    3148:	627b      	str	r3, [r7, #36]	; 0x24
    314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    314c:	69fb      	ldr	r3, [r7, #28]
    314e:	429a      	cmp	r2, r3
    3150:	f6ff af54 	blt.w	2ffc <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3154:	2300      	movs	r3, #0
    3156:	627b      	str	r3, [r7, #36]	; 0x24
    3158:	e02c      	b.n	31b4 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    315a:	f240 6260 	movw	r2, #1632	; 0x660
    315e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3162:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3164:	460b      	mov	r3, r1
    3166:	005b      	lsls	r3, r3, #1
    3168:	440b      	add	r3, r1
    316a:	009b      	lsls	r3, r3, #2
    316c:	4413      	add	r3, r2
    316e:	3308      	adds	r3, #8
    3170:	681b      	ldr	r3, [r3, #0]
    3172:	2b00      	cmp	r3, #0
    3174:	d01b      	beq.n	31ae <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3176:	f240 6260 	movw	r2, #1632	; 0x660
    317a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    317e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3180:	460b      	mov	r3, r1
    3182:	005b      	lsls	r3, r3, #1
    3184:	440b      	add	r3, r1
    3186:	009b      	lsls	r3, r3, #2
    3188:	4413      	add	r3, r2
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	3320      	adds	r3, #32
    318e:	4618      	mov	r0, r3
    3190:	f7ff fd6c 	bl	2c6c <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    3194:	f640 120c 	movw	r2, #2316	; 0x90c
    3198:	f2c2 0200 	movt	r2, #8192	; 0x2000
    319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    319e:	460b      	mov	r3, r1
    31a0:	00db      	lsls	r3, r3, #3
    31a2:	1a5b      	subs	r3, r3, r1
    31a4:	00db      	lsls	r3, r3, #3
    31a6:	4413      	add	r3, r2
    31a8:	3334      	adds	r3, #52	; 0x34
    31aa:	2200      	movs	r2, #0
    31ac:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    31ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31b0:	3301      	adds	r3, #1
    31b2:	627b      	str	r3, [r7, #36]	; 0x24
    31b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31b6:	2b2e      	cmp	r3, #46	; 0x2e
    31b8:	ddcf      	ble.n	315a <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    31ba:	3728      	adds	r7, #40	; 0x28
    31bc:	46bd      	mov	sp, r7
    31be:	bd80      	pop	{r7, pc}

000031c0 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b088      	sub	sp, #32
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	68db      	ldr	r3, [r3, #12]
    31cc:	61fb      	str	r3, [r7, #28]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31ce:	69fb      	ldr	r3, [r7, #28]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	61bb      	str	r3, [r7, #24]
    portTickType start = pxEvent->xTag.xTimestamp;
    31d4:	69fb      	ldr	r3, [r7, #28]
    31d6:	68db      	ldr	r3, [r3, #12]
    31d8:	617b      	str	r3, [r7, #20]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31da:	f640 120c 	movw	r2, #2316	; 0x90c
    31de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31e2:	69b9      	ldr	r1, [r7, #24]
    31e4:	460b      	mov	r3, r1
    31e6:	00db      	lsls	r3, r3, #3
    31e8:	1a5b      	subs	r3, r3, r1
    31ea:	00db      	lsls	r3, r3, #3
    31ec:	4413      	add	r3, r2
    31ee:	3324      	adds	r3, #36	; 0x24
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	697b      	ldr	r3, [r7, #20]
    31f4:	4413      	add	r3, r2
    31f6:	613b      	str	r3, [r7, #16]
    portTickType deadline = (xTaskGetTickCount()/GCDPeriod + 1)*GCDPeriod;
    31f8:	f002 f858 	bl	52ac <xTaskGetTickCount>
    31fc:	4602      	mov	r2, r0
    31fe:	f240 6358 	movw	r3, #1624	; 0x658
    3202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	fbb2 f3f3 	udiv	r3, r2, r3
    320c:	1c5a      	adds	r2, r3, #1
    320e:	f240 6358 	movw	r3, #1624	; 0x658
    3212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	fb03 f302 	mul.w	r3, r3, r2
    321c:	60fb      	str	r3, [r7, #12]

    // different execution time overlaped
    if( end < deadline - OUTPUT )
    321e:	68fb      	ldr	r3, [r7, #12]
    3220:	1eda      	subs	r2, r3, #3
    3222:	693b      	ldr	r3, [r7, #16]
    3224:	429a      	cmp	r2, r3
    3226:	d901      	bls.n	322c <pOverLap+0x6c>
    {
        return 0;
    3228:	2300      	movs	r3, #0
    322a:	e000      	b.n	322e <pOverLap+0x6e>
    }
    else
    {
        return 1;
    322c:	2301      	movs	r3, #1
    }
}
    322e:	4618      	mov	r0, r3
    3230:	3720      	adds	r7, #32
    3232:	46bd      	mov	sp, r7
    3234:	bd80      	pop	{r7, pc}
    3236:	bf00      	nop

00003238 <vSetTimestamp>:

static void vSetTimestamp( xListItem * pxEventListItem)
{
    3238:	b580      	push	{r7, lr}
    323a:	b086      	sub	sp, #24
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i, flag;
    portTickType nextComputingStart;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	68db      	ldr	r3, [r3, #12]
    3244:	617b      	str	r3, [r7, #20]
    pxEvent->xTag.xTimestamp = xFutureModelTime;// update model time
    3246:	f240 635c 	movw	r3, #1628	; 0x65c
    324a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    324e:	681a      	ldr	r2, [r3, #0]
    3250:	697b      	ldr	r3, [r7, #20]
    3252:	60da      	str	r2, [r3, #12]
    nextComputingStart = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;
    3254:	f240 635c 	movw	r3, #1628	; 0x65c
    3258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    325c:	681a      	ldr	r2, [r3, #0]
    325e:	f240 6358 	movw	r3, #1624	; 0x658
    3262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	fbb2 f3f3 	udiv	r3, r2, r3
    326c:	1c5a      	adds	r2, r3, #1
    326e:	f240 6358 	movw	r3, #1624	; 0x658
    3272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	fb03 f302 	mul.w	r3, r3, r2
    327c:	3303      	adds	r3, #3
    327e:	613b      	str	r3, [r7, #16]
    flag = pOverLap(pxEventListItem);
    3280:	6878      	ldr	r0, [r7, #4]
    3282:	f7ff ff9d 	bl	31c0 <pOverLap>
    3286:	60f8      	str	r0, [r7, #12]

    if( !flag  && xFutureModelTime < nextComputingStart) // not overlaped
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	2b00      	cmp	r3, #0
    328c:	d112      	bne.n	32b4 <vSetTimestamp+0x7c>
    328e:	f240 635c 	movw	r3, #1628	; 0x65c
    3292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3296:	681a      	ldr	r2, [r3, #0]
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	429a      	cmp	r2, r3
    329c:	d20a      	bcs.n	32b4 <vSetTimestamp+0x7c>
    {
        vListRemove( pxEventListItem); 
    329e:	6878      	ldr	r0, [r7, #4]
    32a0:	f000 ff86 	bl	41b0 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32a4:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32ac:	6879      	ldr	r1, [r7, #4]
    32ae:	f000 ff1f 	bl	40f0 <vListInsertEnd>
    32b2:	e02c      	b.n	330e <vSetTimestamp+0xd6>
    }
    else if ( flag && xFutureModelTime < nextComputingStart ) 
    32b4:	68fb      	ldr	r3, [r7, #12]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d01f      	beq.n	32fa <vSetTimestamp+0xc2>
    32ba:	f240 635c 	movw	r3, #1628	; 0x65c
    32be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c2:	681a      	ldr	r2, [r3, #0]
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	429a      	cmp	r2, r3
    32c8:	d217      	bcs.n	32fa <vSetTimestamp+0xc2>
    {
        // set the future model time to start time of next LET
        xFutureModelTime = nextComputingStart; 
    32ca:	f240 635c 	movw	r3, #1628	; 0x65c
    32ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d2:	693a      	ldr	r2, [r7, #16]
    32d4:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32d6:	f240 635c 	movw	r3, #1628	; 0x65c
    32da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32de:	681a      	ldr	r2, [r3, #0]
    32e0:	697b      	ldr	r3, [r7, #20]
    32e2:	60da      	str	r2, [r3, #12]

        vListRemove( pxEventListItem); 
    32e4:	6878      	ldr	r0, [r7, #4]
    32e6:	f000 ff63 	bl	41b0 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    32ea:	f640 00a8 	movw	r0, #2216	; 0x8a8
    32ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32f2:	6879      	ldr	r1, [r7, #4]
    32f4:	f000 fefc 	bl	40f0 <vListInsertEnd>
    32f8:	e009      	b.n	330e <vSetTimestamp+0xd6>
    }
    else
    {
        vListRemove( pxEventListItem); 
    32fa:	6878      	ldr	r0, [r7, #4]
    32fc:	f000 ff58 	bl	41b0 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3300:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3304:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3308:	6879      	ldr	r1, [r7, #4]
    330a:	f000 fef1 	bl	40f0 <vListInsertEnd>
    }
    xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;  
    330e:	697b      	ldr	r3, [r7, #20]
    3310:	6859      	ldr	r1, [r3, #4]
    3312:	f640 120c 	movw	r2, #2316	; 0x90c
    3316:	f2c2 0200 	movt	r2, #8192	; 0x2000
    331a:	460b      	mov	r3, r1
    331c:	00db      	lsls	r3, r3, #3
    331e:	1a5b      	subs	r3, r3, r1
    3320:	00db      	lsls	r3, r3, #3
    3322:	4413      	add	r3, r2
    3324:	3324      	adds	r3, #36	; 0x24
    3326:	681a      	ldr	r2, [r3, #0]
    3328:	f240 635c 	movw	r3, #1628	; 0x65c
    332c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	441a      	add	r2, r3
    3334:	f240 635c 	movw	r3, #1628	; 0x65c
    3338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333c:	601a      	str	r2, [r3, #0]
}
    333e:	3718      	adds	r7, #24
    3340:	46bd      	mov	sp, r7
    3342:	bd80      	pop	{r7, pc}

00003344 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3344:	b480      	push	{r7}
    3346:	b083      	sub	sp, #12
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	683b      	ldr	r3, [r7, #0]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	429a      	cmp	r2, r3
    3358:	bf14      	ite	ne
    335a:	2300      	movne	r3, #0
    335c:	2301      	moveq	r3, #1
    335e:	b2db      	uxtb	r3, r3
}
    3360:	4618      	mov	r0, r3
    3362:	370c      	adds	r7, #12
    3364:	46bd      	mov	sp, r7
    3366:	f85d 7b04 	ldr.w	r7, [sp], #4
    336a:	4770      	bx	lr

0000336c <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3372:	2301      	movs	r3, #1
    3374:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    3376:	f640 03e4 	movw	r3, #2276	; 0x8e4
    337a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	2b00      	cmp	r3, #0
    3382:	d00a      	beq.n	339a <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    3384:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    338c:	68db      	ldr	r3, [r3, #12]
    338e:	68db      	ldr	r3, [r3, #12]
    3390:	4618      	mov	r0, r3
    3392:	f7ff fb17 	bl	29c4 <xEventGetxTag>
    3396:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3398:	e035      	b.n	3406 <xEventGenericSerialize+0x9a>
    339a:	e034      	b.n	3406 <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    339c:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a4:	68db      	ldr	r3, [r3, #12]
    33a6:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	68db      	ldr	r3, [r3, #12]
    33ac:	4618      	mov	r0, r3
    33ae:	f7ff fafd 	bl	29ac <xEventGetpxDestination>
    33b2:	4601      	mov	r1, r0
    33b4:	f640 120c 	movw	r2, #2316	; 0x90c
    33b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33bc:	460b      	mov	r3, r1
    33be:	00db      	lsls	r3, r3, #3
    33c0:	1a5b      	subs	r3, r3, r1
    33c2:	00db      	lsls	r3, r3, #3
    33c4:	4413      	add	r3, r2
    33c6:	3304      	adds	r3, #4
    33c8:	681b      	ldr	r3, [r3, #0]
    33ca:	2b02      	cmp	r3, #2
    33cc:	d111      	bne.n	33f2 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	68db      	ldr	r3, [r3, #12]
    33d2:	4618      	mov	r0, r3
    33d4:	f7ff faf6 	bl	29c4 <xEventGetxTag>
    33d8:	4603      	mov	r3, r0
    33da:	4618      	mov	r0, r3
    33dc:	68f9      	ldr	r1, [r7, #12]
    33de:	f7ff ffb1 	bl	3344 <pEqualxDeadline>
    33e2:	4603      	mov	r3, r0
    33e4:	2b00      	cmp	r3, #0
    33e6:	d003      	beq.n	33f0 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                vSetTimestamp( flag_pxEventListItem);
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f7ff ff25 	bl	3238 <vSetTimestamp>
    33ee:	e00a      	b.n	3406 <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    33f0:	e010      	b.n	3414 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    33f2:	6878      	ldr	r0, [r7, #4]
    33f4:	f000 fedc 	bl	41b0 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    33f8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    33fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3400:	6879      	ldr	r1, [r7, #4]
    3402:	f000 fe75 	bl	40f0 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3406:	f640 03e4 	movw	r3, #2276	; 0x8e4
    340a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340e:	681b      	ldr	r3, [r3, #0]
    3410:	2b00      	cmp	r3, #0
    3412:	d1c3      	bne.n	339c <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3414:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341c:	681b      	ldr	r3, [r3, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d00a      	beq.n	3438 <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3422:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	68db      	ldr	r3, [r3, #12]
    342e:	4618      	mov	r0, r3
    3430:	f7ff fabc 	bl	29ac <xEventGetpxDestination>
    3434:	4603      	mov	r3, r0
    3436:	e001      	b.n	343c <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    3438:	f04f 33ff 	mov.w	r3, #4294967295
}
    343c:	4618      	mov	r0, r3
    343e:	3710      	adds	r7, #16
    3440:	46bd      	mov	sp, r7
    3442:	bd80      	pop	{r7, pc}

00003444 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	3320      	adds	r3, #32
    3450:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3454:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3458:	4619      	mov	r1, r3
    345a:	f000 fe49 	bl	40f0 <vListInsertEnd>
}
    345e:	3708      	adds	r7, #8
    3460:	46bd      	mov	sp, r7
    3462:	bd80      	pop	{r7, pc}

00003464 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    346a:	f002 fbed 	bl	5c48 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    346e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3476:	68db      	ldr	r3, [r3, #12]
    3478:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    347a:	6878      	ldr	r0, [r7, #4]
    347c:	f000 fe98 	bl	41b0 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    3480:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3484:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3488:	6879      	ldr	r1, [r7, #4]
    348a:	f000 fe31 	bl	40f0 <vListInsertEnd>
    taskEXIT_CRITICAL();
    348e:	f002 fbf1 	bl	5c74 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	68db      	ldr	r3, [r3, #12]
}
    3496:	4618      	mov	r0, r3
    3498:	3708      	adds	r7, #8
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop

000034a0 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34a0:	b480      	push	{r7}
    34a2:	b087      	sub	sp, #28
    34a4:	af00      	add	r7, sp, #0
    34a6:	60f8      	str	r0, [r7, #12]
    34a8:	60b9      	str	r1, [r7, #8]
    34aa:	607a      	str	r2, [r7, #4]
    34ac:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34ae:	68fb      	ldr	r3, [r7, #12]
    34b0:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34b2:	697b      	ldr	r3, [r7, #20]
    34b4:	68ba      	ldr	r2, [r7, #8]
    34b6:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34b8:	697b      	ldr	r3, [r7, #20]
    34ba:	687a      	ldr	r2, [r7, #4]
    34bc:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34be:	697b      	ldr	r3, [r7, #20]
    34c0:	683a      	ldr	r2, [r7, #0]
    34c2:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34c4:	697b      	ldr	r3, [r7, #20]
    34c6:	2200      	movs	r2, #0
    34c8:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34ca:	697b      	ldr	r3, [r7, #20]
    34cc:	6a3a      	ldr	r2, [r7, #32]
    34ce:	3318      	adds	r3, #24
    34d0:	e892 0003 	ldmia.w	r2, {r0, r1}
    34d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34d8:	371c      	adds	r7, #28
    34da:	46bd      	mov	sp, r7
    34dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop

000034e4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b084      	sub	sp, #16
    34e8:	af00      	add	r7, sp, #0
    34ea:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    34ec:	f002 fbac 	bl	5c48 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	3320      	adds	r3, #32
    34f4:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    34f6:	68f8      	ldr	r0, [r7, #12]
    34f8:	f000 fe5a 	bl	41b0 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    34fc:	f640 0094 	movw	r0, #2196	; 0x894
    3500:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3504:	68f9      	ldr	r1, [r7, #12]
    3506:	f000 fdf3 	bl	40f0 <vListInsertEnd>

    taskEXIT_CRITICAL();
    350a:	f002 fbb3 	bl	5c74 <vPortExitCritical>
}
    350e:	3710      	adds	r7, #16
    3510:	46bd      	mov	sp, r7
    3512:	bd80      	pop	{r7, pc}

00003514 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3514:	b580      	push	{r7, lr}
    3516:	b082      	sub	sp, #8
    3518:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    351a:	2300      	movs	r3, #0
    351c:	607b      	str	r3, [r7, #4]
    351e:	e033      	b.n	3588 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3520:	2001      	movs	r0, #1
    3522:	2100      	movs	r1, #0
    3524:	2203      	movs	r2, #3
    3526:	f000 feb9 	bl	429c <xQueueGenericCreate>
    352a:	4601      	mov	r1, r0
    352c:	f241 3354 	movw	r3, #4948	; 0x1354
    3530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3534:	687a      	ldr	r2, [r7, #4]
    3536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    353a:	f241 3354 	movw	r3, #4948	; 0x1354
    353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3542:	687a      	ldr	r2, [r7, #4]
    3544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3548:	2b00      	cmp	r3, #0
    354a:	d00c      	beq.n	3566 <vSemaphoreInitialise+0x52>
    354c:	f241 3354 	movw	r3, #4948	; 0x1354
    3550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3554:	687a      	ldr	r2, [r7, #4]
    3556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    355a:	4618      	mov	r0, r3
    355c:	2100      	movs	r1, #0
    355e:	2200      	movs	r2, #0
    3560:	2300      	movs	r3, #0
    3562:	f000 ff29 	bl	43b8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    3566:	f241 3354 	movw	r3, #4948	; 0x1354
    356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356e:	687a      	ldr	r2, [r7, #4]
    3570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3574:	4618      	mov	r0, r3
    3576:	2100      	movs	r1, #0
    3578:	f04f 32ff 	mov.w	r2, #4294967295
    357c:	2300      	movs	r3, #0
    357e:	f000 ffe1 	bl	4544 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	3301      	adds	r3, #1
    3586:	607b      	str	r3, [r7, #4]
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	2b03      	cmp	r3, #3
    358c:	ddc8      	ble.n	3520 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    358e:	3708      	adds	r7, #8
    3590:	46bd      	mov	sp, r7
    3592:	bd80      	pop	{r7, pc}

00003594 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3594:	b480      	push	{r7}
    3596:	b085      	sub	sp, #20
    3598:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    359a:	2300      	movs	r3, #0
    359c:	60fb      	str	r3, [r7, #12]
    359e:	e0a1      	b.n	36e4 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35a0:	f640 120c 	movw	r2, #2316	; 0x90c
    35a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35a8:	68f9      	ldr	r1, [r7, #12]
    35aa:	460b      	mov	r3, r1
    35ac:	00db      	lsls	r3, r3, #3
    35ae:	1a5b      	subs	r3, r3, r1
    35b0:	00db      	lsls	r3, r3, #3
    35b2:	4413      	add	r3, r2
    35b4:	68fa      	ldr	r2, [r7, #12]
    35b6:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35b8:	f640 120c 	movw	r2, #2316	; 0x90c
    35bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35c0:	68f9      	ldr	r1, [r7, #12]
    35c2:	460b      	mov	r3, r1
    35c4:	00db      	lsls	r3, r3, #3
    35c6:	1a5b      	subs	r3, r3, r1
    35c8:	00db      	lsls	r3, r3, #3
    35ca:	4413      	add	r3, r2
    35cc:	3304      	adds	r3, #4
    35ce:	2202      	movs	r2, #2
    35d0:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35d2:	f640 120c 	movw	r2, #2316	; 0x90c
    35d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35da:	68f9      	ldr	r1, [r7, #12]
    35dc:	460b      	mov	r3, r1
    35de:	00db      	lsls	r3, r3, #3
    35e0:	1a5b      	subs	r3, r3, r1
    35e2:	00db      	lsls	r3, r3, #3
    35e4:	4413      	add	r3, r2
    35e6:	3308      	adds	r3, #8
    35e8:	2201      	movs	r2, #1
    35ea:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    35ec:	f640 120c 	movw	r2, #2316	; 0x90c
    35f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35f4:	68f9      	ldr	r1, [r7, #12]
    35f6:	460b      	mov	r3, r1
    35f8:	00db      	lsls	r3, r3, #3
    35fa:	1a5b      	subs	r3, r3, r1
    35fc:	00db      	lsls	r3, r3, #3
    35fe:	4413      	add	r3, r2
    3600:	330c      	adds	r3, #12
    3602:	2200      	movs	r2, #0
    3604:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3606:	f640 120c 	movw	r2, #2316	; 0x90c
    360a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    360e:	68f9      	ldr	r1, [r7, #12]
    3610:	460b      	mov	r3, r1
    3612:	00db      	lsls	r3, r3, #3
    3614:	1a5b      	subs	r3, r3, r1
    3616:	00db      	lsls	r3, r3, #3
    3618:	4413      	add	r3, r2
    361a:	3310      	adds	r3, #16
    361c:	2200      	movs	r2, #0
    361e:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3620:	f240 03c4 	movw	r3, #196	; 0xc4
    3624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3628:	68fa      	ldr	r2, [r7, #12]
    362a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    362e:	f640 120c 	movw	r2, #2316	; 0x90c
    3632:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3636:	68f9      	ldr	r1, [r7, #12]
    3638:	460b      	mov	r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	1a5b      	subs	r3, r3, r1
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	3324      	adds	r3, #36	; 0x24
    3644:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3646:	f240 4374 	movw	r3, #1140	; 0x474
    364a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364e:	68fa      	ldr	r2, [r7, #12]
    3650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3654:	f640 120c 	movw	r2, #2316	; 0x90c
    3658:	f2c2 0200 	movt	r2, #8192	; 0x2000
    365c:	68f9      	ldr	r1, [r7, #12]
    365e:	460b      	mov	r3, r1
    3660:	00db      	lsls	r3, r3, #3
    3662:	1a5b      	subs	r3, r3, r1
    3664:	00db      	lsls	r3, r3, #3
    3666:	4413      	add	r3, r2
    3668:	3328      	adds	r3, #40	; 0x28
    366a:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    366c:	f240 1380 	movw	r3, #384	; 0x180
    3670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3674:	68fa      	ldr	r2, [r7, #12]
    3676:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    367a:	f640 120c 	movw	r2, #2316	; 0x90c
    367e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3682:	68f9      	ldr	r1, [r7, #12]
    3684:	460b      	mov	r3, r1
    3686:	00db      	lsls	r3, r3, #3
    3688:	1a5b      	subs	r3, r3, r1
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	3330      	adds	r3, #48	; 0x30
    3690:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    3692:	f240 1380 	movw	r3, #384	; 0x180
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	68fa      	ldr	r2, [r7, #12]
    369c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36a0:	f240 0328 	movw	r3, #40	; 0x28
    36a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36ac:	f640 120c 	movw	r2, #2316	; 0x90c
    36b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b4:	68f9      	ldr	r1, [r7, #12]
    36b6:	460b      	mov	r3, r1
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	1a5b      	subs	r3, r3, r1
    36bc:	00db      	lsls	r3, r3, #3
    36be:	4413      	add	r3, r2
    36c0:	332c      	adds	r3, #44	; 0x2c
    36c2:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36c4:	f640 120c 	movw	r2, #2316	; 0x90c
    36c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36cc:	68f9      	ldr	r1, [r7, #12]
    36ce:	460b      	mov	r3, r1
    36d0:	00db      	lsls	r3, r3, #3
    36d2:	1a5b      	subs	r3, r3, r1
    36d4:	00db      	lsls	r3, r3, #3
    36d6:	4413      	add	r3, r2
    36d8:	3334      	adds	r3, #52	; 0x34
    36da:	2200      	movs	r2, #0
    36dc:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36de:	68fb      	ldr	r3, [r7, #12]
    36e0:	3301      	adds	r3, #1
    36e2:	60fb      	str	r3, [r7, #12]
    36e4:	68fb      	ldr	r3, [r7, #12]
    36e6:	2b2e      	cmp	r3, #46	; 0x2e
    36e8:	f77f af5a 	ble.w	35a0 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    36ec:	2300      	movs	r3, #0
    36ee:	60fb      	str	r3, [r7, #12]
    36f0:	e028      	b.n	3744 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    36f2:	f240 035c 	movw	r3, #92	; 0x5c
    36f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fa:	68fa      	ldr	r2, [r7, #12]
    36fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3700:	f640 120c 	movw	r2, #2316	; 0x90c
    3704:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3708:	460b      	mov	r3, r1
    370a:	00db      	lsls	r3, r3, #3
    370c:	1a5b      	subs	r3, r3, r1
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	3304      	adds	r3, #4
    3714:	2201      	movs	r2, #1
    3716:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3718:	f240 0390 	movw	r3, #144	; 0x90
    371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3720:	68fa      	ldr	r2, [r7, #12]
    3722:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3726:	f640 120c 	movw	r2, #2316	; 0x90c
    372a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    372e:	460b      	mov	r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	1a5b      	subs	r3, r3, r1
    3734:	00db      	lsls	r3, r3, #3
    3736:	4413      	add	r3, r2
    3738:	3304      	adds	r3, #4
    373a:	2203      	movs	r2, #3
    373c:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    373e:	68fb      	ldr	r3, [r7, #12]
    3740:	3301      	adds	r3, #1
    3742:	60fb      	str	r3, [r7, #12]
    3744:	68fb      	ldr	r3, [r7, #12]
    3746:	2b0c      	cmp	r3, #12
    3748:	ddd3      	ble.n	36f2 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    374a:	2300      	movs	r3, #0
    374c:	60fb      	str	r3, [r7, #12]
    374e:	e084      	b.n	385a <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3750:	f240 223c 	movw	r2, #572	; 0x23c
    3754:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3758:	68f9      	ldr	r1, [r7, #12]
    375a:	460b      	mov	r3, r1
    375c:	005b      	lsls	r3, r3, #1
    375e:	440b      	add	r3, r1
    3760:	009b      	lsls	r3, r3, #2
    3762:	4413      	add	r3, r2
    3764:	3304      	adds	r3, #4
    3766:	681b      	ldr	r3, [r3, #0]
    3768:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    376a:	f240 223c 	movw	r2, #572	; 0x23c
    376e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3772:	68f9      	ldr	r1, [r7, #12]
    3774:	460b      	mov	r3, r1
    3776:	005b      	lsls	r3, r3, #1
    3778:	440b      	add	r3, r1
    377a:	009b      	lsls	r3, r3, #2
    377c:	4413      	add	r3, r2
    377e:	3308      	adds	r3, #8
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3784:	f640 120c 	movw	r2, #2316	; 0x90c
    3788:	f2c2 0200 	movt	r2, #8192	; 0x2000
    378c:	68b9      	ldr	r1, [r7, #8]
    378e:	460b      	mov	r3, r1
    3790:	00db      	lsls	r3, r3, #3
    3792:	1a5b      	subs	r3, r3, r1
    3794:	00db      	lsls	r3, r3, #3
    3796:	4413      	add	r3, r2
    3798:	3310      	adds	r3, #16
    379a:	6818      	ldr	r0, [r3, #0]
    379c:	f640 120c 	movw	r2, #2316	; 0x90c
    37a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a4:	68b9      	ldr	r1, [r7, #8]
    37a6:	460b      	mov	r3, r1
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	1a5b      	subs	r3, r3, r1
    37ac:	005b      	lsls	r3, r3, #1
    37ae:	4403      	add	r3, r0
    37b0:	3306      	adds	r3, #6
    37b2:	009b      	lsls	r3, r3, #2
    37b4:	4413      	add	r3, r2
    37b6:	687a      	ldr	r2, [r7, #4]
    37b8:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37ba:	f640 120c 	movw	r2, #2316	; 0x90c
    37be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c2:	68b9      	ldr	r1, [r7, #8]
    37c4:	460b      	mov	r3, r1
    37c6:	00db      	lsls	r3, r3, #3
    37c8:	1a5b      	subs	r3, r3, r1
    37ca:	00db      	lsls	r3, r3, #3
    37cc:	4413      	add	r3, r2
    37ce:	3310      	adds	r3, #16
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	1c58      	adds	r0, r3, #1
    37d4:	f640 120c 	movw	r2, #2316	; 0x90c
    37d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37dc:	68b9      	ldr	r1, [r7, #8]
    37de:	460b      	mov	r3, r1
    37e0:	00db      	lsls	r3, r3, #3
    37e2:	1a5b      	subs	r3, r3, r1
    37e4:	00db      	lsls	r3, r3, #3
    37e6:	4413      	add	r3, r2
    37e8:	3310      	adds	r3, #16
    37ea:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    37ec:	f640 120c 	movw	r2, #2316	; 0x90c
    37f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f4:	6879      	ldr	r1, [r7, #4]
    37f6:	460b      	mov	r3, r1
    37f8:	00db      	lsls	r3, r3, #3
    37fa:	1a5b      	subs	r3, r3, r1
    37fc:	00db      	lsls	r3, r3, #3
    37fe:	4413      	add	r3, r2
    3800:	330c      	adds	r3, #12
    3802:	6818      	ldr	r0, [r3, #0]
    3804:	f640 120c 	movw	r2, #2316	; 0x90c
    3808:	f2c2 0200 	movt	r2, #8192	; 0x2000
    380c:	6879      	ldr	r1, [r7, #4]
    380e:	460b      	mov	r3, r1
    3810:	00db      	lsls	r3, r3, #3
    3812:	1a5b      	subs	r3, r3, r1
    3814:	005b      	lsls	r3, r3, #1
    3816:	4403      	add	r3, r0
    3818:	3304      	adds	r3, #4
    381a:	009b      	lsls	r3, r3, #2
    381c:	4413      	add	r3, r2
    381e:	68ba      	ldr	r2, [r7, #8]
    3820:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3822:	f640 120c 	movw	r2, #2316	; 0x90c
    3826:	f2c2 0200 	movt	r2, #8192	; 0x2000
    382a:	6879      	ldr	r1, [r7, #4]
    382c:	460b      	mov	r3, r1
    382e:	00db      	lsls	r3, r3, #3
    3830:	1a5b      	subs	r3, r3, r1
    3832:	00db      	lsls	r3, r3, #3
    3834:	4413      	add	r3, r2
    3836:	330c      	adds	r3, #12
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	1c58      	adds	r0, r3, #1
    383c:	f640 120c 	movw	r2, #2316	; 0x90c
    3840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3844:	6879      	ldr	r1, [r7, #4]
    3846:	460b      	mov	r3, r1
    3848:	00db      	lsls	r3, r3, #3
    384a:	1a5b      	subs	r3, r3, r1
    384c:	00db      	lsls	r3, r3, #3
    384e:	4413      	add	r3, r2
    3850:	330c      	adds	r3, #12
    3852:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3854:	68fb      	ldr	r3, [r7, #12]
    3856:	3301      	adds	r3, #1
    3858:	60fb      	str	r3, [r7, #12]
    385a:	f240 233c 	movw	r3, #572	; 0x23c
    385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	68fb      	ldr	r3, [r7, #12]
    3866:	429a      	cmp	r2, r3
    3868:	f73f af72 	bgt.w	3750 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    386c:	3714      	adds	r7, #20
    386e:	46bd      	mov	sp, r7
    3870:	f85d 7b04 	ldr.w	r7, [sp], #4
    3874:	4770      	bx	lr
    3876:	bf00      	nop

00003878 <vSensor>:

void vSensor( void * pvParameter )
{
    3878:	b580      	push	{r7, lr}
    387a:	b08c      	sub	sp, #48	; 0x30
    387c:	af02      	add	r7, sp, #8
    387e:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    3880:	f241 3354 	movw	r3, #4948	; 0x1354
    3884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3888:	685b      	ldr	r3, [r3, #4]
    388a:	4618      	mov	r0, r3
    388c:	2100      	movs	r1, #0
    388e:	f04f 32ff 	mov.w	r2, #4294967295
    3892:	2300      	movs	r3, #0
    3894:	f000 fe56 	bl	4544 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3898:	e058      	b.n	394c <vSensor+0xd4>
        {
            if(boolFlag == 0)
    389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    389c:	2b00      	cmp	r3, #0
    389e:	d100      	bne.n	38a2 <vSensor+0x2a>
                continue;
    38a0:	e054      	b.n	394c <vSensor+0xd4>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38a2:	f7ff fddf 	bl	3464 <pxEventGenericReceive>
    38a6:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38a8:	6a38      	ldr	r0, [r7, #32]
    38aa:	f7ff f87f 	bl	29ac <xEventGetpxDestination>
    38ae:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38b0:	6a38      	ldr	r0, [r7, #32]
    38b2:	f7ff f893 	bl	29dc <xEventGetxData>
    38b6:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38b8:	6a38      	ldr	r0, [r7, #32]
    38ba:	f7ff f883 	bl	29c4 <xEventGetxTag>
    38be:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38c0:	f640 120c 	movw	r2, #2316	; 0x90c
    38c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c8:	69f9      	ldr	r1, [r7, #28]
    38ca:	460b      	mov	r3, r1
    38cc:	00db      	lsls	r3, r3, #3
    38ce:	1a5b      	subs	r3, r3, r1
    38d0:	00db      	lsls	r3, r3, #3
    38d2:	4413      	add	r3, r2
    38d4:	3308      	adds	r3, #8
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	1c58      	adds	r0, r3, #1
    38da:	f640 120c 	movw	r2, #2316	; 0x90c
    38de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38e2:	69f9      	ldr	r1, [r7, #28]
    38e4:	460b      	mov	r3, r1
    38e6:	00db      	lsls	r3, r3, #3
    38e8:	1a5b      	subs	r3, r3, r1
    38ea:	00db      	lsls	r3, r3, #3
    38ec:	4413      	add	r3, r2
    38ee:	3308      	adds	r3, #8
    38f0:	6018      	str	r0, [r3, #0]
            xDeadline= xEventGetxDeadline( pxEvent ); 
    38f2:	6a38      	ldr	r0, [r7, #32]
    38f4:	f7ff f842 	bl	297c <xEventGetxDeadline>
    38f8:	6138      	str	r0, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    38fa:	697b      	ldr	r3, [r7, #20]
    38fc:	685b      	ldr	r3, [r3, #4]
    38fe:	3303      	adds	r3, #3
    3900:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3902:	f240 635c 	movw	r3, #1628	; 0x65c
    3906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    390a:	68fa      	ldr	r2, [r7, #12]
    390c:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    390e:	69f8      	ldr	r0, [r7, #28]
    3910:	f013 fe12 	bl	17538 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3914:	f001 fcca 	bl	52ac <xTaskGetTickCount>
    3918:	4603      	mov	r3, r0
    391a:	4618      	mov	r0, r3
    391c:	f013 fe0c 	bl	17538 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3920:	f640 120c 	movw	r2, #2316	; 0x90c
    3924:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3928:	69f9      	ldr	r1, [r7, #28]
    392a:	460b      	mov	r3, r1
    392c:	00db      	lsls	r3, r3, #3
    392e:	1a5b      	subs	r3, r3, r1
    3930:	00db      	lsls	r3, r3, #3
    3932:	4413      	add	r3, r2
    3934:	3328      	adds	r3, #40	; 0x28
    3936:	681b      	ldr	r3, [r3, #0]
    3938:	69b8      	ldr	r0, [r7, #24]
    393a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    393c:	69bb      	ldr	r3, [r7, #24]
    393e:	9300      	str	r3, [sp, #0]
    3940:	6a38      	ldr	r0, [r7, #32]
    3942:	69f9      	ldr	r1, [r7, #28]
    3944:	693a      	ldr	r2, [r7, #16]
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	f7ff fdaa 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    394c:	f7fe ffdc 	bl	2908 <xIsERLNull>
    3950:	6278      	str	r0, [r7, #36]	; 0x24
    3952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3954:	f1b3 3fff 	cmp.w	r3, #4294967295
    3958:	d19f      	bne.n	389a <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    395a:	f241 3354 	movw	r3, #4948	; 0x1354
    395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	4618      	mov	r0, r3
    3966:	2100      	movs	r1, #0
    3968:	2200      	movs	r2, #0
    396a:	2300      	movs	r3, #0
    396c:	f000 fd24 	bl	43b8 <xQueueGenericSend>
    }
    3970:	e786      	b.n	3880 <vSensor+0x8>
    3972:	bf00      	nop

00003974 <vServant>:
}

void vServant( void * pvParameter )
{
    3974:	b580      	push	{r7, lr}
    3976:	b08c      	sub	sp, #48	; 0x30
    3978:	af02      	add	r7, sp, #8
    397a:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    397c:	f241 3354 	movw	r3, #4948	; 0x1354
    3980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3984:	689b      	ldr	r3, [r3, #8]
    3986:	4618      	mov	r0, r3
    3988:	2100      	movs	r1, #0
    398a:	f04f 32ff 	mov.w	r2, #4294967295
    398e:	2300      	movs	r3, #0
    3990:	f000 fdd8 	bl	4544 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3994:	e074      	b.n	3a80 <vServant+0x10c>
        {
            if(boolFlag == 0)
    3996:	6a3b      	ldr	r3, [r7, #32]
    3998:	2b00      	cmp	r3, #0
    399a:	d100      	bne.n	399e <vServant+0x2a>
                continue;
    399c:	e070      	b.n	3a80 <vServant+0x10c>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    399e:	f7ff fd61 	bl	3464 <pxEventGenericReceive>
    39a2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39a4:	69f8      	ldr	r0, [r7, #28]
    39a6:	f7ff f801 	bl	29ac <xEventGetpxDestination>
    39aa:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39ac:	69f8      	ldr	r0, [r7, #28]
    39ae:	f7ff f815 	bl	29dc <xEventGetxData>
    39b2:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39b4:	69f8      	ldr	r0, [r7, #28]
    39b6:	f7ff f805 	bl	29c4 <xEventGetxTag>
    39ba:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    39bc:	f640 120c 	movw	r2, #2316	; 0x90c
    39c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39c4:	69b9      	ldr	r1, [r7, #24]
    39c6:	460b      	mov	r3, r1
    39c8:	00db      	lsls	r3, r3, #3
    39ca:	1a5b      	subs	r3, r3, r1
    39cc:	00db      	lsls	r3, r3, #3
    39ce:	4413      	add	r3, r2
    39d0:	3308      	adds	r3, #8
    39d2:	681b      	ldr	r3, [r3, #0]
    39d4:	1c58      	adds	r0, r3, #1
    39d6:	f640 120c 	movw	r2, #2316	; 0x90c
    39da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39de:	69b9      	ldr	r1, [r7, #24]
    39e0:	460b      	mov	r3, r1
    39e2:	00db      	lsls	r3, r3, #3
    39e4:	1a5b      	subs	r3, r3, r1
    39e6:	00db      	lsls	r3, r3, #3
    39e8:	4413      	add	r3, r2
    39ea:	3308      	adds	r3, #8
    39ec:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ); 
    39ee:	69f8      	ldr	r0, [r7, #28]
    39f0:	f7fe ffc4 	bl	297c <xEventGetxDeadline>
    39f4:	60f8      	str	r0, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    39f6:	f640 120c 	movw	r2, #2316	; 0x90c
    39fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39fe:	69b9      	ldr	r1, [r7, #24]
    3a00:	460b      	mov	r3, r1
    3a02:	00db      	lsls	r3, r3, #3
    3a04:	1a5b      	subs	r3, r3, r1
    3a06:	00db      	lsls	r3, r3, #3
    3a08:	4413      	add	r3, r2
    3a0a:	331c      	adds	r3, #28
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a10:	f640 120c 	movw	r2, #2316	; 0x90c
    3a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a18:	68b9      	ldr	r1, [r7, #8]
    3a1a:	460b      	mov	r3, r1
    3a1c:	00db      	lsls	r3, r3, #3
    3a1e:	1a5b      	subs	r3, r3, r1
    3a20:	00db      	lsls	r3, r3, #3
    3a22:	4413      	add	r3, r2
    3a24:	3304      	adds	r3, #4
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	2b02      	cmp	r3, #2
    3a2a:	d002      	beq.n	3a32 <vServant+0xbe>
    3a2c:	2b03      	cmp	r3, #3
    3a2e:	d004      	beq.n	3a3a <vServant+0xc6>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3a30:	e007      	b.n	3a42 <vServant+0xce>
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    //xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
                    xTimestamp = xTaskGetTickCount();
    3a32:	f001 fc3b 	bl	52ac <xTaskGetTickCount>
    3a36:	6278      	str	r0, [r7, #36]	; 0x24
                    break;
    3a38:	e003      	b.n	3a42 <vServant+0xce>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3a3a:	68fb      	ldr	r3, [r7, #12]
    3a3c:	3b03      	subs	r3, #3
    3a3e:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a40:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3a42:	69b8      	ldr	r0, [r7, #24]
    3a44:	f013 fd78 	bl	17538 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3a48:	f001 fc30 	bl	52ac <xTaskGetTickCount>
    3a4c:	4603      	mov	r3, r0
    3a4e:	4618      	mov	r0, r3
    3a50:	f013 fd72 	bl	17538 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3a54:	f640 120c 	movw	r2, #2316	; 0x90c
    3a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a5c:	69b9      	ldr	r1, [r7, #24]
    3a5e:	460b      	mov	r3, r1
    3a60:	00db      	lsls	r3, r3, #3
    3a62:	1a5b      	subs	r3, r3, r1
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	4413      	add	r3, r2
    3a68:	3328      	adds	r3, #40	; 0x28
    3a6a:	681b      	ldr	r3, [r3, #0]
    3a6c:	6978      	ldr	r0, [r7, #20]
    3a6e:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3a70:	697b      	ldr	r3, [r7, #20]
    3a72:	9300      	str	r3, [sp, #0]
    3a74:	69f8      	ldr	r0, [r7, #28]
    3a76:	69b9      	ldr	r1, [r7, #24]
    3a78:	68fa      	ldr	r2, [r7, #12]
    3a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a7c:	f7ff fd10 	bl	34a0 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3a80:	f7fe ff42 	bl	2908 <xIsERLNull>
    3a84:	6238      	str	r0, [r7, #32]
    3a86:	6a3b      	ldr	r3, [r7, #32]
    3a88:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a8c:	d183      	bne.n	3996 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3a8e:	f241 3354 	movw	r3, #4948	; 0x1354
    3a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	4618      	mov	r0, r3
    3a9a:	2100      	movs	r1, #0
    3a9c:	2200      	movs	r2, #0
    3a9e:	2300      	movs	r3, #0
    3aa0:	f000 fc8a 	bl	43b8 <xQueueGenericSend>
    }
    3aa4:	e76a      	b.n	397c <vServant+0x8>
    3aa6:	bf00      	nop

00003aa8 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b08c      	sub	sp, #48	; 0x30
    3aac:	af02      	add	r7, sp, #8
    3aae:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3ab0:	f241 3354 	movw	r3, #4948	; 0x1354
    3ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab8:	68db      	ldr	r3, [r3, #12]
    3aba:	4618      	mov	r0, r3
    3abc:	2100      	movs	r1, #0
    3abe:	f04f 32ff 	mov.w	r2, #4294967295
    3ac2:	2300      	movs	r3, #0
    3ac4:	f000 fd3e 	bl	4544 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3ac8:	e05f      	b.n	3b8a <vActuator+0xe2>
        {
            if(boolFlag == 0)
    3aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3acc:	2b00      	cmp	r3, #0
    3ace:	d100      	bne.n	3ad2 <vActuator+0x2a>
                continue;
    3ad0:	e05b      	b.n	3b8a <vActuator+0xe2>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3ad2:	f7ff fcc7 	bl	3464 <pxEventGenericReceive>
    3ad6:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3ad8:	6a38      	ldr	r0, [r7, #32]
    3ada:	f7fe ff67 	bl	29ac <xEventGetpxDestination>
    3ade:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3ae0:	6a38      	ldr	r0, [r7, #32]
    3ae2:	f7fe ff7b 	bl	29dc <xEventGetxData>
    3ae6:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3ae8:	6a38      	ldr	r0, [r7, #32]
    3aea:	f7fe ff6b 	bl	29c4 <xEventGetxTag>
    3aee:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3af0:	f640 120c 	movw	r2, #2316	; 0x90c
    3af4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af8:	69f9      	ldr	r1, [r7, #28]
    3afa:	460b      	mov	r3, r1
    3afc:	00db      	lsls	r3, r3, #3
    3afe:	1a5b      	subs	r3, r3, r1
    3b00:	00db      	lsls	r3, r3, #3
    3b02:	4413      	add	r3, r2
    3b04:	3308      	adds	r3, #8
    3b06:	681b      	ldr	r3, [r3, #0]
    3b08:	1c58      	adds	r0, r3, #1
    3b0a:	f640 120c 	movw	r2, #2316	; 0x90c
    3b0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b12:	69f9      	ldr	r1, [r7, #28]
    3b14:	460b      	mov	r3, r1
    3b16:	00db      	lsls	r3, r3, #3
    3b18:	1a5b      	subs	r3, r3, r1
    3b1a:	00db      	lsls	r3, r3, #3
    3b1c:	4413      	add	r3, r2
    3b1e:	3308      	adds	r3, #8
    3b20:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ) + xContexts[xMyFlag].xPeriod; 
    3b22:	6a38      	ldr	r0, [r7, #32]
    3b24:	f7fe ff2a 	bl	297c <xEventGetxDeadline>
    3b28:	f640 120c 	movw	r2, #2316	; 0x90c
    3b2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b30:	69f9      	ldr	r1, [r7, #28]
    3b32:	460b      	mov	r3, r1
    3b34:	00db      	lsls	r3, r3, #3
    3b36:	1a5b      	subs	r3, r3, r1
    3b38:	00db      	lsls	r3, r3, #3
    3b3a:	4413      	add	r3, r2
    3b3c:	332c      	adds	r3, #44	; 0x2c
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	4403      	add	r3, r0
    3b42:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b44:	697b      	ldr	r3, [r7, #20]
    3b46:	685b      	ldr	r3, [r3, #4]
    3b48:	3303      	adds	r3, #3
    3b4a:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3b4c:	69f8      	ldr	r0, [r7, #28]
    3b4e:	f013 fcf3 	bl	17538 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b52:	f001 fbab 	bl	52ac <xTaskGetTickCount>
    3b56:	4603      	mov	r3, r0
    3b58:	4618      	mov	r0, r3
    3b5a:	f013 fced 	bl	17538 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3b5e:	f640 120c 	movw	r2, #2316	; 0x90c
    3b62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b66:	69f9      	ldr	r1, [r7, #28]
    3b68:	460b      	mov	r3, r1
    3b6a:	00db      	lsls	r3, r3, #3
    3b6c:	1a5b      	subs	r3, r3, r1
    3b6e:	00db      	lsls	r3, r3, #3
    3b70:	4413      	add	r3, r2
    3b72:	3328      	adds	r3, #40	; 0x28
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	69b8      	ldr	r0, [r7, #24]
    3b78:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3b7a:	69bb      	ldr	r3, [r7, #24]
    3b7c:	9300      	str	r3, [sp, #0]
    3b7e:	6a38      	ldr	r0, [r7, #32]
    3b80:	69f9      	ldr	r1, [r7, #28]
    3b82:	693a      	ldr	r2, [r7, #16]
    3b84:	68fb      	ldr	r3, [r7, #12]
    3b86:	f7ff fc8b 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b8a:	f7fe febd 	bl	2908 <xIsERLNull>
    3b8e:	6278      	str	r0, [r7, #36]	; 0x24
    3b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b92:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b96:	d198      	bne.n	3aca <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b98:	f241 3354 	movw	r3, #4948	; 0x1354
    3b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	4618      	mov	r0, r3
    3ba4:	2100      	movs	r1, #0
    3ba6:	2200      	movs	r2, #0
    3ba8:	2300      	movs	r3, #0
    3baa:	f000 fc05 	bl	43b8 <xQueueGenericSend>
    }
    3bae:	e77f      	b.n	3ab0 <vActuator+0x8>

00003bb0 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3bb0:	b580      	push	{r7, lr}
    3bb2:	b084      	sub	sp, #16
    3bb4:	af00      	add	r7, sp, #0
    3bb6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3bb8:	f241 3354 	movw	r3, #4948	; 0x1354
    3bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bc0:	681b      	ldr	r3, [r3, #0]
    3bc2:	4618      	mov	r0, r3
    3bc4:	2100      	movs	r1, #0
    3bc6:	f04f 32ff 	mov.w	r2, #4294967295
    3bca:	2300      	movs	r3, #0
    3bcc:	f000 fcba 	bl	4544 <xQueueGenericReceive>
        vPrintString("R-Servant\n\r");
    3bd0:	f648 201c 	movw	r0, #35356	; 0x8a1c
    3bd4:	f2c0 0001 	movt	r0, #1
    3bd8:	f013 fc94 	bl	17504 <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3bdc:	f7ff f8ca 	bl	2d74 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3be0:	f7ff f9f4 	bl	2fcc <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3be4:	f7ff fbc2 	bl	336c <xEventGenericSerialize>
    3be8:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3bea:	68fb      	ldr	r3, [r7, #12]
    3bec:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bf0:	d036      	beq.n	3c60 <vR_Servant+0xb0>
        {
            switch(xContexts[pxDestination].xType)
    3bf2:	f640 120c 	movw	r2, #2316	; 0x90c
    3bf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bfa:	68f9      	ldr	r1, [r7, #12]
    3bfc:	460b      	mov	r3, r1
    3bfe:	00db      	lsls	r3, r3, #3
    3c00:	1a5b      	subs	r3, r3, r1
    3c02:	00db      	lsls	r3, r3, #3
    3c04:	4413      	add	r3, r2
    3c06:	3304      	adds	r3, #4
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	2b02      	cmp	r3, #2
    3c0c:	d010      	beq.n	3c30 <vR_Servant+0x80>
    3c0e:	2b03      	cmp	r3, #3
    3c10:	d01a      	beq.n	3c48 <vR_Servant+0x98>
    3c12:	2b01      	cmp	r3, #1
    3c14:	d000      	beq.n	3c18 <vR_Servant+0x68>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3c16:	e023      	b.n	3c60 <vR_Servant+0xb0>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3c18:	f241 3354 	movw	r3, #4948	; 0x1354
    3c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c20:	685b      	ldr	r3, [r3, #4]
    3c22:	4618      	mov	r0, r3
    3c24:	2100      	movs	r1, #0
    3c26:	2200      	movs	r2, #0
    3c28:	2300      	movs	r3, #0
    3c2a:	f000 fbc5 	bl	43b8 <xQueueGenericSend>
                    break;
    3c2e:	e017      	b.n	3c60 <vR_Servant+0xb0>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3c30:	f241 3354 	movw	r3, #4948	; 0x1354
    3c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c38:	689b      	ldr	r3, [r3, #8]
    3c3a:	4618      	mov	r0, r3
    3c3c:	2100      	movs	r1, #0
    3c3e:	2200      	movs	r2, #0
    3c40:	2300      	movs	r3, #0
    3c42:	f000 fbb9 	bl	43b8 <xQueueGenericSend>
                    break;
    3c46:	e00b      	b.n	3c60 <vR_Servant+0xb0>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3c48:	f241 3354 	movw	r3, #4948	; 0x1354
    3c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c50:	68db      	ldr	r3, [r3, #12]
    3c52:	4618      	mov	r0, r3
    3c54:	2100      	movs	r1, #0
    3c56:	2200      	movs	r2, #0
    3c58:	2300      	movs	r3, #0
    3c5a:	f000 fbad 	bl	43b8 <xQueueGenericSend>
                    break;
    3c5e:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3c60:	e7aa      	b.n	3bb8 <vR_Servant+0x8>
    3c62:	bf00      	nop

00003c64 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3c64:	b480      	push	{r7}
    3c66:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3c68:	f242 032f 	movw	r3, #8239	; 0x202f
    3c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c70:	2200      	movs	r2, #0
    3c72:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3c74:	f242 032e 	movw	r3, #8238	; 0x202e
    3c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c7c:	2201      	movs	r2, #1
    3c7e:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3c80:	f242 0325 	movw	r3, #8229	; 0x2025
    3c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c88:	2207      	movs	r2, #7
    3c8a:	701a      	strb	r2, [r3, #0]
}
    3c8c:	46bd      	mov	sp, r7
    3c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c92:	4770      	bx	lr

00003c94 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3c94:	b580      	push	{r7, lr}
    3c96:	af00      	add	r7, sp, #0
    timer_init();
    3c98:	f7ff ffe4 	bl	3c64 <timer_init>
    modem_init();
    3c9c:	f00d f940 	bl	10f20 <modem_init>
    adc_init();
    3ca0:	f00d fc8a 	bl	115b8 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3ca4:	f00d fbfc 	bl	114a0 <spi_init>
    link_fbw_init();
    3ca8:	f00d fa58 	bl	1115c <link_fbw_init>
    gps_init();
    3cac:	f00d fd34 	bl	11718 <gps_init>
    nav_init();
    3cb0:	f011 f82c 	bl	14d0c <nav_init>
    ir_init();
    3cb4:	f00d ffd8 	bl	11c68 <ir_init>
    estimator_init();
    3cb8:	f011 fa0e 	bl	150d8 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3cbc:	bd80      	pop	{r7, pc}
    3cbe:	bf00      	nop

00003cc0 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3cc0:	b480      	push	{r7}
    3cc2:	b083      	sub	sp, #12
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3cc8:	370c      	adds	r7, #12
    3cca:	46bd      	mov	sp, r7
    3ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd0:	4770      	bx	lr
    3cd2:	bf00      	nop

00003cd4 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b082      	sub	sp, #8
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3cdc:	f012 f9d8 	bl	16090 <last_radio_from_ppm>
}
    3ce0:	3708      	adds	r7, #8
    3ce2:	46bd      	mov	sp, r7
    3ce4:	bd80      	pop	{r7, pc}
    3ce6:	bf00      	nop

00003ce8 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3ce8:	b480      	push	{r7}
    3cea:	b083      	sub	sp, #12
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3cf0:	370c      	adds	r7, #12
    3cf2:	46bd      	mov	sp, r7
    3cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop

00003cfc <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3cfc:	b480      	push	{r7}
    3cfe:	b083      	sub	sp, #12
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
}
    3d04:	370c      	adds	r7, #12
    3d06:	46bd      	mov	sp, r7
    3d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0c:	4770      	bx	lr
    3d0e:	bf00      	nop

00003d10 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
}
    3d18:	370c      	adds	r7, #12
    3d1a:	46bd      	mov	sp, r7
    3d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop

00003d24 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d2c:	f012 fd6a 	bl	16804 <to_autopilot_from_last_radio>
}
    3d30:	3708      	adds	r7, #8
    3d32:	46bd      	mov	sp, r7
    3d34:	bd80      	pop	{r7, pc}
    3d36:	bf00      	nop

00003d38 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d40:	f012 fc9e 	bl	16680 <spi_reset>
}
    3d44:	3708      	adds	r7, #8
    3d46:	46bd      	mov	sp, r7
    3d48:	bd80      	pop	{r7, pc}
    3d4a:	bf00      	nop

00003d4c <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d4c:	b480      	push	{r7}
    3d4e:	b083      	sub	sp, #12
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
}
    3d54:	370c      	adds	r7, #12
    3d56:	46bd      	mov	sp, r7
    3d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop

00003d60 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
}
    3d68:	370c      	adds	r7, #12
    3d6a:	46bd      	mov	sp, r7
    3d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3d7c:	f012 fee6 	bl	16b4c <check_mega128_values_task>
}
    3d80:	3708      	adds	r7, #8
    3d82:	46bd      	mov	sp, r7
    3d84:	bd80      	pop	{r7, pc}
    3d86:	bf00      	nop

00003d88 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
}
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop

00003db0 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3db8:	f012 ffbc 	bl	16d34 <servo_transmit>
}
    3dbc:	3708      	adds	r7, #8
    3dbe:	46bd      	mov	sp, r7
    3dc0:	bd80      	pop	{r7, pc}
    3dc2:	bf00      	nop

00003dc4 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
}
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop

00003dd8 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
}
    3de0:	370c      	adds	r7, #12
    3de2:	46bd      	mov	sp, r7
    3de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de8:	4770      	bx	lr
    3dea:	bf00      	nop

00003dec <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b082      	sub	sp, #8
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3df4:	f012 fe84 	bl	16b00 <check_failsafe_task>
}
    3df8:	3708      	adds	r7, #8
    3dfa:	46bd      	mov	sp, r7
    3dfc:	bd80      	pop	{r7, pc}
    3dfe:	bf00      	nop

00003e00 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
}
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop

00003e14 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
}
    3e1c:	370c      	adds	r7, #12
    3e1e:	46bd      	mov	sp, r7
    3e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop

00003e28 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b082      	sub	sp, #8
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e30:	f009 f8b8 	bl	cfa4 <radio_control_task>
}
    3e34:	3708      	adds	r7, #8
    3e36:	46bd      	mov	sp, r7
    3e38:	bd80      	pop	{r7, pc}
    3e3a:	bf00      	nop

00003e3c <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e44:	f00d ff68 	bl	11d18 <ir_gain_calib>
}
    3e48:	3708      	adds	r7, #8
    3e4a:	46bd      	mov	sp, r7
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	bf00      	nop

00003e50 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e50:	b480      	push	{r7}
    3e52:	b083      	sub	sp, #12
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
}
    3e58:	370c      	adds	r7, #12
    3e5a:	46bd      	mov	sp, r7
    3e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e60:	4770      	bx	lr
    3e62:	bf00      	nop

00003e64 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3e64:	b480      	push	{r7}
    3e66:	b083      	sub	sp, #12
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
}
    3e6c:	370c      	adds	r7, #12
    3e6e:	46bd      	mov	sp, r7
    3e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop

00003e78 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3e78:	b580      	push	{r7, lr}
    3e7a:	b082      	sub	sp, #8
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3e80:	f00d ff0c 	bl	11c9c <ir_update>
}
    3e84:	3708      	adds	r7, #8
    3e86:	46bd      	mov	sp, r7
    3e88:	bd80      	pop	{r7, pc}
    3e8a:	bf00      	nop

00003e8c <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3e94:	f011 f98a 	bl	151ac <estimator_update_state_infrared>
}
    3e98:	3708      	adds	r7, #8
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	bf00      	nop

00003ea0 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ea8:	f00d ff66 	bl	11d78 <roll_pitch_pid_run>
}
    3eac:	3708      	adds	r7, #8
    3eae:	46bd      	mov	sp, r7
    3eb0:	bd80      	pop	{r7, pc}
    3eb2:	bf00      	nop

00003eb4 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
}
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop

00003ec8 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
}
    3ed0:	370c      	adds	r7, #12
    3ed2:	46bd      	mov	sp, r7
    3ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop

00003edc <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3ee4:	f00d f94c 	bl	11180 <link_fbw_send>
}
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop

00003ef0 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    3ef8:	370c      	adds	r7, #12
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
}
    3f0c:	370c      	adds	r7, #12
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f20:	f00d fc06 	bl	11730 <parse_gps_msg>
}
    3f24:	3708      	adds	r7, #8
    3f26:	46bd      	mov	sp, r7
    3f28:	bd80      	pop	{r7, pc}
    3f2a:	bf00      	nop

00003f2c <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f34:	f00a fe24 	bl	eb80 <send_gps_pos>
    send_radIR();
    3f38:	f00b ffe8 	bl	ff0c <send_radIR>
    send_takeOff();
    3f3c:	f00c fde0 	bl	10b00 <send_takeOff>
}
    3f40:	3708      	adds	r7, #8
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop

00003f48 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f48:	b480      	push	{r7}
    3f4a:	b083      	sub	sp, #12
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	370c      	adds	r7, #12
    3f52:	46bd      	mov	sp, r7
    3f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop

00003f5c <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3f5c:	b480      	push	{r7}
    3f5e:	b083      	sub	sp, #12
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
}
    3f64:	370c      	adds	r7, #12
    3f66:	46bd      	mov	sp, r7
    3f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f6c:	4770      	bx	lr
    3f6e:	bf00      	nop

00003f70 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3f78:	f010 fe9a 	bl	14cb0 <nav_home>
}
    3f7c:	3708      	adds	r7, #8
    3f7e:	46bd      	mov	sp, r7
    3f80:	bd80      	pop	{r7, pc}
    3f82:	bf00      	nop

00003f84 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3f84:	b580      	push	{r7, lr}
    3f86:	b082      	sub	sp, #8
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3f8c:	f010 feb6 	bl	14cfc <nav_update>
}
    3f90:	3708      	adds	r7, #8
    3f92:	46bd      	mov	sp, r7
    3f94:	bd80      	pop	{r7, pc}
    3f96:	bf00      	nop

00003f98 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3fa0:	f00d ffd6 	bl	11f50 <course_pid_run>
}
    3fa4:	3708      	adds	r7, #8
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop

00003fac <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3fac:	b480      	push	{r7}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	370c      	adds	r7, #12
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr
    3fbe:	bf00      	nop

00003fc0 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    3fc0:	b480      	push	{r7}
    3fc2:	b083      	sub	sp, #12
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
}
    3fc8:	370c      	adds	r7, #12
    3fca:	46bd      	mov	sp, r7
    3fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd0:	4770      	bx	lr
    3fd2:	bf00      	nop

00003fd4 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    3fdc:	f00e fa40 	bl	12460 <altitude_pid_run>
}
    3fe0:	3708      	adds	r7, #8
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	bf00      	nop

00003fe8 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    3ffc:	b480      	push	{r7}
    3ffe:	b083      	sub	sp, #12
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
}
    4004:	370c      	adds	r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	f85d 7b04 	ldr.w	r7, [sp], #4
    400c:	4770      	bx	lr
    400e:	bf00      	nop

00004010 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4010:	b580      	push	{r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4018:	f00e f852 	bl	120c0 <climb_pid_run>
}
    401c:	3708      	adds	r7, #8
    401e:	46bd      	mov	sp, r7
    4020:	bd80      	pop	{r7, pc}
    4022:	bf00      	nop

00004024 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4024:	b480      	push	{r7}
    4026:	b083      	sub	sp, #12
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    402c:	370c      	adds	r7, #12
    402e:	46bd      	mov	sp, r7
    4030:	f85d 7b04 	ldr.w	r7, [sp], #4
    4034:	4770      	bx	lr
    4036:	bf00      	nop

00004038 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4038:	b480      	push	{r7}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
}
    4040:	370c      	adds	r7, #12
    4042:	46bd      	mov	sp, r7
    4044:	f85d 7b04 	ldr.w	r7, [sp], #4
    4048:	4770      	bx	lr
    404a:	bf00      	nop

0000404c <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    4054:	f003 fa1e 	bl	7494 <send_boot>
    send_attitude();
    4058:	f004 f9f4 	bl	8444 <send_attitude>
    send_adc();
    405c:	f004 feee 	bl	8e3c <send_adc>
    send_settings();
    4060:	f005 f97c 	bl	935c <send_settings>
    send_desired();
    4064:	f005 fd86 	bl	9b74 <send_desired>
    send_bat();
    4068:	f006 fcbc 	bl	a9e4 <send_bat>
    send_climb();
    406c:	f007 f878 	bl	b160 <send_climb>
    send_mode();
    4070:	f007 fdf0 	bl	bc54 <send_mode>
    send_debug();
    4074:	f008 f8ca 	bl	c20c <send_debug>
    send_nav_ref();
    4078:	f008 fba6 	bl	c7c8 <send_nav_ref>
}
    407c:	3708      	adds	r7, #8
    407e:	46bd      	mov	sp, r7
    4080:	bd80      	pop	{r7, pc}
    4082:	bf00      	nop

00004084 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4084:	b480      	push	{r7}
    4086:	b083      	sub	sp, #12
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	370c      	adds	r7, #12
    408e:	46bd      	mov	sp, r7
    4090:	f85d 7b04 	ldr.w	r7, [sp], #4
    4094:	4770      	bx	lr
    4096:	bf00      	nop

00004098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4098:	b480      	push	{r7}
    409a:	b083      	sub	sp, #12
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	f103 0208 	add.w	r2, r3, #8
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	f04f 32ff 	mov.w	r2, #4294967295
    40b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	f103 0208 	add.w	r2, r3, #8
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	f103 0208 	add.w	r2, r3, #8
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	2200      	movs	r2, #0
    40ca:	601a      	str	r2, [r3, #0]
}
    40cc:	370c      	adds	r7, #12
    40ce:	46bd      	mov	sp, r7
    40d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop

000040d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	2200      	movs	r2, #0
    40e4:	611a      	str	r2, [r3, #16]
}
    40e6:	370c      	adds	r7, #12
    40e8:	46bd      	mov	sp, r7
    40ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ee:	4770      	bx	lr

000040f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    40f0:	b480      	push	{r7}
    40f2:	b085      	sub	sp, #20
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
    40f8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	685b      	ldr	r3, [r3, #4]
    40fe:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	685a      	ldr	r2, [r3, #4]
    4104:	683b      	ldr	r3, [r7, #0]
    4106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	685a      	ldr	r2, [r3, #4]
    410c:	683b      	ldr	r3, [r7, #0]
    410e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4110:	68fb      	ldr	r3, [r7, #12]
    4112:	685b      	ldr	r3, [r3, #4]
    4114:	683a      	ldr	r2, [r7, #0]
    4116:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4118:	68fb      	ldr	r3, [r7, #12]
    411a:	683a      	ldr	r2, [r7, #0]
    411c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	683a      	ldr	r2, [r7, #0]
    4122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	687a      	ldr	r2, [r7, #4]
    4128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	1c5a      	adds	r2, r3, #1
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	601a      	str	r2, [r3, #0]
}
    4134:	3714      	adds	r7, #20
    4136:	46bd      	mov	sp, r7
    4138:	f85d 7b04 	ldr.w	r7, [sp], #4
    413c:	4770      	bx	lr
    413e:	bf00      	nop

00004140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4140:	b480      	push	{r7}
    4142:	b085      	sub	sp, #20
    4144:	af00      	add	r7, sp, #0
    4146:	6078      	str	r0, [r7, #4]
    4148:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	681b      	ldr	r3, [r3, #0]
    414e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4150:	68bb      	ldr	r3, [r7, #8]
    4152:	f1b3 3fff 	cmp.w	r3, #4294967295
    4156:	d103      	bne.n	4160 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	691b      	ldr	r3, [r3, #16]
    415c:	60fb      	str	r3, [r7, #12]
    415e:	e00c      	b.n	417a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	3308      	adds	r3, #8
    4164:	60fb      	str	r3, [r7, #12]
    4166:	e002      	b.n	416e <vListInsert+0x2e>
    4168:	68fb      	ldr	r3, [r7, #12]
    416a:	685b      	ldr	r3, [r3, #4]
    416c:	60fb      	str	r3, [r7, #12]
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	685b      	ldr	r3, [r3, #4]
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	68bb      	ldr	r3, [r7, #8]
    4176:	429a      	cmp	r2, r3
    4178:	d9f6      	bls.n	4168 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    417a:	68fb      	ldr	r3, [r7, #12]
    417c:	685a      	ldr	r2, [r3, #4]
    417e:	683b      	ldr	r3, [r7, #0]
    4180:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4182:	683b      	ldr	r3, [r7, #0]
    4184:	685b      	ldr	r3, [r3, #4]
    4186:	683a      	ldr	r2, [r7, #0]
    4188:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    418a:	683b      	ldr	r3, [r7, #0]
    418c:	68fa      	ldr	r2, [r7, #12]
    418e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	683a      	ldr	r2, [r7, #0]
    4194:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4196:	683b      	ldr	r3, [r7, #0]
    4198:	687a      	ldr	r2, [r7, #4]
    419a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	1c5a      	adds	r2, r3, #1
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	601a      	str	r2, [r3, #0]
}
    41a6:	3714      	adds	r7, #20
    41a8:	46bd      	mov	sp, r7
    41aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ae:	4770      	bx	lr

000041b0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    41b0:	b480      	push	{r7}
    41b2:	b085      	sub	sp, #20
    41b4:	af00      	add	r7, sp, #0
    41b6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	685b      	ldr	r3, [r3, #4]
    41bc:	687a      	ldr	r2, [r7, #4]
    41be:	6892      	ldr	r2, [r2, #8]
    41c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	689b      	ldr	r3, [r3, #8]
    41c6:	687a      	ldr	r2, [r7, #4]
    41c8:	6852      	ldr	r2, [r2, #4]
    41ca:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	691b      	ldr	r3, [r3, #16]
    41d0:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    41d2:	68fb      	ldr	r3, [r7, #12]
    41d4:	685a      	ldr	r2, [r3, #4]
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	429a      	cmp	r2, r3
    41da:	d103      	bne.n	41e4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	689a      	ldr	r2, [r3, #8]
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	2200      	movs	r2, #0
    41e8:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    41ea:	68fb      	ldr	r3, [r7, #12]
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	1e5a      	subs	r2, r3, #1
    41f0:	68fb      	ldr	r3, [r7, #12]
    41f2:	601a      	str	r2, [r3, #0]
}
    41f4:	3714      	adds	r7, #20
    41f6:	46bd      	mov	sp, r7
    41f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fc:	4770      	bx	lr
    41fe:	bf00      	nop

00004200 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4200:	b580      	push	{r7, lr}
    4202:	b084      	sub	sp, #16
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
    4208:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    420a:	2301      	movs	r3, #1
    420c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	2b01      	cmp	r3, #1
    4212:	d00b      	beq.n	422c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4218:	2b00      	cmp	r3, #0
    421a:	d001      	beq.n	4220 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    421c:	2300      	movs	r3, #0
    421e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	691b      	ldr	r3, [r3, #16]
    4224:	2b00      	cmp	r3, #0
    4226:	d001      	beq.n	422c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4228:	2300      	movs	r3, #0
    422a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    422c:	68fb      	ldr	r3, [r7, #12]
    422e:	2b01      	cmp	r3, #1
    4230:	d12f      	bne.n	4292 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	681a      	ldr	r2, [r3, #0]
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    423a:	6879      	ldr	r1, [r7, #4]
    423c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    423e:	fb01 f303 	mul.w	r3, r1, r3
    4242:	441a      	add	r2, r3
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	2200      	movs	r2, #0
    424c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	681a      	ldr	r2, [r3, #0]
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	681a      	ldr	r2, [r3, #0]
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    425e:	3b01      	subs	r3, #1
    4260:	6879      	ldr	r1, [r7, #4]
    4262:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4264:	fb01 f303 	mul.w	r3, r1, r3
    4268:	441a      	add	r2, r3
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	f04f 32ff 	mov.w	r2, #4294967295
    4274:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	f04f 32ff 	mov.w	r2, #4294967295
    427c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	3310      	adds	r3, #16
    4282:	4618      	mov	r0, r3
    4284:	f7ff ff08 	bl	4098 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	3324      	adds	r3, #36	; 0x24
    428c:	4618      	mov	r0, r3
    428e:	f7ff ff03 	bl	4098 <vListInitialise>
	}

	return xReturn;
    4292:	68fb      	ldr	r3, [r7, #12]
}
    4294:	4618      	mov	r0, r3
    4296:	3710      	adds	r7, #16
    4298:	46bd      	mov	sp, r7
    429a:	bd80      	pop	{r7, pc}

0000429c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    429c:	b580      	push	{r7, lr}
    429e:	b088      	sub	sp, #32
    42a0:	af00      	add	r7, sp, #0
    42a2:	60f8      	str	r0, [r7, #12]
    42a4:	60b9      	str	r1, [r7, #8]
    42a6:	4613      	mov	r3, r2
    42a8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42aa:	2300      	movs	r3, #0
    42ac:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d026      	beq.n	4302 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    42b4:	204c      	movs	r0, #76	; 0x4c
    42b6:	f001 fd41 	bl	5d3c <pvPortMalloc>
    42ba:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    42bc:	69bb      	ldr	r3, [r7, #24]
    42be:	2b00      	cmp	r3, #0
    42c0:	d01f      	beq.n	4302 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    42c2:	68fb      	ldr	r3, [r7, #12]
    42c4:	68ba      	ldr	r2, [r7, #8]
    42c6:	fb02 f303 	mul.w	r3, r2, r3
    42ca:	3301      	adds	r3, #1
    42cc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    42ce:	6978      	ldr	r0, [r7, #20]
    42d0:	f001 fd34 	bl	5d3c <pvPortMalloc>
    42d4:	4602      	mov	r2, r0
    42d6:	69bb      	ldr	r3, [r7, #24]
    42d8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    42da:	69bb      	ldr	r3, [r7, #24]
    42dc:	681b      	ldr	r3, [r3, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d00c      	beq.n	42fc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    42e2:	69bb      	ldr	r3, [r7, #24]
    42e4:	68fa      	ldr	r2, [r7, #12]
    42e6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    42e8:	69bb      	ldr	r3, [r7, #24]
    42ea:	68ba      	ldr	r2, [r7, #8]
    42ec:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    42ee:	69b8      	ldr	r0, [r7, #24]
    42f0:	2101      	movs	r1, #1
    42f2:	f7ff ff85 	bl	4200 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    42f6:	69bb      	ldr	r3, [r7, #24]
    42f8:	61fb      	str	r3, [r7, #28]
    42fa:	e002      	b.n	4302 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    42fc:	69b8      	ldr	r0, [r7, #24]
    42fe:	f001 fde1 	bl	5ec4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4302:	69fb      	ldr	r3, [r7, #28]
}
    4304:	4618      	mov	r0, r3
    4306:	3720      	adds	r7, #32
    4308:	46bd      	mov	sp, r7
    430a:	bd80      	pop	{r7, pc}

0000430c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    430c:	b580      	push	{r7, lr}
    430e:	b084      	sub	sp, #16
    4310:	af00      	add	r7, sp, #0
    4312:	4603      	mov	r3, r0
    4314:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4316:	204c      	movs	r0, #76	; 0x4c
    4318:	f001 fd10 	bl	5d3c <pvPortMalloc>
    431c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    431e:	68fb      	ldr	r3, [r7, #12]
    4320:	2b00      	cmp	r3, #0
    4322:	d02c      	beq.n	437e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	2200      	movs	r2, #0
    4328:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	2200      	movs	r2, #0
    432e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4330:	68fb      	ldr	r3, [r7, #12]
    4332:	2200      	movs	r2, #0
    4334:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4336:	68fb      	ldr	r3, [r7, #12]
    4338:	2200      	movs	r2, #0
    433a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	2200      	movs	r2, #0
    4340:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4342:	68fb      	ldr	r3, [r7, #12]
    4344:	2201      	movs	r2, #1
    4346:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4348:	68fb      	ldr	r3, [r7, #12]
    434a:	2200      	movs	r2, #0
    434c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	f04f 32ff 	mov.w	r2, #4294967295
    4354:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4356:	68fb      	ldr	r3, [r7, #12]
    4358:	f04f 32ff 	mov.w	r2, #4294967295
    435c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	3310      	adds	r3, #16
    4362:	4618      	mov	r0, r3
    4364:	f7ff fe98 	bl	4098 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	3324      	adds	r3, #36	; 0x24
    436c:	4618      	mov	r0, r3
    436e:	f7ff fe93 	bl	4098 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4372:	68f8      	ldr	r0, [r7, #12]
    4374:	2100      	movs	r1, #0
    4376:	2200      	movs	r2, #0
    4378:	2300      	movs	r3, #0
    437a:	f000 f81d 	bl	43b8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    437e:	68fb      	ldr	r3, [r7, #12]
	}
    4380:	4618      	mov	r0, r3
    4382:	3710      	adds	r7, #16
    4384:	46bd      	mov	sp, r7
    4386:	bd80      	pop	{r7, pc}

00004388 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4388:	b580      	push	{r7, lr}
    438a:	b084      	sub	sp, #16
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4390:	f001 fc5a 	bl	5c48 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	2b00      	cmp	r3, #0
    439a:	d103      	bne.n	43a4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	685b      	ldr	r3, [r3, #4]
    43a0:	60fb      	str	r3, [r7, #12]
    43a2:	e001      	b.n	43a8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43a4:	2300      	movs	r3, #0
    43a6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43a8:	f001 fc64 	bl	5c74 <vPortExitCritical>
		
		return pxReturn;
    43ac:	68fb      	ldr	r3, [r7, #12]
	}
    43ae:	4618      	mov	r0, r3
    43b0:	3710      	adds	r7, #16
    43b2:	46bd      	mov	sp, r7
    43b4:	bd80      	pop	{r7, pc}
    43b6:	bf00      	nop

000043b8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    43b8:	b580      	push	{r7, lr}
    43ba:	b088      	sub	sp, #32
    43bc:	af00      	add	r7, sp, #0
    43be:	60f8      	str	r0, [r7, #12]
    43c0:	60b9      	str	r1, [r7, #8]
    43c2:	607a      	str	r2, [r7, #4]
    43c4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    43c6:	2300      	movs	r3, #0
    43c8:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    43ca:	f001 fc3d 	bl	5c48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43d2:	68fb      	ldr	r3, [r7, #12]
    43d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43d6:	429a      	cmp	r2, r3
    43d8:	d216      	bcs.n	4408 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    43da:	68f8      	ldr	r0, [r7, #12]
    43dc:	68b9      	ldr	r1, [r7, #8]
    43de:	683a      	ldr	r2, [r7, #0]
    43e0:	f000 f9d6 	bl	4790 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43e8:	2b00      	cmp	r3, #0
    43ea:	d009      	beq.n	4400 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	3324      	adds	r3, #36	; 0x24
    43f0:	4618      	mov	r0, r3
    43f2:	f001 f89f 	bl	5534 <xTaskRemoveFromEventList>
    43f6:	4603      	mov	r3, r0
    43f8:	2b01      	cmp	r3, #1
    43fa:	d101      	bne.n	4400 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    43fc:	f001 fc16 	bl	5c2c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4400:	f001 fc38 	bl	5c74 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4404:	2301      	movs	r3, #1
    4406:	e059      	b.n	44bc <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	2b00      	cmp	r3, #0
    440c:	d103      	bne.n	4416 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    440e:	f001 fc31 	bl	5c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4412:	2300      	movs	r3, #0
    4414:	e052      	b.n	44bc <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4416:	69fb      	ldr	r3, [r7, #28]
    4418:	2b00      	cmp	r3, #0
    441a:	d106      	bne.n	442a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    441c:	f107 0314 	add.w	r3, r7, #20
    4420:	4618      	mov	r0, r3
    4422:	f001 f8df 	bl	55e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4426:	2301      	movs	r3, #1
    4428:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    442a:	f001 fc23 	bl	5c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    442e:	f000 fe93 	bl	5158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4432:	f001 fc09 	bl	5c48 <vPortEnterCritical>
    4436:	68fb      	ldr	r3, [r7, #12]
    4438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    443a:	f1b3 3fff 	cmp.w	r3, #4294967295
    443e:	d102      	bne.n	4446 <xQueueGenericSend+0x8e>
    4440:	68fb      	ldr	r3, [r7, #12]
    4442:	2200      	movs	r2, #0
    4444:	645a      	str	r2, [r3, #68]	; 0x44
    4446:	68fb      	ldr	r3, [r7, #12]
    4448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    444a:	f1b3 3fff 	cmp.w	r3, #4294967295
    444e:	d102      	bne.n	4456 <xQueueGenericSend+0x9e>
    4450:	68fb      	ldr	r3, [r7, #12]
    4452:	2200      	movs	r2, #0
    4454:	649a      	str	r2, [r3, #72]	; 0x48
    4456:	f001 fc0d 	bl	5c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    445a:	f107 0214 	add.w	r2, r7, #20
    445e:	1d3b      	adds	r3, r7, #4
    4460:	4610      	mov	r0, r2
    4462:	4619      	mov	r1, r3
    4464:	f001 f8d6 	bl	5614 <xTaskCheckForTimeOut>
    4468:	4603      	mov	r3, r0
    446a:	2b00      	cmp	r3, #0
    446c:	d11e      	bne.n	44ac <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    446e:	68f8      	ldr	r0, [r7, #12]
    4470:	f000 fa86 	bl	4980 <prvIsQueueFull>
    4474:	4603      	mov	r3, r0
    4476:	2b00      	cmp	r3, #0
    4478:	d012      	beq.n	44a0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	f103 0210 	add.w	r2, r3, #16
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	4610      	mov	r0, r2
    4484:	4619      	mov	r1, r3
    4486:	f001 f81d 	bl	54c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    448a:	68f8      	ldr	r0, [r7, #12]
    448c:	f000 fa02 	bl	4894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4490:	f000 fe74 	bl	517c <xTaskResumeAll>
    4494:	4603      	mov	r3, r0
    4496:	2b00      	cmp	r3, #0
    4498:	d10f      	bne.n	44ba <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    449a:	f001 fbc7 	bl	5c2c <vPortYieldFromISR>
    449e:	e00c      	b.n	44ba <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44a0:	68f8      	ldr	r0, [r7, #12]
    44a2:	f000 f9f7 	bl	4894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44a6:	f000 fe69 	bl	517c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44aa:	e78e      	b.n	43ca <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44ac:	68f8      	ldr	r0, [r7, #12]
    44ae:	f000 f9f1 	bl	4894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44b2:	f000 fe63 	bl	517c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    44b6:	2300      	movs	r3, #0
    44b8:	e000      	b.n	44bc <xQueueGenericSend+0x104>
		}
	}
    44ba:	e786      	b.n	43ca <xQueueGenericSend+0x12>
}
    44bc:	4618      	mov	r0, r3
    44be:	3720      	adds	r7, #32
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}

000044c4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    44c4:	b580      	push	{r7, lr}
    44c6:	b086      	sub	sp, #24
    44c8:	af00      	add	r7, sp, #0
    44ca:	60f8      	str	r0, [r7, #12]
    44cc:	60b9      	str	r1, [r7, #8]
    44ce:	607a      	str	r2, [r7, #4]
    44d0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44d2:	2300      	movs	r3, #0
    44d4:	613b      	str	r3, [r7, #16]
    44d6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    44da:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44de:	68fb      	ldr	r3, [r7, #12]
    44e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44e2:	68fb      	ldr	r3, [r7, #12]
    44e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44e6:	429a      	cmp	r2, r3
    44e8:	d221      	bcs.n	452e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    44ea:	68f8      	ldr	r0, [r7, #12]
    44ec:	68b9      	ldr	r1, [r7, #8]
    44ee:	683a      	ldr	r2, [r7, #0]
    44f0:	f000 f94e 	bl	4790 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    44f4:	68fb      	ldr	r3, [r7, #12]
    44f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    44fc:	d10f      	bne.n	451e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44fe:	68fb      	ldr	r3, [r7, #12]
    4500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4502:	2b00      	cmp	r3, #0
    4504:	d010      	beq.n	4528 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	3324      	adds	r3, #36	; 0x24
    450a:	4618      	mov	r0, r3
    450c:	f001 f812 	bl	5534 <xTaskRemoveFromEventList>
    4510:	4603      	mov	r3, r0
    4512:	2b00      	cmp	r3, #0
    4514:	d008      	beq.n	4528 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	2201      	movs	r2, #1
    451a:	601a      	str	r2, [r3, #0]
    451c:	e004      	b.n	4528 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4522:	1c5a      	adds	r2, r3, #1
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4528:	2301      	movs	r3, #1
    452a:	617b      	str	r3, [r7, #20]
    452c:	e001      	b.n	4532 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    452e:	2300      	movs	r3, #0
    4530:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4532:	f04f 0000 	mov.w	r0, #0
    4536:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    453a:	697b      	ldr	r3, [r7, #20]
}
    453c:	4618      	mov	r0, r3
    453e:	3718      	adds	r7, #24
    4540:	46bd      	mov	sp, r7
    4542:	bd80      	pop	{r7, pc}

00004544 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4544:	b580      	push	{r7, lr}
    4546:	b088      	sub	sp, #32
    4548:	af00      	add	r7, sp, #0
    454a:	60f8      	str	r0, [r7, #12]
    454c:	60b9      	str	r1, [r7, #8]
    454e:	607a      	str	r2, [r7, #4]
    4550:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4552:	2300      	movs	r3, #0
    4554:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4556:	f001 fb77 	bl	5c48 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    455a:	68fb      	ldr	r3, [r7, #12]
    455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    455e:	2b00      	cmp	r3, #0
    4560:	d03b      	beq.n	45da <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4562:	68fb      	ldr	r3, [r7, #12]
    4564:	68db      	ldr	r3, [r3, #12]
    4566:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4568:	68f8      	ldr	r0, [r7, #12]
    456a:	68b9      	ldr	r1, [r7, #8]
    456c:	f000 f96c 	bl	4848 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4570:	683b      	ldr	r3, [r7, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d11c      	bne.n	45b0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    457a:	1e5a      	subs	r2, r3, #1
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	681b      	ldr	r3, [r3, #0]
    4584:	2b00      	cmp	r3, #0
    4586:	d104      	bne.n	4592 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4588:	f001 f9f6 	bl	5978 <xTaskGetCurrentTaskHandle>
    458c:	4602      	mov	r2, r0
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4592:	68fb      	ldr	r3, [r7, #12]
    4594:	691b      	ldr	r3, [r3, #16]
    4596:	2b00      	cmp	r3, #0
    4598:	d01b      	beq.n	45d2 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    459a:	68fb      	ldr	r3, [r7, #12]
    459c:	3310      	adds	r3, #16
    459e:	4618      	mov	r0, r3
    45a0:	f000 ffc8 	bl	5534 <xTaskRemoveFromEventList>
    45a4:	4603      	mov	r3, r0
    45a6:	2b01      	cmp	r3, #1
    45a8:	d113      	bne.n	45d2 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45aa:	f001 fb3f 	bl	5c2c <vPortYieldFromISR>
    45ae:	e010      	b.n	45d2 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    45b0:	68fb      	ldr	r3, [r7, #12]
    45b2:	69ba      	ldr	r2, [r7, #24]
    45b4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45ba:	2b00      	cmp	r3, #0
    45bc:	d009      	beq.n	45d2 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	3324      	adds	r3, #36	; 0x24
    45c2:	4618      	mov	r0, r3
    45c4:	f000 ffb6 	bl	5534 <xTaskRemoveFromEventList>
    45c8:	4603      	mov	r3, r0
    45ca:	2b00      	cmp	r3, #0
    45cc:	d001      	beq.n	45d2 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    45ce:	f001 fb2d 	bl	5c2c <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    45d2:	f001 fb4f 	bl	5c74 <vPortExitCritical>
				return pdPASS;
    45d6:	2301      	movs	r3, #1
    45d8:	e066      	b.n	46a8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	2b00      	cmp	r3, #0
    45de:	d103      	bne.n	45e8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    45e0:	f001 fb48 	bl	5c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    45e4:	2300      	movs	r3, #0
    45e6:	e05f      	b.n	46a8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    45e8:	69fb      	ldr	r3, [r7, #28]
    45ea:	2b00      	cmp	r3, #0
    45ec:	d106      	bne.n	45fc <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    45ee:	f107 0310 	add.w	r3, r7, #16
    45f2:	4618      	mov	r0, r3
    45f4:	f000 fff6 	bl	55e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    45f8:	2301      	movs	r3, #1
    45fa:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    45fc:	f001 fb3a 	bl	5c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4600:	f000 fdaa 	bl	5158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4604:	f001 fb20 	bl	5c48 <vPortEnterCritical>
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    460c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4610:	d102      	bne.n	4618 <xQueueGenericReceive+0xd4>
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	2200      	movs	r2, #0
    4616:	645a      	str	r2, [r3, #68]	; 0x44
    4618:	68fb      	ldr	r3, [r7, #12]
    461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    461c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4620:	d102      	bne.n	4628 <xQueueGenericReceive+0xe4>
    4622:	68fb      	ldr	r3, [r7, #12]
    4624:	2200      	movs	r2, #0
    4626:	649a      	str	r2, [r3, #72]	; 0x48
    4628:	f001 fb24 	bl	5c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    462c:	f107 0210 	add.w	r2, r7, #16
    4630:	1d3b      	adds	r3, r7, #4
    4632:	4610      	mov	r0, r2
    4634:	4619      	mov	r1, r3
    4636:	f000 ffed 	bl	5614 <xTaskCheckForTimeOut>
    463a:	4603      	mov	r3, r0
    463c:	2b00      	cmp	r3, #0
    463e:	d12b      	bne.n	4698 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4640:	68f8      	ldr	r0, [r7, #12]
    4642:	f000 f973 	bl	492c <prvIsQueueEmpty>
    4646:	4603      	mov	r3, r0
    4648:	2b00      	cmp	r3, #0
    464a:	d01f      	beq.n	468c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	681b      	ldr	r3, [r3, #0]
    4650:	2b00      	cmp	r3, #0
    4652:	d108      	bne.n	4666 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4654:	f001 faf8 	bl	5c48 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	4618      	mov	r0, r3
    465e:	f001 f99b 	bl	5998 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4662:	f001 fb07 	bl	5c74 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4666:	68fb      	ldr	r3, [r7, #12]
    4668:	f103 0224 	add.w	r2, r3, #36	; 0x24
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	4610      	mov	r0, r2
    4670:	4619      	mov	r1, r3
    4672:	f000 ff27 	bl	54c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4676:	68f8      	ldr	r0, [r7, #12]
    4678:	f000 f90c 	bl	4894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    467c:	f000 fd7e 	bl	517c <xTaskResumeAll>
    4680:	4603      	mov	r3, r0
    4682:	2b00      	cmp	r3, #0
    4684:	d10f      	bne.n	46a6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4686:	f001 fad1 	bl	5c2c <vPortYieldFromISR>
    468a:	e00c      	b.n	46a6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    468c:	68f8      	ldr	r0, [r7, #12]
    468e:	f000 f901 	bl	4894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4692:	f000 fd73 	bl	517c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4696:	e75e      	b.n	4556 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4698:	68f8      	ldr	r0, [r7, #12]
    469a:	f000 f8fb 	bl	4894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    469e:	f000 fd6d 	bl	517c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46a2:	2300      	movs	r3, #0
    46a4:	e000      	b.n	46a8 <xQueueGenericReceive+0x164>
		}
	}
    46a6:	e756      	b.n	4556 <xQueueGenericReceive+0x12>
}
    46a8:	4618      	mov	r0, r3
    46aa:	3720      	adds	r7, #32
    46ac:	46bd      	mov	sp, r7
    46ae:	bd80      	pop	{r7, pc}

000046b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b086      	sub	sp, #24
    46b4:	af00      	add	r7, sp, #0
    46b6:	60f8      	str	r0, [r7, #12]
    46b8:	60b9      	str	r1, [r7, #8]
    46ba:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46bc:	2300      	movs	r3, #0
    46be:	613b      	str	r3, [r7, #16]
    46c0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46c4:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    46c8:	68fb      	ldr	r3, [r7, #12]
    46ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46cc:	2b00      	cmp	r3, #0
    46ce:	d025      	beq.n	471c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    46d0:	68f8      	ldr	r0, [r7, #12]
    46d2:	68b9      	ldr	r1, [r7, #8]
    46d4:	f000 f8b8 	bl	4848 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    46d8:	68fb      	ldr	r3, [r7, #12]
    46da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46dc:	1e5a      	subs	r2, r3, #1
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    46e2:	68fb      	ldr	r3, [r7, #12]
    46e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    46ea:	d10f      	bne.n	470c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	691b      	ldr	r3, [r3, #16]
    46f0:	2b00      	cmp	r3, #0
    46f2:	d010      	beq.n	4716 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	3310      	adds	r3, #16
    46f8:	4618      	mov	r0, r3
    46fa:	f000 ff1b 	bl	5534 <xTaskRemoveFromEventList>
    46fe:	4603      	mov	r3, r0
    4700:	2b00      	cmp	r3, #0
    4702:	d008      	beq.n	4716 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	2201      	movs	r2, #1
    4708:	601a      	str	r2, [r3, #0]
    470a:	e004      	b.n	4716 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    470c:	68fb      	ldr	r3, [r7, #12]
    470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4710:	1c5a      	adds	r2, r3, #1
    4712:	68fb      	ldr	r3, [r7, #12]
    4714:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4716:	2301      	movs	r3, #1
    4718:	617b      	str	r3, [r7, #20]
    471a:	e001      	b.n	4720 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    471c:	2300      	movs	r3, #0
    471e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4720:	f04f 0000 	mov.w	r0, #0
    4724:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4728:	697b      	ldr	r3, [r7, #20]
}
    472a:	4618      	mov	r0, r3
    472c:	3718      	adds	r7, #24
    472e:	46bd      	mov	sp, r7
    4730:	bd80      	pop	{r7, pc}
    4732:	bf00      	nop

00004734 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4734:	b580      	push	{r7, lr}
    4736:	b084      	sub	sp, #16
    4738:	af00      	add	r7, sp, #0
    473a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    473c:	f001 fa84 	bl	5c48 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4744:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4746:	f001 fa95 	bl	5c74 <vPortExitCritical>

	return uxReturn;
    474a:	68fb      	ldr	r3, [r7, #12]
}
    474c:	4618      	mov	r0, r3
    474e:	3710      	adds	r7, #16
    4750:	46bd      	mov	sp, r7
    4752:	bd80      	pop	{r7, pc}

00004754 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4754:	b480      	push	{r7}
    4756:	b085      	sub	sp, #20
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4760:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4762:	68fb      	ldr	r3, [r7, #12]
}
    4764:	4618      	mov	r0, r3
    4766:	3714      	adds	r7, #20
    4768:	46bd      	mov	sp, r7
    476a:	f85d 7b04 	ldr.w	r7, [sp], #4
    476e:	4770      	bx	lr

00004770 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4770:	b580      	push	{r7, lr}
    4772:	b082      	sub	sp, #8
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	681b      	ldr	r3, [r3, #0]
    477c:	4618      	mov	r0, r3
    477e:	f001 fba1 	bl	5ec4 <vPortFree>
	vPortFree( pxQueue );
    4782:	6878      	ldr	r0, [r7, #4]
    4784:	f001 fb9e 	bl	5ec4 <vPortFree>
}
    4788:	3708      	adds	r7, #8
    478a:	46bd      	mov	sp, r7
    478c:	bd80      	pop	{r7, pc}
    478e:	bf00      	nop

00004790 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4790:	b580      	push	{r7, lr}
    4792:	b084      	sub	sp, #16
    4794:	af00      	add	r7, sp, #0
    4796:	60f8      	str	r0, [r7, #12]
    4798:	60b9      	str	r1, [r7, #8]
    479a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    479c:	68fb      	ldr	r3, [r7, #12]
    479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47a0:	2b00      	cmp	r3, #0
    47a2:	d10c      	bne.n	47be <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d145      	bne.n	4838 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	685b      	ldr	r3, [r3, #4]
    47b0:	4618      	mov	r0, r3
    47b2:	f001 f955 	bl	5a60 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    47b6:	68fb      	ldr	r3, [r7, #12]
    47b8:	2200      	movs	r2, #0
    47ba:	605a      	str	r2, [r3, #4]
    47bc:	e03c      	b.n	4838 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    47be:	687b      	ldr	r3, [r7, #4]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d11a      	bne.n	47fa <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	689a      	ldr	r2, [r3, #8]
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47cc:	4610      	mov	r0, r2
    47ce:	68b9      	ldr	r1, [r7, #8]
    47d0:	461a      	mov	r2, r3
    47d2:	f014 f827 	bl	18824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    47d6:	68fb      	ldr	r3, [r7, #12]
    47d8:	689a      	ldr	r2, [r3, #8]
    47da:	68fb      	ldr	r3, [r7, #12]
    47dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47de:	441a      	add	r2, r3
    47e0:	68fb      	ldr	r3, [r7, #12]
    47e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    47e4:	68fb      	ldr	r3, [r7, #12]
    47e6:	689a      	ldr	r2, [r3, #8]
    47e8:	68fb      	ldr	r3, [r7, #12]
    47ea:	685b      	ldr	r3, [r3, #4]
    47ec:	429a      	cmp	r2, r3
    47ee:	d323      	bcc.n	4838 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	681a      	ldr	r2, [r3, #0]
    47f4:	68fb      	ldr	r3, [r7, #12]
    47f6:	609a      	str	r2, [r3, #8]
    47f8:	e01e      	b.n	4838 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47fa:	68fb      	ldr	r3, [r7, #12]
    47fc:	68da      	ldr	r2, [r3, #12]
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4802:	4610      	mov	r0, r2
    4804:	68b9      	ldr	r1, [r7, #8]
    4806:	461a      	mov	r2, r3
    4808:	f014 f80c 	bl	18824 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	68da      	ldr	r2, [r3, #12]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4814:	425b      	negs	r3, r3
    4816:	441a      	add	r2, r3
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	68da      	ldr	r2, [r3, #12]
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	681b      	ldr	r3, [r3, #0]
    4824:	429a      	cmp	r2, r3
    4826:	d207      	bcs.n	4838 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4828:	68fb      	ldr	r3, [r7, #12]
    482a:	685a      	ldr	r2, [r3, #4]
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4830:	425b      	negs	r3, r3
    4832:	441a      	add	r2, r3
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    483c:	1c5a      	adds	r2, r3, #1
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	639a      	str	r2, [r3, #56]	; 0x38
}
    4842:	3710      	adds	r7, #16
    4844:	46bd      	mov	sp, r7
    4846:	bd80      	pop	{r7, pc}

00004848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4848:	b580      	push	{r7, lr}
    484a:	b082      	sub	sp, #8
    484c:	af00      	add	r7, sp, #0
    484e:	6078      	str	r0, [r7, #4]
    4850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	681b      	ldr	r3, [r3, #0]
    4856:	2b00      	cmp	r3, #0
    4858:	d019      	beq.n	488e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	68da      	ldr	r2, [r3, #12]
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4862:	441a      	add	r2, r3
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	68da      	ldr	r2, [r3, #12]
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	685b      	ldr	r3, [r3, #4]
    4870:	429a      	cmp	r2, r3
    4872:	d303      	bcc.n	487c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4874:	687b      	ldr	r3, [r7, #4]
    4876:	681a      	ldr	r2, [r3, #0]
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	68da      	ldr	r2, [r3, #12]
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4884:	6838      	ldr	r0, [r7, #0]
    4886:	4611      	mov	r1, r2
    4888:	461a      	mov	r2, r3
    488a:	f013 ffcb 	bl	18824 <memcpy>
	}
}
    488e:	3708      	adds	r7, #8
    4890:	46bd      	mov	sp, r7
    4892:	bd80      	pop	{r7, pc}

00004894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4894:	b580      	push	{r7, lr}
    4896:	b082      	sub	sp, #8
    4898:	af00      	add	r7, sp, #0
    489a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    489c:	f001 f9d4 	bl	5c48 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48a0:	e014      	b.n	48cc <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48a6:	2b00      	cmp	r3, #0
    48a8:	d00f      	beq.n	48ca <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	3324      	adds	r3, #36	; 0x24
    48ae:	4618      	mov	r0, r3
    48b0:	f000 fe40 	bl	5534 <xTaskRemoveFromEventList>
    48b4:	4603      	mov	r3, r0
    48b6:	2b00      	cmp	r3, #0
    48b8:	d001      	beq.n	48be <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    48ba:	f000 fef7 	bl	56ac <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48c2:	1e5a      	subs	r2, r3, #1
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	649a      	str	r2, [r3, #72]	; 0x48
    48c8:	e000      	b.n	48cc <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    48ca:	e003      	b.n	48d4 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48d0:	2b00      	cmp	r3, #0
    48d2:	dce6      	bgt.n	48a2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	f04f 32ff 	mov.w	r2, #4294967295
    48da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    48dc:	f001 f9ca 	bl	5c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    48e0:	f001 f9b2 	bl	5c48 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    48e4:	e014      	b.n	4910 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	691b      	ldr	r3, [r3, #16]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d00f      	beq.n	490e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	3310      	adds	r3, #16
    48f2:	4618      	mov	r0, r3
    48f4:	f000 fe1e 	bl	5534 <xTaskRemoveFromEventList>
    48f8:	4603      	mov	r3, r0
    48fa:	2b00      	cmp	r3, #0
    48fc:	d001      	beq.n	4902 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    48fe:	f000 fed5 	bl	56ac <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4906:	1e5a      	subs	r2, r3, #1
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	645a      	str	r2, [r3, #68]	; 0x44
    490c:	e000      	b.n	4910 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    490e:	e003      	b.n	4918 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4914:	2b00      	cmp	r3, #0
    4916:	dce6      	bgt.n	48e6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	f04f 32ff 	mov.w	r2, #4294967295
    491e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4920:	f001 f9a8 	bl	5c74 <vPortExitCritical>
}
    4924:	3708      	adds	r7, #8
    4926:	46bd      	mov	sp, r7
    4928:	bd80      	pop	{r7, pc}
    492a:	bf00      	nop

0000492c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    492c:	b580      	push	{r7, lr}
    492e:	b084      	sub	sp, #16
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4934:	f001 f988 	bl	5c48 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    493c:	2b00      	cmp	r3, #0
    493e:	bf14      	ite	ne
    4940:	2300      	movne	r3, #0
    4942:	2301      	moveq	r3, #1
    4944:	b2db      	uxtb	r3, r3
    4946:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4948:	f001 f994 	bl	5c74 <vPortExitCritical>

	return xReturn;
    494c:	68fb      	ldr	r3, [r7, #12]
}
    494e:	4618      	mov	r0, r3
    4950:	3710      	adds	r7, #16
    4952:	46bd      	mov	sp, r7
    4954:	bd80      	pop	{r7, pc}
    4956:	bf00      	nop

00004958 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4958:	b480      	push	{r7}
    495a:	b085      	sub	sp, #20
    495c:	af00      	add	r7, sp, #0
    495e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4964:	2b00      	cmp	r3, #0
    4966:	bf14      	ite	ne
    4968:	2300      	movne	r3, #0
    496a:	2301      	moveq	r3, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4970:	68fb      	ldr	r3, [r7, #12]
}
    4972:	4618      	mov	r0, r3
    4974:	3714      	adds	r7, #20
    4976:	46bd      	mov	sp, r7
    4978:	f85d 7b04 	ldr.w	r7, [sp], #4
    497c:	4770      	bx	lr
    497e:	bf00      	nop

00004980 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4980:	b580      	push	{r7, lr}
    4982:	b084      	sub	sp, #16
    4984:	af00      	add	r7, sp, #0
    4986:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4988:	f001 f95e 	bl	5c48 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4994:	429a      	cmp	r2, r3
    4996:	bf14      	ite	ne
    4998:	2300      	movne	r3, #0
    499a:	2301      	moveq	r3, #1
    499c:	b2db      	uxtb	r3, r3
    499e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49a0:	f001 f968 	bl	5c74 <vPortExitCritical>

	return xReturn;
    49a4:	68fb      	ldr	r3, [r7, #12]
}
    49a6:	4618      	mov	r0, r3
    49a8:	3710      	adds	r7, #16
    49aa:	46bd      	mov	sp, r7
    49ac:	bd80      	pop	{r7, pc}
    49ae:	bf00      	nop

000049b0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    49b0:	b480      	push	{r7}
    49b2:	b085      	sub	sp, #20
    49b4:	af00      	add	r7, sp, #0
    49b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49c0:	429a      	cmp	r2, r3
    49c2:	bf14      	ite	ne
    49c4:	2300      	movne	r3, #0
    49c6:	2301      	moveq	r3, #1
    49c8:	b2db      	uxtb	r3, r3
    49ca:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49cc:	68fb      	ldr	r3, [r7, #12]
}
    49ce:	4618      	mov	r0, r3
    49d0:	3714      	adds	r7, #20
    49d2:	46bd      	mov	sp, r7
    49d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d8:	4770      	bx	lr
    49da:	bf00      	nop

000049dc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    49dc:	b580      	push	{r7, lr}
    49de:	b08a      	sub	sp, #40	; 0x28
    49e0:	af02      	add	r7, sp, #8
    49e2:	60f8      	str	r0, [r7, #12]
    49e4:	60b9      	str	r1, [r7, #8]
    49e6:	603b      	str	r3, [r7, #0]
    49e8:	4613      	mov	r3, r2
    49ea:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    49ec:	88fb      	ldrh	r3, [r7, #6]
    49ee:	4618      	mov	r0, r3
    49f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    49f2:	f000 ff7f 	bl	58f4 <prvAllocateTCBAndStack>
    49f6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    49f8:	69bb      	ldr	r3, [r7, #24]
    49fa:	2b00      	cmp	r3, #0
    49fc:	f000 80a1 	beq.w	4b42 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a00:	69bb      	ldr	r3, [r7, #24]
    4a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a04:	88fb      	ldrh	r3, [r7, #6]
    4a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a0a:	3b01      	subs	r3, #1
    4a0c:	009b      	lsls	r3, r3, #2
    4a0e:	4413      	add	r3, r2
    4a10:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	f023 0307 	bic.w	r3, r3, #7
    4a18:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a1a:	88fb      	ldrh	r3, [r7, #6]
    4a1c:	9300      	str	r3, [sp, #0]
    4a1e:	69b8      	ldr	r0, [r7, #24]
    4a20:	68b9      	ldr	r1, [r7, #8]
    4a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a26:	f000 fe57 	bl	56d8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a2a:	6978      	ldr	r0, [r7, #20]
    4a2c:	68f9      	ldr	r1, [r7, #12]
    4a2e:	683a      	ldr	r2, [r7, #0]
    4a30:	f001 f88c 	bl	5b4c <pxPortInitialiseStack>
    4a34:	4602      	mov	r2, r0
    4a36:	69bb      	ldr	r3, [r7, #24]
    4a38:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d002      	beq.n	4a46 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a42:	69ba      	ldr	r2, [r7, #24]
    4a44:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a46:	f001 f8ff 	bl	5c48 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a4a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	1c5a      	adds	r2, r3, #1
    4a56:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a5e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4a60:	f241 4310 	movw	r3, #5136	; 0x1410
    4a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d10f      	bne.n	4a8e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4a6e:	f241 4310 	movw	r3, #5136	; 0x1410
    4a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a76:	69ba      	ldr	r2, [r7, #24]
    4a78:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4a7a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	2b01      	cmp	r3, #1
    4a86:	d118      	bne.n	4aba <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4a88:	f000 fe5c 	bl	5744 <prvInitialiseTaskLists>
    4a8c:	e015      	b.n	4aba <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4a8e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d10e      	bne.n	4aba <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4a9c:	f241 4310 	movw	r3, #5136	; 0x1410
    4aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4aaa:	429a      	cmp	r2, r3
    4aac:	d805      	bhi.n	4aba <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4aae:	f241 4310 	movw	r3, #5136	; 0x1410
    4ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab6:	69ba      	ldr	r2, [r7, #24]
    4ab8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4aba:	69bb      	ldr	r3, [r7, #24]
    4abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4abe:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac6:	681b      	ldr	r3, [r3, #0]
    4ac8:	429a      	cmp	r2, r3
    4aca:	d906      	bls.n	4ada <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4acc:	69bb      	ldr	r3, [r7, #24]
    4ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ad0:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad8:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4ada:	f241 530c 	movw	r3, #5388	; 0x150c
    4ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	1c5a      	adds	r2, r3, #1
    4ae6:	f241 530c 	movw	r3, #5388	; 0x150c
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4af0:	69bb      	ldr	r3, [r7, #24]
    4af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	429a      	cmp	r2, r3
    4b00:	d906      	bls.n	4b10 <xTaskGenericCreate+0x134>
    4b02:	69bb      	ldr	r3, [r7, #24]
    4b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b06:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0e:	601a      	str	r2, [r3, #0]
    4b10:	69bb      	ldr	r3, [r7, #24]
    4b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b14:	4613      	mov	r3, r2
    4b16:	009b      	lsls	r3, r3, #2
    4b18:	4413      	add	r3, r2
    4b1a:	009b      	lsls	r3, r3, #2
    4b1c:	f241 4214 	movw	r2, #5140	; 0x1414
    4b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b24:	441a      	add	r2, r3
    4b26:	69bb      	ldr	r3, [r7, #24]
    4b28:	3304      	adds	r3, #4
    4b2a:	4610      	mov	r0, r2
    4b2c:	4619      	mov	r1, r3
    4b2e:	f7ff fadf 	bl	40f0 <vListInsertEnd>

			xReturn = pdPASS;
    4b32:	2301      	movs	r3, #1
    4b34:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b36:	69b8      	ldr	r0, [r7, #24]
    4b38:	f012 fe78 	bl	1782c <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b3c:	f001 f89a 	bl	5c74 <vPortExitCritical>
    4b40:	e002      	b.n	4b48 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b42:	f04f 33ff 	mov.w	r3, #4294967295
    4b46:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b48:	69fb      	ldr	r3, [r7, #28]
    4b4a:	2b01      	cmp	r3, #1
    4b4c:	d111      	bne.n	4b72 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b4e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d00a      	beq.n	4b72 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4b5c:	f241 4310 	movw	r3, #5136	; 0x1410
    4b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b6a:	429a      	cmp	r2, r3
    4b6c:	d201      	bcs.n	4b72 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4b6e:	f001 f85d 	bl	5c2c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4b72:	69fb      	ldr	r3, [r7, #28]
}
    4b74:	4618      	mov	r0, r3
    4b76:	3720      	adds	r7, #32
    4b78:	46bd      	mov	sp, r7
    4b7a:	bd80      	pop	{r7, pc}

00004b7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4b84:	f001 f860 	bl	5c48 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4b88:	f241 4310 	movw	r3, #5136	; 0x1410
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	687a      	ldr	r2, [r7, #4]
    4b94:	429a      	cmp	r2, r3
    4b96:	d101      	bne.n	4b9c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4b98:	2300      	movs	r3, #0
    4b9a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d105      	bne.n	4bae <vTaskDelete+0x32>
    4ba2:	f241 4310 	movw	r3, #5136	; 0x1410
    4ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	e000      	b.n	4bb0 <vTaskDelete+0x34>
    4bae:	687b      	ldr	r3, [r7, #4]
    4bb0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bb2:	68fb      	ldr	r3, [r7, #12]
    4bb4:	3304      	adds	r3, #4
    4bb6:	4618      	mov	r0, r3
    4bb8:	f7ff fafa 	bl	41b0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4bbc:	68fb      	ldr	r3, [r7, #12]
    4bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d004      	beq.n	4bce <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4bc4:	68fb      	ldr	r3, [r7, #12]
    4bc6:	3318      	adds	r3, #24
    4bc8:	4618      	mov	r0, r3
    4bca:	f7ff faf1 	bl	41b0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	3304      	adds	r3, #4
    4bd2:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4bd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4bda:	4619      	mov	r1, r3
    4bdc:	f7ff fa88 	bl	40f0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4be0:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	1c5a      	adds	r2, r3, #1
    4bec:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf4:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4bf6:	f241 530c 	movw	r3, #5388	; 0x150c
    4bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfe:	681b      	ldr	r3, [r3, #0]
    4c00:	1c5a      	adds	r2, r3, #1
    4c02:	f241 530c 	movw	r3, #5388	; 0x150c
    4c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c0c:	f001 f832 	bl	5c74 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c10:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c18:	681b      	ldr	r3, [r3, #0]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d004      	beq.n	4c28 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d101      	bne.n	4c28 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c24:	f001 f802 	bl	5c2c <vPortYieldFromISR>
			}
		}
	}
    4c28:	3710      	adds	r7, #16
    4c2a:	46bd      	mov	sp, r7
    4c2c:	bd80      	pop	{r7, pc}
    4c2e:	bf00      	nop

00004c30 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c30:	b580      	push	{r7, lr}
    4c32:	b086      	sub	sp, #24
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
    4c38:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c3a:	2300      	movs	r3, #0
    4c3c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c3e:	f000 fa8b 	bl	5158 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	681a      	ldr	r2, [r3, #0]
    4c46:	683b      	ldr	r3, [r7, #0]
    4c48:	4413      	add	r3, r2
    4c4a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	681a      	ldr	r2, [r3, #0]
    4c50:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c58:	681b      	ldr	r3, [r3, #0]
    4c5a:	429a      	cmp	r2, r3
    4c5c:	d90f      	bls.n	4c7e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	693b      	ldr	r3, [r7, #16]
    4c64:	429a      	cmp	r2, r3
    4c66:	d919      	bls.n	4c9c <vTaskDelayUntil+0x6c>
    4c68:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c70:	681b      	ldr	r3, [r3, #0]
    4c72:	693a      	ldr	r2, [r7, #16]
    4c74:	429a      	cmp	r2, r3
    4c76:	d911      	bls.n	4c9c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4c78:	2301      	movs	r3, #1
    4c7a:	617b      	str	r3, [r7, #20]
    4c7c:	e00e      	b.n	4c9c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	681a      	ldr	r2, [r3, #0]
    4c82:	693b      	ldr	r3, [r7, #16]
    4c84:	429a      	cmp	r2, r3
    4c86:	d807      	bhi.n	4c98 <vTaskDelayUntil+0x68>
    4c88:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	693a      	ldr	r2, [r7, #16]
    4c94:	429a      	cmp	r2, r3
    4c96:	d901      	bls.n	4c9c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4c98:	2301      	movs	r3, #1
    4c9a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	693a      	ldr	r2, [r7, #16]
    4ca0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4ca2:	697b      	ldr	r3, [r7, #20]
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d00b      	beq.n	4cc0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4ca8:	f241 4310 	movw	r3, #5136	; 0x1410
    4cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	3304      	adds	r3, #4
    4cb4:	4618      	mov	r0, r3
    4cb6:	f7ff fa7b 	bl	41b0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4cba:	6938      	ldr	r0, [r7, #16]
    4cbc:	f000 fdd6 	bl	586c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4cc0:	f000 fa5c 	bl	517c <xTaskResumeAll>
    4cc4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d101      	bne.n	4cd0 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4ccc:	f000 ffae 	bl	5c2c <vPortYieldFromISR>
		}
	}
    4cd0:	3718      	adds	r7, #24
    4cd2:	46bd      	mov	sp, r7
    4cd4:	bd80      	pop	{r7, pc}
    4cd6:	bf00      	nop

00004cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4cd8:	b580      	push	{r7, lr}
    4cda:	b084      	sub	sp, #16
    4cdc:	af00      	add	r7, sp, #0
    4cde:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4ce0:	2300      	movs	r3, #0
    4ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d018      	beq.n	4d1c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4cea:	f000 fa35 	bl	5158 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4cee:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf6:	681a      	ldr	r2, [r3, #0]
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	4413      	add	r3, r2
    4cfc:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cfe:	f241 4310 	movw	r3, #5136	; 0x1410
    4d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	3304      	adds	r3, #4
    4d0a:	4618      	mov	r0, r3
    4d0c:	f7ff fa50 	bl	41b0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d10:	68b8      	ldr	r0, [r7, #8]
    4d12:	f000 fdab 	bl	586c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d16:	f000 fa31 	bl	517c <xTaskResumeAll>
    4d1a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d1c:	68fb      	ldr	r3, [r7, #12]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d101      	bne.n	4d26 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d22:	f000 ff83 	bl	5c2c <vPortYieldFromISR>
		}
	}
    4d26:	3710      	adds	r7, #16
    4d28:	46bd      	mov	sp, r7
    4d2a:	bd80      	pop	{r7, pc}

00004d2c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b084      	sub	sp, #16
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d34:	f000 ff88 	bl	5c48 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d105      	bne.n	4d4a <uxTaskPriorityGet+0x1e>
    4d3e:	f241 4310 	movw	r3, #5136	; 0x1410
    4d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	e000      	b.n	4d4c <uxTaskPriorityGet+0x20>
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d4e:	68fb      	ldr	r3, [r7, #12]
    4d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d52:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4d54:	f000 ff8e 	bl	5c74 <vPortExitCritical>

		return uxReturn;
    4d58:	68bb      	ldr	r3, [r7, #8]
	}
    4d5a:	4618      	mov	r0, r3
    4d5c:	3710      	adds	r7, #16
    4d5e:	46bd      	mov	sp, r7
    4d60:	bd80      	pop	{r7, pc}
    4d62:	bf00      	nop

00004d64 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4d64:	b580      	push	{r7, lr}
    4d66:	b086      	sub	sp, #24
    4d68:	af00      	add	r7, sp, #0
    4d6a:	6078      	str	r0, [r7, #4]
    4d6c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d6e:	2300      	movs	r3, #0
    4d70:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4d72:	683b      	ldr	r3, [r7, #0]
    4d74:	2b04      	cmp	r3, #4
    4d76:	d901      	bls.n	4d7c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4d78:	2304      	movs	r3, #4
    4d7a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4d7c:	f000 ff64 	bl	5c48 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4d80:	f241 4310 	movw	r3, #5136	; 0x1410
    4d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d88:	681b      	ldr	r3, [r3, #0]
    4d8a:	687a      	ldr	r2, [r7, #4]
    4d8c:	429a      	cmp	r2, r3
    4d8e:	d101      	bne.n	4d94 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4d90:	2300      	movs	r3, #0
    4d92:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d105      	bne.n	4da6 <vTaskPrioritySet+0x42>
    4d9a:	f241 4310 	movw	r3, #5136	; 0x1410
    4d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	e000      	b.n	4da8 <vTaskPrioritySet+0x44>
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4daa:	693b      	ldr	r3, [r7, #16]
    4dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dae:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4db0:	68fa      	ldr	r2, [r7, #12]
    4db2:	683b      	ldr	r3, [r7, #0]
    4db4:	429a      	cmp	r2, r3
    4db6:	d058      	beq.n	4e6a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4db8:	683a      	ldr	r2, [r7, #0]
    4dba:	68fb      	ldr	r3, [r7, #12]
    4dbc:	429a      	cmp	r2, r3
    4dbe:	d905      	bls.n	4dcc <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d007      	beq.n	4dd6 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4dc6:	2301      	movs	r3, #1
    4dc8:	617b      	str	r3, [r7, #20]
    4dca:	e004      	b.n	4dd6 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d101      	bne.n	4dd6 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4dd2:	2301      	movs	r3, #1
    4dd4:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4dd6:	693b      	ldr	r3, [r7, #16]
    4dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4dda:	693b      	ldr	r3, [r7, #16]
    4ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dde:	429a      	cmp	r2, r3
    4de0:	d102      	bne.n	4de8 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4de2:	693b      	ldr	r3, [r7, #16]
    4de4:	683a      	ldr	r2, [r7, #0]
    4de6:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4de8:	693b      	ldr	r3, [r7, #16]
    4dea:	683a      	ldr	r2, [r7, #0]
    4dec:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4dee:	683b      	ldr	r3, [r7, #0]
    4df0:	f1c3 0205 	rsb	r2, r3, #5
    4df4:	693b      	ldr	r3, [r7, #16]
    4df6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4df8:	693b      	ldr	r3, [r7, #16]
    4dfa:	6959      	ldr	r1, [r3, #20]
    4dfc:	68fa      	ldr	r2, [r7, #12]
    4dfe:	4613      	mov	r3, r2
    4e00:	009b      	lsls	r3, r3, #2
    4e02:	4413      	add	r3, r2
    4e04:	009b      	lsls	r3, r3, #2
    4e06:	f241 4214 	movw	r2, #5140	; 0x1414
    4e0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e0e:	4413      	add	r3, r2
    4e10:	4299      	cmp	r1, r3
    4e12:	d125      	bne.n	4e60 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	3304      	adds	r3, #4
    4e18:	4618      	mov	r0, r3
    4e1a:	f7ff f9c9 	bl	41b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e1e:	693b      	ldr	r3, [r7, #16]
    4e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e22:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e2a:	681b      	ldr	r3, [r3, #0]
    4e2c:	429a      	cmp	r2, r3
    4e2e:	d906      	bls.n	4e3e <vTaskPrioritySet+0xda>
    4e30:	693b      	ldr	r3, [r7, #16]
    4e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e34:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e3c:	601a      	str	r2, [r3, #0]
    4e3e:	693b      	ldr	r3, [r7, #16]
    4e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e42:	4613      	mov	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	4413      	add	r3, r2
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	f241 4214 	movw	r2, #5140	; 0x1414
    4e4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e52:	441a      	add	r2, r3
    4e54:	693b      	ldr	r3, [r7, #16]
    4e56:	3304      	adds	r3, #4
    4e58:	4610      	mov	r0, r2
    4e5a:	4619      	mov	r1, r3
    4e5c:	f7ff f948 	bl	40f0 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4e60:	697b      	ldr	r3, [r7, #20]
    4e62:	2b01      	cmp	r3, #1
    4e64:	d101      	bne.n	4e6a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4e66:	f000 fee1 	bl	5c2c <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4e6a:	f000 ff03 	bl	5c74 <vPortExitCritical>
	}
    4e6e:	3718      	adds	r7, #24
    4e70:	46bd      	mov	sp, r7
    4e72:	bd80      	pop	{r7, pc}

00004e74 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4e74:	b580      	push	{r7, lr}
    4e76:	b084      	sub	sp, #16
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4e7c:	f000 fee4 	bl	5c48 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4e80:	f241 4310 	movw	r3, #5136	; 0x1410
    4e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	687a      	ldr	r2, [r7, #4]
    4e8c:	429a      	cmp	r2, r3
    4e8e:	d101      	bne.n	4e94 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4e90:	2300      	movs	r3, #0
    4e92:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	2b00      	cmp	r3, #0
    4e98:	d105      	bne.n	4ea6 <vTaskSuspend+0x32>
    4e9a:	f241 4310 	movw	r3, #5136	; 0x1410
    4e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	e000      	b.n	4ea8 <vTaskSuspend+0x34>
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4eaa:	68fb      	ldr	r3, [r7, #12]
    4eac:	3304      	adds	r3, #4
    4eae:	4618      	mov	r0, r3
    4eb0:	f7ff f97e 	bl	41b0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4eb4:	68fb      	ldr	r3, [r7, #12]
    4eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d004      	beq.n	4ec6 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	3318      	adds	r3, #24
    4ec0:	4618      	mov	r0, r3
    4ec2:	f7ff f975 	bl	41b0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	3304      	adds	r3, #4
    4eca:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4ece:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ed2:	4619      	mov	r1, r3
    4ed4:	f7ff f90c 	bl	40f0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4ed8:	f000 fecc 	bl	5c74 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d11e      	bne.n	4f20 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4ee2:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	2b00      	cmp	r3, #0
    4eee:	d002      	beq.n	4ef6 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4ef0:	f000 fe9c 	bl	5c2c <vPortYieldFromISR>
    4ef4:	e014      	b.n	4f20 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4ef6:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4efe:	681a      	ldr	r2, [r3, #0]
    4f00:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	429a      	cmp	r2, r3
    4f0c:	d106      	bne.n	4f1c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f0e:	f241 4310 	movw	r3, #5136	; 0x1410
    4f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f16:	2200      	movs	r2, #0
    4f18:	601a      	str	r2, [r3, #0]
    4f1a:	e001      	b.n	4f20 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f1c:	f000 fa76 	bl	540c <vTaskSwitchContext>
				}
			}
		}
	}
    4f20:	3710      	adds	r7, #16
    4f22:	46bd      	mov	sp, r7
    4f24:	bd80      	pop	{r7, pc}
    4f26:	bf00      	nop

00004f28 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f28:	b480      	push	{r7}
    4f2a:	b085      	sub	sp, #20
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f30:	2300      	movs	r3, #0
    4f32:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f38:	68bb      	ldr	r3, [r7, #8]
    4f3a:	695a      	ldr	r2, [r3, #20]
    4f3c:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f44:	429a      	cmp	r2, r3
    4f46:	d10d      	bne.n	4f64 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f48:	68bb      	ldr	r3, [r7, #8]
    4f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f4c:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f54:	429a      	cmp	r2, r3
    4f56:	d005      	beq.n	4f64 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4f58:	68bb      	ldr	r3, [r7, #8]
    4f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d101      	bne.n	4f64 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4f60:	2301      	movs	r3, #1
    4f62:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4f64:	68fb      	ldr	r3, [r7, #12]
	}
    4f66:	4618      	mov	r0, r3
    4f68:	3714      	adds	r7, #20
    4f6a:	46bd      	mov	sp, r7
    4f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f70:	4770      	bx	lr
    4f72:	bf00      	nop

00004f74 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4f74:	b580      	push	{r7, lr}
    4f76:	b084      	sub	sp, #16
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4f80:	68fb      	ldr	r3, [r7, #12]
    4f82:	2b00      	cmp	r3, #0
    4f84:	d043      	beq.n	500e <vTaskResume+0x9a>
    4f86:	f241 4310 	movw	r3, #5136	; 0x1410
    4f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8e:	681b      	ldr	r3, [r3, #0]
    4f90:	68fa      	ldr	r2, [r7, #12]
    4f92:	429a      	cmp	r2, r3
    4f94:	d03b      	beq.n	500e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4f96:	f000 fe57 	bl	5c48 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4f9a:	68f8      	ldr	r0, [r7, #12]
    4f9c:	f7ff ffc4 	bl	4f28 <xTaskIsTaskSuspended>
    4fa0:	4603      	mov	r3, r0
    4fa2:	2b01      	cmp	r3, #1
    4fa4:	d131      	bne.n	500a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4fa6:	68fb      	ldr	r3, [r7, #12]
    4fa8:	3304      	adds	r3, #4
    4faa:	4618      	mov	r0, r3
    4fac:	f7ff f900 	bl	41b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4fb0:	68fb      	ldr	r3, [r7, #12]
    4fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fb4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	429a      	cmp	r2, r3
    4fc0:	d906      	bls.n	4fd0 <vTaskResume+0x5c>
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fc6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	601a      	str	r2, [r3, #0]
    4fd0:	68fb      	ldr	r3, [r7, #12]
    4fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fd4:	4613      	mov	r3, r2
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	4413      	add	r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	f241 4214 	movw	r2, #5140	; 0x1414
    4fe0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fe4:	441a      	add	r2, r3
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	3304      	adds	r3, #4
    4fea:	4610      	mov	r0, r2
    4fec:	4619      	mov	r1, r3
    4fee:	f7ff f87f 	bl	40f0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4ff2:	68fb      	ldr	r3, [r7, #12]
    4ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ff6:	f241 4310 	movw	r3, #5136	; 0x1410
    4ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffe:	681b      	ldr	r3, [r3, #0]
    5000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5002:	429a      	cmp	r2, r3
    5004:	d301      	bcc.n	500a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5006:	f000 fe11 	bl	5c2c <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    500a:	f000 fe33 	bl	5c74 <vPortExitCritical>
		}
	}
    500e:	3710      	adds	r7, #16
    5010:	46bd      	mov	sp, r7
    5012:	bd80      	pop	{r7, pc}

00005014 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5014:	b580      	push	{r7, lr}
    5016:	b086      	sub	sp, #24
    5018:	af00      	add	r7, sp, #0
    501a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    501c:	2300      	movs	r3, #0
    501e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5024:	2300      	movs	r3, #0
    5026:	60fb      	str	r3, [r7, #12]
    5028:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    502c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5030:	6938      	ldr	r0, [r7, #16]
    5032:	f7ff ff79 	bl	4f28 <xTaskIsTaskSuspended>
    5036:	4603      	mov	r3, r0
    5038:	2b01      	cmp	r3, #1
    503a:	d144      	bne.n	50c6 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    503c:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5044:	681b      	ldr	r3, [r3, #0]
    5046:	2b00      	cmp	r3, #0
    5048:	d134      	bne.n	50b4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    504a:	693b      	ldr	r3, [r7, #16]
    504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    504e:	f241 4310 	movw	r3, #5136	; 0x1410
    5052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5056:	681b      	ldr	r3, [r3, #0]
    5058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    505a:	429a      	cmp	r2, r3
    505c:	bf34      	ite	cc
    505e:	2300      	movcc	r3, #0
    5060:	2301      	movcs	r3, #1
    5062:	b2db      	uxtb	r3, r3
    5064:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5066:	693b      	ldr	r3, [r7, #16]
    5068:	3304      	adds	r3, #4
    506a:	4618      	mov	r0, r3
    506c:	f7ff f8a0 	bl	41b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5070:	693b      	ldr	r3, [r7, #16]
    5072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5074:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	681b      	ldr	r3, [r3, #0]
    507e:	429a      	cmp	r2, r3
    5080:	d906      	bls.n	5090 <xTaskResumeFromISR+0x7c>
    5082:	693b      	ldr	r3, [r7, #16]
    5084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5086:	f241 43f4 	movw	r3, #5364	; 0x14f4
    508a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508e:	601a      	str	r2, [r3, #0]
    5090:	693b      	ldr	r3, [r7, #16]
    5092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5094:	4613      	mov	r3, r2
    5096:	009b      	lsls	r3, r3, #2
    5098:	4413      	add	r3, r2
    509a:	009b      	lsls	r3, r3, #2
    509c:	f241 4214 	movw	r2, #5140	; 0x1414
    50a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50a4:	441a      	add	r2, r3
    50a6:	693b      	ldr	r3, [r7, #16]
    50a8:	3304      	adds	r3, #4
    50aa:	4610      	mov	r0, r2
    50ac:	4619      	mov	r1, r3
    50ae:	f7ff f81f 	bl	40f0 <vListInsertEnd>
    50b2:	e008      	b.n	50c6 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    50b4:	693b      	ldr	r3, [r7, #16]
    50b6:	3318      	adds	r3, #24
    50b8:	f241 40a8 	movw	r0, #5288	; 0x14a8
    50bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50c0:	4619      	mov	r1, r3
    50c2:	f7ff f815 	bl	40f0 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    50c6:	f04f 0000 	mov.w	r0, #0
    50ca:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    50ce:	697b      	ldr	r3, [r7, #20]
	}
    50d0:	4618      	mov	r0, r3
    50d2:	3718      	adds	r7, #24
    50d4:	46bd      	mov	sp, r7
    50d6:	bd80      	pop	{r7, pc}

000050d8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    50d8:	b580      	push	{r7, lr}
    50da:	b086      	sub	sp, #24
    50dc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    50de:	2300      	movs	r3, #0
    50e0:	9300      	str	r3, [sp, #0]
    50e2:	2300      	movs	r3, #0
    50e4:	9301      	str	r3, [sp, #4]
    50e6:	2300      	movs	r3, #0
    50e8:	9302      	str	r3, [sp, #8]
    50ea:	2300      	movs	r3, #0
    50ec:	9303      	str	r3, [sp, #12]
    50ee:	f245 60c5 	movw	r0, #22213	; 0x56c5
    50f2:	f2c0 0000 	movt	r0, #0
    50f6:	f648 2128 	movw	r1, #35368	; 0x8a28
    50fa:	f2c0 0101 	movt	r1, #1
    50fe:	2280      	movs	r2, #128	; 0x80
    5100:	2300      	movs	r3, #0
    5102:	f7ff fc6b 	bl	49dc <xTaskGenericCreate>
    5106:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	2b01      	cmp	r3, #1
    510c:	d111      	bne.n	5132 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    510e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5112:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5116:	f241 43f8 	movw	r3, #5368	; 0x14f8
    511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511e:	2201      	movs	r2, #1
    5120:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    5122:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512a:	2200      	movs	r2, #0
    512c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    512e:	f000 fd4f 	bl	5bd0 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    5132:	3708      	adds	r7, #8
    5134:	46bd      	mov	sp, r7
    5136:	bd80      	pop	{r7, pc}

00005138 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5138:	b580      	push	{r7, lr}
    513a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    513c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5140:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5144:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514c:	2200      	movs	r2, #0
    514e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5150:	f000 fd66 	bl	5c20 <vPortEndScheduler>
}
    5154:	bd80      	pop	{r7, pc}
    5156:	bf00      	nop

00005158 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5158:	b480      	push	{r7}
    515a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    515c:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5164:	681b      	ldr	r3, [r3, #0]
    5166:	1c5a      	adds	r2, r3, #1
    5168:	f241 43fc 	movw	r3, #5372	; 0x14fc
    516c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5170:	601a      	str	r2, [r3, #0]
}
    5172:	46bd      	mov	sp, r7
    5174:	f85d 7b04 	ldr.w	r7, [sp], #4
    5178:	4770      	bx	lr
    517a:	bf00      	nop

0000517c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    517c:	b590      	push	{r4, r7, lr}
    517e:	b083      	sub	sp, #12
    5180:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5182:	2300      	movs	r3, #0
    5184:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5186:	f000 fd5f 	bl	5c48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    518a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    518e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5192:	681b      	ldr	r3, [r3, #0]
    5194:	1e5a      	subs	r2, r3, #1
    5196:	f241 43fc 	movw	r3, #5372	; 0x14fc
    519a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51a0:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a8:	681b      	ldr	r3, [r3, #0]
    51aa:	2b00      	cmp	r3, #0
    51ac:	d177      	bne.n	529e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51ae:	f241 43e8 	movw	r3, #5352	; 0x14e8
    51b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b6:	681b      	ldr	r3, [r3, #0]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d070      	beq.n	529e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    51bc:	2300      	movs	r3, #0
    51be:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    51c0:	e036      	b.n	5230 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    51c2:	f241 43a8 	movw	r3, #5288	; 0x14a8
    51c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ca:	68db      	ldr	r3, [r3, #12]
    51cc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    51ce:	f104 0318 	add.w	r3, r4, #24
    51d2:	4618      	mov	r0, r3
    51d4:	f7fe ffec 	bl	41b0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    51d8:	1d23      	adds	r3, r4, #4
    51da:	4618      	mov	r0, r3
    51dc:	f7fe ffe8 	bl	41b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    51e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51e2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    51e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	429a      	cmp	r2, r3
    51ee:	d905      	bls.n	51fc <xTaskResumeAll+0x80>
    51f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51f2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    51f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fa:	601a      	str	r2, [r3, #0]
    51fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51fe:	4613      	mov	r3, r2
    5200:	009b      	lsls	r3, r3, #2
    5202:	4413      	add	r3, r2
    5204:	009b      	lsls	r3, r3, #2
    5206:	f241 4214 	movw	r2, #5140	; 0x1414
    520a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    520e:	441a      	add	r2, r3
    5210:	1d23      	adds	r3, r4, #4
    5212:	4610      	mov	r0, r2
    5214:	4619      	mov	r1, r3
    5216:	f7fe ff6b 	bl	40f0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    521a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    521c:	f241 4310 	movw	r3, #5136	; 0x1410
    5220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5228:	429a      	cmp	r2, r3
    522a:	d301      	bcc.n	5230 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    522c:	2301      	movs	r3, #1
    522e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5230:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5238:	681b      	ldr	r3, [r3, #0]
    523a:	2b00      	cmp	r3, #0
    523c:	d1c1      	bne.n	51c2 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    523e:	f241 5300 	movw	r3, #5376	; 0x1500
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	2b00      	cmp	r3, #0
    524a:	d014      	beq.n	5276 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    524c:	e00c      	b.n	5268 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    524e:	f000 f865 	bl	531c <vTaskIncrementTick>
						--uxMissedTicks;
    5252:	f241 5300 	movw	r3, #5376	; 0x1500
    5256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	1e5a      	subs	r2, r3, #1
    525e:	f241 5300 	movw	r3, #5376	; 0x1500
    5262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5266:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5268:	f241 5300 	movw	r3, #5376	; 0x1500
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	681b      	ldr	r3, [r3, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d1eb      	bne.n	524e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5276:	683b      	ldr	r3, [r7, #0]
    5278:	2b01      	cmp	r3, #1
    527a:	d006      	beq.n	528a <xTaskResumeAll+0x10e>
    527c:	f241 5304 	movw	r3, #5380	; 0x1504
    5280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	2b01      	cmp	r3, #1
    5288:	d109      	bne.n	529e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    528a:	2301      	movs	r3, #1
    528c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    528e:	f241 5304 	movw	r3, #5380	; 0x1504
    5292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5296:	2200      	movs	r2, #0
    5298:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    529a:	f000 fcc7 	bl	5c2c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    529e:	f000 fce9 	bl	5c74 <vPortExitCritical>

	return xAlreadyYielded;
    52a2:	687b      	ldr	r3, [r7, #4]
}
    52a4:	4618      	mov	r0, r3
    52a6:	370c      	adds	r7, #12
    52a8:	46bd      	mov	sp, r7
    52aa:	bd90      	pop	{r4, r7, pc}

000052ac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b082      	sub	sp, #8
    52b0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    52b2:	f000 fcc9 	bl	5c48 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    52b6:	f241 43ec 	movw	r3, #5356	; 0x14ec
    52ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52be:	681b      	ldr	r3, [r3, #0]
    52c0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    52c2:	f000 fcd7 	bl	5c74 <vPortExitCritical>

	return xTicks;
    52c6:	687b      	ldr	r3, [r7, #4]
}
    52c8:	4618      	mov	r0, r3
    52ca:	3708      	adds	r7, #8
    52cc:	46bd      	mov	sp, r7
    52ce:	bd80      	pop	{r7, pc}

000052d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    52d0:	b480      	push	{r7}
    52d2:	b083      	sub	sp, #12
    52d4:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    52d6:	2300      	movs	r3, #0
    52d8:	607b      	str	r3, [r7, #4]
    52da:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    52de:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    52e2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    52e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ea:	681b      	ldr	r3, [r3, #0]
    52ec:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    52ee:	f04f 0000 	mov.w	r0, #0
    52f2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    52f6:	683b      	ldr	r3, [r7, #0]
}
    52f8:	4618      	mov	r0, r3
    52fa:	370c      	adds	r7, #12
    52fc:	46bd      	mov	sp, r7
    52fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5302:	4770      	bx	lr

00005304 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5304:	b480      	push	{r7}
    5306:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5308:	f241 43e8 	movw	r3, #5352	; 0x14e8
    530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5310:	681b      	ldr	r3, [r3, #0]
}
    5312:	4618      	mov	r0, r3
    5314:	46bd      	mov	sp, r7
    5316:	f85d 7b04 	ldr.w	r7, [sp], #4
    531a:	4770      	bx	lr

0000531c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    531c:	b580      	push	{r7, lr}
    531e:	b082      	sub	sp, #8
    5320:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5322:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532a:	681b      	ldr	r3, [r3, #0]
    532c:	2b00      	cmp	r3, #0
    532e:	d153      	bne.n	53d8 <vTaskIncrementTick+0xbc>
	{
		++xTickCount;
    5330:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	1c5a      	adds	r2, r3, #1
    533c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5344:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5346:	f241 43ec 	movw	r3, #5356	; 0x14ec
    534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	2b00      	cmp	r3, #0
    5352:	d140      	bne.n	53d6 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5354:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	607b      	str	r3, [r7, #4]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5360:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5368:	681a      	ldr	r2, [r3, #0]
    536a:	f241 43a0 	movw	r3, #5280	; 0x14a0
    536e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5372:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5374:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537c:	687a      	ldr	r2, [r7, #4]
    537e:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5380:	f241 5308 	movw	r3, #5384	; 0x1508
    5384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	1c5a      	adds	r2, r3, #1
    538c:	f241 5308 	movw	r3, #5384	; 0x1508
    5390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5394:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5396:	f241 43a0 	movw	r3, #5280	; 0x14a0
    539a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539e:	681b      	ldr	r3, [r3, #0]
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	2b00      	cmp	r3, #0
    53a4:	d107      	bne.n	53b6 <vTaskIncrementTick+0x9a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53a6:	f240 5330 	movw	r3, #1328	; 0x530
    53aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ae:	f04f 32ff 	mov.w	r2, #4294967295
    53b2:	601a      	str	r2, [r3, #0]
    53b4:	e00f      	b.n	53d6 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    53b6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	68db      	ldr	r3, [r3, #12]
    53c2:	68db      	ldr	r3, [r3, #12]
    53c4:	603b      	str	r3, [r7, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    53c6:	683b      	ldr	r3, [r7, #0]
    53c8:	685a      	ldr	r2, [r3, #4]
    53ca:	f240 5330 	movw	r3, #1328	; 0x530
    53ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d2:	601a      	str	r2, [r3, #0]
    53d4:	e00d      	b.n	53f2 <vTaskIncrementTick+0xd6>
    53d6:	e00c      	b.n	53f2 <vTaskIncrementTick+0xd6>
		/* See if this tick has made a timeout expire. */
		//prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    53d8:	f241 5300 	movw	r3, #5376	; 0x1500
    53dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	1c5a      	adds	r2, r3, #1
    53e4:	f241 5300 	movw	r3, #5376	; 0x1500
    53e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ec:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    53ee:	f012 fa2f 	bl	17850 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    53f2:	f241 5300 	movw	r3, #5376	; 0x1500
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	681b      	ldr	r3, [r3, #0]
    53fc:	2b00      	cmp	r3, #0
    53fe:	d101      	bne.n	5404 <vTaskIncrementTick+0xe8>
		{
			vApplicationTickHook();
    5400:	f012 fa26 	bl	17850 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5404:	3708      	adds	r7, #8
    5406:	46bd      	mov	sp, r7
    5408:	bd80      	pop	{r7, pc}
    540a:	bf00      	nop

0000540c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    540c:	b580      	push	{r7, lr}
    540e:	b082      	sub	sp, #8
    5410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5412:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	2b00      	cmp	r3, #0
    541e:	d006      	beq.n	542e <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5420:	f241 5304 	movw	r3, #5380	; 0x1504
    5424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5428:	2201      	movs	r2, #1
    542a:	601a      	str	r2, [r3, #0]
    542c:	e047      	b.n	54be <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    542e:	f012 fa09 	bl	17844 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5432:	e00a      	b.n	544a <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5434:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	1e5a      	subs	r2, r3, #1
    5440:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5448:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    544a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    544e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5452:	6819      	ldr	r1, [r3, #0]
    5454:	f241 4214 	movw	r2, #5140	; 0x1414
    5458:	f2c2 0200 	movt	r2, #8192	; 0x2000
    545c:	460b      	mov	r3, r1
    545e:	009b      	lsls	r3, r3, #2
    5460:	440b      	add	r3, r1
    5462:	009b      	lsls	r3, r3, #2
    5464:	4413      	add	r3, r2
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	2b00      	cmp	r3, #0
    546a:	d0e3      	beq.n	5434 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    546c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5474:	681a      	ldr	r2, [r3, #0]
    5476:	4613      	mov	r3, r2
    5478:	009b      	lsls	r3, r3, #2
    547a:	4413      	add	r3, r2
    547c:	009b      	lsls	r3, r3, #2
    547e:	f241 4214 	movw	r2, #5140	; 0x1414
    5482:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5486:	4413      	add	r3, r2
    5488:	607b      	str	r3, [r7, #4]
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	685b      	ldr	r3, [r3, #4]
    548e:	685a      	ldr	r2, [r3, #4]
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	605a      	str	r2, [r3, #4]
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	685a      	ldr	r2, [r3, #4]
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	3308      	adds	r3, #8
    549c:	429a      	cmp	r2, r3
    549e:	d104      	bne.n	54aa <vTaskSwitchContext+0x9e>
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	685b      	ldr	r3, [r3, #4]
    54a4:	685a      	ldr	r2, [r3, #4]
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	605a      	str	r2, [r3, #4]
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	685b      	ldr	r3, [r3, #4]
    54ae:	68da      	ldr	r2, [r3, #12]
    54b0:	f241 4310 	movw	r3, #5136	; 0x1410
    54b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b8:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    54ba:	f012 f9bd 	bl	17838 <myTraceSwitchedIn>
	}
}
    54be:	3708      	adds	r7, #8
    54c0:	46bd      	mov	sp, r7
    54c2:	bd80      	pop	{r7, pc}

000054c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    54c4:	b580      	push	{r7, lr}
    54c6:	b084      	sub	sp, #16
    54c8:	af00      	add	r7, sp, #0
    54ca:	6078      	str	r0, [r7, #4]
    54cc:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    54ce:	f241 4310 	movw	r3, #5136	; 0x1410
    54d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	3318      	adds	r3, #24
    54da:	6878      	ldr	r0, [r7, #4]
    54dc:	4619      	mov	r1, r3
    54de:	f7fe fe2f 	bl	4140 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54e2:	f241 4310 	movw	r3, #5136	; 0x1410
    54e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	3304      	adds	r3, #4
    54ee:	4618      	mov	r0, r3
    54f0:	f7fe fe5e 	bl	41b0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    54f4:	683b      	ldr	r3, [r7, #0]
    54f6:	f1b3 3fff 	cmp.w	r3, #4294967295
    54fa:	d10d      	bne.n	5518 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54fc:	f241 4310 	movw	r3, #5136	; 0x1410
    5500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5504:	681b      	ldr	r3, [r3, #0]
    5506:	3304      	adds	r3, #4
    5508:	f241 40d4 	movw	r0, #5332	; 0x14d4
    550c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5510:	4619      	mov	r1, r3
    5512:	f7fe fded 	bl	40f0 <vListInsertEnd>
    5516:	e00a      	b.n	552e <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5518:	f241 43ec 	movw	r3, #5356	; 0x14ec
    551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5520:	681a      	ldr	r2, [r3, #0]
    5522:	683b      	ldr	r3, [r7, #0]
    5524:	4413      	add	r3, r2
    5526:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5528:	68f8      	ldr	r0, [r7, #12]
    552a:	f000 f99f 	bl	586c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    552e:	3710      	adds	r7, #16
    5530:	46bd      	mov	sp, r7
    5532:	bd80      	pop	{r7, pc}

00005534 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5534:	b580      	push	{r7, lr}
    5536:	b084      	sub	sp, #16
    5538:	af00      	add	r7, sp, #0
    553a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	68db      	ldr	r3, [r3, #12]
    5540:	68db      	ldr	r3, [r3, #12]
    5542:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5544:	68bb      	ldr	r3, [r7, #8]
    5546:	3318      	adds	r3, #24
    5548:	4618      	mov	r0, r3
    554a:	f7fe fe31 	bl	41b0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    554e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	2b00      	cmp	r3, #0
    555a:	d126      	bne.n	55aa <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    555c:	68bb      	ldr	r3, [r7, #8]
    555e:	3304      	adds	r3, #4
    5560:	4618      	mov	r0, r3
    5562:	f7fe fe25 	bl	41b0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5566:	68bb      	ldr	r3, [r7, #8]
    5568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    556a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    556e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	429a      	cmp	r2, r3
    5576:	d906      	bls.n	5586 <xTaskRemoveFromEventList+0x52>
    5578:	68bb      	ldr	r3, [r7, #8]
    557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    557c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5584:	601a      	str	r2, [r3, #0]
    5586:	68bb      	ldr	r3, [r7, #8]
    5588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    558a:	4613      	mov	r3, r2
    558c:	009b      	lsls	r3, r3, #2
    558e:	4413      	add	r3, r2
    5590:	009b      	lsls	r3, r3, #2
    5592:	f241 4214 	movw	r2, #5140	; 0x1414
    5596:	f2c2 0200 	movt	r2, #8192	; 0x2000
    559a:	441a      	add	r2, r3
    559c:	68bb      	ldr	r3, [r7, #8]
    559e:	3304      	adds	r3, #4
    55a0:	4610      	mov	r0, r2
    55a2:	4619      	mov	r1, r3
    55a4:	f7fe fda4 	bl	40f0 <vListInsertEnd>
    55a8:	e008      	b.n	55bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    55aa:	68bb      	ldr	r3, [r7, #8]
    55ac:	3318      	adds	r3, #24
    55ae:	f241 40a8 	movw	r0, #5288	; 0x14a8
    55b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55b6:	4619      	mov	r1, r3
    55b8:	f7fe fd9a 	bl	40f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    55bc:	68bb      	ldr	r3, [r7, #8]
    55be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55c0:	f241 4310 	movw	r3, #5136	; 0x1410
    55c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55cc:	429a      	cmp	r2, r3
    55ce:	d302      	bcc.n	55d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    55d0:	2301      	movs	r3, #1
    55d2:	60fb      	str	r3, [r7, #12]
    55d4:	e001      	b.n	55da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    55d6:	2300      	movs	r3, #0
    55d8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    55da:	68fb      	ldr	r3, [r7, #12]
}
    55dc:	4618      	mov	r0, r3
    55de:	3710      	adds	r7, #16
    55e0:	46bd      	mov	sp, r7
    55e2:	bd80      	pop	{r7, pc}

000055e4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    55e4:	b480      	push	{r7}
    55e6:	b083      	sub	sp, #12
    55e8:	af00      	add	r7, sp, #0
    55ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    55ec:	f241 5308 	movw	r3, #5384	; 0x1508
    55f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f4:	681a      	ldr	r2, [r3, #0]
    55f6:	687b      	ldr	r3, [r7, #4]
    55f8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    55fa:	f241 43ec 	movw	r3, #5356	; 0x14ec
    55fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5602:	681a      	ldr	r2, [r3, #0]
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	605a      	str	r2, [r3, #4]
}
    5608:	370c      	adds	r7, #12
    560a:	46bd      	mov	sp, r7
    560c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5610:	4770      	bx	lr
    5612:	bf00      	nop

00005614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5614:	b580      	push	{r7, lr}
    5616:	b084      	sub	sp, #16
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
    561c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    561e:	f000 fb13 	bl	5c48 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    5622:	683b      	ldr	r3, [r7, #0]
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	f1b3 3fff 	cmp.w	r3, #4294967295
    562a:	d102      	bne.n	5632 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    562c:	2300      	movs	r3, #0
    562e:	60fb      	str	r3, [r7, #12]
    5630:	e035      	b.n	569e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	681a      	ldr	r2, [r3, #0]
    5636:	f241 5308 	movw	r3, #5384	; 0x1508
    563a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	429a      	cmp	r2, r3
    5642:	d00b      	beq.n	565c <xTaskCheckForTimeOut+0x48>
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	685a      	ldr	r2, [r3, #4]
    5648:	f241 43ec 	movw	r3, #5356	; 0x14ec
    564c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5650:	681b      	ldr	r3, [r3, #0]
    5652:	429a      	cmp	r2, r3
    5654:	d802      	bhi.n	565c <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5656:	2301      	movs	r3, #1
    5658:	60fb      	str	r3, [r7, #12]
    565a:	e020      	b.n	569e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    565c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5664:	681a      	ldr	r2, [r3, #0]
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	685b      	ldr	r3, [r3, #4]
    566a:	1ad2      	subs	r2, r2, r3
    566c:	683b      	ldr	r3, [r7, #0]
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	429a      	cmp	r2, r3
    5672:	d212      	bcs.n	569a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5674:	683b      	ldr	r3, [r7, #0]
    5676:	681a      	ldr	r2, [r3, #0]
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	6859      	ldr	r1, [r3, #4]
    567c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	1acb      	subs	r3, r1, r3
    5688:	441a      	add	r2, r3
    568a:	683b      	ldr	r3, [r7, #0]
    568c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    568e:	6878      	ldr	r0, [r7, #4]
    5690:	f7ff ffa8 	bl	55e4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5694:	2300      	movs	r3, #0
    5696:	60fb      	str	r3, [r7, #12]
    5698:	e001      	b.n	569e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    569a:	2301      	movs	r3, #1
    569c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    569e:	f000 fae9 	bl	5c74 <vPortExitCritical>

	return xReturn;
    56a2:	68fb      	ldr	r3, [r7, #12]
}
    56a4:	4618      	mov	r0, r3
    56a6:	3710      	adds	r7, #16
    56a8:	46bd      	mov	sp, r7
    56aa:	bd80      	pop	{r7, pc}

000056ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    56ac:	b480      	push	{r7}
    56ae:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    56b0:	f241 5304 	movw	r3, #5380	; 0x1504
    56b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b8:	2201      	movs	r2, #1
    56ba:	601a      	str	r2, [r3, #0]
}
    56bc:	46bd      	mov	sp, r7
    56be:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c2:	4770      	bx	lr

000056c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    56c4:	b580      	push	{r7, lr}
    56c6:	b082      	sub	sp, #8
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    56cc:	f000 f886 	bl	57dc <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    56d0:	f000 faac 	bl	5c2c <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    56d4:	e7fa      	b.n	56cc <prvIdleTask+0x8>
    56d6:	bf00      	nop

000056d8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    56d8:	b580      	push	{r7, lr}
    56da:	b084      	sub	sp, #16
    56dc:	af00      	add	r7, sp, #0
    56de:	60f8      	str	r0, [r7, #12]
    56e0:	60b9      	str	r1, [r7, #8]
    56e2:	607a      	str	r2, [r7, #4]
    56e4:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    56e6:	68fb      	ldr	r3, [r7, #12]
    56e8:	3334      	adds	r3, #52	; 0x34
    56ea:	4618      	mov	r0, r3
    56ec:	68b9      	ldr	r1, [r7, #8]
    56ee:	2210      	movs	r2, #16
    56f0:	f013 f93c 	bl	1896c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    56f4:	68fb      	ldr	r3, [r7, #12]
    56f6:	2200      	movs	r2, #0
    56f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    56fc:	687b      	ldr	r3, [r7, #4]
    56fe:	2b04      	cmp	r3, #4
    5700:	d901      	bls.n	5706 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    5702:	2304      	movs	r3, #4
    5704:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5706:	68fb      	ldr	r3, [r7, #12]
    5708:	687a      	ldr	r2, [r7, #4]
    570a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    570c:	68fb      	ldr	r3, [r7, #12]
    570e:	687a      	ldr	r2, [r7, #4]
    5710:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	3304      	adds	r3, #4
    5716:	4618      	mov	r0, r3
    5718:	f7fe fcde 	bl	40d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    571c:	68fb      	ldr	r3, [r7, #12]
    571e:	3318      	adds	r3, #24
    5720:	4618      	mov	r0, r3
    5722:	f7fe fcd9 	bl	40d8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	68fa      	ldr	r2, [r7, #12]
    572a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    572c:	687b      	ldr	r3, [r7, #4]
    572e:	f1c3 0205 	rsb	r2, r3, #5
    5732:	68fb      	ldr	r3, [r7, #12]
    5734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	68fa      	ldr	r2, [r7, #12]
    573a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    573c:	3710      	adds	r7, #16
    573e:	46bd      	mov	sp, r7
    5740:	bd80      	pop	{r7, pc}
    5742:	bf00      	nop

00005744 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5744:	b580      	push	{r7, lr}
    5746:	b082      	sub	sp, #8
    5748:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    574a:	2300      	movs	r3, #0
    574c:	607b      	str	r3, [r7, #4]
    574e:	e00f      	b.n	5770 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5750:	687a      	ldr	r2, [r7, #4]
    5752:	4613      	mov	r3, r2
    5754:	009b      	lsls	r3, r3, #2
    5756:	4413      	add	r3, r2
    5758:	009b      	lsls	r3, r3, #2
    575a:	f241 4214 	movw	r2, #5140	; 0x1414
    575e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5762:	4413      	add	r3, r2
    5764:	4618      	mov	r0, r3
    5766:	f7fe fc97 	bl	4098 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	3301      	adds	r3, #1
    576e:	607b      	str	r3, [r7, #4]
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	2b04      	cmp	r3, #4
    5774:	d9ec      	bls.n	5750 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5776:	f241 4078 	movw	r0, #5240	; 0x1478
    577a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    577e:	f7fe fc8b 	bl	4098 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5782:	f241 408c 	movw	r0, #5260	; 0x148c
    5786:	f2c2 0000 	movt	r0, #8192	; 0x2000
    578a:	f7fe fc85 	bl	4098 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    578e:	f241 40a8 	movw	r0, #5288	; 0x14a8
    5792:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5796:	f7fe fc7f 	bl	4098 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    579a:	f241 40bc 	movw	r0, #5308	; 0x14bc
    579e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57a2:	f7fe fc79 	bl	4098 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    57a6:	f241 40d4 	movw	r0, #5332	; 0x14d4
    57aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57ae:	f7fe fc73 	bl	4098 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    57b2:	f241 43a0 	movw	r3, #5280	; 0x14a0
    57b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ba:	f241 4278 	movw	r2, #5240	; 0x1478
    57be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    57c4:	f241 43a4 	movw	r3, #5284	; 0x14a4
    57c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57cc:	f241 428c 	movw	r2, #5260	; 0x148c
    57d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57d4:	601a      	str	r2, [r3, #0]
}
    57d6:	3708      	adds	r7, #8
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}

000057dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    57dc:	b580      	push	{r7, lr}
    57de:	b082      	sub	sp, #8
    57e0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    57e2:	f241 43d0 	movw	r3, #5328	; 0x14d0
    57e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	2b00      	cmp	r3, #0
    57ee:	d03a      	beq.n	5866 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    57f0:	f7ff fcb2 	bl	5158 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    57f4:	f241 43bc 	movw	r3, #5308	; 0x14bc
    57f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	2b00      	cmp	r3, #0
    5800:	bf14      	ite	ne
    5802:	2300      	movne	r3, #0
    5804:	2301      	moveq	r3, #1
    5806:	b2db      	uxtb	r3, r3
    5808:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    580a:	f7ff fcb7 	bl	517c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	2b00      	cmp	r3, #0
    5812:	d128      	bne.n	5866 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5814:	f000 fa18 	bl	5c48 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5818:	f241 43bc 	movw	r3, #5308	; 0x14bc
    581c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5820:	68db      	ldr	r3, [r3, #12]
    5822:	68db      	ldr	r3, [r3, #12]
    5824:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5826:	683b      	ldr	r3, [r7, #0]
    5828:	3304      	adds	r3, #4
    582a:	4618      	mov	r0, r3
    582c:	f7fe fcc0 	bl	41b0 <vListRemove>
					--uxCurrentNumberOfTasks;
    5830:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5838:	681b      	ldr	r3, [r3, #0]
    583a:	1e5a      	subs	r2, r3, #1
    583c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5844:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5846:	f241 43d0 	movw	r3, #5328	; 0x14d0
    584a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584e:	681b      	ldr	r3, [r3, #0]
    5850:	1e5a      	subs	r2, r3, #1
    5852:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    585a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    585c:	f000 fa0a 	bl	5c74 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5860:	6838      	ldr	r0, [r7, #0]
    5862:	f000 f879 	bl	5958 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5866:	3708      	adds	r7, #8
    5868:	46bd      	mov	sp, r7
    586a:	bd80      	pop	{r7, pc}

0000586c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    586c:	b580      	push	{r7, lr}
    586e:	b082      	sub	sp, #8
    5870:	af00      	add	r7, sp, #0
    5872:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5874:	f241 4310 	movw	r3, #5136	; 0x1410
    5878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	687a      	ldr	r2, [r7, #4]
    5880:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5882:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588a:	681b      	ldr	r3, [r3, #0]
    588c:	687a      	ldr	r2, [r7, #4]
    588e:	429a      	cmp	r2, r3
    5890:	d20f      	bcs.n	58b2 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5892:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589a:	681a      	ldr	r2, [r3, #0]
    589c:	f241 4310 	movw	r3, #5136	; 0x1410
    58a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	3304      	adds	r3, #4
    58a8:	4610      	mov	r0, r2
    58aa:	4619      	mov	r1, r3
    58ac:	f7fe fc48 	bl	4140 <vListInsert>
    58b0:	e01c      	b.n	58ec <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    58b2:	f241 43a0 	movw	r3, #5280	; 0x14a0
    58b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ba:	681a      	ldr	r2, [r3, #0]
    58bc:	f241 4310 	movw	r3, #5136	; 0x1410
    58c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c4:	681b      	ldr	r3, [r3, #0]
    58c6:	3304      	adds	r3, #4
    58c8:	4610      	mov	r0, r2
    58ca:	4619      	mov	r1, r3
    58cc:	f7fe fc38 	bl	4140 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    58d0:	f240 5330 	movw	r3, #1328	; 0x530
    58d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	687a      	ldr	r2, [r7, #4]
    58dc:	429a      	cmp	r2, r3
    58de:	d205      	bcs.n	58ec <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    58e0:	f240 5330 	movw	r3, #1328	; 0x530
    58e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e8:	687a      	ldr	r2, [r7, #4]
    58ea:	601a      	str	r2, [r3, #0]
		}
	}
}
    58ec:	3708      	adds	r7, #8
    58ee:	46bd      	mov	sp, r7
    58f0:	bd80      	pop	{r7, pc}
    58f2:	bf00      	nop

000058f4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    58f4:	b580      	push	{r7, lr}
    58f6:	b084      	sub	sp, #16
    58f8:	af00      	add	r7, sp, #0
    58fa:	4603      	mov	r3, r0
    58fc:	6039      	str	r1, [r7, #0]
    58fe:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5900:	2050      	movs	r0, #80	; 0x50
    5902:	f000 fa1b 	bl	5d3c <pvPortMalloc>
    5906:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5908:	68fb      	ldr	r3, [r7, #12]
    590a:	2b00      	cmp	r3, #0
    590c:	d01f      	beq.n	594e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	2b00      	cmp	r3, #0
    5912:	d106      	bne.n	5922 <prvAllocateTCBAndStack+0x2e>
    5914:	88fb      	ldrh	r3, [r7, #6]
    5916:	009b      	lsls	r3, r3, #2
    5918:	4618      	mov	r0, r3
    591a:	f000 fa0f 	bl	5d3c <pvPortMalloc>
    591e:	4603      	mov	r3, r0
    5920:	e000      	b.n	5924 <prvAllocateTCBAndStack+0x30>
    5922:	683b      	ldr	r3, [r7, #0]
    5924:	68fa      	ldr	r2, [r7, #12]
    5926:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    592c:	2b00      	cmp	r3, #0
    592e:	d105      	bne.n	593c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5930:	68f8      	ldr	r0, [r7, #12]
    5932:	f000 fac7 	bl	5ec4 <vPortFree>
			pxNewTCB = NULL;
    5936:	2300      	movs	r3, #0
    5938:	60fb      	str	r3, [r7, #12]
    593a:	e008      	b.n	594e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    593c:	68fb      	ldr	r3, [r7, #12]
    593e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5940:	88fb      	ldrh	r3, [r7, #6]
    5942:	009b      	lsls	r3, r3, #2
    5944:	4610      	mov	r0, r2
    5946:	21a5      	movs	r1, #165	; 0xa5
    5948:	461a      	mov	r2, r3
    594a:	f012 ffbf 	bl	188cc <memset>
		}
	}

	return pxNewTCB;
    594e:	68fb      	ldr	r3, [r7, #12]
}
    5950:	4618      	mov	r0, r3
    5952:	3710      	adds	r7, #16
    5954:	46bd      	mov	sp, r7
    5956:	bd80      	pop	{r7, pc}

00005958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5958:	b580      	push	{r7, lr}
    595a:	b082      	sub	sp, #8
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5964:	4618      	mov	r0, r3
    5966:	f000 faad 	bl	5ec4 <vPortFree>
		vPortFree( pxTCB );
    596a:	6878      	ldr	r0, [r7, #4]
    596c:	f000 faaa 	bl	5ec4 <vPortFree>
	}
    5970:	3708      	adds	r7, #8
    5972:	46bd      	mov	sp, r7
    5974:	bd80      	pop	{r7, pc}
    5976:	bf00      	nop

00005978 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5978:	b480      	push	{r7}
    597a:	b083      	sub	sp, #12
    597c:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    597e:	f241 4310 	movw	r3, #5136	; 0x1410
    5982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5986:	681b      	ldr	r3, [r3, #0]
    5988:	607b      	str	r3, [r7, #4]

		return xReturn;
    598a:	687b      	ldr	r3, [r7, #4]
	}
    598c:	4618      	mov	r0, r3
    598e:	370c      	adds	r7, #12
    5990:	46bd      	mov	sp, r7
    5992:	f85d 7b04 	ldr.w	r7, [sp], #4
    5996:	4770      	bx	lr

00005998 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5998:	b580      	push	{r7, lr}
    599a:	b084      	sub	sp, #16
    599c:	af00      	add	r7, sp, #0
    599e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    59a4:	68fb      	ldr	r3, [r7, #12]
    59a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59a8:	f241 4310 	movw	r3, #5136	; 0x1410
    59ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59b4:	429a      	cmp	r2, r3
    59b6:	d24f      	bcs.n	5a58 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    59b8:	f241 4310 	movw	r3, #5136	; 0x1410
    59bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59c4:	f1c3 0205 	rsb	r2, r3, #5
    59c8:	68fb      	ldr	r3, [r7, #12]
    59ca:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    59cc:	68fb      	ldr	r3, [r7, #12]
    59ce:	6959      	ldr	r1, [r3, #20]
    59d0:	68fb      	ldr	r3, [r7, #12]
    59d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59d4:	4613      	mov	r3, r2
    59d6:	009b      	lsls	r3, r3, #2
    59d8:	4413      	add	r3, r2
    59da:	009b      	lsls	r3, r3, #2
    59dc:	f241 4214 	movw	r2, #5140	; 0x1414
    59e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59e4:	4413      	add	r3, r2
    59e6:	4299      	cmp	r1, r3
    59e8:	d12e      	bne.n	5a48 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    59ea:	68fb      	ldr	r3, [r7, #12]
    59ec:	3304      	adds	r3, #4
    59ee:	4618      	mov	r0, r3
    59f0:	f7fe fbde 	bl	41b0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    59f4:	f241 4310 	movw	r3, #5136	; 0x1410
    59f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a00:	68fb      	ldr	r3, [r7, #12]
    5a02:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a08:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	429a      	cmp	r2, r3
    5a14:	d906      	bls.n	5a24 <vTaskPriorityInherit+0x8c>
    5a16:	68fb      	ldr	r3, [r7, #12]
    5a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a1a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a22:	601a      	str	r2, [r3, #0]
    5a24:	68fb      	ldr	r3, [r7, #12]
    5a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a28:	4613      	mov	r3, r2
    5a2a:	009b      	lsls	r3, r3, #2
    5a2c:	4413      	add	r3, r2
    5a2e:	009b      	lsls	r3, r3, #2
    5a30:	f241 4214 	movw	r2, #5140	; 0x1414
    5a34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a38:	441a      	add	r2, r3
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	3304      	adds	r3, #4
    5a3e:	4610      	mov	r0, r2
    5a40:	4619      	mov	r1, r3
    5a42:	f7fe fb55 	bl	40f0 <vListInsertEnd>
    5a46:	e007      	b.n	5a58 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a48:	f241 4310 	movw	r3, #5136	; 0x1410
    5a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a54:	68fb      	ldr	r3, [r7, #12]
    5a56:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5a58:	3710      	adds	r7, #16
    5a5a:	46bd      	mov	sp, r7
    5a5c:	bd80      	pop	{r7, pc}
    5a5e:	bf00      	nop

00005a60 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5a60:	b580      	push	{r7, lr}
    5a62:	b084      	sub	sp, #16
    5a64:	af00      	add	r7, sp, #0
    5a66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a68:	687b      	ldr	r3, [r7, #4]
    5a6a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d035      	beq.n	5ade <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a76:	68fb      	ldr	r3, [r7, #12]
    5a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5a7a:	429a      	cmp	r2, r3
    5a7c:	d02f      	beq.n	5ade <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a7e:	68fb      	ldr	r3, [r7, #12]
    5a80:	3304      	adds	r3, #4
    5a82:	4618      	mov	r0, r3
    5a84:	f7fe fb94 	bl	41b0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5a88:	68fb      	ldr	r3, [r7, #12]
    5a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5a90:	68fb      	ldr	r3, [r7, #12]
    5a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a94:	f1c3 0205 	rsb	r2, r3, #5
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5a9c:	68fb      	ldr	r3, [r7, #12]
    5a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aa0:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	429a      	cmp	r2, r3
    5aac:	d906      	bls.n	5abc <vTaskPriorityDisinherit+0x5c>
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ab2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aba:	601a      	str	r2, [r3, #0]
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac0:	4613      	mov	r3, r2
    5ac2:	009b      	lsls	r3, r3, #2
    5ac4:	4413      	add	r3, r2
    5ac6:	009b      	lsls	r3, r3, #2
    5ac8:	f241 4214 	movw	r2, #5140	; 0x1414
    5acc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ad0:	441a      	add	r2, r3
    5ad2:	68fb      	ldr	r3, [r7, #12]
    5ad4:	3304      	adds	r3, #4
    5ad6:	4610      	mov	r0, r2
    5ad8:	4619      	mov	r1, r3
    5ada:	f7fe fb09 	bl	40f0 <vListInsertEnd>
			}
		}
	}
    5ade:	3710      	adds	r7, #16
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}

00005ae4 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5ae4:	b480      	push	{r7}
    5ae6:	b083      	sub	sp, #12
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5af0:	4618      	mov	r0, r3
    5af2:	370c      	adds	r7, #12
    5af4:	46bd      	mov	sp, r7
    5af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afa:	4770      	bx	lr

00005afc <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5b08:	4618      	mov	r0, r3
    5b0a:	370c      	adds	r7, #12
    5b0c:	46bd      	mov	sp, r7
    5b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b12:	4770      	bx	lr

00005b14 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5b14:	b480      	push	{r7}
    5b16:	b083      	sub	sp, #12
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
    5b1c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	683a      	ldr	r2, [r7, #0]
    5b22:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5b24:	370c      	adds	r7, #12
    5b26:	46bd      	mov	sp, r7
    5b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2c:	4770      	bx	lr
    5b2e:	bf00      	nop

00005b30 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5b30:	b480      	push	{r7}
    5b32:	b083      	sub	sp, #12
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
    5b38:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	683a      	ldr	r2, [r7, #0]
    5b3e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5b40:	370c      	adds	r7, #12
    5b42:	46bd      	mov	sp, r7
    5b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop

00005b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5b4c:	b480      	push	{r7}
    5b4e:	b085      	sub	sp, #20
    5b50:	af00      	add	r7, sp, #0
    5b52:	60f8      	str	r0, [r7, #12]
    5b54:	60b9      	str	r1, [r7, #8]
    5b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5b58:	68fb      	ldr	r3, [r7, #12]
    5b5a:	3b04      	subs	r3, #4
    5b5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5b5e:	68fb      	ldr	r3, [r7, #12]
    5b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b66:	68fb      	ldr	r3, [r7, #12]
    5b68:	3b04      	subs	r3, #4
    5b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5b6c:	68ba      	ldr	r2, [r7, #8]
    5b6e:	68fb      	ldr	r3, [r7, #12]
    5b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	3b04      	subs	r3, #4
    5b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5b78:	68fb      	ldr	r3, [r7, #12]
    5b7a:	2200      	movs	r2, #0
    5b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	3b14      	subs	r3, #20
    5b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5b84:	687a      	ldr	r2, [r7, #4]
    5b86:	68fb      	ldr	r3, [r7, #12]
    5b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5b8a:	68fb      	ldr	r3, [r7, #12]
    5b8c:	3b20      	subs	r3, #32
    5b8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5b90:	68fb      	ldr	r3, [r7, #12]
}
    5b92:	4618      	mov	r0, r3
    5b94:	3714      	adds	r7, #20
    5b96:	46bd      	mov	sp, r7
    5b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9c:	4770      	bx	lr
    5b9e:	bf00      	nop

00005ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5ba0:	4b06      	ldr	r3, [pc, #24]	; (5bbc <pxCurrentTCBConst2>)
    5ba2:	6819      	ldr	r1, [r3, #0]
    5ba4:	6808      	ldr	r0, [r1, #0]
    5ba6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5baa:	f380 8809 	msr	PSP, r0
    5bae:	f04f 0000 	mov.w	r0, #0
    5bb2:	f380 8811 	msr	BASEPRI, r0
    5bb6:	f04e 0e0d 	orr.w	lr, lr, #13
    5bba:	4770      	bx	lr

00005bbc <pxCurrentTCBConst2>:
    5bbc:	20001410 	.word	0x20001410

00005bc0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5bc0:	485d      	ldr	r0, [pc, #372]	; (5d38 <prvSetupTimerInterrupt+0x2c>)
    5bc2:	6800      	ldr	r0, [r0, #0]
    5bc4:	6800      	ldr	r0, [r0, #0]
    5bc6:	f380 8808 	msr	MSP, r0
    5bca:	b662      	cpsie	i
    5bcc:	df00      	svc	0
    5bce:	bf00      	nop

00005bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5bd4:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bdc:	f64e 5220 	movw	r2, #60704	; 0xed20
    5be0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5be4:	6812      	ldr	r2, [r2, #0]
    5be6:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5bea:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5bec:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bf0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bf4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5bf8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5bfc:	6812      	ldr	r2, [r2, #0]
    5bfe:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5c02:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5c04:	f000 f882 	bl	5d0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5c08:	f240 5334 	movw	r3, #1332	; 0x534
    5c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c10:	2200      	movs	r2, #0
    5c12:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5c14:	f7ff ffd4 	bl	5bc0 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5c18:	2300      	movs	r3, #0
}
    5c1a:	4618      	mov	r0, r3
    5c1c:	bd80      	pop	{r7, pc}
    5c1e:	bf00      	nop

00005c20 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5c20:	b480      	push	{r7}
    5c22:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5c24:	46bd      	mov	sp, r7
    5c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2a:	4770      	bx	lr

00005c2c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5c2c:	b480      	push	{r7}
    5c2e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5c30:	f64e 5304 	movw	r3, #60676	; 0xed04
    5c34:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c3c:	601a      	str	r2, [r3, #0]
}
    5c3e:	46bd      	mov	sp, r7
    5c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c44:	4770      	bx	lr
    5c46:	bf00      	nop

00005c48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5c48:	b480      	push	{r7}
    5c4a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5c4c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c50:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5c54:	f240 5334 	movw	r3, #1332	; 0x534
    5c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	1c5a      	adds	r2, r3, #1
    5c60:	f240 5334 	movw	r3, #1332	; 0x534
    5c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c68:	601a      	str	r2, [r3, #0]
}
    5c6a:	46bd      	mov	sp, r7
    5c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c70:	4770      	bx	lr
    5c72:	bf00      	nop

00005c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5c74:	b480      	push	{r7}
    5c76:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5c78:	f240 5334 	movw	r3, #1332	; 0x534
    5c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	1e5a      	subs	r2, r3, #1
    5c84:	f240 5334 	movw	r3, #1332	; 0x534
    5c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5c8e:	f240 5334 	movw	r3, #1332	; 0x534
    5c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c96:	681b      	ldr	r3, [r3, #0]
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d103      	bne.n	5ca4 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5c9c:	f04f 0000 	mov.w	r0, #0
    5ca0:	f380 8811 	msr	BASEPRI, r0
	}
}
    5ca4:	46bd      	mov	sp, r7
    5ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5caa:	4770      	bx	lr

00005cac <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5cac:	f3ef 8009 	mrs	r0, PSP
    5cb0:	4b0c      	ldr	r3, [pc, #48]	; (5ce4 <pxCurrentTCBConst>)
    5cb2:	681a      	ldr	r2, [r3, #0]
    5cb4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cb8:	6010      	str	r0, [r2, #0]
    5cba:	e92d 4008 	stmdb	sp!, {r3, lr}
    5cbe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cc2:	f380 8811 	msr	BASEPRI, r0
    5cc6:	f7ff fba1 	bl	540c <vTaskSwitchContext>
    5cca:	f04f 0000 	mov.w	r0, #0
    5cce:	f380 8811 	msr	BASEPRI, r0
    5cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5cd6:	6819      	ldr	r1, [r3, #0]
    5cd8:	6808      	ldr	r0, [r1, #0]
    5cda:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cde:	f380 8809 	msr	PSP, r0
    5ce2:	4770      	bx	lr

00005ce4 <pxCurrentTCBConst>:
    5ce4:	20001410 	.word	0x20001410

00005ce8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b082      	sub	sp, #8
    5cec:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5cee:	2300      	movs	r3, #0
    5cf0:	607b      	str	r3, [r7, #4]
    5cf2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cf6:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5cfa:	f7ff fb0f 	bl	531c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5cfe:	f04f 0000 	mov.w	r0, #0
    5d02:	f380 8811 	msr	BASEPRI, r0
}
    5d06:	3708      	adds	r7, #8
    5d08:	46bd      	mov	sp, r7
    5d0a:	bd80      	pop	{r7, pc}

00005d0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5d0c:	b480      	push	{r7}
    5d0e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5d10:	f24e 0314 	movw	r3, #57364	; 0xe014
    5d14:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d18:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5d1c:	f2c0 0203 	movt	r2, #3
    5d20:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5d22:	f24e 0310 	movw	r3, #57360	; 0xe010
    5d26:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d2a:	2207      	movs	r2, #7
    5d2c:	601a      	str	r2, [r3, #0]
}
    5d2e:	46bd      	mov	sp, r7
    5d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d34:	4770      	bx	lr
    5d36:	0000      	.short	0x0000
    5d38:	e000ed08 	.word	0xe000ed08

00005d3c <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b08a      	sub	sp, #40	; 0x28
    5d40:	af00      	add	r7, sp, #0
    5d42:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5d44:	2300      	movs	r3, #0
    5d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5d48:	f7ff fa06 	bl	5158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5d4c:	f24c 5320 	movw	r3, #50464	; 0xc520
    5d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	2b00      	cmp	r3, #0
    5d58:	d130      	bne.n	5dbc <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5d5a:	f24c 5310 	movw	r3, #50448	; 0xc510
    5d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d62:	f241 5210 	movw	r2, #5392	; 0x1510
    5d66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d6a:	601a      	str	r2, [r3, #0]
    5d6c:	f24c 5310 	movw	r3, #50448	; 0xc510
    5d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d74:	2200      	movs	r2, #0
    5d76:	605a      	str	r2, [r3, #4]
    5d78:	f24c 5318 	movw	r3, #50456	; 0xc518
    5d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d80:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5d84:	605a      	str	r2, [r3, #4]
    5d86:	f24c 5318 	movw	r3, #50456	; 0xc518
    5d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8e:	2200      	movs	r2, #0
    5d90:	601a      	str	r2, [r3, #0]
    5d92:	f241 5310 	movw	r3, #5392	; 0x1510
    5d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9a:	617b      	str	r3, [r7, #20]
    5d9c:	697b      	ldr	r3, [r7, #20]
    5d9e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5da2:	605a      	str	r2, [r3, #4]
    5da4:	697a      	ldr	r2, [r7, #20]
    5da6:	f24c 5318 	movw	r3, #50456	; 0xc518
    5daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dae:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5db0:	f24c 5320 	movw	r3, #50464	; 0xc520
    5db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5db8:	2201      	movs	r2, #1
    5dba:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d00d      	beq.n	5dde <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5dc2:	2310      	movs	r3, #16
    5dc4:	687a      	ldr	r2, [r7, #4]
    5dc6:	4413      	add	r3, r2
    5dc8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	f003 0307 	and.w	r3, r3, #7
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d004      	beq.n	5dde <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	f023 0307 	bic.w	r3, r3, #7
    5dda:	3308      	adds	r3, #8
    5ddc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	2b00      	cmp	r3, #0
    5de2:	d068      	beq.n	5eb6 <pvPortMalloc+0x17a>
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5dea:	d264      	bcs.n	5eb6 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5dec:	f24c 5310 	movw	r3, #50448	; 0xc510
    5df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5df4:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5df6:	f24c 5310 	movw	r3, #50448	; 0xc510
    5dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e02:	e004      	b.n	5e0e <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e06:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e0a:	681b      	ldr	r3, [r3, #0]
    5e0c:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e10:	685a      	ldr	r2, [r3, #4]
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	429a      	cmp	r2, r3
    5e16:	d203      	bcs.n	5e20 <pvPortMalloc+0xe4>
    5e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d1f1      	bne.n	5e04 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e22:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e2a:	429a      	cmp	r2, r3
    5e2c:	d043      	beq.n	5eb6 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5e2e:	6a3b      	ldr	r3, [r7, #32]
    5e30:	681a      	ldr	r2, [r3, #0]
    5e32:	2310      	movs	r3, #16
    5e34:	4413      	add	r3, r2
    5e36:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e3a:	681a      	ldr	r2, [r3, #0]
    5e3c:	6a3b      	ldr	r3, [r7, #32]
    5e3e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e42:	685a      	ldr	r2, [r3, #4]
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	1ad2      	subs	r2, r2, r3
    5e48:	2310      	movs	r3, #16
    5e4a:	005b      	lsls	r3, r3, #1
    5e4c:	429a      	cmp	r2, r3
    5e4e:	d925      	bls.n	5e9c <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	4413      	add	r3, r2
    5e56:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e5a:	685a      	ldr	r2, [r3, #4]
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	1ad2      	subs	r2, r2, r3
    5e60:	693b      	ldr	r3, [r7, #16]
    5e62:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e66:	687a      	ldr	r2, [r7, #4]
    5e68:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5e6a:	693b      	ldr	r3, [r7, #16]
    5e6c:	685b      	ldr	r3, [r3, #4]
    5e6e:	60fb      	str	r3, [r7, #12]
    5e70:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e78:	61bb      	str	r3, [r7, #24]
    5e7a:	e002      	b.n	5e82 <pvPortMalloc+0x146>
    5e7c:	69bb      	ldr	r3, [r7, #24]
    5e7e:	681b      	ldr	r3, [r3, #0]
    5e80:	61bb      	str	r3, [r7, #24]
    5e82:	69bb      	ldr	r3, [r7, #24]
    5e84:	681b      	ldr	r3, [r3, #0]
    5e86:	685a      	ldr	r2, [r3, #4]
    5e88:	68fb      	ldr	r3, [r7, #12]
    5e8a:	429a      	cmp	r2, r3
    5e8c:	d3f6      	bcc.n	5e7c <pvPortMalloc+0x140>
    5e8e:	69bb      	ldr	r3, [r7, #24]
    5e90:	681a      	ldr	r2, [r3, #0]
    5e92:	693b      	ldr	r3, [r7, #16]
    5e94:	601a      	str	r2, [r3, #0]
    5e96:	69bb      	ldr	r3, [r7, #24]
    5e98:	693a      	ldr	r2, [r7, #16]
    5e9a:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5e9c:	f240 5338 	movw	r3, #1336	; 0x538
    5ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea4:	681a      	ldr	r2, [r3, #0]
    5ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ea8:	685b      	ldr	r3, [r3, #4]
    5eaa:	1ad2      	subs	r2, r2, r3
    5eac:	f240 5338 	movw	r3, #1336	; 0x538
    5eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb4:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5eb6:	f7ff f961 	bl	517c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5eba:	69fb      	ldr	r3, [r7, #28]
}
    5ebc:	4618      	mov	r0, r3
    5ebe:	3728      	adds	r7, #40	; 0x28
    5ec0:	46bd      	mov	sp, r7
    5ec2:	bd80      	pop	{r7, pc}

00005ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5ec4:	b580      	push	{r7, lr}
    5ec6:	b086      	sub	sp, #24
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d030      	beq.n	5f38 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5ed6:	2310      	movs	r3, #16
    5ed8:	425b      	negs	r3, r3
    5eda:	693a      	ldr	r2, [r7, #16]
    5edc:	4413      	add	r3, r2
    5ede:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ee0:	693b      	ldr	r3, [r7, #16]
    5ee2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5ee4:	f7ff f938 	bl	5158 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5ee8:	68fb      	ldr	r3, [r7, #12]
    5eea:	685b      	ldr	r3, [r3, #4]
    5eec:	60bb      	str	r3, [r7, #8]
    5eee:	f24c 5310 	movw	r3, #50448	; 0xc510
    5ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef6:	617b      	str	r3, [r7, #20]
    5ef8:	e002      	b.n	5f00 <vPortFree+0x3c>
    5efa:	697b      	ldr	r3, [r7, #20]
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	617b      	str	r3, [r7, #20]
    5f00:	697b      	ldr	r3, [r7, #20]
    5f02:	681b      	ldr	r3, [r3, #0]
    5f04:	685a      	ldr	r2, [r3, #4]
    5f06:	68bb      	ldr	r3, [r7, #8]
    5f08:	429a      	cmp	r2, r3
    5f0a:	d3f6      	bcc.n	5efa <vPortFree+0x36>
    5f0c:	697b      	ldr	r3, [r7, #20]
    5f0e:	681a      	ldr	r2, [r3, #0]
    5f10:	68fb      	ldr	r3, [r7, #12]
    5f12:	601a      	str	r2, [r3, #0]
    5f14:	697b      	ldr	r3, [r7, #20]
    5f16:	68fa      	ldr	r2, [r7, #12]
    5f18:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	685a      	ldr	r2, [r3, #4]
    5f1e:	f240 5338 	movw	r3, #1336	; 0x538
    5f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	441a      	add	r2, r3
    5f2a:	f240 5338 	movw	r3, #1336	; 0x538
    5f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f32:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5f34:	f7ff f922 	bl	517c <xTaskResumeAll>
	}
}
    5f38:	3718      	adds	r7, #24
    5f3a:	46bd      	mov	sp, r7
    5f3c:	bd80      	pop	{r7, pc}
    5f3e:	bf00      	nop

00005f40 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5f40:	b480      	push	{r7}
    5f42:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5f44:	f240 5338 	movw	r3, #1336	; 0x538
    5f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4c:	681b      	ldr	r3, [r3, #0]
}
    5f4e:	4618      	mov	r0, r3
    5f50:	46bd      	mov	sp, r7
    5f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f56:	4770      	bx	lr

00005f58 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5f58:	b480      	push	{r7}
    5f5a:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5f5c:	46bd      	mov	sp, r7
    5f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f62:	4770      	bx	lr
    5f64:	0000      	movs	r0, r0
	...

00005f68 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5f68:	b580      	push	{r7, lr}
    5f6a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5f6c:	f24c 5342 	movw	r3, #50498	; 0xc542
    5f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f74:	781b      	ldrb	r3, [r3, #0]
    5f76:	2b00      	cmp	r3, #0
    5f78:	f040 815d 	bne.w	6236 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5f7c:	f24c 532a 	movw	r3, #50474	; 0xc52a
    5f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f84:	881b      	ldrh	r3, [r3, #0]
    5f86:	2b09      	cmp	r3, #9
    5f88:	f201 8145 	bhi.w	7216 <ground_calibrate+0x12ae>
    5f8c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    5f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	2b01      	cmp	r3, #1
    5f98:	f041 813d 	bne.w	7216 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5f9c:	f24c 5342 	movw	r3, #50498	; 0xc542
    5fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa4:	2201      	movs	r2, #1
    5fa6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5fa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    5fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb0:	781a      	ldrb	r2, [r3, #0]
    5fb2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    5fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	429a      	cmp	r2, r3
    5fc0:	d313      	bcc.n	5fea <ground_calibrate+0x82>
    5fc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    5fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	b2db      	uxtb	r3, r3
    5fce:	461a      	mov	r2, r3
    5fd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    5fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	1ad3      	subs	r3, r2, r3
    5fdc:	33ff      	adds	r3, #255	; 0xff
    5fde:	2b04      	cmp	r3, #4
    5fe0:	bfd4      	ite	le
    5fe2:	2300      	movle	r3, #0
    5fe4:	2301      	movgt	r3, #1
    5fe6:	b2db      	uxtb	r3, r3
    5fe8:	e011      	b.n	600e <ground_calibrate+0xa6>
    5fea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    5fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff2:	781b      	ldrb	r3, [r3, #0]
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	461a      	mov	r2, r3
    5ff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    5ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	1ad3      	subs	r3, r2, r3
    6004:	2b04      	cmp	r3, #4
    6006:	bfd4      	ite	le
    6008:	2300      	movle	r3, #0
    600a:	2301      	movgt	r3, #1
    600c:	b2db      	uxtb	r3, r3
    600e:	2b00      	cmp	r3, #0
    6010:	f000 8103 	beq.w	621a <ground_calibrate+0x2b2>
    6014:	f24c 5349 	movw	r3, #50505	; 0xc549
    6018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	461a      	mov	r2, r3
    6020:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6028:	2105      	movs	r1, #5
    602a:	5499      	strb	r1, [r3, r2]
    602c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	3301      	adds	r3, #1
    6038:	b2da      	uxtb	r2, r3
    603a:	f24c 5349 	movw	r3, #50505	; 0xc549
    603e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6042:	701a      	strb	r2, [r3, #0]
    6044:	f24c 5349 	movw	r3, #50505	; 0xc549
    6048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	2bff      	cmp	r3, #255	; 0xff
    6050:	d105      	bne.n	605e <ground_calibrate+0xf6>
    6052:	f24c 5349 	movw	r3, #50505	; 0xc549
    6056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605a:	2200      	movs	r2, #0
    605c:	701a      	strb	r2, [r3, #0]
    605e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	461a      	mov	r2, r3
    606a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    606e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6072:	2102      	movs	r1, #2
    6074:	5499      	strb	r1, [r3, r2]
    6076:	f24c 5349 	movw	r3, #50505	; 0xc549
    607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607e:	781b      	ldrb	r3, [r3, #0]
    6080:	3301      	adds	r3, #1
    6082:	b2da      	uxtb	r2, r3
    6084:	f24c 5349 	movw	r3, #50505	; 0xc549
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	701a      	strb	r2, [r3, #0]
    608e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	2bff      	cmp	r3, #255	; 0xff
    609a:	d105      	bne.n	60a8 <ground_calibrate+0x140>
    609c:	f24c 5349 	movw	r3, #50505	; 0xc549
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	2200      	movs	r2, #0
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    60ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b0:	2202      	movs	r2, #2
    60b2:	701a      	strb	r2, [r3, #0]
    60b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	2202      	movs	r2, #2
    60be:	701a      	strb	r2, [r3, #0]
    60c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	461a      	mov	r2, r3
    60cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    60d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d4:	7819      	ldrb	r1, [r3, #0]
    60d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    60da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60de:	5499      	strb	r1, [r3, r2]
    60e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    60e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	3301      	adds	r3, #1
    60ec:	b2da      	uxtb	r2, r3
    60ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    60f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f6:	701a      	strb	r2, [r3, #0]
    60f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    60fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	2bff      	cmp	r3, #255	; 0xff
    6104:	d105      	bne.n	6112 <ground_calibrate+0x1aa>
    6106:	f24c 5349 	movw	r3, #50505	; 0xc549
    610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610e:	2200      	movs	r2, #0
    6110:	701a      	strb	r2, [r3, #0]
    6112:	f24c 5349 	movw	r3, #50505	; 0xc549
    6116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	461a      	mov	r2, r3
    611e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6126:	7819      	ldrb	r1, [r3, #0]
    6128:	f24c 534c 	movw	r3, #50508	; 0xc54c
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	5499      	strb	r1, [r3, r2]
    6132:	f24c 5349 	movw	r3, #50505	; 0xc549
    6136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	3301      	adds	r3, #1
    613e:	b2da      	uxtb	r2, r3
    6140:	f24c 5349 	movw	r3, #50505	; 0xc549
    6144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6148:	701a      	strb	r2, [r3, #0]
    614a:	f24c 5349 	movw	r3, #50505	; 0xc549
    614e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2bff      	cmp	r3, #255	; 0xff
    6156:	d105      	bne.n	6164 <ground_calibrate+0x1fc>
    6158:	f24c 5349 	movw	r3, #50505	; 0xc549
    615c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6160:	2200      	movs	r2, #0
    6162:	701a      	strb	r2, [r3, #0]
    6164:	f242 0339 	movw	r3, #8249	; 0x2039
    6168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    616c:	781b      	ldrb	r3, [r3, #0]
    616e:	b2db      	uxtb	r3, r3
    6170:	f003 0310 	and.w	r3, r3, #16
    6174:	2b00      	cmp	r3, #0
    6176:	f041 804e 	bne.w	7216 <ground_calibrate+0x12ae>
    617a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	b2db      	uxtb	r3, r3
    6186:	461a      	mov	r2, r3
    6188:	f24c 534c 	movw	r3, #50508	; 0xc54c
    618c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6190:	5c9a      	ldrb	r2, [r3, r2]
    6192:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619a:	701a      	strb	r2, [r3, #0]
    619c:	f24c 634c 	movw	r3, #50764	; 0xc64c
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	2200      	movs	r2, #0
    61a6:	701a      	strb	r2, [r3, #0]
    61a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	b2db      	uxtb	r3, r3
    61b4:	3301      	adds	r3, #1
    61b6:	b2da      	uxtb	r2, r3
    61b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c0:	701a      	strb	r2, [r3, #0]
    61c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ca:	781b      	ldrb	r3, [r3, #0]
    61cc:	b2db      	uxtb	r3, r3
    61ce:	2bff      	cmp	r3, #255	; 0xff
    61d0:	d105      	bne.n	61de <ground_calibrate+0x276>
    61d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61da:	2200      	movs	r2, #0
    61dc:	701a      	strb	r2, [r3, #0]
    61de:	f242 0338 	movw	r3, #8248	; 0x2038
    61e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e6:	f242 0238 	movw	r2, #8248	; 0x2038
    61ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61ee:	7812      	ldrb	r2, [r2, #0]
    61f0:	b2d2      	uxtb	r2, r2
    61f2:	f042 0201 	orr.w	r2, r2, #1
    61f6:	b2d2      	uxtb	r2, r2
    61f8:	701a      	strb	r2, [r3, #0]
    61fa:	f242 0339 	movw	r3, #8249	; 0x2039
    61fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6202:	f242 0239 	movw	r2, #8249	; 0x2039
    6206:	f2c2 0200 	movt	r2, #8192	; 0x2000
    620a:	7812      	ldrb	r2, [r2, #0]
    620c:	b2d2      	uxtb	r2, r2
    620e:	f042 0210 	orr.w	r2, r2, #16
    6212:	b2d2      	uxtb	r2, r2
    6214:	701a      	strb	r2, [r3, #0]
    6216:	f000 bffe 	b.w	7216 <ground_calibrate+0x12ae>
    621a:	f24c 5348 	movw	r3, #50504	; 0xc548
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	3301      	adds	r3, #1
    6226:	b2da      	uxtb	r2, r3
    6228:	f24c 5348 	movw	r3, #50504	; 0xc548
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	701a      	strb	r2, [r3, #0]
    6232:	f000 bff0 	b.w	7216 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6236:	f24c 5342 	movw	r3, #50498	; 0xc542
    623a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623e:	781b      	ldrb	r3, [r3, #0]
    6240:	2b01      	cmp	r3, #1
    6242:	f040 87e8 	bne.w	7216 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6246:	f24c 6350 	movw	r3, #50768	; 0xc650
    624a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624e:	885b      	ldrh	r3, [r3, #2]
    6250:	b21b      	sxth	r3, r3
    6252:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6256:	db09      	blt.n	626c <ground_calibrate+0x304>
    6258:	f24c 6350 	movw	r3, #50768	; 0xc650
    625c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6260:	885b      	ldrh	r3, [r3, #2]
    6262:	b21b      	sxth	r3, r3
    6264:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6268:	f340 87d5 	ble.w	7216 <ground_calibrate+0x12ae>
      ir_gain_calib();
    626c:	f00b fd54 	bl	11d18 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6270:	f240 5348 	movw	r3, #1352	; 0x548
    6274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6278:	681a      	ldr	r2, [r3, #0]
    627a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    627e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6282:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6284:	f24c 5349 	movw	r3, #50505	; 0xc549
    6288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628c:	781a      	ldrb	r2, [r3, #0]
    628e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	b2db      	uxtb	r3, r3
    629a:	429a      	cmp	r2, r3
    629c:	d313      	bcc.n	62c6 <ground_calibrate+0x35e>
    629e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	b2db      	uxtb	r3, r3
    62aa:	461a      	mov	r2, r3
    62ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    62b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	1ad3      	subs	r3, r2, r3
    62b8:	33ff      	adds	r3, #255	; 0xff
    62ba:	2b14      	cmp	r3, #20
    62bc:	bfd4      	ite	le
    62be:	2300      	movle	r3, #0
    62c0:	2301      	movgt	r3, #1
    62c2:	b2db      	uxtb	r3, r3
    62c4:	e011      	b.n	62ea <ground_calibrate+0x382>
    62c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	b2db      	uxtb	r3, r3
    62d2:	461a      	mov	r2, r3
    62d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    62d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62dc:	781b      	ldrb	r3, [r3, #0]
    62de:	1ad3      	subs	r3, r2, r3
    62e0:	2b14      	cmp	r3, #20
    62e2:	bfd4      	ite	le
    62e4:	2300      	movle	r3, #0
    62e6:	2301      	movgt	r3, #1
    62e8:	b2db      	uxtb	r3, r3
    62ea:	2b00      	cmp	r3, #0
    62ec:	f000 85a6 	beq.w	6e3c <ground_calibrate+0xed4>
    62f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	461a      	mov	r2, r3
    62fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6304:	2105      	movs	r1, #5
    6306:	5499      	strb	r1, [r3, r2]
    6308:	f24c 5349 	movw	r3, #50505	; 0xc549
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	3301      	adds	r3, #1
    6314:	b2da      	uxtb	r2, r3
    6316:	f24c 5349 	movw	r3, #50505	; 0xc549
    631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631e:	701a      	strb	r2, [r3, #0]
    6320:	f24c 5349 	movw	r3, #50505	; 0xc549
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	2bff      	cmp	r3, #255	; 0xff
    632c:	d105      	bne.n	633a <ground_calibrate+0x3d2>
    632e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	2200      	movs	r2, #0
    6338:	701a      	strb	r2, [r3, #0]
    633a:	f24c 5349 	movw	r3, #50505	; 0xc549
    633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	461a      	mov	r2, r3
    6346:	f24c 534c 	movw	r3, #50508	; 0xc54c
    634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634e:	2105      	movs	r1, #5
    6350:	5499      	strb	r1, [r3, r2]
    6352:	f24c 5349 	movw	r3, #50505	; 0xc549
    6356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	3301      	adds	r3, #1
    635e:	b2da      	uxtb	r2, r3
    6360:	f24c 5349 	movw	r3, #50505	; 0xc549
    6364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6368:	701a      	strb	r2, [r3, #0]
    636a:	f24c 5349 	movw	r3, #50505	; 0xc549
    636e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	2bff      	cmp	r3, #255	; 0xff
    6376:	d105      	bne.n	6384 <ground_calibrate+0x41c>
    6378:	f24c 5349 	movw	r3, #50505	; 0xc549
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	2200      	movs	r2, #0
    6382:	701a      	strb	r2, [r3, #0]
    6384:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638c:	2205      	movs	r2, #5
    638e:	701a      	strb	r2, [r3, #0]
    6390:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	2205      	movs	r2, #5
    639a:	701a      	strb	r2, [r3, #0]
    639c:	f24c 5349 	movw	r3, #50505	; 0xc549
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	461a      	mov	r2, r3
    63a8:	f64c 3340 	movw	r3, #52032	; 0xcb40
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	7819      	ldrb	r1, [r3, #0]
    63b2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ba:	5499      	strb	r1, [r3, r2]
    63bc:	f64c 3340 	movw	r3, #52032	; 0xcb40
    63c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c4:	781a      	ldrb	r2, [r3, #0]
    63c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ce:	781b      	ldrb	r3, [r3, #0]
    63d0:	4413      	add	r3, r2
    63d2:	b2da      	uxtb	r2, r3
    63d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	781a      	ldrb	r2, [r3, #0]
    63e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f0:	781b      	ldrb	r3, [r3, #0]
    63f2:	4413      	add	r3, r2
    63f4:	b2da      	uxtb	r2, r3
    63f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	701a      	strb	r2, [r3, #0]
    6400:	f24c 5349 	movw	r3, #50505	; 0xc549
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	3301      	adds	r3, #1
    640c:	b2da      	uxtb	r2, r3
    640e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	701a      	strb	r2, [r3, #0]
    6418:	f24c 5349 	movw	r3, #50505	; 0xc549
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	781b      	ldrb	r3, [r3, #0]
    6422:	2bff      	cmp	r3, #255	; 0xff
    6424:	d105      	bne.n	6432 <ground_calibrate+0x4ca>
    6426:	f24c 5349 	movw	r3, #50505	; 0xc549
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	2200      	movs	r2, #0
    6430:	701a      	strb	r2, [r3, #0]
    6432:	f24c 5349 	movw	r3, #50505	; 0xc549
    6436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643a:	781b      	ldrb	r3, [r3, #0]
    643c:	461a      	mov	r2, r3
    643e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	7859      	ldrb	r1, [r3, #1]
    6448:	f24c 534c 	movw	r3, #50508	; 0xc54c
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	5499      	strb	r1, [r3, r2]
    6452:	4bd2      	ldr	r3, [pc, #840]	; (679c <ground_calibrate+0x834>)
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	f24c 634d 	movw	r3, #50765	; 0xc64d
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	4413      	add	r3, r2
    6462:	b2da      	uxtb	r2, r3
    6464:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646c:	701a      	strb	r2, [r3, #0]
    646e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	781a      	ldrb	r2, [r3, #0]
    6478:	f24c 634d 	movw	r3, #50765	; 0xc64d
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	4413      	add	r3, r2
    6484:	b2da      	uxtb	r2, r3
    6486:	f24c 634e 	movw	r3, #50766	; 0xc64e
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	701a      	strb	r2, [r3, #0]
    6490:	f24c 5349 	movw	r3, #50505	; 0xc549
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	3301      	adds	r3, #1
    649c:	b2da      	uxtb	r2, r3
    649e:	f24c 5349 	movw	r3, #50505	; 0xc549
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	2bff      	cmp	r3, #255	; 0xff
    64b4:	d105      	bne.n	64c2 <ground_calibrate+0x55a>
    64b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	2200      	movs	r2, #0
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    64c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ca:	781b      	ldrb	r3, [r3, #0]
    64cc:	461a      	mov	r2, r3
    64ce:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	7899      	ldrb	r1, [r3, #2]
    64d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	5499      	strb	r1, [r3, r2]
    64e2:	4baf      	ldr	r3, [pc, #700]	; (67a0 <ground_calibrate+0x838>)
    64e4:	781a      	ldrb	r2, [r3, #0]
    64e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	4413      	add	r3, r2
    64f2:	b2da      	uxtb	r2, r3
    64f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fc:	701a      	strb	r2, [r3, #0]
    64fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	781a      	ldrb	r2, [r3, #0]
    6508:	f24c 634d 	movw	r3, #50765	; 0xc64d
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	4413      	add	r3, r2
    6514:	b2da      	uxtb	r2, r3
    6516:	f24c 634e 	movw	r3, #50766	; 0xc64e
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	701a      	strb	r2, [r3, #0]
    6520:	f24c 5349 	movw	r3, #50505	; 0xc549
    6524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	3301      	adds	r3, #1
    652c:	b2da      	uxtb	r2, r3
    652e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	701a      	strb	r2, [r3, #0]
    6538:	f24c 5349 	movw	r3, #50505	; 0xc549
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	2bff      	cmp	r3, #255	; 0xff
    6544:	d105      	bne.n	6552 <ground_calibrate+0x5ea>
    6546:	f24c 5349 	movw	r3, #50505	; 0xc549
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	2200      	movs	r2, #0
    6550:	701a      	strb	r2, [r3, #0]
    6552:	f24c 5349 	movw	r3, #50505	; 0xc549
    6556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	461a      	mov	r2, r3
    655e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	78d9      	ldrb	r1, [r3, #3]
    6568:	f24c 534c 	movw	r3, #50508	; 0xc54c
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	5499      	strb	r1, [r3, r2]
    6572:	4b8c      	ldr	r3, [pc, #560]	; (67a4 <ground_calibrate+0x83c>)
    6574:	781a      	ldrb	r2, [r3, #0]
    6576:	f24c 634d 	movw	r3, #50765	; 0xc64d
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	4413      	add	r3, r2
    6582:	b2da      	uxtb	r2, r3
    6584:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	701a      	strb	r2, [r3, #0]
    658e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781a      	ldrb	r2, [r3, #0]
    6598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	4413      	add	r3, r2
    65a4:	b2da      	uxtb	r2, r3
    65a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	701a      	strb	r2, [r3, #0]
    65b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	3301      	adds	r3, #1
    65bc:	b2da      	uxtb	r2, r3
    65be:	f24c 5349 	movw	r3, #50505	; 0xc549
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	701a      	strb	r2, [r3, #0]
    65c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	2bff      	cmp	r3, #255	; 0xff
    65d4:	d105      	bne.n	65e2 <ground_calibrate+0x67a>
    65d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	2200      	movs	r2, #0
    65e0:	701a      	strb	r2, [r3, #0]
    65e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    65e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	461a      	mov	r2, r3
    65ee:	f64c 3344 	movw	r3, #52036	; 0xcb44
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	7819      	ldrb	r1, [r3, #0]
    65f8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6600:	5499      	strb	r1, [r3, r2]
    6602:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660a:	781a      	ldrb	r2, [r3, #0]
    660c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	4413      	add	r3, r2
    6618:	b2da      	uxtb	r2, r3
    661a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    661e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6622:	701a      	strb	r2, [r3, #0]
    6624:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662c:	781a      	ldrb	r2, [r3, #0]
    662e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	781b      	ldrb	r3, [r3, #0]
    6638:	4413      	add	r3, r2
    663a:	b2da      	uxtb	r2, r3
    663c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6644:	701a      	strb	r2, [r3, #0]
    6646:	f24c 5349 	movw	r3, #50505	; 0xc549
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	3301      	adds	r3, #1
    6652:	b2da      	uxtb	r2, r3
    6654:	f24c 5349 	movw	r3, #50505	; 0xc549
    6658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665c:	701a      	strb	r2, [r3, #0]
    665e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	2bff      	cmp	r3, #255	; 0xff
    666a:	d105      	bne.n	6678 <ground_calibrate+0x710>
    666c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6674:	2200      	movs	r2, #0
    6676:	701a      	strb	r2, [r3, #0]
    6678:	f24c 5349 	movw	r3, #50505	; 0xc549
    667c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	461a      	mov	r2, r3
    6684:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668c:	7859      	ldrb	r1, [r3, #1]
    668e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	5499      	strb	r1, [r3, r2]
    6698:	4b43      	ldr	r3, [pc, #268]	; (67a8 <ground_calibrate+0x840>)
    669a:	781a      	ldrb	r2, [r3, #0]
    669c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	4413      	add	r3, r2
    66a8:	b2da      	uxtb	r2, r3
    66aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b2:	701a      	strb	r2, [r3, #0]
    66b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	781a      	ldrb	r2, [r3, #0]
    66be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	4413      	add	r3, r2
    66ca:	b2da      	uxtb	r2, r3
    66cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	701a      	strb	r2, [r3, #0]
    66d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	3301      	adds	r3, #1
    66e2:	b2da      	uxtb	r2, r3
    66e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	701a      	strb	r2, [r3, #0]
    66ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	2bff      	cmp	r3, #255	; 0xff
    66fa:	d105      	bne.n	6708 <ground_calibrate+0x7a0>
    66fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	2200      	movs	r2, #0
    6706:	701a      	strb	r2, [r3, #0]
    6708:	f24c 5349 	movw	r3, #50505	; 0xc549
    670c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	461a      	mov	r2, r3
    6714:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	7899      	ldrb	r1, [r3, #2]
    671e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	5499      	strb	r1, [r3, r2]
    6728:	4b20      	ldr	r3, [pc, #128]	; (67ac <ground_calibrate+0x844>)
    672a:	781a      	ldrb	r2, [r3, #0]
    672c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	781b      	ldrb	r3, [r3, #0]
    6736:	4413      	add	r3, r2
    6738:	b2da      	uxtb	r2, r3
    673a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    673e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6742:	701a      	strb	r2, [r3, #0]
    6744:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	781a      	ldrb	r2, [r3, #0]
    674e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	4413      	add	r3, r2
    675a:	b2da      	uxtb	r2, r3
    675c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	701a      	strb	r2, [r3, #0]
    6766:	f24c 5349 	movw	r3, #50505	; 0xc549
    676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	3301      	adds	r3, #1
    6772:	b2da      	uxtb	r2, r3
    6774:	f24c 5349 	movw	r3, #50505	; 0xc549
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	701a      	strb	r2, [r3, #0]
    677e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	2bff      	cmp	r3, #255	; 0xff
    678a:	d111      	bne.n	67b0 <ground_calibrate+0x848>
    678c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	2200      	movs	r2, #0
    6796:	701a      	strb	r2, [r3, #0]
    6798:	e00a      	b.n	67b0 <ground_calibrate+0x848>
    679a:	bf00      	nop
    679c:	2004cb41 	.word	0x2004cb41
    67a0:	2004cb42 	.word	0x2004cb42
    67a4:	2004cb43 	.word	0x2004cb43
    67a8:	2004cb45 	.word	0x2004cb45
    67ac:	2004cb46 	.word	0x2004cb46
    67b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    67b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	461a      	mov	r2, r3
    67bc:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	78d9      	ldrb	r1, [r3, #3]
    67c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	5499      	strb	r1, [r3, r2]
    67d0:	4bd3      	ldr	r3, [pc, #844]	; (6b20 <ground_calibrate+0xbb8>)
    67d2:	781a      	ldrb	r2, [r3, #0]
    67d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	4413      	add	r3, r2
    67e0:	b2da      	uxtb	r2, r3
    67e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	781a      	ldrb	r2, [r3, #0]
    67f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	4413      	add	r3, r2
    6802:	b2da      	uxtb	r2, r3
    6804:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	3301      	adds	r3, #1
    681a:	b2da      	uxtb	r2, r3
    681c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f24c 5349 	movw	r3, #50505	; 0xc549
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	2bff      	cmp	r3, #255	; 0xff
    6832:	d105      	bne.n	6840 <ground_calibrate+0x8d8>
    6834:	f24c 5349 	movw	r3, #50505	; 0xc549
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	2200      	movs	r2, #0
    683e:	701a      	strb	r2, [r3, #0]
    6840:	f24c 5349 	movw	r3, #50505	; 0xc549
    6844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	461a      	mov	r2, r3
    684c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	7819      	ldrb	r1, [r3, #0]
    6856:	f24c 534c 	movw	r3, #50508	; 0xc54c
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	5499      	strb	r1, [r3, r2]
    6860:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6868:	781a      	ldrb	r2, [r3, #0]
    686a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    686e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6872:	781b      	ldrb	r3, [r3, #0]
    6874:	4413      	add	r3, r2
    6876:	b2da      	uxtb	r2, r3
    6878:	f24c 634d 	movw	r3, #50765	; 0xc64d
    687c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6880:	701a      	strb	r2, [r3, #0]
    6882:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688a:	781a      	ldrb	r2, [r3, #0]
    688c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	4413      	add	r3, r2
    6898:	b2da      	uxtb	r2, r3
    689a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a2:	701a      	strb	r2, [r3, #0]
    68a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	3301      	adds	r3, #1
    68b0:	b2da      	uxtb	r2, r3
    68b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    68b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ba:	701a      	strb	r2, [r3, #0]
    68bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    68c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c4:	781b      	ldrb	r3, [r3, #0]
    68c6:	2bff      	cmp	r3, #255	; 0xff
    68c8:	d105      	bne.n	68d6 <ground_calibrate+0x96e>
    68ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    68ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d2:	2200      	movs	r2, #0
    68d4:	701a      	strb	r2, [r3, #0]
    68d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    68da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	461a      	mov	r2, r3
    68e2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    68e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ea:	7859      	ldrb	r1, [r3, #1]
    68ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	5499      	strb	r1, [r3, r2]
    68f6:	4b8b      	ldr	r3, [pc, #556]	; (6b24 <ground_calibrate+0xbbc>)
    68f8:	781a      	ldrb	r2, [r3, #0]
    68fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	4413      	add	r3, r2
    6906:	b2da      	uxtb	r2, r3
    6908:	f24c 634d 	movw	r3, #50765	; 0xc64d
    690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6910:	701a      	strb	r2, [r3, #0]
    6912:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	781a      	ldrb	r2, [r3, #0]
    691c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	4413      	add	r3, r2
    6928:	b2da      	uxtb	r2, r3
    692a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	701a      	strb	r2, [r3, #0]
    6934:	f24c 5349 	movw	r3, #50505	; 0xc549
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	3301      	adds	r3, #1
    6940:	b2da      	uxtb	r2, r3
    6942:	f24c 5349 	movw	r3, #50505	; 0xc549
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	701a      	strb	r2, [r3, #0]
    694c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	781b      	ldrb	r3, [r3, #0]
    6956:	2bff      	cmp	r3, #255	; 0xff
    6958:	d105      	bne.n	6966 <ground_calibrate+0x9fe>
    695a:	f24c 5349 	movw	r3, #50505	; 0xc549
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	2200      	movs	r2, #0
    6964:	701a      	strb	r2, [r3, #0]
    6966:	f24c 5349 	movw	r3, #50505	; 0xc549
    696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	461a      	mov	r2, r3
    6972:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	7899      	ldrb	r1, [r3, #2]
    697c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	5499      	strb	r1, [r3, r2]
    6986:	4b68      	ldr	r3, [pc, #416]	; (6b28 <ground_calibrate+0xbc0>)
    6988:	781a      	ldrb	r2, [r3, #0]
    698a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	781b      	ldrb	r3, [r3, #0]
    6994:	4413      	add	r3, r2
    6996:	b2da      	uxtb	r2, r3
    6998:	f24c 634d 	movw	r3, #50765	; 0xc64d
    699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a0:	701a      	strb	r2, [r3, #0]
    69a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	781a      	ldrb	r2, [r3, #0]
    69ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	4413      	add	r3, r2
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	701a      	strb	r2, [r3, #0]
    69c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	3301      	adds	r3, #1
    69d0:	b2da      	uxtb	r2, r3
    69d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	701a      	strb	r2, [r3, #0]
    69dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	2bff      	cmp	r3, #255	; 0xff
    69e8:	d105      	bne.n	69f6 <ground_calibrate+0xa8e>
    69ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	2200      	movs	r2, #0
    69f4:	701a      	strb	r2, [r3, #0]
    69f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    69fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fe:	781b      	ldrb	r3, [r3, #0]
    6a00:	461a      	mov	r2, r3
    6a02:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	78d9      	ldrb	r1, [r3, #3]
    6a0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	5499      	strb	r1, [r3, r2]
    6a16:	4b45      	ldr	r3, [pc, #276]	; (6b2c <ground_calibrate+0xbc4>)
    6a18:	781a      	ldrb	r2, [r3, #0]
    6a1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	781b      	ldrb	r3, [r3, #0]
    6a24:	4413      	add	r3, r2
    6a26:	b2da      	uxtb	r2, r3
    6a28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a30:	701a      	strb	r2, [r3, #0]
    6a32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	781a      	ldrb	r2, [r3, #0]
    6a3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	4413      	add	r3, r2
    6a48:	b2da      	uxtb	r2, r3
    6a4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	701a      	strb	r2, [r3, #0]
    6a54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	3301      	adds	r3, #1
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	2bff      	cmp	r3, #255	; 0xff
    6a78:	d105      	bne.n	6a86 <ground_calibrate+0xb1e>
    6a7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	2200      	movs	r2, #0
    6a84:	701a      	strb	r2, [r3, #0]
    6a86:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	461a      	mov	r2, r3
    6a92:	f240 5342 	movw	r3, #1346	; 0x542
    6a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9a:	7819      	ldrb	r1, [r3, #0]
    6a9c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	5499      	strb	r1, [r3, r2]
    6aa6:	f240 5342 	movw	r3, #1346	; 0x542
    6aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aae:	781a      	ldrb	r2, [r3, #0]
    6ab0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	4413      	add	r3, r2
    6abc:	b2da      	uxtb	r2, r3
    6abe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac6:	701a      	strb	r2, [r3, #0]
    6ac8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad0:	781a      	ldrb	r2, [r3, #0]
    6ad2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	4413      	add	r3, r2
    6ade:	b2da      	uxtb	r2, r3
    6ae0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae8:	701a      	strb	r2, [r3, #0]
    6aea:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	3301      	adds	r3, #1
    6af6:	b2da      	uxtb	r2, r3
    6af8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	701a      	strb	r2, [r3, #0]
    6b02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	2bff      	cmp	r3, #255	; 0xff
    6b0e:	d10f      	bne.n	6b30 <ground_calibrate+0xbc8>
    6b10:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b18:	2200      	movs	r2, #0
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	e008      	b.n	6b30 <ground_calibrate+0xbc8>
    6b1e:	bf00      	nop
    6b20:	2004cb47 	.word	0x2004cb47
    6b24:	2004cb3d 	.word	0x2004cb3d
    6b28:	2004cb3e 	.word	0x2004cb3e
    6b2c:	2004cb3f 	.word	0x2004cb3f
    6b30:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b38:	781b      	ldrb	r3, [r3, #0]
    6b3a:	461a      	mov	r2, r3
    6b3c:	f240 5342 	movw	r3, #1346	; 0x542
    6b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b44:	7859      	ldrb	r1, [r3, #1]
    6b46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4e:	5499      	strb	r1, [r3, r2]
    6b50:	4bd4      	ldr	r3, [pc, #848]	; (6ea4 <ground_calibrate+0xf3c>)
    6b52:	781a      	ldrb	r2, [r3, #0]
    6b54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	4413      	add	r3, r2
    6b60:	b2da      	uxtb	r2, r3
    6b62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	701a      	strb	r2, [r3, #0]
    6b6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	781a      	ldrb	r2, [r3, #0]
    6b76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	4413      	add	r3, r2
    6b82:	b2da      	uxtb	r2, r3
    6b84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	701a      	strb	r2, [r3, #0]
    6b8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	3301      	adds	r3, #1
    6b9a:	b2da      	uxtb	r2, r3
    6b9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba4:	701a      	strb	r2, [r3, #0]
    6ba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bae:	781b      	ldrb	r3, [r3, #0]
    6bb0:	2bff      	cmp	r3, #255	; 0xff
    6bb2:	d105      	bne.n	6bc0 <ground_calibrate+0xc58>
    6bb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	2200      	movs	r2, #0
    6bbe:	701a      	strb	r2, [r3, #0]
    6bc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	461a      	mov	r2, r3
    6bcc:	f240 5344 	movw	r3, #1348	; 0x544
    6bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd4:	7819      	ldrb	r1, [r3, #0]
    6bd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bde:	5499      	strb	r1, [r3, r2]
    6be0:	f240 5344 	movw	r3, #1348	; 0x544
    6be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be8:	781a      	ldrb	r2, [r3, #0]
    6bea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	4413      	add	r3, r2
    6bf6:	b2da      	uxtb	r2, r3
    6bf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c00:	701a      	strb	r2, [r3, #0]
    6c02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	781a      	ldrb	r2, [r3, #0]
    6c0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	4413      	add	r3, r2
    6c18:	b2da      	uxtb	r2, r3
    6c1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	701a      	strb	r2, [r3, #0]
    6c24:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	3301      	adds	r3, #1
    6c30:	b2da      	uxtb	r2, r3
    6c32:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3a:	701a      	strb	r2, [r3, #0]
    6c3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c44:	781b      	ldrb	r3, [r3, #0]
    6c46:	2bff      	cmp	r3, #255	; 0xff
    6c48:	d105      	bne.n	6c56 <ground_calibrate+0xcee>
    6c4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c52:	2200      	movs	r2, #0
    6c54:	701a      	strb	r2, [r3, #0]
    6c56:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	461a      	mov	r2, r3
    6c62:	f240 5344 	movw	r3, #1348	; 0x544
    6c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c6a:	7859      	ldrb	r1, [r3, #1]
    6c6c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c74:	5499      	strb	r1, [r3, r2]
    6c76:	4b8c      	ldr	r3, [pc, #560]	; (6ea8 <ground_calibrate+0xf40>)
    6c78:	781a      	ldrb	r2, [r3, #0]
    6c7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	4413      	add	r3, r2
    6c86:	b2da      	uxtb	r2, r3
    6c88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c90:	701a      	strb	r2, [r3, #0]
    6c92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	781a      	ldrb	r2, [r3, #0]
    6c9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	4413      	add	r3, r2
    6ca8:	b2da      	uxtb	r2, r3
    6caa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	701a      	strb	r2, [r3, #0]
    6cb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	3301      	adds	r3, #1
    6cc0:	b2da      	uxtb	r2, r3
    6cc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	701a      	strb	r2, [r3, #0]
    6ccc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	2bff      	cmp	r3, #255	; 0xff
    6cd8:	d105      	bne.n	6ce6 <ground_calibrate+0xd7e>
    6cda:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	2200      	movs	r2, #0
    6ce4:	701a      	strb	r2, [r3, #0]
    6ce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	461a      	mov	r2, r3
    6cf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	7819      	ldrb	r1, [r3, #0]
    6cfc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	5499      	strb	r1, [r3, r2]
    6d06:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	3301      	adds	r3, #1
    6d12:	b2da      	uxtb	r2, r3
    6d14:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	701a      	strb	r2, [r3, #0]
    6d1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d26:	781b      	ldrb	r3, [r3, #0]
    6d28:	2bff      	cmp	r3, #255	; 0xff
    6d2a:	d105      	bne.n	6d38 <ground_calibrate+0xdd0>
    6d2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	2200      	movs	r2, #0
    6d36:	701a      	strb	r2, [r3, #0]
    6d38:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d40:	781b      	ldrb	r3, [r3, #0]
    6d42:	461a      	mov	r2, r3
    6d44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4c:	7819      	ldrb	r1, [r3, #0]
    6d4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d56:	5499      	strb	r1, [r3, r2]
    6d58:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	3301      	adds	r3, #1
    6d64:	b2da      	uxtb	r2, r3
    6d66:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6e:	701a      	strb	r2, [r3, #0]
    6d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	2bff      	cmp	r3, #255	; 0xff
    6d7c:	d105      	bne.n	6d8a <ground_calibrate+0xe22>
    6d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d86:	2200      	movs	r2, #0
    6d88:	701a      	strb	r2, [r3, #0]
    6d8a:	f242 0339 	movw	r3, #8249	; 0x2039
    6d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d92:	781b      	ldrb	r3, [r3, #0]
    6d94:	b2db      	uxtb	r3, r3
    6d96:	f003 0310 	and.w	r3, r3, #16
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d15a      	bne.n	6e54 <ground_calibrate+0xeec>
    6d9e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	b2db      	uxtb	r3, r3
    6daa:	461a      	mov	r2, r3
    6dac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db4:	5c9a      	ldrb	r2, [r3, r2]
    6db6:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbe:	701a      	strb	r2, [r3, #0]
    6dc0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc8:	2200      	movs	r2, #0
    6dca:	701a      	strb	r2, [r3, #0]
    6dcc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	b2db      	uxtb	r3, r3
    6dd8:	3301      	adds	r3, #1
    6dda:	b2da      	uxtb	r2, r3
    6ddc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de4:	701a      	strb	r2, [r3, #0]
    6de6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	b2db      	uxtb	r3, r3
    6df2:	2bff      	cmp	r3, #255	; 0xff
    6df4:	d105      	bne.n	6e02 <ground_calibrate+0xe9a>
    6df6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfe:	2200      	movs	r2, #0
    6e00:	701a      	strb	r2, [r3, #0]
    6e02:	f242 0338 	movw	r3, #8248	; 0x2038
    6e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e0a:	f242 0238 	movw	r2, #8248	; 0x2038
    6e0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e12:	7812      	ldrb	r2, [r2, #0]
    6e14:	b2d2      	uxtb	r2, r2
    6e16:	f042 0201 	orr.w	r2, r2, #1
    6e1a:	b2d2      	uxtb	r2, r2
    6e1c:	701a      	strb	r2, [r3, #0]
    6e1e:	f242 0339 	movw	r3, #8249	; 0x2039
    6e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e26:	f242 0239 	movw	r2, #8249	; 0x2039
    6e2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e2e:	7812      	ldrb	r2, [r2, #0]
    6e30:	b2d2      	uxtb	r2, r2
    6e32:	f042 0210 	orr.w	r2, r2, #16
    6e36:	b2d2      	uxtb	r2, r2
    6e38:	701a      	strb	r2, [r3, #0]
    6e3a:	e00b      	b.n	6e54 <ground_calibrate+0xeec>
    6e3c:	f24c 5348 	movw	r3, #50504	; 0xc548
    6e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e44:	781b      	ldrb	r3, [r3, #0]
    6e46:	3301      	adds	r3, #1
    6e48:	b2da      	uxtb	r2, r3
    6e4a:	f24c 5348 	movw	r3, #50504	; 0xc548
    6e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e52:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6e54:	f24c 5342 	movw	r3, #50498	; 0xc542
    6e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5c:	2202      	movs	r2, #2
    6e5e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6e60:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	781a      	ldrb	r2, [r3, #0]
    6e6a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	b2db      	uxtb	r3, r3
    6e76:	429a      	cmp	r2, r3
    6e78:	d318      	bcc.n	6eac <ground_calibrate+0xf44>
    6e7a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	b2db      	uxtb	r3, r3
    6e86:	461a      	mov	r2, r3
    6e88:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	1ad3      	subs	r3, r2, r3
    6e94:	33ff      	adds	r3, #255	; 0xff
    6e96:	2b06      	cmp	r3, #6
    6e98:	bfd4      	ite	le
    6e9a:	2300      	movle	r3, #0
    6e9c:	2301      	movgt	r3, #1
    6e9e:	b2db      	uxtb	r3, r3
    6ea0:	e016      	b.n	6ed0 <ground_calibrate+0xf68>
    6ea2:	bf00      	nop
    6ea4:	20000543 	.word	0x20000543
    6ea8:	20000545 	.word	0x20000545
    6eac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	461a      	mov	r2, r3
    6eba:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	1ad3      	subs	r3, r2, r3
    6ec6:	2b06      	cmp	r3, #6
    6ec8:	bfd4      	ite	le
    6eca:	2300      	movle	r3, #0
    6ecc:	2301      	movgt	r3, #1
    6ece:	b2db      	uxtb	r3, r3
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	f000 8194 	beq.w	71fe <ground_calibrate+0x1296>
    6ed6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	461a      	mov	r2, r3
    6ee2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eea:	2105      	movs	r1, #5
    6eec:	5499      	strb	r1, [r3, r2]
    6eee:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	3301      	adds	r3, #1
    6efa:	b2da      	uxtb	r2, r3
    6efc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f04:	701a      	strb	r2, [r3, #0]
    6f06:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	2bff      	cmp	r3, #255	; 0xff
    6f12:	d105      	bne.n	6f20 <ground_calibrate+0xfb8>
    6f14:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1c:	2200      	movs	r2, #0
    6f1e:	701a      	strb	r2, [r3, #0]
    6f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	461a      	mov	r2, r3
    6f2c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f34:	2103      	movs	r1, #3
    6f36:	5499      	strb	r1, [r3, r2]
    6f38:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	3301      	adds	r3, #1
    6f44:	b2da      	uxtb	r2, r3
    6f46:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	701a      	strb	r2, [r3, #0]
    6f50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	2bff      	cmp	r3, #255	; 0xff
    6f5c:	d105      	bne.n	6f6a <ground_calibrate+0x1002>
    6f5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	2200      	movs	r2, #0
    6f68:	701a      	strb	r2, [r3, #0]
    6f6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f72:	2203      	movs	r2, #3
    6f74:	701a      	strb	r2, [r3, #0]
    6f76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7e:	2203      	movs	r2, #3
    6f80:	701a      	strb	r2, [r3, #0]
    6f82:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	781b      	ldrb	r3, [r3, #0]
    6f8c:	461a      	mov	r2, r3
    6f8e:	f240 5340 	movw	r3, #1344	; 0x540
    6f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f96:	7819      	ldrb	r1, [r3, #0]
    6f98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa0:	5499      	strb	r1, [r3, r2]
    6fa2:	f240 5340 	movw	r3, #1344	; 0x540
    6fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6faa:	781a      	ldrb	r2, [r3, #0]
    6fac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	4413      	add	r3, r2
    6fb8:	b2da      	uxtb	r2, r3
    6fba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc2:	701a      	strb	r2, [r3, #0]
    6fc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	781a      	ldrb	r2, [r3, #0]
    6fce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	4413      	add	r3, r2
    6fda:	b2da      	uxtb	r2, r3
    6fdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	3301      	adds	r3, #1
    6ff2:	b2da      	uxtb	r2, r3
    6ff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffc:	701a      	strb	r2, [r3, #0]
    6ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	2bff      	cmp	r3, #255	; 0xff
    700a:	d105      	bne.n	7018 <ground_calibrate+0x10b0>
    700c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7014:	2200      	movs	r2, #0
    7016:	701a      	strb	r2, [r3, #0]
    7018:	f24c 5349 	movw	r3, #50505	; 0xc549
    701c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	461a      	mov	r2, r3
    7024:	f240 5340 	movw	r3, #1344	; 0x540
    7028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702c:	7859      	ldrb	r1, [r3, #1]
    702e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7036:	5499      	strb	r1, [r3, r2]
    7038:	4b77      	ldr	r3, [pc, #476]	; (7218 <ground_calibrate+0x12b0>)
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	4413      	add	r3, r2
    7048:	b2da      	uxtb	r2, r3
    704a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    704e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7052:	701a      	strb	r2, [r3, #0]
    7054:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	781a      	ldrb	r2, [r3, #0]
    705e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	4413      	add	r3, r2
    706a:	b2da      	uxtb	r2, r3
    706c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	701a      	strb	r2, [r3, #0]
    7076:	f24c 5349 	movw	r3, #50505	; 0xc549
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	3301      	adds	r3, #1
    7082:	b2da      	uxtb	r2, r3
    7084:	f24c 5349 	movw	r3, #50505	; 0xc549
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	2bff      	cmp	r3, #255	; 0xff
    709a:	d105      	bne.n	70a8 <ground_calibrate+0x1140>
    709c:	f24c 5349 	movw	r3, #50505	; 0xc549
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	2200      	movs	r2, #0
    70a6:	701a      	strb	r2, [r3, #0]
    70a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	461a      	mov	r2, r3
    70b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70bc:	7819      	ldrb	r1, [r3, #0]
    70be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	5499      	strb	r1, [r3, r2]
    70c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d0:	781b      	ldrb	r3, [r3, #0]
    70d2:	3301      	adds	r3, #1
    70d4:	b2da      	uxtb	r2, r3
    70d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	701a      	strb	r2, [r3, #0]
    70e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    70e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	2bff      	cmp	r3, #255	; 0xff
    70ec:	d105      	bne.n	70fa <ground_calibrate+0x1192>
    70ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	2200      	movs	r2, #0
    70f8:	701a      	strb	r2, [r3, #0]
    70fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    70fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7102:	781b      	ldrb	r3, [r3, #0]
    7104:	461a      	mov	r2, r3
    7106:	f24c 634e 	movw	r3, #50766	; 0xc64e
    710a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710e:	7819      	ldrb	r1, [r3, #0]
    7110:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	5499      	strb	r1, [r3, r2]
    711a:	f24c 5349 	movw	r3, #50505	; 0xc549
    711e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7122:	781b      	ldrb	r3, [r3, #0]
    7124:	3301      	adds	r3, #1
    7126:	b2da      	uxtb	r2, r3
    7128:	f24c 5349 	movw	r3, #50505	; 0xc549
    712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7130:	701a      	strb	r2, [r3, #0]
    7132:	f24c 5349 	movw	r3, #50505	; 0xc549
    7136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	2bff      	cmp	r3, #255	; 0xff
    713e:	d105      	bne.n	714c <ground_calibrate+0x11e4>
    7140:	f24c 5349 	movw	r3, #50505	; 0xc549
    7144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7148:	2200      	movs	r2, #0
    714a:	701a      	strb	r2, [r3, #0]
    714c:	f242 0339 	movw	r3, #8249	; 0x2039
    7150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	b2db      	uxtb	r3, r3
    7158:	f003 0310 	and.w	r3, r3, #16
    715c:	2b00      	cmp	r3, #0
    715e:	d15a      	bne.n	7216 <ground_calibrate+0x12ae>
    7160:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7168:	781b      	ldrb	r3, [r3, #0]
    716a:	b2db      	uxtb	r3, r3
    716c:	461a      	mov	r2, r3
    716e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7176:	5c9a      	ldrb	r2, [r3, r2]
    7178:	f24c 634b 	movw	r3, #50763	; 0xc64b
    717c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7180:	701a      	strb	r2, [r3, #0]
    7182:	f24c 634c 	movw	r3, #50764	; 0xc64c
    7186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718a:	2200      	movs	r2, #0
    718c:	701a      	strb	r2, [r3, #0]
    718e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	b2db      	uxtb	r3, r3
    719a:	3301      	adds	r3, #1
    719c:	b2da      	uxtb	r2, r3
    719e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a6:	701a      	strb	r2, [r3, #0]
    71a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b0:	781b      	ldrb	r3, [r3, #0]
    71b2:	b2db      	uxtb	r3, r3
    71b4:	2bff      	cmp	r3, #255	; 0xff
    71b6:	d105      	bne.n	71c4 <ground_calibrate+0x125c>
    71b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	2200      	movs	r2, #0
    71c2:	701a      	strb	r2, [r3, #0]
    71c4:	f242 0338 	movw	r3, #8248	; 0x2038
    71c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71cc:	f242 0238 	movw	r2, #8248	; 0x2038
    71d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71d4:	7812      	ldrb	r2, [r2, #0]
    71d6:	b2d2      	uxtb	r2, r2
    71d8:	f042 0201 	orr.w	r2, r2, #1
    71dc:	b2d2      	uxtb	r2, r2
    71de:	701a      	strb	r2, [r3, #0]
    71e0:	f242 0339 	movw	r3, #8249	; 0x2039
    71e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e8:	f242 0239 	movw	r2, #8249	; 0x2039
    71ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71f0:	7812      	ldrb	r2, [r2, #0]
    71f2:	b2d2      	uxtb	r2, r2
    71f4:	f042 0210 	orr.w	r2, r2, #16
    71f8:	b2d2      	uxtb	r2, r2
    71fa:	701a      	strb	r2, [r3, #0]
    71fc:	e00b      	b.n	7216 <ground_calibrate+0x12ae>
    71fe:	f24c 5348 	movw	r3, #50504	; 0xc548
    7202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7206:	781b      	ldrb	r3, [r3, #0]
    7208:	3301      	adds	r3, #1
    720a:	b2da      	uxtb	r2, r3
    720c:	f24c 5348 	movw	r3, #50504	; 0xc548
    7210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7214:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7216:	bd80      	pop	{r7, pc}
    7218:	20000541 	.word	0x20000541

0000721c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7222:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2b03      	cmp	r3, #3
    722e:	d10c      	bne.n	724a <pprz_mode_update+0x2e>
    7230:	f24c 5330 	movw	r3, #50480	; 0xc530
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	2b00      	cmp	r3, #0
    723c:	d032      	beq.n	72a4 <pprz_mode_update+0x88>
    723e:	f24c 5330 	movw	r3, #50480	; 0xc530
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	2200      	movs	r2, #0
    7248:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    724a:	f24c 6350 	movw	r3, #50768	; 0xc650
    724e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7252:	891b      	ldrh	r3, [r3, #8]
    7254:	b21b      	sxth	r3, r3
    7256:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    725a:	dc0f      	bgt.n	727c <pprz_mode_update+0x60>
    725c:	f24c 6350 	movw	r3, #50768	; 0xc650
    7260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7264:	891b      	ldrh	r3, [r3, #8]
    7266:	b21a      	sxth	r2, r3
    7268:	f64e 5341 	movw	r3, #60737	; 0xed41
    726c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7270:	429a      	cmp	r2, r3
    7272:	bfb4      	ite	lt
    7274:	2300      	movlt	r3, #0
    7276:	2301      	movge	r3, #1
    7278:	b2db      	uxtb	r3, r3
    727a:	e000      	b.n	727e <pprz_mode_update+0x62>
    727c:	2302      	movs	r3, #2
    727e:	71fb      	strb	r3, [r7, #7]
    7280:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7288:	781b      	ldrb	r3, [r3, #0]
    728a:	79fa      	ldrb	r2, [r7, #7]
    728c:	429a      	cmp	r2, r3
    728e:	d007      	beq.n	72a0 <pprz_mode_update+0x84>
    7290:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	79fa      	ldrb	r2, [r7, #7]
    729a:	701a      	strb	r2, [r3, #0]
    729c:	2301      	movs	r3, #1
    729e:	e002      	b.n	72a6 <pprz_mode_update+0x8a>
    72a0:	2300      	movs	r3, #0
    72a2:	e000      	b.n	72a6 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    72a4:	2300      	movs	r3, #0
}
    72a6:	4618      	mov	r0, r3
    72a8:	370c      	adds	r7, #12
    72aa:	46bd      	mov	sp, r7
    72ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b0:	4770      	bx	lr
    72b2:	bf00      	nop

000072b4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    72b4:	b480      	push	{r7}
    72b6:	b083      	sub	sp, #12
    72b8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    72ba:	f24c 6350 	movw	r3, #50768	; 0xc650
    72be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c2:	89db      	ldrh	r3, [r3, #14]
    72c4:	b21a      	sxth	r2, r3
    72c6:	f640 437f 	movw	r3, #3199	; 0xc7f
    72ca:	429a      	cmp	r2, r3
    72cc:	bfd4      	ite	le
    72ce:	2300      	movle	r3, #0
    72d0:	2301      	movgt	r3, #1
    72d2:	b2db      	uxtb	r3, r3
    72d4:	71fb      	strb	r3, [r7, #7]
    72d6:	f240 533c 	movw	r3, #1340	; 0x53c
    72da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72de:	781b      	ldrb	r3, [r3, #0]
    72e0:	79fa      	ldrb	r2, [r7, #7]
    72e2:	429a      	cmp	r2, r3
    72e4:	d007      	beq.n	72f6 <ir_estim_mode_update+0x42>
    72e6:	f240 533c 	movw	r3, #1340	; 0x53c
    72ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ee:	79fa      	ldrb	r2, [r7, #7]
    72f0:	701a      	strb	r2, [r3, #0]
    72f2:	2301      	movs	r3, #1
    72f4:	e000      	b.n	72f8 <ir_estim_mode_update+0x44>
    72f6:	2300      	movs	r3, #0
}
    72f8:	4618      	mov	r0, r3
    72fa:	370c      	adds	r7, #12
    72fc:	46bd      	mov	sp, r7
    72fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7302:	4770      	bx	lr

00007304 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    7304:	b480      	push	{r7}
    7306:	b083      	sub	sp, #12
    7308:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    730a:	f24c 6350 	movw	r3, #50768	; 0xc650
    730e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7312:	7cdb      	ldrb	r3, [r3, #19]
    7314:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7316:	f24c 5333 	movw	r3, #50483	; 0xc533
    731a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	79fa      	ldrb	r2, [r7, #7]
    7322:	429a      	cmp	r2, r3
    7324:	d017      	beq.n	7356 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7326:	f24c 5333 	movw	r3, #50483	; 0xc533
    732a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	461a      	mov	r2, r3
    7332:	79fb      	ldrb	r3, [r7, #7]
    7334:	4053      	eors	r3, r2
    7336:	f003 0303 	and.w	r3, r3, #3
    733a:	2b00      	cmp	r3, #0
    733c:	bf0c      	ite	eq
    733e:	2300      	moveq	r3, #0
    7340:	2301      	movne	r3, #1
    7342:	b2db      	uxtb	r3, r3
    7344:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7346:	f24c 5333 	movw	r3, #50483	; 0xc533
    734a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    734e:	79fa      	ldrb	r2, [r7, #7]
    7350:	701a      	strb	r2, [r3, #0]
    return changed;
    7352:	79bb      	ldrb	r3, [r7, #6]
    7354:	e000      	b.n	7358 <mcu1_status_update+0x54>
  }
  return FALSE;
    7356:	2300      	movs	r3, #0
}
    7358:	4618      	mov	r0, r3
    735a:	370c      	adds	r7, #12
    735c:	46bd      	mov	sp, r7
    735e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7362:	4770      	bx	lr

00007364 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7364:	b480      	push	{r7}
    7366:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7368:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    736c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7370:	781b      	ldrb	r3, [r3, #0]
    7372:	2b00      	cmp	r3, #0
    7374:	d12a      	bne.n	73cc <events_update+0x68>
    7376:	f24c 6350 	movw	r3, #50768	; 0xc650
    737a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737e:	895b      	ldrh	r3, [r3, #10]
    7380:	b21b      	sxth	r3, r3
    7382:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7386:	dd21      	ble.n	73cc <events_update+0x68>
    7388:	f24c 5344 	movw	r3, #50500	; 0xc544
    738c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7390:	881b      	ldrh	r3, [r3, #0]
    7392:	2b13      	cmp	r3, #19
    7394:	d819      	bhi.n	73ca <events_update+0x66>
    7396:	f24c 5344 	movw	r3, #50500	; 0xc544
    739a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739e:	881b      	ldrh	r3, [r3, #0]
    73a0:	3301      	adds	r3, #1
    73a2:	b29a      	uxth	r2, r3
    73a4:	f24c 5344 	movw	r3, #50500	; 0xc544
    73a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ac:	801a      	strh	r2, [r3, #0]
    73ae:	f24c 5344 	movw	r3, #50500	; 0xc544
    73b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b6:	881b      	ldrh	r3, [r3, #0]
    73b8:	2b14      	cmp	r3, #20
    73ba:	d106      	bne.n	73ca <events_update+0x66>
    73bc:	f24c 5330 	movw	r3, #50480	; 0xc530
    73c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c4:	2201      	movs	r2, #1
    73c6:	701a      	strb	r2, [r3, #0]
    73c8:	e00c      	b.n	73e4 <events_update+0x80>
    73ca:	e00b      	b.n	73e4 <events_update+0x80>
    73cc:	f24c 5344 	movw	r3, #50500	; 0xc544
    73d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73d4:	2200      	movs	r2, #0
    73d6:	801a      	strh	r2, [r3, #0]
    73d8:	f24c 5330 	movw	r3, #50480	; 0xc530
    73dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e0:	2200      	movs	r2, #0
    73e2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    73e4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    73e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ec:	781b      	ldrb	r3, [r3, #0]
    73ee:	2b00      	cmp	r3, #0
    73f0:	d12a      	bne.n	7448 <events_update+0xe4>
    73f2:	f24c 6350 	movw	r3, #50768	; 0xc650
    73f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73fa:	895b      	ldrh	r3, [r3, #10]
    73fc:	b21b      	sxth	r3, r3
    73fe:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    7402:	da21      	bge.n	7448 <events_update+0xe4>
    7404:	f24c 5346 	movw	r3, #50502	; 0xc546
    7408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740c:	881b      	ldrh	r3, [r3, #0]
    740e:	2b13      	cmp	r3, #19
    7410:	d819      	bhi.n	7446 <events_update+0xe2>
    7412:	f24c 5346 	movw	r3, #50502	; 0xc546
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	881b      	ldrh	r3, [r3, #0]
    741c:	3301      	adds	r3, #1
    741e:	b29a      	uxth	r2, r3
    7420:	f24c 5346 	movw	r3, #50502	; 0xc546
    7424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7428:	801a      	strh	r2, [r3, #0]
    742a:	f24c 5346 	movw	r3, #50502	; 0xc546
    742e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7432:	881b      	ldrh	r3, [r3, #0]
    7434:	2b14      	cmp	r3, #20
    7436:	d106      	bne.n	7446 <events_update+0xe2>
    7438:	f24c 5331 	movw	r3, #50481	; 0xc531
    743c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7440:	2201      	movs	r2, #1
    7442:	701a      	strb	r2, [r3, #0]
    7444:	e00c      	b.n	7460 <events_update+0xfc>
    7446:	e00b      	b.n	7460 <events_update+0xfc>
    7448:	f24c 5346 	movw	r3, #50502	; 0xc546
    744c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7450:	2200      	movs	r2, #0
    7452:	801a      	strh	r2, [r3, #0]
    7454:	f24c 5331 	movw	r3, #50481	; 0xc531
    7458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    745c:	2200      	movs	r2, #0
    745e:	701a      	strb	r2, [r3, #0]
}  
    7460:	46bd      	mov	sp, r7
    7462:	f85d 7b04 	ldr.w	r7, [sp], #4
    7466:	4770      	bx	lr

00007468 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7468:	b480      	push	{r7}
    746a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    746c:	f24c 6350 	movw	r3, #50768	; 0xc650
    7470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7474:	88da      	ldrh	r2, [r3, #6]
    7476:	f24c 6368 	movw	r3, #50792	; 0xc668
    747a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7480:	f24c 6368 	movw	r3, #50792	; 0xc668
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	2200      	movs	r2, #0
    748a:	74da      	strb	r2, [r3, #19]
}
    748c:	46bd      	mov	sp, r7
    748e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7492:	4770      	bx	lr

00007494 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7494:	b480      	push	{r7}
    7496:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7498:	f240 533d 	movw	r3, #1341	; 0x53d
    749c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	2b00      	cmp	r3, #0
    74a4:	f000 87c6 	beq.w	8434 <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    74a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    74ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b0:	781a      	ldrb	r2, [r3, #0]
    74b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    74b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ba:	781b      	ldrb	r3, [r3, #0]
    74bc:	b2db      	uxtb	r3, r3
    74be:	429a      	cmp	r2, r3
    74c0:	d313      	bcc.n	74ea <send_boot+0x56>
    74c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    74c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	b2db      	uxtb	r3, r3
    74ce:	461a      	mov	r2, r3
    74d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    74d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	1ad3      	subs	r3, r2, r3
    74dc:	33ff      	adds	r3, #255	; 0xff
    74de:	2b06      	cmp	r3, #6
    74e0:	bfd4      	ite	le
    74e2:	2300      	movle	r3, #0
    74e4:	2301      	movgt	r3, #1
    74e6:	b2db      	uxtb	r3, r3
    74e8:	e011      	b.n	750e <send_boot+0x7a>
    74ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    74ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	b2db      	uxtb	r3, r3
    74f6:	461a      	mov	r2, r3
    74f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    74fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7500:	781b      	ldrb	r3, [r3, #0]
    7502:	1ad3      	subs	r3, r2, r3
    7504:	2b06      	cmp	r3, #6
    7506:	bfd4      	ite	le
    7508:	2300      	movle	r3, #0
    750a:	2301      	movgt	r3, #1
    750c:	b2db      	uxtb	r3, r3
    750e:	2b00      	cmp	r3, #0
    7510:	f000 8194 	beq.w	783c <send_boot+0x3a8>
    7514:	f24c 5349 	movw	r3, #50505	; 0xc549
    7518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	461a      	mov	r2, r3
    7520:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7528:	2105      	movs	r1, #5
    752a:	5499      	strb	r1, [r3, r2]
    752c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	3301      	adds	r3, #1
    7538:	b2da      	uxtb	r2, r3
    753a:	f24c 5349 	movw	r3, #50505	; 0xc549
    753e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7542:	701a      	strb	r2, [r3, #0]
    7544:	f24c 5349 	movw	r3, #50505	; 0xc549
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	2bff      	cmp	r3, #255	; 0xff
    7550:	d105      	bne.n	755e <send_boot+0xca>
    7552:	f24c 5349 	movw	r3, #50505	; 0xc549
    7556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755a:	2200      	movs	r2, #0
    755c:	701a      	strb	r2, [r3, #0]
    755e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	461a      	mov	r2, r3
    756a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    756e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7572:	2101      	movs	r1, #1
    7574:	5499      	strb	r1, [r3, r2]
    7576:	f24c 5349 	movw	r3, #50505	; 0xc549
    757a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757e:	781b      	ldrb	r3, [r3, #0]
    7580:	3301      	adds	r3, #1
    7582:	b2da      	uxtb	r2, r3
    7584:	f24c 5349 	movw	r3, #50505	; 0xc549
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	701a      	strb	r2, [r3, #0]
    758e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	2bff      	cmp	r3, #255	; 0xff
    759a:	d105      	bne.n	75a8 <send_boot+0x114>
    759c:	f24c 5349 	movw	r3, #50505	; 0xc549
    75a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a4:	2200      	movs	r2, #0
    75a6:	701a      	strb	r2, [r3, #0]
    75a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    75ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b0:	2201      	movs	r2, #1
    75b2:	701a      	strb	r2, [r3, #0]
    75b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    75b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75bc:	2201      	movs	r2, #1
    75be:	701a      	strb	r2, [r3, #0]
    75c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    75c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	461a      	mov	r2, r3
    75cc:	f648 2336 	movw	r3, #35382	; 0x8a36
    75d0:	f2c0 0301 	movt	r3, #1
    75d4:	7819      	ldrb	r1, [r3, #0]
    75d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    75da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75de:	5499      	strb	r1, [r3, r2]
    75e0:	f648 2336 	movw	r3, #35382	; 0x8a36
    75e4:	f2c0 0301 	movt	r3, #1
    75e8:	781a      	ldrb	r2, [r3, #0]
    75ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    75ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f2:	781b      	ldrb	r3, [r3, #0]
    75f4:	4413      	add	r3, r2
    75f6:	b2da      	uxtb	r2, r3
    75f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    75fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7600:	701a      	strb	r2, [r3, #0]
    7602:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760a:	781a      	ldrb	r2, [r3, #0]
    760c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7614:	781b      	ldrb	r3, [r3, #0]
    7616:	4413      	add	r3, r2
    7618:	b2da      	uxtb	r2, r3
    761a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	701a      	strb	r2, [r3, #0]
    7624:	f24c 5349 	movw	r3, #50505	; 0xc549
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	3301      	adds	r3, #1
    7630:	b2da      	uxtb	r2, r3
    7632:	f24c 5349 	movw	r3, #50505	; 0xc549
    7636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763a:	701a      	strb	r2, [r3, #0]
    763c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	2bff      	cmp	r3, #255	; 0xff
    7648:	d105      	bne.n	7656 <send_boot+0x1c2>
    764a:	f24c 5349 	movw	r3, #50505	; 0xc549
    764e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7652:	2200      	movs	r2, #0
    7654:	701a      	strb	r2, [r3, #0]
    7656:	f24c 5349 	movw	r3, #50505	; 0xc549
    765a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	461a      	mov	r2, r3
    7662:	f648 2336 	movw	r3, #35382	; 0x8a36
    7666:	f2c0 0301 	movt	r3, #1
    766a:	7859      	ldrb	r1, [r3, #1]
    766c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7674:	5499      	strb	r1, [r3, r2]
    7676:	4b88      	ldr	r3, [pc, #544]	; (7898 <send_boot+0x404>)
    7678:	781a      	ldrb	r2, [r3, #0]
    767a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    767e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	4413      	add	r3, r2
    7686:	b2da      	uxtb	r2, r3
    7688:	f24c 634d 	movw	r3, #50765	; 0xc64d
    768c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7690:	701a      	strb	r2, [r3, #0]
    7692:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769a:	781a      	ldrb	r2, [r3, #0]
    769c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	781b      	ldrb	r3, [r3, #0]
    76a6:	4413      	add	r3, r2
    76a8:	b2da      	uxtb	r2, r3
    76aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	3301      	adds	r3, #1
    76c0:	b2da      	uxtb	r2, r3
    76c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    76c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ca:	701a      	strb	r2, [r3, #0]
    76cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2bff      	cmp	r3, #255	; 0xff
    76d8:	d105      	bne.n	76e6 <send_boot+0x252>
    76da:	f24c 5349 	movw	r3, #50505	; 0xc549
    76de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e2:	2200      	movs	r2, #0
    76e4:	701a      	strb	r2, [r3, #0]
    76e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	461a      	mov	r2, r3
    76f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fa:	7819      	ldrb	r1, [r3, #0]
    76fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	5499      	strb	r1, [r3, r2]
    7706:	f24c 5349 	movw	r3, #50505	; 0xc549
    770a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	3301      	adds	r3, #1
    7712:	b2da      	uxtb	r2, r3
    7714:	f24c 5349 	movw	r3, #50505	; 0xc549
    7718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771c:	701a      	strb	r2, [r3, #0]
    771e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	2bff      	cmp	r3, #255	; 0xff
    772a:	d105      	bne.n	7738 <send_boot+0x2a4>
    772c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	2200      	movs	r2, #0
    7736:	701a      	strb	r2, [r3, #0]
    7738:	f24c 5349 	movw	r3, #50505	; 0xc549
    773c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7740:	781b      	ldrb	r3, [r3, #0]
    7742:	461a      	mov	r2, r3
    7744:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	7819      	ldrb	r1, [r3, #0]
    774e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7756:	5499      	strb	r1, [r3, r2]
    7758:	f24c 5349 	movw	r3, #50505	; 0xc549
    775c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7760:	781b      	ldrb	r3, [r3, #0]
    7762:	3301      	adds	r3, #1
    7764:	b2da      	uxtb	r2, r3
    7766:	f24c 5349 	movw	r3, #50505	; 0xc549
    776a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776e:	701a      	strb	r2, [r3, #0]
    7770:	f24c 5349 	movw	r3, #50505	; 0xc549
    7774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	2bff      	cmp	r3, #255	; 0xff
    777c:	d105      	bne.n	778a <send_boot+0x2f6>
    777e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7786:	2200      	movs	r2, #0
    7788:	701a      	strb	r2, [r3, #0]
    778a:	f242 0339 	movw	r3, #8249	; 0x2039
    778e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7792:	781b      	ldrb	r3, [r3, #0]
    7794:	b2db      	uxtb	r3, r3
    7796:	f003 0310 	and.w	r3, r3, #16
    779a:	2b00      	cmp	r3, #0
    779c:	d15a      	bne.n	7854 <send_boot+0x3c0>
    779e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	b2db      	uxtb	r3, r3
    77aa:	461a      	mov	r2, r3
    77ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b4:	5c9a      	ldrb	r2, [r3, r2]
    77b6:	f24c 634b 	movw	r3, #50763	; 0xc64b
    77ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77be:	701a      	strb	r2, [r3, #0]
    77c0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    77c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c8:	2200      	movs	r2, #0
    77ca:	701a      	strb	r2, [r3, #0]
    77cc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d4:	781b      	ldrb	r3, [r3, #0]
    77d6:	b2db      	uxtb	r3, r3
    77d8:	3301      	adds	r3, #1
    77da:	b2da      	uxtb	r2, r3
    77dc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	701a      	strb	r2, [r3, #0]
    77e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	b2db      	uxtb	r3, r3
    77f2:	2bff      	cmp	r3, #255	; 0xff
    77f4:	d105      	bne.n	7802 <send_boot+0x36e>
    77f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fe:	2200      	movs	r2, #0
    7800:	701a      	strb	r2, [r3, #0]
    7802:	f242 0338 	movw	r3, #8248	; 0x2038
    7806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780a:	f242 0238 	movw	r2, #8248	; 0x2038
    780e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7812:	7812      	ldrb	r2, [r2, #0]
    7814:	b2d2      	uxtb	r2, r2
    7816:	f042 0201 	orr.w	r2, r2, #1
    781a:	b2d2      	uxtb	r2, r2
    781c:	701a      	strb	r2, [r3, #0]
    781e:	f242 0339 	movw	r3, #8249	; 0x2039
    7822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7826:	f242 0239 	movw	r2, #8249	; 0x2039
    782a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    782e:	7812      	ldrb	r2, [r2, #0]
    7830:	b2d2      	uxtb	r2, r2
    7832:	f042 0210 	orr.w	r2, r2, #16
    7836:	b2d2      	uxtb	r2, r2
    7838:	701a      	strb	r2, [r3, #0]
    783a:	e00b      	b.n	7854 <send_boot+0x3c0>
    783c:	f24c 5348 	movw	r3, #50504	; 0xc548
    7840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	3301      	adds	r3, #1
    7848:	b2da      	uxtb	r2, r3
    784a:	f24c 5348 	movw	r3, #50504	; 0xc548
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7854:	f24c 5349 	movw	r3, #50505	; 0xc549
    7858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785c:	781a      	ldrb	r2, [r3, #0]
    785e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	b2db      	uxtb	r3, r3
    786a:	429a      	cmp	r2, r3
    786c:	d316      	bcc.n	789c <send_boot+0x408>
    786e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	b2db      	uxtb	r3, r3
    787a:	461a      	mov	r2, r3
    787c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7884:	781b      	ldrb	r3, [r3, #0]
    7886:	1ad3      	subs	r3, r2, r3
    7888:	33ff      	adds	r3, #255	; 0xff
    788a:	2b14      	cmp	r3, #20
    788c:	bfd4      	ite	le
    788e:	2300      	movle	r3, #0
    7890:	2301      	movgt	r3, #1
    7892:	b2db      	uxtb	r3, r3
    7894:	e014      	b.n	78c0 <send_boot+0x42c>
    7896:	bf00      	nop
    7898:	00018a37 	.word	0x00018a37
    789c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	b2db      	uxtb	r3, r3
    78a8:	461a      	mov	r2, r3
    78aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    78ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b2:	781b      	ldrb	r3, [r3, #0]
    78b4:	1ad3      	subs	r3, r2, r3
    78b6:	2b14      	cmp	r3, #20
    78b8:	bfd4      	ite	le
    78ba:	2300      	movle	r3, #0
    78bc:	2301      	movgt	r3, #1
    78be:	b2db      	uxtb	r3, r3
    78c0:	2b00      	cmp	r3, #0
    78c2:	f000 85a5 	beq.w	8410 <send_boot+0xf7c>
    78c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    78ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	461a      	mov	r2, r3
    78d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78da:	2105      	movs	r1, #5
    78dc:	5499      	strb	r1, [r3, r2]
    78de:	f24c 5349 	movw	r3, #50505	; 0xc549
    78e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	3301      	adds	r3, #1
    78ea:	b2da      	uxtb	r2, r3
    78ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    78f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f4:	701a      	strb	r2, [r3, #0]
    78f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    78fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	2bff      	cmp	r3, #255	; 0xff
    7902:	d105      	bne.n	7910 <send_boot+0x47c>
    7904:	f24c 5349 	movw	r3, #50505	; 0xc549
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	2200      	movs	r2, #0
    790e:	701a      	strb	r2, [r3, #0]
    7910:	f24c 5349 	movw	r3, #50505	; 0xc549
    7914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7918:	781b      	ldrb	r3, [r3, #0]
    791a:	461a      	mov	r2, r3
    791c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	2105      	movs	r1, #5
    7926:	5499      	strb	r1, [r3, r2]
    7928:	f24c 5349 	movw	r3, #50505	; 0xc549
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	3301      	adds	r3, #1
    7934:	b2da      	uxtb	r2, r3
    7936:	f24c 5349 	movw	r3, #50505	; 0xc549
    793a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793e:	701a      	strb	r2, [r3, #0]
    7940:	f24c 5349 	movw	r3, #50505	; 0xc549
    7944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7948:	781b      	ldrb	r3, [r3, #0]
    794a:	2bff      	cmp	r3, #255	; 0xff
    794c:	d105      	bne.n	795a <send_boot+0x4c6>
    794e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	2200      	movs	r2, #0
    7958:	701a      	strb	r2, [r3, #0]
    795a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    795e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7962:	2205      	movs	r2, #5
    7964:	701a      	strb	r2, [r3, #0]
    7966:	f24c 634e 	movw	r3, #50766	; 0xc64e
    796a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796e:	2205      	movs	r2, #5
    7970:	701a      	strb	r2, [r3, #0]
    7972:	f24c 5349 	movw	r3, #50505	; 0xc549
    7976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797a:	781b      	ldrb	r3, [r3, #0]
    797c:	461a      	mov	r2, r3
    797e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7986:	7819      	ldrb	r1, [r3, #0]
    7988:	f24c 534c 	movw	r3, #50508	; 0xc54c
    798c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7990:	5499      	strb	r1, [r3, r2]
    7992:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799a:	781a      	ldrb	r2, [r3, #0]
    799c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	4413      	add	r3, r2
    79a8:	b2da      	uxtb	r2, r3
    79aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b2:	701a      	strb	r2, [r3, #0]
    79b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    79b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79bc:	781a      	ldrb	r2, [r3, #0]
    79be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	4413      	add	r3, r2
    79ca:	b2da      	uxtb	r2, r3
    79cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    79d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d4:	701a      	strb	r2, [r3, #0]
    79d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781b      	ldrb	r3, [r3, #0]
    79e0:	3301      	adds	r3, #1
    79e2:	b2da      	uxtb	r2, r3
    79e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    79e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ec:	701a      	strb	r2, [r3, #0]
    79ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    79f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f6:	781b      	ldrb	r3, [r3, #0]
    79f8:	2bff      	cmp	r3, #255	; 0xff
    79fa:	d105      	bne.n	7a08 <send_boot+0x574>
    79fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a04:	2200      	movs	r2, #0
    7a06:	701a      	strb	r2, [r3, #0]
    7a08:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	461a      	mov	r2, r3
    7a14:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1c:	7859      	ldrb	r1, [r3, #1]
    7a1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a26:	5499      	strb	r1, [r3, r2]
    7a28:	4bd1      	ldr	r3, [pc, #836]	; (7d70 <send_boot+0x8dc>)
    7a2a:	781a      	ldrb	r2, [r3, #0]
    7a2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a34:	781b      	ldrb	r3, [r3, #0]
    7a36:	4413      	add	r3, r2
    7a38:	b2da      	uxtb	r2, r3
    7a3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a42:	701a      	strb	r2, [r3, #0]
    7a44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	781a      	ldrb	r2, [r3, #0]
    7a4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	4413      	add	r3, r2
    7a5a:	b2da      	uxtb	r2, r3
    7a5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a64:	701a      	strb	r2, [r3, #0]
    7a66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	781b      	ldrb	r3, [r3, #0]
    7a70:	3301      	adds	r3, #1
    7a72:	b2da      	uxtb	r2, r3
    7a74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7c:	701a      	strb	r2, [r3, #0]
    7a7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	2bff      	cmp	r3, #255	; 0xff
    7a8a:	d105      	bne.n	7a98 <send_boot+0x604>
    7a8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a94:	2200      	movs	r2, #0
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	461a      	mov	r2, r3
    7aa4:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	7899      	ldrb	r1, [r3, #2]
    7aae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	5499      	strb	r1, [r3, r2]
    7ab8:	4bae      	ldr	r3, [pc, #696]	; (7d74 <send_boot+0x8e0>)
    7aba:	781a      	ldrb	r2, [r3, #0]
    7abc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	781b      	ldrb	r3, [r3, #0]
    7ac6:	4413      	add	r3, r2
    7ac8:	b2da      	uxtb	r2, r3
    7aca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad2:	701a      	strb	r2, [r3, #0]
    7ad4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	781a      	ldrb	r2, [r3, #0]
    7ade:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	4413      	add	r3, r2
    7aea:	b2da      	uxtb	r2, r3
    7aec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	3301      	adds	r3, #1
    7b02:	b2da      	uxtb	r2, r3
    7b04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	701a      	strb	r2, [r3, #0]
    7b0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	2bff      	cmp	r3, #255	; 0xff
    7b1a:	d105      	bne.n	7b28 <send_boot+0x694>
    7b1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	2200      	movs	r2, #0
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	461a      	mov	r2, r3
    7b34:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	78d9      	ldrb	r1, [r3, #3]
    7b3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	5499      	strb	r1, [r3, r2]
    7b48:	4b8b      	ldr	r3, [pc, #556]	; (7d78 <send_boot+0x8e4>)
    7b4a:	781a      	ldrb	r2, [r3, #0]
    7b4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	4413      	add	r3, r2
    7b58:	b2da      	uxtb	r2, r3
    7b5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b62:	701a      	strb	r2, [r3, #0]
    7b64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	781a      	ldrb	r2, [r3, #0]
    7b6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	4413      	add	r3, r2
    7b7a:	b2da      	uxtb	r2, r3
    7b7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	701a      	strb	r2, [r3, #0]
    7b86:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	3301      	adds	r3, #1
    7b92:	b2da      	uxtb	r2, r3
    7b94:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	2bff      	cmp	r3, #255	; 0xff
    7baa:	d105      	bne.n	7bb8 <send_boot+0x724>
    7bac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	2200      	movs	r2, #0
    7bb6:	701a      	strb	r2, [r3, #0]
    7bb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	461a      	mov	r2, r3
    7bc4:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	7819      	ldrb	r1, [r3, #0]
    7bce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	5499      	strb	r1, [r3, r2]
    7bd8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be0:	781a      	ldrb	r2, [r3, #0]
    7be2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bea:	781b      	ldrb	r3, [r3, #0]
    7bec:	4413      	add	r3, r2
    7bee:	b2da      	uxtb	r2, r3
    7bf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf8:	701a      	strb	r2, [r3, #0]
    7bfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c02:	781a      	ldrb	r2, [r3, #0]
    7c04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	781b      	ldrb	r3, [r3, #0]
    7c0e:	4413      	add	r3, r2
    7c10:	b2da      	uxtb	r2, r3
    7c12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1a:	701a      	strb	r2, [r3, #0]
    7c1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	3301      	adds	r3, #1
    7c28:	b2da      	uxtb	r2, r3
    7c2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c32:	701a      	strb	r2, [r3, #0]
    7c34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	2bff      	cmp	r3, #255	; 0xff
    7c40:	d105      	bne.n	7c4e <send_boot+0x7ba>
    7c42:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4a:	2200      	movs	r2, #0
    7c4c:	701a      	strb	r2, [r3, #0]
    7c4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	461a      	mov	r2, r3
    7c5a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c62:	7859      	ldrb	r1, [r3, #1]
    7c64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6c:	5499      	strb	r1, [r3, r2]
    7c6e:	4b43      	ldr	r3, [pc, #268]	; (7d7c <send_boot+0x8e8>)
    7c70:	781a      	ldrb	r2, [r3, #0]
    7c72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	4413      	add	r3, r2
    7c7e:	b2da      	uxtb	r2, r3
    7c80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c92:	781a      	ldrb	r2, [r3, #0]
    7c94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9c:	781b      	ldrb	r3, [r3, #0]
    7c9e:	4413      	add	r3, r2
    7ca0:	b2da      	uxtb	r2, r3
    7ca2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7caa:	701a      	strb	r2, [r3, #0]
    7cac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	3301      	adds	r3, #1
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc2:	701a      	strb	r2, [r3, #0]
    7cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	2bff      	cmp	r3, #255	; 0xff
    7cd0:	d105      	bne.n	7cde <send_boot+0x84a>
    7cd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cda:	2200      	movs	r2, #0
    7cdc:	701a      	strb	r2, [r3, #0]
    7cde:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	461a      	mov	r2, r3
    7cea:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	7899      	ldrb	r1, [r3, #2]
    7cf4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfc:	5499      	strb	r1, [r3, r2]
    7cfe:	4b20      	ldr	r3, [pc, #128]	; (7d80 <send_boot+0x8ec>)
    7d00:	781a      	ldrb	r2, [r3, #0]
    7d02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	4413      	add	r3, r2
    7d0e:	b2da      	uxtb	r2, r3
    7d10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d18:	701a      	strb	r2, [r3, #0]
    7d1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	781a      	ldrb	r2, [r3, #0]
    7d24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	4413      	add	r3, r2
    7d30:	b2da      	uxtb	r2, r3
    7d32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3a:	701a      	strb	r2, [r3, #0]
    7d3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	3301      	adds	r3, #1
    7d48:	b2da      	uxtb	r2, r3
    7d4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	2bff      	cmp	r3, #255	; 0xff
    7d60:	d110      	bne.n	7d84 <send_boot+0x8f0>
    7d62:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	2200      	movs	r2, #0
    7d6c:	701a      	strb	r2, [r3, #0]
    7d6e:	e009      	b.n	7d84 <send_boot+0x8f0>
    7d70:	2004cb41 	.word	0x2004cb41
    7d74:	2004cb42 	.word	0x2004cb42
    7d78:	2004cb43 	.word	0x2004cb43
    7d7c:	2004cb45 	.word	0x2004cb45
    7d80:	2004cb46 	.word	0x2004cb46
    7d84:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	781b      	ldrb	r3, [r3, #0]
    7d8e:	461a      	mov	r2, r3
    7d90:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d98:	78d9      	ldrb	r1, [r3, #3]
    7d9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da2:	5499      	strb	r1, [r3, r2]
    7da4:	4bd3      	ldr	r3, [pc, #844]	; (80f4 <send_boot+0xc60>)
    7da6:	781a      	ldrb	r2, [r3, #0]
    7da8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db0:	781b      	ldrb	r3, [r3, #0]
    7db2:	4413      	add	r3, r2
    7db4:	b2da      	uxtb	r2, r3
    7db6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbe:	701a      	strb	r2, [r3, #0]
    7dc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc8:	781a      	ldrb	r2, [r3, #0]
    7dca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd2:	781b      	ldrb	r3, [r3, #0]
    7dd4:	4413      	add	r3, r2
    7dd6:	b2da      	uxtb	r2, r3
    7dd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de0:	701a      	strb	r2, [r3, #0]
    7de2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	3301      	adds	r3, #1
    7dee:	b2da      	uxtb	r2, r3
    7df0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df8:	701a      	strb	r2, [r3, #0]
    7dfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	781b      	ldrb	r3, [r3, #0]
    7e04:	2bff      	cmp	r3, #255	; 0xff
    7e06:	d105      	bne.n	7e14 <send_boot+0x980>
    7e08:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e10:	2200      	movs	r2, #0
    7e12:	701a      	strb	r2, [r3, #0]
    7e14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	461a      	mov	r2, r3
    7e20:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	7819      	ldrb	r1, [r3, #0]
    7e2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	5499      	strb	r1, [r3, r2]
    7e34:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3c:	781a      	ldrb	r2, [r3, #0]
    7e3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e46:	781b      	ldrb	r3, [r3, #0]
    7e48:	4413      	add	r3, r2
    7e4a:	b2da      	uxtb	r2, r3
    7e4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e54:	701a      	strb	r2, [r3, #0]
    7e56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5e:	781a      	ldrb	r2, [r3, #0]
    7e60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e68:	781b      	ldrb	r3, [r3, #0]
    7e6a:	4413      	add	r3, r2
    7e6c:	b2da      	uxtb	r2, r3
    7e6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e76:	701a      	strb	r2, [r3, #0]
    7e78:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	3301      	adds	r3, #1
    7e84:	b2da      	uxtb	r2, r3
    7e86:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8e:	701a      	strb	r2, [r3, #0]
    7e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	2bff      	cmp	r3, #255	; 0xff
    7e9c:	d105      	bne.n	7eaa <send_boot+0xa16>
    7e9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea6:	2200      	movs	r2, #0
    7ea8:	701a      	strb	r2, [r3, #0]
    7eaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	461a      	mov	r2, r3
    7eb6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebe:	7859      	ldrb	r1, [r3, #1]
    7ec0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec8:	5499      	strb	r1, [r3, r2]
    7eca:	4b8b      	ldr	r3, [pc, #556]	; (80f8 <send_boot+0xc64>)
    7ecc:	781a      	ldrb	r2, [r3, #0]
    7ece:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	4413      	add	r3, r2
    7eda:	b2da      	uxtb	r2, r3
    7edc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee4:	701a      	strb	r2, [r3, #0]
    7ee6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eee:	781a      	ldrb	r2, [r3, #0]
    7ef0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef8:	781b      	ldrb	r3, [r3, #0]
    7efa:	4413      	add	r3, r2
    7efc:	b2da      	uxtb	r2, r3
    7efe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f06:	701a      	strb	r2, [r3, #0]
    7f08:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	3301      	adds	r3, #1
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	2bff      	cmp	r3, #255	; 0xff
    7f2c:	d105      	bne.n	7f3a <send_boot+0xaa6>
    7f2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	2200      	movs	r2, #0
    7f38:	701a      	strb	r2, [r3, #0]
    7f3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	461a      	mov	r2, r3
    7f46:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	7899      	ldrb	r1, [r3, #2]
    7f50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f58:	5499      	strb	r1, [r3, r2]
    7f5a:	4b68      	ldr	r3, [pc, #416]	; (80fc <send_boot+0xc68>)
    7f5c:	781a      	ldrb	r2, [r3, #0]
    7f5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	4413      	add	r3, r2
    7f6a:	b2da      	uxtb	r2, r3
    7f6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f74:	701a      	strb	r2, [r3, #0]
    7f76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	781a      	ldrb	r2, [r3, #0]
    7f80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	4413      	add	r3, r2
    7f8c:	b2da      	uxtb	r2, r3
    7f8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	701a      	strb	r2, [r3, #0]
    7f98:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	3301      	adds	r3, #1
    7fa4:	b2da      	uxtb	r2, r3
    7fa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	701a      	strb	r2, [r3, #0]
    7fb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	2bff      	cmp	r3, #255	; 0xff
    7fbc:	d105      	bne.n	7fca <send_boot+0xb36>
    7fbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	2200      	movs	r2, #0
    7fc8:	701a      	strb	r2, [r3, #0]
    7fca:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd2:	781b      	ldrb	r3, [r3, #0]
    7fd4:	461a      	mov	r2, r3
    7fd6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	78d9      	ldrb	r1, [r3, #3]
    7fe0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe8:	5499      	strb	r1, [r3, r2]
    7fea:	4b45      	ldr	r3, [pc, #276]	; (8100 <send_boot+0xc6c>)
    7fec:	781a      	ldrb	r2, [r3, #0]
    7fee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	4413      	add	r3, r2
    7ffa:	b2da      	uxtb	r2, r3
    7ffc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8004:	701a      	strb	r2, [r3, #0]
    8006:	f24c 634e 	movw	r3, #50766	; 0xc64e
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	781a      	ldrb	r2, [r3, #0]
    8010:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	4413      	add	r3, r2
    801c:	b2da      	uxtb	r2, r3
    801e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	701a      	strb	r2, [r3, #0]
    8028:	f24c 5349 	movw	r3, #50505	; 0xc549
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	3301      	adds	r3, #1
    8034:	b2da      	uxtb	r2, r3
    8036:	f24c 5349 	movw	r3, #50505	; 0xc549
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	701a      	strb	r2, [r3, #0]
    8040:	f24c 5349 	movw	r3, #50505	; 0xc549
    8044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	2bff      	cmp	r3, #255	; 0xff
    804c:	d105      	bne.n	805a <send_boot+0xbc6>
    804e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	2200      	movs	r2, #0
    8058:	701a      	strb	r2, [r3, #0]
    805a:	f24c 5349 	movw	r3, #50505	; 0xc549
    805e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	461a      	mov	r2, r3
    8066:	f240 5342 	movw	r3, #1346	; 0x542
    806a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806e:	7819      	ldrb	r1, [r3, #0]
    8070:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8078:	5499      	strb	r1, [r3, r2]
    807a:	f240 5342 	movw	r3, #1346	; 0x542
    807e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8082:	781a      	ldrb	r2, [r3, #0]
    8084:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	4413      	add	r3, r2
    8090:	b2da      	uxtb	r2, r3
    8092:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809a:	701a      	strb	r2, [r3, #0]
    809c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a4:	781a      	ldrb	r2, [r3, #0]
    80a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	781b      	ldrb	r3, [r3, #0]
    80b0:	4413      	add	r3, r2
    80b2:	b2da      	uxtb	r2, r3
    80b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80bc:	701a      	strb	r2, [r3, #0]
    80be:	f24c 5349 	movw	r3, #50505	; 0xc549
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	781b      	ldrb	r3, [r3, #0]
    80c8:	3301      	adds	r3, #1
    80ca:	b2da      	uxtb	r2, r3
    80cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    80d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d4:	701a      	strb	r2, [r3, #0]
    80d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    80da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80de:	781b      	ldrb	r3, [r3, #0]
    80e0:	2bff      	cmp	r3, #255	; 0xff
    80e2:	d10f      	bne.n	8104 <send_boot+0xc70>
    80e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    80e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ec:	2200      	movs	r2, #0
    80ee:	701a      	strb	r2, [r3, #0]
    80f0:	e008      	b.n	8104 <send_boot+0xc70>
    80f2:	bf00      	nop
    80f4:	2004cb47 	.word	0x2004cb47
    80f8:	2004cb3d 	.word	0x2004cb3d
    80fc:	2004cb3e 	.word	0x2004cb3e
    8100:	2004cb3f 	.word	0x2004cb3f
    8104:	f24c 5349 	movw	r3, #50505	; 0xc549
    8108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    810c:	781b      	ldrb	r3, [r3, #0]
    810e:	461a      	mov	r2, r3
    8110:	f240 5342 	movw	r3, #1346	; 0x542
    8114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8118:	7859      	ldrb	r1, [r3, #1]
    811a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    811e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8122:	5499      	strb	r1, [r3, r2]
    8124:	4bc5      	ldr	r3, [pc, #788]	; (843c <send_boot+0xfa8>)
    8126:	781a      	ldrb	r2, [r3, #0]
    8128:	f24c 634d 	movw	r3, #50765	; 0xc64d
    812c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8130:	781b      	ldrb	r3, [r3, #0]
    8132:	4413      	add	r3, r2
    8134:	b2da      	uxtb	r2, r3
    8136:	f24c 634d 	movw	r3, #50765	; 0xc64d
    813a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813e:	701a      	strb	r2, [r3, #0]
    8140:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8148:	781a      	ldrb	r2, [r3, #0]
    814a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    814e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	4413      	add	r3, r2
    8156:	b2da      	uxtb	r2, r3
    8158:	f24c 634e 	movw	r3, #50766	; 0xc64e
    815c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8160:	701a      	strb	r2, [r3, #0]
    8162:	f24c 5349 	movw	r3, #50505	; 0xc549
    8166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	3301      	adds	r3, #1
    816e:	b2da      	uxtb	r2, r3
    8170:	f24c 5349 	movw	r3, #50505	; 0xc549
    8174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8178:	701a      	strb	r2, [r3, #0]
    817a:	f24c 5349 	movw	r3, #50505	; 0xc549
    817e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	2bff      	cmp	r3, #255	; 0xff
    8186:	d105      	bne.n	8194 <send_boot+0xd00>
    8188:	f24c 5349 	movw	r3, #50505	; 0xc549
    818c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8190:	2200      	movs	r2, #0
    8192:	701a      	strb	r2, [r3, #0]
    8194:	f24c 5349 	movw	r3, #50505	; 0xc549
    8198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819c:	781b      	ldrb	r3, [r3, #0]
    819e:	461a      	mov	r2, r3
    81a0:	f240 5344 	movw	r3, #1348	; 0x544
    81a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a8:	7819      	ldrb	r1, [r3, #0]
    81aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    81ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b2:	5499      	strb	r1, [r3, r2]
    81b4:	f240 5344 	movw	r3, #1348	; 0x544
    81b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81bc:	781a      	ldrb	r2, [r3, #0]
    81be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c6:	781b      	ldrb	r3, [r3, #0]
    81c8:	4413      	add	r3, r2
    81ca:	b2da      	uxtb	r2, r3
    81cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d4:	701a      	strb	r2, [r3, #0]
    81d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81de:	781a      	ldrb	r2, [r3, #0]
    81e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	4413      	add	r3, r2
    81ec:	b2da      	uxtb	r2, r3
    81ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f6:	701a      	strb	r2, [r3, #0]
    81f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    81fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	3301      	adds	r3, #1
    8204:	b2da      	uxtb	r2, r3
    8206:	f24c 5349 	movw	r3, #50505	; 0xc549
    820a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820e:	701a      	strb	r2, [r3, #0]
    8210:	f24c 5349 	movw	r3, #50505	; 0xc549
    8214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	2bff      	cmp	r3, #255	; 0xff
    821c:	d105      	bne.n	822a <send_boot+0xd96>
    821e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8226:	2200      	movs	r2, #0
    8228:	701a      	strb	r2, [r3, #0]
    822a:	f24c 5349 	movw	r3, #50505	; 0xc549
    822e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	461a      	mov	r2, r3
    8236:	f240 5344 	movw	r3, #1348	; 0x544
    823a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823e:	7859      	ldrb	r1, [r3, #1]
    8240:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8248:	5499      	strb	r1, [r3, r2]
    824a:	4b7d      	ldr	r3, [pc, #500]	; (8440 <send_boot+0xfac>)
    824c:	781a      	ldrb	r2, [r3, #0]
    824e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	4413      	add	r3, r2
    825a:	b2da      	uxtb	r2, r3
    825c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8264:	701a      	strb	r2, [r3, #0]
    8266:	f24c 634e 	movw	r3, #50766	; 0xc64e
    826a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826e:	781a      	ldrb	r2, [r3, #0]
    8270:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	4413      	add	r3, r2
    827c:	b2da      	uxtb	r2, r3
    827e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8286:	701a      	strb	r2, [r3, #0]
    8288:	f24c 5349 	movw	r3, #50505	; 0xc549
    828c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8290:	781b      	ldrb	r3, [r3, #0]
    8292:	3301      	adds	r3, #1
    8294:	b2da      	uxtb	r2, r3
    8296:	f24c 5349 	movw	r3, #50505	; 0xc549
    829a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829e:	701a      	strb	r2, [r3, #0]
    82a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	2bff      	cmp	r3, #255	; 0xff
    82ac:	d105      	bne.n	82ba <send_boot+0xe26>
    82ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	2200      	movs	r2, #0
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	461a      	mov	r2, r3
    82c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	7819      	ldrb	r1, [r3, #0]
    82d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    82d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d8:	5499      	strb	r1, [r3, r2]
    82da:	f24c 5349 	movw	r3, #50505	; 0xc549
    82de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e2:	781b      	ldrb	r3, [r3, #0]
    82e4:	3301      	adds	r3, #1
    82e6:	b2da      	uxtb	r2, r3
    82e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f0:	701a      	strb	r2, [r3, #0]
    82f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    82f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	2bff      	cmp	r3, #255	; 0xff
    82fe:	d105      	bne.n	830c <send_boot+0xe78>
    8300:	f24c 5349 	movw	r3, #50505	; 0xc549
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	2200      	movs	r2, #0
    830a:	701a      	strb	r2, [r3, #0]
    830c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8314:	781b      	ldrb	r3, [r3, #0]
    8316:	461a      	mov	r2, r3
    8318:	f24c 634e 	movw	r3, #50766	; 0xc64e
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	7819      	ldrb	r1, [r3, #0]
    8322:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832a:	5499      	strb	r1, [r3, r2]
    832c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	3301      	adds	r3, #1
    8338:	b2da      	uxtb	r2, r3
    833a:	f24c 5349 	movw	r3, #50505	; 0xc549
    833e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8342:	701a      	strb	r2, [r3, #0]
    8344:	f24c 5349 	movw	r3, #50505	; 0xc549
    8348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834c:	781b      	ldrb	r3, [r3, #0]
    834e:	2bff      	cmp	r3, #255	; 0xff
    8350:	d105      	bne.n	835e <send_boot+0xeca>
    8352:	f24c 5349 	movw	r3, #50505	; 0xc549
    8356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835a:	2200      	movs	r2, #0
    835c:	701a      	strb	r2, [r3, #0]
    835e:	f242 0339 	movw	r3, #8249	; 0x2039
    8362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	b2db      	uxtb	r3, r3
    836a:	f003 0310 	and.w	r3, r3, #16
    836e:	2b00      	cmp	r3, #0
    8370:	d15a      	bne.n	8428 <send_boot+0xf94>
    8372:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	b2db      	uxtb	r3, r3
    837e:	461a      	mov	r2, r3
    8380:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8388:	5c9a      	ldrb	r2, [r3, r2]
    838a:	f24c 634b 	movw	r3, #50763	; 0xc64b
    838e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8392:	701a      	strb	r2, [r3, #0]
    8394:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839c:	2200      	movs	r2, #0
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	b2db      	uxtb	r3, r3
    83ac:	3301      	adds	r3, #1
    83ae:	b2da      	uxtb	r2, r3
    83b0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b8:	701a      	strb	r2, [r3, #0]
    83ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	b2db      	uxtb	r3, r3
    83c6:	2bff      	cmp	r3, #255	; 0xff
    83c8:	d105      	bne.n	83d6 <send_boot+0xf42>
    83ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	2200      	movs	r2, #0
    83d4:	701a      	strb	r2, [r3, #0]
    83d6:	f242 0338 	movw	r3, #8248	; 0x2038
    83da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83de:	f242 0238 	movw	r2, #8248	; 0x2038
    83e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83e6:	7812      	ldrb	r2, [r2, #0]
    83e8:	b2d2      	uxtb	r2, r2
    83ea:	f042 0201 	orr.w	r2, r2, #1
    83ee:	b2d2      	uxtb	r2, r2
    83f0:	701a      	strb	r2, [r3, #0]
    83f2:	f242 0339 	movw	r3, #8249	; 0x2039
    83f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fa:	f242 0239 	movw	r2, #8249	; 0x2039
    83fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8402:	7812      	ldrb	r2, [r2, #0]
    8404:	b2d2      	uxtb	r2, r2
    8406:	f042 0210 	orr.w	r2, r2, #16
    840a:	b2d2      	uxtb	r2, r2
    840c:	701a      	strb	r2, [r3, #0]
    840e:	e00b      	b.n	8428 <send_boot+0xf94>
    8410:	f24c 5348 	movw	r3, #50504	; 0xc548
    8414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8418:	781b      	ldrb	r3, [r3, #0]
    841a:	3301      	adds	r3, #1
    841c:	b2da      	uxtb	r2, r3
    841e:	f24c 5348 	movw	r3, #50504	; 0xc548
    8422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8426:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8428:	f240 533d 	movw	r3, #1341	; 0x53d
    842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8430:	2200      	movs	r2, #0
    8432:	701a      	strb	r2, [r3, #0]
  }
}
    8434:	46bd      	mov	sp, r7
    8436:	f85d 7b04 	ldr.w	r7, [sp], #4
    843a:	4770      	bx	lr
    843c:	20000543 	.word	0x20000543
    8440:	20000545 	.word	0x20000545

00008444 <send_attitude>:
void send_attitude(void){ //499ms
    8444:	b480      	push	{r7}
    8446:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8448:	f240 533d 	movw	r3, #1341	; 0x53d
    844c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	2b00      	cmp	r3, #0
    8454:	f040 84ee 	bne.w	8e34 <send_attitude+0x9f0>
  {
    count++;
    8458:	f24c 5341 	movw	r3, #50497	; 0xc541
    845c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	3301      	adds	r3, #1
    8464:	b2da      	uxtb	r2, r3
    8466:	f24c 5341 	movw	r3, #50497	; 0xc541
    846a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8470:	f24c 5341 	movw	r3, #50497	; 0xc541
    8474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	2bfa      	cmp	r3, #250	; 0xfa
    847c:	d105      	bne.n	848a <send_attitude+0x46>
    847e:	f24c 5341 	movw	r3, #50497	; 0xc541
    8482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8486:	2200      	movs	r2, #0
    8488:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    848a:	f24c 5341 	movw	r3, #50497	; 0xc541
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	781a      	ldrb	r2, [r3, #0]
    8494:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8498:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    849c:	fba3 1302 	umull	r1, r3, r3, r2
    84a0:	0899      	lsrs	r1, r3, #2
    84a2:	460b      	mov	r3, r1
    84a4:	009b      	lsls	r3, r3, #2
    84a6:	440b      	add	r3, r1
    84a8:	1ad3      	subs	r3, r2, r3
    84aa:	b2db      	uxtb	r3, r3
    84ac:	2b00      	cmp	r3, #0
    84ae:	f040 84c1 	bne.w	8e34 <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    84b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    84b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ba:	781a      	ldrb	r2, [r3, #0]
    84bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	b2db      	uxtb	r3, r3
    84c8:	429a      	cmp	r2, r3
    84ca:	d313      	bcc.n	84f4 <send_attitude+0xb0>
    84cc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	b2db      	uxtb	r3, r3
    84d8:	461a      	mov	r2, r3
    84da:	f24c 5349 	movw	r3, #50505	; 0xc549
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	781b      	ldrb	r3, [r3, #0]
    84e4:	1ad3      	subs	r3, r2, r3
    84e6:	33ff      	adds	r3, #255	; 0xff
    84e8:	2b10      	cmp	r3, #16
    84ea:	bfd4      	ite	le
    84ec:	2300      	movle	r3, #0
    84ee:	2301      	movgt	r3, #1
    84f0:	b2db      	uxtb	r3, r3
    84f2:	e011      	b.n	8518 <send_attitude+0xd4>
    84f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fc:	781b      	ldrb	r3, [r3, #0]
    84fe:	b2db      	uxtb	r3, r3
    8500:	461a      	mov	r2, r3
    8502:	f24c 5349 	movw	r3, #50505	; 0xc549
    8506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	1ad3      	subs	r3, r2, r3
    850e:	2b10      	cmp	r3, #16
    8510:	bfd4      	ite	le
    8512:	2300      	movle	r3, #0
    8514:	2301      	movgt	r3, #1
    8516:	b2db      	uxtb	r3, r3
    8518:	2b00      	cmp	r3, #0
    851a:	f000 847f 	beq.w	8e1c <send_attitude+0x9d8>
    851e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	461a      	mov	r2, r3
    852a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	2105      	movs	r1, #5
    8534:	5499      	strb	r1, [r3, r2]
    8536:	f24c 5349 	movw	r3, #50505	; 0xc549
    853a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	3301      	adds	r3, #1
    8542:	b2da      	uxtb	r2, r3
    8544:	f24c 5349 	movw	r3, #50505	; 0xc549
    8548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854c:	701a      	strb	r2, [r3, #0]
    854e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	2bff      	cmp	r3, #255	; 0xff
    855a:	d105      	bne.n	8568 <send_attitude+0x124>
    855c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	2200      	movs	r2, #0
    8566:	701a      	strb	r2, [r3, #0]
    8568:	f24c 5349 	movw	r3, #50505	; 0xc549
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	461a      	mov	r2, r3
    8574:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857c:	2106      	movs	r1, #6
    857e:	5499      	strb	r1, [r3, r2]
    8580:	f24c 5349 	movw	r3, #50505	; 0xc549
    8584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	3301      	adds	r3, #1
    858c:	b2da      	uxtb	r2, r3
    858e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8596:	701a      	strb	r2, [r3, #0]
    8598:	f24c 5349 	movw	r3, #50505	; 0xc549
    859c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	2bff      	cmp	r3, #255	; 0xff
    85a4:	d105      	bne.n	85b2 <send_attitude+0x16e>
    85a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    85aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ae:	2200      	movs	r2, #0
    85b0:	701a      	strb	r2, [r3, #0]
    85b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    85b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ba:	2206      	movs	r2, #6
    85bc:	701a      	strb	r2, [r3, #0]
    85be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    85c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c6:	2206      	movs	r2, #6
    85c8:	701a      	strb	r2, [r3, #0]
    85ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	461a      	mov	r2, r3
    85d6:	f64c 3308 	movw	r3, #51976	; 0xcb08
    85da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85de:	7819      	ldrb	r1, [r3, #0]
    85e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    85e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e8:	5499      	strb	r1, [r3, r2]
    85ea:	f64c 3308 	movw	r3, #51976	; 0xcb08
    85ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f2:	781a      	ldrb	r2, [r3, #0]
    85f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    85f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	4413      	add	r3, r2
    8600:	b2da      	uxtb	r2, r3
    8602:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860a:	701a      	strb	r2, [r3, #0]
    860c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8614:	781a      	ldrb	r2, [r3, #0]
    8616:	f24c 634d 	movw	r3, #50765	; 0xc64d
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	4413      	add	r3, r2
    8622:	b2da      	uxtb	r2, r3
    8624:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	701a      	strb	r2, [r3, #0]
    862e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	3301      	adds	r3, #1
    863a:	b2da      	uxtb	r2, r3
    863c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8644:	701a      	strb	r2, [r3, #0]
    8646:	f24c 5349 	movw	r3, #50505	; 0xc549
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2bff      	cmp	r3, #255	; 0xff
    8652:	d105      	bne.n	8660 <send_attitude+0x21c>
    8654:	f24c 5349 	movw	r3, #50505	; 0xc549
    8658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865c:	2200      	movs	r2, #0
    865e:	701a      	strb	r2, [r3, #0]
    8660:	f24c 5349 	movw	r3, #50505	; 0xc549
    8664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	461a      	mov	r2, r3
    866c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8674:	7859      	ldrb	r1, [r3, #1]
    8676:	f24c 534c 	movw	r3, #50508	; 0xc54c
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	5499      	strb	r1, [r3, r2]
    8680:	4bd1      	ldr	r3, [pc, #836]	; (89c8 <send_attitude+0x584>)
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	4413      	add	r3, r2
    8690:	b2da      	uxtb	r2, r3
    8692:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869a:	701a      	strb	r2, [r3, #0]
    869c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	4413      	add	r3, r2
    86b2:	b2da      	uxtb	r2, r3
    86b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86bc:	701a      	strb	r2, [r3, #0]
    86be:	f24c 5349 	movw	r3, #50505	; 0xc549
    86c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	3301      	adds	r3, #1
    86ca:	b2da      	uxtb	r2, r3
    86cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    86d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2bff      	cmp	r3, #255	; 0xff
    86e2:	d105      	bne.n	86f0 <send_attitude+0x2ac>
    86e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	2200      	movs	r2, #0
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    86f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	461a      	mov	r2, r3
    86fc:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8704:	7899      	ldrb	r1, [r3, #2]
    8706:	f24c 534c 	movw	r3, #50508	; 0xc54c
    870a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870e:	5499      	strb	r1, [r3, r2]
    8710:	4bae      	ldr	r3, [pc, #696]	; (89cc <send_attitude+0x588>)
    8712:	781a      	ldrb	r2, [r3, #0]
    8714:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871c:	781b      	ldrb	r3, [r3, #0]
    871e:	4413      	add	r3, r2
    8720:	b2da      	uxtb	r2, r3
    8722:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872a:	701a      	strb	r2, [r3, #0]
    872c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8734:	781a      	ldrb	r2, [r3, #0]
    8736:	f24c 634d 	movw	r3, #50765	; 0xc64d
    873a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	4413      	add	r3, r2
    8742:	b2da      	uxtb	r2, r3
    8744:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874c:	701a      	strb	r2, [r3, #0]
    874e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	3301      	adds	r3, #1
    875a:	b2da      	uxtb	r2, r3
    875c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8764:	701a      	strb	r2, [r3, #0]
    8766:	f24c 5349 	movw	r3, #50505	; 0xc549
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2bff      	cmp	r3, #255	; 0xff
    8772:	d105      	bne.n	8780 <send_attitude+0x33c>
    8774:	f24c 5349 	movw	r3, #50505	; 0xc549
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	2200      	movs	r2, #0
    877e:	701a      	strb	r2, [r3, #0]
    8780:	f24c 5349 	movw	r3, #50505	; 0xc549
    8784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8788:	781b      	ldrb	r3, [r3, #0]
    878a:	461a      	mov	r2, r3
    878c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8794:	78d9      	ldrb	r1, [r3, #3]
    8796:	f24c 534c 	movw	r3, #50508	; 0xc54c
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	5499      	strb	r1, [r3, r2]
    87a0:	4b8b      	ldr	r3, [pc, #556]	; (89d0 <send_attitude+0x58c>)
    87a2:	781a      	ldrb	r2, [r3, #0]
    87a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ac:	781b      	ldrb	r3, [r3, #0]
    87ae:	4413      	add	r3, r2
    87b0:	b2da      	uxtb	r2, r3
    87b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ba:	701a      	strb	r2, [r3, #0]
    87bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	781a      	ldrb	r2, [r3, #0]
    87c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	781b      	ldrb	r3, [r3, #0]
    87d0:	4413      	add	r3, r2
    87d2:	b2da      	uxtb	r2, r3
    87d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	701a      	strb	r2, [r3, #0]
    87de:	f24c 5349 	movw	r3, #50505	; 0xc549
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	3301      	adds	r3, #1
    87ea:	b2da      	uxtb	r2, r3
    87ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	701a      	strb	r2, [r3, #0]
    87f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	2bff      	cmp	r3, #255	; 0xff
    8802:	d105      	bne.n	8810 <send_attitude+0x3cc>
    8804:	f24c 5349 	movw	r3, #50505	; 0xc549
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	2200      	movs	r2, #0
    880e:	701a      	strb	r2, [r3, #0]
    8810:	f24c 5349 	movw	r3, #50505	; 0xc549
    8814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8818:	781b      	ldrb	r3, [r3, #0]
    881a:	461a      	mov	r2, r3
    881c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	7819      	ldrb	r1, [r3, #0]
    8826:	f24c 534c 	movw	r3, #50508	; 0xc54c
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	5499      	strb	r1, [r3, r2]
    8830:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8838:	781a      	ldrb	r2, [r3, #0]
    883a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    883e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8842:	781b      	ldrb	r3, [r3, #0]
    8844:	4413      	add	r3, r2
    8846:	b2da      	uxtb	r2, r3
    8848:	f24c 634d 	movw	r3, #50765	; 0xc64d
    884c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8850:	701a      	strb	r2, [r3, #0]
    8852:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885a:	781a      	ldrb	r2, [r3, #0]
    885c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	4413      	add	r3, r2
    8868:	b2da      	uxtb	r2, r3
    886a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    886e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8872:	701a      	strb	r2, [r3, #0]
    8874:	f24c 5349 	movw	r3, #50505	; 0xc549
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	3301      	adds	r3, #1
    8880:	b2da      	uxtb	r2, r3
    8882:	f24c 5349 	movw	r3, #50505	; 0xc549
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	2bff      	cmp	r3, #255	; 0xff
    8898:	d105      	bne.n	88a6 <send_attitude+0x462>
    889a:	f24c 5349 	movw	r3, #50505	; 0xc549
    889e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a2:	2200      	movs	r2, #0
    88a4:	701a      	strb	r2, [r3, #0]
    88a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    88aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	461a      	mov	r2, r3
    88b2:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    88b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ba:	7859      	ldrb	r1, [r3, #1]
    88bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	5499      	strb	r1, [r3, r2]
    88c6:	4b43      	ldr	r3, [pc, #268]	; (89d4 <send_attitude+0x590>)
    88c8:	781a      	ldrb	r2, [r3, #0]
    88ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	4413      	add	r3, r2
    88d6:	b2da      	uxtb	r2, r3
    88d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e0:	701a      	strb	r2, [r3, #0]
    88e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ea:	781a      	ldrb	r2, [r3, #0]
    88ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	4413      	add	r3, r2
    88f8:	b2da      	uxtb	r2, r3
    88fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8902:	701a      	strb	r2, [r3, #0]
    8904:	f24c 5349 	movw	r3, #50505	; 0xc549
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	3301      	adds	r3, #1
    8910:	b2da      	uxtb	r2, r3
    8912:	f24c 5349 	movw	r3, #50505	; 0xc549
    8916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891a:	701a      	strb	r2, [r3, #0]
    891c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	781b      	ldrb	r3, [r3, #0]
    8926:	2bff      	cmp	r3, #255	; 0xff
    8928:	d105      	bne.n	8936 <send_attitude+0x4f2>
    892a:	f24c 5349 	movw	r3, #50505	; 0xc549
    892e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8932:	2200      	movs	r2, #0
    8934:	701a      	strb	r2, [r3, #0]
    8936:	f24c 5349 	movw	r3, #50505	; 0xc549
    893a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	461a      	mov	r2, r3
    8942:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894a:	7899      	ldrb	r1, [r3, #2]
    894c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	5499      	strb	r1, [r3, r2]
    8956:	4b20      	ldr	r3, [pc, #128]	; (89d8 <send_attitude+0x594>)
    8958:	781a      	ldrb	r2, [r3, #0]
    895a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    895e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8962:	781b      	ldrb	r3, [r3, #0]
    8964:	4413      	add	r3, r2
    8966:	b2da      	uxtb	r2, r3
    8968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    896c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8970:	701a      	strb	r2, [r3, #0]
    8972:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897a:	781a      	ldrb	r2, [r3, #0]
    897c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8984:	781b      	ldrb	r3, [r3, #0]
    8986:	4413      	add	r3, r2
    8988:	b2da      	uxtb	r2, r3
    898a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    898e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8992:	701a      	strb	r2, [r3, #0]
    8994:	f24c 5349 	movw	r3, #50505	; 0xc549
    8998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	3301      	adds	r3, #1
    89a0:	b2da      	uxtb	r2, r3
    89a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	701a      	strb	r2, [r3, #0]
    89ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	781b      	ldrb	r3, [r3, #0]
    89b6:	2bff      	cmp	r3, #255	; 0xff
    89b8:	d110      	bne.n	89dc <send_attitude+0x598>
    89ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	2200      	movs	r2, #0
    89c4:	701a      	strb	r2, [r3, #0]
    89c6:	e009      	b.n	89dc <send_attitude+0x598>
    89c8:	2004cb09 	.word	0x2004cb09
    89cc:	2004cb0a 	.word	0x2004cb0a
    89d0:	2004cb0b 	.word	0x2004cb0b
    89d4:	2004cb0d 	.word	0x2004cb0d
    89d8:	2004cb0e 	.word	0x2004cb0e
    89dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	461a      	mov	r2, r3
    89e8:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    89ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f0:	78d9      	ldrb	r1, [r3, #3]
    89f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    89f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fa:	5499      	strb	r1, [r3, r2]
    89fc:	4bc2      	ldr	r3, [pc, #776]	; (8d08 <send_attitude+0x8c4>)
    89fe:	781a      	ldrb	r2, [r3, #0]
    8a00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	4413      	add	r3, r2
    8a0c:	b2da      	uxtb	r2, r3
    8a0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a16:	701a      	strb	r2, [r3, #0]
    8a18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a20:	781a      	ldrb	r2, [r3, #0]
    8a22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	4413      	add	r3, r2
    8a2e:	b2da      	uxtb	r2, r3
    8a30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a38:	701a      	strb	r2, [r3, #0]
    8a3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	3301      	adds	r3, #1
    8a46:	b2da      	uxtb	r2, r3
    8a48:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a50:	701a      	strb	r2, [r3, #0]
    8a52:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5a:	781b      	ldrb	r3, [r3, #0]
    8a5c:	2bff      	cmp	r3, #255	; 0xff
    8a5e:	d105      	bne.n	8a6c <send_attitude+0x628>
    8a60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a68:	2200      	movs	r2, #0
    8a6a:	701a      	strb	r2, [r3, #0]
    8a6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	461a      	mov	r2, r3
    8a78:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a80:	7819      	ldrb	r1, [r3, #0]
    8a82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8a:	5499      	strb	r1, [r3, r2]
    8a8c:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a94:	781a      	ldrb	r2, [r3, #0]
    8a96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	4413      	add	r3, r2
    8aa2:	b2da      	uxtb	r2, r3
    8aa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aac:	701a      	strb	r2, [r3, #0]
    8aae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab6:	781a      	ldrb	r2, [r3, #0]
    8ab8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	781b      	ldrb	r3, [r3, #0]
    8ac2:	4413      	add	r3, r2
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	3301      	adds	r3, #1
    8adc:	b2da      	uxtb	r2, r3
    8ade:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae6:	701a      	strb	r2, [r3, #0]
    8ae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	2bff      	cmp	r3, #255	; 0xff
    8af4:	d105      	bne.n	8b02 <send_attitude+0x6be>
    8af6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afe:	2200      	movs	r2, #0
    8b00:	701a      	strb	r2, [r3, #0]
    8b02:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	461a      	mov	r2, r3
    8b0e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b16:	7859      	ldrb	r1, [r3, #1]
    8b18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	5499      	strb	r1, [r3, r2]
    8b22:	4b7a      	ldr	r3, [pc, #488]	; (8d0c <send_attitude+0x8c8>)
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	4413      	add	r3, r2
    8b32:	b2da      	uxtb	r2, r3
    8b34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3c:	701a      	strb	r2, [r3, #0]
    8b3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b46:	781a      	ldrb	r2, [r3, #0]
    8b48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	4413      	add	r3, r2
    8b54:	b2da      	uxtb	r2, r3
    8b56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5e:	701a      	strb	r2, [r3, #0]
    8b60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	781b      	ldrb	r3, [r3, #0]
    8b6a:	3301      	adds	r3, #1
    8b6c:	b2da      	uxtb	r2, r3
    8b6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b76:	701a      	strb	r2, [r3, #0]
    8b78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	2bff      	cmp	r3, #255	; 0xff
    8b84:	d105      	bne.n	8b92 <send_attitude+0x74e>
    8b86:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
    8b92:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	461a      	mov	r2, r3
    8b9e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba6:	7899      	ldrb	r1, [r3, #2]
    8ba8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	5499      	strb	r1, [r3, r2]
    8bb2:	4b57      	ldr	r3, [pc, #348]	; (8d10 <send_attitude+0x8cc>)
    8bb4:	781a      	ldrb	r2, [r3, #0]
    8bb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	4413      	add	r3, r2
    8bc2:	b2da      	uxtb	r2, r3
    8bc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bcc:	701a      	strb	r2, [r3, #0]
    8bce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd6:	781a      	ldrb	r2, [r3, #0]
    8bd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	781b      	ldrb	r3, [r3, #0]
    8be2:	4413      	add	r3, r2
    8be4:	b2da      	uxtb	r2, r3
    8be6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bee:	701a      	strb	r2, [r3, #0]
    8bf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	3301      	adds	r3, #1
    8bfc:	b2da      	uxtb	r2, r3
    8bfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	2bff      	cmp	r3, #255	; 0xff
    8c14:	d105      	bne.n	8c22 <send_attitude+0x7de>
    8c16:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1e:	2200      	movs	r2, #0
    8c20:	701a      	strb	r2, [r3, #0]
    8c22:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2a:	781b      	ldrb	r3, [r3, #0]
    8c2c:	461a      	mov	r2, r3
    8c2e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	78d9      	ldrb	r1, [r3, #3]
    8c38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	5499      	strb	r1, [r3, r2]
    8c42:	4b34      	ldr	r3, [pc, #208]	; (8d14 <send_attitude+0x8d0>)
    8c44:	781a      	ldrb	r2, [r3, #0]
    8c46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	781b      	ldrb	r3, [r3, #0]
    8c50:	4413      	add	r3, r2
    8c52:	b2da      	uxtb	r2, r3
    8c54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5c:	701a      	strb	r2, [r3, #0]
    8c5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	781a      	ldrb	r2, [r3, #0]
    8c68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c70:	781b      	ldrb	r3, [r3, #0]
    8c72:	4413      	add	r3, r2
    8c74:	b2da      	uxtb	r2, r3
    8c76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	701a      	strb	r2, [r3, #0]
    8c80:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	3301      	adds	r3, #1
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	701a      	strb	r2, [r3, #0]
    8c98:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	781b      	ldrb	r3, [r3, #0]
    8ca2:	2bff      	cmp	r3, #255	; 0xff
    8ca4:	d105      	bne.n	8cb2 <send_attitude+0x86e>
    8ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	2200      	movs	r2, #0
    8cb0:	701a      	strb	r2, [r3, #0]
    8cb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	461a      	mov	r2, r3
    8cbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	7819      	ldrb	r1, [r3, #0]
    8cc8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	5499      	strb	r1, [r3, r2]
    8cd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	3301      	adds	r3, #1
    8cde:	b2da      	uxtb	r2, r3
    8ce0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	701a      	strb	r2, [r3, #0]
    8cea:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	2bff      	cmp	r3, #255	; 0xff
    8cf6:	d10f      	bne.n	8d18 <send_attitude+0x8d4>
    8cf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d00:	2200      	movs	r2, #0
    8d02:	701a      	strb	r2, [r3, #0]
    8d04:	e008      	b.n	8d18 <send_attitude+0x8d4>
    8d06:	bf00      	nop
    8d08:	2004cb0f 	.word	0x2004cb0f
    8d0c:	2004cb11 	.word	0x2004cb11
    8d10:	2004cb12 	.word	0x2004cb12
    8d14:	2004cb13 	.word	0x2004cb13
    8d18:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d20:	781b      	ldrb	r3, [r3, #0]
    8d22:	461a      	mov	r2, r3
    8d24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2c:	7819      	ldrb	r1, [r3, #0]
    8d2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	5499      	strb	r1, [r3, r2]
    8d38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	3301      	adds	r3, #1
    8d44:	b2da      	uxtb	r2, r3
    8d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	2bff      	cmp	r3, #255	; 0xff
    8d5c:	d105      	bne.n	8d6a <send_attitude+0x926>
    8d5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	2200      	movs	r2, #0
    8d68:	701a      	strb	r2, [r3, #0]
    8d6a:	f242 0339 	movw	r3, #8249	; 0x2039
    8d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	b2db      	uxtb	r3, r3
    8d76:	f003 0310 	and.w	r3, r3, #16
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d15a      	bne.n	8e34 <send_attitude+0x9f0>
    8d7e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d86:	781b      	ldrb	r3, [r3, #0]
    8d88:	b2db      	uxtb	r3, r3
    8d8a:	461a      	mov	r2, r3
    8d8c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d94:	5c9a      	ldrb	r2, [r3, r2]
    8d96:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9e:	701a      	strb	r2, [r3, #0]
    8da0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da8:	2200      	movs	r2, #0
    8daa:	701a      	strb	r2, [r3, #0]
    8dac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	b2db      	uxtb	r3, r3
    8db8:	3301      	adds	r3, #1
    8dba:	b2da      	uxtb	r2, r3
    8dbc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc4:	701a      	strb	r2, [r3, #0]
    8dc6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dce:	781b      	ldrb	r3, [r3, #0]
    8dd0:	b2db      	uxtb	r3, r3
    8dd2:	2bff      	cmp	r3, #255	; 0xff
    8dd4:	d105      	bne.n	8de2 <send_attitude+0x99e>
    8dd6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	2200      	movs	r2, #0
    8de0:	701a      	strb	r2, [r3, #0]
    8de2:	f242 0338 	movw	r3, #8248	; 0x2038
    8de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dea:	f242 0238 	movw	r2, #8248	; 0x2038
    8dee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8df2:	7812      	ldrb	r2, [r2, #0]
    8df4:	b2d2      	uxtb	r2, r2
    8df6:	f042 0201 	orr.w	r2, r2, #1
    8dfa:	b2d2      	uxtb	r2, r2
    8dfc:	701a      	strb	r2, [r3, #0]
    8dfe:	f242 0339 	movw	r3, #8249	; 0x2039
    8e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e06:	f242 0239 	movw	r2, #8249	; 0x2039
    8e0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e0e:	7812      	ldrb	r2, [r2, #0]
    8e10:	b2d2      	uxtb	r2, r2
    8e12:	f042 0210 	orr.w	r2, r2, #16
    8e16:	b2d2      	uxtb	r2, r2
    8e18:	701a      	strb	r2, [r3, #0]
    8e1a:	e00b      	b.n	8e34 <send_attitude+0x9f0>
    8e1c:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	3301      	adds	r3, #1
    8e28:	b2da      	uxtb	r2, r3
    8e2a:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e32:	701a      	strb	r2, [r3, #0]
  }
}
    8e34:	46bd      	mov	sp, r7
    8e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e3a:	4770      	bx	lr

00008e3c <send_adc>:
  
void send_adc(void){  //500ms
    8e3c:	b480      	push	{r7}
    8e3e:	af00      	add	r7, sp, #0
  if(!boot)
    8e40:	f240 533d 	movw	r3, #1341	; 0x53d
    8e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	f040 827d 	bne.w	934a <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8e50:	f24c 5341 	movw	r3, #50497	; 0xc541
    8e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e58:	781a      	ldrb	r2, [r3, #0]
    8e5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8e5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8e62:	fba3 1302 	umull	r1, r3, r3, r2
    8e66:	0899      	lsrs	r1, r3, #2
    8e68:	460b      	mov	r3, r1
    8e6a:	009b      	lsls	r3, r3, #2
    8e6c:	440b      	add	r3, r1
    8e6e:	1ad3      	subs	r3, r2, r3
    8e70:	b2db      	uxtb	r3, r3
    8e72:	2b01      	cmp	r3, #1
    8e74:	f040 8269 	bne.w	934a <send_adc+0x50e>
    8e78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e80:	781a      	ldrb	r2, [r3, #0]
    8e82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	b2db      	uxtb	r3, r3
    8e8e:	429a      	cmp	r2, r3
    8e90:	d313      	bcc.n	8eba <send_adc+0x7e>
    8e92:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9a:	781b      	ldrb	r3, [r3, #0]
    8e9c:	b2db      	uxtb	r3, r3
    8e9e:	461a      	mov	r2, r3
    8ea0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	1ad3      	subs	r3, r2, r3
    8eac:	33ff      	adds	r3, #255	; 0xff
    8eae:	2b08      	cmp	r3, #8
    8eb0:	bfd4      	ite	le
    8eb2:	2300      	movle	r3, #0
    8eb4:	2301      	movgt	r3, #1
    8eb6:	b2db      	uxtb	r3, r3
    8eb8:	e011      	b.n	8ede <send_adc+0xa2>
    8eba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	b2db      	uxtb	r3, r3
    8ec6:	461a      	mov	r2, r3
    8ec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed0:	781b      	ldrb	r3, [r3, #0]
    8ed2:	1ad3      	subs	r3, r2, r3
    8ed4:	2b08      	cmp	r3, #8
    8ed6:	bfd4      	ite	le
    8ed8:	2300      	movle	r3, #0
    8eda:	2301      	movgt	r3, #1
    8edc:	b2db      	uxtb	r3, r3
    8ede:	2b00      	cmp	r3, #0
    8ee0:	f000 8227 	beq.w	9332 <send_adc+0x4f6>
    8ee4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eec:	781b      	ldrb	r3, [r3, #0]
    8eee:	461a      	mov	r2, r3
    8ef0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef8:	2105      	movs	r1, #5
    8efa:	5499      	strb	r1, [r3, r2]
    8efc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f04:	781b      	ldrb	r3, [r3, #0]
    8f06:	3301      	adds	r3, #1
    8f08:	b2da      	uxtb	r2, r3
    8f0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f12:	701a      	strb	r2, [r3, #0]
    8f14:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	2bff      	cmp	r3, #255	; 0xff
    8f20:	d105      	bne.n	8f2e <send_adc+0xf2>
    8f22:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2a:	2200      	movs	r2, #0
    8f2c:	701a      	strb	r2, [r3, #0]
    8f2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	461a      	mov	r2, r3
    8f3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f42:	2107      	movs	r1, #7
    8f44:	5499      	strb	r1, [r3, r2]
    8f46:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	3301      	adds	r3, #1
    8f52:	b2da      	uxtb	r2, r3
    8f54:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	701a      	strb	r2, [r3, #0]
    8f5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f66:	781b      	ldrb	r3, [r3, #0]
    8f68:	2bff      	cmp	r3, #255	; 0xff
    8f6a:	d105      	bne.n	8f78 <send_adc+0x13c>
    8f6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f74:	2200      	movs	r2, #0
    8f76:	701a      	strb	r2, [r3, #0]
    8f78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f80:	2207      	movs	r2, #7
    8f82:	701a      	strb	r2, [r3, #0]
    8f84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8c:	2207      	movs	r2, #7
    8f8e:	701a      	strb	r2, [r3, #0]
    8f90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	781b      	ldrb	r3, [r3, #0]
    8f9a:	461a      	mov	r2, r3
    8f9c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    8fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa4:	7819      	ldrb	r1, [r3, #0]
    8fa6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fae:	5499      	strb	r1, [r3, r2]
    8fb0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	781a      	ldrb	r2, [r3, #0]
    8fba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	4413      	add	r3, r2
    8fc6:	b2da      	uxtb	r2, r3
    8fc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781a      	ldrb	r2, [r3, #0]
    8fdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe4:	781b      	ldrb	r3, [r3, #0]
    8fe6:	4413      	add	r3, r2
    8fe8:	b2da      	uxtb	r2, r3
    8fea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	701a      	strb	r2, [r3, #0]
    8ff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	3301      	adds	r3, #1
    9000:	b2da      	uxtb	r2, r3
    9002:	f24c 5349 	movw	r3, #50505	; 0xc549
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	701a      	strb	r2, [r3, #0]
    900c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	2bff      	cmp	r3, #255	; 0xff
    9018:	d105      	bne.n	9026 <send_adc+0x1ea>
    901a:	f24c 5349 	movw	r3, #50505	; 0xc549
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	2200      	movs	r2, #0
    9024:	701a      	strb	r2, [r3, #0]
    9026:	f24c 5349 	movw	r3, #50505	; 0xc549
    902a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	461a      	mov	r2, r3
    9032:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	7859      	ldrb	r1, [r3, #1]
    903c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	5499      	strb	r1, [r3, r2]
    9046:	4bc3      	ldr	r3, [pc, #780]	; (9354 <send_adc+0x518>)
    9048:	781a      	ldrb	r2, [r3, #0]
    904a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	4413      	add	r3, r2
    9056:	b2da      	uxtb	r2, r3
    9058:	f24c 634d 	movw	r3, #50765	; 0xc64d
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	701a      	strb	r2, [r3, #0]
    9062:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	781a      	ldrb	r2, [r3, #0]
    906c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	4413      	add	r3, r2
    9078:	b2da      	uxtb	r2, r3
    907a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	701a      	strb	r2, [r3, #0]
    9084:	f24c 5349 	movw	r3, #50505	; 0xc549
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	781b      	ldrb	r3, [r3, #0]
    908e:	3301      	adds	r3, #1
    9090:	b2da      	uxtb	r2, r3
    9092:	f24c 5349 	movw	r3, #50505	; 0xc549
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f24c 5349 	movw	r3, #50505	; 0xc549
    90a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	2bff      	cmp	r3, #255	; 0xff
    90a8:	d105      	bne.n	90b6 <send_adc+0x27a>
    90aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	2200      	movs	r2, #0
    90b4:	701a      	strb	r2, [r3, #0]
    90b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	461a      	mov	r2, r3
    90c2:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	7819      	ldrb	r1, [r3, #0]
    90cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    90d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d4:	5499      	strb	r1, [r3, r2]
    90d6:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    90da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90de:	781a      	ldrb	r2, [r3, #0]
    90e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	4413      	add	r3, r2
    90ec:	b2da      	uxtb	r2, r3
    90ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f6:	701a      	strb	r2, [r3, #0]
    90f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	781a      	ldrb	r2, [r3, #0]
    9102:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	781b      	ldrb	r3, [r3, #0]
    910c:	4413      	add	r3, r2
    910e:	b2da      	uxtb	r2, r3
    9110:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9118:	701a      	strb	r2, [r3, #0]
    911a:	f24c 5349 	movw	r3, #50505	; 0xc549
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	781b      	ldrb	r3, [r3, #0]
    9124:	3301      	adds	r3, #1
    9126:	b2da      	uxtb	r2, r3
    9128:	f24c 5349 	movw	r3, #50505	; 0xc549
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	701a      	strb	r2, [r3, #0]
    9132:	f24c 5349 	movw	r3, #50505	; 0xc549
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	2bff      	cmp	r3, #255	; 0xff
    913e:	d105      	bne.n	914c <send_adc+0x310>
    9140:	f24c 5349 	movw	r3, #50505	; 0xc549
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	2200      	movs	r2, #0
    914a:	701a      	strb	r2, [r3, #0]
    914c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9154:	781b      	ldrb	r3, [r3, #0]
    9156:	461a      	mov	r2, r3
    9158:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	7859      	ldrb	r1, [r3, #1]
    9162:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	5499      	strb	r1, [r3, r2]
    916c:	4b7a      	ldr	r3, [pc, #488]	; (9358 <send_adc+0x51c>)
    916e:	781a      	ldrb	r2, [r3, #0]
    9170:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	4413      	add	r3, r2
    917c:	b2da      	uxtb	r2, r3
    917e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9186:	701a      	strb	r2, [r3, #0]
    9188:	f24c 634e 	movw	r3, #50766	; 0xc64e
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	781a      	ldrb	r2, [r3, #0]
    9192:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	4413      	add	r3, r2
    919e:	b2da      	uxtb	r2, r3
    91a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	701a      	strb	r2, [r3, #0]
    91aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	3301      	adds	r3, #1
    91b6:	b2da      	uxtb	r2, r3
    91b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	701a      	strb	r2, [r3, #0]
    91c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	2bff      	cmp	r3, #255	; 0xff
    91ce:	d105      	bne.n	91dc <send_adc+0x3a0>
    91d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    91d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d8:	2200      	movs	r2, #0
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    91e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	461a      	mov	r2, r3
    91e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	7819      	ldrb	r1, [r3, #0]
    91f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	5499      	strb	r1, [r3, r2]
    91fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9204:	781b      	ldrb	r3, [r3, #0]
    9206:	3301      	adds	r3, #1
    9208:	b2da      	uxtb	r2, r3
    920a:	f24c 5349 	movw	r3, #50505	; 0xc549
    920e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9212:	701a      	strb	r2, [r3, #0]
    9214:	f24c 5349 	movw	r3, #50505	; 0xc549
    9218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921c:	781b      	ldrb	r3, [r3, #0]
    921e:	2bff      	cmp	r3, #255	; 0xff
    9220:	d105      	bne.n	922e <send_adc+0x3f2>
    9222:	f24c 5349 	movw	r3, #50505	; 0xc549
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	2200      	movs	r2, #0
    922c:	701a      	strb	r2, [r3, #0]
    922e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	461a      	mov	r2, r3
    923a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    923e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9242:	7819      	ldrb	r1, [r3, #0]
    9244:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924c:	5499      	strb	r1, [r3, r2]
    924e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	3301      	adds	r3, #1
    925a:	b2da      	uxtb	r2, r3
    925c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9264:	701a      	strb	r2, [r3, #0]
    9266:	f24c 5349 	movw	r3, #50505	; 0xc549
    926a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	2bff      	cmp	r3, #255	; 0xff
    9272:	d105      	bne.n	9280 <send_adc+0x444>
    9274:	f24c 5349 	movw	r3, #50505	; 0xc549
    9278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927c:	2200      	movs	r2, #0
    927e:	701a      	strb	r2, [r3, #0]
    9280:	f242 0339 	movw	r3, #8249	; 0x2039
    9284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	b2db      	uxtb	r3, r3
    928c:	f003 0310 	and.w	r3, r3, #16
    9290:	2b00      	cmp	r3, #0
    9292:	d15a      	bne.n	934a <send_adc+0x50e>
    9294:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	b2db      	uxtb	r3, r3
    92a0:	461a      	mov	r2, r3
    92a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92aa:	5c9a      	ldrb	r2, [r3, r2]
    92ac:	f24c 634b 	movw	r3, #50763	; 0xc64b
    92b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b4:	701a      	strb	r2, [r3, #0]
    92b6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    92ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92be:	2200      	movs	r2, #0
    92c0:	701a      	strb	r2, [r3, #0]
    92c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	b2db      	uxtb	r3, r3
    92ce:	3301      	adds	r3, #1
    92d0:	b2da      	uxtb	r2, r3
    92d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92da:	701a      	strb	r2, [r3, #0]
    92dc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e4:	781b      	ldrb	r3, [r3, #0]
    92e6:	b2db      	uxtb	r3, r3
    92e8:	2bff      	cmp	r3, #255	; 0xff
    92ea:	d105      	bne.n	92f8 <send_adc+0x4bc>
    92ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f4:	2200      	movs	r2, #0
    92f6:	701a      	strb	r2, [r3, #0]
    92f8:	f242 0338 	movw	r3, #8248	; 0x2038
    92fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9300:	f242 0238 	movw	r2, #8248	; 0x2038
    9304:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9308:	7812      	ldrb	r2, [r2, #0]
    930a:	b2d2      	uxtb	r2, r2
    930c:	f042 0201 	orr.w	r2, r2, #1
    9310:	b2d2      	uxtb	r2, r2
    9312:	701a      	strb	r2, [r3, #0]
    9314:	f242 0339 	movw	r3, #8249	; 0x2039
    9318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931c:	f242 0239 	movw	r2, #8249	; 0x2039
    9320:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9324:	7812      	ldrb	r2, [r2, #0]
    9326:	b2d2      	uxtb	r2, r2
    9328:	f042 0210 	orr.w	r2, r2, #16
    932c:	b2d2      	uxtb	r2, r2
    932e:	701a      	strb	r2, [r3, #0]
    9330:	e00b      	b.n	934a <send_adc+0x50e>
    9332:	f24c 5348 	movw	r3, #50504	; 0xc548
    9336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	3301      	adds	r3, #1
    933e:	b2da      	uxtb	r2, r3
    9340:	f24c 5348 	movw	r3, #50504	; 0xc548
    9344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9348:	701a      	strb	r2, [r3, #0]
}
    934a:	46bd      	mov	sp, r7
    934c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9350:	4770      	bx	lr
    9352:	bf00      	nop
    9354:	2004c7e9 	.word	0x2004c7e9
    9358:	2004c7eb 	.word	0x2004c7eb

0000935c <send_settings>:
void send_settings(void){ //500ms
    935c:	b480      	push	{r7}
    935e:	af00      	add	r7, sp, #0
  if(!boot)
    9360:	f240 533d 	movw	r3, #1341	; 0x53d
    9364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9368:	781b      	ldrb	r3, [r3, #0]
    936a:	2b00      	cmp	r3, #0
    936c:	f040 83fb 	bne.w	9b66 <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9370:	f24c 5341 	movw	r3, #50497	; 0xc541
    9374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9378:	781a      	ldrb	r2, [r3, #0]
    937a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    937e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9382:	fba3 1302 	umull	r1, r3, r3, r2
    9386:	0899      	lsrs	r1, r3, #2
    9388:	460b      	mov	r3, r1
    938a:	009b      	lsls	r3, r3, #2
    938c:	440b      	add	r3, r1
    938e:	1ad3      	subs	r3, r2, r3
    9390:	b2db      	uxtb	r3, r3
    9392:	2b02      	cmp	r3, #2
    9394:	f040 83e7 	bne.w	9b66 <send_settings+0x80a>
    9398:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    939c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	2b00      	cmp	r3, #0
    93a4:	f000 83df 	beq.w	9b66 <send_settings+0x80a>
    93a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    93ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b0:	781a      	ldrb	r2, [r3, #0]
    93b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	b2db      	uxtb	r3, r3
    93be:	429a      	cmp	r2, r3
    93c0:	d313      	bcc.n	93ea <send_settings+0x8e>
    93c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	b2db      	uxtb	r3, r3
    93ce:	461a      	mov	r2, r3
    93d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    93d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d8:	781b      	ldrb	r3, [r3, #0]
    93da:	1ad3      	subs	r3, r2, r3
    93dc:	33ff      	adds	r3, #255	; 0xff
    93de:	2b0d      	cmp	r3, #13
    93e0:	bfd4      	ite	le
    93e2:	2300      	movle	r3, #0
    93e4:	2301      	movgt	r3, #1
    93e6:	b2db      	uxtb	r3, r3
    93e8:	e011      	b.n	940e <send_settings+0xb2>
    93ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f2:	781b      	ldrb	r3, [r3, #0]
    93f4:	b2db      	uxtb	r3, r3
    93f6:	461a      	mov	r2, r3
    93f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    93fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9400:	781b      	ldrb	r3, [r3, #0]
    9402:	1ad3      	subs	r3, r2, r3
    9404:	2b0d      	cmp	r3, #13
    9406:	bfd4      	ite	le
    9408:	2300      	movle	r3, #0
    940a:	2301      	movgt	r3, #1
    940c:	b2db      	uxtb	r3, r3
    940e:	2b00      	cmp	r3, #0
    9410:	f000 839d 	beq.w	9b4e <send_settings+0x7f2>
    9414:	f24c 5349 	movw	r3, #50505	; 0xc549
    9418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941c:	781b      	ldrb	r3, [r3, #0]
    941e:	461a      	mov	r2, r3
    9420:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9428:	2105      	movs	r1, #5
    942a:	5499      	strb	r1, [r3, r2]
    942c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	3301      	adds	r3, #1
    9438:	b2da      	uxtb	r2, r3
    943a:	f24c 5349 	movw	r3, #50505	; 0xc549
    943e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9442:	701a      	strb	r2, [r3, #0]
    9444:	f24c 5349 	movw	r3, #50505	; 0xc549
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	781b      	ldrb	r3, [r3, #0]
    944e:	2bff      	cmp	r3, #255	; 0xff
    9450:	d105      	bne.n	945e <send_settings+0x102>
    9452:	f24c 5349 	movw	r3, #50505	; 0xc549
    9456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945a:	2200      	movs	r2, #0
    945c:	701a      	strb	r2, [r3, #0]
    945e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9466:	781b      	ldrb	r3, [r3, #0]
    9468:	461a      	mov	r2, r3
    946a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    946e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9472:	2111      	movs	r1, #17
    9474:	5499      	strb	r1, [r3, r2]
    9476:	f24c 5349 	movw	r3, #50505	; 0xc549
    947a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947e:	781b      	ldrb	r3, [r3, #0]
    9480:	3301      	adds	r3, #1
    9482:	b2da      	uxtb	r2, r3
    9484:	f24c 5349 	movw	r3, #50505	; 0xc549
    9488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948c:	701a      	strb	r2, [r3, #0]
    948e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9496:	781b      	ldrb	r3, [r3, #0]
    9498:	2bff      	cmp	r3, #255	; 0xff
    949a:	d105      	bne.n	94a8 <send_settings+0x14c>
    949c:	f24c 5349 	movw	r3, #50505	; 0xc549
    94a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a4:	2200      	movs	r2, #0
    94a6:	701a      	strb	r2, [r3, #0]
    94a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    94ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b0:	2211      	movs	r2, #17
    94b2:	701a      	strb	r2, [r3, #0]
    94b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	2211      	movs	r2, #17
    94be:	701a      	strb	r2, [r3, #0]
    94c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    94c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c8:	781b      	ldrb	r3, [r3, #0]
    94ca:	461a      	mov	r2, r3
    94cc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	7819      	ldrb	r1, [r3, #0]
    94d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    94da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94de:	5499      	strb	r1, [r3, r2]
    94e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    94e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e8:	781a      	ldrb	r2, [r3, #0]
    94ea:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    94ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f2:	781b      	ldrb	r3, [r3, #0]
    94f4:	4413      	add	r3, r2
    94f6:	b2da      	uxtb	r2, r3
    94f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	701a      	strb	r2, [r3, #0]
    9502:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950a:	781a      	ldrb	r2, [r3, #0]
    950c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	4413      	add	r3, r2
    9518:	b2da      	uxtb	r2, r3
    951a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    951e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9522:	701a      	strb	r2, [r3, #0]
    9524:	f24c 5349 	movw	r3, #50505	; 0xc549
    9528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952c:	781b      	ldrb	r3, [r3, #0]
    952e:	3301      	adds	r3, #1
    9530:	b2da      	uxtb	r2, r3
    9532:	f24c 5349 	movw	r3, #50505	; 0xc549
    9536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953a:	701a      	strb	r2, [r3, #0]
    953c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9544:	781b      	ldrb	r3, [r3, #0]
    9546:	2bff      	cmp	r3, #255	; 0xff
    9548:	d105      	bne.n	9556 <send_settings+0x1fa>
    954a:	f24c 5349 	movw	r3, #50505	; 0xc549
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	2200      	movs	r2, #0
    9554:	701a      	strb	r2, [r3, #0]
    9556:	f24c 5349 	movw	r3, #50505	; 0xc549
    955a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955e:	781b      	ldrb	r3, [r3, #0]
    9560:	461a      	mov	r2, r3
    9562:	f24c 5338 	movw	r3, #50488	; 0xc538
    9566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956a:	7819      	ldrb	r1, [r3, #0]
    956c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9574:	5499      	strb	r1, [r3, r2]
    9576:	f24c 5338 	movw	r3, #50488	; 0xc538
    957a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957e:	781a      	ldrb	r2, [r3, #0]
    9580:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9588:	781b      	ldrb	r3, [r3, #0]
    958a:	4413      	add	r3, r2
    958c:	b2da      	uxtb	r2, r3
    958e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9596:	701a      	strb	r2, [r3, #0]
    9598:	f24c 634e 	movw	r3, #50766	; 0xc64e
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781a      	ldrb	r2, [r3, #0]
    95a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95aa:	781b      	ldrb	r3, [r3, #0]
    95ac:	4413      	add	r3, r2
    95ae:	b2da      	uxtb	r2, r3
    95b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b8:	701a      	strb	r2, [r3, #0]
    95ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    95be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c2:	781b      	ldrb	r3, [r3, #0]
    95c4:	3301      	adds	r3, #1
    95c6:	b2da      	uxtb	r2, r3
    95c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    95cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d0:	701a      	strb	r2, [r3, #0]
    95d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    95d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95da:	781b      	ldrb	r3, [r3, #0]
    95dc:	2bff      	cmp	r3, #255	; 0xff
    95de:	d105      	bne.n	95ec <send_settings+0x290>
    95e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    95e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e8:	2200      	movs	r2, #0
    95ea:	701a      	strb	r2, [r3, #0]
    95ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    95f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	461a      	mov	r2, r3
    95f8:	f24c 5338 	movw	r3, #50488	; 0xc538
    95fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9600:	7859      	ldrb	r1, [r3, #1]
    9602:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960a:	5499      	strb	r1, [r3, r2]
    960c:	4bd1      	ldr	r3, [pc, #836]	; (9954 <send_settings+0x5f8>)
    960e:	781a      	ldrb	r2, [r3, #0]
    9610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	4413      	add	r3, r2
    961c:	b2da      	uxtb	r2, r3
    961e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9626:	701a      	strb	r2, [r3, #0]
    9628:	f24c 634e 	movw	r3, #50766	; 0xc64e
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	781a      	ldrb	r2, [r3, #0]
    9632:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963a:	781b      	ldrb	r3, [r3, #0]
    963c:	4413      	add	r3, r2
    963e:	b2da      	uxtb	r2, r3
    9640:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9648:	701a      	strb	r2, [r3, #0]
    964a:	f24c 5349 	movw	r3, #50505	; 0xc549
    964e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	3301      	adds	r3, #1
    9656:	b2da      	uxtb	r2, r3
    9658:	f24c 5349 	movw	r3, #50505	; 0xc549
    965c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9660:	701a      	strb	r2, [r3, #0]
    9662:	f24c 5349 	movw	r3, #50505	; 0xc549
    9666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966a:	781b      	ldrb	r3, [r3, #0]
    966c:	2bff      	cmp	r3, #255	; 0xff
    966e:	d105      	bne.n	967c <send_settings+0x320>
    9670:	f24c 5349 	movw	r3, #50505	; 0xc549
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	2200      	movs	r2, #0
    967a:	701a      	strb	r2, [r3, #0]
    967c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9684:	781b      	ldrb	r3, [r3, #0]
    9686:	461a      	mov	r2, r3
    9688:	f24c 5338 	movw	r3, #50488	; 0xc538
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	7899      	ldrb	r1, [r3, #2]
    9692:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969a:	5499      	strb	r1, [r3, r2]
    969c:	4bae      	ldr	r3, [pc, #696]	; (9958 <send_settings+0x5fc>)
    969e:	781a      	ldrb	r2, [r3, #0]
    96a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	4413      	add	r3, r2
    96ac:	b2da      	uxtb	r2, r3
    96ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b6:	701a      	strb	r2, [r3, #0]
    96b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	781a      	ldrb	r2, [r3, #0]
    96c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ca:	781b      	ldrb	r3, [r3, #0]
    96cc:	4413      	add	r3, r2
    96ce:	b2da      	uxtb	r2, r3
    96d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	701a      	strb	r2, [r3, #0]
    96da:	f24c 5349 	movw	r3, #50505	; 0xc549
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	3301      	adds	r3, #1
    96e6:	b2da      	uxtb	r2, r3
    96e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	2bff      	cmp	r3, #255	; 0xff
    96fe:	d105      	bne.n	970c <send_settings+0x3b0>
    9700:	f24c 5349 	movw	r3, #50505	; 0xc549
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	2200      	movs	r2, #0
    970a:	701a      	strb	r2, [r3, #0]
    970c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9714:	781b      	ldrb	r3, [r3, #0]
    9716:	461a      	mov	r2, r3
    9718:	f24c 5338 	movw	r3, #50488	; 0xc538
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	78d9      	ldrb	r1, [r3, #3]
    9722:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	5499      	strb	r1, [r3, r2]
    972c:	4b8b      	ldr	r3, [pc, #556]	; (995c <send_settings+0x600>)
    972e:	781a      	ldrb	r2, [r3, #0]
    9730:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	781b      	ldrb	r3, [r3, #0]
    973a:	4413      	add	r3, r2
    973c:	b2da      	uxtb	r2, r3
    973e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9746:	701a      	strb	r2, [r3, #0]
    9748:	f24c 634e 	movw	r3, #50766	; 0xc64e
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	781a      	ldrb	r2, [r3, #0]
    9752:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975a:	781b      	ldrb	r3, [r3, #0]
    975c:	4413      	add	r3, r2
    975e:	b2da      	uxtb	r2, r3
    9760:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	701a      	strb	r2, [r3, #0]
    976a:	f24c 5349 	movw	r3, #50505	; 0xc549
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	3301      	adds	r3, #1
    9776:	b2da      	uxtb	r2, r3
    9778:	f24c 5349 	movw	r3, #50505	; 0xc549
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	701a      	strb	r2, [r3, #0]
    9782:	f24c 5349 	movw	r3, #50505	; 0xc549
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	2bff      	cmp	r3, #255	; 0xff
    978e:	d105      	bne.n	979c <send_settings+0x440>
    9790:	f24c 5349 	movw	r3, #50505	; 0xc549
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	2200      	movs	r2, #0
    979a:	701a      	strb	r2, [r3, #0]
    979c:	f24c 5349 	movw	r3, #50505	; 0xc549
    97a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	461a      	mov	r2, r3
    97a8:	f24c 533c 	movw	r3, #50492	; 0xc53c
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	7819      	ldrb	r1, [r3, #0]
    97b2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ba:	5499      	strb	r1, [r3, r2]
    97bc:	f24c 533c 	movw	r3, #50492	; 0xc53c
    97c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c4:	781a      	ldrb	r2, [r3, #0]
    97c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	4413      	add	r3, r2
    97d2:	b2da      	uxtb	r2, r3
    97d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97dc:	701a      	strb	r2, [r3, #0]
    97de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e6:	781a      	ldrb	r2, [r3, #0]
    97e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	4413      	add	r3, r2
    97f4:	b2da      	uxtb	r2, r3
    97f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fe:	701a      	strb	r2, [r3, #0]
    9800:	f24c 5349 	movw	r3, #50505	; 0xc549
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	3301      	adds	r3, #1
    980c:	b2da      	uxtb	r2, r3
    980e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9816:	701a      	strb	r2, [r3, #0]
    9818:	f24c 5349 	movw	r3, #50505	; 0xc549
    981c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9820:	781b      	ldrb	r3, [r3, #0]
    9822:	2bff      	cmp	r3, #255	; 0xff
    9824:	d105      	bne.n	9832 <send_settings+0x4d6>
    9826:	f24c 5349 	movw	r3, #50505	; 0xc549
    982a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982e:	2200      	movs	r2, #0
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f24c 5349 	movw	r3, #50505	; 0xc549
    9836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	461a      	mov	r2, r3
    983e:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9846:	7859      	ldrb	r1, [r3, #1]
    9848:	f24c 534c 	movw	r3, #50508	; 0xc54c
    984c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9850:	5499      	strb	r1, [r3, r2]
    9852:	4b43      	ldr	r3, [pc, #268]	; (9960 <send_settings+0x604>)
    9854:	781a      	ldrb	r2, [r3, #0]
    9856:	f24c 634d 	movw	r3, #50765	; 0xc64d
    985a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985e:	781b      	ldrb	r3, [r3, #0]
    9860:	4413      	add	r3, r2
    9862:	b2da      	uxtb	r2, r3
    9864:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986c:	701a      	strb	r2, [r3, #0]
    986e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9876:	781a      	ldrb	r2, [r3, #0]
    9878:	f24c 634d 	movw	r3, #50765	; 0xc64d
    987c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	4413      	add	r3, r2
    9884:	b2da      	uxtb	r2, r3
    9886:	f24c 634e 	movw	r3, #50766	; 0xc64e
    988a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988e:	701a      	strb	r2, [r3, #0]
    9890:	f24c 5349 	movw	r3, #50505	; 0xc549
    9894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	3301      	adds	r3, #1
    989c:	b2da      	uxtb	r2, r3
    989e:	f24c 5349 	movw	r3, #50505	; 0xc549
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2bff      	cmp	r3, #255	; 0xff
    98b4:	d105      	bne.n	98c2 <send_settings+0x566>
    98b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    98c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	461a      	mov	r2, r3
    98ce:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	7899      	ldrb	r1, [r3, #2]
    98d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	5499      	strb	r1, [r3, r2]
    98e2:	4b20      	ldr	r3, [pc, #128]	; (9964 <send_settings+0x608>)
    98e4:	781a      	ldrb	r2, [r3, #0]
    98e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	781b      	ldrb	r3, [r3, #0]
    98f0:	4413      	add	r3, r2
    98f2:	b2da      	uxtb	r2, r3
    98f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fc:	701a      	strb	r2, [r3, #0]
    98fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781a      	ldrb	r2, [r3, #0]
    9908:	f24c 634d 	movw	r3, #50765	; 0xc64d
    990c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	4413      	add	r3, r2
    9914:	b2da      	uxtb	r2, r3
    9916:	f24c 634e 	movw	r3, #50766	; 0xc64e
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	701a      	strb	r2, [r3, #0]
    9920:	f24c 5349 	movw	r3, #50505	; 0xc549
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	781b      	ldrb	r3, [r3, #0]
    992a:	3301      	adds	r3, #1
    992c:	b2da      	uxtb	r2, r3
    992e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	701a      	strb	r2, [r3, #0]
    9938:	f24c 5349 	movw	r3, #50505	; 0xc549
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	2bff      	cmp	r3, #255	; 0xff
    9944:	d110      	bne.n	9968 <send_settings+0x60c>
    9946:	f24c 5349 	movw	r3, #50505	; 0xc549
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	2200      	movs	r2, #0
    9950:	701a      	strb	r2, [r3, #0]
    9952:	e009      	b.n	9968 <send_settings+0x60c>
    9954:	2004c539 	.word	0x2004c539
    9958:	2004c53a 	.word	0x2004c53a
    995c:	2004c53b 	.word	0x2004c53b
    9960:	2004c53d 	.word	0x2004c53d
    9964:	2004c53e 	.word	0x2004c53e
    9968:	f24c 5349 	movw	r3, #50505	; 0xc549
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	461a      	mov	r2, r3
    9974:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997c:	78d9      	ldrb	r1, [r3, #3]
    997e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9986:	5499      	strb	r1, [r3, r2]
    9988:	4b79      	ldr	r3, [pc, #484]	; (9b70 <send_settings+0x814>)
    998a:	781a      	ldrb	r2, [r3, #0]
    998c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	4413      	add	r3, r2
    9998:	b2da      	uxtb	r2, r3
    999a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    999e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a2:	701a      	strb	r2, [r3, #0]
    99a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ac:	781a      	ldrb	r2, [r3, #0]
    99ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	4413      	add	r3, r2
    99ba:	b2da      	uxtb	r2, r3
    99bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c4:	701a      	strb	r2, [r3, #0]
    99c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	3301      	adds	r3, #1
    99d2:	b2da      	uxtb	r2, r3
    99d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    99d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99dc:	701a      	strb	r2, [r3, #0]
    99de:	f24c 5349 	movw	r3, #50505	; 0xc549
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	2bff      	cmp	r3, #255	; 0xff
    99ea:	d105      	bne.n	99f8 <send_settings+0x69c>
    99ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    99f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f4:	2200      	movs	r2, #0
    99f6:	701a      	strb	r2, [r3, #0]
    99f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    99fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	461a      	mov	r2, r3
    9a04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0c:	7819      	ldrb	r1, [r3, #0]
    9a0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a16:	5499      	strb	r1, [r3, r2]
    9a18:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	3301      	adds	r3, #1
    9a24:	b2da      	uxtb	r2, r3
    9a26:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2e:	701a      	strb	r2, [r3, #0]
    9a30:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	2bff      	cmp	r3, #255	; 0xff
    9a3c:	d105      	bne.n	9a4a <send_settings+0x6ee>
    9a3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a46:	2200      	movs	r2, #0
    9a48:	701a      	strb	r2, [r3, #0]
    9a4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a52:	781b      	ldrb	r3, [r3, #0]
    9a54:	461a      	mov	r2, r3
    9a56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	7819      	ldrb	r1, [r3, #0]
    9a60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a68:	5499      	strb	r1, [r3, r2]
    9a6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a72:	781b      	ldrb	r3, [r3, #0]
    9a74:	3301      	adds	r3, #1
    9a76:	b2da      	uxtb	r2, r3
    9a78:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a80:	701a      	strb	r2, [r3, #0]
    9a82:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	2bff      	cmp	r3, #255	; 0xff
    9a8e:	d105      	bne.n	9a9c <send_settings+0x740>
    9a90:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a98:	2200      	movs	r2, #0
    9a9a:	701a      	strb	r2, [r3, #0]
    9a9c:	f242 0339 	movw	r3, #8249	; 0x2039
    9aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa4:	781b      	ldrb	r3, [r3, #0]
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	f003 0310 	and.w	r3, r3, #16
    9aac:	2b00      	cmp	r3, #0
    9aae:	d15a      	bne.n	9b66 <send_settings+0x80a>
    9ab0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab8:	781b      	ldrb	r3, [r3, #0]
    9aba:	b2db      	uxtb	r3, r3
    9abc:	461a      	mov	r2, r3
    9abe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac6:	5c9a      	ldrb	r2, [r3, r2]
    9ac8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ada:	2200      	movs	r2, #0
    9adc:	701a      	strb	r2, [r3, #0]
    9ade:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	3301      	adds	r3, #1
    9aec:	b2da      	uxtb	r2, r3
    9aee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af6:	701a      	strb	r2, [r3, #0]
    9af8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	b2db      	uxtb	r3, r3
    9b04:	2bff      	cmp	r3, #255	; 0xff
    9b06:	d105      	bne.n	9b14 <send_settings+0x7b8>
    9b08:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	2200      	movs	r2, #0
    9b12:	701a      	strb	r2, [r3, #0]
    9b14:	f242 0338 	movw	r3, #8248	; 0x2038
    9b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1c:	f242 0238 	movw	r2, #8248	; 0x2038
    9b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b24:	7812      	ldrb	r2, [r2, #0]
    9b26:	b2d2      	uxtb	r2, r2
    9b28:	f042 0201 	orr.w	r2, r2, #1
    9b2c:	b2d2      	uxtb	r2, r2
    9b2e:	701a      	strb	r2, [r3, #0]
    9b30:	f242 0339 	movw	r3, #8249	; 0x2039
    9b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b38:	f242 0239 	movw	r2, #8249	; 0x2039
    9b3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b40:	7812      	ldrb	r2, [r2, #0]
    9b42:	b2d2      	uxtb	r2, r2
    9b44:	f042 0210 	orr.w	r2, r2, #16
    9b48:	b2d2      	uxtb	r2, r2
    9b4a:	701a      	strb	r2, [r3, #0]
    9b4c:	e00b      	b.n	9b66 <send_settings+0x80a>
    9b4e:	f24c 5348 	movw	r3, #50504	; 0xc548
    9b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	3301      	adds	r3, #1
    9b5a:	b2da      	uxtb	r2, r3
    9b5c:	f24c 5348 	movw	r3, #50504	; 0xc548
    9b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b64:	701a      	strb	r2, [r3, #0]
}
    9b66:	46bd      	mov	sp, r7
    9b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b6c:	4770      	bx	lr
    9b6e:	bf00      	nop
    9b70:	2004c53f 	.word	0x2004c53f

00009b74 <send_desired>:
void send_desired(void){  //1000ms
    9b74:	b480      	push	{r7}
    9b76:	af00      	add	r7, sp, #0
  if(!boot)
    9b78:	f240 533d 	movw	r3, #1341	; 0x53d
    9b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b80:	781b      	ldrb	r3, [r3, #0]
    9b82:	2b00      	cmp	r3, #0
    9b84:	f040 8727 	bne.w	a9d6 <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9b88:	f24c 5341 	movw	r3, #50497	; 0xc541
    9b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b90:	781a      	ldrb	r2, [r3, #0]
    9b92:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9b96:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9b9a:	fba3 1302 	umull	r1, r3, r3, r2
    9b9e:	08d9      	lsrs	r1, r3, #3
    9ba0:	460b      	mov	r3, r1
    9ba2:	009b      	lsls	r3, r3, #2
    9ba4:	440b      	add	r3, r1
    9ba6:	005b      	lsls	r3, r3, #1
    9ba8:	1ad3      	subs	r3, r2, r3
    9baa:	b2db      	uxtb	r3, r3
    9bac:	2b03      	cmp	r3, #3
    9bae:	f040 8712 	bne.w	a9d6 <send_desired+0xe62>
    9bb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bba:	781a      	ldrb	r2, [r3, #0]
    9bbc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc4:	781b      	ldrb	r3, [r3, #0]
    9bc6:	b2db      	uxtb	r3, r3
    9bc8:	429a      	cmp	r2, r3
    9bca:	d313      	bcc.n	9bf4 <send_desired+0x80>
    9bcc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	b2db      	uxtb	r3, r3
    9bd8:	461a      	mov	r2, r3
    9bda:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	1ad3      	subs	r3, r2, r3
    9be6:	33ff      	adds	r3, #255	; 0xff
    9be8:	2b18      	cmp	r3, #24
    9bea:	bfd4      	ite	le
    9bec:	2300      	movle	r3, #0
    9bee:	2301      	movgt	r3, #1
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	e011      	b.n	9c18 <send_desired+0xa4>
    9bf4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	b2db      	uxtb	r3, r3
    9c00:	461a      	mov	r2, r3
    9c02:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0a:	781b      	ldrb	r3, [r3, #0]
    9c0c:	1ad3      	subs	r3, r2, r3
    9c0e:	2b18      	cmp	r3, #24
    9c10:	bfd4      	ite	le
    9c12:	2300      	movle	r3, #0
    9c14:	2301      	movgt	r3, #1
    9c16:	b2db      	uxtb	r3, r3
    9c18:	2b00      	cmp	r3, #0
    9c1a:	f000 86d0 	beq.w	a9be <send_desired+0xe4a>
    9c1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c26:	781b      	ldrb	r3, [r3, #0]
    9c28:	461a      	mov	r2, r3
    9c2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c32:	2105      	movs	r1, #5
    9c34:	5499      	strb	r1, [r3, r2]
    9c36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	3301      	adds	r3, #1
    9c42:	b2da      	uxtb	r2, r3
    9c44:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4c:	701a      	strb	r2, [r3, #0]
    9c4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	2bff      	cmp	r3, #255	; 0xff
    9c5a:	d105      	bne.n	9c68 <send_desired+0xf4>
    9c5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	2200      	movs	r2, #0
    9c66:	701a      	strb	r2, [r3, #0]
    9c68:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	461a      	mov	r2, r3
    9c74:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	2112      	movs	r1, #18
    9c7e:	5499      	strb	r1, [r3, r2]
    9c80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	3301      	adds	r3, #1
    9c8c:	b2da      	uxtb	r2, r3
    9c8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c96:	701a      	strb	r2, [r3, #0]
    9c98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	2bff      	cmp	r3, #255	; 0xff
    9ca4:	d105      	bne.n	9cb2 <send_desired+0x13e>
    9ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	2200      	movs	r2, #0
    9cb0:	701a      	strb	r2, [r3, #0]
    9cb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cba:	2212      	movs	r2, #18
    9cbc:	701a      	strb	r2, [r3, #0]
    9cbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc6:	2212      	movs	r2, #18
    9cc8:	701a      	strb	r2, [r3, #0]
    9cca:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	461a      	mov	r2, r3
    9cd6:	f64c 0374 	movw	r3, #51316	; 0xc874
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	7819      	ldrb	r1, [r3, #0]
    9ce0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce8:	5499      	strb	r1, [r3, r2]
    9cea:	f64c 0374 	movw	r3, #51316	; 0xc874
    9cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf2:	781a      	ldrb	r2, [r3, #0]
    9cf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfc:	781b      	ldrb	r3, [r3, #0]
    9cfe:	4413      	add	r3, r2
    9d00:	b2da      	uxtb	r2, r3
    9d02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0a:	701a      	strb	r2, [r3, #0]
    9d0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	781a      	ldrb	r2, [r3, #0]
    9d16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	4413      	add	r3, r2
    9d22:	b2da      	uxtb	r2, r3
    9d24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	701a      	strb	r2, [r3, #0]
    9d2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	781b      	ldrb	r3, [r3, #0]
    9d38:	3301      	adds	r3, #1
    9d3a:	b2da      	uxtb	r2, r3
    9d3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	2bff      	cmp	r3, #255	; 0xff
    9d52:	d105      	bne.n	9d60 <send_desired+0x1ec>
    9d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5c:	2200      	movs	r2, #0
    9d5e:	701a      	strb	r2, [r3, #0]
    9d60:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d68:	781b      	ldrb	r3, [r3, #0]
    9d6a:	461a      	mov	r2, r3
    9d6c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d74:	7859      	ldrb	r1, [r3, #1]
    9d76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	5499      	strb	r1, [r3, r2]
    9d80:	4bd1      	ldr	r3, [pc, #836]	; (a0c8 <send_desired+0x554>)
    9d82:	781a      	ldrb	r2, [r3, #0]
    9d84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	4413      	add	r3, r2
    9d90:	b2da      	uxtb	r2, r3
    9d92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9a:	701a      	strb	r2, [r3, #0]
    9d9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	781a      	ldrb	r2, [r3, #0]
    9da6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	4413      	add	r3, r2
    9db2:	b2da      	uxtb	r2, r3
    9db4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	701a      	strb	r2, [r3, #0]
    9dbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	781b      	ldrb	r3, [r3, #0]
    9dc8:	3301      	adds	r3, #1
    9dca:	b2da      	uxtb	r2, r3
    9dcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	2bff      	cmp	r3, #255	; 0xff
    9de2:	d105      	bne.n	9df0 <send_desired+0x27c>
    9de4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	2200      	movs	r2, #0
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	461a      	mov	r2, r3
    9dfc:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e04:	7899      	ldrb	r1, [r3, #2]
    9e06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	5499      	strb	r1, [r3, r2]
    9e10:	4bae      	ldr	r3, [pc, #696]	; (a0cc <send_desired+0x558>)
    9e12:	781a      	ldrb	r2, [r3, #0]
    9e14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	4413      	add	r3, r2
    9e20:	b2da      	uxtb	r2, r3
    9e22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2a:	701a      	strb	r2, [r3, #0]
    9e2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e34:	781a      	ldrb	r2, [r3, #0]
    9e36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3e:	781b      	ldrb	r3, [r3, #0]
    9e40:	4413      	add	r3, r2
    9e42:	b2da      	uxtb	r2, r3
    9e44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4c:	701a      	strb	r2, [r3, #0]
    9e4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	3301      	adds	r3, #1
    9e5a:	b2da      	uxtb	r2, r3
    9e5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	2bff      	cmp	r3, #255	; 0xff
    9e72:	d105      	bne.n	9e80 <send_desired+0x30c>
    9e74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7c:	2200      	movs	r2, #0
    9e7e:	701a      	strb	r2, [r3, #0]
    9e80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e88:	781b      	ldrb	r3, [r3, #0]
    9e8a:	461a      	mov	r2, r3
    9e8c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e94:	78d9      	ldrb	r1, [r3, #3]
    9e96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	5499      	strb	r1, [r3, r2]
    9ea0:	4b8b      	ldr	r3, [pc, #556]	; (a0d0 <send_desired+0x55c>)
    9ea2:	781a      	ldrb	r2, [r3, #0]
    9ea4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eac:	781b      	ldrb	r3, [r3, #0]
    9eae:	4413      	add	r3, r2
    9eb0:	b2da      	uxtb	r2, r3
    9eb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eba:	701a      	strb	r2, [r3, #0]
    9ebc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	781a      	ldrb	r2, [r3, #0]
    9ec6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	4413      	add	r3, r2
    9ed2:	b2da      	uxtb	r2, r3
    9ed4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	3301      	adds	r3, #1
    9eea:	b2da      	uxtb	r2, r3
    9eec:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	701a      	strb	r2, [r3, #0]
    9ef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	2bff      	cmp	r3, #255	; 0xff
    9f02:	d105      	bne.n	9f10 <send_desired+0x39c>
    9f04:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	2200      	movs	r2, #0
    9f0e:	701a      	strb	r2, [r3, #0]
    9f10:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	461a      	mov	r2, r3
    9f1c:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	7819      	ldrb	r1, [r3, #0]
    9f26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	5499      	strb	r1, [r3, r2]
    9f30:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f38:	781a      	ldrb	r2, [r3, #0]
    9f3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f42:	781b      	ldrb	r3, [r3, #0]
    9f44:	4413      	add	r3, r2
    9f46:	b2da      	uxtb	r2, r3
    9f48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f50:	701a      	strb	r2, [r3, #0]
    9f52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5a:	781a      	ldrb	r2, [r3, #0]
    9f5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	781b      	ldrb	r3, [r3, #0]
    9f66:	4413      	add	r3, r2
    9f68:	b2da      	uxtb	r2, r3
    9f6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f72:	701a      	strb	r2, [r3, #0]
    9f74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	3301      	adds	r3, #1
    9f80:	b2da      	uxtb	r2, r3
    9f82:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8a:	701a      	strb	r2, [r3, #0]
    9f8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	2bff      	cmp	r3, #255	; 0xff
    9f98:	d105      	bne.n	9fa6 <send_desired+0x432>
    9f9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa2:	2200      	movs	r2, #0
    9fa4:	701a      	strb	r2, [r3, #0]
    9fa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	461a      	mov	r2, r3
    9fb2:	f64c 0378 	movw	r3, #51320	; 0xc878
    9fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fba:	7859      	ldrb	r1, [r3, #1]
    9fbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	5499      	strb	r1, [r3, r2]
    9fc6:	4b43      	ldr	r3, [pc, #268]	; (a0d4 <send_desired+0x560>)
    9fc8:	781a      	ldrb	r2, [r3, #0]
    9fca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd2:	781b      	ldrb	r3, [r3, #0]
    9fd4:	4413      	add	r3, r2
    9fd6:	b2da      	uxtb	r2, r3
    9fd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe0:	701a      	strb	r2, [r3, #0]
    9fe2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fea:	781a      	ldrb	r2, [r3, #0]
    9fec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff4:	781b      	ldrb	r3, [r3, #0]
    9ff6:	4413      	add	r3, r2
    9ff8:	b2da      	uxtb	r2, r3
    9ffa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a002:	701a      	strb	r2, [r3, #0]
    a004:	f24c 5349 	movw	r3, #50505	; 0xc549
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	781b      	ldrb	r3, [r3, #0]
    a00e:	3301      	adds	r3, #1
    a010:	b2da      	uxtb	r2, r3
    a012:	f24c 5349 	movw	r3, #50505	; 0xc549
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	2bff      	cmp	r3, #255	; 0xff
    a028:	d105      	bne.n	a036 <send_desired+0x4c2>
    a02a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	2200      	movs	r2, #0
    a034:	701a      	strb	r2, [r3, #0]
    a036:	f24c 5349 	movw	r3, #50505	; 0xc549
    a03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	461a      	mov	r2, r3
    a042:	f64c 0378 	movw	r3, #51320	; 0xc878
    a046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04a:	7899      	ldrb	r1, [r3, #2]
    a04c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	5499      	strb	r1, [r3, r2]
    a056:	4b20      	ldr	r3, [pc, #128]	; (a0d8 <send_desired+0x564>)
    a058:	781a      	ldrb	r2, [r3, #0]
    a05a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	4413      	add	r3, r2
    a066:	b2da      	uxtb	r2, r3
    a068:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a070:	701a      	strb	r2, [r3, #0]
    a072:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	781a      	ldrb	r2, [r3, #0]
    a07c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a084:	781b      	ldrb	r3, [r3, #0]
    a086:	4413      	add	r3, r2
    a088:	b2da      	uxtb	r2, r3
    a08a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	701a      	strb	r2, [r3, #0]
    a094:	f24c 5349 	movw	r3, #50505	; 0xc549
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	3301      	adds	r3, #1
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	2bff      	cmp	r3, #255	; 0xff
    a0b8:	d110      	bne.n	a0dc <send_desired+0x568>
    a0ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	2200      	movs	r2, #0
    a0c4:	701a      	strb	r2, [r3, #0]
    a0c6:	e009      	b.n	a0dc <send_desired+0x568>
    a0c8:	2004c875 	.word	0x2004c875
    a0cc:	2004c876 	.word	0x2004c876
    a0d0:	2004c877 	.word	0x2004c877
    a0d4:	2004c879 	.word	0x2004c879
    a0d8:	2004c87a 	.word	0x2004c87a
    a0dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	461a      	mov	r2, r3
    a0e8:	f64c 0378 	movw	r3, #51320	; 0xc878
    a0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f0:	78d9      	ldrb	r1, [r3, #3]
    a0f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fa:	5499      	strb	r1, [r3, r2]
    a0fc:	4bd3      	ldr	r3, [pc, #844]	; (a44c <send_desired+0x8d8>)
    a0fe:	781a      	ldrb	r2, [r3, #0]
    a100:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a108:	781b      	ldrb	r3, [r3, #0]
    a10a:	4413      	add	r3, r2
    a10c:	b2da      	uxtb	r2, r3
    a10e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a116:	701a      	strb	r2, [r3, #0]
    a118:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	4413      	add	r3, r2
    a12e:	b2da      	uxtb	r2, r3
    a130:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	3301      	adds	r3, #1
    a146:	b2da      	uxtb	r2, r3
    a148:	f24c 5349 	movw	r3, #50505	; 0xc549
    a14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a150:	701a      	strb	r2, [r3, #0]
    a152:	f24c 5349 	movw	r3, #50505	; 0xc549
    a156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	2bff      	cmp	r3, #255	; 0xff
    a15e:	d105      	bne.n	a16c <send_desired+0x5f8>
    a160:	f24c 5349 	movw	r3, #50505	; 0xc549
    a164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a168:	2200      	movs	r2, #0
    a16a:	701a      	strb	r2, [r3, #0]
    a16c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	461a      	mov	r2, r3
    a178:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a180:	7819      	ldrb	r1, [r3, #0]
    a182:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	5499      	strb	r1, [r3, r2]
    a18c:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a194:	781a      	ldrb	r2, [r3, #0]
    a196:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19e:	781b      	ldrb	r3, [r3, #0]
    a1a0:	4413      	add	r3, r2
    a1a2:	b2da      	uxtb	r2, r3
    a1a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ac:	701a      	strb	r2, [r3, #0]
    a1ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	781a      	ldrb	r2, [r3, #0]
    a1b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	781b      	ldrb	r3, [r3, #0]
    a1c2:	4413      	add	r3, r2
    a1c4:	b2da      	uxtb	r2, r3
    a1c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ce:	701a      	strb	r2, [r3, #0]
    a1d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	3301      	adds	r3, #1
    a1dc:	b2da      	uxtb	r2, r3
    a1de:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e6:	701a      	strb	r2, [r3, #0]
    a1e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	781b      	ldrb	r3, [r3, #0]
    a1f2:	2bff      	cmp	r3, #255	; 0xff
    a1f4:	d105      	bne.n	a202 <send_desired+0x68e>
    a1f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fe:	2200      	movs	r2, #0
    a200:	701a      	strb	r2, [r3, #0]
    a202:	f24c 5349 	movw	r3, #50505	; 0xc549
    a206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20a:	781b      	ldrb	r3, [r3, #0]
    a20c:	461a      	mov	r2, r3
    a20e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a216:	7859      	ldrb	r1, [r3, #1]
    a218:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	5499      	strb	r1, [r3, r2]
    a222:	4b8b      	ldr	r3, [pc, #556]	; (a450 <send_desired+0x8dc>)
    a224:	781a      	ldrb	r2, [r3, #0]
    a226:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	781b      	ldrb	r3, [r3, #0]
    a230:	4413      	add	r3, r2
    a232:	b2da      	uxtb	r2, r3
    a234:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23c:	701a      	strb	r2, [r3, #0]
    a23e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	781a      	ldrb	r2, [r3, #0]
    a248:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	4413      	add	r3, r2
    a254:	b2da      	uxtb	r2, r3
    a256:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	701a      	strb	r2, [r3, #0]
    a260:	f24c 5349 	movw	r3, #50505	; 0xc549
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	3301      	adds	r3, #1
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	701a      	strb	r2, [r3, #0]
    a278:	f24c 5349 	movw	r3, #50505	; 0xc549
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	2bff      	cmp	r3, #255	; 0xff
    a284:	d105      	bne.n	a292 <send_desired+0x71e>
    a286:	f24c 5349 	movw	r3, #50505	; 0xc549
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	2200      	movs	r2, #0
    a290:	701a      	strb	r2, [r3, #0]
    a292:	f24c 5349 	movw	r3, #50505	; 0xc549
    a296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29a:	781b      	ldrb	r3, [r3, #0]
    a29c:	461a      	mov	r2, r3
    a29e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	7899      	ldrb	r1, [r3, #2]
    a2a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	5499      	strb	r1, [r3, r2]
    a2b2:	4b68      	ldr	r3, [pc, #416]	; (a454 <send_desired+0x8e0>)
    a2b4:	781a      	ldrb	r2, [r3, #0]
    a2b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	781b      	ldrb	r3, [r3, #0]
    a2c0:	4413      	add	r3, r2
    a2c2:	b2da      	uxtb	r2, r3
    a2c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2cc:	701a      	strb	r2, [r3, #0]
    a2ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	781a      	ldrb	r2, [r3, #0]
    a2d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	4413      	add	r3, r2
    a2e4:	b2da      	uxtb	r2, r3
    a2e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ee:	701a      	strb	r2, [r3, #0]
    a2f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	3301      	adds	r3, #1
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f24c 5349 	movw	r3, #50505	; 0xc549
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	2bff      	cmp	r3, #255	; 0xff
    a314:	d105      	bne.n	a322 <send_desired+0x7ae>
    a316:	f24c 5349 	movw	r3, #50505	; 0xc549
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	2200      	movs	r2, #0
    a320:	701a      	strb	r2, [r3, #0]
    a322:	f24c 5349 	movw	r3, #50505	; 0xc549
    a326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	461a      	mov	r2, r3
    a32e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	78d9      	ldrb	r1, [r3, #3]
    a338:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	5499      	strb	r1, [r3, r2]
    a342:	4b45      	ldr	r3, [pc, #276]	; (a458 <send_desired+0x8e4>)
    a344:	781a      	ldrb	r2, [r3, #0]
    a346:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	781b      	ldrb	r3, [r3, #0]
    a350:	4413      	add	r3, r2
    a352:	b2da      	uxtb	r2, r3
    a354:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35c:	701a      	strb	r2, [r3, #0]
    a35e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	781a      	ldrb	r2, [r3, #0]
    a368:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	4413      	add	r3, r2
    a374:	b2da      	uxtb	r2, r3
    a376:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	701a      	strb	r2, [r3, #0]
    a380:	f24c 5349 	movw	r3, #50505	; 0xc549
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	3301      	adds	r3, #1
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f24c 5349 	movw	r3, #50505	; 0xc549
    a39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	2bff      	cmp	r3, #255	; 0xff
    a3a4:	d105      	bne.n	a3b2 <send_desired+0x83e>
    a3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	2200      	movs	r2, #0
    a3b0:	701a      	strb	r2, [r3, #0]
    a3b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	461a      	mov	r2, r3
    a3be:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	7819      	ldrb	r1, [r3, #0]
    a3c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	5499      	strb	r1, [r3, r2]
    a3d2:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3da:	781a      	ldrb	r2, [r3, #0]
    a3dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e4:	781b      	ldrb	r3, [r3, #0]
    a3e6:	4413      	add	r3, r2
    a3e8:	b2da      	uxtb	r2, r3
    a3ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f2:	701a      	strb	r2, [r3, #0]
    a3f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	781a      	ldrb	r2, [r3, #0]
    a3fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	781b      	ldrb	r3, [r3, #0]
    a408:	4413      	add	r3, r2
    a40a:	b2da      	uxtb	r2, r3
    a40c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a414:	701a      	strb	r2, [r3, #0]
    a416:	f24c 5349 	movw	r3, #50505	; 0xc549
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	781b      	ldrb	r3, [r3, #0]
    a420:	3301      	adds	r3, #1
    a422:	b2da      	uxtb	r2, r3
    a424:	f24c 5349 	movw	r3, #50505	; 0xc549
    a428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42c:	701a      	strb	r2, [r3, #0]
    a42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	2bff      	cmp	r3, #255	; 0xff
    a43a:	d10f      	bne.n	a45c <send_desired+0x8e8>
    a43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a444:	2200      	movs	r2, #0
    a446:	701a      	strb	r2, [r3, #0]
    a448:	e008      	b.n	a45c <send_desired+0x8e8>
    a44a:	bf00      	nop
    a44c:	2004c87b 	.word	0x2004c87b
    a450:	2004c8c1 	.word	0x2004c8c1
    a454:	2004c8c2 	.word	0x2004c8c2
    a458:	2004c8c3 	.word	0x2004c8c3
    a45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a464:	781b      	ldrb	r3, [r3, #0]
    a466:	461a      	mov	r2, r3
    a468:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	7859      	ldrb	r1, [r3, #1]
    a472:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47a:	5499      	strb	r1, [r3, r2]
    a47c:	4bd1      	ldr	r3, [pc, #836]	; (a7c4 <send_desired+0xc50>)
    a47e:	781a      	ldrb	r2, [r3, #0]
    a480:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a488:	781b      	ldrb	r3, [r3, #0]
    a48a:	4413      	add	r3, r2
    a48c:	b2da      	uxtb	r2, r3
    a48e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	701a      	strb	r2, [r3, #0]
    a498:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a0:	781a      	ldrb	r2, [r3, #0]
    a4a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4aa:	781b      	ldrb	r3, [r3, #0]
    a4ac:	4413      	add	r3, r2
    a4ae:	b2da      	uxtb	r2, r3
    a4b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b8:	701a      	strb	r2, [r3, #0]
    a4ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	3301      	adds	r3, #1
    a4c6:	b2da      	uxtb	r2, r3
    a4c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d0:	701a      	strb	r2, [r3, #0]
    a4d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4da:	781b      	ldrb	r3, [r3, #0]
    a4dc:	2bff      	cmp	r3, #255	; 0xff
    a4de:	d105      	bne.n	a4ec <send_desired+0x978>
    a4e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e8:	2200      	movs	r2, #0
    a4ea:	701a      	strb	r2, [r3, #0]
    a4ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	461a      	mov	r2, r3
    a4f8:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a500:	7899      	ldrb	r1, [r3, #2]
    a502:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50a:	5499      	strb	r1, [r3, r2]
    a50c:	4bae      	ldr	r3, [pc, #696]	; (a7c8 <send_desired+0xc54>)
    a50e:	781a      	ldrb	r2, [r3, #0]
    a510:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a518:	781b      	ldrb	r3, [r3, #0]
    a51a:	4413      	add	r3, r2
    a51c:	b2da      	uxtb	r2, r3
    a51e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	701a      	strb	r2, [r3, #0]
    a528:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a530:	781a      	ldrb	r2, [r3, #0]
    a532:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53a:	781b      	ldrb	r3, [r3, #0]
    a53c:	4413      	add	r3, r2
    a53e:	b2da      	uxtb	r2, r3
    a540:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a548:	701a      	strb	r2, [r3, #0]
    a54a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	3301      	adds	r3, #1
    a556:	b2da      	uxtb	r2, r3
    a558:	f24c 5349 	movw	r3, #50505	; 0xc549
    a55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a560:	701a      	strb	r2, [r3, #0]
    a562:	f24c 5349 	movw	r3, #50505	; 0xc549
    a566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56a:	781b      	ldrb	r3, [r3, #0]
    a56c:	2bff      	cmp	r3, #255	; 0xff
    a56e:	d105      	bne.n	a57c <send_desired+0xa08>
    a570:	f24c 5349 	movw	r3, #50505	; 0xc549
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	2200      	movs	r2, #0
    a57a:	701a      	strb	r2, [r3, #0]
    a57c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a584:	781b      	ldrb	r3, [r3, #0]
    a586:	461a      	mov	r2, r3
    a588:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	78d9      	ldrb	r1, [r3, #3]
    a592:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59a:	5499      	strb	r1, [r3, r2]
    a59c:	4b8b      	ldr	r3, [pc, #556]	; (a7cc <send_desired+0xc58>)
    a59e:	781a      	ldrb	r2, [r3, #0]
    a5a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a8:	781b      	ldrb	r3, [r3, #0]
    a5aa:	4413      	add	r3, r2
    a5ac:	b2da      	uxtb	r2, r3
    a5ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b6:	701a      	strb	r2, [r3, #0]
    a5b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	781a      	ldrb	r2, [r3, #0]
    a5c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	4413      	add	r3, r2
    a5ce:	b2da      	uxtb	r2, r3
    a5d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	701a      	strb	r2, [r3, #0]
    a5da:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	3301      	adds	r3, #1
    a5e6:	b2da      	uxtb	r2, r3
    a5e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	701a      	strb	r2, [r3, #0]
    a5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	2bff      	cmp	r3, #255	; 0xff
    a5fe:	d105      	bne.n	a60c <send_desired+0xa98>
    a600:	f24c 5349 	movw	r3, #50505	; 0xc549
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	2200      	movs	r2, #0
    a60a:	701a      	strb	r2, [r3, #0]
    a60c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a614:	781b      	ldrb	r3, [r3, #0]
    a616:	461a      	mov	r2, r3
    a618:	f240 5374 	movw	r3, #1396	; 0x574
    a61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a620:	7819      	ldrb	r1, [r3, #0]
    a622:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62a:	5499      	strb	r1, [r3, r2]
    a62c:	f240 5374 	movw	r3, #1396	; 0x574
    a630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a634:	781a      	ldrb	r2, [r3, #0]
    a636:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63e:	781b      	ldrb	r3, [r3, #0]
    a640:	4413      	add	r3, r2
    a642:	b2da      	uxtb	r2, r3
    a644:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a64c:	701a      	strb	r2, [r3, #0]
    a64e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a656:	781a      	ldrb	r2, [r3, #0]
    a658:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	781b      	ldrb	r3, [r3, #0]
    a662:	4413      	add	r3, r2
    a664:	b2da      	uxtb	r2, r3
    a666:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66e:	701a      	strb	r2, [r3, #0]
    a670:	f24c 5349 	movw	r3, #50505	; 0xc549
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	3301      	adds	r3, #1
    a67c:	b2da      	uxtb	r2, r3
    a67e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a686:	701a      	strb	r2, [r3, #0]
    a688:	f24c 5349 	movw	r3, #50505	; 0xc549
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	781b      	ldrb	r3, [r3, #0]
    a692:	2bff      	cmp	r3, #255	; 0xff
    a694:	d105      	bne.n	a6a2 <send_desired+0xb2e>
    a696:	f24c 5349 	movw	r3, #50505	; 0xc549
    a69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69e:	2200      	movs	r2, #0
    a6a0:	701a      	strb	r2, [r3, #0]
    a6a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	461a      	mov	r2, r3
    a6ae:	f240 5374 	movw	r3, #1396	; 0x574
    a6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b6:	7859      	ldrb	r1, [r3, #1]
    a6b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c0:	5499      	strb	r1, [r3, r2]
    a6c2:	4b43      	ldr	r3, [pc, #268]	; (a7d0 <send_desired+0xc5c>)
    a6c4:	781a      	ldrb	r2, [r3, #0]
    a6c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ce:	781b      	ldrb	r3, [r3, #0]
    a6d0:	4413      	add	r3, r2
    a6d2:	b2da      	uxtb	r2, r3
    a6d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6dc:	701a      	strb	r2, [r3, #0]
    a6de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e6:	781a      	ldrb	r2, [r3, #0]
    a6e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	781b      	ldrb	r3, [r3, #0]
    a6f2:	4413      	add	r3, r2
    a6f4:	b2da      	uxtb	r2, r3
    a6f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fe:	701a      	strb	r2, [r3, #0]
    a700:	f24c 5349 	movw	r3, #50505	; 0xc549
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	3301      	adds	r3, #1
    a70c:	b2da      	uxtb	r2, r3
    a70e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f24c 5349 	movw	r3, #50505	; 0xc549
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	2bff      	cmp	r3, #255	; 0xff
    a724:	d105      	bne.n	a732 <send_desired+0xbbe>
    a726:	f24c 5349 	movw	r3, #50505	; 0xc549
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	2200      	movs	r2, #0
    a730:	701a      	strb	r2, [r3, #0]
    a732:	f24c 5349 	movw	r3, #50505	; 0xc549
    a736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73a:	781b      	ldrb	r3, [r3, #0]
    a73c:	461a      	mov	r2, r3
    a73e:	f240 5374 	movw	r3, #1396	; 0x574
    a742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a746:	7899      	ldrb	r1, [r3, #2]
    a748:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a750:	5499      	strb	r1, [r3, r2]
    a752:	4b20      	ldr	r3, [pc, #128]	; (a7d4 <send_desired+0xc60>)
    a754:	781a      	ldrb	r2, [r3, #0]
    a756:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75e:	781b      	ldrb	r3, [r3, #0]
    a760:	4413      	add	r3, r2
    a762:	b2da      	uxtb	r2, r3
    a764:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76c:	701a      	strb	r2, [r3, #0]
    a76e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a776:	781a      	ldrb	r2, [r3, #0]
    a778:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	4413      	add	r3, r2
    a784:	b2da      	uxtb	r2, r3
    a786:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78e:	701a      	strb	r2, [r3, #0]
    a790:	f24c 5349 	movw	r3, #50505	; 0xc549
    a794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	3301      	adds	r3, #1
    a79c:	b2da      	uxtb	r2, r3
    a79e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	701a      	strb	r2, [r3, #0]
    a7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b0:	781b      	ldrb	r3, [r3, #0]
    a7b2:	2bff      	cmp	r3, #255	; 0xff
    a7b4:	d110      	bne.n	a7d8 <send_desired+0xc64>
    a7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	2200      	movs	r2, #0
    a7c0:	701a      	strb	r2, [r3, #0]
    a7c2:	e009      	b.n	a7d8 <send_desired+0xc64>
    a7c4:	2004c8c5 	.word	0x2004c8c5
    a7c8:	2004c8c6 	.word	0x2004c8c6
    a7cc:	2004c8c7 	.word	0x2004c8c7
    a7d0:	20000575 	.word	0x20000575
    a7d4:	20000576 	.word	0x20000576
    a7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e0:	781b      	ldrb	r3, [r3, #0]
    a7e2:	461a      	mov	r2, r3
    a7e4:	f240 5374 	movw	r3, #1396	; 0x574
    a7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ec:	78d9      	ldrb	r1, [r3, #3]
    a7ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f6:	5499      	strb	r1, [r3, r2]
    a7f8:	4b79      	ldr	r3, [pc, #484]	; (a9e0 <send_desired+0xe6c>)
    a7fa:	781a      	ldrb	r2, [r3, #0]
    a7fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a804:	781b      	ldrb	r3, [r3, #0]
    a806:	4413      	add	r3, r2
    a808:	b2da      	uxtb	r2, r3
    a80a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a812:	701a      	strb	r2, [r3, #0]
    a814:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81c:	781a      	ldrb	r2, [r3, #0]
    a81e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	4413      	add	r3, r2
    a82a:	b2da      	uxtb	r2, r3
    a82c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a834:	701a      	strb	r2, [r3, #0]
    a836:	f24c 5349 	movw	r3, #50505	; 0xc549
    a83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a83e:	781b      	ldrb	r3, [r3, #0]
    a840:	3301      	adds	r3, #1
    a842:	b2da      	uxtb	r2, r3
    a844:	f24c 5349 	movw	r3, #50505	; 0xc549
    a848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84c:	701a      	strb	r2, [r3, #0]
    a84e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	2bff      	cmp	r3, #255	; 0xff
    a85a:	d105      	bne.n	a868 <send_desired+0xcf4>
    a85c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a864:	2200      	movs	r2, #0
    a866:	701a      	strb	r2, [r3, #0]
    a868:	f24c 5349 	movw	r3, #50505	; 0xc549
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	461a      	mov	r2, r3
    a874:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87c:	7819      	ldrb	r1, [r3, #0]
    a87e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a886:	5499      	strb	r1, [r3, r2]
    a888:	f24c 5349 	movw	r3, #50505	; 0xc549
    a88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a890:	781b      	ldrb	r3, [r3, #0]
    a892:	3301      	adds	r3, #1
    a894:	b2da      	uxtb	r2, r3
    a896:	f24c 5349 	movw	r3, #50505	; 0xc549
    a89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a89e:	701a      	strb	r2, [r3, #0]
    a8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	2bff      	cmp	r3, #255	; 0xff
    a8ac:	d105      	bne.n	a8ba <send_desired+0xd46>
    a8ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	2200      	movs	r2, #0
    a8b8:	701a      	strb	r2, [r3, #0]
    a8ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c2:	781b      	ldrb	r3, [r3, #0]
    a8c4:	461a      	mov	r2, r3
    a8c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ce:	7819      	ldrb	r1, [r3, #0]
    a8d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d8:	5499      	strb	r1, [r3, r2]
    a8da:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e2:	781b      	ldrb	r3, [r3, #0]
    a8e4:	3301      	adds	r3, #1
    a8e6:	b2da      	uxtb	r2, r3
    a8e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f0:	701a      	strb	r2, [r3, #0]
    a8f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	2bff      	cmp	r3, #255	; 0xff
    a8fe:	d105      	bne.n	a90c <send_desired+0xd98>
    a900:	f24c 5349 	movw	r3, #50505	; 0xc549
    a904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a908:	2200      	movs	r2, #0
    a90a:	701a      	strb	r2, [r3, #0]
    a90c:	f242 0339 	movw	r3, #8249	; 0x2039
    a910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a914:	781b      	ldrb	r3, [r3, #0]
    a916:	b2db      	uxtb	r3, r3
    a918:	f003 0310 	and.w	r3, r3, #16
    a91c:	2b00      	cmp	r3, #0
    a91e:	d15a      	bne.n	a9d6 <send_desired+0xe62>
    a920:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a928:	781b      	ldrb	r3, [r3, #0]
    a92a:	b2db      	uxtb	r3, r3
    a92c:	461a      	mov	r2, r3
    a92e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a936:	5c9a      	ldrb	r2, [r3, r2]
    a938:	f24c 634b 	movw	r3, #50763	; 0xc64b
    a93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a940:	701a      	strb	r2, [r3, #0]
    a942:	f24c 634c 	movw	r3, #50764	; 0xc64c
    a946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94a:	2200      	movs	r2, #0
    a94c:	701a      	strb	r2, [r3, #0]
    a94e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a956:	781b      	ldrb	r3, [r3, #0]
    a958:	b2db      	uxtb	r3, r3
    a95a:	3301      	adds	r3, #1
    a95c:	b2da      	uxtb	r2, r3
    a95e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a966:	701a      	strb	r2, [r3, #0]
    a968:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	b2db      	uxtb	r3, r3
    a974:	2bff      	cmp	r3, #255	; 0xff
    a976:	d105      	bne.n	a984 <send_desired+0xe10>
    a978:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a980:	2200      	movs	r2, #0
    a982:	701a      	strb	r2, [r3, #0]
    a984:	f242 0338 	movw	r3, #8248	; 0x2038
    a988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98c:	f242 0238 	movw	r2, #8248	; 0x2038
    a990:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a994:	7812      	ldrb	r2, [r2, #0]
    a996:	b2d2      	uxtb	r2, r2
    a998:	f042 0201 	orr.w	r2, r2, #1
    a99c:	b2d2      	uxtb	r2, r2
    a99e:	701a      	strb	r2, [r3, #0]
    a9a0:	f242 0339 	movw	r3, #8249	; 0x2039
    a9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a8:	f242 0239 	movw	r2, #8249	; 0x2039
    a9ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9b0:	7812      	ldrb	r2, [r2, #0]
    a9b2:	b2d2      	uxtb	r2, r2
    a9b4:	f042 0210 	orr.w	r2, r2, #16
    a9b8:	b2d2      	uxtb	r2, r2
    a9ba:	701a      	strb	r2, [r3, #0]
    a9bc:	e00b      	b.n	a9d6 <send_desired+0xe62>
    a9be:	f24c 5348 	movw	r3, #50504	; 0xc548
    a9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c6:	781b      	ldrb	r3, [r3, #0]
    a9c8:	3301      	adds	r3, #1
    a9ca:	b2da      	uxtb	r2, r3
    a9cc:	f24c 5348 	movw	r3, #50504	; 0xc548
    a9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d4:	701a      	strb	r2, [r3, #0]
}
    a9d6:	46bd      	mov	sp, r7
    a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9dc:	4770      	bx	lr
    a9de:	bf00      	nop
    a9e0:	20000577 	.word	0x20000577

0000a9e4 <send_bat>:
void send_bat(void){  //2000ms
    a9e4:	b480      	push	{r7}
    a9e6:	af00      	add	r7, sp, #0
  if(!boot)
    a9e8:	f240 533d 	movw	r3, #1341	; 0x53d
    a9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f0:	781b      	ldrb	r3, [r3, #0]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	f040 83af 	bne.w	b156 <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a9f8:	f24c 5341 	movw	r3, #50497	; 0xc541
    a9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa00:	781a      	ldrb	r2, [r3, #0]
    aa02:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa06:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa0a:	fba3 1302 	umull	r1, r3, r3, r2
    aa0e:	0919      	lsrs	r1, r3, #4
    aa10:	460b      	mov	r3, r1
    aa12:	009b      	lsls	r3, r3, #2
    aa14:	440b      	add	r3, r1
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	1ad3      	subs	r3, r2, r3
    aa1a:	b2db      	uxtb	r3, r3
    aa1c:	2b08      	cmp	r3, #8
    aa1e:	f040 839a 	bne.w	b156 <send_bat+0x772>
    aa22:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2a:	781a      	ldrb	r2, [r3, #0]
    aa2c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa34:	781b      	ldrb	r3, [r3, #0]
    aa36:	b2db      	uxtb	r3, r3
    aa38:	429a      	cmp	r2, r3
    aa3a:	d313      	bcc.n	aa64 <send_bat+0x80>
    aa3c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa44:	781b      	ldrb	r3, [r3, #0]
    aa46:	b2db      	uxtb	r3, r3
    aa48:	461a      	mov	r2, r3
    aa4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa52:	781b      	ldrb	r3, [r3, #0]
    aa54:	1ad3      	subs	r3, r2, r3
    aa56:	33ff      	adds	r3, #255	; 0xff
    aa58:	2b0c      	cmp	r3, #12
    aa5a:	bfd4      	ite	le
    aa5c:	2300      	movle	r3, #0
    aa5e:	2301      	movgt	r3, #1
    aa60:	b2db      	uxtb	r3, r3
    aa62:	e011      	b.n	aa88 <send_bat+0xa4>
    aa64:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	781b      	ldrb	r3, [r3, #0]
    aa6e:	b2db      	uxtb	r3, r3
    aa70:	461a      	mov	r2, r3
    aa72:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa7a:	781b      	ldrb	r3, [r3, #0]
    aa7c:	1ad3      	subs	r3, r2, r3
    aa7e:	2b0c      	cmp	r3, #12
    aa80:	bfd4      	ite	le
    aa82:	2300      	movle	r3, #0
    aa84:	2301      	movgt	r3, #1
    aa86:	b2db      	uxtb	r3, r3
    aa88:	2b00      	cmp	r3, #0
    aa8a:	f000 8358 	beq.w	b13e <send_bat+0x75a>
    aa8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa96:	781b      	ldrb	r3, [r3, #0]
    aa98:	461a      	mov	r2, r3
    aa9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa2:	2105      	movs	r1, #5
    aaa4:	5499      	strb	r1, [r3, r2]
    aaa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	3301      	adds	r3, #1
    aab2:	b2da      	uxtb	r2, r3
    aab4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabc:	701a      	strb	r2, [r3, #0]
    aabe:	f24c 5349 	movw	r3, #50505	; 0xc549
    aac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	2bff      	cmp	r3, #255	; 0xff
    aaca:	d105      	bne.n	aad8 <send_bat+0xf4>
    aacc:	f24c 5349 	movw	r3, #50505	; 0xc549
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	2200      	movs	r2, #0
    aad6:	701a      	strb	r2, [r3, #0]
    aad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	461a      	mov	r2, r3
    aae4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaec:	210c      	movs	r1, #12
    aaee:	5499      	strb	r1, [r3, r2]
    aaf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf8:	781b      	ldrb	r3, [r3, #0]
    aafa:	3301      	adds	r3, #1
    aafc:	b2da      	uxtb	r2, r3
    aafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab06:	701a      	strb	r2, [r3, #0]
    ab08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	2bff      	cmp	r3, #255	; 0xff
    ab14:	d105      	bne.n	ab22 <send_bat+0x13e>
    ab16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1e:	2200      	movs	r2, #0
    ab20:	701a      	strb	r2, [r3, #0]
    ab22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2a:	220c      	movs	r2, #12
    ab2c:	701a      	strb	r2, [r3, #0]
    ab2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab36:	220c      	movs	r2, #12
    ab38:	701a      	strb	r2, [r3, #0]
    ab3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	461a      	mov	r2, r3
    ab46:	f24c 5332 	movw	r3, #50482	; 0xc532
    ab4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4e:	7819      	ldrb	r1, [r3, #0]
    ab50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab58:	5499      	strb	r1, [r3, r2]
    ab5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab62:	781a      	ldrb	r2, [r3, #0]
    ab64:	f24c 5332 	movw	r3, #50482	; 0xc532
    ab68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6c:	781b      	ldrb	r3, [r3, #0]
    ab6e:	4413      	add	r3, r2
    ab70:	b2da      	uxtb	r2, r3
    ab72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7a:	701a      	strb	r2, [r3, #0]
    ab7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab84:	781a      	ldrb	r2, [r3, #0]
    ab86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8e:	781b      	ldrb	r3, [r3, #0]
    ab90:	4413      	add	r3, r2
    ab92:	b2da      	uxtb	r2, r3
    ab94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	701a      	strb	r2, [r3, #0]
    ab9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    aba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	3301      	adds	r3, #1
    abaa:	b2da      	uxtb	r2, r3
    abac:	f24c 5349 	movw	r3, #50505	; 0xc549
    abb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb4:	701a      	strb	r2, [r3, #0]
    abb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbe:	781b      	ldrb	r3, [r3, #0]
    abc0:	2bff      	cmp	r3, #255	; 0xff
    abc2:	d105      	bne.n	abd0 <send_bat+0x1ec>
    abc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    abc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abcc:	2200      	movs	r2, #0
    abce:	701a      	strb	r2, [r3, #0]
    abd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    abd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	461a      	mov	r2, r3
    abdc:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    abe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe4:	7819      	ldrb	r1, [r3, #0]
    abe6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abee:	5499      	strb	r1, [r3, r2]
    abf0:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    abf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf8:	781a      	ldrb	r2, [r3, #0]
    abfa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    abfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac02:	781b      	ldrb	r3, [r3, #0]
    ac04:	4413      	add	r3, r2
    ac06:	b2da      	uxtb	r2, r3
    ac08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	701a      	strb	r2, [r3, #0]
    ac12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781a      	ldrb	r2, [r3, #0]
    ac1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	781b      	ldrb	r3, [r3, #0]
    ac26:	4413      	add	r3, r2
    ac28:	b2da      	uxtb	r2, r3
    ac2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	701a      	strb	r2, [r3, #0]
    ac34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	3301      	adds	r3, #1
    ac40:	b2da      	uxtb	r2, r3
    ac42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4a:	701a      	strb	r2, [r3, #0]
    ac4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	2bff      	cmp	r3, #255	; 0xff
    ac58:	d105      	bne.n	ac66 <send_bat+0x282>
    ac5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac62:	2200      	movs	r2, #0
    ac64:	701a      	strb	r2, [r3, #0]
    ac66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	781b      	ldrb	r3, [r3, #0]
    ac70:	461a      	mov	r2, r3
    ac72:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7a:	7859      	ldrb	r1, [r3, #1]
    ac7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	5499      	strb	r1, [r3, r2]
    ac86:	4bd5      	ldr	r3, [pc, #852]	; (afdc <send_bat+0x5f8>)
    ac88:	781a      	ldrb	r2, [r3, #0]
    ac8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	4413      	add	r3, r2
    ac96:	b2da      	uxtb	r2, r3
    ac98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca0:	701a      	strb	r2, [r3, #0]
    aca2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781a      	ldrb	r2, [r3, #0]
    acac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	781b      	ldrb	r3, [r3, #0]
    acb6:	4413      	add	r3, r2
    acb8:	b2da      	uxtb	r2, r3
    acba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc2:	701a      	strb	r2, [r3, #0]
    acc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    acc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	3301      	adds	r3, #1
    acd0:	b2da      	uxtb	r2, r3
    acd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    acd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acda:	701a      	strb	r2, [r3, #0]
    acdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ace0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2bff      	cmp	r3, #255	; 0xff
    ace8:	d105      	bne.n	acf6 <send_bat+0x312>
    acea:	f24c 5349 	movw	r3, #50505	; 0xc549
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	2200      	movs	r2, #0
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	461a      	mov	r2, r3
    ad02:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	7819      	ldrb	r1, [r3, #0]
    ad0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad14:	5499      	strb	r1, [r3, r2]
    ad16:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1e:	781a      	ldrb	r2, [r3, #0]
    ad20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad28:	781b      	ldrb	r3, [r3, #0]
    ad2a:	4413      	add	r3, r2
    ad2c:	b2da      	uxtb	r2, r3
    ad2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad36:	701a      	strb	r2, [r3, #0]
    ad38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781a      	ldrb	r2, [r3, #0]
    ad42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	4413      	add	r3, r2
    ad4e:	b2da      	uxtb	r2, r3
    ad50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad58:	701a      	strb	r2, [r3, #0]
    ad5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	781b      	ldrb	r3, [r3, #0]
    ad64:	3301      	adds	r3, #1
    ad66:	b2da      	uxtb	r2, r3
    ad68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad70:	701a      	strb	r2, [r3, #0]
    ad72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	781b      	ldrb	r3, [r3, #0]
    ad7c:	2bff      	cmp	r3, #255	; 0xff
    ad7e:	d105      	bne.n	ad8c <send_bat+0x3a8>
    ad80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad88:	2200      	movs	r2, #0
    ad8a:	701a      	strb	r2, [r3, #0]
    ad8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	461a      	mov	r2, r3
    ad98:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ad9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada0:	7819      	ldrb	r1, [r3, #0]
    ada2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ada6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adaa:	5499      	strb	r1, [r3, r2]
    adac:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    adb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb4:	781a      	ldrb	r2, [r3, #0]
    adb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	4413      	add	r3, r2
    adc2:	b2da      	uxtb	r2, r3
    adc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	701a      	strb	r2, [r3, #0]
    adce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781a      	ldrb	r2, [r3, #0]
    add8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	781b      	ldrb	r3, [r3, #0]
    ade2:	4413      	add	r3, r2
    ade4:	b2da      	uxtb	r2, r3
    ade6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	701a      	strb	r2, [r3, #0]
    adf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	3301      	adds	r3, #1
    adfc:	b2da      	uxtb	r2, r3
    adfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	701a      	strb	r2, [r3, #0]
    ae08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	2bff      	cmp	r3, #255	; 0xff
    ae14:	d105      	bne.n	ae22 <send_bat+0x43e>
    ae16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	2200      	movs	r2, #0
    ae20:	701a      	strb	r2, [r3, #0]
    ae22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2a:	781b      	ldrb	r3, [r3, #0]
    ae2c:	461a      	mov	r2, r3
    ae2e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	7859      	ldrb	r1, [r3, #1]
    ae38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	5499      	strb	r1, [r3, r2]
    ae42:	4b67      	ldr	r3, [pc, #412]	; (afe0 <send_bat+0x5fc>)
    ae44:	781a      	ldrb	r2, [r3, #0]
    ae46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	4413      	add	r3, r2
    ae52:	b2da      	uxtb	r2, r3
    ae54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781a      	ldrb	r2, [r3, #0]
    ae68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae70:	781b      	ldrb	r3, [r3, #0]
    ae72:	4413      	add	r3, r2
    ae74:	b2da      	uxtb	r2, r3
    ae76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	701a      	strb	r2, [r3, #0]
    ae80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	3301      	adds	r3, #1
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	701a      	strb	r2, [r3, #0]
    ae98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	2bff      	cmp	r3, #255	; 0xff
    aea4:	d105      	bne.n	aeb2 <send_bat+0x4ce>
    aea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	2200      	movs	r2, #0
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	461a      	mov	r2, r3
    aebe:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	7819      	ldrb	r1, [r3, #0]
    aec8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed0:	5499      	strb	r1, [r3, r2]
    aed2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    aed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeda:	781a      	ldrb	r2, [r3, #0]
    aedc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	4413      	add	r3, r2
    aee8:	b2da      	uxtb	r2, r3
    aeea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef2:	701a      	strb	r2, [r3, #0]
    aef4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781a      	ldrb	r2, [r3, #0]
    aefe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	781b      	ldrb	r3, [r3, #0]
    af08:	4413      	add	r3, r2
    af0a:	b2da      	uxtb	r2, r3
    af0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	701a      	strb	r2, [r3, #0]
    af16:	f24c 5349 	movw	r3, #50505	; 0xc549
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	3301      	adds	r3, #1
    af22:	b2da      	uxtb	r2, r3
    af24:	f24c 5349 	movw	r3, #50505	; 0xc549
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	701a      	strb	r2, [r3, #0]
    af2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	2bff      	cmp	r3, #255	; 0xff
    af3a:	d105      	bne.n	af48 <send_bat+0x564>
    af3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	2200      	movs	r2, #0
    af46:	701a      	strb	r2, [r3, #0]
    af48:	f24c 5349 	movw	r3, #50505	; 0xc549
    af4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af50:	781b      	ldrb	r3, [r3, #0]
    af52:	461a      	mov	r2, r3
    af54:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	7859      	ldrb	r1, [r3, #1]
    af5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af66:	5499      	strb	r1, [r3, r2]
    af68:	4b1e      	ldr	r3, [pc, #120]	; (afe4 <send_bat+0x600>)
    af6a:	781a      	ldrb	r2, [r3, #0]
    af6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	781b      	ldrb	r3, [r3, #0]
    af76:	4413      	add	r3, r2
    af78:	b2da      	uxtb	r2, r3
    af7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af82:	701a      	strb	r2, [r3, #0]
    af84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8c:	781a      	ldrb	r2, [r3, #0]
    af8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af96:	781b      	ldrb	r3, [r3, #0]
    af98:	4413      	add	r3, r2
    af9a:	b2da      	uxtb	r2, r3
    af9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	701a      	strb	r2, [r3, #0]
    afa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	3301      	adds	r3, #1
    afb2:	b2da      	uxtb	r2, r3
    afb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	701a      	strb	r2, [r3, #0]
    afbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2bff      	cmp	r3, #255	; 0xff
    afca:	d10d      	bne.n	afe8 <send_bat+0x604>
    afcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	2200      	movs	r2, #0
    afd6:	701a      	strb	r2, [r3, #0]
    afd8:	e006      	b.n	afe8 <send_bat+0x604>
    afda:	bf00      	nop
    afdc:	2004cb2d 	.word	0x2004cb2d
    afe0:	2004c8b7 	.word	0x2004c8b7
    afe4:	2004c8b5 	.word	0x2004c8b5
    afe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    afec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	461a      	mov	r2, r3
    aff4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affc:	7819      	ldrb	r1, [r3, #0]
    affe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b006:	5499      	strb	r1, [r3, r2]
    b008:	f24c 5349 	movw	r3, #50505	; 0xc549
    b00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b010:	781b      	ldrb	r3, [r3, #0]
    b012:	3301      	adds	r3, #1
    b014:	b2da      	uxtb	r2, r3
    b016:	f24c 5349 	movw	r3, #50505	; 0xc549
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	701a      	strb	r2, [r3, #0]
    b020:	f24c 5349 	movw	r3, #50505	; 0xc549
    b024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	2bff      	cmp	r3, #255	; 0xff
    b02c:	d105      	bne.n	b03a <send_bat+0x656>
    b02e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b036:	2200      	movs	r2, #0
    b038:	701a      	strb	r2, [r3, #0]
    b03a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b042:	781b      	ldrb	r3, [r3, #0]
    b044:	461a      	mov	r2, r3
    b046:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04e:	7819      	ldrb	r1, [r3, #0]
    b050:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b058:	5499      	strb	r1, [r3, r2]
    b05a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b062:	781b      	ldrb	r3, [r3, #0]
    b064:	3301      	adds	r3, #1
    b066:	b2da      	uxtb	r2, r3
    b068:	f24c 5349 	movw	r3, #50505	; 0xc549
    b06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b070:	701a      	strb	r2, [r3, #0]
    b072:	f24c 5349 	movw	r3, #50505	; 0xc549
    b076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07a:	781b      	ldrb	r3, [r3, #0]
    b07c:	2bff      	cmp	r3, #255	; 0xff
    b07e:	d105      	bne.n	b08c <send_bat+0x6a8>
    b080:	f24c 5349 	movw	r3, #50505	; 0xc549
    b084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b088:	2200      	movs	r2, #0
    b08a:	701a      	strb	r2, [r3, #0]
    b08c:	f242 0339 	movw	r3, #8249	; 0x2039
    b090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b094:	781b      	ldrb	r3, [r3, #0]
    b096:	b2db      	uxtb	r3, r3
    b098:	f003 0310 	and.w	r3, r3, #16
    b09c:	2b00      	cmp	r3, #0
    b09e:	d15a      	bne.n	b156 <send_bat+0x772>
    b0a0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	b2db      	uxtb	r3, r3
    b0ac:	461a      	mov	r2, r3
    b0ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b6:	5c9a      	ldrb	r2, [r3, r2]
    b0b8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c0:	701a      	strb	r2, [r3, #0]
    b0c2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ca:	2200      	movs	r2, #0
    b0cc:	701a      	strb	r2, [r3, #0]
    b0ce:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d6:	781b      	ldrb	r3, [r3, #0]
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	3301      	adds	r3, #1
    b0dc:	b2da      	uxtb	r2, r3
    b0de:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e6:	701a      	strb	r2, [r3, #0]
    b0e8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f0:	781b      	ldrb	r3, [r3, #0]
    b0f2:	b2db      	uxtb	r3, r3
    b0f4:	2bff      	cmp	r3, #255	; 0xff
    b0f6:	d105      	bne.n	b104 <send_bat+0x720>
    b0f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b100:	2200      	movs	r2, #0
    b102:	701a      	strb	r2, [r3, #0]
    b104:	f242 0338 	movw	r3, #8248	; 0x2038
    b108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b10c:	f242 0238 	movw	r2, #8248	; 0x2038
    b110:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b114:	7812      	ldrb	r2, [r2, #0]
    b116:	b2d2      	uxtb	r2, r2
    b118:	f042 0201 	orr.w	r2, r2, #1
    b11c:	b2d2      	uxtb	r2, r2
    b11e:	701a      	strb	r2, [r3, #0]
    b120:	f242 0339 	movw	r3, #8249	; 0x2039
    b124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b128:	f242 0239 	movw	r2, #8249	; 0x2039
    b12c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b130:	7812      	ldrb	r2, [r2, #0]
    b132:	b2d2      	uxtb	r2, r2
    b134:	f042 0210 	orr.w	r2, r2, #16
    b138:	b2d2      	uxtb	r2, r2
    b13a:	701a      	strb	r2, [r3, #0]
    b13c:	e00b      	b.n	b156 <send_bat+0x772>
    b13e:	f24c 5348 	movw	r3, #50504	; 0xc548
    b142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	3301      	adds	r3, #1
    b14a:	b2da      	uxtb	r2, r3
    b14c:	f24c 5348 	movw	r3, #50504	; 0xc548
    b150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b154:	701a      	strb	r2, [r3, #0]
}
    b156:	46bd      	mov	sp, r7
    b158:	f85d 7b04 	ldr.w	r7, [sp], #4
    b15c:	4770      	bx	lr
    b15e:	bf00      	nop

0000b160 <send_climb>:
void send_climb(void){  //2000ms
    b160:	b480      	push	{r7}
    b162:	af00      	add	r7, sp, #0
  if(!boot)
    b164:	f240 533d 	movw	r3, #1341	; 0x53d
    b168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16c:	781b      	ldrb	r3, [r3, #0]
    b16e:	2b00      	cmp	r3, #0
    b170:	f040 8569 	bne.w	bc46 <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b174:	f24c 5341 	movw	r3, #50497	; 0xc541
    b178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17c:	781a      	ldrb	r2, [r3, #0]
    b17e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b182:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b186:	fba3 1302 	umull	r1, r3, r3, r2
    b18a:	0919      	lsrs	r1, r3, #4
    b18c:	460b      	mov	r3, r1
    b18e:	009b      	lsls	r3, r3, #2
    b190:	440b      	add	r3, r1
    b192:	009b      	lsls	r3, r3, #2
    b194:	1ad3      	subs	r3, r2, r3
    b196:	b2db      	uxtb	r3, r3
    b198:	2b12      	cmp	r3, #18
    b19a:	f040 8554 	bne.w	bc46 <send_climb+0xae6>
    b19e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a6:	781a      	ldrb	r2, [r3, #0]
    b1a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	b2db      	uxtb	r3, r3
    b1b4:	429a      	cmp	r2, r3
    b1b6:	d313      	bcc.n	b1e0 <send_climb+0x80>
    b1b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	b2db      	uxtb	r3, r3
    b1c4:	461a      	mov	r2, r3
    b1c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ce:	781b      	ldrb	r3, [r3, #0]
    b1d0:	1ad3      	subs	r3, r2, r3
    b1d2:	33ff      	adds	r3, #255	; 0xff
    b1d4:	2b12      	cmp	r3, #18
    b1d6:	bfd4      	ite	le
    b1d8:	2300      	movle	r3, #0
    b1da:	2301      	movgt	r3, #1
    b1dc:	b2db      	uxtb	r3, r3
    b1de:	e011      	b.n	b204 <send_climb+0xa4>
    b1e0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e8:	781b      	ldrb	r3, [r3, #0]
    b1ea:	b2db      	uxtb	r3, r3
    b1ec:	461a      	mov	r2, r3
    b1ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f6:	781b      	ldrb	r3, [r3, #0]
    b1f8:	1ad3      	subs	r3, r2, r3
    b1fa:	2b12      	cmp	r3, #18
    b1fc:	bfd4      	ite	le
    b1fe:	2300      	movle	r3, #0
    b200:	2301      	movgt	r3, #1
    b202:	b2db      	uxtb	r3, r3
    b204:	2b00      	cmp	r3, #0
    b206:	f000 8512 	beq.w	bc2e <send_climb+0xace>
    b20a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b212:	781b      	ldrb	r3, [r3, #0]
    b214:	461a      	mov	r2, r3
    b216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21e:	2105      	movs	r1, #5
    b220:	5499      	strb	r1, [r3, r2]
    b222:	f24c 5349 	movw	r3, #50505	; 0xc549
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	3301      	adds	r3, #1
    b22e:	b2da      	uxtb	r2, r3
    b230:	f24c 5349 	movw	r3, #50505	; 0xc549
    b234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b238:	701a      	strb	r2, [r3, #0]
    b23a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	2bff      	cmp	r3, #255	; 0xff
    b246:	d105      	bne.n	b254 <send_climb+0xf4>
    b248:	f24c 5349 	movw	r3, #50505	; 0xc549
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	2200      	movs	r2, #0
    b252:	701a      	strb	r2, [r3, #0]
    b254:	f24c 5349 	movw	r3, #50505	; 0xc549
    b258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	461a      	mov	r2, r3
    b260:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	210e      	movs	r1, #14
    b26a:	5499      	strb	r1, [r3, r2]
    b26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	3301      	adds	r3, #1
    b278:	b2da      	uxtb	r2, r3
    b27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	701a      	strb	r2, [r3, #0]
    b284:	f24c 5349 	movw	r3, #50505	; 0xc549
    b288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	2bff      	cmp	r3, #255	; 0xff
    b290:	d105      	bne.n	b29e <send_climb+0x13e>
    b292:	f24c 5349 	movw	r3, #50505	; 0xc549
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	2200      	movs	r2, #0
    b29c:	701a      	strb	r2, [r3, #0]
    b29e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a6:	220e      	movs	r2, #14
    b2a8:	701a      	strb	r2, [r3, #0]
    b2aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	220e      	movs	r2, #14
    b2b4:	701a      	strb	r2, [r3, #0]
    b2b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	781b      	ldrb	r3, [r3, #0]
    b2c0:	461a      	mov	r2, r3
    b2c2:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	7819      	ldrb	r1, [r3, #0]
    b2cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d4:	5499      	strb	r1, [r3, r2]
    b2d6:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2de:	781a      	ldrb	r2, [r3, #0]
    b2e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	4413      	add	r3, r2
    b2ec:	b2da      	uxtb	r2, r3
    b2ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f6:	701a      	strb	r2, [r3, #0]
    b2f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b300:	781a      	ldrb	r2, [r3, #0]
    b302:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30a:	781b      	ldrb	r3, [r3, #0]
    b30c:	4413      	add	r3, r2
    b30e:	b2da      	uxtb	r2, r3
    b310:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	3301      	adds	r3, #1
    b326:	b2da      	uxtb	r2, r3
    b328:	f24c 5349 	movw	r3, #50505	; 0xc549
    b32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b330:	701a      	strb	r2, [r3, #0]
    b332:	f24c 5349 	movw	r3, #50505	; 0xc549
    b336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	2bff      	cmp	r3, #255	; 0xff
    b33e:	d105      	bne.n	b34c <send_climb+0x1ec>
    b340:	f24c 5349 	movw	r3, #50505	; 0xc549
    b344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b348:	2200      	movs	r2, #0
    b34a:	701a      	strb	r2, [r3, #0]
    b34c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b354:	781b      	ldrb	r3, [r3, #0]
    b356:	461a      	mov	r2, r3
    b358:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b360:	7859      	ldrb	r1, [r3, #1]
    b362:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36a:	5499      	strb	r1, [r3, r2]
    b36c:	4bd3      	ldr	r3, [pc, #844]	; (b6bc <send_climb+0x55c>)
    b36e:	781a      	ldrb	r2, [r3, #0]
    b370:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	4413      	add	r3, r2
    b37c:	b2da      	uxtb	r2, r3
    b37e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	701a      	strb	r2, [r3, #0]
    b388:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	781a      	ldrb	r2, [r3, #0]
    b392:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	4413      	add	r3, r2
    b39e:	b2da      	uxtb	r2, r3
    b3a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	701a      	strb	r2, [r3, #0]
    b3aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	3301      	adds	r3, #1
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	2bff      	cmp	r3, #255	; 0xff
    b3ce:	d105      	bne.n	b3dc <send_climb+0x27c>
    b3d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	2200      	movs	r2, #0
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	461a      	mov	r2, r3
    b3e8:	f64c 0390 	movw	r3, #51344	; 0xc890
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	7819      	ldrb	r1, [r3, #0]
    b3f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fa:	5499      	strb	r1, [r3, r2]
    b3fc:	f64c 0390 	movw	r3, #51344	; 0xc890
    b400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b404:	781a      	ldrb	r2, [r3, #0]
    b406:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40e:	781b      	ldrb	r3, [r3, #0]
    b410:	4413      	add	r3, r2
    b412:	b2da      	uxtb	r2, r3
    b414:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41c:	701a      	strb	r2, [r3, #0]
    b41e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b426:	781a      	ldrb	r2, [r3, #0]
    b428:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b430:	781b      	ldrb	r3, [r3, #0]
    b432:	4413      	add	r3, r2
    b434:	b2da      	uxtb	r2, r3
    b436:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43e:	701a      	strb	r2, [r3, #0]
    b440:	f24c 5349 	movw	r3, #50505	; 0xc549
    b444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	3301      	adds	r3, #1
    b44c:	b2da      	uxtb	r2, r3
    b44e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b456:	701a      	strb	r2, [r3, #0]
    b458:	f24c 5349 	movw	r3, #50505	; 0xc549
    b45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b460:	781b      	ldrb	r3, [r3, #0]
    b462:	2bff      	cmp	r3, #255	; 0xff
    b464:	d105      	bne.n	b472 <send_climb+0x312>
    b466:	f24c 5349 	movw	r3, #50505	; 0xc549
    b46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46e:	2200      	movs	r2, #0
    b470:	701a      	strb	r2, [r3, #0]
    b472:	f24c 5349 	movw	r3, #50505	; 0xc549
    b476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	461a      	mov	r2, r3
    b47e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b486:	7859      	ldrb	r1, [r3, #1]
    b488:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b490:	5499      	strb	r1, [r3, r2]
    b492:	4b8b      	ldr	r3, [pc, #556]	; (b6c0 <send_climb+0x560>)
    b494:	781a      	ldrb	r2, [r3, #0]
    b496:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49e:	781b      	ldrb	r3, [r3, #0]
    b4a0:	4413      	add	r3, r2
    b4a2:	b2da      	uxtb	r2, r3
    b4a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	701a      	strb	r2, [r3, #0]
    b4ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b6:	781a      	ldrb	r2, [r3, #0]
    b4b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	4413      	add	r3, r2
    b4c4:	b2da      	uxtb	r2, r3
    b4c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	701a      	strb	r2, [r3, #0]
    b4d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	3301      	adds	r3, #1
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	2bff      	cmp	r3, #255	; 0xff
    b4f4:	d105      	bne.n	b502 <send_climb+0x3a2>
    b4f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	2200      	movs	r2, #0
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f24c 5349 	movw	r3, #50505	; 0xc549
    b506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	461a      	mov	r2, r3
    b50e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	7899      	ldrb	r1, [r3, #2]
    b518:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b520:	5499      	strb	r1, [r3, r2]
    b522:	4b68      	ldr	r3, [pc, #416]	; (b6c4 <send_climb+0x564>)
    b524:	781a      	ldrb	r2, [r3, #0]
    b526:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	781b      	ldrb	r3, [r3, #0]
    b530:	4413      	add	r3, r2
    b532:	b2da      	uxtb	r2, r3
    b534:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53c:	701a      	strb	r2, [r3, #0]
    b53e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	781a      	ldrb	r2, [r3, #0]
    b548:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	4413      	add	r3, r2
    b554:	b2da      	uxtb	r2, r3
    b556:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	701a      	strb	r2, [r3, #0]
    b560:	f24c 5349 	movw	r3, #50505	; 0xc549
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	3301      	adds	r3, #1
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f24c 5349 	movw	r3, #50505	; 0xc549
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	2bff      	cmp	r3, #255	; 0xff
    b584:	d105      	bne.n	b592 <send_climb+0x432>
    b586:	f24c 5349 	movw	r3, #50505	; 0xc549
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	2200      	movs	r2, #0
    b590:	701a      	strb	r2, [r3, #0]
    b592:	f24c 5349 	movw	r3, #50505	; 0xc549
    b596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59a:	781b      	ldrb	r3, [r3, #0]
    b59c:	461a      	mov	r2, r3
    b59e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	78d9      	ldrb	r1, [r3, #3]
    b5a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b0:	5499      	strb	r1, [r3, r2]
    b5b2:	4b45      	ldr	r3, [pc, #276]	; (b6c8 <send_climb+0x568>)
    b5b4:	781a      	ldrb	r2, [r3, #0]
    b5b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	781b      	ldrb	r3, [r3, #0]
    b5c0:	4413      	add	r3, r2
    b5c2:	b2da      	uxtb	r2, r3
    b5c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	701a      	strb	r2, [r3, #0]
    b5ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781a      	ldrb	r2, [r3, #0]
    b5d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	4413      	add	r3, r2
    b5e4:	b2da      	uxtb	r2, r3
    b5e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	701a      	strb	r2, [r3, #0]
    b5f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	3301      	adds	r3, #1
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	701a      	strb	r2, [r3, #0]
    b608:	f24c 5349 	movw	r3, #50505	; 0xc549
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	2bff      	cmp	r3, #255	; 0xff
    b614:	d105      	bne.n	b622 <send_climb+0x4c2>
    b616:	f24c 5349 	movw	r3, #50505	; 0xc549
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	2200      	movs	r2, #0
    b620:	701a      	strb	r2, [r3, #0]
    b622:	f24c 5349 	movw	r3, #50505	; 0xc549
    b626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62a:	781b      	ldrb	r3, [r3, #0]
    b62c:	461a      	mov	r2, r3
    b62e:	f64c 0398 	movw	r3, #51352	; 0xc898
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	7819      	ldrb	r1, [r3, #0]
    b638:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b640:	5499      	strb	r1, [r3, r2]
    b642:	f64c 0398 	movw	r3, #51352	; 0xc898
    b646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64a:	781a      	ldrb	r2, [r3, #0]
    b64c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b654:	781b      	ldrb	r3, [r3, #0]
    b656:	4413      	add	r3, r2
    b658:	b2da      	uxtb	r2, r3
    b65a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	701a      	strb	r2, [r3, #0]
    b664:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66c:	781a      	ldrb	r2, [r3, #0]
    b66e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b676:	781b      	ldrb	r3, [r3, #0]
    b678:	4413      	add	r3, r2
    b67a:	b2da      	uxtb	r2, r3
    b67c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b684:	701a      	strb	r2, [r3, #0]
    b686:	f24c 5349 	movw	r3, #50505	; 0xc549
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	781b      	ldrb	r3, [r3, #0]
    b690:	3301      	adds	r3, #1
    b692:	b2da      	uxtb	r2, r3
    b694:	f24c 5349 	movw	r3, #50505	; 0xc549
    b698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69c:	701a      	strb	r2, [r3, #0]
    b69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	2bff      	cmp	r3, #255	; 0xff
    b6aa:	d10f      	bne.n	b6cc <send_climb+0x56c>
    b6ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b4:	2200      	movs	r2, #0
    b6b6:	701a      	strb	r2, [r3, #0]
    b6b8:	e008      	b.n	b6cc <send_climb+0x56c>
    b6ba:	bf00      	nop
    b6bc:	2004c87d 	.word	0x2004c87d
    b6c0:	2004c891 	.word	0x2004c891
    b6c4:	2004c892 	.word	0x2004c892
    b6c8:	2004c893 	.word	0x2004c893
    b6cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d4:	781b      	ldrb	r3, [r3, #0]
    b6d6:	461a      	mov	r2, r3
    b6d8:	f64c 0398 	movw	r3, #51352	; 0xc898
    b6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e0:	7859      	ldrb	r1, [r3, #1]
    b6e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ea:	5499      	strb	r1, [r3, r2]
    b6ec:	4bd1      	ldr	r3, [pc, #836]	; (ba34 <send_climb+0x8d4>)
    b6ee:	781a      	ldrb	r2, [r3, #0]
    b6f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	4413      	add	r3, r2
    b6fc:	b2da      	uxtb	r2, r3
    b6fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b706:	701a      	strb	r2, [r3, #0]
    b708:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b710:	781a      	ldrb	r2, [r3, #0]
    b712:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71a:	781b      	ldrb	r3, [r3, #0]
    b71c:	4413      	add	r3, r2
    b71e:	b2da      	uxtb	r2, r3
    b720:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b728:	701a      	strb	r2, [r3, #0]
    b72a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b732:	781b      	ldrb	r3, [r3, #0]
    b734:	3301      	adds	r3, #1
    b736:	b2da      	uxtb	r2, r3
    b738:	f24c 5349 	movw	r3, #50505	; 0xc549
    b73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b740:	701a      	strb	r2, [r3, #0]
    b742:	f24c 5349 	movw	r3, #50505	; 0xc549
    b746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74a:	781b      	ldrb	r3, [r3, #0]
    b74c:	2bff      	cmp	r3, #255	; 0xff
    b74e:	d105      	bne.n	b75c <send_climb+0x5fc>
    b750:	f24c 5349 	movw	r3, #50505	; 0xc549
    b754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b758:	2200      	movs	r2, #0
    b75a:	701a      	strb	r2, [r3, #0]
    b75c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b764:	781b      	ldrb	r3, [r3, #0]
    b766:	461a      	mov	r2, r3
    b768:	f64c 0398 	movw	r3, #51352	; 0xc898
    b76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b770:	7899      	ldrb	r1, [r3, #2]
    b772:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77a:	5499      	strb	r1, [r3, r2]
    b77c:	4bae      	ldr	r3, [pc, #696]	; (ba38 <send_climb+0x8d8>)
    b77e:	781a      	ldrb	r2, [r3, #0]
    b780:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	4413      	add	r3, r2
    b78c:	b2da      	uxtb	r2, r3
    b78e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b796:	701a      	strb	r2, [r3, #0]
    b798:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	781a      	ldrb	r2, [r3, #0]
    b7a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	4413      	add	r3, r2
    b7ae:	b2da      	uxtb	r2, r3
    b7b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b8:	701a      	strb	r2, [r3, #0]
    b7ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c2:	781b      	ldrb	r3, [r3, #0]
    b7c4:	3301      	adds	r3, #1
    b7c6:	b2da      	uxtb	r2, r3
    b7c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	701a      	strb	r2, [r3, #0]
    b7d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7da:	781b      	ldrb	r3, [r3, #0]
    b7dc:	2bff      	cmp	r3, #255	; 0xff
    b7de:	d105      	bne.n	b7ec <send_climb+0x68c>
    b7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	2200      	movs	r2, #0
    b7ea:	701a      	strb	r2, [r3, #0]
    b7ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	461a      	mov	r2, r3
    b7f8:	f64c 0398 	movw	r3, #51352	; 0xc898
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	78d9      	ldrb	r1, [r3, #3]
    b802:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80a:	5499      	strb	r1, [r3, r2]
    b80c:	4b8b      	ldr	r3, [pc, #556]	; (ba3c <send_climb+0x8dc>)
    b80e:	781a      	ldrb	r2, [r3, #0]
    b810:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	4413      	add	r3, r2
    b81c:	b2da      	uxtb	r2, r3
    b81e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	701a      	strb	r2, [r3, #0]
    b828:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781a      	ldrb	r2, [r3, #0]
    b832:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	4413      	add	r3, r2
    b83e:	b2da      	uxtb	r2, r3
    b840:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	701a      	strb	r2, [r3, #0]
    b84a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	3301      	adds	r3, #1
    b856:	b2da      	uxtb	r2, r3
    b858:	f24c 5349 	movw	r3, #50505	; 0xc549
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	701a      	strb	r2, [r3, #0]
    b862:	f24c 5349 	movw	r3, #50505	; 0xc549
    b866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	2bff      	cmp	r3, #255	; 0xff
    b86e:	d105      	bne.n	b87c <send_climb+0x71c>
    b870:	f24c 5349 	movw	r3, #50505	; 0xc549
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	2200      	movs	r2, #0
    b87a:	701a      	strb	r2, [r3, #0]
    b87c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b884:	781b      	ldrb	r3, [r3, #0]
    b886:	461a      	mov	r2, r3
    b888:	f648 2340 	movw	r3, #35392	; 0x8a40
    b88c:	f2c0 0301 	movt	r3, #1
    b890:	7819      	ldrb	r1, [r3, #0]
    b892:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89a:	5499      	strb	r1, [r3, r2]
    b89c:	f648 2340 	movw	r3, #35392	; 0x8a40
    b8a0:	f2c0 0301 	movt	r3, #1
    b8a4:	781a      	ldrb	r2, [r3, #0]
    b8a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ae:	781b      	ldrb	r3, [r3, #0]
    b8b0:	4413      	add	r3, r2
    b8b2:	b2da      	uxtb	r2, r3
    b8b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8bc:	701a      	strb	r2, [r3, #0]
    b8be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c6:	781a      	ldrb	r2, [r3, #0]
    b8c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	781b      	ldrb	r3, [r3, #0]
    b8d2:	4413      	add	r3, r2
    b8d4:	b2da      	uxtb	r2, r3
    b8d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8de:	701a      	strb	r2, [r3, #0]
    b8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	3301      	adds	r3, #1
    b8ec:	b2da      	uxtb	r2, r3
    b8ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	2bff      	cmp	r3, #255	; 0xff
    b904:	d105      	bne.n	b912 <send_climb+0x7b2>
    b906:	f24c 5349 	movw	r3, #50505	; 0xc549
    b90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90e:	2200      	movs	r2, #0
    b910:	701a      	strb	r2, [r3, #0]
    b912:	f24c 5349 	movw	r3, #50505	; 0xc549
    b916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	461a      	mov	r2, r3
    b91e:	f648 2340 	movw	r3, #35392	; 0x8a40
    b922:	f2c0 0301 	movt	r3, #1
    b926:	7859      	ldrb	r1, [r3, #1]
    b928:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b930:	5499      	strb	r1, [r3, r2]
    b932:	4b43      	ldr	r3, [pc, #268]	; (ba40 <send_climb+0x8e0>)
    b934:	781a      	ldrb	r2, [r3, #0]
    b936:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	4413      	add	r3, r2
    b942:	b2da      	uxtb	r2, r3
    b944:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94c:	701a      	strb	r2, [r3, #0]
    b94e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b956:	781a      	ldrb	r2, [r3, #0]
    b958:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	4413      	add	r3, r2
    b964:	b2da      	uxtb	r2, r3
    b966:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96e:	701a      	strb	r2, [r3, #0]
    b970:	f24c 5349 	movw	r3, #50505	; 0xc549
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	3301      	adds	r3, #1
    b97c:	b2da      	uxtb	r2, r3
    b97e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f24c 5349 	movw	r3, #50505	; 0xc549
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	2bff      	cmp	r3, #255	; 0xff
    b994:	d105      	bne.n	b9a2 <send_climb+0x842>
    b996:	f24c 5349 	movw	r3, #50505	; 0xc549
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	2200      	movs	r2, #0
    b9a0:	701a      	strb	r2, [r3, #0]
    b9a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	461a      	mov	r2, r3
    b9ae:	f648 2340 	movw	r3, #35392	; 0x8a40
    b9b2:	f2c0 0301 	movt	r3, #1
    b9b6:	7899      	ldrb	r1, [r3, #2]
    b9b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c0:	5499      	strb	r1, [r3, r2]
    b9c2:	4b20      	ldr	r3, [pc, #128]	; (ba44 <send_climb+0x8e4>)
    b9c4:	781a      	ldrb	r2, [r3, #0]
    b9c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ce:	781b      	ldrb	r3, [r3, #0]
    b9d0:	4413      	add	r3, r2
    b9d2:	b2da      	uxtb	r2, r3
    b9d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9dc:	701a      	strb	r2, [r3, #0]
    b9de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	781a      	ldrb	r2, [r3, #0]
    b9e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	781b      	ldrb	r3, [r3, #0]
    b9f2:	4413      	add	r3, r2
    b9f4:	b2da      	uxtb	r2, r3
    b9f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	701a      	strb	r2, [r3, #0]
    ba00:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	3301      	adds	r3, #1
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	2bff      	cmp	r3, #255	; 0xff
    ba24:	d110      	bne.n	ba48 <send_climb+0x8e8>
    ba26:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	2200      	movs	r2, #0
    ba30:	701a      	strb	r2, [r3, #0]
    ba32:	e009      	b.n	ba48 <send_climb+0x8e8>
    ba34:	2004c899 	.word	0x2004c899
    ba38:	2004c89a 	.word	0x2004c89a
    ba3c:	2004c89b 	.word	0x2004c89b
    ba40:	00018a41 	.word	0x00018a41
    ba44:	00018a42 	.word	0x00018a42
    ba48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba50:	781b      	ldrb	r3, [r3, #0]
    ba52:	461a      	mov	r2, r3
    ba54:	f648 2340 	movw	r3, #35392	; 0x8a40
    ba58:	f2c0 0301 	movt	r3, #1
    ba5c:	78d9      	ldrb	r1, [r3, #3]
    ba5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	5499      	strb	r1, [r3, r2]
    ba68:	4b79      	ldr	r3, [pc, #484]	; (bc50 <send_climb+0xaf0>)
    ba6a:	781a      	ldrb	r2, [r3, #0]
    ba6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	4413      	add	r3, r2
    ba78:	b2da      	uxtb	r2, r3
    ba7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba82:	701a      	strb	r2, [r3, #0]
    ba84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8c:	781a      	ldrb	r2, [r3, #0]
    ba8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	4413      	add	r3, r2
    ba9a:	b2da      	uxtb	r2, r3
    ba9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa4:	701a      	strb	r2, [r3, #0]
    baa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    baaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	3301      	adds	r3, #1
    bab2:	b2da      	uxtb	r2, r3
    bab4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babc:	701a      	strb	r2, [r3, #0]
    babe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	2bff      	cmp	r3, #255	; 0xff
    baca:	d105      	bne.n	bad8 <send_climb+0x978>
    bacc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad4:	2200      	movs	r2, #0
    bad6:	701a      	strb	r2, [r3, #0]
    bad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    badc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	461a      	mov	r2, r3
    bae4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baec:	7819      	ldrb	r1, [r3, #0]
    baee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    baf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf6:	5499      	strb	r1, [r3, r2]
    baf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb00:	781b      	ldrb	r3, [r3, #0]
    bb02:	3301      	adds	r3, #1
    bb04:	b2da      	uxtb	r2, r3
    bb06:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0e:	701a      	strb	r2, [r3, #0]
    bb10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	781b      	ldrb	r3, [r3, #0]
    bb1a:	2bff      	cmp	r3, #255	; 0xff
    bb1c:	d105      	bne.n	bb2a <send_climb+0x9ca>
    bb1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	2200      	movs	r2, #0
    bb28:	701a      	strb	r2, [r3, #0]
    bb2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb32:	781b      	ldrb	r3, [r3, #0]
    bb34:	461a      	mov	r2, r3
    bb36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	7819      	ldrb	r1, [r3, #0]
    bb40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb48:	5499      	strb	r1, [r3, r2]
    bb4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	3301      	adds	r3, #1
    bb56:	b2da      	uxtb	r2, r3
    bb58:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb60:	701a      	strb	r2, [r3, #0]
    bb62:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	2bff      	cmp	r3, #255	; 0xff
    bb6e:	d105      	bne.n	bb7c <send_climb+0xa1c>
    bb70:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb78:	2200      	movs	r2, #0
    bb7a:	701a      	strb	r2, [r3, #0]
    bb7c:	f242 0339 	movw	r3, #8249	; 0x2039
    bb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	b2db      	uxtb	r3, r3
    bb88:	f003 0310 	and.w	r3, r3, #16
    bb8c:	2b00      	cmp	r3, #0
    bb8e:	d15a      	bne.n	bc46 <send_climb+0xae6>
    bb90:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb98:	781b      	ldrb	r3, [r3, #0]
    bb9a:	b2db      	uxtb	r3, r3
    bb9c:	461a      	mov	r2, r3
    bb9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba6:	5c9a      	ldrb	r2, [r3, r2]
    bba8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb0:	701a      	strb	r2, [r3, #0]
    bbb2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbba:	2200      	movs	r2, #0
    bbbc:	701a      	strb	r2, [r3, #0]
    bbbe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	b2db      	uxtb	r3, r3
    bbca:	3301      	adds	r3, #1
    bbcc:	b2da      	uxtb	r2, r3
    bbce:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd6:	701a      	strb	r2, [r3, #0]
    bbd8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	b2db      	uxtb	r3, r3
    bbe4:	2bff      	cmp	r3, #255	; 0xff
    bbe6:	d105      	bne.n	bbf4 <send_climb+0xa94>
    bbe8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	2200      	movs	r2, #0
    bbf2:	701a      	strb	r2, [r3, #0]
    bbf4:	f242 0338 	movw	r3, #8248	; 0x2038
    bbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfc:	f242 0238 	movw	r2, #8248	; 0x2038
    bc00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc04:	7812      	ldrb	r2, [r2, #0]
    bc06:	b2d2      	uxtb	r2, r2
    bc08:	f042 0201 	orr.w	r2, r2, #1
    bc0c:	b2d2      	uxtb	r2, r2
    bc0e:	701a      	strb	r2, [r3, #0]
    bc10:	f242 0339 	movw	r3, #8249	; 0x2039
    bc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc18:	f242 0239 	movw	r2, #8249	; 0x2039
    bc1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc20:	7812      	ldrb	r2, [r2, #0]
    bc22:	b2d2      	uxtb	r2, r2
    bc24:	f042 0210 	orr.w	r2, r2, #16
    bc28:	b2d2      	uxtb	r2, r2
    bc2a:	701a      	strb	r2, [r3, #0]
    bc2c:	e00b      	b.n	bc46 <send_climb+0xae6>
    bc2e:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc36:	781b      	ldrb	r3, [r3, #0]
    bc38:	3301      	adds	r3, #1
    bc3a:	b2da      	uxtb	r2, r3
    bc3c:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc44:	701a      	strb	r2, [r3, #0]
}
    bc46:	46bd      	mov	sp, r7
    bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc4c:	4770      	bx	lr
    bc4e:	bf00      	nop
    bc50:	00018a43 	.word	0x00018a43

0000bc54 <send_mode>:
void send_mode(void){  //5000ms
    bc54:	b480      	push	{r7}
    bc56:	af00      	add	r7, sp, #0
  if(!boot)
    bc58:	f240 533d 	movw	r3, #1341	; 0x53d
    bc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	2b00      	cmp	r3, #0
    bc64:	f040 82ce 	bne.w	c204 <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bc68:	f24c 5341 	movw	r3, #50497	; 0xc541
    bc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc70:	781a      	ldrb	r2, [r3, #0]
    bc72:	f248 531f 	movw	r3, #34079	; 0x851f
    bc76:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bc7a:	fba3 1302 	umull	r1, r3, r3, r2
    bc7e:	091b      	lsrs	r3, r3, #4
    bc80:	2132      	movs	r1, #50	; 0x32
    bc82:	fb01 f303 	mul.w	r3, r1, r3
    bc86:	1ad3      	subs	r3, r2, r3
    bc88:	b2db      	uxtb	r3, r3
    bc8a:	2b09      	cmp	r3, #9
    bc8c:	f040 82ba 	bne.w	c204 <send_mode+0x5b0>
    bc90:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc98:	781a      	ldrb	r2, [r3, #0]
    bc9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca2:	781b      	ldrb	r3, [r3, #0]
    bca4:	b2db      	uxtb	r3, r3
    bca6:	429a      	cmp	r2, r3
    bca8:	d313      	bcc.n	bcd2 <send_mode+0x7e>
    bcaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb2:	781b      	ldrb	r3, [r3, #0]
    bcb4:	b2db      	uxtb	r3, r3
    bcb6:	461a      	mov	r2, r3
    bcb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	1ad3      	subs	r3, r2, r3
    bcc4:	33ff      	adds	r3, #255	; 0xff
    bcc6:	2b09      	cmp	r3, #9
    bcc8:	bfd4      	ite	le
    bcca:	2300      	movle	r3, #0
    bccc:	2301      	movgt	r3, #1
    bcce:	b2db      	uxtb	r3, r3
    bcd0:	e011      	b.n	bcf6 <send_mode+0xa2>
    bcd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcda:	781b      	ldrb	r3, [r3, #0]
    bcdc:	b2db      	uxtb	r3, r3
    bcde:	461a      	mov	r2, r3
    bce0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce8:	781b      	ldrb	r3, [r3, #0]
    bcea:	1ad3      	subs	r3, r2, r3
    bcec:	2b09      	cmp	r3, #9
    bcee:	bfd4      	ite	le
    bcf0:	2300      	movle	r3, #0
    bcf2:	2301      	movgt	r3, #1
    bcf4:	b2db      	uxtb	r3, r3
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	f000 8278 	beq.w	c1ec <send_mode+0x598>
    bcfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd04:	781b      	ldrb	r3, [r3, #0]
    bd06:	461a      	mov	r2, r3
    bd08:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd10:	2105      	movs	r1, #5
    bd12:	5499      	strb	r1, [r3, r2]
    bd14:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd1c:	781b      	ldrb	r3, [r3, #0]
    bd1e:	3301      	adds	r3, #1
    bd20:	b2da      	uxtb	r2, r3
    bd22:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2a:	701a      	strb	r2, [r3, #0]
    bd2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	2bff      	cmp	r3, #255	; 0xff
    bd38:	d105      	bne.n	bd46 <send_mode+0xf2>
    bd3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	2200      	movs	r2, #0
    bd44:	701a      	strb	r2, [r3, #0]
    bd46:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4e:	781b      	ldrb	r3, [r3, #0]
    bd50:	461a      	mov	r2, r3
    bd52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5a:	210b      	movs	r1, #11
    bd5c:	5499      	strb	r1, [r3, r2]
    bd5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd66:	781b      	ldrb	r3, [r3, #0]
    bd68:	3301      	adds	r3, #1
    bd6a:	b2da      	uxtb	r2, r3
    bd6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd74:	701a      	strb	r2, [r3, #0]
    bd76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7e:	781b      	ldrb	r3, [r3, #0]
    bd80:	2bff      	cmp	r3, #255	; 0xff
    bd82:	d105      	bne.n	bd90 <send_mode+0x13c>
    bd84:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8c:	2200      	movs	r2, #0
    bd8e:	701a      	strb	r2, [r3, #0]
    bd90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd98:	220b      	movs	r2, #11
    bd9a:	701a      	strb	r2, [r3, #0]
    bd9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda4:	220b      	movs	r2, #11
    bda6:	701a      	strb	r2, [r3, #0]
    bda8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb0:	781b      	ldrb	r3, [r3, #0]
    bdb2:	461a      	mov	r2, r3
    bdb4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbc:	7819      	ldrb	r1, [r3, #0]
    bdbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc6:	5499      	strb	r1, [r3, r2]
    bdc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd0:	781a      	ldrb	r2, [r3, #0]
    bdd2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdda:	781b      	ldrb	r3, [r3, #0]
    bddc:	4413      	add	r3, r2
    bdde:	b2da      	uxtb	r2, r3
    bde0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde8:	701a      	strb	r2, [r3, #0]
    bdea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf2:	781a      	ldrb	r2, [r3, #0]
    bdf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfc:	781b      	ldrb	r3, [r3, #0]
    bdfe:	4413      	add	r3, r2
    be00:	b2da      	uxtb	r2, r3
    be02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0a:	701a      	strb	r2, [r3, #0]
    be0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	3301      	adds	r3, #1
    be18:	b2da      	uxtb	r2, r3
    be1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f24c 5349 	movw	r3, #50505	; 0xc549
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	2bff      	cmp	r3, #255	; 0xff
    be30:	d105      	bne.n	be3e <send_mode+0x1ea>
    be32:	f24c 5349 	movw	r3, #50505	; 0xc549
    be36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be3a:	2200      	movs	r2, #0
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    be42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	461a      	mov	r2, r3
    be4a:	f24c 532d 	movw	r3, #50477	; 0xc52d
    be4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be52:	7819      	ldrb	r1, [r3, #0]
    be54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5c:	5499      	strb	r1, [r3, r2]
    be5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be66:	781a      	ldrb	r2, [r3, #0]
    be68:	f24c 532d 	movw	r3, #50477	; 0xc52d
    be6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be70:	781b      	ldrb	r3, [r3, #0]
    be72:	4413      	add	r3, r2
    be74:	b2da      	uxtb	r2, r3
    be76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7e:	701a      	strb	r2, [r3, #0]
    be80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781a      	ldrb	r2, [r3, #0]
    be8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	781b      	ldrb	r3, [r3, #0]
    be94:	4413      	add	r3, r2
    be96:	b2da      	uxtb	r2, r3
    be98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea0:	701a      	strb	r2, [r3, #0]
    bea2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	781b      	ldrb	r3, [r3, #0]
    beac:	3301      	adds	r3, #1
    beae:	b2da      	uxtb	r2, r3
    beb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    beb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb8:	701a      	strb	r2, [r3, #0]
    beba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	781b      	ldrb	r3, [r3, #0]
    bec4:	2bff      	cmp	r3, #255	; 0xff
    bec6:	d105      	bne.n	bed4 <send_mode+0x280>
    bec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    becc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed0:	2200      	movs	r2, #0
    bed2:	701a      	strb	r2, [r3, #0]
    bed4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bedc:	781b      	ldrb	r3, [r3, #0]
    bede:	461a      	mov	r2, r3
    bee0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee8:	7819      	ldrb	r1, [r3, #0]
    beea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    beee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef2:	5499      	strb	r1, [r3, r2]
    bef4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befc:	781a      	ldrb	r2, [r3, #0]
    befe:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf06:	781b      	ldrb	r3, [r3, #0]
    bf08:	4413      	add	r3, r2
    bf0a:	b2da      	uxtb	r2, r3
    bf0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf14:	701a      	strb	r2, [r3, #0]
    bf16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	781a      	ldrb	r2, [r3, #0]
    bf20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	781b      	ldrb	r3, [r3, #0]
    bf2a:	4413      	add	r3, r2
    bf2c:	b2da      	uxtb	r2, r3
    bf2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf36:	701a      	strb	r2, [r3, #0]
    bf38:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	781b      	ldrb	r3, [r3, #0]
    bf42:	3301      	adds	r3, #1
    bf44:	b2da      	uxtb	r2, r3
    bf46:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4e:	701a      	strb	r2, [r3, #0]
    bf50:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf58:	781b      	ldrb	r3, [r3, #0]
    bf5a:	2bff      	cmp	r3, #255	; 0xff
    bf5c:	d105      	bne.n	bf6a <send_mode+0x316>
    bf5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf66:	2200      	movs	r2, #0
    bf68:	701a      	strb	r2, [r3, #0]
    bf6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf72:	781b      	ldrb	r3, [r3, #0]
    bf74:	461a      	mov	r2, r3
    bf76:	f24c 5333 	movw	r3, #50483	; 0xc533
    bf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7e:	7819      	ldrb	r1, [r3, #0]
    bf80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf88:	5499      	strb	r1, [r3, r2]
    bf8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf92:	781a      	ldrb	r2, [r3, #0]
    bf94:	f24c 5333 	movw	r3, #50483	; 0xc533
    bf98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9c:	781b      	ldrb	r3, [r3, #0]
    bf9e:	4413      	add	r3, r2
    bfa0:	b2da      	uxtb	r2, r3
    bfa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfaa:	701a      	strb	r2, [r3, #0]
    bfac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb4:	781a      	ldrb	r2, [r3, #0]
    bfb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	781b      	ldrb	r3, [r3, #0]
    bfc0:	4413      	add	r3, r2
    bfc2:	b2da      	uxtb	r2, r3
    bfc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfcc:	701a      	strb	r2, [r3, #0]
    bfce:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	3301      	adds	r3, #1
    bfda:	b2da      	uxtb	r2, r3
    bfdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe4:	701a      	strb	r2, [r3, #0]
    bfe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	2bff      	cmp	r3, #255	; 0xff
    bff2:	d105      	bne.n	c000 <send_mode+0x3ac>
    bff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffc:	2200      	movs	r2, #0
    bffe:	701a      	strb	r2, [r3, #0]
    c000:	f24c 5349 	movw	r3, #50505	; 0xc549
    c004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c008:	781b      	ldrb	r3, [r3, #0]
    c00a:	461a      	mov	r2, r3
    c00c:	f240 533c 	movw	r3, #1340	; 0x53c
    c010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c014:	7819      	ldrb	r1, [r3, #0]
    c016:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01e:	5499      	strb	r1, [r3, r2]
    c020:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c028:	781a      	ldrb	r2, [r3, #0]
    c02a:	f240 533c 	movw	r3, #1340	; 0x53c
    c02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c032:	781b      	ldrb	r3, [r3, #0]
    c034:	4413      	add	r3, r2
    c036:	b2da      	uxtb	r2, r3
    c038:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c040:	701a      	strb	r2, [r3, #0]
    c042:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04a:	781a      	ldrb	r2, [r3, #0]
    c04c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c054:	781b      	ldrb	r3, [r3, #0]
    c056:	4413      	add	r3, r2
    c058:	b2da      	uxtb	r2, r3
    c05a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c062:	701a      	strb	r2, [r3, #0]
    c064:	f24c 5349 	movw	r3, #50505	; 0xc549
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	3301      	adds	r3, #1
    c070:	b2da      	uxtb	r2, r3
    c072:	f24c 5349 	movw	r3, #50505	; 0xc549
    c076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07a:	701a      	strb	r2, [r3, #0]
    c07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c084:	781b      	ldrb	r3, [r3, #0]
    c086:	2bff      	cmp	r3, #255	; 0xff
    c088:	d105      	bne.n	c096 <send_mode+0x442>
    c08a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c092:	2200      	movs	r2, #0
    c094:	701a      	strb	r2, [r3, #0]
    c096:	f24c 5349 	movw	r3, #50505	; 0xc549
    c09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09e:	781b      	ldrb	r3, [r3, #0]
    c0a0:	461a      	mov	r2, r3
    c0a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0aa:	7819      	ldrb	r1, [r3, #0]
    c0ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b4:	5499      	strb	r1, [r3, r2]
    c0b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0be:	781b      	ldrb	r3, [r3, #0]
    c0c0:	3301      	adds	r3, #1
    c0c2:	b2da      	uxtb	r2, r3
    c0c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	701a      	strb	r2, [r3, #0]
    c0ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	781b      	ldrb	r3, [r3, #0]
    c0d8:	2bff      	cmp	r3, #255	; 0xff
    c0da:	d105      	bne.n	c0e8 <send_mode+0x494>
    c0dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	2200      	movs	r2, #0
    c0e6:	701a      	strb	r2, [r3, #0]
    c0e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f0:	781b      	ldrb	r3, [r3, #0]
    c0f2:	461a      	mov	r2, r3
    c0f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	7819      	ldrb	r1, [r3, #0]
    c0fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c106:	5499      	strb	r1, [r3, r2]
    c108:	f24c 5349 	movw	r3, #50505	; 0xc549
    c10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c110:	781b      	ldrb	r3, [r3, #0]
    c112:	3301      	adds	r3, #1
    c114:	b2da      	uxtb	r2, r3
    c116:	f24c 5349 	movw	r3, #50505	; 0xc549
    c11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11e:	701a      	strb	r2, [r3, #0]
    c120:	f24c 5349 	movw	r3, #50505	; 0xc549
    c124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c128:	781b      	ldrb	r3, [r3, #0]
    c12a:	2bff      	cmp	r3, #255	; 0xff
    c12c:	d105      	bne.n	c13a <send_mode+0x4e6>
    c12e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c136:	2200      	movs	r2, #0
    c138:	701a      	strb	r2, [r3, #0]
    c13a:	f242 0339 	movw	r3, #8249	; 0x2039
    c13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c142:	781b      	ldrb	r3, [r3, #0]
    c144:	b2db      	uxtb	r3, r3
    c146:	f003 0310 	and.w	r3, r3, #16
    c14a:	2b00      	cmp	r3, #0
    c14c:	d15a      	bne.n	c204 <send_mode+0x5b0>
    c14e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	b2db      	uxtb	r3, r3
    c15a:	461a      	mov	r2, r3
    c15c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c164:	5c9a      	ldrb	r2, [r3, r2]
    c166:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16e:	701a      	strb	r2, [r3, #0]
    c170:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c178:	2200      	movs	r2, #0
    c17a:	701a      	strb	r2, [r3, #0]
    c17c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c184:	781b      	ldrb	r3, [r3, #0]
    c186:	b2db      	uxtb	r3, r3
    c188:	3301      	adds	r3, #1
    c18a:	b2da      	uxtb	r2, r3
    c18c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c194:	701a      	strb	r2, [r3, #0]
    c196:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	b2db      	uxtb	r3, r3
    c1a2:	2bff      	cmp	r3, #255	; 0xff
    c1a4:	d105      	bne.n	c1b2 <send_mode+0x55e>
    c1a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	2200      	movs	r2, #0
    c1b0:	701a      	strb	r2, [r3, #0]
    c1b2:	f242 0338 	movw	r3, #8248	; 0x2038
    c1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ba:	f242 0238 	movw	r2, #8248	; 0x2038
    c1be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1c2:	7812      	ldrb	r2, [r2, #0]
    c1c4:	b2d2      	uxtb	r2, r2
    c1c6:	f042 0201 	orr.w	r2, r2, #1
    c1ca:	b2d2      	uxtb	r2, r2
    c1cc:	701a      	strb	r2, [r3, #0]
    c1ce:	f242 0339 	movw	r3, #8249	; 0x2039
    c1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d6:	f242 0239 	movw	r2, #8249	; 0x2039
    c1da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1de:	7812      	ldrb	r2, [r2, #0]
    c1e0:	b2d2      	uxtb	r2, r2
    c1e2:	f042 0210 	orr.w	r2, r2, #16
    c1e6:	b2d2      	uxtb	r2, r2
    c1e8:	701a      	strb	r2, [r3, #0]
    c1ea:	e00b      	b.n	c204 <send_mode+0x5b0>
    c1ec:	f24c 5348 	movw	r3, #50504	; 0xc548
    c1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f4:	781b      	ldrb	r3, [r3, #0]
    c1f6:	3301      	adds	r3, #1
    c1f8:	b2da      	uxtb	r2, r3
    c1fa:	f24c 5348 	movw	r3, #50504	; 0xc548
    c1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c202:	701a      	strb	r2, [r3, #0]
}
    c204:	46bd      	mov	sp, r7
    c206:	f85d 7b04 	ldr.w	r7, [sp], #4
    c20a:	4770      	bx	lr

0000c20c <send_debug>:
void send_debug(void){  //5000ms
    c20c:	b480      	push	{r7}
    c20e:	af00      	add	r7, sp, #0
  if(!boot)
    c210:	f240 533d 	movw	r3, #1341	; 0x53d
    c214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	2b00      	cmp	r3, #0
    c21c:	f040 82cf 	bne.w	c7be <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c220:	f24c 5341 	movw	r3, #50497	; 0xc541
    c224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c228:	781a      	ldrb	r2, [r3, #0]
    c22a:	f248 531f 	movw	r3, #34079	; 0x851f
    c22e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c232:	fba3 1302 	umull	r1, r3, r3, r2
    c236:	091b      	lsrs	r3, r3, #4
    c238:	2132      	movs	r1, #50	; 0x32
    c23a:	fb01 f303 	mul.w	r3, r1, r3
    c23e:	1ad3      	subs	r3, r2, r3
    c240:	b2db      	uxtb	r3, r3
    c242:	2b1d      	cmp	r3, #29
    c244:	f040 82bb 	bne.w	c7be <send_debug+0x5b2>
    c248:	f24c 5349 	movw	r3, #50505	; 0xc549
    c24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c250:	781a      	ldrb	r2, [r3, #0]
    c252:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25a:	781b      	ldrb	r3, [r3, #0]
    c25c:	b2db      	uxtb	r3, r3
    c25e:	429a      	cmp	r2, r3
    c260:	d313      	bcc.n	c28a <send_debug+0x7e>
    c262:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26a:	781b      	ldrb	r3, [r3, #0]
    c26c:	b2db      	uxtb	r3, r3
    c26e:	461a      	mov	r2, r3
    c270:	f24c 5349 	movw	r3, #50505	; 0xc549
    c274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c278:	781b      	ldrb	r3, [r3, #0]
    c27a:	1ad3      	subs	r3, r2, r3
    c27c:	33ff      	adds	r3, #255	; 0xff
    c27e:	2b09      	cmp	r3, #9
    c280:	bfd4      	ite	le
    c282:	2300      	movle	r3, #0
    c284:	2301      	movgt	r3, #1
    c286:	b2db      	uxtb	r3, r3
    c288:	e011      	b.n	c2ae <send_debug+0xa2>
    c28a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	b2db      	uxtb	r3, r3
    c296:	461a      	mov	r2, r3
    c298:	f24c 5349 	movw	r3, #50505	; 0xc549
    c29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a0:	781b      	ldrb	r3, [r3, #0]
    c2a2:	1ad3      	subs	r3, r2, r3
    c2a4:	2b09      	cmp	r3, #9
    c2a6:	bfd4      	ite	le
    c2a8:	2300      	movle	r3, #0
    c2aa:	2301      	movgt	r3, #1
    c2ac:	b2db      	uxtb	r3, r3
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	f000 8279 	beq.w	c7a6 <send_debug+0x59a>
    c2b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2bc:	781b      	ldrb	r3, [r3, #0]
    c2be:	461a      	mov	r2, r3
    c2c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c8:	2105      	movs	r1, #5
    c2ca:	5499      	strb	r1, [r3, r2]
    c2cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	3301      	adds	r3, #1
    c2d8:	b2da      	uxtb	r2, r3
    c2da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	2bff      	cmp	r3, #255	; 0xff
    c2f0:	d105      	bne.n	c2fe <send_debug+0xf2>
    c2f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	2200      	movs	r2, #0
    c2fc:	701a      	strb	r2, [r3, #0]
    c2fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c306:	781b      	ldrb	r3, [r3, #0]
    c308:	461a      	mov	r2, r3
    c30a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c312:	210d      	movs	r1, #13
    c314:	5499      	strb	r1, [r3, r2]
    c316:	f24c 5349 	movw	r3, #50505	; 0xc549
    c31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	3301      	adds	r3, #1
    c322:	b2da      	uxtb	r2, r3
    c324:	f24c 5349 	movw	r3, #50505	; 0xc549
    c328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c32c:	701a      	strb	r2, [r3, #0]
    c32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c336:	781b      	ldrb	r3, [r3, #0]
    c338:	2bff      	cmp	r3, #255	; 0xff
    c33a:	d105      	bne.n	c348 <send_debug+0x13c>
    c33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c344:	2200      	movs	r2, #0
    c346:	701a      	strb	r2, [r3, #0]
    c348:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c350:	220d      	movs	r2, #13
    c352:	701a      	strb	r2, [r3, #0]
    c354:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	220d      	movs	r2, #13
    c35e:	701a      	strb	r2, [r3, #0]
    c360:	f24c 5349 	movw	r3, #50505	; 0xc549
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	781b      	ldrb	r3, [r3, #0]
    c36a:	461a      	mov	r2, r3
    c36c:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c374:	781b      	ldrb	r3, [r3, #0]
    c376:	b2d9      	uxtb	r1, r3
    c378:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c380:	5499      	strb	r1, [r3, r2]
    c382:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38a:	781a      	ldrb	r2, [r3, #0]
    c38c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c394:	781b      	ldrb	r3, [r3, #0]
    c396:	4413      	add	r3, r2
    c398:	b2da      	uxtb	r2, r3
    c39a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a2:	701a      	strb	r2, [r3, #0]
    c3a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ac:	781a      	ldrb	r2, [r3, #0]
    c3ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b6:	781b      	ldrb	r3, [r3, #0]
    c3b8:	4413      	add	r3, r2
    c3ba:	b2da      	uxtb	r2, r3
    c3bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c4:	701a      	strb	r2, [r3, #0]
    c3c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	3301      	adds	r3, #1
    c3d2:	b2da      	uxtb	r2, r3
    c3d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3dc:	701a      	strb	r2, [r3, #0]
    c3de:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e6:	781b      	ldrb	r3, [r3, #0]
    c3e8:	2bff      	cmp	r3, #255	; 0xff
    c3ea:	d105      	bne.n	c3f8 <send_debug+0x1ec>
    c3ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f4:	2200      	movs	r2, #0
    c3f6:	701a      	strb	r2, [r3, #0]
    c3f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c400:	781b      	ldrb	r3, [r3, #0]
    c402:	461a      	mov	r2, r3
    c404:	f24c 6380 	movw	r3, #50816	; 0xc680
    c408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40c:	7819      	ldrb	r1, [r3, #0]
    c40e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c416:	5499      	strb	r1, [r3, r2]
    c418:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c420:	781a      	ldrb	r2, [r3, #0]
    c422:	f24c 6380 	movw	r3, #50816	; 0xc680
    c426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	4413      	add	r3, r2
    c42e:	b2da      	uxtb	r2, r3
    c430:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c438:	701a      	strb	r2, [r3, #0]
    c43a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c442:	781a      	ldrb	r2, [r3, #0]
    c444:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44c:	781b      	ldrb	r3, [r3, #0]
    c44e:	4413      	add	r3, r2
    c450:	b2da      	uxtb	r2, r3
    c452:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45a:	701a      	strb	r2, [r3, #0]
    c45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	781b      	ldrb	r3, [r3, #0]
    c466:	3301      	adds	r3, #1
    c468:	b2da      	uxtb	r2, r3
    c46a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c472:	701a      	strb	r2, [r3, #0]
    c474:	f24c 5349 	movw	r3, #50505	; 0xc549
    c478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	2bff      	cmp	r3, #255	; 0xff
    c480:	d105      	bne.n	c48e <send_debug+0x282>
    c482:	f24c 5349 	movw	r3, #50505	; 0xc549
    c486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48a:	2200      	movs	r2, #0
    c48c:	701a      	strb	r2, [r3, #0]
    c48e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	461a      	mov	r2, r3
    c49a:	f24c 5348 	movw	r3, #50504	; 0xc548
    c49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a2:	7819      	ldrb	r1, [r3, #0]
    c4a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	5499      	strb	r1, [r3, r2]
    c4ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b6:	781a      	ldrb	r2, [r3, #0]
    c4b8:	f24c 5348 	movw	r3, #50504	; 0xc548
    c4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	4413      	add	r3, r2
    c4c4:	b2da      	uxtb	r2, r3
    c4c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ce:	701a      	strb	r2, [r3, #0]
    c4d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d8:	781a      	ldrb	r2, [r3, #0]
    c4da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e2:	781b      	ldrb	r3, [r3, #0]
    c4e4:	4413      	add	r3, r2
    c4e6:	b2da      	uxtb	r2, r3
    c4e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f0:	701a      	strb	r2, [r3, #0]
    c4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	781b      	ldrb	r3, [r3, #0]
    c4fc:	3301      	adds	r3, #1
    c4fe:	b2da      	uxtb	r2, r3
    c500:	f24c 5349 	movw	r3, #50505	; 0xc549
    c504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c512:	781b      	ldrb	r3, [r3, #0]
    c514:	2bff      	cmp	r3, #255	; 0xff
    c516:	d105      	bne.n	c524 <send_debug+0x318>
    c518:	f24c 5349 	movw	r3, #50505	; 0xc549
    c51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c520:	2200      	movs	r2, #0
    c522:	701a      	strb	r2, [r3, #0]
    c524:	f24c 5349 	movw	r3, #50505	; 0xc549
    c528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52c:	781b      	ldrb	r3, [r3, #0]
    c52e:	461a      	mov	r2, r3
    c530:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c538:	7819      	ldrb	r1, [r3, #0]
    c53a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c542:	5499      	strb	r1, [r3, r2]
    c544:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54c:	781a      	ldrb	r2, [r3, #0]
    c54e:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	4413      	add	r3, r2
    c55a:	b2da      	uxtb	r2, r3
    c55c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c564:	701a      	strb	r2, [r3, #0]
    c566:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56e:	781a      	ldrb	r2, [r3, #0]
    c570:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	4413      	add	r3, r2
    c57c:	b2da      	uxtb	r2, r3
    c57e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c586:	701a      	strb	r2, [r3, #0]
    c588:	f24c 5349 	movw	r3, #50505	; 0xc549
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	3301      	adds	r3, #1
    c594:	b2da      	uxtb	r2, r3
    c596:	f24c 5349 	movw	r3, #50505	; 0xc549
    c59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59e:	701a      	strb	r2, [r3, #0]
    c5a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a8:	781b      	ldrb	r3, [r3, #0]
    c5aa:	2bff      	cmp	r3, #255	; 0xff
    c5ac:	d105      	bne.n	c5ba <send_debug+0x3ae>
    c5ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b6:	2200      	movs	r2, #0
    c5b8:	701a      	strb	r2, [r3, #0]
    c5ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c2:	781b      	ldrb	r3, [r3, #0]
    c5c4:	461a      	mov	r2, r3
    c5c6:	f24c 5334 	movw	r3, #50484	; 0xc534
    c5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ce:	7819      	ldrb	r1, [r3, #0]
    c5d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d8:	5499      	strb	r1, [r3, r2]
    c5da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e2:	781a      	ldrb	r2, [r3, #0]
    c5e4:	f24c 5334 	movw	r3, #50484	; 0xc534
    c5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	4413      	add	r3, r2
    c5f0:	b2da      	uxtb	r2, r3
    c5f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fa:	701a      	strb	r2, [r3, #0]
    c5fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c604:	781a      	ldrb	r2, [r3, #0]
    c606:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	781b      	ldrb	r3, [r3, #0]
    c610:	4413      	add	r3, r2
    c612:	b2da      	uxtb	r2, r3
    c614:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61c:	701a      	strb	r2, [r3, #0]
    c61e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	3301      	adds	r3, #1
    c62a:	b2da      	uxtb	r2, r3
    c62c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c634:	701a      	strb	r2, [r3, #0]
    c636:	f24c 5349 	movw	r3, #50505	; 0xc549
    c63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63e:	781b      	ldrb	r3, [r3, #0]
    c640:	2bff      	cmp	r3, #255	; 0xff
    c642:	d105      	bne.n	c650 <send_debug+0x444>
    c644:	f24c 5349 	movw	r3, #50505	; 0xc549
    c648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64c:	2200      	movs	r2, #0
    c64e:	701a      	strb	r2, [r3, #0]
    c650:	f24c 5349 	movw	r3, #50505	; 0xc549
    c654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	461a      	mov	r2, r3
    c65c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c664:	7819      	ldrb	r1, [r3, #0]
    c666:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66e:	5499      	strb	r1, [r3, r2]
    c670:	f24c 5349 	movw	r3, #50505	; 0xc549
    c674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c678:	781b      	ldrb	r3, [r3, #0]
    c67a:	3301      	adds	r3, #1
    c67c:	b2da      	uxtb	r2, r3
    c67e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	701a      	strb	r2, [r3, #0]
    c688:	f24c 5349 	movw	r3, #50505	; 0xc549
    c68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	2bff      	cmp	r3, #255	; 0xff
    c694:	d105      	bne.n	c6a2 <send_debug+0x496>
    c696:	f24c 5349 	movw	r3, #50505	; 0xc549
    c69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69e:	2200      	movs	r2, #0
    c6a0:	701a      	strb	r2, [r3, #0]
    c6a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6aa:	781b      	ldrb	r3, [r3, #0]
    c6ac:	461a      	mov	r2, r3
    c6ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b6:	7819      	ldrb	r1, [r3, #0]
    c6b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c0:	5499      	strb	r1, [r3, r2]
    c6c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ca:	781b      	ldrb	r3, [r3, #0]
    c6cc:	3301      	adds	r3, #1
    c6ce:	b2da      	uxtb	r2, r3
    c6d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d8:	701a      	strb	r2, [r3, #0]
    c6da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e2:	781b      	ldrb	r3, [r3, #0]
    c6e4:	2bff      	cmp	r3, #255	; 0xff
    c6e6:	d105      	bne.n	c6f4 <send_debug+0x4e8>
    c6e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	2200      	movs	r2, #0
    c6f2:	701a      	strb	r2, [r3, #0]
    c6f4:	f242 0339 	movw	r3, #8249	; 0x2039
    c6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6fc:	781b      	ldrb	r3, [r3, #0]
    c6fe:	b2db      	uxtb	r3, r3
    c700:	f003 0310 	and.w	r3, r3, #16
    c704:	2b00      	cmp	r3, #0
    c706:	d15a      	bne.n	c7be <send_debug+0x5b2>
    c708:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c710:	781b      	ldrb	r3, [r3, #0]
    c712:	b2db      	uxtb	r3, r3
    c714:	461a      	mov	r2, r3
    c716:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71e:	5c9a      	ldrb	r2, [r3, r2]
    c720:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c728:	701a      	strb	r2, [r3, #0]
    c72a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c732:	2200      	movs	r2, #0
    c734:	701a      	strb	r2, [r3, #0]
    c736:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73e:	781b      	ldrb	r3, [r3, #0]
    c740:	b2db      	uxtb	r3, r3
    c742:	3301      	adds	r3, #1
    c744:	b2da      	uxtb	r2, r3
    c746:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74e:	701a      	strb	r2, [r3, #0]
    c750:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	b2db      	uxtb	r3, r3
    c75c:	2bff      	cmp	r3, #255	; 0xff
    c75e:	d105      	bne.n	c76c <send_debug+0x560>
    c760:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c768:	2200      	movs	r2, #0
    c76a:	701a      	strb	r2, [r3, #0]
    c76c:	f242 0338 	movw	r3, #8248	; 0x2038
    c770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c774:	f242 0238 	movw	r2, #8248	; 0x2038
    c778:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c77c:	7812      	ldrb	r2, [r2, #0]
    c77e:	b2d2      	uxtb	r2, r2
    c780:	f042 0201 	orr.w	r2, r2, #1
    c784:	b2d2      	uxtb	r2, r2
    c786:	701a      	strb	r2, [r3, #0]
    c788:	f242 0339 	movw	r3, #8249	; 0x2039
    c78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c790:	f242 0239 	movw	r2, #8249	; 0x2039
    c794:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c798:	7812      	ldrb	r2, [r2, #0]
    c79a:	b2d2      	uxtb	r2, r2
    c79c:	f042 0210 	orr.w	r2, r2, #16
    c7a0:	b2d2      	uxtb	r2, r2
    c7a2:	701a      	strb	r2, [r3, #0]
    c7a4:	e00b      	b.n	c7be <send_debug+0x5b2>
    c7a6:	f24c 5348 	movw	r3, #50504	; 0xc548
    c7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ae:	781b      	ldrb	r3, [r3, #0]
    c7b0:	3301      	adds	r3, #1
    c7b2:	b2da      	uxtb	r2, r3
    c7b4:	f24c 5348 	movw	r3, #50504	; 0xc548
    c7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7bc:	701a      	strb	r2, [r3, #0]
}
    c7be:	46bd      	mov	sp, r7
    c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7c4:	4770      	bx	lr
    c7c6:	bf00      	nop

0000c7c8 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c7c8:	b480      	push	{r7}
    c7ca:	af00      	add	r7, sp, #0
  if(!boot)
    c7cc:	f240 533d 	movw	r3, #1341	; 0x53d
    c7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d4:	781b      	ldrb	r3, [r3, #0]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	f040 83a9 	bne.w	cf2e <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c7dc:	f24c 5341 	movw	r3, #50497	; 0xc541
    c7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e4:	781a      	ldrb	r2, [r3, #0]
    c7e6:	f248 531f 	movw	r3, #34079	; 0x851f
    c7ea:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c7ee:	fba3 1302 	umull	r1, r3, r3, r2
    c7f2:	095b      	lsrs	r3, r3, #5
    c7f4:	2164      	movs	r1, #100	; 0x64
    c7f6:	fb01 f303 	mul.w	r3, r1, r3
    c7fa:	1ad3      	subs	r3, r2, r3
    c7fc:	b2db      	uxtb	r3, r3
    c7fe:	2b31      	cmp	r3, #49	; 0x31
    c800:	f040 8395 	bne.w	cf2e <send_nav_ref+0x766>
    c804:	f24c 5349 	movw	r3, #50505	; 0xc549
    c808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80c:	781a      	ldrb	r2, [r3, #0]
    c80e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c816:	781b      	ldrb	r3, [r3, #0]
    c818:	b2db      	uxtb	r3, r3
    c81a:	429a      	cmp	r2, r3
    c81c:	d313      	bcc.n	c846 <send_nav_ref+0x7e>
    c81e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	b2db      	uxtb	r3, r3
    c82a:	461a      	mov	r2, r3
    c82c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c834:	781b      	ldrb	r3, [r3, #0]
    c836:	1ad3      	subs	r3, r2, r3
    c838:	33ff      	adds	r3, #255	; 0xff
    c83a:	2b0c      	cmp	r3, #12
    c83c:	bfd4      	ite	le
    c83e:	2300      	movle	r3, #0
    c840:	2301      	movgt	r3, #1
    c842:	b2db      	uxtb	r3, r3
    c844:	e011      	b.n	c86a <send_nav_ref+0xa2>
    c846:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	b2db      	uxtb	r3, r3
    c852:	461a      	mov	r2, r3
    c854:	f24c 5349 	movw	r3, #50505	; 0xc549
    c858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85c:	781b      	ldrb	r3, [r3, #0]
    c85e:	1ad3      	subs	r3, r2, r3
    c860:	2b0c      	cmp	r3, #12
    c862:	bfd4      	ite	le
    c864:	2300      	movle	r3, #0
    c866:	2301      	movgt	r3, #1
    c868:	b2db      	uxtb	r3, r3
    c86a:	2b00      	cmp	r3, #0
    c86c:	f000 8353 	beq.w	cf16 <send_nav_ref+0x74e>
    c870:	f24c 5349 	movw	r3, #50505	; 0xc549
    c874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	461a      	mov	r2, r3
    c87c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c884:	2105      	movs	r1, #5
    c886:	5499      	strb	r1, [r3, r2]
    c888:	f24c 5349 	movw	r3, #50505	; 0xc549
    c88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	3301      	adds	r3, #1
    c894:	b2da      	uxtb	r2, r3
    c896:	f24c 5349 	movw	r3, #50505	; 0xc549
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	701a      	strb	r2, [r3, #0]
    c8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a8:	781b      	ldrb	r3, [r3, #0]
    c8aa:	2bff      	cmp	r3, #255	; 0xff
    c8ac:	d105      	bne.n	c8ba <send_nav_ref+0xf2>
    c8ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	2200      	movs	r2, #0
    c8b8:	701a      	strb	r2, [r3, #0]
    c8ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c2:	781b      	ldrb	r3, [r3, #0]
    c8c4:	461a      	mov	r2, r3
    c8c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ce:	2109      	movs	r1, #9
    c8d0:	5499      	strb	r1, [r3, r2]
    c8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8da:	781b      	ldrb	r3, [r3, #0]
    c8dc:	3301      	adds	r3, #1
    c8de:	b2da      	uxtb	r2, r3
    c8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e8:	701a      	strb	r2, [r3, #0]
    c8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f2:	781b      	ldrb	r3, [r3, #0]
    c8f4:	2bff      	cmp	r3, #255	; 0xff
    c8f6:	d105      	bne.n	c904 <send_nav_ref+0x13c>
    c8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c900:	2200      	movs	r2, #0
    c902:	701a      	strb	r2, [r3, #0]
    c904:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90c:	2209      	movs	r2, #9
    c90e:	701a      	strb	r2, [r3, #0]
    c910:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	2209      	movs	r2, #9
    c91a:	701a      	strb	r2, [r3, #0]
    c91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	781b      	ldrb	r3, [r3, #0]
    c926:	461a      	mov	r2, r3
    c928:	f648 2338 	movw	r3, #35384	; 0x8a38
    c92c:	f2c0 0301 	movt	r3, #1
    c930:	7819      	ldrb	r1, [r3, #0]
    c932:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93a:	5499      	strb	r1, [r3, r2]
    c93c:	f648 2338 	movw	r3, #35384	; 0x8a38
    c940:	f2c0 0301 	movt	r3, #1
    c944:	781a      	ldrb	r2, [r3, #0]
    c946:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94e:	781b      	ldrb	r3, [r3, #0]
    c950:	4413      	add	r3, r2
    c952:	b2da      	uxtb	r2, r3
    c954:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95c:	701a      	strb	r2, [r3, #0]
    c95e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c966:	781a      	ldrb	r2, [r3, #0]
    c968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c970:	781b      	ldrb	r3, [r3, #0]
    c972:	4413      	add	r3, r2
    c974:	b2da      	uxtb	r2, r3
    c976:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97e:	701a      	strb	r2, [r3, #0]
    c980:	f24c 5349 	movw	r3, #50505	; 0xc549
    c984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c988:	781b      	ldrb	r3, [r3, #0]
    c98a:	3301      	adds	r3, #1
    c98c:	b2da      	uxtb	r2, r3
    c98e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c996:	701a      	strb	r2, [r3, #0]
    c998:	f24c 5349 	movw	r3, #50505	; 0xc549
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	781b      	ldrb	r3, [r3, #0]
    c9a2:	2bff      	cmp	r3, #255	; 0xff
    c9a4:	d105      	bne.n	c9b2 <send_nav_ref+0x1ea>
    c9a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ae:	2200      	movs	r2, #0
    c9b0:	701a      	strb	r2, [r3, #0]
    c9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ba:	781b      	ldrb	r3, [r3, #0]
    c9bc:	461a      	mov	r2, r3
    c9be:	f648 2338 	movw	r3, #35384	; 0x8a38
    c9c2:	f2c0 0301 	movt	r3, #1
    c9c6:	7859      	ldrb	r1, [r3, #1]
    c9c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d0:	5499      	strb	r1, [r3, r2]
    c9d2:	4bd2      	ldr	r3, [pc, #840]	; (cd1c <send_nav_ref+0x554>)
    c9d4:	781a      	ldrb	r2, [r3, #0]
    c9d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	4413      	add	r3, r2
    c9e2:	b2da      	uxtb	r2, r3
    c9e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ec:	701a      	strb	r2, [r3, #0]
    c9ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	781a      	ldrb	r2, [r3, #0]
    c9f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	4413      	add	r3, r2
    ca04:	b2da      	uxtb	r2, r3
    ca06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	701a      	strb	r2, [r3, #0]
    ca10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	3301      	adds	r3, #1
    ca1c:	b2da      	uxtb	r2, r3
    ca1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	2bff      	cmp	r3, #255	; 0xff
    ca34:	d105      	bne.n	ca42 <send_nav_ref+0x27a>
    ca36:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	2200      	movs	r2, #0
    ca40:	701a      	strb	r2, [r3, #0]
    ca42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	461a      	mov	r2, r3
    ca4e:	f648 2338 	movw	r3, #35384	; 0x8a38
    ca52:	f2c0 0301 	movt	r3, #1
    ca56:	7899      	ldrb	r1, [r3, #2]
    ca58:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca60:	5499      	strb	r1, [r3, r2]
    ca62:	4baf      	ldr	r3, [pc, #700]	; (cd20 <send_nav_ref+0x558>)
    ca64:	781a      	ldrb	r2, [r3, #0]
    ca66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca6e:	781b      	ldrb	r3, [r3, #0]
    ca70:	4413      	add	r3, r2
    ca72:	b2da      	uxtb	r2, r3
    ca74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7c:	701a      	strb	r2, [r3, #0]
    ca7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca86:	781a      	ldrb	r2, [r3, #0]
    ca88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	4413      	add	r3, r2
    ca94:	b2da      	uxtb	r2, r3
    ca96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9e:	701a      	strb	r2, [r3, #0]
    caa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	3301      	adds	r3, #1
    caac:	b2da      	uxtb	r2, r3
    caae:	f24c 5349 	movw	r3, #50505	; 0xc549
    cab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab6:	701a      	strb	r2, [r3, #0]
    cab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac0:	781b      	ldrb	r3, [r3, #0]
    cac2:	2bff      	cmp	r3, #255	; 0xff
    cac4:	d105      	bne.n	cad2 <send_nav_ref+0x30a>
    cac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	2200      	movs	r2, #0
    cad0:	701a      	strb	r2, [r3, #0]
    cad2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cada:	781b      	ldrb	r3, [r3, #0]
    cadc:	461a      	mov	r2, r3
    cade:	f648 2338 	movw	r3, #35384	; 0x8a38
    cae2:	f2c0 0301 	movt	r3, #1
    cae6:	78d9      	ldrb	r1, [r3, #3]
    cae8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	5499      	strb	r1, [r3, r2]
    caf2:	4b8c      	ldr	r3, [pc, #560]	; (cd24 <send_nav_ref+0x55c>)
    caf4:	781a      	ldrb	r2, [r3, #0]
    caf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	4413      	add	r3, r2
    cb02:	b2da      	uxtb	r2, r3
    cb04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0c:	701a      	strb	r2, [r3, #0]
    cb0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781a      	ldrb	r2, [r3, #0]
    cb18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	4413      	add	r3, r2
    cb24:	b2da      	uxtb	r2, r3
    cb26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	3301      	adds	r3, #1
    cb3c:	b2da      	uxtb	r2, r3
    cb3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2bff      	cmp	r3, #255	; 0xff
    cb54:	d105      	bne.n	cb62 <send_nav_ref+0x39a>
    cb56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	2200      	movs	r2, #0
    cb60:	701a      	strb	r2, [r3, #0]
    cb62:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6a:	781b      	ldrb	r3, [r3, #0]
    cb6c:	461a      	mov	r2, r3
    cb6e:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cb72:	f2c0 0301 	movt	r3, #1
    cb76:	7819      	ldrb	r1, [r3, #0]
    cb78:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb80:	5499      	strb	r1, [r3, r2]
    cb82:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cb86:	f2c0 0301 	movt	r3, #1
    cb8a:	781a      	ldrb	r2, [r3, #0]
    cb8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb94:	781b      	ldrb	r3, [r3, #0]
    cb96:	4413      	add	r3, r2
    cb98:	b2da      	uxtb	r2, r3
    cb9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba2:	701a      	strb	r2, [r3, #0]
    cba4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbac:	781a      	ldrb	r2, [r3, #0]
    cbae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb6:	781b      	ldrb	r3, [r3, #0]
    cbb8:	4413      	add	r3, r2
    cbba:	b2da      	uxtb	r2, r3
    cbbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc4:	701a      	strb	r2, [r3, #0]
    cbc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbce:	781b      	ldrb	r3, [r3, #0]
    cbd0:	3301      	adds	r3, #1
    cbd2:	b2da      	uxtb	r2, r3
    cbd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbdc:	701a      	strb	r2, [r3, #0]
    cbde:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	2bff      	cmp	r3, #255	; 0xff
    cbea:	d105      	bne.n	cbf8 <send_nav_ref+0x430>
    cbec:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf4:	2200      	movs	r2, #0
    cbf6:	701a      	strb	r2, [r3, #0]
    cbf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc00:	781b      	ldrb	r3, [r3, #0]
    cc02:	461a      	mov	r2, r3
    cc04:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cc08:	f2c0 0301 	movt	r3, #1
    cc0c:	7859      	ldrb	r1, [r3, #1]
    cc0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc16:	5499      	strb	r1, [r3, r2]
    cc18:	4b43      	ldr	r3, [pc, #268]	; (cd28 <send_nav_ref+0x560>)
    cc1a:	781a      	ldrb	r2, [r3, #0]
    cc1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	4413      	add	r3, r2
    cc28:	b2da      	uxtb	r2, r3
    cc2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc32:	701a      	strb	r2, [r3, #0]
    cc34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3c:	781a      	ldrb	r2, [r3, #0]
    cc3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	4413      	add	r3, r2
    cc4a:	b2da      	uxtb	r2, r3
    cc4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc54:	701a      	strb	r2, [r3, #0]
    cc56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	3301      	adds	r3, #1
    cc62:	b2da      	uxtb	r2, r3
    cc64:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	2bff      	cmp	r3, #255	; 0xff
    cc7a:	d105      	bne.n	cc88 <send_nav_ref+0x4c0>
    cc7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc84:	2200      	movs	r2, #0
    cc86:	701a      	strb	r2, [r3, #0]
    cc88:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	461a      	mov	r2, r3
    cc94:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cc98:	f2c0 0301 	movt	r3, #1
    cc9c:	7899      	ldrb	r1, [r3, #2]
    cc9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca6:	5499      	strb	r1, [r3, r2]
    cca8:	4b20      	ldr	r3, [pc, #128]	; (cd2c <send_nav_ref+0x564>)
    ccaa:	781a      	ldrb	r2, [r3, #0]
    ccac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb4:	781b      	ldrb	r3, [r3, #0]
    ccb6:	4413      	add	r3, r2
    ccb8:	b2da      	uxtb	r2, r3
    ccba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc2:	701a      	strb	r2, [r3, #0]
    ccc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cccc:	781a      	ldrb	r2, [r3, #0]
    ccce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	4413      	add	r3, r2
    ccda:	b2da      	uxtb	r2, r3
    ccdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce4:	701a      	strb	r2, [r3, #0]
    cce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	3301      	adds	r3, #1
    ccf2:	b2da      	uxtb	r2, r3
    ccf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	2bff      	cmp	r3, #255	; 0xff
    cd0a:	d111      	bne.n	cd30 <send_nav_ref+0x568>
    cd0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	2200      	movs	r2, #0
    cd16:	701a      	strb	r2, [r3, #0]
    cd18:	e00a      	b.n	cd30 <send_nav_ref+0x568>
    cd1a:	bf00      	nop
    cd1c:	00018a39 	.word	0x00018a39
    cd20:	00018a3a 	.word	0x00018a3a
    cd24:	00018a3b 	.word	0x00018a3b
    cd28:	00018a3d 	.word	0x00018a3d
    cd2c:	00018a3e 	.word	0x00018a3e
    cd30:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	461a      	mov	r2, r3
    cd3c:	f648 233c 	movw	r3, #35388	; 0x8a3c
    cd40:	f2c0 0301 	movt	r3, #1
    cd44:	78d9      	ldrb	r1, [r3, #3]
    cd46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4e:	5499      	strb	r1, [r3, r2]
    cd50:	4b79      	ldr	r3, [pc, #484]	; (cf38 <send_nav_ref+0x770>)
    cd52:	781a      	ldrb	r2, [r3, #0]
    cd54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	781b      	ldrb	r3, [r3, #0]
    cd5e:	4413      	add	r3, r2
    cd60:	b2da      	uxtb	r2, r3
    cd62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6a:	701a      	strb	r2, [r3, #0]
    cd6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	781a      	ldrb	r2, [r3, #0]
    cd76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	4413      	add	r3, r2
    cd82:	b2da      	uxtb	r2, r3
    cd84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	701a      	strb	r2, [r3, #0]
    cd8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	3301      	adds	r3, #1
    cd9a:	b2da      	uxtb	r2, r3
    cd9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	701a      	strb	r2, [r3, #0]
    cda6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	2bff      	cmp	r3, #255	; 0xff
    cdb2:	d105      	bne.n	cdc0 <send_nav_ref+0x5f8>
    cdb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	2200      	movs	r2, #0
    cdbe:	701a      	strb	r2, [r3, #0]
    cdc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	461a      	mov	r2, r3
    cdcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd4:	7819      	ldrb	r1, [r3, #0]
    cdd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	5499      	strb	r1, [r3, r2]
    cde0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde8:	781b      	ldrb	r3, [r3, #0]
    cdea:	3301      	adds	r3, #1
    cdec:	b2da      	uxtb	r2, r3
    cdee:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf6:	701a      	strb	r2, [r3, #0]
    cdf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce00:	781b      	ldrb	r3, [r3, #0]
    ce02:	2bff      	cmp	r3, #255	; 0xff
    ce04:	d105      	bne.n	ce12 <send_nav_ref+0x64a>
    ce06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	2200      	movs	r2, #0
    ce10:	701a      	strb	r2, [r3, #0]
    ce12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1a:	781b      	ldrb	r3, [r3, #0]
    ce1c:	461a      	mov	r2, r3
    ce1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce26:	7819      	ldrb	r1, [r3, #0]
    ce28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce30:	5499      	strb	r1, [r3, r2]
    ce32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3a:	781b      	ldrb	r3, [r3, #0]
    ce3c:	3301      	adds	r3, #1
    ce3e:	b2da      	uxtb	r2, r3
    ce40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce48:	701a      	strb	r2, [r3, #0]
    ce4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	2bff      	cmp	r3, #255	; 0xff
    ce56:	d105      	bne.n	ce64 <send_nav_ref+0x69c>
    ce58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce60:	2200      	movs	r2, #0
    ce62:	701a      	strb	r2, [r3, #0]
    ce64:	f242 0339 	movw	r3, #8249	; 0x2039
    ce68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce6c:	781b      	ldrb	r3, [r3, #0]
    ce6e:	b2db      	uxtb	r3, r3
    ce70:	f003 0310 	and.w	r3, r3, #16
    ce74:	2b00      	cmp	r3, #0
    ce76:	d15a      	bne.n	cf2e <send_nav_ref+0x766>
    ce78:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ce7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	b2db      	uxtb	r3, r3
    ce84:	461a      	mov	r2, r3
    ce86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce8e:	5c9a      	ldrb	r2, [r3, r2]
    ce90:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ce94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce98:	701a      	strb	r2, [r3, #0]
    ce9a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ce9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea2:	2200      	movs	r2, #0
    cea4:	701a      	strb	r2, [r3, #0]
    cea6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ceaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceae:	781b      	ldrb	r3, [r3, #0]
    ceb0:	b2db      	uxtb	r3, r3
    ceb2:	3301      	adds	r3, #1
    ceb4:	b2da      	uxtb	r2, r3
    ceb6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ceba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cebe:	701a      	strb	r2, [r3, #0]
    cec0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec8:	781b      	ldrb	r3, [r3, #0]
    ceca:	b2db      	uxtb	r3, r3
    cecc:	2bff      	cmp	r3, #255	; 0xff
    cece:	d105      	bne.n	cedc <send_nav_ref+0x714>
    ced0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ced4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced8:	2200      	movs	r2, #0
    ceda:	701a      	strb	r2, [r3, #0]
    cedc:	f242 0338 	movw	r3, #8248	; 0x2038
    cee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee4:	f242 0238 	movw	r2, #8248	; 0x2038
    cee8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ceec:	7812      	ldrb	r2, [r2, #0]
    ceee:	b2d2      	uxtb	r2, r2
    cef0:	f042 0201 	orr.w	r2, r2, #1
    cef4:	b2d2      	uxtb	r2, r2
    cef6:	701a      	strb	r2, [r3, #0]
    cef8:	f242 0339 	movw	r3, #8249	; 0x2039
    cefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf00:	f242 0239 	movw	r2, #8249	; 0x2039
    cf04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf08:	7812      	ldrb	r2, [r2, #0]
    cf0a:	b2d2      	uxtb	r2, r2
    cf0c:	f042 0210 	orr.w	r2, r2, #16
    cf10:	b2d2      	uxtb	r2, r2
    cf12:	701a      	strb	r2, [r3, #0]
    cf14:	e00b      	b.n	cf2e <send_nav_ref+0x766>
    cf16:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	3301      	adds	r3, #1
    cf22:	b2da      	uxtb	r2, r3
    cf24:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cf2e:	46bd      	mov	sp, r7
    cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf34:	4770      	bx	lr
    cf36:	bf00      	nop
    cf38:	00018a3f 	.word	0x00018a3f

0000cf3c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cf3c:	b480      	push	{r7}
    cf3e:	b083      	sub	sp, #12
    cf40:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cf42:	f24c 6350 	movw	r3, #50768	; 0xc650
    cf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4a:	8a1b      	ldrh	r3, [r3, #16]
    cf4c:	b21b      	sxth	r3, r3
    cf4e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cf52:	db0d      	blt.n	cf70 <inflight_calib_mode_update+0x34>
    cf54:	f24c 6350 	movw	r3, #50768	; 0xc650
    cf58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5c:	8a1b      	ldrh	r3, [r3, #16]
    cf5e:	b21a      	sxth	r2, r3
    cf60:	f640 437f 	movw	r3, #3199	; 0xc7f
    cf64:	429a      	cmp	r2, r3
    cf66:	bfd4      	ite	le
    cf68:	2300      	movle	r3, #0
    cf6a:	2301      	movgt	r3, #1
    cf6c:	b2db      	uxtb	r3, r3
    cf6e:	e000      	b.n	cf72 <inflight_calib_mode_update+0x36>
    cf70:	2302      	movs	r3, #2
    cf72:	71fb      	strb	r3, [r7, #7]
    cf74:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7c:	781b      	ldrb	r3, [r3, #0]
    cf7e:	79fa      	ldrb	r2, [r7, #7]
    cf80:	429a      	cmp	r2, r3
    cf82:	d007      	beq.n	cf94 <inflight_calib_mode_update+0x58>
    cf84:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cf88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf8c:	79fa      	ldrb	r2, [r7, #7]
    cf8e:	701a      	strb	r2, [r3, #0]
    cf90:	2301      	movs	r3, #1
    cf92:	e000      	b.n	cf96 <inflight_calib_mode_update+0x5a>
    cf94:	2300      	movs	r3, #0
}
    cf96:	4618      	mov	r0, r3
    cf98:	370c      	adds	r7, #12
    cf9a:	46bd      	mov	sp, r7
    cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfa0:	4770      	bx	lr
    cfa2:	bf00      	nop

0000cfa4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b082      	sub	sp, #8
    cfa8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cfaa:	f24c 637e 	movw	r3, #50814	; 0xc67e
    cfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb2:	2201      	movs	r2, #1
    cfb4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cfb6:	f24c 637e 	movw	r3, #50814	; 0xc67e
    cfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	b2db      	uxtb	r3, r3
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	f000 83c0 	beq.w	d748 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    cfc8:	2300      	movs	r3, #0
    cfca:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cfcc:	f7fa fa4c 	bl	7468 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cfd0:	4b3e      	ldr	r3, [pc, #248]	; (d0cc <radio_control_task+0x128>)
    cfd2:	781b      	ldrb	r3, [r3, #0]
    cfd4:	b2db      	uxtb	r3, r3
    cfd6:	f003 0302 	and.w	r3, r3, #2
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d00d      	beq.n	cffa <radio_control_task+0x56>
    cfde:	f24c 532c 	movw	r3, #50476	; 0xc52c
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	2b01      	cmp	r3, #1
    cfea:	d00d      	beq.n	d008 <radio_control_task+0x64>
    cfec:	f24c 532c 	movw	r3, #50476	; 0xc52c
    cff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	2b00      	cmp	r3, #0
    cff8:	d006      	beq.n	d008 <radio_control_task+0x64>
    cffa:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    cffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d002:	781b      	ldrb	r3, [r3, #0]
    d004:	2b00      	cmp	r3, #0
    d006:	d007      	beq.n	d018 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d008:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d010:	2203      	movs	r2, #3
    d012:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d014:	2301      	movs	r3, #1
    d016:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d018:	4b2c      	ldr	r3, [pc, #176]	; (d0cc <radio_control_task+0x128>)
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	b2db      	uxtb	r3, r3
    d01e:	f003 0304 	and.w	r3, r3, #4
    d022:	2b00      	cmp	r3, #0
    d024:	d023      	beq.n	d06e <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d026:	f7fa f8f9 	bl	721c <pprz_mode_update>
    d02a:	4603      	mov	r3, r0
    d02c:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d02e:	79fa      	ldrb	r2, [r7, #7]
    d030:	79bb      	ldrb	r3, [r7, #6]
    d032:	4313      	orrs	r3, r2
    d034:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d036:	f7fa f93d 	bl	72b4 <ir_estim_mode_update>
    d03a:	4603      	mov	r3, r0
    d03c:	461a      	mov	r2, r3
    d03e:	79fb      	ldrb	r3, [r7, #7]
    d040:	4313      	orrs	r3, r2
    d042:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d044:	f7ff ff7a 	bl	cf3c <inflight_calib_mode_update>
    d048:	4603      	mov	r3, r0
    d04a:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d04c:	797b      	ldrb	r3, [r7, #5]
    d04e:	2b00      	cmp	r3, #0
    d050:	d102      	bne.n	d058 <radio_control_task+0xb4>
    d052:	79bb      	ldrb	r3, [r7, #6]
    d054:	2b00      	cmp	r3, #0
    d056:	d001      	beq.n	d05c <radio_control_task+0xb8>
    d058:	2301      	movs	r3, #1
    d05a:	e000      	b.n	d05e <radio_control_task+0xba>
    d05c:	2300      	movs	r3, #0
    d05e:	b2db      	uxtb	r3, r3
    d060:	4618      	mov	r0, r3
    d062:	f008 fba1 	bl	157a8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d066:	79fa      	ldrb	r2, [r7, #7]
    d068:	797b      	ldrb	r3, [r7, #5]
    d06a:	4313      	orrs	r3, r2
    d06c:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d06e:	f7fa f949 	bl	7304 <mcu1_status_update>
    d072:	4603      	mov	r3, r0
    d074:	461a      	mov	r2, r3
    d076:	79fb      	ldrb	r3, [r7, #7]
    d078:	4313      	orrs	r3, r2
    d07a:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d07c:	2301      	movs	r3, #1
    d07e:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d080:	79fb      	ldrb	r3, [r7, #7]
    d082:	2b00      	cmp	r3, #0
    d084:	f000 82bd 	beq.w	d602 <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d088:	f24c 5349 	movw	r3, #50505	; 0xc549
    d08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d090:	781a      	ldrb	r2, [r3, #0]
    d092:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	b2db      	uxtb	r3, r3
    d09e:	429a      	cmp	r2, r3
    d0a0:	d316      	bcc.n	d0d0 <radio_control_task+0x12c>
    d0a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0aa:	781b      	ldrb	r3, [r3, #0]
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	461a      	mov	r2, r3
    d0b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b8:	781b      	ldrb	r3, [r3, #0]
    d0ba:	1ad3      	subs	r3, r2, r3
    d0bc:	33ff      	adds	r3, #255	; 0xff
    d0be:	2b09      	cmp	r3, #9
    d0c0:	bfd4      	ite	le
    d0c2:	2300      	movle	r3, #0
    d0c4:	2301      	movgt	r3, #1
    d0c6:	b2db      	uxtb	r3, r3
    d0c8:	e014      	b.n	d0f4 <radio_control_task+0x150>
    d0ca:	bf00      	nop
    d0cc:	2004c663 	.word	0x2004c663
    d0d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	b2db      	uxtb	r3, r3
    d0dc:	461a      	mov	r2, r3
    d0de:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	1ad3      	subs	r3, r2, r3
    d0ea:	2b09      	cmp	r3, #9
    d0ec:	bfd4      	ite	le
    d0ee:	2300      	movle	r3, #0
    d0f0:	2301      	movgt	r3, #1
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	f000 8278 	beq.w	d5ea <radio_control_task+0x646>
    d0fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d102:	781b      	ldrb	r3, [r3, #0]
    d104:	461a      	mov	r2, r3
    d106:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10e:	2105      	movs	r1, #5
    d110:	5499      	strb	r1, [r3, r2]
    d112:	f24c 5349 	movw	r3, #50505	; 0xc549
    d116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	3301      	adds	r3, #1
    d11e:	b2da      	uxtb	r2, r3
    d120:	f24c 5349 	movw	r3, #50505	; 0xc549
    d124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d128:	701a      	strb	r2, [r3, #0]
    d12a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	2bff      	cmp	r3, #255	; 0xff
    d136:	d105      	bne.n	d144 <radio_control_task+0x1a0>
    d138:	f24c 5349 	movw	r3, #50505	; 0xc549
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	2200      	movs	r2, #0
    d142:	701a      	strb	r2, [r3, #0]
    d144:	f24c 5349 	movw	r3, #50505	; 0xc549
    d148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	461a      	mov	r2, r3
    d150:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	210b      	movs	r1, #11
    d15a:	5499      	strb	r1, [r3, r2]
    d15c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	3301      	adds	r3, #1
    d168:	b2da      	uxtb	r2, r3
    d16a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d172:	701a      	strb	r2, [r3, #0]
    d174:	f24c 5349 	movw	r3, #50505	; 0xc549
    d178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	2bff      	cmp	r3, #255	; 0xff
    d180:	d105      	bne.n	d18e <radio_control_task+0x1ea>
    d182:	f24c 5349 	movw	r3, #50505	; 0xc549
    d186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18a:	2200      	movs	r2, #0
    d18c:	701a      	strb	r2, [r3, #0]
    d18e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d196:	220b      	movs	r2, #11
    d198:	701a      	strb	r2, [r3, #0]
    d19a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a2:	220b      	movs	r2, #11
    d1a4:	701a      	strb	r2, [r3, #0]
    d1a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	461a      	mov	r2, r3
    d1b2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ba:	7819      	ldrb	r1, [r3, #0]
    d1bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c4:	5499      	strb	r1, [r3, r2]
    d1c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ce:	781a      	ldrb	r2, [r3, #0]
    d1d0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	4413      	add	r3, r2
    d1dc:	b2da      	uxtb	r2, r3
    d1de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e6:	701a      	strb	r2, [r3, #0]
    d1e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f0:	781a      	ldrb	r2, [r3, #0]
    d1f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fa:	781b      	ldrb	r3, [r3, #0]
    d1fc:	4413      	add	r3, r2
    d1fe:	b2da      	uxtb	r2, r3
    d200:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	3301      	adds	r3, #1
    d216:	b2da      	uxtb	r2, r3
    d218:	f24c 5349 	movw	r3, #50505	; 0xc549
    d21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d220:	701a      	strb	r2, [r3, #0]
    d222:	f24c 5349 	movw	r3, #50505	; 0xc549
    d226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	2bff      	cmp	r3, #255	; 0xff
    d22e:	d105      	bne.n	d23c <radio_control_task+0x298>
    d230:	f24c 5349 	movw	r3, #50505	; 0xc549
    d234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d238:	2200      	movs	r2, #0
    d23a:	701a      	strb	r2, [r3, #0]
    d23c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d244:	781b      	ldrb	r3, [r3, #0]
    d246:	461a      	mov	r2, r3
    d248:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d250:	7819      	ldrb	r1, [r3, #0]
    d252:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25a:	5499      	strb	r1, [r3, r2]
    d25c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d264:	781a      	ldrb	r2, [r3, #0]
    d266:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	4413      	add	r3, r2
    d272:	b2da      	uxtb	r2, r3
    d274:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27c:	701a      	strb	r2, [r3, #0]
    d27e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d286:	781a      	ldrb	r2, [r3, #0]
    d288:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	781b      	ldrb	r3, [r3, #0]
    d292:	4413      	add	r3, r2
    d294:	b2da      	uxtb	r2, r3
    d296:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29e:	701a      	strb	r2, [r3, #0]
    d2a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	3301      	adds	r3, #1
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b6:	701a      	strb	r2, [r3, #0]
    d2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	2bff      	cmp	r3, #255	; 0xff
    d2c4:	d105      	bne.n	d2d2 <radio_control_task+0x32e>
    d2c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ce:	2200      	movs	r2, #0
    d2d0:	701a      	strb	r2, [r3, #0]
    d2d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2da:	781b      	ldrb	r3, [r3, #0]
    d2dc:	461a      	mov	r2, r3
    d2de:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e6:	7819      	ldrb	r1, [r3, #0]
    d2e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f0:	5499      	strb	r1, [r3, r2]
    d2f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fa:	781a      	ldrb	r2, [r3, #0]
    d2fc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	4413      	add	r3, r2
    d308:	b2da      	uxtb	r2, r3
    d30a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d312:	701a      	strb	r2, [r3, #0]
    d314:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31c:	781a      	ldrb	r2, [r3, #0]
    d31e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	781b      	ldrb	r3, [r3, #0]
    d328:	4413      	add	r3, r2
    d32a:	b2da      	uxtb	r2, r3
    d32c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d334:	701a      	strb	r2, [r3, #0]
    d336:	f24c 5349 	movw	r3, #50505	; 0xc549
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	3301      	adds	r3, #1
    d342:	b2da      	uxtb	r2, r3
    d344:	f24c 5349 	movw	r3, #50505	; 0xc549
    d348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34c:	701a      	strb	r2, [r3, #0]
    d34e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	2bff      	cmp	r3, #255	; 0xff
    d35a:	d105      	bne.n	d368 <radio_control_task+0x3c4>
    d35c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d364:	2200      	movs	r2, #0
    d366:	701a      	strb	r2, [r3, #0]
    d368:	f24c 5349 	movw	r3, #50505	; 0xc549
    d36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d370:	781b      	ldrb	r3, [r3, #0]
    d372:	461a      	mov	r2, r3
    d374:	f24c 5333 	movw	r3, #50483	; 0xc533
    d378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37c:	7819      	ldrb	r1, [r3, #0]
    d37e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d386:	5499      	strb	r1, [r3, r2]
    d388:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d390:	781a      	ldrb	r2, [r3, #0]
    d392:	f24c 5333 	movw	r3, #50483	; 0xc533
    d396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39a:	781b      	ldrb	r3, [r3, #0]
    d39c:	4413      	add	r3, r2
    d39e:	b2da      	uxtb	r2, r3
    d3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a8:	701a      	strb	r2, [r3, #0]
    d3aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b2:	781a      	ldrb	r2, [r3, #0]
    d3b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	781b      	ldrb	r3, [r3, #0]
    d3be:	4413      	add	r3, r2
    d3c0:	b2da      	uxtb	r2, r3
    d3c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ca:	701a      	strb	r2, [r3, #0]
    d3cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	781b      	ldrb	r3, [r3, #0]
    d3d6:	3301      	adds	r3, #1
    d3d8:	b2da      	uxtb	r2, r3
    d3da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e2:	701a      	strb	r2, [r3, #0]
    d3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ec:	781b      	ldrb	r3, [r3, #0]
    d3ee:	2bff      	cmp	r3, #255	; 0xff
    d3f0:	d105      	bne.n	d3fe <radio_control_task+0x45a>
    d3f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fa:	2200      	movs	r2, #0
    d3fc:	701a      	strb	r2, [r3, #0]
    d3fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    d402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d406:	781b      	ldrb	r3, [r3, #0]
    d408:	461a      	mov	r2, r3
    d40a:	f240 533c 	movw	r3, #1340	; 0x53c
    d40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d412:	7819      	ldrb	r1, [r3, #0]
    d414:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41c:	5499      	strb	r1, [r3, r2]
    d41e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d426:	781a      	ldrb	r2, [r3, #0]
    d428:	f240 533c 	movw	r3, #1340	; 0x53c
    d42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d430:	781b      	ldrb	r3, [r3, #0]
    d432:	4413      	add	r3, r2
    d434:	b2da      	uxtb	r2, r3
    d436:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	701a      	strb	r2, [r3, #0]
    d440:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d448:	781a      	ldrb	r2, [r3, #0]
    d44a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d452:	781b      	ldrb	r3, [r3, #0]
    d454:	4413      	add	r3, r2
    d456:	b2da      	uxtb	r2, r3
    d458:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d460:	701a      	strb	r2, [r3, #0]
    d462:	f24c 5349 	movw	r3, #50505	; 0xc549
    d466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46a:	781b      	ldrb	r3, [r3, #0]
    d46c:	3301      	adds	r3, #1
    d46e:	b2da      	uxtb	r2, r3
    d470:	f24c 5349 	movw	r3, #50505	; 0xc549
    d474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d478:	701a      	strb	r2, [r3, #0]
    d47a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d482:	781b      	ldrb	r3, [r3, #0]
    d484:	2bff      	cmp	r3, #255	; 0xff
    d486:	d105      	bne.n	d494 <radio_control_task+0x4f0>
    d488:	f24c 5349 	movw	r3, #50505	; 0xc549
    d48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d490:	2200      	movs	r2, #0
    d492:	701a      	strb	r2, [r3, #0]
    d494:	f24c 5349 	movw	r3, #50505	; 0xc549
    d498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49c:	781b      	ldrb	r3, [r3, #0]
    d49e:	461a      	mov	r2, r3
    d4a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a8:	7819      	ldrb	r1, [r3, #0]
    d4aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b2:	5499      	strb	r1, [r3, r2]
    d4b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4bc:	781b      	ldrb	r3, [r3, #0]
    d4be:	3301      	adds	r3, #1
    d4c0:	b2da      	uxtb	r2, r3
    d4c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	701a      	strb	r2, [r3, #0]
    d4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	781b      	ldrb	r3, [r3, #0]
    d4d6:	2bff      	cmp	r3, #255	; 0xff
    d4d8:	d105      	bne.n	d4e6 <radio_control_task+0x542>
    d4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e2:	2200      	movs	r2, #0
    d4e4:	701a      	strb	r2, [r3, #0]
    d4e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ee:	781b      	ldrb	r3, [r3, #0]
    d4f0:	461a      	mov	r2, r3
    d4f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	7819      	ldrb	r1, [r3, #0]
    d4fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d504:	5499      	strb	r1, [r3, r2]
    d506:	f24c 5349 	movw	r3, #50505	; 0xc549
    d50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50e:	781b      	ldrb	r3, [r3, #0]
    d510:	3301      	adds	r3, #1
    d512:	b2da      	uxtb	r2, r3
    d514:	f24c 5349 	movw	r3, #50505	; 0xc549
    d518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51c:	701a      	strb	r2, [r3, #0]
    d51e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d526:	781b      	ldrb	r3, [r3, #0]
    d528:	2bff      	cmp	r3, #255	; 0xff
    d52a:	d105      	bne.n	d538 <radio_control_task+0x594>
    d52c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d534:	2200      	movs	r2, #0
    d536:	701a      	strb	r2, [r3, #0]
    d538:	f242 0339 	movw	r3, #8249	; 0x2039
    d53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d540:	781b      	ldrb	r3, [r3, #0]
    d542:	b2db      	uxtb	r3, r3
    d544:	f003 0310 	and.w	r3, r3, #16
    d548:	2b00      	cmp	r3, #0
    d54a:	d15a      	bne.n	d602 <radio_control_task+0x65e>
    d54c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d554:	781b      	ldrb	r3, [r3, #0]
    d556:	b2db      	uxtb	r3, r3
    d558:	461a      	mov	r2, r3
    d55a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	5c9a      	ldrb	r2, [r3, r2]
    d564:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56c:	701a      	strb	r2, [r3, #0]
    d56e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d576:	2200      	movs	r2, #0
    d578:	701a      	strb	r2, [r3, #0]
    d57a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	b2db      	uxtb	r3, r3
    d586:	3301      	adds	r3, #1
    d588:	b2da      	uxtb	r2, r3
    d58a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d592:	701a      	strb	r2, [r3, #0]
    d594:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59c:	781b      	ldrb	r3, [r3, #0]
    d59e:	b2db      	uxtb	r3, r3
    d5a0:	2bff      	cmp	r3, #255	; 0xff
    d5a2:	d105      	bne.n	d5b0 <radio_control_task+0x60c>
    d5a4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	2200      	movs	r2, #0
    d5ae:	701a      	strb	r2, [r3, #0]
    d5b0:	f242 0338 	movw	r3, #8248	; 0x2038
    d5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b8:	f242 0238 	movw	r2, #8248	; 0x2038
    d5bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d5c0:	7812      	ldrb	r2, [r2, #0]
    d5c2:	b2d2      	uxtb	r2, r2
    d5c4:	f042 0201 	orr.w	r2, r2, #1
    d5c8:	b2d2      	uxtb	r2, r2
    d5ca:	701a      	strb	r2, [r3, #0]
    d5cc:	f242 0339 	movw	r3, #8249	; 0x2039
    d5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d4:	f242 0239 	movw	r2, #8249	; 0x2039
    d5d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d5dc:	7812      	ldrb	r2, [r2, #0]
    d5de:	b2d2      	uxtb	r2, r2
    d5e0:	f042 0210 	orr.w	r2, r2, #16
    d5e4:	b2d2      	uxtb	r2, r2
    d5e6:	701a      	strb	r2, [r3, #0]
    d5e8:	e00b      	b.n	d602 <radio_control_task+0x65e>
    d5ea:	f24c 5348 	movw	r3, #50504	; 0xc548
    d5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f2:	781b      	ldrb	r3, [r3, #0]
    d5f4:	3301      	adds	r3, #1
    d5f6:	b2da      	uxtb	r2, r3
    d5f8:	f24c 5348 	movw	r3, #50504	; 0xc548
    d5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d600:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d602:	f24c 6350 	movw	r3, #50768	; 0xc650
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	885b      	ldrh	r3, [r3, #2]
    d60c:	b21b      	sxth	r3, r3
    d60e:	4618      	mov	r0, r3
    d610:	f00a fec8 	bl	183a4 <__aeabi_i2f>
    d614:	4603      	mov	r3, r0
    d616:	4618      	mov	r0, r3
    d618:	f04f 0100 	mov.w	r1, #0
    d61c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d620:	f00a ffc8 	bl	185b4 <__aeabi_fdiv>
    d624:	4603      	mov	r3, r0
    d626:	4618      	mov	r0, r3
    d628:	f00a fa7c 	bl	17b24 <__aeabi_f2d>
    d62c:	4602      	mov	r2, r0
    d62e:	460b      	mov	r3, r1
    d630:	4610      	mov	r0, r2
    d632:	4619      	mov	r1, r3
    d634:	a346      	add	r3, pc, #280	; (adr r3, d750 <radio_control_task+0x7ac>)
    d636:	e9d3 2300 	ldrd	r2, r3, [r3]
    d63a:	f00a fac7 	bl	17bcc <__aeabi_dmul>
    d63e:	4602      	mov	r2, r0
    d640:	460b      	mov	r3, r1
    d642:	4610      	mov	r0, r2
    d644:	4619      	mov	r1, r3
    d646:	f04f 0200 	mov.w	r2, #0
    d64a:	f04f 0300 	mov.w	r3, #0
    d64e:	f00a f90b 	bl	17868 <__adddf3>
    d652:	4602      	mov	r2, r0
    d654:	460b      	mov	r3, r1
    d656:	4610      	mov	r0, r2
    d658:	4619      	mov	r1, r3
    d65a:	f00a fd99 	bl	18190 <__aeabi_d2f>
    d65e:	4602      	mov	r2, r0
    d660:	f64c 0374 	movw	r3, #51316	; 0xc874
    d664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d668:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d66a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	889b      	ldrh	r3, [r3, #4]
    d674:	b21b      	sxth	r3, r3
    d676:	4618      	mov	r0, r3
    d678:	f00a fe94 	bl	183a4 <__aeabi_i2f>
    d67c:	4603      	mov	r3, r0
    d67e:	4618      	mov	r0, r3
    d680:	f04f 0100 	mov.w	r1, #0
    d684:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d688:	f00a ff94 	bl	185b4 <__aeabi_fdiv>
    d68c:	4603      	mov	r3, r0
    d68e:	4618      	mov	r0, r3
    d690:	f00a fa48 	bl	17b24 <__aeabi_f2d>
    d694:	4602      	mov	r2, r0
    d696:	460b      	mov	r3, r1
    d698:	4610      	mov	r0, r2
    d69a:	4619      	mov	r1, r3
    d69c:	f04f 0200 	mov.w	r2, #0
    d6a0:	f04f 0300 	mov.w	r3, #0
    d6a4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d6a8:	f00a fa90 	bl	17bcc <__aeabi_dmul>
    d6ac:	4602      	mov	r2, r0
    d6ae:	460b      	mov	r3, r1
    d6b0:	4610      	mov	r0, r2
    d6b2:	4619      	mov	r1, r3
    d6b4:	f04f 0200 	mov.w	r2, #0
    d6b8:	f04f 0300 	mov.w	r3, #0
    d6bc:	f00a f8d4 	bl	17868 <__adddf3>
    d6c0:	4602      	mov	r2, r0
    d6c2:	460b      	mov	r3, r1
    d6c4:	4610      	mov	r0, r2
    d6c6:	4619      	mov	r1, r3
    d6c8:	f00a fd62 	bl	18190 <__aeabi_d2f>
    d6cc:	4602      	mov	r2, r0
    d6ce:	f64c 0378 	movw	r3, #51320	; 0xc878
    d6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d6d8:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e0:	881a      	ldrh	r2, [r3, #0]
    d6e2:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ea:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d6ec:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f4:	7c9a      	ldrb	r2, [r3, #18]
    d6f6:	f24c 5334 	movw	r3, #50484	; 0xc534
    d6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fe:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d700:	f24c 6350 	movw	r3, #50768	; 0xc650
    d704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d708:	7d5a      	ldrb	r2, [r3, #21]
    d70a:	f24c 5332 	movw	r3, #50482	; 0xc532
    d70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d712:	701a      	strb	r2, [r3, #0]

    events_update();
    d714:	f7f9 fe26 	bl	7364 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d718:	f7f8 fc26 	bl	5f68 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d71c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d724:	781b      	ldrb	r3, [r3, #0]
    d726:	2b02      	cmp	r3, #2
    d728:	d10e      	bne.n	d748 <radio_control_task+0x7a4>
    d72a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d732:	881b      	ldrh	r3, [r3, #0]
    d734:	b21b      	sxth	r3, r3
    d736:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d73a:	dd05      	ble.n	d748 <radio_control_task+0x7a4>
	launch = TRUE;
    d73c:	f24c 5340 	movw	r3, #50496	; 0xc540
    d740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d744:	2201      	movs	r2, #1
    d746:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d748:	3708      	adds	r7, #8
    d74a:	46bd      	mov	sp, r7
    d74c:	bd80      	pop	{r7, pc}
    d74e:	bf00      	nop
    d750:	33333333 	.word	0x33333333
    d754:	bfe33333 	.word	0xbfe33333

0000d758 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d758:	b580      	push	{r7, lr}
    d75a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d75c:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d764:	2203      	movs	r2, #3
    d766:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d768:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d770:	781b      	ldrb	r3, [r3, #0]
    d772:	2b03      	cmp	r3, #3
    d774:	d102      	bne.n	d77c <navigation_update+0x24>
    nav_home();
    d776:	f007 fa9b 	bl	14cb0 <nav_home>
    d77a:	e001      	b.n	d780 <navigation_update+0x28>
  else
    nav_update();
    d77c:	f007 fabe 	bl	14cfc <nav_update>
}
    d780:	bd80      	pop	{r7, pc}
    d782:	bf00      	nop

0000d784 <send_nav_values>:

void send_nav_values(void){
    d784:	b480      	push	{r7}
    d786:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d788:	f24c 5349 	movw	r3, #50505	; 0xc549
    d78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d790:	781a      	ldrb	r2, [r3, #0]
    d792:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79a:	781b      	ldrb	r3, [r3, #0]
    d79c:	b2db      	uxtb	r3, r3
    d79e:	429a      	cmp	r2, r3
    d7a0:	d313      	bcc.n	d7ca <send_nav_values+0x46>
    d7a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	b2db      	uxtb	r3, r3
    d7ae:	461a      	mov	r2, r3
    d7b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b8:	781b      	ldrb	r3, [r3, #0]
    d7ba:	1ad3      	subs	r3, r2, r3
    d7bc:	33ff      	adds	r3, #255	; 0xff
    d7be:	2b1e      	cmp	r3, #30
    d7c0:	bfd4      	ite	le
    d7c2:	2300      	movle	r3, #0
    d7c4:	2301      	movgt	r3, #1
    d7c6:	b2db      	uxtb	r3, r3
    d7c8:	e011      	b.n	d7ee <send_nav_values+0x6a>
    d7ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d2:	781b      	ldrb	r3, [r3, #0]
    d7d4:	b2db      	uxtb	r3, r3
    d7d6:	461a      	mov	r2, r3
    d7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	1ad3      	subs	r3, r2, r3
    d7e4:	2b1e      	cmp	r3, #30
    d7e6:	bfd4      	ite	le
    d7e8:	2300      	movle	r3, #0
    d7ea:	2301      	movgt	r3, #1
    d7ec:	b2db      	uxtb	r3, r3
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	f001 8094 	beq.w	e91c <send_nav_values+0x1198>
    d7f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7fc:	781b      	ldrb	r3, [r3, #0]
    d7fe:	461a      	mov	r2, r3
    d800:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d808:	2105      	movs	r1, #5
    d80a:	5499      	strb	r1, [r3, r2]
    d80c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d814:	781b      	ldrb	r3, [r3, #0]
    d816:	3301      	adds	r3, #1
    d818:	b2da      	uxtb	r2, r3
    d81a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	701a      	strb	r2, [r3, #0]
    d824:	f24c 5349 	movw	r3, #50505	; 0xc549
    d828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82c:	781b      	ldrb	r3, [r3, #0]
    d82e:	2bff      	cmp	r3, #255	; 0xff
    d830:	d105      	bne.n	d83e <send_nav_values+0xba>
    d832:	f24c 5349 	movw	r3, #50505	; 0xc549
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	2200      	movs	r2, #0
    d83c:	701a      	strb	r2, [r3, #0]
    d83e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d846:	781b      	ldrb	r3, [r3, #0]
    d848:	461a      	mov	r2, r3
    d84a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d852:	210a      	movs	r1, #10
    d854:	5499      	strb	r1, [r3, r2]
    d856:	f24c 5349 	movw	r3, #50505	; 0xc549
    d85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	3301      	adds	r3, #1
    d862:	b2da      	uxtb	r2, r3
    d864:	f24c 5349 	movw	r3, #50505	; 0xc549
    d868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	2bff      	cmp	r3, #255	; 0xff
    d87a:	d105      	bne.n	d888 <send_nav_values+0x104>
    d87c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d884:	2200      	movs	r2, #0
    d886:	701a      	strb	r2, [r3, #0]
    d888:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d890:	220a      	movs	r2, #10
    d892:	701a      	strb	r2, [r3, #0]
    d894:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89c:	220a      	movs	r2, #10
    d89e:	701a      	strb	r2, [r3, #0]
    d8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	461a      	mov	r2, r3
    d8ac:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b4:	7819      	ldrb	r1, [r3, #0]
    d8b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8be:	5499      	strb	r1, [r3, r2]
    d8c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c8:	781a      	ldrb	r2, [r3, #0]
    d8ca:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d2:	781b      	ldrb	r3, [r3, #0]
    d8d4:	4413      	add	r3, r2
    d8d6:	b2da      	uxtb	r2, r3
    d8d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e0:	701a      	strb	r2, [r3, #0]
    d8e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ea:	781a      	ldrb	r2, [r3, #0]
    d8ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	4413      	add	r3, r2
    d8f8:	b2da      	uxtb	r2, r3
    d8fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d902:	701a      	strb	r2, [r3, #0]
    d904:	f24c 5349 	movw	r3, #50505	; 0xc549
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	781b      	ldrb	r3, [r3, #0]
    d90e:	3301      	adds	r3, #1
    d910:	b2da      	uxtb	r2, r3
    d912:	f24c 5349 	movw	r3, #50505	; 0xc549
    d916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91a:	701a      	strb	r2, [r3, #0]
    d91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	2bff      	cmp	r3, #255	; 0xff
    d928:	d105      	bne.n	d936 <send_nav_values+0x1b2>
    d92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d932:	2200      	movs	r2, #0
    d934:	701a      	strb	r2, [r3, #0]
    d936:	f24c 5349 	movw	r3, #50505	; 0xc549
    d93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93e:	781b      	ldrb	r3, [r3, #0]
    d940:	461a      	mov	r2, r3
    d942:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94a:	7819      	ldrb	r1, [r3, #0]
    d94c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d954:	5499      	strb	r1, [r3, r2]
    d956:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95e:	781a      	ldrb	r2, [r3, #0]
    d960:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d968:	781b      	ldrb	r3, [r3, #0]
    d96a:	4413      	add	r3, r2
    d96c:	b2da      	uxtb	r2, r3
    d96e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d976:	701a      	strb	r2, [r3, #0]
    d978:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	781a      	ldrb	r2, [r3, #0]
    d982:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	4413      	add	r3, r2
    d98e:	b2da      	uxtb	r2, r3
    d990:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d998:	701a      	strb	r2, [r3, #0]
    d99a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	3301      	adds	r3, #1
    d9a6:	b2da      	uxtb	r2, r3
    d9a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b0:	701a      	strb	r2, [r3, #0]
    d9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	781b      	ldrb	r3, [r3, #0]
    d9bc:	2bff      	cmp	r3, #255	; 0xff
    d9be:	d105      	bne.n	d9cc <send_nav_values+0x248>
    d9c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c8:	2200      	movs	r2, #0
    d9ca:	701a      	strb	r2, [r3, #0]
    d9cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d4:	781b      	ldrb	r3, [r3, #0]
    d9d6:	461a      	mov	r2, r3
    d9d8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    d9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e0:	7819      	ldrb	r1, [r3, #0]
    d9e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ea:	5499      	strb	r1, [r3, r2]
    d9ec:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    d9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f4:	781a      	ldrb	r2, [r3, #0]
    d9f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fe:	781b      	ldrb	r3, [r3, #0]
    da00:	4413      	add	r3, r2
    da02:	b2da      	uxtb	r2, r3
    da04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	701a      	strb	r2, [r3, #0]
    da0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	781a      	ldrb	r2, [r3, #0]
    da18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	4413      	add	r3, r2
    da24:	b2da      	uxtb	r2, r3
    da26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2e:	701a      	strb	r2, [r3, #0]
    da30:	f24c 5349 	movw	r3, #50505	; 0xc549
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	3301      	adds	r3, #1
    da3c:	b2da      	uxtb	r2, r3
    da3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    da42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da46:	701a      	strb	r2, [r3, #0]
    da48:	f24c 5349 	movw	r3, #50505	; 0xc549
    da4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	2bff      	cmp	r3, #255	; 0xff
    da54:	d105      	bne.n	da62 <send_nav_values+0x2de>
    da56:	f24c 5349 	movw	r3, #50505	; 0xc549
    da5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5e:	2200      	movs	r2, #0
    da60:	701a      	strb	r2, [r3, #0]
    da62:	f24c 5349 	movw	r3, #50505	; 0xc549
    da66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6a:	781b      	ldrb	r3, [r3, #0]
    da6c:	461a      	mov	r2, r3
    da6e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da76:	7859      	ldrb	r1, [r3, #1]
    da78:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	5499      	strb	r1, [r3, r2]
    da82:	4bd2      	ldr	r3, [pc, #840]	; (ddcc <send_nav_values+0x648>)
    da84:	781a      	ldrb	r2, [r3, #0]
    da86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	781b      	ldrb	r3, [r3, #0]
    da90:	4413      	add	r3, r2
    da92:	b2da      	uxtb	r2, r3
    da94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9c:	701a      	strb	r2, [r3, #0]
    da9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa6:	781a      	ldrb	r2, [r3, #0]
    daa8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab0:	781b      	ldrb	r3, [r3, #0]
    dab2:	4413      	add	r3, r2
    dab4:	b2da      	uxtb	r2, r3
    dab6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabe:	701a      	strb	r2, [r3, #0]
    dac0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac8:	781b      	ldrb	r3, [r3, #0]
    daca:	3301      	adds	r3, #1
    dacc:	b2da      	uxtb	r2, r3
    dace:	f24c 5349 	movw	r3, #50505	; 0xc549
    dad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad6:	701a      	strb	r2, [r3, #0]
    dad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	2bff      	cmp	r3, #255	; 0xff
    dae4:	d105      	bne.n	daf2 <send_nav_values+0x36e>
    dae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    daea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daee:	2200      	movs	r2, #0
    daf0:	701a      	strb	r2, [r3, #0]
    daf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    daf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafa:	781b      	ldrb	r3, [r3, #0]
    dafc:	461a      	mov	r2, r3
    dafe:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db06:	7899      	ldrb	r1, [r3, #2]
    db08:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db10:	5499      	strb	r1, [r3, r2]
    db12:	4baf      	ldr	r3, [pc, #700]	; (ddd0 <send_nav_values+0x64c>)
    db14:	781a      	ldrb	r2, [r3, #0]
    db16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	4413      	add	r3, r2
    db22:	b2da      	uxtb	r2, r3
    db24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2c:	701a      	strb	r2, [r3, #0]
    db2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db36:	781a      	ldrb	r2, [r3, #0]
    db38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db40:	781b      	ldrb	r3, [r3, #0]
    db42:	4413      	add	r3, r2
    db44:	b2da      	uxtb	r2, r3
    db46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4e:	701a      	strb	r2, [r3, #0]
    db50:	f24c 5349 	movw	r3, #50505	; 0xc549
    db54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db58:	781b      	ldrb	r3, [r3, #0]
    db5a:	3301      	adds	r3, #1
    db5c:	b2da      	uxtb	r2, r3
    db5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	701a      	strb	r2, [r3, #0]
    db68:	f24c 5349 	movw	r3, #50505	; 0xc549
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	2bff      	cmp	r3, #255	; 0xff
    db74:	d105      	bne.n	db82 <send_nav_values+0x3fe>
    db76:	f24c 5349 	movw	r3, #50505	; 0xc549
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	2200      	movs	r2, #0
    db80:	701a      	strb	r2, [r3, #0]
    db82:	f24c 5349 	movw	r3, #50505	; 0xc549
    db86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8a:	781b      	ldrb	r3, [r3, #0]
    db8c:	461a      	mov	r2, r3
    db8e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db96:	78d9      	ldrb	r1, [r3, #3]
    db98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba0:	5499      	strb	r1, [r3, r2]
    dba2:	4b8c      	ldr	r3, [pc, #560]	; (ddd4 <send_nav_values+0x650>)
    dba4:	781a      	ldrb	r2, [r3, #0]
    dba6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	4413      	add	r3, r2
    dbb2:	b2da      	uxtb	r2, r3
    dbb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbc:	701a      	strb	r2, [r3, #0]
    dbbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	781a      	ldrb	r2, [r3, #0]
    dbc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	4413      	add	r3, r2
    dbd4:	b2da      	uxtb	r2, r3
    dbd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	701a      	strb	r2, [r3, #0]
    dbe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	3301      	adds	r3, #1
    dbec:	b2da      	uxtb	r2, r3
    dbee:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	701a      	strb	r2, [r3, #0]
    dbf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	781b      	ldrb	r3, [r3, #0]
    dc02:	2bff      	cmp	r3, #255	; 0xff
    dc04:	d105      	bne.n	dc12 <send_nav_values+0x48e>
    dc06:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	2200      	movs	r2, #0
    dc10:	701a      	strb	r2, [r3, #0]
    dc12:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	461a      	mov	r2, r3
    dc1e:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	7819      	ldrb	r1, [r3, #0]
    dc28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc30:	5499      	strb	r1, [r3, r2]
    dc32:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3a:	781a      	ldrb	r2, [r3, #0]
    dc3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc44:	781b      	ldrb	r3, [r3, #0]
    dc46:	4413      	add	r3, r2
    dc48:	b2da      	uxtb	r2, r3
    dc4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc52:	701a      	strb	r2, [r3, #0]
    dc54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5c:	781a      	ldrb	r2, [r3, #0]
    dc5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	781b      	ldrb	r3, [r3, #0]
    dc68:	4413      	add	r3, r2
    dc6a:	b2da      	uxtb	r2, r3
    dc6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc74:	701a      	strb	r2, [r3, #0]
    dc76:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	781b      	ldrb	r3, [r3, #0]
    dc80:	3301      	adds	r3, #1
    dc82:	b2da      	uxtb	r2, r3
    dc84:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	2bff      	cmp	r3, #255	; 0xff
    dc9a:	d105      	bne.n	dca8 <send_nav_values+0x524>
    dc9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca4:	2200      	movs	r2, #0
    dca6:	701a      	strb	r2, [r3, #0]
    dca8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb0:	781b      	ldrb	r3, [r3, #0]
    dcb2:	461a      	mov	r2, r3
    dcb4:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dcb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbc:	7859      	ldrb	r1, [r3, #1]
    dcbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc6:	5499      	strb	r1, [r3, r2]
    dcc8:	4b43      	ldr	r3, [pc, #268]	; (ddd8 <send_nav_values+0x654>)
    dcca:	781a      	ldrb	r2, [r3, #0]
    dccc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	781b      	ldrb	r3, [r3, #0]
    dcd6:	4413      	add	r3, r2
    dcd8:	b2da      	uxtb	r2, r3
    dcda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	701a      	strb	r2, [r3, #0]
    dce4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcec:	781a      	ldrb	r2, [r3, #0]
    dcee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	781b      	ldrb	r3, [r3, #0]
    dcf8:	4413      	add	r3, r2
    dcfa:	b2da      	uxtb	r2, r3
    dcfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd04:	701a      	strb	r2, [r3, #0]
    dd06:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	781b      	ldrb	r3, [r3, #0]
    dd10:	3301      	adds	r3, #1
    dd12:	b2da      	uxtb	r2, r3
    dd14:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	781b      	ldrb	r3, [r3, #0]
    dd28:	2bff      	cmp	r3, #255	; 0xff
    dd2a:	d105      	bne.n	dd38 <send_nav_values+0x5b4>
    dd2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd34:	2200      	movs	r2, #0
    dd36:	701a      	strb	r2, [r3, #0]
    dd38:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	461a      	mov	r2, r3
    dd44:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4c:	7899      	ldrb	r1, [r3, #2]
    dd4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd56:	5499      	strb	r1, [r3, r2]
    dd58:	4b20      	ldr	r3, [pc, #128]	; (dddc <send_nav_values+0x658>)
    dd5a:	781a      	ldrb	r2, [r3, #0]
    dd5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	4413      	add	r3, r2
    dd68:	b2da      	uxtb	r2, r3
    dd6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd72:	701a      	strb	r2, [r3, #0]
    dd74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	781a      	ldrb	r2, [r3, #0]
    dd7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd86:	781b      	ldrb	r3, [r3, #0]
    dd88:	4413      	add	r3, r2
    dd8a:	b2da      	uxtb	r2, r3
    dd8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd94:	701a      	strb	r2, [r3, #0]
    dd96:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	3301      	adds	r3, #1
    dda2:	b2da      	uxtb	r2, r3
    dda4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	701a      	strb	r2, [r3, #0]
    ddae:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	2bff      	cmp	r3, #255	; 0xff
    ddba:	d111      	bne.n	dde0 <send_nav_values+0x65c>
    ddbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	2200      	movs	r2, #0
    ddc6:	701a      	strb	r2, [r3, #0]
    ddc8:	e00a      	b.n	dde0 <send_nav_values+0x65c>
    ddca:	bf00      	nop
    ddcc:	2004cafd 	.word	0x2004cafd
    ddd0:	2004cafe 	.word	0x2004cafe
    ddd4:	2004caff 	.word	0x2004caff
    ddd8:	2004cb01 	.word	0x2004cb01
    dddc:	2004cb02 	.word	0x2004cb02
    dde0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde8:	781b      	ldrb	r3, [r3, #0]
    ddea:	461a      	mov	r2, r3
    ddec:	f64c 3300 	movw	r3, #51968	; 0xcb00
    ddf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf4:	78d9      	ldrb	r1, [r3, #3]
    ddf6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ddfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfe:	5499      	strb	r1, [r3, r2]
    de00:	4bd3      	ldr	r3, [pc, #844]	; (e150 <send_nav_values+0x9cc>)
    de02:	781a      	ldrb	r2, [r3, #0]
    de04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	781b      	ldrb	r3, [r3, #0]
    de0e:	4413      	add	r3, r2
    de10:	b2da      	uxtb	r2, r3
    de12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1a:	701a      	strb	r2, [r3, #0]
    de1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	781a      	ldrb	r2, [r3, #0]
    de26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	4413      	add	r3, r2
    de32:	b2da      	uxtb	r2, r3
    de34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	701a      	strb	r2, [r3, #0]
    de3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	3301      	adds	r3, #1
    de4a:	b2da      	uxtb	r2, r3
    de4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	701a      	strb	r2, [r3, #0]
    de56:	f24c 5349 	movw	r3, #50505	; 0xc549
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	2bff      	cmp	r3, #255	; 0xff
    de62:	d105      	bne.n	de70 <send_nav_values+0x6ec>
    de64:	f24c 5349 	movw	r3, #50505	; 0xc549
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	2200      	movs	r2, #0
    de6e:	701a      	strb	r2, [r3, #0]
    de70:	f24c 5349 	movw	r3, #50505	; 0xc549
    de74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de78:	781b      	ldrb	r3, [r3, #0]
    de7a:	461a      	mov	r2, r3
    de7c:	f64c 038c 	movw	r3, #51340	; 0xc88c
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	7819      	ldrb	r1, [r3, #0]
    de86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	5499      	strb	r1, [r3, r2]
    de90:	f64c 038c 	movw	r3, #51340	; 0xc88c
    de94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de98:	781a      	ldrb	r2, [r3, #0]
    de9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	4413      	add	r3, r2
    dea6:	b2da      	uxtb	r2, r3
    dea8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb0:	701a      	strb	r2, [r3, #0]
    deb2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    deb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deba:	781a      	ldrb	r2, [r3, #0]
    debc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	4413      	add	r3, r2
    dec8:	b2da      	uxtb	r2, r3
    deca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	781b      	ldrb	r3, [r3, #0]
    dede:	3301      	adds	r3, #1
    dee0:	b2da      	uxtb	r2, r3
    dee2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deea:	701a      	strb	r2, [r3, #0]
    deec:	f24c 5349 	movw	r3, #50505	; 0xc549
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	781b      	ldrb	r3, [r3, #0]
    def6:	2bff      	cmp	r3, #255	; 0xff
    def8:	d105      	bne.n	df06 <send_nav_values+0x782>
    defa:	f24c 5349 	movw	r3, #50505	; 0xc549
    defe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df02:	2200      	movs	r2, #0
    df04:	701a      	strb	r2, [r3, #0]
    df06:	f24c 5349 	movw	r3, #50505	; 0xc549
    df0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	461a      	mov	r2, r3
    df12:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1a:	7859      	ldrb	r1, [r3, #1]
    df1c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	5499      	strb	r1, [r3, r2]
    df26:	4b8b      	ldr	r3, [pc, #556]	; (e154 <send_nav_values+0x9d0>)
    df28:	781a      	ldrb	r2, [r3, #0]
    df2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df32:	781b      	ldrb	r3, [r3, #0]
    df34:	4413      	add	r3, r2
    df36:	b2da      	uxtb	r2, r3
    df38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df40:	701a      	strb	r2, [r3, #0]
    df42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4a:	781a      	ldrb	r2, [r3, #0]
    df4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	4413      	add	r3, r2
    df58:	b2da      	uxtb	r2, r3
    df5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df62:	701a      	strb	r2, [r3, #0]
    df64:	f24c 5349 	movw	r3, #50505	; 0xc549
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	781b      	ldrb	r3, [r3, #0]
    df6e:	3301      	adds	r3, #1
    df70:	b2da      	uxtb	r2, r3
    df72:	f24c 5349 	movw	r3, #50505	; 0xc549
    df76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7a:	701a      	strb	r2, [r3, #0]
    df7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	2bff      	cmp	r3, #255	; 0xff
    df88:	d105      	bne.n	df96 <send_nav_values+0x812>
    df8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    df8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df92:	2200      	movs	r2, #0
    df94:	701a      	strb	r2, [r3, #0]
    df96:	f24c 5349 	movw	r3, #50505	; 0xc549
    df9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9e:	781b      	ldrb	r3, [r3, #0]
    dfa0:	461a      	mov	r2, r3
    dfa2:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfaa:	7899      	ldrb	r1, [r3, #2]
    dfac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	5499      	strb	r1, [r3, r2]
    dfb6:	4b68      	ldr	r3, [pc, #416]	; (e158 <send_nav_values+0x9d4>)
    dfb8:	781a      	ldrb	r2, [r3, #0]
    dfba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc2:	781b      	ldrb	r3, [r3, #0]
    dfc4:	4413      	add	r3, r2
    dfc6:	b2da      	uxtb	r2, r3
    dfc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd0:	701a      	strb	r2, [r3, #0]
    dfd2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfda:	781a      	ldrb	r2, [r3, #0]
    dfdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe4:	781b      	ldrb	r3, [r3, #0]
    dfe6:	4413      	add	r3, r2
    dfe8:	b2da      	uxtb	r2, r3
    dfea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff2:	701a      	strb	r2, [r3, #0]
    dff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffc:	781b      	ldrb	r3, [r3, #0]
    dffe:	3301      	adds	r3, #1
    e000:	b2da      	uxtb	r2, r3
    e002:	f24c 5349 	movw	r3, #50505	; 0xc549
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e014:	781b      	ldrb	r3, [r3, #0]
    e016:	2bff      	cmp	r3, #255	; 0xff
    e018:	d105      	bne.n	e026 <send_nav_values+0x8a2>
    e01a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	2200      	movs	r2, #0
    e024:	701a      	strb	r2, [r3, #0]
    e026:	f24c 5349 	movw	r3, #50505	; 0xc549
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	781b      	ldrb	r3, [r3, #0]
    e030:	461a      	mov	r2, r3
    e032:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03a:	78d9      	ldrb	r1, [r3, #3]
    e03c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	5499      	strb	r1, [r3, r2]
    e046:	4b45      	ldr	r3, [pc, #276]	; (e15c <send_nav_values+0x9d8>)
    e048:	781a      	ldrb	r2, [r3, #0]
    e04a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	781b      	ldrb	r3, [r3, #0]
    e054:	4413      	add	r3, r2
    e056:	b2da      	uxtb	r2, r3
    e058:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e060:	701a      	strb	r2, [r3, #0]
    e062:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	781a      	ldrb	r2, [r3, #0]
    e06c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e074:	781b      	ldrb	r3, [r3, #0]
    e076:	4413      	add	r3, r2
    e078:	b2da      	uxtb	r2, r3
    e07a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	701a      	strb	r2, [r3, #0]
    e084:	f24c 5349 	movw	r3, #50505	; 0xc549
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	3301      	adds	r3, #1
    e090:	b2da      	uxtb	r2, r3
    e092:	f24c 5349 	movw	r3, #50505	; 0xc549
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	701a      	strb	r2, [r3, #0]
    e09c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	2bff      	cmp	r3, #255	; 0xff
    e0a8:	d105      	bne.n	e0b6 <send_nav_values+0x932>
    e0aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	2200      	movs	r2, #0
    e0b4:	701a      	strb	r2, [r3, #0]
    e0b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	461a      	mov	r2, r3
    e0c2:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	7819      	ldrb	r1, [r3, #0]
    e0cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d4:	5499      	strb	r1, [r3, r2]
    e0d6:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0de:	781a      	ldrb	r2, [r3, #0]
    e0e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e8:	781b      	ldrb	r3, [r3, #0]
    e0ea:	4413      	add	r3, r2
    e0ec:	b2da      	uxtb	r2, r3
    e0ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f6:	701a      	strb	r2, [r3, #0]
    e0f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e100:	781a      	ldrb	r2, [r3, #0]
    e102:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	781b      	ldrb	r3, [r3, #0]
    e10c:	4413      	add	r3, r2
    e10e:	b2da      	uxtb	r2, r3
    e110:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e118:	701a      	strb	r2, [r3, #0]
    e11a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	3301      	adds	r3, #1
    e126:	b2da      	uxtb	r2, r3
    e128:	f24c 5349 	movw	r3, #50505	; 0xc549
    e12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e130:	701a      	strb	r2, [r3, #0]
    e132:	f24c 5349 	movw	r3, #50505	; 0xc549
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	2bff      	cmp	r3, #255	; 0xff
    e13e:	d10f      	bne.n	e160 <send_nav_values+0x9dc>
    e140:	f24c 5349 	movw	r3, #50505	; 0xc549
    e144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e148:	2200      	movs	r2, #0
    e14a:	701a      	strb	r2, [r3, #0]
    e14c:	e008      	b.n	e160 <send_nav_values+0x9dc>
    e14e:	bf00      	nop
    e150:	2004cb03 	.word	0x2004cb03
    e154:	2004c88d 	.word	0x2004c88d
    e158:	2004c88e 	.word	0x2004c88e
    e15c:	2004c88f 	.word	0x2004c88f
    e160:	f24c 5349 	movw	r3, #50505	; 0xc549
    e164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e168:	781b      	ldrb	r3, [r3, #0]
    e16a:	461a      	mov	r2, r3
    e16c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e174:	7859      	ldrb	r1, [r3, #1]
    e176:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17e:	5499      	strb	r1, [r3, r2]
    e180:	4bd1      	ldr	r3, [pc, #836]	; (e4c8 <send_nav_values+0xd44>)
    e182:	781a      	ldrb	r2, [r3, #0]
    e184:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	4413      	add	r3, r2
    e190:	b2da      	uxtb	r2, r3
    e192:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19a:	701a      	strb	r2, [r3, #0]
    e19c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	781a      	ldrb	r2, [r3, #0]
    e1a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	4413      	add	r3, r2
    e1b2:	b2da      	uxtb	r2, r3
    e1b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1bc:	701a      	strb	r2, [r3, #0]
    e1be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	3301      	adds	r3, #1
    e1ca:	b2da      	uxtb	r2, r3
    e1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d4:	701a      	strb	r2, [r3, #0]
    e1d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	2bff      	cmp	r3, #255	; 0xff
    e1e2:	d105      	bne.n	e1f0 <send_nav_values+0xa6c>
    e1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ec:	2200      	movs	r2, #0
    e1ee:	701a      	strb	r2, [r3, #0]
    e1f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f8:	781b      	ldrb	r3, [r3, #0]
    e1fa:	461a      	mov	r2, r3
    e1fc:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e204:	7899      	ldrb	r1, [r3, #2]
    e206:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20e:	5499      	strb	r1, [r3, r2]
    e210:	4bae      	ldr	r3, [pc, #696]	; (e4cc <send_nav_values+0xd48>)
    e212:	781a      	ldrb	r2, [r3, #0]
    e214:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21c:	781b      	ldrb	r3, [r3, #0]
    e21e:	4413      	add	r3, r2
    e220:	b2da      	uxtb	r2, r3
    e222:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22a:	701a      	strb	r2, [r3, #0]
    e22c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e234:	781a      	ldrb	r2, [r3, #0]
    e236:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23e:	781b      	ldrb	r3, [r3, #0]
    e240:	4413      	add	r3, r2
    e242:	b2da      	uxtb	r2, r3
    e244:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24c:	701a      	strb	r2, [r3, #0]
    e24e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e256:	781b      	ldrb	r3, [r3, #0]
    e258:	3301      	adds	r3, #1
    e25a:	b2da      	uxtb	r2, r3
    e25c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e264:	701a      	strb	r2, [r3, #0]
    e266:	f24c 5349 	movw	r3, #50505	; 0xc549
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	2bff      	cmp	r3, #255	; 0xff
    e272:	d105      	bne.n	e280 <send_nav_values+0xafc>
    e274:	f24c 5349 	movw	r3, #50505	; 0xc549
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	2200      	movs	r2, #0
    e27e:	701a      	strb	r2, [r3, #0]
    e280:	f24c 5349 	movw	r3, #50505	; 0xc549
    e284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e288:	781b      	ldrb	r3, [r3, #0]
    e28a:	461a      	mov	r2, r3
    e28c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e294:	78d9      	ldrb	r1, [r3, #3]
    e296:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29e:	5499      	strb	r1, [r3, r2]
    e2a0:	4b8b      	ldr	r3, [pc, #556]	; (e4d0 <send_nav_values+0xd4c>)
    e2a2:	781a      	ldrb	r2, [r3, #0]
    e2a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ac:	781b      	ldrb	r3, [r3, #0]
    e2ae:	4413      	add	r3, r2
    e2b0:	b2da      	uxtb	r2, r3
    e2b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ba:	701a      	strb	r2, [r3, #0]
    e2bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c4:	781a      	ldrb	r2, [r3, #0]
    e2c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	4413      	add	r3, r2
    e2d2:	b2da      	uxtb	r2, r3
    e2d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	701a      	strb	r2, [r3, #0]
    e2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	3301      	adds	r3, #1
    e2ea:	b2da      	uxtb	r2, r3
    e2ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f4:	701a      	strb	r2, [r3, #0]
    e2f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fe:	781b      	ldrb	r3, [r3, #0]
    e300:	2bff      	cmp	r3, #255	; 0xff
    e302:	d105      	bne.n	e310 <send_nav_values+0xb8c>
    e304:	f24c 5349 	movw	r3, #50505	; 0xc549
    e308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30c:	2200      	movs	r2, #0
    e30e:	701a      	strb	r2, [r3, #0]
    e310:	f24c 5349 	movw	r3, #50505	; 0xc549
    e314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	461a      	mov	r2, r3
    e31c:	f240 5358 	movw	r3, #1368	; 0x558
    e320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e324:	7819      	ldrb	r1, [r3, #0]
    e326:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32e:	5499      	strb	r1, [r3, r2]
    e330:	f240 5358 	movw	r3, #1368	; 0x558
    e334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e338:	781a      	ldrb	r2, [r3, #0]
    e33a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e342:	781b      	ldrb	r3, [r3, #0]
    e344:	4413      	add	r3, r2
    e346:	b2da      	uxtb	r2, r3
    e348:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e350:	701a      	strb	r2, [r3, #0]
    e352:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35a:	781a      	ldrb	r2, [r3, #0]
    e35c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	781b      	ldrb	r3, [r3, #0]
    e366:	4413      	add	r3, r2
    e368:	b2da      	uxtb	r2, r3
    e36a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e372:	701a      	strb	r2, [r3, #0]
    e374:	f24c 5349 	movw	r3, #50505	; 0xc549
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	3301      	adds	r3, #1
    e380:	b2da      	uxtb	r2, r3
    e382:	f24c 5349 	movw	r3, #50505	; 0xc549
    e386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38a:	701a      	strb	r2, [r3, #0]
    e38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	781b      	ldrb	r3, [r3, #0]
    e396:	2bff      	cmp	r3, #255	; 0xff
    e398:	d105      	bne.n	e3a6 <send_nav_values+0xc22>
    e39a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a2:	2200      	movs	r2, #0
    e3a4:	701a      	strb	r2, [r3, #0]
    e3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	461a      	mov	r2, r3
    e3b2:	f240 5358 	movw	r3, #1368	; 0x558
    e3b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ba:	7859      	ldrb	r1, [r3, #1]
    e3bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c4:	5499      	strb	r1, [r3, r2]
    e3c6:	4b43      	ldr	r3, [pc, #268]	; (e4d4 <send_nav_values+0xd50>)
    e3c8:	781a      	ldrb	r2, [r3, #0]
    e3ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d2:	781b      	ldrb	r3, [r3, #0]
    e3d4:	4413      	add	r3, r2
    e3d6:	b2da      	uxtb	r2, r3
    e3d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e0:	701a      	strb	r2, [r3, #0]
    e3e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ea:	781a      	ldrb	r2, [r3, #0]
    e3ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	781b      	ldrb	r3, [r3, #0]
    e3f6:	4413      	add	r3, r2
    e3f8:	b2da      	uxtb	r2, r3
    e3fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e402:	701a      	strb	r2, [r3, #0]
    e404:	f24c 5349 	movw	r3, #50505	; 0xc549
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	3301      	adds	r3, #1
    e410:	b2da      	uxtb	r2, r3
    e412:	f24c 5349 	movw	r3, #50505	; 0xc549
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	701a      	strb	r2, [r3, #0]
    e41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	781b      	ldrb	r3, [r3, #0]
    e426:	2bff      	cmp	r3, #255	; 0xff
    e428:	d105      	bne.n	e436 <send_nav_values+0xcb2>
    e42a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e432:	2200      	movs	r2, #0
    e434:	701a      	strb	r2, [r3, #0]
    e436:	f24c 5349 	movw	r3, #50505	; 0xc549
    e43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43e:	781b      	ldrb	r3, [r3, #0]
    e440:	461a      	mov	r2, r3
    e442:	f240 5358 	movw	r3, #1368	; 0x558
    e446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e44a:	7899      	ldrb	r1, [r3, #2]
    e44c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e454:	5499      	strb	r1, [r3, r2]
    e456:	4b20      	ldr	r3, [pc, #128]	; (e4d8 <send_nav_values+0xd54>)
    e458:	781a      	ldrb	r2, [r3, #0]
    e45a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	4413      	add	r3, r2
    e466:	b2da      	uxtb	r2, r3
    e468:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	701a      	strb	r2, [r3, #0]
    e472:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	781a      	ldrb	r2, [r3, #0]
    e47c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	4413      	add	r3, r2
    e488:	b2da      	uxtb	r2, r3
    e48a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	701a      	strb	r2, [r3, #0]
    e494:	f24c 5349 	movw	r3, #50505	; 0xc549
    e498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	3301      	adds	r3, #1
    e4a0:	b2da      	uxtb	r2, r3
    e4a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	701a      	strb	r2, [r3, #0]
    e4ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	2bff      	cmp	r3, #255	; 0xff
    e4b8:	d110      	bne.n	e4dc <send_nav_values+0xd58>
    e4ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	2200      	movs	r2, #0
    e4c4:	701a      	strb	r2, [r3, #0]
    e4c6:	e009      	b.n	e4dc <send_nav_values+0xd58>
    e4c8:	2004c8d5 	.word	0x2004c8d5
    e4cc:	2004c8d6 	.word	0x2004c8d6
    e4d0:	2004c8d7 	.word	0x2004c8d7
    e4d4:	20000559 	.word	0x20000559
    e4d8:	2000055a 	.word	0x2000055a
    e4dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	461a      	mov	r2, r3
    e4e8:	f240 5358 	movw	r3, #1368	; 0x558
    e4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f0:	78d9      	ldrb	r1, [r3, #3]
    e4f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fa:	5499      	strb	r1, [r3, r2]
    e4fc:	4bc2      	ldr	r3, [pc, #776]	; (e808 <send_nav_values+0x1084>)
    e4fe:	781a      	ldrb	r2, [r3, #0]
    e500:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e508:	781b      	ldrb	r3, [r3, #0]
    e50a:	4413      	add	r3, r2
    e50c:	b2da      	uxtb	r2, r3
    e50e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e516:	701a      	strb	r2, [r3, #0]
    e518:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e520:	781a      	ldrb	r2, [r3, #0]
    e522:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	4413      	add	r3, r2
    e52e:	b2da      	uxtb	r2, r3
    e530:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e538:	701a      	strb	r2, [r3, #0]
    e53a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e542:	781b      	ldrb	r3, [r3, #0]
    e544:	3301      	adds	r3, #1
    e546:	b2da      	uxtb	r2, r3
    e548:	f24c 5349 	movw	r3, #50505	; 0xc549
    e54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e550:	701a      	strb	r2, [r3, #0]
    e552:	f24c 5349 	movw	r3, #50505	; 0xc549
    e556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55a:	781b      	ldrb	r3, [r3, #0]
    e55c:	2bff      	cmp	r3, #255	; 0xff
    e55e:	d105      	bne.n	e56c <send_nav_values+0xde8>
    e560:	f24c 5349 	movw	r3, #50505	; 0xc549
    e564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e568:	2200      	movs	r2, #0
    e56a:	701a      	strb	r2, [r3, #0]
    e56c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e574:	781b      	ldrb	r3, [r3, #0]
    e576:	461a      	mov	r2, r3
    e578:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e580:	7819      	ldrb	r1, [r3, #0]
    e582:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58a:	5499      	strb	r1, [r3, r2]
    e58c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e594:	781a      	ldrb	r2, [r3, #0]
    e596:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59e:	781b      	ldrb	r3, [r3, #0]
    e5a0:	4413      	add	r3, r2
    e5a2:	b2da      	uxtb	r2, r3
    e5a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ac:	701a      	strb	r2, [r3, #0]
    e5ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b6:	781a      	ldrb	r2, [r3, #0]
    e5b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	4413      	add	r3, r2
    e5c4:	b2da      	uxtb	r2, r3
    e5c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ce:	701a      	strb	r2, [r3, #0]
    e5d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	781b      	ldrb	r3, [r3, #0]
    e5da:	3301      	adds	r3, #1
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e6:	701a      	strb	r2, [r3, #0]
    e5e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	2bff      	cmp	r3, #255	; 0xff
    e5f4:	d105      	bne.n	e602 <send_nav_values+0xe7e>
    e5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fe:	2200      	movs	r2, #0
    e600:	701a      	strb	r2, [r3, #0]
    e602:	f24c 5349 	movw	r3, #50505	; 0xc549
    e606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60a:	781b      	ldrb	r3, [r3, #0]
    e60c:	461a      	mov	r2, r3
    e60e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e616:	7859      	ldrb	r1, [r3, #1]
    e618:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e620:	5499      	strb	r1, [r3, r2]
    e622:	4b7a      	ldr	r3, [pc, #488]	; (e80c <send_nav_values+0x1088>)
    e624:	781a      	ldrb	r2, [r3, #0]
    e626:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	4413      	add	r3, r2
    e632:	b2da      	uxtb	r2, r3
    e634:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63c:	701a      	strb	r2, [r3, #0]
    e63e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e646:	781a      	ldrb	r2, [r3, #0]
    e648:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e650:	781b      	ldrb	r3, [r3, #0]
    e652:	4413      	add	r3, r2
    e654:	b2da      	uxtb	r2, r3
    e656:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65e:	701a      	strb	r2, [r3, #0]
    e660:	f24c 5349 	movw	r3, #50505	; 0xc549
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	3301      	adds	r3, #1
    e66c:	b2da      	uxtb	r2, r3
    e66e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e676:	701a      	strb	r2, [r3, #0]
    e678:	f24c 5349 	movw	r3, #50505	; 0xc549
    e67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e680:	781b      	ldrb	r3, [r3, #0]
    e682:	2bff      	cmp	r3, #255	; 0xff
    e684:	d105      	bne.n	e692 <send_nav_values+0xf0e>
    e686:	f24c 5349 	movw	r3, #50505	; 0xc549
    e68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68e:	2200      	movs	r2, #0
    e690:	701a      	strb	r2, [r3, #0]
    e692:	f24c 5349 	movw	r3, #50505	; 0xc549
    e696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	461a      	mov	r2, r3
    e69e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a6:	7899      	ldrb	r1, [r3, #2]
    e6a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b0:	5499      	strb	r1, [r3, r2]
    e6b2:	4b57      	ldr	r3, [pc, #348]	; (e810 <send_nav_values+0x108c>)
    e6b4:	781a      	ldrb	r2, [r3, #0]
    e6b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	4413      	add	r3, r2
    e6c2:	b2da      	uxtb	r2, r3
    e6c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6cc:	701a      	strb	r2, [r3, #0]
    e6ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	781a      	ldrb	r2, [r3, #0]
    e6d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	4413      	add	r3, r2
    e6e4:	b2da      	uxtb	r2, r3
    e6e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ee:	701a      	strb	r2, [r3, #0]
    e6f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	3301      	adds	r3, #1
    e6fc:	b2da      	uxtb	r2, r3
    e6fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	701a      	strb	r2, [r3, #0]
    e708:	f24c 5349 	movw	r3, #50505	; 0xc549
    e70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e710:	781b      	ldrb	r3, [r3, #0]
    e712:	2bff      	cmp	r3, #255	; 0xff
    e714:	d105      	bne.n	e722 <send_nav_values+0xf9e>
    e716:	f24c 5349 	movw	r3, #50505	; 0xc549
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	2200      	movs	r2, #0
    e720:	701a      	strb	r2, [r3, #0]
    e722:	f24c 5349 	movw	r3, #50505	; 0xc549
    e726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72a:	781b      	ldrb	r3, [r3, #0]
    e72c:	461a      	mov	r2, r3
    e72e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e736:	78d9      	ldrb	r1, [r3, #3]
    e738:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	5499      	strb	r1, [r3, r2]
    e742:	4b34      	ldr	r3, [pc, #208]	; (e814 <send_nav_values+0x1090>)
    e744:	781a      	ldrb	r2, [r3, #0]
    e746:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74e:	781b      	ldrb	r3, [r3, #0]
    e750:	4413      	add	r3, r2
    e752:	b2da      	uxtb	r2, r3
    e754:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75c:	701a      	strb	r2, [r3, #0]
    e75e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	781a      	ldrb	r2, [r3, #0]
    e768:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	4413      	add	r3, r2
    e774:	b2da      	uxtb	r2, r3
    e776:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	701a      	strb	r2, [r3, #0]
    e780:	f24c 5349 	movw	r3, #50505	; 0xc549
    e784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	3301      	adds	r3, #1
    e78c:	b2da      	uxtb	r2, r3
    e78e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	701a      	strb	r2, [r3, #0]
    e798:	f24c 5349 	movw	r3, #50505	; 0xc549
    e79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	2bff      	cmp	r3, #255	; 0xff
    e7a4:	d105      	bne.n	e7b2 <send_nav_values+0x102e>
    e7a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	2200      	movs	r2, #0
    e7b0:	701a      	strb	r2, [r3, #0]
    e7b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ba:	781b      	ldrb	r3, [r3, #0]
    e7bc:	461a      	mov	r2, r3
    e7be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	7819      	ldrb	r1, [r3, #0]
    e7c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d0:	5499      	strb	r1, [r3, r2]
    e7d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	3301      	adds	r3, #1
    e7de:	b2da      	uxtb	r2, r3
    e7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e8:	701a      	strb	r2, [r3, #0]
    e7ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	2bff      	cmp	r3, #255	; 0xff
    e7f6:	d10f      	bne.n	e818 <send_nav_values+0x1094>
    e7f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e800:	2200      	movs	r2, #0
    e802:	701a      	strb	r2, [r3, #0]
    e804:	e008      	b.n	e818 <send_nav_values+0x1094>
    e806:	bf00      	nop
    e808:	2000055b 	.word	0x2000055b
    e80c:	2004c8d9 	.word	0x2004c8d9
    e810:	2004c8da 	.word	0x2004c8da
    e814:	2004c8db 	.word	0x2004c8db
    e818:	f24c 5349 	movw	r3, #50505	; 0xc549
    e81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e820:	781b      	ldrb	r3, [r3, #0]
    e822:	461a      	mov	r2, r3
    e824:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82c:	7819      	ldrb	r1, [r3, #0]
    e82e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e836:	5499      	strb	r1, [r3, r2]
    e838:	f24c 5349 	movw	r3, #50505	; 0xc549
    e83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	3301      	adds	r3, #1
    e844:	b2da      	uxtb	r2, r3
    e846:	f24c 5349 	movw	r3, #50505	; 0xc549
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	701a      	strb	r2, [r3, #0]
    e850:	f24c 5349 	movw	r3, #50505	; 0xc549
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	2bff      	cmp	r3, #255	; 0xff
    e85c:	d105      	bne.n	e86a <send_nav_values+0x10e6>
    e85e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	2200      	movs	r2, #0
    e868:	701a      	strb	r2, [r3, #0]
    e86a:	f242 0339 	movw	r3, #8249	; 0x2039
    e86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e872:	781b      	ldrb	r3, [r3, #0]
    e874:	b2db      	uxtb	r3, r3
    e876:	f003 0310 	and.w	r3, r3, #16
    e87a:	2b00      	cmp	r3, #0
    e87c:	d15a      	bne.n	e934 <send_nav_values+0x11b0>
    e87e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e886:	781b      	ldrb	r3, [r3, #0]
    e888:	b2db      	uxtb	r3, r3
    e88a:	461a      	mov	r2, r3
    e88c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e894:	5c9a      	ldrb	r2, [r3, r2]
    e896:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	701a      	strb	r2, [r3, #0]
    e8a0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a8:	2200      	movs	r2, #0
    e8aa:	701a      	strb	r2, [r3, #0]
    e8ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b4:	781b      	ldrb	r3, [r3, #0]
    e8b6:	b2db      	uxtb	r3, r3
    e8b8:	3301      	adds	r3, #1
    e8ba:	b2da      	uxtb	r2, r3
    e8bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c4:	701a      	strb	r2, [r3, #0]
    e8c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ce:	781b      	ldrb	r3, [r3, #0]
    e8d0:	b2db      	uxtb	r3, r3
    e8d2:	2bff      	cmp	r3, #255	; 0xff
    e8d4:	d105      	bne.n	e8e2 <send_nav_values+0x115e>
    e8d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	2200      	movs	r2, #0
    e8e0:	701a      	strb	r2, [r3, #0]
    e8e2:	f242 0338 	movw	r3, #8248	; 0x2038
    e8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ea:	f242 0238 	movw	r2, #8248	; 0x2038
    e8ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e8f2:	7812      	ldrb	r2, [r2, #0]
    e8f4:	b2d2      	uxtb	r2, r2
    e8f6:	f042 0201 	orr.w	r2, r2, #1
    e8fa:	b2d2      	uxtb	r2, r2
    e8fc:	701a      	strb	r2, [r3, #0]
    e8fe:	f242 0339 	movw	r3, #8249	; 0x2039
    e902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e906:	f242 0239 	movw	r2, #8249	; 0x2039
    e90a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e90e:	7812      	ldrb	r2, [r2, #0]
    e910:	b2d2      	uxtb	r2, r2
    e912:	f042 0210 	orr.w	r2, r2, #16
    e916:	b2d2      	uxtb	r2, r2
    e918:	701a      	strb	r2, [r3, #0]
    e91a:	e00b      	b.n	e934 <send_nav_values+0x11b0>
    e91c:	f24c 5348 	movw	r3, #50504	; 0xc548
    e920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e924:	781b      	ldrb	r3, [r3, #0]
    e926:	3301      	adds	r3, #1
    e928:	b2da      	uxtb	r2, r3
    e92a:	f24c 5348 	movw	r3, #50504	; 0xc548
    e92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e932:	701a      	strb	r2, [r3, #0]
}
    e934:	46bd      	mov	sp, r7
    e936:	f85d 7b04 	ldr.w	r7, [sp], #4
    e93a:	4770      	bx	lr

0000e93c <course_run>:

void course_run(void){
    e93c:	b580      	push	{r7, lr}
    e93e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e940:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e948:	781b      	ldrb	r3, [r3, #0]
    e94a:	2b02      	cmp	r3, #2
    e94c:	d006      	beq.n	e95c <course_run+0x20>
    e94e:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e956:	781b      	ldrb	r3, [r3, #0]
    e958:	2b03      	cmp	r3, #3
    e95a:	d112      	bne.n	e982 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e95c:	f24c 532e 	movw	r3, #50478	; 0xc52e
    e960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e964:	781b      	ldrb	r3, [r3, #0]
    e966:	2b02      	cmp	r3, #2
    e968:	d901      	bls.n	e96e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e96a:	f003 faf1 	bl	11f50 <course_pid_run>
    desired_roll = nav_desired_roll;
    e96e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    e972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e976:	681a      	ldr	r2, [r3, #0]
    e978:	f64c 0374 	movw	r3, #51316	; 0xc874
    e97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e980:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e982:	bd80      	pop	{r7, pc}

0000e984 <altitude_control_task>:

void altitude_control_task(void)
{
    e984:	b580      	push	{r7, lr}
    e986:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e988:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	2b02      	cmp	r3, #2
    e994:	d006      	beq.n	e9a4 <altitude_control_task+0x20>
    e996:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	781b      	ldrb	r3, [r3, #0]
    e9a0:	2b03      	cmp	r3, #3
    e9a2:	d108      	bne.n	e9b6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e9a4:	f24c 532d 	movw	r3, #50477	; 0xc52d
    e9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ac:	781b      	ldrb	r3, [r3, #0]
    e9ae:	2b03      	cmp	r3, #3
    e9b0:	d101      	bne.n	e9b6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e9b2:	f003 fd55 	bl	12460 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e9b6:	bd80      	pop	{r7, pc}

0000e9b8 <climb_control_task>:
void climb_control_task(void)
{
    e9b8:	b580      	push	{r7, lr}
    e9ba:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9bc:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c4:	781b      	ldrb	r3, [r3, #0]
    e9c6:	2b02      	cmp	r3, #2
    e9c8:	d006      	beq.n	e9d8 <climb_control_task+0x20>
    e9ca:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d2:	781b      	ldrb	r3, [r3, #0]
    e9d4:	2b03      	cmp	r3, #3
    e9d6:	d135      	bne.n	ea44 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e9d8:	f24c 532d 	movw	r3, #50477	; 0xc52d
    e9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	2b01      	cmp	r3, #1
    e9e4:	d901      	bls.n	e9ea <climb_control_task+0x32>
        	climb_pid_run();
    e9e6:	f003 fb6b 	bl	120c0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e9ea:	f24c 532d 	movw	r3, #50477	; 0xc52d
    e9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	2b01      	cmp	r3, #1
    e9f6:	d10a      	bne.n	ea0e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e9f8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    e9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea00:	881b      	ldrh	r3, [r3, #0]
    ea02:	b29a      	uxth	r2, r3
    ea04:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea0c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea0e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ea12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea16:	781b      	ldrb	r3, [r3, #0]
    ea18:	2b00      	cmp	r3, #0
    ea1a:	d10d      	bne.n	ea38 <climb_control_task+0x80>
    ea1c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ea20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea24:	881b      	ldrh	r3, [r3, #0]
    ea26:	2b00      	cmp	r3, #0
    ea28:	d10c      	bne.n	ea44 <climb_control_task+0x8c>
    ea2a:	f24c 5340 	movw	r3, #50496	; 0xc540
    ea2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea32:	781b      	ldrb	r3, [r3, #0]
    ea34:	2b00      	cmp	r3, #0
    ea36:	d105      	bne.n	ea44 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ea38:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea40:	2200      	movs	r2, #0
    ea42:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ea44:	bd80      	pop	{r7, pc}
    ea46:	bf00      	nop

0000ea48 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ea48:	b580      	push	{r7, lr}
    ea4a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ea4c:	f003 f926 	bl	11c9c <ir_update>
    estimator_update_state_infrared();
    ea50:	f006 fbac 	bl	151ac <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ea54:	f003 f990 	bl	11d78 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ea58:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea60:	881a      	ldrh	r2, [r3, #0]
    ea62:	f24c 6368 	movw	r3, #50792	; 0xc668
    ea66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea6a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ea6c:	f64c 037e 	movw	r3, #51326	; 0xc87e
    ea70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea74:	881a      	ldrh	r2, [r3, #0]
    ea76:	f24c 6368 	movw	r3, #50792	; 0xc668
    ea7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ea80:	f64c 0380 	movw	r3, #51328	; 0xc880
    ea84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea88:	881a      	ldrh	r2, [r3, #0]
    ea8a:	f24c 6368 	movw	r3, #50792	; 0xc668
    ea8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea92:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ea94:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ea98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9c:	681b      	ldr	r3, [r3, #0]
    ea9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eaa2:	4618      	mov	r0, r3
    eaa4:	f009 f83e 	bl	17b24 <__aeabi_f2d>
    eaa8:	4602      	mov	r2, r0
    eaaa:	460b      	mov	r3, r1
    eaac:	4610      	mov	r0, r2
    eaae:	4619      	mov	r1, r3
    eab0:	f04f 0200 	mov.w	r2, #0
    eab4:	f04f 0300 	mov.w	r3, #0
    eab8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eabc:	f009 f886 	bl	17bcc <__aeabi_dmul>
    eac0:	4602      	mov	r2, r0
    eac2:	460b      	mov	r3, r1
    eac4:	4610      	mov	r0, r2
    eac6:	4619      	mov	r1, r3
    eac8:	f04f 0200 	mov.w	r2, #0
    eacc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ead0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ead4:	f009 faec 	bl	180b0 <__aeabi_dcmplt>
    ead8:	4603      	mov	r3, r0
    eada:	2b00      	cmp	r3, #0
    eadc:	d002      	beq.n	eae4 <stabilisation_task+0x9c>
    eade:	f64d 2280 	movw	r2, #55936	; 0xda80
    eae2:	e046      	b.n	eb72 <stabilisation_task+0x12a>
    eae4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaec:	681b      	ldr	r3, [r3, #0]
    eaee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eaf2:	4618      	mov	r0, r3
    eaf4:	f009 f816 	bl	17b24 <__aeabi_f2d>
    eaf8:	4602      	mov	r2, r0
    eafa:	460b      	mov	r3, r1
    eafc:	4610      	mov	r0, r2
    eafe:	4619      	mov	r1, r3
    eb00:	f04f 0200 	mov.w	r2, #0
    eb04:	f04f 0300 	mov.w	r3, #0
    eb08:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb0c:	f009 f85e 	bl	17bcc <__aeabi_dmul>
    eb10:	4602      	mov	r2, r0
    eb12:	460b      	mov	r3, r1
    eb14:	4610      	mov	r0, r2
    eb16:	4619      	mov	r1, r3
    eb18:	f04f 0200 	mov.w	r2, #0
    eb1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb20:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    eb24:	f009 fae2 	bl	180ec <__aeabi_dcmpgt>
    eb28:	4603      	mov	r3, r0
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d002      	beq.n	eb34 <stabilisation_task+0xec>
    eb2e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    eb32:	e01d      	b.n	eb70 <stabilisation_task+0x128>
    eb34:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb42:	4618      	mov	r0, r3
    eb44:	f008 ffee 	bl	17b24 <__aeabi_f2d>
    eb48:	4602      	mov	r2, r0
    eb4a:	460b      	mov	r3, r1
    eb4c:	4610      	mov	r0, r2
    eb4e:	4619      	mov	r1, r3
    eb50:	f04f 0200 	mov.w	r2, #0
    eb54:	f04f 0300 	mov.w	r3, #0
    eb58:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb5c:	f009 f836 	bl	17bcc <__aeabi_dmul>
    eb60:	4602      	mov	r2, r0
    eb62:	460b      	mov	r3, r1
    eb64:	4610      	mov	r0, r2
    eb66:	4619      	mov	r1, r3
    eb68:	f009 faca 	bl	18100 <__aeabi_d2iz>
    eb6c:	4603      	mov	r3, r0
    eb6e:	b29b      	uxth	r3, r3
    eb70:	b29a      	uxth	r2, r3
    eb72:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    eb7c:	bd80      	pop	{r7, pc}
    eb7e:	bf00      	nop

0000eb80 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    eb80:	b580      	push	{r7, lr}
    eb82:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    eb84:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	2200      	movs	r2, #0
    eb8e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eb90:	f24c 63de 	movw	r3, #50910	; 0xc6de
    eb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb98:	781b      	ldrb	r3, [r3, #0]
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	f001 81af 	beq.w	fefe <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    eba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba8:	781a      	ldrb	r2, [r3, #0]
    ebaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb2:	781b      	ldrb	r3, [r3, #0]
    ebb4:	b2db      	uxtb	r3, r3
    ebb6:	429a      	cmp	r2, r3
    ebb8:	d313      	bcc.n	ebe2 <send_gps_pos+0x62>
    ebba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc2:	781b      	ldrb	r3, [r3, #0]
    ebc4:	b2db      	uxtb	r3, r3
    ebc6:	461a      	mov	r2, r3
    ebc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ebcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd0:	781b      	ldrb	r3, [r3, #0]
    ebd2:	1ad3      	subs	r3, r2, r3
    ebd4:	33ff      	adds	r3, #255	; 0xff
    ebd6:	2b21      	cmp	r3, #33	; 0x21
    ebd8:	bfd4      	ite	le
    ebda:	2300      	movle	r3, #0
    ebdc:	2301      	movgt	r3, #1
    ebde:	b2db      	uxtb	r3, r3
    ebe0:	e011      	b.n	ec06 <send_gps_pos+0x86>
    ebe2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebea:	781b      	ldrb	r3, [r3, #0]
    ebec:	b2db      	uxtb	r3, r3
    ebee:	461a      	mov	r2, r3
    ebf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ebf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	1ad3      	subs	r3, r2, r3
    ebfc:	2b21      	cmp	r3, #33	; 0x21
    ebfe:	bfd4      	ite	le
    ec00:	2300      	movle	r3, #0
    ec02:	2301      	movgt	r3, #1
    ec04:	b2db      	uxtb	r3, r3
    ec06:	2b00      	cmp	r3, #0
    ec08:	f001 816b 	beq.w	fee2 <send_gps_pos+0x1362>
    ec0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec14:	781b      	ldrb	r3, [r3, #0]
    ec16:	461a      	mov	r2, r3
    ec18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ec1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec20:	2105      	movs	r1, #5
    ec22:	5499      	strb	r1, [r3, r2]
    ec24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	3301      	adds	r3, #1
    ec30:	b2da      	uxtb	r2, r3
    ec32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3a:	701a      	strb	r2, [r3, #0]
    ec3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	2bff      	cmp	r3, #255	; 0xff
    ec48:	d105      	bne.n	ec56 <send_gps_pos+0xd6>
    ec4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	2200      	movs	r2, #0
    ec54:	701a      	strb	r2, [r3, #0]
    ec56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5e:	781b      	ldrb	r3, [r3, #0]
    ec60:	461a      	mov	r2, r3
    ec62:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ec66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6a:	2108      	movs	r1, #8
    ec6c:	5499      	strb	r1, [r3, r2]
    ec6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec76:	781b      	ldrb	r3, [r3, #0]
    ec78:	3301      	adds	r3, #1
    ec7a:	b2da      	uxtb	r2, r3
    ec7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec84:	701a      	strb	r2, [r3, #0]
    ec86:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8e:	781b      	ldrb	r3, [r3, #0]
    ec90:	2bff      	cmp	r3, #255	; 0xff
    ec92:	d105      	bne.n	eca0 <send_gps_pos+0x120>
    ec94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9c:	2200      	movs	r2, #0
    ec9e:	701a      	strb	r2, [r3, #0]
    eca0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca8:	2208      	movs	r2, #8
    ecaa:	701a      	strb	r2, [r3, #0]
    ecac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ecb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb4:	2208      	movs	r2, #8
    ecb6:	701a      	strb	r2, [r3, #0]
    ecb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	781b      	ldrb	r3, [r3, #0]
    ecc2:	461a      	mov	r2, r3
    ecc4:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ecc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eccc:	7819      	ldrb	r1, [r3, #0]
    ecce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ecd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd6:	5499      	strb	r1, [r3, r2]
    ecd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ecdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece0:	781a      	ldrb	r2, [r3, #0]
    ece2:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ece6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecea:	781b      	ldrb	r3, [r3, #0]
    ecec:	4413      	add	r3, r2
    ecee:	b2da      	uxtb	r2, r3
    ecf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ecf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf8:	701a      	strb	r2, [r3, #0]
    ecfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	781a      	ldrb	r2, [r3, #0]
    ed04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0c:	781b      	ldrb	r3, [r3, #0]
    ed0e:	4413      	add	r3, r2
    ed10:	b2da      	uxtb	r2, r3
    ed12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	701a      	strb	r2, [r3, #0]
    ed1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	3301      	adds	r3, #1
    ed28:	b2da      	uxtb	r2, r3
    ed2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed32:	701a      	strb	r2, [r3, #0]
    ed34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3c:	781b      	ldrb	r3, [r3, #0]
    ed3e:	2bff      	cmp	r3, #255	; 0xff
    ed40:	d105      	bne.n	ed4e <send_gps_pos+0x1ce>
    ed42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed4a:	2200      	movs	r2, #0
    ed4c:	701a      	strb	r2, [r3, #0]
    ed4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed56:	781b      	ldrb	r3, [r3, #0]
    ed58:	461a      	mov	r2, r3
    ed5a:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ed5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed62:	7819      	ldrb	r1, [r3, #0]
    ed64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6c:	5499      	strb	r1, [r3, r2]
    ed6e:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ed72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed76:	781a      	ldrb	r2, [r3, #0]
    ed78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed80:	781b      	ldrb	r3, [r3, #0]
    ed82:	4413      	add	r3, r2
    ed84:	b2da      	uxtb	r2, r3
    ed86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	701a      	strb	r2, [r3, #0]
    ed90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	781a      	ldrb	r2, [r3, #0]
    ed9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	781b      	ldrb	r3, [r3, #0]
    eda4:	4413      	add	r3, r2
    eda6:	b2da      	uxtb	r2, r3
    eda8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	701a      	strb	r2, [r3, #0]
    edb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	3301      	adds	r3, #1
    edbe:	b2da      	uxtb	r2, r3
    edc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    edc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc8:	701a      	strb	r2, [r3, #0]
    edca:	f24c 5349 	movw	r3, #50505	; 0xc549
    edce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	2bff      	cmp	r3, #255	; 0xff
    edd6:	d105      	bne.n	ede4 <send_gps_pos+0x264>
    edd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede0:	2200      	movs	r2, #0
    ede2:	701a      	strb	r2, [r3, #0]
    ede4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ede8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edec:	781b      	ldrb	r3, [r3, #0]
    edee:	461a      	mov	r2, r3
    edf0:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    edf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf8:	7859      	ldrb	r1, [r3, #1]
    edfa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	5499      	strb	r1, [r3, r2]
    ee04:	4bd1      	ldr	r3, [pc, #836]	; (f14c <send_gps_pos+0x5cc>)
    ee06:	781a      	ldrb	r2, [r3, #0]
    ee08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	781b      	ldrb	r3, [r3, #0]
    ee12:	4413      	add	r3, r2
    ee14:	b2da      	uxtb	r2, r3
    ee16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1e:	701a      	strb	r2, [r3, #0]
    ee20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee28:	781a      	ldrb	r2, [r3, #0]
    ee2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	781b      	ldrb	r3, [r3, #0]
    ee34:	4413      	add	r3, r2
    ee36:	b2da      	uxtb	r2, r3
    ee38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee40:	701a      	strb	r2, [r3, #0]
    ee42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	781b      	ldrb	r3, [r3, #0]
    ee4c:	3301      	adds	r3, #1
    ee4e:	b2da      	uxtb	r2, r3
    ee50:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee58:	701a      	strb	r2, [r3, #0]
    ee5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	2bff      	cmp	r3, #255	; 0xff
    ee66:	d105      	bne.n	ee74 <send_gps_pos+0x2f4>
    ee68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee70:	2200      	movs	r2, #0
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	461a      	mov	r2, r3
    ee80:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee88:	7899      	ldrb	r1, [r3, #2]
    ee8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee92:	5499      	strb	r1, [r3, r2]
    ee94:	4bae      	ldr	r3, [pc, #696]	; (f150 <send_gps_pos+0x5d0>)
    ee96:	781a      	ldrb	r2, [r3, #0]
    ee98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	4413      	add	r3, r2
    eea4:	b2da      	uxtb	r2, r3
    eea6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeae:	701a      	strb	r2, [r3, #0]
    eeb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb8:	781a      	ldrb	r2, [r3, #0]
    eeba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	4413      	add	r3, r2
    eec6:	b2da      	uxtb	r2, r3
    eec8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	701a      	strb	r2, [r3, #0]
    eed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeda:	781b      	ldrb	r3, [r3, #0]
    eedc:	3301      	adds	r3, #1
    eede:	b2da      	uxtb	r2, r3
    eee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	701a      	strb	r2, [r3, #0]
    eeea:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	2bff      	cmp	r3, #255	; 0xff
    eef6:	d105      	bne.n	ef04 <send_gps_pos+0x384>
    eef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef00:	2200      	movs	r2, #0
    ef02:	701a      	strb	r2, [r3, #0]
    ef04:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0c:	781b      	ldrb	r3, [r3, #0]
    ef0e:	461a      	mov	r2, r3
    ef10:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef18:	78d9      	ldrb	r1, [r3, #3]
    ef1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef22:	5499      	strb	r1, [r3, r2]
    ef24:	4b8b      	ldr	r3, [pc, #556]	; (f154 <send_gps_pos+0x5d4>)
    ef26:	781a      	ldrb	r2, [r3, #0]
    ef28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef30:	781b      	ldrb	r3, [r3, #0]
    ef32:	4413      	add	r3, r2
    ef34:	b2da      	uxtb	r2, r3
    ef36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3e:	701a      	strb	r2, [r3, #0]
    ef40:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	781a      	ldrb	r2, [r3, #0]
    ef4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	781b      	ldrb	r3, [r3, #0]
    ef54:	4413      	add	r3, r2
    ef56:	b2da      	uxtb	r2, r3
    ef58:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	701a      	strb	r2, [r3, #0]
    ef62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	781b      	ldrb	r3, [r3, #0]
    ef6c:	3301      	adds	r3, #1
    ef6e:	b2da      	uxtb	r2, r3
    ef70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	701a      	strb	r2, [r3, #0]
    ef7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	2bff      	cmp	r3, #255	; 0xff
    ef86:	d105      	bne.n	ef94 <send_gps_pos+0x414>
    ef88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	2200      	movs	r2, #0
    ef92:	701a      	strb	r2, [r3, #0]
    ef94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	461a      	mov	r2, r3
    efa0:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	7819      	ldrb	r1, [r3, #0]
    efaa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    efae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb2:	5499      	strb	r1, [r3, r2]
    efb4:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    efb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efbc:	781a      	ldrb	r2, [r3, #0]
    efbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc6:	781b      	ldrb	r3, [r3, #0]
    efc8:	4413      	add	r3, r2
    efca:	b2da      	uxtb	r2, r3
    efcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd4:	701a      	strb	r2, [r3, #0]
    efd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efde:	781a      	ldrb	r2, [r3, #0]
    efe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	781b      	ldrb	r3, [r3, #0]
    efea:	4413      	add	r3, r2
    efec:	b2da      	uxtb	r2, r3
    efee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff6:	701a      	strb	r2, [r3, #0]
    eff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	3301      	adds	r3, #1
    f004:	b2da      	uxtb	r2, r3
    f006:	f24c 5349 	movw	r3, #50505	; 0xc549
    f00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00e:	701a      	strb	r2, [r3, #0]
    f010:	f24c 5349 	movw	r3, #50505	; 0xc549
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	781b      	ldrb	r3, [r3, #0]
    f01a:	2bff      	cmp	r3, #255	; 0xff
    f01c:	d105      	bne.n	f02a <send_gps_pos+0x4aa>
    f01e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f026:	2200      	movs	r2, #0
    f028:	701a      	strb	r2, [r3, #0]
    f02a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f032:	781b      	ldrb	r3, [r3, #0]
    f034:	461a      	mov	r2, r3
    f036:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03e:	7859      	ldrb	r1, [r3, #1]
    f040:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	5499      	strb	r1, [r3, r2]
    f04a:	4b43      	ldr	r3, [pc, #268]	; (f158 <send_gps_pos+0x5d8>)
    f04c:	781a      	ldrb	r2, [r3, #0]
    f04e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f056:	781b      	ldrb	r3, [r3, #0]
    f058:	4413      	add	r3, r2
    f05a:	b2da      	uxtb	r2, r3
    f05c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f064:	701a      	strb	r2, [r3, #0]
    f066:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06e:	781a      	ldrb	r2, [r3, #0]
    f070:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	4413      	add	r3, r2
    f07c:	b2da      	uxtb	r2, r3
    f07e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f086:	701a      	strb	r2, [r3, #0]
    f088:	f24c 5349 	movw	r3, #50505	; 0xc549
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	781b      	ldrb	r3, [r3, #0]
    f092:	3301      	adds	r3, #1
    f094:	b2da      	uxtb	r2, r3
    f096:	f24c 5349 	movw	r3, #50505	; 0xc549
    f09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09e:	701a      	strb	r2, [r3, #0]
    f0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	2bff      	cmp	r3, #255	; 0xff
    f0ac:	d105      	bne.n	f0ba <send_gps_pos+0x53a>
    f0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b6:	2200      	movs	r2, #0
    f0b8:	701a      	strb	r2, [r3, #0]
    f0ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c2:	781b      	ldrb	r3, [r3, #0]
    f0c4:	461a      	mov	r2, r3
    f0c6:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ce:	7899      	ldrb	r1, [r3, #2]
    f0d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d8:	5499      	strb	r1, [r3, r2]
    f0da:	4b20      	ldr	r3, [pc, #128]	; (f15c <send_gps_pos+0x5dc>)
    f0dc:	781a      	ldrb	r2, [r3, #0]
    f0de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	4413      	add	r3, r2
    f0ea:	b2da      	uxtb	r2, r3
    f0ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	701a      	strb	r2, [r3, #0]
    f0f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	781a      	ldrb	r2, [r3, #0]
    f100:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	4413      	add	r3, r2
    f10c:	b2da      	uxtb	r2, r3
    f10e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f116:	701a      	strb	r2, [r3, #0]
    f118:	f24c 5349 	movw	r3, #50505	; 0xc549
    f11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	3301      	adds	r3, #1
    f124:	b2da      	uxtb	r2, r3
    f126:	f24c 5349 	movw	r3, #50505	; 0xc549
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	f24c 5349 	movw	r3, #50505	; 0xc549
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	2bff      	cmp	r3, #255	; 0xff
    f13c:	d110      	bne.n	f160 <send_gps_pos+0x5e0>
    f13e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	2200      	movs	r2, #0
    f148:	701a      	strb	r2, [r3, #0]
    f14a:	e009      	b.n	f160 <send_gps_pos+0x5e0>
    f14c:	2004c6cd 	.word	0x2004c6cd
    f150:	2004c6ce 	.word	0x2004c6ce
    f154:	2004c6cf 	.word	0x2004c6cf
    f158:	2004c6d1 	.word	0x2004c6d1
    f15c:	2004c6d2 	.word	0x2004c6d2
    f160:	f24c 5349 	movw	r3, #50505	; 0xc549
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	781b      	ldrb	r3, [r3, #0]
    f16a:	461a      	mov	r2, r3
    f16c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f174:	78d9      	ldrb	r1, [r3, #3]
    f176:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17e:	5499      	strb	r1, [r3, r2]
    f180:	4bd3      	ldr	r3, [pc, #844]	; (f4d0 <send_gps_pos+0x950>)
    f182:	781a      	ldrb	r2, [r3, #0]
    f184:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	4413      	add	r3, r2
    f190:	b2da      	uxtb	r2, r3
    f192:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19a:	701a      	strb	r2, [r3, #0]
    f19c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a4:	781a      	ldrb	r2, [r3, #0]
    f1a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ae:	781b      	ldrb	r3, [r3, #0]
    f1b0:	4413      	add	r3, r2
    f1b2:	b2da      	uxtb	r2, r3
    f1b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1bc:	701a      	strb	r2, [r3, #0]
    f1be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c6:	781b      	ldrb	r3, [r3, #0]
    f1c8:	3301      	adds	r3, #1
    f1ca:	b2da      	uxtb	r2, r3
    f1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d4:	701a      	strb	r2, [r3, #0]
    f1d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1de:	781b      	ldrb	r3, [r3, #0]
    f1e0:	2bff      	cmp	r3, #255	; 0xff
    f1e2:	d105      	bne.n	f1f0 <send_gps_pos+0x670>
    f1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ec:	2200      	movs	r2, #0
    f1ee:	701a      	strb	r2, [r3, #0]
    f1f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f8:	781b      	ldrb	r3, [r3, #0]
    f1fa:	461a      	mov	r2, r3
    f1fc:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f204:	7819      	ldrb	r1, [r3, #0]
    f206:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20e:	5499      	strb	r1, [r3, r2]
    f210:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f218:	781a      	ldrb	r2, [r3, #0]
    f21a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f222:	781b      	ldrb	r3, [r3, #0]
    f224:	4413      	add	r3, r2
    f226:	b2da      	uxtb	r2, r3
    f228:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f230:	701a      	strb	r2, [r3, #0]
    f232:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23a:	781a      	ldrb	r2, [r3, #0]
    f23c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f244:	781b      	ldrb	r3, [r3, #0]
    f246:	4413      	add	r3, r2
    f248:	b2da      	uxtb	r2, r3
    f24a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f252:	701a      	strb	r2, [r3, #0]
    f254:	f24c 5349 	movw	r3, #50505	; 0xc549
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	781b      	ldrb	r3, [r3, #0]
    f25e:	3301      	adds	r3, #1
    f260:	b2da      	uxtb	r2, r3
    f262:	f24c 5349 	movw	r3, #50505	; 0xc549
    f266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26a:	701a      	strb	r2, [r3, #0]
    f26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f274:	781b      	ldrb	r3, [r3, #0]
    f276:	2bff      	cmp	r3, #255	; 0xff
    f278:	d105      	bne.n	f286 <send_gps_pos+0x706>
    f27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f282:	2200      	movs	r2, #0
    f284:	701a      	strb	r2, [r3, #0]
    f286:	f24c 5349 	movw	r3, #50505	; 0xc549
    f28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28e:	781b      	ldrb	r3, [r3, #0]
    f290:	461a      	mov	r2, r3
    f292:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29a:	7859      	ldrb	r1, [r3, #1]
    f29c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a4:	5499      	strb	r1, [r3, r2]
    f2a6:	4b8b      	ldr	r3, [pc, #556]	; (f4d4 <send_gps_pos+0x954>)
    f2a8:	781a      	ldrb	r2, [r3, #0]
    f2aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	4413      	add	r3, r2
    f2b6:	b2da      	uxtb	r2, r3
    f2b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c0:	701a      	strb	r2, [r3, #0]
    f2c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ca:	781a      	ldrb	r2, [r3, #0]
    f2cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d4:	781b      	ldrb	r3, [r3, #0]
    f2d6:	4413      	add	r3, r2
    f2d8:	b2da      	uxtb	r2, r3
    f2da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e2:	701a      	strb	r2, [r3, #0]
    f2e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ec:	781b      	ldrb	r3, [r3, #0]
    f2ee:	3301      	adds	r3, #1
    f2f0:	b2da      	uxtb	r2, r3
    f2f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fa:	701a      	strb	r2, [r3, #0]
    f2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	2bff      	cmp	r3, #255	; 0xff
    f308:	d105      	bne.n	f316 <send_gps_pos+0x796>
    f30a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f312:	2200      	movs	r2, #0
    f314:	701a      	strb	r2, [r3, #0]
    f316:	f24c 5349 	movw	r3, #50505	; 0xc549
    f31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31e:	781b      	ldrb	r3, [r3, #0]
    f320:	461a      	mov	r2, r3
    f322:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32a:	7899      	ldrb	r1, [r3, #2]
    f32c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f334:	5499      	strb	r1, [r3, r2]
    f336:	4b68      	ldr	r3, [pc, #416]	; (f4d8 <send_gps_pos+0x958>)
    f338:	781a      	ldrb	r2, [r3, #0]
    f33a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f342:	781b      	ldrb	r3, [r3, #0]
    f344:	4413      	add	r3, r2
    f346:	b2da      	uxtb	r2, r3
    f348:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f350:	701a      	strb	r2, [r3, #0]
    f352:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35a:	781a      	ldrb	r2, [r3, #0]
    f35c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	4413      	add	r3, r2
    f368:	b2da      	uxtb	r2, r3
    f36a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f372:	701a      	strb	r2, [r3, #0]
    f374:	f24c 5349 	movw	r3, #50505	; 0xc549
    f378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	3301      	adds	r3, #1
    f380:	b2da      	uxtb	r2, r3
    f382:	f24c 5349 	movw	r3, #50505	; 0xc549
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	701a      	strb	r2, [r3, #0]
    f38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f394:	781b      	ldrb	r3, [r3, #0]
    f396:	2bff      	cmp	r3, #255	; 0xff
    f398:	d105      	bne.n	f3a6 <send_gps_pos+0x826>
    f39a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a2:	2200      	movs	r2, #0
    f3a4:	701a      	strb	r2, [r3, #0]
    f3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ae:	781b      	ldrb	r3, [r3, #0]
    f3b0:	461a      	mov	r2, r3
    f3b2:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ba:	78d9      	ldrb	r1, [r3, #3]
    f3bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c4:	5499      	strb	r1, [r3, r2]
    f3c6:	4b45      	ldr	r3, [pc, #276]	; (f4dc <send_gps_pos+0x95c>)
    f3c8:	781a      	ldrb	r2, [r3, #0]
    f3ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d2:	781b      	ldrb	r3, [r3, #0]
    f3d4:	4413      	add	r3, r2
    f3d6:	b2da      	uxtb	r2, r3
    f3d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e0:	701a      	strb	r2, [r3, #0]
    f3e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	781a      	ldrb	r2, [r3, #0]
    f3ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f4:	781b      	ldrb	r3, [r3, #0]
    f3f6:	4413      	add	r3, r2
    f3f8:	b2da      	uxtb	r2, r3
    f3fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	701a      	strb	r2, [r3, #0]
    f404:	f24c 5349 	movw	r3, #50505	; 0xc549
    f408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40c:	781b      	ldrb	r3, [r3, #0]
    f40e:	3301      	adds	r3, #1
    f410:	b2da      	uxtb	r2, r3
    f412:	f24c 5349 	movw	r3, #50505	; 0xc549
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	701a      	strb	r2, [r3, #0]
    f41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	2bff      	cmp	r3, #255	; 0xff
    f428:	d105      	bne.n	f436 <send_gps_pos+0x8b6>
    f42a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	2200      	movs	r2, #0
    f434:	701a      	strb	r2, [r3, #0]
    f436:	f24c 5349 	movw	r3, #50505	; 0xc549
    f43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	461a      	mov	r2, r3
    f442:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	7819      	ldrb	r1, [r3, #0]
    f44c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	5499      	strb	r1, [r3, r2]
    f456:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45e:	781a      	ldrb	r2, [r3, #0]
    f460:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f468:	781b      	ldrb	r3, [r3, #0]
    f46a:	4413      	add	r3, r2
    f46c:	b2da      	uxtb	r2, r3
    f46e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f476:	701a      	strb	r2, [r3, #0]
    f478:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f480:	781a      	ldrb	r2, [r3, #0]
    f482:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	781b      	ldrb	r3, [r3, #0]
    f48c:	4413      	add	r3, r2
    f48e:	b2da      	uxtb	r2, r3
    f490:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f498:	701a      	strb	r2, [r3, #0]
    f49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	3301      	adds	r3, #1
    f4a6:	b2da      	uxtb	r2, r3
    f4a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b0:	701a      	strb	r2, [r3, #0]
    f4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	781b      	ldrb	r3, [r3, #0]
    f4bc:	2bff      	cmp	r3, #255	; 0xff
    f4be:	d10f      	bne.n	f4e0 <send_gps_pos+0x960>
    f4c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c8:	2200      	movs	r2, #0
    f4ca:	701a      	strb	r2, [r3, #0]
    f4cc:	e008      	b.n	f4e0 <send_gps_pos+0x960>
    f4ce:	bf00      	nop
    f4d0:	2004c6d3 	.word	0x2004c6d3
    f4d4:	2004c6c9 	.word	0x2004c6c9
    f4d8:	2004c6ca 	.word	0x2004c6ca
    f4dc:	2004c6cb 	.word	0x2004c6cb
    f4e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e8:	781b      	ldrb	r3, [r3, #0]
    f4ea:	461a      	mov	r2, r3
    f4ec:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f4:	7859      	ldrb	r1, [r3, #1]
    f4f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fe:	5499      	strb	r1, [r3, r2]
    f500:	4bd1      	ldr	r3, [pc, #836]	; (f848 <send_gps_pos+0xcc8>)
    f502:	781a      	ldrb	r2, [r3, #0]
    f504:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50c:	781b      	ldrb	r3, [r3, #0]
    f50e:	4413      	add	r3, r2
    f510:	b2da      	uxtb	r2, r3
    f512:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51a:	701a      	strb	r2, [r3, #0]
    f51c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f524:	781a      	ldrb	r2, [r3, #0]
    f526:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52e:	781b      	ldrb	r3, [r3, #0]
    f530:	4413      	add	r3, r2
    f532:	b2da      	uxtb	r2, r3
    f534:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53c:	701a      	strb	r2, [r3, #0]
    f53e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f546:	781b      	ldrb	r3, [r3, #0]
    f548:	3301      	adds	r3, #1
    f54a:	b2da      	uxtb	r2, r3
    f54c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f554:	701a      	strb	r2, [r3, #0]
    f556:	f24c 5349 	movw	r3, #50505	; 0xc549
    f55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	2bff      	cmp	r3, #255	; 0xff
    f562:	d105      	bne.n	f570 <send_gps_pos+0x9f0>
    f564:	f24c 5349 	movw	r3, #50505	; 0xc549
    f568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56c:	2200      	movs	r2, #0
    f56e:	701a      	strb	r2, [r3, #0]
    f570:	f24c 5349 	movw	r3, #50505	; 0xc549
    f574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	461a      	mov	r2, r3
    f57c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	7899      	ldrb	r1, [r3, #2]
    f586:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58e:	5499      	strb	r1, [r3, r2]
    f590:	4bae      	ldr	r3, [pc, #696]	; (f84c <send_gps_pos+0xccc>)
    f592:	781a      	ldrb	r2, [r3, #0]
    f594:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59c:	781b      	ldrb	r3, [r3, #0]
    f59e:	4413      	add	r3, r2
    f5a0:	b2da      	uxtb	r2, r3
    f5a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5aa:	701a      	strb	r2, [r3, #0]
    f5ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b4:	781a      	ldrb	r2, [r3, #0]
    f5b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5be:	781b      	ldrb	r3, [r3, #0]
    f5c0:	4413      	add	r3, r2
    f5c2:	b2da      	uxtb	r2, r3
    f5c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5cc:	701a      	strb	r2, [r3, #0]
    f5ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d6:	781b      	ldrb	r3, [r3, #0]
    f5d8:	3301      	adds	r3, #1
    f5da:	b2da      	uxtb	r2, r3
    f5dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e4:	701a      	strb	r2, [r3, #0]
    f5e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	2bff      	cmp	r3, #255	; 0xff
    f5f2:	d105      	bne.n	f600 <send_gps_pos+0xa80>
    f5f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fc:	2200      	movs	r2, #0
    f5fe:	701a      	strb	r2, [r3, #0]
    f600:	f24c 5349 	movw	r3, #50505	; 0xc549
    f604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	461a      	mov	r2, r3
    f60c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	78d9      	ldrb	r1, [r3, #3]
    f616:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	5499      	strb	r1, [r3, r2]
    f620:	4b8b      	ldr	r3, [pc, #556]	; (f850 <send_gps_pos+0xcd0>)
    f622:	781a      	ldrb	r2, [r3, #0]
    f624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62c:	781b      	ldrb	r3, [r3, #0]
    f62e:	4413      	add	r3, r2
    f630:	b2da      	uxtb	r2, r3
    f632:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63a:	701a      	strb	r2, [r3, #0]
    f63c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f644:	781a      	ldrb	r2, [r3, #0]
    f646:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64e:	781b      	ldrb	r3, [r3, #0]
    f650:	4413      	add	r3, r2
    f652:	b2da      	uxtb	r2, r3
    f654:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65c:	701a      	strb	r2, [r3, #0]
    f65e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	3301      	adds	r3, #1
    f66a:	b2da      	uxtb	r2, r3
    f66c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f674:	701a      	strb	r2, [r3, #0]
    f676:	f24c 5349 	movw	r3, #50505	; 0xc549
    f67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67e:	781b      	ldrb	r3, [r3, #0]
    f680:	2bff      	cmp	r3, #255	; 0xff
    f682:	d105      	bne.n	f690 <send_gps_pos+0xb10>
    f684:	f24c 5349 	movw	r3, #50505	; 0xc549
    f688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68c:	2200      	movs	r2, #0
    f68e:	701a      	strb	r2, [r3, #0]
    f690:	f24c 5349 	movw	r3, #50505	; 0xc549
    f694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	461a      	mov	r2, r3
    f69c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	7819      	ldrb	r1, [r3, #0]
    f6a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	5499      	strb	r1, [r3, r2]
    f6b0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b8:	781a      	ldrb	r2, [r3, #0]
    f6ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c2:	781b      	ldrb	r3, [r3, #0]
    f6c4:	4413      	add	r3, r2
    f6c6:	b2da      	uxtb	r2, r3
    f6c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d0:	701a      	strb	r2, [r3, #0]
    f6d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6da:	781a      	ldrb	r2, [r3, #0]
    f6dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	781b      	ldrb	r3, [r3, #0]
    f6e6:	4413      	add	r3, r2
    f6e8:	b2da      	uxtb	r2, r3
    f6ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f2:	701a      	strb	r2, [r3, #0]
    f6f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	3301      	adds	r3, #1
    f700:	b2da      	uxtb	r2, r3
    f702:	f24c 5349 	movw	r3, #50505	; 0xc549
    f706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70a:	701a      	strb	r2, [r3, #0]
    f70c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	781b      	ldrb	r3, [r3, #0]
    f716:	2bff      	cmp	r3, #255	; 0xff
    f718:	d105      	bne.n	f726 <send_gps_pos+0xba6>
    f71a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f722:	2200      	movs	r2, #0
    f724:	701a      	strb	r2, [r3, #0]
    f726:	f24c 5349 	movw	r3, #50505	; 0xc549
    f72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72e:	781b      	ldrb	r3, [r3, #0]
    f730:	461a      	mov	r2, r3
    f732:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73a:	7859      	ldrb	r1, [r3, #1]
    f73c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	5499      	strb	r1, [r3, r2]
    f746:	4b43      	ldr	r3, [pc, #268]	; (f854 <send_gps_pos+0xcd4>)
    f748:	781a      	ldrb	r2, [r3, #0]
    f74a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	781b      	ldrb	r3, [r3, #0]
    f754:	4413      	add	r3, r2
    f756:	b2da      	uxtb	r2, r3
    f758:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f760:	701a      	strb	r2, [r3, #0]
    f762:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76a:	781a      	ldrb	r2, [r3, #0]
    f76c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f774:	781b      	ldrb	r3, [r3, #0]
    f776:	4413      	add	r3, r2
    f778:	b2da      	uxtb	r2, r3
    f77a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f782:	701a      	strb	r2, [r3, #0]
    f784:	f24c 5349 	movw	r3, #50505	; 0xc549
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	3301      	adds	r3, #1
    f790:	b2da      	uxtb	r2, r3
    f792:	f24c 5349 	movw	r3, #50505	; 0xc549
    f796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	2bff      	cmp	r3, #255	; 0xff
    f7a8:	d105      	bne.n	f7b6 <send_gps_pos+0xc36>
    f7aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	2200      	movs	r2, #0
    f7b4:	701a      	strb	r2, [r3, #0]
    f7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	461a      	mov	r2, r3
    f7c2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ca:	7899      	ldrb	r1, [r3, #2]
    f7cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d4:	5499      	strb	r1, [r3, r2]
    f7d6:	4b20      	ldr	r3, [pc, #128]	; (f858 <send_gps_pos+0xcd8>)
    f7d8:	781a      	ldrb	r2, [r3, #0]
    f7da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	781b      	ldrb	r3, [r3, #0]
    f7e4:	4413      	add	r3, r2
    f7e6:	b2da      	uxtb	r2, r3
    f7e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	701a      	strb	r2, [r3, #0]
    f7f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	781a      	ldrb	r2, [r3, #0]
    f7fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	4413      	add	r3, r2
    f808:	b2da      	uxtb	r2, r3
    f80a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f812:	701a      	strb	r2, [r3, #0]
    f814:	f24c 5349 	movw	r3, #50505	; 0xc549
    f818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	3301      	adds	r3, #1
    f820:	b2da      	uxtb	r2, r3
    f822:	f24c 5349 	movw	r3, #50505	; 0xc549
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	701a      	strb	r2, [r3, #0]
    f82c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2bff      	cmp	r3, #255	; 0xff
    f838:	d110      	bne.n	f85c <send_gps_pos+0xcdc>
    f83a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	2200      	movs	r2, #0
    f844:	701a      	strb	r2, [r3, #0]
    f846:	e009      	b.n	f85c <send_gps_pos+0xcdc>
    f848:	2004c6bd 	.word	0x2004c6bd
    f84c:	2004c6be 	.word	0x2004c6be
    f850:	2004c6bf 	.word	0x2004c6bf
    f854:	2004c6c1 	.word	0x2004c6c1
    f858:	2004c6c2 	.word	0x2004c6c2
    f85c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	781b      	ldrb	r3, [r3, #0]
    f866:	461a      	mov	r2, r3
    f868:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f870:	78d9      	ldrb	r1, [r3, #3]
    f872:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87a:	5499      	strb	r1, [r3, r2]
    f87c:	4bd3      	ldr	r3, [pc, #844]	; (fbcc <send_gps_pos+0x104c>)
    f87e:	781a      	ldrb	r2, [r3, #0]
    f880:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f888:	781b      	ldrb	r3, [r3, #0]
    f88a:	4413      	add	r3, r2
    f88c:	b2da      	uxtb	r2, r3
    f88e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f896:	701a      	strb	r2, [r3, #0]
    f898:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a0:	781a      	ldrb	r2, [r3, #0]
    f8a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	781b      	ldrb	r3, [r3, #0]
    f8ac:	4413      	add	r3, r2
    f8ae:	b2da      	uxtb	r2, r3
    f8b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b8:	701a      	strb	r2, [r3, #0]
    f8ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	3301      	adds	r3, #1
    f8c6:	b2da      	uxtb	r2, r3
    f8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d0:	701a      	strb	r2, [r3, #0]
    f8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	2bff      	cmp	r3, #255	; 0xff
    f8de:	d105      	bne.n	f8ec <send_gps_pos+0xd6c>
    f8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e8:	2200      	movs	r2, #0
    f8ea:	701a      	strb	r2, [r3, #0]
    f8ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f4:	781b      	ldrb	r3, [r3, #0]
    f8f6:	461a      	mov	r2, r3
    f8f8:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f900:	7819      	ldrb	r1, [r3, #0]
    f902:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90a:	5499      	strb	r1, [r3, r2]
    f90c:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f914:	781a      	ldrb	r2, [r3, #0]
    f916:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91e:	781b      	ldrb	r3, [r3, #0]
    f920:	4413      	add	r3, r2
    f922:	b2da      	uxtb	r2, r3
    f924:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92c:	701a      	strb	r2, [r3, #0]
    f92e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f936:	781a      	ldrb	r2, [r3, #0]
    f938:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f940:	781b      	ldrb	r3, [r3, #0]
    f942:	4413      	add	r3, r2
    f944:	b2da      	uxtb	r2, r3
    f946:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94e:	701a      	strb	r2, [r3, #0]
    f950:	f24c 5349 	movw	r3, #50505	; 0xc549
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	3301      	adds	r3, #1
    f95c:	b2da      	uxtb	r2, r3
    f95e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f966:	701a      	strb	r2, [r3, #0]
    f968:	f24c 5349 	movw	r3, #50505	; 0xc549
    f96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f970:	781b      	ldrb	r3, [r3, #0]
    f972:	2bff      	cmp	r3, #255	; 0xff
    f974:	d105      	bne.n	f982 <send_gps_pos+0xe02>
    f976:	f24c 5349 	movw	r3, #50505	; 0xc549
    f97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97e:	2200      	movs	r2, #0
    f980:	701a      	strb	r2, [r3, #0]
    f982:	f24c 5349 	movw	r3, #50505	; 0xc549
    f986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98a:	781b      	ldrb	r3, [r3, #0]
    f98c:	461a      	mov	r2, r3
    f98e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f996:	7859      	ldrb	r1, [r3, #1]
    f998:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a0:	5499      	strb	r1, [r3, r2]
    f9a2:	4b8b      	ldr	r3, [pc, #556]	; (fbd0 <send_gps_pos+0x1050>)
    f9a4:	781a      	ldrb	r2, [r3, #0]
    f9a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	781b      	ldrb	r3, [r3, #0]
    f9b0:	4413      	add	r3, r2
    f9b2:	b2da      	uxtb	r2, r3
    f9b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9bc:	701a      	strb	r2, [r3, #0]
    f9be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c6:	781a      	ldrb	r2, [r3, #0]
    f9c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d0:	781b      	ldrb	r3, [r3, #0]
    f9d2:	4413      	add	r3, r2
    f9d4:	b2da      	uxtb	r2, r3
    f9d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9de:	701a      	strb	r2, [r3, #0]
    f9e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	3301      	adds	r3, #1
    f9ec:	b2da      	uxtb	r2, r3
    f9ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f6:	701a      	strb	r2, [r3, #0]
    f9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa00:	781b      	ldrb	r3, [r3, #0]
    fa02:	2bff      	cmp	r3, #255	; 0xff
    fa04:	d105      	bne.n	fa12 <send_gps_pos+0xe92>
    fa06:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0e:	2200      	movs	r2, #0
    fa10:	701a      	strb	r2, [r3, #0]
    fa12:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1a:	781b      	ldrb	r3, [r3, #0]
    fa1c:	461a      	mov	r2, r3
    fa1e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa26:	7899      	ldrb	r1, [r3, #2]
    fa28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa30:	5499      	strb	r1, [r3, r2]
    fa32:	4b68      	ldr	r3, [pc, #416]	; (fbd4 <send_gps_pos+0x1054>)
    fa34:	781a      	ldrb	r2, [r3, #0]
    fa36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa3e:	781b      	ldrb	r3, [r3, #0]
    fa40:	4413      	add	r3, r2
    fa42:	b2da      	uxtb	r2, r3
    fa44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4c:	701a      	strb	r2, [r3, #0]
    fa4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa56:	781a      	ldrb	r2, [r3, #0]
    fa58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa60:	781b      	ldrb	r3, [r3, #0]
    fa62:	4413      	add	r3, r2
    fa64:	b2da      	uxtb	r2, r3
    fa66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6e:	701a      	strb	r2, [r3, #0]
    fa70:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	3301      	adds	r3, #1
    fa7c:	b2da      	uxtb	r2, r3
    fa7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	701a      	strb	r2, [r3, #0]
    fa88:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa90:	781b      	ldrb	r3, [r3, #0]
    fa92:	2bff      	cmp	r3, #255	; 0xff
    fa94:	d105      	bne.n	faa2 <send_gps_pos+0xf22>
    fa96:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	2200      	movs	r2, #0
    faa0:	701a      	strb	r2, [r3, #0]
    faa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    faa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	461a      	mov	r2, r3
    faae:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab6:	78d9      	ldrb	r1, [r3, #3]
    fab8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac0:	5499      	strb	r1, [r3, r2]
    fac2:	4b45      	ldr	r3, [pc, #276]	; (fbd8 <send_gps_pos+0x1058>)
    fac4:	781a      	ldrb	r2, [r3, #0]
    fac6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    face:	781b      	ldrb	r3, [r3, #0]
    fad0:	4413      	add	r3, r2
    fad2:	b2da      	uxtb	r2, r3
    fad4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fadc:	701a      	strb	r2, [r3, #0]
    fade:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	781a      	ldrb	r2, [r3, #0]
    fae8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf0:	781b      	ldrb	r3, [r3, #0]
    faf2:	4413      	add	r3, r2
    faf4:	b2da      	uxtb	r2, r3
    faf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	701a      	strb	r2, [r3, #0]
    fb00:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	3301      	adds	r3, #1
    fb0c:	b2da      	uxtb	r2, r3
    fb0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	2bff      	cmp	r3, #255	; 0xff
    fb24:	d105      	bne.n	fb32 <send_gps_pos+0xfb2>
    fb26:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	2200      	movs	r2, #0
    fb30:	701a      	strb	r2, [r3, #0]
    fb32:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3a:	781b      	ldrb	r3, [r3, #0]
    fb3c:	461a      	mov	r2, r3
    fb3e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	7819      	ldrb	r1, [r3, #0]
    fb48:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb50:	5499      	strb	r1, [r3, r2]
    fb52:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5a:	781a      	ldrb	r2, [r3, #0]
    fb5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb64:	781b      	ldrb	r3, [r3, #0]
    fb66:	4413      	add	r3, r2
    fb68:	b2da      	uxtb	r2, r3
    fb6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb72:	701a      	strb	r2, [r3, #0]
    fb74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7c:	781a      	ldrb	r2, [r3, #0]
    fb7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	781b      	ldrb	r3, [r3, #0]
    fb88:	4413      	add	r3, r2
    fb8a:	b2da      	uxtb	r2, r3
    fb8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb94:	701a      	strb	r2, [r3, #0]
    fb96:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	781b      	ldrb	r3, [r3, #0]
    fba0:	3301      	adds	r3, #1
    fba2:	b2da      	uxtb	r2, r3
    fba4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbac:	701a      	strb	r2, [r3, #0]
    fbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	781b      	ldrb	r3, [r3, #0]
    fbb8:	2bff      	cmp	r3, #255	; 0xff
    fbba:	d10f      	bne.n	fbdc <send_gps_pos+0x105c>
    fbbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc4:	2200      	movs	r2, #0
    fbc6:	701a      	strb	r2, [r3, #0]
    fbc8:	e008      	b.n	fbdc <send_gps_pos+0x105c>
    fbca:	bf00      	nop
    fbcc:	2004c6c3 	.word	0x2004c6c3
    fbd0:	2004c6c5 	.word	0x2004c6c5
    fbd4:	2004c6c6 	.word	0x2004c6c6
    fbd8:	2004c6c7 	.word	0x2004c6c7
    fbdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe4:	781b      	ldrb	r3, [r3, #0]
    fbe6:	461a      	mov	r2, r3
    fbe8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf0:	7859      	ldrb	r1, [r3, #1]
    fbf2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfa:	5499      	strb	r1, [r3, r2]
    fbfc:	4bc0      	ldr	r3, [pc, #768]	; (ff00 <send_gps_pos+0x1380>)
    fbfe:	781a      	ldrb	r2, [r3, #0]
    fc00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc08:	781b      	ldrb	r3, [r3, #0]
    fc0a:	4413      	add	r3, r2
    fc0c:	b2da      	uxtb	r2, r3
    fc0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc16:	701a      	strb	r2, [r3, #0]
    fc18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	781a      	ldrb	r2, [r3, #0]
    fc22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2a:	781b      	ldrb	r3, [r3, #0]
    fc2c:	4413      	add	r3, r2
    fc2e:	b2da      	uxtb	r2, r3
    fc30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc38:	701a      	strb	r2, [r3, #0]
    fc3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc42:	781b      	ldrb	r3, [r3, #0]
    fc44:	3301      	adds	r3, #1
    fc46:	b2da      	uxtb	r2, r3
    fc48:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc50:	701a      	strb	r2, [r3, #0]
    fc52:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5a:	781b      	ldrb	r3, [r3, #0]
    fc5c:	2bff      	cmp	r3, #255	; 0xff
    fc5e:	d105      	bne.n	fc6c <send_gps_pos+0x10ec>
    fc60:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc68:	2200      	movs	r2, #0
    fc6a:	701a      	strb	r2, [r3, #0]
    fc6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc74:	781b      	ldrb	r3, [r3, #0]
    fc76:	461a      	mov	r2, r3
    fc78:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc80:	7899      	ldrb	r1, [r3, #2]
    fc82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8a:	5499      	strb	r1, [r3, r2]
    fc8c:	4b9d      	ldr	r3, [pc, #628]	; (ff04 <send_gps_pos+0x1384>)
    fc8e:	781a      	ldrb	r2, [r3, #0]
    fc90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc98:	781b      	ldrb	r3, [r3, #0]
    fc9a:	4413      	add	r3, r2
    fc9c:	b2da      	uxtb	r2, r3
    fc9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca6:	701a      	strb	r2, [r3, #0]
    fca8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb0:	781a      	ldrb	r2, [r3, #0]
    fcb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	4413      	add	r3, r2
    fcbe:	b2da      	uxtb	r2, r3
    fcc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc8:	701a      	strb	r2, [r3, #0]
    fcca:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd2:	781b      	ldrb	r3, [r3, #0]
    fcd4:	3301      	adds	r3, #1
    fcd6:	b2da      	uxtb	r2, r3
    fcd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce0:	701a      	strb	r2, [r3, #0]
    fce2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcea:	781b      	ldrb	r3, [r3, #0]
    fcec:	2bff      	cmp	r3, #255	; 0xff
    fcee:	d105      	bne.n	fcfc <send_gps_pos+0x117c>
    fcf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf8:	2200      	movs	r2, #0
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	461a      	mov	r2, r3
    fd08:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd10:	78d9      	ldrb	r1, [r3, #3]
    fd12:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1a:	5499      	strb	r1, [r3, r2]
    fd1c:	4b7a      	ldr	r3, [pc, #488]	; (ff08 <send_gps_pos+0x1388>)
    fd1e:	781a      	ldrb	r2, [r3, #0]
    fd20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd28:	781b      	ldrb	r3, [r3, #0]
    fd2a:	4413      	add	r3, r2
    fd2c:	b2da      	uxtb	r2, r3
    fd2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd36:	701a      	strb	r2, [r3, #0]
    fd38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	781a      	ldrb	r2, [r3, #0]
    fd42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	4413      	add	r3, r2
    fd4e:	b2da      	uxtb	r2, r3
    fd50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd58:	701a      	strb	r2, [r3, #0]
    fd5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd62:	781b      	ldrb	r3, [r3, #0]
    fd64:	3301      	adds	r3, #1
    fd66:	b2da      	uxtb	r2, r3
    fd68:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd70:	701a      	strb	r2, [r3, #0]
    fd72:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	2bff      	cmp	r3, #255	; 0xff
    fd7e:	d105      	bne.n	fd8c <send_gps_pos+0x120c>
    fd80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd88:	2200      	movs	r2, #0
    fd8a:	701a      	strb	r2, [r3, #0]
    fd8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd94:	781b      	ldrb	r3, [r3, #0]
    fd96:	461a      	mov	r2, r3
    fd98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	7819      	ldrb	r1, [r3, #0]
    fda2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	5499      	strb	r1, [r3, r2]
    fdac:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb4:	781b      	ldrb	r3, [r3, #0]
    fdb6:	3301      	adds	r3, #1
    fdb8:	b2da      	uxtb	r2, r3
    fdba:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	701a      	strb	r2, [r3, #0]
    fdc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	2bff      	cmp	r3, #255	; 0xff
    fdd0:	d105      	bne.n	fdde <send_gps_pos+0x125e>
    fdd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdda:	2200      	movs	r2, #0
    fddc:	701a      	strb	r2, [r3, #0]
    fdde:	f24c 5349 	movw	r3, #50505	; 0xc549
    fde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde6:	781b      	ldrb	r3, [r3, #0]
    fde8:	461a      	mov	r2, r3
    fdea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	7819      	ldrb	r1, [r3, #0]
    fdf4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdfc:	5499      	strb	r1, [r3, r2]
    fdfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe06:	781b      	ldrb	r3, [r3, #0]
    fe08:	3301      	adds	r3, #1
    fe0a:	b2da      	uxtb	r2, r3
    fe0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe14:	701a      	strb	r2, [r3, #0]
    fe16:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1e:	781b      	ldrb	r3, [r3, #0]
    fe20:	2bff      	cmp	r3, #255	; 0xff
    fe22:	d105      	bne.n	fe30 <send_gps_pos+0x12b0>
    fe24:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe2c:	2200      	movs	r2, #0
    fe2e:	701a      	strb	r2, [r3, #0]
    fe30:	f242 0339 	movw	r3, #8249	; 0x2039
    fe34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe38:	781b      	ldrb	r3, [r3, #0]
    fe3a:	b2db      	uxtb	r3, r3
    fe3c:	f003 0310 	and.w	r3, r3, #16
    fe40:	2b00      	cmp	r3, #0
    fe42:	d15a      	bne.n	fefa <send_gps_pos+0x137a>
    fe44:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4c:	781b      	ldrb	r3, [r3, #0]
    fe4e:	b2db      	uxtb	r3, r3
    fe50:	461a      	mov	r2, r3
    fe52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5a:	5c9a      	ldrb	r2, [r3, r2]
    fe5c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    fe60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe64:	701a      	strb	r2, [r3, #0]
    fe66:	f24c 634c 	movw	r3, #50764	; 0xc64c
    fe6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6e:	2200      	movs	r2, #0
    fe70:	701a      	strb	r2, [r3, #0]
    fe72:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	b2db      	uxtb	r3, r3
    fe7e:	3301      	adds	r3, #1
    fe80:	b2da      	uxtb	r2, r3
    fe82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8a:	701a      	strb	r2, [r3, #0]
    fe8c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe94:	781b      	ldrb	r3, [r3, #0]
    fe96:	b2db      	uxtb	r3, r3
    fe98:	2bff      	cmp	r3, #255	; 0xff
    fe9a:	d105      	bne.n	fea8 <send_gps_pos+0x1328>
    fe9c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea4:	2200      	movs	r2, #0
    fea6:	701a      	strb	r2, [r3, #0]
    fea8:	f242 0338 	movw	r3, #8248	; 0x2038
    feac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb0:	f242 0238 	movw	r2, #8248	; 0x2038
    feb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    feb8:	7812      	ldrb	r2, [r2, #0]
    feba:	b2d2      	uxtb	r2, r2
    febc:	f042 0201 	orr.w	r2, r2, #1
    fec0:	b2d2      	uxtb	r2, r2
    fec2:	701a      	strb	r2, [r3, #0]
    fec4:	f242 0339 	movw	r3, #8249	; 0x2039
    fec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fecc:	f242 0239 	movw	r2, #8249	; 0x2039
    fed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fed4:	7812      	ldrb	r2, [r2, #0]
    fed6:	b2d2      	uxtb	r2, r2
    fed8:	f042 0210 	orr.w	r2, r2, #16
    fedc:	b2d2      	uxtb	r2, r2
    fede:	701a      	strb	r2, [r3, #0]
    fee0:	e00b      	b.n	fefa <send_gps_pos+0x137a>
    fee2:	f24c 5348 	movw	r3, #50504	; 0xc548
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	781b      	ldrb	r3, [r3, #0]
    feec:	3301      	adds	r3, #1
    feee:	b2da      	uxtb	r2, r3
    fef0:	f24c 5348 	movw	r3, #50504	; 0xc548
    fef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef8:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fefa:	f005 fbfd 	bl	156f8 <estimator_update_state_gps>
  }
}
    fefe:	bd80      	pop	{r7, pc}
    ff00:	2004c6b9 	.word	0x2004c6b9
    ff04:	2004c6ba 	.word	0x2004c6ba
    ff08:	2004c6bb 	.word	0x2004c6bb

0000ff0c <send_radIR>:

void send_radIR(void){
    ff0c:	b480      	push	{r7}
    ff0e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ff10:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ff14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff18:	781b      	ldrb	r3, [r3, #0]
    ff1a:	2b00      	cmp	r3, #0
    ff1c:	f000 85e8 	beq.w	10af0 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ff20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff28:	781a      	ldrb	r2, [r3, #0]
    ff2a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff32:	781b      	ldrb	r3, [r3, #0]
    ff34:	b2db      	uxtb	r3, r3
    ff36:	429a      	cmp	r2, r3
    ff38:	d313      	bcc.n	ff62 <send_radIR+0x56>
    ff3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	b2db      	uxtb	r3, r3
    ff46:	461a      	mov	r2, r3
    ff48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	1ad3      	subs	r3, r2, r3
    ff54:	33ff      	adds	r3, #255	; 0xff
    ff56:	2b14      	cmp	r3, #20
    ff58:	bfd4      	ite	le
    ff5a:	2300      	movle	r3, #0
    ff5c:	2301      	movgt	r3, #1
    ff5e:	b2db      	uxtb	r3, r3
    ff60:	e011      	b.n	ff86 <send_radIR+0x7a>
    ff62:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6a:	781b      	ldrb	r3, [r3, #0]
    ff6c:	b2db      	uxtb	r3, r3
    ff6e:	461a      	mov	r2, r3
    ff70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff78:	781b      	ldrb	r3, [r3, #0]
    ff7a:	1ad3      	subs	r3, r2, r3
    ff7c:	2b14      	cmp	r3, #20
    ff7e:	bfd4      	ite	le
    ff80:	2300      	movle	r3, #0
    ff82:	2301      	movgt	r3, #1
    ff84:	b2db      	uxtb	r3, r3
    ff86:	2b00      	cmp	r3, #0
    ff88:	f000 85a6 	beq.w	10ad8 <send_radIR+0xbcc>
    ff8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff94:	781b      	ldrb	r3, [r3, #0]
    ff96:	461a      	mov	r2, r3
    ff98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa0:	2105      	movs	r1, #5
    ffa2:	5499      	strb	r1, [r3, r2]
    ffa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	3301      	adds	r3, #1
    ffb0:	b2da      	uxtb	r2, r3
    ffb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffba:	701a      	strb	r2, [r3, #0]
    ffbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	2bff      	cmp	r3, #255	; 0xff
    ffc8:	d105      	bne.n	ffd6 <send_radIR+0xca>
    ffca:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	2200      	movs	r2, #0
    ffd4:	701a      	strb	r2, [r3, #0]
    ffd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffde:	781b      	ldrb	r3, [r3, #0]
    ffe0:	461a      	mov	r2, r3
    ffe2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ffe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffea:	2105      	movs	r1, #5
    ffec:	5499      	strb	r1, [r3, r2]
    ffee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	3301      	adds	r3, #1
    fffa:	b2da      	uxtb	r2, r3
    fffc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10004:	701a      	strb	r2, [r3, #0]
   10006:	f24c 5349 	movw	r3, #50505	; 0xc549
   1000a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000e:	781b      	ldrb	r3, [r3, #0]
   10010:	2bff      	cmp	r3, #255	; 0xff
   10012:	d105      	bne.n	10020 <send_radIR+0x114>
   10014:	f24c 5349 	movw	r3, #50505	; 0xc549
   10018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001c:	2200      	movs	r2, #0
   1001e:	701a      	strb	r2, [r3, #0]
   10020:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10028:	2205      	movs	r2, #5
   1002a:	701a      	strb	r2, [r3, #0]
   1002c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10034:	2205      	movs	r2, #5
   10036:	701a      	strb	r2, [r3, #0]
   10038:	f24c 5349 	movw	r3, #50505	; 0xc549
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	781b      	ldrb	r3, [r3, #0]
   10042:	461a      	mov	r2, r3
   10044:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10048:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004c:	7819      	ldrb	r1, [r3, #0]
   1004e:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10056:	5499      	strb	r1, [r3, r2]
   10058:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1005c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10060:	781a      	ldrb	r2, [r3, #0]
   10062:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006a:	781b      	ldrb	r3, [r3, #0]
   1006c:	4413      	add	r3, r2
   1006e:	b2da      	uxtb	r2, r3
   10070:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10078:	701a      	strb	r2, [r3, #0]
   1007a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1007e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10082:	781a      	ldrb	r2, [r3, #0]
   10084:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008c:	781b      	ldrb	r3, [r3, #0]
   1008e:	4413      	add	r3, r2
   10090:	b2da      	uxtb	r2, r3
   10092:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	701a      	strb	r2, [r3, #0]
   1009c:	f24c 5349 	movw	r3, #50505	; 0xc549
   100a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	3301      	adds	r3, #1
   100a8:	b2da      	uxtb	r2, r3
   100aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   100ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	2bff      	cmp	r3, #255	; 0xff
   100c0:	d105      	bne.n	100ce <send_radIR+0x1c2>
   100c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   100c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ca:	2200      	movs	r2, #0
   100cc:	701a      	strb	r2, [r3, #0]
   100ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   100d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d6:	781b      	ldrb	r3, [r3, #0]
   100d8:	461a      	mov	r2, r3
   100da:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e2:	7859      	ldrb	r1, [r3, #1]
   100e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ec:	5499      	strb	r1, [r3, r2]
   100ee:	4bd2      	ldr	r3, [pc, #840]	; (10438 <send_radIR+0x52c>)
   100f0:	781a      	ldrb	r2, [r3, #0]
   100f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fa:	781b      	ldrb	r3, [r3, #0]
   100fc:	4413      	add	r3, r2
   100fe:	b2da      	uxtb	r2, r3
   10100:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10108:	701a      	strb	r2, [r3, #0]
   1010a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	781a      	ldrb	r2, [r3, #0]
   10114:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	781b      	ldrb	r3, [r3, #0]
   1011e:	4413      	add	r3, r2
   10120:	b2da      	uxtb	r2, r3
   10122:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012a:	701a      	strb	r2, [r3, #0]
   1012c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10134:	781b      	ldrb	r3, [r3, #0]
   10136:	3301      	adds	r3, #1
   10138:	b2da      	uxtb	r2, r3
   1013a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1013e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10142:	701a      	strb	r2, [r3, #0]
   10144:	f24c 5349 	movw	r3, #50505	; 0xc549
   10148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014c:	781b      	ldrb	r3, [r3, #0]
   1014e:	2bff      	cmp	r3, #255	; 0xff
   10150:	d105      	bne.n	1015e <send_radIR+0x252>
   10152:	f24c 5349 	movw	r3, #50505	; 0xc549
   10156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015a:	2200      	movs	r2, #0
   1015c:	701a      	strb	r2, [r3, #0]
   1015e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10166:	781b      	ldrb	r3, [r3, #0]
   10168:	461a      	mov	r2, r3
   1016a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1016e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10172:	7899      	ldrb	r1, [r3, #2]
   10174:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017c:	5499      	strb	r1, [r3, r2]
   1017e:	4baf      	ldr	r3, [pc, #700]	; (1043c <send_radIR+0x530>)
   10180:	781a      	ldrb	r2, [r3, #0]
   10182:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018a:	781b      	ldrb	r3, [r3, #0]
   1018c:	4413      	add	r3, r2
   1018e:	b2da      	uxtb	r2, r3
   10190:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10198:	701a      	strb	r2, [r3, #0]
   1019a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1019e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a2:	781a      	ldrb	r2, [r3, #0]
   101a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ac:	781b      	ldrb	r3, [r3, #0]
   101ae:	4413      	add	r3, r2
   101b0:	b2da      	uxtb	r2, r3
   101b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ba:	701a      	strb	r2, [r3, #0]
   101bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   101c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c4:	781b      	ldrb	r3, [r3, #0]
   101c6:	3301      	adds	r3, #1
   101c8:	b2da      	uxtb	r2, r3
   101ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   101ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d2:	701a      	strb	r2, [r3, #0]
   101d4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101dc:	781b      	ldrb	r3, [r3, #0]
   101de:	2bff      	cmp	r3, #255	; 0xff
   101e0:	d105      	bne.n	101ee <send_radIR+0x2e2>
   101e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   101e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ea:	2200      	movs	r2, #0
   101ec:	701a      	strb	r2, [r3, #0]
   101ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   101f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	461a      	mov	r2, r3
   101fa:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10202:	78d9      	ldrb	r1, [r3, #3]
   10204:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020c:	5499      	strb	r1, [r3, r2]
   1020e:	4b8c      	ldr	r3, [pc, #560]	; (10440 <send_radIR+0x534>)
   10210:	781a      	ldrb	r2, [r3, #0]
   10212:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	4413      	add	r3, r2
   1021e:	b2da      	uxtb	r2, r3
   10220:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10228:	701a      	strb	r2, [r3, #0]
   1022a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	781a      	ldrb	r2, [r3, #0]
   10234:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	4413      	add	r3, r2
   10240:	b2da      	uxtb	r2, r3
   10242:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	701a      	strb	r2, [r3, #0]
   1024c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	3301      	adds	r3, #1
   10258:	b2da      	uxtb	r2, r3
   1025a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	701a      	strb	r2, [r3, #0]
   10264:	f24c 5349 	movw	r3, #50505	; 0xc549
   10268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	2bff      	cmp	r3, #255	; 0xff
   10270:	d105      	bne.n	1027e <send_radIR+0x372>
   10272:	f24c 5349 	movw	r3, #50505	; 0xc549
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	2200      	movs	r2, #0
   1027c:	701a      	strb	r2, [r3, #0]
   1027e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10286:	781b      	ldrb	r3, [r3, #0]
   10288:	461a      	mov	r2, r3
   1028a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	7819      	ldrb	r1, [r3, #0]
   10294:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029c:	5499      	strb	r1, [r3, r2]
   1029e:	f64c 3344 	movw	r3, #52036	; 0xcb44
   102a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a6:	781a      	ldrb	r2, [r3, #0]
   102a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	781b      	ldrb	r3, [r3, #0]
   102b2:	4413      	add	r3, r2
   102b4:	b2da      	uxtb	r2, r3
   102b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102be:	701a      	strb	r2, [r3, #0]
   102c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c8:	781a      	ldrb	r2, [r3, #0]
   102ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	781b      	ldrb	r3, [r3, #0]
   102d4:	4413      	add	r3, r2
   102d6:	b2da      	uxtb	r2, r3
   102d8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e0:	701a      	strb	r2, [r3, #0]
   102e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	781b      	ldrb	r3, [r3, #0]
   102ec:	3301      	adds	r3, #1
   102ee:	b2da      	uxtb	r2, r3
   102f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   102f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f8:	701a      	strb	r2, [r3, #0]
   102fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	781b      	ldrb	r3, [r3, #0]
   10304:	2bff      	cmp	r3, #255	; 0xff
   10306:	d105      	bne.n	10314 <send_radIR+0x408>
   10308:	f24c 5349 	movw	r3, #50505	; 0xc549
   1030c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10310:	2200      	movs	r2, #0
   10312:	701a      	strb	r2, [r3, #0]
   10314:	f24c 5349 	movw	r3, #50505	; 0xc549
   10318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031c:	781b      	ldrb	r3, [r3, #0]
   1031e:	461a      	mov	r2, r3
   10320:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10328:	7859      	ldrb	r1, [r3, #1]
   1032a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1032e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10332:	5499      	strb	r1, [r3, r2]
   10334:	4b43      	ldr	r3, [pc, #268]	; (10444 <send_radIR+0x538>)
   10336:	781a      	ldrb	r2, [r3, #0]
   10338:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	781b      	ldrb	r3, [r3, #0]
   10342:	4413      	add	r3, r2
   10344:	b2da      	uxtb	r2, r3
   10346:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1034a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034e:	701a      	strb	r2, [r3, #0]
   10350:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10358:	781a      	ldrb	r2, [r3, #0]
   1035a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	781b      	ldrb	r3, [r3, #0]
   10364:	4413      	add	r3, r2
   10366:	b2da      	uxtb	r2, r3
   10368:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1036c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10370:	701a      	strb	r2, [r3, #0]
   10372:	f24c 5349 	movw	r3, #50505	; 0xc549
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	781b      	ldrb	r3, [r3, #0]
   1037c:	3301      	adds	r3, #1
   1037e:	b2da      	uxtb	r2, r3
   10380:	f24c 5349 	movw	r3, #50505	; 0xc549
   10384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10388:	701a      	strb	r2, [r3, #0]
   1038a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	781b      	ldrb	r3, [r3, #0]
   10394:	2bff      	cmp	r3, #255	; 0xff
   10396:	d105      	bne.n	103a4 <send_radIR+0x498>
   10398:	f24c 5349 	movw	r3, #50505	; 0xc549
   1039c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a0:	2200      	movs	r2, #0
   103a2:	701a      	strb	r2, [r3, #0]
   103a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   103a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	461a      	mov	r2, r3
   103b0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b8:	7899      	ldrb	r1, [r3, #2]
   103ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
   103be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c2:	5499      	strb	r1, [r3, r2]
   103c4:	4b20      	ldr	r3, [pc, #128]	; (10448 <send_radIR+0x53c>)
   103c6:	781a      	ldrb	r2, [r3, #0]
   103c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d0:	781b      	ldrb	r3, [r3, #0]
   103d2:	4413      	add	r3, r2
   103d4:	b2da      	uxtb	r2, r3
   103d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103de:	701a      	strb	r2, [r3, #0]
   103e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e8:	781a      	ldrb	r2, [r3, #0]
   103ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f2:	781b      	ldrb	r3, [r3, #0]
   103f4:	4413      	add	r3, r2
   103f6:	b2da      	uxtb	r2, r3
   103f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10400:	701a      	strb	r2, [r3, #0]
   10402:	f24c 5349 	movw	r3, #50505	; 0xc549
   10406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	3301      	adds	r3, #1
   1040e:	b2da      	uxtb	r2, r3
   10410:	f24c 5349 	movw	r3, #50505	; 0xc549
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	701a      	strb	r2, [r3, #0]
   1041a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1041e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10422:	781b      	ldrb	r3, [r3, #0]
   10424:	2bff      	cmp	r3, #255	; 0xff
   10426:	d111      	bne.n	1044c <send_radIR+0x540>
   10428:	f24c 5349 	movw	r3, #50505	; 0xc549
   1042c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10430:	2200      	movs	r2, #0
   10432:	701a      	strb	r2, [r3, #0]
   10434:	e00a      	b.n	1044c <send_radIR+0x540>
   10436:	bf00      	nop
   10438:	2004cb41 	.word	0x2004cb41
   1043c:	2004cb42 	.word	0x2004cb42
   10440:	2004cb43 	.word	0x2004cb43
   10444:	2004cb45 	.word	0x2004cb45
   10448:	2004cb46 	.word	0x2004cb46
   1044c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10454:	781b      	ldrb	r3, [r3, #0]
   10456:	461a      	mov	r2, r3
   10458:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1045c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10460:	78d9      	ldrb	r1, [r3, #3]
   10462:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046a:	5499      	strb	r1, [r3, r2]
   1046c:	4bd3      	ldr	r3, [pc, #844]	; (107bc <send_radIR+0x8b0>)
   1046e:	781a      	ldrb	r2, [r3, #0]
   10470:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	4413      	add	r3, r2
   1047c:	b2da      	uxtb	r2, r3
   1047e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10486:	701a      	strb	r2, [r3, #0]
   10488:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	781a      	ldrb	r2, [r3, #0]
   10492:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	4413      	add	r3, r2
   1049e:	b2da      	uxtb	r2, r3
   104a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	701a      	strb	r2, [r3, #0]
   104aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	3301      	adds	r3, #1
   104b6:	b2da      	uxtb	r2, r3
   104b8:	f24c 5349 	movw	r3, #50505	; 0xc549
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	701a      	strb	r2, [r3, #0]
   104c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	2bff      	cmp	r3, #255	; 0xff
   104ce:	d105      	bne.n	104dc <send_radIR+0x5d0>
   104d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   104d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d8:	2200      	movs	r2, #0
   104da:	701a      	strb	r2, [r3, #0]
   104dc:	f24c 5349 	movw	r3, #50505	; 0xc549
   104e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e4:	781b      	ldrb	r3, [r3, #0]
   104e6:	461a      	mov	r2, r3
   104e8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	7819      	ldrb	r1, [r3, #0]
   104f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   104f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fa:	5499      	strb	r1, [r3, r2]
   104fc:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10504:	781a      	ldrb	r2, [r3, #0]
   10506:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1050a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050e:	781b      	ldrb	r3, [r3, #0]
   10510:	4413      	add	r3, r2
   10512:	b2da      	uxtb	r2, r3
   10514:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051c:	701a      	strb	r2, [r3, #0]
   1051e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10526:	781a      	ldrb	r2, [r3, #0]
   10528:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	781b      	ldrb	r3, [r3, #0]
   10532:	4413      	add	r3, r2
   10534:	b2da      	uxtb	r2, r3
   10536:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1053a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053e:	701a      	strb	r2, [r3, #0]
   10540:	f24c 5349 	movw	r3, #50505	; 0xc549
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	781b      	ldrb	r3, [r3, #0]
   1054a:	3301      	adds	r3, #1
   1054c:	b2da      	uxtb	r2, r3
   1054e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10556:	701a      	strb	r2, [r3, #0]
   10558:	f24c 5349 	movw	r3, #50505	; 0xc549
   1055c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	2bff      	cmp	r3, #255	; 0xff
   10564:	d105      	bne.n	10572 <send_radIR+0x666>
   10566:	f24c 5349 	movw	r3, #50505	; 0xc549
   1056a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056e:	2200      	movs	r2, #0
   10570:	701a      	strb	r2, [r3, #0]
   10572:	f24c 5349 	movw	r3, #50505	; 0xc549
   10576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	461a      	mov	r2, r3
   1057e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10586:	7859      	ldrb	r1, [r3, #1]
   10588:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	5499      	strb	r1, [r3, r2]
   10592:	4b8b      	ldr	r3, [pc, #556]	; (107c0 <send_radIR+0x8b4>)
   10594:	781a      	ldrb	r2, [r3, #0]
   10596:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1059a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059e:	781b      	ldrb	r3, [r3, #0]
   105a0:	4413      	add	r3, r2
   105a2:	b2da      	uxtb	r2, r3
   105a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ac:	701a      	strb	r2, [r3, #0]
   105ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b6:	781a      	ldrb	r2, [r3, #0]
   105b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c0:	781b      	ldrb	r3, [r3, #0]
   105c2:	4413      	add	r3, r2
   105c4:	b2da      	uxtb	r2, r3
   105c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ce:	701a      	strb	r2, [r3, #0]
   105d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	3301      	adds	r3, #1
   105dc:	b2da      	uxtb	r2, r3
   105de:	f24c 5349 	movw	r3, #50505	; 0xc549
   105e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e6:	701a      	strb	r2, [r3, #0]
   105e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	781b      	ldrb	r3, [r3, #0]
   105f2:	2bff      	cmp	r3, #255	; 0xff
   105f4:	d105      	bne.n	10602 <send_radIR+0x6f6>
   105f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	2200      	movs	r2, #0
   10600:	701a      	strb	r2, [r3, #0]
   10602:	f24c 5349 	movw	r3, #50505	; 0xc549
   10606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	461a      	mov	r2, r3
   1060e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10616:	7899      	ldrb	r1, [r3, #2]
   10618:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1061c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10620:	5499      	strb	r1, [r3, r2]
   10622:	4b68      	ldr	r3, [pc, #416]	; (107c4 <send_radIR+0x8b8>)
   10624:	781a      	ldrb	r2, [r3, #0]
   10626:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1062a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1062e:	781b      	ldrb	r3, [r3, #0]
   10630:	4413      	add	r3, r2
   10632:	b2da      	uxtb	r2, r3
   10634:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063c:	701a      	strb	r2, [r3, #0]
   1063e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10646:	781a      	ldrb	r2, [r3, #0]
   10648:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1064c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10650:	781b      	ldrb	r3, [r3, #0]
   10652:	4413      	add	r3, r2
   10654:	b2da      	uxtb	r2, r3
   10656:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1065a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065e:	701a      	strb	r2, [r3, #0]
   10660:	f24c 5349 	movw	r3, #50505	; 0xc549
   10664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	3301      	adds	r3, #1
   1066c:	b2da      	uxtb	r2, r3
   1066e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	701a      	strb	r2, [r3, #0]
   10678:	f24c 5349 	movw	r3, #50505	; 0xc549
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	781b      	ldrb	r3, [r3, #0]
   10682:	2bff      	cmp	r3, #255	; 0xff
   10684:	d105      	bne.n	10692 <send_radIR+0x786>
   10686:	f24c 5349 	movw	r3, #50505	; 0xc549
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	2200      	movs	r2, #0
   10690:	701a      	strb	r2, [r3, #0]
   10692:	f24c 5349 	movw	r3, #50505	; 0xc549
   10696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069a:	781b      	ldrb	r3, [r3, #0]
   1069c:	461a      	mov	r2, r3
   1069e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a6:	78d9      	ldrb	r1, [r3, #3]
   106a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b0:	5499      	strb	r1, [r3, r2]
   106b2:	4b45      	ldr	r3, [pc, #276]	; (107c8 <send_radIR+0x8bc>)
   106b4:	781a      	ldrb	r2, [r3, #0]
   106b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106be:	781b      	ldrb	r3, [r3, #0]
   106c0:	4413      	add	r3, r2
   106c2:	b2da      	uxtb	r2, r3
   106c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106cc:	701a      	strb	r2, [r3, #0]
   106ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	781a      	ldrb	r2, [r3, #0]
   106d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	4413      	add	r3, r2
   106e4:	b2da      	uxtb	r2, r3
   106e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	701a      	strb	r2, [r3, #0]
   106f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   106f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	3301      	adds	r3, #1
   106fc:	b2da      	uxtb	r2, r3
   106fe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	701a      	strb	r2, [r3, #0]
   10708:	f24c 5349 	movw	r3, #50505	; 0xc549
   1070c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	2bff      	cmp	r3, #255	; 0xff
   10714:	d105      	bne.n	10722 <send_radIR+0x816>
   10716:	f24c 5349 	movw	r3, #50505	; 0xc549
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	2200      	movs	r2, #0
   10720:	701a      	strb	r2, [r3, #0]
   10722:	f24c 5349 	movw	r3, #50505	; 0xc549
   10726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	461a      	mov	r2, r3
   1072e:	f240 5342 	movw	r3, #1346	; 0x542
   10732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10736:	7819      	ldrb	r1, [r3, #0]
   10738:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1073c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10740:	5499      	strb	r1, [r3, r2]
   10742:	f240 5342 	movw	r3, #1346	; 0x542
   10746:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074a:	781a      	ldrb	r2, [r3, #0]
   1074c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10754:	781b      	ldrb	r3, [r3, #0]
   10756:	4413      	add	r3, r2
   10758:	b2da      	uxtb	r2, r3
   1075a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1075e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10762:	701a      	strb	r2, [r3, #0]
   10764:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076c:	781a      	ldrb	r2, [r3, #0]
   1076e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	781b      	ldrb	r3, [r3, #0]
   10778:	4413      	add	r3, r2
   1077a:	b2da      	uxtb	r2, r3
   1077c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10784:	701a      	strb	r2, [r3, #0]
   10786:	f24c 5349 	movw	r3, #50505	; 0xc549
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	781b      	ldrb	r3, [r3, #0]
   10790:	3301      	adds	r3, #1
   10792:	b2da      	uxtb	r2, r3
   10794:	f24c 5349 	movw	r3, #50505	; 0xc549
   10798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079c:	701a      	strb	r2, [r3, #0]
   1079e:	f24c 5349 	movw	r3, #50505	; 0xc549
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	781b      	ldrb	r3, [r3, #0]
   107a8:	2bff      	cmp	r3, #255	; 0xff
   107aa:	d10f      	bne.n	107cc <send_radIR+0x8c0>
   107ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   107b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b4:	2200      	movs	r2, #0
   107b6:	701a      	strb	r2, [r3, #0]
   107b8:	e008      	b.n	107cc <send_radIR+0x8c0>
   107ba:	bf00      	nop
   107bc:	2004cb47 	.word	0x2004cb47
   107c0:	2004cb3d 	.word	0x2004cb3d
   107c4:	2004cb3e 	.word	0x2004cb3e
   107c8:	2004cb3f 	.word	0x2004cb3f
   107cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   107d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d4:	781b      	ldrb	r3, [r3, #0]
   107d6:	461a      	mov	r2, r3
   107d8:	f240 5342 	movw	r3, #1346	; 0x542
   107dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e0:	7859      	ldrb	r1, [r3, #1]
   107e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   107e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ea:	5499      	strb	r1, [r3, r2]
   107ec:	4bc2      	ldr	r3, [pc, #776]	; (10af8 <send_radIR+0xbec>)
   107ee:	781a      	ldrb	r2, [r3, #0]
   107f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f8:	781b      	ldrb	r3, [r3, #0]
   107fa:	4413      	add	r3, r2
   107fc:	b2da      	uxtb	r2, r3
   107fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10806:	701a      	strb	r2, [r3, #0]
   10808:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1080c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10810:	781a      	ldrb	r2, [r3, #0]
   10812:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081a:	781b      	ldrb	r3, [r3, #0]
   1081c:	4413      	add	r3, r2
   1081e:	b2da      	uxtb	r2, r3
   10820:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10828:	701a      	strb	r2, [r3, #0]
   1082a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1082e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	3301      	adds	r3, #1
   10836:	b2da      	uxtb	r2, r3
   10838:	f24c 5349 	movw	r3, #50505	; 0xc549
   1083c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10840:	701a      	strb	r2, [r3, #0]
   10842:	f24c 5349 	movw	r3, #50505	; 0xc549
   10846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084a:	781b      	ldrb	r3, [r3, #0]
   1084c:	2bff      	cmp	r3, #255	; 0xff
   1084e:	d105      	bne.n	1085c <send_radIR+0x950>
   10850:	f24c 5349 	movw	r3, #50505	; 0xc549
   10854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10858:	2200      	movs	r2, #0
   1085a:	701a      	strb	r2, [r3, #0]
   1085c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10864:	781b      	ldrb	r3, [r3, #0]
   10866:	461a      	mov	r2, r3
   10868:	f240 5344 	movw	r3, #1348	; 0x544
   1086c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10870:	7819      	ldrb	r1, [r3, #0]
   10872:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087a:	5499      	strb	r1, [r3, r2]
   1087c:	f240 5344 	movw	r3, #1348	; 0x544
   10880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10884:	781a      	ldrb	r2, [r3, #0]
   10886:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1088a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088e:	781b      	ldrb	r3, [r3, #0]
   10890:	4413      	add	r3, r2
   10892:	b2da      	uxtb	r2, r3
   10894:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089c:	701a      	strb	r2, [r3, #0]
   1089e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a6:	781a      	ldrb	r2, [r3, #0]
   108a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b0:	781b      	ldrb	r3, [r3, #0]
   108b2:	4413      	add	r3, r2
   108b4:	b2da      	uxtb	r2, r3
   108b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108be:	701a      	strb	r2, [r3, #0]
   108c0:	f24c 5349 	movw	r3, #50505	; 0xc549
   108c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c8:	781b      	ldrb	r3, [r3, #0]
   108ca:	3301      	adds	r3, #1
   108cc:	b2da      	uxtb	r2, r3
   108ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   108d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   108dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e0:	781b      	ldrb	r3, [r3, #0]
   108e2:	2bff      	cmp	r3, #255	; 0xff
   108e4:	d105      	bne.n	108f2 <send_radIR+0x9e6>
   108e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   108ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ee:	2200      	movs	r2, #0
   108f0:	701a      	strb	r2, [r3, #0]
   108f2:	f24c 5349 	movw	r3, #50505	; 0xc549
   108f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fa:	781b      	ldrb	r3, [r3, #0]
   108fc:	461a      	mov	r2, r3
   108fe:	f240 5344 	movw	r3, #1348	; 0x544
   10902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10906:	7859      	ldrb	r1, [r3, #1]
   10908:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1090c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10910:	5499      	strb	r1, [r3, r2]
   10912:	4b7a      	ldr	r3, [pc, #488]	; (10afc <send_radIR+0xbf0>)
   10914:	781a      	ldrb	r2, [r3, #0]
   10916:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1091a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091e:	781b      	ldrb	r3, [r3, #0]
   10920:	4413      	add	r3, r2
   10922:	b2da      	uxtb	r2, r3
   10924:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092c:	701a      	strb	r2, [r3, #0]
   1092e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10936:	781a      	ldrb	r2, [r3, #0]
   10938:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1093c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10940:	781b      	ldrb	r3, [r3, #0]
   10942:	4413      	add	r3, r2
   10944:	b2da      	uxtb	r2, r3
   10946:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1094a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094e:	701a      	strb	r2, [r3, #0]
   10950:	f24c 5349 	movw	r3, #50505	; 0xc549
   10954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10958:	781b      	ldrb	r3, [r3, #0]
   1095a:	3301      	adds	r3, #1
   1095c:	b2da      	uxtb	r2, r3
   1095e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10966:	701a      	strb	r2, [r3, #0]
   10968:	f24c 5349 	movw	r3, #50505	; 0xc549
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	781b      	ldrb	r3, [r3, #0]
   10972:	2bff      	cmp	r3, #255	; 0xff
   10974:	d105      	bne.n	10982 <send_radIR+0xa76>
   10976:	f24c 5349 	movw	r3, #50505	; 0xc549
   1097a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097e:	2200      	movs	r2, #0
   10980:	701a      	strb	r2, [r3, #0]
   10982:	f24c 5349 	movw	r3, #50505	; 0xc549
   10986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098a:	781b      	ldrb	r3, [r3, #0]
   1098c:	461a      	mov	r2, r3
   1098e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10996:	7819      	ldrb	r1, [r3, #0]
   10998:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1099c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a0:	5499      	strb	r1, [r3, r2]
   109a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   109a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	3301      	adds	r3, #1
   109ae:	b2da      	uxtb	r2, r3
   109b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b8:	701a      	strb	r2, [r3, #0]
   109ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   109be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	2bff      	cmp	r3, #255	; 0xff
   109c6:	d105      	bne.n	109d4 <send_radIR+0xac8>
   109c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d0:	2200      	movs	r2, #0
   109d2:	701a      	strb	r2, [r3, #0]
   109d4:	f24c 5349 	movw	r3, #50505	; 0xc549
   109d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109dc:	781b      	ldrb	r3, [r3, #0]
   109de:	461a      	mov	r2, r3
   109e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e8:	7819      	ldrb	r1, [r3, #0]
   109ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f2:	5499      	strb	r1, [r3, r2]
   109f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   109f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	3301      	adds	r3, #1
   10a00:	b2da      	uxtb	r2, r3
   10a02:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0a:	701a      	strb	r2, [r3, #0]
   10a0c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a14:	781b      	ldrb	r3, [r3, #0]
   10a16:	2bff      	cmp	r3, #255	; 0xff
   10a18:	d105      	bne.n	10a26 <send_radIR+0xb1a>
   10a1a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a22:	2200      	movs	r2, #0
   10a24:	701a      	strb	r2, [r3, #0]
   10a26:	f242 0339 	movw	r3, #8249	; 0x2039
   10a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a2e:	781b      	ldrb	r3, [r3, #0]
   10a30:	b2db      	uxtb	r3, r3
   10a32:	f003 0310 	and.w	r3, r3, #16
   10a36:	2b00      	cmp	r3, #0
   10a38:	d15a      	bne.n	10af0 <send_radIR+0xbe4>
   10a3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a42:	781b      	ldrb	r3, [r3, #0]
   10a44:	b2db      	uxtb	r3, r3
   10a46:	461a      	mov	r2, r3
   10a48:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a50:	5c9a      	ldrb	r2, [r3, r2]
   10a52:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a5a:	701a      	strb	r2, [r3, #0]
   10a5c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a64:	2200      	movs	r2, #0
   10a66:	701a      	strb	r2, [r3, #0]
   10a68:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a70:	781b      	ldrb	r3, [r3, #0]
   10a72:	b2db      	uxtb	r3, r3
   10a74:	3301      	adds	r3, #1
   10a76:	b2da      	uxtb	r2, r3
   10a78:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a80:	701a      	strb	r2, [r3, #0]
   10a82:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8a:	781b      	ldrb	r3, [r3, #0]
   10a8c:	b2db      	uxtb	r3, r3
   10a8e:	2bff      	cmp	r3, #255	; 0xff
   10a90:	d105      	bne.n	10a9e <send_radIR+0xb92>
   10a92:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	2200      	movs	r2, #0
   10a9c:	701a      	strb	r2, [r3, #0]
   10a9e:	f242 0338 	movw	r3, #8248	; 0x2038
   10aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa6:	f242 0238 	movw	r2, #8248	; 0x2038
   10aaa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10aae:	7812      	ldrb	r2, [r2, #0]
   10ab0:	b2d2      	uxtb	r2, r2
   10ab2:	f042 0201 	orr.w	r2, r2, #1
   10ab6:	b2d2      	uxtb	r2, r2
   10ab8:	701a      	strb	r2, [r3, #0]
   10aba:	f242 0339 	movw	r3, #8249	; 0x2039
   10abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac2:	f242 0239 	movw	r2, #8249	; 0x2039
   10ac6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10aca:	7812      	ldrb	r2, [r2, #0]
   10acc:	b2d2      	uxtb	r2, r2
   10ace:	f042 0210 	orr.w	r2, r2, #16
   10ad2:	b2d2      	uxtb	r2, r2
   10ad4:	701a      	strb	r2, [r3, #0]
   10ad6:	e00b      	b.n	10af0 <send_radIR+0xbe4>
   10ad8:	f24c 5348 	movw	r3, #50504	; 0xc548
   10adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae0:	781b      	ldrb	r3, [r3, #0]
   10ae2:	3301      	adds	r3, #1
   10ae4:	b2da      	uxtb	r2, r3
   10ae6:	f24c 5348 	movw	r3, #50504	; 0xc548
   10aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aee:	701a      	strb	r2, [r3, #0]
}
   10af0:	46bd      	mov	sp, r7
   10af2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10af6:	4770      	bx	lr
   10af8:	20000543 	.word	0x20000543
   10afc:	20000545 	.word	0x20000545

00010b00 <send_takeOff>:

void send_takeOff(void){
   10b00:	b580      	push	{r7, lr}
   10b02:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b04:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b0c:	781b      	ldrb	r3, [r3, #0]
   10b0e:	2b00      	cmp	r3, #0
   10b10:	f000 8200 	beq.w	10f14 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10b14:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b1c:	881b      	ldrh	r3, [r3, #0]
   10b1e:	2b00      	cmp	r3, #0
   10b20:	f040 81f2 	bne.w	10f08 <send_takeOff+0x408>
   10b24:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2c:	681b      	ldr	r3, [r3, #0]
   10b2e:	4618      	mov	r0, r3
   10b30:	f04f 0100 	mov.w	r1, #0
   10b34:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10b38:	f007 fe44 	bl	187c4 <__aeabi_fcmpgt>
   10b3c:	4603      	mov	r3, r0
   10b3e:	2b00      	cmp	r3, #0
   10b40:	f000 81e2 	beq.w	10f08 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10b44:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b4c:	2201      	movs	r2, #1
   10b4e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10b50:	f24c 5340 	movw	r3, #50496	; 0xc540
   10b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b58:	2201      	movs	r2, #1
   10b5a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10b5c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b64:	781a      	ldrb	r2, [r3, #0]
   10b66:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6e:	781b      	ldrb	r3, [r3, #0]
   10b70:	b2db      	uxtb	r3, r3
   10b72:	429a      	cmp	r2, r3
   10b74:	d313      	bcc.n	10b9e <send_takeOff+0x9e>
   10b76:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	b2db      	uxtb	r3, r3
   10b82:	461a      	mov	r2, r3
   10b84:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8c:	781b      	ldrb	r3, [r3, #0]
   10b8e:	1ad3      	subs	r3, r2, r3
   10b90:	33ff      	adds	r3, #255	; 0xff
   10b92:	2b06      	cmp	r3, #6
   10b94:	bfd4      	ite	le
   10b96:	2300      	movle	r3, #0
   10b98:	2301      	movgt	r3, #1
   10b9a:	b2db      	uxtb	r3, r3
   10b9c:	e011      	b.n	10bc2 <send_takeOff+0xc2>
   10b9e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba6:	781b      	ldrb	r3, [r3, #0]
   10ba8:	b2db      	uxtb	r3, r3
   10baa:	461a      	mov	r2, r3
   10bac:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb4:	781b      	ldrb	r3, [r3, #0]
   10bb6:	1ad3      	subs	r3, r2, r3
   10bb8:	2b06      	cmp	r3, #6
   10bba:	bfd4      	ite	le
   10bbc:	2300      	movle	r3, #0
   10bbe:	2301      	movgt	r3, #1
   10bc0:	b2db      	uxtb	r3, r3
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	f000 8194 	beq.w	10ef0 <send_takeOff+0x3f0>
   10bc8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd0:	781b      	ldrb	r3, [r3, #0]
   10bd2:	461a      	mov	r2, r3
   10bd4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bdc:	2105      	movs	r1, #5
   10bde:	5499      	strb	r1, [r3, r2]
   10be0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be8:	781b      	ldrb	r3, [r3, #0]
   10bea:	3301      	adds	r3, #1
   10bec:	b2da      	uxtb	r2, r3
   10bee:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf6:	701a      	strb	r2, [r3, #0]
   10bf8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	2bff      	cmp	r3, #255	; 0xff
   10c04:	d105      	bne.n	10c12 <send_takeOff+0x112>
   10c06:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	2200      	movs	r2, #0
   10c10:	701a      	strb	r2, [r3, #0]
   10c12:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1a:	781b      	ldrb	r3, [r3, #0]
   10c1c:	461a      	mov	r2, r3
   10c1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c26:	2104      	movs	r1, #4
   10c28:	5499      	strb	r1, [r3, r2]
   10c2a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c32:	781b      	ldrb	r3, [r3, #0]
   10c34:	3301      	adds	r3, #1
   10c36:	b2da      	uxtb	r2, r3
   10c38:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c40:	701a      	strb	r2, [r3, #0]
   10c42:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4a:	781b      	ldrb	r3, [r3, #0]
   10c4c:	2bff      	cmp	r3, #255	; 0xff
   10c4e:	d105      	bne.n	10c5c <send_takeOff+0x15c>
   10c50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c58:	2200      	movs	r2, #0
   10c5a:	701a      	strb	r2, [r3, #0]
   10c5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	2204      	movs	r2, #4
   10c66:	701a      	strb	r2, [r3, #0]
   10c68:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	2204      	movs	r2, #4
   10c72:	701a      	strb	r2, [r3, #0]
   10c74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	781b      	ldrb	r3, [r3, #0]
   10c7e:	461a      	mov	r2, r3
   10c80:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c88:	7819      	ldrb	r1, [r3, #0]
   10c8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c92:	5499      	strb	r1, [r3, r2]
   10c94:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c9c:	781a      	ldrb	r2, [r3, #0]
   10c9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca6:	781b      	ldrb	r3, [r3, #0]
   10ca8:	4413      	add	r3, r2
   10caa:	b2da      	uxtb	r2, r3
   10cac:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb4:	701a      	strb	r2, [r3, #0]
   10cb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbe:	781a      	ldrb	r2, [r3, #0]
   10cc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc8:	781b      	ldrb	r3, [r3, #0]
   10cca:	4413      	add	r3, r2
   10ccc:	b2da      	uxtb	r2, r3
   10cce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd6:	701a      	strb	r2, [r3, #0]
   10cd8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce0:	781b      	ldrb	r3, [r3, #0]
   10ce2:	3301      	adds	r3, #1
   10ce4:	b2da      	uxtb	r2, r3
   10ce6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cee:	701a      	strb	r2, [r3, #0]
   10cf0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf8:	781b      	ldrb	r3, [r3, #0]
   10cfa:	2bff      	cmp	r3, #255	; 0xff
   10cfc:	d105      	bne.n	10d0a <send_takeOff+0x20a>
   10cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d06:	2200      	movs	r2, #0
   10d08:	701a      	strb	r2, [r3, #0]
   10d0a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d12:	781b      	ldrb	r3, [r3, #0]
   10d14:	461a      	mov	r2, r3
   10d16:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1e:	7859      	ldrb	r1, [r3, #1]
   10d20:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d28:	5499      	strb	r1, [r3, r2]
   10d2a:	4b7b      	ldr	r3, [pc, #492]	; (10f18 <send_takeOff+0x418>)
   10d2c:	781a      	ldrb	r2, [r3, #0]
   10d2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d36:	781b      	ldrb	r3, [r3, #0]
   10d38:	4413      	add	r3, r2
   10d3a:	b2da      	uxtb	r2, r3
   10d3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d44:	701a      	strb	r2, [r3, #0]
   10d46:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4e:	781a      	ldrb	r2, [r3, #0]
   10d50:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	4413      	add	r3, r2
   10d5c:	b2da      	uxtb	r2, r3
   10d5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d66:	701a      	strb	r2, [r3, #0]
   10d68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d70:	781b      	ldrb	r3, [r3, #0]
   10d72:	3301      	adds	r3, #1
   10d74:	b2da      	uxtb	r2, r3
   10d76:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7e:	701a      	strb	r2, [r3, #0]
   10d80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	781b      	ldrb	r3, [r3, #0]
   10d8a:	2bff      	cmp	r3, #255	; 0xff
   10d8c:	d105      	bne.n	10d9a <send_takeOff+0x29a>
   10d8e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d96:	2200      	movs	r2, #0
   10d98:	701a      	strb	r2, [r3, #0]
   10d9a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	461a      	mov	r2, r3
   10da6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dae:	7819      	ldrb	r1, [r3, #0]
   10db0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db8:	5499      	strb	r1, [r3, r2]
   10dba:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc2:	781b      	ldrb	r3, [r3, #0]
   10dc4:	3301      	adds	r3, #1
   10dc6:	b2da      	uxtb	r2, r3
   10dc8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd0:	701a      	strb	r2, [r3, #0]
   10dd2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dda:	781b      	ldrb	r3, [r3, #0]
   10ddc:	2bff      	cmp	r3, #255	; 0xff
   10dde:	d105      	bne.n	10dec <send_takeOff+0x2ec>
   10de0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de8:	2200      	movs	r2, #0
   10dea:	701a      	strb	r2, [r3, #0]
   10dec:	f24c 5349 	movw	r3, #50505	; 0xc549
   10df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df4:	781b      	ldrb	r3, [r3, #0]
   10df6:	461a      	mov	r2, r3
   10df8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e00:	7819      	ldrb	r1, [r3, #0]
   10e02:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0a:	5499      	strb	r1, [r3, r2]
   10e0c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e14:	781b      	ldrb	r3, [r3, #0]
   10e16:	3301      	adds	r3, #1
   10e18:	b2da      	uxtb	r2, r3
   10e1a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e22:	701a      	strb	r2, [r3, #0]
   10e24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2c:	781b      	ldrb	r3, [r3, #0]
   10e2e:	2bff      	cmp	r3, #255	; 0xff
   10e30:	d105      	bne.n	10e3e <send_takeOff+0x33e>
   10e32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3a:	2200      	movs	r2, #0
   10e3c:	701a      	strb	r2, [r3, #0]
   10e3e:	f242 0339 	movw	r3, #8249	; 0x2039
   10e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e46:	781b      	ldrb	r3, [r3, #0]
   10e48:	b2db      	uxtb	r3, r3
   10e4a:	f003 0310 	and.w	r3, r3, #16
   10e4e:	2b00      	cmp	r3, #0
   10e50:	d15a      	bne.n	10f08 <send_takeOff+0x408>
   10e52:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5a:	781b      	ldrb	r3, [r3, #0]
   10e5c:	b2db      	uxtb	r3, r3
   10e5e:	461a      	mov	r2, r3
   10e60:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e68:	5c9a      	ldrb	r2, [r3, r2]
   10e6a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e72:	701a      	strb	r2, [r3, #0]
   10e74:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7c:	2200      	movs	r2, #0
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e88:	781b      	ldrb	r3, [r3, #0]
   10e8a:	b2db      	uxtb	r3, r3
   10e8c:	3301      	adds	r3, #1
   10e8e:	b2da      	uxtb	r2, r3
   10e90:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e98:	701a      	strb	r2, [r3, #0]
   10e9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea2:	781b      	ldrb	r3, [r3, #0]
   10ea4:	b2db      	uxtb	r3, r3
   10ea6:	2bff      	cmp	r3, #255	; 0xff
   10ea8:	d105      	bne.n	10eb6 <send_takeOff+0x3b6>
   10eaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	2200      	movs	r2, #0
   10eb4:	701a      	strb	r2, [r3, #0]
   10eb6:	f242 0338 	movw	r3, #8248	; 0x2038
   10eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ebe:	f242 0238 	movw	r2, #8248	; 0x2038
   10ec2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ec6:	7812      	ldrb	r2, [r2, #0]
   10ec8:	b2d2      	uxtb	r2, r2
   10eca:	f042 0201 	orr.w	r2, r2, #1
   10ece:	b2d2      	uxtb	r2, r2
   10ed0:	701a      	strb	r2, [r3, #0]
   10ed2:	f242 0339 	movw	r3, #8249	; 0x2039
   10ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eda:	f242 0239 	movw	r2, #8249	; 0x2039
   10ede:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ee2:	7812      	ldrb	r2, [r2, #0]
   10ee4:	b2d2      	uxtb	r2, r2
   10ee6:	f042 0210 	orr.w	r2, r2, #16
   10eea:	b2d2      	uxtb	r2, r2
   10eec:	701a      	strb	r2, [r3, #0]
   10eee:	e00b      	b.n	10f08 <send_takeOff+0x408>
   10ef0:	f24c 5348 	movw	r3, #50504	; 0xc548
   10ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef8:	781b      	ldrb	r3, [r3, #0]
   10efa:	3301      	adds	r3, #1
   10efc:	b2da      	uxtb	r2, r3
   10efe:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f06:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f08:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f10:	2200      	movs	r2, #0
   10f12:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10f14:	bd80      	pop	{r7, pc}
   10f16:	bf00      	nop
   10f18:	2004c52b 	.word	0x2004c52b
   10f1c:	f3af 8000 	nop.w

00010f20 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10f20:	b480      	push	{r7}
   10f22:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10f24:	f242 0317 	movw	r3, #8215	; 0x2017
   10f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f2c:	f242 0217 	movw	r2, #8215	; 0x2017
   10f30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f34:	7812      	ldrb	r2, [r2, #0]
   10f36:	b2d2      	uxtb	r2, r2
   10f38:	f042 0210 	orr.w	r2, r2, #16
   10f3c:	b2d2      	uxtb	r2, r2
   10f3e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10f40:	f242 0331 	movw	r3, #8241	; 0x2031
   10f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f48:	2201      	movs	r2, #1
   10f4a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10f4c:	f242 0333 	movw	r3, #8243	; 0x2033
   10f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f54:	2219      	movs	r2, #25
   10f56:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10f58:	f242 0311 	movw	r3, #8209	; 0x2011
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	f242 0211 	movw	r2, #8209	; 0x2011
   10f64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f68:	7812      	ldrb	r2, [r2, #0]
   10f6a:	b2d2      	uxtb	r2, r2
   10f6c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10f70:	b2d2      	uxtb	r2, r2
   10f72:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f74:	f242 0312 	movw	r3, #8210	; 0x2012
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	f242 0212 	movw	r2, #8210	; 0x2012
   10f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f84:	7812      	ldrb	r2, [r2, #0]
   10f86:	b2d2      	uxtb	r2, r2
   10f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f8c:	b2d2      	uxtb	r2, r2
   10f8e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10f90:	f242 0312 	movw	r3, #8210	; 0x2012
   10f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f98:	f242 0212 	movw	r2, #8210	; 0x2012
   10f9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fa0:	7812      	ldrb	r2, [r2, #0]
   10fa2:	b2d2      	uxtb	r2, r2
   10fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10fa8:	b2d2      	uxtb	r2, r2
   10faa:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10fac:	f242 033a 	movw	r3, #8250	; 0x203a
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	f242 023a 	movw	r2, #8250	; 0x203a
   10fb8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fbc:	7812      	ldrb	r2, [r2, #0]
   10fbe:	b2d2      	uxtb	r2, r2
   10fc0:	f042 0202 	orr.w	r2, r2, #2
   10fc4:	b2d2      	uxtb	r2, r2
   10fc6:	701a      	strb	r2, [r3, #0]
}
   10fc8:	46bd      	mov	sp, r7
   10fca:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fce:	4770      	bx	lr

00010fd0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10fd0:	b480      	push	{r7}
   10fd2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10fd4:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fdc:	781b      	ldrb	r3, [r3, #0]
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d10e      	bne.n	11000 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10fe2:	f242 0312 	movw	r3, #8210	; 0x2012
   10fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fea:	f242 0212 	movw	r2, #8210	; 0x2012
   10fee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff2:	7812      	ldrb	r2, [r2, #0]
   10ff4:	b2d2      	uxtb	r2, r2
   10ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10ffa:	b2d2      	uxtb	r2, r2
   10ffc:	701a      	strb	r2, [r3, #0]
   10ffe:	e047      	b.n	11090 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11000:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11008:	781b      	ldrb	r3, [r3, #0]
   1100a:	2b08      	cmp	r3, #8
   1100c:	d832      	bhi.n	11074 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   1100e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11016:	781b      	ldrb	r3, [r3, #0]
   11018:	f003 0301 	and.w	r3, r3, #1
   1101c:	2b00      	cmp	r3, #0
   1101e:	d00e      	beq.n	1103e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11020:	f242 0312 	movw	r3, #8210	; 0x2012
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	f242 0212 	movw	r2, #8210	; 0x2012
   1102c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11030:	7812      	ldrb	r2, [r2, #0]
   11032:	b2d2      	uxtb	r2, r2
   11034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11038:	b2d2      	uxtb	r2, r2
   1103a:	701a      	strb	r2, [r3, #0]
   1103c:	e00d      	b.n	1105a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1103e:	f242 0312 	movw	r3, #8210	; 0x2012
   11042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11046:	f242 0212 	movw	r2, #8210	; 0x2012
   1104a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1104e:	7812      	ldrb	r2, [r2, #0]
   11050:	b2d2      	uxtb	r2, r2
   11052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11056:	b2d2      	uxtb	r2, r2
   11058:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   1105a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1105e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11062:	781b      	ldrb	r3, [r3, #0]
   11064:	085b      	lsrs	r3, r3, #1
   11066:	b2da      	uxtb	r2, r3
   11068:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1106c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11070:	701a      	strb	r2, [r3, #0]
   11072:	e00d      	b.n	11090 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   11074:	f242 0312 	movw	r3, #8210	; 0x2012
   11078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107c:	f242 0212 	movw	r2, #8210	; 0x2012
   11080:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11084:	7812      	ldrb	r2, [r2, #0]
   11086:	b2d2      	uxtb	r2, r2
   11088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1108c:	b2d2      	uxtb	r2, r2
   1108e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11090:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11098:	781b      	ldrb	r3, [r3, #0]
   1109a:	3301      	adds	r3, #1
   1109c:	b2da      	uxtb	r2, r3
   1109e:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   110a8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b0:	781b      	ldrb	r3, [r3, #0]
   110b2:	2b09      	cmp	r3, #9
   110b4:	d94d      	bls.n	11152 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   110b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   110ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110be:	781a      	ldrb	r2, [r3, #0]
   110c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   110c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c8:	781b      	ldrb	r3, [r3, #0]
   110ca:	b2db      	uxtb	r3, r3
   110cc:	429a      	cmp	r2, r3
   110ce:	d10e      	bne.n	110ee <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   110d0:	f242 0339 	movw	r3, #8249	; 0x2039
   110d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d8:	f242 0239 	movw	r2, #8249	; 0x2039
   110dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110e0:	7812      	ldrb	r2, [r2, #0]
   110e2:	b2d2      	uxtb	r2, r2
   110e4:	f022 0210 	bic.w	r2, r2, #16
   110e8:	b2d2      	uxtb	r2, r2
   110ea:	701a      	strb	r2, [r3, #0]
   110ec:	e031      	b.n	11152 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   110ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
   110f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f6:	781b      	ldrb	r3, [r3, #0]
   110f8:	b2db      	uxtb	r3, r3
   110fa:	461a      	mov	r2, r3
   110fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11104:	5c9a      	ldrb	r2, [r3, r2]
   11106:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1110a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1110e:	701a      	strb	r2, [r3, #0]
   11110:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11118:	2200      	movs	r2, #0
   1111a:	701a      	strb	r2, [r3, #0]
   1111c:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11124:	781b      	ldrb	r3, [r3, #0]
   11126:	b2db      	uxtb	r3, r3
   11128:	3301      	adds	r3, #1
   1112a:	b2da      	uxtb	r2, r3
   1112c:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11134:	701a      	strb	r2, [r3, #0]
   11136:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1113a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1113e:	781b      	ldrb	r3, [r3, #0]
   11140:	b2db      	uxtb	r3, r3
   11142:	2bff      	cmp	r3, #255	; 0xff
   11144:	d105      	bne.n	11152 <__vector_5+0x182>
   11146:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1114a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114e:	2200      	movs	r2, #0
   11150:	701a      	strb	r2, [r3, #0]
    }
  }
}
   11152:	46bd      	mov	sp, r7
   11154:	f85d 7b04 	ldr.w	r7, [sp], #4
   11158:	4770      	bx	lr
   1115a:	bf00      	nop

0001115c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   1115c:	b480      	push	{r7}
   1115e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11160:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11168:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   1116a:	f240 533e 	movw	r3, #1342	; 0x53e
   1116e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11172:	2200      	movs	r2, #0
   11174:	701a      	strb	r2, [r3, #0]
}
   11176:	46bd      	mov	sp, r7
   11178:	f85d 7b04 	ldr.w	r7, [sp], #4
   1117c:	4770      	bx	lr
   1117e:	bf00      	nop

00011180 <link_fbw_send>:

void link_fbw_send(void) {
   11180:	b480      	push	{r7}
   11182:	b083      	sub	sp, #12
   11184:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   11186:	f24c 6384 	movw	r3, #50820	; 0xc684
   1118a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1118e:	781b      	ldrb	r3, [r3, #0]
   11190:	b2db      	uxtb	r3, r3
   11192:	2b00      	cmp	r3, #0
   11194:	d00c      	beq.n	111b0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   11196:	f24c 6385 	movw	r3, #50821	; 0xc685
   1119a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1119e:	781b      	ldrb	r3, [r3, #0]
   111a0:	3301      	adds	r3, #1
   111a2:	b2da      	uxtb	r2, r3
   111a4:	f24c 6385 	movw	r3, #50821	; 0xc685
   111a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ac:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   111ae:	e064      	b.n	1127a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   111b0:	f242 030d 	movw	r3, #8205	; 0x200d
   111b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b8:	2251      	movs	r2, #81	; 0x51
   111ba:	701a      	strb	r2, [r3, #0]
   111bc:	f242 030e 	movw	r3, #8206	; 0x200e
   111c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c4:	781b      	ldrb	r3, [r3, #0]
   111c6:	b2db      	uxtb	r3, r3
   111c8:	b2db      	uxtb	r3, r3
   111ca:	b25b      	sxtb	r3, r3
   111cc:	2b00      	cmp	r3, #0
   111ce:	da05      	bge.n	111dc <link_fbw_send+0x5c>
   111d0:	f242 030f 	movw	r3, #8207	; 0x200f
   111d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d8:	781b      	ldrb	r3, [r3, #0]
   111da:	71fb      	strb	r3, [r7, #7]
   111dc:	f242 030d 	movw	r3, #8205	; 0x200d
   111e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e4:	f242 020d 	movw	r2, #8205	; 0x200d
   111e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ec:	7812      	ldrb	r2, [r2, #0]
   111ee:	b2d2      	uxtb	r2, r2
   111f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   111f4:	b2d2      	uxtb	r2, r2
   111f6:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   111f8:	f24c 6384 	movw	r3, #50820	; 0xc684
   111fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11200:	2201      	movs	r2, #1
   11202:	701a      	strb	r2, [r3, #0]
   11204:	f242 0318 	movw	r3, #8216	; 0x2018
   11208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1120c:	f242 0218 	movw	r2, #8216	; 0x2018
   11210:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11214:	7812      	ldrb	r2, [r2, #0]
   11216:	b2d2      	uxtb	r2, r2
   11218:	f022 0201 	bic.w	r2, r2, #1
   1121c:	b2d2      	uxtb	r2, r2
   1121e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11220:	f24c 6381 	movw	r3, #50817	; 0xc681
   11224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11228:	2200      	movs	r2, #0
   1122a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1122c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11234:	2200      	movs	r2, #0
   11236:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11238:	f24c 6381 	movw	r3, #50817	; 0xc681
   1123c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11240:	781b      	ldrb	r3, [r3, #0]
   11242:	461a      	mov	r2, r3
   11244:	f24c 6368 	movw	r3, #50792	; 0xc668
   11248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124c:	4413      	add	r3, r2
   1124e:	781a      	ldrb	r2, [r3, #0]
   11250:	f24c 6383 	movw	r3, #50819	; 0xc683
   11254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11258:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   1125a:	f242 030f 	movw	r3, #8207	; 0x200f
   1125e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11262:	f24c 6283 	movw	r2, #50819	; 0xc683
   11266:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1126a:	7812      	ldrb	r2, [r2, #0]
   1126c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   1126e:	f24c 637e 	movw	r3, #50814	; 0xc67e
   11272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11276:	2200      	movs	r2, #0
   11278:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1127a:	370c      	adds	r7, #12
   1127c:	46bd      	mov	sp, r7
   1127e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11282:	4770      	bx	lr

00011284 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   11284:	b480      	push	{r7}
   11286:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11288:	f242 032a 	movw	r3, #8234	; 0x202a
   1128c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11290:	f242 022c 	movw	r2, #8236	; 0x202c
   11294:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11298:	8812      	ldrh	r2, [r2, #0]
   1129a:	b292      	uxth	r2, r2
   1129c:	32c8      	adds	r2, #200	; 0xc8
   1129e:	b292      	uxth	r2, r2
   112a0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   112a2:	f242 0336 	movw	r3, #8246	; 0x2036
   112a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112aa:	f242 0236 	movw	r2, #8246	; 0x2036
   112ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112b2:	7812      	ldrb	r2, [r2, #0]
   112b4:	b2d2      	uxtb	r2, r2
   112b6:	f042 0210 	orr.w	r2, r2, #16
   112ba:	b2d2      	uxtb	r2, r2
   112bc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   112be:	f242 0337 	movw	r3, #8247	; 0x2037
   112c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c6:	f242 0237 	movw	r2, #8247	; 0x2037
   112ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112ce:	7812      	ldrb	r2, [r2, #0]
   112d0:	b2d2      	uxtb	r2, r2
   112d2:	f042 0210 	orr.w	r2, r2, #16
   112d6:	b2d2      	uxtb	r2, r2
   112d8:	701a      	strb	r2, [r3, #0]
}
   112da:	46bd      	mov	sp, r7
   112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   112e0:	4770      	bx	lr
   112e2:	bf00      	nop

000112e4 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   112e4:	b480      	push	{r7}
   112e6:	b083      	sub	sp, #12
   112e8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   112ea:	f242 0337 	movw	r3, #8247	; 0x2037
   112ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f2:	f242 0237 	movw	r2, #8247	; 0x2037
   112f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112fa:	7812      	ldrb	r2, [r2, #0]
   112fc:	b2d2      	uxtb	r2, r2
   112fe:	f022 0210 	bic.w	r2, r2, #16
   11302:	b2d2      	uxtb	r2, r2
   11304:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11306:	f24c 6381 	movw	r3, #50817	; 0xc681
   1130a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1130e:	781b      	ldrb	r3, [r3, #0]
   11310:	3301      	adds	r3, #1
   11312:	b2da      	uxtb	r2, r3
   11314:	f24c 6381 	movw	r3, #50817	; 0xc681
   11318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1131c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1131e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11326:	781b      	ldrb	r3, [r3, #0]
   11328:	2b17      	cmp	r3, #23
   1132a:	d162      	bne.n	113f2 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1132c:	f242 030f 	movw	r3, #8207	; 0x200f
   11330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11334:	781b      	ldrb	r3, [r3, #0]
   11336:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11338:	f24c 6382 	movw	r3, #50818	; 0xc682
   1133c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11340:	781b      	ldrb	r3, [r3, #0]
   11342:	79fa      	ldrb	r2, [r7, #7]
   11344:	429a      	cmp	r2, r3
   11346:	d110      	bne.n	1136a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11348:	f24c 637e 	movw	r3, #50814	; 0xc67e
   1134c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11350:	2201      	movs	r2, #1
   11352:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11354:	f24c 6350 	movw	r3, #50768	; 0xc650
   11358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1135c:	7d1a      	ldrb	r2, [r3, #20]
   1135e:	f24c 6380 	movw	r3, #50816	; 0xc680
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	701a      	strb	r2, [r3, #0]
   11368:	e00c      	b.n	11384 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   1136a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1136e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11372:	781b      	ldrb	r3, [r3, #0]
   11374:	b2db      	uxtb	r3, r3
   11376:	3301      	adds	r3, #1
   11378:	b2da      	uxtb	r2, r3
   1137a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1137e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11382:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   11384:	f240 533e 	movw	r3, #1342	; 0x53e
   11388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138c:	2201      	movs	r2, #1
   1138e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11390:	f24c 6384 	movw	r3, #50820	; 0xc684
   11394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11398:	2200      	movs	r2, #0
   1139a:	701a      	strb	r2, [r3, #0]
   1139c:	f242 0318 	movw	r3, #8216	; 0x2018
   113a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a4:	f242 0218 	movw	r2, #8216	; 0x2018
   113a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ac:	7812      	ldrb	r2, [r2, #0]
   113ae:	b2d2      	uxtb	r2, r2
   113b0:	f042 0201 	orr.w	r2, r2, #1
   113b4:	b2d2      	uxtb	r2, r2
   113b6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   113b8:	f242 030d 	movw	r3, #8205	; 0x200d
   113bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c0:	f242 020d 	movw	r2, #8205	; 0x200d
   113c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113c8:	7812      	ldrb	r2, [r2, #0]
   113ca:	b2d2      	uxtb	r2, r2
   113cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   113d0:	b2d2      	uxtb	r2, r2
   113d2:	701a      	strb	r2, [r3, #0]
   113d4:	f242 030d 	movw	r3, #8205	; 0x200d
   113d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113dc:	f242 020d 	movw	r2, #8205	; 0x200d
   113e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113e4:	7812      	ldrb	r2, [r2, #0]
   113e6:	b2d2      	uxtb	r2, r2
   113e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   113ec:	b2d2      	uxtb	r2, r2
   113ee:	701a      	strb	r2, [r3, #0]
    return;
   113f0:	e051      	b.n	11496 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   113f2:	f24c 6381 	movw	r3, #50817	; 0xc681
   113f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113fa:	781b      	ldrb	r3, [r3, #0]
   113fc:	2b15      	cmp	r3, #21
   113fe:	d820      	bhi.n	11442 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11400:	f24c 6381 	movw	r3, #50817	; 0xc681
   11404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11408:	781b      	ldrb	r3, [r3, #0]
   1140a:	461a      	mov	r2, r3
   1140c:	f24c 6368 	movw	r3, #50792	; 0xc668
   11410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11414:	4413      	add	r3, r2
   11416:	781b      	ldrb	r3, [r3, #0]
   11418:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1141a:	f242 030f 	movw	r3, #8207	; 0x200f
   1141e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11422:	79fa      	ldrb	r2, [r7, #7]
   11424:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11426:	f24c 6383 	movw	r3, #50819	; 0xc683
   1142a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1142e:	781a      	ldrb	r2, [r3, #0]
   11430:	79fb      	ldrb	r3, [r7, #7]
   11432:	4053      	eors	r3, r2
   11434:	b2da      	uxtb	r2, r3
   11436:	f24c 6383 	movw	r3, #50819	; 0xc683
   1143a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143e:	701a      	strb	r2, [r3, #0]
   11440:	e009      	b.n	11456 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11442:	f242 030f 	movw	r3, #8207	; 0x200f
   11446:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144a:	f24c 6283 	movw	r2, #50819	; 0xc683
   1144e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11452:	7812      	ldrb	r2, [r2, #0]
   11454:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11456:	f242 030f 	movw	r3, #8207	; 0x200f
   1145a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1145e:	781b      	ldrb	r3, [r3, #0]
   11460:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11462:	f24c 6381 	movw	r3, #50817	; 0xc681
   11466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1146a:	781b      	ldrb	r3, [r3, #0]
   1146c:	1e5a      	subs	r2, r3, #1
   1146e:	f24c 6350 	movw	r3, #50768	; 0xc650
   11472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11476:	4413      	add	r3, r2
   11478:	79fa      	ldrb	r2, [r7, #7]
   1147a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1147c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11484:	781a      	ldrb	r2, [r3, #0]
   11486:	79fb      	ldrb	r3, [r7, #7]
   11488:	4053      	eors	r3, r2
   1148a:	b2da      	uxtb	r2, r3
   1148c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11494:	701a      	strb	r2, [r3, #0]
}
   11496:	370c      	adds	r7, #12
   11498:	46bd      	mov	sp, r7
   1149a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1149e:	4770      	bx	lr

000114a0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   114a0:	b480      	push	{r7}
   114a2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   114a4:	f242 0317 	movw	r3, #8215	; 0x2017
   114a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ac:	f242 0217 	movw	r2, #8215	; 0x2017
   114b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114b4:	7812      	ldrb	r2, [r2, #0]
   114b6:	b2d2      	uxtb	r2, r2
   114b8:	f042 0206 	orr.w	r2, r2, #6
   114bc:	b2d2      	uxtb	r2, r2
   114be:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   114c0:	f242 0317 	movw	r3, #8215	; 0x2017
   114c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c8:	f242 0217 	movw	r2, #8215	; 0x2017
   114cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114d0:	7812      	ldrb	r2, [r2, #0]
   114d2:	b2d2      	uxtb	r2, r2
   114d4:	f042 0201 	orr.w	r2, r2, #1
   114d8:	b2d2      	uxtb	r2, r2
   114da:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   114dc:	f24c 6384 	movw	r3, #50820	; 0xc684
   114e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114e4:	2200      	movs	r2, #0
   114e6:	701a      	strb	r2, [r3, #0]
   114e8:	f242 0318 	movw	r3, #8216	; 0x2018
   114ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f0:	f242 0218 	movw	r2, #8216	; 0x2018
   114f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114f8:	7812      	ldrb	r2, [r2, #0]
   114fa:	b2d2      	uxtb	r2, r2
   114fc:	f042 0201 	orr.w	r2, r2, #1
   11500:	b2d2      	uxtb	r2, r2
   11502:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11504:	f242 0302 	movw	r3, #8194	; 0x2002
   11508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150c:	f242 0202 	movw	r2, #8194	; 0x2002
   11510:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11514:	7812      	ldrb	r2, [r2, #0]
   11516:	b2d2      	uxtb	r2, r2
   11518:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1151c:	b2d2      	uxtb	r2, r2
   1151e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11520:	f24c 6384 	movw	r3, #50820	; 0xc684
   11524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11528:	2200      	movs	r2, #0
   1152a:	701a      	strb	r2, [r3, #0]
   1152c:	f242 0303 	movw	r3, #8195	; 0x2003
   11530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11534:	f242 0203 	movw	r2, #8195	; 0x2003
   11538:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1153c:	7812      	ldrb	r2, [r2, #0]
   1153e:	b2d2      	uxtb	r2, r2
   11540:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11544:	b2d2      	uxtb	r2, r2
   11546:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11548:	f24c 6384 	movw	r3, #50820	; 0xc684
   1154c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11550:	2200      	movs	r2, #0
   11552:	701a      	strb	r2, [r3, #0]
}
   11554:	46bd      	mov	sp, r7
   11556:	f85d 7b04 	ldr.w	r7, [sp], #4
   1155a:	4770      	bx	lr

0001155c <__vector_17>:


SIGNAL(SIG_SPI) {
   1155c:	b580      	push	{r7, lr}
   1155e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11560:	f24c 6384 	movw	r3, #50820	; 0xc684
   11564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11568:	781b      	ldrb	r3, [r3, #0]
   1156a:	b2db      	uxtb	r3, r3
   1156c:	2b01      	cmp	r3, #1
   1156e:	d102      	bne.n	11576 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11570:	f7ff fe88 	bl	11284 <link_fbw_on_spi_it>
   11574:	e00b      	b.n	1158e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11576:	f24c 5328 	movw	r3, #50472	; 0xc528
   1157a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157e:	781b      	ldrb	r3, [r3, #0]
   11580:	3301      	adds	r3, #1
   11582:	b2da      	uxtb	r2, r3
   11584:	f24c 5328 	movw	r3, #50472	; 0xc528
   11588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158c:	701a      	strb	r2, [r3, #0]
}
   1158e:	bd80      	pop	{r7, pc}

00011590 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11590:	b480      	push	{r7}
   11592:	b083      	sub	sp, #12
   11594:	af00      	add	r7, sp, #0
   11596:	4603      	mov	r3, r0
   11598:	6039      	str	r1, [r7, #0]
   1159a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1159c:	79fa      	ldrb	r2, [r7, #7]
   1159e:	f24c 6398 	movw	r3, #50840	; 0xc698
   115a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a6:	6839      	ldr	r1, [r7, #0]
   115a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   115ac:	370c      	adds	r7, #12
   115ae:	46bd      	mov	sp, r7
   115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop

000115b8 <adc_init>:

void 
adc_init( void )
{
   115b8:	b480      	push	{r7}
   115ba:	b083      	sub	sp, #12
   115bc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   115be:	f242 0362 	movw	r3, #8290	; 0x2062
   115c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c6:	2200      	movs	r2, #0
   115c8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   115ca:	f242 0361 	movw	r3, #8289	; 0x2061
   115ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d2:	2200      	movs	r2, #0
   115d4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   115d6:	f242 0307 	movw	r3, #8199	; 0x2007
   115da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115de:	2240      	movs	r2, #64	; 0x40
   115e0:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   115e2:	f242 0308 	movw	r3, #8200	; 0x2008
   115e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ea:	f242 0208 	movw	r2, #8200	; 0x2008
   115ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115f2:	7812      	ldrb	r2, [r2, #0]
   115f4:	b2d2      	uxtb	r2, r2
   115f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   115fa:	b2d2      	uxtb	r2, r2
   115fc:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   115fe:	f242 0306 	movw	r3, #8198	; 0x2006
   11602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11606:	22cf      	movs	r2, #207	; 0xcf
   11608:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1160a:	2300      	movs	r3, #0
   1160c:	71fb      	strb	r3, [r7, #7]
   1160e:	e00a      	b.n	11626 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11610:	79fa      	ldrb	r2, [r7, #7]
   11612:	f24c 6398 	movw	r3, #50840	; 0xc698
   11616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161a:	2100      	movs	r1, #0
   1161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11620:	79fb      	ldrb	r3, [r7, #7]
   11622:	3301      	adds	r3, #1
   11624:	71fb      	strb	r3, [r7, #7]
   11626:	79fb      	ldrb	r3, [r7, #7]
   11628:	2b07      	cmp	r3, #7
   1162a:	d9f1      	bls.n	11610 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1162c:	370c      	adds	r7, #12
   1162e:	46bd      	mov	sp, r7
   11630:	f85d 7b04 	ldr.w	r7, [sp], #4
   11634:	4770      	bx	lr
   11636:	bf00      	nop

00011638 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11638:	b480      	push	{r7}
   1163a:	b085      	sub	sp, #20
   1163c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1163e:	f242 0307 	movw	r3, #8199	; 0x2007
   11642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11646:	781b      	ldrb	r3, [r3, #0]
   11648:	b2db      	uxtb	r3, r3
   1164a:	f003 0307 	and.w	r3, r3, #7
   1164e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11650:	7bfa      	ldrb	r2, [r7, #15]
   11652:	f24c 6398 	movw	r3, #50840	; 0xc698
   11656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1165e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11660:	f242 0304 	movw	r3, #8196	; 0x2004
   11664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11668:	881b      	ldrh	r3, [r3, #0]
   1166a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1166c:	7bfa      	ldrb	r2, [r7, #15]
   1166e:	f24c 6388 	movw	r3, #50824	; 0xc688
   11672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11676:	88f9      	ldrh	r1, [r7, #6]
   11678:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1167c:	68bb      	ldr	r3, [r7, #8]
   1167e:	2b00      	cmp	r3, #0
   11680:	d025      	beq.n	116ce <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11682:	68bb      	ldr	r3, [r7, #8]
   11684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11688:	3301      	adds	r3, #1
   1168a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1168c:	7bbb      	ldrb	r3, [r7, #14]
   1168e:	2b1f      	cmp	r3, #31
   11690:	d901      	bls.n	11696 <__vector_21+0x5e>
   11692:	2300      	movs	r3, #0
   11694:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11696:	68bb      	ldr	r3, [r7, #8]
   11698:	881a      	ldrh	r2, [r3, #0]
   1169a:	7bbb      	ldrb	r3, [r7, #14]
   1169c:	68b9      	ldr	r1, [r7, #8]
   1169e:	005b      	lsls	r3, r3, #1
   116a0:	440b      	add	r3, r1
   116a2:	885b      	ldrh	r3, [r3, #2]
   116a4:	1ad3      	subs	r3, r2, r3
   116a6:	b29a      	uxth	r2, r3
   116a8:	68bb      	ldr	r3, [r7, #8]
   116aa:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   116ac:	7bbb      	ldrb	r3, [r7, #14]
   116ae:	68ba      	ldr	r2, [r7, #8]
   116b0:	005b      	lsls	r3, r3, #1
   116b2:	4413      	add	r3, r2
   116b4:	88fa      	ldrh	r2, [r7, #6]
   116b6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   116b8:	68bb      	ldr	r3, [r7, #8]
   116ba:	881a      	ldrh	r2, [r3, #0]
   116bc:	88fb      	ldrh	r3, [r7, #6]
   116be:	4413      	add	r3, r2
   116c0:	b29a      	uxth	r2, r3
   116c2:	68bb      	ldr	r3, [r7, #8]
   116c4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   116c6:	68bb      	ldr	r3, [r7, #8]
   116c8:	7bba      	ldrb	r2, [r7, #14]
   116ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   116ce:	7bfb      	ldrb	r3, [r7, #15]
   116d0:	3301      	adds	r3, #1
   116d2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   116d4:	7bfb      	ldrb	r3, [r7, #15]
   116d6:	2b07      	cmp	r3, #7
   116d8:	d901      	bls.n	116de <__vector_21+0xa6>
    adc_input = 0;
   116da:	2300      	movs	r3, #0
   116dc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   116de:	f242 0307 	movw	r3, #8199	; 0x2007
   116e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e6:	7bfa      	ldrb	r2, [r7, #15]
   116e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   116ec:	b2d2      	uxtb	r2, r2
   116ee:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   116f0:	f242 0306 	movw	r3, #8198	; 0x2006
   116f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f8:	f242 0206 	movw	r2, #8198	; 0x2006
   116fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11700:	7812      	ldrb	r2, [r2, #0]
   11702:	b2d2      	uxtb	r2, r2
   11704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11708:	b2d2      	uxtb	r2, r2
   1170a:	701a      	strb	r2, [r3, #0]
  
}
   1170c:	3714      	adds	r7, #20
   1170e:	46bd      	mov	sp, r7
   11710:	f85d 7b04 	ldr.w	r7, [sp], #4
   11714:	4770      	bx	lr
   11716:	bf00      	nop

00011718 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11718:	b580      	push	{r7, lr}
   1171a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1171c:	f003 fca8 	bl	15070 <uart1_init>
#endif
  ubx_status = UNINIT;
   11720:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11728:	2200      	movs	r2, #0
   1172a:	701a      	strb	r2, [r3, #0]
}
   1172c:	bd80      	pop	{r7, pc}
   1172e:	bf00      	nop

00011730 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11730:	b580      	push	{r7, lr}
   11732:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11734:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1173c:	781b      	ldrb	r3, [r3, #0]
   1173e:	2b01      	cmp	r3, #1
   11740:	f040 80f9 	bne.w	11936 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11744:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1174c:	781b      	ldrb	r3, [r3, #0]
   1174e:	2b08      	cmp	r3, #8
   11750:	d128      	bne.n	117a4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11752:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11756:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1175a:	685a      	ldr	r2, [r3, #4]
   1175c:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11764:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11766:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1176a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1176e:	689a      	ldr	r2, [r3, #8]
   11770:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11778:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1177a:	4b73      	ldr	r3, [pc, #460]	; (11948 <parse_gps_msg+0x218>)
   1177c:	681b      	ldr	r3, [r3, #0]
   1177e:	4618      	mov	r0, r3
   11780:	f006 fe10 	bl	183a4 <__aeabi_i2f>
   11784:	4603      	mov	r3, r0
   11786:	4618      	mov	r0, r3
   11788:	f04f 0100 	mov.w	r1, #0
   1178c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11790:	f006 ff10 	bl	185b4 <__aeabi_fdiv>
   11794:	4603      	mov	r3, r0
   11796:	461a      	mov	r2, r3
   11798:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1179c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117a0:	601a      	str	r2, [r3, #0]
   117a2:	e0c8      	b.n	11936 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   117a4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ac:	781b      	ldrb	r3, [r3, #0]
   117ae:	2b03      	cmp	r3, #3
   117b0:	d10a      	bne.n	117c8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   117b2:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   117b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ba:	791a      	ldrb	r2, [r3, #4]
   117bc:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   117c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c4:	701a      	strb	r2, [r3, #0]
   117c6:	e0b6      	b.n	11936 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   117c8:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d0:	781b      	ldrb	r3, [r3, #0]
   117d2:	2b12      	cmp	r3, #18
   117d4:	f040 80af 	bne.w	11936 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   117d8:	4b5c      	ldr	r3, [pc, #368]	; (1194c <parse_gps_msg+0x21c>)
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	4618      	mov	r0, r3
   117de:	f006 fddd 	bl	1839c <__aeabi_ui2f>
   117e2:	4603      	mov	r3, r0
   117e4:	4618      	mov	r0, r3
   117e6:	f04f 0100 	mov.w	r1, #0
   117ea:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   117ee:	f006 fee1 	bl	185b4 <__aeabi_fdiv>
   117f2:	4603      	mov	r3, r0
   117f4:	461a      	mov	r2, r3
   117f6:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   117fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117fe:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11800:	4b51      	ldr	r3, [pc, #324]	; (11948 <parse_gps_msg+0x218>)
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	4618      	mov	r0, r3
   11806:	f006 fdcd 	bl	183a4 <__aeabi_i2f>
   1180a:	4603      	mov	r3, r0
   1180c:	4618      	mov	r0, r3
   1180e:	f04f 0100 	mov.w	r1, #0
   11812:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11816:	f006 fecd 	bl	185b4 <__aeabi_fdiv>
   1181a:	4603      	mov	r3, r0
   1181c:	461a      	mov	r2, r3
   1181e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   11822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11826:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11828:	4b49      	ldr	r3, [pc, #292]	; (11950 <parse_gps_msg+0x220>)
   1182a:	681b      	ldr	r3, [r3, #0]
   1182c:	4618      	mov	r0, r3
   1182e:	f006 fdb9 	bl	183a4 <__aeabi_i2f>
   11832:	4603      	mov	r3, r0
   11834:	4618      	mov	r0, r3
   11836:	f006 f975 	bl	17b24 <__aeabi_f2d>
   1183a:	4602      	mov	r2, r0
   1183c:	460b      	mov	r3, r1
   1183e:	4610      	mov	r0, r2
   11840:	4619      	mov	r1, r3
   11842:	a33d      	add	r3, pc, #244	; (adr r3, 11938 <parse_gps_msg+0x208>)
   11844:	e9d3 2300 	ldrd	r2, r3, [r3]
   11848:	f006 faea 	bl	17e20 <__aeabi_ddiv>
   1184c:	4602      	mov	r2, r0
   1184e:	460b      	mov	r3, r1
   11850:	4610      	mov	r0, r2
   11852:	4619      	mov	r1, r3
   11854:	f04f 0200 	mov.w	r2, #0
   11858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1185c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11860:	f006 fade 	bl	17e20 <__aeabi_ddiv>
   11864:	4602      	mov	r2, r0
   11866:	460b      	mov	r3, r1
   11868:	4610      	mov	r0, r2
   1186a:	4619      	mov	r1, r3
   1186c:	a334      	add	r3, pc, #208	; (adr r3, 11940 <parse_gps_msg+0x210>)
   1186e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11872:	f006 f9ab 	bl	17bcc <__aeabi_dmul>
   11876:	4602      	mov	r2, r0
   11878:	460b      	mov	r3, r1
   1187a:	4610      	mov	r0, r2
   1187c:	4619      	mov	r1, r3
   1187e:	f006 fc87 	bl	18190 <__aeabi_d2f>
   11882:	4602      	mov	r2, r0
   11884:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   11888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1188c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   1188e:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	4618      	mov	r0, r3
   1189a:	f006 fd7f 	bl	1839c <__aeabi_ui2f>
   1189e:	4603      	mov	r3, r0
   118a0:	4618      	mov	r0, r3
   118a2:	f04f 0100 	mov.w	r1, #0
   118a6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   118aa:	f006 fe83 	bl	185b4 <__aeabi_fdiv>
   118ae:	4603      	mov	r3, r0
   118b0:	461a      	mov	r2, r3
   118b2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   118b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ba:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   118bc:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   118c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c4:	681a      	ldr	r2, [r3, #0]
   118c6:	f248 531f 	movw	r3, #34079	; 0x851f
   118ca:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   118ce:	fb83 1302 	smull	r1, r3, r3, r2
   118d2:	1159      	asrs	r1, r3, #5
   118d4:	17d3      	asrs	r3, r2, #31
   118d6:	1acb      	subs	r3, r1, r3
   118d8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   118dc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   118e0:	4618      	mov	r0, r3
   118e2:	f006 fd5f 	bl	183a4 <__aeabi_i2f>
   118e6:	4602      	mov	r2, r0
   118e8:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   118ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f0:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   118f2:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   118f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fa:	681a      	ldr	r2, [r3, #0]
   118fc:	f248 531f 	movw	r3, #34079	; 0x851f
   11900:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11904:	fb83 1302 	smull	r1, r3, r3, r2
   11908:	1159      	asrs	r1, r3, #5
   1190a:	17d3      	asrs	r3, r2, #31
   1190c:	1aca      	subs	r2, r1, r3
   1190e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11912:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11916:	4413      	add	r3, r2
   11918:	4618      	mov	r0, r3
   1191a:	f006 fd43 	bl	183a4 <__aeabi_i2f>
   1191e:	4602      	mov	r2, r0
   11920:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   11924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11928:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1192a:	f24c 63de 	movw	r3, #50910	; 0xc6de
   1192e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11932:	2201      	movs	r2, #1
   11934:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11936:	bd80      	pop	{r7, pc}
   11938:	00000000 	.word	0x00000000
   1193c:	40f86a00 	.word	0x40f86a00
   11940:	5a7ed197 	.word	0x5a7ed197
   11944:	400921fb 	.word	0x400921fb
   11948:	2004c6ec 	.word	0x2004c6ec
   1194c:	2004c6f4 	.word	0x2004c6f4
   11950:	2004c6f8 	.word	0x2004c6f8

00011954 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11954:	b480      	push	{r7}
   11956:	b083      	sub	sp, #12
   11958:	af00      	add	r7, sp, #0
   1195a:	4603      	mov	r3, r0
   1195c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1195e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11966:	781b      	ldrb	r3, [r3, #0]
   11968:	2b06      	cmp	r3, #6
   1196a:	d81d      	bhi.n	119a8 <parse_ubx+0x54>
    ck_a += c;
   1196c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11974:	781a      	ldrb	r2, [r3, #0]
   11976:	79fb      	ldrb	r3, [r7, #7]
   11978:	4413      	add	r3, r2
   1197a:	b2da      	uxtb	r2, r3
   1197c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11984:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11986:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   1198a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198e:	781a      	ldrb	r2, [r3, #0]
   11990:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11998:	781b      	ldrb	r3, [r3, #0]
   1199a:	4413      	add	r3, r2
   1199c:	b2da      	uxtb	r2, r3
   1199e:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   119a8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b0:	781b      	ldrb	r3, [r3, #0]
   119b2:	2b00      	cmp	r3, #0
   119b4:	d110      	bne.n	119d8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   119b6:	79fb      	ldrb	r3, [r7, #7]
   119b8:	2bb5      	cmp	r3, #181	; 0xb5
   119ba:	f040 8135 	bne.w	11c28 <parse_ubx+0x2d4>
      ubx_status++;
   119be:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c6:	781b      	ldrb	r3, [r3, #0]
   119c8:	3301      	adds	r3, #1
   119ca:	b2da      	uxtb	r2, r3
   119cc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119d4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   119d6:	e12f      	b.n	11c38 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   119d8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e0:	781b      	ldrb	r3, [r3, #0]
   119e2:	2b01      	cmp	r3, #1
   119e4:	d11c      	bne.n	11a20 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   119e6:	79fb      	ldrb	r3, [r7, #7]
   119e8:	2b62      	cmp	r3, #98	; 0x62
   119ea:	d000      	beq.n	119ee <parse_ubx+0x9a>
      goto error;
   119ec:	e11d      	b.n	11c2a <parse_ubx+0x2d6>
    ck_a = 0;
   119ee:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   119f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f6:	2200      	movs	r2, #0
   119f8:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   119fa:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a02:	2200      	movs	r2, #0
   11a04:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a06:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a0e:	781b      	ldrb	r3, [r3, #0]
   11a10:	3301      	adds	r3, #1
   11a12:	b2da      	uxtb	r2, r3
   11a14:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1c:	701a      	strb	r2, [r3, #0]
   11a1e:	e103      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11a20:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a28:	781b      	ldrb	r3, [r3, #0]
   11a2a:	2b02      	cmp	r3, #2
   11a2c:	d127      	bne.n	11a7e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11a2e:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a36:	781b      	ldrb	r3, [r3, #0]
   11a38:	b2db      	uxtb	r3, r3
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d00c      	beq.n	11a58 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11a3e:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a46:	781b      	ldrb	r3, [r3, #0]
   11a48:	3301      	adds	r3, #1
   11a4a:	b2da      	uxtb	r2, r3
   11a4c:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a54:	701a      	strb	r2, [r3, #0]
      goto error;
   11a56:	e0e8      	b.n	11c2a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11a58:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a60:	79fa      	ldrb	r2, [r7, #7]
   11a62:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a64:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a6c:	781b      	ldrb	r3, [r3, #0]
   11a6e:	3301      	adds	r3, #1
   11a70:	b2da      	uxtb	r2, r3
   11a72:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7a:	701a      	strb	r2, [r3, #0]
   11a7c:	e0d4      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11a7e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a86:	781b      	ldrb	r3, [r3, #0]
   11a88:	2b03      	cmp	r3, #3
   11a8a:	d112      	bne.n	11ab2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11a8c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a94:	79fa      	ldrb	r2, [r7, #7]
   11a96:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a98:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa0:	781b      	ldrb	r3, [r3, #0]
   11aa2:	3301      	adds	r3, #1
   11aa4:	b2da      	uxtb	r2, r3
   11aa6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aae:	701a      	strb	r2, [r3, #0]
   11ab0:	e0ba      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11ab2:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aba:	781b      	ldrb	r3, [r3, #0]
   11abc:	2b04      	cmp	r3, #4
   11abe:	d113      	bne.n	11ae8 <parse_ubx+0x194>
  {
    ubx_len = c;
   11ac0:	79fb      	ldrb	r3, [r7, #7]
   11ac2:	b29a      	uxth	r2, r3
   11ac4:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11acc:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11ace:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	3301      	adds	r3, #1
   11ada:	b2da      	uxtb	r2, r3
   11adc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae4:	701a      	strb	r2, [r3, #0]
   11ae6:	e09f      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11ae8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af0:	781b      	ldrb	r3, [r3, #0]
   11af2:	2b05      	cmp	r3, #5
   11af4:	d12b      	bne.n	11b4e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11af6:	79fb      	ldrb	r3, [r7, #7]
   11af8:	021b      	lsls	r3, r3, #8
   11afa:	b29a      	uxth	r2, r3
   11afc:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b04:	881b      	ldrh	r3, [r3, #0]
   11b06:	b29b      	uxth	r3, r3
   11b08:	4313      	orrs	r3, r2
   11b0a:	b29b      	uxth	r3, r3
   11b0c:	b29a      	uxth	r2, r3
   11b0e:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b16:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11b18:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b20:	881b      	ldrh	r3, [r3, #0]
   11b22:	2bff      	cmp	r3, #255	; 0xff
   11b24:	d900      	bls.n	11b28 <parse_ubx+0x1d4>
      goto error;
   11b26:	e080      	b.n	11c2a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11b28:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b30:	2200      	movs	r2, #0
   11b32:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b34:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3c:	781b      	ldrb	r3, [r3, #0]
   11b3e:	3301      	adds	r3, #1
   11b40:	b2da      	uxtb	r2, r3
   11b42:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4a:	701a      	strb	r2, [r3, #0]
   11b4c:	e06c      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11b4e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b56:	781b      	ldrb	r3, [r3, #0]
   11b58:	2b06      	cmp	r3, #6
   11b5a:	d131      	bne.n	11bc0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11b5c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b64:	781b      	ldrb	r3, [r3, #0]
   11b66:	461a      	mov	r2, r3
   11b68:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b70:	79f9      	ldrb	r1, [r7, #7]
   11b72:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11b74:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b7c:	781b      	ldrb	r3, [r3, #0]
   11b7e:	3301      	adds	r3, #1
   11b80:	b2da      	uxtb	r2, r3
   11b82:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b8a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11b8c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	461a      	mov	r2, r3
   11b98:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba0:	881b      	ldrh	r3, [r3, #0]
   11ba2:	429a      	cmp	r2, r3
   11ba4:	d340      	bcc.n	11c28 <parse_ubx+0x2d4>
      ubx_status++;
   11ba6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	3301      	adds	r3, #1
   11bb2:	b2da      	uxtb	r2, r3
   11bb4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11bbe:	e03b      	b.n	11c38 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11bc0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc8:	781b      	ldrb	r3, [r3, #0]
   11bca:	2b07      	cmp	r3, #7
   11bcc:	d115      	bne.n	11bfa <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11bce:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd6:	781b      	ldrb	r3, [r3, #0]
   11bd8:	79fa      	ldrb	r2, [r7, #7]
   11bda:	429a      	cmp	r2, r3
   11bdc:	d000      	beq.n	11be0 <parse_ubx+0x28c>
      goto error;
   11bde:	e024      	b.n	11c2a <parse_ubx+0x2d6>
    ubx_status++;
   11be0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be8:	781b      	ldrb	r3, [r3, #0]
   11bea:	3301      	adds	r3, #1
   11bec:	b2da      	uxtb	r2, r3
   11bee:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf6:	701a      	strb	r2, [r3, #0]
   11bf8:	e016      	b.n	11c28 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11bfa:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c02:	781b      	ldrb	r3, [r3, #0]
   11c04:	2b08      	cmp	r3, #8
   11c06:	d10f      	bne.n	11c28 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c08:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c10:	781b      	ldrb	r3, [r3, #0]
   11c12:	79fa      	ldrb	r2, [r7, #7]
   11c14:	429a      	cmp	r2, r3
   11c16:	d000      	beq.n	11c1a <parse_ubx+0x2c6>
      goto error;
   11c18:	e007      	b.n	11c2a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11c1a:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c22:	2201      	movs	r2, #1
   11c24:	701a      	strb	r2, [r3, #0]
    goto restart;
   11c26:	e000      	b.n	11c2a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11c28:	e006      	b.n	11c38 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11c2a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c32:	2200      	movs	r2, #0
   11c34:	701a      	strb	r2, [r3, #0]
  return;
   11c36:	bf00      	nop
}
   11c38:	370c      	adds	r7, #12
   11c3a:	46bd      	mov	sp, r7
   11c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c40:	4770      	bx	lr
   11c42:	bf00      	nop

00011c44 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11c44:	b580      	push	{r7, lr}
   11c46:	b082      	sub	sp, #8
   11c48:	af00      	add	r7, sp, #0
   11c4a:	f242 039c 	movw	r3, #8348	; 0x209c
   11c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c52:	781b      	ldrb	r3, [r3, #0]
   11c54:	71fb      	strb	r3, [r7, #7]
   11c56:	79fb      	ldrb	r3, [r7, #7]
   11c58:	4618      	mov	r0, r3
   11c5a:	f7ff fe7b 	bl	11954 <parse_ubx>
   11c5e:	3708      	adds	r7, #8
   11c60:	46bd      	mov	sp, r7
   11c62:	bd80      	pop	{r7, pc}
   11c64:	f3af 8000 	nop.w

00011c68 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11c68:	b580      	push	{r7, lr}
   11c6a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11c6c:	f240 5348 	movw	r3, #1352	; 0x548
   11c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c74:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11c78:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11c7c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11c7e:	2001      	movs	r0, #1
   11c80:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11c84:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11c88:	f7ff fc82 	bl	11590 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11c8c:	2002      	movs	r0, #2
   11c8e:	f64c 0130 	movw	r1, #51248	; 0xc830
   11c92:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11c96:	f7ff fc7b 	bl	11590 <adc_buf_channel>
}
   11c9a:	bd80      	pop	{r7, pc}

00011c9c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11c9c:	b480      	push	{r7}
   11c9e:	b083      	sub	sp, #12
   11ca0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11ca2:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11caa:	881b      	ldrh	r3, [r3, #0]
   11cac:	095b      	lsrs	r3, r3, #5
   11cae:	b29b      	uxth	r3, r3
   11cb0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11cb2:	f64c 0330 	movw	r3, #51248	; 0xc830
   11cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cba:	881b      	ldrh	r3, [r3, #0]
   11cbc:	095b      	lsrs	r3, r3, #5
   11cbe:	b29b      	uxth	r3, r3
   11cc0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11cc2:	88fb      	ldrh	r3, [r7, #6]
   11cc4:	425b      	negs	r3, r3
   11cc6:	b29a      	uxth	r2, r3
   11cc8:	88bb      	ldrh	r3, [r7, #4]
   11cca:	1ad3      	subs	r3, r2, r3
   11ccc:	b29a      	uxth	r2, r3
   11cce:	f240 5342 	movw	r3, #1346	; 0x542
   11cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd6:	881b      	ldrh	r3, [r3, #0]
   11cd8:	b29b      	uxth	r3, r3
   11cda:	1ad3      	subs	r3, r2, r3
   11cdc:	b29b      	uxth	r3, r3
   11cde:	b29a      	uxth	r2, r3
   11ce0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce8:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11cea:	88ba      	ldrh	r2, [r7, #4]
   11cec:	88fb      	ldrh	r3, [r7, #6]
   11cee:	1ad3      	subs	r3, r2, r3
   11cf0:	b29a      	uxth	r2, r3
   11cf2:	f240 5344 	movw	r3, #1348	; 0x544
   11cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfa:	881b      	ldrh	r3, [r3, #0]
   11cfc:	b29b      	uxth	r3, r3
   11cfe:	1ad3      	subs	r3, r2, r3
   11d00:	b29b      	uxth	r3, r3
   11d02:	b29a      	uxth	r2, r3
   11d04:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d0c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d0e:	370c      	adds	r7, #12
   11d10:	46bd      	mov	sp, r7
   11d12:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d16:	4770      	bx	lr

00011d18 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11d18:	b580      	push	{r7, lr}
   11d1a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11d1c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d24:	881b      	ldrh	r3, [r3, #0]
   11d26:	b29b      	uxth	r3, r3
   11d28:	425b      	negs	r3, r3
   11d2a:	b29b      	uxth	r3, r3
   11d2c:	b29a      	uxth	r2, r3
   11d2e:	f240 5340 	movw	r3, #1344	; 0x540
   11d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d36:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11d38:	f240 5340 	movw	r3, #1344	; 0x540
   11d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d40:	881b      	ldrh	r3, [r3, #0]
   11d42:	b21b      	sxth	r3, r3
   11d44:	4618      	mov	r0, r3
   11d46:	f005 fedb 	bl	17b00 <__aeabi_i2d>
   11d4a:	4602      	mov	r2, r0
   11d4c:	460b      	mov	r3, r1
   11d4e:	f04f 0000 	mov.w	r0, #0
   11d52:	f04f 0100 	mov.w	r1, #0
   11d56:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11d5a:	f006 f861 	bl	17e20 <__aeabi_ddiv>
   11d5e:	4602      	mov	r2, r0
   11d60:	460b      	mov	r3, r1
   11d62:	4610      	mov	r0, r2
   11d64:	4619      	mov	r1, r3
   11d66:	f006 fa13 	bl	18190 <__aeabi_d2f>
   11d6a:	4602      	mov	r2, r0
   11d6c:	f240 5348 	movw	r3, #1352	; 0x548
   11d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d74:	601a      	str	r2, [r3, #0]
}
   11d76:	bd80      	pop	{r7, pc}

00011d78 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11d78:	b590      	push	{r4, r7, lr}
   11d7a:	b083      	sub	sp, #12
   11d7c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11d7e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d86:	681a      	ldr	r2, [r3, #0]
   11d88:	f64c 0374 	movw	r3, #51316	; 0xc874
   11d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d90:	681b      	ldr	r3, [r3, #0]
   11d92:	4610      	mov	r0, r2
   11d94:	4619      	mov	r1, r3
   11d96:	f006 fa4f 	bl	18238 <__aeabi_fsub>
   11d9a:	4603      	mov	r3, r0
   11d9c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11d9e:	f240 534c 	movw	r3, #1356	; 0x54c
   11da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da6:	681b      	ldr	r3, [r3, #0]
   11da8:	4618      	mov	r0, r3
   11daa:	6879      	ldr	r1, [r7, #4]
   11dac:	f006 fb4e 	bl	1844c <__aeabi_fmul>
   11db0:	4603      	mov	r3, r0
   11db2:	4618      	mov	r0, r3
   11db4:	f04f 0100 	mov.w	r1, #0
   11db8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11dbc:	f006 fce4 	bl	18788 <__aeabi_fcmplt>
   11dc0:	4603      	mov	r3, r0
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	d002      	beq.n	11dcc <roll_pitch_pid_run+0x54>
   11dc6:	f64d 2280 	movw	r2, #55936	; 0xda80
   11dca:	e026      	b.n	11e1a <roll_pitch_pid_run+0xa2>
   11dcc:	f240 534c 	movw	r3, #1356	; 0x54c
   11dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	4618      	mov	r0, r3
   11dd8:	6879      	ldr	r1, [r7, #4]
   11dda:	f006 fb37 	bl	1844c <__aeabi_fmul>
   11dde:	4603      	mov	r3, r0
   11de0:	4618      	mov	r0, r3
   11de2:	f04f 0100 	mov.w	r1, #0
   11de6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11dea:	f006 fceb 	bl	187c4 <__aeabi_fcmpgt>
   11dee:	4603      	mov	r3, r0
   11df0:	2b00      	cmp	r3, #0
   11df2:	d002      	beq.n	11dfa <roll_pitch_pid_run+0x82>
   11df4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11df8:	e00e      	b.n	11e18 <roll_pitch_pid_run+0xa0>
   11dfa:	f240 534c 	movw	r3, #1356	; 0x54c
   11dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e02:	681b      	ldr	r3, [r3, #0]
   11e04:	4618      	mov	r0, r3
   11e06:	6879      	ldr	r1, [r7, #4]
   11e08:	f006 fb20 	bl	1844c <__aeabi_fmul>
   11e0c:	4603      	mov	r3, r0
   11e0e:	4618      	mov	r0, r3
   11e10:	f006 fce2 	bl	187d8 <__aeabi_f2iz>
   11e14:	4603      	mov	r3, r0
   11e16:	b29b      	uxth	r3, r3
   11e18:	b29a      	uxth	r2, r3
   11e1a:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e22:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11e24:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e2c:	681b      	ldr	r3, [r3, #0]
   11e2e:	4618      	mov	r0, r3
   11e30:	f04f 0100 	mov.w	r1, #0
   11e34:	f006 fca8 	bl	18788 <__aeabi_fcmplt>
   11e38:	4603      	mov	r3, r0
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	d006      	beq.n	11e4c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11e3e:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e46:	f04f 0200 	mov.w	r2, #0
   11e4a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11e4c:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e54:	681a      	ldr	r2, [r3, #0]
   11e56:	f64c 0378 	movw	r3, #51320	; 0xc878
   11e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e5e:	681b      	ldr	r3, [r3, #0]
   11e60:	4610      	mov	r0, r2
   11e62:	4619      	mov	r1, r3
   11e64:	f006 f9e8 	bl	18238 <__aeabi_fsub>
   11e68:	4603      	mov	r3, r0
   11e6a:	461c      	mov	r4, r3
   11e6c:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e74:	681b      	ldr	r3, [r3, #0]
   11e76:	4618      	mov	r0, r3
   11e78:	f04f 0100 	mov.w	r1, #0
   11e7c:	f006 fc84 	bl	18788 <__aeabi_fcmplt>
   11e80:	4603      	mov	r3, r0
   11e82:	2b00      	cmp	r3, #0
   11e84:	d007      	beq.n	11e96 <roll_pitch_pid_run+0x11e>
   11e86:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11e94:	e004      	b.n	11ea0 <roll_pitch_pid_run+0x128>
   11e96:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9e:	681a      	ldr	r2, [r3, #0]
   11ea0:	f64c 0384 	movw	r3, #51332	; 0xc884
   11ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	4610      	mov	r0, r2
   11eac:	4619      	mov	r1, r3
   11eae:	f006 facd 	bl	1844c <__aeabi_fmul>
   11eb2:	4603      	mov	r3, r0
   11eb4:	4620      	mov	r0, r4
   11eb6:	4619      	mov	r1, r3
   11eb8:	f006 f9be 	bl	18238 <__aeabi_fsub>
   11ebc:	4603      	mov	r3, r0
   11ebe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11ec2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11ec4:	f240 5350 	movw	r3, #1360	; 0x550
   11ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ecc:	681b      	ldr	r3, [r3, #0]
   11ece:	4618      	mov	r0, r3
   11ed0:	6879      	ldr	r1, [r7, #4]
   11ed2:	f006 fabb 	bl	1844c <__aeabi_fmul>
   11ed6:	4603      	mov	r3, r0
   11ed8:	4618      	mov	r0, r3
   11eda:	f04f 0100 	mov.w	r1, #0
   11ede:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11ee2:	f006 fc51 	bl	18788 <__aeabi_fcmplt>
   11ee6:	4603      	mov	r3, r0
   11ee8:	2b00      	cmp	r3, #0
   11eea:	d002      	beq.n	11ef2 <roll_pitch_pid_run+0x17a>
   11eec:	f64d 2280 	movw	r2, #55936	; 0xda80
   11ef0:	e026      	b.n	11f40 <roll_pitch_pid_run+0x1c8>
   11ef2:	f240 5350 	movw	r3, #1360	; 0x550
   11ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efa:	681b      	ldr	r3, [r3, #0]
   11efc:	4618      	mov	r0, r3
   11efe:	6879      	ldr	r1, [r7, #4]
   11f00:	f006 faa4 	bl	1844c <__aeabi_fmul>
   11f04:	4603      	mov	r3, r0
   11f06:	4618      	mov	r0, r3
   11f08:	f04f 0100 	mov.w	r1, #0
   11f0c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f10:	f006 fc58 	bl	187c4 <__aeabi_fcmpgt>
   11f14:	4603      	mov	r3, r0
   11f16:	2b00      	cmp	r3, #0
   11f18:	d002      	beq.n	11f20 <roll_pitch_pid_run+0x1a8>
   11f1a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f1e:	e00e      	b.n	11f3e <roll_pitch_pid_run+0x1c6>
   11f20:	f240 5350 	movw	r3, #1360	; 0x550
   11f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f28:	681b      	ldr	r3, [r3, #0]
   11f2a:	4618      	mov	r0, r3
   11f2c:	6879      	ldr	r1, [r7, #4]
   11f2e:	f006 fa8d 	bl	1844c <__aeabi_fmul>
   11f32:	4603      	mov	r3, r0
   11f34:	4618      	mov	r0, r3
   11f36:	f006 fc4f 	bl	187d8 <__aeabi_f2iz>
   11f3a:	4603      	mov	r3, r0
   11f3c:	b29b      	uxth	r3, r3
   11f3e:	b29a      	uxth	r2, r3
   11f40:	f64c 0380 	movw	r3, #51328	; 0xc880
   11f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f48:	801a      	strh	r2, [r3, #0]
}
   11f4a:	370c      	adds	r7, #12
   11f4c:	46bd      	mov	sp, r7
   11f4e:	bd90      	pop	{r4, r7, pc}

00011f50 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11f50:	b580      	push	{r7, lr}
   11f52:	b082      	sub	sp, #8
   11f54:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11f56:	f64c 3338 	movw	r3, #52024	; 0xcb38
   11f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f5e:	681a      	ldr	r2, [r3, #0]
   11f60:	f64c 038c 	movw	r3, #51340	; 0xc88c
   11f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f68:	681b      	ldr	r3, [r3, #0]
   11f6a:	4610      	mov	r0, r2
   11f6c:	4619      	mov	r1, r3
   11f6e:	f006 f963 	bl	18238 <__aeabi_fsub>
   11f72:	4603      	mov	r3, r0
   11f74:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11f76:	e013      	b.n	11fa0 <course_pid_run+0x50>
   11f78:	6878      	ldr	r0, [r7, #4]
   11f7a:	f005 fdd3 	bl	17b24 <__aeabi_f2d>
   11f7e:	4602      	mov	r2, r0
   11f80:	460b      	mov	r3, r1
   11f82:	4610      	mov	r0, r2
   11f84:	4619      	mov	r1, r3
   11f86:	a348      	add	r3, pc, #288	; (adr r3, 120a8 <course_pid_run+0x158>)
   11f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f8c:	f005 fc6a 	bl	17864 <__aeabi_dsub>
   11f90:	4602      	mov	r2, r0
   11f92:	460b      	mov	r3, r1
   11f94:	4610      	mov	r0, r2
   11f96:	4619      	mov	r1, r3
   11f98:	f006 f8fa 	bl	18190 <__aeabi_d2f>
   11f9c:	4603      	mov	r3, r0
   11f9e:	607b      	str	r3, [r7, #4]
   11fa0:	6878      	ldr	r0, [r7, #4]
   11fa2:	f005 fdbf 	bl	17b24 <__aeabi_f2d>
   11fa6:	4602      	mov	r2, r0
   11fa8:	460b      	mov	r3, r1
   11faa:	4610      	mov	r0, r2
   11fac:	4619      	mov	r1, r3
   11fae:	a340      	add	r3, pc, #256	; (adr r3, 120b0 <course_pid_run+0x160>)
   11fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fb4:	f006 f89a 	bl	180ec <__aeabi_dcmpgt>
   11fb8:	4603      	mov	r3, r0
   11fba:	2b00      	cmp	r3, #0
   11fbc:	d1dc      	bne.n	11f78 <course_pid_run+0x28>
   11fbe:	e013      	b.n	11fe8 <course_pid_run+0x98>
   11fc0:	6878      	ldr	r0, [r7, #4]
   11fc2:	f005 fdaf 	bl	17b24 <__aeabi_f2d>
   11fc6:	4602      	mov	r2, r0
   11fc8:	460b      	mov	r3, r1
   11fca:	4610      	mov	r0, r2
   11fcc:	4619      	mov	r1, r3
   11fce:	a336      	add	r3, pc, #216	; (adr r3, 120a8 <course_pid_run+0x158>)
   11fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fd4:	f005 fc48 	bl	17868 <__adddf3>
   11fd8:	4602      	mov	r2, r0
   11fda:	460b      	mov	r3, r1
   11fdc:	4610      	mov	r0, r2
   11fde:	4619      	mov	r1, r3
   11fe0:	f006 f8d6 	bl	18190 <__aeabi_d2f>
   11fe4:	4603      	mov	r3, r0
   11fe6:	607b      	str	r3, [r7, #4]
   11fe8:	6878      	ldr	r0, [r7, #4]
   11fea:	f005 fd9b 	bl	17b24 <__aeabi_f2d>
   11fee:	4602      	mov	r2, r0
   11ff0:	460b      	mov	r3, r1
   11ff2:	4610      	mov	r0, r2
   11ff4:	4619      	mov	r1, r3
   11ff6:	a330      	add	r3, pc, #192	; (adr r3, 120b8 <course_pid_run+0x168>)
   11ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ffc:	f006 f858 	bl	180b0 <__aeabi_dcmplt>
   12000:	4603      	mov	r3, r0
   12002:	2b00      	cmp	r3, #0
   12004:	d1dc      	bne.n	11fc0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   12006:	f240 5358 	movw	r3, #1368	; 0x558
   1200a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1200e:	681b      	ldr	r3, [r3, #0]
   12010:	4618      	mov	r0, r3
   12012:	6879      	ldr	r1, [r7, #4]
   12014:	f006 fa1a 	bl	1844c <__aeabi_fmul>
   12018:	4603      	mov	r3, r0
   1201a:	461a      	mov	r2, r3
   1201c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12020:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12024:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   12026:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1202a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1202e:	681a      	ldr	r2, [r3, #0]
   12030:	f240 535c 	movw	r3, #1372	; 0x55c
   12034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12038:	681b      	ldr	r3, [r3, #0]
   1203a:	4610      	mov	r0, r2
   1203c:	4619      	mov	r1, r3
   1203e:	f006 fbc1 	bl	187c4 <__aeabi_fcmpgt>
   12042:	4603      	mov	r3, r0
   12044:	2b00      	cmp	r3, #0
   12046:	d00a      	beq.n	1205e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12048:	f240 535c 	movw	r3, #1372	; 0x55c
   1204c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12050:	681a      	ldr	r2, [r3, #0]
   12052:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1205a:	601a      	str	r2, [r3, #0]
   1205c:	e01e      	b.n	1209c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   1205e:	f240 535c 	movw	r3, #1372	; 0x55c
   12062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12066:	681b      	ldr	r3, [r3, #0]
   12068:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1206c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12074:	681b      	ldr	r3, [r3, #0]
   12076:	4610      	mov	r0, r2
   12078:	4619      	mov	r1, r3
   1207a:	f006 fba3 	bl	187c4 <__aeabi_fcmpgt>
   1207e:	4603      	mov	r3, r0
   12080:	2b00      	cmp	r3, #0
   12082:	d00b      	beq.n	1209c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   12084:	f240 535c 	movw	r3, #1372	; 0x55c
   12088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12092:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1209a:	601a      	str	r2, [r3, #0]
}
   1209c:	3708      	adds	r7, #8
   1209e:	46bd      	mov	sp, r7
   120a0:	bd80      	pop	{r7, pc}
   120a2:	bf00      	nop
   120a4:	f3af 8000 	nop.w
   120a8:	54442d18 	.word	0x54442d18
   120ac:	401921fb 	.word	0x401921fb
   120b0:	54442d18 	.word	0x54442d18
   120b4:	400921fb 	.word	0x400921fb
   120b8:	54442d18 	.word	0x54442d18
   120bc:	c00921fb 	.word	0xc00921fb

000120c0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   120c0:	b5b0      	push	{r4, r5, r7, lr}
   120c2:	b082      	sub	sp, #8
   120c4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   120c6:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   120ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ce:	681a      	ldr	r2, [r3, #0]
   120d0:	f64c 0390 	movw	r3, #51344	; 0xc890
   120d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	4610      	mov	r0, r2
   120dc:	4619      	mov	r1, r3
   120de:	f006 f8ab 	bl	18238 <__aeabi_fsub>
   120e2:	4603      	mov	r3, r0
   120e4:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   120e6:	f24c 532f 	movw	r3, #50479	; 0xc52f
   120ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ee:	781b      	ldrb	r3, [r3, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	f000 80a8 	beq.w	12246 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   120f6:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   120fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120fe:	881b      	ldrh	r3, [r3, #0]
   12100:	b29a      	uxth	r2, r3
   12102:	f64c 037c 	movw	r3, #51324	; 0xc87c
   12106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1210a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   1210c:	f240 5364 	movw	r3, #1380	; 0x564
   12110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12114:	681a      	ldr	r2, [r3, #0]
   12116:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1211a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	4610      	mov	r0, r2
   12122:	4619      	mov	r1, r3
   12124:	f006 f992 	bl	1844c <__aeabi_fmul>
   12128:	4603      	mov	r3, r0
   1212a:	4618      	mov	r0, r3
   1212c:	6879      	ldr	r1, [r7, #4]
   1212e:	f006 f885 	bl	1823c <__addsf3>
   12132:	4603      	mov	r3, r0
   12134:	461a      	mov	r2, r3
   12136:	f240 5360 	movw	r3, #1376	; 0x560
   1213a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1213e:	681b      	ldr	r3, [r3, #0]
   12140:	4610      	mov	r0, r2
   12142:	4619      	mov	r1, r3
   12144:	f006 f982 	bl	1844c <__aeabi_fmul>
   12148:	4603      	mov	r3, r0
   1214a:	461a      	mov	r2, r3
   1214c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12154:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   12156:	f64c 0378 	movw	r3, #51320	; 0xc878
   1215a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1215e:	681a      	ldr	r2, [r3, #0]
   12160:	f240 5368 	movw	r3, #1384	; 0x568
   12164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12168:	681b      	ldr	r3, [r3, #0]
   1216a:	4610      	mov	r0, r2
   1216c:	4619      	mov	r1, r3
   1216e:	f006 fb29 	bl	187c4 <__aeabi_fcmpgt>
   12172:	4603      	mov	r3, r0
   12174:	2b00      	cmp	r3, #0
   12176:	d009      	beq.n	1218c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12178:	f240 5368 	movw	r3, #1384	; 0x568
   1217c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12180:	681a      	ldr	r2, [r3, #0]
   12182:	f64c 0378 	movw	r3, #51320	; 0xc878
   12186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   1218c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12194:	681a      	ldr	r2, [r3, #0]
   12196:	f240 536c 	movw	r3, #1388	; 0x56c
   1219a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1219e:	681b      	ldr	r3, [r3, #0]
   121a0:	4610      	mov	r0, r2
   121a2:	4619      	mov	r1, r3
   121a4:	f006 faf0 	bl	18788 <__aeabi_fcmplt>
   121a8:	4603      	mov	r3, r0
   121aa:	2b00      	cmp	r3, #0
   121ac:	d009      	beq.n	121c2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   121ae:	f240 536c 	movw	r3, #1388	; 0x56c
   121b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b6:	681a      	ldr	r2, [r3, #0]
   121b8:	f64c 0378 	movw	r3, #51320	; 0xc878
   121bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   121c2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	4618      	mov	r0, r3
   121ce:	6879      	ldr	r1, [r7, #4]
   121d0:	f006 f834 	bl	1823c <__addsf3>
   121d4:	4603      	mov	r3, r0
   121d6:	461a      	mov	r2, r3
   121d8:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   121e2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ea:	681b      	ldr	r3, [r3, #0]
   121ec:	4618      	mov	r0, r3
   121ee:	f04f 0100 	mov.w	r1, #0
   121f2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   121f6:	f006 fae5 	bl	187c4 <__aeabi_fcmpgt>
   121fa:	4603      	mov	r3, r0
   121fc:	2b00      	cmp	r3, #0
   121fe:	d008      	beq.n	12212 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12200:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12208:	f04f 0200 	mov.w	r2, #0
   1220c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12210:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12212:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	4618      	mov	r0, r3
   1221e:	f04f 0100 	mov.w	r1, #0
   12222:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12226:	f006 faaf 	bl	18788 <__aeabi_fcmplt>
   1222a:	4603      	mov	r3, r0
   1222c:	2b00      	cmp	r3, #0
   1222e:	d100      	bne.n	12232 <climb_pid_run+0x172>
   12230:	e109      	b.n	12446 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12232:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1223a:	f04f 0200 	mov.w	r2, #0
   1223e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12242:	601a      	str	r2, [r3, #0]
   12244:	e0ff      	b.n	12446 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12246:	f64c 0390 	movw	r3, #51344	; 0xc890
   1224a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1224e:	681b      	ldr	r3, [r3, #0]
   12250:	4618      	mov	r0, r3
   12252:	f04f 0100 	mov.w	r1, #0
   12256:	f006 fab5 	bl	187c4 <__aeabi_fcmpgt>
   1225a:	4603      	mov	r3, r0
   1225c:	2b00      	cmp	r3, #0
   1225e:	d010      	beq.n	12282 <climb_pid_run+0x1c2>
   12260:	f64c 0390 	movw	r3, #51344	; 0xc890
   12264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12268:	681a      	ldr	r2, [r3, #0]
   1226a:	f240 5354 	movw	r3, #1364	; 0x554
   1226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	4610      	mov	r0, r2
   12276:	4619      	mov	r1, r3
   12278:	f006 f8e8 	bl	1844c <__aeabi_fmul>
   1227c:	4603      	mov	r3, r0
   1227e:	461a      	mov	r2, r3
   12280:	e001      	b.n	12286 <climb_pid_run+0x1c6>
   12282:	f04f 0200 	mov.w	r2, #0
   12286:	f64c 0388 	movw	r3, #51336	; 0xc888
   1228a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12290:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   12294:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12298:	f64c 0398 	movw	r3, #51352	; 0xc898
   1229c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a0:	681b      	ldr	r3, [r3, #0]
   122a2:	4610      	mov	r0, r2
   122a4:	4619      	mov	r1, r3
   122a6:	f006 f8d1 	bl	1844c <__aeabi_fmul>
   122aa:	4603      	mov	r3, r0
   122ac:	4618      	mov	r0, r3
   122ae:	6879      	ldr	r1, [r7, #4]
   122b0:	f005 ffc4 	bl	1823c <__addsf3>
   122b4:	4603      	mov	r3, r0
   122b6:	461a      	mov	r2, r3
   122b8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   122bc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   122c0:	4610      	mov	r0, r2
   122c2:	4619      	mov	r1, r3
   122c4:	f006 f8c2 	bl	1844c <__aeabi_fmul>
   122c8:	4603      	mov	r3, r0
   122ca:	4618      	mov	r0, r3
   122cc:	f005 fc2a 	bl	17b24 <__aeabi_f2d>
   122d0:	4602      	mov	r2, r0
   122d2:	460b      	mov	r3, r1
   122d4:	4610      	mov	r0, r2
   122d6:	4619      	mov	r1, r3
   122d8:	a35d      	add	r3, pc, #372	; (adr r3, 12450 <climb_pid_run+0x390>)
   122da:	e9d3 2300 	ldrd	r2, r3, [r3]
   122de:	f005 fac3 	bl	17868 <__adddf3>
   122e2:	4602      	mov	r2, r0
   122e4:	460b      	mov	r3, r1
   122e6:	4614      	mov	r4, r2
   122e8:	461d      	mov	r5, r3
   122ea:	f64c 0390 	movw	r3, #51344	; 0xc890
   122ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f2:	681b      	ldr	r3, [r3, #0]
   122f4:	4618      	mov	r0, r3
   122f6:	f005 fc15 	bl	17b24 <__aeabi_f2d>
   122fa:	4602      	mov	r2, r0
   122fc:	460b      	mov	r3, r1
   122fe:	4610      	mov	r0, r2
   12300:	4619      	mov	r1, r3
   12302:	a355      	add	r3, pc, #340	; (adr r3, 12458 <climb_pid_run+0x398>)
   12304:	e9d3 2300 	ldrd	r2, r3, [r3]
   12308:	f005 fc60 	bl	17bcc <__aeabi_dmul>
   1230c:	4602      	mov	r2, r0
   1230e:	460b      	mov	r3, r1
   12310:	4620      	mov	r0, r4
   12312:	4629      	mov	r1, r5
   12314:	f005 faa8 	bl	17868 <__adddf3>
   12318:	4602      	mov	r2, r0
   1231a:	460b      	mov	r3, r1
   1231c:	4610      	mov	r0, r2
   1231e:	4619      	mov	r1, r3
   12320:	f005 ff36 	bl	18190 <__aeabi_d2f>
   12324:	4603      	mov	r3, r0
   12326:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12328:	f64c 0398 	movw	r3, #51352	; 0xc898
   1232c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12330:	681b      	ldr	r3, [r3, #0]
   12332:	4618      	mov	r0, r3
   12334:	6879      	ldr	r1, [r7, #4]
   12336:	f005 ff81 	bl	1823c <__addsf3>
   1233a:	4603      	mov	r3, r0
   1233c:	461a      	mov	r2, r3
   1233e:	f64c 0398 	movw	r3, #51352	; 0xc898
   12342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12346:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12348:	f64c 0398 	movw	r3, #51352	; 0xc898
   1234c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12350:	681b      	ldr	r3, [r3, #0]
   12352:	4618      	mov	r0, r3
   12354:	f04f 0100 	mov.w	r1, #0
   12358:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1235c:	f006 fa32 	bl	187c4 <__aeabi_fcmpgt>
   12360:	4603      	mov	r3, r0
   12362:	2b00      	cmp	r3, #0
   12364:	d008      	beq.n	12378 <climb_pid_run+0x2b8>
   12366:	f64c 0398 	movw	r3, #51352	; 0xc898
   1236a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1236e:	f04f 0200 	mov.w	r2, #0
   12372:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12376:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12378:	f64c 0398 	movw	r3, #51352	; 0xc898
   1237c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12380:	681b      	ldr	r3, [r3, #0]
   12382:	4618      	mov	r0, r3
   12384:	f04f 0100 	mov.w	r1, #0
   12388:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1238c:	f006 f9fc 	bl	18788 <__aeabi_fcmplt>
   12390:	4603      	mov	r3, r0
   12392:	2b00      	cmp	r3, #0
   12394:	d008      	beq.n	123a8 <climb_pid_run+0x2e8>
   12396:	f64c 0398 	movw	r3, #51352	; 0xc898
   1239a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1239e:	f04f 0200 	mov.w	r2, #0
   123a2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   123a6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   123a8:	6838      	ldr	r0, [r7, #0]
   123aa:	f04f 0100 	mov.w	r1, #0
   123ae:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123b2:	f006 f84b 	bl	1844c <__aeabi_fmul>
   123b6:	4603      	mov	r3, r0
   123b8:	4618      	mov	r0, r3
   123ba:	f04f 0100 	mov.w	r1, #0
   123be:	f006 f9e3 	bl	18788 <__aeabi_fcmplt>
   123c2:	4603      	mov	r3, r0
   123c4:	2b00      	cmp	r3, #0
   123c6:	d001      	beq.n	123cc <climb_pid_run+0x30c>
   123c8:	2200      	movs	r2, #0
   123ca:	e022      	b.n	12412 <climb_pid_run+0x352>
   123cc:	6838      	ldr	r0, [r7, #0]
   123ce:	f04f 0100 	mov.w	r1, #0
   123d2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123d6:	f006 f839 	bl	1844c <__aeabi_fmul>
   123da:	4603      	mov	r3, r0
   123dc:	4618      	mov	r0, r3
   123de:	f04f 0100 	mov.w	r1, #0
   123e2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123e6:	f006 f9ed 	bl	187c4 <__aeabi_fcmpgt>
   123ea:	4603      	mov	r3, r0
   123ec:	2b00      	cmp	r3, #0
   123ee:	d002      	beq.n	123f6 <climb_pid_run+0x336>
   123f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   123f4:	e00c      	b.n	12410 <climb_pid_run+0x350>
   123f6:	6838      	ldr	r0, [r7, #0]
   123f8:	f04f 0100 	mov.w	r1, #0
   123fc:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12400:	f006 f824 	bl	1844c <__aeabi_fmul>
   12404:	4603      	mov	r3, r0
   12406:	4618      	mov	r0, r3
   12408:	f006 f9e6 	bl	187d8 <__aeabi_f2iz>
   1240c:	4603      	mov	r3, r0
   1240e:	b29b      	uxth	r3, r3
   12410:	b29a      	uxth	r2, r3
   12412:	f64c 037c 	movw	r3, #51324	; 0xc87c
   12416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1241a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1241c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12424:	681a      	ldr	r2, [r3, #0]
   12426:	f64c 0388 	movw	r3, #51336	; 0xc888
   1242a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1242e:	681b      	ldr	r3, [r3, #0]
   12430:	4610      	mov	r0, r2
   12432:	4619      	mov	r1, r3
   12434:	f005 ff02 	bl	1823c <__addsf3>
   12438:	4603      	mov	r3, r0
   1243a:	461a      	mov	r2, r3
   1243c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12444:	601a      	str	r2, [r3, #0]
  }
}
   12446:	3708      	adds	r7, #8
   12448:	46bd      	mov	sp, r7
   1244a:	bdb0      	pop	{r4, r5, r7, pc}
   1244c:	f3af 8000 	nop.w
   12450:	3d70a3d7 	.word	0x3d70a3d7
   12454:	3fd3d70a 	.word	0x3fd3d70a
   12458:	9999999a 	.word	0x9999999a
   1245c:	3fc99999 	.word	0x3fc99999

00012460 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12460:	b580      	push	{r7, lr}
   12462:	b082      	sub	sp, #8
   12464:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12466:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1246a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1246e:	681a      	ldr	r2, [r3, #0]
   12470:	f240 5374 	movw	r3, #1396	; 0x574
   12474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	4610      	mov	r0, r2
   1247c:	4619      	mov	r1, r3
   1247e:	f005 fedb 	bl	18238 <__aeabi_fsub>
   12482:	4603      	mov	r3, r0
   12484:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   12486:	f240 5370 	movw	r3, #1392	; 0x570
   1248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1248e:	681b      	ldr	r3, [r3, #0]
   12490:	4618      	mov	r0, r3
   12492:	6879      	ldr	r1, [r7, #4]
   12494:	f005 ffda 	bl	1844c <__aeabi_fmul>
   12498:	4603      	mov	r3, r0
   1249a:	461a      	mov	r2, r3
   1249c:	f64c 0394 	movw	r3, #51348	; 0xc894
   124a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124a4:	681b      	ldr	r3, [r3, #0]
   124a6:	4610      	mov	r0, r2
   124a8:	4619      	mov	r1, r3
   124aa:	f005 fec7 	bl	1823c <__addsf3>
   124ae:	4603      	mov	r3, r0
   124b0:	461a      	mov	r2, r3
   124b2:	f64c 0390 	movw	r3, #51344	; 0xc890
   124b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ba:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   124bc:	f64c 0390 	movw	r3, #51344	; 0xc890
   124c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c4:	681b      	ldr	r3, [r3, #0]
   124c6:	4618      	mov	r0, r3
   124c8:	f04f 0100 	mov.w	r1, #0
   124cc:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   124d0:	f006 f95a 	bl	18788 <__aeabi_fcmplt>
   124d4:	4603      	mov	r3, r0
   124d6:	2b00      	cmp	r3, #0
   124d8:	d008      	beq.n	124ec <altitude_pid_run+0x8c>
   124da:	f64c 0390 	movw	r3, #51344	; 0xc890
   124de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e2:	f04f 0200 	mov.w	r2, #0
   124e6:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   124ea:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   124ec:	f64c 0390 	movw	r3, #51344	; 0xc890
   124f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124f4:	681b      	ldr	r3, [r3, #0]
   124f6:	4618      	mov	r0, r3
   124f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   124fc:	f006 f962 	bl	187c4 <__aeabi_fcmpgt>
   12500:	4603      	mov	r3, r0
   12502:	2b00      	cmp	r3, #0
   12504:	d006      	beq.n	12514 <altitude_pid_run+0xb4>
   12506:	f64c 0390 	movw	r3, #51344	; 0xc890
   1250a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12512:	601a      	str	r2, [r3, #0]
}
   12514:	3708      	adds	r7, #8
   12516:	46bd      	mov	sp, r7
   12518:	bd80      	pop	{r7, pc}
   1251a:	bf00      	nop
   1251c:	f3af 8000 	nop.w

00012520 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12520:	b5f0      	push	{r4, r5, r6, r7, lr}
   12522:	b08b      	sub	sp, #44	; 0x2c
   12524:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12526:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1252a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b00      	cmp	r3, #0
   12532:	f040 8169 	bne.w	12808 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12536:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1253a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	2b00      	cmp	r3, #0
   12542:	d13c      	bne.n	125be <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12544:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254c:	2200      	movs	r2, #0
   1254e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12550:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12558:	881b      	ldrh	r3, [r3, #0]
   1255a:	2b00      	cmp	r3, #0
   1255c:	d000      	beq.n	12560 <auto_nav+0x40>
   1255e:	e03d      	b.n	125dc <auto_nav+0xbc>
	else NextStage(); 
   12560:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12568:	781b      	ldrb	r3, [r3, #0]
   1256a:	3301      	adds	r3, #1
   1256c:	b2da      	uxtb	r2, r3
   1256e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12576:	701a      	strb	r2, [r3, #0]
   12578:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1257c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12580:	681a      	ldr	r2, [r3, #0]
   12582:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258a:	601a      	str	r2, [r3, #0]
   1258c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12594:	681a      	ldr	r2, [r3, #0]
   12596:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1259a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1259e:	601a      	str	r2, [r3, #0]
   125a0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   125a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a8:	2200      	movs	r2, #0
   125aa:	801a      	strh	r2, [r3, #0]
   125ac:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   125b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b4:	f04f 0200 	mov.w	r2, #0
   125b8:	601a      	str	r2, [r3, #0]
   125ba:	f002 b883 	b.w	146c4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   125be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c6:	781b      	ldrb	r3, [r3, #0]
   125c8:	2b01      	cmp	r3, #1
   125ca:	d100      	bne.n	125ce <auto_nav+0xae>
    {   Goto(while_1)}
   125cc:	e7ba      	b.n	12544 <auto_nav+0x24>
    else if (nav_stage == 2)
   125ce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d6:	781b      	ldrb	r3, [r3, #0]
   125d8:	2b02      	cmp	r3, #2
   125da:	d162      	bne.n	126a2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   125dc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e4:	2202      	movs	r2, #2
   125e6:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   125e8:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   125ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f0:	881b      	ldrh	r3, [r3, #0]
   125f2:	2b08      	cmp	r3, #8
   125f4:	d92e      	bls.n	12654 <auto_nav+0x134>
   125f6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fe:	781b      	ldrb	r3, [r3, #0]
   12600:	3301      	adds	r3, #1
   12602:	b2da      	uxtb	r2, r3
   12604:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	701a      	strb	r2, [r3, #0]
   1260e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12616:	681a      	ldr	r2, [r3, #0]
   12618:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1261c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12620:	601a      	str	r2, [r3, #0]
   12622:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262a:	681a      	ldr	r2, [r3, #0]
   1262c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12634:	601a      	str	r2, [r3, #0]
   12636:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1263a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263e:	2200      	movs	r2, #0
   12640:	801a      	strh	r2, [r3, #0]
   12642:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264a:	f04f 0200 	mov.w	r2, #0
   1264e:	601a      	str	r2, [r3, #0]
   12650:	f002 b838 	b.w	146c4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12654:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1265c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12660:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12664:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12666:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1266a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1266e:	2200      	movs	r2, #0
   12670:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12672:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267a:	f649 129a 	movw	r2, #39322	; 0x999a
   1267e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12682:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12684:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268c:	2201      	movs	r2, #1
   1268e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12690:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12698:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1269c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1269e:	f002 b811 	b.w	146c4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   126a2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126aa:	781b      	ldrb	r3, [r3, #0]
   126ac:	2b03      	cmp	r3, #3
   126ae:	d168      	bne.n	12782 <auto_nav+0x262>
     {
	nav_stage = 3;	
   126b0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b8:	2203      	movs	r2, #3
   126ba:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   126bc:	f64c 3304 	movw	r3, #51972	; 0xcb04
   126c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c4:	681b      	ldr	r3, [r3, #0]
   126c6:	4618      	mov	r0, r3
   126c8:	f04f 0100 	mov.w	r1, #0
   126cc:	f2c4 3116 	movt	r1, #17174	; 0x4316
   126d0:	f006 f878 	bl	187c4 <__aeabi_fcmpgt>
   126d4:	4603      	mov	r3, r0
   126d6:	2b00      	cmp	r3, #0
   126d8:	d02e      	beq.n	12738 <auto_nav+0x218>
   126da:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e2:	781b      	ldrb	r3, [r3, #0]
   126e4:	3301      	adds	r3, #1
   126e6:	b2da      	uxtb	r2, r3
   126e8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f0:	701a      	strb	r2, [r3, #0]
   126f2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   126f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fa:	681a      	ldr	r2, [r3, #0]
   126fc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12704:	601a      	str	r2, [r3, #0]
   12706:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1270a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270e:	681a      	ldr	r2, [r3, #0]
   12710:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12718:	601a      	str	r2, [r3, #0]
   1271a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1271e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12722:	2200      	movs	r2, #0
   12724:	801a      	strh	r2, [r3, #0]
   12726:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	f04f 0200 	mov.w	r2, #0
   12732:	601a      	str	r2, [r3, #0]
   12734:	f001 bfc6 	b.w	146c4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12738:	f64c 038c 	movw	r3, #51340	; 0xc88c
   1273c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12740:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12744:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12748:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1274a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1274e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12752:	2200      	movs	r2, #0
   12754:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12756:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1275a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1275e:	f04f 0200 	mov.w	r2, #0
   12762:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12764:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276c:	2202      	movs	r2, #2
   1276e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12770:	f64c 0390 	movw	r3, #51344	; 0xc890
   12774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12778:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1277c:	601a      	str	r2, [r3, #0]
        }
        return;
   1277e:	f001 bfa1 	b.w	146c4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12782:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278a:	781b      	ldrb	r3, [r3, #0]
   1278c:	2b04      	cmp	r3, #4
   1278e:	f041 8799 	bne.w	146c4 <auto_nav+0x21a4>
        NextBlock()
   12792:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279a:	781b      	ldrb	r3, [r3, #0]
   1279c:	3301      	adds	r3, #1
   1279e:	b2da      	uxtb	r2, r3
   127a0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	701a      	strb	r2, [r3, #0]
   127aa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b2:	2200      	movs	r2, #0
   127b4:	701a      	strb	r2, [r3, #0]
   127b6:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   127ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127be:	2200      	movs	r2, #0
   127c0:	801a      	strh	r2, [r3, #0]
   127c2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   127c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ca:	681a      	ldr	r2, [r3, #0]
   127cc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	601a      	str	r2, [r3, #0]
   127d6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   127da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127de:	681a      	ldr	r2, [r3, #0]
   127e0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   127e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e8:	601a      	str	r2, [r3, #0]
   127ea:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	2200      	movs	r2, #0
   127f4:	801a      	strh	r2, [r3, #0]
   127f6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   127fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fe:	f04f 0200 	mov.w	r2, #0
   12802:	601a      	str	r2, [r3, #0]
   12804:	f001 bf5e 	b.w	146c4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12808:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1280c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12810:	781b      	ldrb	r3, [r3, #0]
   12812:	2b01      	cmp	r3, #1
   12814:	f040 81bc 	bne.w	12b90 <auto_nav+0x670>
{
    nav_block = 1;
   12818:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1281c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12820:	2201      	movs	r2, #1
   12822:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12824:	f24c 5330 	movw	r3, #50480	; 0xc530
   12828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282c:	781b      	ldrb	r3, [r3, #0]
   1282e:	2b00      	cmp	r3, #0
   12830:	d007      	beq.n	12842 <auto_nav+0x322>
   12832:	f24c 5330 	movw	r3, #50480	; 0xc530
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	2200      	movs	r2, #0
   1283c:	701a      	strb	r2, [r3, #0]
   1283e:	2301      	movs	r3, #1
   12840:	e000      	b.n	12844 <auto_nav+0x324>
   12842:	2300      	movs	r3, #0
   12844:	2b00      	cmp	r3, #0
   12846:	d034      	beq.n	128b2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12848:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1284c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12850:	2202      	movs	r2, #2
   12852:	701a      	strb	r2, [r3, #0]
   12854:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285c:	2200      	movs	r2, #0
   1285e:	701a      	strb	r2, [r3, #0]
   12860:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12868:	2200      	movs	r2, #0
   1286a:	801a      	strh	r2, [r3, #0]
   1286c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12874:	681a      	ldr	r2, [r3, #0]
   12876:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1287a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287e:	601a      	str	r2, [r3, #0]
   12880:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12888:	681a      	ldr	r2, [r3, #0]
   1288a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1288e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12892:	601a      	str	r2, [r3, #0]
   12894:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289c:	2200      	movs	r2, #0
   1289e:	801a      	strh	r2, [r3, #0]
   128a0:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	f04f 0200 	mov.w	r2, #0
   128ac:	601a      	str	r2, [r3, #0]
   128ae:	f001 bf09 	b.w	146c4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   128b2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ba:	781b      	ldrb	r3, [r3, #0]
   128bc:	2b00      	cmp	r3, #0
   128be:	d12e      	bne.n	1291e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   128c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	3301      	adds	r3, #1
   128cc:	b2da      	uxtb	r2, r3
   128ce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	701a      	strb	r2, [r3, #0]
   128d8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	681a      	ldr	r2, [r3, #0]
   128e2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   128e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ea:	601a      	str	r2, [r3, #0]
   128ec:	f64c 3300 	movw	r3, #51968	; 0xcb00
   128f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f4:	681a      	ldr	r2, [r3, #0]
   128f6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   128fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fe:	601a      	str	r2, [r3, #0]
   12900:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	2200      	movs	r2, #0
   1290a:	801a      	strh	r2, [r3, #0]
   1290c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12914:	f04f 0200 	mov.w	r2, #0
   12918:	601a      	str	r2, [r3, #0]
   1291a:	f001 bed3 	b.w	146c4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1291e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12926:	781b      	ldrb	r3, [r3, #0]
   12928:	2b01      	cmp	r3, #1
   1292a:	d169      	bne.n	12a00 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1292c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12934:	2201      	movs	r2, #1
   12936:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12938:	2001      	movs	r0, #1
   1293a:	f001 fed1 	bl	146e0 <approaching>
   1293e:	4603      	mov	r3, r0
   12940:	2b00      	cmp	r3, #0
   12942:	d034      	beq.n	129ae <auto_nav+0x48e>
   12944:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294c:	2201      	movs	r2, #1
   1294e:	701a      	strb	r2, [r3, #0]
   12950:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12958:	781b      	ldrb	r3, [r3, #0]
   1295a:	3301      	adds	r3, #1
   1295c:	b2da      	uxtb	r2, r3
   1295e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	701a      	strb	r2, [r3, #0]
   12968:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1296c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12970:	681a      	ldr	r2, [r3, #0]
   12972:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297a:	601a      	str	r2, [r3, #0]
   1297c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12984:	681a      	ldr	r2, [r3, #0]
   12986:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1298a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298e:	601a      	str	r2, [r3, #0]
   12990:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12998:	2200      	movs	r2, #0
   1299a:	801a      	strh	r2, [r3, #0]
   1299c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a4:	f04f 0200 	mov.w	r2, #0
   129a8:	601a      	str	r2, [r3, #0]
   129aa:	f001 be8b 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(1);
   129ae:	2001      	movs	r0, #1
   129b0:	f001 ffca 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   129b4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   129b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129bc:	2200      	movs	r2, #0
   129be:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   129c0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c8:	f04f 0200 	mov.w	r2, #0
   129cc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129ce:	f24c 532d 	movw	r3, #50477	; 0xc52d
   129d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d6:	2203      	movs	r2, #3
   129d8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   129da:	f240 5378 	movw	r3, #1400	; 0x578
   129de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e2:	695a      	ldr	r2, [r3, #20]
   129e4:	f240 5374 	movw	r3, #1396	; 0x574
   129e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ec:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   129ee:	f64c 0394 	movw	r3, #51348	; 0xc894
   129f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f6:	f04f 0200 	mov.w	r2, #0
   129fa:	601a      	str	r2, [r3, #0]
          }
          return;
   129fc:	f001 be62 	b.w	146c4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a00:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	2b02      	cmp	r3, #2
   12a0c:	d169      	bne.n	12ae2 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a0e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a16:	2202      	movs	r2, #2
   12a18:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12a1a:	2004      	movs	r0, #4
   12a1c:	f001 fe60 	bl	146e0 <approaching>
   12a20:	4603      	mov	r3, r0
   12a22:	2b00      	cmp	r3, #0
   12a24:	d034      	beq.n	12a90 <auto_nav+0x570>
   12a26:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2e:	2204      	movs	r2, #4
   12a30:	701a      	strb	r2, [r3, #0]
   12a32:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3a:	781b      	ldrb	r3, [r3, #0]
   12a3c:	3301      	adds	r3, #1
   12a3e:	b2da      	uxtb	r2, r3
   12a40:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a48:	701a      	strb	r2, [r3, #0]
   12a4a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a52:	681a      	ldr	r2, [r3, #0]
   12a54:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5c:	601a      	str	r2, [r3, #0]
   12a5e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a66:	681a      	ldr	r2, [r3, #0]
   12a68:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	601a      	str	r2, [r3, #0]
   12a72:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7a:	2200      	movs	r2, #0
   12a7c:	801a      	strh	r2, [r3, #0]
   12a7e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a86:	f04f 0200 	mov.w	r2, #0
   12a8a:	601a      	str	r2, [r3, #0]
   12a8c:	f001 be1a 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(4);
   12a90:	2004      	movs	r0, #4
   12a92:	f001 ff59 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   12a96:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9e:	2200      	movs	r2, #0
   12aa0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12aa2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aaa:	f04f 0200 	mov.w	r2, #0
   12aae:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ab0:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab8:	2203      	movs	r2, #3
   12aba:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12abc:	f240 5378 	movw	r3, #1400	; 0x578
   12ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12ac6:	f240 5374 	movw	r3, #1396	; 0x574
   12aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ace:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ad0:	f64c 0394 	movw	r3, #51348	; 0xc894
   12ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad8:	f04f 0200 	mov.w	r2, #0
   12adc:	601a      	str	r2, [r3, #0]
          }
          return;
   12ade:	f001 bdf1 	b.w	146c4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12ae2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aea:	781b      	ldrb	r3, [r3, #0]
   12aec:	2b03      	cmp	r3, #3
   12aee:	d106      	bne.n	12afe <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12af0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	2203      	movs	r2, #3
   12afa:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12afc:	e6e0      	b.n	128c0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12afe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b06:	781b      	ldrb	r3, [r3, #0]
   12b08:	2b04      	cmp	r3, #4
   12b0a:	f041 85db 	bne.w	146c4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b0e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b16:	2204      	movs	r2, #4
   12b18:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12b1a:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b22:	781b      	ldrb	r3, [r3, #0]
   12b24:	3301      	adds	r3, #1
   12b26:	b2da      	uxtb	r2, r3
   12b28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b30:	701a      	strb	r2, [r3, #0]
   12b32:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3a:	2200      	movs	r2, #0
   12b3c:	701a      	strb	r2, [r3, #0]
   12b3e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b46:	2200      	movs	r2, #0
   12b48:	801a      	strh	r2, [r3, #0]
   12b4a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	681a      	ldr	r2, [r3, #0]
   12b54:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5c:	601a      	str	r2, [r3, #0]
   12b5e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b66:	681a      	ldr	r2, [r3, #0]
   12b68:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b70:	601a      	str	r2, [r3, #0]
   12b72:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7a:	2200      	movs	r2, #0
   12b7c:	801a      	strh	r2, [r3, #0]
   12b7e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b86:	f04f 0200 	mov.w	r2, #0
   12b8a:	601a      	str	r2, [r3, #0]
   12b8c:	f001 bd9a 	b.w	146c4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12b90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b98:	781b      	ldrb	r3, [r3, #0]
   12b9a:	2b02      	cmp	r3, #2
   12b9c:	f040 8392 	bne.w	132c4 <auto_nav+0xda4>
{
	nav_block = 2;
   12ba0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba8:	2202      	movs	r2, #2
   12baa:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12bac:	f24c 5330 	movw	r3, #50480	; 0xc530
   12bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb4:	781b      	ldrb	r3, [r3, #0]
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	d007      	beq.n	12bca <auto_nav+0x6aa>
   12bba:	f24c 5330 	movw	r3, #50480	; 0xc530
   12bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc2:	2200      	movs	r2, #0
   12bc4:	701a      	strb	r2, [r3, #0]
   12bc6:	2301      	movs	r3, #1
   12bc8:	e000      	b.n	12bcc <auto_nav+0x6ac>
   12bca:	2300      	movs	r3, #0
   12bcc:	2b00      	cmp	r3, #0
   12bce:	d034      	beq.n	12c3a <auto_nav+0x71a>
   12bd0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd8:	2203      	movs	r2, #3
   12bda:	701a      	strb	r2, [r3, #0]
   12bdc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be4:	2200      	movs	r2, #0
   12be6:	701a      	strb	r2, [r3, #0]
   12be8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf0:	2200      	movs	r2, #0
   12bf2:	801a      	strh	r2, [r3, #0]
   12bf4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bfc:	681a      	ldr	r2, [r3, #0]
   12bfe:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c06:	601a      	str	r2, [r3, #0]
   12c08:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	681a      	ldr	r2, [r3, #0]
   12c12:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1a:	601a      	str	r2, [r3, #0]
   12c1c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c24:	2200      	movs	r2, #0
   12c26:	801a      	strh	r2, [r3, #0]
   12c28:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c30:	f04f 0200 	mov.w	r2, #0
   12c34:	601a      	str	r2, [r3, #0]
   12c36:	f001 bd45 	b.w	146c4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12c3a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	781b      	ldrb	r3, [r3, #0]
   12c44:	2b00      	cmp	r3, #0
   12c46:	d134      	bne.n	12cb2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12c48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c50:	2200      	movs	r2, #0
   12c52:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12c54:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5c:	781b      	ldrb	r3, [r3, #0]
   12c5e:	3301      	adds	r3, #1
   12c60:	b2da      	uxtb	r2, r3
   12c62:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	701a      	strb	r2, [r3, #0]
   12c6c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c74:	681a      	ldr	r2, [r3, #0]
   12c76:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7e:	601a      	str	r2, [r3, #0]
   12c80:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	681a      	ldr	r2, [r3, #0]
   12c8a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c92:	601a      	str	r2, [r3, #0]
   12c94:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9c:	2200      	movs	r2, #0
   12c9e:	801a      	strh	r2, [r3, #0]
   12ca0:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca8:	f04f 0200 	mov.w	r2, #0
   12cac:	601a      	str	r2, [r3, #0]
   12cae:	f001 bd09 	b.w	146c4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12cb2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cba:	781b      	ldrb	r3, [r3, #0]
   12cbc:	2b01      	cmp	r3, #1
   12cbe:	d169      	bne.n	12d94 <auto_nav+0x874>
    {
         nav_stage =1;
   12cc0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc8:	2201      	movs	r2, #1
   12cca:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12ccc:	2006      	movs	r0, #6
   12cce:	f001 fd07 	bl	146e0 <approaching>
   12cd2:	4603      	mov	r3, r0
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	d034      	beq.n	12d42 <auto_nav+0x822>
   12cd8:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce0:	2206      	movs	r2, #6
   12ce2:	701a      	strb	r2, [r3, #0]
   12ce4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	3301      	adds	r3, #1
   12cf0:	b2da      	uxtb	r2, r3
   12cf2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfa:	701a      	strb	r2, [r3, #0]
   12cfc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d04:	681a      	ldr	r2, [r3, #0]
   12d06:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0e:	601a      	str	r2, [r3, #0]
   12d10:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d18:	681a      	ldr	r2, [r3, #0]
   12d1a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d22:	601a      	str	r2, [r3, #0]
   12d24:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2c:	2200      	movs	r2, #0
   12d2e:	801a      	strh	r2, [r3, #0]
   12d30:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d38:	f04f 0200 	mov.w	r2, #0
   12d3c:	601a      	str	r2, [r3, #0]
   12d3e:	f001 bcc1 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(6);
   12d42:	2006      	movs	r0, #6
   12d44:	f001 fe00 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   12d48:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d50:	2200      	movs	r2, #0
   12d52:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d54:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5c:	f04f 0200 	mov.w	r2, #0
   12d60:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d62:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6a:	2203      	movs	r2, #3
   12d6c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12d6e:	f240 5378 	movw	r3, #1400	; 0x578
   12d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12d78:	f240 5374 	movw	r3, #1396	; 0x574
   12d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d80:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d82:	f64c 0394 	movw	r3, #51348	; 0xc894
   12d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8a:	f04f 0200 	mov.w	r2, #0
   12d8e:	601a      	str	r2, [r3, #0]
          }
          return;
   12d90:	f001 bc98 	b.w	146c4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12d94:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9c:	781b      	ldrb	r3, [r3, #0]
   12d9e:	2b02      	cmp	r3, #2
   12da0:	d169      	bne.n	12e76 <auto_nav+0x956>
     {
         nav_stage =2; 
   12da2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	2202      	movs	r2, #2
   12dac:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12dae:	2001      	movs	r0, #1
   12db0:	f001 fc96 	bl	146e0 <approaching>
   12db4:	4603      	mov	r3, r0
   12db6:	2b00      	cmp	r3, #0
   12db8:	d034      	beq.n	12e24 <auto_nav+0x904>
   12dba:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc2:	2201      	movs	r2, #1
   12dc4:	701a      	strb	r2, [r3, #0]
   12dc6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	3301      	adds	r3, #1
   12dd2:	b2da      	uxtb	r2, r3
   12dd4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ddc:	701a      	strb	r2, [r3, #0]
   12dde:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de6:	681a      	ldr	r2, [r3, #0]
   12de8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df0:	601a      	str	r2, [r3, #0]
   12df2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfa:	681a      	ldr	r2, [r3, #0]
   12dfc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e04:	601a      	str	r2, [r3, #0]
   12e06:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0e:	2200      	movs	r2, #0
   12e10:	801a      	strh	r2, [r3, #0]
   12e12:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1a:	f04f 0200 	mov.w	r2, #0
   12e1e:	601a      	str	r2, [r3, #0]
   12e20:	f001 bc50 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(1);
   12e24:	2001      	movs	r0, #1
   12e26:	f001 fd8f 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   12e2a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e32:	2200      	movs	r2, #0
   12e34:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e36:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3e:	f04f 0200 	mov.w	r2, #0
   12e42:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e44:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4c:	2203      	movs	r2, #3
   12e4e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12e50:	f240 5378 	movw	r3, #1400	; 0x578
   12e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e58:	695a      	ldr	r2, [r3, #20]
   12e5a:	f240 5374 	movw	r3, #1396	; 0x574
   12e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e62:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e64:	f64c 0394 	movw	r3, #51348	; 0xc894
   12e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6c:	f04f 0200 	mov.w	r2, #0
   12e70:	601a      	str	r2, [r3, #0]
          }
          return;
   12e72:	f001 bc27 	b.w	146c4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12e76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7e:	781b      	ldrb	r3, [r3, #0]
   12e80:	2b03      	cmp	r3, #3
   12e82:	d16f      	bne.n	12f64 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12e84:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	2203      	movs	r2, #3
   12e8e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12e90:	2002      	movs	r0, #2
   12e92:	f001 fc25 	bl	146e0 <approaching>
   12e96:	4603      	mov	r3, r0
   12e98:	2b00      	cmp	r3, #0
   12e9a:	d034      	beq.n	12f06 <auto_nav+0x9e6>
   12e9c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea4:	2202      	movs	r2, #2
   12ea6:	701a      	strb	r2, [r3, #0]
   12ea8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb0:	781b      	ldrb	r3, [r3, #0]
   12eb2:	3301      	adds	r3, #1
   12eb4:	b2da      	uxtb	r2, r3
   12eb6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ebe:	701a      	strb	r2, [r3, #0]
   12ec0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec8:	681a      	ldr	r2, [r3, #0]
   12eca:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed2:	601a      	str	r2, [r3, #0]
   12ed4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12edc:	681a      	ldr	r2, [r3, #0]
   12ede:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee6:	601a      	str	r2, [r3, #0]
   12ee8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef0:	2200      	movs	r2, #0
   12ef2:	801a      	strh	r2, [r3, #0]
   12ef4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efc:	f04f 0200 	mov.w	r2, #0
   12f00:	601a      	str	r2, [r3, #0]
   12f02:	f001 bbdf 	b.w	146c4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f06:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0e:	781b      	ldrb	r3, [r3, #0]
   12f10:	4618      	mov	r0, r3
   12f12:	2102      	movs	r1, #2
   12f14:	f001 fd3a 	bl	1498c <route_to>
            auto_pitch = FALSE;
   12f18:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f20:	2200      	movs	r2, #0
   12f22:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f24:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2c:	f04f 0200 	mov.w	r2, #0
   12f30:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f32:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3a:	2203      	movs	r2, #3
   12f3c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12f3e:	f240 5378 	movw	r3, #1400	; 0x578
   12f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f46:	6a1a      	ldr	r2, [r3, #32]
   12f48:	f240 5374 	movw	r3, #1396	; 0x574
   12f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f50:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f52:	f64c 0394 	movw	r3, #51348	; 0xc894
   12f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5a:	f04f 0200 	mov.w	r2, #0
   12f5e:	601a      	str	r2, [r3, #0]
          }
          return;
   12f60:	f001 bbb0 	b.w	146c4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12f64:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6c:	781b      	ldrb	r3, [r3, #0]
   12f6e:	2b04      	cmp	r3, #4
   12f70:	d169      	bne.n	13046 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12f72:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7a:	2204      	movs	r2, #4
   12f7c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12f7e:	2003      	movs	r0, #3
   12f80:	f001 fbae 	bl	146e0 <approaching>
   12f84:	4603      	mov	r3, r0
   12f86:	2b00      	cmp	r3, #0
   12f88:	d034      	beq.n	12ff4 <auto_nav+0xad4>
   12f8a:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f92:	2203      	movs	r2, #3
   12f94:	701a      	strb	r2, [r3, #0]
   12f96:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9e:	781b      	ldrb	r3, [r3, #0]
   12fa0:	3301      	adds	r3, #1
   12fa2:	b2da      	uxtb	r2, r3
   12fa4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fac:	701a      	strb	r2, [r3, #0]
   12fae:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb6:	681a      	ldr	r2, [r3, #0]
   12fb8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc0:	601a      	str	r2, [r3, #0]
   12fc2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fca:	681a      	ldr	r2, [r3, #0]
   12fcc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd4:	601a      	str	r2, [r3, #0]
   12fd6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fde:	2200      	movs	r2, #0
   12fe0:	801a      	strh	r2, [r3, #0]
   12fe2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	f04f 0200 	mov.w	r2, #0
   12fee:	601a      	str	r2, [r3, #0]
   12ff0:	f001 bb68 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(3);
   12ff4:	2003      	movs	r0, #3
   12ff6:	f001 fca7 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   12ffa:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13002:	2200      	movs	r2, #0
   13004:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13006:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1300a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300e:	f04f 0200 	mov.w	r2, #0
   13012:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13014:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301c:	2203      	movs	r2, #3
   1301e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13020:	f240 5378 	movw	r3, #1400	; 0x578
   13024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1302a:	f240 5374 	movw	r3, #1396	; 0x574
   1302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13032:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13034:	f64c 0394 	movw	r3, #51348	; 0xc894
   13038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303c:	f04f 0200 	mov.w	r2, #0
   13040:	601a      	str	r2, [r3, #0]
          }
          return;
   13042:	f001 bb3f 	b.w	146c4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   13046:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1304a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1304e:	781b      	ldrb	r3, [r3, #0]
   13050:	2b05      	cmp	r3, #5
   13052:	d169      	bne.n	13128 <auto_nav+0xc08>
       {
          nav_stage =5;
   13054:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305c:	2205      	movs	r2, #5
   1305e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13060:	2004      	movs	r0, #4
   13062:	f001 fb3d 	bl	146e0 <approaching>
   13066:	4603      	mov	r3, r0
   13068:	2b00      	cmp	r3, #0
   1306a:	d034      	beq.n	130d6 <auto_nav+0xbb6>
   1306c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13074:	2204      	movs	r2, #4
   13076:	701a      	strb	r2, [r3, #0]
   13078:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1307c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13080:	781b      	ldrb	r3, [r3, #0]
   13082:	3301      	adds	r3, #1
   13084:	b2da      	uxtb	r2, r3
   13086:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1308a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308e:	701a      	strb	r2, [r3, #0]
   13090:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13098:	681a      	ldr	r2, [r3, #0]
   1309a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1309e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a2:	601a      	str	r2, [r3, #0]
   130a4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   130a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ac:	681a      	ldr	r2, [r3, #0]
   130ae:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   130b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b6:	601a      	str	r2, [r3, #0]
   130b8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   130bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c0:	2200      	movs	r2, #0
   130c2:	801a      	strh	r2, [r3, #0]
   130c4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   130c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130cc:	f04f 0200 	mov.w	r2, #0
   130d0:	601a      	str	r2, [r3, #0]
   130d2:	f001 baf7 	b.w	146c4 <auto_nav+0x21a4>
            fly_to(4);
   130d6:	2004      	movs	r0, #4
   130d8:	f001 fc36 	bl	14948 <fly_to>
            auto_pitch = FALSE;
   130dc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   130e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e4:	2200      	movs	r2, #0
   130e6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   130e8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f0:	f04f 0200 	mov.w	r2, #0
   130f4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   130f6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   130fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fe:	2203      	movs	r2, #3
   13100:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   13102:	f240 5378 	movw	r3, #1400	; 0x578
   13106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1310c:	f240 5374 	movw	r3, #1396	; 0x574
   13110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13114:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13116:	f64c 0394 	movw	r3, #51348	; 0xc894
   1311a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311e:	f04f 0200 	mov.w	r2, #0
   13122:	601a      	str	r2, [r3, #0]
          }
          return;
   13124:	f001 bace 	b.w	146c4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13128:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1312c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2b06      	cmp	r3, #6
   13134:	d16f      	bne.n	13216 <auto_nav+0xcf6>
       {
          nav_stage =6;
   13136:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1313a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313e:	2206      	movs	r2, #6
   13140:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   13142:	2005      	movs	r0, #5
   13144:	f001 facc 	bl	146e0 <approaching>
   13148:	4603      	mov	r3, r0
   1314a:	2b00      	cmp	r3, #0
   1314c:	d034      	beq.n	131b8 <auto_nav+0xc98>
   1314e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13156:	2205      	movs	r2, #5
   13158:	701a      	strb	r2, [r3, #0]
   1315a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1315e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13162:	781b      	ldrb	r3, [r3, #0]
   13164:	3301      	adds	r3, #1
   13166:	b2da      	uxtb	r2, r3
   13168:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1316c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13170:	701a      	strb	r2, [r3, #0]
   13172:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1317a:	681a      	ldr	r2, [r3, #0]
   1317c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13184:	601a      	str	r2, [r3, #0]
   13186:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1318a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318e:	681a      	ldr	r2, [r3, #0]
   13190:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13198:	601a      	str	r2, [r3, #0]
   1319a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1319e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a2:	2200      	movs	r2, #0
   131a4:	801a      	strh	r2, [r3, #0]
   131a6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   131aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ae:	f04f 0200 	mov.w	r2, #0
   131b2:	601a      	str	r2, [r3, #0]
   131b4:	f001 ba86 	b.w	146c4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   131b8:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c0:	781b      	ldrb	r3, [r3, #0]
   131c2:	4618      	mov	r0, r3
   131c4:	2105      	movs	r1, #5
   131c6:	f001 fbe1 	bl	1498c <route_to>
            auto_pitch = FALSE;
   131ca:	f24c 532f 	movw	r3, #50479	; 0xc52f
   131ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d2:	2200      	movs	r2, #0
   131d4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   131d6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131de:	f04f 0200 	mov.w	r2, #0
   131e2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   131e4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   131e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ec:	2203      	movs	r2, #3
   131ee:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   131f0:	f240 5378 	movw	r3, #1400	; 0x578
   131f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   131fa:	f240 5374 	movw	r3, #1396	; 0x574
   131fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13202:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13204:	f64c 0394 	movw	r3, #51348	; 0xc894
   13208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320c:	f04f 0200 	mov.w	r2, #0
   13210:	601a      	str	r2, [r3, #0]
          }
          return;
   13212:	f001 ba57 	b.w	146c4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13216:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1321a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1321e:	781b      	ldrb	r3, [r3, #0]
   13220:	2b07      	cmp	r3, #7
   13222:	d106      	bne.n	13232 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13224:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322c:	2207      	movs	r2, #7
   1322e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13230:	e50a      	b.n	12c48 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13232:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323a:	781b      	ldrb	r3, [r3, #0]
   1323c:	2b08      	cmp	r3, #8
   1323e:	f041 8241 	bne.w	146c4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13242:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1324a:	2208      	movs	r2, #8
   1324c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1324e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13256:	781b      	ldrb	r3, [r3, #0]
   13258:	3301      	adds	r3, #1
   1325a:	b2da      	uxtb	r2, r3
   1325c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13264:	701a      	strb	r2, [r3, #0]
   13266:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	2200      	movs	r2, #0
   13270:	701a      	strb	r2, [r3, #0]
   13272:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327a:	2200      	movs	r2, #0
   1327c:	801a      	strh	r2, [r3, #0]
   1327e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13286:	681a      	ldr	r2, [r3, #0]
   13288:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1328c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13290:	601a      	str	r2, [r3, #0]
   13292:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329a:	681a      	ldr	r2, [r3, #0]
   1329c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a4:	601a      	str	r2, [r3, #0]
   132a6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	2200      	movs	r2, #0
   132b0:	801a      	strh	r2, [r3, #0]
   132b2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   132b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ba:	f04f 0200 	mov.w	r2, #0
   132be:	601a      	str	r2, [r3, #0]
   132c0:	f001 ba00 	b.w	146c4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   132c4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132cc:	781b      	ldrb	r3, [r3, #0]
   132ce:	2b03      	cmp	r3, #3
   132d0:	f040 8388 	bne.w	139e4 <auto_nav+0x14c4>
{
    nav_block = 3;
   132d4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132dc:	2203      	movs	r2, #3
   132de:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   132e0:	f24c 5330 	movw	r3, #50480	; 0xc530
   132e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e8:	781b      	ldrb	r3, [r3, #0]
   132ea:	2b00      	cmp	r3, #0
   132ec:	d007      	beq.n	132fe <auto_nav+0xdde>
   132ee:	f24c 5330 	movw	r3, #50480	; 0xc530
   132f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f6:	2200      	movs	r2, #0
   132f8:	701a      	strb	r2, [r3, #0]
   132fa:	2301      	movs	r3, #1
   132fc:	e000      	b.n	13300 <auto_nav+0xde0>
   132fe:	2300      	movs	r3, #0
   13300:	2b00      	cmp	r3, #0
   13302:	d034      	beq.n	1336e <auto_nav+0xe4e>
   13304:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330c:	2204      	movs	r2, #4
   1330e:	701a      	strb	r2, [r3, #0]
   13310:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13318:	2200      	movs	r2, #0
   1331a:	701a      	strb	r2, [r3, #0]
   1331c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13324:	2200      	movs	r2, #0
   13326:	801a      	strh	r2, [r3, #0]
   13328:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1332c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13330:	681a      	ldr	r2, [r3, #0]
   13332:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333a:	601a      	str	r2, [r3, #0]
   1333c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	681a      	ldr	r2, [r3, #0]
   13346:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1334a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334e:	601a      	str	r2, [r3, #0]
   13350:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13358:	2200      	movs	r2, #0
   1335a:	801a      	strh	r2, [r3, #0]
   1335c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13364:	f04f 0200 	mov.w	r2, #0
   13368:	601a      	str	r2, [r3, #0]
   1336a:	f001 b9ab 	b.w	146c4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   1336e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13376:	781b      	ldrb	r3, [r3, #0]
   13378:	2b00      	cmp	r3, #0
   1337a:	f040 82ea 	bne.w	13952 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1337e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	2200      	movs	r2, #0
   13388:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   1338a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	781b      	ldrb	r3, [r3, #0]
   13394:	2b02      	cmp	r3, #2
   13396:	f040 81a5 	bne.w	136e4 <auto_nav+0x11c4>
   1339a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1339e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a2:	88db      	ldrh	r3, [r3, #6]
   133a4:	84fb      	strh	r3, [r7, #38]	; 0x26
   133a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   133ae:	dc04      	bgt.n	133ba <auto_nav+0xe9a>
   133b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133b4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   133b8:	da7e      	bge.n	134b8 <auto_nav+0xf98>
   133ba:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   133be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c2:	681b      	ldr	r3, [r3, #0]
   133c4:	4618      	mov	r0, r3
   133c6:	f004 fbad 	bl	17b24 <__aeabi_f2d>
   133ca:	4604      	mov	r4, r0
   133cc:	460d      	mov	r5, r1
   133ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133d2:	4618      	mov	r0, r3
   133d4:	f004 ffe6 	bl	183a4 <__aeabi_i2f>
   133d8:	4603      	mov	r3, r0
   133da:	4618      	mov	r0, r3
   133dc:	f04f 0100 	mov.w	r1, #0
   133e0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   133e4:	f005 f8e6 	bl	185b4 <__aeabi_fdiv>
   133e8:	4603      	mov	r3, r0
   133ea:	4618      	mov	r0, r3
   133ec:	f004 fb9a 	bl	17b24 <__aeabi_f2d>
   133f0:	4602      	mov	r2, r0
   133f2:	460b      	mov	r3, r1
   133f4:	4610      	mov	r0, r2
   133f6:	4619      	mov	r1, r3
   133f8:	f04f 0200 	mov.w	r2, #0
   133fc:	f04f 0300 	mov.w	r3, #0
   13400:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13404:	f004 fbe2 	bl	17bcc <__aeabi_dmul>
   13408:	4602      	mov	r2, r0
   1340a:	460b      	mov	r3, r1
   1340c:	4610      	mov	r0, r2
   1340e:	4619      	mov	r1, r3
   13410:	f04f 0200 	mov.w	r2, #0
   13414:	f04f 0300 	mov.w	r3, #0
   13418:	f004 fa26 	bl	17868 <__adddf3>
   1341c:	4602      	mov	r2, r0
   1341e:	460b      	mov	r3, r1
   13420:	4620      	mov	r0, r4
   13422:	4629      	mov	r1, r5
   13424:	f004 fa20 	bl	17868 <__adddf3>
   13428:	4602      	mov	r2, r0
   1342a:	460b      	mov	r3, r1
   1342c:	4610      	mov	r0, r2
   1342e:	4619      	mov	r1, r3
   13430:	f004 feae 	bl	18190 <__aeabi_d2f>
   13434:	4602      	mov	r2, r0
   13436:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1343a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343e:	601a      	str	r2, [r3, #0]
   13440:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13448:	681b      	ldr	r3, [r3, #0]
   1344a:	4618      	mov	r0, r3
   1344c:	f04f 0100 	mov.w	r1, #0
   13450:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13454:	f005 f9a2 	bl	1879c <__aeabi_fcmple>
   13458:	4603      	mov	r3, r0
   1345a:	2b00      	cmp	r3, #0
   1345c:	d005      	beq.n	1346a <auto_nav+0xf4a>
   1345e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13466:	681a      	ldr	r2, [r3, #0]
   13468:	e003      	b.n	13472 <auto_nav+0xf52>
   1346a:	f04f 0200 	mov.w	r2, #0
   1346e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13472:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347a:	601a      	str	r2, [r3, #0]
   1347c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13484:	681b      	ldr	r3, [r3, #0]
   13486:	4618      	mov	r0, r3
   13488:	f04f 0100 	mov.w	r1, #0
   1348c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13490:	f005 f98e 	bl	187b0 <__aeabi_fcmpge>
   13494:	4603      	mov	r3, r0
   13496:	2b00      	cmp	r3, #0
   13498:	d005      	beq.n	134a6 <auto_nav+0xf86>
   1349a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1349e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a2:	681a      	ldr	r2, [r3, #0]
   134a4:	e003      	b.n	134ae <auto_nav+0xf8e>
   134a6:	f04f 0200 	mov.w	r2, #0
   134aa:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   134ae:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b6:	601a      	str	r2, [r3, #0]
   134b8:	f24c 6350 	movw	r3, #50768	; 0xc650
   134bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134c0:	889b      	ldrh	r3, [r3, #4]
   134c2:	84bb      	strh	r3, [r7, #36]	; 0x24
   134c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   134c8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   134cc:	dc04      	bgt.n	134d8 <auto_nav+0xfb8>
   134ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   134d2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   134d6:	da7e      	bge.n	135d6 <auto_nav+0x10b6>
   134d8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   134dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e0:	681b      	ldr	r3, [r3, #0]
   134e2:	4618      	mov	r0, r3
   134e4:	f004 fb1e 	bl	17b24 <__aeabi_f2d>
   134e8:	4604      	mov	r4, r0
   134ea:	460d      	mov	r5, r1
   134ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   134f0:	4618      	mov	r0, r3
   134f2:	f004 ff57 	bl	183a4 <__aeabi_i2f>
   134f6:	4603      	mov	r3, r0
   134f8:	4618      	mov	r0, r3
   134fa:	f04f 0100 	mov.w	r1, #0
   134fe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13502:	f005 f857 	bl	185b4 <__aeabi_fdiv>
   13506:	4603      	mov	r3, r0
   13508:	4618      	mov	r0, r3
   1350a:	f004 fb0b 	bl	17b24 <__aeabi_f2d>
   1350e:	4602      	mov	r2, r0
   13510:	460b      	mov	r3, r1
   13512:	4610      	mov	r0, r2
   13514:	4619      	mov	r1, r3
   13516:	f04f 0200 	mov.w	r2, #0
   1351a:	f04f 0300 	mov.w	r3, #0
   1351e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13522:	f004 fb53 	bl	17bcc <__aeabi_dmul>
   13526:	4602      	mov	r2, r0
   13528:	460b      	mov	r3, r1
   1352a:	4610      	mov	r0, r2
   1352c:	4619      	mov	r1, r3
   1352e:	f04f 0200 	mov.w	r2, #0
   13532:	f04f 0300 	mov.w	r3, #0
   13536:	f004 f997 	bl	17868 <__adddf3>
   1353a:	4602      	mov	r2, r0
   1353c:	460b      	mov	r3, r1
   1353e:	4620      	mov	r0, r4
   13540:	4629      	mov	r1, r5
   13542:	f004 f991 	bl	17868 <__adddf3>
   13546:	4602      	mov	r2, r0
   13548:	460b      	mov	r3, r1
   1354a:	4610      	mov	r0, r2
   1354c:	4619      	mov	r1, r3
   1354e:	f004 fe1f 	bl	18190 <__aeabi_d2f>
   13552:	4602      	mov	r2, r0
   13554:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1355c:	601a      	str	r2, [r3, #0]
   1355e:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13566:	681b      	ldr	r3, [r3, #0]
   13568:	4618      	mov	r0, r3
   1356a:	f04f 0100 	mov.w	r1, #0
   1356e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13572:	f005 f913 	bl	1879c <__aeabi_fcmple>
   13576:	4603      	mov	r3, r0
   13578:	2b00      	cmp	r3, #0
   1357a:	d005      	beq.n	13588 <auto_nav+0x1068>
   1357c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13584:	681a      	ldr	r2, [r3, #0]
   13586:	e003      	b.n	13590 <auto_nav+0x1070>
   13588:	f04f 0200 	mov.w	r2, #0
   1358c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13590:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13598:	601a      	str	r2, [r3, #0]
   1359a:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1359e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135a2:	681b      	ldr	r3, [r3, #0]
   135a4:	4618      	mov	r0, r3
   135a6:	f04f 0100 	mov.w	r1, #0
   135aa:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135ae:	f005 f8ff 	bl	187b0 <__aeabi_fcmpge>
   135b2:	4603      	mov	r3, r0
   135b4:	2b00      	cmp	r3, #0
   135b6:	d005      	beq.n	135c4 <auto_nav+0x10a4>
   135b8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135c0:	681a      	ldr	r2, [r3, #0]
   135c2:	e003      	b.n	135cc <auto_nav+0x10ac>
   135c4:	f04f 0200 	mov.w	r2, #0
   135c8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   135cc:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d4:	601a      	str	r2, [r3, #0]
   135d6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   135da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135de:	2203      	movs	r2, #3
   135e0:	701a      	strb	r2, [r3, #0]
   135e2:	f24c 6350 	movw	r3, #50768	; 0xc650
   135e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ea:	885b      	ldrh	r3, [r3, #2]
   135ec:	847b      	strh	r3, [r7, #34]	; 0x22
   135ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   135f2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   135f6:	dc04      	bgt.n	13602 <auto_nav+0x10e2>
   135f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   135fc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13600:	da70      	bge.n	136e4 <auto_nav+0x11c4>
   13602:	f240 5374 	movw	r3, #1396	; 0x574
   13606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1360a:	681b      	ldr	r3, [r3, #0]
   1360c:	4618      	mov	r0, r3
   1360e:	f004 fa89 	bl	17b24 <__aeabi_f2d>
   13612:	4604      	mov	r4, r0
   13614:	460d      	mov	r5, r1
   13616:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1361a:	4618      	mov	r0, r3
   1361c:	f004 fec2 	bl	183a4 <__aeabi_i2f>
   13620:	4603      	mov	r3, r0
   13622:	4618      	mov	r0, r3
   13624:	f04f 0100 	mov.w	r1, #0
   13628:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1362c:	f004 ffc2 	bl	185b4 <__aeabi_fdiv>
   13630:	4603      	mov	r3, r0
   13632:	4618      	mov	r0, r3
   13634:	f004 fa76 	bl	17b24 <__aeabi_f2d>
   13638:	4602      	mov	r2, r0
   1363a:	460b      	mov	r3, r1
   1363c:	f04f 0000 	mov.w	r0, #0
   13640:	f04f 0100 	mov.w	r1, #0
   13644:	f004 f90e 	bl	17864 <__aeabi_dsub>
   13648:	4602      	mov	r2, r0
   1364a:	460b      	mov	r3, r1
   1364c:	4620      	mov	r0, r4
   1364e:	4629      	mov	r1, r5
   13650:	f004 f90a 	bl	17868 <__adddf3>
   13654:	4602      	mov	r2, r0
   13656:	460b      	mov	r3, r1
   13658:	4610      	mov	r0, r2
   1365a:	4619      	mov	r1, r3
   1365c:	f004 fd98 	bl	18190 <__aeabi_d2f>
   13660:	4602      	mov	r2, r0
   13662:	f240 5374 	movw	r3, #1396	; 0x574
   13666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1366a:	601a      	str	r2, [r3, #0]
   1366c:	f240 5374 	movw	r3, #1396	; 0x574
   13670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13674:	681b      	ldr	r3, [r3, #0]
   13676:	4618      	mov	r0, r3
   13678:	f04f 0100 	mov.w	r1, #0
   1367c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13680:	f005 f896 	bl	187b0 <__aeabi_fcmpge>
   13684:	4603      	mov	r3, r0
   13686:	2b00      	cmp	r3, #0
   13688:	d005      	beq.n	13696 <auto_nav+0x1176>
   1368a:	f240 5374 	movw	r3, #1396	; 0x574
   1368e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13692:	681a      	ldr	r2, [r3, #0]
   13694:	e003      	b.n	1369e <auto_nav+0x117e>
   13696:	f04f 0200 	mov.w	r2, #0
   1369a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1369e:	f240 5374 	movw	r3, #1396	; 0x574
   136a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136a6:	601a      	str	r2, [r3, #0]
   136a8:	f240 5374 	movw	r3, #1396	; 0x574
   136ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136b0:	681b      	ldr	r3, [r3, #0]
   136b2:	4618      	mov	r0, r3
   136b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   136b8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   136bc:	f005 f86e 	bl	1879c <__aeabi_fcmple>
   136c0:	4603      	mov	r3, r0
   136c2:	2b00      	cmp	r3, #0
   136c4:	d005      	beq.n	136d2 <auto_nav+0x11b2>
   136c6:	f240 5374 	movw	r3, #1396	; 0x574
   136ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ce:	681a      	ldr	r2, [r3, #0]
   136d0:	e003      	b.n	136da <auto_nav+0x11ba>
   136d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   136d6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   136da:	f240 5374 	movw	r3, #1396	; 0x574
   136de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e2:	601a      	str	r2, [r3, #0]
   136e4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   136e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ec:	681a      	ldr	r2, [r3, #0]
   136ee:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136f6:	681b      	ldr	r3, [r3, #0]
   136f8:	4610      	mov	r0, r2
   136fa:	4619      	mov	r1, r3
   136fc:	f004 fd9c 	bl	18238 <__aeabi_fsub>
   13700:	4603      	mov	r3, r0
   13702:	4618      	mov	r0, r3
   13704:	f004 fa0e 	bl	17b24 <__aeabi_f2d>
   13708:	4604      	mov	r4, r0
   1370a:	460d      	mov	r5, r1
   1370c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13714:	681a      	ldr	r2, [r3, #0]
   13716:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1371a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1371e:	681b      	ldr	r3, [r3, #0]
   13720:	4610      	mov	r0, r2
   13722:	4619      	mov	r1, r3
   13724:	f004 fd88 	bl	18238 <__aeabi_fsub>
   13728:	4603      	mov	r3, r0
   1372a:	4618      	mov	r0, r3
   1372c:	f004 f9fa 	bl	17b24 <__aeabi_f2d>
   13730:	4602      	mov	r2, r0
   13732:	460b      	mov	r3, r1
   13734:	4620      	mov	r0, r4
   13736:	4629      	mov	r1, r5
   13738:	f002 fa12 	bl	15b60 <pp_atan2>
   1373c:	4602      	mov	r2, r0
   1373e:	460b      	mov	r3, r1
   13740:	4610      	mov	r0, r2
   13742:	4619      	mov	r1, r3
   13744:	f004 fd24 	bl	18190 <__aeabi_d2f>
   13748:	4603      	mov	r3, r0
   1374a:	61fb      	str	r3, [r7, #28]
   1374c:	69f8      	ldr	r0, [r7, #28]
   1374e:	f004 f9e9 	bl	17b24 <__aeabi_f2d>
   13752:	4604      	mov	r4, r0
   13754:	460d      	mov	r5, r1
   13756:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1375a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	4618      	mov	r0, r3
   13762:	f04f 0100 	mov.w	r1, #0
   13766:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1376a:	f004 fe6f 	bl	1844c <__aeabi_fmul>
   1376e:	4603      	mov	r3, r0
   13770:	4618      	mov	r0, r3
   13772:	f004 f9d7 	bl	17b24 <__aeabi_f2d>
   13776:	4602      	mov	r2, r0
   13778:	460b      	mov	r3, r1
   1377a:	f04f 0000 	mov.w	r0, #0
   1377e:	f04f 0100 	mov.w	r1, #0
   13782:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13786:	f004 fb4b 	bl	17e20 <__aeabi_ddiv>
   1378a:	4602      	mov	r2, r0
   1378c:	460b      	mov	r3, r1
   1378e:	4620      	mov	r0, r4
   13790:	4629      	mov	r1, r5
   13792:	f004 f869 	bl	17868 <__adddf3>
   13796:	4602      	mov	r2, r0
   13798:	460b      	mov	r3, r1
   1379a:	4610      	mov	r0, r2
   1379c:	4619      	mov	r1, r3
   1379e:	f004 fcf7 	bl	18190 <__aeabi_d2f>
   137a2:	4603      	mov	r3, r0
   137a4:	61bb      	str	r3, [r7, #24]
   137a6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   137aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ae:	681b      	ldr	r3, [r3, #0]
   137b0:	4618      	mov	r0, r3
   137b2:	f004 f9b7 	bl	17b24 <__aeabi_f2d>
   137b6:	4604      	mov	r4, r0
   137b8:	460d      	mov	r5, r1
   137ba:	69b8      	ldr	r0, [r7, #24]
   137bc:	f004 f9b2 	bl	17b24 <__aeabi_f2d>
   137c0:	4602      	mov	r2, r0
   137c2:	460b      	mov	r3, r1
   137c4:	4610      	mov	r0, r2
   137c6:	4619      	mov	r1, r3
   137c8:	a3b1      	add	r3, pc, #708	; (adr r3, 13a90 <auto_nav+0x1570>)
   137ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   137ce:	f004 f84b 	bl	17868 <__adddf3>
   137d2:	4602      	mov	r2, r0
   137d4:	460b      	mov	r3, r1
   137d6:	4610      	mov	r0, r2
   137d8:	4619      	mov	r1, r3
   137da:	f002 fa81 	bl	15ce0 <pp_sin>
   137de:	4602      	mov	r2, r0
   137e0:	460b      	mov	r3, r1
   137e2:	4610      	mov	r0, r2
   137e4:	4619      	mov	r1, r3
   137e6:	f04f 0200 	mov.w	r2, #0
   137ea:	f04f 0300 	mov.w	r3, #0
   137ee:	f2c4 0349 	movt	r3, #16457	; 0x4049
   137f2:	f004 f9eb 	bl	17bcc <__aeabi_dmul>
   137f6:	4602      	mov	r2, r0
   137f8:	460b      	mov	r3, r1
   137fa:	4620      	mov	r0, r4
   137fc:	4629      	mov	r1, r5
   137fe:	f004 f833 	bl	17868 <__adddf3>
   13802:	4602      	mov	r2, r0
   13804:	460b      	mov	r3, r1
   13806:	4610      	mov	r0, r2
   13808:	4619      	mov	r1, r3
   1380a:	f004 fcc1 	bl	18190 <__aeabi_d2f>
   1380e:	4606      	mov	r6, r0
   13810:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13818:	681b      	ldr	r3, [r3, #0]
   1381a:	4618      	mov	r0, r3
   1381c:	f004 f982 	bl	17b24 <__aeabi_f2d>
   13820:	4604      	mov	r4, r0
   13822:	460d      	mov	r5, r1
   13824:	69b8      	ldr	r0, [r7, #24]
   13826:	f004 f97d 	bl	17b24 <__aeabi_f2d>
   1382a:	4602      	mov	r2, r0
   1382c:	460b      	mov	r3, r1
   1382e:	4610      	mov	r0, r2
   13830:	4619      	mov	r1, r3
   13832:	f002 fa55 	bl	15ce0 <pp_sin>
   13836:	4602      	mov	r2, r0
   13838:	460b      	mov	r3, r1
   1383a:	4610      	mov	r0, r2
   1383c:	4619      	mov	r1, r3
   1383e:	f04f 0200 	mov.w	r2, #0
   13842:	f04f 0300 	mov.w	r3, #0
   13846:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1384a:	f004 f9bf 	bl	17bcc <__aeabi_dmul>
   1384e:	4602      	mov	r2, r0
   13850:	460b      	mov	r3, r1
   13852:	4620      	mov	r0, r4
   13854:	4629      	mov	r1, r5
   13856:	f004 f807 	bl	17868 <__adddf3>
   1385a:	4602      	mov	r2, r0
   1385c:	460b      	mov	r3, r1
   1385e:	4610      	mov	r0, r2
   13860:	4619      	mov	r1, r3
   13862:	f004 fc95 	bl	18190 <__aeabi_d2f>
   13866:	4603      	mov	r3, r0
   13868:	4630      	mov	r0, r6
   1386a:	4619      	mov	r1, r3
   1386c:	f001 f81c 	bl	148a8 <fly_to_xy>
   13870:	69b8      	ldr	r0, [r7, #24]
   13872:	f004 f957 	bl	17b24 <__aeabi_f2d>
   13876:	4602      	mov	r2, r0
   13878:	460b      	mov	r3, r1
   1387a:	a185      	add	r1, pc, #532	; (adr r1, 13a90 <auto_nav+0x1570>)
   1387c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13880:	f003 fff0 	bl	17864 <__aeabi_dsub>
   13884:	4602      	mov	r2, r0
   13886:	460b      	mov	r3, r1
   13888:	4610      	mov	r0, r2
   1388a:	4619      	mov	r1, r3
   1388c:	a382      	add	r3, pc, #520	; (adr r3, 13a98 <auto_nav+0x1578>)
   1388e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13892:	f004 fac5 	bl	17e20 <__aeabi_ddiv>
   13896:	4602      	mov	r2, r0
   13898:	460b      	mov	r3, r1
   1389a:	4610      	mov	r0, r2
   1389c:	4619      	mov	r1, r3
   1389e:	f04f 0200 	mov.w	r2, #0
   138a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   138a6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   138aa:	f004 f98f 	bl	17bcc <__aeabi_dmul>
   138ae:	4602      	mov	r2, r0
   138b0:	460b      	mov	r3, r1
   138b2:	4610      	mov	r0, r2
   138b4:	4619      	mov	r1, r3
   138b6:	f004 fc6b 	bl	18190 <__aeabi_d2f>
   138ba:	4602      	mov	r2, r0
   138bc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c4:	601a      	str	r2, [r3, #0]
   138c6:	e012      	b.n	138ee <auto_nav+0x13ce>
   138c8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138d0:	681b      	ldr	r3, [r3, #0]
   138d2:	4618      	mov	r0, r3
   138d4:	f04f 0100 	mov.w	r1, #0
   138d8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   138dc:	f004 fcae 	bl	1823c <__addsf3>
   138e0:	4603      	mov	r3, r0
   138e2:	461a      	mov	r2, r3
   138e4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138ec:	601a      	str	r2, [r3, #0]
   138ee:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138f6:	681b      	ldr	r3, [r3, #0]
   138f8:	4618      	mov	r0, r3
   138fa:	f04f 0100 	mov.w	r1, #0
   138fe:	f004 ff43 	bl	18788 <__aeabi_fcmplt>
   13902:	4603      	mov	r3, r0
   13904:	2b00      	cmp	r3, #0
   13906:	d1df      	bne.n	138c8 <auto_nav+0x13a8>
   13908:	e012      	b.n	13930 <auto_nav+0x1410>
   1390a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1390e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	4618      	mov	r0, r3
   13916:	f04f 0100 	mov.w	r1, #0
   1391a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1391e:	f004 fc8b 	bl	18238 <__aeabi_fsub>
   13922:	4603      	mov	r3, r0
   13924:	461a      	mov	r2, r3
   13926:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1392a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1392e:	601a      	str	r2, [r3, #0]
   13930:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13938:	681b      	ldr	r3, [r3, #0]
   1393a:	4618      	mov	r0, r3
   1393c:	f04f 0100 	mov.w	r1, #0
   13940:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13944:	f004 ff34 	bl	187b0 <__aeabi_fcmpge>
   13948:	4603      	mov	r3, r0
   1394a:	2b00      	cmp	r3, #0
   1394c:	d1dd      	bne.n	1390a <auto_nav+0x13ea>
        return;
   1394e:	f000 beb9 	b.w	146c4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13952:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1395a:	781b      	ldrb	r3, [r3, #0]
   1395c:	2b01      	cmp	r3, #1
   1395e:	f040 86b1 	bne.w	146c4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13962:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1396a:	2201      	movs	r2, #1
   1396c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1396e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13976:	781b      	ldrb	r3, [r3, #0]
   13978:	3301      	adds	r3, #1
   1397a:	b2da      	uxtb	r2, r3
   1397c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13984:	701a      	strb	r2, [r3, #0]
   13986:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1398a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1398e:	2200      	movs	r2, #0
   13990:	701a      	strb	r2, [r3, #0]
   13992:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1399a:	2200      	movs	r2, #0
   1399c:	801a      	strh	r2, [r3, #0]
   1399e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   139a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a6:	681a      	ldr	r2, [r3, #0]
   139a8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   139ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b0:	601a      	str	r2, [r3, #0]
   139b2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   139b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ba:	681a      	ldr	r2, [r3, #0]
   139bc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   139c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c4:	601a      	str	r2, [r3, #0]
   139c6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   139ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ce:	2200      	movs	r2, #0
   139d0:	801a      	strh	r2, [r3, #0]
   139d2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   139d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139da:	f04f 0200 	mov.w	r2, #0
   139de:	601a      	str	r2, [r3, #0]
   139e0:	f000 be70 	b.w	146c4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   139e4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   139e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ec:	781b      	ldrb	r3, [r3, #0]
   139ee:	2b04      	cmp	r3, #4
   139f0:	f040 8202 	bne.w	13df8 <auto_nav+0x18d8>
{
    nav_block = 4;
   139f4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   139f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fc:	2204      	movs	r2, #4
   139fe:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a00:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a08:	781b      	ldrb	r3, [r3, #0]
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	d007      	beq.n	13a1e <auto_nav+0x14fe>
   13a0e:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a16:	2200      	movs	r2, #0
   13a18:	701a      	strb	r2, [r3, #0]
   13a1a:	2301      	movs	r3, #1
   13a1c:	e000      	b.n	13a20 <auto_nav+0x1500>
   13a1e:	2300      	movs	r3, #0
   13a20:	2b00      	cmp	r3, #0
   13a22:	d03d      	beq.n	13aa0 <auto_nav+0x1580>
   13a24:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2c:	2205      	movs	r2, #5
   13a2e:	701a      	strb	r2, [r3, #0]
   13a30:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a38:	2200      	movs	r2, #0
   13a3a:	701a      	strb	r2, [r3, #0]
   13a3c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a44:	2200      	movs	r2, #0
   13a46:	801a      	strh	r2, [r3, #0]
   13a48:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a50:	681a      	ldr	r2, [r3, #0]
   13a52:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5a:	601a      	str	r2, [r3, #0]
   13a5c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a64:	681a      	ldr	r2, [r3, #0]
   13a66:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6e:	601a      	str	r2, [r3, #0]
   13a70:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a78:	2200      	movs	r2, #0
   13a7a:	801a      	strh	r2, [r3, #0]
   13a7c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a84:	f04f 0200 	mov.w	r2, #0
   13a88:	601a      	str	r2, [r3, #0]
   13a8a:	f000 be1b 	b.w	146c4 <auto_nav+0x21a4>
   13a8e:	bf00      	nop
   13a90:	54442d18 	.word	0x54442d18
   13a94:	3ff921fb 	.word	0x3ff921fb
   13a98:	54442d18 	.word	0x54442d18
   13a9c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13aa0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	2b00      	cmp	r3, #0
   13aac:	f040 815b 	bne.w	13d66 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13ab0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab8:	2200      	movs	r2, #0
   13aba:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13abc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac4:	2200      	movs	r2, #0
   13ac6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13ac8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad0:	f04f 0200 	mov.w	r2, #0
   13ad4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13ad6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ade:	2203      	movs	r2, #3
   13ae0:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13ae2:	f240 5378 	movw	r3, #1400	; 0x578
   13ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aea:	689a      	ldr	r2, [r3, #8]
   13aec:	f240 5374 	movw	r3, #1396	; 0x574
   13af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af4:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13af6:	f64c 0394 	movw	r3, #51348	; 0xc894
   13afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13afe:	f04f 0200 	mov.w	r2, #0
   13b02:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b04:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b0c:	681a      	ldr	r2, [r3, #0]
   13b0e:	f240 5378 	movw	r3, #1400	; 0x578
   13b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b16:	685b      	ldr	r3, [r3, #4]
   13b18:	4610      	mov	r0, r2
   13b1a:	4619      	mov	r1, r3
   13b1c:	f004 fb8c 	bl	18238 <__aeabi_fsub>
   13b20:	4603      	mov	r3, r0
   13b22:	4618      	mov	r0, r3
   13b24:	f003 fffe 	bl	17b24 <__aeabi_f2d>
   13b28:	4604      	mov	r4, r0
   13b2a:	460d      	mov	r5, r1
   13b2c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b34:	681a      	ldr	r2, [r3, #0]
   13b36:	f240 5378 	movw	r3, #1400	; 0x578
   13b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	4610      	mov	r0, r2
   13b42:	4619      	mov	r1, r3
   13b44:	f004 fb78 	bl	18238 <__aeabi_fsub>
   13b48:	4603      	mov	r3, r0
   13b4a:	4618      	mov	r0, r3
   13b4c:	f003 ffea 	bl	17b24 <__aeabi_f2d>
   13b50:	4602      	mov	r2, r0
   13b52:	460b      	mov	r3, r1
   13b54:	4620      	mov	r0, r4
   13b56:	4629      	mov	r1, r5
   13b58:	f002 f802 	bl	15b60 <pp_atan2>
   13b5c:	4602      	mov	r2, r0
   13b5e:	460b      	mov	r3, r1
   13b60:	4610      	mov	r0, r2
   13b62:	4619      	mov	r1, r3
   13b64:	f004 fb14 	bl	18190 <__aeabi_d2f>
   13b68:	4603      	mov	r3, r0
   13b6a:	617b      	str	r3, [r7, #20]
   13b6c:	6978      	ldr	r0, [r7, #20]
   13b6e:	f003 ffd9 	bl	17b24 <__aeabi_f2d>
   13b72:	4604      	mov	r4, r0
   13b74:	460d      	mov	r5, r1
   13b76:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	4618      	mov	r0, r3
   13b82:	f04f 0100 	mov.w	r1, #0
   13b86:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13b8a:	f004 fc5f 	bl	1844c <__aeabi_fmul>
   13b8e:	4603      	mov	r3, r0
   13b90:	4618      	mov	r0, r3
   13b92:	f003 ffc7 	bl	17b24 <__aeabi_f2d>
   13b96:	4602      	mov	r2, r0
   13b98:	460b      	mov	r3, r1
   13b9a:	f04f 0000 	mov.w	r0, #0
   13b9e:	f04f 0100 	mov.w	r1, #0
   13ba2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13ba6:	f004 f93b 	bl	17e20 <__aeabi_ddiv>
   13baa:	4602      	mov	r2, r0
   13bac:	460b      	mov	r3, r1
   13bae:	4620      	mov	r0, r4
   13bb0:	4629      	mov	r1, r5
   13bb2:	f003 fe59 	bl	17868 <__adddf3>
   13bb6:	4602      	mov	r2, r0
   13bb8:	460b      	mov	r3, r1
   13bba:	4610      	mov	r0, r2
   13bbc:	4619      	mov	r1, r3
   13bbe:	f004 fae7 	bl	18190 <__aeabi_d2f>
   13bc2:	4603      	mov	r3, r0
   13bc4:	613b      	str	r3, [r7, #16]
   13bc6:	f240 5378 	movw	r3, #1400	; 0x578
   13bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bce:	681b      	ldr	r3, [r3, #0]
   13bd0:	4618      	mov	r0, r3
   13bd2:	f003 ffa7 	bl	17b24 <__aeabi_f2d>
   13bd6:	4604      	mov	r4, r0
   13bd8:	460d      	mov	r5, r1
   13bda:	6938      	ldr	r0, [r7, #16]
   13bdc:	f003 ffa2 	bl	17b24 <__aeabi_f2d>
   13be0:	4602      	mov	r2, r0
   13be2:	460b      	mov	r3, r1
   13be4:	4610      	mov	r0, r2
   13be6:	4619      	mov	r1, r3
   13be8:	a3af      	add	r3, pc, #700	; (adr r3, 13ea8 <auto_nav+0x1988>)
   13bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bee:	f003 fe3b 	bl	17868 <__adddf3>
   13bf2:	4602      	mov	r2, r0
   13bf4:	460b      	mov	r3, r1
   13bf6:	4610      	mov	r0, r2
   13bf8:	4619      	mov	r1, r3
   13bfa:	f002 f871 	bl	15ce0 <pp_sin>
   13bfe:	4602      	mov	r2, r0
   13c00:	460b      	mov	r3, r1
   13c02:	4610      	mov	r0, r2
   13c04:	4619      	mov	r1, r3
   13c06:	a3aa      	add	r3, pc, #680	; (adr r3, 13eb0 <auto_nav+0x1990>)
   13c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c0c:	f003 ffde 	bl	17bcc <__aeabi_dmul>
   13c10:	4602      	mov	r2, r0
   13c12:	460b      	mov	r3, r1
   13c14:	4620      	mov	r0, r4
   13c16:	4629      	mov	r1, r5
   13c18:	f003 fe26 	bl	17868 <__adddf3>
   13c1c:	4602      	mov	r2, r0
   13c1e:	460b      	mov	r3, r1
   13c20:	4610      	mov	r0, r2
   13c22:	4619      	mov	r1, r3
   13c24:	f004 fab4 	bl	18190 <__aeabi_d2f>
   13c28:	4606      	mov	r6, r0
   13c2a:	f240 5378 	movw	r3, #1400	; 0x578
   13c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c32:	685b      	ldr	r3, [r3, #4]
   13c34:	4618      	mov	r0, r3
   13c36:	f003 ff75 	bl	17b24 <__aeabi_f2d>
   13c3a:	4604      	mov	r4, r0
   13c3c:	460d      	mov	r5, r1
   13c3e:	6938      	ldr	r0, [r7, #16]
   13c40:	f003 ff70 	bl	17b24 <__aeabi_f2d>
   13c44:	4602      	mov	r2, r0
   13c46:	460b      	mov	r3, r1
   13c48:	4610      	mov	r0, r2
   13c4a:	4619      	mov	r1, r3
   13c4c:	f002 f848 	bl	15ce0 <pp_sin>
   13c50:	4602      	mov	r2, r0
   13c52:	460b      	mov	r3, r1
   13c54:	4610      	mov	r0, r2
   13c56:	4619      	mov	r1, r3
   13c58:	a395      	add	r3, pc, #596	; (adr r3, 13eb0 <auto_nav+0x1990>)
   13c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c5e:	f003 ffb5 	bl	17bcc <__aeabi_dmul>
   13c62:	4602      	mov	r2, r0
   13c64:	460b      	mov	r3, r1
   13c66:	4620      	mov	r0, r4
   13c68:	4629      	mov	r1, r5
   13c6a:	f003 fdfd 	bl	17868 <__adddf3>
   13c6e:	4602      	mov	r2, r0
   13c70:	460b      	mov	r3, r1
   13c72:	4610      	mov	r0, r2
   13c74:	4619      	mov	r1, r3
   13c76:	f004 fa8b 	bl	18190 <__aeabi_d2f>
   13c7a:	4603      	mov	r3, r0
   13c7c:	4630      	mov	r0, r6
   13c7e:	4619      	mov	r1, r3
   13c80:	f000 fe12 	bl	148a8 <fly_to_xy>
   13c84:	6938      	ldr	r0, [r7, #16]
   13c86:	f003 ff4d 	bl	17b24 <__aeabi_f2d>
   13c8a:	4602      	mov	r2, r0
   13c8c:	460b      	mov	r3, r1
   13c8e:	a186      	add	r1, pc, #536	; (adr r1, 13ea8 <auto_nav+0x1988>)
   13c90:	e9d1 0100 	ldrd	r0, r1, [r1]
   13c94:	f003 fde6 	bl	17864 <__aeabi_dsub>
   13c98:	4602      	mov	r2, r0
   13c9a:	460b      	mov	r3, r1
   13c9c:	4610      	mov	r0, r2
   13c9e:	4619      	mov	r1, r3
   13ca0:	a385      	add	r3, pc, #532	; (adr r3, 13eb8 <auto_nav+0x1998>)
   13ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ca6:	f004 f8bb 	bl	17e20 <__aeabi_ddiv>
   13caa:	4602      	mov	r2, r0
   13cac:	460b      	mov	r3, r1
   13cae:	4610      	mov	r0, r2
   13cb0:	4619      	mov	r1, r3
   13cb2:	f04f 0200 	mov.w	r2, #0
   13cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13cba:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13cbe:	f003 ff85 	bl	17bcc <__aeabi_dmul>
   13cc2:	4602      	mov	r2, r0
   13cc4:	460b      	mov	r3, r1
   13cc6:	4610      	mov	r0, r2
   13cc8:	4619      	mov	r1, r3
   13cca:	f004 fa61 	bl	18190 <__aeabi_d2f>
   13cce:	4602      	mov	r2, r0
   13cd0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cd8:	601a      	str	r2, [r3, #0]
   13cda:	e012      	b.n	13d02 <auto_nav+0x17e2>
   13cdc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ce4:	681b      	ldr	r3, [r3, #0]
   13ce6:	4618      	mov	r0, r3
   13ce8:	f04f 0100 	mov.w	r1, #0
   13cec:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13cf0:	f004 faa4 	bl	1823c <__addsf3>
   13cf4:	4603      	mov	r3, r0
   13cf6:	461a      	mov	r2, r3
   13cf8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d00:	601a      	str	r2, [r3, #0]
   13d02:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d0a:	681b      	ldr	r3, [r3, #0]
   13d0c:	4618      	mov	r0, r3
   13d0e:	f04f 0100 	mov.w	r1, #0
   13d12:	f004 fd39 	bl	18788 <__aeabi_fcmplt>
   13d16:	4603      	mov	r3, r0
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d1df      	bne.n	13cdc <auto_nav+0x17bc>
   13d1c:	e012      	b.n	13d44 <auto_nav+0x1824>
   13d1e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d26:	681b      	ldr	r3, [r3, #0]
   13d28:	4618      	mov	r0, r3
   13d2a:	f04f 0100 	mov.w	r1, #0
   13d2e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d32:	f004 fa81 	bl	18238 <__aeabi_fsub>
   13d36:	4603      	mov	r3, r0
   13d38:	461a      	mov	r2, r3
   13d3a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d42:	601a      	str	r2, [r3, #0]
   13d44:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	4618      	mov	r0, r3
   13d50:	f04f 0100 	mov.w	r1, #0
   13d54:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d58:	f004 fd2a 	bl	187b0 <__aeabi_fcmpge>
   13d5c:	4603      	mov	r3, r0
   13d5e:	2b00      	cmp	r3, #0
   13d60:	d1dd      	bne.n	13d1e <auto_nav+0x17fe>
        return;
   13d62:	f000 bcaf 	b.w	146c4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13d66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d6e:	781b      	ldrb	r3, [r3, #0]
   13d70:	2b01      	cmp	r3, #1
   13d72:	f040 84a7 	bne.w	146c4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13d76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d7e:	2201      	movs	r2, #1
   13d80:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13d82:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d8a:	781b      	ldrb	r3, [r3, #0]
   13d8c:	3301      	adds	r3, #1
   13d8e:	b2da      	uxtb	r2, r3
   13d90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d98:	701a      	strb	r2, [r3, #0]
   13d9a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da2:	2200      	movs	r2, #0
   13da4:	701a      	strb	r2, [r3, #0]
   13da6:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dae:	2200      	movs	r2, #0
   13db0:	801a      	strh	r2, [r3, #0]
   13db2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dba:	681a      	ldr	r2, [r3, #0]
   13dbc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc4:	601a      	str	r2, [r3, #0]
   13dc6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dce:	681a      	ldr	r2, [r3, #0]
   13dd0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd8:	601a      	str	r2, [r3, #0]
   13dda:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de2:	2200      	movs	r2, #0
   13de4:	801a      	strh	r2, [r3, #0]
   13de6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dee:	f04f 0200 	mov.w	r2, #0
   13df2:	601a      	str	r2, [r3, #0]
   13df4:	f000 bc66 	b.w	146c4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13df8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e00:	781b      	ldrb	r3, [r3, #0]
   13e02:	2b05      	cmp	r3, #5
   13e04:	f040 845e 	bne.w	146c4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13e08:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e10:	2205      	movs	r2, #5
   13e12:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13e14:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1c:	781b      	ldrb	r3, [r3, #0]
   13e1e:	2b00      	cmp	r3, #0
   13e20:	d007      	beq.n	13e32 <auto_nav+0x1912>
   13e22:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e2a:	2200      	movs	r2, #0
   13e2c:	701a      	strb	r2, [r3, #0]
   13e2e:	2301      	movs	r3, #1
   13e30:	e000      	b.n	13e34 <auto_nav+0x1914>
   13e32:	2300      	movs	r3, #0
   13e34:	2b00      	cmp	r3, #0
   13e36:	d043      	beq.n	13ec0 <auto_nav+0x19a0>
   13e38:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e40:	2201      	movs	r2, #1
   13e42:	701a      	strb	r2, [r3, #0]
   13e44:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4c:	2200      	movs	r2, #0
   13e4e:	701a      	strb	r2, [r3, #0]
   13e50:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e58:	2200      	movs	r2, #0
   13e5a:	801a      	strh	r2, [r3, #0]
   13e5c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	681a      	ldr	r2, [r3, #0]
   13e66:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e6e:	601a      	str	r2, [r3, #0]
   13e70:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e78:	681a      	ldr	r2, [r3, #0]
   13e7a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e82:	601a      	str	r2, [r3, #0]
   13e84:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e8c:	2200      	movs	r2, #0
   13e8e:	801a      	strh	r2, [r3, #0]
   13e90:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e98:	f04f 0200 	mov.w	r2, #0
   13e9c:	601a      	str	r2, [r3, #0]
   13e9e:	f000 bc11 	b.w	146c4 <auto_nav+0x21a4>
   13ea2:	bf00      	nop
   13ea4:	f3af 8000 	nop.w
   13ea8:	54442d18 	.word	0x54442d18
   13eac:	3ff921fb 	.word	0x3ff921fb
   13eb0:	00000000 	.word	0x00000000
   13eb4:	4062c000 	.word	0x4062c000
   13eb8:	54442d18 	.word	0x54442d18
   13ebc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13ec0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec8:	781b      	ldrb	r3, [r3, #0]
   13eca:	2b00      	cmp	r3, #0
   13ecc:	d133      	bne.n	13f36 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13ece:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed6:	2200      	movs	r2, #0
   13ed8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13eda:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee2:	781b      	ldrb	r3, [r3, #0]
   13ee4:	3301      	adds	r3, #1
   13ee6:	b2da      	uxtb	r2, r3
   13ee8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	701a      	strb	r2, [r3, #0]
   13ef2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	681a      	ldr	r2, [r3, #0]
   13efc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f04:	601a      	str	r2, [r3, #0]
   13f06:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f0e:	681a      	ldr	r2, [r3, #0]
   13f10:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f18:	601a      	str	r2, [r3, #0]
   13f1a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f22:	2200      	movs	r2, #0
   13f24:	801a      	strh	r2, [r3, #0]
   13f26:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f2e:	f04f 0200 	mov.w	r2, #0
   13f32:	601a      	str	r2, [r3, #0]
   13f34:	e3c6      	b.n	146c4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13f36:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3e:	781b      	ldrb	r3, [r3, #0]
   13f40:	2b01      	cmp	r3, #1
   13f42:	f040 81b5 	bne.w	142b0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13f46:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f4e:	2201      	movs	r2, #1
   13f50:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13f52:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f5a:	2200      	movs	r2, #0
   13f5c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13f5e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f66:	f04f 0200 	mov.w	r2, #0
   13f6a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13f6c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f74:	2203      	movs	r2, #3
   13f76:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13f78:	f240 5378 	movw	r3, #1400	; 0x578
   13f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f80:	695a      	ldr	r2, [r3, #20]
   13f82:	f240 5374 	movw	r3, #1396	; 0x574
   13f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f8a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13f8c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f94:	f04f 0200 	mov.w	r2, #0
   13f98:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13f9a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa2:	681a      	ldr	r2, [r3, #0]
   13fa4:	f240 5378 	movw	r3, #1400	; 0x578
   13fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fac:	691b      	ldr	r3, [r3, #16]
   13fae:	4610      	mov	r0, r2
   13fb0:	4619      	mov	r1, r3
   13fb2:	f004 f941 	bl	18238 <__aeabi_fsub>
   13fb6:	4603      	mov	r3, r0
   13fb8:	4618      	mov	r0, r3
   13fba:	f003 fdb3 	bl	17b24 <__aeabi_f2d>
   13fbe:	4604      	mov	r4, r0
   13fc0:	460d      	mov	r5, r1
   13fc2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fca:	681a      	ldr	r2, [r3, #0]
   13fcc:	f240 5378 	movw	r3, #1400	; 0x578
   13fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd4:	68db      	ldr	r3, [r3, #12]
   13fd6:	4610      	mov	r0, r2
   13fd8:	4619      	mov	r1, r3
   13fda:	f004 f92d 	bl	18238 <__aeabi_fsub>
   13fde:	4603      	mov	r3, r0
   13fe0:	4618      	mov	r0, r3
   13fe2:	f003 fd9f 	bl	17b24 <__aeabi_f2d>
   13fe6:	4602      	mov	r2, r0
   13fe8:	460b      	mov	r3, r1
   13fea:	4620      	mov	r0, r4
   13fec:	4629      	mov	r1, r5
   13fee:	f001 fdb7 	bl	15b60 <pp_atan2>
   13ff2:	4602      	mov	r2, r0
   13ff4:	460b      	mov	r3, r1
   13ff6:	4610      	mov	r0, r2
   13ff8:	4619      	mov	r1, r3
   13ffa:	f004 f8c9 	bl	18190 <__aeabi_d2f>
   13ffe:	4603      	mov	r3, r0
   14000:	60fb      	str	r3, [r7, #12]
   14002:	68f8      	ldr	r0, [r7, #12]
   14004:	f003 fd8e 	bl	17b24 <__aeabi_f2d>
   14008:	4604      	mov	r4, r0
   1400a:	460d      	mov	r5, r1
   1400c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14014:	681b      	ldr	r3, [r3, #0]
   14016:	4618      	mov	r0, r3
   14018:	f04f 0100 	mov.w	r1, #0
   1401c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14020:	f004 fa14 	bl	1844c <__aeabi_fmul>
   14024:	4603      	mov	r3, r0
   14026:	4618      	mov	r0, r3
   14028:	f003 fd7c 	bl	17b24 <__aeabi_f2d>
   1402c:	4602      	mov	r2, r0
   1402e:	460b      	mov	r3, r1
   14030:	f04f 0000 	mov.w	r0, #0
   14034:	f04f 0100 	mov.w	r1, #0
   14038:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1403c:	f003 fef0 	bl	17e20 <__aeabi_ddiv>
   14040:	4602      	mov	r2, r0
   14042:	460b      	mov	r3, r1
   14044:	4620      	mov	r0, r4
   14046:	4629      	mov	r1, r5
   14048:	f003 fc0e 	bl	17868 <__adddf3>
   1404c:	4602      	mov	r2, r0
   1404e:	460b      	mov	r3, r1
   14050:	4610      	mov	r0, r2
   14052:	4619      	mov	r1, r3
   14054:	f004 f89c 	bl	18190 <__aeabi_d2f>
   14058:	4603      	mov	r3, r0
   1405a:	60bb      	str	r3, [r7, #8]
   1405c:	f240 5378 	movw	r3, #1400	; 0x578
   14060:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14064:	68db      	ldr	r3, [r3, #12]
   14066:	4618      	mov	r0, r3
   14068:	f003 fd5c 	bl	17b24 <__aeabi_f2d>
   1406c:	4604      	mov	r4, r0
   1406e:	460d      	mov	r5, r1
   14070:	68b8      	ldr	r0, [r7, #8]
   14072:	f003 fd57 	bl	17b24 <__aeabi_f2d>
   14076:	4602      	mov	r2, r0
   14078:	460b      	mov	r3, r1
   1407a:	4610      	mov	r0, r2
   1407c:	4619      	mov	r1, r3
   1407e:	a388      	add	r3, pc, #544	; (adr r3, 142a0 <auto_nav+0x1d80>)
   14080:	e9d3 2300 	ldrd	r2, r3, [r3]
   14084:	f003 fbf0 	bl	17868 <__adddf3>
   14088:	4602      	mov	r2, r0
   1408a:	460b      	mov	r3, r1
   1408c:	4610      	mov	r0, r2
   1408e:	4619      	mov	r1, r3
   14090:	f001 fe26 	bl	15ce0 <pp_sin>
   14094:	4602      	mov	r2, r0
   14096:	460b      	mov	r3, r1
   14098:	4610      	mov	r0, r2
   1409a:	4619      	mov	r1, r3
   1409c:	f04f 0200 	mov.w	r2, #0
   140a0:	f04f 0300 	mov.w	r3, #0
   140a4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   140a8:	f003 fd90 	bl	17bcc <__aeabi_dmul>
   140ac:	4602      	mov	r2, r0
   140ae:	460b      	mov	r3, r1
   140b0:	4620      	mov	r0, r4
   140b2:	4629      	mov	r1, r5
   140b4:	f003 fbd8 	bl	17868 <__adddf3>
   140b8:	4602      	mov	r2, r0
   140ba:	460b      	mov	r3, r1
   140bc:	4610      	mov	r0, r2
   140be:	4619      	mov	r1, r3
   140c0:	f004 f866 	bl	18190 <__aeabi_d2f>
   140c4:	4606      	mov	r6, r0
   140c6:	f240 5378 	movw	r3, #1400	; 0x578
   140ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ce:	691b      	ldr	r3, [r3, #16]
   140d0:	4618      	mov	r0, r3
   140d2:	f003 fd27 	bl	17b24 <__aeabi_f2d>
   140d6:	4604      	mov	r4, r0
   140d8:	460d      	mov	r5, r1
   140da:	68b8      	ldr	r0, [r7, #8]
   140dc:	f003 fd22 	bl	17b24 <__aeabi_f2d>
   140e0:	4602      	mov	r2, r0
   140e2:	460b      	mov	r3, r1
   140e4:	4610      	mov	r0, r2
   140e6:	4619      	mov	r1, r3
   140e8:	f001 fdfa 	bl	15ce0 <pp_sin>
   140ec:	4602      	mov	r2, r0
   140ee:	460b      	mov	r3, r1
   140f0:	4610      	mov	r0, r2
   140f2:	4619      	mov	r1, r3
   140f4:	f04f 0200 	mov.w	r2, #0
   140f8:	f04f 0300 	mov.w	r3, #0
   140fc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14100:	f003 fd64 	bl	17bcc <__aeabi_dmul>
   14104:	4602      	mov	r2, r0
   14106:	460b      	mov	r3, r1
   14108:	4620      	mov	r0, r4
   1410a:	4629      	mov	r1, r5
   1410c:	f003 fbac 	bl	17868 <__adddf3>
   14110:	4602      	mov	r2, r0
   14112:	460b      	mov	r3, r1
   14114:	4610      	mov	r0, r2
   14116:	4619      	mov	r1, r3
   14118:	f004 f83a 	bl	18190 <__aeabi_d2f>
   1411c:	4603      	mov	r3, r0
   1411e:	4630      	mov	r0, r6
   14120:	4619      	mov	r1, r3
   14122:	f000 fbc1 	bl	148a8 <fly_to_xy>
   14126:	68b8      	ldr	r0, [r7, #8]
   14128:	f003 fcfc 	bl	17b24 <__aeabi_f2d>
   1412c:	4602      	mov	r2, r0
   1412e:	460b      	mov	r3, r1
   14130:	a15b      	add	r1, pc, #364	; (adr r1, 142a0 <auto_nav+0x1d80>)
   14132:	e9d1 0100 	ldrd	r0, r1, [r1]
   14136:	f003 fb95 	bl	17864 <__aeabi_dsub>
   1413a:	4602      	mov	r2, r0
   1413c:	460b      	mov	r3, r1
   1413e:	4610      	mov	r0, r2
   14140:	4619      	mov	r1, r3
   14142:	a359      	add	r3, pc, #356	; (adr r3, 142a8 <auto_nav+0x1d88>)
   14144:	e9d3 2300 	ldrd	r2, r3, [r3]
   14148:	f003 fe6a 	bl	17e20 <__aeabi_ddiv>
   1414c:	4602      	mov	r2, r0
   1414e:	460b      	mov	r3, r1
   14150:	4610      	mov	r0, r2
   14152:	4619      	mov	r1, r3
   14154:	f04f 0200 	mov.w	r2, #0
   14158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1415c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14160:	f003 fd34 	bl	17bcc <__aeabi_dmul>
   14164:	4602      	mov	r2, r0
   14166:	460b      	mov	r3, r1
   14168:	4610      	mov	r0, r2
   1416a:	4619      	mov	r1, r3
   1416c:	f004 f810 	bl	18190 <__aeabi_d2f>
   14170:	4602      	mov	r2, r0
   14172:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1417a:	601a      	str	r2, [r3, #0]
   1417c:	e012      	b.n	141a4 <auto_nav+0x1c84>
   1417e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14186:	681b      	ldr	r3, [r3, #0]
   14188:	4618      	mov	r0, r3
   1418a:	f04f 0100 	mov.w	r1, #0
   1418e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14192:	f004 f853 	bl	1823c <__addsf3>
   14196:	4603      	mov	r3, r0
   14198:	461a      	mov	r2, r3
   1419a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1419e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141a2:	601a      	str	r2, [r3, #0]
   141a4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ac:	681b      	ldr	r3, [r3, #0]
   141ae:	4618      	mov	r0, r3
   141b0:	f04f 0100 	mov.w	r1, #0
   141b4:	f004 fae8 	bl	18788 <__aeabi_fcmplt>
   141b8:	4603      	mov	r3, r0
   141ba:	2b00      	cmp	r3, #0
   141bc:	d1df      	bne.n	1417e <auto_nav+0x1c5e>
   141be:	e012      	b.n	141e6 <auto_nav+0x1cc6>
   141c0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141c8:	681b      	ldr	r3, [r3, #0]
   141ca:	4618      	mov	r0, r3
   141cc:	f04f 0100 	mov.w	r1, #0
   141d0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141d4:	f004 f830 	bl	18238 <__aeabi_fsub>
   141d8:	4603      	mov	r3, r0
   141da:	461a      	mov	r2, r3
   141dc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141e4:	601a      	str	r2, [r3, #0]
   141e6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ee:	681b      	ldr	r3, [r3, #0]
   141f0:	4618      	mov	r0, r3
   141f2:	f04f 0100 	mov.w	r1, #0
   141f6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141fa:	f004 fad9 	bl	187b0 <__aeabi_fcmpge>
   141fe:	4603      	mov	r3, r0
   14200:	2b00      	cmp	r3, #0
   14202:	d1dd      	bne.n	141c0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   14204:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1420c:	681b      	ldr	r3, [r3, #0]
   1420e:	4618      	mov	r0, r3
   14210:	f04f 0100 	mov.w	r1, #0
   14214:	f004 fad6 	bl	187c4 <__aeabi_fcmpgt>
   14218:	4603      	mov	r3, r0
   1421a:	2b00      	cmp	r3, #0
   1421c:	d100      	bne.n	14220 <auto_nav+0x1d00>
        return;
   1421e:	e251      	b.n	146c4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14220:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	4618      	mov	r0, r3
   1422c:	f04f 0100 	mov.w	r1, #0
   14230:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14234:	f004 faa8 	bl	18788 <__aeabi_fcmplt>
   14238:	4603      	mov	r3, r0
   1423a:	2b00      	cmp	r3, #0
   1423c:	d100      	bne.n	14240 <auto_nav+0x1d20>
        return;
   1423e:	e241      	b.n	146c4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14240:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14248:	781b      	ldrb	r3, [r3, #0]
   1424a:	3301      	adds	r3, #1
   1424c:	b2da      	uxtb	r2, r3
   1424e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14256:	701a      	strb	r2, [r3, #0]
   14258:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1425c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14260:	681a      	ldr	r2, [r3, #0]
   14262:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1426a:	601a      	str	r2, [r3, #0]
   1426c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14274:	681a      	ldr	r2, [r3, #0]
   14276:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1427a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1427e:	601a      	str	r2, [r3, #0]
   14280:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14288:	2200      	movs	r2, #0
   1428a:	801a      	strh	r2, [r3, #0]
   1428c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14294:	f04f 0200 	mov.w	r2, #0
   14298:	601a      	str	r2, [r3, #0]
   1429a:	e213      	b.n	146c4 <auto_nav+0x21a4>
   1429c:	f3af 8000 	nop.w
   142a0:	54442d18 	.word	0x54442d18
   142a4:	3ff921fb 	.word	0x3ff921fb
   142a8:	54442d18 	.word	0x54442d18
   142ac:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   142b0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b8:	781b      	ldrb	r3, [r3, #0]
   142ba:	2b02      	cmp	r3, #2
   142bc:	f040 81ad 	bne.w	1461a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   142c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142c8:	2202      	movs	r2, #2
   142ca:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   142cc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   142d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d4:	2200      	movs	r2, #0
   142d6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   142d8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   142dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e0:	f04f 0200 	mov.w	r2, #0
   142e4:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   142e6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   142ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ee:	2203      	movs	r2, #3
   142f0:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   142f2:	f240 5378 	movw	r3, #1400	; 0x578
   142f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   142fc:	f240 5374 	movw	r3, #1396	; 0x574
   14300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14304:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14306:	f64c 0394 	movw	r3, #51348	; 0xc894
   1430a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1430e:	f04f 0200 	mov.w	r2, #0
   14312:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14314:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1431c:	681a      	ldr	r2, [r3, #0]
   1431e:	f240 5378 	movw	r3, #1400	; 0x578
   14322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14328:	4610      	mov	r0, r2
   1432a:	4619      	mov	r1, r3
   1432c:	f003 ff84 	bl	18238 <__aeabi_fsub>
   14330:	4603      	mov	r3, r0
   14332:	4618      	mov	r0, r3
   14334:	f003 fbf6 	bl	17b24 <__aeabi_f2d>
   14338:	4604      	mov	r4, r0
   1433a:	460d      	mov	r5, r1
   1433c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14344:	681a      	ldr	r2, [r3, #0]
   14346:	f240 5378 	movw	r3, #1400	; 0x578
   1434a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14350:	4610      	mov	r0, r2
   14352:	4619      	mov	r1, r3
   14354:	f003 ff70 	bl	18238 <__aeabi_fsub>
   14358:	4603      	mov	r3, r0
   1435a:	4618      	mov	r0, r3
   1435c:	f003 fbe2 	bl	17b24 <__aeabi_f2d>
   14360:	4602      	mov	r2, r0
   14362:	460b      	mov	r3, r1
   14364:	4620      	mov	r0, r4
   14366:	4629      	mov	r1, r5
   14368:	f001 fbfa 	bl	15b60 <pp_atan2>
   1436c:	4602      	mov	r2, r0
   1436e:	460b      	mov	r3, r1
   14370:	4610      	mov	r0, r2
   14372:	4619      	mov	r1, r3
   14374:	f003 ff0c 	bl	18190 <__aeabi_d2f>
   14378:	4603      	mov	r3, r0
   1437a:	607b      	str	r3, [r7, #4]
   1437c:	6878      	ldr	r0, [r7, #4]
   1437e:	f003 fbd1 	bl	17b24 <__aeabi_f2d>
   14382:	4604      	mov	r4, r0
   14384:	460d      	mov	r5, r1
   14386:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1438a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1438e:	681b      	ldr	r3, [r3, #0]
   14390:	4618      	mov	r0, r3
   14392:	f04f 0100 	mov.w	r1, #0
   14396:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1439a:	f004 f857 	bl	1844c <__aeabi_fmul>
   1439e:	4603      	mov	r3, r0
   143a0:	4618      	mov	r0, r3
   143a2:	f003 fbbf 	bl	17b24 <__aeabi_f2d>
   143a6:	4602      	mov	r2, r0
   143a8:	460b      	mov	r3, r1
   143aa:	f04f 0000 	mov.w	r0, #0
   143ae:	f04f 0100 	mov.w	r1, #0
   143b2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   143b6:	f003 fd33 	bl	17e20 <__aeabi_ddiv>
   143ba:	4602      	mov	r2, r0
   143bc:	460b      	mov	r3, r1
   143be:	4620      	mov	r0, r4
   143c0:	4629      	mov	r1, r5
   143c2:	f003 fa51 	bl	17868 <__adddf3>
   143c6:	4602      	mov	r2, r0
   143c8:	460b      	mov	r3, r1
   143ca:	4610      	mov	r0, r2
   143cc:	4619      	mov	r1, r3
   143ce:	f003 fedf 	bl	18190 <__aeabi_d2f>
   143d2:	4603      	mov	r3, r0
   143d4:	603b      	str	r3, [r7, #0]
   143d6:	f240 5378 	movw	r3, #1400	; 0x578
   143da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143e0:	4618      	mov	r0, r3
   143e2:	f003 fb9f 	bl	17b24 <__aeabi_f2d>
   143e6:	4604      	mov	r4, r0
   143e8:	460d      	mov	r5, r1
   143ea:	6838      	ldr	r0, [r7, #0]
   143ec:	f003 fb9a 	bl	17b24 <__aeabi_f2d>
   143f0:	4602      	mov	r2, r0
   143f2:	460b      	mov	r3, r1
   143f4:	4610      	mov	r0, r2
   143f6:	4619      	mov	r1, r3
   143f8:	a3b5      	add	r3, pc, #724	; (adr r3, 146d0 <auto_nav+0x21b0>)
   143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   143fe:	f003 fa33 	bl	17868 <__adddf3>
   14402:	4602      	mov	r2, r0
   14404:	460b      	mov	r3, r1
   14406:	4610      	mov	r0, r2
   14408:	4619      	mov	r1, r3
   1440a:	f001 fc69 	bl	15ce0 <pp_sin>
   1440e:	4602      	mov	r2, r0
   14410:	460b      	mov	r3, r1
   14412:	4610      	mov	r0, r2
   14414:	4619      	mov	r1, r3
   14416:	f04f 0200 	mov.w	r2, #0
   1441a:	f04f 0300 	mov.w	r3, #0
   1441e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14422:	f003 fbd3 	bl	17bcc <__aeabi_dmul>
   14426:	4602      	mov	r2, r0
   14428:	460b      	mov	r3, r1
   1442a:	4620      	mov	r0, r4
   1442c:	4629      	mov	r1, r5
   1442e:	f003 fa1b 	bl	17868 <__adddf3>
   14432:	4602      	mov	r2, r0
   14434:	460b      	mov	r3, r1
   14436:	4610      	mov	r0, r2
   14438:	4619      	mov	r1, r3
   1443a:	f003 fea9 	bl	18190 <__aeabi_d2f>
   1443e:	4606      	mov	r6, r0
   14440:	f240 5378 	movw	r3, #1400	; 0x578
   14444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1444a:	4618      	mov	r0, r3
   1444c:	f003 fb6a 	bl	17b24 <__aeabi_f2d>
   14450:	4604      	mov	r4, r0
   14452:	460d      	mov	r5, r1
   14454:	6838      	ldr	r0, [r7, #0]
   14456:	f003 fb65 	bl	17b24 <__aeabi_f2d>
   1445a:	4602      	mov	r2, r0
   1445c:	460b      	mov	r3, r1
   1445e:	4610      	mov	r0, r2
   14460:	4619      	mov	r1, r3
   14462:	f001 fc3d 	bl	15ce0 <pp_sin>
   14466:	4602      	mov	r2, r0
   14468:	460b      	mov	r3, r1
   1446a:	4610      	mov	r0, r2
   1446c:	4619      	mov	r1, r3
   1446e:	f04f 0200 	mov.w	r2, #0
   14472:	f04f 0300 	mov.w	r3, #0
   14476:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1447a:	f003 fba7 	bl	17bcc <__aeabi_dmul>
   1447e:	4602      	mov	r2, r0
   14480:	460b      	mov	r3, r1
   14482:	4620      	mov	r0, r4
   14484:	4629      	mov	r1, r5
   14486:	f003 f9ef 	bl	17868 <__adddf3>
   1448a:	4602      	mov	r2, r0
   1448c:	460b      	mov	r3, r1
   1448e:	4610      	mov	r0, r2
   14490:	4619      	mov	r1, r3
   14492:	f003 fe7d 	bl	18190 <__aeabi_d2f>
   14496:	4603      	mov	r3, r0
   14498:	4630      	mov	r0, r6
   1449a:	4619      	mov	r1, r3
   1449c:	f000 fa04 	bl	148a8 <fly_to_xy>
   144a0:	6838      	ldr	r0, [r7, #0]
   144a2:	f003 fb3f 	bl	17b24 <__aeabi_f2d>
   144a6:	4602      	mov	r2, r0
   144a8:	460b      	mov	r3, r1
   144aa:	a189      	add	r1, pc, #548	; (adr r1, 146d0 <auto_nav+0x21b0>)
   144ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   144b0:	f003 f9d8 	bl	17864 <__aeabi_dsub>
   144b4:	4602      	mov	r2, r0
   144b6:	460b      	mov	r3, r1
   144b8:	4610      	mov	r0, r2
   144ba:	4619      	mov	r1, r3
   144bc:	a386      	add	r3, pc, #536	; (adr r3, 146d8 <auto_nav+0x21b8>)
   144be:	e9d3 2300 	ldrd	r2, r3, [r3]
   144c2:	f003 fcad 	bl	17e20 <__aeabi_ddiv>
   144c6:	4602      	mov	r2, r0
   144c8:	460b      	mov	r3, r1
   144ca:	4610      	mov	r0, r2
   144cc:	4619      	mov	r1, r3
   144ce:	f04f 0200 	mov.w	r2, #0
   144d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   144d6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   144da:	f003 fb77 	bl	17bcc <__aeabi_dmul>
   144de:	4602      	mov	r2, r0
   144e0:	460b      	mov	r3, r1
   144e2:	4610      	mov	r0, r2
   144e4:	4619      	mov	r1, r3
   144e6:	f003 fe53 	bl	18190 <__aeabi_d2f>
   144ea:	4602      	mov	r2, r0
   144ec:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   144f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144f4:	601a      	str	r2, [r3, #0]
   144f6:	e012      	b.n	1451e <auto_nav+0x1ffe>
   144f8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   144fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14500:	681b      	ldr	r3, [r3, #0]
   14502:	4618      	mov	r0, r3
   14504:	f04f 0100 	mov.w	r1, #0
   14508:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1450c:	f003 fe96 	bl	1823c <__addsf3>
   14510:	4603      	mov	r3, r0
   14512:	461a      	mov	r2, r3
   14514:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1451c:	601a      	str	r2, [r3, #0]
   1451e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14526:	681b      	ldr	r3, [r3, #0]
   14528:	4618      	mov	r0, r3
   1452a:	f04f 0100 	mov.w	r1, #0
   1452e:	f004 f92b 	bl	18788 <__aeabi_fcmplt>
   14532:	4603      	mov	r3, r0
   14534:	2b00      	cmp	r3, #0
   14536:	d1df      	bne.n	144f8 <auto_nav+0x1fd8>
   14538:	e012      	b.n	14560 <auto_nav+0x2040>
   1453a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1453e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14542:	681b      	ldr	r3, [r3, #0]
   14544:	4618      	mov	r0, r3
   14546:	f04f 0100 	mov.w	r1, #0
   1454a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1454e:	f003 fe73 	bl	18238 <__aeabi_fsub>
   14552:	4603      	mov	r3, r0
   14554:	461a      	mov	r2, r3
   14556:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1455a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455e:	601a      	str	r2, [r3, #0]
   14560:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14568:	681b      	ldr	r3, [r3, #0]
   1456a:	4618      	mov	r0, r3
   1456c:	f04f 0100 	mov.w	r1, #0
   14570:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14574:	f004 f91c 	bl	187b0 <__aeabi_fcmpge>
   14578:	4603      	mov	r3, r0
   1457a:	2b00      	cmp	r3, #0
   1457c:	d1dd      	bne.n	1453a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1457e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14586:	681b      	ldr	r3, [r3, #0]
   14588:	4618      	mov	r0, r3
   1458a:	f04f 0100 	mov.w	r1, #0
   1458e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14592:	f004 f917 	bl	187c4 <__aeabi_fcmpgt>
   14596:	4603      	mov	r3, r0
   14598:	2b00      	cmp	r3, #0
   1459a:	d100      	bne.n	1459e <auto_nav+0x207e>
          return;
   1459c:	e092      	b.n	146c4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1459e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145a6:	681b      	ldr	r3, [r3, #0]
   145a8:	4618      	mov	r0, r3
   145aa:	f04f 0100 	mov.w	r1, #0
   145ae:	f2c4 313e 	movt	r1, #17214	; 0x433e
   145b2:	f004 f8e9 	bl	18788 <__aeabi_fcmplt>
   145b6:	4603      	mov	r3, r0
   145b8:	2b00      	cmp	r3, #0
   145ba:	d100      	bne.n	145be <auto_nav+0x209e>
          return;
   145bc:	e082      	b.n	146c4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   145c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c6:	781b      	ldrb	r3, [r3, #0]
   145c8:	3301      	adds	r3, #1
   145ca:	b2da      	uxtb	r2, r3
   145cc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   145d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145d4:	701a      	strb	r2, [r3, #0]
   145d6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   145da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145de:	681a      	ldr	r2, [r3, #0]
   145e0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   145e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e8:	601a      	str	r2, [r3, #0]
   145ea:	f64c 3300 	movw	r3, #51968	; 0xcb00
   145ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145f2:	681a      	ldr	r2, [r3, #0]
   145f4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   145f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145fc:	601a      	str	r2, [r3, #0]
   145fe:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14606:	2200      	movs	r2, #0
   14608:	801a      	strh	r2, [r3, #0]
   1460a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1460e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14612:	f04f 0200 	mov.w	r2, #0
   14616:	601a      	str	r2, [r3, #0]
   14618:	e054      	b.n	146c4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1461a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1461e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14622:	781b      	ldrb	r3, [r3, #0]
   14624:	2b03      	cmp	r3, #3
   14626:	d106      	bne.n	14636 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14628:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1462c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14630:	2203      	movs	r2, #3
   14632:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14634:	e44b      	b.n	13ece <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14636:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1463a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	2b04      	cmp	r3, #4
   14642:	d13f      	bne.n	146c4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14644:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1464c:	2204      	movs	r2, #4
   1464e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14650:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14658:	781b      	ldrb	r3, [r3, #0]
   1465a:	3301      	adds	r3, #1
   1465c:	b2da      	uxtb	r2, r3
   1465e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14666:	701a      	strb	r2, [r3, #0]
   14668:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1466c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14670:	2200      	movs	r2, #0
   14672:	701a      	strb	r2, [r3, #0]
   14674:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   14678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467c:	2200      	movs	r2, #0
   1467e:	801a      	strh	r2, [r3, #0]
   14680:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14688:	681a      	ldr	r2, [r3, #0]
   1468a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1468e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14692:	601a      	str	r2, [r3, #0]
   14694:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1469c:	681a      	ldr	r2, [r3, #0]
   1469e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   146a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a6:	601a      	str	r2, [r3, #0]
   146a8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   146ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b0:	2200      	movs	r2, #0
   146b2:	801a      	strh	r2, [r3, #0]
   146b4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   146b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146bc:	f04f 0200 	mov.w	r2, #0
   146c0:	601a      	str	r2, [r3, #0]
   146c2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   146c4:	372c      	adds	r7, #44	; 0x2c
   146c6:	46bd      	mov	sp, r7
   146c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   146ca:	bf00      	nop
   146cc:	f3af 8000 	nop.w
   146d0:	54442d18 	.word	0x54442d18
   146d4:	3ff921fb 	.word	0x3ff921fb
   146d8:	54442d18 	.word	0x54442d18
   146dc:	400921fb 	.word	0x400921fb

000146e0 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   146e0:	b590      	push	{r4, r7, lr}
   146e2:	b087      	sub	sp, #28
   146e4:	af00      	add	r7, sp, #0
   146e6:	4603      	mov	r3, r0
   146e8:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   146ea:	79f9      	ldrb	r1, [r7, #7]
   146ec:	f240 5278 	movw	r2, #1400	; 0x578
   146f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   146f4:	460b      	mov	r3, r1
   146f6:	005b      	lsls	r3, r3, #1
   146f8:	440b      	add	r3, r1
   146fa:	009b      	lsls	r3, r3, #2
   146fc:	4413      	add	r3, r2
   146fe:	681a      	ldr	r2, [r3, #0]
   14700:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14708:	681b      	ldr	r3, [r3, #0]
   1470a:	4610      	mov	r0, r2
   1470c:	4619      	mov	r1, r3
   1470e:	f003 fd93 	bl	18238 <__aeabi_fsub>
   14712:	4603      	mov	r3, r0
   14714:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14716:	79f9      	ldrb	r1, [r7, #7]
   14718:	f240 5278 	movw	r2, #1400	; 0x578
   1471c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14720:	460b      	mov	r3, r1
   14722:	005b      	lsls	r3, r3, #1
   14724:	440b      	add	r3, r1
   14726:	009b      	lsls	r3, r3, #2
   14728:	4413      	add	r3, r2
   1472a:	3304      	adds	r3, #4
   1472c:	681a      	ldr	r2, [r3, #0]
   1472e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14736:	681b      	ldr	r3, [r3, #0]
   14738:	4610      	mov	r0, r2
   1473a:	4619      	mov	r1, r3
   1473c:	f003 fd7c 	bl	18238 <__aeabi_fsub>
   14740:	4603      	mov	r3, r0
   14742:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14744:	6978      	ldr	r0, [r7, #20]
   14746:	6979      	ldr	r1, [r7, #20]
   14748:	f003 fe80 	bl	1844c <__aeabi_fmul>
   1474c:	4603      	mov	r3, r0
   1474e:	461c      	mov	r4, r3
   14750:	6938      	ldr	r0, [r7, #16]
   14752:	6939      	ldr	r1, [r7, #16]
   14754:	f003 fe7a 	bl	1844c <__aeabi_fmul>
   14758:	4603      	mov	r3, r0
   1475a:	4620      	mov	r0, r4
   1475c:	4619      	mov	r1, r3
   1475e:	f003 fd6d 	bl	1823c <__addsf3>
   14762:	4603      	mov	r3, r0
   14764:	461a      	mov	r2, r3
   14766:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1476a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1476e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14770:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14778:	681b      	ldr	r3, [r3, #0]
   1477a:	4618      	mov	r0, r3
   1477c:	f04f 0100 	mov.w	r1, #0
   14780:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14784:	f003 fe62 	bl	1844c <__aeabi_fmul>
   14788:	4603      	mov	r3, r0
   1478a:	461a      	mov	r2, r3
   1478c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14794:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14796:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1479a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	4618      	mov	r0, r3
   147a2:	f04f 0100 	mov.w	r1, #0
   147a6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   147aa:	f003 ffed 	bl	18788 <__aeabi_fcmplt>
   147ae:	4603      	mov	r3, r0
   147b0:	2b00      	cmp	r3, #0
   147b2:	d004      	beq.n	147be <approaching+0xde>
   147b4:	f04f 0200 	mov.w	r2, #0
   147b8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   147bc:	e004      	b.n	147c8 <approaching+0xe8>
   147be:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c6:	681a      	ldr	r2, [r3, #0]
   147c8:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   147d2:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147da:	681a      	ldr	r2, [r3, #0]
   147dc:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e4:	681b      	ldr	r3, [r3, #0]
   147e6:	4610      	mov	r0, r2
   147e8:	4619      	mov	r1, r3
   147ea:	f003 fe2f 	bl	1844c <__aeabi_fmul>
   147ee:	4603      	mov	r3, r0
   147f0:	461a      	mov	r2, r3
   147f2:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   147f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fa:	681b      	ldr	r3, [r3, #0]
   147fc:	4610      	mov	r0, r2
   147fe:	4619      	mov	r1, r3
   14800:	f003 ffe0 	bl	187c4 <__aeabi_fcmpgt>
   14804:	4603      	mov	r3, r0
   14806:	2b00      	cmp	r3, #0
   14808:	d001      	beq.n	1480e <approaching+0x12e>
    return TRUE;
   1480a:	2301      	movs	r3, #1
   1480c:	e048      	b.n	148a0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1480e:	79f9      	ldrb	r1, [r7, #7]
   14810:	f240 5278 	movw	r2, #1400	; 0x578
   14814:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14818:	460b      	mov	r3, r1
   1481a:	005b      	lsls	r3, r3, #1
   1481c:	440b      	add	r3, r1
   1481e:	009b      	lsls	r3, r3, #2
   14820:	4413      	add	r3, r2
   14822:	681a      	ldr	r2, [r3, #0]
   14824:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1482c:	681b      	ldr	r3, [r3, #0]
   1482e:	4610      	mov	r0, r2
   14830:	4619      	mov	r1, r3
   14832:	f003 fd01 	bl	18238 <__aeabi_fsub>
   14836:	4603      	mov	r3, r0
   14838:	4618      	mov	r0, r3
   1483a:	6979      	ldr	r1, [r7, #20]
   1483c:	f003 fe06 	bl	1844c <__aeabi_fmul>
   14840:	4603      	mov	r3, r0
   14842:	461c      	mov	r4, r3
   14844:	79f9      	ldrb	r1, [r7, #7]
   14846:	f240 5278 	movw	r2, #1400	; 0x578
   1484a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1484e:	460b      	mov	r3, r1
   14850:	005b      	lsls	r3, r3, #1
   14852:	440b      	add	r3, r1
   14854:	009b      	lsls	r3, r3, #2
   14856:	4413      	add	r3, r2
   14858:	3304      	adds	r3, #4
   1485a:	681a      	ldr	r2, [r3, #0]
   1485c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14864:	681b      	ldr	r3, [r3, #0]
   14866:	4610      	mov	r0, r2
   14868:	4619      	mov	r1, r3
   1486a:	f003 fce5 	bl	18238 <__aeabi_fsub>
   1486e:	4603      	mov	r3, r0
   14870:	4618      	mov	r0, r3
   14872:	6939      	ldr	r1, [r7, #16]
   14874:	f003 fdea 	bl	1844c <__aeabi_fmul>
   14878:	4603      	mov	r3, r0
   1487a:	4620      	mov	r0, r4
   1487c:	4619      	mov	r1, r3
   1487e:	f003 fcdd 	bl	1823c <__addsf3>
   14882:	4603      	mov	r3, r0
   14884:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14886:	2301      	movs	r3, #1
   14888:	461c      	mov	r4, r3
   1488a:	68f8      	ldr	r0, [r7, #12]
   1488c:	f04f 0100 	mov.w	r1, #0
   14890:	f003 ff7a 	bl	18788 <__aeabi_fcmplt>
   14894:	4603      	mov	r3, r0
   14896:	2b00      	cmp	r3, #0
   14898:	d101      	bne.n	1489e <approaching+0x1be>
   1489a:	2300      	movs	r3, #0
   1489c:	461c      	mov	r4, r3
   1489e:	b2e3      	uxtb	r3, r4
}
   148a0:	4618      	mov	r0, r3
   148a2:	371c      	adds	r7, #28
   148a4:	46bd      	mov	sp, r7
   148a6:	bd90      	pop	{r4, r7, pc}

000148a8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   148a8:	b5b0      	push	{r4, r5, r7, lr}
   148aa:	b082      	sub	sp, #8
   148ac:	af00      	add	r7, sp, #0
   148ae:	6078      	str	r0, [r7, #4]
   148b0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   148b2:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   148b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ba:	687a      	ldr	r2, [r7, #4]
   148bc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   148be:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   148c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148c6:	683a      	ldr	r2, [r7, #0]
   148c8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   148ca:	f64c 3300 	movw	r3, #51968	; 0xcb00
   148ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d2:	681b      	ldr	r3, [r3, #0]
   148d4:	6838      	ldr	r0, [r7, #0]
   148d6:	4619      	mov	r1, r3
   148d8:	f003 fcae 	bl	18238 <__aeabi_fsub>
   148dc:	4603      	mov	r3, r0
   148de:	4618      	mov	r0, r3
   148e0:	f003 f920 	bl	17b24 <__aeabi_f2d>
   148e4:	4604      	mov	r4, r0
   148e6:	460d      	mov	r5, r1
   148e8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   148ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f0:	681b      	ldr	r3, [r3, #0]
   148f2:	6878      	ldr	r0, [r7, #4]
   148f4:	4619      	mov	r1, r3
   148f6:	f003 fc9f 	bl	18238 <__aeabi_fsub>
   148fa:	4603      	mov	r3, r0
   148fc:	4618      	mov	r0, r3
   148fe:	f003 f911 	bl	17b24 <__aeabi_f2d>
   14902:	4602      	mov	r2, r0
   14904:	460b      	mov	r3, r1
   14906:	4620      	mov	r0, r4
   14908:	4629      	mov	r1, r5
   1490a:	f001 f929 	bl	15b60 <pp_atan2>
   1490e:	4602      	mov	r2, r0
   14910:	460b      	mov	r3, r1
   14912:	a10b      	add	r1, pc, #44	; (adr r1, 14940 <fly_to_xy+0x98>)
   14914:	e9d1 0100 	ldrd	r0, r1, [r1]
   14918:	f002 ffa4 	bl	17864 <__aeabi_dsub>
   1491c:	4602      	mov	r2, r0
   1491e:	460b      	mov	r3, r1
   14920:	4610      	mov	r0, r2
   14922:	4619      	mov	r1, r3
   14924:	f003 fc34 	bl	18190 <__aeabi_d2f>
   14928:	4602      	mov	r2, r0
   1492a:	f64c 038c 	movw	r3, #51340	; 0xc88c
   1492e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14932:	601a      	str	r2, [r3, #0]
}
   14934:	3708      	adds	r7, #8
   14936:	46bd      	mov	sp, r7
   14938:	bdb0      	pop	{r4, r5, r7, pc}
   1493a:	bf00      	nop
   1493c:	f3af 8000 	nop.w
   14940:	54442d18 	.word	0x54442d18
   14944:	3ff921fb 	.word	0x3ff921fb

00014948 <fly_to>:

static void fly_to(uint8_t wp) { 
   14948:	b580      	push	{r7, lr}
   1494a:	b082      	sub	sp, #8
   1494c:	af00      	add	r7, sp, #0
   1494e:	4603      	mov	r3, r0
   14950:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14952:	79f9      	ldrb	r1, [r7, #7]
   14954:	f240 5278 	movw	r2, #1400	; 0x578
   14958:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1495c:	460b      	mov	r3, r1
   1495e:	005b      	lsls	r3, r3, #1
   14960:	440b      	add	r3, r1
   14962:	009b      	lsls	r3, r3, #2
   14964:	4413      	add	r3, r2
   14966:	6818      	ldr	r0, [r3, #0]
   14968:	79f9      	ldrb	r1, [r7, #7]
   1496a:	f240 5278 	movw	r2, #1400	; 0x578
   1496e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14972:	460b      	mov	r3, r1
   14974:	005b      	lsls	r3, r3, #1
   14976:	440b      	add	r3, r1
   14978:	009b      	lsls	r3, r3, #2
   1497a:	4413      	add	r3, r2
   1497c:	3304      	adds	r3, #4
   1497e:	681b      	ldr	r3, [r3, #0]
   14980:	4619      	mov	r1, r3
   14982:	f7ff ff91 	bl	148a8 <fly_to_xy>
}
   14986:	3708      	adds	r7, #8
   14988:	46bd      	mov	sp, r7
   1498a:	bd80      	pop	{r7, pc}

0001498c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   1498c:	b5b0      	push	{r4, r5, r7, lr}
   1498e:	b088      	sub	sp, #32
   14990:	af00      	add	r7, sp, #0
   14992:	4602      	mov	r2, r0
   14994:	460b      	mov	r3, r1
   14996:	71fa      	strb	r2, [r7, #7]
   14998:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   1499a:	79f9      	ldrb	r1, [r7, #7]
   1499c:	f240 5278 	movw	r2, #1400	; 0x578
   149a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149a4:	460b      	mov	r3, r1
   149a6:	005b      	lsls	r3, r3, #1
   149a8:	440b      	add	r3, r1
   149aa:	009b      	lsls	r3, r3, #2
   149ac:	4413      	add	r3, r2
   149ae:	681b      	ldr	r3, [r3, #0]
   149b0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   149b2:	79f9      	ldrb	r1, [r7, #7]
   149b4:	f240 5278 	movw	r2, #1400	; 0x578
   149b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149bc:	460b      	mov	r3, r1
   149be:	005b      	lsls	r3, r3, #1
   149c0:	440b      	add	r3, r1
   149c2:	009b      	lsls	r3, r3, #2
   149c4:	4413      	add	r3, r2
   149c6:	3304      	adds	r3, #4
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   149cc:	79b9      	ldrb	r1, [r7, #6]
   149ce:	f240 5278 	movw	r2, #1400	; 0x578
   149d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149d6:	460b      	mov	r3, r1
   149d8:	005b      	lsls	r3, r3, #1
   149da:	440b      	add	r3, r1
   149dc:	009b      	lsls	r3, r3, #2
   149de:	4413      	add	r3, r2
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	4618      	mov	r0, r3
   149e4:	69f9      	ldr	r1, [r7, #28]
   149e6:	f003 fc27 	bl	18238 <__aeabi_fsub>
   149ea:	4603      	mov	r3, r0
   149ec:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   149ee:	79b9      	ldrb	r1, [r7, #6]
   149f0:	f240 5278 	movw	r2, #1400	; 0x578
   149f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149f8:	460b      	mov	r3, r1
   149fa:	005b      	lsls	r3, r3, #1
   149fc:	440b      	add	r3, r1
   149fe:	009b      	lsls	r3, r3, #2
   14a00:	4413      	add	r3, r2
   14a02:	3304      	adds	r3, #4
   14a04:	681b      	ldr	r3, [r3, #0]
   14a06:	4618      	mov	r0, r3
   14a08:	69b9      	ldr	r1, [r7, #24]
   14a0a:	f003 fc15 	bl	18238 <__aeabi_fsub>
   14a0e:	4603      	mov	r3, r0
   14a10:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14a12:	6978      	ldr	r0, [r7, #20]
   14a14:	6979      	ldr	r1, [r7, #20]
   14a16:	f003 fd19 	bl	1844c <__aeabi_fmul>
   14a1a:	4603      	mov	r3, r0
   14a1c:	461c      	mov	r4, r3
   14a1e:	6938      	ldr	r0, [r7, #16]
   14a20:	6939      	ldr	r1, [r7, #16]
   14a22:	f003 fd13 	bl	1844c <__aeabi_fmul>
   14a26:	4603      	mov	r3, r0
   14a28:	4620      	mov	r0, r4
   14a2a:	4619      	mov	r1, r3
   14a2c:	f003 fc06 	bl	1823c <__addsf3>
   14a30:	4603      	mov	r3, r0
   14a32:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14a34:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a3c:	681b      	ldr	r3, [r3, #0]
   14a3e:	4618      	mov	r0, r3
   14a40:	69f9      	ldr	r1, [r7, #28]
   14a42:	f003 fbf9 	bl	18238 <__aeabi_fsub>
   14a46:	4603      	mov	r3, r0
   14a48:	4618      	mov	r0, r3
   14a4a:	6979      	ldr	r1, [r7, #20]
   14a4c:	f003 fcfe 	bl	1844c <__aeabi_fmul>
   14a50:	4603      	mov	r3, r0
   14a52:	461c      	mov	r4, r3
   14a54:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	4618      	mov	r0, r3
   14a60:	69b9      	ldr	r1, [r7, #24]
   14a62:	f003 fbe9 	bl	18238 <__aeabi_fsub>
   14a66:	4603      	mov	r3, r0
   14a68:	4618      	mov	r0, r3
   14a6a:	6939      	ldr	r1, [r7, #16]
   14a6c:	f003 fcee 	bl	1844c <__aeabi_fmul>
   14a70:	4603      	mov	r3, r0
   14a72:	4620      	mov	r0, r4
   14a74:	4619      	mov	r1, r3
   14a76:	f003 fbe1 	bl	1823c <__addsf3>
   14a7a:	4603      	mov	r3, r0
   14a7c:	4618      	mov	r0, r3
   14a7e:	68f9      	ldr	r1, [r7, #12]
   14a80:	f003 fd98 	bl	185b4 <__aeabi_fdiv>
   14a84:	4603      	mov	r3, r0
   14a86:	461a      	mov	r2, r3
   14a88:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a90:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14a92:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a9a:	681b      	ldr	r3, [r3, #0]
   14a9c:	4618      	mov	r0, r3
   14a9e:	f04f 0100 	mov.w	r1, #0
   14aa2:	f003 fe85 	bl	187b0 <__aeabi_fcmpge>
   14aa6:	4603      	mov	r3, r0
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d005      	beq.n	14ab8 <route_to+0x12c>
   14aac:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ab4:	681a      	ldr	r2, [r3, #0]
   14ab6:	e001      	b.n	14abc <route_to+0x130>
   14ab8:	f04f 0200 	mov.w	r2, #0
   14abc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ac4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14ac6:	68f8      	ldr	r0, [r7, #12]
   14ac8:	f003 f82c 	bl	17b24 <__aeabi_f2d>
   14acc:	4602      	mov	r2, r0
   14ace:	460b      	mov	r3, r1
   14ad0:	4610      	mov	r0, r2
   14ad2:	4619      	mov	r1, r3
   14ad4:	f001 f9f4 	bl	15ec0 <pp_sqrt>
   14ad8:	4602      	mov	r2, r0
   14ada:	460b      	mov	r3, r1
   14adc:	4610      	mov	r0, r2
   14ade:	4619      	mov	r1, r3
   14ae0:	f003 fb56 	bl	18190 <__aeabi_d2f>
   14ae4:	4602      	mov	r2, r0
   14ae6:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aee:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14af0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af8:	681b      	ldr	r3, [r3, #0]
   14afa:	4618      	mov	r0, r3
   14afc:	f003 f812 	bl	17b24 <__aeabi_f2d>
   14b00:	4604      	mov	r4, r0
   14b02:	460d      	mov	r5, r1
   14b04:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b0c:	681a      	ldr	r2, [r3, #0]
   14b0e:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b16:	681b      	ldr	r3, [r3, #0]
   14b18:	4610      	mov	r0, r2
   14b1a:	4619      	mov	r1, r3
   14b1c:	f003 fd4a 	bl	185b4 <__aeabi_fdiv>
   14b20:	4603      	mov	r3, r0
   14b22:	4618      	mov	r0, r3
   14b24:	f04f 0100 	mov.w	r1, #0
   14b28:	f003 fe42 	bl	187b0 <__aeabi_fcmpge>
   14b2c:	4603      	mov	r3, r0
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d014      	beq.n	14b5c <route_to+0x1d0>
   14b32:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b3a:	681a      	ldr	r2, [r3, #0]
   14b3c:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b44:	681b      	ldr	r3, [r3, #0]
   14b46:	4610      	mov	r0, r2
   14b48:	4619      	mov	r1, r3
   14b4a:	f003 fd33 	bl	185b4 <__aeabi_fdiv>
   14b4e:	4603      	mov	r3, r0
   14b50:	4618      	mov	r0, r3
   14b52:	f002 ffe7 	bl	17b24 <__aeabi_f2d>
   14b56:	4602      	mov	r2, r0
   14b58:	460b      	mov	r3, r1
   14b5a:	e003      	b.n	14b64 <route_to+0x1d8>
   14b5c:	f04f 0200 	mov.w	r2, #0
   14b60:	f04f 0300 	mov.w	r3, #0
   14b64:	4620      	mov	r0, r4
   14b66:	4629      	mov	r1, r5
   14b68:	f002 fe7e 	bl	17868 <__adddf3>
   14b6c:	4602      	mov	r2, r0
   14b6e:	460b      	mov	r3, r1
   14b70:	4610      	mov	r0, r2
   14b72:	4619      	mov	r1, r3
   14b74:	f003 fb0c 	bl	18190 <__aeabi_d2f>
   14b78:	4602      	mov	r2, r0
   14b7a:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b82:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14b84:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b8c:	681b      	ldr	r3, [r3, #0]
   14b8e:	4618      	mov	r0, r3
   14b90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14b94:	f003 fe0c 	bl	187b0 <__aeabi_fcmpge>
   14b98:	4603      	mov	r3, r0
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d002      	beq.n	14ba4 <route_to+0x218>
   14b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14ba2:	e004      	b.n	14bae <route_to+0x222>
   14ba4:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bac:	681a      	ldr	r2, [r3, #0]
   14bae:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14bb8:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc0:	681b      	ldr	r3, [r3, #0]
   14bc2:	4618      	mov	r0, r3
   14bc4:	6979      	ldr	r1, [r7, #20]
   14bc6:	f003 fc41 	bl	1844c <__aeabi_fmul>
   14bca:	4603      	mov	r3, r0
   14bcc:	4618      	mov	r0, r3
   14bce:	69f9      	ldr	r1, [r7, #28]
   14bd0:	f003 fb34 	bl	1823c <__addsf3>
   14bd4:	4603      	mov	r3, r0
   14bd6:	461c      	mov	r4, r3
   14bd8:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be0:	681b      	ldr	r3, [r3, #0]
   14be2:	4618      	mov	r0, r3
   14be4:	6939      	ldr	r1, [r7, #16]
   14be6:	f003 fc31 	bl	1844c <__aeabi_fmul>
   14bea:	4603      	mov	r3, r0
   14bec:	4618      	mov	r0, r3
   14bee:	69b9      	ldr	r1, [r7, #24]
   14bf0:	f003 fb24 	bl	1823c <__addsf3>
   14bf4:	4603      	mov	r3, r0
   14bf6:	4620      	mov	r0, r4
   14bf8:	4619      	mov	r1, r3
   14bfa:	f7ff fe55 	bl	148a8 <fly_to_xy>
}
   14bfe:	3720      	adds	r7, #32
   14c00:	46bd      	mov	sp, r7
   14c02:	bdb0      	pop	{r4, r5, r7, pc}

00014c04 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c04:	b590      	push	{r4, r7, lr}
   14c06:	b083      	sub	sp, #12
   14c08:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c0a:	f240 5378 	movw	r3, #1400	; 0x578
   14c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c12:	681a      	ldr	r2, [r3, #0]
   14c14:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c1c:	681b      	ldr	r3, [r3, #0]
   14c1e:	4610      	mov	r0, r2
   14c20:	4619      	mov	r1, r3
   14c22:	f003 fb09 	bl	18238 <__aeabi_fsub>
   14c26:	4603      	mov	r3, r0
   14c28:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14c2a:	f240 5378 	movw	r3, #1400	; 0x578
   14c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c32:	685a      	ldr	r2, [r3, #4]
   14c34:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c3c:	681b      	ldr	r3, [r3, #0]
   14c3e:	4610      	mov	r0, r2
   14c40:	4619      	mov	r1, r3
   14c42:	f003 faf9 	bl	18238 <__aeabi_fsub>
   14c46:	4603      	mov	r3, r0
   14c48:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14c4a:	6878      	ldr	r0, [r7, #4]
   14c4c:	6879      	ldr	r1, [r7, #4]
   14c4e:	f003 fbfd 	bl	1844c <__aeabi_fmul>
   14c52:	4603      	mov	r3, r0
   14c54:	461c      	mov	r4, r3
   14c56:	6838      	ldr	r0, [r7, #0]
   14c58:	6839      	ldr	r1, [r7, #0]
   14c5a:	f003 fbf7 	bl	1844c <__aeabi_fmul>
   14c5e:	4603      	mov	r3, r0
   14c60:	4620      	mov	r0, r4
   14c62:	4619      	mov	r1, r3
   14c64:	f003 faea 	bl	1823c <__addsf3>
   14c68:	4603      	mov	r3, r0
   14c6a:	461a      	mov	r2, r3
   14c6c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c74:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14c76:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	2201      	movs	r2, #1
   14c82:	4614      	mov	r4, r2
   14c84:	4618      	mov	r0, r3
   14c86:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14c8a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14c8e:	f003 fd99 	bl	187c4 <__aeabi_fcmpgt>
   14c92:	4603      	mov	r3, r0
   14c94:	2b00      	cmp	r3, #0
   14c96:	d101      	bne.n	14c9c <compute_dist2_to_home+0x98>
   14c98:	2300      	movs	r3, #0
   14c9a:	461c      	mov	r4, r3
   14c9c:	b2e3      	uxtb	r3, r4
   14c9e:	461a      	mov	r2, r3
   14ca0:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca8:	701a      	strb	r2, [r3, #0]
}
   14caa:	370c      	adds	r7, #12
   14cac:	46bd      	mov	sp, r7
   14cae:	bd90      	pop	{r4, r7, pc}

00014cb0 <nav_home>:

void nav_home(void) {
   14cb0:	b580      	push	{r7, lr}
   14cb2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14cb4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cbc:	f04f 0200 	mov.w	r2, #0
   14cc0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14cc2:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cca:	2203      	movs	r2, #3
   14ccc:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14cce:	f240 5374 	movw	r3, #1396	; 0x574
   14cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd6:	f04f 0200 	mov.w	r2, #0
   14cda:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14cde:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14ce0:	f7ff ff90 	bl	14c04 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14ce4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cec:	681a      	ldr	r2, [r3, #0]
   14cee:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cf6:	601a      	str	r2, [r3, #0]
}
   14cf8:	bd80      	pop	{r7, pc}
   14cfa:	bf00      	nop

00014cfc <nav_update>:

void nav_update(void) {
   14cfc:	b580      	push	{r7, lr}
   14cfe:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d00:	f7ff ff80 	bl	14c04 <compute_dist2_to_home>

  auto_nav();
   14d04:	f7fd fc0c 	bl	12520 <auto_nav>
}
   14d08:	bd80      	pop	{r7, pc}
   14d0a:	bf00      	nop

00014d0c <nav_init>:


void nav_init(void) {
   14d0c:	b480      	push	{r7}
   14d0e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14d10:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d18:	2200      	movs	r2, #0
   14d1a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14d1c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d24:	2200      	movs	r2, #0
   14d26:	701a      	strb	r2, [r3, #0]
}
   14d28:	46bd      	mov	sp, r7
   14d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d2e:	4770      	bx	lr

00014d30 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14d30:	b480      	push	{r7}
   14d32:	b083      	sub	sp, #12
   14d34:	af00      	add	r7, sp, #0
   14d36:	4603      	mov	r3, r0
   14d38:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14d3a:	f242 030a 	movw	r3, #8202	; 0x200a
   14d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d42:	781b      	ldrb	r3, [r3, #0]
   14d44:	b2db      	uxtb	r3, r3
   14d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d028      	beq.n	14da0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14d4e:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	b2db      	uxtb	r3, r3
   14d5a:	461a      	mov	r2, r3
   14d5c:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d64:	781b      	ldrb	r3, [r3, #0]
   14d66:	3301      	adds	r3, #1
   14d68:	429a      	cmp	r2, r3
   14d6a:	d100      	bne.n	14d6e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14d6c:	e02c      	b.n	14dc8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14d6e:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d76:	781b      	ldrb	r3, [r3, #0]
   14d78:	461a      	mov	r2, r3
   14d7a:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d82:	79f9      	ldrb	r1, [r7, #7]
   14d84:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14d86:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8e:	781b      	ldrb	r3, [r3, #0]
   14d90:	3301      	adds	r3, #1
   14d92:	b2da      	uxtb	r2, r3
   14d94:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d9c:	701a      	strb	r2, [r3, #0]
   14d9e:	e013      	b.n	14dc8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14da0:	f242 030c 	movw	r3, #8204	; 0x200c
   14da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14da8:	79fa      	ldrb	r2, [r7, #7]
   14daa:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14dac:	f242 030a 	movw	r3, #8202	; 0x200a
   14db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14db4:	f242 020a 	movw	r2, #8202	; 0x200a
   14db8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dbc:	7812      	ldrb	r2, [r2, #0]
   14dbe:	b2d2      	uxtb	r2, r2
   14dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14dc4:	b2d2      	uxtb	r2, r2
   14dc6:	701a      	strb	r2, [r3, #0]
  }
}
   14dc8:	370c      	adds	r7, #12
   14dca:	46bd      	mov	sp, r7
   14dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dd0:	4770      	bx	lr
   14dd2:	bf00      	nop

00014dd4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14dd4:	b480      	push	{r7}
   14dd6:	b083      	sub	sp, #12
   14dd8:	af00      	add	r7, sp, #0
   14dda:	4603      	mov	r3, r0
   14ddc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14dde:	f242 039a 	movw	r3, #8346	; 0x209a
   14de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	b2db      	uxtb	r3, r3
   14dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14dee:	2b00      	cmp	r3, #0
   14df0:	d028      	beq.n	14e44 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14df2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dfa:	781b      	ldrb	r3, [r3, #0]
   14dfc:	b2db      	uxtb	r3, r3
   14dfe:	461a      	mov	r2, r3
   14e00:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e08:	781b      	ldrb	r3, [r3, #0]
   14e0a:	3301      	adds	r3, #1
   14e0c:	429a      	cmp	r2, r3
   14e0e:	d100      	bne.n	14e12 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e10:	e02c      	b.n	14e6c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14e12:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e1a:	781b      	ldrb	r3, [r3, #0]
   14e1c:	461a      	mov	r2, r3
   14e1e:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e26:	79f9      	ldrb	r1, [r7, #7]
   14e28:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14e2a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	3301      	adds	r3, #1
   14e36:	b2da      	uxtb	r2, r3
   14e38:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e40:	701a      	strb	r2, [r3, #0]
   14e42:	e013      	b.n	14e6c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14e44:	f242 039c 	movw	r3, #8348	; 0x209c
   14e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4c:	79fa      	ldrb	r2, [r7, #7]
   14e4e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14e50:	f242 039a 	movw	r3, #8346	; 0x209a
   14e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e58:	f242 029a 	movw	r2, #8346	; 0x209a
   14e5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e60:	7812      	ldrb	r2, [r2, #0]
   14e62:	b2d2      	uxtb	r2, r2
   14e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e68:	b2d2      	uxtb	r2, r2
   14e6a:	701a      	strb	r2, [r3, #0]
  }
}
   14e6c:	370c      	adds	r7, #12
   14e6e:	46bd      	mov	sp, r7
   14e70:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e74:	4770      	bx	lr
   14e76:	bf00      	nop

00014e78 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14e78:	b580      	push	{r7, lr}
   14e7a:	b084      	sub	sp, #16
   14e7c:	af00      	add	r7, sp, #0
   14e7e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14e80:	2300      	movs	r3, #0
   14e82:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14e84:	e009      	b.n	14e9a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14e86:	7bfb      	ldrb	r3, [r7, #15]
   14e88:	687a      	ldr	r2, [r7, #4]
   14e8a:	4413      	add	r3, r2
   14e8c:	781b      	ldrb	r3, [r3, #0]
   14e8e:	4618      	mov	r0, r3
   14e90:	f7ff ff4e 	bl	14d30 <uart0_transmit>
    i++;
   14e94:	7bfb      	ldrb	r3, [r7, #15]
   14e96:	3301      	adds	r3, #1
   14e98:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14e9a:	7bfb      	ldrb	r3, [r7, #15]
   14e9c:	687a      	ldr	r2, [r7, #4]
   14e9e:	4413      	add	r3, r2
   14ea0:	781b      	ldrb	r3, [r3, #0]
   14ea2:	2b00      	cmp	r3, #0
   14ea4:	d1ef      	bne.n	14e86 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14ea6:	3710      	adds	r7, #16
   14ea8:	46bd      	mov	sp, r7
   14eaa:	bd80      	pop	{r7, pc}

00014eac <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14eac:	b590      	push	{r4, r7, lr}
   14eae:	b089      	sub	sp, #36	; 0x24
   14eb0:	af00      	add	r7, sp, #0
   14eb2:	4603      	mov	r3, r0
   14eb4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14eb6:	f648 2358 	movw	r3, #35416	; 0x8a58
   14eba:	f2c0 0301 	movt	r3, #1
   14ebe:	f107 040c 	add.w	r4, r7, #12
   14ec2:	6818      	ldr	r0, [r3, #0]
   14ec4:	6859      	ldr	r1, [r3, #4]
   14ec6:	689a      	ldr	r2, [r3, #8]
   14ec8:	68db      	ldr	r3, [r3, #12]
   14eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14ecc:	79fb      	ldrb	r3, [r7, #7]
   14ece:	091b      	lsrs	r3, r3, #4
   14ed0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14ed2:	79fb      	ldrb	r3, [r7, #7]
   14ed4:	f003 030f 	and.w	r3, r3, #15
   14ed8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14eda:	230f      	movs	r3, #15
   14edc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14ede:	230f      	movs	r3, #15
   14ee0:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14ee2:	7ffb      	ldrb	r3, [r7, #31]
   14ee4:	f107 0220 	add.w	r2, r7, #32
   14ee8:	4413      	add	r3, r2
   14eea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14eee:	4618      	mov	r0, r3
   14ef0:	f7ff ff1e 	bl	14d30 <uart0_transmit>
  uart0_transmit(hex[low]);
   14ef4:	7fbb      	ldrb	r3, [r7, #30]
   14ef6:	f107 0220 	add.w	r2, r7, #32
   14efa:	4413      	add	r3, r2
   14efc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f00:	4618      	mov	r0, r3
   14f02:	f7ff ff15 	bl	14d30 <uart0_transmit>
}
   14f06:	3724      	adds	r7, #36	; 0x24
   14f08:	46bd      	mov	sp, r7
   14f0a:	bd90      	pop	{r4, r7, pc}

00014f0c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f0c:	b480      	push	{r7}
   14f0e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14f10:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f18:	781a      	ldrb	r2, [r3, #0]
   14f1a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	b2db      	uxtb	r3, r3
   14f26:	429a      	cmp	r2, r3
   14f28:	d10e      	bne.n	14f48 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14f2a:	f242 030a 	movw	r3, #8202	; 0x200a
   14f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f32:	f242 020a 	movw	r2, #8202	; 0x200a
   14f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f3a:	7812      	ldrb	r2, [r2, #0]
   14f3c:	b2d2      	uxtb	r2, r2
   14f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14f42:	b2d2      	uxtb	r2, r2
   14f44:	701a      	strb	r2, [r3, #0]
   14f46:	e01d      	b.n	14f84 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14f48:	f242 030c 	movw	r3, #8204	; 0x200c
   14f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f50:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   14f54:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f58:	7812      	ldrb	r2, [r2, #0]
   14f5a:	b2d2      	uxtb	r2, r2
   14f5c:	4611      	mov	r1, r2
   14f5e:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   14f62:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f66:	5c52      	ldrb	r2, [r2, r1]
   14f68:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14f6a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f72:	781b      	ldrb	r3, [r3, #0]
   14f74:	b2db      	uxtb	r3, r3
   14f76:	3301      	adds	r3, #1
   14f78:	b2da      	uxtb	r2, r3
   14f7a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f82:	701a      	strb	r2, [r3, #0]
  }
}
   14f84:	46bd      	mov	sp, r7
   14f86:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f8a:	4770      	bx	lr

00014f8c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14f8c:	b480      	push	{r7}
   14f8e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14f90:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f98:	781a      	ldrb	r2, [r3, #0]
   14f9a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fa2:	781b      	ldrb	r3, [r3, #0]
   14fa4:	b2db      	uxtb	r3, r3
   14fa6:	429a      	cmp	r2, r3
   14fa8:	d10e      	bne.n	14fc8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14faa:	f242 039a 	movw	r3, #8346	; 0x209a
   14fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb2:	f242 029a 	movw	r2, #8346	; 0x209a
   14fb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fba:	7812      	ldrb	r2, [r2, #0]
   14fbc:	b2d2      	uxtb	r2, r2
   14fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14fc2:	b2d2      	uxtb	r2, r2
   14fc4:	701a      	strb	r2, [r3, #0]
   14fc6:	e01d      	b.n	15004 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14fc8:	f242 039c 	movw	r3, #8348	; 0x209c
   14fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd0:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   14fd4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fd8:	7812      	ldrb	r2, [r2, #0]
   14fda:	b2d2      	uxtb	r2, r2
   14fdc:	4611      	mov	r1, r2
   14fde:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   14fe2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14fe6:	5c52      	ldrb	r2, [r2, r1]
   14fe8:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14fea:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ff2:	781b      	ldrb	r3, [r3, #0]
   14ff4:	b2db      	uxtb	r3, r3
   14ff6:	3301      	adds	r3, #1
   14ff8:	b2da      	uxtb	r2, r3
   14ffa:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15002:	701a      	strb	r2, [r3, #0]
  }
}
   15004:	46bd      	mov	sp, r7
   15006:	f85d 7b04 	ldr.w	r7, [sp], #4
   1500a:	4770      	bx	lr

0001500c <uart0_init>:

void uart0_init( void ) {
   1500c:	b480      	push	{r7}
   1500e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15010:	f242 0390 	movw	r3, #8336	; 0x2090
   15014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15018:	2200      	movs	r2, #0
   1501a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   1501c:	f242 0309 	movw	r3, #8201	; 0x2009
   15020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15024:	2219      	movs	r2, #25
   15026:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15028:	f242 030b 	movw	r3, #8203	; 0x200b
   1502c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15030:	2200      	movs	r2, #0
   15032:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   15034:	f242 030a 	movw	r3, #8202	; 0x200a
   15038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503c:	2218      	movs	r2, #24
   1503e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15040:	f242 0395 	movw	r3, #8341	; 0x2095
   15044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15048:	2206      	movs	r2, #6
   1504a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   1504c:	f242 030a 	movw	r3, #8202	; 0x200a
   15050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15054:	f242 020a 	movw	r2, #8202	; 0x200a
   15058:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1505c:	7812      	ldrb	r2, [r2, #0]
   1505e:	b2d2      	uxtb	r2, r2
   15060:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15064:	b2d2      	uxtb	r2, r2
   15066:	701a      	strb	r2, [r3, #0]
}
   15068:	46bd      	mov	sp, r7
   1506a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1506e:	4770      	bx	lr

00015070 <uart1_init>:

void uart1_init( void ) {
   15070:	b480      	push	{r7}
   15072:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   15074:	f242 0398 	movw	r3, #8344	; 0x2098
   15078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1507c:	2200      	movs	r2, #0
   1507e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15080:	f242 0399 	movw	r3, #8345	; 0x2099
   15084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15088:	2219      	movs	r2, #25
   1508a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1508c:	f242 039b 	movw	r3, #8347	; 0x209b
   15090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15094:	2200      	movs	r2, #0
   15096:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15098:	f242 039a 	movw	r3, #8346	; 0x209a
   1509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a0:	2218      	movs	r2, #24
   150a2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   150a4:	f242 039d 	movw	r3, #8349	; 0x209d
   150a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ac:	2206      	movs	r2, #6
   150ae:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   150b0:	f242 039a 	movw	r3, #8346	; 0x209a
   150b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b8:	f242 029a 	movw	r2, #8346	; 0x209a
   150bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150c0:	7812      	ldrb	r2, [r2, #0]
   150c2:	b2d2      	uxtb	r2, r2
   150c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150c8:	b2d2      	uxtb	r2, r2
   150ca:	701a      	strb	r2, [r3, #0]
}
   150cc:	46bd      	mov	sp, r7
   150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   150d2:	4770      	bx	lr
   150d4:	0000      	movs	r0, r0
	...

000150d8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   150d8:	b480      	push	{r7}
   150da:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   150dc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   150e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150e4:	f04f 0200 	mov.w	r2, #0
   150e8:	601a      	str	r2, [r3, #0]
   150ea:	f64c 3300 	movw	r3, #51968	; 0xcb00
   150ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150f2:	f04f 0200 	mov.w	r2, #0
   150f6:	601a      	str	r2, [r3, #0]
   150f8:	f64c 3304 	movw	r3, #51972	; 0xcb04
   150fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15100:	f04f 0200 	mov.w	r2, #0
   15104:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   15106:	f64c 3308 	movw	r3, #51976	; 0xcb08
   1510a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1510e:	f04f 0200 	mov.w	r2, #0
   15112:	601a      	str	r2, [r3, #0]
   15114:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1511c:	f04f 0200 	mov.w	r2, #0
   15120:	601a      	str	r2, [r3, #0]
   15122:	f64c 3310 	movw	r3, #51984	; 0xcb10
   15126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1512a:	f04f 0200 	mov.w	r2, #0
   1512e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15130:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15138:	f04f 0200 	mov.w	r2, #0
   1513c:	601a      	str	r2, [r3, #0]
   1513e:	f64c 3338 	movw	r3, #52024	; 0xcb38
   15142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15146:	f04f 0200 	mov.w	r2, #0
   1514a:	601a      	str	r2, [r3, #0]
   1514c:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15154:	f04f 0200 	mov.w	r2, #0
   15158:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1515a:	f64c 3320 	movw	r3, #52000	; 0xcb20
   1515e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15162:	f04f 0200 	mov.w	r2, #0
   15166:	601a      	str	r2, [r3, #0]
   15168:	f64c 3324 	movw	r3, #52004	; 0xcb24
   1516c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15170:	f04f 0200 	mov.w	r2, #0
   15174:	601a      	str	r2, [r3, #0]
   15176:	f64c 3328 	movw	r3, #52008	; 0xcb28
   1517a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1517e:	f04f 0200 	mov.w	r2, #0
   15182:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   15184:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   15188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1518c:	2200      	movs	r2, #0
   1518e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15190:	f240 5348 	movw	r3, #1352	; 0x548
   15194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15198:	681a      	ldr	r2, [r3, #0]
   1519a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1519e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151a2:	601a      	str	r2, [r3, #0]
}
   151a4:	46bd      	mov	sp, r7
   151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   151aa:	4770      	bx	lr

000151ac <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   151ac:	b580      	push	{r7, lr}
   151ae:	b082      	sub	sp, #8
   151b0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   151b2:	f240 533c 	movw	r3, #1340	; 0x53c
   151b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ba:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   151bc:	2b01      	cmp	r3, #1
   151be:	d105      	bne.n	151cc <estimator_update_state_infrared+0x20>
   151c0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   151c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151c8:	681b      	ldr	r3, [r3, #0]
   151ca:	e004      	b.n	151d6 <estimator_update_state_infrared+0x2a>
   151cc:	f240 5348 	movw	r3, #1352	; 0x548
   151d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   151d6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   151d8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   151dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e0:	881b      	ldrh	r3, [r3, #0]
   151e2:	b21b      	sxth	r3, r3
   151e4:	4618      	mov	r0, r3
   151e6:	f003 f8dd 	bl	183a4 <__aeabi_i2f>
   151ea:	4603      	mov	r3, r0
   151ec:	4618      	mov	r0, r3
   151ee:	6879      	ldr	r1, [r7, #4]
   151f0:	f003 f92c 	bl	1844c <__aeabi_fmul>
   151f4:	4603      	mov	r3, r0
   151f6:	461a      	mov	r2, r3
   151f8:	f64c 3308 	movw	r3, #51976	; 0xcb08
   151fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15200:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   15202:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   15206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520a:	881b      	ldrh	r3, [r3, #0]
   1520c:	b21b      	sxth	r3, r3
   1520e:	4618      	mov	r0, r3
   15210:	f003 f8c8 	bl	183a4 <__aeabi_i2f>
   15214:	4603      	mov	r3, r0
   15216:	4618      	mov	r0, r3
   15218:	6879      	ldr	r1, [r7, #4]
   1521a:	f003 f917 	bl	1844c <__aeabi_fmul>
   1521e:	4603      	mov	r3, r0
   15220:	461a      	mov	r2, r3
   15222:	f64c 3310 	movw	r3, #51984	; 0xcb10
   15226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1522a:	601a      	str	r2, [r3, #0]
}
   1522c:	3708      	adds	r7, #8
   1522e:	46bd      	mov	sp, r7
   15230:	bd80      	pop	{r7, pc}
   15232:	bf00      	nop

00015234 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15234:	b5b0      	push	{r4, r5, r7, lr}
   15236:	b084      	sub	sp, #16
   15238:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1523a:	f64c 3348 	movw	r3, #52040	; 0xcb48
   1523e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15242:	781b      	ldrb	r3, [r3, #0]
   15244:	2b00      	cmp	r3, #0
   15246:	f000 81e8 	beq.w	1561a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1524a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1524e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15252:	681a      	ldr	r2, [r3, #0]
   15254:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15258:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1525c:	681b      	ldr	r3, [r3, #0]
   1525e:	4610      	mov	r0, r2
   15260:	4619      	mov	r1, r3
   15262:	f002 ffe9 	bl	18238 <__aeabi_fsub>
   15266:	4603      	mov	r3, r0
   15268:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1526a:	68b8      	ldr	r0, [r7, #8]
   1526c:	f002 fc5a 	bl	17b24 <__aeabi_f2d>
   15270:	4602      	mov	r2, r0
   15272:	460b      	mov	r3, r1
   15274:	4610      	mov	r0, r2
   15276:	4619      	mov	r1, r3
   15278:	a385      	add	r3, pc, #532	; (adr r3, 15490 <estimator_update_ir_estim+0x25c>)
   1527a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1527e:	f002 ff35 	bl	180ec <__aeabi_dcmpgt>
   15282:	4603      	mov	r3, r0
   15284:	2b00      	cmp	r3, #0
   15286:	d100      	bne.n	1528a <estimator_update_ir_estim+0x56>
   15288:	e219      	b.n	156be <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1528a:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15292:	681a      	ldr	r2, [r3, #0]
   15294:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1529c:	681b      	ldr	r3, [r3, #0]
   1529e:	4610      	mov	r0, r2
   152a0:	4619      	mov	r1, r3
   152a2:	f002 ffc9 	bl	18238 <__aeabi_fsub>
   152a6:	4603      	mov	r3, r0
   152a8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   152aa:	e013      	b.n	152d4 <estimator_update_ir_estim+0xa0>
   152ac:	68f8      	ldr	r0, [r7, #12]
   152ae:	f002 fc39 	bl	17b24 <__aeabi_f2d>
   152b2:	4602      	mov	r2, r0
   152b4:	460b      	mov	r3, r1
   152b6:	4610      	mov	r0, r2
   152b8:	4619      	mov	r1, r3
   152ba:	a377      	add	r3, pc, #476	; (adr r3, 15498 <estimator_update_ir_estim+0x264>)
   152bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   152c0:	f002 fad0 	bl	17864 <__aeabi_dsub>
   152c4:	4602      	mov	r2, r0
   152c6:	460b      	mov	r3, r1
   152c8:	4610      	mov	r0, r2
   152ca:	4619      	mov	r1, r3
   152cc:	f002 ff60 	bl	18190 <__aeabi_d2f>
   152d0:	4603      	mov	r3, r0
   152d2:	60fb      	str	r3, [r7, #12]
   152d4:	68f8      	ldr	r0, [r7, #12]
   152d6:	f002 fc25 	bl	17b24 <__aeabi_f2d>
   152da:	4602      	mov	r2, r0
   152dc:	460b      	mov	r3, r1
   152de:	4610      	mov	r0, r2
   152e0:	4619      	mov	r1, r3
   152e2:	a36f      	add	r3, pc, #444	; (adr r3, 154a0 <estimator_update_ir_estim+0x26c>)
   152e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   152e8:	f002 ff00 	bl	180ec <__aeabi_dcmpgt>
   152ec:	4603      	mov	r3, r0
   152ee:	2b00      	cmp	r3, #0
   152f0:	d1dc      	bne.n	152ac <estimator_update_ir_estim+0x78>
   152f2:	e013      	b.n	1531c <estimator_update_ir_estim+0xe8>
   152f4:	68f8      	ldr	r0, [r7, #12]
   152f6:	f002 fc15 	bl	17b24 <__aeabi_f2d>
   152fa:	4602      	mov	r2, r0
   152fc:	460b      	mov	r3, r1
   152fe:	4610      	mov	r0, r2
   15300:	4619      	mov	r1, r3
   15302:	a365      	add	r3, pc, #404	; (adr r3, 15498 <estimator_update_ir_estim+0x264>)
   15304:	e9d3 2300 	ldrd	r2, r3, [r3]
   15308:	f002 faae 	bl	17868 <__adddf3>
   1530c:	4602      	mov	r2, r0
   1530e:	460b      	mov	r3, r1
   15310:	4610      	mov	r0, r2
   15312:	4619      	mov	r1, r3
   15314:	f002 ff3c 	bl	18190 <__aeabi_d2f>
   15318:	4603      	mov	r3, r0
   1531a:	60fb      	str	r3, [r7, #12]
   1531c:	68f8      	ldr	r0, [r7, #12]
   1531e:	f002 fc01 	bl	17b24 <__aeabi_f2d>
   15322:	4602      	mov	r2, r0
   15324:	460b      	mov	r3, r1
   15326:	4610      	mov	r0, r2
   15328:	4619      	mov	r1, r3
   1532a:	a35f      	add	r3, pc, #380	; (adr r3, 154a8 <estimator_update_ir_estim+0x274>)
   1532c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15330:	f002 febe 	bl	180b0 <__aeabi_dcmplt>
   15334:	4603      	mov	r3, r0
   15336:	2b00      	cmp	r3, #0
   15338:	d1dc      	bne.n	152f4 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1533a:	68f8      	ldr	r0, [r7, #12]
   1533c:	68b9      	ldr	r1, [r7, #8]
   1533e:	f003 f939 	bl	185b4 <__aeabi_fdiv>
   15342:	4603      	mov	r3, r0
   15344:	4618      	mov	r0, r3
   15346:	f002 fbed 	bl	17b24 <__aeabi_f2d>
   1534a:	4602      	mov	r2, r0
   1534c:	460b      	mov	r3, r1
   1534e:	4610      	mov	r0, r2
   15350:	4619      	mov	r1, r3
   15352:	f04f 0200 	mov.w	r2, #0
   15356:	f04f 0300 	mov.w	r3, #0
   1535a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1535e:	f002 fc35 	bl	17bcc <__aeabi_dmul>
   15362:	4602      	mov	r2, r0
   15364:	460b      	mov	r3, r1
   15366:	4610      	mov	r0, r2
   15368:	4619      	mov	r1, r3
   1536a:	a351      	add	r3, pc, #324	; (adr r3, 154b0 <estimator_update_ir_estim+0x27c>)
   1536c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15370:	f002 fd56 	bl	17e20 <__aeabi_ddiv>
   15374:	4602      	mov	r2, r0
   15376:	460b      	mov	r3, r1
   15378:	4610      	mov	r0, r2
   1537a:	4619      	mov	r1, r3
   1537c:	f002 ff08 	bl	18190 <__aeabi_d2f>
   15380:	4603      	mov	r3, r0
   15382:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15384:	e013      	b.n	153ae <estimator_update_ir_estim+0x17a>
   15386:	68f8      	ldr	r0, [r7, #12]
   15388:	f002 fbcc 	bl	17b24 <__aeabi_f2d>
   1538c:	4602      	mov	r2, r0
   1538e:	460b      	mov	r3, r1
   15390:	4610      	mov	r0, r2
   15392:	4619      	mov	r1, r3
   15394:	a340      	add	r3, pc, #256	; (adr r3, 15498 <estimator_update_ir_estim+0x264>)
   15396:	e9d3 2300 	ldrd	r2, r3, [r3]
   1539a:	f002 fa63 	bl	17864 <__aeabi_dsub>
   1539e:	4602      	mov	r2, r0
   153a0:	460b      	mov	r3, r1
   153a2:	4610      	mov	r0, r2
   153a4:	4619      	mov	r1, r3
   153a6:	f002 fef3 	bl	18190 <__aeabi_d2f>
   153aa:	4603      	mov	r3, r0
   153ac:	60fb      	str	r3, [r7, #12]
   153ae:	68f8      	ldr	r0, [r7, #12]
   153b0:	f002 fbb8 	bl	17b24 <__aeabi_f2d>
   153b4:	4602      	mov	r2, r0
   153b6:	460b      	mov	r3, r1
   153b8:	4610      	mov	r0, r2
   153ba:	4619      	mov	r1, r3
   153bc:	a338      	add	r3, pc, #224	; (adr r3, 154a0 <estimator_update_ir_estim+0x26c>)
   153be:	e9d3 2300 	ldrd	r2, r3, [r3]
   153c2:	f002 fe93 	bl	180ec <__aeabi_dcmpgt>
   153c6:	4603      	mov	r3, r0
   153c8:	2b00      	cmp	r3, #0
   153ca:	d1dc      	bne.n	15386 <estimator_update_ir_estim+0x152>
   153cc:	e013      	b.n	153f6 <estimator_update_ir_estim+0x1c2>
   153ce:	68f8      	ldr	r0, [r7, #12]
   153d0:	f002 fba8 	bl	17b24 <__aeabi_f2d>
   153d4:	4602      	mov	r2, r0
   153d6:	460b      	mov	r3, r1
   153d8:	4610      	mov	r0, r2
   153da:	4619      	mov	r1, r3
   153dc:	a32e      	add	r3, pc, #184	; (adr r3, 15498 <estimator_update_ir_estim+0x264>)
   153de:	e9d3 2300 	ldrd	r2, r3, [r3]
   153e2:	f002 fa41 	bl	17868 <__adddf3>
   153e6:	4602      	mov	r2, r0
   153e8:	460b      	mov	r3, r1
   153ea:	4610      	mov	r0, r2
   153ec:	4619      	mov	r1, r3
   153ee:	f002 fecf 	bl	18190 <__aeabi_d2f>
   153f2:	4603      	mov	r3, r0
   153f4:	60fb      	str	r3, [r7, #12]
   153f6:	68f8      	ldr	r0, [r7, #12]
   153f8:	f002 fb94 	bl	17b24 <__aeabi_f2d>
   153fc:	4602      	mov	r2, r0
   153fe:	460b      	mov	r3, r1
   15400:	4610      	mov	r0, r2
   15402:	4619      	mov	r1, r3
   15404:	a328      	add	r3, pc, #160	; (adr r3, 154a8 <estimator_update_ir_estim+0x274>)
   15406:	e9d3 2300 	ldrd	r2, r3, [r3]
   1540a:	f002 fe51 	bl	180b0 <__aeabi_dcmplt>
   1540e:	4603      	mov	r3, r0
   15410:	2b00      	cmp	r3, #0
   15412:	d1dc      	bne.n	153ce <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15414:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1541c:	881b      	ldrh	r3, [r3, #0]
   1541e:	b21b      	sxth	r3, r3
   15420:	4618      	mov	r0, r3
   15422:	f002 ffbf 	bl	183a4 <__aeabi_i2f>
   15426:	4602      	mov	r2, r0
   15428:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1542c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15430:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15432:	f64c 3344 	movw	r3, #52036	; 0xcb44
   15436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1543a:	68fa      	ldr	r2, [r7, #12]
   1543c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1543e:	68f8      	ldr	r0, [r7, #12]
   15440:	f04f 0100 	mov.w	r1, #0
   15444:	f003 f9a0 	bl	18788 <__aeabi_fcmplt>
   15448:	4603      	mov	r3, r0
   1544a:	2b00      	cmp	r3, #0
   1544c:	d003      	beq.n	15456 <estimator_update_ir_estim+0x222>
   1544e:	68fb      	ldr	r3, [r7, #12]
   15450:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15454:	e000      	b.n	15458 <estimator_update_ir_estim+0x224>
   15456:	68fb      	ldr	r3, [r7, #12]
   15458:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1545a:	6878      	ldr	r0, [r7, #4]
   1545c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15460:	f003 f992 	bl	18788 <__aeabi_fcmplt>
   15464:	4603      	mov	r3, r0
   15466:	2b00      	cmp	r3, #0
   15468:	d100      	bne.n	1546c <estimator_update_ir_estim+0x238>
   1546a:	e128      	b.n	156be <estimator_update_ir_estim+0x48a>
   1546c:	6878      	ldr	r0, [r7, #4]
   1546e:	f002 fb59 	bl	17b24 <__aeabi_f2d>
   15472:	4602      	mov	r2, r0
   15474:	460b      	mov	r3, r1
   15476:	4610      	mov	r0, r2
   15478:	4619      	mov	r1, r3
   1547a:	a30f      	add	r3, pc, #60	; (adr r3, 154b8 <estimator_update_ir_estim+0x284>)
   1547c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15480:	f002 fe34 	bl	180ec <__aeabi_dcmpgt>
   15484:	4603      	mov	r3, r0
   15486:	2b00      	cmp	r3, #0
   15488:	d11a      	bne.n	154c0 <estimator_update_ir_estim+0x28c>
   1548a:	e118      	b.n	156be <estimator_update_ir_estim+0x48a>
   1548c:	f3af 8000 	nop.w
   15490:	9999999a 	.word	0x9999999a
   15494:	3fb99999 	.word	0x3fb99999
   15498:	54442d18 	.word	0x54442d18
   1549c:	401921fb 	.word	0x401921fb
   154a0:	54442d18 	.word	0x54442d18
   154a4:	400921fb 	.word	0x400921fb
   154a8:	54442d18 	.word	0x54442d18
   154ac:	c00921fb 	.word	0xc00921fb
   154b0:	51eb851f 	.word	0x51eb851f
   154b4:	40239eb8 	.word	0x40239eb8
   154b8:	9999999a 	.word	0x9999999a
   154bc:	3fa99999 	.word	0x3fa99999
   154c0:	f240 5340 	movw	r3, #1344	; 0x540
   154c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c8:	881b      	ldrh	r3, [r3, #0]
   154ca:	b21b      	sxth	r3, r3
   154cc:	425b      	negs	r3, r3
   154ce:	0fda      	lsrs	r2, r3, #31
   154d0:	4413      	add	r3, r2
   154d2:	105b      	asrs	r3, r3, #1
   154d4:	461a      	mov	r2, r3
   154d6:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   154da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154de:	881b      	ldrh	r3, [r3, #0]
   154e0:	b21b      	sxth	r3, r3
   154e2:	429a      	cmp	r2, r3
   154e4:	f280 8098 	bge.w	15618 <estimator_update_ir_estim+0x3e4>
   154e8:	f240 5340 	movw	r3, #1344	; 0x540
   154ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f0:	881b      	ldrh	r3, [r3, #0]
   154f2:	b21b      	sxth	r3, r3
   154f4:	0fda      	lsrs	r2, r3, #31
   154f6:	4413      	add	r3, r2
   154f8:	105b      	asrs	r3, r3, #1
   154fa:	b29a      	uxth	r2, r3
   154fc:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15504:	881b      	ldrh	r3, [r3, #0]
   15506:	b212      	sxth	r2, r2
   15508:	b21b      	sxth	r3, r3
   1550a:	429a      	cmp	r2, r3
   1550c:	f340 8084 	ble.w	15618 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15510:	f64c 3344 	movw	r3, #52036	; 0xcb44
   15514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15518:	681a      	ldr	r2, [r3, #0]
   1551a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1551e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15522:	681b      	ldr	r3, [r3, #0]
   15524:	4610      	mov	r0, r2
   15526:	4619      	mov	r1, r3
   15528:	f002 ff90 	bl	1844c <__aeabi_fmul>
   1552c:	4603      	mov	r3, r0
   1552e:	4618      	mov	r0, r3
   15530:	f002 faf8 	bl	17b24 <__aeabi_f2d>
   15534:	4604      	mov	r4, r0
   15536:	460d      	mov	r5, r1
   15538:	f64c 3354 	movw	r3, #52052	; 0xcb54
   1553c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15540:	681b      	ldr	r3, [r3, #0]
   15542:	4618      	mov	r0, r3
   15544:	f002 faee 	bl	17b24 <__aeabi_f2d>
   15548:	4602      	mov	r2, r0
   1554a:	460b      	mov	r3, r1
   1554c:	4610      	mov	r0, r2
   1554e:	4619      	mov	r1, r3
   15550:	a367      	add	r3, pc, #412	; (adr r3, 156f0 <estimator_update_ir_estim+0x4bc>)
   15552:	e9d3 2300 	ldrd	r2, r3, [r3]
   15556:	f002 fb39 	bl	17bcc <__aeabi_dmul>
   1555a:	4602      	mov	r2, r0
   1555c:	460b      	mov	r3, r1
   1555e:	4620      	mov	r0, r4
   15560:	4629      	mov	r1, r5
   15562:	f002 f981 	bl	17868 <__adddf3>
   15566:	4602      	mov	r2, r0
   15568:	460b      	mov	r3, r1
   1556a:	4610      	mov	r0, r2
   1556c:	4619      	mov	r1, r3
   1556e:	f002 fe0f 	bl	18190 <__aeabi_d2f>
   15572:	4602      	mov	r2, r0
   15574:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1557c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1557e:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15586:	681a      	ldr	r2, [r3, #0]
   15588:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1558c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15590:	681b      	ldr	r3, [r3, #0]
   15592:	4610      	mov	r0, r2
   15594:	4619      	mov	r1, r3
   15596:	f002 ff59 	bl	1844c <__aeabi_fmul>
   1559a:	4603      	mov	r3, r0
   1559c:	4618      	mov	r0, r3
   1559e:	f002 fac1 	bl	17b24 <__aeabi_f2d>
   155a2:	4604      	mov	r4, r0
   155a4:	460d      	mov	r5, r1
   155a6:	f64c 3358 	movw	r3, #52056	; 0xcb58
   155aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ae:	681b      	ldr	r3, [r3, #0]
   155b0:	4618      	mov	r0, r3
   155b2:	f002 fab7 	bl	17b24 <__aeabi_f2d>
   155b6:	4602      	mov	r2, r0
   155b8:	460b      	mov	r3, r1
   155ba:	4610      	mov	r0, r2
   155bc:	4619      	mov	r1, r3
   155be:	a34c      	add	r3, pc, #304	; (adr r3, 156f0 <estimator_update_ir_estim+0x4bc>)
   155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   155c4:	f002 fb02 	bl	17bcc <__aeabi_dmul>
   155c8:	4602      	mov	r2, r0
   155ca:	460b      	mov	r3, r1
   155cc:	4620      	mov	r0, r4
   155ce:	4629      	mov	r1, r5
   155d0:	f002 f94a 	bl	17868 <__adddf3>
   155d4:	4602      	mov	r2, r0
   155d6:	460b      	mov	r3, r1
   155d8:	4610      	mov	r0, r2
   155da:	4619      	mov	r1, r3
   155dc:	f002 fdd8 	bl	18190 <__aeabi_d2f>
   155e0:	4602      	mov	r2, r0
   155e2:	f64c 3358 	movw	r3, #52056	; 0xcb58
   155e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ea:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   155ec:	f64c 3354 	movw	r3, #52052	; 0xcb54
   155f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f4:	681a      	ldr	r2, [r3, #0]
   155f6:	f64c 3358 	movw	r3, #52056	; 0xcb58
   155fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155fe:	681b      	ldr	r3, [r3, #0]
   15600:	4610      	mov	r0, r2
   15602:	4619      	mov	r1, r3
   15604:	f002 ffd6 	bl	185b4 <__aeabi_fdiv>
   15608:	4603      	mov	r3, r0
   1560a:	461a      	mov	r2, r3
   1560c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15614:	601a      	str	r2, [r3, #0]
   15616:	e052      	b.n	156be <estimator_update_ir_estim+0x48a>
   15618:	e051      	b.n	156be <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1561a:	f64c 3348 	movw	r3, #52040	; 0xcb48
   1561e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15622:	2201      	movs	r2, #1
   15624:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15626:	f240 5340 	movw	r3, #1344	; 0x540
   1562a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1562e:	881b      	ldrh	r3, [r3, #0]
   15630:	b21b      	sxth	r3, r3
   15632:	4618      	mov	r0, r3
   15634:	f002 feb6 	bl	183a4 <__aeabi_i2f>
   15638:	4603      	mov	r3, r0
   1563a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1563c:	6838      	ldr	r0, [r7, #0]
   1563e:	6839      	ldr	r1, [r7, #0]
   15640:	f002 ff04 	bl	1844c <__aeabi_fmul>
   15644:	4603      	mov	r3, r0
   15646:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15648:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1564c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15650:	681b      	ldr	r3, [r3, #0]
   15652:	4618      	mov	r0, r3
   15654:	f002 fa66 	bl	17b24 <__aeabi_f2d>
   15658:	4602      	mov	r2, r0
   1565a:	460b      	mov	r3, r1
   1565c:	4610      	mov	r0, r2
   1565e:	4619      	mov	r1, r3
   15660:	f04f 0200 	mov.w	r2, #0
   15664:	f04f 0300 	mov.w	r3, #0
   15668:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1566c:	f002 faae 	bl	17bcc <__aeabi_dmul>
   15670:	4602      	mov	r2, r0
   15672:	460b      	mov	r3, r1
   15674:	4614      	mov	r4, r2
   15676:	461d      	mov	r5, r3
   15678:	6838      	ldr	r0, [r7, #0]
   1567a:	f002 fa53 	bl	17b24 <__aeabi_f2d>
   1567e:	4602      	mov	r2, r0
   15680:	460b      	mov	r3, r1
   15682:	4620      	mov	r0, r4
   15684:	4629      	mov	r1, r5
   15686:	f002 faa1 	bl	17bcc <__aeabi_dmul>
   1568a:	4602      	mov	r2, r0
   1568c:	460b      	mov	r3, r1
   1568e:	4610      	mov	r0, r2
   15690:	4619      	mov	r1, r3
   15692:	f002 fd7d 	bl	18190 <__aeabi_d2f>
   15696:	4602      	mov	r2, r0
   15698:	f64c 3354 	movw	r3, #52052	; 0xcb54
   1569c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   156a2:	6838      	ldr	r0, [r7, #0]
   156a4:	f04f 0100 	mov.w	r1, #0
   156a8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   156ac:	f002 fece 	bl	1844c <__aeabi_fmul>
   156b0:	4603      	mov	r3, r0
   156b2:	461a      	mov	r2, r3
   156b4:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156bc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   156be:	f64c 3338 	movw	r3, #52024	; 0xcb38
   156c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c6:	681a      	ldr	r2, [r3, #0]
   156c8:	f64c 3350 	movw	r3, #52048	; 0xcb50
   156cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156d0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   156d2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   156d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156da:	681a      	ldr	r2, [r3, #0]
   156dc:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   156e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e4:	601a      	str	r2, [r3, #0]
}
   156e6:	3710      	adds	r7, #16
   156e8:	46bd      	mov	sp, r7
   156ea:	bdb0      	pop	{r4, r5, r7, pc}
   156ec:	f3af 8000 	nop.w
   156f0:	d916872b 	.word	0xd916872b
   156f4:	3feff7ce 	.word	0x3feff7ce

000156f8 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   156f8:	b580      	push	{r7, lr}
   156fa:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   156fc:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15704:	781b      	ldrb	r3, [r3, #0]
   15706:	f003 0320 	and.w	r3, r3, #32
   1570a:	2b00      	cmp	r3, #0
   1570c:	d044      	beq.n	15798 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1570e:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   15712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15716:	681a      	ldr	r2, [r3, #0]
   15718:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1571c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15720:	601a      	str	r2, [r3, #0]
   15722:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   15726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572a:	681a      	ldr	r2, [r3, #0]
   1572c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15734:	601a      	str	r2, [r3, #0]
   15736:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1573a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1573e:	681a      	ldr	r2, [r3, #0]
   15740:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15748:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1574a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1574e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15752:	681a      	ldr	r2, [r3, #0]
   15754:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1575c:	601a      	str	r2, [r3, #0]
   1575e:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   15762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15766:	681a      	ldr	r2, [r3, #0]
   15768:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1576c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15770:	601a      	str	r2, [r3, #0]
   15772:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   15776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577a:	681a      	ldr	r2, [r3, #0]
   1577c:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15784:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15786:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1578a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1578e:	881b      	ldrh	r3, [r3, #0]
   15790:	2b00      	cmp	r3, #0
   15792:	d001      	beq.n	15798 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15794:	f7ff fd4e 	bl	15234 <estimator_update_ir_estim>
  }
}
   15798:	bd80      	pop	{r7, pc}
   1579a:	bf00      	nop

0001579c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1579c:	b480      	push	{r7}
   1579e:	af00      	add	r7, sp, #0
  
}
   157a0:	46bd      	mov	sp, r7
   157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   157a6:	4770      	bx	lr

000157a8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   157a8:	b5b0      	push	{r4, r5, r7, lr}
   157aa:	b082      	sub	sp, #8
   157ac:	af00      	add	r7, sp, #0
   157ae:	4603      	mov	r3, r0
   157b0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   157b2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   157b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ba:	781b      	ldrb	r3, [r3, #0]
   157bc:	2b01      	cmp	r3, #1
   157be:	f040 80e0 	bne.w	15982 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157c2:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   157c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ca:	781b      	ldrb	r3, [r3, #0]
   157cc:	2b02      	cmp	r3, #2
   157ce:	d168      	bne.n	158a2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   157d0:	79fb      	ldrb	r3, [r7, #7]
   157d2:	2b00      	cmp	r3, #0
   157d4:	d013      	beq.n	157fe <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   157d6:	f240 5344 	movw	r3, #1348	; 0x544
   157da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157de:	881a      	ldrh	r2, [r3, #0]
   157e0:	f64c 3362 	movw	r3, #52066	; 0xcb62
   157e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e8:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   157ea:	f24c 6350 	movw	r3, #50768	; 0xc650
   157ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f2:	895a      	ldrh	r2, [r3, #10]
   157f4:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   157f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fc:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   157fe:	f24c 6350 	movw	r3, #50768	; 0xc650
   15802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15806:	895b      	ldrh	r3, [r3, #10]
   15808:	b21a      	sxth	r2, r3
   1580a:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   1580e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15812:	881b      	ldrh	r3, [r3, #0]
   15814:	b21b      	sxth	r3, r3
   15816:	1ad3      	subs	r3, r2, r3
   15818:	4618      	mov	r0, r3
   1581a:	f002 fdc3 	bl	183a4 <__aeabi_i2f>
   1581e:	4603      	mov	r3, r0
   15820:	4618      	mov	r0, r3
   15822:	f002 f97f 	bl	17b24 <__aeabi_f2d>
   15826:	4602      	mov	r2, r0
   15828:	460b      	mov	r3, r1
   1582a:	4610      	mov	r0, r2
   1582c:	4619      	mov	r1, r3
   1582e:	f04f 0200 	mov.w	r2, #0
   15832:	f04f 0300 	mov.w	r3, #0
   15836:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1583a:	f002 f9c7 	bl	17bcc <__aeabi_dmul>
   1583e:	4602      	mov	r2, r0
   15840:	460b      	mov	r3, r1
   15842:	4610      	mov	r0, r2
   15844:	4619      	mov	r1, r3
   15846:	f04f 0200 	mov.w	r2, #0
   1584a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1584e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15852:	f002 fae5 	bl	17e20 <__aeabi_ddiv>
   15856:	4602      	mov	r2, r0
   15858:	460b      	mov	r3, r1
   1585a:	4610      	mov	r0, r2
   1585c:	4619      	mov	r1, r3
   1585e:	f002 fc4f 	bl	18100 <__aeabi_d2iz>
   15862:	4603      	mov	r3, r0
   15864:	b29b      	uxth	r3, r3
   15866:	b29a      	uxth	r2, r3
   15868:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1586c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15870:	881b      	ldrh	r3, [r3, #0]
   15872:	b29b      	uxth	r3, r3
   15874:	4413      	add	r3, r2
   15876:	b29b      	uxth	r3, r3
   15878:	b29a      	uxth	r2, r3
   1587a:	f240 5344 	movw	r3, #1348	; 0x544
   1587e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15882:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15884:	f240 5344 	movw	r3, #1348	; 0x544
   15888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1588c:	881b      	ldrh	r3, [r3, #0]
   1588e:	b21b      	sxth	r3, r3
   15890:	4618      	mov	r0, r3
   15892:	f002 fd87 	bl	183a4 <__aeabi_i2f>
   15896:	4602      	mov	r2, r0
   15898:	f24c 5338 	movw	r3, #50488	; 0xc538
   1589c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158a2:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   158a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158aa:	781b      	ldrb	r3, [r3, #0]
   158ac:	2b02      	cmp	r3, #2
   158ae:	d168      	bne.n	15982 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   158b0:	79fb      	ldrb	r3, [r7, #7]
   158b2:	2b00      	cmp	r3, #0
   158b4:	d013      	beq.n	158de <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   158b6:	f240 5342 	movw	r3, #1346	; 0x542
   158ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158be:	881a      	ldrh	r2, [r3, #0]
   158c0:	f64c 3364 	movw	r3, #52068	; 0xcb64
   158c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   158ca:	f24c 6350 	movw	r3, #50768	; 0xc650
   158ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d2:	899a      	ldrh	r2, [r3, #12]
   158d4:	f64c 3360 	movw	r3, #52064	; 0xcb60
   158d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158dc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   158de:	f24c 6350 	movw	r3, #50768	; 0xc650
   158e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e6:	899b      	ldrh	r3, [r3, #12]
   158e8:	b21a      	sxth	r2, r3
   158ea:	f64c 3360 	movw	r3, #52064	; 0xcb60
   158ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f2:	881b      	ldrh	r3, [r3, #0]
   158f4:	b21b      	sxth	r3, r3
   158f6:	1ad3      	subs	r3, r2, r3
   158f8:	4618      	mov	r0, r3
   158fa:	f002 fd53 	bl	183a4 <__aeabi_i2f>
   158fe:	4603      	mov	r3, r0
   15900:	4618      	mov	r0, r3
   15902:	f002 f90f 	bl	17b24 <__aeabi_f2d>
   15906:	4602      	mov	r2, r0
   15908:	460b      	mov	r3, r1
   1590a:	4610      	mov	r0, r2
   1590c:	4619      	mov	r1, r3
   1590e:	f04f 0200 	mov.w	r2, #0
   15912:	f04f 0300 	mov.w	r3, #0
   15916:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1591a:	f002 f957 	bl	17bcc <__aeabi_dmul>
   1591e:	4602      	mov	r2, r0
   15920:	460b      	mov	r3, r1
   15922:	4610      	mov	r0, r2
   15924:	4619      	mov	r1, r3
   15926:	f04f 0200 	mov.w	r2, #0
   1592a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1592e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15932:	f002 fa75 	bl	17e20 <__aeabi_ddiv>
   15936:	4602      	mov	r2, r0
   15938:	460b      	mov	r3, r1
   1593a:	4610      	mov	r0, r2
   1593c:	4619      	mov	r1, r3
   1593e:	f002 fbdf 	bl	18100 <__aeabi_d2iz>
   15942:	4603      	mov	r3, r0
   15944:	b29b      	uxth	r3, r3
   15946:	b29a      	uxth	r2, r3
   15948:	f64c 3364 	movw	r3, #52068	; 0xcb64
   1594c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15950:	881b      	ldrh	r3, [r3, #0]
   15952:	b29b      	uxth	r3, r3
   15954:	4413      	add	r3, r2
   15956:	b29b      	uxth	r3, r3
   15958:	b29a      	uxth	r2, r3
   1595a:	f240 5342 	movw	r3, #1346	; 0x542
   1595e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15962:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15964:	f240 5342 	movw	r3, #1346	; 0x542
   15968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1596c:	881b      	ldrh	r3, [r3, #0]
   1596e:	b21b      	sxth	r3, r3
   15970:	4618      	mov	r0, r3
   15972:	f002 fd17 	bl	183a4 <__aeabi_i2f>
   15976:	4602      	mov	r2, r0
   15978:	f24c 533c 	movw	r3, #50492	; 0xc53c
   1597c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15980:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15982:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1598a:	781b      	ldrb	r3, [r3, #0]
   1598c:	2b02      	cmp	r3, #2
   1598e:	f040 80da 	bne.w	15b46 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15992:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1599a:	781b      	ldrb	r3, [r3, #0]
   1599c:	2b02      	cmp	r3, #2
   1599e:	d165      	bne.n	15a6c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   159a0:	79fb      	ldrb	r3, [r7, #7]
   159a2:	2b00      	cmp	r3, #0
   159a4:	d013      	beq.n	159ce <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   159a6:	f240 5358 	movw	r3, #1368	; 0x558
   159aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ae:	681a      	ldr	r2, [r3, #0]
   159b0:	f64c 3368 	movw	r3, #52072	; 0xcb68
   159b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   159ba:	f24c 6350 	movw	r3, #50768	; 0xc650
   159be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c2:	895a      	ldrh	r2, [r3, #10]
   159c4:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   159c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159cc:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   159ce:	f64c 3368 	movw	r3, #52072	; 0xcb68
   159d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d6:	681b      	ldr	r3, [r3, #0]
   159d8:	4618      	mov	r0, r3
   159da:	f002 f8a3 	bl	17b24 <__aeabi_f2d>
   159de:	4604      	mov	r4, r0
   159e0:	460d      	mov	r5, r1
   159e2:	f24c 6350 	movw	r3, #50768	; 0xc650
   159e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ea:	895b      	ldrh	r3, [r3, #10]
   159ec:	b21a      	sxth	r2, r3
   159ee:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   159f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f6:	881b      	ldrh	r3, [r3, #0]
   159f8:	b21b      	sxth	r3, r3
   159fa:	1ad3      	subs	r3, r2, r3
   159fc:	4618      	mov	r0, r3
   159fe:	f002 fcd1 	bl	183a4 <__aeabi_i2f>
   15a02:	4603      	mov	r3, r0
   15a04:	4618      	mov	r0, r3
   15a06:	f002 f88d 	bl	17b24 <__aeabi_f2d>
   15a0a:	4602      	mov	r2, r0
   15a0c:	460b      	mov	r3, r1
   15a0e:	4610      	mov	r0, r2
   15a10:	4619      	mov	r1, r3
   15a12:	a34f      	add	r3, pc, #316	; (adr r3, 15b50 <inflight_calib+0x3a8>)
   15a14:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a18:	f002 f8d8 	bl	17bcc <__aeabi_dmul>
   15a1c:	4602      	mov	r2, r0
   15a1e:	460b      	mov	r3, r1
   15a20:	4610      	mov	r0, r2
   15a22:	4619      	mov	r1, r3
   15a24:	f04f 0200 	mov.w	r2, #0
   15a28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a2c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a30:	f002 f9f6 	bl	17e20 <__aeabi_ddiv>
   15a34:	4602      	mov	r2, r0
   15a36:	460b      	mov	r3, r1
   15a38:	4620      	mov	r0, r4
   15a3a:	4629      	mov	r1, r5
   15a3c:	f001 ff14 	bl	17868 <__adddf3>
   15a40:	4602      	mov	r2, r0
   15a42:	460b      	mov	r3, r1
   15a44:	4610      	mov	r0, r2
   15a46:	4619      	mov	r1, r3
   15a48:	f002 fba2 	bl	18190 <__aeabi_d2f>
   15a4c:	4602      	mov	r2, r0
   15a4e:	f240 5358 	movw	r3, #1368	; 0x558
   15a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a56:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15a58:	f240 5358 	movw	r3, #1368	; 0x558
   15a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a60:	681a      	ldr	r2, [r3, #0]
   15a62:	f24c 5338 	movw	r3, #50488	; 0xc538
   15a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a6a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a6c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a74:	781b      	ldrb	r3, [r3, #0]
   15a76:	2b02      	cmp	r3, #2
   15a78:	d165      	bne.n	15b46 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15a7a:	79fb      	ldrb	r3, [r7, #7]
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d013      	beq.n	15aa8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15a80:	f240 535c 	movw	r3, #1372	; 0x55c
   15a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a88:	681a      	ldr	r2, [r3, #0]
   15a8a:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a92:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15a94:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a9c:	899a      	ldrh	r2, [r3, #12]
   15a9e:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15aa8:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab0:	681b      	ldr	r3, [r3, #0]
   15ab2:	4618      	mov	r0, r3
   15ab4:	f002 f836 	bl	17b24 <__aeabi_f2d>
   15ab8:	4604      	mov	r4, r0
   15aba:	460d      	mov	r5, r1
   15abc:	f24c 6350 	movw	r3, #50768	; 0xc650
   15ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ac4:	899b      	ldrh	r3, [r3, #12]
   15ac6:	b21a      	sxth	r2, r3
   15ac8:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad0:	881b      	ldrh	r3, [r3, #0]
   15ad2:	b21b      	sxth	r3, r3
   15ad4:	1ad3      	subs	r3, r2, r3
   15ad6:	4618      	mov	r0, r3
   15ad8:	f002 fc64 	bl	183a4 <__aeabi_i2f>
   15adc:	4603      	mov	r3, r0
   15ade:	4618      	mov	r0, r3
   15ae0:	f002 f820 	bl	17b24 <__aeabi_f2d>
   15ae4:	4602      	mov	r2, r0
   15ae6:	460b      	mov	r3, r1
   15ae8:	4610      	mov	r0, r2
   15aea:	4619      	mov	r1, r3
   15aec:	a31a      	add	r3, pc, #104	; (adr r3, 15b58 <inflight_calib+0x3b0>)
   15aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15af2:	f002 f86b 	bl	17bcc <__aeabi_dmul>
   15af6:	4602      	mov	r2, r0
   15af8:	460b      	mov	r3, r1
   15afa:	4610      	mov	r0, r2
   15afc:	4619      	mov	r1, r3
   15afe:	f04f 0200 	mov.w	r2, #0
   15b02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b06:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b0a:	f002 f989 	bl	17e20 <__aeabi_ddiv>
   15b0e:	4602      	mov	r2, r0
   15b10:	460b      	mov	r3, r1
   15b12:	4620      	mov	r0, r4
   15b14:	4629      	mov	r1, r5
   15b16:	f001 fea7 	bl	17868 <__adddf3>
   15b1a:	4602      	mov	r2, r0
   15b1c:	460b      	mov	r3, r1
   15b1e:	4610      	mov	r0, r2
   15b20:	4619      	mov	r1, r3
   15b22:	f002 fb35 	bl	18190 <__aeabi_d2f>
   15b26:	4602      	mov	r2, r0
   15b28:	f240 535c 	movw	r3, #1372	; 0x55c
   15b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b30:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15b32:	f240 535c 	movw	r3, #1372	; 0x55c
   15b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b3a:	681a      	ldr	r2, [r3, #0]
   15b3c:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b44:	601a      	str	r2, [r3, #0]
    }
  }
}
   15b46:	3708      	adds	r7, #8
   15b48:	46bd      	mov	sp, r7
   15b4a:	bdb0      	pop	{r4, r5, r7, pc}
   15b4c:	f3af 8000 	nop.w
   15b50:	9999999a 	.word	0x9999999a
   15b54:	3fb99999 	.word	0x3fb99999
   15b58:	9999999a 	.word	0x9999999a
   15b5c:	bfc99999 	.word	0xbfc99999

00015b60 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15b64:	b08e      	sub	sp, #56	; 0x38
   15b66:	af00      	add	r7, sp, #0
   15b68:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15b6c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15b70:	a357      	add	r3, pc, #348	; (adr r3, 15cd0 <pp_atan2+0x170>)
   15b72:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15b7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b7e:	f04f 0200 	mov.w	r2, #0
   15b82:	f04f 0300 	mov.w	r3, #0
   15b86:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15b8a:	f002 f81f 	bl	17bcc <__aeabi_dmul>
   15b8e:	4602      	mov	r2, r0
   15b90:	460b      	mov	r3, r1
   15b92:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15b96:	e9d7 0100 	ldrd	r0, r1, [r7]
   15b9a:	f04f 0200 	mov.w	r2, #0
   15b9e:	f04f 0300 	mov.w	r3, #0
   15ba2:	f002 fa85 	bl	180b0 <__aeabi_dcmplt>
   15ba6:	4603      	mov	r3, r0
   15ba8:	2b00      	cmp	r3, #0
   15baa:	d009      	beq.n	15bc0 <pp_atan2+0x60>
   15bac:	a14a      	add	r1, pc, #296	; (adr r1, 15cd8 <pp_atan2+0x178>)
   15bae:	e9d1 0100 	ldrd	r0, r1, [r1]
   15bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15bb6:	f001 fe55 	bl	17864 <__aeabi_dsub>
   15bba:	4602      	mov	r2, r0
   15bbc:	460b      	mov	r3, r1
   15bbe:	e008      	b.n	15bd2 <pp_atan2+0x72>
   15bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bc4:	a344      	add	r3, pc, #272	; (adr r3, 15cd8 <pp_atan2+0x178>)
   15bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bca:	f001 fe4d 	bl	17868 <__adddf3>
   15bce:	4602      	mov	r2, r0
   15bd0:	460b      	mov	r3, r1
   15bd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15bda:	f04f 0200 	mov.w	r2, #0
   15bde:	f04f 0300 	mov.w	r3, #0
   15be2:	f002 fa83 	bl	180ec <__aeabi_dcmpgt>
   15be6:	4603      	mov	r3, r0
   15be8:	2b00      	cmp	r3, #0
   15bea:	d02a      	beq.n	15c42 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15bf4:	f001 fe36 	bl	17864 <__aeabi_dsub>
   15bf8:	4602      	mov	r2, r0
   15bfa:	460b      	mov	r3, r1
   15bfc:	4690      	mov	r8, r2
   15bfe:	4699      	mov	r9, r3
   15c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c08:	f001 fe2e 	bl	17868 <__adddf3>
   15c0c:	4602      	mov	r2, r0
   15c0e:	460b      	mov	r3, r1
   15c10:	4640      	mov	r0, r8
   15c12:	4649      	mov	r1, r9
   15c14:	f002 f904 	bl	17e20 <__aeabi_ddiv>
   15c18:	4602      	mov	r2, r0
   15c1a:	460b      	mov	r3, r1
   15c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c28:	f001 ffd0 	bl	17bcc <__aeabi_dmul>
   15c2c:	4602      	mov	r2, r0
   15c2e:	460b      	mov	r3, r1
   15c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c34:	f001 fe16 	bl	17864 <__aeabi_dsub>
   15c38:	4602      	mov	r2, r0
   15c3a:	460b      	mov	r3, r1
   15c3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15c40:	e029      	b.n	15c96 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c4a:	f001 fe0d 	bl	17868 <__adddf3>
   15c4e:	4602      	mov	r2, r0
   15c50:	460b      	mov	r3, r1
   15c52:	4690      	mov	r8, r2
   15c54:	4699      	mov	r9, r3
   15c56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15c5e:	f001 fe01 	bl	17864 <__aeabi_dsub>
   15c62:	4602      	mov	r2, r0
   15c64:	460b      	mov	r3, r1
   15c66:	4640      	mov	r0, r8
   15c68:	4649      	mov	r1, r9
   15c6a:	f002 f8d9 	bl	17e20 <__aeabi_ddiv>
   15c6e:	4602      	mov	r2, r0
   15c70:	460b      	mov	r3, r1
   15c72:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15c76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c7e:	f001 ffa5 	bl	17bcc <__aeabi_dmul>
   15c82:	4602      	mov	r2, r0
   15c84:	460b      	mov	r3, r1
   15c86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15c8a:	f001 fdeb 	bl	17864 <__aeabi_dsub>
   15c8e:	4602      	mov	r2, r0
   15c90:	460b      	mov	r3, r1
   15c92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15c96:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c9a:	f04f 0200 	mov.w	r2, #0
   15c9e:	f04f 0300 	mov.w	r3, #0
   15ca2:	f002 fa05 	bl	180b0 <__aeabi_dcmplt>
   15ca6:	4603      	mov	r3, r0
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d004      	beq.n	15cb6 <pp_atan2+0x156>
		return (-angle);
   15cac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15cb0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15cb4:	e001      	b.n	15cba <pp_atan2+0x15a>
	else
		return angle;
   15cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15cba:	4622      	mov	r2, r4
   15cbc:	462b      	mov	r3, r5
}
   15cbe:	4610      	mov	r0, r2
   15cc0:	4619      	mov	r1, r3
   15cc2:	3738      	adds	r7, #56	; 0x38
   15cc4:	46bd      	mov	sp, r7
   15cc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15cca:	bf00      	nop
   15ccc:	f3af 8000 	nop.w
   15cd0:	54442d18 	.word	0x54442d18
   15cd4:	3fe921fb 	.word	0x3fe921fb
   15cd8:	d9d7bdbb 	.word	0xd9d7bdbb
   15cdc:	3ddb7cdf 	.word	0x3ddb7cdf

00015ce0 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15ce0:	b5b0      	push	{r4, r5, r7, lr}
   15ce2:	b08c      	sub	sp, #48	; 0x30
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15cea:	e9d7 2300 	ldrd	r2, r3, [r7]
   15cee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15cf2:	2301      	movs	r3, #1
   15cf4:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15cf6:	e00a      	b.n	15d0e <pp_sin+0x2e>
   15cf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cfc:	a35a      	add	r3, pc, #360	; (adr r3, 15e68 <pp_sin+0x188>)
   15cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d02:	f001 fdb1 	bl	17868 <__adddf3>
   15d06:	4602      	mov	r2, r0
   15d08:	460b      	mov	r3, r1
   15d0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d12:	a357      	add	r3, pc, #348	; (adr r3, 15e70 <pp_sin+0x190>)
   15d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d18:	f002 f9ca 	bl	180b0 <__aeabi_dcmplt>
   15d1c:	4603      	mov	r3, r0
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d1ea      	bne.n	15cf8 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15d22:	e00a      	b.n	15d3a <pp_sin+0x5a>
   15d24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d28:	a34f      	add	r3, pc, #316	; (adr r3, 15e68 <pp_sin+0x188>)
   15d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d2e:	f001 fd99 	bl	17864 <__aeabi_dsub>
   15d32:	4602      	mov	r2, r0
   15d34:	460b      	mov	r3, r1
   15d36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d3e:	a34e      	add	r3, pc, #312	; (adr r3, 15e78 <pp_sin+0x198>)
   15d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d44:	f002 f9d2 	bl	180ec <__aeabi_dcmpgt>
   15d48:	4603      	mov	r3, r0
   15d4a:	2b00      	cmp	r3, #0
   15d4c:	d1ea      	bne.n	15d24 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15d4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d52:	a34b      	add	r3, pc, #300	; (adr r3, 15e80 <pp_sin+0x1a0>)
   15d54:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d58:	f002 f9c8 	bl	180ec <__aeabi_dcmpgt>
   15d5c:	4603      	mov	r3, r0
   15d5e:	2b00      	cmp	r3, #0
   15d60:	d00d      	beq.n	15d7e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15d62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d66:	a348      	add	r3, pc, #288	; (adr r3, 15e88 <pp_sin+0x1a8>)
   15d68:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d6c:	f001 fd7a 	bl	17864 <__aeabi_dsub>
   15d70:	4602      	mov	r2, r0
   15d72:	460b      	mov	r3, r1
   15d74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15d78:	f04f 33ff 	mov.w	r3, #4294967295
   15d7c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d82:	a343      	add	r3, pc, #268	; (adr r3, 15e90 <pp_sin+0x1b0>)
   15d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d88:	f002 f84a 	bl	17e20 <__aeabi_ddiv>
   15d8c:	4602      	mov	r2, r0
   15d8e:	460b      	mov	r3, r1
   15d90:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d9c:	f001 ff16 	bl	17bcc <__aeabi_dmul>
   15da0:	4602      	mov	r2, r0
   15da2:	460b      	mov	r3, r1
   15da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15dac:	a33a      	add	r3, pc, #232	; (adr r3, 15e98 <pp_sin+0x1b8>)
   15dae:	e9d3 2300 	ldrd	r2, r3, [r3]
   15db2:	f001 ff0b 	bl	17bcc <__aeabi_dmul>
   15db6:	4602      	mov	r2, r0
   15db8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15dba:	4610      	mov	r0, r2
   15dbc:	4619      	mov	r1, r3
   15dbe:	a338      	add	r3, pc, #224	; (adr r3, 15ea0 <pp_sin+0x1c0>)
   15dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dc4:	f001 fd4e 	bl	17864 <__aeabi_dsub>
   15dc8:	4602      	mov	r2, r0
   15dca:	460b      	mov	r3, r1
   15dcc:	4610      	mov	r0, r2
   15dce:	4619      	mov	r1, r3
   15dd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15dd4:	f001 fefa 	bl	17bcc <__aeabi_dmul>
   15dd8:	4602      	mov	r2, r0
   15dda:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15ddc:	4610      	mov	r0, r2
   15dde:	4619      	mov	r1, r3
   15de0:	a331      	add	r3, pc, #196	; (adr r3, 15ea8 <pp_sin+0x1c8>)
   15de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15de6:	f001 fd3f 	bl	17868 <__adddf3>
   15dea:	4602      	mov	r2, r0
   15dec:	460b      	mov	r3, r1
   15dee:	4610      	mov	r0, r2
   15df0:	4619      	mov	r1, r3
   15df2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15df6:	f001 fee9 	bl	17bcc <__aeabi_dmul>
   15dfa:	4602      	mov	r2, r0
   15dfc:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15dfe:	4610      	mov	r0, r2
   15e00:	4619      	mov	r1, r3
   15e02:	a32b      	add	r3, pc, #172	; (adr r3, 15eb0 <pp_sin+0x1d0>)
   15e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e08:	f001 fd2c 	bl	17864 <__aeabi_dsub>
   15e0c:	4602      	mov	r2, r0
   15e0e:	460b      	mov	r3, r1
   15e10:	4610      	mov	r0, r2
   15e12:	4619      	mov	r1, r3
   15e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e18:	f001 fed8 	bl	17bcc <__aeabi_dmul>
   15e1c:	4602      	mov	r2, r0
   15e1e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15e20:	4610      	mov	r0, r2
   15e22:	4619      	mov	r1, r3
   15e24:	a324      	add	r3, pc, #144	; (adr r3, 15eb8 <pp_sin+0x1d8>)
   15e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e2a:	f001 fd1d 	bl	17868 <__adddf3>
   15e2e:	4602      	mov	r2, r0
   15e30:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15e32:	4610      	mov	r0, r2
   15e34:	4619      	mov	r1, r3
   15e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e3a:	f001 fec7 	bl	17bcc <__aeabi_dmul>
   15e3e:	4602      	mov	r2, r0
   15e40:	460b      	mov	r3, r1
   15e42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e48:	2b00      	cmp	r3, #0
   15e4a:	da04      	bge.n	15e56 <pp_sin+0x176>
   15e4c:	68bc      	ldr	r4, [r7, #8]
   15e4e:	68fb      	ldr	r3, [r7, #12]
   15e50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e54:	e001      	b.n	15e5a <pp_sin+0x17a>
   15e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15e5a:	4622      	mov	r2, r4
   15e5c:	462b      	mov	r3, r5
}
   15e5e:	4610      	mov	r0, r2
   15e60:	4619      	mov	r1, r3
   15e62:	3730      	adds	r7, #48	; 0x30
   15e64:	46bd      	mov	sp, r7
   15e66:	bdb0      	pop	{r4, r5, r7, pc}
   15e68:	54442d18 	.word	0x54442d18
   15e6c:	401921fb 	.word	0x401921fb
   15e70:	54442d18 	.word	0x54442d18
   15e74:	bff921fb 	.word	0xbff921fb
   15e78:	7f3321d2 	.word	0x7f3321d2
   15e7c:	4012d97c 	.word	0x4012d97c
   15e80:	54442d18 	.word	0x54442d18
   15e84:	3ff921fb 	.word	0x3ff921fb
   15e88:	54442d18 	.word	0x54442d18
   15e8c:	400921fb 	.word	0x400921fb
   15e90:	5443d6f4 	.word	0x5443d6f4
   15e94:	3ff921fb 	.word	0x3ff921fb
   15e98:	48a890af 	.word	0x48a890af
   15e9c:	3f23daf7 	.word	0x3f23daf7
   15ea0:	645b6d0e 	.word	0x645b6d0e
   15ea4:	3f7324cc 	.word	0x3f7324cc
   15ea8:	f65619a5 	.word	0xf65619a5
   15eac:	3fb4668a 	.word	0x3fb4668a
   15eb0:	16acf9cd 	.word	0x16acf9cd
   15eb4:	3fe4abbc 	.word	0x3fe4abbc
   15eb8:	520817f7 	.word	0x520817f7
   15ebc:	3ff921fb 	.word	0x3ff921fb

00015ec0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15ec0:	b480      	push	{r7}
   15ec2:	b083      	sub	sp, #12
   15ec4:	af00      	add	r7, sp, #0
   15ec6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15eca:	4610      	mov	r0, r2
   15ecc:	4619      	mov	r1, r3
   15ece:	370c      	adds	r7, #12
   15ed0:	46bd      	mov	sp, r7
   15ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ed6:	4770      	bx	lr

00015ed8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15ed8:	b480      	push	{r7}
   15eda:	b083      	sub	sp, #12
   15edc:	af00      	add	r7, sp, #0
   15ede:	4603      	mov	r3, r0
   15ee0:	6039      	str	r1, [r7, #0]
   15ee2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15ee4:	79fa      	ldrb	r2, [r7, #7]
   15ee6:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eee:	6839      	ldr	r1, [r7, #0]
   15ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15ef4:	370c      	adds	r7, #12
   15ef6:	46bd      	mov	sp, r7
   15ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
   15efc:	4770      	bx	lr
   15efe:	bf00      	nop

00015f00 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f00:	b480      	push	{r7}
   15f02:	b083      	sub	sp, #12
   15f04:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f06:	f242 0315 	movw	r3, #8213	; 0x2015
   15f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f0e:	2200      	movs	r2, #0
   15f10:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15f12:	f242 0314 	movw	r3, #8212	; 0x2014
   15f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f1a:	2200      	movs	r2, #0
   15f1c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15f1e:	f242 0307 	movw	r3, #8199	; 0x2007
   15f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f26:	22c0      	movs	r2, #192	; 0xc0
   15f28:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15f2a:	f242 0306 	movw	r3, #8198	; 0x2006
   15f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f32:	22cf      	movs	r2, #207	; 0xcf
   15f34:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f36:	2300      	movs	r3, #0
   15f38:	71fb      	strb	r3, [r7, #7]
   15f3a:	e00a      	b.n	15f52 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15f3c:	79fa      	ldrb	r2, [r7, #7]
   15f3e:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f46:	2100      	movs	r1, #0
   15f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f4c:	79fb      	ldrb	r3, [r7, #7]
   15f4e:	3301      	adds	r3, #1
   15f50:	71fb      	strb	r3, [r7, #7]
   15f52:	79fb      	ldrb	r3, [r7, #7]
   15f54:	2b07      	cmp	r3, #7
   15f56:	d9f1      	bls.n	15f3c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15f58:	370c      	adds	r7, #12
   15f5a:	46bd      	mov	sp, r7
   15f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f60:	4770      	bx	lr
   15f62:	bf00      	nop

00015f64 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15f64:	b480      	push	{r7}
   15f66:	b083      	sub	sp, #12
   15f68:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15f6a:	f242 0326 	movw	r3, #8230	; 0x2026
   15f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f72:	881b      	ldrh	r3, [r3, #0]
   15f74:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15f76:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f7e:	881b      	ldrh	r3, [r3, #0]
   15f80:	88fa      	ldrh	r2, [r7, #6]
   15f82:	1ad3      	subs	r3, r2, r3
   15f84:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15f86:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f8e:	88fa      	ldrh	r2, [r7, #6]
   15f90:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15f92:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f9a:	781b      	ldrb	r3, [r3, #0]
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	d11e      	bne.n	15fde <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15fa0:	f242 0324 	movw	r3, #8228	; 0x2024
   15fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fa8:	781b      	ldrb	r3, [r3, #0]
   15faa:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15fac:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   15fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fb4:	781b      	ldrb	r3, [r3, #0]
   15fb6:	78fa      	ldrb	r2, [r7, #3]
   15fb8:	1ad3      	subs	r3, r2, r3
   15fba:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15fbc:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   15fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fc4:	78fa      	ldrb	r2, [r7, #3]
   15fc6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15fc8:	78bb      	ldrb	r3, [r7, #2]
   15fca:	2b6d      	cmp	r3, #109	; 0x6d
   15fcc:	d906      	bls.n	15fdc <__vector_34+0x78>
      state = 1;
   15fce:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fd6:	2201      	movs	r2, #1
   15fd8:	701a      	strb	r2, [r3, #0]
   15fda:	e053      	b.n	16084 <__vector_34+0x120>
   15fdc:	e052      	b.n	16084 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15fde:	88bb      	ldrh	r3, [r7, #4]
   15fe0:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15fe4:	d304      	bcc.n	15ff0 <__vector_34+0x8c>
   15fe6:	88ba      	ldrh	r2, [r7, #4]
   15fe8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15fec:	429a      	cmp	r2, r3
   15fee:	d911      	bls.n	16014 <__vector_34+0xb0>
      RestartPpmCycle();
   15ff0:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ff8:	2200      	movs	r2, #0
   15ffa:	701a      	strb	r2, [r3, #0]
   15ffc:	f242 0324 	movw	r3, #8228	; 0x2024
   16000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16004:	781b      	ldrb	r3, [r3, #0]
   16006:	b2da      	uxtb	r2, r3
   16008:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   1600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16010:	701a      	strb	r2, [r3, #0]
   16012:	e038      	b.n	16086 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   16014:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601c:	781b      	ldrb	r3, [r3, #0]
   1601e:	1e5a      	subs	r2, r3, #1
   16020:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16028:	88b9      	ldrh	r1, [r7, #4]
   1602a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   1602e:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16036:	781b      	ldrb	r3, [r3, #0]
   16038:	2b08      	cmp	r3, #8
   1603a:	d917      	bls.n	1606c <__vector_34+0x108>
      ppm_valid	= 1;
   1603c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16044:	2201      	movs	r2, #1
   16046:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16048:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1604c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16050:	2200      	movs	r2, #0
   16052:	701a      	strb	r2, [r3, #0]
   16054:	f242 0324 	movw	r3, #8228	; 0x2024
   16058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	b2da      	uxtb	r2, r3
   16060:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16068:	701a      	strb	r2, [r3, #0]
   1606a:	e00c      	b.n	16086 <__vector_34+0x122>
    } else 
      state++;
   1606c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	3301      	adds	r3, #1
   16078:	b2da      	uxtb	r2, r3
   1607a:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1607e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16082:	701a      	strb	r2, [r3, #0]
  }
  return;
   16084:	bf00      	nop
}
   16086:	370c      	adds	r7, #12
   16088:	46bd      	mov	sp, r7
   1608a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1608e:	4770      	bx	lr

00016090 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16090:	b590      	push	{r4, r7, lr}
   16092:	b083      	sub	sp, #12
   16094:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   16096:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1609a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1609e:	881b      	ldrh	r3, [r3, #0]
   160a0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   160a4:	b29b      	uxth	r3, r3
   160a6:	80fb      	strh	r3, [r7, #6]
   160a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160ac:	4618      	mov	r0, r3
   160ae:	f002 f979 	bl	183a4 <__aeabi_i2f>
   160b2:	4603      	mov	r3, r0
   160b4:	4618      	mov	r0, r3
   160b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   160ba:	f002 f9c7 	bl	1844c <__aeabi_fmul>
   160be:	4603      	mov	r3, r0
   160c0:	4618      	mov	r0, r3
   160c2:	f002 fb89 	bl	187d8 <__aeabi_f2iz>
   160c6:	4603      	mov	r3, r0
   160c8:	b29a      	uxth	r2, r3
   160ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d2:	801a      	strh	r2, [r3, #0]
   160d4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160dc:	881b      	ldrh	r3, [r3, #0]
   160de:	b21b      	sxth	r3, r3
   160e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160e4:	dd07      	ble.n	160f6 <last_radio_from_ppm+0x66>
   160e6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160f2:	801a      	strh	r2, [r3, #0]
   160f4:	e00d      	b.n	16112 <last_radio_from_ppm+0x82>
   160f6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160fe:	881b      	ldrh	r3, [r3, #0]
   16100:	b21b      	sxth	r3, r3
   16102:	2b00      	cmp	r3, #0
   16104:	da05      	bge.n	16112 <last_radio_from_ppm+0x82>
   16106:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1610e:	2200      	movs	r2, #0
   16110:	801a      	strh	r2, [r3, #0]
   16112:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16116:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611a:	885b      	ldrh	r3, [r3, #2]
   1611c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16120:	b29b      	uxth	r3, r3
   16122:	80fb      	strh	r3, [r7, #6]
   16124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16128:	4618      	mov	r0, r3
   1612a:	f002 f93b 	bl	183a4 <__aeabi_i2f>
   1612e:	4603      	mov	r3, r0
   16130:	4618      	mov	r0, r3
   16132:	f002 fb51 	bl	187d8 <__aeabi_f2iz>
   16136:	4603      	mov	r3, r0
   16138:	b29a      	uxth	r2, r3
   1613a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1613e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16142:	805a      	strh	r2, [r3, #2]
   16144:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1614c:	885b      	ldrh	r3, [r3, #2]
   1614e:	b21b      	sxth	r3, r3
   16150:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16154:	dd07      	ble.n	16166 <last_radio_from_ppm+0xd6>
   16156:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1615a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1615e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16162:	805a      	strh	r2, [r3, #2]
   16164:	e00f      	b.n	16186 <last_radio_from_ppm+0xf6>
   16166:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1616a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1616e:	885b      	ldrh	r3, [r3, #2]
   16170:	b21b      	sxth	r3, r3
   16172:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16176:	da06      	bge.n	16186 <last_radio_from_ppm+0xf6>
   16178:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16180:	f64d 2280 	movw	r2, #55936	; 0xda80
   16184:	805a      	strh	r2, [r3, #2]
   16186:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	889b      	ldrh	r3, [r3, #4]
   16190:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16194:	b29b      	uxth	r3, r3
   16196:	80fb      	strh	r3, [r7, #6]
   16198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1619c:	4618      	mov	r0, r3
   1619e:	f002 f901 	bl	183a4 <__aeabi_i2f>
   161a2:	4603      	mov	r3, r0
   161a4:	4618      	mov	r0, r3
   161a6:	f002 fb17 	bl	187d8 <__aeabi_f2iz>
   161aa:	4603      	mov	r3, r0
   161ac:	b29a      	uxth	r2, r3
   161ae:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b6:	809a      	strh	r2, [r3, #4]
   161b8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c0:	889b      	ldrh	r3, [r3, #4]
   161c2:	b21b      	sxth	r3, r3
   161c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161c8:	dd07      	ble.n	161da <last_radio_from_ppm+0x14a>
   161ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161d6:	809a      	strh	r2, [r3, #4]
   161d8:	e00f      	b.n	161fa <last_radio_from_ppm+0x16a>
   161da:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e2:	889b      	ldrh	r3, [r3, #4]
   161e4:	b21b      	sxth	r3, r3
   161e6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   161ea:	da06      	bge.n	161fa <last_radio_from_ppm+0x16a>
   161ec:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f4:	f64d 2280 	movw	r2, #55936	; 0xda80
   161f8:	809a      	strh	r2, [r3, #4]
   161fa:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16202:	88db      	ldrh	r3, [r3, #6]
   16204:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16208:	b29b      	uxth	r3, r3
   1620a:	80fb      	strh	r3, [r7, #6]
   1620c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16210:	4618      	mov	r0, r3
   16212:	f002 f8c7 	bl	183a4 <__aeabi_i2f>
   16216:	4603      	mov	r3, r0
   16218:	4618      	mov	r0, r3
   1621a:	f002 fadd 	bl	187d8 <__aeabi_f2iz>
   1621e:	4603      	mov	r3, r0
   16220:	b29a      	uxth	r2, r3
   16222:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1622a:	80da      	strh	r2, [r3, #6]
   1622c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16234:	88db      	ldrh	r3, [r3, #6]
   16236:	b21b      	sxth	r3, r3
   16238:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1623c:	dd07      	ble.n	1624e <last_radio_from_ppm+0x1be>
   1623e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16246:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1624a:	80da      	strh	r2, [r3, #6]
   1624c:	e00f      	b.n	1626e <last_radio_from_ppm+0x1de>
   1624e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16256:	88db      	ldrh	r3, [r3, #6]
   16258:	b21b      	sxth	r3, r3
   1625a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1625e:	da06      	bge.n	1626e <last_radio_from_ppm+0x1de>
   16260:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16268:	f64d 2280 	movw	r2, #55936	; 0xda80
   1626c:	80da      	strh	r2, [r3, #6]
   1626e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16276:	891b      	ldrh	r3, [r3, #8]
   16278:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1627c:	b29b      	uxth	r3, r3
   1627e:	80fb      	strh	r3, [r7, #6]
   16280:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16288:	891b      	ldrh	r3, [r3, #8]
   1628a:	b21b      	sxth	r3, r3
   1628c:	4618      	mov	r0, r3
   1628e:	f002 f889 	bl	183a4 <__aeabi_i2f>
   16292:	4604      	mov	r4, r0
   16294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16298:	4618      	mov	r0, r3
   1629a:	f002 f883 	bl	183a4 <__aeabi_i2f>
   1629e:	4603      	mov	r3, r0
   162a0:	4618      	mov	r0, r3
   162a2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162a6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   162aa:	f002 f8cf 	bl	1844c <__aeabi_fmul>
   162ae:	4603      	mov	r3, r0
   162b0:	4620      	mov	r0, r4
   162b2:	4619      	mov	r1, r3
   162b4:	f001 ffc2 	bl	1823c <__addsf3>
   162b8:	4603      	mov	r3, r0
   162ba:	4618      	mov	r0, r3
   162bc:	f002 fa8c 	bl	187d8 <__aeabi_f2iz>
   162c0:	4603      	mov	r3, r0
   162c2:	b29a      	uxth	r2, r3
   162c4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   162c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162cc:	811a      	strh	r2, [r3, #8]
   162ce:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d6:	895b      	ldrh	r3, [r3, #10]
   162d8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162dc:	b29b      	uxth	r3, r3
   162de:	80fb      	strh	r3, [r7, #6]
   162e0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   162e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e8:	895b      	ldrh	r3, [r3, #10]
   162ea:	b21b      	sxth	r3, r3
   162ec:	4618      	mov	r0, r3
   162ee:	f002 f859 	bl	183a4 <__aeabi_i2f>
   162f2:	4604      	mov	r4, r0
   162f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162f8:	4618      	mov	r0, r3
   162fa:	f002 f853 	bl	183a4 <__aeabi_i2f>
   162fe:	4603      	mov	r3, r0
   16300:	4618      	mov	r0, r3
   16302:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16306:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1630a:	f002 f89f 	bl	1844c <__aeabi_fmul>
   1630e:	4603      	mov	r3, r0
   16310:	4620      	mov	r0, r4
   16312:	4619      	mov	r1, r3
   16314:	f001 ff92 	bl	1823c <__addsf3>
   16318:	4603      	mov	r3, r0
   1631a:	4618      	mov	r0, r3
   1631c:	f002 fa5c 	bl	187d8 <__aeabi_f2iz>
   16320:	4603      	mov	r3, r0
   16322:	b29a      	uxth	r2, r3
   16324:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1632c:	815a      	strh	r2, [r3, #10]
   1632e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16336:	899b      	ldrh	r3, [r3, #12]
   16338:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1633c:	b29b      	uxth	r3, r3
   1633e:	80fb      	strh	r3, [r7, #6]
   16340:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16348:	899b      	ldrh	r3, [r3, #12]
   1634a:	b21b      	sxth	r3, r3
   1634c:	4618      	mov	r0, r3
   1634e:	f002 f829 	bl	183a4 <__aeabi_i2f>
   16352:	4604      	mov	r4, r0
   16354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16358:	4618      	mov	r0, r3
   1635a:	f002 f823 	bl	183a4 <__aeabi_i2f>
   1635e:	4603      	mov	r3, r0
   16360:	4618      	mov	r0, r3
   16362:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16366:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1636a:	f002 f86f 	bl	1844c <__aeabi_fmul>
   1636e:	4603      	mov	r3, r0
   16370:	4620      	mov	r0, r4
   16372:	4619      	mov	r1, r3
   16374:	f001 ff62 	bl	1823c <__addsf3>
   16378:	4603      	mov	r3, r0
   1637a:	4618      	mov	r0, r3
   1637c:	f002 fa2c 	bl	187d8 <__aeabi_f2iz>
   16380:	4603      	mov	r3, r0
   16382:	b29a      	uxth	r2, r3
   16384:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638c:	819a      	strh	r2, [r3, #12]
   1638e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16396:	89db      	ldrh	r3, [r3, #14]
   16398:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1639c:	b29b      	uxth	r3, r3
   1639e:	80fb      	strh	r3, [r7, #6]
   163a0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a8:	89db      	ldrh	r3, [r3, #14]
   163aa:	b21b      	sxth	r3, r3
   163ac:	4618      	mov	r0, r3
   163ae:	f001 fff9 	bl	183a4 <__aeabi_i2f>
   163b2:	4604      	mov	r4, r0
   163b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163b8:	4618      	mov	r0, r3
   163ba:	f001 fff3 	bl	183a4 <__aeabi_i2f>
   163be:	4603      	mov	r3, r0
   163c0:	4618      	mov	r0, r3
   163c2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163c6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163ca:	f002 f83f 	bl	1844c <__aeabi_fmul>
   163ce:	4603      	mov	r3, r0
   163d0:	4620      	mov	r0, r4
   163d2:	4619      	mov	r1, r3
   163d4:	f001 ff32 	bl	1823c <__addsf3>
   163d8:	4603      	mov	r3, r0
   163da:	4618      	mov	r0, r3
   163dc:	f002 f9fc 	bl	187d8 <__aeabi_f2iz>
   163e0:	4603      	mov	r3, r0
   163e2:	b29a      	uxth	r2, r3
   163e4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ec:	81da      	strh	r2, [r3, #14]
   163ee:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f6:	8a1b      	ldrh	r3, [r3, #16]
   163f8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163fc:	b29b      	uxth	r3, r3
   163fe:	80fb      	strh	r3, [r7, #6]
   16400:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16408:	8a1b      	ldrh	r3, [r3, #16]
   1640a:	b21b      	sxth	r3, r3
   1640c:	4618      	mov	r0, r3
   1640e:	f001 ffc9 	bl	183a4 <__aeabi_i2f>
   16412:	4604      	mov	r4, r0
   16414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16418:	4618      	mov	r0, r3
   1641a:	f001 ffc3 	bl	183a4 <__aeabi_i2f>
   1641e:	4603      	mov	r3, r0
   16420:	4618      	mov	r0, r3
   16422:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16426:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1642a:	f002 f80f 	bl	1844c <__aeabi_fmul>
   1642e:	4603      	mov	r3, r0
   16430:	4620      	mov	r0, r4
   16432:	4619      	mov	r1, r3
   16434:	f001 ff02 	bl	1823c <__addsf3>
   16438:	4603      	mov	r3, r0
   1643a:	4618      	mov	r0, r3
   1643c:	f002 f9cc 	bl	187d8 <__aeabi_f2iz>
   16440:	4603      	mov	r3, r0
   16442:	b29a      	uxth	r2, r3
   16444:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16448:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1644c:	821a      	strh	r2, [r3, #16]
   1644e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16456:	781b      	ldrb	r3, [r3, #0]
   16458:	3301      	adds	r3, #1
   1645a:	b2da      	uxtb	r2, r3
   1645c:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16464:	701a      	strb	r2, [r3, #0]
   16466:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1646e:	781b      	ldrb	r3, [r3, #0]
   16470:	2b0a      	cmp	r3, #10
   16472:	f040 8101 	bne.w	16678 <last_radio_from_ppm+0x5e8>
   16476:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1647a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1647e:	2200      	movs	r2, #0
   16480:	701a      	strb	r2, [r3, #0]
   16482:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1648a:	891a      	ldrh	r2, [r3, #8]
   1648c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16494:	811a      	strh	r2, [r3, #8]
   16496:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1649e:	2200      	movs	r2, #0
   164a0:	811a      	strh	r2, [r3, #8]
   164a2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164aa:	891b      	ldrh	r3, [r3, #8]
   164ac:	b21b      	sxth	r3, r3
   164ae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   164b2:	dd07      	ble.n	164c4 <last_radio_from_ppm+0x434>
   164b4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   164c0:	811a      	strh	r2, [r3, #8]
   164c2:	e00f      	b.n	164e4 <last_radio_from_ppm+0x454>
   164c4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164cc:	891b      	ldrh	r3, [r3, #8]
   164ce:	b21b      	sxth	r3, r3
   164d0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164d4:	da06      	bge.n	164e4 <last_radio_from_ppm+0x454>
   164d6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164de:	f64d 2280 	movw	r2, #55936	; 0xda80
   164e2:	811a      	strh	r2, [r3, #8]
   164e4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ec:	895a      	ldrh	r2, [r3, #10]
   164ee:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f6:	815a      	strh	r2, [r3, #10]
   164f8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16500:	2200      	movs	r2, #0
   16502:	815a      	strh	r2, [r3, #10]
   16504:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650c:	895b      	ldrh	r3, [r3, #10]
   1650e:	b21b      	sxth	r3, r3
   16510:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16514:	dd07      	ble.n	16526 <last_radio_from_ppm+0x496>
   16516:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16522:	815a      	strh	r2, [r3, #10]
   16524:	e00f      	b.n	16546 <last_radio_from_ppm+0x4b6>
   16526:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652e:	895b      	ldrh	r3, [r3, #10]
   16530:	b21b      	sxth	r3, r3
   16532:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16536:	da06      	bge.n	16546 <last_radio_from_ppm+0x4b6>
   16538:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16540:	f64d 2280 	movw	r2, #55936	; 0xda80
   16544:	815a      	strh	r2, [r3, #10]
   16546:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654e:	899a      	ldrh	r2, [r3, #12]
   16550:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16558:	819a      	strh	r2, [r3, #12]
   1655a:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1655e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16562:	2200      	movs	r2, #0
   16564:	819a      	strh	r2, [r3, #12]
   16566:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	899b      	ldrh	r3, [r3, #12]
   16570:	b21b      	sxth	r3, r3
   16572:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16576:	dd07      	ble.n	16588 <last_radio_from_ppm+0x4f8>
   16578:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1657c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16584:	819a      	strh	r2, [r3, #12]
   16586:	e00f      	b.n	165a8 <last_radio_from_ppm+0x518>
   16588:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1658c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16590:	899b      	ldrh	r3, [r3, #12]
   16592:	b21b      	sxth	r3, r3
   16594:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16598:	da06      	bge.n	165a8 <last_radio_from_ppm+0x518>
   1659a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1659e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a2:	f64d 2280 	movw	r2, #55936	; 0xda80
   165a6:	819a      	strh	r2, [r3, #12]
   165a8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b0:	89da      	ldrh	r2, [r3, #14]
   165b2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ba:	81da      	strh	r2, [r3, #14]
   165bc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c4:	2200      	movs	r2, #0
   165c6:	81da      	strh	r2, [r3, #14]
   165c8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d0:	89db      	ldrh	r3, [r3, #14]
   165d2:	b21b      	sxth	r3, r3
   165d4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165d8:	dd07      	ble.n	165ea <last_radio_from_ppm+0x55a>
   165da:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165e6:	81da      	strh	r2, [r3, #14]
   165e8:	e00f      	b.n	1660a <last_radio_from_ppm+0x57a>
   165ea:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f2:	89db      	ldrh	r3, [r3, #14]
   165f4:	b21b      	sxth	r3, r3
   165f6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165fa:	da06      	bge.n	1660a <last_radio_from_ppm+0x57a>
   165fc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16604:	f64d 2280 	movw	r2, #55936	; 0xda80
   16608:	81da      	strh	r2, [r3, #14]
   1660a:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1660e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16612:	8a1a      	ldrh	r2, [r3, #16]
   16614:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1661c:	821a      	strh	r2, [r3, #16]
   1661e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16626:	2200      	movs	r2, #0
   16628:	821a      	strh	r2, [r3, #16]
   1662a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1662e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16632:	8a1b      	ldrh	r3, [r3, #16]
   16634:	b21b      	sxth	r3, r3
   16636:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1663a:	dd07      	ble.n	1664c <last_radio_from_ppm+0x5bc>
   1663c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16648:	821a      	strh	r2, [r3, #16]
   1664a:	e00f      	b.n	1666c <last_radio_from_ppm+0x5dc>
   1664c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16654:	8a1b      	ldrh	r3, [r3, #16]
   16656:	b21b      	sxth	r3, r3
   16658:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1665c:	da06      	bge.n	1666c <last_radio_from_ppm+0x5dc>
   1665e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16666:	f64d 2280 	movw	r2, #55936	; 0xda80
   1666a:	821a      	strh	r2, [r3, #16]
   1666c:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16674:	2201      	movs	r2, #1
   16676:	701a      	strb	r2, [r3, #0]
}
   16678:	370c      	adds	r7, #12
   1667a:	46bd      	mov	sp, r7
   1667c:	bd90      	pop	{r4, r7, pc}
   1667e:	bf00      	nop

00016680 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16680:	b480      	push	{r7}
   16682:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16684:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1668c:	2200      	movs	r2, #0
   1668e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16690:	f64c 4315 	movw	r3, #52245	; 0xcc15
   16694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16698:	2200      	movs	r2, #0
   1669a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1669c:	f64c 4314 	movw	r3, #52244	; 0xcc14
   166a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	b2db      	uxtb	r3, r3
   166a8:	461a      	mov	r2, r3
   166aa:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   166ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b2:	4413      	add	r3, r2
   166b4:	781a      	ldrb	r2, [r3, #0]
   166b6:	f64c 4316 	movw	r3, #52246	; 0xcc16
   166ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166be:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   166c0:	f242 030f 	movw	r3, #8207	; 0x200f
   166c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166c8:	f64c 4216 	movw	r2, #52246	; 0xcc16
   166cc:	f2c2 0204 	movt	r2, #8196	; 0x2004
   166d0:	7812      	ldrb	r2, [r2, #0]
   166d2:	b2d2      	uxtb	r2, r2
   166d4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   166d6:	f64c 4312 	movw	r3, #52242	; 0xcc12
   166da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166de:	2200      	movs	r2, #0
   166e0:	701a      	strb	r2, [r3, #0]
}
   166e2:	46bd      	mov	sp, r7
   166e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   166e8:	4770      	bx	lr
   166ea:	bf00      	nop

000166ec <fbw_spi_init>:

void fbw_spi_init(void) {
   166ec:	b480      	push	{r7}
   166ee:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   166f0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   166f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f8:	2200      	movs	r2, #0
   166fa:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   166fc:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16704:	2200      	movs	r2, #0
   16706:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16708:	f242 0317 	movw	r3, #8215	; 0x2017
   1670c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16710:	f242 0217 	movw	r2, #8215	; 0x2017
   16714:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16718:	7812      	ldrb	r2, [r2, #0]
   1671a:	b2d2      	uxtb	r2, r2
   1671c:	f042 0210 	orr.w	r2, r2, #16
   16720:	b2d2      	uxtb	r2, r2
   16722:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16724:	f242 030d 	movw	r3, #8205	; 0x200d
   16728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1672c:	2240      	movs	r2, #64	; 0x40
   1672e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16730:	f242 030d 	movw	r3, #8205	; 0x200d
   16734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16738:	f242 020d 	movw	r2, #8205	; 0x200d
   1673c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16740:	7812      	ldrb	r2, [r2, #0]
   16742:	b2d2      	uxtb	r2, r2
   16744:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16748:	b2d2      	uxtb	r2, r2
   1674a:	701a      	strb	r2, [r3, #0]
}
   1674c:	46bd      	mov	sp, r7
   1674e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16752:	4770      	bx	lr
   16754:	0000      	movs	r0, r0
	...

00016758 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16758:	b480      	push	{r7}
   1675a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1675c:	f242 032f 	movw	r3, #8239	; 0x202f
   16760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16764:	2200      	movs	r2, #0
   16766:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16768:	f242 032e 	movw	r3, #8238	; 0x202e
   1676c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16770:	2201      	movs	r2, #1
   16772:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16774:	f242 0325 	movw	r3, #8229	; 0x2025
   16778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1677c:	2207      	movs	r2, #7
   1677e:	701a      	strb	r2, [r3, #0]
}
   16780:	46bd      	mov	sp, r7
   16782:	f85d 7b04 	ldr.w	r7, [sp], #4
   16786:	4770      	bx	lr

00016788 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16788:	b480      	push	{r7}
   1678a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1678c:	f242 032e 	movw	r3, #8238	; 0x202e
   16790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16794:	f242 022e 	movw	r2, #8238	; 0x202e
   16798:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1679c:	7812      	ldrb	r2, [r2, #0]
   1679e:	b2d2      	uxtb	r2, r2
   167a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   167a4:	b2d2      	uxtb	r2, r2
   167a6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   167a8:	f242 032e 	movw	r3, #8238	; 0x202e
   167ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b0:	f242 022e 	movw	r2, #8238	; 0x202e
   167b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167b8:	7812      	ldrb	r2, [r2, #0]
   167ba:	b2d2      	uxtb	r2, r2
   167bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167c0:	b2d2      	uxtb	r2, r2
   167c2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   167c4:	f242 0317 	movw	r3, #8215	; 0x2017
   167c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167cc:	f242 0217 	movw	r2, #8215	; 0x2017
   167d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167d4:	7812      	ldrb	r2, [r2, #0]
   167d6:	b2d2      	uxtb	r2, r2
   167d8:	f022 0201 	bic.w	r2, r2, #1
   167dc:	b2d2      	uxtb	r2, r2
   167de:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   167e0:	f242 0337 	movw	r3, #8247	; 0x2037
   167e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e8:	f242 0237 	movw	r2, #8247	; 0x2037
   167ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167f0:	7812      	ldrb	r2, [r2, #0]
   167f2:	b2d2      	uxtb	r2, r2
   167f4:	f042 0220 	orr.w	r2, r2, #32
   167f8:	b2d2      	uxtb	r2, r2
   167fa:	701a      	strb	r2, [r3, #0]
}
   167fc:	46bd      	mov	sp, r7
   167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   16802:	4770      	bx	lr

00016804 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16804:	b580      	push	{r7, lr}
   16806:	b082      	sub	sp, #8
   16808:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1680a:	2300      	movs	r3, #0
   1680c:	71fb      	strb	r3, [r7, #7]
   1680e:	e010      	b.n	16832 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16810:	79fa      	ldrb	r2, [r7, #7]
   16812:	79f9      	ldrb	r1, [r7, #7]
   16814:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1681c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16820:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1682c:	79fb      	ldrb	r3, [r7, #7]
   1682e:	3301      	adds	r3, #1
   16830:	71fb      	strb	r3, [r7, #7]
   16832:	79fb      	ldrb	r3, [r7, #7]
   16834:	2b08      	cmp	r3, #8
   16836:	d9eb      	bls.n	16810 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16838:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   1683c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16840:	781b      	ldrb	r3, [r3, #0]
   16842:	2b00      	cmp	r3, #0
   16844:	bf0c      	ite	eq
   16846:	2300      	moveq	r3, #0
   16848:	2301      	movne	r3, #1
   1684a:	b2db      	uxtb	r3, r3
   1684c:	461a      	mov	r2, r3
   1684e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16856:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16858:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1685c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16860:	7cdb      	ldrb	r3, [r3, #19]
   16862:	b2da      	uxtb	r2, r3
   16864:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1686c:	781b      	ldrb	r3, [r3, #0]
   1686e:	2b00      	cmp	r3, #0
   16870:	d001      	beq.n	16876 <to_autopilot_from_last_radio+0x72>
   16872:	2302      	movs	r3, #2
   16874:	e000      	b.n	16878 <to_autopilot_from_last_radio+0x74>
   16876:	2300      	movs	r3, #0
   16878:	4313      	orrs	r3, r2
   1687a:	b2db      	uxtb	r3, r3
   1687c:	b2da      	uxtb	r2, r3
   1687e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16886:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16888:	f64c 33da 	movw	r3, #52186	; 0xcbda
   1688c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16890:	781b      	ldrb	r3, [r3, #0]
   16892:	2b00      	cmp	r3, #0
   16894:	d012      	beq.n	168bc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16896:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1689a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1689e:	7cdb      	ldrb	r3, [r3, #19]
   168a0:	f043 0304 	orr.w	r3, r3, #4
   168a4:	b2da      	uxtb	r2, r3
   168a6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ae:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   168b0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   168b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168b8:	2200      	movs	r2, #0
   168ba:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   168bc:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   168c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c4:	781a      	ldrb	r2, [r3, #0]
   168c6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ce:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   168d0:	f64c 4318 	movw	r3, #52248	; 0xcc18
   168d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168d8:	881b      	ldrh	r3, [r3, #0]
   168da:	4618      	mov	r0, r3
   168dc:	f001 f910 	bl	17b00 <__aeabi_i2d>
   168e0:	4602      	mov	r2, r0
   168e2:	460b      	mov	r3, r1
   168e4:	4610      	mov	r0, r2
   168e6:	4619      	mov	r1, r3
   168e8:	a31b      	add	r3, pc, #108	; (adr r3, 16958 <to_autopilot_from_last_radio+0x154>)
   168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   168ee:	f001 f96d 	bl	17bcc <__aeabi_dmul>
   168f2:	4602      	mov	r2, r0
   168f4:	460b      	mov	r3, r1
   168f6:	4610      	mov	r0, r2
   168f8:	4619      	mov	r1, r3
   168fa:	f04f 0200 	mov.w	r2, #0
   168fe:	f04f 0300 	mov.w	r3, #0
   16902:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16906:	f001 fa8b 	bl	17e20 <__aeabi_ddiv>
   1690a:	4602      	mov	r2, r0
   1690c:	460b      	mov	r3, r1
   1690e:	4610      	mov	r0, r2
   16910:	4619      	mov	r1, r3
   16912:	a313      	add	r3, pc, #76	; (adr r3, 16960 <to_autopilot_from_last_radio+0x15c>)
   16914:	e9d3 2300 	ldrd	r2, r3, [r3]
   16918:	f000 ffa6 	bl	17868 <__adddf3>
   1691c:	4602      	mov	r2, r0
   1691e:	460b      	mov	r3, r1
   16920:	4610      	mov	r0, r2
   16922:	4619      	mov	r1, r3
   16924:	f04f 0200 	mov.w	r2, #0
   16928:	f04f 0300 	mov.w	r3, #0
   1692c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16930:	f001 f94c 	bl	17bcc <__aeabi_dmul>
   16934:	4602      	mov	r2, r0
   16936:	460b      	mov	r3, r1
   16938:	4610      	mov	r0, r2
   1693a:	4619      	mov	r1, r3
   1693c:	f001 fc08 	bl	18150 <__aeabi_d2uiz>
   16940:	4603      	mov	r3, r0
   16942:	b2da      	uxtb	r2, r3
   16944:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1694c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1694e:	3708      	adds	r7, #8
   16950:	46bd      	mov	sp, r7
   16952:	bd80      	pop	{r7, pc}
   16954:	f3af 8000 	nop.w
   16958:	1eb851ec 	.word	0x1eb851ec
   1695c:	3f91eb85 	.word	0x3f91eb85
   16960:	020c49ba 	.word	0x020c49ba
   16964:	3fb6872b 	.word	0x3fb6872b

00016968 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16968:	b580      	push	{r7, lr}
   1696a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   1696c:	f242 0316 	movw	r3, #8214	; 0x2016
   16970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16974:	781b      	ldrb	r3, [r3, #0]
   16976:	b2db      	uxtb	r3, r3
   16978:	f003 0304 	and.w	r3, r3, #4
   1697c:	2b00      	cmp	r3, #0
   1697e:	d011      	beq.n	169a4 <send_data_to_autopilot_task+0x3c>
   16980:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16988:	781b      	ldrb	r3, [r3, #0]
   1698a:	b2db      	uxtb	r3, r3
   1698c:	2b00      	cmp	r3, #0
   1698e:	d009      	beq.n	169a4 <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16990:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16998:	2200      	movs	r2, #0
   1699a:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   1699c:	f7ff ff32 	bl	16804 <to_autopilot_from_last_radio>
      spi_reset();
   169a0:	f7ff fe6e 	bl	16680 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   169a4:	bd80      	pop	{r7, pc}
   169a6:	bf00      	nop

000169a8 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   169a8:	b580      	push	{r7, lr}
   169aa:	af00      	add	r7, sp, #0
  uart_init_tx();
   169ac:	f000 fb68 	bl	17080 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   169b0:	f648 207c 	movw	r0, #35452	; 0x8a7c
   169b4:	f2c0 0001 	movt	r0, #1
   169b8:	f000 fc40 	bl	1723c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   169bc:	f7ff faa0 	bl	15f00 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   169c0:	2003      	movs	r0, #3
   169c2:	f64c 4118 	movw	r1, #52248	; 0xcc18
   169c6:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169ca:	f7ff fa85 	bl	15ed8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   169ce:	2006      	movs	r0, #6
   169d0:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   169d4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169d8:	f7ff fa7e 	bl	15ed8 <fbw_adc_buf_channel>
#endif
  timer_init();
   169dc:	f7ff febc 	bl	16758 <timer_init>
  servo_init();
   169e0:	f000 f8fa 	bl	16bd8 <servo_init>
  ppm_init();
   169e4:	f7ff fed0 	bl	16788 <ppm_init>
  fbw_spi_init();
   169e8:	f7ff fe80 	bl	166ec <fbw_spi_init>
  //sei(); //FN
}
   169ec:	bd80      	pop	{r7, pc}
   169ee:	bf00      	nop

000169f0 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   169f0:	b580      	push	{r7, lr}
   169f2:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   169f4:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   169f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169fc:	781b      	ldrb	r3, [r3, #0]
   169fe:	b2db      	uxtb	r3, r3
   16a00:	2b00      	cmp	r3, #0
   16a02:	d04c      	beq.n	16a9e <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16a04:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a0c:	2200      	movs	r2, #0
   16a0e:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16a10:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a18:	781b      	ldrb	r3, [r3, #0]
   16a1a:	3301      	adds	r3, #1
   16a1c:	b2da      	uxtb	r2, r3
   16a1e:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a26:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16a28:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a30:	2201      	movs	r2, #1
   16a32:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16a34:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a3c:	2200      	movs	r2, #0
   16a3e:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16a40:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a48:	2200      	movs	r2, #0
   16a4a:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16a4c:	f7ff fb20 	bl	16090 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16a50:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a58:	781b      	ldrb	r3, [r3, #0]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d011      	beq.n	16a82 <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16a5e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a66:	891b      	ldrh	r3, [r3, #8]
   16a68:	b21b      	sxth	r3, r3
   16a6a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16a6e:	bfb4      	ite	lt
   16a70:	2300      	movlt	r3, #0
   16a72:	2301      	movge	r3, #1
   16a74:	b2db      	uxtb	r3, r3
   16a76:	461a      	mov	r2, r3
   16a78:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a80:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16a82:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8a:	781b      	ldrb	r3, [r3, #0]
   16a8c:	2b00      	cmp	r3, #0
   16a8e:	d11a      	bne.n	16ac6 <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16a90:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16a94:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16a98:	f000 f97c 	bl	16d94 <servo_set>
   16a9c:	e013      	b.n	16ac6 <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16a9e:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa6:	781b      	ldrb	r3, [r3, #0]
   16aa8:	2b00      	cmp	r3, #0
   16aaa:	d10c      	bne.n	16ac6 <test_ppm_task+0xd6>
   16aac:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab4:	781b      	ldrb	r3, [r3, #0]
   16ab6:	2b00      	cmp	r3, #0
   16ab8:	d005      	beq.n	16ac6 <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16aba:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ac2:	2201      	movs	r2, #1
   16ac4:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16ac6:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ace:	881b      	ldrh	r3, [r3, #0]
   16ad0:	2b1d      	cmp	r3, #29
   16ad2:	d905      	bls.n	16ae0 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16ad4:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16adc:	2200      	movs	r2, #0
   16ade:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16ae0:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae8:	881b      	ldrh	r3, [r3, #0]
   16aea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16aee:	d305      	bcc.n	16afc <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16af0:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af8:	2201      	movs	r2, #1
   16afa:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16afc:	bd80      	pop	{r7, pc}
   16afe:	bf00      	nop

00016b00 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16b00:	b580      	push	{r7, lr}
   16b02:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16b04:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b0c:	781b      	ldrb	r3, [r3, #0]
   16b0e:	2b00      	cmp	r3, #0
   16b10:	d106      	bne.n	16b20 <check_failsafe_task+0x20>
   16b12:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	2b00      	cmp	r3, #0
   16b1e:	d00d      	beq.n	16b3c <check_failsafe_task+0x3c>
   16b20:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b28:	781b      	ldrb	r3, [r3, #0]
   16b2a:	2b01      	cmp	r3, #1
   16b2c:	d10c      	bne.n	16b48 <check_failsafe_task+0x48>
   16b2e:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b36:	781b      	ldrb	r3, [r3, #0]
   16b38:	2b00      	cmp	r3, #0
   16b3a:	d105      	bne.n	16b48 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16b3c:	f648 2068 	movw	r0, #35432	; 0x8a68
   16b40:	f2c0 0001 	movt	r0, #1
   16b44:	f000 f926 	bl	16d94 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16b48:	bd80      	pop	{r7, pc}
   16b4a:	bf00      	nop

00016b4c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16b4c:	b580      	push	{r7, lr}
   16b4e:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16b50:	f242 0316 	movw	r3, #8214	; 0x2016
   16b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b58:	781b      	ldrb	r3, [r3, #0]
   16b5a:	b2db      	uxtb	r3, r3
   16b5c:	f003 0304 	and.w	r3, r3, #4
   16b60:	2b00      	cmp	r3, #0
   16b62:	d028      	beq.n	16bb6 <check_mega128_values_task+0x6a>
   16b64:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b6c:	781b      	ldrb	r3, [r3, #0]
   16b6e:	b2db      	uxtb	r3, r3
   16b70:	2b00      	cmp	r3, #0
   16b72:	d020      	beq.n	16bb6 <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16b74:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7c:	781b      	ldrb	r3, [r3, #0]
   16b7e:	b2db      	uxtb	r3, r3
   16b80:	2b00      	cmp	r3, #0
   16b82:	d018      	beq.n	16bb6 <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16b84:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b8c:	2200      	movs	r2, #0
   16b8e:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16b90:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b98:	2201      	movs	r2, #1
   16b9a:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16b9c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba4:	781b      	ldrb	r3, [r3, #0]
   16ba6:	2b01      	cmp	r3, #1
   16ba8:	d105      	bne.n	16bb6 <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16baa:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16bae:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16bb2:	f000 f8ef 	bl	16d94 <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16bb6:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bbe:	781b      	ldrb	r3, [r3, #0]
   16bc0:	2b1e      	cmp	r3, #30
   16bc2:	d105      	bne.n	16bd0 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16bc4:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bcc:	2200      	movs	r2, #0
   16bce:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16bd0:	bd80      	pop	{r7, pc}
   16bd2:	bf00      	nop
   16bd4:	f3af 8000 	nop.w

00016bd8 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16bd8:	b480      	push	{r7}
   16bda:	b083      	sub	sp, #12
   16bdc:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16bde:	f242 0311 	movw	r3, #8209	; 0x2011
   16be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16be6:	f242 0211 	movw	r2, #8209	; 0x2011
   16bea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16bee:	7812      	ldrb	r2, [r2, #0]
   16bf0:	b2d2      	uxtb	r2, r2
   16bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16bf6:	b2d2      	uxtb	r2, r2
   16bf8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16bfa:	f242 0317 	movw	r3, #8215	; 0x2017
   16bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c02:	f242 0217 	movw	r2, #8215	; 0x2017
   16c06:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c0a:	7812      	ldrb	r2, [r2, #0]
   16c0c:	b2d2      	uxtb	r2, r2
   16c0e:	f042 0202 	orr.w	r2, r2, #2
   16c12:	b2d2      	uxtb	r2, r2
   16c14:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16c16:	f242 0312 	movw	r3, #8210	; 0x2012
   16c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c1e:	f242 0212 	movw	r2, #8210	; 0x2012
   16c22:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c26:	7812      	ldrb	r2, [r2, #0]
   16c28:	b2d2      	uxtb	r2, r2
   16c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c2e:	b2d2      	uxtb	r2, r2
   16c30:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16c32:	f242 0318 	movw	r3, #8216	; 0x2018
   16c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c3a:	f242 0218 	movw	r2, #8216	; 0x2018
   16c3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c42:	7812      	ldrb	r2, [r2, #0]
   16c44:	b2d2      	uxtb	r2, r2
   16c46:	f022 0202 	bic.w	r2, r2, #2
   16c4a:	b2d2      	uxtb	r2, r2
   16c4c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c4e:	2300      	movs	r3, #0
   16c50:	71fb      	strb	r3, [r7, #7]
   16c52:	e00b      	b.n	16c6c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16c54:	79fa      	ldrb	r2, [r7, #7]
   16c56:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c5e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16c62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c66:	79fb      	ldrb	r3, [r7, #7]
   16c68:	3301      	adds	r3, #1
   16c6a:	71fb      	strb	r3, [r7, #7]
   16c6c:	79fb      	ldrb	r3, [r7, #7]
   16c6e:	2b09      	cmp	r3, #9
   16c70:	d9f0      	bls.n	16c54 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16c72:	f242 032a 	movw	r3, #8234	; 0x202a
   16c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16c7e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16c80:	f242 032f 	movw	r3, #8239	; 0x202f
   16c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c88:	f242 022f 	movw	r2, #8239	; 0x202f
   16c8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c90:	7812      	ldrb	r2, [r2, #0]
   16c92:	b2d2      	uxtb	r2, r2
   16c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16c98:	b2d2      	uxtb	r2, r2
   16c9a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16c9c:	f242 0336 	movw	r3, #8246	; 0x2036
   16ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca4:	2210      	movs	r2, #16
   16ca6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16ca8:	f242 0312 	movw	r3, #8210	; 0x2012
   16cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb0:	f242 0212 	movw	r2, #8210	; 0x2012
   16cb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cb8:	7812      	ldrb	r2, [r2, #0]
   16cba:	b2d2      	uxtb	r2, r2
   16cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16cc0:	b2d2      	uxtb	r2, r2
   16cc2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16cc4:	f242 0337 	movw	r3, #8247	; 0x2037
   16cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ccc:	f242 0237 	movw	r2, #8247	; 0x2037
   16cd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cd4:	7812      	ldrb	r2, [r2, #0]
   16cd6:	b2d2      	uxtb	r2, r2
   16cd8:	f042 0210 	orr.w	r2, r2, #16
   16cdc:	b2d2      	uxtb	r2, r2
   16cde:	701a      	strb	r2, [r3, #0]
}
   16ce0:	370c      	adds	r7, #12
   16ce2:	46bd      	mov	sp, r7
   16ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ce8:	4770      	bx	lr
   16cea:	bf00      	nop

00016cec <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16cec:	b480      	push	{r7}
   16cee:	b083      	sub	sp, #12
   16cf0:	af00      	add	r7, sp, #0
   16cf2:	4602      	mov	r2, r0
   16cf4:	460b      	mov	r3, r1
   16cf6:	71fa      	strb	r2, [r7, #7]
   16cf8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16cfa:	79f9      	ldrb	r1, [r7, #7]
   16cfc:	88bb      	ldrh	r3, [r7, #4]
   16cfe:	011b      	lsls	r3, r3, #4
   16d00:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d04:	d308      	bcc.n	16d18 <servo_set_one+0x2c>
   16d06:	88bb      	ldrh	r3, [r7, #4]
   16d08:	011b      	lsls	r3, r3, #4
   16d0a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d0e:	bf28      	it	cs
   16d10:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d14:	b29a      	uxth	r2, r3
   16d16:	e001      	b.n	16d1c <servo_set_one+0x30>
   16d18:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d1c:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16d28:	370c      	adds	r7, #12
   16d2a:	46bd      	mov	sp, r7
   16d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d30:	4770      	bx	lr
   16d32:	bf00      	nop

00016d34 <servo_transmit>:

void 
servo_transmit(void) {
   16d34:	b580      	push	{r7, lr}
   16d36:	b082      	sub	sp, #8
   16d38:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16d3a:	2000      	movs	r0, #0
   16d3c:	f000 f9e6 	bl	1710c <uart_transmit>
   16d40:	2000      	movs	r0, #0
   16d42:	f000 f9e3 	bl	1710c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d46:	2300      	movs	r3, #0
   16d48:	71fb      	strb	r3, [r7, #7]
   16d4a:	e01a      	b.n	16d82 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16d4c:	79fa      	ldrb	r2, [r7, #7]
   16d4e:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d5a:	0a1b      	lsrs	r3, r3, #8
   16d5c:	b29b      	uxth	r3, r3
   16d5e:	b2db      	uxtb	r3, r3
   16d60:	4618      	mov	r0, r3
   16d62:	f000 f9d3 	bl	1710c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16d66:	79fa      	ldrb	r2, [r7, #7]
   16d68:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d74:	b2db      	uxtb	r3, r3
   16d76:	4618      	mov	r0, r3
   16d78:	f000 f9c8 	bl	1710c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d7c:	79fb      	ldrb	r3, [r7, #7]
   16d7e:	3301      	adds	r3, #1
   16d80:	71fb      	strb	r3, [r7, #7]
   16d82:	79fb      	ldrb	r3, [r7, #7]
   16d84:	2b09      	cmp	r3, #9
   16d86:	d9e1      	bls.n	16d4c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16d88:	200a      	movs	r0, #10
   16d8a:	f000 f9bf 	bl	1710c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16d8e:	3708      	adds	r7, #8
   16d90:	46bd      	mov	sp, r7
   16d92:	bd80      	pop	{r7, pc}

00016d94 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16d94:	b5b0      	push	{r4, r5, r7, lr}
   16d96:	b084      	sub	sp, #16
   16d98:	af00      	add	r7, sp, #0
   16d9a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16d9c:	687b      	ldr	r3, [r7, #4]
   16d9e:	330a      	adds	r3, #10
   16da0:	881b      	ldrh	r3, [r3, #0]
   16da2:	b21b      	sxth	r3, r3
   16da4:	005b      	lsls	r3, r3, #1
   16da6:	4618      	mov	r0, r3
   16da8:	f000 feaa 	bl	17b00 <__aeabi_i2d>
   16dac:	4602      	mov	r2, r0
   16dae:	460b      	mov	r3, r1
   16db0:	4610      	mov	r0, r2
   16db2:	4619      	mov	r1, r3
   16db4:	a3a6      	add	r3, pc, #664	; (adr r3, 17050 <servo_set+0x2bc>)
   16db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16dba:	f000 ff07 	bl	17bcc <__aeabi_dmul>
   16dbe:	4602      	mov	r2, r0
   16dc0:	460b      	mov	r3, r1
   16dc2:	4610      	mov	r0, r2
   16dc4:	4619      	mov	r1, r3
   16dc6:	f001 f99b 	bl	18100 <__aeabi_d2iz>
   16dca:	4603      	mov	r3, r0
   16dcc:	b29b      	uxth	r3, r3
   16dce:	b29b      	uxth	r3, r3
   16dd0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16dd4:	81fb      	strh	r3, [r7, #14]
   16dd6:	89fb      	ldrh	r3, [r7, #14]
   16dd8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ddc:	d307      	bcc.n	16dee <servo_set+0x5a>
   16dde:	89fb      	ldrh	r3, [r7, #14]
   16de0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16de4:	bf28      	it	cs
   16de6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16dea:	b29a      	uxth	r2, r3
   16dec:	e001      	b.n	16df2 <servo_set+0x5e>
   16dee:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16df2:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dfa:	80da      	strh	r2, [r3, #6]
   16dfc:	687b      	ldr	r3, [r7, #4]
   16dfe:	881b      	ldrh	r3, [r3, #0]
   16e00:	b21b      	sxth	r3, r3
   16e02:	005b      	lsls	r3, r3, #1
   16e04:	4618      	mov	r0, r3
   16e06:	f000 fe7b 	bl	17b00 <__aeabi_i2d>
   16e0a:	4602      	mov	r2, r0
   16e0c:	460b      	mov	r3, r1
   16e0e:	4610      	mov	r0, r2
   16e10:	4619      	mov	r1, r3
   16e12:	a38f      	add	r3, pc, #572	; (adr r3, 17050 <servo_set+0x2bc>)
   16e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e18:	f000 fed8 	bl	17bcc <__aeabi_dmul>
   16e1c:	4602      	mov	r2, r0
   16e1e:	460b      	mov	r3, r1
   16e20:	4610      	mov	r0, r2
   16e22:	4619      	mov	r1, r3
   16e24:	f001 f96c 	bl	18100 <__aeabi_d2iz>
   16e28:	4603      	mov	r3, r0
   16e2a:	b29b      	uxth	r3, r3
   16e2c:	b29b      	uxth	r3, r3
   16e2e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e32:	81fb      	strh	r3, [r7, #14]
   16e34:	89fb      	ldrh	r3, [r7, #14]
   16e36:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e3a:	d307      	bcc.n	16e4c <servo_set+0xb8>
   16e3c:	89fb      	ldrh	r3, [r7, #14]
   16e3e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e42:	bf28      	it	cs
   16e44:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e48:	b29a      	uxth	r2, r3
   16e4a:	e001      	b.n	16e50 <servo_set+0xbc>
   16e4c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e50:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e58:	825a      	strh	r2, [r3, #18]
   16e5a:	687b      	ldr	r3, [r7, #4]
   16e5c:	3304      	adds	r3, #4
   16e5e:	881b      	ldrh	r3, [r3, #0]
   16e60:	b21b      	sxth	r3, r3
   16e62:	4618      	mov	r0, r3
   16e64:	f000 fe4c 	bl	17b00 <__aeabi_i2d>
   16e68:	4602      	mov	r2, r0
   16e6a:	460b      	mov	r3, r1
   16e6c:	4610      	mov	r0, r2
   16e6e:	4619      	mov	r1, r3
   16e70:	a379      	add	r3, pc, #484	; (adr r3, 17058 <servo_set+0x2c4>)
   16e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e76:	f000 fea9 	bl	17bcc <__aeabi_dmul>
   16e7a:	4602      	mov	r2, r0
   16e7c:	460b      	mov	r3, r1
   16e7e:	4610      	mov	r0, r2
   16e80:	4619      	mov	r1, r3
   16e82:	f001 f93d 	bl	18100 <__aeabi_d2iz>
   16e86:	4603      	mov	r3, r0
   16e88:	b29b      	uxth	r3, r3
   16e8a:	b29b      	uxth	r3, r3
   16e8c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16e90:	3320      	adds	r3, #32
   16e92:	81fb      	strh	r3, [r7, #14]
   16e94:	89fb      	ldrh	r3, [r7, #14]
   16e96:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e9a:	d307      	bcc.n	16eac <servo_set+0x118>
   16e9c:	89fb      	ldrh	r3, [r7, #14]
   16e9e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ea2:	bf28      	it	cs
   16ea4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ea8:	b29a      	uxth	r2, r3
   16eaa:	e001      	b.n	16eb0 <servo_set+0x11c>
   16eac:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16eb0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eb8:	819a      	strh	r2, [r3, #12]
   16eba:	687b      	ldr	r3, [r7, #4]
   16ebc:	885b      	ldrh	r3, [r3, #2]
   16ebe:	81bb      	strh	r3, [r7, #12]
   16ec0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ec4:	2b00      	cmp	r3, #0
   16ec6:	dd06      	ble.n	16ed6 <servo_set+0x142>
   16ec8:	f04f 0400 	mov.w	r4, #0
   16ecc:	f04f 0500 	mov.w	r5, #0
   16ed0:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16ed4:	e002      	b.n	16edc <servo_set+0x148>
   16ed6:	a562      	add	r5, pc, #392	; (adr r5, 17060 <servo_set+0x2cc>)
   16ed8:	e9d5 4500 	ldrd	r4, r5, [r5]
   16edc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ee0:	4618      	mov	r0, r3
   16ee2:	f000 fe0d 	bl	17b00 <__aeabi_i2d>
   16ee6:	4602      	mov	r2, r0
   16ee8:	460b      	mov	r3, r1
   16eea:	4620      	mov	r0, r4
   16eec:	4629      	mov	r1, r5
   16eee:	f000 fe6d 	bl	17bcc <__aeabi_dmul>
   16ef2:	4602      	mov	r2, r0
   16ef4:	460b      	mov	r3, r1
   16ef6:	4610      	mov	r0, r2
   16ef8:	4619      	mov	r1, r3
   16efa:	a35b      	add	r3, pc, #364	; (adr r3, 17068 <servo_set+0x2d4>)
   16efc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f00:	f000 fe64 	bl	17bcc <__aeabi_dmul>
   16f04:	4602      	mov	r2, r0
   16f06:	460b      	mov	r3, r1
   16f08:	4610      	mov	r0, r2
   16f0a:	4619      	mov	r1, r3
   16f0c:	f001 f8f8 	bl	18100 <__aeabi_d2iz>
   16f10:	4603      	mov	r3, r0
   16f12:	b29b      	uxth	r3, r3
   16f14:	b29b      	uxth	r3, r3
   16f16:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16f1a:	81fb      	strh	r3, [r7, #14]
   16f1c:	89fb      	ldrh	r3, [r7, #14]
   16f1e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f22:	d307      	bcc.n	16f34 <servo_set+0x1a0>
   16f24:	89fb      	ldrh	r3, [r7, #14]
   16f26:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f2a:	bf28      	it	cs
   16f2c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f30:	b29a      	uxth	r2, r3
   16f32:	e001      	b.n	16f38 <servo_set+0x1a4>
   16f34:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f38:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f40:	801a      	strh	r2, [r3, #0]
   16f42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f46:	2b00      	cmp	r3, #0
   16f48:	dd03      	ble.n	16f52 <servo_set+0x1be>
   16f4a:	a545      	add	r5, pc, #276	; (adr r5, 17060 <servo_set+0x2cc>)
   16f4c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f50:	e005      	b.n	16f5e <servo_set+0x1ca>
   16f52:	f04f 0400 	mov.w	r4, #0
   16f56:	f04f 0500 	mov.w	r5, #0
   16f5a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f62:	4618      	mov	r0, r3
   16f64:	f000 fdcc 	bl	17b00 <__aeabi_i2d>
   16f68:	4602      	mov	r2, r0
   16f6a:	460b      	mov	r3, r1
   16f6c:	4620      	mov	r0, r4
   16f6e:	4629      	mov	r1, r5
   16f70:	f000 fe2c 	bl	17bcc <__aeabi_dmul>
   16f74:	4602      	mov	r2, r0
   16f76:	460b      	mov	r3, r1
   16f78:	4610      	mov	r0, r2
   16f7a:	4619      	mov	r1, r3
   16f7c:	a33c      	add	r3, pc, #240	; (adr r3, 17070 <servo_set+0x2dc>)
   16f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f82:	f000 fe23 	bl	17bcc <__aeabi_dmul>
   16f86:	4602      	mov	r2, r0
   16f88:	460b      	mov	r3, r1
   16f8a:	4610      	mov	r0, r2
   16f8c:	4619      	mov	r1, r3
   16f8e:	f001 f8b7 	bl	18100 <__aeabi_d2iz>
   16f92:	4603      	mov	r3, r0
   16f94:	b29b      	uxth	r3, r3
   16f96:	b29b      	uxth	r3, r3
   16f98:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16f9c:	3320      	adds	r3, #32
   16f9e:	81fb      	strh	r3, [r7, #14]
   16fa0:	89fb      	ldrh	r3, [r7, #14]
   16fa2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fa6:	d307      	bcc.n	16fb8 <servo_set+0x224>
   16fa8:	89fb      	ldrh	r3, [r7, #14]
   16faa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fae:	bf28      	it	cs
   16fb0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fb4:	b29a      	uxth	r2, r3
   16fb6:	e001      	b.n	16fbc <servo_set+0x228>
   16fb8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fbc:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fc4:	809a      	strh	r2, [r3, #4]
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	3306      	adds	r3, #6
   16fca:	881b      	ldrh	r3, [r3, #0]
   16fcc:	b21b      	sxth	r3, r3
   16fce:	4618      	mov	r0, r3
   16fd0:	f000 fd96 	bl	17b00 <__aeabi_i2d>
   16fd4:	4604      	mov	r4, r0
   16fd6:	460d      	mov	r5, r1
   16fd8:	687b      	ldr	r3, [r7, #4]
   16fda:	3302      	adds	r3, #2
   16fdc:	881b      	ldrh	r3, [r3, #0]
   16fde:	b21b      	sxth	r3, r3
   16fe0:	4618      	mov	r0, r3
   16fe2:	f000 fd8d 	bl	17b00 <__aeabi_i2d>
   16fe6:	4602      	mov	r2, r0
   16fe8:	460b      	mov	r3, r1
   16fea:	4620      	mov	r0, r4
   16fec:	4629      	mov	r1, r5
   16fee:	f000 fc3b 	bl	17868 <__adddf3>
   16ff2:	4602      	mov	r2, r0
   16ff4:	460b      	mov	r3, r1
   16ff6:	4610      	mov	r0, r2
   16ff8:	4619      	mov	r1, r3
   16ffa:	a31f      	add	r3, pc, #124	; (adr r3, 17078 <servo_set+0x2e4>)
   16ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   17000:	f000 fde4 	bl	17bcc <__aeabi_dmul>
   17004:	4602      	mov	r2, r0
   17006:	460b      	mov	r3, r1
   17008:	4610      	mov	r0, r2
   1700a:	4619      	mov	r1, r3
   1700c:	f001 f878 	bl	18100 <__aeabi_d2iz>
   17010:	4603      	mov	r3, r0
   17012:	b29b      	uxth	r3, r3
   17014:	b29b      	uxth	r3, r3
   17016:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   1701a:	3320      	adds	r3, #32
   1701c:	81fb      	strh	r3, [r7, #14]
   1701e:	89fb      	ldrh	r3, [r7, #14]
   17020:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17024:	d307      	bcc.n	17036 <servo_set+0x2a2>
   17026:	89fb      	ldrh	r3, [r7, #14]
   17028:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1702c:	bf28      	it	cs
   1702e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17032:	b29a      	uxth	r2, r3
   17034:	e001      	b.n	1703a <servo_set+0x2a6>
   17036:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1703a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   1703e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17042:	81da      	strh	r2, [r3, #14]
}
   17044:	3710      	adds	r7, #16
   17046:	46bd      	mov	sp, r7
   17048:	bdb0      	pop	{r4, r5, r7, pc}
   1704a:	bf00      	nop
   1704c:	f3af 8000 	nop.w
   17050:	aaaa9ef0 	.word	0xaaaa9ef0
   17054:	3feaaaaa 	.word	0x3feaaaaa
   17058:	fc96473e 	.word	0xfc96473e
   1705c:	3fdfc962 	.word	0x3fdfc962
   17060:	51eb851f 	.word	0x51eb851f
   17064:	3fe51eb8 	.word	0x3fe51eb8
   17068:	9999999a 	.word	0x9999999a
   1706c:	bfe19999 	.word	0xbfe19999
   17070:	aaaa9ef0 	.word	0xaaaa9ef0
   17074:	bfe0aaaa 	.word	0xbfe0aaaa
   17078:	eeeed77a 	.word	0xeeeed77a
   1707c:	bfdeeeee 	.word	0xbfdeeeee

00017080 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17080:	b480      	push	{r7}
   17082:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   17084:	f242 0320 	movw	r3, #8224	; 0x2020
   17088:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1708c:	2200      	movs	r2, #0
   1708e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17090:	f242 0309 	movw	r3, #8201	; 0x2009
   17094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17098:	2219      	movs	r2, #25
   1709a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1709c:	f242 030b 	movw	r3, #8203	; 0x200b
   170a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170a4:	2200      	movs	r2, #0
   170a6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   170a8:	f242 030a 	movw	r3, #8202	; 0x200a
   170ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170b0:	2208      	movs	r2, #8
   170b2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   170b4:	f242 0320 	movw	r3, #8224	; 0x2020
   170b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170bc:	2286      	movs	r2, #134	; 0x86
   170be:	701a      	strb	r2, [r3, #0]
}
   170c0:	46bd      	mov	sp, r7
   170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   170c6:	4770      	bx	lr

000170c8 <uart_init_rx>:

void uart_init_rx() {
   170c8:	b480      	push	{r7}
   170ca:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   170cc:	f242 030a 	movw	r3, #8202	; 0x200a
   170d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170d4:	f242 020a 	movw	r2, #8202	; 0x200a
   170d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170dc:	7812      	ldrb	r2, [r2, #0]
   170de:	b2d2      	uxtb	r2, r2
   170e0:	f042 0210 	orr.w	r2, r2, #16
   170e4:	b2d2      	uxtb	r2, r2
   170e6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   170e8:	f242 030a 	movw	r3, #8202	; 0x200a
   170ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170f0:	f242 020a 	movw	r2, #8202	; 0x200a
   170f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170f8:	7812      	ldrb	r2, [r2, #0]
   170fa:	b2d2      	uxtb	r2, r2
   170fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17100:	b2d2      	uxtb	r2, r2
   17102:	701a      	strb	r2, [r3, #0]
}
   17104:	46bd      	mov	sp, r7
   17106:	f85d 7b04 	ldr.w	r7, [sp], #4
   1710a:	4770      	bx	lr

0001710c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   1710c:	b480      	push	{r7}
   1710e:	b083      	sub	sp, #12
   17110:	af00      	add	r7, sp, #0
   17112:	4603      	mov	r3, r0
   17114:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   17116:	f242 030a 	movw	r3, #8202	; 0x200a
   1711a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1711e:	781b      	ldrb	r3, [r3, #0]
   17120:	b2db      	uxtb	r3, r3
   17122:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17126:	2b00      	cmp	r3, #0
   17128:	d028      	beq.n	1717c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   1712a:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1712e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17132:	781b      	ldrb	r3, [r3, #0]
   17134:	b2db      	uxtb	r3, r3
   17136:	461a      	mov	r2, r3
   17138:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1713c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17140:	781b      	ldrb	r3, [r3, #0]
   17142:	3301      	adds	r3, #1
   17144:	429a      	cmp	r2, r3
   17146:	d100      	bne.n	1714a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17148:	e02c      	b.n	171a4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   1714a:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1714e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17152:	781b      	ldrb	r3, [r3, #0]
   17154:	461a      	mov	r2, r3
   17156:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   1715a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1715e:	79f9      	ldrb	r1, [r7, #7]
   17160:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   17162:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1716a:	781b      	ldrb	r3, [r3, #0]
   1716c:	3301      	adds	r3, #1
   1716e:	b2da      	uxtb	r2, r3
   17170:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17178:	701a      	strb	r2, [r3, #0]
   1717a:	e013      	b.n	171a4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1717c:	f242 030c 	movw	r3, #8204	; 0x200c
   17180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17184:	79fa      	ldrb	r2, [r7, #7]
   17186:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17188:	f242 030a 	movw	r3, #8202	; 0x200a
   1718c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17190:	f242 020a 	movw	r2, #8202	; 0x200a
   17194:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17198:	7812      	ldrb	r2, [r2, #0]
   1719a:	b2d2      	uxtb	r2, r2
   1719c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   171a0:	b2d2      	uxtb	r2, r2
   171a2:	701a      	strb	r2, [r3, #0]
  }
}
   171a4:	370c      	adds	r7, #12
   171a6:	46bd      	mov	sp, r7
   171a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   171ac:	4770      	bx	lr
   171ae:	bf00      	nop

000171b0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   171b0:	b590      	push	{r4, r7, lr}
   171b2:	b089      	sub	sp, #36	; 0x24
   171b4:	af00      	add	r7, sp, #0
   171b6:	4603      	mov	r3, r0
   171b8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   171ba:	f648 23bc 	movw	r3, #35516	; 0x8abc
   171be:	f2c0 0301 	movt	r3, #1
   171c2:	f107 040c 	add.w	r4, r7, #12
   171c6:	6818      	ldr	r0, [r3, #0]
   171c8:	6859      	ldr	r1, [r3, #4]
   171ca:	689a      	ldr	r2, [r3, #8]
   171cc:	68db      	ldr	r3, [r3, #12]
   171ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   171d0:	79fb      	ldrb	r3, [r7, #7]
   171d2:	091b      	lsrs	r3, r3, #4
   171d4:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   171d6:	79fb      	ldrb	r3, [r7, #7]
   171d8:	f003 030f 	and.w	r3, r3, #15
   171dc:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   171de:	230f      	movs	r3, #15
   171e0:	77fb      	strb	r3, [r7, #31]
        low = 15;
   171e2:	230f      	movs	r3, #15
   171e4:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   171e6:	7ffb      	ldrb	r3, [r7, #31]
   171e8:	f107 0220 	add.w	r2, r7, #32
   171ec:	4413      	add	r3, r2
   171ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   171f2:	4618      	mov	r0, r3
   171f4:	f7ff ff8a 	bl	1710c <uart_transmit>
  uart_transmit(hex[low]);
   171f8:	7fbb      	ldrb	r3, [r7, #30]
   171fa:	f107 0220 	add.w	r2, r7, #32
   171fe:	4413      	add	r3, r2
   17200:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17204:	4618      	mov	r0, r3
   17206:	f7ff ff81 	bl	1710c <uart_transmit>
} 
   1720a:	3724      	adds	r7, #36	; 0x24
   1720c:	46bd      	mov	sp, r7
   1720e:	bd90      	pop	{r4, r7, pc}

00017210 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17210:	b580      	push	{r7, lr}
   17212:	b084      	sub	sp, #16
   17214:	af00      	add	r7, sp, #0
   17216:	4603      	mov	r3, r0
   17218:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1721a:	88fb      	ldrh	r3, [r7, #6]
   1721c:	0a1b      	lsrs	r3, r3, #8
   1721e:	b29b      	uxth	r3, r3
   17220:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   17222:	88fb      	ldrh	r3, [r7, #6]
   17224:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   17226:	7bfb      	ldrb	r3, [r7, #15]
   17228:	4618      	mov	r0, r3
   1722a:	f7ff ffc1 	bl	171b0 <uart_print_hex>
  uart_print_hex(low);
   1722e:	7bbb      	ldrb	r3, [r7, #14]
   17230:	4618      	mov	r0, r3
   17232:	f7ff ffbd 	bl	171b0 <uart_print_hex>
}
   17236:	3710      	adds	r7, #16
   17238:	46bd      	mov	sp, r7
   1723a:	bd80      	pop	{r7, pc}

0001723c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1723c:	b580      	push	{r7, lr}
   1723e:	b084      	sub	sp, #16
   17240:	af00      	add	r7, sp, #0
   17242:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   17244:	2300      	movs	r3, #0
   17246:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17248:	e009      	b.n	1725e <uart_print_string+0x22>
    uart_transmit(s[i]);
   1724a:	7bfb      	ldrb	r3, [r7, #15]
   1724c:	687a      	ldr	r2, [r7, #4]
   1724e:	4413      	add	r3, r2
   17250:	781b      	ldrb	r3, [r3, #0]
   17252:	4618      	mov	r0, r3
   17254:	f7ff ff5a 	bl	1710c <uart_transmit>
    i++;
   17258:	7bfb      	ldrb	r3, [r7, #15]
   1725a:	3301      	adds	r3, #1
   1725c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1725e:	7bfb      	ldrb	r3, [r7, #15]
   17260:	687a      	ldr	r2, [r7, #4]
   17262:	4413      	add	r3, r2
   17264:	781b      	ldrb	r3, [r3, #0]
   17266:	2b00      	cmp	r3, #0
   17268:	d1ef      	bne.n	1724a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1726a:	3710      	adds	r7, #16
   1726c:	46bd      	mov	sp, r7
   1726e:	bd80      	pop	{r7, pc}

00017270 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17270:	b480      	push	{r7}
   17272:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   17274:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1727c:	781a      	ldrb	r2, [r3, #0]
   1727e:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17286:	781b      	ldrb	r3, [r3, #0]
   17288:	b2db      	uxtb	r3, r3
   1728a:	429a      	cmp	r2, r3
   1728c:	d10e      	bne.n	172ac <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1728e:	f242 030a 	movw	r3, #8202	; 0x200a
   17292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17296:	f242 020a 	movw	r2, #8202	; 0x200a
   1729a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1729e:	7812      	ldrb	r2, [r2, #0]
   172a0:	b2d2      	uxtb	r2, r2
   172a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   172a6:	b2d2      	uxtb	r2, r2
   172a8:	701a      	strb	r2, [r3, #0]
   172aa:	e01d      	b.n	172e8 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   172ac:	f242 030c 	movw	r3, #8204	; 0x200c
   172b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172b4:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   172b8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172bc:	7812      	ldrb	r2, [r2, #0]
   172be:	b2d2      	uxtb	r2, r2
   172c0:	4611      	mov	r1, r2
   172c2:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   172c6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172ca:	5c52      	ldrb	r2, [r2, r1]
   172cc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   172ce:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   172d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172d6:	781b      	ldrb	r3, [r3, #0]
   172d8:	b2db      	uxtb	r3, r3
   172da:	3301      	adds	r3, #1
   172dc:	b2da      	uxtb	r2, r3
   172de:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   172e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172e6:	701a      	strb	r2, [r3, #0]
  }
}
   172e8:	46bd      	mov	sp, r7
   172ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   172ee:	4770      	bx	lr

000172f0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   172f0:	b580      	push	{r7, lr}
   172f2:	b082      	sub	sp, #8
   172f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   172f6:	2010      	movs	r0, #16
   172f8:	2101      	movs	r1, #1
   172fa:	f7e9 fd61 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   172fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17302:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1730a:	2201      	movs	r2, #1
   1730c:	f7ea f868 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17314:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17316:	2310      	movs	r3, #16
   17318:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1731a:	2303      	movs	r3, #3
   1731c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1731e:	1d3b      	adds	r3, r7, #4
   17320:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17324:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17328:	4619      	mov	r1, r3
   1732a:	f7e9 ff1d 	bl	1168 <GPIO_Init>
}
   1732e:	3708      	adds	r7, #8
   17330:	46bd      	mov	sp, r7
   17332:	bd80      	pop	{r7, pc}

00017334 <init_button>:

void init_button(void)
{
   17334:	b580      	push	{r7, lr}
   17336:	b082      	sub	sp, #8
   17338:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1733a:	2004      	movs	r0, #4
   1733c:	2101      	movs	r1, #1
   1733e:	f7e9 fd3f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   17342:	2301      	movs	r3, #1
   17344:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17346:	2304      	movs	r3, #4
   17348:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1734a:	2303      	movs	r3, #3
   1734c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1734e:	1d3b      	adds	r3, r7, #4
   17350:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17354:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17358:	4619      	mov	r1, r3
   1735a:	f7e9 ff05 	bl	1168 <GPIO_Init>
}
   1735e:	3708      	adds	r7, #8
   17360:	46bd      	mov	sp, r7
   17362:	bd80      	pop	{r7, pc}

00017364 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   17364:	b580      	push	{r7, lr}
   17366:	b084      	sub	sp, #16
   17368:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1736a:	2001      	movs	r0, #1
   1736c:	2101      	movs	r1, #1
   1736e:	f7e9 fd27 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   17372:	2000      	movs	r0, #0
   17374:	2100      	movs	r1, #0
   17376:	f7ea f92b 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1737a:	2301      	movs	r3, #1
   1737c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1737e:	2300      	movs	r3, #0
   17380:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   17382:	2308      	movs	r3, #8
   17384:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   17386:	2301      	movs	r3, #1
   17388:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1738a:	f107 0308 	add.w	r3, r7, #8
   1738e:	4618      	mov	r0, r3
   17390:	f7ea fe24 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   17394:	2306      	movs	r3, #6
   17396:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17398:	230f      	movs	r3, #15
   1739a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1739c:	230f      	movs	r3, #15
   1739e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173a0:	2301      	movs	r3, #1
   173a2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173a4:	1d3b      	adds	r3, r7, #4
   173a6:	4618      	mov	r0, r3
   173a8:	f7ea ff52 	bl	2250 <NVIC_Init>
}
   173ac:	3710      	adds	r7, #16
   173ae:	46bd      	mov	sp, r7
   173b0:	bd80      	pop	{r7, pc}
   173b2:	bf00      	nop

000173b4 <init_rs232>:

void init_rs232(void)
{
   173b4:	b580      	push	{r7, lr}
   173b6:	b086      	sub	sp, #24
   173b8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   173ba:	2005      	movs	r0, #5
   173bc:	2101      	movs	r1, #1
   173be:	f7e9 fcff 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   173c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   173c6:	2101      	movs	r1, #1
   173c8:	f7e9 fd22 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   173cc:	2308      	movs	r3, #8
   173ce:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   173d0:	2304      	movs	r3, #4
   173d2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   173d4:	1d3b      	adds	r3, r7, #4
   173d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   173da:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173de:	4619      	mov	r1, r3
   173e0:	f7e9 fec2 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   173e4:	2304      	movs	r3, #4
   173e6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   173e8:	2303      	movs	r3, #3
   173ea:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   173ec:	2318      	movs	r3, #24
   173ee:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   173f0:	1d3b      	adds	r3, r7, #4
   173f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   173f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173fa:	4619      	mov	r1, r3
   173fc:	f7e9 feb4 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17400:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17404:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17406:	2300      	movs	r3, #0
   17408:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1740a:	2300      	movs	r3, #0
   1740c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1740e:	2300      	movs	r3, #0
   17410:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17412:	2300      	movs	r3, #0
   17414:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17416:	230c      	movs	r3, #12
   17418:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1741a:	f107 0308 	add.w	r3, r7, #8
   1741e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17422:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17426:	4619      	mov	r1, r3
   17428:	f7ea f986 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1742c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17430:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17434:	2101      	movs	r1, #1
   17436:	f7ea fa9d 	bl	1974 <USART_Cmd>
}
   1743a:	3718      	adds	r7, #24
   1743c:	46bd      	mov	sp, r7
   1743e:	bd80      	pop	{r7, pc}

00017440 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17440:	b580      	push	{r7, lr}
   17442:	b082      	sub	sp, #8
   17444:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17446:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1744a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1744e:	f240 7127 	movw	r1, #1831	; 0x727
   17452:	2200      	movs	r2, #0
   17454:	f7ea faae 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17458:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1745c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17460:	f240 5125 	movw	r1, #1317	; 0x525
   17464:	2201      	movs	r2, #1
   17466:	f7ea faa5 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1746a:	2326      	movs	r3, #38	; 0x26
   1746c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1746e:	2300      	movs	r3, #0
   17470:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17472:	2301      	movs	r3, #1
   17474:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17476:	1d3b      	adds	r3, r7, #4
   17478:	4618      	mov	r0, r3
   1747a:	f7ea fee9 	bl	2250 <NVIC_Init>
}
   1747e:	3708      	adds	r7, #8
   17480:	46bd      	mov	sp, r7
   17482:	bd80      	pop	{r7, pc}

00017484 <enable_rs232>:

void enable_rs232(void)
{
   17484:	b580      	push	{r7, lr}
   17486:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17488:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1748c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17490:	2101      	movs	r1, #1
   17492:	f7ea fa6f 	bl	1974 <USART_Cmd>
}
   17496:	bd80      	pop	{r7, pc}

00017498 <send_byte>:

void send_byte(uint8_t b)
{
   17498:	b580      	push	{r7, lr}
   1749a:	b082      	sub	sp, #8
   1749c:	af00      	add	r7, sp, #0
   1749e:	4603      	mov	r3, r0
   174a0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   174a2:	bf00      	nop
   174a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174ac:	2180      	movs	r1, #128	; 0x80
   174ae:	f7ea fccd 	bl	1e4c <USART_GetFlagStatus>
   174b2:	4603      	mov	r3, r0
   174b4:	2b00      	cmp	r3, #0
   174b6:	d0f5      	beq.n	174a4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   174b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   174bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
   174c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   174c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   174c8:	68d2      	ldr	r2, [r2, #12]
   174ca:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   174ce:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   174d0:	79fb      	ldrb	r3, [r7, #7]
   174d2:	b29b      	uxth	r3, r3
   174d4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174dc:	4619      	mov	r1, r3
   174de:	f7ea fb69 	bl	1bb4 <USART_SendData>
}
   174e2:	3708      	adds	r7, #8
   174e4:	46bd      	mov	sp, r7
   174e6:	bd80      	pop	{r7, pc}

000174e8 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   174e8:	b580      	push	{r7, lr}
   174ea:	b082      	sub	sp, #8
   174ec:	af00      	add	r7, sp, #0
   174ee:	4603      	mov	r3, r0
   174f0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   174f2:	79fb      	ldrb	r3, [r7, #7]
   174f4:	3330      	adds	r3, #48	; 0x30
   174f6:	b2db      	uxtb	r3, r3
   174f8:	4618      	mov	r0, r3
   174fa:	f7ff ffcd 	bl	17498 <send_byte>
}
   174fe:	3708      	adds	r7, #8
   17500:	46bd      	mov	sp, r7
   17502:	bd80      	pop	{r7, pc}

00017504 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17504:	b580      	push	{r7, lr}
   17506:	b084      	sub	sp, #16
   17508:	af00      	add	r7, sp, #0
   1750a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1750c:	2300      	movs	r3, #0
   1750e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17510:	e009      	b.n	17526 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17512:	68fb      	ldr	r3, [r7, #12]
   17514:	687a      	ldr	r2, [r7, #4]
   17516:	4413      	add	r3, r2
   17518:	781b      	ldrb	r3, [r3, #0]
   1751a:	4618      	mov	r0, r3
   1751c:	f7ff ffbc 	bl	17498 <send_byte>
        i++;
   17520:	68fb      	ldr	r3, [r7, #12]
   17522:	3301      	adds	r3, #1
   17524:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17526:	68fb      	ldr	r3, [r7, #12]
   17528:	687a      	ldr	r2, [r7, #4]
   1752a:	4413      	add	r3, r2
   1752c:	781b      	ldrb	r3, [r3, #0]
   1752e:	2b00      	cmp	r3, #0
   17530:	d1ef      	bne.n	17512 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17532:	3710      	adds	r7, #16
   17534:	46bd      	mov	sp, r7
   17536:	bd80      	pop	{r7, pc}

00017538 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17538:	b580      	push	{r7, lr}
   1753a:	b08a      	sub	sp, #40	; 0x28
   1753c:	af00      	add	r7, sp, #0
   1753e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17540:	2300      	movs	r3, #0
   17542:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17544:	687b      	ldr	r3, [r7, #4]
   17546:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17548:	69fb      	ldr	r3, [r7, #28]
   1754a:	2b00      	cmp	r3, #0
   1754c:	d106      	bne.n	1755c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1754e:	f648 20cc 	movw	r0, #35532	; 0x8acc
   17552:	f2c0 0001 	movt	r0, #1
   17556:	f7ff ffd5 	bl	17504 <vPrintString>
   1755a:	e062      	b.n	17622 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   1755c:	e024      	b.n	175a8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1755e:	69f9      	ldr	r1, [r7, #28]
   17560:	f246 6367 	movw	r3, #26215	; 0x6667
   17564:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17568:	fb83 2301 	smull	r2, r3, r3, r1
   1756c:	109a      	asrs	r2, r3, #2
   1756e:	17cb      	asrs	r3, r1, #31
   17570:	1ad2      	subs	r2, r2, r3
   17572:	4613      	mov	r3, r2
   17574:	009b      	lsls	r3, r3, #2
   17576:	4413      	add	r3, r2
   17578:	005b      	lsls	r3, r3, #1
   1757a:	1aca      	subs	r2, r1, r3
   1757c:	b2d3      	uxtb	r3, r2
   1757e:	3330      	adds	r3, #48	; 0x30
   17580:	b2da      	uxtb	r2, r3
   17582:	f107 010c 	add.w	r1, r7, #12
   17586:	6a3b      	ldr	r3, [r7, #32]
   17588:	440b      	add	r3, r1
   1758a:	701a      	strb	r2, [r3, #0]
            count ++;
   1758c:	6a3b      	ldr	r3, [r7, #32]
   1758e:	3301      	adds	r3, #1
   17590:	623b      	str	r3, [r7, #32]
            num /= 10;
   17592:	69fa      	ldr	r2, [r7, #28]
   17594:	f246 6367 	movw	r3, #26215	; 0x6667
   17598:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1759c:	fb83 1302 	smull	r1, r3, r3, r2
   175a0:	1099      	asrs	r1, r3, #2
   175a2:	17d3      	asrs	r3, r2, #31
   175a4:	1acb      	subs	r3, r1, r3
   175a6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   175a8:	69fb      	ldr	r3, [r7, #28]
   175aa:	2b00      	cmp	r3, #0
   175ac:	d1d7      	bne.n	1755e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   175ae:	f107 020c 	add.w	r2, r7, #12
   175b2:	6a3b      	ldr	r3, [r7, #32]
   175b4:	4413      	add	r3, r2
   175b6:	2200      	movs	r2, #0
   175b8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   175ba:	2300      	movs	r3, #0
   175bc:	627b      	str	r3, [r7, #36]	; 0x24
   175be:	e020      	b.n	17602 <vPrintNumber+0xca>
        {
            tmp = time[i];
   175c0:	f107 020c 	add.w	r2, r7, #12
   175c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175c6:	4413      	add	r3, r2
   175c8:	781b      	ldrb	r3, [r3, #0]
   175ca:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   175cc:	6a3a      	ldr	r2, [r7, #32]
   175ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175d0:	1ad3      	subs	r3, r2, r3
   175d2:	3b01      	subs	r3, #1
   175d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   175d8:	4413      	add	r3, r2
   175da:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   175de:	f107 010c 	add.w	r1, r7, #12
   175e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175e4:	440b      	add	r3, r1
   175e6:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   175e8:	6a3a      	ldr	r2, [r7, #32]
   175ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175ec:	1ad3      	subs	r3, r2, r3
   175ee:	3b01      	subs	r3, #1
   175f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   175f4:	440b      	add	r3, r1
   175f6:	7efa      	ldrb	r2, [r7, #27]
   175f8:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   175fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175fe:	3301      	adds	r3, #1
   17600:	627b      	str	r3, [r7, #36]	; 0x24
   17602:	6a3b      	ldr	r3, [r7, #32]
   17604:	085a      	lsrs	r2, r3, #1
   17606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17608:	429a      	cmp	r2, r3
   1760a:	d8d9      	bhi.n	175c0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1760c:	f107 030c 	add.w	r3, r7, #12
   17610:	4618      	mov	r0, r3
   17612:	f7ff ff77 	bl	17504 <vPrintString>
        vPrintString("\n\r");
   17616:	f648 20d0 	movw	r0, #35536	; 0x8ad0
   1761a:	f2c0 0001 	movt	r0, #1
   1761e:	f7ff ff71 	bl	17504 <vPrintString>
    }
}
   17622:	3728      	adds	r7, #40	; 0x28
   17624:	46bd      	mov	sp, r7
   17626:	bd80      	pop	{r7, pc}

00017628 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17628:	b580      	push	{r7, lr}
   1762a:	b084      	sub	sp, #16
   1762c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   1762e:	2300      	movs	r3, #0
   17630:	60fb      	str	r3, [r7, #12]
   17632:	e01f      	b.n	17674 <vStartTask+0x4c>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
   17634:	f240 0390 	movw	r3, #144	; 0x90
   17638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1763c:	68fa      	ldr	r2, [r7, #12]
   1763e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17642:	f240 0328 	movw	r3, #40	; 0x28
   17646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1764a:	68fa      	ldr	r2, [r7, #12]
   1764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17650:	0059      	lsls	r1, r3, #1
   17652:	f240 0328 	movw	r3, #40	; 0x28
   17656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1765a:	68fa      	ldr	r2, [r7, #12]
   1765c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17660:	463b      	mov	r3, r7
   17662:	f7eb fb57 	bl	2d14 <pxEventGenericCreate>
   17666:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17668:	68b8      	ldr	r0, [r7, #8]
   1766a:	f7eb feeb 	bl	3444 <vEventGenericSend>
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   1766e:	68fb      	ldr	r3, [r7, #12]
   17670:	3301      	adds	r3, #1
   17672:	60fb      	str	r3, [r7, #12]
   17674:	68fb      	ldr	r3, [r7, #12]
   17676:	2b0c      	cmp	r3, #12
   17678:	dddc      	ble.n	17634 <vStartTask+0xc>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   1767a:	3710      	adds	r7, #16
   1767c:	46bd      	mov	sp, r7
   1767e:	bd80      	pop	{r7, pc}

00017680 <vEventInterrupt>:

void vEventInterrupt(void * pvParameters)
{
   17680:	b580      	push	{r7, lr}
   17682:	b082      	sub	sp, #8
   17684:	af00      	add	r7, sp, #0
   17686:	6078      	str	r0, [r7, #4]
    vSemaphoreCreateBinary( xInterruptSemaphore );
   17688:	2001      	movs	r0, #1
   1768a:	2100      	movs	r1, #0
   1768c:	2203      	movs	r2, #3
   1768e:	f7ec fe05 	bl	429c <xQueueGenericCreate>
   17692:	4602      	mov	r2, r0
   17694:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   17698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1769c:	601a      	str	r2, [r3, #0]
   1769e:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176a6:	681b      	ldr	r3, [r3, #0]
   176a8:	2b00      	cmp	r3, #0
   176aa:	d00a      	beq.n	176c2 <vEventInterrupt+0x42>
   176ac:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176b4:	681b      	ldr	r3, [r3, #0]
   176b6:	4618      	mov	r0, r3
   176b8:	2100      	movs	r1, #0
   176ba:	2200      	movs	r2, #0
   176bc:	2300      	movs	r3, #0
   176be:	f7ec fe7b 	bl	43b8 <xQueueGenericSend>
    xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   176c2:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176ca:	681b      	ldr	r3, [r3, #0]
   176cc:	4618      	mov	r0, r3
   176ce:	2100      	movs	r1, #0
   176d0:	f04f 32ff 	mov.w	r2, #4294967295
   176d4:	2300      	movs	r3, #0
   176d6:	f7ec ff35 	bl	4544 <xQueueGenericReceive>
    while(1)
    {
        //xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
        if(xIsExecutableEventArrive())
   176da:	f7eb fa3f 	bl	2b5c <xIsExecutableEventArrive>
   176de:	4603      	mov	r3, r0
   176e0:	2b00      	cmp	r3, #0
   176e2:	d00a      	beq.n	176fa <vEventInterrupt+0x7a>
        {
            xSemaphoreGive( xBinarySemaphore[0] );
   176e4:	f241 3354 	movw	r3, #4948	; 0x1354
   176e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ec:	681b      	ldr	r3, [r3, #0]
   176ee:	4618      	mov	r0, r3
   176f0:	2100      	movs	r1, #0
   176f2:	2200      	movs	r2, #0
   176f4:	2300      	movs	r3, #0
   176f6:	f7ec fe5f 	bl	43b8 <xQueueGenericSend>
        }
        taskYIELD();
   176fa:	f7ee fa97 	bl	5c2c <vPortYieldFromISR>
    }
   176fe:	e7ec      	b.n	176da <vEventInterrupt+0x5a>

00017700 <main>:
}

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17700:	b580      	push	{r7, lr}
   17702:	b086      	sub	sp, #24
   17704:	af04      	add	r7, sp, #16
    init_led();
   17706:	f7ff fdf3 	bl	172f0 <init_led>
    init_rs232();
   1770a:	f7ff fe53 	bl	173b4 <init_rs232>
    enable_rs232_interrupts();
   1770e:	f7ff fe97 	bl	17440 <enable_rs232_interrupts>
    enable_rs232();
   17712:	f7ff feb7 	bl	17484 <enable_rs232>
    vSemaphoreInitialise();
   17716:	f7eb fefd 	bl	3514 <vSemaphoreInitialise>
    vContextInit();
   1771a:	f7eb ff3b 	bl	3594 <vContextInit>
    vInitialiseEventLists();  
   1771e:	f7eb f9b9 	bl	2a94 <vInitialiseEventLists>
    vStartTask();
   17722:	f7ff ff81 	bl	17628 <vStartTask>
    PapabenchInit();
   17726:	f7ec fab5 	bl	3c94 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   1772a:	2300      	movs	r3, #0
   1772c:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[0]);
   1772e:	2302      	movs	r3, #2
   17730:	9300      	str	r3, [sp, #0]
   17732:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   17736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1773a:	9301      	str	r3, [sp, #4]
   1773c:	2300      	movs	r3, #0
   1773e:	9302      	str	r3, [sp, #8]
   17740:	2300      	movs	r3, #0
   17742:	9303      	str	r3, [sp, #12]
   17744:	f643 30b1 	movw	r0, #15281	; 0x3bb1
   17748:	f2c0 0000 	movt	r0, #0
   1774c:	f648 21d4 	movw	r1, #35540	; 0x8ad4
   17750:	f2c0 0101 	movt	r1, #1
   17754:	2280      	movs	r2, #128	; 0x80
   17756:	2300      	movs	r3, #0
   17758:	f7ed f940 	bl	49dc <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[1]);
   1775c:	2302      	movs	r3, #2
   1775e:	9300      	str	r3, [sp, #0]
   17760:	4b2f      	ldr	r3, [pc, #188]	; (17820 <main+0x120>)
   17762:	9301      	str	r3, [sp, #4]
   17764:	2300      	movs	r3, #0
   17766:	9302      	str	r3, [sp, #8]
   17768:	2300      	movs	r3, #0
   1776a:	9303      	str	r3, [sp, #12]
   1776c:	f643 0079 	movw	r0, #14457	; 0x3879
   17770:	f2c0 0000 	movt	r0, #0
   17774:	f648 21e0 	movw	r1, #35552	; 0x8ae0
   17778:	f2c0 0101 	movt	r1, #1
   1777c:	2280      	movs	r2, #128	; 0x80
   1777e:	2300      	movs	r3, #0
   17780:	f7ed f92c 	bl	49dc <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   17784:	2302      	movs	r3, #2
   17786:	9300      	str	r3, [sp, #0]
   17788:	4b26      	ldr	r3, [pc, #152]	; (17824 <main+0x124>)
   1778a:	9301      	str	r3, [sp, #4]
   1778c:	2300      	movs	r3, #0
   1778e:	9302      	str	r3, [sp, #8]
   17790:	2300      	movs	r3, #0
   17792:	9303      	str	r3, [sp, #12]
   17794:	f643 1075 	movw	r0, #14709	; 0x3975
   17798:	f2c0 0000 	movt	r0, #0
   1779c:	f648 21ec 	movw	r1, #35564	; 0x8aec
   177a0:	f2c0 0101 	movt	r1, #1
   177a4:	2280      	movs	r2, #128	; 0x80
   177a6:	2300      	movs	r3, #0
   177a8:	f7ed f918 	bl	49dc <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[3]);
   177ac:	2302      	movs	r3, #2
   177ae:	9300      	str	r3, [sp, #0]
   177b0:	4b1d      	ldr	r3, [pc, #116]	; (17828 <main+0x128>)
   177b2:	9301      	str	r3, [sp, #4]
   177b4:	2300      	movs	r3, #0
   177b6:	9302      	str	r3, [sp, #8]
   177b8:	2300      	movs	r3, #0
   177ba:	9303      	str	r3, [sp, #12]
   177bc:	f643 20a9 	movw	r0, #15017	; 0x3aa9
   177c0:	f2c0 0000 	movt	r0, #0
   177c4:	f648 21f8 	movw	r1, #35576	; 0x8af8
   177c8:	f2c0 0101 	movt	r1, #1
   177cc:	2280      	movs	r2, #128	; 0x80
   177ce:	2300      	movs	r3, #0
   177d0:	f7ed f904 	bl	49dc <xTaskGenericCreate>
    xTaskCreate( vEventInterrupt, "event", SERVANT_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
   177d4:	2301      	movs	r3, #1
   177d6:	9300      	str	r3, [sp, #0]
   177d8:	2300      	movs	r3, #0
   177da:	9301      	str	r3, [sp, #4]
   177dc:	2300      	movs	r3, #0
   177de:	9302      	str	r3, [sp, #8]
   177e0:	2300      	movs	r3, #0
   177e2:	9303      	str	r3, [sp, #12]
   177e4:	f247 6081 	movw	r0, #30337	; 0x7681
   177e8:	f2c0 0001 	movt	r0, #1
   177ec:	f648 3104 	movw	r1, #35588	; 0x8b04
   177f0:	f2c0 0101 	movt	r1, #1
   177f4:	2280      	movs	r2, #128	; 0x80
   177f6:	2300      	movs	r3, #0
   177f8:	f7ed f8f0 	bl	49dc <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   177fc:	f241 3354 	movw	r3, #4948	; 0x1354
   17800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17804:	681b      	ldr	r3, [r3, #0]
   17806:	4618      	mov	r0, r3
   17808:	2100      	movs	r1, #0
   1780a:	2200      	movs	r2, #0
   1780c:	2300      	movs	r3, #0
   1780e:	f7ec fdd3 	bl	43b8 <xQueueGenericSend>
    vTaskStartScheduler();
   17812:	f7ed fc61 	bl	50d8 <vTaskStartScheduler>

    return 0;
   17816:	2300      	movs	r3, #0
}
   17818:	4618      	mov	r0, r3
   1781a:	3708      	adds	r7, #8
   1781c:	46bd      	mov	sp, r7
   1781e:	bd80      	pop	{r7, pc}
   17820:	2004cdc8 	.word	0x2004cdc8
   17824:	2004cdcc 	.word	0x2004cdcc
   17828:	2004cdd0 	.word	0x2004cdd0

0001782c <myTraceCreate>:

void myTraceCreate      (){
   1782c:	b480      	push	{r7}
   1782e:	af00      	add	r7, sp, #0
}
   17830:	46bd      	mov	sp, r7
   17832:	f85d 7b04 	ldr.w	r7, [sp], #4
   17836:	4770      	bx	lr

00017838 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17838:	b480      	push	{r7}
   1783a:	af00      	add	r7, sp, #0
}
   1783c:	46bd      	mov	sp, r7
   1783e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17842:	4770      	bx	lr

00017844 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17844:	b480      	push	{r7}
   17846:	af00      	add	r7, sp, #0
}
   17848:	46bd      	mov	sp, r7
   1784a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1784e:	4770      	bx	lr

00017850 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17850:	b480      	push	{r7}
   17852:	af00      	add	r7, sp, #0
    //xSemaphoreGive( xInterruptSemaphore );
}
   17854:	46bd      	mov	sp, r7
   17856:	f85d 7b04 	ldr.w	r7, [sp], #4
   1785a:	4770      	bx	lr

0001785c <__aeabi_drsub>:
   1785c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17860:	e002      	b.n	17868 <__adddf3>
   17862:	bf00      	nop

00017864 <__aeabi_dsub>:
   17864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017868 <__adddf3>:
   17868:	b530      	push	{r4, r5, lr}
   1786a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1786e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17872:	ea94 0f05 	teq	r4, r5
   17876:	bf08      	it	eq
   17878:	ea90 0f02 	teqeq	r0, r2
   1787c:	bf1f      	itttt	ne
   1787e:	ea54 0c00 	orrsne.w	ip, r4, r0
   17882:	ea55 0c02 	orrsne.w	ip, r5, r2
   17886:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1788a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1788e:	f000 80e2 	beq.w	17a56 <__adddf3+0x1ee>
   17892:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17896:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1789a:	bfb8      	it	lt
   1789c:	426d      	neglt	r5, r5
   1789e:	dd0c      	ble.n	178ba <__adddf3+0x52>
   178a0:	442c      	add	r4, r5
   178a2:	ea80 0202 	eor.w	r2, r0, r2
   178a6:	ea81 0303 	eor.w	r3, r1, r3
   178aa:	ea82 0000 	eor.w	r0, r2, r0
   178ae:	ea83 0101 	eor.w	r1, r3, r1
   178b2:	ea80 0202 	eor.w	r2, r0, r2
   178b6:	ea81 0303 	eor.w	r3, r1, r3
   178ba:	2d36      	cmp	r5, #54	; 0x36
   178bc:	bf88      	it	hi
   178be:	bd30      	pophi	{r4, r5, pc}
   178c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   178c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   178c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   178cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   178d0:	d002      	beq.n	178d8 <__adddf3+0x70>
   178d2:	4240      	negs	r0, r0
   178d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   178d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   178dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   178e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   178e4:	d002      	beq.n	178ec <__adddf3+0x84>
   178e6:	4252      	negs	r2, r2
   178e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   178ec:	ea94 0f05 	teq	r4, r5
   178f0:	f000 80a7 	beq.w	17a42 <__adddf3+0x1da>
   178f4:	f1a4 0401 	sub.w	r4, r4, #1
   178f8:	f1d5 0e20 	rsbs	lr, r5, #32
   178fc:	db0d      	blt.n	1791a <__adddf3+0xb2>
   178fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   17902:	fa22 f205 	lsr.w	r2, r2, r5
   17906:	1880      	adds	r0, r0, r2
   17908:	f141 0100 	adc.w	r1, r1, #0
   1790c:	fa03 f20e 	lsl.w	r2, r3, lr
   17910:	1880      	adds	r0, r0, r2
   17912:	fa43 f305 	asr.w	r3, r3, r5
   17916:	4159      	adcs	r1, r3
   17918:	e00e      	b.n	17938 <__adddf3+0xd0>
   1791a:	f1a5 0520 	sub.w	r5, r5, #32
   1791e:	f10e 0e20 	add.w	lr, lr, #32
   17922:	2a01      	cmp	r2, #1
   17924:	fa03 fc0e 	lsl.w	ip, r3, lr
   17928:	bf28      	it	cs
   1792a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1792e:	fa43 f305 	asr.w	r3, r3, r5
   17932:	18c0      	adds	r0, r0, r3
   17934:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1793c:	d507      	bpl.n	1794e <__adddf3+0xe6>
   1793e:	f04f 0e00 	mov.w	lr, #0
   17942:	f1dc 0c00 	rsbs	ip, ip, #0
   17946:	eb7e 0000 	sbcs.w	r0, lr, r0
   1794a:	eb6e 0101 	sbc.w	r1, lr, r1
   1794e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17952:	d31b      	bcc.n	1798c <__adddf3+0x124>
   17954:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17958:	d30c      	bcc.n	17974 <__adddf3+0x10c>
   1795a:	0849      	lsrs	r1, r1, #1
   1795c:	ea5f 0030 	movs.w	r0, r0, rrx
   17960:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17964:	f104 0401 	add.w	r4, r4, #1
   17968:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1796c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17970:	f080 809a 	bcs.w	17aa8 <__adddf3+0x240>
   17974:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17978:	bf08      	it	eq
   1797a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1797e:	f150 0000 	adcs.w	r0, r0, #0
   17982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17986:	ea41 0105 	orr.w	r1, r1, r5
   1798a:	bd30      	pop	{r4, r5, pc}
   1798c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17990:	4140      	adcs	r0, r0
   17992:	eb41 0101 	adc.w	r1, r1, r1
   17996:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1799a:	f1a4 0401 	sub.w	r4, r4, #1
   1799e:	d1e9      	bne.n	17974 <__adddf3+0x10c>
   179a0:	f091 0f00 	teq	r1, #0
   179a4:	bf04      	itt	eq
   179a6:	4601      	moveq	r1, r0
   179a8:	2000      	moveq	r0, #0
   179aa:	fab1 f381 	clz	r3, r1
   179ae:	bf08      	it	eq
   179b0:	3320      	addeq	r3, #32
   179b2:	f1a3 030b 	sub.w	r3, r3, #11
   179b6:	f1b3 0220 	subs.w	r2, r3, #32
   179ba:	da0c      	bge.n	179d6 <__adddf3+0x16e>
   179bc:	320c      	adds	r2, #12
   179be:	dd08      	ble.n	179d2 <__adddf3+0x16a>
   179c0:	f102 0c14 	add.w	ip, r2, #20
   179c4:	f1c2 020c 	rsb	r2, r2, #12
   179c8:	fa01 f00c 	lsl.w	r0, r1, ip
   179cc:	fa21 f102 	lsr.w	r1, r1, r2
   179d0:	e00c      	b.n	179ec <__adddf3+0x184>
   179d2:	f102 0214 	add.w	r2, r2, #20
   179d6:	bfd8      	it	le
   179d8:	f1c2 0c20 	rsble	ip, r2, #32
   179dc:	fa01 f102 	lsl.w	r1, r1, r2
   179e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   179e4:	bfdc      	itt	le
   179e6:	ea41 010c 	orrle.w	r1, r1, ip
   179ea:	4090      	lslle	r0, r2
   179ec:	1ae4      	subs	r4, r4, r3
   179ee:	bfa2      	ittt	ge
   179f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   179f4:	4329      	orrge	r1, r5
   179f6:	bd30      	popge	{r4, r5, pc}
   179f8:	ea6f 0404 	mvn.w	r4, r4
   179fc:	3c1f      	subs	r4, #31
   179fe:	da1c      	bge.n	17a3a <__adddf3+0x1d2>
   17a00:	340c      	adds	r4, #12
   17a02:	dc0e      	bgt.n	17a22 <__adddf3+0x1ba>
   17a04:	f104 0414 	add.w	r4, r4, #20
   17a08:	f1c4 0220 	rsb	r2, r4, #32
   17a0c:	fa20 f004 	lsr.w	r0, r0, r4
   17a10:	fa01 f302 	lsl.w	r3, r1, r2
   17a14:	ea40 0003 	orr.w	r0, r0, r3
   17a18:	fa21 f304 	lsr.w	r3, r1, r4
   17a1c:	ea45 0103 	orr.w	r1, r5, r3
   17a20:	bd30      	pop	{r4, r5, pc}
   17a22:	f1c4 040c 	rsb	r4, r4, #12
   17a26:	f1c4 0220 	rsb	r2, r4, #32
   17a2a:	fa20 f002 	lsr.w	r0, r0, r2
   17a2e:	fa01 f304 	lsl.w	r3, r1, r4
   17a32:	ea40 0003 	orr.w	r0, r0, r3
   17a36:	4629      	mov	r1, r5
   17a38:	bd30      	pop	{r4, r5, pc}
   17a3a:	fa21 f004 	lsr.w	r0, r1, r4
   17a3e:	4629      	mov	r1, r5
   17a40:	bd30      	pop	{r4, r5, pc}
   17a42:	f094 0f00 	teq	r4, #0
   17a46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17a4a:	bf06      	itte	eq
   17a4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17a50:	3401      	addeq	r4, #1
   17a52:	3d01      	subne	r5, #1
   17a54:	e74e      	b.n	178f4 <__adddf3+0x8c>
   17a56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17a5a:	bf18      	it	ne
   17a5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17a60:	d029      	beq.n	17ab6 <__adddf3+0x24e>
   17a62:	ea94 0f05 	teq	r4, r5
   17a66:	bf08      	it	eq
   17a68:	ea90 0f02 	teqeq	r0, r2
   17a6c:	d005      	beq.n	17a7a <__adddf3+0x212>
   17a6e:	ea54 0c00 	orrs.w	ip, r4, r0
   17a72:	bf04      	itt	eq
   17a74:	4619      	moveq	r1, r3
   17a76:	4610      	moveq	r0, r2
   17a78:	bd30      	pop	{r4, r5, pc}
   17a7a:	ea91 0f03 	teq	r1, r3
   17a7e:	bf1e      	ittt	ne
   17a80:	2100      	movne	r1, #0
   17a82:	2000      	movne	r0, #0
   17a84:	bd30      	popne	{r4, r5, pc}
   17a86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17a8a:	d105      	bne.n	17a98 <__adddf3+0x230>
   17a8c:	0040      	lsls	r0, r0, #1
   17a8e:	4149      	adcs	r1, r1
   17a90:	bf28      	it	cs
   17a92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17a96:	bd30      	pop	{r4, r5, pc}
   17a98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17a9c:	bf3c      	itt	cc
   17a9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17aa2:	bd30      	popcc	{r4, r5, pc}
   17aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17aa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17aac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17ab0:	f04f 0000 	mov.w	r0, #0
   17ab4:	bd30      	pop	{r4, r5, pc}
   17ab6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17aba:	bf1a      	itte	ne
   17abc:	4619      	movne	r1, r3
   17abe:	4610      	movne	r0, r2
   17ac0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17ac4:	bf1c      	itt	ne
   17ac6:	460b      	movne	r3, r1
   17ac8:	4602      	movne	r2, r0
   17aca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17ace:	bf06      	itte	eq
   17ad0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17ad4:	ea91 0f03 	teqeq	r1, r3
   17ad8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17adc:	bd30      	pop	{r4, r5, pc}
   17ade:	bf00      	nop

00017ae0 <__aeabi_ui2d>:
   17ae0:	f090 0f00 	teq	r0, #0
   17ae4:	bf04      	itt	eq
   17ae6:	2100      	moveq	r1, #0
   17ae8:	4770      	bxeq	lr
   17aea:	b530      	push	{r4, r5, lr}
   17aec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17af0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17af4:	f04f 0500 	mov.w	r5, #0
   17af8:	f04f 0100 	mov.w	r1, #0
   17afc:	e750      	b.n	179a0 <__adddf3+0x138>
   17afe:	bf00      	nop

00017b00 <__aeabi_i2d>:
   17b00:	f090 0f00 	teq	r0, #0
   17b04:	bf04      	itt	eq
   17b06:	2100      	moveq	r1, #0
   17b08:	4770      	bxeq	lr
   17b0a:	b530      	push	{r4, r5, lr}
   17b0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17b18:	bf48      	it	mi
   17b1a:	4240      	negmi	r0, r0
   17b1c:	f04f 0100 	mov.w	r1, #0
   17b20:	e73e      	b.n	179a0 <__adddf3+0x138>
   17b22:	bf00      	nop

00017b24 <__aeabi_f2d>:
   17b24:	0042      	lsls	r2, r0, #1
   17b26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17b2a:	ea4f 0131 	mov.w	r1, r1, rrx
   17b2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17b32:	bf1f      	itttt	ne
   17b34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17b38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17b40:	4770      	bxne	lr
   17b42:	f092 0f00 	teq	r2, #0
   17b46:	bf14      	ite	ne
   17b48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b4c:	4770      	bxeq	lr
   17b4e:	b530      	push	{r4, r5, lr}
   17b50:	f44f 7460 	mov.w	r4, #896	; 0x380
   17b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b5c:	e720      	b.n	179a0 <__adddf3+0x138>
   17b5e:	bf00      	nop

00017b60 <__aeabi_ul2d>:
   17b60:	ea50 0201 	orrs.w	r2, r0, r1
   17b64:	bf08      	it	eq
   17b66:	4770      	bxeq	lr
   17b68:	b530      	push	{r4, r5, lr}
   17b6a:	f04f 0500 	mov.w	r5, #0
   17b6e:	e00a      	b.n	17b86 <__aeabi_l2d+0x16>

00017b70 <__aeabi_l2d>:
   17b70:	ea50 0201 	orrs.w	r2, r0, r1
   17b74:	bf08      	it	eq
   17b76:	4770      	bxeq	lr
   17b78:	b530      	push	{r4, r5, lr}
   17b7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17b7e:	d502      	bpl.n	17b86 <__aeabi_l2d+0x16>
   17b80:	4240      	negs	r0, r0
   17b82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17b86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17b92:	f43f aedc 	beq.w	1794e <__adddf3+0xe6>
   17b96:	f04f 0203 	mov.w	r2, #3
   17b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17b9e:	bf18      	it	ne
   17ba0:	3203      	addne	r2, #3
   17ba2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17ba6:	bf18      	it	ne
   17ba8:	3203      	addne	r2, #3
   17baa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17bae:	f1c2 0320 	rsb	r3, r2, #32
   17bb2:	fa00 fc03 	lsl.w	ip, r0, r3
   17bb6:	fa20 f002 	lsr.w	r0, r0, r2
   17bba:	fa01 fe03 	lsl.w	lr, r1, r3
   17bbe:	ea40 000e 	orr.w	r0, r0, lr
   17bc2:	fa21 f102 	lsr.w	r1, r1, r2
   17bc6:	4414      	add	r4, r2
   17bc8:	e6c1      	b.n	1794e <__adddf3+0xe6>
   17bca:	bf00      	nop

00017bcc <__aeabi_dmul>:
   17bcc:	b570      	push	{r4, r5, r6, lr}
   17bce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17bd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17bd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17bda:	bf1d      	ittte	ne
   17bdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17be0:	ea94 0f0c 	teqne	r4, ip
   17be4:	ea95 0f0c 	teqne	r5, ip
   17be8:	f000 f8de 	bleq	17da8 <__aeabi_dmul+0x1dc>
   17bec:	442c      	add	r4, r5
   17bee:	ea81 0603 	eor.w	r6, r1, r3
   17bf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17bf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17bfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17bfe:	bf18      	it	ne
   17c00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c0c:	d038      	beq.n	17c80 <__aeabi_dmul+0xb4>
   17c0e:	fba0 ce02 	umull	ip, lr, r0, r2
   17c12:	f04f 0500 	mov.w	r5, #0
   17c16:	fbe1 e502 	umlal	lr, r5, r1, r2
   17c1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17c1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   17c22:	f04f 0600 	mov.w	r6, #0
   17c26:	fbe1 5603 	umlal	r5, r6, r1, r3
   17c2a:	f09c 0f00 	teq	ip, #0
   17c2e:	bf18      	it	ne
   17c30:	f04e 0e01 	orrne.w	lr, lr, #1
   17c34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17c38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17c3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17c40:	d204      	bcs.n	17c4c <__aeabi_dmul+0x80>
   17c42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17c46:	416d      	adcs	r5, r5
   17c48:	eb46 0606 	adc.w	r6, r6, r6
   17c4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17c50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17c54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17c58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17c5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17c60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c64:	bf88      	it	hi
   17c66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c6a:	d81e      	bhi.n	17caa <__aeabi_dmul+0xde>
   17c6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17c70:	bf08      	it	eq
   17c72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17c76:	f150 0000 	adcs.w	r0, r0, #0
   17c7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17c7e:	bd70      	pop	{r4, r5, r6, pc}
   17c80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17c84:	ea46 0101 	orr.w	r1, r6, r1
   17c88:	ea40 0002 	orr.w	r0, r0, r2
   17c8c:	ea81 0103 	eor.w	r1, r1, r3
   17c90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17c94:	bfc2      	ittt	gt
   17c96:	ebd4 050c 	rsbsgt	r5, r4, ip
   17c9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17c9e:	bd70      	popgt	{r4, r5, r6, pc}
   17ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ca4:	f04f 0e00 	mov.w	lr, #0
   17ca8:	3c01      	subs	r4, #1
   17caa:	f300 80ab 	bgt.w	17e04 <__aeabi_dmul+0x238>
   17cae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17cb2:	bfde      	ittt	le
   17cb4:	2000      	movle	r0, #0
   17cb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17cba:	bd70      	pople	{r4, r5, r6, pc}
   17cbc:	f1c4 0400 	rsb	r4, r4, #0
   17cc0:	3c20      	subs	r4, #32
   17cc2:	da35      	bge.n	17d30 <__aeabi_dmul+0x164>
   17cc4:	340c      	adds	r4, #12
   17cc6:	dc1b      	bgt.n	17d00 <__aeabi_dmul+0x134>
   17cc8:	f104 0414 	add.w	r4, r4, #20
   17ccc:	f1c4 0520 	rsb	r5, r4, #32
   17cd0:	fa00 f305 	lsl.w	r3, r0, r5
   17cd4:	fa20 f004 	lsr.w	r0, r0, r4
   17cd8:	fa01 f205 	lsl.w	r2, r1, r5
   17cdc:	ea40 0002 	orr.w	r0, r0, r2
   17ce0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17ce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17cec:	fa21 f604 	lsr.w	r6, r1, r4
   17cf0:	eb42 0106 	adc.w	r1, r2, r6
   17cf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17cf8:	bf08      	it	eq
   17cfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17cfe:	bd70      	pop	{r4, r5, r6, pc}
   17d00:	f1c4 040c 	rsb	r4, r4, #12
   17d04:	f1c4 0520 	rsb	r5, r4, #32
   17d08:	fa00 f304 	lsl.w	r3, r0, r4
   17d0c:	fa20 f005 	lsr.w	r0, r0, r5
   17d10:	fa01 f204 	lsl.w	r2, r1, r4
   17d14:	ea40 0002 	orr.w	r0, r0, r2
   17d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d20:	f141 0100 	adc.w	r1, r1, #0
   17d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d28:	bf08      	it	eq
   17d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d2e:	bd70      	pop	{r4, r5, r6, pc}
   17d30:	f1c4 0520 	rsb	r5, r4, #32
   17d34:	fa00 f205 	lsl.w	r2, r0, r5
   17d38:	ea4e 0e02 	orr.w	lr, lr, r2
   17d3c:	fa20 f304 	lsr.w	r3, r0, r4
   17d40:	fa01 f205 	lsl.w	r2, r1, r5
   17d44:	ea43 0302 	orr.w	r3, r3, r2
   17d48:	fa21 f004 	lsr.w	r0, r1, r4
   17d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d50:	fa21 f204 	lsr.w	r2, r1, r4
   17d54:	ea20 0002 	bic.w	r0, r0, r2
   17d58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17d5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d60:	bf08      	it	eq
   17d62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d66:	bd70      	pop	{r4, r5, r6, pc}
   17d68:	f094 0f00 	teq	r4, #0
   17d6c:	d10f      	bne.n	17d8e <__aeabi_dmul+0x1c2>
   17d6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17d72:	0040      	lsls	r0, r0, #1
   17d74:	eb41 0101 	adc.w	r1, r1, r1
   17d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d7c:	bf08      	it	eq
   17d7e:	3c01      	subeq	r4, #1
   17d80:	d0f7      	beq.n	17d72 <__aeabi_dmul+0x1a6>
   17d82:	ea41 0106 	orr.w	r1, r1, r6
   17d86:	f095 0f00 	teq	r5, #0
   17d8a:	bf18      	it	ne
   17d8c:	4770      	bxne	lr
   17d8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17d92:	0052      	lsls	r2, r2, #1
   17d94:	eb43 0303 	adc.w	r3, r3, r3
   17d98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17d9c:	bf08      	it	eq
   17d9e:	3d01      	subeq	r5, #1
   17da0:	d0f7      	beq.n	17d92 <__aeabi_dmul+0x1c6>
   17da2:	ea43 0306 	orr.w	r3, r3, r6
   17da6:	4770      	bx	lr
   17da8:	ea94 0f0c 	teq	r4, ip
   17dac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17db0:	bf18      	it	ne
   17db2:	ea95 0f0c 	teqne	r5, ip
   17db6:	d00c      	beq.n	17dd2 <__aeabi_dmul+0x206>
   17db8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dbc:	bf18      	it	ne
   17dbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dc2:	d1d1      	bne.n	17d68 <__aeabi_dmul+0x19c>
   17dc4:	ea81 0103 	eor.w	r1, r1, r3
   17dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17dcc:	f04f 0000 	mov.w	r0, #0
   17dd0:	bd70      	pop	{r4, r5, r6, pc}
   17dd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dd6:	bf06      	itte	eq
   17dd8:	4610      	moveq	r0, r2
   17dda:	4619      	moveq	r1, r3
   17ddc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17de0:	d019      	beq.n	17e16 <__aeabi_dmul+0x24a>
   17de2:	ea94 0f0c 	teq	r4, ip
   17de6:	d102      	bne.n	17dee <__aeabi_dmul+0x222>
   17de8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17dec:	d113      	bne.n	17e16 <__aeabi_dmul+0x24a>
   17dee:	ea95 0f0c 	teq	r5, ip
   17df2:	d105      	bne.n	17e00 <__aeabi_dmul+0x234>
   17df4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17df8:	bf1c      	itt	ne
   17dfa:	4610      	movne	r0, r2
   17dfc:	4619      	movne	r1, r3
   17dfe:	d10a      	bne.n	17e16 <__aeabi_dmul+0x24a>
   17e00:	ea81 0103 	eor.w	r1, r1, r3
   17e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e10:	f04f 0000 	mov.w	r0, #0
   17e14:	bd70      	pop	{r4, r5, r6, pc}
   17e16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17e1e:	bd70      	pop	{r4, r5, r6, pc}

00017e20 <__aeabi_ddiv>:
   17e20:	b570      	push	{r4, r5, r6, lr}
   17e22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17e26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17e2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17e2e:	bf1d      	ittte	ne
   17e30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17e34:	ea94 0f0c 	teqne	r4, ip
   17e38:	ea95 0f0c 	teqne	r5, ip
   17e3c:	f000 f8a7 	bleq	17f8e <__aeabi_ddiv+0x16e>
   17e40:	eba4 0405 	sub.w	r4, r4, r5
   17e44:	ea81 0e03 	eor.w	lr, r1, r3
   17e48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17e50:	f000 8088 	beq.w	17f64 <__aeabi_ddiv+0x144>
   17e54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17e58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17e5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17e60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17e64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17e68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17e6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17e70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17e74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17e78:	429d      	cmp	r5, r3
   17e7a:	bf08      	it	eq
   17e7c:	4296      	cmpeq	r6, r2
   17e7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17e82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17e86:	d202      	bcs.n	17e8e <__aeabi_ddiv+0x6e>
   17e88:	085b      	lsrs	r3, r3, #1
   17e8a:	ea4f 0232 	mov.w	r2, r2, rrx
   17e8e:	1ab6      	subs	r6, r6, r2
   17e90:	eb65 0503 	sbc.w	r5, r5, r3
   17e94:	085b      	lsrs	r3, r3, #1
   17e96:	ea4f 0232 	mov.w	r2, r2, rrx
   17e9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17e9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17ea2:	ebb6 0e02 	subs.w	lr, r6, r2
   17ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   17eaa:	bf22      	ittt	cs
   17eac:	1ab6      	subcs	r6, r6, r2
   17eae:	4675      	movcs	r5, lr
   17eb0:	ea40 000c 	orrcs.w	r0, r0, ip
   17eb4:	085b      	lsrs	r3, r3, #1
   17eb6:	ea4f 0232 	mov.w	r2, r2, rrx
   17eba:	ebb6 0e02 	subs.w	lr, r6, r2
   17ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ec2:	bf22      	ittt	cs
   17ec4:	1ab6      	subcs	r6, r6, r2
   17ec6:	4675      	movcs	r5, lr
   17ec8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17ecc:	085b      	lsrs	r3, r3, #1
   17ece:	ea4f 0232 	mov.w	r2, r2, rrx
   17ed2:	ebb6 0e02 	subs.w	lr, r6, r2
   17ed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   17eda:	bf22      	ittt	cs
   17edc:	1ab6      	subcs	r6, r6, r2
   17ede:	4675      	movcs	r5, lr
   17ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17ee4:	085b      	lsrs	r3, r3, #1
   17ee6:	ea4f 0232 	mov.w	r2, r2, rrx
   17eea:	ebb6 0e02 	subs.w	lr, r6, r2
   17eee:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ef2:	bf22      	ittt	cs
   17ef4:	1ab6      	subcs	r6, r6, r2
   17ef6:	4675      	movcs	r5, lr
   17ef8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17efc:	ea55 0e06 	orrs.w	lr, r5, r6
   17f00:	d018      	beq.n	17f34 <__aeabi_ddiv+0x114>
   17f02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17f16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17f1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17f1e:	d1c0      	bne.n	17ea2 <__aeabi_ddiv+0x82>
   17f20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f24:	d10b      	bne.n	17f3e <__aeabi_ddiv+0x11e>
   17f26:	ea41 0100 	orr.w	r1, r1, r0
   17f2a:	f04f 0000 	mov.w	r0, #0
   17f2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17f32:	e7b6      	b.n	17ea2 <__aeabi_ddiv+0x82>
   17f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f38:	bf04      	itt	eq
   17f3a:	4301      	orreq	r1, r0
   17f3c:	2000      	moveq	r0, #0
   17f3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17f42:	bf88      	it	hi
   17f44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17f48:	f63f aeaf 	bhi.w	17caa <__aeabi_dmul+0xde>
   17f4c:	ebb5 0c03 	subs.w	ip, r5, r3
   17f50:	bf04      	itt	eq
   17f52:	ebb6 0c02 	subseq.w	ip, r6, r2
   17f56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17f5a:	f150 0000 	adcs.w	r0, r0, #0
   17f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17f62:	bd70      	pop	{r4, r5, r6, pc}
   17f64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17f68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17f6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17f70:	bfc2      	ittt	gt
   17f72:	ebd4 050c 	rsbsgt	r5, r4, ip
   17f76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17f7a:	bd70      	popgt	{r4, r5, r6, pc}
   17f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f80:	f04f 0e00 	mov.w	lr, #0
   17f84:	3c01      	subs	r4, #1
   17f86:	e690      	b.n	17caa <__aeabi_dmul+0xde>
   17f88:	ea45 0e06 	orr.w	lr, r5, r6
   17f8c:	e68d      	b.n	17caa <__aeabi_dmul+0xde>
   17f8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f92:	ea94 0f0c 	teq	r4, ip
   17f96:	bf08      	it	eq
   17f98:	ea95 0f0c 	teqeq	r5, ip
   17f9c:	f43f af3b 	beq.w	17e16 <__aeabi_dmul+0x24a>
   17fa0:	ea94 0f0c 	teq	r4, ip
   17fa4:	d10a      	bne.n	17fbc <__aeabi_ddiv+0x19c>
   17fa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17faa:	f47f af34 	bne.w	17e16 <__aeabi_dmul+0x24a>
   17fae:	ea95 0f0c 	teq	r5, ip
   17fb2:	f47f af25 	bne.w	17e00 <__aeabi_dmul+0x234>
   17fb6:	4610      	mov	r0, r2
   17fb8:	4619      	mov	r1, r3
   17fba:	e72c      	b.n	17e16 <__aeabi_dmul+0x24a>
   17fbc:	ea95 0f0c 	teq	r5, ip
   17fc0:	d106      	bne.n	17fd0 <__aeabi_ddiv+0x1b0>
   17fc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17fc6:	f43f aefd 	beq.w	17dc4 <__aeabi_dmul+0x1f8>
   17fca:	4610      	mov	r0, r2
   17fcc:	4619      	mov	r1, r3
   17fce:	e722      	b.n	17e16 <__aeabi_dmul+0x24a>
   17fd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17fd4:	bf18      	it	ne
   17fd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17fda:	f47f aec5 	bne.w	17d68 <__aeabi_dmul+0x19c>
   17fde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17fe2:	f47f af0d 	bne.w	17e00 <__aeabi_dmul+0x234>
   17fe6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17fea:	f47f aeeb 	bne.w	17dc4 <__aeabi_dmul+0x1f8>
   17fee:	e712      	b.n	17e16 <__aeabi_dmul+0x24a>

00017ff0 <__gedf2>:
   17ff0:	f04f 3cff 	mov.w	ip, #4294967295
   17ff4:	e006      	b.n	18004 <__cmpdf2+0x4>
   17ff6:	bf00      	nop

00017ff8 <__ledf2>:
   17ff8:	f04f 0c01 	mov.w	ip, #1
   17ffc:	e002      	b.n	18004 <__cmpdf2+0x4>
   17ffe:	bf00      	nop

00018000 <__cmpdf2>:
   18000:	f04f 0c01 	mov.w	ip, #1
   18004:	f84d cd04 	str.w	ip, [sp, #-4]!
   18008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1800c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18014:	bf18      	it	ne
   18016:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1801a:	d01b      	beq.n	18054 <__cmpdf2+0x54>
   1801c:	b001      	add	sp, #4
   1801e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18022:	bf0c      	ite	eq
   18024:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18028:	ea91 0f03 	teqne	r1, r3
   1802c:	bf02      	ittt	eq
   1802e:	ea90 0f02 	teqeq	r0, r2
   18032:	2000      	moveq	r0, #0
   18034:	4770      	bxeq	lr
   18036:	f110 0f00 	cmn.w	r0, #0
   1803a:	ea91 0f03 	teq	r1, r3
   1803e:	bf58      	it	pl
   18040:	4299      	cmppl	r1, r3
   18042:	bf08      	it	eq
   18044:	4290      	cmpeq	r0, r2
   18046:	bf2c      	ite	cs
   18048:	17d8      	asrcs	r0, r3, #31
   1804a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1804e:	f040 0001 	orr.w	r0, r0, #1
   18052:	4770      	bx	lr
   18054:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1805c:	d102      	bne.n	18064 <__cmpdf2+0x64>
   1805e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18062:	d107      	bne.n	18074 <__cmpdf2+0x74>
   18064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18068:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1806c:	d1d6      	bne.n	1801c <__cmpdf2+0x1c>
   1806e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18072:	d0d3      	beq.n	1801c <__cmpdf2+0x1c>
   18074:	f85d 0b04 	ldr.w	r0, [sp], #4
   18078:	4770      	bx	lr
   1807a:	bf00      	nop

0001807c <__aeabi_cdrcmple>:
   1807c:	4684      	mov	ip, r0
   1807e:	4610      	mov	r0, r2
   18080:	4662      	mov	r2, ip
   18082:	468c      	mov	ip, r1
   18084:	4619      	mov	r1, r3
   18086:	4663      	mov	r3, ip
   18088:	e000      	b.n	1808c <__aeabi_cdcmpeq>
   1808a:	bf00      	nop

0001808c <__aeabi_cdcmpeq>:
   1808c:	b501      	push	{r0, lr}
   1808e:	f7ff ffb7 	bl	18000 <__cmpdf2>
   18092:	2800      	cmp	r0, #0
   18094:	bf48      	it	mi
   18096:	f110 0f00 	cmnmi.w	r0, #0
   1809a:	bd01      	pop	{r0, pc}

0001809c <__aeabi_dcmpeq>:
   1809c:	f84d ed08 	str.w	lr, [sp, #-8]!
   180a0:	f7ff fff4 	bl	1808c <__aeabi_cdcmpeq>
   180a4:	bf0c      	ite	eq
   180a6:	2001      	moveq	r0, #1
   180a8:	2000      	movne	r0, #0
   180aa:	f85d fb08 	ldr.w	pc, [sp], #8
   180ae:	bf00      	nop

000180b0 <__aeabi_dcmplt>:
   180b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   180b4:	f7ff ffea 	bl	1808c <__aeabi_cdcmpeq>
   180b8:	bf34      	ite	cc
   180ba:	2001      	movcc	r0, #1
   180bc:	2000      	movcs	r0, #0
   180be:	f85d fb08 	ldr.w	pc, [sp], #8
   180c2:	bf00      	nop

000180c4 <__aeabi_dcmple>:
   180c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   180c8:	f7ff ffe0 	bl	1808c <__aeabi_cdcmpeq>
   180cc:	bf94      	ite	ls
   180ce:	2001      	movls	r0, #1
   180d0:	2000      	movhi	r0, #0
   180d2:	f85d fb08 	ldr.w	pc, [sp], #8
   180d6:	bf00      	nop

000180d8 <__aeabi_dcmpge>:
   180d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   180dc:	f7ff ffce 	bl	1807c <__aeabi_cdrcmple>
   180e0:	bf94      	ite	ls
   180e2:	2001      	movls	r0, #1
   180e4:	2000      	movhi	r0, #0
   180e6:	f85d fb08 	ldr.w	pc, [sp], #8
   180ea:	bf00      	nop

000180ec <__aeabi_dcmpgt>:
   180ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   180f0:	f7ff ffc4 	bl	1807c <__aeabi_cdrcmple>
   180f4:	bf34      	ite	cc
   180f6:	2001      	movcc	r0, #1
   180f8:	2000      	movcs	r0, #0
   180fa:	f85d fb08 	ldr.w	pc, [sp], #8
   180fe:	bf00      	nop

00018100 <__aeabi_d2iz>:
   18100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18104:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18108:	d215      	bcs.n	18136 <__aeabi_d2iz+0x36>
   1810a:	d511      	bpl.n	18130 <__aeabi_d2iz+0x30>
   1810c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18114:	d912      	bls.n	1813c <__aeabi_d2iz+0x3c>
   18116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1811a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1811e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18122:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18126:	fa23 f002 	lsr.w	r0, r3, r2
   1812a:	bf18      	it	ne
   1812c:	4240      	negne	r0, r0
   1812e:	4770      	bx	lr
   18130:	f04f 0000 	mov.w	r0, #0
   18134:	4770      	bx	lr
   18136:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1813a:	d105      	bne.n	18148 <__aeabi_d2iz+0x48>
   1813c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18140:	bf08      	it	eq
   18142:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18146:	4770      	bx	lr
   18148:	f04f 0000 	mov.w	r0, #0
   1814c:	4770      	bx	lr
   1814e:	bf00      	nop

00018150 <__aeabi_d2uiz>:
   18150:	004a      	lsls	r2, r1, #1
   18152:	d211      	bcs.n	18178 <__aeabi_d2uiz+0x28>
   18154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18158:	d211      	bcs.n	1817e <__aeabi_d2uiz+0x2e>
   1815a:	d50d      	bpl.n	18178 <__aeabi_d2uiz+0x28>
   1815c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18164:	d40e      	bmi.n	18184 <__aeabi_d2uiz+0x34>
   18166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1816a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1816e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18172:	fa23 f002 	lsr.w	r0, r3, r2
   18176:	4770      	bx	lr
   18178:	f04f 0000 	mov.w	r0, #0
   1817c:	4770      	bx	lr
   1817e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18182:	d102      	bne.n	1818a <__aeabi_d2uiz+0x3a>
   18184:	f04f 30ff 	mov.w	r0, #4294967295
   18188:	4770      	bx	lr
   1818a:	f04f 0000 	mov.w	r0, #0
   1818e:	4770      	bx	lr

00018190 <__aeabi_d2f>:
   18190:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18194:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18198:	bf24      	itt	cs
   1819a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1819e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   181a2:	d90d      	bls.n	181c0 <__aeabi_d2f+0x30>
   181a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   181a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   181ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   181b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   181b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   181b8:	bf08      	it	eq
   181ba:	f020 0001 	biceq.w	r0, r0, #1
   181be:	4770      	bx	lr
   181c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   181c4:	d121      	bne.n	1820a <__aeabi_d2f+0x7a>
   181c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   181ca:	bfbc      	itt	lt
   181cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   181d0:	4770      	bxlt	lr
   181d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   181d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   181da:	f1c2 0218 	rsb	r2, r2, #24
   181de:	f1c2 0c20 	rsb	ip, r2, #32
   181e2:	fa10 f30c 	lsls.w	r3, r0, ip
   181e6:	fa20 f002 	lsr.w	r0, r0, r2
   181ea:	bf18      	it	ne
   181ec:	f040 0001 	orrne.w	r0, r0, #1
   181f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   181f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   181fc:	ea40 000c 	orr.w	r0, r0, ip
   18200:	fa23 f302 	lsr.w	r3, r3, r2
   18204:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18208:	e7cc      	b.n	181a4 <__aeabi_d2f+0x14>
   1820a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1820e:	d107      	bne.n	18220 <__aeabi_d2f+0x90>
   18210:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18214:	bf1e      	ittt	ne
   18216:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1821a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1821e:	4770      	bxne	lr
   18220:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18224:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1822c:	4770      	bx	lr
   1822e:	bf00      	nop

00018230 <__aeabi_frsub>:
   18230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18234:	e002      	b.n	1823c <__addsf3>
   18236:	bf00      	nop

00018238 <__aeabi_fsub>:
   18238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001823c <__addsf3>:
   1823c:	0042      	lsls	r2, r0, #1
   1823e:	bf1f      	itttt	ne
   18240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18244:	ea92 0f03 	teqne	r2, r3
   18248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1824c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18250:	d06a      	beq.n	18328 <__addsf3+0xec>
   18252:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1825a:	bfc1      	itttt	gt
   1825c:	18d2      	addgt	r2, r2, r3
   1825e:	4041      	eorgt	r1, r0
   18260:	4048      	eorgt	r0, r1
   18262:	4041      	eorgt	r1, r0
   18264:	bfb8      	it	lt
   18266:	425b      	neglt	r3, r3
   18268:	2b19      	cmp	r3, #25
   1826a:	bf88      	it	hi
   1826c:	4770      	bxhi	lr
   1826e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1827a:	bf18      	it	ne
   1827c:	4240      	negne	r0, r0
   1827e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1828a:	bf18      	it	ne
   1828c:	4249      	negne	r1, r1
   1828e:	ea92 0f03 	teq	r2, r3
   18292:	d03f      	beq.n	18314 <__addsf3+0xd8>
   18294:	f1a2 0201 	sub.w	r2, r2, #1
   18298:	fa41 fc03 	asr.w	ip, r1, r3
   1829c:	eb10 000c 	adds.w	r0, r0, ip
   182a0:	f1c3 0320 	rsb	r3, r3, #32
   182a4:	fa01 f103 	lsl.w	r1, r1, r3
   182a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   182ac:	d502      	bpl.n	182b4 <__addsf3+0x78>
   182ae:	4249      	negs	r1, r1
   182b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   182b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   182b8:	d313      	bcc.n	182e2 <__addsf3+0xa6>
   182ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   182be:	d306      	bcc.n	182ce <__addsf3+0x92>
   182c0:	0840      	lsrs	r0, r0, #1
   182c2:	ea4f 0131 	mov.w	r1, r1, rrx
   182c6:	f102 0201 	add.w	r2, r2, #1
   182ca:	2afe      	cmp	r2, #254	; 0xfe
   182cc:	d251      	bcs.n	18372 <__addsf3+0x136>
   182ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   182d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   182d6:	bf08      	it	eq
   182d8:	f020 0001 	biceq.w	r0, r0, #1
   182dc:	ea40 0003 	orr.w	r0, r0, r3
   182e0:	4770      	bx	lr
   182e2:	0049      	lsls	r1, r1, #1
   182e4:	eb40 0000 	adc.w	r0, r0, r0
   182e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   182ec:	f1a2 0201 	sub.w	r2, r2, #1
   182f0:	d1ed      	bne.n	182ce <__addsf3+0x92>
   182f2:	fab0 fc80 	clz	ip, r0
   182f6:	f1ac 0c08 	sub.w	ip, ip, #8
   182fa:	ebb2 020c 	subs.w	r2, r2, ip
   182fe:	fa00 f00c 	lsl.w	r0, r0, ip
   18302:	bfaa      	itet	ge
   18304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18308:	4252      	neglt	r2, r2
   1830a:	4318      	orrge	r0, r3
   1830c:	bfbc      	itt	lt
   1830e:	40d0      	lsrlt	r0, r2
   18310:	4318      	orrlt	r0, r3
   18312:	4770      	bx	lr
   18314:	f092 0f00 	teq	r2, #0
   18318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1831c:	bf06      	itte	eq
   1831e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18322:	3201      	addeq	r2, #1
   18324:	3b01      	subne	r3, #1
   18326:	e7b5      	b.n	18294 <__addsf3+0x58>
   18328:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1832c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18330:	bf18      	it	ne
   18332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18336:	d021      	beq.n	1837c <__addsf3+0x140>
   18338:	ea92 0f03 	teq	r2, r3
   1833c:	d004      	beq.n	18348 <__addsf3+0x10c>
   1833e:	f092 0f00 	teq	r2, #0
   18342:	bf08      	it	eq
   18344:	4608      	moveq	r0, r1
   18346:	4770      	bx	lr
   18348:	ea90 0f01 	teq	r0, r1
   1834c:	bf1c      	itt	ne
   1834e:	2000      	movne	r0, #0
   18350:	4770      	bxne	lr
   18352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18356:	d104      	bne.n	18362 <__addsf3+0x126>
   18358:	0040      	lsls	r0, r0, #1
   1835a:	bf28      	it	cs
   1835c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18360:	4770      	bx	lr
   18362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18366:	bf3c      	itt	cc
   18368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1836c:	4770      	bxcc	lr
   1836e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1837a:	4770      	bx	lr
   1837c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18380:	bf16      	itet	ne
   18382:	4608      	movne	r0, r1
   18384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18388:	4601      	movne	r1, r0
   1838a:	0242      	lsls	r2, r0, #9
   1838c:	bf06      	itte	eq
   1838e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18392:	ea90 0f01 	teqeq	r0, r1
   18396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1839a:	4770      	bx	lr

0001839c <__aeabi_ui2f>:
   1839c:	f04f 0300 	mov.w	r3, #0
   183a0:	e004      	b.n	183ac <__aeabi_i2f+0x8>
   183a2:	bf00      	nop

000183a4 <__aeabi_i2f>:
   183a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   183a8:	bf48      	it	mi
   183aa:	4240      	negmi	r0, r0
   183ac:	ea5f 0c00 	movs.w	ip, r0
   183b0:	bf08      	it	eq
   183b2:	4770      	bxeq	lr
   183b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   183b8:	4601      	mov	r1, r0
   183ba:	f04f 0000 	mov.w	r0, #0
   183be:	e01c      	b.n	183fa <__aeabi_l2f+0x2a>

000183c0 <__aeabi_ul2f>:
   183c0:	ea50 0201 	orrs.w	r2, r0, r1
   183c4:	bf08      	it	eq
   183c6:	4770      	bxeq	lr
   183c8:	f04f 0300 	mov.w	r3, #0
   183cc:	e00a      	b.n	183e4 <__aeabi_l2f+0x14>
   183ce:	bf00      	nop

000183d0 <__aeabi_l2f>:
   183d0:	ea50 0201 	orrs.w	r2, r0, r1
   183d4:	bf08      	it	eq
   183d6:	4770      	bxeq	lr
   183d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   183dc:	d502      	bpl.n	183e4 <__aeabi_l2f+0x14>
   183de:	4240      	negs	r0, r0
   183e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   183e4:	ea5f 0c01 	movs.w	ip, r1
   183e8:	bf02      	ittt	eq
   183ea:	4684      	moveq	ip, r0
   183ec:	4601      	moveq	r1, r0
   183ee:	2000      	moveq	r0, #0
   183f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   183f4:	bf08      	it	eq
   183f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   183fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   183fe:	fabc f28c 	clz	r2, ip
   18402:	3a08      	subs	r2, #8
   18404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18408:	db10      	blt.n	1842c <__aeabi_l2f+0x5c>
   1840a:	fa01 fc02 	lsl.w	ip, r1, r2
   1840e:	4463      	add	r3, ip
   18410:	fa00 fc02 	lsl.w	ip, r0, r2
   18414:	f1c2 0220 	rsb	r2, r2, #32
   18418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1841c:	fa20 f202 	lsr.w	r2, r0, r2
   18420:	eb43 0002 	adc.w	r0, r3, r2
   18424:	bf08      	it	eq
   18426:	f020 0001 	biceq.w	r0, r0, #1
   1842a:	4770      	bx	lr
   1842c:	f102 0220 	add.w	r2, r2, #32
   18430:	fa01 fc02 	lsl.w	ip, r1, r2
   18434:	f1c2 0220 	rsb	r2, r2, #32
   18438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1843c:	fa21 f202 	lsr.w	r2, r1, r2
   18440:	eb43 0002 	adc.w	r0, r3, r2
   18444:	bf08      	it	eq
   18446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1844a:	4770      	bx	lr

0001844c <__aeabi_fmul>:
   1844c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18454:	bf1e      	ittt	ne
   18456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1845a:	ea92 0f0c 	teqne	r2, ip
   1845e:	ea93 0f0c 	teqne	r3, ip
   18462:	d06f      	beq.n	18544 <__aeabi_fmul+0xf8>
   18464:	441a      	add	r2, r3
   18466:	ea80 0c01 	eor.w	ip, r0, r1
   1846a:	0240      	lsls	r0, r0, #9
   1846c:	bf18      	it	ne
   1846e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18472:	d01e      	beq.n	184b2 <__aeabi_fmul+0x66>
   18474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1847c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18480:	fba0 3101 	umull	r3, r1, r0, r1
   18484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18488:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1848c:	bf3e      	ittt	cc
   1848e:	0049      	lslcc	r1, r1, #1
   18490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18494:	005b      	lslcc	r3, r3, #1
   18496:	ea40 0001 	orr.w	r0, r0, r1
   1849a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1849e:	2afd      	cmp	r2, #253	; 0xfd
   184a0:	d81d      	bhi.n	184de <__aeabi_fmul+0x92>
   184a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   184a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184aa:	bf08      	it	eq
   184ac:	f020 0001 	biceq.w	r0, r0, #1
   184b0:	4770      	bx	lr
   184b2:	f090 0f00 	teq	r0, #0
   184b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184ba:	bf08      	it	eq
   184bc:	0249      	lsleq	r1, r1, #9
   184be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   184c6:	3a7f      	subs	r2, #127	; 0x7f
   184c8:	bfc2      	ittt	gt
   184ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184d2:	4770      	bxgt	lr
   184d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184d8:	f04f 0300 	mov.w	r3, #0
   184dc:	3a01      	subs	r2, #1
   184de:	dc5d      	bgt.n	1859c <__aeabi_fmul+0x150>
   184e0:	f112 0f19 	cmn.w	r2, #25
   184e4:	bfdc      	itt	le
   184e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   184ea:	4770      	bxle	lr
   184ec:	f1c2 0200 	rsb	r2, r2, #0
   184f0:	0041      	lsls	r1, r0, #1
   184f2:	fa21 f102 	lsr.w	r1, r1, r2
   184f6:	f1c2 0220 	rsb	r2, r2, #32
   184fa:	fa00 fc02 	lsl.w	ip, r0, r2
   184fe:	ea5f 0031 	movs.w	r0, r1, rrx
   18502:	f140 0000 	adc.w	r0, r0, #0
   18506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1850a:	bf08      	it	eq
   1850c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18510:	4770      	bx	lr
   18512:	f092 0f00 	teq	r2, #0
   18516:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1851a:	bf02      	ittt	eq
   1851c:	0040      	lsleq	r0, r0, #1
   1851e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18522:	3a01      	subeq	r2, #1
   18524:	d0f9      	beq.n	1851a <__aeabi_fmul+0xce>
   18526:	ea40 000c 	orr.w	r0, r0, ip
   1852a:	f093 0f00 	teq	r3, #0
   1852e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18532:	bf02      	ittt	eq
   18534:	0049      	lsleq	r1, r1, #1
   18536:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1853a:	3b01      	subeq	r3, #1
   1853c:	d0f9      	beq.n	18532 <__aeabi_fmul+0xe6>
   1853e:	ea41 010c 	orr.w	r1, r1, ip
   18542:	e78f      	b.n	18464 <__aeabi_fmul+0x18>
   18544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18548:	ea92 0f0c 	teq	r2, ip
   1854c:	bf18      	it	ne
   1854e:	ea93 0f0c 	teqne	r3, ip
   18552:	d00a      	beq.n	1856a <__aeabi_fmul+0x11e>
   18554:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18558:	bf18      	it	ne
   1855a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1855e:	d1d8      	bne.n	18512 <__aeabi_fmul+0xc6>
   18560:	ea80 0001 	eor.w	r0, r0, r1
   18564:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18568:	4770      	bx	lr
   1856a:	f090 0f00 	teq	r0, #0
   1856e:	bf17      	itett	ne
   18570:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18574:	4608      	moveq	r0, r1
   18576:	f091 0f00 	teqne	r1, #0
   1857a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1857e:	d014      	beq.n	185aa <__aeabi_fmul+0x15e>
   18580:	ea92 0f0c 	teq	r2, ip
   18584:	d101      	bne.n	1858a <__aeabi_fmul+0x13e>
   18586:	0242      	lsls	r2, r0, #9
   18588:	d10f      	bne.n	185aa <__aeabi_fmul+0x15e>
   1858a:	ea93 0f0c 	teq	r3, ip
   1858e:	d103      	bne.n	18598 <__aeabi_fmul+0x14c>
   18590:	024b      	lsls	r3, r1, #9
   18592:	bf18      	it	ne
   18594:	4608      	movne	r0, r1
   18596:	d108      	bne.n	185aa <__aeabi_fmul+0x15e>
   18598:	ea80 0001 	eor.w	r0, r0, r1
   1859c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   185a8:	4770      	bx	lr
   185aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   185b2:	4770      	bx	lr

000185b4 <__aeabi_fdiv>:
   185b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   185bc:	bf1e      	ittt	ne
   185be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   185c2:	ea92 0f0c 	teqne	r2, ip
   185c6:	ea93 0f0c 	teqne	r3, ip
   185ca:	d069      	beq.n	186a0 <__aeabi_fdiv+0xec>
   185cc:	eba2 0203 	sub.w	r2, r2, r3
   185d0:	ea80 0c01 	eor.w	ip, r0, r1
   185d4:	0249      	lsls	r1, r1, #9
   185d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   185da:	d037      	beq.n	1864c <__aeabi_fdiv+0x98>
   185dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   185e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   185e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   185e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   185ec:	428b      	cmp	r3, r1
   185ee:	bf38      	it	cc
   185f0:	005b      	lslcc	r3, r3, #1
   185f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   185f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   185fa:	428b      	cmp	r3, r1
   185fc:	bf24      	itt	cs
   185fe:	1a5b      	subcs	r3, r3, r1
   18600:	ea40 000c 	orrcs.w	r0, r0, ip
   18604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18608:	bf24      	itt	cs
   1860a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1860e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18616:	bf24      	itt	cs
   18618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1861c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18624:	bf24      	itt	cs
   18626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1862a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1862e:	011b      	lsls	r3, r3, #4
   18630:	bf18      	it	ne
   18632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18636:	d1e0      	bne.n	185fa <__aeabi_fdiv+0x46>
   18638:	2afd      	cmp	r2, #253	; 0xfd
   1863a:	f63f af50 	bhi.w	184de <__aeabi_fmul+0x92>
   1863e:	428b      	cmp	r3, r1
   18640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18644:	bf08      	it	eq
   18646:	f020 0001 	biceq.w	r0, r0, #1
   1864a:	4770      	bx	lr
   1864c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18654:	327f      	adds	r2, #127	; 0x7f
   18656:	bfc2      	ittt	gt
   18658:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1865c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18660:	4770      	bxgt	lr
   18662:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18666:	f04f 0300 	mov.w	r3, #0
   1866a:	3a01      	subs	r2, #1
   1866c:	e737      	b.n	184de <__aeabi_fmul+0x92>
   1866e:	f092 0f00 	teq	r2, #0
   18672:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18676:	bf02      	ittt	eq
   18678:	0040      	lsleq	r0, r0, #1
   1867a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1867e:	3a01      	subeq	r2, #1
   18680:	d0f9      	beq.n	18676 <__aeabi_fdiv+0xc2>
   18682:	ea40 000c 	orr.w	r0, r0, ip
   18686:	f093 0f00 	teq	r3, #0
   1868a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1868e:	bf02      	ittt	eq
   18690:	0049      	lsleq	r1, r1, #1
   18692:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18696:	3b01      	subeq	r3, #1
   18698:	d0f9      	beq.n	1868e <__aeabi_fdiv+0xda>
   1869a:	ea41 010c 	orr.w	r1, r1, ip
   1869e:	e795      	b.n	185cc <__aeabi_fdiv+0x18>
   186a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186a4:	ea92 0f0c 	teq	r2, ip
   186a8:	d108      	bne.n	186bc <__aeabi_fdiv+0x108>
   186aa:	0242      	lsls	r2, r0, #9
   186ac:	f47f af7d 	bne.w	185aa <__aeabi_fmul+0x15e>
   186b0:	ea93 0f0c 	teq	r3, ip
   186b4:	f47f af70 	bne.w	18598 <__aeabi_fmul+0x14c>
   186b8:	4608      	mov	r0, r1
   186ba:	e776      	b.n	185aa <__aeabi_fmul+0x15e>
   186bc:	ea93 0f0c 	teq	r3, ip
   186c0:	d104      	bne.n	186cc <__aeabi_fdiv+0x118>
   186c2:	024b      	lsls	r3, r1, #9
   186c4:	f43f af4c 	beq.w	18560 <__aeabi_fmul+0x114>
   186c8:	4608      	mov	r0, r1
   186ca:	e76e      	b.n	185aa <__aeabi_fmul+0x15e>
   186cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   186d0:	bf18      	it	ne
   186d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   186d6:	d1ca      	bne.n	1866e <__aeabi_fdiv+0xba>
   186d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   186dc:	f47f af5c 	bne.w	18598 <__aeabi_fmul+0x14c>
   186e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   186e4:	f47f af3c 	bne.w	18560 <__aeabi_fmul+0x114>
   186e8:	e75f      	b.n	185aa <__aeabi_fmul+0x15e>
   186ea:	bf00      	nop

000186ec <__gesf2>:
   186ec:	f04f 3cff 	mov.w	ip, #4294967295
   186f0:	e006      	b.n	18700 <__cmpsf2+0x4>
   186f2:	bf00      	nop

000186f4 <__lesf2>:
   186f4:	f04f 0c01 	mov.w	ip, #1
   186f8:	e002      	b.n	18700 <__cmpsf2+0x4>
   186fa:	bf00      	nop

000186fc <__cmpsf2>:
   186fc:	f04f 0c01 	mov.w	ip, #1
   18700:	f84d cd04 	str.w	ip, [sp, #-4]!
   18704:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18708:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1870c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18710:	bf18      	it	ne
   18712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18716:	d011      	beq.n	1873c <__cmpsf2+0x40>
   18718:	b001      	add	sp, #4
   1871a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1871e:	bf18      	it	ne
   18720:	ea90 0f01 	teqne	r0, r1
   18724:	bf58      	it	pl
   18726:	ebb2 0003 	subspl.w	r0, r2, r3
   1872a:	bf88      	it	hi
   1872c:	17c8      	asrhi	r0, r1, #31
   1872e:	bf38      	it	cc
   18730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18734:	bf18      	it	ne
   18736:	f040 0001 	orrne.w	r0, r0, #1
   1873a:	4770      	bx	lr
   1873c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18740:	d102      	bne.n	18748 <__cmpsf2+0x4c>
   18742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18746:	d105      	bne.n	18754 <__cmpsf2+0x58>
   18748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1874c:	d1e4      	bne.n	18718 <__cmpsf2+0x1c>
   1874e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18752:	d0e1      	beq.n	18718 <__cmpsf2+0x1c>
   18754:	f85d 0b04 	ldr.w	r0, [sp], #4
   18758:	4770      	bx	lr
   1875a:	bf00      	nop

0001875c <__aeabi_cfrcmple>:
   1875c:	4684      	mov	ip, r0
   1875e:	4608      	mov	r0, r1
   18760:	4661      	mov	r1, ip
   18762:	e7ff      	b.n	18764 <__aeabi_cfcmpeq>

00018764 <__aeabi_cfcmpeq>:
   18764:	b50f      	push	{r0, r1, r2, r3, lr}
   18766:	f7ff ffc9 	bl	186fc <__cmpsf2>
   1876a:	2800      	cmp	r0, #0
   1876c:	bf48      	it	mi
   1876e:	f110 0f00 	cmnmi.w	r0, #0
   18772:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018774 <__aeabi_fcmpeq>:
   18774:	f84d ed08 	str.w	lr, [sp, #-8]!
   18778:	f7ff fff4 	bl	18764 <__aeabi_cfcmpeq>
   1877c:	bf0c      	ite	eq
   1877e:	2001      	moveq	r0, #1
   18780:	2000      	movne	r0, #0
   18782:	f85d fb08 	ldr.w	pc, [sp], #8
   18786:	bf00      	nop

00018788 <__aeabi_fcmplt>:
   18788:	f84d ed08 	str.w	lr, [sp, #-8]!
   1878c:	f7ff ffea 	bl	18764 <__aeabi_cfcmpeq>
   18790:	bf34      	ite	cc
   18792:	2001      	movcc	r0, #1
   18794:	2000      	movcs	r0, #0
   18796:	f85d fb08 	ldr.w	pc, [sp], #8
   1879a:	bf00      	nop

0001879c <__aeabi_fcmple>:
   1879c:	f84d ed08 	str.w	lr, [sp, #-8]!
   187a0:	f7ff ffe0 	bl	18764 <__aeabi_cfcmpeq>
   187a4:	bf94      	ite	ls
   187a6:	2001      	movls	r0, #1
   187a8:	2000      	movhi	r0, #0
   187aa:	f85d fb08 	ldr.w	pc, [sp], #8
   187ae:	bf00      	nop

000187b0 <__aeabi_fcmpge>:
   187b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   187b4:	f7ff ffd2 	bl	1875c <__aeabi_cfrcmple>
   187b8:	bf94      	ite	ls
   187ba:	2001      	movls	r0, #1
   187bc:	2000      	movhi	r0, #0
   187be:	f85d fb08 	ldr.w	pc, [sp], #8
   187c2:	bf00      	nop

000187c4 <__aeabi_fcmpgt>:
   187c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   187c8:	f7ff ffc8 	bl	1875c <__aeabi_cfrcmple>
   187cc:	bf34      	ite	cc
   187ce:	2001      	movcc	r0, #1
   187d0:	2000      	movcs	r0, #0
   187d2:	f85d fb08 	ldr.w	pc, [sp], #8
   187d6:	bf00      	nop

000187d8 <__aeabi_f2iz>:
   187d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   187dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   187e0:	d30f      	bcc.n	18802 <__aeabi_f2iz+0x2a>
   187e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   187e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   187ea:	d90d      	bls.n	18808 <__aeabi_f2iz+0x30>
   187ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
   187f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   187f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   187f8:	fa23 f002 	lsr.w	r0, r3, r2
   187fc:	bf18      	it	ne
   187fe:	4240      	negne	r0, r0
   18800:	4770      	bx	lr
   18802:	f04f 0000 	mov.w	r0, #0
   18806:	4770      	bx	lr
   18808:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1880c:	d101      	bne.n	18812 <__aeabi_f2iz+0x3a>
   1880e:	0242      	lsls	r2, r0, #9
   18810:	d105      	bne.n	1881e <__aeabi_f2iz+0x46>
   18812:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   18816:	bf08      	it	eq
   18818:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1881c:	4770      	bx	lr
   1881e:	f04f 0000 	mov.w	r0, #0
   18822:	4770      	bx	lr

00018824 <memcpy>:
   18824:	2a0f      	cmp	r2, #15
   18826:	b4f0      	push	{r4, r5, r6, r7}
   18828:	d945      	bls.n	188b6 <memcpy+0x92>
   1882a:	ea40 0301 	orr.w	r3, r0, r1
   1882e:	079b      	lsls	r3, r3, #30
   18830:	d145      	bne.n	188be <memcpy+0x9a>
   18832:	f1a2 0710 	sub.w	r7, r2, #16
   18836:	460c      	mov	r4, r1
   18838:	4603      	mov	r3, r0
   1883a:	093f      	lsrs	r7, r7, #4
   1883c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18840:	3610      	adds	r6, #16
   18842:	6825      	ldr	r5, [r4, #0]
   18844:	3310      	adds	r3, #16
   18846:	3410      	adds	r4, #16
   18848:	f843 5c10 	str.w	r5, [r3, #-16]
   1884c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18850:	f843 5c0c 	str.w	r5, [r3, #-12]
   18854:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18858:	f843 5c08 	str.w	r5, [r3, #-8]
   1885c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18860:	f843 5c04 	str.w	r5, [r3, #-4]
   18864:	42b3      	cmp	r3, r6
   18866:	d1ec      	bne.n	18842 <memcpy+0x1e>
   18868:	1c7b      	adds	r3, r7, #1
   1886a:	f002 0c0f 	and.w	ip, r2, #15
   1886e:	f1bc 0f03 	cmp.w	ip, #3
   18872:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18876:	4419      	add	r1, r3
   18878:	4403      	add	r3, r0
   1887a:	d922      	bls.n	188c2 <memcpy+0x9e>
   1887c:	460e      	mov	r6, r1
   1887e:	461d      	mov	r5, r3
   18880:	4664      	mov	r4, ip
   18882:	f856 7b04 	ldr.w	r7, [r6], #4
   18886:	3c04      	subs	r4, #4
   18888:	2c03      	cmp	r4, #3
   1888a:	f845 7b04 	str.w	r7, [r5], #4
   1888e:	d8f8      	bhi.n	18882 <memcpy+0x5e>
   18890:	f1ac 0404 	sub.w	r4, ip, #4
   18894:	f002 0203 	and.w	r2, r2, #3
   18898:	f024 0403 	bic.w	r4, r4, #3
   1889c:	3404      	adds	r4, #4
   1889e:	4423      	add	r3, r4
   188a0:	4421      	add	r1, r4
   188a2:	b132      	cbz	r2, 188b2 <memcpy+0x8e>
   188a4:	440a      	add	r2, r1
   188a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   188aa:	4291      	cmp	r1, r2
   188ac:	f803 4b01 	strb.w	r4, [r3], #1
   188b0:	d1f9      	bne.n	188a6 <memcpy+0x82>
   188b2:	bcf0      	pop	{r4, r5, r6, r7}
   188b4:	4770      	bx	lr
   188b6:	4603      	mov	r3, r0
   188b8:	2a00      	cmp	r2, #0
   188ba:	d1f3      	bne.n	188a4 <memcpy+0x80>
   188bc:	e7f9      	b.n	188b2 <memcpy+0x8e>
   188be:	4603      	mov	r3, r0
   188c0:	e7f0      	b.n	188a4 <memcpy+0x80>
   188c2:	4662      	mov	r2, ip
   188c4:	2a00      	cmp	r2, #0
   188c6:	d1ed      	bne.n	188a4 <memcpy+0x80>
   188c8:	e7f3      	b.n	188b2 <memcpy+0x8e>
   188ca:	bf00      	nop

000188cc <memset>:
   188cc:	0783      	lsls	r3, r0, #30
   188ce:	b4f0      	push	{r4, r5, r6, r7}
   188d0:	d048      	beq.n	18964 <memset+0x98>
   188d2:	1e54      	subs	r4, r2, #1
   188d4:	2a00      	cmp	r2, #0
   188d6:	d043      	beq.n	18960 <memset+0x94>
   188d8:	b2cd      	uxtb	r5, r1
   188da:	4603      	mov	r3, r0
   188dc:	e002      	b.n	188e4 <memset+0x18>
   188de:	2c00      	cmp	r4, #0
   188e0:	d03e      	beq.n	18960 <memset+0x94>
   188e2:	4614      	mov	r4, r2
   188e4:	f803 5b01 	strb.w	r5, [r3], #1
   188e8:	f013 0f03 	tst.w	r3, #3
   188ec:	f104 32ff 	add.w	r2, r4, #4294967295
   188f0:	d1f5      	bne.n	188de <memset+0x12>
   188f2:	2c03      	cmp	r4, #3
   188f4:	d92d      	bls.n	18952 <memset+0x86>
   188f6:	b2cd      	uxtb	r5, r1
   188f8:	2c0f      	cmp	r4, #15
   188fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   188fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18902:	d918      	bls.n	18936 <memset+0x6a>
   18904:	f1a4 0710 	sub.w	r7, r4, #16
   18908:	f103 0610 	add.w	r6, r3, #16
   1890c:	461a      	mov	r2, r3
   1890e:	093f      	lsrs	r7, r7, #4
   18910:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18914:	6015      	str	r5, [r2, #0]
   18916:	3210      	adds	r2, #16
   18918:	f842 5c0c 	str.w	r5, [r2, #-12]
   1891c:	f842 5c08 	str.w	r5, [r2, #-8]
   18920:	f842 5c04 	str.w	r5, [r2, #-4]
   18924:	42b2      	cmp	r2, r6
   18926:	d1f5      	bne.n	18914 <memset+0x48>
   18928:	f004 040f 	and.w	r4, r4, #15
   1892c:	3701      	adds	r7, #1
   1892e:	2c03      	cmp	r4, #3
   18930:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18934:	d90d      	bls.n	18952 <memset+0x86>
   18936:	461e      	mov	r6, r3
   18938:	4622      	mov	r2, r4
   1893a:	3a04      	subs	r2, #4
   1893c:	f846 5b04 	str.w	r5, [r6], #4
   18940:	2a03      	cmp	r2, #3
   18942:	d8fa      	bhi.n	1893a <memset+0x6e>
   18944:	1f22      	subs	r2, r4, #4
   18946:	f004 0403 	and.w	r4, r4, #3
   1894a:	f022 0203 	bic.w	r2, r2, #3
   1894e:	3204      	adds	r2, #4
   18950:	4413      	add	r3, r2
   18952:	b12c      	cbz	r4, 18960 <memset+0x94>
   18954:	b2c9      	uxtb	r1, r1
   18956:	441c      	add	r4, r3
   18958:	f803 1b01 	strb.w	r1, [r3], #1
   1895c:	42a3      	cmp	r3, r4
   1895e:	d1fb      	bne.n	18958 <memset+0x8c>
   18960:	bcf0      	pop	{r4, r5, r6, r7}
   18962:	4770      	bx	lr
   18964:	4614      	mov	r4, r2
   18966:	4603      	mov	r3, r0
   18968:	e7c3      	b.n	188f2 <memset+0x26>
   1896a:	bf00      	nop

0001896c <strncpy>:
   1896c:	ea40 0301 	orr.w	r3, r0, r1
   18970:	079b      	lsls	r3, r3, #30
   18972:	b470      	push	{r4, r5, r6}
   18974:	d12b      	bne.n	189ce <strncpy+0x62>
   18976:	2a03      	cmp	r2, #3
   18978:	bf84      	itt	hi
   1897a:	460b      	movhi	r3, r1
   1897c:	4605      	movhi	r5, r0
   1897e:	d926      	bls.n	189ce <strncpy+0x62>
   18980:	4619      	mov	r1, r3
   18982:	f853 4b04 	ldr.w	r4, [r3], #4
   18986:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1898a:	ea26 0604 	bic.w	r6, r6, r4
   1898e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18992:	d105      	bne.n	189a0 <strncpy+0x34>
   18994:	3a04      	subs	r2, #4
   18996:	f845 4b04 	str.w	r4, [r5], #4
   1899a:	2a03      	cmp	r2, #3
   1899c:	4619      	mov	r1, r3
   1899e:	d8ef      	bhi.n	18980 <strncpy+0x14>
   189a0:	b19a      	cbz	r2, 189ca <strncpy+0x5e>
   189a2:	780c      	ldrb	r4, [r1, #0]
   189a4:	3a01      	subs	r2, #1
   189a6:	1c6b      	adds	r3, r5, #1
   189a8:	702c      	strb	r4, [r5, #0]
   189aa:	b13c      	cbz	r4, 189bc <strncpy+0x50>
   189ac:	b16a      	cbz	r2, 189ca <strncpy+0x5e>
   189ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   189b2:	3a01      	subs	r2, #1
   189b4:	f803 4b01 	strb.w	r4, [r3], #1
   189b8:	2c00      	cmp	r4, #0
   189ba:	d1f7      	bne.n	189ac <strncpy+0x40>
   189bc:	b12a      	cbz	r2, 189ca <strncpy+0x5e>
   189be:	441a      	add	r2, r3
   189c0:	2100      	movs	r1, #0
   189c2:	f803 1b01 	strb.w	r1, [r3], #1
   189c6:	4293      	cmp	r3, r2
   189c8:	d1fb      	bne.n	189c2 <strncpy+0x56>
   189ca:	bc70      	pop	{r4, r5, r6}
   189cc:	4770      	bx	lr
   189ce:	4605      	mov	r5, r0
   189d0:	e7e6      	b.n	189a0 <strncpy+0x34>
   189d2:	bf00      	nop

000189d4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   189d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   189d6:	e003      	b.n	189e0 <LoopCopyDataInit>

000189d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   189d8:	4b0a      	ldr	r3, [pc, #40]	; (18a04 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   189da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   189dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   189de:	3104      	adds	r1, #4

000189e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   189e0:	4809      	ldr	r0, [pc, #36]	; (18a08 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   189e2:	4b0a      	ldr	r3, [pc, #40]	; (18a0c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   189e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   189e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   189e8:	d3f6      	bcc.n	189d8 <CopyDataInit>
	ldr	r2, =_sbss
   189ea:	4a09      	ldr	r2, [pc, #36]	; (18a10 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   189ec:	e002      	b.n	189f4 <LoopFillZerobss>

000189ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   189ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
   189f0:	f842 3b04 	str.w	r3, [r2], #4

000189f4 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   189f4:	4b07      	ldr	r3, [pc, #28]	; (18a14 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   189f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
   189f8:	d3f9      	bcc.n	189ee <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   189fa:	f7e7 fc9f 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   189fe:	f7fe fe7f 	bl	17700 <main>
	bx	lr    
   18a02:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a04:	00018b0c 	.word	0x00018b0c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a0c:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a10:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a14:	2004cdd8 	.word	0x2004cdd8

00018a18 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18a18:	e7fe      	b.n	18a18 <ADC1_2_IRQHandler>
   18a1a:	0000      	movs	r0, r0
   18a1c:	65532d52 	.word	0x65532d52
   18a20:	6e617672 	.word	0x6e617672
   18a24:	000d0a74 	.word	0x000d0a74
   18a28:	454c4449 	.word	0x454c4449
   18a2c:	00000000 	.word	0x00000000

00018a30 <ulKernelPriority>:
   18a30:	0000007f                                ....

00018a34 <heapSTRUCT_SIZE>:
   18a34:	00010010                                         ..

00018a36 <version>:
   18a36:	3d5a0001                                         ..

00018a38 <utm_east0>:
   18a38:	00093d5a                                Z=..

00018a3c <utm_north0>:
   18a3c:	005875e6                                .uX.

00018a40 <climb_pgain>:
   18a40:	bcf5c28f                                ....

00018a44 <climb_igain>:
   18a44:	3dcccccd                                ...=

00018a48 <level_gaz>:
   18a48:	3e9eb852                                R..>

00018a4c <nav_east0>:
   18a4c:	00093d5a                                Z=..

00018a50 <nav_north0>:
   18a50:	005875e6                                .uX.

00018a54 <nb_waypoint>:
   18a54:	00000007 33323130 37363534 42413938     ....0123456789AB
   18a64:	46454443                                CDEF

00018a68 <failsafe>:
	...
   18a7c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18a8c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18a9c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18aac:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18abc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18acc:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18adc:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18aec:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18afc:	6e617672 00000074 6e657665 00000074     rvant...event...
