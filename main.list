
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 a1 8a 01 00 e5 8a 01 00 e5 8a 01 00     .P. ............
      10:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 00 00 00 00     ................
	...
      2c:	fd 5c 00 00 e5 8a 01 00 00 00 00 00 09 5e 00 00     .\...........^..
      3c:	45 5e 00 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     E^..............
      4c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      5c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      6c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      7c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      8c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      9c:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      ac:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      bc:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      cc:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
      dc:	e5 8a 01 00 e5 8a 01 00 e5 8a 01 00 e5 8a 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018bc4 	.word	0x00018bc4
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd4 	.word	0x2004cdd4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd4d 	bl	5e98 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe8c 	bl	4168 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe87 	bl	4168 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe67 	bl	4180 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fea6 	bl	4240 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe50 	bl	41d0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe40 	bl	41d0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe33 	bl	41d0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe54 	bl	4240 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe4b 	bl	4240 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fdca 	bl	4180 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe99 	bl	533c <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fdbe 	bl	4240 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fdb5 	bl	4240 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd30 	bl	4180 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc67 	bl	4128 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc5b 	bl	4128 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc55 	bl	4128 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc4f 	bl	4128 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fcb9 	bl	4240 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc50 	bl	4180 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f835 	bl	29ac <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcfa 	bl	533c <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	3308      	adds	r3, #8
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	fbb3 f2f2 	udiv	r2, r3, r2
    29ee:	6839      	ldr	r1, [r7, #0]
    29f0:	fb01 f202 	mul.w	r2, r1, r2
    29f4:	1a9b      	subs	r3, r3, r2
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00d      	beq.n	2a16 <getGCD+0x3a>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	683a      	ldr	r2, [r7, #0]
    29fe:	fbb3 f2f2 	udiv	r2, r3, r2
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	fb01 f202 	mul.w	r2, r1, r2
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	6838      	ldr	r0, [r7, #0]
    2a0c:	4619      	mov	r1, r3
    2a0e:	f7ff ffe5 	bl	29dc <getGCD>
    2a12:	4603      	mov	r3, r0
    2a14:	e000      	b.n	2a18 <getGCD+0x3c>
    2a16:	683b      	ldr	r3, [r7, #0]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3708      	adds	r7, #8
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a26:	f240 0328 	movw	r3, #40	; 0x28
    2a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a32:	2301      	movs	r3, #1
    2a34:	607b      	str	r3, [r7, #4]
    2a36:	e00f      	b.n	2a58 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a38:	f240 0328 	movw	r3, #40	; 0x28
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a46:	6838      	ldr	r0, [r7, #0]
    2a48:	4619      	mov	r1, r3
    2a4a:	f7ff ffc7 	bl	29dc <getGCD>
    2a4e:	4603      	mov	r3, r0
    2a50:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3301      	adds	r3, #1
    2a56:	607b      	str	r3, [r7, #4]
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	2b0c      	cmp	r3, #12
    2a5c:	ddec      	ble.n	2a38 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a5e:	683b      	ldr	r3, [r7, #0]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b091      	sub	sp, #68	; 0x44
    2a6c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a6e:	f7ff ffd7 	bl	2a20 <GCDOfTaskPeriod>
    2a72:	4602      	mov	r2, r0
    2a74:	f240 6358 	movw	r3, #1624	; 0x658
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a7e:	f640 0094 	movw	r0, #2196	; 0x894
    2a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a86:	f001 fb4f 	bl	4128 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2a8a:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a92:	f001 fb49 	bl	4128 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2a96:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb43 	bl	4128 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aa2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb3d 	bl	4128 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2aae:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb37 	bl	4128 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2aba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb31 	bl	4128 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ac6:	2300      	movs	r3, #0
    2ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    2aca:	e02b      	b.n	2b24 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2acc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ace:	2034      	movs	r0, #52	; 0x34
    2ad0:	f003 f9e2 	bl	5e98 <pvPortMalloc>
    2ad4:	4602      	mov	r2, r0
    2ad6:	00a3      	lsls	r3, r4, #2
    2ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2adc:	440b      	add	r3, r1
    2ade:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2aea:	4413      	add	r3, r2
    2aec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af8:	440b      	add	r3, r1
    2afa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2afe:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b08:	4413      	add	r3, r2
    2b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b0e:	3320      	adds	r3, #32
    2b10:	f640 0094 	movw	r0, #2196	; 0x894
    2b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b18:	4619      	mov	r1, r3
    2b1a:	f001 fb31 	bl	4180 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b20:	3301      	adds	r3, #1
    2b22:	63bb      	str	r3, [r7, #56]	; 0x38
    2b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b26:	2b0c      	cmp	r3, #12
    2b28:	ddd0      	ble.n	2acc <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b2a:	3744      	adds	r7, #68	; 0x44
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd90      	pop	{r4, r7, pc}

00002b30 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b36:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	60fb      	str	r3, [r7, #12]
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	dd22      	ble.n	2b8e <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b48:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	68db      	ldr	r3, [r3, #12]
    2b52:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b54:	f002 fbf2 	bl	533c <xTaskGetTickCount>
    2b58:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b5a:	2300      	movs	r3, #0
    2b5c:	613b      	str	r3, [r7, #16]
    2b5e:	e012      	b.n	2b86 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff21 	bl	29ac <xEventGetxTag>
    2b6a:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	429a      	cmp	r2, r3
    2b74:	d801      	bhi.n	2b7a <xIsExecutableEventArrive+0x4a>
    2b76:	2301      	movs	r3, #1
    2b78:	e00a      	b.n	2b90 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b7a:	697b      	ldr	r3, [r7, #20]
    2b7c:	685b      	ldr	r3, [r3, #4]
    2b7e:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b80:	693b      	ldr	r3, [r7, #16]
    2b82:	3301      	adds	r3, #1
    2b84:	613b      	str	r3, [r7, #16]
    2b86:	693a      	ldr	r2, [r7, #16]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	dbe8      	blt.n	2b60 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3718      	adds	r7, #24
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	429a      	cmp	r2, r3
    2bac:	d201      	bcs.n	2bb2 <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bae:	2301      	movs	r3, #1
    2bb0:	e02a      	b.n	2c08 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d123      	bne.n	2c06 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d201      	bcs.n	2bce <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bca:	2301      	movs	r3, #1
    2bcc:	e01c      	b.n	2c08 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	685b      	ldr	r3, [r3, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d115      	bne.n	2c06 <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	68da      	ldr	r2, [r3, #12]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	68db      	ldr	r3, [r3, #12]
    2be2:	429a      	cmp	r2, r3
    2be4:	da01      	bge.n	2bea <xCompareFunction+0x52>
            {
                return pdTRUE;
    2be6:	2301      	movs	r3, #1
    2be8:	e00e      	b.n	2c08 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	68da      	ldr	r2, [r3, #12]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	68db      	ldr	r3, [r3, #12]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d107      	bne.n	2c06 <xCompareFunction+0x6e>
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	689a      	ldr	r2, [r3, #8]
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	689b      	ldr	r3, [r3, #8]
    2bfe:	429a      	cmp	r2, r3
    2c00:	da01      	bge.n	2c06 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c02:	2301      	movs	r3, #1
    2c04:	e000      	b.n	2c08 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	370c      	adds	r7, #12
    2c0c:	46bd      	mov	sp, r7
    2c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c12:	4770      	bx	lr

00002c14 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c14:	b480      	push	{r7}
    2c16:	b087      	sub	sp, #28
    2c18:	af00      	add	r7, sp, #0
    2c1a:	60f8      	str	r0, [r7, #12]
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	68fa      	ldr	r2, [r7, #12]
    2c28:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c2a:	697b      	ldr	r3, [r7, #20]
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2200      	movs	r2, #0
    2c34:	615a      	str	r2, [r3, #20]
}
    2c36:	371c      	adds	r7, #28
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b088      	sub	sp, #32
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c48:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c50:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	68db      	ldr	r3, [r3, #12]
    2c56:	4618      	mov	r0, r3
    2c58:	f7ff fea8 	bl	29ac <xEventGetxTag>
    2c5c:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c5e:	f003 f8a1 	bl	5da4 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c62:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c6e:	697b      	ldr	r3, [r7, #20]
    2c70:	3308      	adds	r3, #8
    2c72:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c74:	2300      	movs	r3, #0
    2c76:	61bb      	str	r3, [r7, #24]
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2c7a:	69fb      	ldr	r3, [r7, #28]
    2c7c:	689b      	ldr	r3, [r3, #8]
    2c7e:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	3301      	adds	r3, #1
    2c84:	61bb      	str	r3, [r7, #24]
    2c86:	69ba      	ldr	r2, [r7, #24]
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da0d      	bge.n	2caa <prvEventListGenericInsert+0x6a>
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	4618      	mov	r0, r3
    2c96:	f7ff fe89 	bl	29ac <xEventGetxTag>
    2c9a:	4603      	mov	r3, r0
    2c9c:	6938      	ldr	r0, [r7, #16]
    2c9e:	4619      	mov	r1, r3
    2ca0:	f7ff ff7a 	bl	2b98 <xCompareFunction>
    2ca4:	4603      	mov	r3, r0
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1e7      	bne.n	2c7a <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2caa:	f003 f891 	bl	5dd0 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	689b      	ldr	r3, [r3, #8]
    2cb2:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cb4:	69fb      	ldr	r3, [r7, #28]
    2cb6:	685a      	ldr	r2, [r3, #4]
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	687a      	ldr	r2, [r7, #4]
    2cc2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	69fa      	ldr	r2, [r7, #28]
    2cc8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cca:	69fb      	ldr	r3, [r7, #28]
    2ccc:	687a      	ldr	r2, [r7, #4]
    2cce:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	697a      	ldr	r2, [r7, #20]
    2cd4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cd6:	697b      	ldr	r3, [r7, #20]
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	1c5a      	adds	r2, r3, #1
    2cdc:	697b      	ldr	r3, [r7, #20]
    2cde:	601a      	str	r2, [r3, #0]
}
    2ce0:	3720      	adds	r7, #32
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	bf00      	nop

00002ce8 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b086      	sub	sp, #24
    2cec:	af00      	add	r7, sp, #0
    2cee:	60f8      	str	r0, [r7, #12]
    2cf0:	60b9      	str	r1, [r7, #8]
    2cf2:	607a      	str	r2, [r7, #4]
    2cf4:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2cf6:	2300      	movs	r3, #0
    2cf8:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2cfa:	f003 f853 	bl	5da4 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2cfe:	f640 0394 	movw	r3, #2196	; 0x894
    2d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d06:	68db      	ldr	r3, [r3, #12]
    2d08:	68db      	ldr	r3, [r3, #12]
    2d0a:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d0c:	697b      	ldr	r3, [r7, #20]
    2d0e:	3320      	adds	r3, #32
    2d10:	4618      	mov	r0, r3
    2d12:	f001 fa95 	bl	4240 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d16:	697b      	ldr	r3, [r7, #20]
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d1c:	68b8      	ldr	r0, [r7, #8]
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	697a      	ldr	r2, [r7, #20]
    2d22:	f7ff ff77 	bl	2c14 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	683a      	ldr	r2, [r7, #0]
    2d2a:	3318      	adds	r3, #24
    2d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d30:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	697a      	ldr	r2, [r7, #20]
    2d38:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d3a:	f003 f849 	bl	5dd0 <vPortExitCritical>

    return pxNewEvent;
    2d3e:	697b      	ldr	r3, [r7, #20]
}
    2d40:	4618      	mov	r0, r3
    2d42:	3718      	adds	r7, #24
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}

00002d48 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b08c      	sub	sp, #48	; 0x30
    2d4c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d4e:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d56:	68db      	ldr	r3, [r3, #12]
    2d58:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d5a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	623b      	str	r3, [r7, #32]
    2d66:	6a3b      	ldr	r3, [r7, #32]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	f340 80d1 	ble.w	2f10 <vEventGenericScatter+0x1c8>
    {
        xCurrentTime = xTaskGetTickCount();
    2d6e:	f002 fae5 	bl	533c <xTaskGetTickCount>
    2d72:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d74:	2300      	movs	r3, #0
    2d76:	62bb      	str	r3, [r7, #40]	; 0x28
    2d78:	e0c5      	b.n	2f06 <vEventGenericScatter+0x1be>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d7c:	68db      	ldr	r3, [r3, #12]
    2d7e:	4618      	mov	r0, r3
    2d80:	f7ff fe14 	bl	29ac <xEventGetxTag>
    2d84:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d86:	69bb      	ldr	r3, [r7, #24]
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	429a      	cmp	r2, r3
    2d8e:	f200 80b4 	bhi.w	2efa <vEventGenericScatter+0x1b2>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2d98:	697b      	ldr	r3, [r7, #20]
    2d9a:	6819      	ldr	r1, [r3, #0]
    2d9c:	f640 120c 	movw	r2, #2316	; 0x90c
    2da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2da4:	460b      	mov	r3, r1
    2da6:	00db      	lsls	r3, r3, #3
    2da8:	1a5b      	subs	r3, r3, r1
    2daa:	00db      	lsls	r3, r3, #3
    2dac:	4413      	add	r3, r2
    2dae:	3310      	adds	r3, #16
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2db4:	f002 fff6 	bl	5da4 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dba:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dbe:	685b      	ldr	r3, [r3, #4]
    2dc0:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dc2:	68f8      	ldr	r0, [r7, #12]
    2dc4:	f001 fa3c 	bl	4240 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	6819      	ldr	r1, [r3, #0]
    2dcc:	f640 120c 	movw	r2, #2316	; 0x90c
    2dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd4:	460b      	mov	r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	1a5b      	subs	r3, r3, r1
    2dda:	00db      	lsls	r3, r3, #3
    2ddc:	4413      	add	r3, r2
    2dde:	331c      	adds	r3, #28
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	697b      	ldr	r3, [r7, #20]
    2de4:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2de6:	697b      	ldr	r3, [r7, #20]
    2de8:	685a      	ldr	r2, [r3, #4]
    2dea:	f640 110c 	movw	r1, #2316	; 0x90c
    2dee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2df2:	4613      	mov	r3, r2
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	1a9b      	subs	r3, r3, r2
    2df8:	00db      	lsls	r3, r3, #3
    2dfa:	440b      	add	r3, r1
    2dfc:	3334      	adds	r3, #52	; 0x34
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	1c58      	adds	r0, r3, #1
    2e02:	f640 110c 	movw	r1, #2316	; 0x90c
    2e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e0a:	4613      	mov	r3, r2
    2e0c:	00db      	lsls	r3, r3, #3
    2e0e:	1a9b      	subs	r3, r3, r2
    2e10:	00db      	lsls	r3, r3, #3
    2e12:	440b      	add	r3, r1
    2e14:	3334      	adds	r3, #52	; 0x34
    2e16:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e18:	697b      	ldr	r3, [r7, #20]
    2e1a:	6859      	ldr	r1, [r3, #4]
    2e1c:	f640 120c 	movw	r2, #2316	; 0x90c
    2e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e24:	460b      	mov	r3, r1
    2e26:	00db      	lsls	r3, r3, #3
    2e28:	1a5b      	subs	r3, r3, r1
    2e2a:	00db      	lsls	r3, r3, #3
    2e2c:	4413      	add	r3, r2
    2e2e:	681a      	ldr	r2, [r3, #0]
    2e30:	697b      	ldr	r3, [r7, #20]
    2e32:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e34:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e3c:	68f9      	ldr	r1, [r7, #12]
    2e3e:	f001 f99f 	bl	4180 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e42:	2301      	movs	r3, #1
    2e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e46:	e051      	b.n	2eec <vEventGenericScatter+0x1a4>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e48:	697b      	ldr	r3, [r7, #20]
    2e4a:	6899      	ldr	r1, [r3, #8]
    2e4c:	697b      	ldr	r3, [r7, #20]
    2e4e:	68da      	ldr	r2, [r3, #12]
    2e50:	697b      	ldr	r3, [r7, #20]
    2e52:	3318      	adds	r3, #24
    2e54:	68b8      	ldr	r0, [r7, #8]
    2e56:	f7ff ff47 	bl	2ce8 <pxEventGenericCreate>
    2e5a:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e60:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	f640 120c 	movw	r2, #2316	; 0x90c
    2e6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e6e:	460b      	mov	r3, r1
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	1a5b      	subs	r3, r3, r1
    2e74:	005b      	lsls	r3, r3, #1
    2e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e78:	440b      	add	r3, r1
    2e7a:	3306      	adds	r3, #6
    2e7c:	009b      	lsls	r3, r3, #2
    2e7e:	4413      	add	r3, r2
    2e80:	685a      	ldr	r2, [r3, #4]
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	685a      	ldr	r2, [r3, #4]
    2e8a:	f640 110c 	movw	r1, #2316	; 0x90c
    2e8e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e92:	4613      	mov	r3, r2
    2e94:	00db      	lsls	r3, r3, #3
    2e96:	1a9b      	subs	r3, r3, r2
    2e98:	00db      	lsls	r3, r3, #3
    2e9a:	440b      	add	r3, r1
    2e9c:	3334      	adds	r3, #52	; 0x34
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	1c58      	adds	r0, r3, #1
    2ea2:	f640 110c 	movw	r1, #2316	; 0x90c
    2ea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eaa:	4613      	mov	r3, r2
    2eac:	00db      	lsls	r3, r3, #3
    2eae:	1a9b      	subs	r3, r3, r2
    2eb0:	00db      	lsls	r3, r3, #3
    2eb2:	440b      	add	r3, r1
    2eb4:	3334      	adds	r3, #52	; 0x34
    2eb6:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2eb8:	697b      	ldr	r3, [r7, #20]
    2eba:	6859      	ldr	r1, [r3, #4]
    2ebc:	f640 120c 	movw	r2, #2316	; 0x90c
    2ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ec4:	460b      	mov	r3, r1
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	1a5b      	subs	r3, r3, r1
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	4413      	add	r3, r2
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	3320      	adds	r3, #32
    2ed8:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2edc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ee0:	4619      	mov	r1, r3
    2ee2:	f001 f94d 	bl	4180 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ee8:	3301      	adds	r3, #1
    2eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    2eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2eee:	693b      	ldr	r3, [r7, #16]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	dba9      	blt.n	2e48 <vEventGenericScatter+0x100>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2ef4:	f002 ff6c 	bl	5dd0 <vPortExitCritical>
    2ef8:	e002      	b.n	2f00 <vEventGenericScatter+0x1b8>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f02:	3301      	adds	r3, #1
    2f04:	62bb      	str	r3, [r7, #40]	; 0x28
    2f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f08:	6a3b      	ldr	r3, [r7, #32]
    2f0a:	429a      	cmp	r2, r3
    2f0c:	f6ff af35 	blt.w	2d7a <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f10:	3730      	adds	r7, #48	; 0x30
    2f12:	46bd      	mov	sp, r7
    2f14:	bd80      	pop	{r7, pc}
    2f16:	bf00      	nop

00002f18 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f18:	b480      	push	{r7}
    2f1a:	b083      	sub	sp, #12
    2f1c:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f1e:	232f      	movs	r3, #47	; 0x2f
    2f20:	607b      	str	r3, [r7, #4]
    while(i--)
    2f22:	e030      	b.n	2f86 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f24:	f240 6260 	movw	r2, #1632	; 0x660
    2f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f2c:	6879      	ldr	r1, [r7, #4]
    2f2e:	460b      	mov	r3, r1
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	440b      	add	r3, r1
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	4413      	add	r3, r2
    2f38:	2200      	movs	r2, #0
    2f3a:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f3c:	f240 6260 	movw	r2, #1632	; 0x660
    2f40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f44:	6879      	ldr	r1, [r7, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	005b      	lsls	r3, r3, #1
    2f4a:	440b      	add	r3, r1
    2f4c:	009b      	lsls	r3, r3, #2
    2f4e:	4413      	add	r3, r2
    2f50:	3308      	adds	r3, #8
    2f52:	2200      	movs	r2, #0
    2f54:	601a      	str	r2, [r3, #0]
    2f56:	f240 6260 	movw	r2, #1632	; 0x660
    2f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5e:	6879      	ldr	r1, [r7, #4]
    2f60:	460b      	mov	r3, r1
    2f62:	005b      	lsls	r3, r3, #1
    2f64:	440b      	add	r3, r1
    2f66:	009b      	lsls	r3, r3, #2
    2f68:	4413      	add	r3, r2
    2f6a:	3308      	adds	r3, #8
    2f6c:	6818      	ldr	r0, [r3, #0]
    2f6e:	f240 6260 	movw	r2, #1632	; 0x660
    2f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f76:	6879      	ldr	r1, [r7, #4]
    2f78:	460b      	mov	r3, r1
    2f7a:	005b      	lsls	r3, r3, #1
    2f7c:	440b      	add	r3, r1
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	4413      	add	r3, r2
    2f82:	3304      	adds	r3, #4
    2f84:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	1e5a      	subs	r2, r3, #1
    2f8a:	607a      	str	r2, [r7, #4]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d1c9      	bne.n	2f24 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2f90:	370c      	adds	r7, #12
    2f92:	46bd      	mov	sp, r7
    2f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f98:	4770      	bx	lr
    2f9a:	bf00      	nop

00002f9c <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b08a      	sub	sp, #40	; 0x28
    2fa0:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fa2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	61fb      	str	r3, [r7, #28]
    2fae:	69fb      	ldr	r3, [r7, #28]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	f340 80ea 	ble.w	318a <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fb6:	f7ff ffaf 	bl	2f18 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fba:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc2:	68db      	ldr	r3, [r3, #12]
    2fc4:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2fc6:	2300      	movs	r3, #0
    2fc8:	627b      	str	r3, [r7, #36]	; 0x24
    2fca:	e0a6      	b.n	311a <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fcc:	6a3b      	ldr	r3, [r7, #32]
    2fce:	68db      	ldr	r3, [r3, #12]
    2fd0:	4618      	mov	r0, r3
    2fd2:	f7ff fcdf 	bl	2994 <xEventGetpxDestination>
    2fd6:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2fd8:	f640 120c 	movw	r2, #2316	; 0x90c
    2fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fe0:	69b9      	ldr	r1, [r7, #24]
    2fe2:	460b      	mov	r3, r1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	1a5b      	subs	r3, r3, r1
    2fe8:	00db      	lsls	r3, r3, #3
    2fea:	4413      	add	r3, r2
    2fec:	3334      	adds	r3, #52	; 0x34
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	f640 120c 	movw	r2, #2316	; 0x90c
    2ff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ff8:	69b9      	ldr	r1, [r7, #24]
    2ffa:	460b      	mov	r3, r1
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	1a5b      	subs	r3, r3, r1
    3000:	00db      	lsls	r3, r3, #3
    3002:	4413      	add	r3, r2
    3004:	330c      	adds	r3, #12
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	4298      	cmp	r0, r3
    300a:	f040 8083 	bne.w	3114 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    300e:	69ba      	ldr	r2, [r7, #24]
    3010:	4613      	mov	r3, r2
    3012:	005b      	lsls	r3, r3, #1
    3014:	4413      	add	r3, r2
    3016:	009b      	lsls	r3, r3, #2
    3018:	f240 6260 	movw	r2, #1632	; 0x660
    301c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3020:	4413      	add	r3, r2
    3022:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3024:	f640 120c 	movw	r2, #2316	; 0x90c
    3028:	f2c2 0200 	movt	r2, #8192	; 0x2000
    302c:	69b9      	ldr	r1, [r7, #24]
    302e:	460b      	mov	r3, r1
    3030:	00db      	lsls	r3, r3, #3
    3032:	1a5b      	subs	r3, r3, r1
    3034:	00db      	lsls	r3, r3, #3
    3036:	4413      	add	r3, r2
    3038:	3334      	adds	r3, #52	; 0x34
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	2b01      	cmp	r3, #1
    303e:	dd57      	ble.n	30f0 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3040:	697b      	ldr	r3, [r7, #20]
    3042:	685b      	ldr	r3, [r3, #4]
    3044:	613b      	str	r3, [r7, #16]
    3046:	693b      	ldr	r3, [r7, #16]
    3048:	2b00      	cmp	r3, #0
    304a:	dd41      	ble.n	30d0 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    304c:	6a3b      	ldr	r3, [r7, #32]
    304e:	68db      	ldr	r3, [r3, #12]
    3050:	4618      	mov	r0, r3
    3052:	f7ff fcb7 	bl	29c4 <xEventGetxData>
    3056:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3058:	6a3b      	ldr	r3, [r7, #32]
    305a:	68db      	ldr	r3, [r3, #12]
    305c:	4618      	mov	r0, r3
    305e:	f7ff fca5 	bl	29ac <xEventGetxTag>
    3062:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3064:	697b      	ldr	r3, [r7, #20]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	68fa      	ldr	r2, [r7, #12]
    306a:	6811      	ldr	r1, [r2, #0]
    306c:	693a      	ldr	r2, [r7, #16]
    306e:	3206      	adds	r2, #6
    3070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    3074:	697b      	ldr	r3, [r7, #20]
    3076:	6859      	ldr	r1, [r3, #4]
    3078:	1c4a      	adds	r2, r1, #1
    307a:	697b      	ldr	r3, [r7, #20]
    307c:	605a      	str	r2, [r3, #4]
    307e:	f640 120c 	movw	r2, #2316	; 0x90c
    3082:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3086:	69b8      	ldr	r0, [r7, #24]
    3088:	4603      	mov	r3, r0
    308a:	00db      	lsls	r3, r3, #3
    308c:	1a1b      	subs	r3, r3, r0
    308e:	00db      	lsls	r3, r3, #3
    3090:	4413      	add	r3, r2
    3092:	3334      	adds	r3, #52	; 0x34
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	3b01      	subs	r3, #1
    3098:	4299      	cmp	r1, r3
    309a:	d102      	bne.n	30a2 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	2201      	movs	r2, #1
    30a0:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30a2:	697b      	ldr	r3, [r7, #20]
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	68da      	ldr	r2, [r3, #12]
    30a8:	68bb      	ldr	r3, [r7, #8]
    30aa:	685b      	ldr	r3, [r3, #4]
    30ac:	429a      	cmp	r2, r3
    30ae:	d204      	bcs.n	30ba <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30b0:	697b      	ldr	r3, [r7, #20]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	68ba      	ldr	r2, [r7, #8]
    30b6:	6852      	ldr	r2, [r2, #4]
    30b8:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ba:	6a3b      	ldr	r3, [r7, #32]
    30bc:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30be:	6a3b      	ldr	r3, [r7, #32]
    30c0:	685b      	ldr	r3, [r3, #4]
    30c2:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	68db      	ldr	r3, [r3, #12]
    30c8:	4618      	mov	r0, r3
    30ca:	f000 fa15 	bl	34f8 <vEventGenericDelete>
    30ce:	e021      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30d0:	6a3b      	ldr	r3, [r7, #32]
    30d2:	68da      	ldr	r2, [r3, #12]
    30d4:	697b      	ldr	r3, [r7, #20]
    30d6:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30d8:	697b      	ldr	r3, [r7, #20]
    30da:	2201      	movs	r2, #1
    30dc:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30de:	6a3b      	ldr	r3, [r7, #32]
    30e0:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30e2:	6a3b      	ldr	r3, [r7, #32]
    30e4:	685b      	ldr	r3, [r3, #4]
    30e6:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    30e8:	6878      	ldr	r0, [r7, #4]
    30ea:	f001 f8a9 	bl	4240 <vListRemove>
    30ee:	e011      	b.n	3114 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    30f0:	6a3b      	ldr	r3, [r7, #32]
    30f2:	68da      	ldr	r2, [r3, #12]
    30f4:	697b      	ldr	r3, [r7, #20]
    30f6:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	2201      	movs	r2, #1
    30fc:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2201      	movs	r2, #1
    3102:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    3104:	6a3b      	ldr	r3, [r7, #32]
    3106:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3108:	6a3b      	ldr	r3, [r7, #32]
    310a:	685b      	ldr	r3, [r3, #4]
    310c:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    310e:	6878      	ldr	r0, [r7, #4]
    3110:	f001 f896 	bl	4240 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3116:	3301      	adds	r3, #1
    3118:	627b      	str	r3, [r7, #36]	; 0x24
    311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    311c:	69fb      	ldr	r3, [r7, #28]
    311e:	429a      	cmp	r2, r3
    3120:	f6ff af54 	blt.w	2fcc <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3124:	2300      	movs	r3, #0
    3126:	627b      	str	r3, [r7, #36]	; 0x24
    3128:	e02c      	b.n	3184 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    312a:	f240 6260 	movw	r2, #1632	; 0x660
    312e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3132:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3134:	460b      	mov	r3, r1
    3136:	005b      	lsls	r3, r3, #1
    3138:	440b      	add	r3, r1
    313a:	009b      	lsls	r3, r3, #2
    313c:	4413      	add	r3, r2
    313e:	3308      	adds	r3, #8
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d01b      	beq.n	317e <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3146:	f240 6260 	movw	r2, #1632	; 0x660
    314a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3150:	460b      	mov	r3, r1
    3152:	005b      	lsls	r3, r3, #1
    3154:	440b      	add	r3, r1
    3156:	009b      	lsls	r3, r3, #2
    3158:	4413      	add	r3, r2
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	3320      	adds	r3, #32
    315e:	4618      	mov	r0, r3
    3160:	f7ff fd6e 	bl	2c40 <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    3164:	f640 120c 	movw	r2, #2316	; 0x90c
    3168:	f2c2 0200 	movt	r2, #8192	; 0x2000
    316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    316e:	460b      	mov	r3, r1
    3170:	00db      	lsls	r3, r3, #3
    3172:	1a5b      	subs	r3, r3, r1
    3174:	00db      	lsls	r3, r3, #3
    3176:	4413      	add	r3, r2
    3178:	3334      	adds	r3, #52	; 0x34
    317a:	2200      	movs	r2, #0
    317c:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3180:	3301      	adds	r3, #1
    3182:	627b      	str	r3, [r7, #36]	; 0x24
    3184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3186:	2b2e      	cmp	r3, #46	; 0x2e
    3188:	ddcf      	ble.n	312a <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    318a:	3728      	adds	r7, #40	; 0x28
    318c:	46bd      	mov	sp, r7
    318e:	bd80      	pop	{r7, pc}

00003190 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    3190:	b480      	push	{r7}
    3192:	b087      	sub	sp, #28
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	68db      	ldr	r3, [r3, #12]
    319c:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    319e:	697b      	ldr	r3, [r7, #20]
    31a0:	685b      	ldr	r3, [r3, #4]
    31a2:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31a4:	697b      	ldr	r3, [r7, #20]
    31a6:	68db      	ldr	r3, [r3, #12]
    31a8:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31aa:	f640 120c 	movw	r2, #2316	; 0x90c
    31ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31b2:	6939      	ldr	r1, [r7, #16]
    31b4:	460b      	mov	r3, r1
    31b6:	00db      	lsls	r3, r3, #3
    31b8:	1a5b      	subs	r3, r3, r1
    31ba:	00db      	lsls	r3, r3, #3
    31bc:	4413      	add	r3, r2
    31be:	3324      	adds	r3, #36	; 0x24
    31c0:	681a      	ldr	r2, [r3, #0]
    31c2:	68fb      	ldr	r3, [r7, #12]
    31c4:	4413      	add	r3, r2
    31c6:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31c8:	f240 6358 	movw	r3, #1624	; 0x658
    31cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d0:	681a      	ldr	r2, [r3, #0]
    31d2:	68fb      	ldr	r3, [r7, #12]
    31d4:	fbb3 f1f2 	udiv	r1, r3, r2
    31d8:	fb02 f201 	mul.w	r2, r2, r1
    31dc:	1a9b      	subs	r3, r3, r2
    31de:	2b02      	cmp	r3, #2
    31e0:	d932      	bls.n	3248 <pOverLap+0xb8>
    31e2:	f240 6358 	movw	r3, #1624	; 0x658
    31e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ea:	681a      	ldr	r2, [r3, #0]
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	fbb3 f1f2 	udiv	r1, r3, r2
    31f2:	fb02 f201 	mul.w	r2, r2, r1
    31f6:	1a9a      	subs	r2, r3, r2
    31f8:	f240 6358 	movw	r3, #1624	; 0x658
    31fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	3b03      	subs	r3, #3
    3204:	429a      	cmp	r2, r3
    3206:	d81f      	bhi.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3208:	f240 6358 	movw	r3, #1624	; 0x658
    320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3210:	681a      	ldr	r2, [r3, #0]
    3212:	68bb      	ldr	r3, [r7, #8]
    3214:	fbb3 f1f2 	udiv	r1, r3, r2
    3218:	fb02 f201 	mul.w	r2, r2, r1
    321c:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    321e:	2b02      	cmp	r3, #2
    3220:	d912      	bls.n	3248 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3222:	f240 6358 	movw	r3, #1624	; 0x658
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	681a      	ldr	r2, [r3, #0]
    322c:	68bb      	ldr	r3, [r7, #8]
    322e:	fbb3 f1f2 	udiv	r1, r3, r2
    3232:	fb02 f201 	mul.w	r2, r2, r1
    3236:	1a9a      	subs	r2, r3, r2
    3238:	f240 6358 	movw	r3, #1624	; 0x658
    323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3240:	681b      	ldr	r3, [r3, #0]
    3242:	3b03      	subs	r3, #3
    3244:	429a      	cmp	r2, r3
    3246:	d901      	bls.n	324c <pOverLap+0xbc>
    {
        return 1;
    3248:	2301      	movs	r3, #1
    324a:	e000      	b.n	324e <pOverLap+0xbe>
    }
    return 0;
    324c:	2300      	movs	r3, #0
}
    324e:	4618      	mov	r0, r3
    3250:	371c      	adds	r7, #28
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
    325a:	bf00      	nop

0000325c <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	68db      	ldr	r3, [r3, #12]
    3268:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    326a:	f240 635c 	movw	r3, #1628	; 0x65c
    326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3272:	681a      	ldr	r2, [r3, #0]
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    3278:	6878      	ldr	r0, [r7, #4]
    327a:	f7ff ff89 	bl	3190 <pOverLap>
    327e:	4603      	mov	r3, r0
    3280:	2b00      	cmp	r3, #0
    3282:	d122      	bne.n	32ca <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	6859      	ldr	r1, [r3, #4]
    3288:	f640 120c 	movw	r2, #2316	; 0x90c
    328c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3290:	460b      	mov	r3, r1
    3292:	00db      	lsls	r3, r3, #3
    3294:	1a5b      	subs	r3, r3, r1
    3296:	00db      	lsls	r3, r3, #3
    3298:	4413      	add	r3, r2
    329a:	3324      	adds	r3, #36	; 0x24
    329c:	681a      	ldr	r2, [r3, #0]
    329e:	f240 635c 	movw	r3, #1628	; 0x65c
    32a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	441a      	add	r2, r3
    32aa:	f240 635c 	movw	r3, #1628	; 0x65c
    32ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b2:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    32b4:	6878      	ldr	r0, [r7, #4]
    32b6:	f000 ffc3 	bl	4240 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32ba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32c2:	6879      	ldr	r1, [r7, #4]
    32c4:	f000 ff5c 	bl	4180 <vListInsertEnd>
    32c8:	e042      	b.n	3350 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    32ca:	f240 635c 	movw	r3, #1628	; 0x65c
    32ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d2:	681a      	ldr	r2, [r3, #0]
    32d4:	f240 6358 	movw	r3, #1624	; 0x658
    32d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	fbb2 f3f3 	udiv	r3, r2, r3
    32e2:	1c5a      	adds	r2, r3, #1
    32e4:	f240 6358 	movw	r3, #1624	; 0x658
    32e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ec:	681b      	ldr	r3, [r3, #0]
    32ee:	fb03 f302 	mul.w	r3, r3, r2
    32f2:	1cda      	adds	r2, r3, #3
    32f4:	f240 635c 	movw	r3, #1628	; 0x65c
    32f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32fc:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32fe:	f240 635c 	movw	r3, #1628	; 0x65c
    3302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3306:	681a      	ldr	r2, [r3, #0]
    3308:	68fb      	ldr	r3, [r7, #12]
    330a:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    330c:	68fb      	ldr	r3, [r7, #12]
    330e:	6859      	ldr	r1, [r3, #4]
    3310:	f640 120c 	movw	r2, #2316	; 0x90c
    3314:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3318:	460b      	mov	r3, r1
    331a:	00db      	lsls	r3, r3, #3
    331c:	1a5b      	subs	r3, r3, r1
    331e:	00db      	lsls	r3, r3, #3
    3320:	4413      	add	r3, r2
    3322:	3324      	adds	r3, #36	; 0x24
    3324:	681a      	ldr	r2, [r3, #0]
    3326:	f240 635c 	movw	r3, #1628	; 0x65c
    332a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	441a      	add	r2, r3
    3332:	f240 635c 	movw	r3, #1628	; 0x65c
    3336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333a:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    333c:	6878      	ldr	r0, [r7, #4]
    333e:	f000 ff7f 	bl	4240 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3342:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3346:	f2c2 0000 	movt	r0, #8192	; 0x2000
    334a:	6879      	ldr	r1, [r7, #4]
    334c:	f000 ff18 	bl	4180 <vListInsertEnd>
    }
}
    3350:	3710      	adds	r7, #16
    3352:	46bd      	mov	sp, r7
    3354:	bd80      	pop	{r7, pc}
    3356:	bf00      	nop

00003358 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3358:	b480      	push	{r7}
    335a:	b083      	sub	sp, #12
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	681a      	ldr	r2, [r3, #0]
    3366:	683b      	ldr	r3, [r7, #0]
    3368:	681b      	ldr	r3, [r3, #0]
    336a:	429a      	cmp	r2, r3
    336c:	bf14      	ite	ne
    336e:	2300      	movne	r3, #0
    3370:	2301      	moveq	r3, #1
    3372:	b2db      	uxtb	r3, r3
}
    3374:	4618      	mov	r0, r3
    3376:	370c      	adds	r7, #12
    3378:	46bd      	mov	sp, r7
    337a:	f85d 7b04 	ldr.w	r7, [sp], #4
    337e:	4770      	bx	lr

00003380 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    3380:	b580      	push	{r7, lr}
    3382:	b084      	sub	sp, #16
    3384:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3386:	2301      	movs	r3, #1
    3388:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    338a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    338e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	2b00      	cmp	r3, #0
    3396:	d00a      	beq.n	33ae <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    3398:	f640 03e4 	movw	r3, #2276	; 0x8e4
    339c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a0:	68db      	ldr	r3, [r3, #12]
    33a2:	68db      	ldr	r3, [r3, #12]
    33a4:	4618      	mov	r0, r3
    33a6:	f7ff fb01 	bl	29ac <xEventGetxTag>
    33aa:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    33ac:	e035      	b.n	341a <xEventGenericSerialize+0x9a>
    33ae:	e034      	b.n	341a <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33b0:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b8:	68db      	ldr	r3, [r3, #12]
    33ba:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	68db      	ldr	r3, [r3, #12]
    33c0:	4618      	mov	r0, r3
    33c2:	f7ff fae7 	bl	2994 <xEventGetpxDestination>
    33c6:	4601      	mov	r1, r0
    33c8:	f640 120c 	movw	r2, #2316	; 0x90c
    33cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33d0:	460b      	mov	r3, r1
    33d2:	00db      	lsls	r3, r3, #3
    33d4:	1a5b      	subs	r3, r3, r1
    33d6:	00db      	lsls	r3, r3, #3
    33d8:	4413      	add	r3, r2
    33da:	3304      	adds	r3, #4
    33dc:	681b      	ldr	r3, [r3, #0]
    33de:	2b02      	cmp	r3, #2
    33e0:	d111      	bne.n	3406 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	68db      	ldr	r3, [r3, #12]
    33e6:	4618      	mov	r0, r3
    33e8:	f7ff fae0 	bl	29ac <xEventGetxTag>
    33ec:	4603      	mov	r3, r0
    33ee:	4618      	mov	r0, r3
    33f0:	68f9      	ldr	r1, [r7, #12]
    33f2:	f7ff ffb1 	bl	3358 <pEqualxDeadline>
    33f6:	4603      	mov	r3, r0
    33f8:	2b00      	cmp	r3, #0
    33fa:	d003      	beq.n	3404 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    33fc:	6878      	ldr	r0, [r7, #4]
    33fe:	f7ff ff2d 	bl	325c <xSetTimestamp>
    3402:	e00a      	b.n	341a <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    3404:	e010      	b.n	3428 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    3406:	6878      	ldr	r0, [r7, #4]
    3408:	f000 ff1a 	bl	4240 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    340c:	f640 00f8 	movw	r0, #2296	; 0x8f8
    3410:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3414:	6879      	ldr	r1, [r7, #4]
    3416:	f000 feb3 	bl	4180 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    341a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    341e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	2b00      	cmp	r3, #0
    3426:	d1c3      	bne.n	33b0 <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3428:	f640 03f8 	movw	r3, #2296	; 0x8f8
    342c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	2b00      	cmp	r3, #0
    3434:	d00a      	beq.n	344c <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3436:	f640 03f8 	movw	r3, #2296	; 0x8f8
    343a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    343e:	68db      	ldr	r3, [r3, #12]
    3440:	68db      	ldr	r3, [r3, #12]
    3442:	4618      	mov	r0, r3
    3444:	f7ff faa6 	bl	2994 <xEventGetpxDestination>
    3448:	4603      	mov	r3, r0
    344a:	e001      	b.n	3450 <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    344c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3450:	4618      	mov	r0, r3
    3452:	3710      	adds	r7, #16
    3454:	46bd      	mov	sp, r7
    3456:	bd80      	pop	{r7, pc}

00003458 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3458:	b580      	push	{r7, lr}
    345a:	b082      	sub	sp, #8
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	3320      	adds	r3, #32
    3464:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3468:	f2c2 0000 	movt	r0, #8192	; 0x2000
    346c:	4619      	mov	r1, r3
    346e:	f000 fe87 	bl	4180 <vListInsertEnd>
}
    3472:	3708      	adds	r7, #8
    3474:	46bd      	mov	sp, r7
    3476:	bd80      	pop	{r7, pc}

00003478 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    347e:	f002 fc91 	bl	5da4 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    3482:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348a:	68db      	ldr	r3, [r3, #12]
    348c:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    348e:	6878      	ldr	r0, [r7, #4]
    3490:	f000 fed6 	bl	4240 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    3494:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3498:	f2c2 0000 	movt	r0, #8192	; 0x2000
    349c:	6879      	ldr	r1, [r7, #4]
    349e:	f000 fe6f 	bl	4180 <vListInsertEnd>
    taskEXIT_CRITICAL();
    34a2:	f002 fc95 	bl	5dd0 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	68db      	ldr	r3, [r3, #12]
}
    34aa:	4618      	mov	r0, r3
    34ac:	3708      	adds	r7, #8
    34ae:	46bd      	mov	sp, r7
    34b0:	bd80      	pop	{r7, pc}
    34b2:	bf00      	nop

000034b4 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34b4:	b480      	push	{r7}
    34b6:	b087      	sub	sp, #28
    34b8:	af00      	add	r7, sp, #0
    34ba:	60f8      	str	r0, [r7, #12]
    34bc:	60b9      	str	r1, [r7, #8]
    34be:	607a      	str	r2, [r7, #4]
    34c0:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34c2:	68fb      	ldr	r3, [r7, #12]
    34c4:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34c6:	697b      	ldr	r3, [r7, #20]
    34c8:	68ba      	ldr	r2, [r7, #8]
    34ca:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34cc:	697b      	ldr	r3, [r7, #20]
    34ce:	687a      	ldr	r2, [r7, #4]
    34d0:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34d2:	697b      	ldr	r3, [r7, #20]
    34d4:	683a      	ldr	r2, [r7, #0]
    34d6:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34d8:	697b      	ldr	r3, [r7, #20]
    34da:	2200      	movs	r2, #0
    34dc:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34de:	697b      	ldr	r3, [r7, #20]
    34e0:	6a3a      	ldr	r2, [r7, #32]
    34e2:	3318      	adds	r3, #24
    34e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    34e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34ec:	371c      	adds	r7, #28
    34ee:	46bd      	mov	sp, r7
    34f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f4:	4770      	bx	lr
    34f6:	bf00      	nop

000034f8 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b084      	sub	sp, #16
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    3500:	f002 fc50 	bl	5da4 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	3320      	adds	r3, #32
    3508:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    350a:	68f8      	ldr	r0, [r7, #12]
    350c:	f000 fe98 	bl	4240 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3510:	f640 0094 	movw	r0, #2196	; 0x894
    3514:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3518:	68f9      	ldr	r1, [r7, #12]
    351a:	f000 fe31 	bl	4180 <vListInsertEnd>

    taskEXIT_CRITICAL();
    351e:	f002 fc57 	bl	5dd0 <vPortExitCritical>
}
    3522:	3710      	adds	r7, #16
    3524:	46bd      	mov	sp, r7
    3526:	bd80      	pop	{r7, pc}

00003528 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3528:	b580      	push	{r7, lr}
    352a:	b082      	sub	sp, #8
    352c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    352e:	2300      	movs	r3, #0
    3530:	607b      	str	r3, [r7, #4]
    3532:	e033      	b.n	359c <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3534:	2001      	movs	r0, #1
    3536:	2100      	movs	r1, #0
    3538:	2203      	movs	r2, #3
    353a:	f000 fef7 	bl	432c <xQueueGenericCreate>
    353e:	4601      	mov	r1, r0
    3540:	f241 3354 	movw	r3, #4948	; 0x1354
    3544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3548:	687a      	ldr	r2, [r7, #4]
    354a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    354e:	f241 3354 	movw	r3, #4948	; 0x1354
    3552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3556:	687a      	ldr	r2, [r7, #4]
    3558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    355c:	2b00      	cmp	r3, #0
    355e:	d00c      	beq.n	357a <vSemaphoreInitialise+0x52>
    3560:	f241 3354 	movw	r3, #4948	; 0x1354
    3564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3568:	687a      	ldr	r2, [r7, #4]
    356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    356e:	4618      	mov	r0, r3
    3570:	2100      	movs	r1, #0
    3572:	2200      	movs	r2, #0
    3574:	2300      	movs	r3, #0
    3576:	f000 ff67 	bl	4448 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    357a:	f241 3354 	movw	r3, #4948	; 0x1354
    357e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3582:	687a      	ldr	r2, [r7, #4]
    3584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3588:	4618      	mov	r0, r3
    358a:	2100      	movs	r1, #0
    358c:	f04f 32ff 	mov.w	r2, #4294967295
    3590:	2300      	movs	r3, #0
    3592:	f001 f81f 	bl	45d4 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	3301      	adds	r3, #1
    359a:	607b      	str	r3, [r7, #4]
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	2b03      	cmp	r3, #3
    35a0:	ddc8      	ble.n	3534 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35a2:	3708      	adds	r7, #8
    35a4:	46bd      	mov	sp, r7
    35a6:	bd80      	pop	{r7, pc}

000035a8 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35a8:	b480      	push	{r7}
    35aa:	b085      	sub	sp, #20
    35ac:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35ae:	2300      	movs	r3, #0
    35b0:	60fb      	str	r3, [r7, #12]
    35b2:	e0a1      	b.n	36f8 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35b4:	f640 120c 	movw	r2, #2316	; 0x90c
    35b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35bc:	68f9      	ldr	r1, [r7, #12]
    35be:	460b      	mov	r3, r1
    35c0:	00db      	lsls	r3, r3, #3
    35c2:	1a5b      	subs	r3, r3, r1
    35c4:	00db      	lsls	r3, r3, #3
    35c6:	4413      	add	r3, r2
    35c8:	68fa      	ldr	r2, [r7, #12]
    35ca:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35cc:	f640 120c 	movw	r2, #2316	; 0x90c
    35d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35d4:	68f9      	ldr	r1, [r7, #12]
    35d6:	460b      	mov	r3, r1
    35d8:	00db      	lsls	r3, r3, #3
    35da:	1a5b      	subs	r3, r3, r1
    35dc:	00db      	lsls	r3, r3, #3
    35de:	4413      	add	r3, r2
    35e0:	3304      	adds	r3, #4
    35e2:	2202      	movs	r2, #2
    35e4:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35e6:	f640 120c 	movw	r2, #2316	; 0x90c
    35ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35ee:	68f9      	ldr	r1, [r7, #12]
    35f0:	460b      	mov	r3, r1
    35f2:	00db      	lsls	r3, r3, #3
    35f4:	1a5b      	subs	r3, r3, r1
    35f6:	00db      	lsls	r3, r3, #3
    35f8:	4413      	add	r3, r2
    35fa:	3308      	adds	r3, #8
    35fc:	2201      	movs	r2, #1
    35fe:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3600:	f640 120c 	movw	r2, #2316	; 0x90c
    3604:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3608:	68f9      	ldr	r1, [r7, #12]
    360a:	460b      	mov	r3, r1
    360c:	00db      	lsls	r3, r3, #3
    360e:	1a5b      	subs	r3, r3, r1
    3610:	00db      	lsls	r3, r3, #3
    3612:	4413      	add	r3, r2
    3614:	330c      	adds	r3, #12
    3616:	2200      	movs	r2, #0
    3618:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    361a:	f640 120c 	movw	r2, #2316	; 0x90c
    361e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3622:	68f9      	ldr	r1, [r7, #12]
    3624:	460b      	mov	r3, r1
    3626:	00db      	lsls	r3, r3, #3
    3628:	1a5b      	subs	r3, r3, r1
    362a:	00db      	lsls	r3, r3, #3
    362c:	4413      	add	r3, r2
    362e:	3310      	adds	r3, #16
    3630:	2200      	movs	r2, #0
    3632:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3634:	f240 03c4 	movw	r3, #196	; 0xc4
    3638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    363c:	68fa      	ldr	r2, [r7, #12]
    363e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3642:	f640 120c 	movw	r2, #2316	; 0x90c
    3646:	f2c2 0200 	movt	r2, #8192	; 0x2000
    364a:	68f9      	ldr	r1, [r7, #12]
    364c:	460b      	mov	r3, r1
    364e:	00db      	lsls	r3, r3, #3
    3650:	1a5b      	subs	r3, r3, r1
    3652:	00db      	lsls	r3, r3, #3
    3654:	4413      	add	r3, r2
    3656:	3324      	adds	r3, #36	; 0x24
    3658:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    365a:	f240 4374 	movw	r3, #1140	; 0x474
    365e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3662:	68fa      	ldr	r2, [r7, #12]
    3664:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3668:	f640 120c 	movw	r2, #2316	; 0x90c
    366c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3670:	68f9      	ldr	r1, [r7, #12]
    3672:	460b      	mov	r3, r1
    3674:	00db      	lsls	r3, r3, #3
    3676:	1a5b      	subs	r3, r3, r1
    3678:	00db      	lsls	r3, r3, #3
    367a:	4413      	add	r3, r2
    367c:	3328      	adds	r3, #40	; 0x28
    367e:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    3680:	f240 1380 	movw	r3, #384	; 0x180
    3684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3688:	68fa      	ldr	r2, [r7, #12]
    368a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    368e:	f640 120c 	movw	r2, #2316	; 0x90c
    3692:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3696:	68f9      	ldr	r1, [r7, #12]
    3698:	460b      	mov	r3, r1
    369a:	00db      	lsls	r3, r3, #3
    369c:	1a5b      	subs	r3, r3, r1
    369e:	00db      	lsls	r3, r3, #3
    36a0:	4413      	add	r3, r2
    36a2:	3330      	adds	r3, #48	; 0x30
    36a4:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36a6:	f240 1380 	movw	r3, #384	; 0x180
    36aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ae:	68fa      	ldr	r2, [r7, #12]
    36b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36b4:	f240 0328 	movw	r3, #40	; 0x28
    36b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36c0:	f640 120c 	movw	r2, #2316	; 0x90c
    36c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36c8:	68f9      	ldr	r1, [r7, #12]
    36ca:	460b      	mov	r3, r1
    36cc:	00db      	lsls	r3, r3, #3
    36ce:	1a5b      	subs	r3, r3, r1
    36d0:	00db      	lsls	r3, r3, #3
    36d2:	4413      	add	r3, r2
    36d4:	332c      	adds	r3, #44	; 0x2c
    36d6:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36d8:	f640 120c 	movw	r2, #2316	; 0x90c
    36dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36e0:	68f9      	ldr	r1, [r7, #12]
    36e2:	460b      	mov	r3, r1
    36e4:	00db      	lsls	r3, r3, #3
    36e6:	1a5b      	subs	r3, r3, r1
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	4413      	add	r3, r2
    36ec:	3334      	adds	r3, #52	; 0x34
    36ee:	2200      	movs	r2, #0
    36f0:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36f2:	68fb      	ldr	r3, [r7, #12]
    36f4:	3301      	adds	r3, #1
    36f6:	60fb      	str	r3, [r7, #12]
    36f8:	68fb      	ldr	r3, [r7, #12]
    36fa:	2b2e      	cmp	r3, #46	; 0x2e
    36fc:	f77f af5a 	ble.w	35b4 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3700:	2300      	movs	r3, #0
    3702:	60fb      	str	r3, [r7, #12]
    3704:	e028      	b.n	3758 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    3706:	f240 035c 	movw	r3, #92	; 0x5c
    370a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    370e:	68fa      	ldr	r2, [r7, #12]
    3710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3714:	f640 120c 	movw	r2, #2316	; 0x90c
    3718:	f2c2 0200 	movt	r2, #8192	; 0x2000
    371c:	460b      	mov	r3, r1
    371e:	00db      	lsls	r3, r3, #3
    3720:	1a5b      	subs	r3, r3, r1
    3722:	00db      	lsls	r3, r3, #3
    3724:	4413      	add	r3, r2
    3726:	3304      	adds	r3, #4
    3728:	2201      	movs	r2, #1
    372a:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    372c:	f240 0390 	movw	r3, #144	; 0x90
    3730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3734:	68fa      	ldr	r2, [r7, #12]
    3736:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    373a:	f640 120c 	movw	r2, #2316	; 0x90c
    373e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3742:	460b      	mov	r3, r1
    3744:	00db      	lsls	r3, r3, #3
    3746:	1a5b      	subs	r3, r3, r1
    3748:	00db      	lsls	r3, r3, #3
    374a:	4413      	add	r3, r2
    374c:	3304      	adds	r3, #4
    374e:	2203      	movs	r2, #3
    3750:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3752:	68fb      	ldr	r3, [r7, #12]
    3754:	3301      	adds	r3, #1
    3756:	60fb      	str	r3, [r7, #12]
    3758:	68fb      	ldr	r3, [r7, #12]
    375a:	2b0c      	cmp	r3, #12
    375c:	ddd3      	ble.n	3706 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    375e:	2300      	movs	r3, #0
    3760:	60fb      	str	r3, [r7, #12]
    3762:	e084      	b.n	386e <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3764:	f240 223c 	movw	r2, #572	; 0x23c
    3768:	f2c2 0200 	movt	r2, #8192	; 0x2000
    376c:	68f9      	ldr	r1, [r7, #12]
    376e:	460b      	mov	r3, r1
    3770:	005b      	lsls	r3, r3, #1
    3772:	440b      	add	r3, r1
    3774:	009b      	lsls	r3, r3, #2
    3776:	4413      	add	r3, r2
    3778:	3304      	adds	r3, #4
    377a:	681b      	ldr	r3, [r3, #0]
    377c:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    377e:	f240 223c 	movw	r2, #572	; 0x23c
    3782:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3786:	68f9      	ldr	r1, [r7, #12]
    3788:	460b      	mov	r3, r1
    378a:	005b      	lsls	r3, r3, #1
    378c:	440b      	add	r3, r1
    378e:	009b      	lsls	r3, r3, #2
    3790:	4413      	add	r3, r2
    3792:	3308      	adds	r3, #8
    3794:	681b      	ldr	r3, [r3, #0]
    3796:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3798:	f640 120c 	movw	r2, #2316	; 0x90c
    379c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a0:	68b9      	ldr	r1, [r7, #8]
    37a2:	460b      	mov	r3, r1
    37a4:	00db      	lsls	r3, r3, #3
    37a6:	1a5b      	subs	r3, r3, r1
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	4413      	add	r3, r2
    37ac:	3310      	adds	r3, #16
    37ae:	6818      	ldr	r0, [r3, #0]
    37b0:	f640 120c 	movw	r2, #2316	; 0x90c
    37b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b8:	68b9      	ldr	r1, [r7, #8]
    37ba:	460b      	mov	r3, r1
    37bc:	00db      	lsls	r3, r3, #3
    37be:	1a5b      	subs	r3, r3, r1
    37c0:	005b      	lsls	r3, r3, #1
    37c2:	4403      	add	r3, r0
    37c4:	3306      	adds	r3, #6
    37c6:	009b      	lsls	r3, r3, #2
    37c8:	4413      	add	r3, r2
    37ca:	687a      	ldr	r2, [r7, #4]
    37cc:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37ce:	f640 120c 	movw	r2, #2316	; 0x90c
    37d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37d6:	68b9      	ldr	r1, [r7, #8]
    37d8:	460b      	mov	r3, r1
    37da:	00db      	lsls	r3, r3, #3
    37dc:	1a5b      	subs	r3, r3, r1
    37de:	00db      	lsls	r3, r3, #3
    37e0:	4413      	add	r3, r2
    37e2:	3310      	adds	r3, #16
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	1c58      	adds	r0, r3, #1
    37e8:	f640 120c 	movw	r2, #2316	; 0x90c
    37ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f0:	68b9      	ldr	r1, [r7, #8]
    37f2:	460b      	mov	r3, r1
    37f4:	00db      	lsls	r3, r3, #3
    37f6:	1a5b      	subs	r3, r3, r1
    37f8:	00db      	lsls	r3, r3, #3
    37fa:	4413      	add	r3, r2
    37fc:	3310      	adds	r3, #16
    37fe:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3800:	f640 120c 	movw	r2, #2316	; 0x90c
    3804:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3808:	6879      	ldr	r1, [r7, #4]
    380a:	460b      	mov	r3, r1
    380c:	00db      	lsls	r3, r3, #3
    380e:	1a5b      	subs	r3, r3, r1
    3810:	00db      	lsls	r3, r3, #3
    3812:	4413      	add	r3, r2
    3814:	330c      	adds	r3, #12
    3816:	6818      	ldr	r0, [r3, #0]
    3818:	f640 120c 	movw	r2, #2316	; 0x90c
    381c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3820:	6879      	ldr	r1, [r7, #4]
    3822:	460b      	mov	r3, r1
    3824:	00db      	lsls	r3, r3, #3
    3826:	1a5b      	subs	r3, r3, r1
    3828:	005b      	lsls	r3, r3, #1
    382a:	4403      	add	r3, r0
    382c:	3304      	adds	r3, #4
    382e:	009b      	lsls	r3, r3, #2
    3830:	4413      	add	r3, r2
    3832:	68ba      	ldr	r2, [r7, #8]
    3834:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3836:	f640 120c 	movw	r2, #2316	; 0x90c
    383a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    383e:	6879      	ldr	r1, [r7, #4]
    3840:	460b      	mov	r3, r1
    3842:	00db      	lsls	r3, r3, #3
    3844:	1a5b      	subs	r3, r3, r1
    3846:	00db      	lsls	r3, r3, #3
    3848:	4413      	add	r3, r2
    384a:	330c      	adds	r3, #12
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	1c58      	adds	r0, r3, #1
    3850:	f640 120c 	movw	r2, #2316	; 0x90c
    3854:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3858:	6879      	ldr	r1, [r7, #4]
    385a:	460b      	mov	r3, r1
    385c:	00db      	lsls	r3, r3, #3
    385e:	1a5b      	subs	r3, r3, r1
    3860:	00db      	lsls	r3, r3, #3
    3862:	4413      	add	r3, r2
    3864:	330c      	adds	r3, #12
    3866:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	3301      	adds	r3, #1
    386c:	60fb      	str	r3, [r7, #12]
    386e:	f240 233c 	movw	r3, #572	; 0x23c
    3872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3876:	681a      	ldr	r2, [r3, #0]
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	429a      	cmp	r2, r3
    387c:	f73f af72 	bgt.w	3764 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    3880:	3714      	adds	r7, #20
    3882:	46bd      	mov	sp, r7
    3884:	f85d 7b04 	ldr.w	r7, [sp], #4
    3888:	4770      	bx	lr
    388a:	bf00      	nop

0000388c <vSensor>:

void vSensor( void * pvParameter )
{
    388c:	b580      	push	{r7, lr}
    388e:	b08c      	sub	sp, #48	; 0x30
    3890:	af02      	add	r7, sp, #8
    3892:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    3894:	f241 3354 	movw	r3, #4948	; 0x1354
    3898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389c:	685b      	ldr	r3, [r3, #4]
    389e:	4618      	mov	r0, r3
    38a0:	2100      	movs	r1, #0
    38a2:	f04f 32ff 	mov.w	r2, #4294967295
    38a6:	2300      	movs	r3, #0
    38a8:	f000 fe94 	bl	45d4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38ac:	e06f      	b.n	398e <vSensor+0x102>
        {
            if(boolFlag == 0)
    38ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38b0:	2b00      	cmp	r3, #0
    38b2:	d100      	bne.n	38b6 <vSensor+0x2a>
                continue;
    38b4:	e06b      	b.n	398e <vSensor+0x102>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38b6:	f7ff fddf 	bl	3478 <pxEventGenericReceive>
    38ba:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38bc:	6a38      	ldr	r0, [r7, #32]
    38be:	f7ff f869 	bl	2994 <xEventGetpxDestination>
    38c2:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38c4:	6a38      	ldr	r0, [r7, #32]
    38c6:	f7ff f87d 	bl	29c4 <xEventGetxData>
    38ca:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38cc:	6a38      	ldr	r0, [r7, #32]
    38ce:	f7ff f86d 	bl	29ac <xEventGetxTag>
    38d2:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38d4:	f640 120c 	movw	r2, #2316	; 0x90c
    38d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38dc:	69f9      	ldr	r1, [r7, #28]
    38de:	460b      	mov	r3, r1
    38e0:	00db      	lsls	r3, r3, #3
    38e2:	1a5b      	subs	r3, r3, r1
    38e4:	00db      	lsls	r3, r3, #3
    38e6:	4413      	add	r3, r2
    38e8:	3308      	adds	r3, #8
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	1c58      	adds	r0, r3, #1
    38ee:	f640 120c 	movw	r2, #2316	; 0x90c
    38f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38f6:	69f9      	ldr	r1, [r7, #28]
    38f8:	460b      	mov	r3, r1
    38fa:	00db      	lsls	r3, r3, #3
    38fc:	1a5b      	subs	r3, r3, r1
    38fe:	00db      	lsls	r3, r3, #3
    3900:	4413      	add	r3, r2
    3902:	3308      	adds	r3, #8
    3904:	6018      	str	r0, [r3, #0]
            xDeadline= xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3906:	f640 120c 	movw	r2, #2316	; 0x90c
    390a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    390e:	69f9      	ldr	r1, [r7, #28]
    3910:	460b      	mov	r3, r1
    3912:	00db      	lsls	r3, r3, #3
    3914:	1a5b      	subs	r3, r3, r1
    3916:	00db      	lsls	r3, r3, #3
    3918:	4413      	add	r3, r2
    391a:	332c      	adds	r3, #44	; 0x2c
    391c:	6818      	ldr	r0, [r3, #0]
    391e:	f640 120c 	movw	r2, #2316	; 0x90c
    3922:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3926:	69f9      	ldr	r1, [r7, #28]
    3928:	460b      	mov	r3, r1
    392a:	00db      	lsls	r3, r3, #3
    392c:	1a5b      	subs	r3, r3, r1
    392e:	00db      	lsls	r3, r3, #3
    3930:	4413      	add	r3, r2
    3932:	3308      	adds	r3, #8
    3934:	681b      	ldr	r3, [r3, #0]
    3936:	fb03 f300 	mul.w	r3, r3, r0
    393a:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    393c:	697b      	ldr	r3, [r7, #20]
    393e:	685b      	ldr	r3, [r3, #4]
    3940:	3303      	adds	r3, #3
    3942:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3944:	f240 635c 	movw	r3, #1628	; 0x65c
    3948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    394c:	68fa      	ldr	r2, [r7, #12]
    394e:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3950:	69f8      	ldr	r0, [r7, #28]
    3952:	f013 fe9d 	bl	17690 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3956:	f001 fcf1 	bl	533c <xTaskGetTickCount>
    395a:	4603      	mov	r3, r0
    395c:	4618      	mov	r0, r3
    395e:	f013 fe97 	bl	17690 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3962:	f640 120c 	movw	r2, #2316	; 0x90c
    3966:	f2c2 0200 	movt	r2, #8192	; 0x2000
    396a:	69f9      	ldr	r1, [r7, #28]
    396c:	460b      	mov	r3, r1
    396e:	00db      	lsls	r3, r3, #3
    3970:	1a5b      	subs	r3, r3, r1
    3972:	00db      	lsls	r3, r3, #3
    3974:	4413      	add	r3, r2
    3976:	3328      	adds	r3, #40	; 0x28
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	69b8      	ldr	r0, [r7, #24]
    397c:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    397e:	69bb      	ldr	r3, [r7, #24]
    3980:	9300      	str	r3, [sp, #0]
    3982:	6a38      	ldr	r0, [r7, #32]
    3984:	69f9      	ldr	r1, [r7, #28]
    3986:	693a      	ldr	r2, [r7, #16]
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	f7ff fd93 	bl	34b4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    398e:	f7fe ffbb 	bl	2908 <xIsERLNull>
    3992:	6278      	str	r0, [r7, #36]	; 0x24
    3994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3996:	f1b3 3fff 	cmp.w	r3, #4294967295
    399a:	d188      	bne.n	38ae <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    399c:	f241 3354 	movw	r3, #4948	; 0x1354
    39a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	4618      	mov	r0, r3
    39a8:	2100      	movs	r1, #0
    39aa:	2200      	movs	r2, #0
    39ac:	2300      	movs	r3, #0
    39ae:	f000 fd4b 	bl	4448 <xQueueGenericSend>
    }
    39b2:	e76f      	b.n	3894 <vSensor+0x8>

000039b4 <vServant>:
}

void vServant( void * pvParameter )
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b08c      	sub	sp, #48	; 0x30
    39b8:	af02      	add	r7, sp, #8
    39ba:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    39bc:	f241 3354 	movw	r3, #4948	; 0x1354
    39c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39c4:	689b      	ldr	r3, [r3, #8]
    39c6:	4618      	mov	r0, r3
    39c8:	2100      	movs	r1, #0
    39ca:	f04f 32ff 	mov.w	r2, #4294967295
    39ce:	2300      	movs	r3, #0
    39d0:	f000 fe00 	bl	45d4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    39d4:	e098      	b.n	3b08 <vServant+0x154>
        {
            if(boolFlag == 0)
    39d6:	6a3b      	ldr	r3, [r7, #32]
    39d8:	2b00      	cmp	r3, #0
    39da:	d100      	bne.n	39de <vServant+0x2a>
                continue;
    39dc:	e094      	b.n	3b08 <vServant+0x154>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    39de:	f7ff fd4b 	bl	3478 <pxEventGenericReceive>
    39e2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39e4:	69f8      	ldr	r0, [r7, #28]
    39e6:	f7fe ffd5 	bl	2994 <xEventGetpxDestination>
    39ea:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39ec:	69f8      	ldr	r0, [r7, #28]
    39ee:	f7fe ffe9 	bl	29c4 <xEventGetxData>
    39f2:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39f4:	69f8      	ldr	r0, [r7, #28]
    39f6:	f7fe ffd9 	bl	29ac <xEventGetxTag>
    39fa:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    39fc:	f640 120c 	movw	r2, #2316	; 0x90c
    3a00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a04:	69b9      	ldr	r1, [r7, #24]
    3a06:	460b      	mov	r3, r1
    3a08:	00db      	lsls	r3, r3, #3
    3a0a:	1a5b      	subs	r3, r3, r1
    3a0c:	00db      	lsls	r3, r3, #3
    3a0e:	4413      	add	r3, r2
    3a10:	3308      	adds	r3, #8
    3a12:	681b      	ldr	r3, [r3, #0]
    3a14:	1c58      	adds	r0, r3, #1
    3a16:	f640 120c 	movw	r2, #2316	; 0x90c
    3a1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a1e:	69b9      	ldr	r1, [r7, #24]
    3a20:	460b      	mov	r3, r1
    3a22:	00db      	lsls	r3, r3, #3
    3a24:	1a5b      	subs	r3, r3, r1
    3a26:	00db      	lsls	r3, r3, #3
    3a28:	4413      	add	r3, r2
    3a2a:	3308      	adds	r3, #8
    3a2c:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3a2e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a36:	69b9      	ldr	r1, [r7, #24]
    3a38:	460b      	mov	r3, r1
    3a3a:	00db      	lsls	r3, r3, #3
    3a3c:	1a5b      	subs	r3, r3, r1
    3a3e:	00db      	lsls	r3, r3, #3
    3a40:	4413      	add	r3, r2
    3a42:	332c      	adds	r3, #44	; 0x2c
    3a44:	6818      	ldr	r0, [r3, #0]
    3a46:	f640 120c 	movw	r2, #2316	; 0x90c
    3a4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a4e:	69b9      	ldr	r1, [r7, #24]
    3a50:	460b      	mov	r3, r1
    3a52:	00db      	lsls	r3, r3, #3
    3a54:	1a5b      	subs	r3, r3, r1
    3a56:	00db      	lsls	r3, r3, #3
    3a58:	4413      	add	r3, r2
    3a5a:	3308      	adds	r3, #8
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	fb03 f300 	mul.w	r3, r3, r0
    3a62:	60fb      	str	r3, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3a64:	f640 120c 	movw	r2, #2316	; 0x90c
    3a68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a6c:	69b9      	ldr	r1, [r7, #24]
    3a6e:	460b      	mov	r3, r1
    3a70:	00db      	lsls	r3, r3, #3
    3a72:	1a5b      	subs	r3, r3, r1
    3a74:	00db      	lsls	r3, r3, #3
    3a76:	4413      	add	r3, r2
    3a78:	331c      	adds	r3, #28
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a7e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a86:	68b9      	ldr	r1, [r7, #8]
    3a88:	460b      	mov	r3, r1
    3a8a:	00db      	lsls	r3, r3, #3
    3a8c:	1a5b      	subs	r3, r3, r1
    3a8e:	00db      	lsls	r3, r3, #3
    3a90:	4413      	add	r3, r2
    3a92:	3304      	adds	r3, #4
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	2b02      	cmp	r3, #2
    3a98:	d002      	beq.n	3aa0 <vServant+0xec>
    3a9a:	2b03      	cmp	r3, #3
    3a9c:	d011      	beq.n	3ac2 <vServant+0x10e>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3a9e:	e014      	b.n	3aca <vServant+0x116>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3aa0:	693b      	ldr	r3, [r7, #16]
    3aa2:	6858      	ldr	r0, [r3, #4]
    3aa4:	f640 120c 	movw	r2, #2316	; 0x90c
    3aa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aac:	69b9      	ldr	r1, [r7, #24]
    3aae:	460b      	mov	r3, r1
    3ab0:	00db      	lsls	r3, r3, #3
    3ab2:	1a5b      	subs	r3, r3, r1
    3ab4:	00db      	lsls	r3, r3, #3
    3ab6:	4413      	add	r3, r2
    3ab8:	3324      	adds	r3, #36	; 0x24
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	4403      	add	r3, r0
    3abe:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ac0:	e003      	b.n	3aca <vServant+0x116>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3ac2:	68fb      	ldr	r3, [r7, #12]
    3ac4:	3b03      	subs	r3, #3
    3ac6:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3ac8:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3aca:	69b8      	ldr	r0, [r7, #24]
    3acc:	f013 fde0 	bl	17690 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3ad0:	f001 fc34 	bl	533c <xTaskGetTickCount>
    3ad4:	4603      	mov	r3, r0
    3ad6:	4618      	mov	r0, r3
    3ad8:	f013 fdda 	bl	17690 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3adc:	f640 120c 	movw	r2, #2316	; 0x90c
    3ae0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ae4:	69b9      	ldr	r1, [r7, #24]
    3ae6:	460b      	mov	r3, r1
    3ae8:	00db      	lsls	r3, r3, #3
    3aea:	1a5b      	subs	r3, r3, r1
    3aec:	00db      	lsls	r3, r3, #3
    3aee:	4413      	add	r3, r2
    3af0:	3328      	adds	r3, #40	; 0x28
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	6978      	ldr	r0, [r7, #20]
    3af6:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3af8:	697b      	ldr	r3, [r7, #20]
    3afa:	9300      	str	r3, [sp, #0]
    3afc:	69f8      	ldr	r0, [r7, #28]
    3afe:	69b9      	ldr	r1, [r7, #24]
    3b00:	68fa      	ldr	r2, [r7, #12]
    3b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b04:	f7ff fcd6 	bl	34b4 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b08:	f7fe fefe 	bl	2908 <xIsERLNull>
    3b0c:	6238      	str	r0, [r7, #32]
    3b0e:	6a3b      	ldr	r3, [r7, #32]
    3b10:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b14:	f47f af5f 	bne.w	39d6 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b18:	f241 3354 	movw	r3, #4948	; 0x1354
    3b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b20:	681b      	ldr	r3, [r3, #0]
    3b22:	4618      	mov	r0, r3
    3b24:	2100      	movs	r1, #0
    3b26:	2200      	movs	r2, #0
    3b28:	2300      	movs	r3, #0
    3b2a:	f000 fc8d 	bl	4448 <xQueueGenericSend>
    }
    3b2e:	e745      	b.n	39bc <vServant+0x8>

00003b30 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b08c      	sub	sp, #48	; 0x30
    3b34:	af02      	add	r7, sp, #8
    3b36:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3b38:	f241 3354 	movw	r3, #4948	; 0x1354
    3b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b40:	68db      	ldr	r3, [r3, #12]
    3b42:	4618      	mov	r0, r3
    3b44:	2100      	movs	r1, #0
    3b46:	f04f 32ff 	mov.w	r2, #4294967295
    3b4a:	2300      	movs	r3, #0
    3b4c:	f000 fd42 	bl	45d4 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b50:	e069      	b.n	3c26 <vActuator+0xf6>
        {
            if(boolFlag == 0)
    3b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b54:	2b00      	cmp	r3, #0
    3b56:	d100      	bne.n	3b5a <vActuator+0x2a>
                continue;
    3b58:	e065      	b.n	3c26 <vActuator+0xf6>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b5a:	f7ff fc8d 	bl	3478 <pxEventGenericReceive>
    3b5e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b60:	6a38      	ldr	r0, [r7, #32]
    3b62:	f7fe ff17 	bl	2994 <xEventGetpxDestination>
    3b66:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b68:	6a38      	ldr	r0, [r7, #32]
    3b6a:	f7fe ff2b 	bl	29c4 <xEventGetxData>
    3b6e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b70:	6a38      	ldr	r0, [r7, #32]
    3b72:	f7fe ff1b 	bl	29ac <xEventGetxTag>
    3b76:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3b78:	f640 120c 	movw	r2, #2316	; 0x90c
    3b7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b80:	69f9      	ldr	r1, [r7, #28]
    3b82:	460b      	mov	r3, r1
    3b84:	00db      	lsls	r3, r3, #3
    3b86:	1a5b      	subs	r3, r3, r1
    3b88:	00db      	lsls	r3, r3, #3
    3b8a:	4413      	add	r3, r2
    3b8c:	3308      	adds	r3, #8
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	1c58      	adds	r0, r3, #1
    3b92:	f640 120c 	movw	r2, #2316	; 0x90c
    3b96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b9a:	69f9      	ldr	r1, [r7, #28]
    3b9c:	460b      	mov	r3, r1
    3b9e:	00db      	lsls	r3, r3, #3
    3ba0:	1a5b      	subs	r3, r3, r1
    3ba2:	00db      	lsls	r3, r3, #3
    3ba4:	4413      	add	r3, r2
    3ba6:	3308      	adds	r3, #8
    3ba8:	6018      	str	r0, [r3, #0]
            xDeadline = xContexts[xMyFlag].xPeriod * xContexts[xMyFlag].xCount;
    3baa:	f640 120c 	movw	r2, #2316	; 0x90c
    3bae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bb2:	69f9      	ldr	r1, [r7, #28]
    3bb4:	460b      	mov	r3, r1
    3bb6:	00db      	lsls	r3, r3, #3
    3bb8:	1a5b      	subs	r3, r3, r1
    3bba:	00db      	lsls	r3, r3, #3
    3bbc:	4413      	add	r3, r2
    3bbe:	332c      	adds	r3, #44	; 0x2c
    3bc0:	6818      	ldr	r0, [r3, #0]
    3bc2:	f640 120c 	movw	r2, #2316	; 0x90c
    3bc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bca:	69f9      	ldr	r1, [r7, #28]
    3bcc:	460b      	mov	r3, r1
    3bce:	00db      	lsls	r3, r3, #3
    3bd0:	1a5b      	subs	r3, r3, r1
    3bd2:	00db      	lsls	r3, r3, #3
    3bd4:	4413      	add	r3, r2
    3bd6:	3308      	adds	r3, #8
    3bd8:	681b      	ldr	r3, [r3, #0]
    3bda:	fb03 f300 	mul.w	r3, r3, r0
    3bde:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3be0:	697b      	ldr	r3, [r7, #20]
    3be2:	685b      	ldr	r3, [r3, #4]
    3be4:	3303      	adds	r3, #3
    3be6:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3be8:	69f8      	ldr	r0, [r7, #28]
    3bea:	f013 fd51 	bl	17690 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3bee:	f001 fba5 	bl	533c <xTaskGetTickCount>
    3bf2:	4603      	mov	r3, r0
    3bf4:	4618      	mov	r0, r3
    3bf6:	f013 fd4b 	bl	17690 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3bfa:	f640 120c 	movw	r2, #2316	; 0x90c
    3bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c02:	69f9      	ldr	r1, [r7, #28]
    3c04:	460b      	mov	r3, r1
    3c06:	00db      	lsls	r3, r3, #3
    3c08:	1a5b      	subs	r3, r3, r1
    3c0a:	00db      	lsls	r3, r3, #3
    3c0c:	4413      	add	r3, r2
    3c0e:	3328      	adds	r3, #40	; 0x28
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	69b8      	ldr	r0, [r7, #24]
    3c14:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3c16:	69bb      	ldr	r3, [r7, #24]
    3c18:	9300      	str	r3, [sp, #0]
    3c1a:	6a38      	ldr	r0, [r7, #32]
    3c1c:	69f9      	ldr	r1, [r7, #28]
    3c1e:	693a      	ldr	r2, [r7, #16]
    3c20:	68fb      	ldr	r3, [r7, #12]
    3c22:	f7ff fc47 	bl	34b4 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c26:	f7fe fe6f 	bl	2908 <xIsERLNull>
    3c2a:	6278      	str	r0, [r7, #36]	; 0x24
    3c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c32:	d18e      	bne.n	3b52 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3c34:	f241 3354 	movw	r3, #4948	; 0x1354
    3c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	4618      	mov	r0, r3
    3c40:	2100      	movs	r1, #0
    3c42:	2200      	movs	r2, #0
    3c44:	2300      	movs	r3, #0
    3c46:	f000 fbff 	bl	4448 <xQueueGenericSend>
    }
    3c4a:	e775      	b.n	3b38 <vActuator+0x8>

00003c4c <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b084      	sub	sp, #16
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3c54:	f241 3354 	movw	r3, #4948	; 0x1354
    3c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	4618      	mov	r0, r3
    3c60:	2100      	movs	r1, #0
    3c62:	f04f 32ff 	mov.w	r2, #4294967295
    3c66:	2300      	movs	r3, #0
    3c68:	f000 fcb4 	bl	45d4 <xQueueGenericReceive>
        //vPrintString("Actuator\n\r");

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c6c:	f7ff f86c 	bl	2d48 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c70:	f7ff f994 	bl	2f9c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c74:	f7ff fb84 	bl	3380 <xEventGenericSerialize>
    3c78:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c7a:	68fb      	ldr	r3, [r7, #12]
    3c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c80:	d036      	beq.n	3cf0 <vR_Servant+0xa4>
        {
            switch(xContexts[pxDestination].xType)
    3c82:	f640 120c 	movw	r2, #2316	; 0x90c
    3c86:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c8a:	68f9      	ldr	r1, [r7, #12]
    3c8c:	460b      	mov	r3, r1
    3c8e:	00db      	lsls	r3, r3, #3
    3c90:	1a5b      	subs	r3, r3, r1
    3c92:	00db      	lsls	r3, r3, #3
    3c94:	4413      	add	r3, r2
    3c96:	3304      	adds	r3, #4
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	2b02      	cmp	r3, #2
    3c9c:	d010      	beq.n	3cc0 <vR_Servant+0x74>
    3c9e:	2b03      	cmp	r3, #3
    3ca0:	d01a      	beq.n	3cd8 <vR_Servant+0x8c>
    3ca2:	2b01      	cmp	r3, #1
    3ca4:	d000      	beq.n	3ca8 <vR_Servant+0x5c>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3ca6:	e023      	b.n	3cf0 <vR_Servant+0xa4>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3ca8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb0:	685b      	ldr	r3, [r3, #4]
    3cb2:	4618      	mov	r0, r3
    3cb4:	2100      	movs	r1, #0
    3cb6:	2200      	movs	r2, #0
    3cb8:	2300      	movs	r3, #0
    3cba:	f000 fbc5 	bl	4448 <xQueueGenericSend>
                    break;
    3cbe:	e017      	b.n	3cf0 <vR_Servant+0xa4>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3cc0:	f241 3354 	movw	r3, #4948	; 0x1354
    3cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc8:	689b      	ldr	r3, [r3, #8]
    3cca:	4618      	mov	r0, r3
    3ccc:	2100      	movs	r1, #0
    3cce:	2200      	movs	r2, #0
    3cd0:	2300      	movs	r3, #0
    3cd2:	f000 fbb9 	bl	4448 <xQueueGenericSend>
                    break;
    3cd6:	e00b      	b.n	3cf0 <vR_Servant+0xa4>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3cd8:	f241 3354 	movw	r3, #4948	; 0x1354
    3cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce0:	68db      	ldr	r3, [r3, #12]
    3ce2:	4618      	mov	r0, r3
    3ce4:	2100      	movs	r1, #0
    3ce6:	2200      	movs	r2, #0
    3ce8:	2300      	movs	r3, #0
    3cea:	f000 fbad 	bl	4448 <xQueueGenericSend>
                    break;
    3cee:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3cf0:	e7b0      	b.n	3c54 <vR_Servant+0x8>
    3cf2:	bf00      	nop

00003cf4 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3cf4:	b480      	push	{r7}
    3cf6:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3cf8:	f242 032f 	movw	r3, #8239	; 0x202f
    3cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d00:	2200      	movs	r2, #0
    3d02:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3d04:	f242 032e 	movw	r3, #8238	; 0x202e
    3d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d0c:	2201      	movs	r2, #1
    3d0e:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3d10:	f242 0325 	movw	r3, #8229	; 0x2025
    3d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d18:	2207      	movs	r2, #7
    3d1a:	701a      	strb	r2, [r3, #0]
}
    3d1c:	46bd      	mov	sp, r7
    3d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d22:	4770      	bx	lr

00003d24 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3d24:	b580      	push	{r7, lr}
    3d26:	af00      	add	r7, sp, #0
    timer_init();
    3d28:	f7ff ffe4 	bl	3cf4 <timer_init>
    modem_init();
    3d2c:	f00d f9a4 	bl	11078 <modem_init>
    adc_init();
    3d30:	f00d fcee 	bl	11710 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3d34:	f00d fc60 	bl	115f8 <spi_init>
    link_fbw_init();
    3d38:	f00d fabc 	bl	112b4 <link_fbw_init>
    gps_init();
    3d3c:	f00d fd98 	bl	11870 <gps_init>
    nav_init();
    3d40:	f011 f890 	bl	14e64 <nav_init>
    ir_init();
    3d44:	f00e f83c 	bl	11dc0 <ir_init>
    estimator_init();
    3d48:	f011 fa72 	bl	15230 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3d4c:	bd80      	pop	{r7, pc}
    3d4e:	bf00      	nop

00003d50 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3d50:	b480      	push	{r7}
    3d52:	b083      	sub	sp, #12
    3d54:	af00      	add	r7, sp, #0
    3d56:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3d58:	370c      	adds	r7, #12
    3d5a:	46bd      	mov	sp, r7
    3d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop

00003d64 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b082      	sub	sp, #8
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d6c:	f012 fa3c 	bl	161e8 <last_radio_from_ppm>
}
    3d70:	3708      	adds	r7, #8
    3d72:	46bd      	mov	sp, r7
    3d74:	bd80      	pop	{r7, pc}
    3d76:	bf00      	nop

00003d78 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d78:	b480      	push	{r7}
    3d7a:	b083      	sub	sp, #12
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d80:	370c      	adds	r7, #12
    3d82:	46bd      	mov	sp, r7
    3d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop

00003d8c <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d8c:	b480      	push	{r7}
    3d8e:	b083      	sub	sp, #12
    3d90:	af00      	add	r7, sp, #0
    3d92:	6078      	str	r0, [r7, #4]
}
    3d94:	370c      	adds	r7, #12
    3d96:	46bd      	mov	sp, r7
    3d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop

00003da0 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3da0:	b480      	push	{r7}
    3da2:	b083      	sub	sp, #12
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
}
    3da8:	370c      	adds	r7, #12
    3daa:	46bd      	mov	sp, r7
    3dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db0:	4770      	bx	lr
    3db2:	bf00      	nop

00003db4 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b082      	sub	sp, #8
    3db8:	af00      	add	r7, sp, #0
    3dba:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3dbc:	f012 fdce 	bl	1695c <to_autopilot_from_last_radio>
}
    3dc0:	3708      	adds	r7, #8
    3dc2:	46bd      	mov	sp, r7
    3dc4:	bd80      	pop	{r7, pc}
    3dc6:	bf00      	nop

00003dc8 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b082      	sub	sp, #8
    3dcc:	af00      	add	r7, sp, #0
    3dce:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3dd0:	f012 fd02 	bl	167d8 <spi_reset>
}
    3dd4:	3708      	adds	r7, #8
    3dd6:	46bd      	mov	sp, r7
    3dd8:	bd80      	pop	{r7, pc}
    3dda:	bf00      	nop

00003ddc <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3ddc:	b480      	push	{r7}
    3dde:	b083      	sub	sp, #12
    3de0:	af00      	add	r7, sp, #0
    3de2:	6078      	str	r0, [r7, #4]
}
    3de4:	370c      	adds	r7, #12
    3de6:	46bd      	mov	sp, r7
    3de8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dec:	4770      	bx	lr
    3dee:	bf00      	nop

00003df0 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3df0:	b480      	push	{r7}
    3df2:	b083      	sub	sp, #12
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
}
    3df8:	370c      	adds	r7, #12
    3dfa:	46bd      	mov	sp, r7
    3dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop

00003e04 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b082      	sub	sp, #8
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3e0c:	f012 ff4a 	bl	16ca4 <check_mega128_values_task>
}
    3e10:	3708      	adds	r7, #8
    3e12:	46bd      	mov	sp, r7
    3e14:	bd80      	pop	{r7, pc}
    3e16:	bf00      	nop

00003e18 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3e18:	b480      	push	{r7}
    3e1a:	b083      	sub	sp, #12
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
}
    3e20:	370c      	adds	r7, #12
    3e22:	46bd      	mov	sp, r7
    3e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e28:	4770      	bx	lr
    3e2a:	bf00      	nop

00003e2c <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3e2c:	b480      	push	{r7}
    3e2e:	b083      	sub	sp, #12
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
}
    3e34:	370c      	adds	r7, #12
    3e36:	46bd      	mov	sp, r7
    3e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop

00003e40 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b082      	sub	sp, #8
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3e48:	f013 f820 	bl	16e8c <servo_transmit>
}
    3e4c:	3708      	adds	r7, #8
    3e4e:	46bd      	mov	sp, r7
    3e50:	bd80      	pop	{r7, pc}
    3e52:	bf00      	nop

00003e54 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3e54:	b480      	push	{r7}
    3e56:	b083      	sub	sp, #12
    3e58:	af00      	add	r7, sp, #0
    3e5a:	6078      	str	r0, [r7, #4]
}
    3e5c:	370c      	adds	r7, #12
    3e5e:	46bd      	mov	sp, r7
    3e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop

00003e68 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e68:	b480      	push	{r7}
    3e6a:	b083      	sub	sp, #12
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	6078      	str	r0, [r7, #4]
}
    3e70:	370c      	adds	r7, #12
    3e72:	46bd      	mov	sp, r7
    3e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e78:	4770      	bx	lr
    3e7a:	bf00      	nop

00003e7c <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b082      	sub	sp, #8
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e84:	f012 fee8 	bl	16c58 <check_failsafe_task>
}
    3e88:	3708      	adds	r7, #8
    3e8a:	46bd      	mov	sp, r7
    3e8c:	bd80      	pop	{r7, pc}
    3e8e:	bf00      	nop

00003e90 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e90:	b480      	push	{r7}
    3e92:	b083      	sub	sp, #12
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
}
    3e98:	370c      	adds	r7, #12
    3e9a:	46bd      	mov	sp, r7
    3e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea0:	4770      	bx	lr
    3ea2:	bf00      	nop

00003ea4 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3ea4:	b480      	push	{r7}
    3ea6:	b083      	sub	sp, #12
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	6078      	str	r0, [r7, #4]
}
    3eac:	370c      	adds	r7, #12
    3eae:	46bd      	mov	sp, r7
    3eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop

00003eb8 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3eb8:	b580      	push	{r7, lr}
    3eba:	b082      	sub	sp, #8
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3ec0:	f009 f91c 	bl	d0fc <radio_control_task>
}
    3ec4:	3708      	adds	r7, #8
    3ec6:	46bd      	mov	sp, r7
    3ec8:	bd80      	pop	{r7, pc}
    3eca:	bf00      	nop

00003ecc <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3ecc:	b580      	push	{r7, lr}
    3ece:	b082      	sub	sp, #8
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3ed4:	f00d ffcc 	bl	11e70 <ir_gain_calib>
}
    3ed8:	3708      	adds	r7, #8
    3eda:	46bd      	mov	sp, r7
    3edc:	bd80      	pop	{r7, pc}
    3ede:	bf00      	nop

00003ee0 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
}
    3ee8:	370c      	adds	r7, #12
    3eea:	46bd      	mov	sp, r7
    3eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ef0:	4770      	bx	lr
    3ef2:	bf00      	nop

00003ef4 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3ef4:	b480      	push	{r7}
    3ef6:	b083      	sub	sp, #12
    3ef8:	af00      	add	r7, sp, #0
    3efa:	6078      	str	r0, [r7, #4]
}
    3efc:	370c      	adds	r7, #12
    3efe:	46bd      	mov	sp, r7
    3f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f04:	4770      	bx	lr
    3f06:	bf00      	nop

00003f08 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3f10:	f00d ff70 	bl	11df4 <ir_update>
}
    3f14:	3708      	adds	r7, #8
    3f16:	46bd      	mov	sp, r7
    3f18:	bd80      	pop	{r7, pc}
    3f1a:	bf00      	nop

00003f1c <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
    3f22:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3f24:	f011 f9ee 	bl	15304 <estimator_update_state_infrared>
}
    3f28:	3708      	adds	r7, #8
    3f2a:	46bd      	mov	sp, r7
    3f2c:	bd80      	pop	{r7, pc}
    3f2e:	bf00      	nop

00003f30 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b082      	sub	sp, #8
    3f34:	af00      	add	r7, sp, #0
    3f36:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3f38:	f00d ffca 	bl	11ed0 <roll_pitch_pid_run>
}
    3f3c:	3708      	adds	r7, #8
    3f3e:	46bd      	mov	sp, r7
    3f40:	bd80      	pop	{r7, pc}
    3f42:	bf00      	nop

00003f44 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
}
    3f4c:	370c      	adds	r7, #12
    3f4e:	46bd      	mov	sp, r7
    3f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop

00003f58 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3f58:	b480      	push	{r7}
    3f5a:	b083      	sub	sp, #12
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	6078      	str	r0, [r7, #4]
}
    3f60:	370c      	adds	r7, #12
    3f62:	46bd      	mov	sp, r7
    3f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop

00003f6c <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b082      	sub	sp, #8
    3f70:	af00      	add	r7, sp, #0
    3f72:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f74:	f00d f9b0 	bl	112d8 <link_fbw_send>
}
    3f78:	3708      	adds	r7, #8
    3f7a:	46bd      	mov	sp, r7
    3f7c:	bd80      	pop	{r7, pc}
    3f7e:	bf00      	nop

00003f80 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f80:	b480      	push	{r7}
    3f82:	b083      	sub	sp, #12
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	370c      	adds	r7, #12
    3f8a:	46bd      	mov	sp, r7
    3f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f90:	4770      	bx	lr
    3f92:	bf00      	nop

00003f94 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f94:	b480      	push	{r7}
    3f96:	b083      	sub	sp, #12
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
}
    3f9c:	370c      	adds	r7, #12
    3f9e:	46bd      	mov	sp, r7
    3fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa4:	4770      	bx	lr
    3fa6:	bf00      	nop

00003fa8 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3fa8:	b580      	push	{r7, lr}
    3faa:	b082      	sub	sp, #8
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3fb0:	f00d fc6a 	bl	11888 <parse_gps_msg>
}
    3fb4:	3708      	adds	r7, #8
    3fb6:	46bd      	mov	sp, r7
    3fb8:	bd80      	pop	{r7, pc}
    3fba:	bf00      	nop

00003fbc <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3fc4:	f00a fe88 	bl	ecd8 <send_gps_pos>
    send_radIR();
    3fc8:	f00c f84c 	bl	10064 <send_radIR>
    send_takeOff();
    3fcc:	f00c fe44 	bl	10c58 <send_takeOff>
}
    3fd0:	3708      	adds	r7, #8
    3fd2:	46bd      	mov	sp, r7
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	bf00      	nop

00003fd8 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3fd8:	b480      	push	{r7}
    3fda:	b083      	sub	sp, #12
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
    3fe0:	370c      	adds	r7, #12
    3fe2:	46bd      	mov	sp, r7
    3fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop

00003fec <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3fec:	b480      	push	{r7}
    3fee:	b083      	sub	sp, #12
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
}
    3ff4:	370c      	adds	r7, #12
    3ff6:	46bd      	mov	sp, r7
    3ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffc:	4770      	bx	lr
    3ffe:	bf00      	nop

00004000 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    4000:	b580      	push	{r7, lr}
    4002:	b082      	sub	sp, #8
    4004:	af00      	add	r7, sp, #0
    4006:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    4008:	f010 fefe 	bl	14e08 <nav_home>
}
    400c:	3708      	adds	r7, #8
    400e:	46bd      	mov	sp, r7
    4010:	bd80      	pop	{r7, pc}
    4012:	bf00      	nop

00004014 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    4014:	b580      	push	{r7, lr}
    4016:	b082      	sub	sp, #8
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    401c:	f010 ff1a 	bl	14e54 <nav_update>
}
    4020:	3708      	adds	r7, #8
    4022:	46bd      	mov	sp, r7
    4024:	bd80      	pop	{r7, pc}
    4026:	bf00      	nop

00004028 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    4030:	f00e f83a 	bl	120a8 <course_pid_run>
}
    4034:	3708      	adds	r7, #8
    4036:	46bd      	mov	sp, r7
    4038:	bd80      	pop	{r7, pc}
    403a:	bf00      	nop

0000403c <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    403c:	b480      	push	{r7}
    403e:	b083      	sub	sp, #12
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
    4044:	370c      	adds	r7, #12
    4046:	46bd      	mov	sp, r7
    4048:	f85d 7b04 	ldr.w	r7, [sp], #4
    404c:	4770      	bx	lr
    404e:	bf00      	nop

00004050 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    4050:	b480      	push	{r7}
    4052:	b083      	sub	sp, #12
    4054:	af00      	add	r7, sp, #0
    4056:	6078      	str	r0, [r7, #4]
}
    4058:	370c      	adds	r7, #12
    405a:	46bd      	mov	sp, r7
    405c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4060:	4770      	bx	lr
    4062:	bf00      	nop

00004064 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    406c:	f00e faa4 	bl	125b8 <altitude_pid_run>
}
    4070:	3708      	adds	r7, #8
    4072:	46bd      	mov	sp, r7
    4074:	bd80      	pop	{r7, pc}
    4076:	bf00      	nop

00004078 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
    4080:	370c      	adds	r7, #12
    4082:	46bd      	mov	sp, r7
    4084:	f85d 7b04 	ldr.w	r7, [sp], #4
    4088:	4770      	bx	lr
    408a:	bf00      	nop

0000408c <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    408c:	b480      	push	{r7}
    408e:	b083      	sub	sp, #12
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
}
    4094:	370c      	adds	r7, #12
    4096:	46bd      	mov	sp, r7
    4098:	f85d 7b04 	ldr.w	r7, [sp], #4
    409c:	4770      	bx	lr
    409e:	bf00      	nop

000040a0 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    40a8:	f00e f8b6 	bl	12218 <climb_pid_run>
}
    40ac:	3708      	adds	r7, #8
    40ae:	46bd      	mov	sp, r7
    40b0:	bd80      	pop	{r7, pc}
    40b2:	bf00      	nop

000040b4 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
    40bc:	370c      	adds	r7, #12
    40be:	46bd      	mov	sp, r7
    40c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40c4:	4770      	bx	lr
    40c6:	bf00      	nop

000040c8 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    40c8:	b480      	push	{r7}
    40ca:	b083      	sub	sp, #12
    40cc:	af00      	add	r7, sp, #0
    40ce:	6078      	str	r0, [r7, #4]
}
    40d0:	370c      	adds	r7, #12
    40d2:	46bd      	mov	sp, r7
    40d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d8:	4770      	bx	lr
    40da:	bf00      	nop

000040dc <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    40dc:	b580      	push	{r7, lr}
    40de:	b082      	sub	sp, #8
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    40e4:	f003 fa82 	bl	75ec <send_boot>
    send_attitude();
    40e8:	f004 fa58 	bl	859c <send_attitude>
    send_adc();
    40ec:	f004 ff52 	bl	8f94 <send_adc>
    send_settings();
    40f0:	f005 f9e0 	bl	94b4 <send_settings>
    send_desired();
    40f4:	f005 fdea 	bl	9ccc <send_desired>
    send_bat();
    40f8:	f006 fd20 	bl	ab3c <send_bat>
    send_climb();
    40fc:	f007 f8dc 	bl	b2b8 <send_climb>
    send_mode();
    4100:	f007 fe54 	bl	bdac <send_mode>
    send_debug();
    4104:	f008 f92e 	bl	c364 <send_debug>
    send_nav_ref();
    4108:	f008 fc0a 	bl	c920 <send_nav_ref>
}
    410c:	3708      	adds	r7, #8
    410e:	46bd      	mov	sp, r7
    4110:	bd80      	pop	{r7, pc}
    4112:	bf00      	nop

00004114 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4114:	b480      	push	{r7}
    4116:	b083      	sub	sp, #12
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
    411c:	370c      	adds	r7, #12
    411e:	46bd      	mov	sp, r7
    4120:	f85d 7b04 	ldr.w	r7, [sp], #4
    4124:	4770      	bx	lr
    4126:	bf00      	nop

00004128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4128:	b480      	push	{r7}
    412a:	b083      	sub	sp, #12
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	f103 0208 	add.w	r2, r3, #8
    4136:	687b      	ldr	r3, [r7, #4]
    4138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	f04f 32ff 	mov.w	r2, #4294967295
    4140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	f103 0208 	add.w	r2, r3, #8
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	f103 0208 	add.w	r2, r3, #8
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	2200      	movs	r2, #0
    415a:	601a      	str	r2, [r3, #0]
}
    415c:	370c      	adds	r7, #12
    415e:	46bd      	mov	sp, r7
    4160:	f85d 7b04 	ldr.w	r7, [sp], #4
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4168:	b480      	push	{r7}
    416a:	b083      	sub	sp, #12
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	2200      	movs	r2, #0
    4174:	611a      	str	r2, [r3, #16]
}
    4176:	370c      	adds	r7, #12
    4178:	46bd      	mov	sp, r7
    417a:	f85d 7b04 	ldr.w	r7, [sp], #4
    417e:	4770      	bx	lr

00004180 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4180:	b480      	push	{r7}
    4182:	b085      	sub	sp, #20
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
    4188:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	685b      	ldr	r3, [r3, #4]
    418e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	685a      	ldr	r2, [r3, #4]
    4194:	683b      	ldr	r3, [r7, #0]
    4196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	685a      	ldr	r2, [r3, #4]
    419c:	683b      	ldr	r3, [r7, #0]
    419e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	685b      	ldr	r3, [r3, #4]
    41a4:	683a      	ldr	r2, [r7, #0]
    41a6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    41a8:	68fb      	ldr	r3, [r7, #12]
    41aa:	683a      	ldr	r2, [r7, #0]
    41ac:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	683a      	ldr	r2, [r7, #0]
    41b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41b4:	683b      	ldr	r3, [r7, #0]
    41b6:	687a      	ldr	r2, [r7, #4]
    41b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41ba:	687b      	ldr	r3, [r7, #4]
    41bc:	681b      	ldr	r3, [r3, #0]
    41be:	1c5a      	adds	r2, r3, #1
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	601a      	str	r2, [r3, #0]
}
    41c4:	3714      	adds	r7, #20
    41c6:	46bd      	mov	sp, r7
    41c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41cc:	4770      	bx	lr
    41ce:	bf00      	nop

000041d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    41d0:	b480      	push	{r7}
    41d2:	b085      	sub	sp, #20
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
    41d8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    41da:	683b      	ldr	r3, [r7, #0]
    41dc:	681b      	ldr	r3, [r3, #0]
    41de:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    41e0:	68bb      	ldr	r3, [r7, #8]
    41e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    41e6:	d103      	bne.n	41f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	691b      	ldr	r3, [r3, #16]
    41ec:	60fb      	str	r3, [r7, #12]
    41ee:	e00c      	b.n	420a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    41f0:	687b      	ldr	r3, [r7, #4]
    41f2:	3308      	adds	r3, #8
    41f4:	60fb      	str	r3, [r7, #12]
    41f6:	e002      	b.n	41fe <vListInsert+0x2e>
    41f8:	68fb      	ldr	r3, [r7, #12]
    41fa:	685b      	ldr	r3, [r3, #4]
    41fc:	60fb      	str	r3, [r7, #12]
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	685b      	ldr	r3, [r3, #4]
    4202:	681a      	ldr	r2, [r3, #0]
    4204:	68bb      	ldr	r3, [r7, #8]
    4206:	429a      	cmp	r2, r3
    4208:	d9f6      	bls.n	41f8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	685a      	ldr	r2, [r3, #4]
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4212:	683b      	ldr	r3, [r7, #0]
    4214:	685b      	ldr	r3, [r3, #4]
    4216:	683a      	ldr	r2, [r7, #0]
    4218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	68fa      	ldr	r2, [r7, #12]
    421e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	683a      	ldr	r2, [r7, #0]
    4224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4226:	683b      	ldr	r3, [r7, #0]
    4228:	687a      	ldr	r2, [r7, #4]
    422a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	681b      	ldr	r3, [r3, #0]
    4230:	1c5a      	adds	r2, r3, #1
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	601a      	str	r2, [r3, #0]
}
    4236:	3714      	adds	r7, #20
    4238:	46bd      	mov	sp, r7
    423a:	f85d 7b04 	ldr.w	r7, [sp], #4
    423e:	4770      	bx	lr

00004240 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    4240:	b480      	push	{r7}
    4242:	b085      	sub	sp, #20
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	685b      	ldr	r3, [r3, #4]
    424c:	687a      	ldr	r2, [r7, #4]
    424e:	6892      	ldr	r2, [r2, #8]
    4250:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	689b      	ldr	r3, [r3, #8]
    4256:	687a      	ldr	r2, [r7, #4]
    4258:	6852      	ldr	r2, [r2, #4]
    425a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	691b      	ldr	r3, [r3, #16]
    4260:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4262:	68fb      	ldr	r3, [r7, #12]
    4264:	685a      	ldr	r2, [r3, #4]
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	429a      	cmp	r2, r3
    426a:	d103      	bne.n	4274 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	689a      	ldr	r2, [r3, #8]
    4270:	68fb      	ldr	r3, [r7, #12]
    4272:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	2200      	movs	r2, #0
    4278:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    427a:	68fb      	ldr	r3, [r7, #12]
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	1e5a      	subs	r2, r3, #1
    4280:	68fb      	ldr	r3, [r7, #12]
    4282:	601a      	str	r2, [r3, #0]
}
    4284:	3714      	adds	r7, #20
    4286:	46bd      	mov	sp, r7
    4288:	f85d 7b04 	ldr.w	r7, [sp], #4
    428c:	4770      	bx	lr
    428e:	bf00      	nop

00004290 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4290:	b580      	push	{r7, lr}
    4292:	b084      	sub	sp, #16
    4294:	af00      	add	r7, sp, #0
    4296:	6078      	str	r0, [r7, #4]
    4298:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    429a:	2301      	movs	r3, #1
    429c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	2b01      	cmp	r3, #1
    42a2:	d00b      	beq.n	42bc <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42a8:	2b00      	cmp	r3, #0
    42aa:	d001      	beq.n	42b0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    42ac:	2300      	movs	r3, #0
    42ae:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	691b      	ldr	r3, [r3, #16]
    42b4:	2b00      	cmp	r3, #0
    42b6:	d001      	beq.n	42bc <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    42b8:	2300      	movs	r3, #0
    42ba:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	2b01      	cmp	r3, #1
    42c0:	d12f      	bne.n	4322 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	681a      	ldr	r2, [r3, #0]
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42ca:	6879      	ldr	r1, [r7, #4]
    42cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42ce:	fb01 f303 	mul.w	r3, r1, r3
    42d2:	441a      	add	r2, r3
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	2200      	movs	r2, #0
    42dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	681a      	ldr	r2, [r3, #0]
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    42e6:	687b      	ldr	r3, [r7, #4]
    42e8:	681a      	ldr	r2, [r3, #0]
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42ee:	3b01      	subs	r3, #1
    42f0:	6879      	ldr	r1, [r7, #4]
    42f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    42f4:	fb01 f303 	mul.w	r3, r1, r3
    42f8:	441a      	add	r2, r3
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	f04f 32ff 	mov.w	r2, #4294967295
    4304:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	f04f 32ff 	mov.w	r2, #4294967295
    430c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	3310      	adds	r3, #16
    4312:	4618      	mov	r0, r3
    4314:	f7ff ff08 	bl	4128 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	3324      	adds	r3, #36	; 0x24
    431c:	4618      	mov	r0, r3
    431e:	f7ff ff03 	bl	4128 <vListInitialise>
	}

	return xReturn;
    4322:	68fb      	ldr	r3, [r7, #12]
}
    4324:	4618      	mov	r0, r3
    4326:	3710      	adds	r7, #16
    4328:	46bd      	mov	sp, r7
    432a:	bd80      	pop	{r7, pc}

0000432c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    432c:	b580      	push	{r7, lr}
    432e:	b088      	sub	sp, #32
    4330:	af00      	add	r7, sp, #0
    4332:	60f8      	str	r0, [r7, #12]
    4334:	60b9      	str	r1, [r7, #8]
    4336:	4613      	mov	r3, r2
    4338:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    433a:	2300      	movs	r3, #0
    433c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    433e:	68fb      	ldr	r3, [r7, #12]
    4340:	2b00      	cmp	r3, #0
    4342:	d026      	beq.n	4392 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4344:	204c      	movs	r0, #76	; 0x4c
    4346:	f001 fda7 	bl	5e98 <pvPortMalloc>
    434a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    434c:	69bb      	ldr	r3, [r7, #24]
    434e:	2b00      	cmp	r3, #0
    4350:	d01f      	beq.n	4392 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	68ba      	ldr	r2, [r7, #8]
    4356:	fb02 f303 	mul.w	r3, r2, r3
    435a:	3301      	adds	r3, #1
    435c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    435e:	6978      	ldr	r0, [r7, #20]
    4360:	f001 fd9a 	bl	5e98 <pvPortMalloc>
    4364:	4602      	mov	r2, r0
    4366:	69bb      	ldr	r3, [r7, #24]
    4368:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    436a:	69bb      	ldr	r3, [r7, #24]
    436c:	681b      	ldr	r3, [r3, #0]
    436e:	2b00      	cmp	r3, #0
    4370:	d00c      	beq.n	438c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4372:	69bb      	ldr	r3, [r7, #24]
    4374:	68fa      	ldr	r2, [r7, #12]
    4376:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4378:	69bb      	ldr	r3, [r7, #24]
    437a:	68ba      	ldr	r2, [r7, #8]
    437c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    437e:	69b8      	ldr	r0, [r7, #24]
    4380:	2101      	movs	r1, #1
    4382:	f7ff ff85 	bl	4290 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4386:	69bb      	ldr	r3, [r7, #24]
    4388:	61fb      	str	r3, [r7, #28]
    438a:	e002      	b.n	4392 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    438c:	69b8      	ldr	r0, [r7, #24]
    438e:	f001 fe47 	bl	6020 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4392:	69fb      	ldr	r3, [r7, #28]
}
    4394:	4618      	mov	r0, r3
    4396:	3720      	adds	r7, #32
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}

0000439c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    439c:	b580      	push	{r7, lr}
    439e:	b084      	sub	sp, #16
    43a0:	af00      	add	r7, sp, #0
    43a2:	4603      	mov	r3, r0
    43a4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43a6:	204c      	movs	r0, #76	; 0x4c
    43a8:	f001 fd76 	bl	5e98 <pvPortMalloc>
    43ac:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    43ae:	68fb      	ldr	r3, [r7, #12]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d02c      	beq.n	440e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	2200      	movs	r2, #0
    43b8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    43ba:	68fb      	ldr	r3, [r7, #12]
    43bc:	2200      	movs	r2, #0
    43be:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	2200      	movs	r2, #0
    43c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    43c6:	68fb      	ldr	r3, [r7, #12]
    43c8:	2200      	movs	r2, #0
    43ca:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    43cc:	68fb      	ldr	r3, [r7, #12]
    43ce:	2200      	movs	r2, #0
    43d0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    43d2:	68fb      	ldr	r3, [r7, #12]
    43d4:	2201      	movs	r2, #1
    43d6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    43d8:	68fb      	ldr	r3, [r7, #12]
    43da:	2200      	movs	r2, #0
    43dc:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    43de:	68fb      	ldr	r3, [r7, #12]
    43e0:	f04f 32ff 	mov.w	r2, #4294967295
    43e4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    43e6:	68fb      	ldr	r3, [r7, #12]
    43e8:	f04f 32ff 	mov.w	r2, #4294967295
    43ec:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	3310      	adds	r3, #16
    43f2:	4618      	mov	r0, r3
    43f4:	f7ff fe98 	bl	4128 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	3324      	adds	r3, #36	; 0x24
    43fc:	4618      	mov	r0, r3
    43fe:	f7ff fe93 	bl	4128 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4402:	68f8      	ldr	r0, [r7, #12]
    4404:	2100      	movs	r1, #0
    4406:	2200      	movs	r2, #0
    4408:	2300      	movs	r3, #0
    440a:	f000 f81d 	bl	4448 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    440e:	68fb      	ldr	r3, [r7, #12]
	}
    4410:	4618      	mov	r0, r3
    4412:	3710      	adds	r7, #16
    4414:	46bd      	mov	sp, r7
    4416:	bd80      	pop	{r7, pc}

00004418 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4418:	b580      	push	{r7, lr}
    441a:	b084      	sub	sp, #16
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4420:	f001 fcc0 	bl	5da4 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	2b00      	cmp	r3, #0
    442a:	d103      	bne.n	4434 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	685b      	ldr	r3, [r3, #4]
    4430:	60fb      	str	r3, [r7, #12]
    4432:	e001      	b.n	4438 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4434:	2300      	movs	r3, #0
    4436:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    4438:	f001 fcca 	bl	5dd0 <vPortExitCritical>
		
		return pxReturn;
    443c:	68fb      	ldr	r3, [r7, #12]
	}
    443e:	4618      	mov	r0, r3
    4440:	3710      	adds	r7, #16
    4442:	46bd      	mov	sp, r7
    4444:	bd80      	pop	{r7, pc}
    4446:	bf00      	nop

00004448 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4448:	b580      	push	{r7, lr}
    444a:	b088      	sub	sp, #32
    444c:	af00      	add	r7, sp, #0
    444e:	60f8      	str	r0, [r7, #12]
    4450:	60b9      	str	r1, [r7, #8]
    4452:	607a      	str	r2, [r7, #4]
    4454:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4456:	2300      	movs	r3, #0
    4458:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    445a:	f001 fca3 	bl	5da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4466:	429a      	cmp	r2, r3
    4468:	d216      	bcs.n	4498 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    446a:	68f8      	ldr	r0, [r7, #12]
    446c:	68b9      	ldr	r1, [r7, #8]
    446e:	683a      	ldr	r2, [r7, #0]
    4470:	f000 f9d6 	bl	4820 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4474:	68fb      	ldr	r3, [r7, #12]
    4476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4478:	2b00      	cmp	r3, #0
    447a:	d009      	beq.n	4490 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	3324      	adds	r3, #36	; 0x24
    4480:	4618      	mov	r0, r3
    4482:	f001 f905 	bl	5690 <xTaskRemoveFromEventList>
    4486:	4603      	mov	r3, r0
    4488:	2b01      	cmp	r3, #1
    448a:	d101      	bne.n	4490 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    448c:	f001 fc7c 	bl	5d88 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4490:	f001 fc9e 	bl	5dd0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4494:	2301      	movs	r3, #1
    4496:	e059      	b.n	454c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	2b00      	cmp	r3, #0
    449c:	d103      	bne.n	44a6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    449e:	f001 fc97 	bl	5dd0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    44a2:	2300      	movs	r3, #0
    44a4:	e052      	b.n	454c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    44a6:	69fb      	ldr	r3, [r7, #28]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d106      	bne.n	44ba <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    44ac:	f107 0314 	add.w	r3, r7, #20
    44b0:	4618      	mov	r0, r3
    44b2:	f001 f945 	bl	5740 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    44b6:	2301      	movs	r3, #1
    44b8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    44ba:	f001 fc89 	bl	5dd0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    44be:	f000 fe93 	bl	51e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    44c2:	f001 fc6f 	bl	5da4 <vPortEnterCritical>
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    44ce:	d102      	bne.n	44d6 <xQueueGenericSend+0x8e>
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	2200      	movs	r2, #0
    44d4:	645a      	str	r2, [r3, #68]	; 0x44
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	d102      	bne.n	44e6 <xQueueGenericSend+0x9e>
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	2200      	movs	r2, #0
    44e4:	649a      	str	r2, [r3, #72]	; 0x48
    44e6:	f001 fc73 	bl	5dd0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    44ea:	f107 0214 	add.w	r2, r7, #20
    44ee:	1d3b      	adds	r3, r7, #4
    44f0:	4610      	mov	r0, r2
    44f2:	4619      	mov	r1, r3
    44f4:	f001 f93c 	bl	5770 <xTaskCheckForTimeOut>
    44f8:	4603      	mov	r3, r0
    44fa:	2b00      	cmp	r3, #0
    44fc:	d11e      	bne.n	453c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    44fe:	68f8      	ldr	r0, [r7, #12]
    4500:	f000 fa86 	bl	4a10 <prvIsQueueFull>
    4504:	4603      	mov	r3, r0
    4506:	2b00      	cmp	r3, #0
    4508:	d012      	beq.n	4530 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    450a:	68fb      	ldr	r3, [r7, #12]
    450c:	f103 0210 	add.w	r2, r3, #16
    4510:	687b      	ldr	r3, [r7, #4]
    4512:	4610      	mov	r0, r2
    4514:	4619      	mov	r1, r3
    4516:	f001 f883 	bl	5620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    451a:	68f8      	ldr	r0, [r7, #12]
    451c:	f000 fa02 	bl	4924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4520:	f000 fe74 	bl	520c <xTaskResumeAll>
    4524:	4603      	mov	r3, r0
    4526:	2b00      	cmp	r3, #0
    4528:	d10f      	bne.n	454a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    452a:	f001 fc2d 	bl	5d88 <vPortYieldFromISR>
    452e:	e00c      	b.n	454a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4530:	68f8      	ldr	r0, [r7, #12]
    4532:	f000 f9f7 	bl	4924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4536:	f000 fe69 	bl	520c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    453a:	e78e      	b.n	445a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    453c:	68f8      	ldr	r0, [r7, #12]
    453e:	f000 f9f1 	bl	4924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4542:	f000 fe63 	bl	520c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4546:	2300      	movs	r3, #0
    4548:	e000      	b.n	454c <xQueueGenericSend+0x104>
		}
	}
    454a:	e786      	b.n	445a <xQueueGenericSend+0x12>
}
    454c:	4618      	mov	r0, r3
    454e:	3720      	adds	r7, #32
    4550:	46bd      	mov	sp, r7
    4552:	bd80      	pop	{r7, pc}

00004554 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4554:	b580      	push	{r7, lr}
    4556:	b086      	sub	sp, #24
    4558:	af00      	add	r7, sp, #0
    455a:	60f8      	str	r0, [r7, #12]
    455c:	60b9      	str	r1, [r7, #8]
    455e:	607a      	str	r2, [r7, #4]
    4560:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4562:	2300      	movs	r3, #0
    4564:	613b      	str	r3, [r7, #16]
    4566:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    456a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4576:	429a      	cmp	r2, r3
    4578:	d221      	bcs.n	45be <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    457a:	68f8      	ldr	r0, [r7, #12]
    457c:	68b9      	ldr	r1, [r7, #8]
    457e:	683a      	ldr	r2, [r7, #0]
    4580:	f000 f94e 	bl	4820 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4588:	f1b3 3fff 	cmp.w	r3, #4294967295
    458c:	d10f      	bne.n	45ae <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4592:	2b00      	cmp	r3, #0
    4594:	d010      	beq.n	45b8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	3324      	adds	r3, #36	; 0x24
    459a:	4618      	mov	r0, r3
    459c:	f001 f878 	bl	5690 <xTaskRemoveFromEventList>
    45a0:	4603      	mov	r3, r0
    45a2:	2b00      	cmp	r3, #0
    45a4:	d008      	beq.n	45b8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	2201      	movs	r2, #1
    45aa:	601a      	str	r2, [r3, #0]
    45ac:	e004      	b.n	45b8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    45ae:	68fb      	ldr	r3, [r7, #12]
    45b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45b2:	1c5a      	adds	r2, r3, #1
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    45b8:	2301      	movs	r3, #1
    45ba:	617b      	str	r3, [r7, #20]
    45bc:	e001      	b.n	45c2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    45be:	2300      	movs	r3, #0
    45c0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    45c2:	f04f 0000 	mov.w	r0, #0
    45c6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    45ca:	697b      	ldr	r3, [r7, #20]
}
    45cc:	4618      	mov	r0, r3
    45ce:	3718      	adds	r7, #24
    45d0:	46bd      	mov	sp, r7
    45d2:	bd80      	pop	{r7, pc}

000045d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    45d4:	b580      	push	{r7, lr}
    45d6:	b088      	sub	sp, #32
    45d8:	af00      	add	r7, sp, #0
    45da:	60f8      	str	r0, [r7, #12]
    45dc:	60b9      	str	r1, [r7, #8]
    45de:	607a      	str	r2, [r7, #4]
    45e0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45e2:	2300      	movs	r3, #0
    45e4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    45e6:	f001 fbdd 	bl	5da4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45ee:	2b00      	cmp	r3, #0
    45f0:	d03b      	beq.n	466a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	68db      	ldr	r3, [r3, #12]
    45f6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    45f8:	68f8      	ldr	r0, [r7, #12]
    45fa:	68b9      	ldr	r1, [r7, #8]
    45fc:	f000 f96c 	bl	48d8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4600:	683b      	ldr	r3, [r7, #0]
    4602:	2b00      	cmp	r3, #0
    4604:	d11c      	bne.n	4640 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    460a:	1e5a      	subs	r2, r3, #1
    460c:	68fb      	ldr	r3, [r7, #12]
    460e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	2b00      	cmp	r3, #0
    4616:	d104      	bne.n	4622 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4618:	f001 fa5c 	bl	5ad4 <xTaskGetCurrentTaskHandle>
    461c:	4602      	mov	r2, r0
    461e:	68fb      	ldr	r3, [r7, #12]
    4620:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4622:	68fb      	ldr	r3, [r7, #12]
    4624:	691b      	ldr	r3, [r3, #16]
    4626:	2b00      	cmp	r3, #0
    4628:	d01b      	beq.n	4662 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	3310      	adds	r3, #16
    462e:	4618      	mov	r0, r3
    4630:	f001 f82e 	bl	5690 <xTaskRemoveFromEventList>
    4634:	4603      	mov	r3, r0
    4636:	2b01      	cmp	r3, #1
    4638:	d113      	bne.n	4662 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    463a:	f001 fba5 	bl	5d88 <vPortYieldFromISR>
    463e:	e010      	b.n	4662 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	69ba      	ldr	r2, [r7, #24]
    4644:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4646:	68fb      	ldr	r3, [r7, #12]
    4648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    464a:	2b00      	cmp	r3, #0
    464c:	d009      	beq.n	4662 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    464e:	68fb      	ldr	r3, [r7, #12]
    4650:	3324      	adds	r3, #36	; 0x24
    4652:	4618      	mov	r0, r3
    4654:	f001 f81c 	bl	5690 <xTaskRemoveFromEventList>
    4658:	4603      	mov	r3, r0
    465a:	2b00      	cmp	r3, #0
    465c:	d001      	beq.n	4662 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    465e:	f001 fb93 	bl	5d88 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4662:	f001 fbb5 	bl	5dd0 <vPortExitCritical>
				return pdPASS;
    4666:	2301      	movs	r3, #1
    4668:	e066      	b.n	4738 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	2b00      	cmp	r3, #0
    466e:	d103      	bne.n	4678 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4670:	f001 fbae 	bl	5dd0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4674:	2300      	movs	r3, #0
    4676:	e05f      	b.n	4738 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4678:	69fb      	ldr	r3, [r7, #28]
    467a:	2b00      	cmp	r3, #0
    467c:	d106      	bne.n	468c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    467e:	f107 0310 	add.w	r3, r7, #16
    4682:	4618      	mov	r0, r3
    4684:	f001 f85c 	bl	5740 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4688:	2301      	movs	r3, #1
    468a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    468c:	f001 fba0 	bl	5dd0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4690:	f000 fdaa 	bl	51e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4694:	f001 fb86 	bl	5da4 <vPortEnterCritical>
    4698:	68fb      	ldr	r3, [r7, #12]
    469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    469c:	f1b3 3fff 	cmp.w	r3, #4294967295
    46a0:	d102      	bne.n	46a8 <xQueueGenericReceive+0xd4>
    46a2:	68fb      	ldr	r3, [r7, #12]
    46a4:	2200      	movs	r2, #0
    46a6:	645a      	str	r2, [r3, #68]	; 0x44
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    46b0:	d102      	bne.n	46b8 <xQueueGenericReceive+0xe4>
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	2200      	movs	r2, #0
    46b6:	649a      	str	r2, [r3, #72]	; 0x48
    46b8:	f001 fb8a 	bl	5dd0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    46bc:	f107 0210 	add.w	r2, r7, #16
    46c0:	1d3b      	adds	r3, r7, #4
    46c2:	4610      	mov	r0, r2
    46c4:	4619      	mov	r1, r3
    46c6:	f001 f853 	bl	5770 <xTaskCheckForTimeOut>
    46ca:	4603      	mov	r3, r0
    46cc:	2b00      	cmp	r3, #0
    46ce:	d12b      	bne.n	4728 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    46d0:	68f8      	ldr	r0, [r7, #12]
    46d2:	f000 f973 	bl	49bc <prvIsQueueEmpty>
    46d6:	4603      	mov	r3, r0
    46d8:	2b00      	cmp	r3, #0
    46da:	d01f      	beq.n	471c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46dc:	68fb      	ldr	r3, [r7, #12]
    46de:	681b      	ldr	r3, [r3, #0]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d108      	bne.n	46f6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    46e4:	f001 fb5e 	bl	5da4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    46e8:	68fb      	ldr	r3, [r7, #12]
    46ea:	685b      	ldr	r3, [r3, #4]
    46ec:	4618      	mov	r0, r3
    46ee:	f001 fa01 	bl	5af4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    46f2:	f001 fb6d 	bl	5dd0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	4610      	mov	r0, r2
    4700:	4619      	mov	r1, r3
    4702:	f000 ff8d 	bl	5620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4706:	68f8      	ldr	r0, [r7, #12]
    4708:	f000 f90c 	bl	4924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    470c:	f000 fd7e 	bl	520c <xTaskResumeAll>
    4710:	4603      	mov	r3, r0
    4712:	2b00      	cmp	r3, #0
    4714:	d10f      	bne.n	4736 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4716:	f001 fb37 	bl	5d88 <vPortYieldFromISR>
    471a:	e00c      	b.n	4736 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    471c:	68f8      	ldr	r0, [r7, #12]
    471e:	f000 f901 	bl	4924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4722:	f000 fd73 	bl	520c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4726:	e75e      	b.n	45e6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4728:	68f8      	ldr	r0, [r7, #12]
    472a:	f000 f8fb 	bl	4924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    472e:	f000 fd6d 	bl	520c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4732:	2300      	movs	r3, #0
    4734:	e000      	b.n	4738 <xQueueGenericReceive+0x164>
		}
	}
    4736:	e756      	b.n	45e6 <xQueueGenericReceive+0x12>
}
    4738:	4618      	mov	r0, r3
    473a:	3720      	adds	r7, #32
    473c:	46bd      	mov	sp, r7
    473e:	bd80      	pop	{r7, pc}

00004740 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4740:	b580      	push	{r7, lr}
    4742:	b086      	sub	sp, #24
    4744:	af00      	add	r7, sp, #0
    4746:	60f8      	str	r0, [r7, #12]
    4748:	60b9      	str	r1, [r7, #8]
    474a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    474c:	2300      	movs	r3, #0
    474e:	613b      	str	r3, [r7, #16]
    4750:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4754:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    475c:	2b00      	cmp	r3, #0
    475e:	d025      	beq.n	47ac <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4760:	68f8      	ldr	r0, [r7, #12]
    4762:	68b9      	ldr	r1, [r7, #8]
    4764:	f000 f8b8 	bl	48d8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	1e5a      	subs	r2, r3, #1
    476e:	68fb      	ldr	r3, [r7, #12]
    4770:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4776:	f1b3 3fff 	cmp.w	r3, #4294967295
    477a:	d10f      	bne.n	479c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	691b      	ldr	r3, [r3, #16]
    4780:	2b00      	cmp	r3, #0
    4782:	d010      	beq.n	47a6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4784:	68fb      	ldr	r3, [r7, #12]
    4786:	3310      	adds	r3, #16
    4788:	4618      	mov	r0, r3
    478a:	f000 ff81 	bl	5690 <xTaskRemoveFromEventList>
    478e:	4603      	mov	r3, r0
    4790:	2b00      	cmp	r3, #0
    4792:	d008      	beq.n	47a6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	2201      	movs	r2, #1
    4798:	601a      	str	r2, [r3, #0]
    479a:	e004      	b.n	47a6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    479c:	68fb      	ldr	r3, [r7, #12]
    479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47a0:	1c5a      	adds	r2, r3, #1
    47a2:	68fb      	ldr	r3, [r7, #12]
    47a4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    47a6:	2301      	movs	r3, #1
    47a8:	617b      	str	r3, [r7, #20]
    47aa:	e001      	b.n	47b0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    47ac:	2300      	movs	r3, #0
    47ae:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    47b0:	f04f 0000 	mov.w	r0, #0
    47b4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    47b8:	697b      	ldr	r3, [r7, #20]
}
    47ba:	4618      	mov	r0, r3
    47bc:	3718      	adds	r7, #24
    47be:	46bd      	mov	sp, r7
    47c0:	bd80      	pop	{r7, pc}
    47c2:	bf00      	nop

000047c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b084      	sub	sp, #16
    47c8:	af00      	add	r7, sp, #0
    47ca:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    47cc:	f001 faea 	bl	5da4 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47d4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    47d6:	f001 fafb 	bl	5dd0 <vPortExitCritical>

	return uxReturn;
    47da:	68fb      	ldr	r3, [r7, #12]
}
    47dc:	4618      	mov	r0, r3
    47de:	3710      	adds	r7, #16
    47e0:	46bd      	mov	sp, r7
    47e2:	bd80      	pop	{r7, pc}

000047e4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    47e4:	b480      	push	{r7}
    47e6:	b085      	sub	sp, #20
    47e8:	af00      	add	r7, sp, #0
    47ea:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47f0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    47f2:	68fb      	ldr	r3, [r7, #12]
}
    47f4:	4618      	mov	r0, r3
    47f6:	3714      	adds	r7, #20
    47f8:	46bd      	mov	sp, r7
    47fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    47fe:	4770      	bx	lr

00004800 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4800:	b580      	push	{r7, lr}
    4802:	b082      	sub	sp, #8
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	4618      	mov	r0, r3
    480e:	f001 fc07 	bl	6020 <vPortFree>
	vPortFree( pxQueue );
    4812:	6878      	ldr	r0, [r7, #4]
    4814:	f001 fc04 	bl	6020 <vPortFree>
}
    4818:	3708      	adds	r7, #8
    481a:	46bd      	mov	sp, r7
    481c:	bd80      	pop	{r7, pc}
    481e:	bf00      	nop

00004820 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4820:	b580      	push	{r7, lr}
    4822:	b084      	sub	sp, #16
    4824:	af00      	add	r7, sp, #0
    4826:	60f8      	str	r0, [r7, #12]
    4828:	60b9      	str	r1, [r7, #8]
    482a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4830:	2b00      	cmp	r3, #0
    4832:	d10c      	bne.n	484e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	2b00      	cmp	r3, #0
    483a:	d145      	bne.n	48c8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	685b      	ldr	r3, [r3, #4]
    4840:	4618      	mov	r0, r3
    4842:	f001 f9bb 	bl	5bbc <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4846:	68fb      	ldr	r3, [r7, #12]
    4848:	2200      	movs	r2, #0
    484a:	605a      	str	r2, [r3, #4]
    484c:	e03c      	b.n	48c8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	2b00      	cmp	r3, #0
    4852:	d11a      	bne.n	488a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4854:	68fb      	ldr	r3, [r7, #12]
    4856:	689a      	ldr	r2, [r3, #8]
    4858:	68fb      	ldr	r3, [r7, #12]
    485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    485c:	4610      	mov	r0, r2
    485e:	68b9      	ldr	r1, [r7, #8]
    4860:	461a      	mov	r2, r3
    4862:	f014 f845 	bl	188f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4866:	68fb      	ldr	r3, [r7, #12]
    4868:	689a      	ldr	r2, [r3, #8]
    486a:	68fb      	ldr	r3, [r7, #12]
    486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    486e:	441a      	add	r2, r3
    4870:	68fb      	ldr	r3, [r7, #12]
    4872:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4874:	68fb      	ldr	r3, [r7, #12]
    4876:	689a      	ldr	r2, [r3, #8]
    4878:	68fb      	ldr	r3, [r7, #12]
    487a:	685b      	ldr	r3, [r3, #4]
    487c:	429a      	cmp	r2, r3
    487e:	d323      	bcc.n	48c8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	681a      	ldr	r2, [r3, #0]
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	609a      	str	r2, [r3, #8]
    4888:	e01e      	b.n	48c8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    488a:	68fb      	ldr	r3, [r7, #12]
    488c:	68da      	ldr	r2, [r3, #12]
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4892:	4610      	mov	r0, r2
    4894:	68b9      	ldr	r1, [r7, #8]
    4896:	461a      	mov	r2, r3
    4898:	f014 f82a 	bl	188f0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    489c:	68fb      	ldr	r3, [r7, #12]
    489e:	68da      	ldr	r2, [r3, #12]
    48a0:	68fb      	ldr	r3, [r7, #12]
    48a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48a4:	425b      	negs	r3, r3
    48a6:	441a      	add	r2, r3
    48a8:	68fb      	ldr	r3, [r7, #12]
    48aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	68da      	ldr	r2, [r3, #12]
    48b0:	68fb      	ldr	r3, [r7, #12]
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	429a      	cmp	r2, r3
    48b6:	d207      	bcs.n	48c8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    48b8:	68fb      	ldr	r3, [r7, #12]
    48ba:	685a      	ldr	r2, [r3, #4]
    48bc:	68fb      	ldr	r3, [r7, #12]
    48be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48c0:	425b      	negs	r3, r3
    48c2:	441a      	add	r2, r3
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    48c8:	68fb      	ldr	r3, [r7, #12]
    48ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48cc:	1c5a      	adds	r2, r3, #1
    48ce:	68fb      	ldr	r3, [r7, #12]
    48d0:	639a      	str	r2, [r3, #56]	; 0x38
}
    48d2:	3710      	adds	r7, #16
    48d4:	46bd      	mov	sp, r7
    48d6:	bd80      	pop	{r7, pc}

000048d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
    48e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	681b      	ldr	r3, [r3, #0]
    48e6:	2b00      	cmp	r3, #0
    48e8:	d019      	beq.n	491e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	68da      	ldr	r2, [r3, #12]
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48f2:	441a      	add	r2, r3
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	68da      	ldr	r2, [r3, #12]
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	685b      	ldr	r3, [r3, #4]
    4900:	429a      	cmp	r2, r3
    4902:	d303      	bcc.n	490c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	681a      	ldr	r2, [r3, #0]
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	68da      	ldr	r2, [r3, #12]
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4914:	6838      	ldr	r0, [r7, #0]
    4916:	4611      	mov	r1, r2
    4918:	461a      	mov	r2, r3
    491a:	f013 ffe9 	bl	188f0 <memcpy>
	}
}
    491e:	3708      	adds	r7, #8
    4920:	46bd      	mov	sp, r7
    4922:	bd80      	pop	{r7, pc}

00004924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4924:	b580      	push	{r7, lr}
    4926:	b082      	sub	sp, #8
    4928:	af00      	add	r7, sp, #0
    492a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    492c:	f001 fa3a 	bl	5da4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4930:	e014      	b.n	495c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4932:	687b      	ldr	r3, [r7, #4]
    4934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4936:	2b00      	cmp	r3, #0
    4938:	d00f      	beq.n	495a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	3324      	adds	r3, #36	; 0x24
    493e:	4618      	mov	r0, r3
    4940:	f000 fea6 	bl	5690 <xTaskRemoveFromEventList>
    4944:	4603      	mov	r3, r0
    4946:	2b00      	cmp	r3, #0
    4948:	d001      	beq.n	494e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    494a:	f000 ff5d 	bl	5808 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4952:	1e5a      	subs	r2, r3, #1
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	649a      	str	r2, [r3, #72]	; 0x48
    4958:	e000      	b.n	495c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    495a:	e003      	b.n	4964 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4960:	2b00      	cmp	r3, #0
    4962:	dce6      	bgt.n	4932 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	f04f 32ff 	mov.w	r2, #4294967295
    496a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    496c:	f001 fa30 	bl	5dd0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4970:	f001 fa18 	bl	5da4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4974:	e014      	b.n	49a0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4976:	687b      	ldr	r3, [r7, #4]
    4978:	691b      	ldr	r3, [r3, #16]
    497a:	2b00      	cmp	r3, #0
    497c:	d00f      	beq.n	499e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	3310      	adds	r3, #16
    4982:	4618      	mov	r0, r3
    4984:	f000 fe84 	bl	5690 <xTaskRemoveFromEventList>
    4988:	4603      	mov	r3, r0
    498a:	2b00      	cmp	r3, #0
    498c:	d001      	beq.n	4992 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    498e:	f000 ff3b 	bl	5808 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4996:	1e5a      	subs	r2, r3, #1
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	645a      	str	r2, [r3, #68]	; 0x44
    499c:	e000      	b.n	49a0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    499e:	e003      	b.n	49a8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    49a4:	2b00      	cmp	r3, #0
    49a6:	dce6      	bgt.n	4976 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	f04f 32ff 	mov.w	r2, #4294967295
    49ae:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    49b0:	f001 fa0e 	bl	5dd0 <vPortExitCritical>
}
    49b4:	3708      	adds	r7, #8
    49b6:	46bd      	mov	sp, r7
    49b8:	bd80      	pop	{r7, pc}
    49ba:	bf00      	nop

000049bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    49bc:	b580      	push	{r7, lr}
    49be:	b084      	sub	sp, #16
    49c0:	af00      	add	r7, sp, #0
    49c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49c4:	f001 f9ee 	bl	5da4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49cc:	2b00      	cmp	r3, #0
    49ce:	bf14      	ite	ne
    49d0:	2300      	movne	r3, #0
    49d2:	2301      	moveq	r3, #1
    49d4:	b2db      	uxtb	r3, r3
    49d6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49d8:	f001 f9fa 	bl	5dd0 <vPortExitCritical>

	return xReturn;
    49dc:	68fb      	ldr	r3, [r7, #12]
}
    49de:	4618      	mov	r0, r3
    49e0:	3710      	adds	r7, #16
    49e2:	46bd      	mov	sp, r7
    49e4:	bd80      	pop	{r7, pc}
    49e6:	bf00      	nop

000049e8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    49e8:	b480      	push	{r7}
    49ea:	b085      	sub	sp, #20
    49ec:	af00      	add	r7, sp, #0
    49ee:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49f4:	2b00      	cmp	r3, #0
    49f6:	bf14      	ite	ne
    49f8:	2300      	movne	r3, #0
    49fa:	2301      	moveq	r3, #1
    49fc:	b2db      	uxtb	r3, r3
    49fe:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a00:	68fb      	ldr	r3, [r7, #12]
}
    4a02:	4618      	mov	r0, r3
    4a04:	3714      	adds	r7, #20
    4a06:	46bd      	mov	sp, r7
    4a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a0c:	4770      	bx	lr
    4a0e:	bf00      	nop

00004a10 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4a10:	b580      	push	{r7, lr}
    4a12:	b084      	sub	sp, #16
    4a14:	af00      	add	r7, sp, #0
    4a16:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a18:	f001 f9c4 	bl	5da4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a24:	429a      	cmp	r2, r3
    4a26:	bf14      	ite	ne
    4a28:	2300      	movne	r3, #0
    4a2a:	2301      	moveq	r3, #1
    4a2c:	b2db      	uxtb	r3, r3
    4a2e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a30:	f001 f9ce 	bl	5dd0 <vPortExitCritical>

	return xReturn;
    4a34:	68fb      	ldr	r3, [r7, #12]
}
    4a36:	4618      	mov	r0, r3
    4a38:	3710      	adds	r7, #16
    4a3a:	46bd      	mov	sp, r7
    4a3c:	bd80      	pop	{r7, pc}
    4a3e:	bf00      	nop

00004a40 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4a40:	b480      	push	{r7}
    4a42:	b085      	sub	sp, #20
    4a44:	af00      	add	r7, sp, #0
    4a46:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a50:	429a      	cmp	r2, r3
    4a52:	bf14      	ite	ne
    4a54:	2300      	movne	r3, #0
    4a56:	2301      	moveq	r3, #1
    4a58:	b2db      	uxtb	r3, r3
    4a5a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a5c:	68fb      	ldr	r3, [r7, #12]
}
    4a5e:	4618      	mov	r0, r3
    4a60:	3714      	adds	r7, #20
    4a62:	46bd      	mov	sp, r7
    4a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop

00004a6c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b08a      	sub	sp, #40	; 0x28
    4a70:	af02      	add	r7, sp, #8
    4a72:	60f8      	str	r0, [r7, #12]
    4a74:	60b9      	str	r1, [r7, #8]
    4a76:	603b      	str	r3, [r7, #0]
    4a78:	4613      	mov	r3, r2
    4a7a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a7c:	88fb      	ldrh	r3, [r7, #6]
    4a7e:	4618      	mov	r0, r3
    4a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a82:	f000 ffe5 	bl	5a50 <prvAllocateTCBAndStack>
    4a86:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a88:	69bb      	ldr	r3, [r7, #24]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	f000 80a1 	beq.w	4bd2 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a90:	69bb      	ldr	r3, [r7, #24]
    4a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a94:	88fb      	ldrh	r3, [r7, #6]
    4a96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a9a:	3b01      	subs	r3, #1
    4a9c:	009b      	lsls	r3, r3, #2
    4a9e:	4413      	add	r3, r2
    4aa0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4aa2:	697b      	ldr	r3, [r7, #20]
    4aa4:	f023 0307 	bic.w	r3, r3, #7
    4aa8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4aaa:	88fb      	ldrh	r3, [r7, #6]
    4aac:	9300      	str	r3, [sp, #0]
    4aae:	69b8      	ldr	r0, [r7, #24]
    4ab0:	68b9      	ldr	r1, [r7, #8]
    4ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4ab6:	f000 febd 	bl	5834 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4aba:	6978      	ldr	r0, [r7, #20]
    4abc:	68f9      	ldr	r1, [r7, #12]
    4abe:	683a      	ldr	r2, [r7, #0]
    4ac0:	f001 f8f2 	bl	5ca8 <pxPortInitialiseStack>
    4ac4:	4602      	mov	r2, r0
    4ac6:	69bb      	ldr	r3, [r7, #24]
    4ac8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4acc:	2b00      	cmp	r3, #0
    4ace:	d002      	beq.n	4ad6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ad2:	69ba      	ldr	r2, [r7, #24]
    4ad4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4ad6:	f001 f965 	bl	5da4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4ada:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	1c5a      	adds	r2, r3, #1
    4ae6:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4af0:	f241 4310 	movw	r3, #5136	; 0x1410
    4af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	2b00      	cmp	r3, #0
    4afc:	d10f      	bne.n	4b1e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4afe:	f241 4310 	movw	r3, #5136	; 0x1410
    4b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b06:	69ba      	ldr	r2, [r7, #24]
    4b08:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4b0a:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	2b01      	cmp	r3, #1
    4b16:	d118      	bne.n	4b4a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4b18:	f000 fec2 	bl	58a0 <prvInitialiseTaskLists>
    4b1c:	e015      	b.n	4b4a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4b1e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	2b00      	cmp	r3, #0
    4b2a:	d10e      	bne.n	4b4a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4b2c:	f241 4310 	movw	r3, #5136	; 0x1410
    4b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b3a:	429a      	cmp	r2, r3
    4b3c:	d805      	bhi.n	4b4a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4b3e:	f241 4310 	movw	r3, #5136	; 0x1410
    4b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b46:	69ba      	ldr	r2, [r7, #24]
    4b48:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4b4a:	69bb      	ldr	r3, [r7, #24]
    4b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b4e:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	429a      	cmp	r2, r3
    4b5a:	d906      	bls.n	4b6a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4b5c:	69bb      	ldr	r3, [r7, #24]
    4b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b60:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b68:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b6a:	f241 530c 	movw	r3, #5388	; 0x150c
    4b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	1c5a      	adds	r2, r3, #1
    4b76:	f241 530c 	movw	r3, #5388	; 0x150c
    4b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b80:	69bb      	ldr	r3, [r7, #24]
    4b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b84:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	429a      	cmp	r2, r3
    4b90:	d906      	bls.n	4ba0 <xTaskGenericCreate+0x134>
    4b92:	69bb      	ldr	r3, [r7, #24]
    4b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b96:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9e:	601a      	str	r2, [r3, #0]
    4ba0:	69bb      	ldr	r3, [r7, #24]
    4ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba4:	4613      	mov	r3, r2
    4ba6:	009b      	lsls	r3, r3, #2
    4ba8:	4413      	add	r3, r2
    4baa:	009b      	lsls	r3, r3, #2
    4bac:	f241 4214 	movw	r2, #5140	; 0x1414
    4bb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bb4:	441a      	add	r2, r3
    4bb6:	69bb      	ldr	r3, [r7, #24]
    4bb8:	3304      	adds	r3, #4
    4bba:	4610      	mov	r0, r2
    4bbc:	4619      	mov	r1, r3
    4bbe:	f7ff fadf 	bl	4180 <vListInsertEnd>

			xReturn = pdPASS;
    4bc2:	2301      	movs	r3, #1
    4bc4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4bc6:	69b8      	ldr	r0, [r7, #24]
    4bc8:	f012 fe88 	bl	178dc <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4bcc:	f001 f900 	bl	5dd0 <vPortExitCritical>
    4bd0:	e002      	b.n	4bd8 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4bd2:	f04f 33ff 	mov.w	r3, #4294967295
    4bd6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4bd8:	69fb      	ldr	r3, [r7, #28]
    4bda:	2b01      	cmp	r3, #1
    4bdc:	d111      	bne.n	4c02 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4bde:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be6:	681b      	ldr	r3, [r3, #0]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d00a      	beq.n	4c02 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4bec:	f241 4310 	movw	r3, #5136	; 0x1410
    4bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bfa:	429a      	cmp	r2, r3
    4bfc:	d201      	bcs.n	4c02 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4bfe:	f001 f8c3 	bl	5d88 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c02:	69fb      	ldr	r3, [r7, #28]
}
    4c04:	4618      	mov	r0, r3
    4c06:	3720      	adds	r7, #32
    4c08:	46bd      	mov	sp, r7
    4c0a:	bd80      	pop	{r7, pc}

00004c0c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4c0c:	b580      	push	{r7, lr}
    4c0e:	b084      	sub	sp, #16
    4c10:	af00      	add	r7, sp, #0
    4c12:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c14:	f001 f8c6 	bl	5da4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4c18:	f241 4310 	movw	r3, #5136	; 0x1410
    4c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	687a      	ldr	r2, [r7, #4]
    4c24:	429a      	cmp	r2, r3
    4c26:	d101      	bne.n	4c2c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4c28:	2300      	movs	r3, #0
    4c2a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	2b00      	cmp	r3, #0
    4c30:	d105      	bne.n	4c3e <vTaskDelete+0x32>
    4c32:	f241 4310 	movw	r3, #5136	; 0x1410
    4c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	e000      	b.n	4c40 <vTaskDelete+0x34>
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c42:	68fb      	ldr	r3, [r7, #12]
    4c44:	3304      	adds	r3, #4
    4c46:	4618      	mov	r0, r3
    4c48:	f7ff fafa 	bl	4240 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c4c:	68fb      	ldr	r3, [r7, #12]
    4c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c50:	2b00      	cmp	r3, #0
    4c52:	d004      	beq.n	4c5e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c54:	68fb      	ldr	r3, [r7, #12]
    4c56:	3318      	adds	r3, #24
    4c58:	4618      	mov	r0, r3
    4c5a:	f7ff faf1 	bl	4240 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4c5e:	68fb      	ldr	r3, [r7, #12]
    4c60:	3304      	adds	r3, #4
    4c62:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4c66:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c6a:	4619      	mov	r1, r3
    4c6c:	f7ff fa88 	bl	4180 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c70:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	1c5a      	adds	r2, r3, #1
    4c7c:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c84:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c86:	f241 530c 	movw	r3, #5388	; 0x150c
    4c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	1c5a      	adds	r2, r3, #1
    4c92:	f241 530c 	movw	r3, #5388	; 0x150c
    4c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c9c:	f001 f898 	bl	5dd0 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4ca0:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	2b00      	cmp	r3, #0
    4cac:	d004      	beq.n	4cb8 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d101      	bne.n	4cb8 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4cb4:	f001 f868 	bl	5d88 <vPortYieldFromISR>
			}
		}
	}
    4cb8:	3710      	adds	r7, #16
    4cba:	46bd      	mov	sp, r7
    4cbc:	bd80      	pop	{r7, pc}
    4cbe:	bf00      	nop

00004cc0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4cc0:	b580      	push	{r7, lr}
    4cc2:	b086      	sub	sp, #24
    4cc4:	af00      	add	r7, sp, #0
    4cc6:	6078      	str	r0, [r7, #4]
    4cc8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4cca:	2300      	movs	r3, #0
    4ccc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4cce:	f000 fa8b 	bl	51e8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	681a      	ldr	r2, [r3, #0]
    4cd6:	683b      	ldr	r3, [r7, #0]
    4cd8:	4413      	add	r3, r2
    4cda:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	681a      	ldr	r2, [r3, #0]
    4ce0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	429a      	cmp	r2, r3
    4cec:	d90f      	bls.n	4d0e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4cee:	687b      	ldr	r3, [r7, #4]
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	693b      	ldr	r3, [r7, #16]
    4cf4:	429a      	cmp	r2, r3
    4cf6:	d919      	bls.n	4d2c <vTaskDelayUntil+0x6c>
    4cf8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	693a      	ldr	r2, [r7, #16]
    4d04:	429a      	cmp	r2, r3
    4d06:	d911      	bls.n	4d2c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d08:	2301      	movs	r3, #1
    4d0a:	617b      	str	r3, [r7, #20]
    4d0c:	e00e      	b.n	4d2c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	681a      	ldr	r2, [r3, #0]
    4d12:	693b      	ldr	r3, [r7, #16]
    4d14:	429a      	cmp	r2, r3
    4d16:	d807      	bhi.n	4d28 <vTaskDelayUntil+0x68>
    4d18:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d20:	681b      	ldr	r3, [r3, #0]
    4d22:	693a      	ldr	r2, [r7, #16]
    4d24:	429a      	cmp	r2, r3
    4d26:	d901      	bls.n	4d2c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d28:	2301      	movs	r3, #1
    4d2a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	693a      	ldr	r2, [r7, #16]
    4d30:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4d32:	697b      	ldr	r3, [r7, #20]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d00b      	beq.n	4d50 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d38:	f241 4310 	movw	r3, #5136	; 0x1410
    4d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	3304      	adds	r3, #4
    4d44:	4618      	mov	r0, r3
    4d46:	f7ff fa7b 	bl	4240 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d4a:	6938      	ldr	r0, [r7, #16]
    4d4c:	f000 fe3c 	bl	59c8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4d50:	f000 fa5c 	bl	520c <xTaskResumeAll>
    4d54:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d56:	68fb      	ldr	r3, [r7, #12]
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d101      	bne.n	4d60 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4d5c:	f001 f814 	bl	5d88 <vPortYieldFromISR>
		}
	}
    4d60:	3718      	adds	r7, #24
    4d62:	46bd      	mov	sp, r7
    4d64:	bd80      	pop	{r7, pc}
    4d66:	bf00      	nop

00004d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d68:	b580      	push	{r7, lr}
    4d6a:	b084      	sub	sp, #16
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d70:	2300      	movs	r3, #0
    4d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d74:	687b      	ldr	r3, [r7, #4]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d018      	beq.n	4dac <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d7a:	f000 fa35 	bl	51e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d7e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d86:	681a      	ldr	r2, [r3, #0]
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	4413      	add	r3, r2
    4d8c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d8e:	f241 4310 	movw	r3, #5136	; 0x1410
    4d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	3304      	adds	r3, #4
    4d9a:	4618      	mov	r0, r3
    4d9c:	f7ff fa50 	bl	4240 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4da0:	68b8      	ldr	r0, [r7, #8]
    4da2:	f000 fe11 	bl	59c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4da6:	f000 fa31 	bl	520c <xTaskResumeAll>
    4daa:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dac:	68fb      	ldr	r3, [r7, #12]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d101      	bne.n	4db6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4db2:	f000 ffe9 	bl	5d88 <vPortYieldFromISR>
		}
	}
    4db6:	3710      	adds	r7, #16
    4db8:	46bd      	mov	sp, r7
    4dba:	bd80      	pop	{r7, pc}

00004dbc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4dbc:	b580      	push	{r7, lr}
    4dbe:	b084      	sub	sp, #16
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4dc4:	f000 ffee 	bl	5da4 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d105      	bne.n	4dda <uxTaskPriorityGet+0x1e>
    4dce:	f241 4310 	movw	r3, #5136	; 0x1410
    4dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd6:	681b      	ldr	r3, [r3, #0]
    4dd8:	e000      	b.n	4ddc <uxTaskPriorityGet+0x20>
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4dde:	68fb      	ldr	r3, [r7, #12]
    4de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4de2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4de4:	f000 fff4 	bl	5dd0 <vPortExitCritical>

		return uxReturn;
    4de8:	68bb      	ldr	r3, [r7, #8]
	}
    4dea:	4618      	mov	r0, r3
    4dec:	3710      	adds	r7, #16
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}
    4df2:	bf00      	nop

00004df4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4df4:	b580      	push	{r7, lr}
    4df6:	b086      	sub	sp, #24
    4df8:	af00      	add	r7, sp, #0
    4dfa:	6078      	str	r0, [r7, #4]
    4dfc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4dfe:	2300      	movs	r3, #0
    4e00:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e02:	683b      	ldr	r3, [r7, #0]
    4e04:	2b04      	cmp	r3, #4
    4e06:	d901      	bls.n	4e0c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4e08:	2304      	movs	r3, #4
    4e0a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4e0c:	f000 ffca 	bl	5da4 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4e10:	f241 4310 	movw	r3, #5136	; 0x1410
    4e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e18:	681b      	ldr	r3, [r3, #0]
    4e1a:	687a      	ldr	r2, [r7, #4]
    4e1c:	429a      	cmp	r2, r3
    4e1e:	d101      	bne.n	4e24 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4e20:	2300      	movs	r3, #0
    4e22:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	2b00      	cmp	r3, #0
    4e28:	d105      	bne.n	4e36 <vTaskPrioritySet+0x42>
    4e2a:	f241 4310 	movw	r3, #5136	; 0x1410
    4e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e32:	681b      	ldr	r3, [r3, #0]
    4e34:	e000      	b.n	4e38 <vTaskPrioritySet+0x44>
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4e3a:	693b      	ldr	r3, [r7, #16]
    4e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4e3e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4e40:	68fa      	ldr	r2, [r7, #12]
    4e42:	683b      	ldr	r3, [r7, #0]
    4e44:	429a      	cmp	r2, r3
    4e46:	d058      	beq.n	4efa <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4e48:	683a      	ldr	r2, [r7, #0]
    4e4a:	68fb      	ldr	r3, [r7, #12]
    4e4c:	429a      	cmp	r2, r3
    4e4e:	d905      	bls.n	4e5c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	2b00      	cmp	r3, #0
    4e54:	d007      	beq.n	4e66 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4e56:	2301      	movs	r3, #1
    4e58:	617b      	str	r3, [r7, #20]
    4e5a:	e004      	b.n	4e66 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d101      	bne.n	4e66 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4e62:	2301      	movs	r3, #1
    4e64:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4e66:	693b      	ldr	r3, [r7, #16]
    4e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e6a:	693b      	ldr	r3, [r7, #16]
    4e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e6e:	429a      	cmp	r2, r3
    4e70:	d102      	bne.n	4e78 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e72:	693b      	ldr	r3, [r7, #16]
    4e74:	683a      	ldr	r2, [r7, #0]
    4e76:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e78:	693b      	ldr	r3, [r7, #16]
    4e7a:	683a      	ldr	r2, [r7, #0]
    4e7c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	f1c3 0205 	rsb	r2, r3, #5
    4e84:	693b      	ldr	r3, [r7, #16]
    4e86:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e88:	693b      	ldr	r3, [r7, #16]
    4e8a:	6959      	ldr	r1, [r3, #20]
    4e8c:	68fa      	ldr	r2, [r7, #12]
    4e8e:	4613      	mov	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	4413      	add	r3, r2
    4e94:	009b      	lsls	r3, r3, #2
    4e96:	f241 4214 	movw	r2, #5140	; 0x1414
    4e9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e9e:	4413      	add	r3, r2
    4ea0:	4299      	cmp	r1, r3
    4ea2:	d125      	bne.n	4ef0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4ea4:	693b      	ldr	r3, [r7, #16]
    4ea6:	3304      	adds	r3, #4
    4ea8:	4618      	mov	r0, r3
    4eaa:	f7ff f9c9 	bl	4240 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4eae:	693b      	ldr	r3, [r7, #16]
    4eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eb2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d906      	bls.n	4ece <vTaskPrioritySet+0xda>
    4ec0:	693b      	ldr	r3, [r7, #16]
    4ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec4:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ecc:	601a      	str	r2, [r3, #0]
    4ece:	693b      	ldr	r3, [r7, #16]
    4ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed2:	4613      	mov	r3, r2
    4ed4:	009b      	lsls	r3, r3, #2
    4ed6:	4413      	add	r3, r2
    4ed8:	009b      	lsls	r3, r3, #2
    4eda:	f241 4214 	movw	r2, #5140	; 0x1414
    4ede:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ee2:	441a      	add	r2, r3
    4ee4:	693b      	ldr	r3, [r7, #16]
    4ee6:	3304      	adds	r3, #4
    4ee8:	4610      	mov	r0, r2
    4eea:	4619      	mov	r1, r3
    4eec:	f7ff f948 	bl	4180 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4ef0:	697b      	ldr	r3, [r7, #20]
    4ef2:	2b01      	cmp	r3, #1
    4ef4:	d101      	bne.n	4efa <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4ef6:	f000 ff47 	bl	5d88 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4efa:	f000 ff69 	bl	5dd0 <vPortExitCritical>
	}
    4efe:	3718      	adds	r7, #24
    4f00:	46bd      	mov	sp, r7
    4f02:	bd80      	pop	{r7, pc}

00004f04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f04:	b580      	push	{r7, lr}
    4f06:	b084      	sub	sp, #16
    4f08:	af00      	add	r7, sp, #0
    4f0a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f0c:	f000 ff4a 	bl	5da4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4f10:	f241 4310 	movw	r3, #5136	; 0x1410
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	687a      	ldr	r2, [r7, #4]
    4f1c:	429a      	cmp	r2, r3
    4f1e:	d101      	bne.n	4f24 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4f20:	2300      	movs	r3, #0
    4f22:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d105      	bne.n	4f36 <vTaskSuspend+0x32>
    4f2a:	f241 4310 	movw	r3, #5136	; 0x1410
    4f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f32:	681b      	ldr	r3, [r3, #0]
    4f34:	e000      	b.n	4f38 <vTaskSuspend+0x34>
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4f3a:	68fb      	ldr	r3, [r7, #12]
    4f3c:	3304      	adds	r3, #4
    4f3e:	4618      	mov	r0, r3
    4f40:	f7ff f97e 	bl	4240 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d004      	beq.n	4f56 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f4c:	68fb      	ldr	r3, [r7, #12]
    4f4e:	3318      	adds	r3, #24
    4f50:	4618      	mov	r0, r3
    4f52:	f7ff f975 	bl	4240 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4f56:	68fb      	ldr	r3, [r7, #12]
    4f58:	3304      	adds	r3, #4
    4f5a:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4f5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4f62:	4619      	mov	r1, r3
    4f64:	f7ff f90c 	bl	4180 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f68:	f000 ff32 	bl	5dd0 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d11e      	bne.n	4fb0 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f72:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d002      	beq.n	4f86 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f80:	f000 ff02 	bl	5d88 <vPortYieldFromISR>
    4f84:	e014      	b.n	4fb0 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f86:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8e:	681a      	ldr	r2, [r3, #0]
    4f90:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	429a      	cmp	r2, r3
    4f9c:	d106      	bne.n	4fac <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f9e:	f241 4310 	movw	r3, #5136	; 0x1410
    4fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa6:	2200      	movs	r2, #0
    4fa8:	601a      	str	r2, [r3, #0]
    4faa:	e001      	b.n	4fb0 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4fac:	f000 fadc 	bl	5568 <vTaskSwitchContext>
				}
			}
		}
	}
    4fb0:	3710      	adds	r7, #16
    4fb2:	46bd      	mov	sp, r7
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	bf00      	nop

00004fb8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4fb8:	b480      	push	{r7}
    4fba:	b085      	sub	sp, #20
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4fc0:	2300      	movs	r3, #0
    4fc2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4fc8:	68bb      	ldr	r3, [r7, #8]
    4fca:	695a      	ldr	r2, [r3, #20]
    4fcc:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd4:	429a      	cmp	r2, r3
    4fd6:	d10d      	bne.n	4ff4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4fd8:	68bb      	ldr	r3, [r7, #8]
    4fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fdc:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	429a      	cmp	r2, r3
    4fe6:	d005      	beq.n	4ff4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4fe8:	68bb      	ldr	r3, [r7, #8]
    4fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fec:	2b00      	cmp	r3, #0
    4fee:	d101      	bne.n	4ff4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4ff0:	2301      	movs	r3, #1
    4ff2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4ff4:	68fb      	ldr	r3, [r7, #12]
	}
    4ff6:	4618      	mov	r0, r3
    4ff8:	3714      	adds	r7, #20
    4ffa:	46bd      	mov	sp, r7
    4ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5000:	4770      	bx	lr
    5002:	bf00      	nop

00005004 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    5004:	b580      	push	{r7, lr}
    5006:	b084      	sub	sp, #16
    5008:	af00      	add	r7, sp, #0
    500a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    5010:	68fb      	ldr	r3, [r7, #12]
    5012:	2b00      	cmp	r3, #0
    5014:	d043      	beq.n	509e <vTaskResume+0x9a>
    5016:	f241 4310 	movw	r3, #5136	; 0x1410
    501a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501e:	681b      	ldr	r3, [r3, #0]
    5020:	68fa      	ldr	r2, [r7, #12]
    5022:	429a      	cmp	r2, r3
    5024:	d03b      	beq.n	509e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    5026:	f000 febd 	bl	5da4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    502a:	68f8      	ldr	r0, [r7, #12]
    502c:	f7ff ffc4 	bl	4fb8 <xTaskIsTaskSuspended>
    5030:	4603      	mov	r3, r0
    5032:	2b01      	cmp	r3, #1
    5034:	d131      	bne.n	509a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	3304      	adds	r3, #4
    503a:	4618      	mov	r0, r3
    503c:	f7ff f900 	bl	4240 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5040:	68fb      	ldr	r3, [r7, #12]
    5042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5044:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504c:	681b      	ldr	r3, [r3, #0]
    504e:	429a      	cmp	r2, r3
    5050:	d906      	bls.n	5060 <vTaskResume+0x5c>
    5052:	68fb      	ldr	r3, [r7, #12]
    5054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5056:	f241 43f4 	movw	r3, #5364	; 0x14f4
    505a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505e:	601a      	str	r2, [r3, #0]
    5060:	68fb      	ldr	r3, [r7, #12]
    5062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5064:	4613      	mov	r3, r2
    5066:	009b      	lsls	r3, r3, #2
    5068:	4413      	add	r3, r2
    506a:	009b      	lsls	r3, r3, #2
    506c:	f241 4214 	movw	r2, #5140	; 0x1414
    5070:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5074:	441a      	add	r2, r3
    5076:	68fb      	ldr	r3, [r7, #12]
    5078:	3304      	adds	r3, #4
    507a:	4610      	mov	r0, r2
    507c:	4619      	mov	r1, r3
    507e:	f7ff f87f 	bl	4180 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5082:	68fb      	ldr	r3, [r7, #12]
    5084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5086:	f241 4310 	movw	r3, #5136	; 0x1410
    508a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508e:	681b      	ldr	r3, [r3, #0]
    5090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5092:	429a      	cmp	r2, r3
    5094:	d301      	bcc.n	509a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5096:	f000 fe77 	bl	5d88 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    509a:	f000 fe99 	bl	5dd0 <vPortExitCritical>
		}
	}
    509e:	3710      	adds	r7, #16
    50a0:	46bd      	mov	sp, r7
    50a2:	bd80      	pop	{r7, pc}

000050a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    50a4:	b580      	push	{r7, lr}
    50a6:	b086      	sub	sp, #24
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    50ac:	2300      	movs	r3, #0
    50ae:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    50b4:	2300      	movs	r3, #0
    50b6:	60fb      	str	r3, [r7, #12]
    50b8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    50bc:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    50c0:	6938      	ldr	r0, [r7, #16]
    50c2:	f7ff ff79 	bl	4fb8 <xTaskIsTaskSuspended>
    50c6:	4603      	mov	r3, r0
    50c8:	2b01      	cmp	r3, #1
    50ca:	d144      	bne.n	5156 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50cc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    50d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d134      	bne.n	5144 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    50da:	693b      	ldr	r3, [r7, #16]
    50dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50de:	f241 4310 	movw	r3, #5136	; 0x1410
    50e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e6:	681b      	ldr	r3, [r3, #0]
    50e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50ea:	429a      	cmp	r2, r3
    50ec:	bf34      	ite	cc
    50ee:	2300      	movcc	r3, #0
    50f0:	2301      	movcs	r3, #1
    50f2:	b2db      	uxtb	r3, r3
    50f4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50f6:	693b      	ldr	r3, [r7, #16]
    50f8:	3304      	adds	r3, #4
    50fa:	4618      	mov	r0, r3
    50fc:	f7ff f8a0 	bl	4240 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5100:	693b      	ldr	r3, [r7, #16]
    5102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5104:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	429a      	cmp	r2, r3
    5110:	d906      	bls.n	5120 <xTaskResumeFromISR+0x7c>
    5112:	693b      	ldr	r3, [r7, #16]
    5114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5116:	f241 43f4 	movw	r3, #5364	; 0x14f4
    511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511e:	601a      	str	r2, [r3, #0]
    5120:	693b      	ldr	r3, [r7, #16]
    5122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5124:	4613      	mov	r3, r2
    5126:	009b      	lsls	r3, r3, #2
    5128:	4413      	add	r3, r2
    512a:	009b      	lsls	r3, r3, #2
    512c:	f241 4214 	movw	r2, #5140	; 0x1414
    5130:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5134:	441a      	add	r2, r3
    5136:	693b      	ldr	r3, [r7, #16]
    5138:	3304      	adds	r3, #4
    513a:	4610      	mov	r0, r2
    513c:	4619      	mov	r1, r3
    513e:	f7ff f81f 	bl	4180 <vListInsertEnd>
    5142:	e008      	b.n	5156 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5144:	693b      	ldr	r3, [r7, #16]
    5146:	3318      	adds	r3, #24
    5148:	f241 40a8 	movw	r0, #5288	; 0x14a8
    514c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5150:	4619      	mov	r1, r3
    5152:	f7ff f815 	bl	4180 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5156:	f04f 0000 	mov.w	r0, #0
    515a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    515e:	697b      	ldr	r3, [r7, #20]
	}
    5160:	4618      	mov	r0, r3
    5162:	3718      	adds	r7, #24
    5164:	46bd      	mov	sp, r7
    5166:	bd80      	pop	{r7, pc}

00005168 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5168:	b580      	push	{r7, lr}
    516a:	b086      	sub	sp, #24
    516c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    516e:	2300      	movs	r3, #0
    5170:	9300      	str	r3, [sp, #0]
    5172:	2300      	movs	r3, #0
    5174:	9301      	str	r3, [sp, #4]
    5176:	2300      	movs	r3, #0
    5178:	9302      	str	r3, [sp, #8]
    517a:	2300      	movs	r3, #0
    517c:	9303      	str	r3, [sp, #12]
    517e:	f645 0021 	movw	r0, #22561	; 0x5821
    5182:	f2c0 0000 	movt	r0, #0
    5186:	f648 21e8 	movw	r1, #35560	; 0x8ae8
    518a:	f2c0 0101 	movt	r1, #1
    518e:	2280      	movs	r2, #128	; 0x80
    5190:	2300      	movs	r3, #0
    5192:	f7ff fc6b 	bl	4a6c <xTaskGenericCreate>
    5196:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	2b01      	cmp	r3, #1
    519c:	d111      	bne.n	51c2 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    519e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51a2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    51a6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ae:	2201      	movs	r2, #1
    51b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    51b2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	2200      	movs	r2, #0
    51bc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    51be:	f000 fdb5 	bl	5d2c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    51c2:	3708      	adds	r7, #8
    51c4:	46bd      	mov	sp, r7
    51c6:	bd80      	pop	{r7, pc}

000051c8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    51c8:	b580      	push	{r7, lr}
    51ca:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    51cc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51d0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    51d4:	f241 43f8 	movw	r3, #5368	; 0x14f8
    51d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51dc:	2200      	movs	r2, #0
    51de:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    51e0:	f000 fdcc 	bl	5d7c <vPortEndScheduler>
}
    51e4:	bd80      	pop	{r7, pc}
    51e6:	bf00      	nop

000051e8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51e8:	b480      	push	{r7}
    51ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51ec:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	1c5a      	adds	r2, r3, #1
    51f8:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5200:	601a      	str	r2, [r3, #0]
}
    5202:	46bd      	mov	sp, r7
    5204:	f85d 7b04 	ldr.w	r7, [sp], #4
    5208:	4770      	bx	lr
    520a:	bf00      	nop

0000520c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    520c:	b590      	push	{r4, r7, lr}
    520e:	b083      	sub	sp, #12
    5210:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5212:	2300      	movs	r3, #0
    5214:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5216:	f000 fdc5 	bl	5da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    521a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    521e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5222:	681b      	ldr	r3, [r3, #0]
    5224:	1e5a      	subs	r2, r3, #1
    5226:	f241 43fc 	movw	r3, #5372	; 0x14fc
    522a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5230:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5238:	681b      	ldr	r3, [r3, #0]
    523a:	2b00      	cmp	r3, #0
    523c:	d177      	bne.n	532e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    523e:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	2b00      	cmp	r3, #0
    524a:	d070      	beq.n	532e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    524c:	2300      	movs	r3, #0
    524e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5250:	e036      	b.n	52c0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5252:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525a:	68db      	ldr	r3, [r3, #12]
    525c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    525e:	f104 0318 	add.w	r3, r4, #24
    5262:	4618      	mov	r0, r3
    5264:	f7fe ffec 	bl	4240 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5268:	1d23      	adds	r3, r4, #4
    526a:	4618      	mov	r0, r3
    526c:	f7fe ffe8 	bl	4240 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5272:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    527a:	681b      	ldr	r3, [r3, #0]
    527c:	429a      	cmp	r2, r3
    527e:	d905      	bls.n	528c <xTaskResumeAll+0x80>
    5280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5282:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528a:	601a      	str	r2, [r3, #0]
    528c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    528e:	4613      	mov	r3, r2
    5290:	009b      	lsls	r3, r3, #2
    5292:	4413      	add	r3, r2
    5294:	009b      	lsls	r3, r3, #2
    5296:	f241 4214 	movw	r2, #5140	; 0x1414
    529a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    529e:	441a      	add	r2, r3
    52a0:	1d23      	adds	r3, r4, #4
    52a2:	4610      	mov	r0, r2
    52a4:	4619      	mov	r1, r3
    52a6:	f7fe ff6b 	bl	4180 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    52aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52ac:	f241 4310 	movw	r3, #5136	; 0x1410
    52b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b4:	681b      	ldr	r3, [r3, #0]
    52b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52b8:	429a      	cmp	r2, r3
    52ba:	d301      	bcc.n	52c0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    52bc:	2301      	movs	r3, #1
    52be:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52c0:	f241 43a8 	movw	r3, #5288	; 0x14a8
    52c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d1c1      	bne.n	5252 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52ce:	f241 5300 	movw	r3, #5376	; 0x1500
    52d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	2b00      	cmp	r3, #0
    52da:	d014      	beq.n	5306 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52dc:	e00c      	b.n	52f8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    52de:	f000 f865 	bl	53ac <vTaskIncrementTick>
						--uxMissedTicks;
    52e2:	f241 5300 	movw	r3, #5376	; 0x1500
    52e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ea:	681b      	ldr	r3, [r3, #0]
    52ec:	1e5a      	subs	r2, r3, #1
    52ee:	f241 5300 	movw	r3, #5376	; 0x1500
    52f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52f8:	f241 5300 	movw	r3, #5376	; 0x1500
    52fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5300:	681b      	ldr	r3, [r3, #0]
    5302:	2b00      	cmp	r3, #0
    5304:	d1eb      	bne.n	52de <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5306:	683b      	ldr	r3, [r7, #0]
    5308:	2b01      	cmp	r3, #1
    530a:	d006      	beq.n	531a <xTaskResumeAll+0x10e>
    530c:	f241 5304 	movw	r3, #5380	; 0x1504
    5310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	2b01      	cmp	r3, #1
    5318:	d109      	bne.n	532e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    531a:	2301      	movs	r3, #1
    531c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    531e:	f241 5304 	movw	r3, #5380	; 0x1504
    5322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5326:	2200      	movs	r2, #0
    5328:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    532a:	f000 fd2d 	bl	5d88 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    532e:	f000 fd4f 	bl	5dd0 <vPortExitCritical>

	return xAlreadyYielded;
    5332:	687b      	ldr	r3, [r7, #4]
}
    5334:	4618      	mov	r0, r3
    5336:	370c      	adds	r7, #12
    5338:	46bd      	mov	sp, r7
    533a:	bd90      	pop	{r4, r7, pc}

0000533c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    533c:	b580      	push	{r7, lr}
    533e:	b082      	sub	sp, #8
    5340:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5342:	f000 fd2f 	bl	5da4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5346:	f241 43ec 	movw	r3, #5356	; 0x14ec
    534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5352:	f000 fd3d 	bl	5dd0 <vPortExitCritical>

	return xTicks;
    5356:	687b      	ldr	r3, [r7, #4]
}
    5358:	4618      	mov	r0, r3
    535a:	3708      	adds	r7, #8
    535c:	46bd      	mov	sp, r7
    535e:	bd80      	pop	{r7, pc}

00005360 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5360:	b480      	push	{r7}
    5362:	b083      	sub	sp, #12
    5364:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5366:	2300      	movs	r3, #0
    5368:	607b      	str	r3, [r7, #4]
    536a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    536e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5372:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    537e:	f04f 0000 	mov.w	r0, #0
    5382:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5386:	683b      	ldr	r3, [r7, #0]
}
    5388:	4618      	mov	r0, r3
    538a:	370c      	adds	r7, #12
    538c:	46bd      	mov	sp, r7
    538e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5392:	4770      	bx	lr

00005394 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5394:	b480      	push	{r7}
    5396:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5398:	f241 43e8 	movw	r3, #5352	; 0x14e8
    539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a0:	681b      	ldr	r3, [r3, #0]
}
    53a2:	4618      	mov	r0, r3
    53a4:	46bd      	mov	sp, r7
    53a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53aa:	4770      	bx	lr

000053ac <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b084      	sub	sp, #16
    53b0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    53b2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    53b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	2b00      	cmp	r3, #0
    53be:	f040 80b9 	bne.w	5534 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    53c2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	1c5a      	adds	r2, r3, #1
    53ce:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    53d8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    53dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	2b00      	cmp	r3, #0
    53e4:	d13f      	bne.n	5466 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    53e6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    53f2:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fa:	681a      	ldr	r2, [r3, #0]
    53fc:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5404:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5406:	f241 43a4 	movw	r3, #5284	; 0x14a4
    540a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540e:	68fa      	ldr	r2, [r7, #12]
    5410:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5412:	f241 5308 	movw	r3, #5384	; 0x1508
    5416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	1c5a      	adds	r2, r3, #1
    541e:	f241 5308 	movw	r3, #5384	; 0x1508
    5422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5426:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5428:	f241 43a0 	movw	r3, #5280	; 0x14a0
    542c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5430:	681b      	ldr	r3, [r3, #0]
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	2b00      	cmp	r3, #0
    5436:	d107      	bne.n	5448 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    5438:	f240 5330 	movw	r3, #1328	; 0x530
    543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5440:	f04f 32ff 	mov.w	r2, #4294967295
    5444:	601a      	str	r2, [r3, #0]
    5446:	e00e      	b.n	5466 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5448:	f241 43a0 	movw	r3, #5280	; 0x14a0
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	68db      	ldr	r3, [r3, #12]
    5454:	68db      	ldr	r3, [r3, #12]
    5456:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5458:	68bb      	ldr	r3, [r7, #8]
    545a:	685a      	ldr	r2, [r3, #4]
    545c:	f240 5330 	movw	r3, #1328	; 0x530
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5466:	f241 43ec 	movw	r3, #5356	; 0x14ec
    546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546e:	681a      	ldr	r2, [r3, #0]
    5470:	f240 5330 	movw	r3, #1328	; 0x530
    5474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	429a      	cmp	r2, r3
    547c:	d359      	bcc.n	5532 <vTaskIncrementTick+0x186>
    547e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	2b00      	cmp	r3, #0
    548c:	d107      	bne.n	549e <vTaskIncrementTick+0xf2>
    548e:	f240 5330 	movw	r3, #1328	; 0x530
    5492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5496:	f04f 32ff 	mov.w	r2, #4294967295
    549a:	601a      	str	r2, [r3, #0]
    549c:	e049      	b.n	5532 <vTaskIncrementTick+0x186>
    549e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    54a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a6:	681b      	ldr	r3, [r3, #0]
    54a8:	68db      	ldr	r3, [r3, #12]
    54aa:	68db      	ldr	r3, [r3, #12]
    54ac:	60bb      	str	r3, [r7, #8]
    54ae:	68bb      	ldr	r3, [r7, #8]
    54b0:	685b      	ldr	r3, [r3, #4]
    54b2:	607b      	str	r3, [r7, #4]
    54b4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    54b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54bc:	681a      	ldr	r2, [r3, #0]
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	429a      	cmp	r2, r3
    54c2:	d206      	bcs.n	54d2 <vTaskIncrementTick+0x126>
    54c4:	f240 5330 	movw	r3, #1328	; 0x530
    54c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54cc:	687a      	ldr	r2, [r7, #4]
    54ce:	601a      	str	r2, [r3, #0]
    54d0:	e02f      	b.n	5532 <vTaskIncrementTick+0x186>
    54d2:	68bb      	ldr	r3, [r7, #8]
    54d4:	3304      	adds	r3, #4
    54d6:	4618      	mov	r0, r3
    54d8:	f7fe feb2 	bl	4240 <vListRemove>
    54dc:	68bb      	ldr	r3, [r7, #8]
    54de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54e0:	2b00      	cmp	r3, #0
    54e2:	d004      	beq.n	54ee <vTaskIncrementTick+0x142>
    54e4:	68bb      	ldr	r3, [r7, #8]
    54e6:	3318      	adds	r3, #24
    54e8:	4618      	mov	r0, r3
    54ea:	f7fe fea9 	bl	4240 <vListRemove>
    54ee:	68bb      	ldr	r3, [r7, #8]
    54f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54f2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	429a      	cmp	r2, r3
    54fe:	d906      	bls.n	550e <vTaskIncrementTick+0x162>
    5500:	68bb      	ldr	r3, [r7, #8]
    5502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5504:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550c:	601a      	str	r2, [r3, #0]
    550e:	68bb      	ldr	r3, [r7, #8]
    5510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5512:	4613      	mov	r3, r2
    5514:	009b      	lsls	r3, r3, #2
    5516:	4413      	add	r3, r2
    5518:	009b      	lsls	r3, r3, #2
    551a:	f241 4214 	movw	r2, #5140	; 0x1414
    551e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5522:	441a      	add	r2, r3
    5524:	68bb      	ldr	r3, [r7, #8]
    5526:	3304      	adds	r3, #4
    5528:	4610      	mov	r0, r2
    552a:	4619      	mov	r1, r3
    552c:	f7fe fe28 	bl	4180 <vListInsertEnd>
    5530:	e7a5      	b.n	547e <vTaskIncrementTick+0xd2>
    5532:	e00c      	b.n	554e <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    5534:	f241 5300 	movw	r3, #5376	; 0x1500
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	1c5a      	adds	r2, r3, #1
    5540:	f241 5300 	movw	r3, #5376	; 0x1500
    5544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5548:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    554a:	f012 f9d9 	bl	17900 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    554e:	f241 5300 	movw	r3, #5376	; 0x1500
    5552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	2b00      	cmp	r3, #0
    555a:	d101      	bne.n	5560 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    555c:	f012 f9d0 	bl	17900 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5560:	3710      	adds	r7, #16
    5562:	46bd      	mov	sp, r7
    5564:	bd80      	pop	{r7, pc}
    5566:	bf00      	nop

00005568 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5568:	b580      	push	{r7, lr}
    556a:	b082      	sub	sp, #8
    556c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    556e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	2b00      	cmp	r3, #0
    557a:	d006      	beq.n	558a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    557c:	f241 5304 	movw	r3, #5380	; 0x1504
    5580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5584:	2201      	movs	r2, #1
    5586:	601a      	str	r2, [r3, #0]
    5588:	e047      	b.n	561a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    558a:	f012 f9b3 	bl	178f4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    558e:	e00a      	b.n	55a6 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5590:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	1e5a      	subs	r2, r3, #1
    559c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a4:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    55a6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ae:	6819      	ldr	r1, [r3, #0]
    55b0:	f241 4214 	movw	r2, #5140	; 0x1414
    55b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55b8:	460b      	mov	r3, r1
    55ba:	009b      	lsls	r3, r3, #2
    55bc:	440b      	add	r3, r1
    55be:	009b      	lsls	r3, r3, #2
    55c0:	4413      	add	r3, r2
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d0e3      	beq.n	5590 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    55c8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    55cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d0:	681a      	ldr	r2, [r3, #0]
    55d2:	4613      	mov	r3, r2
    55d4:	009b      	lsls	r3, r3, #2
    55d6:	4413      	add	r3, r2
    55d8:	009b      	lsls	r3, r3, #2
    55da:	f241 4214 	movw	r2, #5140	; 0x1414
    55de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55e2:	4413      	add	r3, r2
    55e4:	607b      	str	r3, [r7, #4]
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	685b      	ldr	r3, [r3, #4]
    55ea:	685a      	ldr	r2, [r3, #4]
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	605a      	str	r2, [r3, #4]
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	685a      	ldr	r2, [r3, #4]
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	3308      	adds	r3, #8
    55f8:	429a      	cmp	r2, r3
    55fa:	d104      	bne.n	5606 <vTaskSwitchContext+0x9e>
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	685b      	ldr	r3, [r3, #4]
    5600:	685a      	ldr	r2, [r3, #4]
    5602:	687b      	ldr	r3, [r7, #4]
    5604:	605a      	str	r2, [r3, #4]
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	685b      	ldr	r3, [r3, #4]
    560a:	68da      	ldr	r2, [r3, #12]
    560c:	f241 4310 	movw	r3, #5136	; 0x1410
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5616:	f012 f967 	bl	178e8 <myTraceSwitchedIn>
	}
}
    561a:	3708      	adds	r7, #8
    561c:	46bd      	mov	sp, r7
    561e:	bd80      	pop	{r7, pc}

00005620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5620:	b580      	push	{r7, lr}
    5622:	b084      	sub	sp, #16
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
    5628:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    562a:	f241 4310 	movw	r3, #5136	; 0x1410
    562e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	3318      	adds	r3, #24
    5636:	6878      	ldr	r0, [r7, #4]
    5638:	4619      	mov	r1, r3
    563a:	f7fe fdc9 	bl	41d0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    563e:	f241 4310 	movw	r3, #5136	; 0x1410
    5642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	3304      	adds	r3, #4
    564a:	4618      	mov	r0, r3
    564c:	f7fe fdf8 	bl	4240 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5650:	683b      	ldr	r3, [r7, #0]
    5652:	f1b3 3fff 	cmp.w	r3, #4294967295
    5656:	d10d      	bne.n	5674 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5658:	f241 4310 	movw	r3, #5136	; 0x1410
    565c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	3304      	adds	r3, #4
    5664:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5668:	f2c2 0000 	movt	r0, #8192	; 0x2000
    566c:	4619      	mov	r1, r3
    566e:	f7fe fd87 	bl	4180 <vListInsertEnd>
    5672:	e00a      	b.n	568a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5674:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567c:	681a      	ldr	r2, [r3, #0]
    567e:	683b      	ldr	r3, [r7, #0]
    5680:	4413      	add	r3, r2
    5682:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5684:	68f8      	ldr	r0, [r7, #12]
    5686:	f000 f99f 	bl	59c8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    568a:	3710      	adds	r7, #16
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}

00005690 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5690:	b580      	push	{r7, lr}
    5692:	b084      	sub	sp, #16
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	68db      	ldr	r3, [r3, #12]
    569c:	68db      	ldr	r3, [r3, #12]
    569e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    56a0:	68bb      	ldr	r3, [r7, #8]
    56a2:	3318      	adds	r3, #24
    56a4:	4618      	mov	r0, r3
    56a6:	f7fe fdcb 	bl	4240 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    56aa:	f241 43fc 	movw	r3, #5372	; 0x14fc
    56ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d126      	bne.n	5706 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    56b8:	68bb      	ldr	r3, [r7, #8]
    56ba:	3304      	adds	r3, #4
    56bc:	4618      	mov	r0, r3
    56be:	f7fe fdbf 	bl	4240 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    56c2:	68bb      	ldr	r3, [r7, #8]
    56c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56c6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    56ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	429a      	cmp	r2, r3
    56d2:	d906      	bls.n	56e2 <xTaskRemoveFromEventList+0x52>
    56d4:	68bb      	ldr	r3, [r7, #8]
    56d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56d8:	f241 43f4 	movw	r3, #5364	; 0x14f4
    56dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e0:	601a      	str	r2, [r3, #0]
    56e2:	68bb      	ldr	r3, [r7, #8]
    56e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56e6:	4613      	mov	r3, r2
    56e8:	009b      	lsls	r3, r3, #2
    56ea:	4413      	add	r3, r2
    56ec:	009b      	lsls	r3, r3, #2
    56ee:	f241 4214 	movw	r2, #5140	; 0x1414
    56f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56f6:	441a      	add	r2, r3
    56f8:	68bb      	ldr	r3, [r7, #8]
    56fa:	3304      	adds	r3, #4
    56fc:	4610      	mov	r0, r2
    56fe:	4619      	mov	r1, r3
    5700:	f7fe fd3e 	bl	4180 <vListInsertEnd>
    5704:	e008      	b.n	5718 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5706:	68bb      	ldr	r3, [r7, #8]
    5708:	3318      	adds	r3, #24
    570a:	f241 40a8 	movw	r0, #5288	; 0x14a8
    570e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5712:	4619      	mov	r1, r3
    5714:	f7fe fd34 	bl	4180 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5718:	68bb      	ldr	r3, [r7, #8]
    571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    571c:	f241 4310 	movw	r3, #5136	; 0x1410
    5720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5728:	429a      	cmp	r2, r3
    572a:	d302      	bcc.n	5732 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    572c:	2301      	movs	r3, #1
    572e:	60fb      	str	r3, [r7, #12]
    5730:	e001      	b.n	5736 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5732:	2300      	movs	r3, #0
    5734:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    5736:	68fb      	ldr	r3, [r7, #12]
}
    5738:	4618      	mov	r0, r3
    573a:	3710      	adds	r7, #16
    573c:	46bd      	mov	sp, r7
    573e:	bd80      	pop	{r7, pc}

00005740 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5740:	b480      	push	{r7}
    5742:	b083      	sub	sp, #12
    5744:	af00      	add	r7, sp, #0
    5746:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5748:	f241 5308 	movw	r3, #5384	; 0x1508
    574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5750:	681a      	ldr	r2, [r3, #0]
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5756:	f241 43ec 	movw	r3, #5356	; 0x14ec
    575a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    575e:	681a      	ldr	r2, [r3, #0]
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	605a      	str	r2, [r3, #4]
}
    5764:	370c      	adds	r7, #12
    5766:	46bd      	mov	sp, r7
    5768:	f85d 7b04 	ldr.w	r7, [sp], #4
    576c:	4770      	bx	lr
    576e:	bf00      	nop

00005770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5770:	b580      	push	{r7, lr}
    5772:	b084      	sub	sp, #16
    5774:	af00      	add	r7, sp, #0
    5776:	6078      	str	r0, [r7, #4]
    5778:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    577a:	f000 fb13 	bl	5da4 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    577e:	683b      	ldr	r3, [r7, #0]
    5780:	681b      	ldr	r3, [r3, #0]
    5782:	f1b3 3fff 	cmp.w	r3, #4294967295
    5786:	d102      	bne.n	578e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5788:	2300      	movs	r3, #0
    578a:	60fb      	str	r3, [r7, #12]
    578c:	e035      	b.n	57fa <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    578e:	687b      	ldr	r3, [r7, #4]
    5790:	681a      	ldr	r2, [r3, #0]
    5792:	f241 5308 	movw	r3, #5384	; 0x1508
    5796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	429a      	cmp	r2, r3
    579e:	d00b      	beq.n	57b8 <xTaskCheckForTimeOut+0x48>
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	685a      	ldr	r2, [r3, #4]
    57a4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	429a      	cmp	r2, r3
    57b0:	d802      	bhi.n	57b8 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    57b2:	2301      	movs	r3, #1
    57b4:	60fb      	str	r3, [r7, #12]
    57b6:	e020      	b.n	57fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    57b8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c0:	681a      	ldr	r2, [r3, #0]
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	685b      	ldr	r3, [r3, #4]
    57c6:	1ad2      	subs	r2, r2, r3
    57c8:	683b      	ldr	r3, [r7, #0]
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	429a      	cmp	r2, r3
    57ce:	d212      	bcs.n	57f6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    57d0:	683b      	ldr	r3, [r7, #0]
    57d2:	681a      	ldr	r2, [r3, #0]
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	6859      	ldr	r1, [r3, #4]
    57d8:	f241 43ec 	movw	r3, #5356	; 0x14ec
    57dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	1acb      	subs	r3, r1, r3
    57e4:	441a      	add	r2, r3
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    57ea:	6878      	ldr	r0, [r7, #4]
    57ec:	f7ff ffa8 	bl	5740 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    57f0:	2300      	movs	r3, #0
    57f2:	60fb      	str	r3, [r7, #12]
    57f4:	e001      	b.n	57fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    57f6:	2301      	movs	r3, #1
    57f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    57fa:	f000 fae9 	bl	5dd0 <vPortExitCritical>

	return xReturn;
    57fe:	68fb      	ldr	r3, [r7, #12]
}
    5800:	4618      	mov	r0, r3
    5802:	3710      	adds	r7, #16
    5804:	46bd      	mov	sp, r7
    5806:	bd80      	pop	{r7, pc}

00005808 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5808:	b480      	push	{r7}
    580a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    580c:	f241 5304 	movw	r3, #5380	; 0x1504
    5810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5814:	2201      	movs	r2, #1
    5816:	601a      	str	r2, [r3, #0]
}
    5818:	46bd      	mov	sp, r7
    581a:	f85d 7b04 	ldr.w	r7, [sp], #4
    581e:	4770      	bx	lr

00005820 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5820:	b580      	push	{r7, lr}
    5822:	b082      	sub	sp, #8
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5828:	f000 f886 	bl	5938 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    582c:	f000 faac 	bl	5d88 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5830:	e7fa      	b.n	5828 <prvIdleTask+0x8>
    5832:	bf00      	nop

00005834 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5834:	b580      	push	{r7, lr}
    5836:	b084      	sub	sp, #16
    5838:	af00      	add	r7, sp, #0
    583a:	60f8      	str	r0, [r7, #12]
    583c:	60b9      	str	r1, [r7, #8]
    583e:	607a      	str	r2, [r7, #4]
    5840:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	3334      	adds	r3, #52	; 0x34
    5846:	4618      	mov	r0, r3
    5848:	68b9      	ldr	r1, [r7, #8]
    584a:	2210      	movs	r2, #16
    584c:	f013 f8f4 	bl	18a38 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5850:	68fb      	ldr	r3, [r7, #12]
    5852:	2200      	movs	r2, #0
    5854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	2b04      	cmp	r3, #4
    585c:	d901      	bls.n	5862 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    585e:	2304      	movs	r3, #4
    5860:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5862:	68fb      	ldr	r3, [r7, #12]
    5864:	687a      	ldr	r2, [r7, #4]
    5866:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5868:	68fb      	ldr	r3, [r7, #12]
    586a:	687a      	ldr	r2, [r7, #4]
    586c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    586e:	68fb      	ldr	r3, [r7, #12]
    5870:	3304      	adds	r3, #4
    5872:	4618      	mov	r0, r3
    5874:	f7fe fc78 	bl	4168 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5878:	68fb      	ldr	r3, [r7, #12]
    587a:	3318      	adds	r3, #24
    587c:	4618      	mov	r0, r3
    587e:	f7fe fc73 	bl	4168 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	68fa      	ldr	r2, [r7, #12]
    5886:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	f1c3 0205 	rsb	r2, r3, #5
    588e:	68fb      	ldr	r3, [r7, #12]
    5890:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5892:	68fb      	ldr	r3, [r7, #12]
    5894:	68fa      	ldr	r2, [r7, #12]
    5896:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5898:	3710      	adds	r7, #16
    589a:	46bd      	mov	sp, r7
    589c:	bd80      	pop	{r7, pc}
    589e:	bf00      	nop

000058a0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b082      	sub	sp, #8
    58a4:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    58a6:	2300      	movs	r3, #0
    58a8:	607b      	str	r3, [r7, #4]
    58aa:	e00f      	b.n	58cc <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    58ac:	687a      	ldr	r2, [r7, #4]
    58ae:	4613      	mov	r3, r2
    58b0:	009b      	lsls	r3, r3, #2
    58b2:	4413      	add	r3, r2
    58b4:	009b      	lsls	r3, r3, #2
    58b6:	f241 4214 	movw	r2, #5140	; 0x1414
    58ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58be:	4413      	add	r3, r2
    58c0:	4618      	mov	r0, r3
    58c2:	f7fe fc31 	bl	4128 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	3301      	adds	r3, #1
    58ca:	607b      	str	r3, [r7, #4]
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	2b04      	cmp	r3, #4
    58d0:	d9ec      	bls.n	58ac <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    58d2:	f241 4078 	movw	r0, #5240	; 0x1478
    58d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58da:	f7fe fc25 	bl	4128 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    58de:	f241 408c 	movw	r0, #5260	; 0x148c
    58e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58e6:	f7fe fc1f 	bl	4128 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    58ea:	f241 40a8 	movw	r0, #5288	; 0x14a8
    58ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58f2:	f7fe fc19 	bl	4128 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    58f6:	f241 40bc 	movw	r0, #5308	; 0x14bc
    58fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58fe:	f7fe fc13 	bl	4128 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5902:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5906:	f2c2 0000 	movt	r0, #8192	; 0x2000
    590a:	f7fe fc0d 	bl	4128 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    590e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5916:	f241 4278 	movw	r2, #5240	; 0x1478
    591a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    591e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5920:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5928:	f241 428c 	movw	r2, #5260	; 0x148c
    592c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5930:	601a      	str	r2, [r3, #0]
}
    5932:	3708      	adds	r7, #8
    5934:	46bd      	mov	sp, r7
    5936:	bd80      	pop	{r7, pc}

00005938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5938:	b580      	push	{r7, lr}
    593a:	b082      	sub	sp, #8
    593c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    593e:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	2b00      	cmp	r3, #0
    594a:	d03a      	beq.n	59c2 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    594c:	f7ff fc4c 	bl	51e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5950:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	2b00      	cmp	r3, #0
    595c:	bf14      	ite	ne
    595e:	2300      	movne	r3, #0
    5960:	2301      	moveq	r3, #1
    5962:	b2db      	uxtb	r3, r3
    5964:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5966:	f7ff fc51 	bl	520c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	2b00      	cmp	r3, #0
    596e:	d128      	bne.n	59c2 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5970:	f000 fa18 	bl	5da4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5974:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597c:	68db      	ldr	r3, [r3, #12]
    597e:	68db      	ldr	r3, [r3, #12]
    5980:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5982:	683b      	ldr	r3, [r7, #0]
    5984:	3304      	adds	r3, #4
    5986:	4618      	mov	r0, r3
    5988:	f7fe fc5a 	bl	4240 <vListRemove>
					--uxCurrentNumberOfTasks;
    598c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	1e5a      	subs	r2, r3, #1
    5998:	f241 43e8 	movw	r3, #5352	; 0x14e8
    599c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    59a2:	f241 43d0 	movw	r3, #5328	; 0x14d0
    59a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	1e5a      	subs	r2, r3, #1
    59ae:	f241 43d0 	movw	r3, #5328	; 0x14d0
    59b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    59b8:	f000 fa0a 	bl	5dd0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    59bc:	6838      	ldr	r0, [r7, #0]
    59be:	f000 f879 	bl	5ab4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    59c2:	3708      	adds	r7, #8
    59c4:	46bd      	mov	sp, r7
    59c6:	bd80      	pop	{r7, pc}

000059c8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    59c8:	b580      	push	{r7, lr}
    59ca:	b082      	sub	sp, #8
    59cc:	af00      	add	r7, sp, #0
    59ce:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    59d0:	f241 4310 	movw	r3, #5136	; 0x1410
    59d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	687a      	ldr	r2, [r7, #4]
    59dc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    59de:	f241 43ec 	movw	r3, #5356	; 0x14ec
    59e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e6:	681b      	ldr	r3, [r3, #0]
    59e8:	687a      	ldr	r2, [r7, #4]
    59ea:	429a      	cmp	r2, r3
    59ec:	d20f      	bcs.n	5a0e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59ee:	f241 43a4 	movw	r3, #5284	; 0x14a4
    59f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f6:	681a      	ldr	r2, [r3, #0]
    59f8:	f241 4310 	movw	r3, #5136	; 0x1410
    59fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	3304      	adds	r3, #4
    5a04:	4610      	mov	r0, r2
    5a06:	4619      	mov	r1, r3
    5a08:	f7fe fbe2 	bl	41d0 <vListInsert>
    5a0c:	e01c      	b.n	5a48 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a0e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	681a      	ldr	r2, [r3, #0]
    5a18:	f241 4310 	movw	r3, #5136	; 0x1410
    5a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	3304      	adds	r3, #4
    5a24:	4610      	mov	r0, r2
    5a26:	4619      	mov	r1, r3
    5a28:	f7fe fbd2 	bl	41d0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5a2c:	f240 5330 	movw	r3, #1328	; 0x530
    5a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	687a      	ldr	r2, [r7, #4]
    5a38:	429a      	cmp	r2, r3
    5a3a:	d205      	bcs.n	5a48 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5a3c:	f240 5330 	movw	r3, #1328	; 0x530
    5a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a44:	687a      	ldr	r2, [r7, #4]
    5a46:	601a      	str	r2, [r3, #0]
		}
	}
}
    5a48:	3708      	adds	r7, #8
    5a4a:	46bd      	mov	sp, r7
    5a4c:	bd80      	pop	{r7, pc}
    5a4e:	bf00      	nop

00005a50 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5a50:	b580      	push	{r7, lr}
    5a52:	b084      	sub	sp, #16
    5a54:	af00      	add	r7, sp, #0
    5a56:	4603      	mov	r3, r0
    5a58:	6039      	str	r1, [r7, #0]
    5a5a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5a5c:	2050      	movs	r0, #80	; 0x50
    5a5e:	f000 fa1b 	bl	5e98 <pvPortMalloc>
    5a62:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5a64:	68fb      	ldr	r3, [r7, #12]
    5a66:	2b00      	cmp	r3, #0
    5a68:	d01f      	beq.n	5aaa <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a6a:	683b      	ldr	r3, [r7, #0]
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d106      	bne.n	5a7e <prvAllocateTCBAndStack+0x2e>
    5a70:	88fb      	ldrh	r3, [r7, #6]
    5a72:	009b      	lsls	r3, r3, #2
    5a74:	4618      	mov	r0, r3
    5a76:	f000 fa0f 	bl	5e98 <pvPortMalloc>
    5a7a:	4603      	mov	r3, r0
    5a7c:	e000      	b.n	5a80 <prvAllocateTCBAndStack+0x30>
    5a7e:	683b      	ldr	r3, [r7, #0]
    5a80:	68fa      	ldr	r2, [r7, #12]
    5a82:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d105      	bne.n	5a98 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a8c:	68f8      	ldr	r0, [r7, #12]
    5a8e:	f000 fac7 	bl	6020 <vPortFree>
			pxNewTCB = NULL;
    5a92:	2300      	movs	r3, #0
    5a94:	60fb      	str	r3, [r7, #12]
    5a96:	e008      	b.n	5aaa <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5a9c:	88fb      	ldrh	r3, [r7, #6]
    5a9e:	009b      	lsls	r3, r3, #2
    5aa0:	4610      	mov	r0, r2
    5aa2:	21a5      	movs	r1, #165	; 0xa5
    5aa4:	461a      	mov	r2, r3
    5aa6:	f012 ff77 	bl	18998 <memset>
		}
	}

	return pxNewTCB;
    5aaa:	68fb      	ldr	r3, [r7, #12]
}
    5aac:	4618      	mov	r0, r3
    5aae:	3710      	adds	r7, #16
    5ab0:	46bd      	mov	sp, r7
    5ab2:	bd80      	pop	{r7, pc}

00005ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b082      	sub	sp, #8
    5ab8:	af00      	add	r7, sp, #0
    5aba:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ac0:	4618      	mov	r0, r3
    5ac2:	f000 faad 	bl	6020 <vPortFree>
		vPortFree( pxTCB );
    5ac6:	6878      	ldr	r0, [r7, #4]
    5ac8:	f000 faaa 	bl	6020 <vPortFree>
	}
    5acc:	3708      	adds	r7, #8
    5ace:	46bd      	mov	sp, r7
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	bf00      	nop

00005ad4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5ad4:	b480      	push	{r7}
    5ad6:	b083      	sub	sp, #12
    5ad8:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5ada:	f241 4310 	movw	r3, #5136	; 0x1410
    5ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	607b      	str	r3, [r7, #4]

		return xReturn;
    5ae6:	687b      	ldr	r3, [r7, #4]
	}
    5ae8:	4618      	mov	r0, r3
    5aea:	370c      	adds	r7, #12
    5aec:	46bd      	mov	sp, r7
    5aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af2:	4770      	bx	lr

00005af4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5af4:	b580      	push	{r7, lr}
    5af6:	b084      	sub	sp, #16
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b04:	f241 4310 	movw	r3, #5136	; 0x1410
    5b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b10:	429a      	cmp	r2, r3
    5b12:	d24f      	bcs.n	5bb4 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5b14:	f241 4310 	movw	r3, #5136	; 0x1410
    5b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b20:	f1c3 0205 	rsb	r2, r3, #5
    5b24:	68fb      	ldr	r3, [r7, #12]
    5b26:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	6959      	ldr	r1, [r3, #20]
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b30:	4613      	mov	r3, r2
    5b32:	009b      	lsls	r3, r3, #2
    5b34:	4413      	add	r3, r2
    5b36:	009b      	lsls	r3, r3, #2
    5b38:	f241 4214 	movw	r2, #5140	; 0x1414
    5b3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b40:	4413      	add	r3, r2
    5b42:	4299      	cmp	r1, r3
    5b44:	d12e      	bne.n	5ba4 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b46:	68fb      	ldr	r3, [r7, #12]
    5b48:	3304      	adds	r3, #4
    5b4a:	4618      	mov	r0, r3
    5b4c:	f7fe fb78 	bl	4240 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b50:	f241 4310 	movw	r3, #5136	; 0x1410
    5b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b5c:	68fb      	ldr	r3, [r7, #12]
    5b5e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5b60:	68fb      	ldr	r3, [r7, #12]
    5b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b64:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b6c:	681b      	ldr	r3, [r3, #0]
    5b6e:	429a      	cmp	r2, r3
    5b70:	d906      	bls.n	5b80 <vTaskPriorityInherit+0x8c>
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b76:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7e:	601a      	str	r2, [r3, #0]
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b84:	4613      	mov	r3, r2
    5b86:	009b      	lsls	r3, r3, #2
    5b88:	4413      	add	r3, r2
    5b8a:	009b      	lsls	r3, r3, #2
    5b8c:	f241 4214 	movw	r2, #5140	; 0x1414
    5b90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b94:	441a      	add	r2, r3
    5b96:	68fb      	ldr	r3, [r7, #12]
    5b98:	3304      	adds	r3, #4
    5b9a:	4610      	mov	r0, r2
    5b9c:	4619      	mov	r1, r3
    5b9e:	f7fe faef 	bl	4180 <vListInsertEnd>
    5ba2:	e007      	b.n	5bb4 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5ba4:	f241 4310 	movw	r3, #5136	; 0x1410
    5ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5bb4:	3710      	adds	r7, #16
    5bb6:	46bd      	mov	sp, r7
    5bb8:	bd80      	pop	{r7, pc}
    5bba:	bf00      	nop

00005bbc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b084      	sub	sp, #16
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d035      	beq.n	5c3a <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5bce:	68fb      	ldr	r3, [r7, #12]
    5bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bd2:	68fb      	ldr	r3, [r7, #12]
    5bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5bd6:	429a      	cmp	r2, r3
    5bd8:	d02f      	beq.n	5c3a <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	3304      	adds	r3, #4
    5bde:	4618      	mov	r0, r3
    5be0:	f7fe fb2e 	bl	4240 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5be8:	68fb      	ldr	r3, [r7, #12]
    5bea:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5bec:	68fb      	ldr	r3, [r7, #12]
    5bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5bf0:	f1c3 0205 	rsb	r2, r3, #5
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bfc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	429a      	cmp	r2, r3
    5c08:	d906      	bls.n	5c18 <vTaskPriorityDisinherit+0x5c>
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c0e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c16:	601a      	str	r2, [r3, #0]
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c1c:	4613      	mov	r3, r2
    5c1e:	009b      	lsls	r3, r3, #2
    5c20:	4413      	add	r3, r2
    5c22:	009b      	lsls	r3, r3, #2
    5c24:	f241 4214 	movw	r2, #5140	; 0x1414
    5c28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c2c:	441a      	add	r2, r3
    5c2e:	68fb      	ldr	r3, [r7, #12]
    5c30:	3304      	adds	r3, #4
    5c32:	4610      	mov	r0, r2
    5c34:	4619      	mov	r1, r3
    5c36:	f7fe faa3 	bl	4180 <vListInsertEnd>
			}
		}
	}
    5c3a:	3710      	adds	r7, #16
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}

00005c40 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5c40:	b480      	push	{r7}
    5c42:	b083      	sub	sp, #12
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5c4c:	4618      	mov	r0, r3
    5c4e:	370c      	adds	r7, #12
    5c50:	46bd      	mov	sp, r7
    5c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c56:	4770      	bx	lr

00005c58 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5c58:	b480      	push	{r7}
    5c5a:	b083      	sub	sp, #12
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5c64:	4618      	mov	r0, r3
    5c66:	370c      	adds	r7, #12
    5c68:	46bd      	mov	sp, r7
    5c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c6e:	4770      	bx	lr

00005c70 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c70:	b480      	push	{r7}
    5c72:	b083      	sub	sp, #12
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
    5c78:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c7a:	687b      	ldr	r3, [r7, #4]
    5c7c:	683a      	ldr	r2, [r7, #0]
    5c7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c80:	370c      	adds	r7, #12
    5c82:	46bd      	mov	sp, r7
    5c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c88:	4770      	bx	lr
    5c8a:	bf00      	nop

00005c8c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c8c:	b480      	push	{r7}
    5c8e:	b083      	sub	sp, #12
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
    5c94:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5c96:	687b      	ldr	r3, [r7, #4]
    5c98:	683a      	ldr	r2, [r7, #0]
    5c9a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5c9c:	370c      	adds	r7, #12
    5c9e:	46bd      	mov	sp, r7
    5ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca4:	4770      	bx	lr
    5ca6:	bf00      	nop

00005ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5ca8:	b480      	push	{r7}
    5caa:	b085      	sub	sp, #20
    5cac:	af00      	add	r7, sp, #0
    5cae:	60f8      	str	r0, [r7, #12]
    5cb0:	60b9      	str	r1, [r7, #8]
    5cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5cb4:	68fb      	ldr	r3, [r7, #12]
    5cb6:	3b04      	subs	r3, #4
    5cb8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5cba:	68fb      	ldr	r3, [r7, #12]
    5cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5cc2:	68fb      	ldr	r3, [r7, #12]
    5cc4:	3b04      	subs	r3, #4
    5cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5cc8:	68ba      	ldr	r2, [r7, #8]
    5cca:	68fb      	ldr	r3, [r7, #12]
    5ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	3b04      	subs	r3, #4
    5cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5cd4:	68fb      	ldr	r3, [r7, #12]
    5cd6:	2200      	movs	r2, #0
    5cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5cda:	68fb      	ldr	r3, [r7, #12]
    5cdc:	3b14      	subs	r3, #20
    5cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5ce0:	687a      	ldr	r2, [r7, #4]
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5ce6:	68fb      	ldr	r3, [r7, #12]
    5ce8:	3b20      	subs	r3, #32
    5cea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5cec:	68fb      	ldr	r3, [r7, #12]
}
    5cee:	4618      	mov	r0, r3
    5cf0:	3714      	adds	r7, #20
    5cf2:	46bd      	mov	sp, r7
    5cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf8:	4770      	bx	lr
    5cfa:	bf00      	nop

00005cfc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5cfc:	4b06      	ldr	r3, [pc, #24]	; (5d18 <pxCurrentTCBConst2>)
    5cfe:	6819      	ldr	r1, [r3, #0]
    5d00:	6808      	ldr	r0, [r1, #0]
    5d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d06:	f380 8809 	msr	PSP, r0
    5d0a:	f04f 0000 	mov.w	r0, #0
    5d0e:	f380 8811 	msr	BASEPRI, r0
    5d12:	f04e 0e0d 	orr.w	lr, lr, #13
    5d16:	4770      	bx	lr

00005d18 <pxCurrentTCBConst2>:
    5d18:	20001410 	.word	0x20001410

00005d1c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5d1c:	485d      	ldr	r0, [pc, #372]	; (5e94 <prvSetupTimerInterrupt+0x2c>)
    5d1e:	6800      	ldr	r0, [r0, #0]
    5d20:	6800      	ldr	r0, [r0, #0]
    5d22:	f380 8808 	msr	MSP, r0
    5d26:	b662      	cpsie	i
    5d28:	df00      	svc	0
    5d2a:	bf00      	nop

00005d2c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5d30:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d34:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d38:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d3c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d40:	6812      	ldr	r2, [r2, #0]
    5d42:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5d46:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5d48:	f64e 5320 	movw	r3, #60704	; 0xed20
    5d4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d50:	f64e 5220 	movw	r2, #60704	; 0xed20
    5d54:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5d58:	6812      	ldr	r2, [r2, #0]
    5d5a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5d5e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5d60:	f000 f882 	bl	5e68 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5d64:	f240 5334 	movw	r3, #1332	; 0x534
    5d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d6c:	2200      	movs	r2, #0
    5d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d70:	f7ff ffd4 	bl	5d1c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d74:	2300      	movs	r3, #0
}
    5d76:	4618      	mov	r0, r3
    5d78:	bd80      	pop	{r7, pc}
    5d7a:	bf00      	nop

00005d7c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d7c:	b480      	push	{r7}
    5d7e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d80:	46bd      	mov	sp, r7
    5d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d86:	4770      	bx	lr

00005d88 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d88:	b480      	push	{r7}
    5d8a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d8c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5d90:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d98:	601a      	str	r2, [r3, #0]
}
    5d9a:	46bd      	mov	sp, r7
    5d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da0:	4770      	bx	lr
    5da2:	bf00      	nop

00005da4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5da4:	b480      	push	{r7}
    5da6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5da8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dac:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5db0:	f240 5334 	movw	r3, #1332	; 0x534
    5db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	1c5a      	adds	r2, r3, #1
    5dbc:	f240 5334 	movw	r3, #1332	; 0x534
    5dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc4:	601a      	str	r2, [r3, #0]
}
    5dc6:	46bd      	mov	sp, r7
    5dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dcc:	4770      	bx	lr
    5dce:	bf00      	nop

00005dd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5dd0:	b480      	push	{r7}
    5dd2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5dd4:	f240 5334 	movw	r3, #1332	; 0x534
    5dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ddc:	681b      	ldr	r3, [r3, #0]
    5dde:	1e5a      	subs	r2, r3, #1
    5de0:	f240 5334 	movw	r3, #1332	; 0x534
    5de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5dea:	f240 5334 	movw	r3, #1332	; 0x534
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	2b00      	cmp	r3, #0
    5df6:	d103      	bne.n	5e00 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5df8:	f04f 0000 	mov.w	r0, #0
    5dfc:	f380 8811 	msr	BASEPRI, r0
	}
}
    5e00:	46bd      	mov	sp, r7
    5e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e06:	4770      	bx	lr

00005e08 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5e08:	f3ef 8009 	mrs	r0, PSP
    5e0c:	4b0c      	ldr	r3, [pc, #48]	; (5e40 <pxCurrentTCBConst>)
    5e0e:	681a      	ldr	r2, [r3, #0]
    5e10:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e14:	6010      	str	r0, [r2, #0]
    5e16:	e92d 4008 	stmdb	sp!, {r3, lr}
    5e1a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e1e:	f380 8811 	msr	BASEPRI, r0
    5e22:	f7ff fba1 	bl	5568 <vTaskSwitchContext>
    5e26:	f04f 0000 	mov.w	r0, #0
    5e2a:	f380 8811 	msr	BASEPRI, r0
    5e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e32:	6819      	ldr	r1, [r3, #0]
    5e34:	6808      	ldr	r0, [r1, #0]
    5e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e3a:	f380 8809 	msr	PSP, r0
    5e3e:	4770      	bx	lr

00005e40 <pxCurrentTCBConst>:
    5e40:	20001410 	.word	0x20001410

00005e44 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b082      	sub	sp, #8
    5e48:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5e4a:	2300      	movs	r3, #0
    5e4c:	607b      	str	r3, [r7, #4]
    5e4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e52:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5e56:	f7ff faa9 	bl	53ac <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5e5a:	f04f 0000 	mov.w	r0, #0
    5e5e:	f380 8811 	msr	BASEPRI, r0
}
    5e62:	3708      	adds	r7, #8
    5e64:	46bd      	mov	sp, r7
    5e66:	bd80      	pop	{r7, pc}

00005e68 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e68:	b480      	push	{r7}
    5e6a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e6c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e70:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e74:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e78:	f2c0 0203 	movt	r2, #3
    5e7c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e7e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e82:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e86:	2207      	movs	r2, #7
    5e88:	601a      	str	r2, [r3, #0]
}
    5e8a:	46bd      	mov	sp, r7
    5e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e90:	4770      	bx	lr
    5e92:	0000      	.short	0x0000
    5e94:	e000ed08 	.word	0xe000ed08

00005e98 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e98:	b580      	push	{r7, lr}
    5e9a:	b08a      	sub	sp, #40	; 0x28
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5ea0:	2300      	movs	r3, #0
    5ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5ea4:	f7ff f9a0 	bl	51e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5ea8:	f24c 5320 	movw	r3, #50464	; 0xc520
    5eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d130      	bne.n	5f18 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5eb6:	f24c 5310 	movw	r3, #50448	; 0xc510
    5eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ebe:	f241 5210 	movw	r2, #5392	; 0x1510
    5ec2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ec6:	601a      	str	r2, [r3, #0]
    5ec8:	f24c 5310 	movw	r3, #50448	; 0xc510
    5ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed0:	2200      	movs	r2, #0
    5ed2:	605a      	str	r2, [r3, #4]
    5ed4:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5edc:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ee0:	605a      	str	r2, [r3, #4]
    5ee2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eea:	2200      	movs	r2, #0
    5eec:	601a      	str	r2, [r3, #0]
    5eee:	f241 5310 	movw	r3, #5392	; 0x1510
    5ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef6:	617b      	str	r3, [r7, #20]
    5ef8:	697b      	ldr	r3, [r7, #20]
    5efa:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5efe:	605a      	str	r2, [r3, #4]
    5f00:	697a      	ldr	r2, [r7, #20]
    5f02:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f0a:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5f0c:	f24c 5320 	movw	r3, #50464	; 0xc520
    5f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f14:	2201      	movs	r2, #1
    5f16:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d00d      	beq.n	5f3a <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5f1e:	2310      	movs	r3, #16
    5f20:	687a      	ldr	r2, [r7, #4]
    5f22:	4413      	add	r3, r2
    5f24:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	f003 0307 	and.w	r3, r3, #7
    5f2c:	2b00      	cmp	r3, #0
    5f2e:	d004      	beq.n	5f3a <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	f023 0307 	bic.w	r3, r3, #7
    5f36:	3308      	adds	r3, #8
    5f38:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d068      	beq.n	6012 <pvPortMalloc+0x17a>
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5f46:	d264      	bcs.n	6012 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5f48:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f50:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5f52:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5a:	681b      	ldr	r3, [r3, #0]
    5f5c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f5e:	e004      	b.n	5f6a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f62:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f6c:	685a      	ldr	r2, [r3, #4]
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	429a      	cmp	r2, r3
    5f72:	d203      	bcs.n	5f7c <pvPortMalloc+0xe4>
    5f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d1f1      	bne.n	5f60 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f7e:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f86:	429a      	cmp	r2, r3
    5f88:	d043      	beq.n	6012 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f8a:	6a3b      	ldr	r3, [r7, #32]
    5f8c:	681a      	ldr	r2, [r3, #0]
    5f8e:	2310      	movs	r3, #16
    5f90:	4413      	add	r3, r2
    5f92:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f96:	681a      	ldr	r2, [r3, #0]
    5f98:	6a3b      	ldr	r3, [r7, #32]
    5f9a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f9e:	685a      	ldr	r2, [r3, #4]
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	1ad2      	subs	r2, r2, r3
    5fa4:	2310      	movs	r3, #16
    5fa6:	005b      	lsls	r3, r3, #1
    5fa8:	429a      	cmp	r2, r3
    5faa:	d925      	bls.n	5ff8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	4413      	add	r3, r2
    5fb2:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fb6:	685a      	ldr	r2, [r3, #4]
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	1ad2      	subs	r2, r2, r3
    5fbc:	693b      	ldr	r3, [r7, #16]
    5fbe:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fc2:	687a      	ldr	r2, [r7, #4]
    5fc4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5fc6:	693b      	ldr	r3, [r7, #16]
    5fc8:	685b      	ldr	r3, [r3, #4]
    5fca:	60fb      	str	r3, [r7, #12]
    5fcc:	f24c 5310 	movw	r3, #50448	; 0xc510
    5fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd4:	61bb      	str	r3, [r7, #24]
    5fd6:	e002      	b.n	5fde <pvPortMalloc+0x146>
    5fd8:	69bb      	ldr	r3, [r7, #24]
    5fda:	681b      	ldr	r3, [r3, #0]
    5fdc:	61bb      	str	r3, [r7, #24]
    5fde:	69bb      	ldr	r3, [r7, #24]
    5fe0:	681b      	ldr	r3, [r3, #0]
    5fe2:	685a      	ldr	r2, [r3, #4]
    5fe4:	68fb      	ldr	r3, [r7, #12]
    5fe6:	429a      	cmp	r2, r3
    5fe8:	d3f6      	bcc.n	5fd8 <pvPortMalloc+0x140>
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	681a      	ldr	r2, [r3, #0]
    5fee:	693b      	ldr	r3, [r7, #16]
    5ff0:	601a      	str	r2, [r3, #0]
    5ff2:	69bb      	ldr	r3, [r7, #24]
    5ff4:	693a      	ldr	r2, [r7, #16]
    5ff6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5ff8:	f240 5338 	movw	r3, #1336	; 0x538
    5ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6000:	681a      	ldr	r2, [r3, #0]
    6002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6004:	685b      	ldr	r3, [r3, #4]
    6006:	1ad2      	subs	r2, r2, r3
    6008:	f240 5338 	movw	r3, #1336	; 0x538
    600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6010:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    6012:	f7ff f8fb 	bl	520c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    6016:	69fb      	ldr	r3, [r7, #28]
}
    6018:	4618      	mov	r0, r3
    601a:	3728      	adds	r7, #40	; 0x28
    601c:	46bd      	mov	sp, r7
    601e:	bd80      	pop	{r7, pc}

00006020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    6020:	b580      	push	{r7, lr}
    6022:	b086      	sub	sp, #24
    6024:	af00      	add	r7, sp, #0
    6026:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	2b00      	cmp	r3, #0
    6030:	d030      	beq.n	6094 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    6032:	2310      	movs	r3, #16
    6034:	425b      	negs	r3, r3
    6036:	693a      	ldr	r2, [r7, #16]
    6038:	4413      	add	r3, r2
    603a:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    603c:	693b      	ldr	r3, [r7, #16]
    603e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    6040:	f7ff f8d2 	bl	51e8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    6044:	68fb      	ldr	r3, [r7, #12]
    6046:	685b      	ldr	r3, [r3, #4]
    6048:	60bb      	str	r3, [r7, #8]
    604a:	f24c 5310 	movw	r3, #50448	; 0xc510
    604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6052:	617b      	str	r3, [r7, #20]
    6054:	e002      	b.n	605c <vPortFree+0x3c>
    6056:	697b      	ldr	r3, [r7, #20]
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	617b      	str	r3, [r7, #20]
    605c:	697b      	ldr	r3, [r7, #20]
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	685a      	ldr	r2, [r3, #4]
    6062:	68bb      	ldr	r3, [r7, #8]
    6064:	429a      	cmp	r2, r3
    6066:	d3f6      	bcc.n	6056 <vPortFree+0x36>
    6068:	697b      	ldr	r3, [r7, #20]
    606a:	681a      	ldr	r2, [r3, #0]
    606c:	68fb      	ldr	r3, [r7, #12]
    606e:	601a      	str	r2, [r3, #0]
    6070:	697b      	ldr	r3, [r7, #20]
    6072:	68fa      	ldr	r2, [r7, #12]
    6074:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    6076:	68fb      	ldr	r3, [r7, #12]
    6078:	685a      	ldr	r2, [r3, #4]
    607a:	f240 5338 	movw	r3, #1336	; 0x538
    607e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6082:	681b      	ldr	r3, [r3, #0]
    6084:	441a      	add	r2, r3
    6086:	f240 5338 	movw	r3, #1336	; 0x538
    608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    6090:	f7ff f8bc 	bl	520c <xTaskResumeAll>
	}
}
    6094:	3718      	adds	r7, #24
    6096:	46bd      	mov	sp, r7
    6098:	bd80      	pop	{r7, pc}
    609a:	bf00      	nop

0000609c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    609c:	b480      	push	{r7}
    609e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    60a0:	f240 5338 	movw	r3, #1336	; 0x538
    60a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a8:	681b      	ldr	r3, [r3, #0]
}
    60aa:	4618      	mov	r0, r3
    60ac:	46bd      	mov	sp, r7
    60ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b2:	4770      	bx	lr

000060b4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    60b4:	b480      	push	{r7}
    60b6:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    60b8:	46bd      	mov	sp, r7
    60ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    60be:	4770      	bx	lr

000060c0 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    60c0:	b580      	push	{r7, lr}
    60c2:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    60c4:	f24c 5342 	movw	r3, #50498	; 0xc542
    60c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	2b00      	cmp	r3, #0
    60d0:	f040 815d 	bne.w	638e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    60d4:	f24c 532a 	movw	r3, #50474	; 0xc52a
    60d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60dc:	881b      	ldrh	r3, [r3, #0]
    60de:	2b09      	cmp	r3, #9
    60e0:	f201 8145 	bhi.w	736e <ground_calibrate+0x12ae>
    60e4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    60e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2b01      	cmp	r3, #1
    60f0:	f041 813d 	bne.w	736e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    60f4:	f24c 5342 	movw	r3, #50498	; 0xc542
    60f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60fc:	2201      	movs	r2, #1
    60fe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6100:	f24c 5349 	movw	r3, #50505	; 0xc549
    6104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6108:	781a      	ldrb	r2, [r3, #0]
    610a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    610e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6112:	781b      	ldrb	r3, [r3, #0]
    6114:	b2db      	uxtb	r3, r3
    6116:	429a      	cmp	r2, r3
    6118:	d313      	bcc.n	6142 <ground_calibrate+0x82>
    611a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	b2db      	uxtb	r3, r3
    6126:	461a      	mov	r2, r3
    6128:	f24c 5349 	movw	r3, #50505	; 0xc549
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	1ad3      	subs	r3, r2, r3
    6134:	33ff      	adds	r3, #255	; 0xff
    6136:	2b04      	cmp	r3, #4
    6138:	bfd4      	ite	le
    613a:	2300      	movle	r3, #0
    613c:	2301      	movgt	r3, #1
    613e:	b2db      	uxtb	r3, r3
    6140:	e011      	b.n	6166 <ground_calibrate+0xa6>
    6142:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614a:	781b      	ldrb	r3, [r3, #0]
    614c:	b2db      	uxtb	r3, r3
    614e:	461a      	mov	r2, r3
    6150:	f24c 5349 	movw	r3, #50505	; 0xc549
    6154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	1ad3      	subs	r3, r2, r3
    615c:	2b04      	cmp	r3, #4
    615e:	bfd4      	ite	le
    6160:	2300      	movle	r3, #0
    6162:	2301      	movgt	r3, #1
    6164:	b2db      	uxtb	r3, r3
    6166:	2b00      	cmp	r3, #0
    6168:	f000 8103 	beq.w	6372 <ground_calibrate+0x2b2>
    616c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	461a      	mov	r2, r3
    6178:	f24c 534c 	movw	r3, #50508	; 0xc54c
    617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6180:	2105      	movs	r1, #5
    6182:	5499      	strb	r1, [r3, r2]
    6184:	f24c 5349 	movw	r3, #50505	; 0xc549
    6188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618c:	781b      	ldrb	r3, [r3, #0]
    618e:	3301      	adds	r3, #1
    6190:	b2da      	uxtb	r2, r3
    6192:	f24c 5349 	movw	r3, #50505	; 0xc549
    6196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619a:	701a      	strb	r2, [r3, #0]
    619c:	f24c 5349 	movw	r3, #50505	; 0xc549
    61a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2bff      	cmp	r3, #255	; 0xff
    61a8:	d105      	bne.n	61b6 <ground_calibrate+0xf6>
    61aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b2:	2200      	movs	r2, #0
    61b4:	701a      	strb	r2, [r3, #0]
    61b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	461a      	mov	r2, r3
    61c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ca:	2102      	movs	r1, #2
    61cc:	5499      	strb	r1, [r3, r2]
    61ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    61d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	3301      	adds	r3, #1
    61da:	b2da      	uxtb	r2, r3
    61dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    61e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e4:	701a      	strb	r2, [r3, #0]
    61e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ee:	781b      	ldrb	r3, [r3, #0]
    61f0:	2bff      	cmp	r3, #255	; 0xff
    61f2:	d105      	bne.n	6200 <ground_calibrate+0x140>
    61f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    61f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fc:	2200      	movs	r2, #0
    61fe:	701a      	strb	r2, [r3, #0]
    6200:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6208:	2202      	movs	r2, #2
    620a:	701a      	strb	r2, [r3, #0]
    620c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6214:	2202      	movs	r2, #2
    6216:	701a      	strb	r2, [r3, #0]
    6218:	f24c 5349 	movw	r3, #50505	; 0xc549
    621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6220:	781b      	ldrb	r3, [r3, #0]
    6222:	461a      	mov	r2, r3
    6224:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622c:	7819      	ldrb	r1, [r3, #0]
    622e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6236:	5499      	strb	r1, [r3, r2]
    6238:	f24c 5349 	movw	r3, #50505	; 0xc549
    623c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	3301      	adds	r3, #1
    6244:	b2da      	uxtb	r2, r3
    6246:	f24c 5349 	movw	r3, #50505	; 0xc549
    624a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624e:	701a      	strb	r2, [r3, #0]
    6250:	f24c 5349 	movw	r3, #50505	; 0xc549
    6254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	2bff      	cmp	r3, #255	; 0xff
    625c:	d105      	bne.n	626a <ground_calibrate+0x1aa>
    625e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6266:	2200      	movs	r2, #0
    6268:	701a      	strb	r2, [r3, #0]
    626a:	f24c 5349 	movw	r3, #50505	; 0xc549
    626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6272:	781b      	ldrb	r3, [r3, #0]
    6274:	461a      	mov	r2, r3
    6276:	f24c 634e 	movw	r3, #50766	; 0xc64e
    627a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627e:	7819      	ldrb	r1, [r3, #0]
    6280:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6288:	5499      	strb	r1, [r3, r2]
    628a:	f24c 5349 	movw	r3, #50505	; 0xc549
    628e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6292:	781b      	ldrb	r3, [r3, #0]
    6294:	3301      	adds	r3, #1
    6296:	b2da      	uxtb	r2, r3
    6298:	f24c 5349 	movw	r3, #50505	; 0xc549
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	701a      	strb	r2, [r3, #0]
    62a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    62a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	2bff      	cmp	r3, #255	; 0xff
    62ae:	d105      	bne.n	62bc <ground_calibrate+0x1fc>
    62b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    62b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b8:	2200      	movs	r2, #0
    62ba:	701a      	strb	r2, [r3, #0]
    62bc:	f242 0339 	movw	r3, #8249	; 0x2039
    62c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c4:	781b      	ldrb	r3, [r3, #0]
    62c6:	b2db      	uxtb	r3, r3
    62c8:	f003 0310 	and.w	r3, r3, #16
    62cc:	2b00      	cmp	r3, #0
    62ce:	f041 804e 	bne.w	736e <ground_calibrate+0x12ae>
    62d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	b2db      	uxtb	r3, r3
    62de:	461a      	mov	r2, r3
    62e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    62e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e8:	5c9a      	ldrb	r2, [r3, r2]
    62ea:	f24c 634b 	movw	r3, #50763	; 0xc64b
    62ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f2:	701a      	strb	r2, [r3, #0]
    62f4:	f24c 634c 	movw	r3, #50764	; 0xc64c
    62f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fc:	2200      	movs	r2, #0
    62fe:	701a      	strb	r2, [r3, #0]
    6300:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	b2db      	uxtb	r3, r3
    630c:	3301      	adds	r3, #1
    630e:	b2da      	uxtb	r2, r3
    6310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6318:	701a      	strb	r2, [r3, #0]
    631a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    631e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	b2db      	uxtb	r3, r3
    6326:	2bff      	cmp	r3, #255	; 0xff
    6328:	d105      	bne.n	6336 <ground_calibrate+0x276>
    632a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    632e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6332:	2200      	movs	r2, #0
    6334:	701a      	strb	r2, [r3, #0]
    6336:	f242 0338 	movw	r3, #8248	; 0x2038
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	f242 0238 	movw	r2, #8248	; 0x2038
    6342:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6346:	7812      	ldrb	r2, [r2, #0]
    6348:	b2d2      	uxtb	r2, r2
    634a:	f042 0201 	orr.w	r2, r2, #1
    634e:	b2d2      	uxtb	r2, r2
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f242 0339 	movw	r3, #8249	; 0x2039
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	f242 0239 	movw	r2, #8249	; 0x2039
    635e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6362:	7812      	ldrb	r2, [r2, #0]
    6364:	b2d2      	uxtb	r2, r2
    6366:	f042 0210 	orr.w	r2, r2, #16
    636a:	b2d2      	uxtb	r2, r2
    636c:	701a      	strb	r2, [r3, #0]
    636e:	f000 bffe 	b.w	736e <ground_calibrate+0x12ae>
    6372:	f24c 5348 	movw	r3, #50504	; 0xc548
    6376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	3301      	adds	r3, #1
    637e:	b2da      	uxtb	r2, r3
    6380:	f24c 5348 	movw	r3, #50504	; 0xc548
    6384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6388:	701a      	strb	r2, [r3, #0]
    638a:	f000 bff0 	b.w	736e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    638e:	f24c 5342 	movw	r3, #50498	; 0xc542
    6392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	2b01      	cmp	r3, #1
    639a:	f040 87e8 	bne.w	736e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    639e:	f24c 6350 	movw	r3, #50768	; 0xc650
    63a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a6:	885b      	ldrh	r3, [r3, #2]
    63a8:	b21b      	sxth	r3, r3
    63aa:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    63ae:	db09      	blt.n	63c4 <ground_calibrate+0x304>
    63b0:	f24c 6350 	movw	r3, #50768	; 0xc650
    63b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b8:	885b      	ldrh	r3, [r3, #2]
    63ba:	b21b      	sxth	r3, r3
    63bc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    63c0:	f340 87d5 	ble.w	736e <ground_calibrate+0x12ae>
      ir_gain_calib();
    63c4:	f00b fd54 	bl	11e70 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    63c8:	f240 5348 	movw	r3, #1352	; 0x548
    63cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d0:	681a      	ldr	r2, [r3, #0]
    63d2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    63d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63da:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    63dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    63e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e4:	781a      	ldrb	r2, [r3, #0]
    63e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ee:	781b      	ldrb	r3, [r3, #0]
    63f0:	b2db      	uxtb	r3, r3
    63f2:	429a      	cmp	r2, r3
    63f4:	d313      	bcc.n	641e <ground_calibrate+0x35e>
    63f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	781b      	ldrb	r3, [r3, #0]
    6400:	b2db      	uxtb	r3, r3
    6402:	461a      	mov	r2, r3
    6404:	f24c 5349 	movw	r3, #50505	; 0xc549
    6408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640c:	781b      	ldrb	r3, [r3, #0]
    640e:	1ad3      	subs	r3, r2, r3
    6410:	33ff      	adds	r3, #255	; 0xff
    6412:	2b14      	cmp	r3, #20
    6414:	bfd4      	ite	le
    6416:	2300      	movle	r3, #0
    6418:	2301      	movgt	r3, #1
    641a:	b2db      	uxtb	r3, r3
    641c:	e011      	b.n	6442 <ground_calibrate+0x382>
    641e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	b2db      	uxtb	r3, r3
    642a:	461a      	mov	r2, r3
    642c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	1ad3      	subs	r3, r2, r3
    6438:	2b14      	cmp	r3, #20
    643a:	bfd4      	ite	le
    643c:	2300      	movle	r3, #0
    643e:	2301      	movgt	r3, #1
    6440:	b2db      	uxtb	r3, r3
    6442:	2b00      	cmp	r3, #0
    6444:	f000 85a6 	beq.w	6f94 <ground_calibrate+0xed4>
    6448:	f24c 5349 	movw	r3, #50505	; 0xc549
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	781b      	ldrb	r3, [r3, #0]
    6452:	461a      	mov	r2, r3
    6454:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645c:	2105      	movs	r1, #5
    645e:	5499      	strb	r1, [r3, r2]
    6460:	f24c 5349 	movw	r3, #50505	; 0xc549
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	3301      	adds	r3, #1
    646c:	b2da      	uxtb	r2, r3
    646e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	701a      	strb	r2, [r3, #0]
    6478:	f24c 5349 	movw	r3, #50505	; 0xc549
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	2bff      	cmp	r3, #255	; 0xff
    6484:	d105      	bne.n	6492 <ground_calibrate+0x3d2>
    6486:	f24c 5349 	movw	r3, #50505	; 0xc549
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	2200      	movs	r2, #0
    6490:	701a      	strb	r2, [r3, #0]
    6492:	f24c 5349 	movw	r3, #50505	; 0xc549
    6496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649a:	781b      	ldrb	r3, [r3, #0]
    649c:	461a      	mov	r2, r3
    649e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	2105      	movs	r1, #5
    64a8:	5499      	strb	r1, [r3, r2]
    64aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	3301      	adds	r3, #1
    64b6:	b2da      	uxtb	r2, r3
    64b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    64c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ca:	781b      	ldrb	r3, [r3, #0]
    64cc:	2bff      	cmp	r3, #255	; 0xff
    64ce:	d105      	bne.n	64dc <ground_calibrate+0x41c>
    64d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    64d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d8:	2200      	movs	r2, #0
    64da:	701a      	strb	r2, [r3, #0]
    64dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e4:	2205      	movs	r2, #5
    64e6:	701a      	strb	r2, [r3, #0]
    64e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	2205      	movs	r2, #5
    64f2:	701a      	strb	r2, [r3, #0]
    64f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    64f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	461a      	mov	r2, r3
    6500:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6508:	7819      	ldrb	r1, [r3, #0]
    650a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    650e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6512:	5499      	strb	r1, [r3, r2]
    6514:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651c:	781a      	ldrb	r2, [r3, #0]
    651e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	4413      	add	r3, r2
    652a:	b2da      	uxtb	r2, r3
    652c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6534:	701a      	strb	r2, [r3, #0]
    6536:	f24c 634e 	movw	r3, #50766	; 0xc64e
    653a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    653e:	781a      	ldrb	r2, [r3, #0]
    6540:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6548:	781b      	ldrb	r3, [r3, #0]
    654a:	4413      	add	r3, r2
    654c:	b2da      	uxtb	r2, r3
    654e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6556:	701a      	strb	r2, [r3, #0]
    6558:	f24c 5349 	movw	r3, #50505	; 0xc549
    655c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6560:	781b      	ldrb	r3, [r3, #0]
    6562:	3301      	adds	r3, #1
    6564:	b2da      	uxtb	r2, r3
    6566:	f24c 5349 	movw	r3, #50505	; 0xc549
    656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    656e:	701a      	strb	r2, [r3, #0]
    6570:	f24c 5349 	movw	r3, #50505	; 0xc549
    6574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	2bff      	cmp	r3, #255	; 0xff
    657c:	d105      	bne.n	658a <ground_calibrate+0x4ca>
    657e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6586:	2200      	movs	r2, #0
    6588:	701a      	strb	r2, [r3, #0]
    658a:	f24c 5349 	movw	r3, #50505	; 0xc549
    658e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	461a      	mov	r2, r3
    6596:	f64c 3340 	movw	r3, #52032	; 0xcb40
    659a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    659e:	7859      	ldrb	r1, [r3, #1]
    65a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a8:	5499      	strb	r1, [r3, r2]
    65aa:	4bd2      	ldr	r3, [pc, #840]	; (68f4 <ground_calibrate+0x834>)
    65ac:	781a      	ldrb	r2, [r3, #0]
    65ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	4413      	add	r3, r2
    65ba:	b2da      	uxtb	r2, r3
    65bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c4:	701a      	strb	r2, [r3, #0]
    65c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ce:	781a      	ldrb	r2, [r3, #0]
    65d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d8:	781b      	ldrb	r3, [r3, #0]
    65da:	4413      	add	r3, r2
    65dc:	b2da      	uxtb	r2, r3
    65de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e6:	701a      	strb	r2, [r3, #0]
    65e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f0:	781b      	ldrb	r3, [r3, #0]
    65f2:	3301      	adds	r3, #1
    65f4:	b2da      	uxtb	r2, r3
    65f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65fe:	701a      	strb	r2, [r3, #0]
    6600:	f24c 5349 	movw	r3, #50505	; 0xc549
    6604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6608:	781b      	ldrb	r3, [r3, #0]
    660a:	2bff      	cmp	r3, #255	; 0xff
    660c:	d105      	bne.n	661a <ground_calibrate+0x55a>
    660e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6616:	2200      	movs	r2, #0
    6618:	701a      	strb	r2, [r3, #0]
    661a:	f24c 5349 	movw	r3, #50505	; 0xc549
    661e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6622:	781b      	ldrb	r3, [r3, #0]
    6624:	461a      	mov	r2, r3
    6626:	f64c 3340 	movw	r3, #52032	; 0xcb40
    662a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662e:	7899      	ldrb	r1, [r3, #2]
    6630:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6638:	5499      	strb	r1, [r3, r2]
    663a:	4baf      	ldr	r3, [pc, #700]	; (68f8 <ground_calibrate+0x838>)
    663c:	781a      	ldrb	r2, [r3, #0]
    663e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	4413      	add	r3, r2
    664a:	b2da      	uxtb	r2, r3
    664c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6654:	701a      	strb	r2, [r3, #0]
    6656:	f24c 634e 	movw	r3, #50766	; 0xc64e
    665a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665e:	781a      	ldrb	r2, [r3, #0]
    6660:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	4413      	add	r3, r2
    666c:	b2da      	uxtb	r2, r3
    666e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6676:	701a      	strb	r2, [r3, #0]
    6678:	f24c 5349 	movw	r3, #50505	; 0xc549
    667c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	3301      	adds	r3, #1
    6684:	b2da      	uxtb	r2, r3
    6686:	f24c 5349 	movw	r3, #50505	; 0xc549
    668a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668e:	701a      	strb	r2, [r3, #0]
    6690:	f24c 5349 	movw	r3, #50505	; 0xc549
    6694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	2bff      	cmp	r3, #255	; 0xff
    669c:	d105      	bne.n	66aa <ground_calibrate+0x5ea>
    669e:	f24c 5349 	movw	r3, #50505	; 0xc549
    66a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a6:	2200      	movs	r2, #0
    66a8:	701a      	strb	r2, [r3, #0]
    66aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    66ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	461a      	mov	r2, r3
    66b6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    66ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66be:	78d9      	ldrb	r1, [r3, #3]
    66c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    66c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c8:	5499      	strb	r1, [r3, r2]
    66ca:	4b8c      	ldr	r3, [pc, #560]	; (68fc <ground_calibrate+0x83c>)
    66cc:	781a      	ldrb	r2, [r3, #0]
    66ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d6:	781b      	ldrb	r3, [r3, #0]
    66d8:	4413      	add	r3, r2
    66da:	b2da      	uxtb	r2, r3
    66dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e4:	701a      	strb	r2, [r3, #0]
    66e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ee:	781a      	ldrb	r2, [r3, #0]
    66f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	4413      	add	r3, r2
    66fc:	b2da      	uxtb	r2, r3
    66fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6706:	701a      	strb	r2, [r3, #0]
    6708:	f24c 5349 	movw	r3, #50505	; 0xc549
    670c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	3301      	adds	r3, #1
    6714:	b2da      	uxtb	r2, r3
    6716:	f24c 5349 	movw	r3, #50505	; 0xc549
    671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671e:	701a      	strb	r2, [r3, #0]
    6720:	f24c 5349 	movw	r3, #50505	; 0xc549
    6724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6728:	781b      	ldrb	r3, [r3, #0]
    672a:	2bff      	cmp	r3, #255	; 0xff
    672c:	d105      	bne.n	673a <ground_calibrate+0x67a>
    672e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6736:	2200      	movs	r2, #0
    6738:	701a      	strb	r2, [r3, #0]
    673a:	f24c 5349 	movw	r3, #50505	; 0xc549
    673e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6742:	781b      	ldrb	r3, [r3, #0]
    6744:	461a      	mov	r2, r3
    6746:	f64c 3344 	movw	r3, #52036	; 0xcb44
    674a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674e:	7819      	ldrb	r1, [r3, #0]
    6750:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6758:	5499      	strb	r1, [r3, r2]
    675a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    675e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6762:	781a      	ldrb	r2, [r3, #0]
    6764:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	4413      	add	r3, r2
    6770:	b2da      	uxtb	r2, r3
    6772:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677a:	701a      	strb	r2, [r3, #0]
    677c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6784:	781a      	ldrb	r2, [r3, #0]
    6786:	f24c 634d 	movw	r3, #50765	; 0xc64d
    678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	4413      	add	r3, r2
    6792:	b2da      	uxtb	r2, r3
    6794:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679c:	701a      	strb	r2, [r3, #0]
    679e:	f24c 5349 	movw	r3, #50505	; 0xc549
    67a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a6:	781b      	ldrb	r3, [r3, #0]
    67a8:	3301      	adds	r3, #1
    67aa:	b2da      	uxtb	r2, r3
    67ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    67b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b4:	701a      	strb	r2, [r3, #0]
    67b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    67ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67be:	781b      	ldrb	r3, [r3, #0]
    67c0:	2bff      	cmp	r3, #255	; 0xff
    67c2:	d105      	bne.n	67d0 <ground_calibrate+0x710>
    67c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    67c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67cc:	2200      	movs	r2, #0
    67ce:	701a      	strb	r2, [r3, #0]
    67d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    67d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d8:	781b      	ldrb	r3, [r3, #0]
    67da:	461a      	mov	r2, r3
    67dc:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e4:	7859      	ldrb	r1, [r3, #1]
    67e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ee:	5499      	strb	r1, [r3, r2]
    67f0:	4b43      	ldr	r3, [pc, #268]	; (6900 <ground_calibrate+0x840>)
    67f2:	781a      	ldrb	r2, [r3, #0]
    67f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	4413      	add	r3, r2
    6800:	b2da      	uxtb	r2, r3
    6802:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680a:	701a      	strb	r2, [r3, #0]
    680c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6814:	781a      	ldrb	r2, [r3, #0]
    6816:	f24c 634d 	movw	r3, #50765	; 0xc64d
    681a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	4413      	add	r3, r2
    6822:	b2da      	uxtb	r2, r3
    6824:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682c:	701a      	strb	r2, [r3, #0]
    682e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6836:	781b      	ldrb	r3, [r3, #0]
    6838:	3301      	adds	r3, #1
    683a:	b2da      	uxtb	r2, r3
    683c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6844:	701a      	strb	r2, [r3, #0]
    6846:	f24c 5349 	movw	r3, #50505	; 0xc549
    684a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	2bff      	cmp	r3, #255	; 0xff
    6852:	d105      	bne.n	6860 <ground_calibrate+0x7a0>
    6854:	f24c 5349 	movw	r3, #50505	; 0xc549
    6858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685c:	2200      	movs	r2, #0
    685e:	701a      	strb	r2, [r3, #0]
    6860:	f24c 5349 	movw	r3, #50505	; 0xc549
    6864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6868:	781b      	ldrb	r3, [r3, #0]
    686a:	461a      	mov	r2, r3
    686c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6874:	7899      	ldrb	r1, [r3, #2]
    6876:	f24c 534c 	movw	r3, #50508	; 0xc54c
    687a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687e:	5499      	strb	r1, [r3, r2]
    6880:	4b20      	ldr	r3, [pc, #128]	; (6904 <ground_calibrate+0x844>)
    6882:	781a      	ldrb	r2, [r3, #0]
    6884:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	4413      	add	r3, r2
    6890:	b2da      	uxtb	r2, r3
    6892:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689a:	701a      	strb	r2, [r3, #0]
    689c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a4:	781a      	ldrb	r2, [r3, #0]
    68a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ae:	781b      	ldrb	r3, [r3, #0]
    68b0:	4413      	add	r3, r2
    68b2:	b2da      	uxtb	r2, r3
    68b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68bc:	701a      	strb	r2, [r3, #0]
    68be:	f24c 5349 	movw	r3, #50505	; 0xc549
    68c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c6:	781b      	ldrb	r3, [r3, #0]
    68c8:	3301      	adds	r3, #1
    68ca:	b2da      	uxtb	r2, r3
    68cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    68d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d4:	701a      	strb	r2, [r3, #0]
    68d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    68da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	2bff      	cmp	r3, #255	; 0xff
    68e2:	d111      	bne.n	6908 <ground_calibrate+0x848>
    68e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ec:	2200      	movs	r2, #0
    68ee:	701a      	strb	r2, [r3, #0]
    68f0:	e00a      	b.n	6908 <ground_calibrate+0x848>
    68f2:	bf00      	nop
    68f4:	2004cb41 	.word	0x2004cb41
    68f8:	2004cb42 	.word	0x2004cb42
    68fc:	2004cb43 	.word	0x2004cb43
    6900:	2004cb45 	.word	0x2004cb45
    6904:	2004cb46 	.word	0x2004cb46
    6908:	f24c 5349 	movw	r3, #50505	; 0xc549
    690c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	461a      	mov	r2, r3
    6914:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691c:	78d9      	ldrb	r1, [r3, #3]
    691e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6926:	5499      	strb	r1, [r3, r2]
    6928:	4bd3      	ldr	r3, [pc, #844]	; (6c78 <ground_calibrate+0xbb8>)
    692a:	781a      	ldrb	r2, [r3, #0]
    692c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6934:	781b      	ldrb	r3, [r3, #0]
    6936:	4413      	add	r3, r2
    6938:	b2da      	uxtb	r2, r3
    693a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    693e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6942:	701a      	strb	r2, [r3, #0]
    6944:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694c:	781a      	ldrb	r2, [r3, #0]
    694e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6956:	781b      	ldrb	r3, [r3, #0]
    6958:	4413      	add	r3, r2
    695a:	b2da      	uxtb	r2, r3
    695c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6964:	701a      	strb	r2, [r3, #0]
    6966:	f24c 5349 	movw	r3, #50505	; 0xc549
    696a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	3301      	adds	r3, #1
    6972:	b2da      	uxtb	r2, r3
    6974:	f24c 5349 	movw	r3, #50505	; 0xc549
    6978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697c:	701a      	strb	r2, [r3, #0]
    697e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	2bff      	cmp	r3, #255	; 0xff
    698a:	d105      	bne.n	6998 <ground_calibrate+0x8d8>
    698c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6994:	2200      	movs	r2, #0
    6996:	701a      	strb	r2, [r3, #0]
    6998:	f24c 5349 	movw	r3, #50505	; 0xc549
    699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a0:	781b      	ldrb	r3, [r3, #0]
    69a2:	461a      	mov	r2, r3
    69a4:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ac:	7819      	ldrb	r1, [r3, #0]
    69ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    69b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b6:	5499      	strb	r1, [r3, r2]
    69b8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c0:	781a      	ldrb	r2, [r3, #0]
    69c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	4413      	add	r3, r2
    69ce:	b2da      	uxtb	r2, r3
    69d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d8:	701a      	strb	r2, [r3, #0]
    69da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e2:	781a      	ldrb	r2, [r3, #0]
    69e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	4413      	add	r3, r2
    69f0:	b2da      	uxtb	r2, r3
    69f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fa:	701a      	strb	r2, [r3, #0]
    69fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	3301      	adds	r3, #1
    6a08:	b2da      	uxtb	r2, r3
    6a0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a12:	701a      	strb	r2, [r3, #0]
    6a14:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	2bff      	cmp	r3, #255	; 0xff
    6a20:	d105      	bne.n	6a2e <ground_calibrate+0x96e>
    6a22:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2a:	2200      	movs	r2, #0
    6a2c:	701a      	strb	r2, [r3, #0]
    6a2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	461a      	mov	r2, r3
    6a3a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a42:	7859      	ldrb	r1, [r3, #1]
    6a44:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4c:	5499      	strb	r1, [r3, r2]
    6a4e:	4b8b      	ldr	r3, [pc, #556]	; (6c7c <ground_calibrate+0xbbc>)
    6a50:	781a      	ldrb	r2, [r3, #0]
    6a52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	4413      	add	r3, r2
    6a5e:	b2da      	uxtb	r2, r3
    6a60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a68:	701a      	strb	r2, [r3, #0]
    6a6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a72:	781a      	ldrb	r2, [r3, #0]
    6a74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	4413      	add	r3, r2
    6a80:	b2da      	uxtb	r2, r3
    6a82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8a:	701a      	strb	r2, [r3, #0]
    6a8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	3301      	adds	r3, #1
    6a98:	b2da      	uxtb	r2, r3
    6a9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa2:	701a      	strb	r2, [r3, #0]
    6aa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aac:	781b      	ldrb	r3, [r3, #0]
    6aae:	2bff      	cmp	r3, #255	; 0xff
    6ab0:	d105      	bne.n	6abe <ground_calibrate+0x9fe>
    6ab2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aba:	2200      	movs	r2, #0
    6abc:	701a      	strb	r2, [r3, #0]
    6abe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	461a      	mov	r2, r3
    6aca:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad2:	7899      	ldrb	r1, [r3, #2]
    6ad4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6adc:	5499      	strb	r1, [r3, r2]
    6ade:	4b68      	ldr	r3, [pc, #416]	; (6c80 <ground_calibrate+0xbc0>)
    6ae0:	781a      	ldrb	r2, [r3, #0]
    6ae2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aea:	781b      	ldrb	r3, [r3, #0]
    6aec:	4413      	add	r3, r2
    6aee:	b2da      	uxtb	r2, r3
    6af0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af8:	701a      	strb	r2, [r3, #0]
    6afa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b02:	781a      	ldrb	r2, [r3, #0]
    6b04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	4413      	add	r3, r2
    6b10:	b2da      	uxtb	r2, r3
    6b12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	3301      	adds	r3, #1
    6b28:	b2da      	uxtb	r2, r3
    6b2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b32:	701a      	strb	r2, [r3, #0]
    6b34:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3c:	781b      	ldrb	r3, [r3, #0]
    6b3e:	2bff      	cmp	r3, #255	; 0xff
    6b40:	d105      	bne.n	6b4e <ground_calibrate+0xa8e>
    6b42:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4a:	2200      	movs	r2, #0
    6b4c:	701a      	strb	r2, [r3, #0]
    6b4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b56:	781b      	ldrb	r3, [r3, #0]
    6b58:	461a      	mov	r2, r3
    6b5a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b62:	78d9      	ldrb	r1, [r3, #3]
    6b64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6c:	5499      	strb	r1, [r3, r2]
    6b6e:	4b45      	ldr	r3, [pc, #276]	; (6c84 <ground_calibrate+0xbc4>)
    6b70:	781a      	ldrb	r2, [r3, #0]
    6b72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	4413      	add	r3, r2
    6b7e:	b2da      	uxtb	r2, r3
    6b80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b88:	701a      	strb	r2, [r3, #0]
    6b8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b92:	781a      	ldrb	r2, [r3, #0]
    6b94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	4413      	add	r3, r2
    6ba0:	b2da      	uxtb	r2, r3
    6ba2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6baa:	701a      	strb	r2, [r3, #0]
    6bac:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	3301      	adds	r3, #1
    6bb8:	b2da      	uxtb	r2, r3
    6bba:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc2:	701a      	strb	r2, [r3, #0]
    6bc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	2bff      	cmp	r3, #255	; 0xff
    6bd0:	d105      	bne.n	6bde <ground_calibrate+0xb1e>
    6bd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bda:	2200      	movs	r2, #0
    6bdc:	701a      	strb	r2, [r3, #0]
    6bde:	f24c 5349 	movw	r3, #50505	; 0xc549
    6be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	461a      	mov	r2, r3
    6bea:	f240 5342 	movw	r3, #1346	; 0x542
    6bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf2:	7819      	ldrb	r1, [r3, #0]
    6bf4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	5499      	strb	r1, [r3, r2]
    6bfe:	f240 5342 	movw	r3, #1346	; 0x542
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	781a      	ldrb	r2, [r3, #0]
    6c08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	4413      	add	r3, r2
    6c14:	b2da      	uxtb	r2, r3
    6c16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1e:	701a      	strb	r2, [r3, #0]
    6c20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c28:	781a      	ldrb	r2, [r3, #0]
    6c2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	4413      	add	r3, r2
    6c36:	b2da      	uxtb	r2, r3
    6c38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c40:	701a      	strb	r2, [r3, #0]
    6c42:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	3301      	adds	r3, #1
    6c4e:	b2da      	uxtb	r2, r3
    6c50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c58:	701a      	strb	r2, [r3, #0]
    6c5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	2bff      	cmp	r3, #255	; 0xff
    6c66:	d10f      	bne.n	6c88 <ground_calibrate+0xbc8>
    6c68:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c70:	2200      	movs	r2, #0
    6c72:	701a      	strb	r2, [r3, #0]
    6c74:	e008      	b.n	6c88 <ground_calibrate+0xbc8>
    6c76:	bf00      	nop
    6c78:	2004cb47 	.word	0x2004cb47
    6c7c:	2004cb3d 	.word	0x2004cb3d
    6c80:	2004cb3e 	.word	0x2004cb3e
    6c84:	2004cb3f 	.word	0x2004cb3f
    6c88:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	461a      	mov	r2, r3
    6c94:	f240 5342 	movw	r3, #1346	; 0x542
    6c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9c:	7859      	ldrb	r1, [r3, #1]
    6c9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca6:	5499      	strb	r1, [r3, r2]
    6ca8:	4bd4      	ldr	r3, [pc, #848]	; (6ffc <ground_calibrate+0xf3c>)
    6caa:	781a      	ldrb	r2, [r3, #0]
    6cac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	4413      	add	r3, r2
    6cb8:	b2da      	uxtb	r2, r3
    6cba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc2:	701a      	strb	r2, [r3, #0]
    6cc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ccc:	781a      	ldrb	r2, [r3, #0]
    6cce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd6:	781b      	ldrb	r3, [r3, #0]
    6cd8:	4413      	add	r3, r2
    6cda:	b2da      	uxtb	r2, r3
    6cdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce4:	701a      	strb	r2, [r3, #0]
    6ce6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	3301      	adds	r3, #1
    6cf2:	b2da      	uxtb	r2, r3
    6cf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfc:	701a      	strb	r2, [r3, #0]
    6cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	2bff      	cmp	r3, #255	; 0xff
    6d0a:	d105      	bne.n	6d18 <ground_calibrate+0xc58>
    6d0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d14:	2200      	movs	r2, #0
    6d16:	701a      	strb	r2, [r3, #0]
    6d18:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d20:	781b      	ldrb	r3, [r3, #0]
    6d22:	461a      	mov	r2, r3
    6d24:	f240 5344 	movw	r3, #1348	; 0x544
    6d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d2c:	7819      	ldrb	r1, [r3, #0]
    6d2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d36:	5499      	strb	r1, [r3, r2]
    6d38:	f240 5344 	movw	r3, #1348	; 0x544
    6d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d40:	781a      	ldrb	r2, [r3, #0]
    6d42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4a:	781b      	ldrb	r3, [r3, #0]
    6d4c:	4413      	add	r3, r2
    6d4e:	b2da      	uxtb	r2, r3
    6d50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d58:	701a      	strb	r2, [r3, #0]
    6d5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d62:	781a      	ldrb	r2, [r3, #0]
    6d64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	4413      	add	r3, r2
    6d70:	b2da      	uxtb	r2, r3
    6d72:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7a:	701a      	strb	r2, [r3, #0]
    6d7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d84:	781b      	ldrb	r3, [r3, #0]
    6d86:	3301      	adds	r3, #1
    6d88:	b2da      	uxtb	r2, r3
    6d8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d92:	701a      	strb	r2, [r3, #0]
    6d94:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9c:	781b      	ldrb	r3, [r3, #0]
    6d9e:	2bff      	cmp	r3, #255	; 0xff
    6da0:	d105      	bne.n	6dae <ground_calibrate+0xcee>
    6da2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6daa:	2200      	movs	r2, #0
    6dac:	701a      	strb	r2, [r3, #0]
    6dae:	f24c 5349 	movw	r3, #50505	; 0xc549
    6db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db6:	781b      	ldrb	r3, [r3, #0]
    6db8:	461a      	mov	r2, r3
    6dba:	f240 5344 	movw	r3, #1348	; 0x544
    6dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc2:	7859      	ldrb	r1, [r3, #1]
    6dc4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dcc:	5499      	strb	r1, [r3, r2]
    6dce:	4b8c      	ldr	r3, [pc, #560]	; (7000 <ground_calibrate+0xf40>)
    6dd0:	781a      	ldrb	r2, [r3, #0]
    6dd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	4413      	add	r3, r2
    6dde:	b2da      	uxtb	r2, r3
    6de0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de8:	701a      	strb	r2, [r3, #0]
    6dea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df2:	781a      	ldrb	r2, [r3, #0]
    6df4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	4413      	add	r3, r2
    6e00:	b2da      	uxtb	r2, r3
    6e02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0a:	701a      	strb	r2, [r3, #0]
    6e0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e14:	781b      	ldrb	r3, [r3, #0]
    6e16:	3301      	adds	r3, #1
    6e18:	b2da      	uxtb	r2, r3
    6e1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e22:	701a      	strb	r2, [r3, #0]
    6e24:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	2bff      	cmp	r3, #255	; 0xff
    6e30:	d105      	bne.n	6e3e <ground_calibrate+0xd7e>
    6e32:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3a:	2200      	movs	r2, #0
    6e3c:	701a      	strb	r2, [r3, #0]
    6e3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	461a      	mov	r2, r3
    6e4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e52:	7819      	ldrb	r1, [r3, #0]
    6e54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5c:	5499      	strb	r1, [r3, r2]
    6e5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e66:	781b      	ldrb	r3, [r3, #0]
    6e68:	3301      	adds	r3, #1
    6e6a:	b2da      	uxtb	r2, r3
    6e6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e74:	701a      	strb	r2, [r3, #0]
    6e76:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7e:	781b      	ldrb	r3, [r3, #0]
    6e80:	2bff      	cmp	r3, #255	; 0xff
    6e82:	d105      	bne.n	6e90 <ground_calibrate+0xdd0>
    6e84:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8c:	2200      	movs	r2, #0
    6e8e:	701a      	strb	r2, [r3, #0]
    6e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e98:	781b      	ldrb	r3, [r3, #0]
    6e9a:	461a      	mov	r2, r3
    6e9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea4:	7819      	ldrb	r1, [r3, #0]
    6ea6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eae:	5499      	strb	r1, [r3, r2]
    6eb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb8:	781b      	ldrb	r3, [r3, #0]
    6eba:	3301      	adds	r3, #1
    6ebc:	b2da      	uxtb	r2, r3
    6ebe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec6:	701a      	strb	r2, [r3, #0]
    6ec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	2bff      	cmp	r3, #255	; 0xff
    6ed4:	d105      	bne.n	6ee2 <ground_calibrate+0xe22>
    6ed6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	2200      	movs	r2, #0
    6ee0:	701a      	strb	r2, [r3, #0]
    6ee2:	f242 0339 	movw	r3, #8249	; 0x2039
    6ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	b2db      	uxtb	r3, r3
    6eee:	f003 0310 	and.w	r3, r3, #16
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d15a      	bne.n	6fac <ground_calibrate+0xeec>
    6ef6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	b2db      	uxtb	r3, r3
    6f02:	461a      	mov	r2, r3
    6f04:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0c:	5c9a      	ldrb	r2, [r3, r2]
    6f0e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f16:	701a      	strb	r2, [r3, #0]
    6f18:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f20:	2200      	movs	r2, #0
    6f22:	701a      	strb	r2, [r3, #0]
    6f24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f2c:	781b      	ldrb	r3, [r3, #0]
    6f2e:	b2db      	uxtb	r3, r3
    6f30:	3301      	adds	r3, #1
    6f32:	b2da      	uxtb	r2, r3
    6f34:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f3c:	701a      	strb	r2, [r3, #0]
    6f3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f46:	781b      	ldrb	r3, [r3, #0]
    6f48:	b2db      	uxtb	r3, r3
    6f4a:	2bff      	cmp	r3, #255	; 0xff
    6f4c:	d105      	bne.n	6f5a <ground_calibrate+0xe9a>
    6f4e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f56:	2200      	movs	r2, #0
    6f58:	701a      	strb	r2, [r3, #0]
    6f5a:	f242 0338 	movw	r3, #8248	; 0x2038
    6f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f62:	f242 0238 	movw	r2, #8248	; 0x2038
    6f66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f6a:	7812      	ldrb	r2, [r2, #0]
    6f6c:	b2d2      	uxtb	r2, r2
    6f6e:	f042 0201 	orr.w	r2, r2, #1
    6f72:	b2d2      	uxtb	r2, r2
    6f74:	701a      	strb	r2, [r3, #0]
    6f76:	f242 0339 	movw	r3, #8249	; 0x2039
    6f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7e:	f242 0239 	movw	r2, #8249	; 0x2039
    6f82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f86:	7812      	ldrb	r2, [r2, #0]
    6f88:	b2d2      	uxtb	r2, r2
    6f8a:	f042 0210 	orr.w	r2, r2, #16
    6f8e:	b2d2      	uxtb	r2, r2
    6f90:	701a      	strb	r2, [r3, #0]
    6f92:	e00b      	b.n	6fac <ground_calibrate+0xeec>
    6f94:	f24c 5348 	movw	r3, #50504	; 0xc548
    6f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	3301      	adds	r3, #1
    6fa0:	b2da      	uxtb	r2, r3
    6fa2:	f24c 5348 	movw	r3, #50504	; 0xc548
    6fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6faa:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6fac:	f24c 5342 	movw	r3, #50498	; 0xc542
    6fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb4:	2202      	movs	r2, #2
    6fb6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6fb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc0:	781a      	ldrb	r2, [r3, #0]
    6fc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fca:	781b      	ldrb	r3, [r3, #0]
    6fcc:	b2db      	uxtb	r3, r3
    6fce:	429a      	cmp	r2, r3
    6fd0:	d318      	bcc.n	7004 <ground_calibrate+0xf44>
    6fd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	b2db      	uxtb	r3, r3
    6fde:	461a      	mov	r2, r3
    6fe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	1ad3      	subs	r3, r2, r3
    6fec:	33ff      	adds	r3, #255	; 0xff
    6fee:	2b06      	cmp	r3, #6
    6ff0:	bfd4      	ite	le
    6ff2:	2300      	movle	r3, #0
    6ff4:	2301      	movgt	r3, #1
    6ff6:	b2db      	uxtb	r3, r3
    6ff8:	e016      	b.n	7028 <ground_calibrate+0xf68>
    6ffa:	bf00      	nop
    6ffc:	20000543 	.word	0x20000543
    7000:	20000545 	.word	0x20000545
    7004:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	b2db      	uxtb	r3, r3
    7010:	461a      	mov	r2, r3
    7012:	f24c 5349 	movw	r3, #50505	; 0xc549
    7016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	1ad3      	subs	r3, r2, r3
    701e:	2b06      	cmp	r3, #6
    7020:	bfd4      	ite	le
    7022:	2300      	movle	r3, #0
    7024:	2301      	movgt	r3, #1
    7026:	b2db      	uxtb	r3, r3
    7028:	2b00      	cmp	r3, #0
    702a:	f000 8194 	beq.w	7356 <ground_calibrate+0x1296>
    702e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	461a      	mov	r2, r3
    703a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    703e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7042:	2105      	movs	r1, #5
    7044:	5499      	strb	r1, [r3, r2]
    7046:	f24c 5349 	movw	r3, #50505	; 0xc549
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	3301      	adds	r3, #1
    7052:	b2da      	uxtb	r2, r3
    7054:	f24c 5349 	movw	r3, #50505	; 0xc549
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	701a      	strb	r2, [r3, #0]
    705e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	2bff      	cmp	r3, #255	; 0xff
    706a:	d105      	bne.n	7078 <ground_calibrate+0xfb8>
    706c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	2200      	movs	r2, #0
    7076:	701a      	strb	r2, [r3, #0]
    7078:	f24c 5349 	movw	r3, #50505	; 0xc549
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	461a      	mov	r2, r3
    7084:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	2103      	movs	r1, #3
    708e:	5499      	strb	r1, [r3, r2]
    7090:	f24c 5349 	movw	r3, #50505	; 0xc549
    7094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7098:	781b      	ldrb	r3, [r3, #0]
    709a:	3301      	adds	r3, #1
    709c:	b2da      	uxtb	r2, r3
    709e:	f24c 5349 	movw	r3, #50505	; 0xc549
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	701a      	strb	r2, [r3, #0]
    70a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	2bff      	cmp	r3, #255	; 0xff
    70b4:	d105      	bne.n	70c2 <ground_calibrate+0x1002>
    70b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	2200      	movs	r2, #0
    70c0:	701a      	strb	r2, [r3, #0]
    70c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ca:	2203      	movs	r2, #3
    70cc:	701a      	strb	r2, [r3, #0]
    70ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	2203      	movs	r2, #3
    70d8:	701a      	strb	r2, [r3, #0]
    70da:	f24c 5349 	movw	r3, #50505	; 0xc549
    70de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e2:	781b      	ldrb	r3, [r3, #0]
    70e4:	461a      	mov	r2, r3
    70e6:	f240 5340 	movw	r3, #1344	; 0x540
    70ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ee:	7819      	ldrb	r1, [r3, #0]
    70f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    70f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f8:	5499      	strb	r1, [r3, r2]
    70fa:	f240 5340 	movw	r3, #1344	; 0x540
    70fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7102:	781a      	ldrb	r2, [r3, #0]
    7104:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	4413      	add	r3, r2
    7110:	b2da      	uxtb	r2, r3
    7112:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711a:	701a      	strb	r2, [r3, #0]
    711c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7124:	781a      	ldrb	r2, [r3, #0]
    7126:	f24c 634d 	movw	r3, #50765	; 0xc64d
    712a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712e:	781b      	ldrb	r3, [r3, #0]
    7130:	4413      	add	r3, r2
    7132:	b2da      	uxtb	r2, r3
    7134:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713c:	701a      	strb	r2, [r3, #0]
    713e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	3301      	adds	r3, #1
    714a:	b2da      	uxtb	r2, r3
    714c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7154:	701a      	strb	r2, [r3, #0]
    7156:	f24c 5349 	movw	r3, #50505	; 0xc549
    715a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	2bff      	cmp	r3, #255	; 0xff
    7162:	d105      	bne.n	7170 <ground_calibrate+0x10b0>
    7164:	f24c 5349 	movw	r3, #50505	; 0xc549
    7168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716c:	2200      	movs	r2, #0
    716e:	701a      	strb	r2, [r3, #0]
    7170:	f24c 5349 	movw	r3, #50505	; 0xc549
    7174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	461a      	mov	r2, r3
    717c:	f240 5340 	movw	r3, #1344	; 0x540
    7180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7184:	7859      	ldrb	r1, [r3, #1]
    7186:	f24c 534c 	movw	r3, #50508	; 0xc54c
    718a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718e:	5499      	strb	r1, [r3, r2]
    7190:	4b77      	ldr	r3, [pc, #476]	; (7370 <ground_calibrate+0x12b0>)
    7192:	781a      	ldrb	r2, [r3, #0]
    7194:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719c:	781b      	ldrb	r3, [r3, #0]
    719e:	4413      	add	r3, r2
    71a0:	b2da      	uxtb	r2, r3
    71a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71aa:	701a      	strb	r2, [r3, #0]
    71ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b4:	781a      	ldrb	r2, [r3, #0]
    71b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	4413      	add	r3, r2
    71c2:	b2da      	uxtb	r2, r3
    71c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71cc:	701a      	strb	r2, [r3, #0]
    71ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    71d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	3301      	adds	r3, #1
    71da:	b2da      	uxtb	r2, r3
    71dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    71e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e4:	701a      	strb	r2, [r3, #0]
    71e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    71ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	2bff      	cmp	r3, #255	; 0xff
    71f2:	d105      	bne.n	7200 <ground_calibrate+0x1140>
    71f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    71f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fc:	2200      	movs	r2, #0
    71fe:	701a      	strb	r2, [r3, #0]
    7200:	f24c 5349 	movw	r3, #50505	; 0xc549
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	461a      	mov	r2, r3
    720c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7214:	7819      	ldrb	r1, [r3, #0]
    7216:	f24c 534c 	movw	r3, #50508	; 0xc54c
    721a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721e:	5499      	strb	r1, [r3, r2]
    7220:	f24c 5349 	movw	r3, #50505	; 0xc549
    7224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	3301      	adds	r3, #1
    722c:	b2da      	uxtb	r2, r3
    722e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7236:	701a      	strb	r2, [r3, #0]
    7238:	f24c 5349 	movw	r3, #50505	; 0xc549
    723c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	2bff      	cmp	r3, #255	; 0xff
    7244:	d105      	bne.n	7252 <ground_calibrate+0x1192>
    7246:	f24c 5349 	movw	r3, #50505	; 0xc549
    724a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    724e:	2200      	movs	r2, #0
    7250:	701a      	strb	r2, [r3, #0]
    7252:	f24c 5349 	movw	r3, #50505	; 0xc549
    7256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725a:	781b      	ldrb	r3, [r3, #0]
    725c:	461a      	mov	r2, r3
    725e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7266:	7819      	ldrb	r1, [r3, #0]
    7268:	f24c 534c 	movw	r3, #50508	; 0xc54c
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	5499      	strb	r1, [r3, r2]
    7272:	f24c 5349 	movw	r3, #50505	; 0xc549
    7276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727a:	781b      	ldrb	r3, [r3, #0]
    727c:	3301      	adds	r3, #1
    727e:	b2da      	uxtb	r2, r3
    7280:	f24c 5349 	movw	r3, #50505	; 0xc549
    7284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7288:	701a      	strb	r2, [r3, #0]
    728a:	f24c 5349 	movw	r3, #50505	; 0xc549
    728e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7292:	781b      	ldrb	r3, [r3, #0]
    7294:	2bff      	cmp	r3, #255	; 0xff
    7296:	d105      	bne.n	72a4 <ground_calibrate+0x11e4>
    7298:	f24c 5349 	movw	r3, #50505	; 0xc549
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	2200      	movs	r2, #0
    72a2:	701a      	strb	r2, [r3, #0]
    72a4:	f242 0339 	movw	r3, #8249	; 0x2039
    72a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ac:	781b      	ldrb	r3, [r3, #0]
    72ae:	b2db      	uxtb	r3, r3
    72b0:	f003 0310 	and.w	r3, r3, #16
    72b4:	2b00      	cmp	r3, #0
    72b6:	d15a      	bne.n	736e <ground_calibrate+0x12ae>
    72b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	b2db      	uxtb	r3, r3
    72c4:	461a      	mov	r2, r3
    72c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    72ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ce:	5c9a      	ldrb	r2, [r3, r2]
    72d0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    72d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d8:	701a      	strb	r2, [r3, #0]
    72da:	f24c 634c 	movw	r3, #50764	; 0xc64c
    72de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e2:	2200      	movs	r2, #0
    72e4:	701a      	strb	r2, [r3, #0]
    72e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	b2db      	uxtb	r3, r3
    72f2:	3301      	adds	r3, #1
    72f4:	b2da      	uxtb	r2, r3
    72f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fe:	701a      	strb	r2, [r3, #0]
    7300:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	b2db      	uxtb	r3, r3
    730c:	2bff      	cmp	r3, #255	; 0xff
    730e:	d105      	bne.n	731c <ground_calibrate+0x125c>
    7310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7318:	2200      	movs	r2, #0
    731a:	701a      	strb	r2, [r3, #0]
    731c:	f242 0338 	movw	r3, #8248	; 0x2038
    7320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7324:	f242 0238 	movw	r2, #8248	; 0x2038
    7328:	f2c2 0200 	movt	r2, #8192	; 0x2000
    732c:	7812      	ldrb	r2, [r2, #0]
    732e:	b2d2      	uxtb	r2, r2
    7330:	f042 0201 	orr.w	r2, r2, #1
    7334:	b2d2      	uxtb	r2, r2
    7336:	701a      	strb	r2, [r3, #0]
    7338:	f242 0339 	movw	r3, #8249	; 0x2039
    733c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7340:	f242 0239 	movw	r2, #8249	; 0x2039
    7344:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7348:	7812      	ldrb	r2, [r2, #0]
    734a:	b2d2      	uxtb	r2, r2
    734c:	f042 0210 	orr.w	r2, r2, #16
    7350:	b2d2      	uxtb	r2, r2
    7352:	701a      	strb	r2, [r3, #0]
    7354:	e00b      	b.n	736e <ground_calibrate+0x12ae>
    7356:	f24c 5348 	movw	r3, #50504	; 0xc548
    735a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	3301      	adds	r3, #1
    7362:	b2da      	uxtb	r2, r3
    7364:	f24c 5348 	movw	r3, #50504	; 0xc548
    7368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    736e:	bd80      	pop	{r7, pc}
    7370:	20000541 	.word	0x20000541

00007374 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    737a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    737e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7382:	781b      	ldrb	r3, [r3, #0]
    7384:	2b03      	cmp	r3, #3
    7386:	d10c      	bne.n	73a2 <pprz_mode_update+0x2e>
    7388:	f24c 5330 	movw	r3, #50480	; 0xc530
    738c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7390:	781b      	ldrb	r3, [r3, #0]
    7392:	2b00      	cmp	r3, #0
    7394:	d032      	beq.n	73fc <pprz_mode_update+0x88>
    7396:	f24c 5330 	movw	r3, #50480	; 0xc530
    739a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    739e:	2200      	movs	r2, #0
    73a0:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    73a2:	f24c 6350 	movw	r3, #50768	; 0xc650
    73a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73aa:	891b      	ldrh	r3, [r3, #8]
    73ac:	b21b      	sxth	r3, r3
    73ae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    73b2:	dc0f      	bgt.n	73d4 <pprz_mode_update+0x60>
    73b4:	f24c 6350 	movw	r3, #50768	; 0xc650
    73b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73bc:	891b      	ldrh	r3, [r3, #8]
    73be:	b21a      	sxth	r2, r3
    73c0:	f64e 5341 	movw	r3, #60737	; 0xed41
    73c4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    73c8:	429a      	cmp	r2, r3
    73ca:	bfb4      	ite	lt
    73cc:	2300      	movlt	r3, #0
    73ce:	2301      	movge	r3, #1
    73d0:	b2db      	uxtb	r3, r3
    73d2:	e000      	b.n	73d6 <pprz_mode_update+0x62>
    73d4:	2302      	movs	r3, #2
    73d6:	71fb      	strb	r3, [r7, #7]
    73d8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    73dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e0:	781b      	ldrb	r3, [r3, #0]
    73e2:	79fa      	ldrb	r2, [r7, #7]
    73e4:	429a      	cmp	r2, r3
    73e6:	d007      	beq.n	73f8 <pprz_mode_update+0x84>
    73e8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    73ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f0:	79fa      	ldrb	r2, [r7, #7]
    73f2:	701a      	strb	r2, [r3, #0]
    73f4:	2301      	movs	r3, #1
    73f6:	e002      	b.n	73fe <pprz_mode_update+0x8a>
    73f8:	2300      	movs	r3, #0
    73fa:	e000      	b.n	73fe <pprz_mode_update+0x8a>
  } else
    return FALSE;
    73fc:	2300      	movs	r3, #0
}
    73fe:	4618      	mov	r0, r3
    7400:	370c      	adds	r7, #12
    7402:	46bd      	mov	sp, r7
    7404:	f85d 7b04 	ldr.w	r7, [sp], #4
    7408:	4770      	bx	lr
    740a:	bf00      	nop

0000740c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    740c:	b480      	push	{r7}
    740e:	b083      	sub	sp, #12
    7410:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7412:	f24c 6350 	movw	r3, #50768	; 0xc650
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	89db      	ldrh	r3, [r3, #14]
    741c:	b21a      	sxth	r2, r3
    741e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7422:	429a      	cmp	r2, r3
    7424:	bfd4      	ite	le
    7426:	2300      	movle	r3, #0
    7428:	2301      	movgt	r3, #1
    742a:	b2db      	uxtb	r3, r3
    742c:	71fb      	strb	r3, [r7, #7]
    742e:	f240 533c 	movw	r3, #1340	; 0x53c
    7432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	79fa      	ldrb	r2, [r7, #7]
    743a:	429a      	cmp	r2, r3
    743c:	d007      	beq.n	744e <ir_estim_mode_update+0x42>
    743e:	f240 533c 	movw	r3, #1340	; 0x53c
    7442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7446:	79fa      	ldrb	r2, [r7, #7]
    7448:	701a      	strb	r2, [r3, #0]
    744a:	2301      	movs	r3, #1
    744c:	e000      	b.n	7450 <ir_estim_mode_update+0x44>
    744e:	2300      	movs	r3, #0
}
    7450:	4618      	mov	r0, r3
    7452:	370c      	adds	r7, #12
    7454:	46bd      	mov	sp, r7
    7456:	f85d 7b04 	ldr.w	r7, [sp], #4
    745a:	4770      	bx	lr

0000745c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    745c:	b480      	push	{r7}
    745e:	b083      	sub	sp, #12
    7460:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7462:	f24c 6350 	movw	r3, #50768	; 0xc650
    7466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746a:	7cdb      	ldrb	r3, [r3, #19]
    746c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    746e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	79fa      	ldrb	r2, [r7, #7]
    747a:	429a      	cmp	r2, r3
    747c:	d017      	beq.n	74ae <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    747e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	461a      	mov	r2, r3
    748a:	79fb      	ldrb	r3, [r7, #7]
    748c:	4053      	eors	r3, r2
    748e:	f003 0303 	and.w	r3, r3, #3
    7492:	2b00      	cmp	r3, #0
    7494:	bf0c      	ite	eq
    7496:	2300      	moveq	r3, #0
    7498:	2301      	movne	r3, #1
    749a:	b2db      	uxtb	r3, r3
    749c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    749e:	f24c 5333 	movw	r3, #50483	; 0xc533
    74a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a6:	79fa      	ldrb	r2, [r7, #7]
    74a8:	701a      	strb	r2, [r3, #0]
    return changed;
    74aa:	79bb      	ldrb	r3, [r7, #6]
    74ac:	e000      	b.n	74b0 <mcu1_status_update+0x54>
  }
  return FALSE;
    74ae:	2300      	movs	r3, #0
}
    74b0:	4618      	mov	r0, r3
    74b2:	370c      	adds	r7, #12
    74b4:	46bd      	mov	sp, r7
    74b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ba:	4770      	bx	lr

000074bc <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    74bc:	b480      	push	{r7}
    74be:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    74c0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    74c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c8:	781b      	ldrb	r3, [r3, #0]
    74ca:	2b00      	cmp	r3, #0
    74cc:	d12a      	bne.n	7524 <events_update+0x68>
    74ce:	f24c 6350 	movw	r3, #50768	; 0xc650
    74d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d6:	895b      	ldrh	r3, [r3, #10]
    74d8:	b21b      	sxth	r3, r3
    74da:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    74de:	dd21      	ble.n	7524 <events_update+0x68>
    74e0:	f24c 5344 	movw	r3, #50500	; 0xc544
    74e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e8:	881b      	ldrh	r3, [r3, #0]
    74ea:	2b13      	cmp	r3, #19
    74ec:	d819      	bhi.n	7522 <events_update+0x66>
    74ee:	f24c 5344 	movw	r3, #50500	; 0xc544
    74f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f6:	881b      	ldrh	r3, [r3, #0]
    74f8:	3301      	adds	r3, #1
    74fa:	b29a      	uxth	r2, r3
    74fc:	f24c 5344 	movw	r3, #50500	; 0xc544
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	801a      	strh	r2, [r3, #0]
    7506:	f24c 5344 	movw	r3, #50500	; 0xc544
    750a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750e:	881b      	ldrh	r3, [r3, #0]
    7510:	2b14      	cmp	r3, #20
    7512:	d106      	bne.n	7522 <events_update+0x66>
    7514:	f24c 5330 	movw	r3, #50480	; 0xc530
    7518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751c:	2201      	movs	r2, #1
    751e:	701a      	strb	r2, [r3, #0]
    7520:	e00c      	b.n	753c <events_update+0x80>
    7522:	e00b      	b.n	753c <events_update+0x80>
    7524:	f24c 5344 	movw	r3, #50500	; 0xc544
    7528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752c:	2200      	movs	r2, #0
    752e:	801a      	strh	r2, [r3, #0]
    7530:	f24c 5330 	movw	r3, #50480	; 0xc530
    7534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7538:	2200      	movs	r2, #0
    753a:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    753c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7544:	781b      	ldrb	r3, [r3, #0]
    7546:	2b00      	cmp	r3, #0
    7548:	d12a      	bne.n	75a0 <events_update+0xe4>
    754a:	f24c 6350 	movw	r3, #50768	; 0xc650
    754e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7552:	895b      	ldrh	r3, [r3, #10]
    7554:	b21b      	sxth	r3, r3
    7556:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    755a:	da21      	bge.n	75a0 <events_update+0xe4>
    755c:	f24c 5346 	movw	r3, #50502	; 0xc546
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	881b      	ldrh	r3, [r3, #0]
    7566:	2b13      	cmp	r3, #19
    7568:	d819      	bhi.n	759e <events_update+0xe2>
    756a:	f24c 5346 	movw	r3, #50502	; 0xc546
    756e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7572:	881b      	ldrh	r3, [r3, #0]
    7574:	3301      	adds	r3, #1
    7576:	b29a      	uxth	r2, r3
    7578:	f24c 5346 	movw	r3, #50502	; 0xc546
    757c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7580:	801a      	strh	r2, [r3, #0]
    7582:	f24c 5346 	movw	r3, #50502	; 0xc546
    7586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758a:	881b      	ldrh	r3, [r3, #0]
    758c:	2b14      	cmp	r3, #20
    758e:	d106      	bne.n	759e <events_update+0xe2>
    7590:	f24c 5331 	movw	r3, #50481	; 0xc531
    7594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7598:	2201      	movs	r2, #1
    759a:	701a      	strb	r2, [r3, #0]
    759c:	e00c      	b.n	75b8 <events_update+0xfc>
    759e:	e00b      	b.n	75b8 <events_update+0xfc>
    75a0:	f24c 5346 	movw	r3, #50502	; 0xc546
    75a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a8:	2200      	movs	r2, #0
    75aa:	801a      	strh	r2, [r3, #0]
    75ac:	f24c 5331 	movw	r3, #50481	; 0xc531
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	2200      	movs	r2, #0
    75b6:	701a      	strb	r2, [r3, #0]
}  
    75b8:	46bd      	mov	sp, r7
    75ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    75be:	4770      	bx	lr

000075c0 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    75c0:	b480      	push	{r7}
    75c2:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    75c4:	f24c 6350 	movw	r3, #50768	; 0xc650
    75c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75cc:	88da      	ldrh	r2, [r3, #6]
    75ce:	f24c 6368 	movw	r3, #50792	; 0xc668
    75d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d6:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    75d8:	f24c 6368 	movw	r3, #50792	; 0xc668
    75dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e0:	2200      	movs	r2, #0
    75e2:	74da      	strb	r2, [r3, #19]
}
    75e4:	46bd      	mov	sp, r7
    75e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ea:	4770      	bx	lr

000075ec <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    75ec:	b480      	push	{r7}
    75ee:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    75f0:	f240 533d 	movw	r3, #1341	; 0x53d
    75f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2b00      	cmp	r3, #0
    75fc:	f000 87c6 	beq.w	858c <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7600:	f24c 5349 	movw	r3, #50505	; 0xc549
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	781a      	ldrb	r2, [r3, #0]
    760a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    760e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7612:	781b      	ldrb	r3, [r3, #0]
    7614:	b2db      	uxtb	r3, r3
    7616:	429a      	cmp	r2, r3
    7618:	d313      	bcc.n	7642 <send_boot+0x56>
    761a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	781b      	ldrb	r3, [r3, #0]
    7624:	b2db      	uxtb	r3, r3
    7626:	461a      	mov	r2, r3
    7628:	f24c 5349 	movw	r3, #50505	; 0xc549
    762c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7630:	781b      	ldrb	r3, [r3, #0]
    7632:	1ad3      	subs	r3, r2, r3
    7634:	33ff      	adds	r3, #255	; 0xff
    7636:	2b06      	cmp	r3, #6
    7638:	bfd4      	ite	le
    763a:	2300      	movle	r3, #0
    763c:	2301      	movgt	r3, #1
    763e:	b2db      	uxtb	r3, r3
    7640:	e011      	b.n	7666 <send_boot+0x7a>
    7642:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	781b      	ldrb	r3, [r3, #0]
    764c:	b2db      	uxtb	r3, r3
    764e:	461a      	mov	r2, r3
    7650:	f24c 5349 	movw	r3, #50505	; 0xc549
    7654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	1ad3      	subs	r3, r2, r3
    765c:	2b06      	cmp	r3, #6
    765e:	bfd4      	ite	le
    7660:	2300      	movle	r3, #0
    7662:	2301      	movgt	r3, #1
    7664:	b2db      	uxtb	r3, r3
    7666:	2b00      	cmp	r3, #0
    7668:	f000 8194 	beq.w	7994 <send_boot+0x3a8>
    766c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7674:	781b      	ldrb	r3, [r3, #0]
    7676:	461a      	mov	r2, r3
    7678:	f24c 534c 	movw	r3, #50508	; 0xc54c
    767c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7680:	2105      	movs	r1, #5
    7682:	5499      	strb	r1, [r3, r2]
    7684:	f24c 5349 	movw	r3, #50505	; 0xc549
    7688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768c:	781b      	ldrb	r3, [r3, #0]
    768e:	3301      	adds	r3, #1
    7690:	b2da      	uxtb	r2, r3
    7692:	f24c 5349 	movw	r3, #50505	; 0xc549
    7696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769a:	701a      	strb	r2, [r3, #0]
    769c:	f24c 5349 	movw	r3, #50505	; 0xc549
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	781b      	ldrb	r3, [r3, #0]
    76a6:	2bff      	cmp	r3, #255	; 0xff
    76a8:	d105      	bne.n	76b6 <send_boot+0xca>
    76aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b2:	2200      	movs	r2, #0
    76b4:	701a      	strb	r2, [r3, #0]
    76b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76be:	781b      	ldrb	r3, [r3, #0]
    76c0:	461a      	mov	r2, r3
    76c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    76c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ca:	2101      	movs	r1, #1
    76cc:	5499      	strb	r1, [r3, r2]
    76ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    76d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	3301      	adds	r3, #1
    76da:	b2da      	uxtb	r2, r3
    76dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    76e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e4:	701a      	strb	r2, [r3, #0]
    76e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    76ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	2bff      	cmp	r3, #255	; 0xff
    76f2:	d105      	bne.n	7700 <send_boot+0x114>
    76f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    76f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fc:	2200      	movs	r2, #0
    76fe:	701a      	strb	r2, [r3, #0]
    7700:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7708:	2201      	movs	r2, #1
    770a:	701a      	strb	r2, [r3, #0]
    770c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	2201      	movs	r2, #1
    7716:	701a      	strb	r2, [r3, #0]
    7718:	f24c 5349 	movw	r3, #50505	; 0xc549
    771c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	461a      	mov	r2, r3
    7724:	f648 23f6 	movw	r3, #35574	; 0x8af6
    7728:	f2c0 0301 	movt	r3, #1
    772c:	7819      	ldrb	r1, [r3, #0]
    772e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7736:	5499      	strb	r1, [r3, r2]
    7738:	f648 23f6 	movw	r3, #35574	; 0x8af6
    773c:	f2c0 0301 	movt	r3, #1
    7740:	781a      	ldrb	r2, [r3, #0]
    7742:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774a:	781b      	ldrb	r3, [r3, #0]
    774c:	4413      	add	r3, r2
    774e:	b2da      	uxtb	r2, r3
    7750:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7758:	701a      	strb	r2, [r3, #0]
    775a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    775e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7762:	781a      	ldrb	r2, [r3, #0]
    7764:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	4413      	add	r3, r2
    7770:	b2da      	uxtb	r2, r3
    7772:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777a:	701a      	strb	r2, [r3, #0]
    777c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	3301      	adds	r3, #1
    7788:	b2da      	uxtb	r2, r3
    778a:	f24c 5349 	movw	r3, #50505	; 0xc549
    778e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f24c 5349 	movw	r3, #50505	; 0xc549
    7798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	2bff      	cmp	r3, #255	; 0xff
    77a0:	d105      	bne.n	77ae <send_boot+0x1c2>
    77a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    77a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77aa:	2200      	movs	r2, #0
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    77b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	461a      	mov	r2, r3
    77ba:	f648 23f6 	movw	r3, #35574	; 0x8af6
    77be:	f2c0 0301 	movt	r3, #1
    77c2:	7859      	ldrb	r1, [r3, #1]
    77c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77cc:	5499      	strb	r1, [r3, r2]
    77ce:	4b88      	ldr	r3, [pc, #544]	; (79f0 <send_boot+0x404>)
    77d0:	781a      	ldrb	r2, [r3, #0]
    77d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	4413      	add	r3, r2
    77de:	b2da      	uxtb	r2, r3
    77e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e8:	701a      	strb	r2, [r3, #0]
    77ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    77ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f2:	781a      	ldrb	r2, [r3, #0]
    77f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	4413      	add	r3, r2
    7800:	b2da      	uxtb	r2, r3
    7802:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780a:	701a      	strb	r2, [r3, #0]
    780c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	3301      	adds	r3, #1
    7818:	b2da      	uxtb	r2, r3
    781a:	f24c 5349 	movw	r3, #50505	; 0xc549
    781e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f24c 5349 	movw	r3, #50505	; 0xc549
    7828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	2bff      	cmp	r3, #255	; 0xff
    7830:	d105      	bne.n	783e <send_boot+0x252>
    7832:	f24c 5349 	movw	r3, #50505	; 0xc549
    7836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783a:	2200      	movs	r2, #0
    783c:	701a      	strb	r2, [r3, #0]
    783e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	461a      	mov	r2, r3
    784a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	7819      	ldrb	r1, [r3, #0]
    7854:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785c:	5499      	strb	r1, [r3, r2]
    785e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	3301      	adds	r3, #1
    786a:	b2da      	uxtb	r2, r3
    786c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	701a      	strb	r2, [r3, #0]
    7876:	f24c 5349 	movw	r3, #50505	; 0xc549
    787a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	2bff      	cmp	r3, #255	; 0xff
    7882:	d105      	bne.n	7890 <send_boot+0x2a4>
    7884:	f24c 5349 	movw	r3, #50505	; 0xc549
    7888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788c:	2200      	movs	r2, #0
    788e:	701a      	strb	r2, [r3, #0]
    7890:	f24c 5349 	movw	r3, #50505	; 0xc549
    7894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	461a      	mov	r2, r3
    789c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    78a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a4:	7819      	ldrb	r1, [r3, #0]
    78a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ae:	5499      	strb	r1, [r3, r2]
    78b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    78b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b8:	781b      	ldrb	r3, [r3, #0]
    78ba:	3301      	adds	r3, #1
    78bc:	b2da      	uxtb	r2, r3
    78be:	f24c 5349 	movw	r3, #50505	; 0xc549
    78c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c6:	701a      	strb	r2, [r3, #0]
    78c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    78cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d0:	781b      	ldrb	r3, [r3, #0]
    78d2:	2bff      	cmp	r3, #255	; 0xff
    78d4:	d105      	bne.n	78e2 <send_boot+0x2f6>
    78d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    78da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78de:	2200      	movs	r2, #0
    78e0:	701a      	strb	r2, [r3, #0]
    78e2:	f242 0339 	movw	r3, #8249	; 0x2039
    78e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ea:	781b      	ldrb	r3, [r3, #0]
    78ec:	b2db      	uxtb	r3, r3
    78ee:	f003 0310 	and.w	r3, r3, #16
    78f2:	2b00      	cmp	r3, #0
    78f4:	d15a      	bne.n	79ac <send_boot+0x3c0>
    78f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	b2db      	uxtb	r3, r3
    7902:	461a      	mov	r2, r3
    7904:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	5c9a      	ldrb	r2, [r3, r2]
    790e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	701a      	strb	r2, [r3, #0]
    7918:	f24c 634c 	movw	r3, #50764	; 0xc64c
    791c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7920:	2200      	movs	r2, #0
    7922:	701a      	strb	r2, [r3, #0]
    7924:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    792c:	781b      	ldrb	r3, [r3, #0]
    792e:	b2db      	uxtb	r3, r3
    7930:	3301      	adds	r3, #1
    7932:	b2da      	uxtb	r2, r3
    7934:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	701a      	strb	r2, [r3, #0]
    793e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	781b      	ldrb	r3, [r3, #0]
    7948:	b2db      	uxtb	r3, r3
    794a:	2bff      	cmp	r3, #255	; 0xff
    794c:	d105      	bne.n	795a <send_boot+0x36e>
    794e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	2200      	movs	r2, #0
    7958:	701a      	strb	r2, [r3, #0]
    795a:	f242 0338 	movw	r3, #8248	; 0x2038
    795e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7962:	f242 0238 	movw	r2, #8248	; 0x2038
    7966:	f2c2 0200 	movt	r2, #8192	; 0x2000
    796a:	7812      	ldrb	r2, [r2, #0]
    796c:	b2d2      	uxtb	r2, r2
    796e:	f042 0201 	orr.w	r2, r2, #1
    7972:	b2d2      	uxtb	r2, r2
    7974:	701a      	strb	r2, [r3, #0]
    7976:	f242 0339 	movw	r3, #8249	; 0x2039
    797a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797e:	f242 0239 	movw	r2, #8249	; 0x2039
    7982:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7986:	7812      	ldrb	r2, [r2, #0]
    7988:	b2d2      	uxtb	r2, r2
    798a:	f042 0210 	orr.w	r2, r2, #16
    798e:	b2d2      	uxtb	r2, r2
    7990:	701a      	strb	r2, [r3, #0]
    7992:	e00b      	b.n	79ac <send_boot+0x3c0>
    7994:	f24c 5348 	movw	r3, #50504	; 0xc548
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	3301      	adds	r3, #1
    79a0:	b2da      	uxtb	r2, r3
    79a2:	f24c 5348 	movw	r3, #50504	; 0xc548
    79a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79aa:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    79ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    79b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	b2db      	uxtb	r3, r3
    79c2:	429a      	cmp	r2, r3
    79c4:	d316      	bcc.n	79f4 <send_boot+0x408>
    79c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	b2db      	uxtb	r3, r3
    79d2:	461a      	mov	r2, r3
    79d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    79d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79dc:	781b      	ldrb	r3, [r3, #0]
    79de:	1ad3      	subs	r3, r2, r3
    79e0:	33ff      	adds	r3, #255	; 0xff
    79e2:	2b14      	cmp	r3, #20
    79e4:	bfd4      	ite	le
    79e6:	2300      	movle	r3, #0
    79e8:	2301      	movgt	r3, #1
    79ea:	b2db      	uxtb	r3, r3
    79ec:	e014      	b.n	7a18 <send_boot+0x42c>
    79ee:	bf00      	nop
    79f0:	00018af7 	.word	0x00018af7
    79f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	b2db      	uxtb	r3, r3
    7a00:	461a      	mov	r2, r3
    7a02:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	1ad3      	subs	r3, r2, r3
    7a0e:	2b14      	cmp	r3, #20
    7a10:	bfd4      	ite	le
    7a12:	2300      	movle	r3, #0
    7a14:	2301      	movgt	r3, #1
    7a16:	b2db      	uxtb	r3, r3
    7a18:	2b00      	cmp	r3, #0
    7a1a:	f000 85a5 	beq.w	8568 <send_boot+0xf7c>
    7a1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a26:	781b      	ldrb	r3, [r3, #0]
    7a28:	461a      	mov	r2, r3
    7a2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a32:	2105      	movs	r1, #5
    7a34:	5499      	strb	r1, [r3, r2]
    7a36:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	3301      	adds	r3, #1
    7a42:	b2da      	uxtb	r2, r3
    7a44:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	701a      	strb	r2, [r3, #0]
    7a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	2bff      	cmp	r3, #255	; 0xff
    7a5a:	d105      	bne.n	7a68 <send_boot+0x47c>
    7a5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a64:	2200      	movs	r2, #0
    7a66:	701a      	strb	r2, [r3, #0]
    7a68:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	461a      	mov	r2, r3
    7a74:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7c:	2105      	movs	r1, #5
    7a7e:	5499      	strb	r1, [r3, r2]
    7a80:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	3301      	adds	r3, #1
    7a8c:	b2da      	uxtb	r2, r3
    7a8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	701a      	strb	r2, [r3, #0]
    7a98:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2bff      	cmp	r3, #255	; 0xff
    7aa4:	d105      	bne.n	7ab2 <send_boot+0x4c6>
    7aa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    7ab2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aba:	2205      	movs	r2, #5
    7abc:	701a      	strb	r2, [r3, #0]
    7abe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	2205      	movs	r2, #5
    7ac8:	701a      	strb	r2, [r3, #0]
    7aca:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	461a      	mov	r2, r3
    7ad6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ade:	7819      	ldrb	r1, [r3, #0]
    7ae0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae8:	5499      	strb	r1, [r3, r2]
    7aea:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af2:	781a      	ldrb	r2, [r3, #0]
    7af4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	4413      	add	r3, r2
    7b00:	b2da      	uxtb	r2, r3
    7b02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0a:	701a      	strb	r2, [r3, #0]
    7b0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	781a      	ldrb	r2, [r3, #0]
    7b16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	4413      	add	r3, r2
    7b22:	b2da      	uxtb	r2, r3
    7b24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2c:	701a      	strb	r2, [r3, #0]
    7b2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	3301      	adds	r3, #1
    7b3a:	b2da      	uxtb	r2, r3
    7b3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b44:	701a      	strb	r2, [r3, #0]
    7b46:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	2bff      	cmp	r3, #255	; 0xff
    7b52:	d105      	bne.n	7b60 <send_boot+0x574>
    7b54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	2200      	movs	r2, #0
    7b5e:	701a      	strb	r2, [r3, #0]
    7b60:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	461a      	mov	r2, r3
    7b6c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	7859      	ldrb	r1, [r3, #1]
    7b76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7e:	5499      	strb	r1, [r3, r2]
    7b80:	4bd1      	ldr	r3, [pc, #836]	; (7ec8 <send_boot+0x8dc>)
    7b82:	781a      	ldrb	r2, [r3, #0]
    7b84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	4413      	add	r3, r2
    7b90:	b2da      	uxtb	r2, r3
    7b92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9a:	701a      	strb	r2, [r3, #0]
    7b9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	781a      	ldrb	r2, [r3, #0]
    7ba6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bae:	781b      	ldrb	r3, [r3, #0]
    7bb0:	4413      	add	r3, r2
    7bb2:	b2da      	uxtb	r2, r3
    7bb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbc:	701a      	strb	r2, [r3, #0]
    7bbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	3301      	adds	r3, #1
    7bca:	b2da      	uxtb	r2, r3
    7bcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd4:	701a      	strb	r2, [r3, #0]
    7bd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	2bff      	cmp	r3, #255	; 0xff
    7be2:	d105      	bne.n	7bf0 <send_boot+0x604>
    7be4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bec:	2200      	movs	r2, #0
    7bee:	701a      	strb	r2, [r3, #0]
    7bf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf8:	781b      	ldrb	r3, [r3, #0]
    7bfa:	461a      	mov	r2, r3
    7bfc:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c04:	7899      	ldrb	r1, [r3, #2]
    7c06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0e:	5499      	strb	r1, [r3, r2]
    7c10:	4bae      	ldr	r3, [pc, #696]	; (7ecc <send_boot+0x8e0>)
    7c12:	781a      	ldrb	r2, [r3, #0]
    7c14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	4413      	add	r3, r2
    7c20:	b2da      	uxtb	r2, r3
    7c22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2a:	701a      	strb	r2, [r3, #0]
    7c2c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c34:	781a      	ldrb	r2, [r3, #0]
    7c36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	4413      	add	r3, r2
    7c42:	b2da      	uxtb	r2, r3
    7c44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4c:	701a      	strb	r2, [r3, #0]
    7c4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	3301      	adds	r3, #1
    7c5a:	b2da      	uxtb	r2, r3
    7c5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c64:	701a      	strb	r2, [r3, #0]
    7c66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	2bff      	cmp	r3, #255	; 0xff
    7c72:	d105      	bne.n	7c80 <send_boot+0x694>
    7c74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7c:	2200      	movs	r2, #0
    7c7e:	701a      	strb	r2, [r3, #0]
    7c80:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c88:	781b      	ldrb	r3, [r3, #0]
    7c8a:	461a      	mov	r2, r3
    7c8c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c94:	78d9      	ldrb	r1, [r3, #3]
    7c96:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9e:	5499      	strb	r1, [r3, r2]
    7ca0:	4b8b      	ldr	r3, [pc, #556]	; (7ed0 <send_boot+0x8e4>)
    7ca2:	781a      	ldrb	r2, [r3, #0]
    7ca4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cac:	781b      	ldrb	r3, [r3, #0]
    7cae:	4413      	add	r3, r2
    7cb0:	b2da      	uxtb	r2, r3
    7cb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cba:	701a      	strb	r2, [r3, #0]
    7cbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc4:	781a      	ldrb	r2, [r3, #0]
    7cc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	4413      	add	r3, r2
    7cd2:	b2da      	uxtb	r2, r3
    7cd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cdc:	701a      	strb	r2, [r3, #0]
    7cde:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	3301      	adds	r3, #1
    7cea:	b2da      	uxtb	r2, r3
    7cec:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf4:	701a      	strb	r2, [r3, #0]
    7cf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfe:	781b      	ldrb	r3, [r3, #0]
    7d00:	2bff      	cmp	r3, #255	; 0xff
    7d02:	d105      	bne.n	7d10 <send_boot+0x724>
    7d04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0c:	2200      	movs	r2, #0
    7d0e:	701a      	strb	r2, [r3, #0]
    7d10:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	461a      	mov	r2, r3
    7d1c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d24:	7819      	ldrb	r1, [r3, #0]
    7d26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2e:	5499      	strb	r1, [r3, r2]
    7d30:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d38:	781a      	ldrb	r2, [r3, #0]
    7d3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	4413      	add	r3, r2
    7d46:	b2da      	uxtb	r2, r3
    7d48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d50:	701a      	strb	r2, [r3, #0]
    7d52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5a:	781a      	ldrb	r2, [r3, #0]
    7d5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	4413      	add	r3, r2
    7d68:	b2da      	uxtb	r2, r3
    7d6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d72:	701a      	strb	r2, [r3, #0]
    7d74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7c:	781b      	ldrb	r3, [r3, #0]
    7d7e:	3301      	adds	r3, #1
    7d80:	b2da      	uxtb	r2, r3
    7d82:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8a:	701a      	strb	r2, [r3, #0]
    7d8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d94:	781b      	ldrb	r3, [r3, #0]
    7d96:	2bff      	cmp	r3, #255	; 0xff
    7d98:	d105      	bne.n	7da6 <send_boot+0x7ba>
    7d9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da2:	2200      	movs	r2, #0
    7da4:	701a      	strb	r2, [r3, #0]
    7da6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	461a      	mov	r2, r3
    7db2:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	7859      	ldrb	r1, [r3, #1]
    7dbc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc4:	5499      	strb	r1, [r3, r2]
    7dc6:	4b43      	ldr	r3, [pc, #268]	; (7ed4 <send_boot+0x8e8>)
    7dc8:	781a      	ldrb	r2, [r3, #0]
    7dca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd2:	781b      	ldrb	r3, [r3, #0]
    7dd4:	4413      	add	r3, r2
    7dd6:	b2da      	uxtb	r2, r3
    7dd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de0:	701a      	strb	r2, [r3, #0]
    7de2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	781a      	ldrb	r2, [r3, #0]
    7dec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	4413      	add	r3, r2
    7df8:	b2da      	uxtb	r2, r3
    7dfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	701a      	strb	r2, [r3, #0]
    7e04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0c:	781b      	ldrb	r3, [r3, #0]
    7e0e:	3301      	adds	r3, #1
    7e10:	b2da      	uxtb	r2, r3
    7e12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1a:	701a      	strb	r2, [r3, #0]
    7e1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e24:	781b      	ldrb	r3, [r3, #0]
    7e26:	2bff      	cmp	r3, #255	; 0xff
    7e28:	d105      	bne.n	7e36 <send_boot+0x84a>
    7e2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	2200      	movs	r2, #0
    7e34:	701a      	strb	r2, [r3, #0]
    7e36:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	461a      	mov	r2, r3
    7e42:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4a:	7899      	ldrb	r1, [r3, #2]
    7e4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e54:	5499      	strb	r1, [r3, r2]
    7e56:	4b20      	ldr	r3, [pc, #128]	; (7ed8 <send_boot+0x8ec>)
    7e58:	781a      	ldrb	r2, [r3, #0]
    7e5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e62:	781b      	ldrb	r3, [r3, #0]
    7e64:	4413      	add	r3, r2
    7e66:	b2da      	uxtb	r2, r3
    7e68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e70:	701a      	strb	r2, [r3, #0]
    7e72:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7a:	781a      	ldrb	r2, [r3, #0]
    7e7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e84:	781b      	ldrb	r3, [r3, #0]
    7e86:	4413      	add	r3, r2
    7e88:	b2da      	uxtb	r2, r3
    7e8a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e92:	701a      	strb	r2, [r3, #0]
    7e94:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9c:	781b      	ldrb	r3, [r3, #0]
    7e9e:	3301      	adds	r3, #1
    7ea0:	b2da      	uxtb	r2, r3
    7ea2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eaa:	701a      	strb	r2, [r3, #0]
    7eac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb4:	781b      	ldrb	r3, [r3, #0]
    7eb6:	2bff      	cmp	r3, #255	; 0xff
    7eb8:	d110      	bne.n	7edc <send_boot+0x8f0>
    7eba:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec2:	2200      	movs	r2, #0
    7ec4:	701a      	strb	r2, [r3, #0]
    7ec6:	e009      	b.n	7edc <send_boot+0x8f0>
    7ec8:	2004cb41 	.word	0x2004cb41
    7ecc:	2004cb42 	.word	0x2004cb42
    7ed0:	2004cb43 	.word	0x2004cb43
    7ed4:	2004cb45 	.word	0x2004cb45
    7ed8:	2004cb46 	.word	0x2004cb46
    7edc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee4:	781b      	ldrb	r3, [r3, #0]
    7ee6:	461a      	mov	r2, r3
    7ee8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef0:	78d9      	ldrb	r1, [r3, #3]
    7ef2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efa:	5499      	strb	r1, [r3, r2]
    7efc:	4bd3      	ldr	r3, [pc, #844]	; (824c <send_boot+0xc60>)
    7efe:	781a      	ldrb	r2, [r3, #0]
    7f00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	4413      	add	r3, r2
    7f0c:	b2da      	uxtb	r2, r3
    7f0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f16:	701a      	strb	r2, [r3, #0]
    7f18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f20:	781a      	ldrb	r2, [r3, #0]
    7f22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	4413      	add	r3, r2
    7f2e:	b2da      	uxtb	r2, r3
    7f30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f38:	701a      	strb	r2, [r3, #0]
    7f3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	3301      	adds	r3, #1
    7f46:	b2da      	uxtb	r2, r3
    7f48:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	2bff      	cmp	r3, #255	; 0xff
    7f5e:	d105      	bne.n	7f6c <send_boot+0x980>
    7f60:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	2200      	movs	r2, #0
    7f6a:	701a      	strb	r2, [r3, #0]
    7f6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f74:	781b      	ldrb	r3, [r3, #0]
    7f76:	461a      	mov	r2, r3
    7f78:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f80:	7819      	ldrb	r1, [r3, #0]
    7f82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8a:	5499      	strb	r1, [r3, r2]
    7f8c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f94:	781a      	ldrb	r2, [r3, #0]
    7f96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	781b      	ldrb	r3, [r3, #0]
    7fa0:	4413      	add	r3, r2
    7fa2:	b2da      	uxtb	r2, r3
    7fa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fac:	701a      	strb	r2, [r3, #0]
    7fae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781a      	ldrb	r2, [r3, #0]
    7fb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	4413      	add	r3, r2
    7fc4:	b2da      	uxtb	r2, r3
    7fc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	701a      	strb	r2, [r3, #0]
    7fd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	3301      	adds	r3, #1
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	701a      	strb	r2, [r3, #0]
    7fe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	2bff      	cmp	r3, #255	; 0xff
    7ff4:	d105      	bne.n	8002 <send_boot+0xa16>
    7ff6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	2200      	movs	r2, #0
    8000:	701a      	strb	r2, [r3, #0]
    8002:	f24c 5349 	movw	r3, #50505	; 0xc549
    8006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800a:	781b      	ldrb	r3, [r3, #0]
    800c:	461a      	mov	r2, r3
    800e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	7859      	ldrb	r1, [r3, #1]
    8018:	f24c 534c 	movw	r3, #50508	; 0xc54c
    801c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8020:	5499      	strb	r1, [r3, r2]
    8022:	4b8b      	ldr	r3, [pc, #556]	; (8250 <send_boot+0xc64>)
    8024:	781a      	ldrb	r2, [r3, #0]
    8026:	f24c 634d 	movw	r3, #50765	; 0xc64d
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	781b      	ldrb	r3, [r3, #0]
    8030:	4413      	add	r3, r2
    8032:	b2da      	uxtb	r2, r3
    8034:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803c:	701a      	strb	r2, [r3, #0]
    803e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8046:	781a      	ldrb	r2, [r3, #0]
    8048:	f24c 634d 	movw	r3, #50765	; 0xc64d
    804c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	4413      	add	r3, r2
    8054:	b2da      	uxtb	r2, r3
    8056:	f24c 634e 	movw	r3, #50766	; 0xc64e
    805a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805e:	701a      	strb	r2, [r3, #0]
    8060:	f24c 5349 	movw	r3, #50505	; 0xc549
    8064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8068:	781b      	ldrb	r3, [r3, #0]
    806a:	3301      	adds	r3, #1
    806c:	b2da      	uxtb	r2, r3
    806e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8076:	701a      	strb	r2, [r3, #0]
    8078:	f24c 5349 	movw	r3, #50505	; 0xc549
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	2bff      	cmp	r3, #255	; 0xff
    8084:	d105      	bne.n	8092 <send_boot+0xaa6>
    8086:	f24c 5349 	movw	r3, #50505	; 0xc549
    808a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808e:	2200      	movs	r2, #0
    8090:	701a      	strb	r2, [r3, #0]
    8092:	f24c 5349 	movw	r3, #50505	; 0xc549
    8096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	461a      	mov	r2, r3
    809e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    80a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a6:	7899      	ldrb	r1, [r3, #2]
    80a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    80ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b0:	5499      	strb	r1, [r3, r2]
    80b2:	4b68      	ldr	r3, [pc, #416]	; (8254 <send_boot+0xc68>)
    80b4:	781a      	ldrb	r2, [r3, #0]
    80b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80be:	781b      	ldrb	r3, [r3, #0]
    80c0:	4413      	add	r3, r2
    80c2:	b2da      	uxtb	r2, r3
    80c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80cc:	701a      	strb	r2, [r3, #0]
    80ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d6:	781a      	ldrb	r2, [r3, #0]
    80d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e0:	781b      	ldrb	r3, [r3, #0]
    80e2:	4413      	add	r3, r2
    80e4:	b2da      	uxtb	r2, r3
    80e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ee:	701a      	strb	r2, [r3, #0]
    80f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    80f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f8:	781b      	ldrb	r3, [r3, #0]
    80fa:	3301      	adds	r3, #1
    80fc:	b2da      	uxtb	r2, r3
    80fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8106:	701a      	strb	r2, [r3, #0]
    8108:	f24c 5349 	movw	r3, #50505	; 0xc549
    810c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	2bff      	cmp	r3, #255	; 0xff
    8114:	d105      	bne.n	8122 <send_boot+0xb36>
    8116:	f24c 5349 	movw	r3, #50505	; 0xc549
    811a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    811e:	2200      	movs	r2, #0
    8120:	701a      	strb	r2, [r3, #0]
    8122:	f24c 5349 	movw	r3, #50505	; 0xc549
    8126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	461a      	mov	r2, r3
    812e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    8132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8136:	78d9      	ldrb	r1, [r3, #3]
    8138:	f24c 534c 	movw	r3, #50508	; 0xc54c
    813c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8140:	5499      	strb	r1, [r3, r2]
    8142:	4b45      	ldr	r3, [pc, #276]	; (8258 <send_boot+0xc6c>)
    8144:	781a      	ldrb	r2, [r3, #0]
    8146:	f24c 634d 	movw	r3, #50765	; 0xc64d
    814a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    814e:	781b      	ldrb	r3, [r3, #0]
    8150:	4413      	add	r3, r2
    8152:	b2da      	uxtb	r2, r3
    8154:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815c:	701a      	strb	r2, [r3, #0]
    815e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8166:	781a      	ldrb	r2, [r3, #0]
    8168:	f24c 634d 	movw	r3, #50765	; 0xc64d
    816c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8170:	781b      	ldrb	r3, [r3, #0]
    8172:	4413      	add	r3, r2
    8174:	b2da      	uxtb	r2, r3
    8176:	f24c 634e 	movw	r3, #50766	; 0xc64e
    817a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817e:	701a      	strb	r2, [r3, #0]
    8180:	f24c 5349 	movw	r3, #50505	; 0xc549
    8184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	3301      	adds	r3, #1
    818c:	b2da      	uxtb	r2, r3
    818e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8196:	701a      	strb	r2, [r3, #0]
    8198:	f24c 5349 	movw	r3, #50505	; 0xc549
    819c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	2bff      	cmp	r3, #255	; 0xff
    81a4:	d105      	bne.n	81b2 <send_boot+0xbc6>
    81a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    81aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ae:	2200      	movs	r2, #0
    81b0:	701a      	strb	r2, [r3, #0]
    81b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    81b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	461a      	mov	r2, r3
    81be:	f240 5342 	movw	r3, #1346	; 0x542
    81c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c6:	7819      	ldrb	r1, [r3, #0]
    81c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    81cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d0:	5499      	strb	r1, [r3, r2]
    81d2:	f240 5342 	movw	r3, #1346	; 0x542
    81d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81da:	781a      	ldrb	r2, [r3, #0]
    81dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e4:	781b      	ldrb	r3, [r3, #0]
    81e6:	4413      	add	r3, r2
    81e8:	b2da      	uxtb	r2, r3
    81ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f2:	701a      	strb	r2, [r3, #0]
    81f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fc:	781a      	ldrb	r2, [r3, #0]
    81fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	4413      	add	r3, r2
    820a:	b2da      	uxtb	r2, r3
    820c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8214:	701a      	strb	r2, [r3, #0]
    8216:	f24c 5349 	movw	r3, #50505	; 0xc549
    821a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821e:	781b      	ldrb	r3, [r3, #0]
    8220:	3301      	adds	r3, #1
    8222:	b2da      	uxtb	r2, r3
    8224:	f24c 5349 	movw	r3, #50505	; 0xc549
    8228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822c:	701a      	strb	r2, [r3, #0]
    822e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8236:	781b      	ldrb	r3, [r3, #0]
    8238:	2bff      	cmp	r3, #255	; 0xff
    823a:	d10f      	bne.n	825c <send_boot+0xc70>
    823c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8244:	2200      	movs	r2, #0
    8246:	701a      	strb	r2, [r3, #0]
    8248:	e008      	b.n	825c <send_boot+0xc70>
    824a:	bf00      	nop
    824c:	2004cb47 	.word	0x2004cb47
    8250:	2004cb3d 	.word	0x2004cb3d
    8254:	2004cb3e 	.word	0x2004cb3e
    8258:	2004cb3f 	.word	0x2004cb3f
    825c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8264:	781b      	ldrb	r3, [r3, #0]
    8266:	461a      	mov	r2, r3
    8268:	f240 5342 	movw	r3, #1346	; 0x542
    826c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8270:	7859      	ldrb	r1, [r3, #1]
    8272:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827a:	5499      	strb	r1, [r3, r2]
    827c:	4bc5      	ldr	r3, [pc, #788]	; (8594 <send_boot+0xfa8>)
    827e:	781a      	ldrb	r2, [r3, #0]
    8280:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	4413      	add	r3, r2
    828c:	b2da      	uxtb	r2, r3
    828e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8296:	701a      	strb	r2, [r3, #0]
    8298:	f24c 634e 	movw	r3, #50766	; 0xc64e
    829c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a0:	781a      	ldrb	r2, [r3, #0]
    82a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82aa:	781b      	ldrb	r3, [r3, #0]
    82ac:	4413      	add	r3, r2
    82ae:	b2da      	uxtb	r2, r3
    82b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	3301      	adds	r3, #1
    82c6:	b2da      	uxtb	r2, r3
    82c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d0:	701a      	strb	r2, [r3, #0]
    82d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    82d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82da:	781b      	ldrb	r3, [r3, #0]
    82dc:	2bff      	cmp	r3, #255	; 0xff
    82de:	d105      	bne.n	82ec <send_boot+0xd00>
    82e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e8:	2200      	movs	r2, #0
    82ea:	701a      	strb	r2, [r3, #0]
    82ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    82f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	461a      	mov	r2, r3
    82f8:	f240 5344 	movw	r3, #1348	; 0x544
    82fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8300:	7819      	ldrb	r1, [r3, #0]
    8302:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830a:	5499      	strb	r1, [r3, r2]
    830c:	f240 5344 	movw	r3, #1348	; 0x544
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	781a      	ldrb	r2, [r3, #0]
    8316:	f24c 634d 	movw	r3, #50765	; 0xc64d
    831a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	4413      	add	r3, r2
    8322:	b2da      	uxtb	r2, r3
    8324:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832c:	701a      	strb	r2, [r3, #0]
    832e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8336:	781a      	ldrb	r2, [r3, #0]
    8338:	f24c 634d 	movw	r3, #50765	; 0xc64d
    833c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	4413      	add	r3, r2
    8344:	b2da      	uxtb	r2, r3
    8346:	f24c 634e 	movw	r3, #50766	; 0xc64e
    834a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834e:	701a      	strb	r2, [r3, #0]
    8350:	f24c 5349 	movw	r3, #50505	; 0xc549
    8354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	3301      	adds	r3, #1
    835c:	b2da      	uxtb	r2, r3
    835e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8366:	701a      	strb	r2, [r3, #0]
    8368:	f24c 5349 	movw	r3, #50505	; 0xc549
    836c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	2bff      	cmp	r3, #255	; 0xff
    8374:	d105      	bne.n	8382 <send_boot+0xd96>
    8376:	f24c 5349 	movw	r3, #50505	; 0xc549
    837a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837e:	2200      	movs	r2, #0
    8380:	701a      	strb	r2, [r3, #0]
    8382:	f24c 5349 	movw	r3, #50505	; 0xc549
    8386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838a:	781b      	ldrb	r3, [r3, #0]
    838c:	461a      	mov	r2, r3
    838e:	f240 5344 	movw	r3, #1348	; 0x544
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	7859      	ldrb	r1, [r3, #1]
    8398:	f24c 534c 	movw	r3, #50508	; 0xc54c
    839c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a0:	5499      	strb	r1, [r3, r2]
    83a2:	4b7d      	ldr	r3, [pc, #500]	; (8598 <send_boot+0xfac>)
    83a4:	781a      	ldrb	r2, [r3, #0]
    83a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ae:	781b      	ldrb	r3, [r3, #0]
    83b0:	4413      	add	r3, r2
    83b2:	b2da      	uxtb	r2, r3
    83b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83bc:	701a      	strb	r2, [r3, #0]
    83be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    83c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c6:	781a      	ldrb	r2, [r3, #0]
    83c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	4413      	add	r3, r2
    83d4:	b2da      	uxtb	r2, r3
    83d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    83da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83de:	701a      	strb	r2, [r3, #0]
    83e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    83e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	3301      	adds	r3, #1
    83ec:	b2da      	uxtb	r2, r3
    83ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    83f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f6:	701a      	strb	r2, [r3, #0]
    83f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    83fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8400:	781b      	ldrb	r3, [r3, #0]
    8402:	2bff      	cmp	r3, #255	; 0xff
    8404:	d105      	bne.n	8412 <send_boot+0xe26>
    8406:	f24c 5349 	movw	r3, #50505	; 0xc549
    840a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    840e:	2200      	movs	r2, #0
    8410:	701a      	strb	r2, [r3, #0]
    8412:	f24c 5349 	movw	r3, #50505	; 0xc549
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	461a      	mov	r2, r3
    841e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8426:	7819      	ldrb	r1, [r3, #0]
    8428:	f24c 534c 	movw	r3, #50508	; 0xc54c
    842c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8430:	5499      	strb	r1, [r3, r2]
    8432:	f24c 5349 	movw	r3, #50505	; 0xc549
    8436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	3301      	adds	r3, #1
    843e:	b2da      	uxtb	r2, r3
    8440:	f24c 5349 	movw	r3, #50505	; 0xc549
    8444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8448:	701a      	strb	r2, [r3, #0]
    844a:	f24c 5349 	movw	r3, #50505	; 0xc549
    844e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8452:	781b      	ldrb	r3, [r3, #0]
    8454:	2bff      	cmp	r3, #255	; 0xff
    8456:	d105      	bne.n	8464 <send_boot+0xe78>
    8458:	f24c 5349 	movw	r3, #50505	; 0xc549
    845c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8460:	2200      	movs	r2, #0
    8462:	701a      	strb	r2, [r3, #0]
    8464:	f24c 5349 	movw	r3, #50505	; 0xc549
    8468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	461a      	mov	r2, r3
    8470:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8478:	7819      	ldrb	r1, [r3, #0]
    847a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    847e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8482:	5499      	strb	r1, [r3, r2]
    8484:	f24c 5349 	movw	r3, #50505	; 0xc549
    8488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	3301      	adds	r3, #1
    8490:	b2da      	uxtb	r2, r3
    8492:	f24c 5349 	movw	r3, #50505	; 0xc549
    8496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849a:	701a      	strb	r2, [r3, #0]
    849c:	f24c 5349 	movw	r3, #50505	; 0xc549
    84a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	2bff      	cmp	r3, #255	; 0xff
    84a8:	d105      	bne.n	84b6 <send_boot+0xeca>
    84aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	2200      	movs	r2, #0
    84b4:	701a      	strb	r2, [r3, #0]
    84b6:	f242 0339 	movw	r3, #8249	; 0x2039
    84ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84be:	781b      	ldrb	r3, [r3, #0]
    84c0:	b2db      	uxtb	r3, r3
    84c2:	f003 0310 	and.w	r3, r3, #16
    84c6:	2b00      	cmp	r3, #0
    84c8:	d15a      	bne.n	8580 <send_boot+0xf94>
    84ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	b2db      	uxtb	r3, r3
    84d6:	461a      	mov	r2, r3
    84d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    84dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e0:	5c9a      	ldrb	r2, [r3, r2]
    84e2:	f24c 634b 	movw	r3, #50763	; 0xc64b
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	701a      	strb	r2, [r3, #0]
    84ec:	f24c 634c 	movw	r3, #50764	; 0xc64c
    84f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f4:	2200      	movs	r2, #0
    84f6:	701a      	strb	r2, [r3, #0]
    84f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8500:	781b      	ldrb	r3, [r3, #0]
    8502:	b2db      	uxtb	r3, r3
    8504:	3301      	adds	r3, #1
    8506:	b2da      	uxtb	r2, r3
    8508:	f24c 534a 	movw	r3, #50506	; 0xc54a
    850c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8510:	701a      	strb	r2, [r3, #0]
    8512:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	b2db      	uxtb	r3, r3
    851e:	2bff      	cmp	r3, #255	; 0xff
    8520:	d105      	bne.n	852e <send_boot+0xf42>
    8522:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852a:	2200      	movs	r2, #0
    852c:	701a      	strb	r2, [r3, #0]
    852e:	f242 0338 	movw	r3, #8248	; 0x2038
    8532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8536:	f242 0238 	movw	r2, #8248	; 0x2038
    853a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    853e:	7812      	ldrb	r2, [r2, #0]
    8540:	b2d2      	uxtb	r2, r2
    8542:	f042 0201 	orr.w	r2, r2, #1
    8546:	b2d2      	uxtb	r2, r2
    8548:	701a      	strb	r2, [r3, #0]
    854a:	f242 0339 	movw	r3, #8249	; 0x2039
    854e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8552:	f242 0239 	movw	r2, #8249	; 0x2039
    8556:	f2c2 0200 	movt	r2, #8192	; 0x2000
    855a:	7812      	ldrb	r2, [r2, #0]
    855c:	b2d2      	uxtb	r2, r2
    855e:	f042 0210 	orr.w	r2, r2, #16
    8562:	b2d2      	uxtb	r2, r2
    8564:	701a      	strb	r2, [r3, #0]
    8566:	e00b      	b.n	8580 <send_boot+0xf94>
    8568:	f24c 5348 	movw	r3, #50504	; 0xc548
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	3301      	adds	r3, #1
    8574:	b2da      	uxtb	r2, r3
    8576:	f24c 5348 	movw	r3, #50504	; 0xc548
    857a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8580:	f240 533d 	movw	r3, #1341	; 0x53d
    8584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8588:	2200      	movs	r2, #0
    858a:	701a      	strb	r2, [r3, #0]
  }
}
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr
    8594:	20000543 	.word	0x20000543
    8598:	20000545 	.word	0x20000545

0000859c <send_attitude>:
void send_attitude(void){ //499ms
    859c:	b480      	push	{r7}
    859e:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    85a0:	f240 533d 	movw	r3, #1341	; 0x53d
    85a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a8:	781b      	ldrb	r3, [r3, #0]
    85aa:	2b00      	cmp	r3, #0
    85ac:	f040 84ee 	bne.w	8f8c <send_attitude+0x9f0>
  {
    count++;
    85b0:	f24c 5341 	movw	r3, #50497	; 0xc541
    85b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	3301      	adds	r3, #1
    85bc:	b2da      	uxtb	r2, r3
    85be:	f24c 5341 	movw	r3, #50497	; 0xc541
    85c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c6:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    85c8:	f24c 5341 	movw	r3, #50497	; 0xc541
    85cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d0:	781b      	ldrb	r3, [r3, #0]
    85d2:	2bfa      	cmp	r3, #250	; 0xfa
    85d4:	d105      	bne.n	85e2 <send_attitude+0x46>
    85d6:	f24c 5341 	movw	r3, #50497	; 0xc541
    85da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85de:	2200      	movs	r2, #0
    85e0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    85e2:	f24c 5341 	movw	r3, #50497	; 0xc541
    85e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ea:	781a      	ldrb	r2, [r3, #0]
    85ec:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    85f0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    85f4:	fba3 1302 	umull	r1, r3, r3, r2
    85f8:	0899      	lsrs	r1, r3, #2
    85fa:	460b      	mov	r3, r1
    85fc:	009b      	lsls	r3, r3, #2
    85fe:	440b      	add	r3, r1
    8600:	1ad3      	subs	r3, r2, r3
    8602:	b2db      	uxtb	r3, r3
    8604:	2b00      	cmp	r3, #0
    8606:	f040 84c1 	bne.w	8f8c <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    860a:	f24c 5349 	movw	r3, #50505	; 0xc549
    860e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8612:	781a      	ldrb	r2, [r3, #0]
    8614:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861c:	781b      	ldrb	r3, [r3, #0]
    861e:	b2db      	uxtb	r3, r3
    8620:	429a      	cmp	r2, r3
    8622:	d313      	bcc.n	864c <send_attitude+0xb0>
    8624:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	781b      	ldrb	r3, [r3, #0]
    862e:	b2db      	uxtb	r3, r3
    8630:	461a      	mov	r2, r3
    8632:	f24c 5349 	movw	r3, #50505	; 0xc549
    8636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863a:	781b      	ldrb	r3, [r3, #0]
    863c:	1ad3      	subs	r3, r2, r3
    863e:	33ff      	adds	r3, #255	; 0xff
    8640:	2b10      	cmp	r3, #16
    8642:	bfd4      	ite	le
    8644:	2300      	movle	r3, #0
    8646:	2301      	movgt	r3, #1
    8648:	b2db      	uxtb	r3, r3
    864a:	e011      	b.n	8670 <send_attitude+0xd4>
    864c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	b2db      	uxtb	r3, r3
    8658:	461a      	mov	r2, r3
    865a:	f24c 5349 	movw	r3, #50505	; 0xc549
    865e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	1ad3      	subs	r3, r2, r3
    8666:	2b10      	cmp	r3, #16
    8668:	bfd4      	ite	le
    866a:	2300      	movle	r3, #0
    866c:	2301      	movgt	r3, #1
    866e:	b2db      	uxtb	r3, r3
    8670:	2b00      	cmp	r3, #0
    8672:	f000 847f 	beq.w	8f74 <send_attitude+0x9d8>
    8676:	f24c 5349 	movw	r3, #50505	; 0xc549
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	461a      	mov	r2, r3
    8682:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868a:	2105      	movs	r1, #5
    868c:	5499      	strb	r1, [r3, r2]
    868e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8696:	781b      	ldrb	r3, [r3, #0]
    8698:	3301      	adds	r3, #1
    869a:	b2da      	uxtb	r2, r3
    869c:	f24c 5349 	movw	r3, #50505	; 0xc549
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	701a      	strb	r2, [r3, #0]
    86a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	2bff      	cmp	r3, #255	; 0xff
    86b2:	d105      	bne.n	86c0 <send_attitude+0x124>
    86b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    86b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86bc:	2200      	movs	r2, #0
    86be:	701a      	strb	r2, [r3, #0]
    86c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    86c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c8:	781b      	ldrb	r3, [r3, #0]
    86ca:	461a      	mov	r2, r3
    86cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    86d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d4:	2106      	movs	r1, #6
    86d6:	5499      	strb	r1, [r3, r2]
    86d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    86dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e0:	781b      	ldrb	r3, [r3, #0]
    86e2:	3301      	adds	r3, #1
    86e4:	b2da      	uxtb	r2, r3
    86e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    86f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	2bff      	cmp	r3, #255	; 0xff
    86fc:	d105      	bne.n	870a <send_attitude+0x16e>
    86fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	2200      	movs	r2, #0
    8708:	701a      	strb	r2, [r3, #0]
    870a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    870e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8712:	2206      	movs	r2, #6
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f24c 634e 	movw	r3, #50766	; 0xc64e
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	2206      	movs	r2, #6
    8720:	701a      	strb	r2, [r3, #0]
    8722:	f24c 5349 	movw	r3, #50505	; 0xc549
    8726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872a:	781b      	ldrb	r3, [r3, #0]
    872c:	461a      	mov	r2, r3
    872e:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8736:	7819      	ldrb	r1, [r3, #0]
    8738:	f24c 534c 	movw	r3, #50508	; 0xc54c
    873c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8740:	5499      	strb	r1, [r3, r2]
    8742:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874a:	781a      	ldrb	r2, [r3, #0]
    874c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	4413      	add	r3, r2
    8758:	b2da      	uxtb	r2, r3
    875a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    875e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8762:	701a      	strb	r2, [r3, #0]
    8764:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876c:	781a      	ldrb	r2, [r3, #0]
    876e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8776:	781b      	ldrb	r3, [r3, #0]
    8778:	4413      	add	r3, r2
    877a:	b2da      	uxtb	r2, r3
    877c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8784:	701a      	strb	r2, [r3, #0]
    8786:	f24c 5349 	movw	r3, #50505	; 0xc549
    878a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	3301      	adds	r3, #1
    8792:	b2da      	uxtb	r2, r3
    8794:	f24c 5349 	movw	r3, #50505	; 0xc549
    8798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879c:	701a      	strb	r2, [r3, #0]
    879e:	f24c 5349 	movw	r3, #50505	; 0xc549
    87a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	2bff      	cmp	r3, #255	; 0xff
    87aa:	d105      	bne.n	87b8 <send_attitude+0x21c>
    87ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    87b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b4:	2200      	movs	r2, #0
    87b6:	701a      	strb	r2, [r3, #0]
    87b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    87bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	461a      	mov	r2, r3
    87c4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87cc:	7859      	ldrb	r1, [r3, #1]
    87ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d6:	5499      	strb	r1, [r3, r2]
    87d8:	4bd1      	ldr	r3, [pc, #836]	; (8b20 <send_attitude+0x584>)
    87da:	781a      	ldrb	r2, [r3, #0]
    87dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	4413      	add	r3, r2
    87e8:	b2da      	uxtb	r2, r3
    87ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f2:	701a      	strb	r2, [r3, #0]
    87f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fc:	781a      	ldrb	r2, [r3, #0]
    87fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	4413      	add	r3, r2
    880a:	b2da      	uxtb	r2, r3
    880c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8814:	701a      	strb	r2, [r3, #0]
    8816:	f24c 5349 	movw	r3, #50505	; 0xc549
    881a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	3301      	adds	r3, #1
    8822:	b2da      	uxtb	r2, r3
    8824:	f24c 5349 	movw	r3, #50505	; 0xc549
    8828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882c:	701a      	strb	r2, [r3, #0]
    882e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	2bff      	cmp	r3, #255	; 0xff
    883a:	d105      	bne.n	8848 <send_attitude+0x2ac>
    883c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8844:	2200      	movs	r2, #0
    8846:	701a      	strb	r2, [r3, #0]
    8848:	f24c 5349 	movw	r3, #50505	; 0xc549
    884c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8850:	781b      	ldrb	r3, [r3, #0]
    8852:	461a      	mov	r2, r3
    8854:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885c:	7899      	ldrb	r1, [r3, #2]
    885e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8866:	5499      	strb	r1, [r3, r2]
    8868:	4bae      	ldr	r3, [pc, #696]	; (8b24 <send_attitude+0x588>)
    886a:	781a      	ldrb	r2, [r3, #0]
    886c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	4413      	add	r3, r2
    8878:	b2da      	uxtb	r2, r3
    887a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    887e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8882:	701a      	strb	r2, [r3, #0]
    8884:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888c:	781a      	ldrb	r2, [r3, #0]
    888e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8896:	781b      	ldrb	r3, [r3, #0]
    8898:	4413      	add	r3, r2
    889a:	b2da      	uxtb	r2, r3
    889c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a4:	701a      	strb	r2, [r3, #0]
    88a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    88aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	3301      	adds	r3, #1
    88b2:	b2da      	uxtb	r2, r3
    88b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88bc:	701a      	strb	r2, [r3, #0]
    88be:	f24c 5349 	movw	r3, #50505	; 0xc549
    88c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	2bff      	cmp	r3, #255	; 0xff
    88ca:	d105      	bne.n	88d8 <send_attitude+0x33c>
    88cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	2200      	movs	r2, #0
    88d6:	701a      	strb	r2, [r3, #0]
    88d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    88dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e0:	781b      	ldrb	r3, [r3, #0]
    88e2:	461a      	mov	r2, r3
    88e4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    88e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ec:	78d9      	ldrb	r1, [r3, #3]
    88ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    88f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f6:	5499      	strb	r1, [r3, r2]
    88f8:	4b8b      	ldr	r3, [pc, #556]	; (8b28 <send_attitude+0x58c>)
    88fa:	781a      	ldrb	r2, [r3, #0]
    88fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	4413      	add	r3, r2
    8908:	b2da      	uxtb	r2, r3
    890a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	701a      	strb	r2, [r3, #0]
    8914:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891c:	781a      	ldrb	r2, [r3, #0]
    891e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8926:	781b      	ldrb	r3, [r3, #0]
    8928:	4413      	add	r3, r2
    892a:	b2da      	uxtb	r2, r3
    892c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8934:	701a      	strb	r2, [r3, #0]
    8936:	f24c 5349 	movw	r3, #50505	; 0xc549
    893a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	3301      	adds	r3, #1
    8942:	b2da      	uxtb	r2, r3
    8944:	f24c 5349 	movw	r3, #50505	; 0xc549
    8948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894c:	701a      	strb	r2, [r3, #0]
    894e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	2bff      	cmp	r3, #255	; 0xff
    895a:	d105      	bne.n	8968 <send_attitude+0x3cc>
    895c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	2200      	movs	r2, #0
    8966:	701a      	strb	r2, [r3, #0]
    8968:	f24c 5349 	movw	r3, #50505	; 0xc549
    896c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8970:	781b      	ldrb	r3, [r3, #0]
    8972:	461a      	mov	r2, r3
    8974:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897c:	7819      	ldrb	r1, [r3, #0]
    897e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8986:	5499      	strb	r1, [r3, r2]
    8988:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    898c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8990:	781a      	ldrb	r2, [r3, #0]
    8992:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899a:	781b      	ldrb	r3, [r3, #0]
    899c:	4413      	add	r3, r2
    899e:	b2da      	uxtb	r2, r3
    89a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a8:	701a      	strb	r2, [r3, #0]
    89aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b2:	781a      	ldrb	r2, [r3, #0]
    89b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89bc:	781b      	ldrb	r3, [r3, #0]
    89be:	4413      	add	r3, r2
    89c0:	b2da      	uxtb	r2, r3
    89c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ca:	701a      	strb	r2, [r3, #0]
    89cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    89d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d4:	781b      	ldrb	r3, [r3, #0]
    89d6:	3301      	adds	r3, #1
    89d8:	b2da      	uxtb	r2, r3
    89da:	f24c 5349 	movw	r3, #50505	; 0xc549
    89de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e2:	701a      	strb	r2, [r3, #0]
    89e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ec:	781b      	ldrb	r3, [r3, #0]
    89ee:	2bff      	cmp	r3, #255	; 0xff
    89f0:	d105      	bne.n	89fe <send_attitude+0x462>
    89f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    89f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fa:	2200      	movs	r2, #0
    89fc:	701a      	strb	r2, [r3, #0]
    89fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a06:	781b      	ldrb	r3, [r3, #0]
    8a08:	461a      	mov	r2, r3
    8a0a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a12:	7859      	ldrb	r1, [r3, #1]
    8a14:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1c:	5499      	strb	r1, [r3, r2]
    8a1e:	4b43      	ldr	r3, [pc, #268]	; (8b2c <send_attitude+0x590>)
    8a20:	781a      	ldrb	r2, [r3, #0]
    8a22:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	4413      	add	r3, r2
    8a2e:	b2da      	uxtb	r2, r3
    8a30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a38:	701a      	strb	r2, [r3, #0]
    8a3a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	781a      	ldrb	r2, [r3, #0]
    8a44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4c:	781b      	ldrb	r3, [r3, #0]
    8a4e:	4413      	add	r3, r2
    8a50:	b2da      	uxtb	r2, r3
    8a52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5a:	701a      	strb	r2, [r3, #0]
    8a5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	3301      	adds	r3, #1
    8a68:	b2da      	uxtb	r2, r3
    8a6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a72:	701a      	strb	r2, [r3, #0]
    8a74:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7c:	781b      	ldrb	r3, [r3, #0]
    8a7e:	2bff      	cmp	r3, #255	; 0xff
    8a80:	d105      	bne.n	8a8e <send_attitude+0x4f2>
    8a82:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8a:	2200      	movs	r2, #0
    8a8c:	701a      	strb	r2, [r3, #0]
    8a8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	461a      	mov	r2, r3
    8a9a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa2:	7899      	ldrb	r1, [r3, #2]
    8aa4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aac:	5499      	strb	r1, [r3, r2]
    8aae:	4b20      	ldr	r3, [pc, #128]	; (8b30 <send_attitude+0x594>)
    8ab0:	781a      	ldrb	r2, [r3, #0]
    8ab2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	4413      	add	r3, r2
    8abe:	b2da      	uxtb	r2, r3
    8ac0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac8:	701a      	strb	r2, [r3, #0]
    8aca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad2:	781a      	ldrb	r2, [r3, #0]
    8ad4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8adc:	781b      	ldrb	r3, [r3, #0]
    8ade:	4413      	add	r3, r2
    8ae0:	b2da      	uxtb	r2, r3
    8ae2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aea:	701a      	strb	r2, [r3, #0]
    8aec:	f24c 5349 	movw	r3, #50505	; 0xc549
    8af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	3301      	adds	r3, #1
    8af8:	b2da      	uxtb	r2, r3
    8afa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b02:	701a      	strb	r2, [r3, #0]
    8b04:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	2bff      	cmp	r3, #255	; 0xff
    8b10:	d110      	bne.n	8b34 <send_attitude+0x598>
    8b12:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b1a:	2200      	movs	r2, #0
    8b1c:	701a      	strb	r2, [r3, #0]
    8b1e:	e009      	b.n	8b34 <send_attitude+0x598>
    8b20:	2004cb09 	.word	0x2004cb09
    8b24:	2004cb0a 	.word	0x2004cb0a
    8b28:	2004cb0b 	.word	0x2004cb0b
    8b2c:	2004cb0d 	.word	0x2004cb0d
    8b30:	2004cb0e 	.word	0x2004cb0e
    8b34:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3c:	781b      	ldrb	r3, [r3, #0]
    8b3e:	461a      	mov	r2, r3
    8b40:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b48:	78d9      	ldrb	r1, [r3, #3]
    8b4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b52:	5499      	strb	r1, [r3, r2]
    8b54:	4bc2      	ldr	r3, [pc, #776]	; (8e60 <send_attitude+0x8c4>)
    8b56:	781a      	ldrb	r2, [r3, #0]
    8b58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	4413      	add	r3, r2
    8b64:	b2da      	uxtb	r2, r3
    8b66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b78:	781a      	ldrb	r2, [r3, #0]
    8b7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b82:	781b      	ldrb	r3, [r3, #0]
    8b84:	4413      	add	r3, r2
    8b86:	b2da      	uxtb	r2, r3
    8b88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	701a      	strb	r2, [r3, #0]
    8b92:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	3301      	adds	r3, #1
    8b9e:	b2da      	uxtb	r2, r3
    8ba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	701a      	strb	r2, [r3, #0]
    8baa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	2bff      	cmp	r3, #255	; 0xff
    8bb6:	d105      	bne.n	8bc4 <send_attitude+0x628>
    8bb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	2200      	movs	r2, #0
    8bc2:	701a      	strb	r2, [r3, #0]
    8bc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	461a      	mov	r2, r3
    8bd0:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd8:	7819      	ldrb	r1, [r3, #0]
    8bda:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be2:	5499      	strb	r1, [r3, r2]
    8be4:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bec:	781a      	ldrb	r2, [r3, #0]
    8bee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf6:	781b      	ldrb	r3, [r3, #0]
    8bf8:	4413      	add	r3, r2
    8bfa:	b2da      	uxtb	r2, r3
    8bfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c04:	701a      	strb	r2, [r3, #0]
    8c06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0e:	781a      	ldrb	r2, [r3, #0]
    8c10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	4413      	add	r3, r2
    8c1c:	b2da      	uxtb	r2, r3
    8c1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c26:	701a      	strb	r2, [r3, #0]
    8c28:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	3301      	adds	r3, #1
    8c34:	b2da      	uxtb	r2, r3
    8c36:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3e:	701a      	strb	r2, [r3, #0]
    8c40:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2bff      	cmp	r3, #255	; 0xff
    8c4c:	d105      	bne.n	8c5a <send_attitude+0x6be>
    8c4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c56:	2200      	movs	r2, #0
    8c58:	701a      	strb	r2, [r3, #0]
    8c5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c62:	781b      	ldrb	r3, [r3, #0]
    8c64:	461a      	mov	r2, r3
    8c66:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6e:	7859      	ldrb	r1, [r3, #1]
    8c70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c78:	5499      	strb	r1, [r3, r2]
    8c7a:	4b7a      	ldr	r3, [pc, #488]	; (8e64 <send_attitude+0x8c8>)
    8c7c:	781a      	ldrb	r2, [r3, #0]
    8c7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c86:	781b      	ldrb	r3, [r3, #0]
    8c88:	4413      	add	r3, r2
    8c8a:	b2da      	uxtb	r2, r3
    8c8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c94:	701a      	strb	r2, [r3, #0]
    8c96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9e:	781a      	ldrb	r2, [r3, #0]
    8ca0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca8:	781b      	ldrb	r3, [r3, #0]
    8caa:	4413      	add	r3, r2
    8cac:	b2da      	uxtb	r2, r3
    8cae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb6:	701a      	strb	r2, [r3, #0]
    8cb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc0:	781b      	ldrb	r3, [r3, #0]
    8cc2:	3301      	adds	r3, #1
    8cc4:	b2da      	uxtb	r2, r3
    8cc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cce:	701a      	strb	r2, [r3, #0]
    8cd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	2bff      	cmp	r3, #255	; 0xff
    8cdc:	d105      	bne.n	8cea <send_attitude+0x74e>
    8cde:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce6:	2200      	movs	r2, #0
    8ce8:	701a      	strb	r2, [r3, #0]
    8cea:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	461a      	mov	r2, r3
    8cf6:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	7899      	ldrb	r1, [r3, #2]
    8d00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d08:	5499      	strb	r1, [r3, r2]
    8d0a:	4b57      	ldr	r3, [pc, #348]	; (8e68 <send_attitude+0x8cc>)
    8d0c:	781a      	ldrb	r2, [r3, #0]
    8d0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	781b      	ldrb	r3, [r3, #0]
    8d18:	4413      	add	r3, r2
    8d1a:	b2da      	uxtb	r2, r3
    8d1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d24:	701a      	strb	r2, [r3, #0]
    8d26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2e:	781a      	ldrb	r2, [r3, #0]
    8d30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d38:	781b      	ldrb	r3, [r3, #0]
    8d3a:	4413      	add	r3, r2
    8d3c:	b2da      	uxtb	r2, r3
    8d3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d46:	701a      	strb	r2, [r3, #0]
    8d48:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d50:	781b      	ldrb	r3, [r3, #0]
    8d52:	3301      	adds	r3, #1
    8d54:	b2da      	uxtb	r2, r3
    8d56:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5e:	701a      	strb	r2, [r3, #0]
    8d60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	2bff      	cmp	r3, #255	; 0xff
    8d6c:	d105      	bne.n	8d7a <send_attitude+0x7de>
    8d6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d76:	2200      	movs	r2, #0
    8d78:	701a      	strb	r2, [r3, #0]
    8d7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	461a      	mov	r2, r3
    8d86:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	78d9      	ldrb	r1, [r3, #3]
    8d90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d98:	5499      	strb	r1, [r3, r2]
    8d9a:	4b34      	ldr	r3, [pc, #208]	; (8e6c <send_attitude+0x8d0>)
    8d9c:	781a      	ldrb	r2, [r3, #0]
    8d9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	4413      	add	r3, r2
    8daa:	b2da      	uxtb	r2, r3
    8dac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db4:	701a      	strb	r2, [r3, #0]
    8db6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbe:	781a      	ldrb	r2, [r3, #0]
    8dc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	4413      	add	r3, r2
    8dcc:	b2da      	uxtb	r2, r3
    8dce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd6:	701a      	strb	r2, [r3, #0]
    8dd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	3301      	adds	r3, #1
    8de4:	b2da      	uxtb	r2, r3
    8de6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dee:	701a      	strb	r2, [r3, #0]
    8df0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df8:	781b      	ldrb	r3, [r3, #0]
    8dfa:	2bff      	cmp	r3, #255	; 0xff
    8dfc:	d105      	bne.n	8e0a <send_attitude+0x86e>
    8dfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	2200      	movs	r2, #0
    8e08:	701a      	strb	r2, [r3, #0]
    8e0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	461a      	mov	r2, r3
    8e16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1e:	7819      	ldrb	r1, [r3, #0]
    8e20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e28:	5499      	strb	r1, [r3, r2]
    8e2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e32:	781b      	ldrb	r3, [r3, #0]
    8e34:	3301      	adds	r3, #1
    8e36:	b2da      	uxtb	r2, r3
    8e38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e40:	701a      	strb	r2, [r3, #0]
    8e42:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4a:	781b      	ldrb	r3, [r3, #0]
    8e4c:	2bff      	cmp	r3, #255	; 0xff
    8e4e:	d10f      	bne.n	8e70 <send_attitude+0x8d4>
    8e50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e58:	2200      	movs	r2, #0
    8e5a:	701a      	strb	r2, [r3, #0]
    8e5c:	e008      	b.n	8e70 <send_attitude+0x8d4>
    8e5e:	bf00      	nop
    8e60:	2004cb0f 	.word	0x2004cb0f
    8e64:	2004cb11 	.word	0x2004cb11
    8e68:	2004cb12 	.word	0x2004cb12
    8e6c:	2004cb13 	.word	0x2004cb13
    8e70:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e78:	781b      	ldrb	r3, [r3, #0]
    8e7a:	461a      	mov	r2, r3
    8e7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e84:	7819      	ldrb	r1, [r3, #0]
    8e86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8e:	5499      	strb	r1, [r3, r2]
    8e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	781b      	ldrb	r3, [r3, #0]
    8e9a:	3301      	adds	r3, #1
    8e9c:	b2da      	uxtb	r2, r3
    8e9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea6:	701a      	strb	r2, [r3, #0]
    8ea8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	2bff      	cmp	r3, #255	; 0xff
    8eb4:	d105      	bne.n	8ec2 <send_attitude+0x926>
    8eb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ebe:	2200      	movs	r2, #0
    8ec0:	701a      	strb	r2, [r3, #0]
    8ec2:	f242 0339 	movw	r3, #8249	; 0x2039
    8ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eca:	781b      	ldrb	r3, [r3, #0]
    8ecc:	b2db      	uxtb	r3, r3
    8ece:	f003 0310 	and.w	r3, r3, #16
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d15a      	bne.n	8f8c <send_attitude+0x9f0>
    8ed6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ede:	781b      	ldrb	r3, [r3, #0]
    8ee0:	b2db      	uxtb	r3, r3
    8ee2:	461a      	mov	r2, r3
    8ee4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eec:	5c9a      	ldrb	r2, [r3, r2]
    8eee:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef6:	701a      	strb	r2, [r3, #0]
    8ef8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f00:	2200      	movs	r2, #0
    8f02:	701a      	strb	r2, [r3, #0]
    8f04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f0c:	781b      	ldrb	r3, [r3, #0]
    8f0e:	b2db      	uxtb	r3, r3
    8f10:	3301      	adds	r3, #1
    8f12:	b2da      	uxtb	r2, r3
    8f14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	701a      	strb	r2, [r3, #0]
    8f1e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	b2db      	uxtb	r3, r3
    8f2a:	2bff      	cmp	r3, #255	; 0xff
    8f2c:	d105      	bne.n	8f3a <send_attitude+0x99e>
    8f2e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f36:	2200      	movs	r2, #0
    8f38:	701a      	strb	r2, [r3, #0]
    8f3a:	f242 0338 	movw	r3, #8248	; 0x2038
    8f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f42:	f242 0238 	movw	r2, #8248	; 0x2038
    8f46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f4a:	7812      	ldrb	r2, [r2, #0]
    8f4c:	b2d2      	uxtb	r2, r2
    8f4e:	f042 0201 	orr.w	r2, r2, #1
    8f52:	b2d2      	uxtb	r2, r2
    8f54:	701a      	strb	r2, [r3, #0]
    8f56:	f242 0339 	movw	r3, #8249	; 0x2039
    8f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5e:	f242 0239 	movw	r2, #8249	; 0x2039
    8f62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8f66:	7812      	ldrb	r2, [r2, #0]
    8f68:	b2d2      	uxtb	r2, r2
    8f6a:	f042 0210 	orr.w	r2, r2, #16
    8f6e:	b2d2      	uxtb	r2, r2
    8f70:	701a      	strb	r2, [r3, #0]
    8f72:	e00b      	b.n	8f8c <send_attitude+0x9f0>
    8f74:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	3301      	adds	r3, #1
    8f80:	b2da      	uxtb	r2, r3
    8f82:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8a:	701a      	strb	r2, [r3, #0]
  }
}
    8f8c:	46bd      	mov	sp, r7
    8f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f92:	4770      	bx	lr

00008f94 <send_adc>:
  
void send_adc(void){  //500ms
    8f94:	b480      	push	{r7}
    8f96:	af00      	add	r7, sp, #0
  if(!boot)
    8f98:	f240 533d 	movw	r3, #1341	; 0x53d
    8f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa0:	781b      	ldrb	r3, [r3, #0]
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	f040 827d 	bne.w	94a2 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8fa8:	f24c 5341 	movw	r3, #50497	; 0xc541
    8fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb0:	781a      	ldrb	r2, [r3, #0]
    8fb2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8fb6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8fba:	fba3 1302 	umull	r1, r3, r3, r2
    8fbe:	0899      	lsrs	r1, r3, #2
    8fc0:	460b      	mov	r3, r1
    8fc2:	009b      	lsls	r3, r3, #2
    8fc4:	440b      	add	r3, r1
    8fc6:	1ad3      	subs	r3, r2, r3
    8fc8:	b2db      	uxtb	r3, r3
    8fca:	2b01      	cmp	r3, #1
    8fcc:	f040 8269 	bne.w	94a2 <send_adc+0x50e>
    8fd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd8:	781a      	ldrb	r2, [r3, #0]
    8fda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	b2db      	uxtb	r3, r3
    8fe6:	429a      	cmp	r2, r3
    8fe8:	d313      	bcc.n	9012 <send_adc+0x7e>
    8fea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	461a      	mov	r2, r3
    8ff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9000:	781b      	ldrb	r3, [r3, #0]
    9002:	1ad3      	subs	r3, r2, r3
    9004:	33ff      	adds	r3, #255	; 0xff
    9006:	2b08      	cmp	r3, #8
    9008:	bfd4      	ite	le
    900a:	2300      	movle	r3, #0
    900c:	2301      	movgt	r3, #1
    900e:	b2db      	uxtb	r3, r3
    9010:	e011      	b.n	9036 <send_adc+0xa2>
    9012:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	b2db      	uxtb	r3, r3
    901e:	461a      	mov	r2, r3
    9020:	f24c 5349 	movw	r3, #50505	; 0xc549
    9024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	1ad3      	subs	r3, r2, r3
    902c:	2b08      	cmp	r3, #8
    902e:	bfd4      	ite	le
    9030:	2300      	movle	r3, #0
    9032:	2301      	movgt	r3, #1
    9034:	b2db      	uxtb	r3, r3
    9036:	2b00      	cmp	r3, #0
    9038:	f000 8227 	beq.w	948a <send_adc+0x4f6>
    903c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	461a      	mov	r2, r3
    9048:	f24c 534c 	movw	r3, #50508	; 0xc54c
    904c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9050:	2105      	movs	r1, #5
    9052:	5499      	strb	r1, [r3, r2]
    9054:	f24c 5349 	movw	r3, #50505	; 0xc549
    9058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	3301      	adds	r3, #1
    9060:	b2da      	uxtb	r2, r3
    9062:	f24c 5349 	movw	r3, #50505	; 0xc549
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	701a      	strb	r2, [r3, #0]
    906c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	2bff      	cmp	r3, #255	; 0xff
    9078:	d105      	bne.n	9086 <send_adc+0xf2>
    907a:	f24c 5349 	movw	r3, #50505	; 0xc549
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	2200      	movs	r2, #0
    9084:	701a      	strb	r2, [r3, #0]
    9086:	f24c 5349 	movw	r3, #50505	; 0xc549
    908a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908e:	781b      	ldrb	r3, [r3, #0]
    9090:	461a      	mov	r2, r3
    9092:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	2107      	movs	r1, #7
    909c:	5499      	strb	r1, [r3, r2]
    909e:	f24c 5349 	movw	r3, #50505	; 0xc549
    90a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	3301      	adds	r3, #1
    90aa:	b2da      	uxtb	r2, r3
    90ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    90b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b4:	701a      	strb	r2, [r3, #0]
    90b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	2bff      	cmp	r3, #255	; 0xff
    90c2:	d105      	bne.n	90d0 <send_adc+0x13c>
    90c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    90c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90cc:	2200      	movs	r2, #0
    90ce:	701a      	strb	r2, [r3, #0]
    90d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d8:	2207      	movs	r2, #7
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e4:	2207      	movs	r2, #7
    90e6:	701a      	strb	r2, [r3, #0]
    90e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	461a      	mov	r2, r3
    90f4:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    90f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fc:	7819      	ldrb	r1, [r3, #0]
    90fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9106:	5499      	strb	r1, [r3, r2]
    9108:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    910c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9110:	781a      	ldrb	r2, [r3, #0]
    9112:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	4413      	add	r3, r2
    911e:	b2da      	uxtb	r2, r3
    9120:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9128:	701a      	strb	r2, [r3, #0]
    912a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    912e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9132:	781a      	ldrb	r2, [r3, #0]
    9134:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913c:	781b      	ldrb	r3, [r3, #0]
    913e:	4413      	add	r3, r2
    9140:	b2da      	uxtb	r2, r3
    9142:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914a:	701a      	strb	r2, [r3, #0]
    914c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9154:	781b      	ldrb	r3, [r3, #0]
    9156:	3301      	adds	r3, #1
    9158:	b2da      	uxtb	r2, r3
    915a:	f24c 5349 	movw	r3, #50505	; 0xc549
    915e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9162:	701a      	strb	r2, [r3, #0]
    9164:	f24c 5349 	movw	r3, #50505	; 0xc549
    9168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	2bff      	cmp	r3, #255	; 0xff
    9170:	d105      	bne.n	917e <send_adc+0x1ea>
    9172:	f24c 5349 	movw	r3, #50505	; 0xc549
    9176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917a:	2200      	movs	r2, #0
    917c:	701a      	strb	r2, [r3, #0]
    917e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9186:	781b      	ldrb	r3, [r3, #0]
    9188:	461a      	mov	r2, r3
    918a:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    918e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9192:	7859      	ldrb	r1, [r3, #1]
    9194:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919c:	5499      	strb	r1, [r3, r2]
    919e:	4bc3      	ldr	r3, [pc, #780]	; (94ac <send_adc+0x518>)
    91a0:	781a      	ldrb	r2, [r3, #0]
    91a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	4413      	add	r3, r2
    91ae:	b2da      	uxtb	r2, r3
    91b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b8:	701a      	strb	r2, [r3, #0]
    91ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91cc:	781b      	ldrb	r3, [r3, #0]
    91ce:	4413      	add	r3, r2
    91d0:	b2da      	uxtb	r2, r3
    91d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    91e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	3301      	adds	r3, #1
    91e8:	b2da      	uxtb	r2, r3
    91ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    91ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f2:	701a      	strb	r2, [r3, #0]
    91f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    91f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	2bff      	cmp	r3, #255	; 0xff
    9200:	d105      	bne.n	920e <send_adc+0x27a>
    9202:	f24c 5349 	movw	r3, #50505	; 0xc549
    9206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920a:	2200      	movs	r2, #0
    920c:	701a      	strb	r2, [r3, #0]
    920e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	461a      	mov	r2, r3
    921a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    921e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9222:	7819      	ldrb	r1, [r3, #0]
    9224:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922c:	5499      	strb	r1, [r3, r2]
    922e:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9236:	781a      	ldrb	r2, [r3, #0]
    9238:	f24c 634d 	movw	r3, #50765	; 0xc64d
    923c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9240:	781b      	ldrb	r3, [r3, #0]
    9242:	4413      	add	r3, r2
    9244:	b2da      	uxtb	r2, r3
    9246:	f24c 634d 	movw	r3, #50765	; 0xc64d
    924a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924e:	701a      	strb	r2, [r3, #0]
    9250:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9258:	781a      	ldrb	r2, [r3, #0]
    925a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    925e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9262:	781b      	ldrb	r3, [r3, #0]
    9264:	4413      	add	r3, r2
    9266:	b2da      	uxtb	r2, r3
    9268:	f24c 634e 	movw	r3, #50766	; 0xc64e
    926c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9270:	701a      	strb	r2, [r3, #0]
    9272:	f24c 5349 	movw	r3, #50505	; 0xc549
    9276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927a:	781b      	ldrb	r3, [r3, #0]
    927c:	3301      	adds	r3, #1
    927e:	b2da      	uxtb	r2, r3
    9280:	f24c 5349 	movw	r3, #50505	; 0xc549
    9284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9288:	701a      	strb	r2, [r3, #0]
    928a:	f24c 5349 	movw	r3, #50505	; 0xc549
    928e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9292:	781b      	ldrb	r3, [r3, #0]
    9294:	2bff      	cmp	r3, #255	; 0xff
    9296:	d105      	bne.n	92a4 <send_adc+0x310>
    9298:	f24c 5349 	movw	r3, #50505	; 0xc549
    929c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a0:	2200      	movs	r2, #0
    92a2:	701a      	strb	r2, [r3, #0]
    92a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    92a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	461a      	mov	r2, r3
    92b0:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    92b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b8:	7859      	ldrb	r1, [r3, #1]
    92ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c2:	5499      	strb	r1, [r3, r2]
    92c4:	4b7a      	ldr	r3, [pc, #488]	; (94b0 <send_adc+0x51c>)
    92c6:	781a      	ldrb	r2, [r3, #0]
    92c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d0:	781b      	ldrb	r3, [r3, #0]
    92d2:	4413      	add	r3, r2
    92d4:	b2da      	uxtb	r2, r3
    92d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92de:	701a      	strb	r2, [r3, #0]
    92e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e8:	781a      	ldrb	r2, [r3, #0]
    92ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	4413      	add	r3, r2
    92f6:	b2da      	uxtb	r2, r3
    92f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    92fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9300:	701a      	strb	r2, [r3, #0]
    9302:	f24c 5349 	movw	r3, #50505	; 0xc549
    9306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	3301      	adds	r3, #1
    930e:	b2da      	uxtb	r2, r3
    9310:	f24c 5349 	movw	r3, #50505	; 0xc549
    9314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9318:	701a      	strb	r2, [r3, #0]
    931a:	f24c 5349 	movw	r3, #50505	; 0xc549
    931e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	2bff      	cmp	r3, #255	; 0xff
    9326:	d105      	bne.n	9334 <send_adc+0x3a0>
    9328:	f24c 5349 	movw	r3, #50505	; 0xc549
    932c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9330:	2200      	movs	r2, #0
    9332:	701a      	strb	r2, [r3, #0]
    9334:	f24c 5349 	movw	r3, #50505	; 0xc549
    9338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933c:	781b      	ldrb	r3, [r3, #0]
    933e:	461a      	mov	r2, r3
    9340:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9348:	7819      	ldrb	r1, [r3, #0]
    934a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    934e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9352:	5499      	strb	r1, [r3, r2]
    9354:	f24c 5349 	movw	r3, #50505	; 0xc549
    9358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935c:	781b      	ldrb	r3, [r3, #0]
    935e:	3301      	adds	r3, #1
    9360:	b2da      	uxtb	r2, r3
    9362:	f24c 5349 	movw	r3, #50505	; 0xc549
    9366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936a:	701a      	strb	r2, [r3, #0]
    936c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	2bff      	cmp	r3, #255	; 0xff
    9378:	d105      	bne.n	9386 <send_adc+0x3f2>
    937a:	f24c 5349 	movw	r3, #50505	; 0xc549
    937e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9382:	2200      	movs	r2, #0
    9384:	701a      	strb	r2, [r3, #0]
    9386:	f24c 5349 	movw	r3, #50505	; 0xc549
    938a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    938e:	781b      	ldrb	r3, [r3, #0]
    9390:	461a      	mov	r2, r3
    9392:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939a:	7819      	ldrb	r1, [r3, #0]
    939c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    93a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a4:	5499      	strb	r1, [r3, r2]
    93a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    93aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	3301      	adds	r3, #1
    93b2:	b2da      	uxtb	r2, r3
    93b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    93b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93bc:	701a      	strb	r2, [r3, #0]
    93be:	f24c 5349 	movw	r3, #50505	; 0xc549
    93c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c6:	781b      	ldrb	r3, [r3, #0]
    93c8:	2bff      	cmp	r3, #255	; 0xff
    93ca:	d105      	bne.n	93d8 <send_adc+0x444>
    93cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    93d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d4:	2200      	movs	r2, #0
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f242 0339 	movw	r3, #8249	; 0x2039
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	b2db      	uxtb	r3, r3
    93e4:	f003 0310 	and.w	r3, r3, #16
    93e8:	2b00      	cmp	r3, #0
    93ea:	d15a      	bne.n	94a2 <send_adc+0x50e>
    93ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f4:	781b      	ldrb	r3, [r3, #0]
    93f6:	b2db      	uxtb	r3, r3
    93f8:	461a      	mov	r2, r3
    93fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    93fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9402:	5c9a      	ldrb	r2, [r3, r2]
    9404:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940c:	701a      	strb	r2, [r3, #0]
    940e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9416:	2200      	movs	r2, #0
    9418:	701a      	strb	r2, [r3, #0]
    941a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    941e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	b2db      	uxtb	r3, r3
    9426:	3301      	adds	r3, #1
    9428:	b2da      	uxtb	r2, r3
    942a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    942e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9432:	701a      	strb	r2, [r3, #0]
    9434:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	b2db      	uxtb	r3, r3
    9440:	2bff      	cmp	r3, #255	; 0xff
    9442:	d105      	bne.n	9450 <send_adc+0x4bc>
    9444:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	2200      	movs	r2, #0
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f242 0338 	movw	r3, #8248	; 0x2038
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	f242 0238 	movw	r2, #8248	; 0x2038
    945c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9460:	7812      	ldrb	r2, [r2, #0]
    9462:	b2d2      	uxtb	r2, r2
    9464:	f042 0201 	orr.w	r2, r2, #1
    9468:	b2d2      	uxtb	r2, r2
    946a:	701a      	strb	r2, [r3, #0]
    946c:	f242 0339 	movw	r3, #8249	; 0x2039
    9470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9474:	f242 0239 	movw	r2, #8249	; 0x2039
    9478:	f2c2 0200 	movt	r2, #8192	; 0x2000
    947c:	7812      	ldrb	r2, [r2, #0]
    947e:	b2d2      	uxtb	r2, r2
    9480:	f042 0210 	orr.w	r2, r2, #16
    9484:	b2d2      	uxtb	r2, r2
    9486:	701a      	strb	r2, [r3, #0]
    9488:	e00b      	b.n	94a2 <send_adc+0x50e>
    948a:	f24c 5348 	movw	r3, #50504	; 0xc548
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	3301      	adds	r3, #1
    9496:	b2da      	uxtb	r2, r3
    9498:	f24c 5348 	movw	r3, #50504	; 0xc548
    949c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a0:	701a      	strb	r2, [r3, #0]
}
    94a2:	46bd      	mov	sp, r7
    94a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94a8:	4770      	bx	lr
    94aa:	bf00      	nop
    94ac:	2004c7e9 	.word	0x2004c7e9
    94b0:	2004c7eb 	.word	0x2004c7eb

000094b4 <send_settings>:
void send_settings(void){ //500ms
    94b4:	b480      	push	{r7}
    94b6:	af00      	add	r7, sp, #0
  if(!boot)
    94b8:	f240 533d 	movw	r3, #1341	; 0x53d
    94bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	2b00      	cmp	r3, #0
    94c4:	f040 83fb 	bne.w	9cbe <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    94c8:	f24c 5341 	movw	r3, #50497	; 0xc541
    94cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d0:	781a      	ldrb	r2, [r3, #0]
    94d2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    94d6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    94da:	fba3 1302 	umull	r1, r3, r3, r2
    94de:	0899      	lsrs	r1, r3, #2
    94e0:	460b      	mov	r3, r1
    94e2:	009b      	lsls	r3, r3, #2
    94e4:	440b      	add	r3, r1
    94e6:	1ad3      	subs	r3, r2, r3
    94e8:	b2db      	uxtb	r3, r3
    94ea:	2b02      	cmp	r3, #2
    94ec:	f040 83e7 	bne.w	9cbe <send_settings+0x80a>
    94f0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    94f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f8:	781b      	ldrb	r3, [r3, #0]
    94fa:	2b00      	cmp	r3, #0
    94fc:	f000 83df 	beq.w	9cbe <send_settings+0x80a>
    9500:	f24c 5349 	movw	r3, #50505	; 0xc549
    9504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9508:	781a      	ldrb	r2, [r3, #0]
    950a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    950e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9512:	781b      	ldrb	r3, [r3, #0]
    9514:	b2db      	uxtb	r3, r3
    9516:	429a      	cmp	r2, r3
    9518:	d313      	bcc.n	9542 <send_settings+0x8e>
    951a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    951e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	b2db      	uxtb	r3, r3
    9526:	461a      	mov	r2, r3
    9528:	f24c 5349 	movw	r3, #50505	; 0xc549
    952c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	1ad3      	subs	r3, r2, r3
    9534:	33ff      	adds	r3, #255	; 0xff
    9536:	2b0d      	cmp	r3, #13
    9538:	bfd4      	ite	le
    953a:	2300      	movle	r3, #0
    953c:	2301      	movgt	r3, #1
    953e:	b2db      	uxtb	r3, r3
    9540:	e011      	b.n	9566 <send_settings+0xb2>
    9542:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954a:	781b      	ldrb	r3, [r3, #0]
    954c:	b2db      	uxtb	r3, r3
    954e:	461a      	mov	r2, r3
    9550:	f24c 5349 	movw	r3, #50505	; 0xc549
    9554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	1ad3      	subs	r3, r2, r3
    955c:	2b0d      	cmp	r3, #13
    955e:	bfd4      	ite	le
    9560:	2300      	movle	r3, #0
    9562:	2301      	movgt	r3, #1
    9564:	b2db      	uxtb	r3, r3
    9566:	2b00      	cmp	r3, #0
    9568:	f000 839d 	beq.w	9ca6 <send_settings+0x7f2>
    956c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	461a      	mov	r2, r3
    9578:	f24c 534c 	movw	r3, #50508	; 0xc54c
    957c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9580:	2105      	movs	r1, #5
    9582:	5499      	strb	r1, [r3, r2]
    9584:	f24c 5349 	movw	r3, #50505	; 0xc549
    9588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	3301      	adds	r3, #1
    9590:	b2da      	uxtb	r2, r3
    9592:	f24c 5349 	movw	r3, #50505	; 0xc549
    9596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959a:	701a      	strb	r2, [r3, #0]
    959c:	f24c 5349 	movw	r3, #50505	; 0xc549
    95a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	2bff      	cmp	r3, #255	; 0xff
    95a8:	d105      	bne.n	95b6 <send_settings+0x102>
    95aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b2:	2200      	movs	r2, #0
    95b4:	701a      	strb	r2, [r3, #0]
    95b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95be:	781b      	ldrb	r3, [r3, #0]
    95c0:	461a      	mov	r2, r3
    95c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	2111      	movs	r1, #17
    95cc:	5499      	strb	r1, [r3, r2]
    95ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    95d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d6:	781b      	ldrb	r3, [r3, #0]
    95d8:	3301      	adds	r3, #1
    95da:	b2da      	uxtb	r2, r3
    95dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    95e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e4:	701a      	strb	r2, [r3, #0]
    95e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	2bff      	cmp	r3, #255	; 0xff
    95f2:	d105      	bne.n	9600 <send_settings+0x14c>
    95f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    95f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fc:	2200      	movs	r2, #0
    95fe:	701a      	strb	r2, [r3, #0]
    9600:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9608:	2211      	movs	r2, #17
    960a:	701a      	strb	r2, [r3, #0]
    960c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9614:	2211      	movs	r2, #17
    9616:	701a      	strb	r2, [r3, #0]
    9618:	f24c 5349 	movw	r3, #50505	; 0xc549
    961c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9620:	781b      	ldrb	r3, [r3, #0]
    9622:	461a      	mov	r2, r3
    9624:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962c:	7819      	ldrb	r1, [r3, #0]
    962e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9636:	5499      	strb	r1, [r3, r2]
    9638:	f24c 634d 	movw	r3, #50765	; 0xc64d
    963c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9640:	781a      	ldrb	r2, [r3, #0]
    9642:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	4413      	add	r3, r2
    964e:	b2da      	uxtb	r2, r3
    9650:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9658:	701a      	strb	r2, [r3, #0]
    965a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    965e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9662:	781a      	ldrb	r2, [r3, #0]
    9664:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	4413      	add	r3, r2
    9670:	b2da      	uxtb	r2, r3
    9672:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967a:	701a      	strb	r2, [r3, #0]
    967c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9684:	781b      	ldrb	r3, [r3, #0]
    9686:	3301      	adds	r3, #1
    9688:	b2da      	uxtb	r2, r3
    968a:	f24c 5349 	movw	r3, #50505	; 0xc549
    968e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9692:	701a      	strb	r2, [r3, #0]
    9694:	f24c 5349 	movw	r3, #50505	; 0xc549
    9698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969c:	781b      	ldrb	r3, [r3, #0]
    969e:	2bff      	cmp	r3, #255	; 0xff
    96a0:	d105      	bne.n	96ae <send_settings+0x1fa>
    96a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96aa:	2200      	movs	r2, #0
    96ac:	701a      	strb	r2, [r3, #0]
    96ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    96b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b6:	781b      	ldrb	r3, [r3, #0]
    96b8:	461a      	mov	r2, r3
    96ba:	f24c 5338 	movw	r3, #50488	; 0xc538
    96be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c2:	7819      	ldrb	r1, [r3, #0]
    96c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96cc:	5499      	strb	r1, [r3, r2]
    96ce:	f24c 5338 	movw	r3, #50488	; 0xc538
    96d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d6:	781a      	ldrb	r2, [r3, #0]
    96d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	781b      	ldrb	r3, [r3, #0]
    96e2:	4413      	add	r3, r2
    96e4:	b2da      	uxtb	r2, r3
    96e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ee:	701a      	strb	r2, [r3, #0]
    96f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f8:	781a      	ldrb	r2, [r3, #0]
    96fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	4413      	add	r3, r2
    9706:	b2da      	uxtb	r2, r3
    9708:	f24c 634e 	movw	r3, #50766	; 0xc64e
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	701a      	strb	r2, [r3, #0]
    9712:	f24c 5349 	movw	r3, #50505	; 0xc549
    9716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	3301      	adds	r3, #1
    971e:	b2da      	uxtb	r2, r3
    9720:	f24c 5349 	movw	r3, #50505	; 0xc549
    9724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9728:	701a      	strb	r2, [r3, #0]
    972a:	f24c 5349 	movw	r3, #50505	; 0xc549
    972e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	2bff      	cmp	r3, #255	; 0xff
    9736:	d105      	bne.n	9744 <send_settings+0x290>
    9738:	f24c 5349 	movw	r3, #50505	; 0xc549
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	2200      	movs	r2, #0
    9742:	701a      	strb	r2, [r3, #0]
    9744:	f24c 5349 	movw	r3, #50505	; 0xc549
    9748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974c:	781b      	ldrb	r3, [r3, #0]
    974e:	461a      	mov	r2, r3
    9750:	f24c 5338 	movw	r3, #50488	; 0xc538
    9754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9758:	7859      	ldrb	r1, [r3, #1]
    975a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    975e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9762:	5499      	strb	r1, [r3, r2]
    9764:	4bd1      	ldr	r3, [pc, #836]	; (9aac <send_settings+0x5f8>)
    9766:	781a      	ldrb	r2, [r3, #0]
    9768:	f24c 634d 	movw	r3, #50765	; 0xc64d
    976c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9770:	781b      	ldrb	r3, [r3, #0]
    9772:	4413      	add	r3, r2
    9774:	b2da      	uxtb	r2, r3
    9776:	f24c 634d 	movw	r3, #50765	; 0xc64d
    977a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977e:	701a      	strb	r2, [r3, #0]
    9780:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9788:	781a      	ldrb	r2, [r3, #0]
    978a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    978e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9792:	781b      	ldrb	r3, [r3, #0]
    9794:	4413      	add	r3, r2
    9796:	b2da      	uxtb	r2, r3
    9798:	f24c 634e 	movw	r3, #50766	; 0xc64e
    979c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a0:	701a      	strb	r2, [r3, #0]
    97a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    97a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97aa:	781b      	ldrb	r3, [r3, #0]
    97ac:	3301      	adds	r3, #1
    97ae:	b2da      	uxtb	r2, r3
    97b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    97b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b8:	701a      	strb	r2, [r3, #0]
    97ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    97be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c2:	781b      	ldrb	r3, [r3, #0]
    97c4:	2bff      	cmp	r3, #255	; 0xff
    97c6:	d105      	bne.n	97d4 <send_settings+0x320>
    97c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    97cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d0:	2200      	movs	r2, #0
    97d2:	701a      	strb	r2, [r3, #0]
    97d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    97d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	461a      	mov	r2, r3
    97e0:	f24c 5338 	movw	r3, #50488	; 0xc538
    97e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e8:	7899      	ldrb	r1, [r3, #2]
    97ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f2:	5499      	strb	r1, [r3, r2]
    97f4:	4bae      	ldr	r3, [pc, #696]	; (9ab0 <send_settings+0x5fc>)
    97f6:	781a      	ldrb	r2, [r3, #0]
    97f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	4413      	add	r3, r2
    9804:	b2da      	uxtb	r2, r3
    9806:	f24c 634d 	movw	r3, #50765	; 0xc64d
    980a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980e:	701a      	strb	r2, [r3, #0]
    9810:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9818:	781a      	ldrb	r2, [r3, #0]
    981a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    981e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9822:	781b      	ldrb	r3, [r3, #0]
    9824:	4413      	add	r3, r2
    9826:	b2da      	uxtb	r2, r3
    9828:	f24c 634e 	movw	r3, #50766	; 0xc64e
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f24c 5349 	movw	r3, #50505	; 0xc549
    9836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	3301      	adds	r3, #1
    983e:	b2da      	uxtb	r2, r3
    9840:	f24c 5349 	movw	r3, #50505	; 0xc549
    9844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9848:	701a      	strb	r2, [r3, #0]
    984a:	f24c 5349 	movw	r3, #50505	; 0xc549
    984e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	2bff      	cmp	r3, #255	; 0xff
    9856:	d105      	bne.n	9864 <send_settings+0x3b0>
    9858:	f24c 5349 	movw	r3, #50505	; 0xc549
    985c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9860:	2200      	movs	r2, #0
    9862:	701a      	strb	r2, [r3, #0]
    9864:	f24c 5349 	movw	r3, #50505	; 0xc549
    9868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986c:	781b      	ldrb	r3, [r3, #0]
    986e:	461a      	mov	r2, r3
    9870:	f24c 5338 	movw	r3, #50488	; 0xc538
    9874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9878:	78d9      	ldrb	r1, [r3, #3]
    987a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    987e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9882:	5499      	strb	r1, [r3, r2]
    9884:	4b8b      	ldr	r3, [pc, #556]	; (9ab4 <send_settings+0x600>)
    9886:	781a      	ldrb	r2, [r3, #0]
    9888:	f24c 634d 	movw	r3, #50765	; 0xc64d
    988c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	4413      	add	r3, r2
    9894:	b2da      	uxtb	r2, r3
    9896:	f24c 634d 	movw	r3, #50765	; 0xc64d
    989a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989e:	701a      	strb	r2, [r3, #0]
    98a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a8:	781a      	ldrb	r2, [r3, #0]
    98aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	4413      	add	r3, r2
    98b6:	b2da      	uxtb	r2, r3
    98b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    98c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	3301      	adds	r3, #1
    98ce:	b2da      	uxtb	r2, r3
    98d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    98d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d8:	701a      	strb	r2, [r3, #0]
    98da:	f24c 5349 	movw	r3, #50505	; 0xc549
    98de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e2:	781b      	ldrb	r3, [r3, #0]
    98e4:	2bff      	cmp	r3, #255	; 0xff
    98e6:	d105      	bne.n	98f4 <send_settings+0x440>
    98e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f0:	2200      	movs	r2, #0
    98f2:	701a      	strb	r2, [r3, #0]
    98f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    98f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98fc:	781b      	ldrb	r3, [r3, #0]
    98fe:	461a      	mov	r2, r3
    9900:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9908:	7819      	ldrb	r1, [r3, #0]
    990a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    990e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9912:	5499      	strb	r1, [r3, r2]
    9914:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991c:	781a      	ldrb	r2, [r3, #0]
    991e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9926:	781b      	ldrb	r3, [r3, #0]
    9928:	4413      	add	r3, r2
    992a:	b2da      	uxtb	r2, r3
    992c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9934:	701a      	strb	r2, [r3, #0]
    9936:	f24c 634e 	movw	r3, #50766	; 0xc64e
    993a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    993e:	781a      	ldrb	r2, [r3, #0]
    9940:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	4413      	add	r3, r2
    994c:	b2da      	uxtb	r2, r3
    994e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9956:	701a      	strb	r2, [r3, #0]
    9958:	f24c 5349 	movw	r3, #50505	; 0xc549
    995c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	3301      	adds	r3, #1
    9964:	b2da      	uxtb	r2, r3
    9966:	f24c 5349 	movw	r3, #50505	; 0xc549
    996a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996e:	701a      	strb	r2, [r3, #0]
    9970:	f24c 5349 	movw	r3, #50505	; 0xc549
    9974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	2bff      	cmp	r3, #255	; 0xff
    997c:	d105      	bne.n	998a <send_settings+0x4d6>
    997e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9986:	2200      	movs	r2, #0
    9988:	701a      	strb	r2, [r3, #0]
    998a:	f24c 5349 	movw	r3, #50505	; 0xc549
    998e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9992:	781b      	ldrb	r3, [r3, #0]
    9994:	461a      	mov	r2, r3
    9996:	f24c 533c 	movw	r3, #50492	; 0xc53c
    999a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999e:	7859      	ldrb	r1, [r3, #1]
    99a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    99a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a8:	5499      	strb	r1, [r3, r2]
    99aa:	4b43      	ldr	r3, [pc, #268]	; (9ab8 <send_settings+0x604>)
    99ac:	781a      	ldrb	r2, [r3, #0]
    99ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	4413      	add	r3, r2
    99ba:	b2da      	uxtb	r2, r3
    99bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c4:	701a      	strb	r2, [r3, #0]
    99c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ce:	781a      	ldrb	r2, [r3, #0]
    99d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d8:	781b      	ldrb	r3, [r3, #0]
    99da:	4413      	add	r3, r2
    99dc:	b2da      	uxtb	r2, r3
    99de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	701a      	strb	r2, [r3, #0]
    99e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    99ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	3301      	adds	r3, #1
    99f4:	b2da      	uxtb	r2, r3
    99f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fe:	701a      	strb	r2, [r3, #0]
    9a00:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2bff      	cmp	r3, #255	; 0xff
    9a0c:	d105      	bne.n	9a1a <send_settings+0x566>
    9a0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a16:	2200      	movs	r2, #0
    9a18:	701a      	strb	r2, [r3, #0]
    9a1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a22:	781b      	ldrb	r3, [r3, #0]
    9a24:	461a      	mov	r2, r3
    9a26:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2e:	7899      	ldrb	r1, [r3, #2]
    9a30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a38:	5499      	strb	r1, [r3, r2]
    9a3a:	4b20      	ldr	r3, [pc, #128]	; (9abc <send_settings+0x608>)
    9a3c:	781a      	ldrb	r2, [r3, #0]
    9a3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	4413      	add	r3, r2
    9a4a:	b2da      	uxtb	r2, r3
    9a4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a54:	701a      	strb	r2, [r3, #0]
    9a56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	781a      	ldrb	r2, [r3, #0]
    9a60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	4413      	add	r3, r2
    9a6c:	b2da      	uxtb	r2, r3
    9a6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	701a      	strb	r2, [r3, #0]
    9a78:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a80:	781b      	ldrb	r3, [r3, #0]
    9a82:	3301      	adds	r3, #1
    9a84:	b2da      	uxtb	r2, r3
    9a86:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8e:	701a      	strb	r2, [r3, #0]
    9a90:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a98:	781b      	ldrb	r3, [r3, #0]
    9a9a:	2bff      	cmp	r3, #255	; 0xff
    9a9c:	d110      	bne.n	9ac0 <send_settings+0x60c>
    9a9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	2200      	movs	r2, #0
    9aa8:	701a      	strb	r2, [r3, #0]
    9aaa:	e009      	b.n	9ac0 <send_settings+0x60c>
    9aac:	2004c539 	.word	0x2004c539
    9ab0:	2004c53a 	.word	0x2004c53a
    9ab4:	2004c53b 	.word	0x2004c53b
    9ab8:	2004c53d 	.word	0x2004c53d
    9abc:	2004c53e 	.word	0x2004c53e
    9ac0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac8:	781b      	ldrb	r3, [r3, #0]
    9aca:	461a      	mov	r2, r3
    9acc:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad4:	78d9      	ldrb	r1, [r3, #3]
    9ad6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ade:	5499      	strb	r1, [r3, r2]
    9ae0:	4b79      	ldr	r3, [pc, #484]	; (9cc8 <send_settings+0x814>)
    9ae2:	781a      	ldrb	r2, [r3, #0]
    9ae4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aec:	781b      	ldrb	r3, [r3, #0]
    9aee:	4413      	add	r3, r2
    9af0:	b2da      	uxtb	r2, r3
    9af2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afa:	701a      	strb	r2, [r3, #0]
    9afc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b04:	781a      	ldrb	r2, [r3, #0]
    9b06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	781b      	ldrb	r3, [r3, #0]
    9b10:	4413      	add	r3, r2
    9b12:	b2da      	uxtb	r2, r3
    9b14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1c:	701a      	strb	r2, [r3, #0]
    9b1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	3301      	adds	r3, #1
    9b2a:	b2da      	uxtb	r2, r3
    9b2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b34:	701a      	strb	r2, [r3, #0]
    9b36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	2bff      	cmp	r3, #255	; 0xff
    9b42:	d105      	bne.n	9b50 <send_settings+0x69c>
    9b44:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4c:	2200      	movs	r2, #0
    9b4e:	701a      	strb	r2, [r3, #0]
    9b50:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	461a      	mov	r2, r3
    9b5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b64:	7819      	ldrb	r1, [r3, #0]
    9b66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6e:	5499      	strb	r1, [r3, r2]
    9b70:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b78:	781b      	ldrb	r3, [r3, #0]
    9b7a:	3301      	adds	r3, #1
    9b7c:	b2da      	uxtb	r2, r3
    9b7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b86:	701a      	strb	r2, [r3, #0]
    9b88:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b90:	781b      	ldrb	r3, [r3, #0]
    9b92:	2bff      	cmp	r3, #255	; 0xff
    9b94:	d105      	bne.n	9ba2 <send_settings+0x6ee>
    9b96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9e:	2200      	movs	r2, #0
    9ba0:	701a      	strb	r2, [r3, #0]
    9ba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9baa:	781b      	ldrb	r3, [r3, #0]
    9bac:	461a      	mov	r2, r3
    9bae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb6:	7819      	ldrb	r1, [r3, #0]
    9bb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc0:	5499      	strb	r1, [r3, r2]
    9bc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	781b      	ldrb	r3, [r3, #0]
    9bcc:	3301      	adds	r3, #1
    9bce:	b2da      	uxtb	r2, r3
    9bd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd8:	701a      	strb	r2, [r3, #0]
    9bda:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	2bff      	cmp	r3, #255	; 0xff
    9be6:	d105      	bne.n	9bf4 <send_settings+0x740>
    9be8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf0:	2200      	movs	r2, #0
    9bf2:	701a      	strb	r2, [r3, #0]
    9bf4:	f242 0339 	movw	r3, #8249	; 0x2039
    9bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	b2db      	uxtb	r3, r3
    9c00:	f003 0310 	and.w	r3, r3, #16
    9c04:	2b00      	cmp	r3, #0
    9c06:	d15a      	bne.n	9cbe <send_settings+0x80a>
    9c08:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	b2db      	uxtb	r3, r3
    9c14:	461a      	mov	r2, r3
    9c16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1e:	5c9a      	ldrb	r2, [r3, r2]
    9c20:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c28:	701a      	strb	r2, [r3, #0]
    9c2a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c32:	2200      	movs	r2, #0
    9c34:	701a      	strb	r2, [r3, #0]
    9c36:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	b2db      	uxtb	r3, r3
    9c42:	3301      	adds	r3, #1
    9c44:	b2da      	uxtb	r2, r3
    9c46:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4e:	701a      	strb	r2, [r3, #0]
    9c50:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c58:	781b      	ldrb	r3, [r3, #0]
    9c5a:	b2db      	uxtb	r3, r3
    9c5c:	2bff      	cmp	r3, #255	; 0xff
    9c5e:	d105      	bne.n	9c6c <send_settings+0x7b8>
    9c60:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c68:	2200      	movs	r2, #0
    9c6a:	701a      	strb	r2, [r3, #0]
    9c6c:	f242 0338 	movw	r3, #8248	; 0x2038
    9c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c74:	f242 0238 	movw	r2, #8248	; 0x2038
    9c78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c7c:	7812      	ldrb	r2, [r2, #0]
    9c7e:	b2d2      	uxtb	r2, r2
    9c80:	f042 0201 	orr.w	r2, r2, #1
    9c84:	b2d2      	uxtb	r2, r2
    9c86:	701a      	strb	r2, [r3, #0]
    9c88:	f242 0339 	movw	r3, #8249	; 0x2039
    9c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c90:	f242 0239 	movw	r2, #8249	; 0x2039
    9c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c98:	7812      	ldrb	r2, [r2, #0]
    9c9a:	b2d2      	uxtb	r2, r2
    9c9c:	f042 0210 	orr.w	r2, r2, #16
    9ca0:	b2d2      	uxtb	r2, r2
    9ca2:	701a      	strb	r2, [r3, #0]
    9ca4:	e00b      	b.n	9cbe <send_settings+0x80a>
    9ca6:	f24c 5348 	movw	r3, #50504	; 0xc548
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	781b      	ldrb	r3, [r3, #0]
    9cb0:	3301      	adds	r3, #1
    9cb2:	b2da      	uxtb	r2, r3
    9cb4:	f24c 5348 	movw	r3, #50504	; 0xc548
    9cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbc:	701a      	strb	r2, [r3, #0]
}
    9cbe:	46bd      	mov	sp, r7
    9cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cc4:	4770      	bx	lr
    9cc6:	bf00      	nop
    9cc8:	2004c53f 	.word	0x2004c53f

00009ccc <send_desired>:
void send_desired(void){  //1000ms
    9ccc:	b480      	push	{r7}
    9cce:	af00      	add	r7, sp, #0
  if(!boot)
    9cd0:	f240 533d 	movw	r3, #1341	; 0x53d
    9cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd8:	781b      	ldrb	r3, [r3, #0]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	f040 8727 	bne.w	ab2e <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9ce0:	f24c 5341 	movw	r3, #50497	; 0xc541
    9ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce8:	781a      	ldrb	r2, [r3, #0]
    9cea:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9cee:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9cf2:	fba3 1302 	umull	r1, r3, r3, r2
    9cf6:	08d9      	lsrs	r1, r3, #3
    9cf8:	460b      	mov	r3, r1
    9cfa:	009b      	lsls	r3, r3, #2
    9cfc:	440b      	add	r3, r1
    9cfe:	005b      	lsls	r3, r3, #1
    9d00:	1ad3      	subs	r3, r2, r3
    9d02:	b2db      	uxtb	r3, r3
    9d04:	2b03      	cmp	r3, #3
    9d06:	f040 8712 	bne.w	ab2e <send_desired+0xe62>
    9d0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d12:	781a      	ldrb	r2, [r3, #0]
    9d14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1c:	781b      	ldrb	r3, [r3, #0]
    9d1e:	b2db      	uxtb	r3, r3
    9d20:	429a      	cmp	r2, r3
    9d22:	d313      	bcc.n	9d4c <send_desired+0x80>
    9d24:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	b2db      	uxtb	r3, r3
    9d30:	461a      	mov	r2, r3
    9d32:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3a:	781b      	ldrb	r3, [r3, #0]
    9d3c:	1ad3      	subs	r3, r2, r3
    9d3e:	33ff      	adds	r3, #255	; 0xff
    9d40:	2b18      	cmp	r3, #24
    9d42:	bfd4      	ite	le
    9d44:	2300      	movle	r3, #0
    9d46:	2301      	movgt	r3, #1
    9d48:	b2db      	uxtb	r3, r3
    9d4a:	e011      	b.n	9d70 <send_desired+0xa4>
    9d4c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	b2db      	uxtb	r3, r3
    9d58:	461a      	mov	r2, r3
    9d5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	1ad3      	subs	r3, r2, r3
    9d66:	2b18      	cmp	r3, #24
    9d68:	bfd4      	ite	le
    9d6a:	2300      	movle	r3, #0
    9d6c:	2301      	movgt	r3, #1
    9d6e:	b2db      	uxtb	r3, r3
    9d70:	2b00      	cmp	r3, #0
    9d72:	f000 86d0 	beq.w	ab16 <send_desired+0xe4a>
    9d76:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	781b      	ldrb	r3, [r3, #0]
    9d80:	461a      	mov	r2, r3
    9d82:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8a:	2105      	movs	r1, #5
    9d8c:	5499      	strb	r1, [r3, r2]
    9d8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	3301      	adds	r3, #1
    9d9a:	b2da      	uxtb	r2, r3
    9d9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	701a      	strb	r2, [r3, #0]
    9da6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	2bff      	cmp	r3, #255	; 0xff
    9db2:	d105      	bne.n	9dc0 <send_desired+0xf4>
    9db4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	2200      	movs	r2, #0
    9dbe:	701a      	strb	r2, [r3, #0]
    9dc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	461a      	mov	r2, r3
    9dcc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	2112      	movs	r1, #18
    9dd6:	5499      	strb	r1, [r3, r2]
    9dd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de0:	781b      	ldrb	r3, [r3, #0]
    9de2:	3301      	adds	r3, #1
    9de4:	b2da      	uxtb	r2, r3
    9de6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	2bff      	cmp	r3, #255	; 0xff
    9dfc:	d105      	bne.n	9e0a <send_desired+0x13e>
    9dfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	2200      	movs	r2, #0
    9e08:	701a      	strb	r2, [r3, #0]
    9e0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e12:	2212      	movs	r2, #18
    9e14:	701a      	strb	r2, [r3, #0]
    9e16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	2212      	movs	r2, #18
    9e20:	701a      	strb	r2, [r3, #0]
    9e22:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2a:	781b      	ldrb	r3, [r3, #0]
    9e2c:	461a      	mov	r2, r3
    9e2e:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e36:	7819      	ldrb	r1, [r3, #0]
    9e38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e40:	5499      	strb	r1, [r3, r2]
    9e42:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4a:	781a      	ldrb	r2, [r3, #0]
    9e4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	4413      	add	r3, r2
    9e58:	b2da      	uxtb	r2, r3
    9e5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e62:	701a      	strb	r2, [r3, #0]
    9e64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6c:	781a      	ldrb	r2, [r3, #0]
    9e6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	4413      	add	r3, r2
    9e7a:	b2da      	uxtb	r2, r3
    9e7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e84:	701a      	strb	r2, [r3, #0]
    9e86:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8e:	781b      	ldrb	r3, [r3, #0]
    9e90:	3301      	adds	r3, #1
    9e92:	b2da      	uxtb	r2, r3
    9e94:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9c:	701a      	strb	r2, [r3, #0]
    9e9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea6:	781b      	ldrb	r3, [r3, #0]
    9ea8:	2bff      	cmp	r3, #255	; 0xff
    9eaa:	d105      	bne.n	9eb8 <send_desired+0x1ec>
    9eac:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb4:	2200      	movs	r2, #0
    9eb6:	701a      	strb	r2, [r3, #0]
    9eb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	461a      	mov	r2, r3
    9ec4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ecc:	7859      	ldrb	r1, [r3, #1]
    9ece:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed6:	5499      	strb	r1, [r3, r2]
    9ed8:	4bd1      	ldr	r3, [pc, #836]	; (a220 <send_desired+0x554>)
    9eda:	781a      	ldrb	r2, [r3, #0]
    9edc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	4413      	add	r3, r2
    9ee8:	b2da      	uxtb	r2, r3
    9eea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef2:	701a      	strb	r2, [r3, #0]
    9ef4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efc:	781a      	ldrb	r2, [r3, #0]
    9efe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f06:	781b      	ldrb	r3, [r3, #0]
    9f08:	4413      	add	r3, r2
    9f0a:	b2da      	uxtb	r2, r3
    9f0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f14:	701a      	strb	r2, [r3, #0]
    9f16:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	3301      	adds	r3, #1
    9f22:	b2da      	uxtb	r2, r3
    9f24:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2c:	701a      	strb	r2, [r3, #0]
    9f2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f36:	781b      	ldrb	r3, [r3, #0]
    9f38:	2bff      	cmp	r3, #255	; 0xff
    9f3a:	d105      	bne.n	9f48 <send_desired+0x27c>
    9f3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f44:	2200      	movs	r2, #0
    9f46:	701a      	strb	r2, [r3, #0]
    9f48:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f50:	781b      	ldrb	r3, [r3, #0]
    9f52:	461a      	mov	r2, r3
    9f54:	f64c 0374 	movw	r3, #51316	; 0xc874
    9f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5c:	7899      	ldrb	r1, [r3, #2]
    9f5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f66:	5499      	strb	r1, [r3, r2]
    9f68:	4bae      	ldr	r3, [pc, #696]	; (a224 <send_desired+0x558>)
    9f6a:	781a      	ldrb	r2, [r3, #0]
    9f6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	4413      	add	r3, r2
    9f78:	b2da      	uxtb	r2, r3
    9f7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f82:	701a      	strb	r2, [r3, #0]
    9f84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8c:	781a      	ldrb	r2, [r3, #0]
    9f8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	4413      	add	r3, r2
    9f9a:	b2da      	uxtb	r2, r3
    9f9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa4:	701a      	strb	r2, [r3, #0]
    9fa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	3301      	adds	r3, #1
    9fb2:	b2da      	uxtb	r2, r3
    9fb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbc:	701a      	strb	r2, [r3, #0]
    9fbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc6:	781b      	ldrb	r3, [r3, #0]
    9fc8:	2bff      	cmp	r3, #255	; 0xff
    9fca:	d105      	bne.n	9fd8 <send_desired+0x30c>
    9fcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd4:	2200      	movs	r2, #0
    9fd6:	701a      	strb	r2, [r3, #0]
    9fd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	461a      	mov	r2, r3
    9fe4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fec:	78d9      	ldrb	r1, [r3, #3]
    9fee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff6:	5499      	strb	r1, [r3, r2]
    9ff8:	4b8b      	ldr	r3, [pc, #556]	; (a228 <send_desired+0x55c>)
    9ffa:	781a      	ldrb	r2, [r3, #0]
    9ffc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	4413      	add	r3, r2
    a008:	b2da      	uxtb	r2, r3
    a00a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	701a      	strb	r2, [r3, #0]
    a014:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	781a      	ldrb	r2, [r3, #0]
    a01e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	4413      	add	r3, r2
    a02a:	b2da      	uxtb	r2, r3
    a02c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a034:	701a      	strb	r2, [r3, #0]
    a036:	f24c 5349 	movw	r3, #50505	; 0xc549
    a03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	3301      	adds	r3, #1
    a042:	b2da      	uxtb	r2, r3
    a044:	f24c 5349 	movw	r3, #50505	; 0xc549
    a048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04c:	701a      	strb	r2, [r3, #0]
    a04e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a056:	781b      	ldrb	r3, [r3, #0]
    a058:	2bff      	cmp	r3, #255	; 0xff
    a05a:	d105      	bne.n	a068 <send_desired+0x39c>
    a05c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	2200      	movs	r2, #0
    a066:	701a      	strb	r2, [r3, #0]
    a068:	f24c 5349 	movw	r3, #50505	; 0xc549
    a06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a070:	781b      	ldrb	r3, [r3, #0]
    a072:	461a      	mov	r2, r3
    a074:	f64c 0378 	movw	r3, #51320	; 0xc878
    a078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07c:	7819      	ldrb	r1, [r3, #0]
    a07e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a086:	5499      	strb	r1, [r3, r2]
    a088:	f64c 0378 	movw	r3, #51320	; 0xc878
    a08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a090:	781a      	ldrb	r2, [r3, #0]
    a092:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09a:	781b      	ldrb	r3, [r3, #0]
    a09c:	4413      	add	r3, r2
    a09e:	b2da      	uxtb	r2, r3
    a0a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a8:	701a      	strb	r2, [r3, #0]
    a0aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b2:	781a      	ldrb	r2, [r3, #0]
    a0b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0bc:	781b      	ldrb	r3, [r3, #0]
    a0be:	4413      	add	r3, r2
    a0c0:	b2da      	uxtb	r2, r3
    a0c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ca:	701a      	strb	r2, [r3, #0]
    a0cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d4:	781b      	ldrb	r3, [r3, #0]
    a0d6:	3301      	adds	r3, #1
    a0d8:	b2da      	uxtb	r2, r3
    a0da:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e2:	701a      	strb	r2, [r3, #0]
    a0e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ec:	781b      	ldrb	r3, [r3, #0]
    a0ee:	2bff      	cmp	r3, #255	; 0xff
    a0f0:	d105      	bne.n	a0fe <send_desired+0x432>
    a0f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fa:	2200      	movs	r2, #0
    a0fc:	701a      	strb	r2, [r3, #0]
    a0fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	461a      	mov	r2, r3
    a10a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a112:	7859      	ldrb	r1, [r3, #1]
    a114:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11c:	5499      	strb	r1, [r3, r2]
    a11e:	4b43      	ldr	r3, [pc, #268]	; (a22c <send_desired+0x560>)
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	4413      	add	r3, r2
    a12e:	b2da      	uxtb	r2, r3
    a130:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a142:	781a      	ldrb	r2, [r3, #0]
    a144:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14c:	781b      	ldrb	r3, [r3, #0]
    a14e:	4413      	add	r3, r2
    a150:	b2da      	uxtb	r2, r3
    a152:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15a:	701a      	strb	r2, [r3, #0]
    a15c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a164:	781b      	ldrb	r3, [r3, #0]
    a166:	3301      	adds	r3, #1
    a168:	b2da      	uxtb	r2, r3
    a16a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a172:	701a      	strb	r2, [r3, #0]
    a174:	f24c 5349 	movw	r3, #50505	; 0xc549
    a178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17c:	781b      	ldrb	r3, [r3, #0]
    a17e:	2bff      	cmp	r3, #255	; 0xff
    a180:	d105      	bne.n	a18e <send_desired+0x4c2>
    a182:	f24c 5349 	movw	r3, #50505	; 0xc549
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	2200      	movs	r2, #0
    a18c:	701a      	strb	r2, [r3, #0]
    a18e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a196:	781b      	ldrb	r3, [r3, #0]
    a198:	461a      	mov	r2, r3
    a19a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a2:	7899      	ldrb	r1, [r3, #2]
    a1a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ac:	5499      	strb	r1, [r3, r2]
    a1ae:	4b20      	ldr	r3, [pc, #128]	; (a230 <send_desired+0x564>)
    a1b0:	781a      	ldrb	r2, [r3, #0]
    a1b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	4413      	add	r3, r2
    a1be:	b2da      	uxtb	r2, r3
    a1c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c8:	701a      	strb	r2, [r3, #0]
    a1ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d2:	781a      	ldrb	r2, [r3, #0]
    a1d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1dc:	781b      	ldrb	r3, [r3, #0]
    a1de:	4413      	add	r3, r2
    a1e0:	b2da      	uxtb	r2, r3
    a1e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ea:	701a      	strb	r2, [r3, #0]
    a1ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f4:	781b      	ldrb	r3, [r3, #0]
    a1f6:	3301      	adds	r3, #1
    a1f8:	b2da      	uxtb	r2, r3
    a1fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a202:	701a      	strb	r2, [r3, #0]
    a204:	f24c 5349 	movw	r3, #50505	; 0xc549
    a208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20c:	781b      	ldrb	r3, [r3, #0]
    a20e:	2bff      	cmp	r3, #255	; 0xff
    a210:	d110      	bne.n	a234 <send_desired+0x568>
    a212:	f24c 5349 	movw	r3, #50505	; 0xc549
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	2200      	movs	r2, #0
    a21c:	701a      	strb	r2, [r3, #0]
    a21e:	e009      	b.n	a234 <send_desired+0x568>
    a220:	2004c875 	.word	0x2004c875
    a224:	2004c876 	.word	0x2004c876
    a228:	2004c877 	.word	0x2004c877
    a22c:	2004c879 	.word	0x2004c879
    a230:	2004c87a 	.word	0x2004c87a
    a234:	f24c 5349 	movw	r3, #50505	; 0xc549
    a238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23c:	781b      	ldrb	r3, [r3, #0]
    a23e:	461a      	mov	r2, r3
    a240:	f64c 0378 	movw	r3, #51320	; 0xc878
    a244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a248:	78d9      	ldrb	r1, [r3, #3]
    a24a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a252:	5499      	strb	r1, [r3, r2]
    a254:	4bd3      	ldr	r3, [pc, #844]	; (a5a4 <send_desired+0x8d8>)
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781a      	ldrb	r2, [r3, #0]
    a27a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a282:	781b      	ldrb	r3, [r3, #0]
    a284:	4413      	add	r3, r2
    a286:	b2da      	uxtb	r2, r3
    a288:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	701a      	strb	r2, [r3, #0]
    a292:	f24c 5349 	movw	r3, #50505	; 0xc549
    a296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29a:	781b      	ldrb	r3, [r3, #0]
    a29c:	3301      	adds	r3, #1
    a29e:	b2da      	uxtb	r2, r3
    a2a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a8:	701a      	strb	r2, [r3, #0]
    a2aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	2bff      	cmp	r3, #255	; 0xff
    a2b6:	d105      	bne.n	a2c4 <send_desired+0x5f8>
    a2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	2200      	movs	r2, #0
    a2c2:	701a      	strb	r2, [r3, #0]
    a2c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2cc:	781b      	ldrb	r3, [r3, #0]
    a2ce:	461a      	mov	r2, r3
    a2d0:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d8:	7819      	ldrb	r1, [r3, #0]
    a2da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e2:	5499      	strb	r1, [r3, r2]
    a2e4:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ec:	781a      	ldrb	r2, [r3, #0]
    a2ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	4413      	add	r3, r2
    a2fa:	b2da      	uxtb	r2, r3
    a2fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a304:	701a      	strb	r2, [r3, #0]
    a306:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30e:	781a      	ldrb	r2, [r3, #0]
    a310:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	4413      	add	r3, r2
    a31c:	b2da      	uxtb	r2, r3
    a31e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a326:	701a      	strb	r2, [r3, #0]
    a328:	f24c 5349 	movw	r3, #50505	; 0xc549
    a32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	3301      	adds	r3, #1
    a334:	b2da      	uxtb	r2, r3
    a336:	f24c 5349 	movw	r3, #50505	; 0xc549
    a33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33e:	701a      	strb	r2, [r3, #0]
    a340:	f24c 5349 	movw	r3, #50505	; 0xc549
    a344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	2bff      	cmp	r3, #255	; 0xff
    a34c:	d105      	bne.n	a35a <send_desired+0x68e>
    a34e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a356:	2200      	movs	r2, #0
    a358:	701a      	strb	r2, [r3, #0]
    a35a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	461a      	mov	r2, r3
    a366:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a36e:	7859      	ldrb	r1, [r3, #1]
    a370:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a378:	5499      	strb	r1, [r3, r2]
    a37a:	4b8b      	ldr	r3, [pc, #556]	; (a5a8 <send_desired+0x8dc>)
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4413      	add	r3, r2
    a38a:	b2da      	uxtb	r2, r3
    a38c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	701a      	strb	r2, [r3, #0]
    a396:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781a      	ldrb	r2, [r3, #0]
    a3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	4413      	add	r3, r2
    a3ac:	b2da      	uxtb	r2, r3
    a3ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	701a      	strb	r2, [r3, #0]
    a3b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	3301      	adds	r3, #1
    a3c4:	b2da      	uxtb	r2, r3
    a3c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ce:	701a      	strb	r2, [r3, #0]
    a3d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d8:	781b      	ldrb	r3, [r3, #0]
    a3da:	2bff      	cmp	r3, #255	; 0xff
    a3dc:	d105      	bne.n	a3ea <send_desired+0x71e>
    a3de:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e6:	2200      	movs	r2, #0
    a3e8:	701a      	strb	r2, [r3, #0]
    a3ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	461a      	mov	r2, r3
    a3f6:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fe:	7899      	ldrb	r1, [r3, #2]
    a400:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a408:	5499      	strb	r1, [r3, r2]
    a40a:	4b68      	ldr	r3, [pc, #416]	; (a5ac <send_desired+0x8e0>)
    a40c:	781a      	ldrb	r2, [r3, #0]
    a40e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	4413      	add	r3, r2
    a41a:	b2da      	uxtb	r2, r3
    a41c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a424:	701a      	strb	r2, [r3, #0]
    a426:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42e:	781a      	ldrb	r2, [r3, #0]
    a430:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a438:	781b      	ldrb	r3, [r3, #0]
    a43a:	4413      	add	r3, r2
    a43c:	b2da      	uxtb	r2, r3
    a43e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a446:	701a      	strb	r2, [r3, #0]
    a448:	f24c 5349 	movw	r3, #50505	; 0xc549
    a44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a450:	781b      	ldrb	r3, [r3, #0]
    a452:	3301      	adds	r3, #1
    a454:	b2da      	uxtb	r2, r3
    a456:	f24c 5349 	movw	r3, #50505	; 0xc549
    a45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45e:	701a      	strb	r2, [r3, #0]
    a460:	f24c 5349 	movw	r3, #50505	; 0xc549
    a464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a468:	781b      	ldrb	r3, [r3, #0]
    a46a:	2bff      	cmp	r3, #255	; 0xff
    a46c:	d105      	bne.n	a47a <send_desired+0x7ae>
    a46e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a476:	2200      	movs	r2, #0
    a478:	701a      	strb	r2, [r3, #0]
    a47a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a482:	781b      	ldrb	r3, [r3, #0]
    a484:	461a      	mov	r2, r3
    a486:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48e:	78d9      	ldrb	r1, [r3, #3]
    a490:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a498:	5499      	strb	r1, [r3, r2]
    a49a:	4b45      	ldr	r3, [pc, #276]	; (a5b0 <send_desired+0x8e4>)
    a49c:	781a      	ldrb	r2, [r3, #0]
    a49e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a6:	781b      	ldrb	r3, [r3, #0]
    a4a8:	4413      	add	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4be:	781a      	ldrb	r2, [r3, #0]
    a4c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	4413      	add	r3, r2
    a4cc:	b2da      	uxtb	r2, r3
    a4ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d6:	701a      	strb	r2, [r3, #0]
    a4d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e0:	781b      	ldrb	r3, [r3, #0]
    a4e2:	3301      	adds	r3, #1
    a4e4:	b2da      	uxtb	r2, r3
    a4e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ee:	701a      	strb	r2, [r3, #0]
    a4f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f8:	781b      	ldrb	r3, [r3, #0]
    a4fa:	2bff      	cmp	r3, #255	; 0xff
    a4fc:	d105      	bne.n	a50a <send_desired+0x83e>
    a4fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a506:	2200      	movs	r2, #0
    a508:	701a      	strb	r2, [r3, #0]
    a50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	461a      	mov	r2, r3
    a516:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51e:	7819      	ldrb	r1, [r3, #0]
    a520:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	5499      	strb	r1, [r3, r2]
    a52a:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a532:	781a      	ldrb	r2, [r3, #0]
    a534:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53c:	781b      	ldrb	r3, [r3, #0]
    a53e:	4413      	add	r3, r2
    a540:	b2da      	uxtb	r2, r3
    a542:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54a:	701a      	strb	r2, [r3, #0]
    a54c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a554:	781a      	ldrb	r2, [r3, #0]
    a556:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55e:	781b      	ldrb	r3, [r3, #0]
    a560:	4413      	add	r3, r2
    a562:	b2da      	uxtb	r2, r3
    a564:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56c:	701a      	strb	r2, [r3, #0]
    a56e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a576:	781b      	ldrb	r3, [r3, #0]
    a578:	3301      	adds	r3, #1
    a57a:	b2da      	uxtb	r2, r3
    a57c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a584:	701a      	strb	r2, [r3, #0]
    a586:	f24c 5349 	movw	r3, #50505	; 0xc549
    a58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58e:	781b      	ldrb	r3, [r3, #0]
    a590:	2bff      	cmp	r3, #255	; 0xff
    a592:	d10f      	bne.n	a5b4 <send_desired+0x8e8>
    a594:	f24c 5349 	movw	r3, #50505	; 0xc549
    a598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59c:	2200      	movs	r2, #0
    a59e:	701a      	strb	r2, [r3, #0]
    a5a0:	e008      	b.n	a5b4 <send_desired+0x8e8>
    a5a2:	bf00      	nop
    a5a4:	2004c87b 	.word	0x2004c87b
    a5a8:	2004c8c1 	.word	0x2004c8c1
    a5ac:	2004c8c2 	.word	0x2004c8c2
    a5b0:	2004c8c3 	.word	0x2004c8c3
    a5b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5bc:	781b      	ldrb	r3, [r3, #0]
    a5be:	461a      	mov	r2, r3
    a5c0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c8:	7859      	ldrb	r1, [r3, #1]
    a5ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d2:	5499      	strb	r1, [r3, r2]
    a5d4:	4bd1      	ldr	r3, [pc, #836]	; (a91c <send_desired+0xc50>)
    a5d6:	781a      	ldrb	r2, [r3, #0]
    a5d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	4413      	add	r3, r2
    a5e4:	b2da      	uxtb	r2, r3
    a5e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ee:	701a      	strb	r2, [r3, #0]
    a5f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f8:	781a      	ldrb	r2, [r3, #0]
    a5fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a602:	781b      	ldrb	r3, [r3, #0]
    a604:	4413      	add	r3, r2
    a606:	b2da      	uxtb	r2, r3
    a608:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	701a      	strb	r2, [r3, #0]
    a612:	f24c 5349 	movw	r3, #50505	; 0xc549
    a616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61a:	781b      	ldrb	r3, [r3, #0]
    a61c:	3301      	adds	r3, #1
    a61e:	b2da      	uxtb	r2, r3
    a620:	f24c 5349 	movw	r3, #50505	; 0xc549
    a624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a628:	701a      	strb	r2, [r3, #0]
    a62a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	2bff      	cmp	r3, #255	; 0xff
    a636:	d105      	bne.n	a644 <send_desired+0x978>
    a638:	f24c 5349 	movw	r3, #50505	; 0xc549
    a63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a640:	2200      	movs	r2, #0
    a642:	701a      	strb	r2, [r3, #0]
    a644:	f24c 5349 	movw	r3, #50505	; 0xc549
    a648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a64c:	781b      	ldrb	r3, [r3, #0]
    a64e:	461a      	mov	r2, r3
    a650:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a658:	7899      	ldrb	r1, [r3, #2]
    a65a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a662:	5499      	strb	r1, [r3, r2]
    a664:	4bae      	ldr	r3, [pc, #696]	; (a920 <send_desired+0xc54>)
    a666:	781a      	ldrb	r2, [r3, #0]
    a668:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	4413      	add	r3, r2
    a674:	b2da      	uxtb	r2, r3
    a676:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a67e:	701a      	strb	r2, [r3, #0]
    a680:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a688:	781a      	ldrb	r2, [r3, #0]
    a68a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	4413      	add	r3, r2
    a696:	b2da      	uxtb	r2, r3
    a698:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a0:	701a      	strb	r2, [r3, #0]
    a6a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	3301      	adds	r3, #1
    a6ae:	b2da      	uxtb	r2, r3
    a6b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b8:	701a      	strb	r2, [r3, #0]
    a6ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	2bff      	cmp	r3, #255	; 0xff
    a6c6:	d105      	bne.n	a6d4 <send_desired+0xa08>
    a6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d0:	2200      	movs	r2, #0
    a6d2:	701a      	strb	r2, [r3, #0]
    a6d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6dc:	781b      	ldrb	r3, [r3, #0]
    a6de:	461a      	mov	r2, r3
    a6e0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e8:	78d9      	ldrb	r1, [r3, #3]
    a6ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f2:	5499      	strb	r1, [r3, r2]
    a6f4:	4b8b      	ldr	r3, [pc, #556]	; (a924 <send_desired+0xc58>)
    a6f6:	781a      	ldrb	r2, [r3, #0]
    a6f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a700:	781b      	ldrb	r3, [r3, #0]
    a702:	4413      	add	r3, r2
    a704:	b2da      	uxtb	r2, r3
    a706:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70e:	701a      	strb	r2, [r3, #0]
    a710:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	781a      	ldrb	r2, [r3, #0]
    a71a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a722:	781b      	ldrb	r3, [r3, #0]
    a724:	4413      	add	r3, r2
    a726:	b2da      	uxtb	r2, r3
    a728:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a730:	701a      	strb	r2, [r3, #0]
    a732:	f24c 5349 	movw	r3, #50505	; 0xc549
    a736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73a:	781b      	ldrb	r3, [r3, #0]
    a73c:	3301      	adds	r3, #1
    a73e:	b2da      	uxtb	r2, r3
    a740:	f24c 5349 	movw	r3, #50505	; 0xc549
    a744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a748:	701a      	strb	r2, [r3, #0]
    a74a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a752:	781b      	ldrb	r3, [r3, #0]
    a754:	2bff      	cmp	r3, #255	; 0xff
    a756:	d105      	bne.n	a764 <send_desired+0xa98>
    a758:	f24c 5349 	movw	r3, #50505	; 0xc549
    a75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a760:	2200      	movs	r2, #0
    a762:	701a      	strb	r2, [r3, #0]
    a764:	f24c 5349 	movw	r3, #50505	; 0xc549
    a768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	461a      	mov	r2, r3
    a770:	f240 5374 	movw	r3, #1396	; 0x574
    a774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a778:	7819      	ldrb	r1, [r3, #0]
    a77a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a782:	5499      	strb	r1, [r3, r2]
    a784:	f240 5374 	movw	r3, #1396	; 0x574
    a788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78c:	781a      	ldrb	r2, [r3, #0]
    a78e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a796:	781b      	ldrb	r3, [r3, #0]
    a798:	4413      	add	r3, r2
    a79a:	b2da      	uxtb	r2, r3
    a79c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a4:	701a      	strb	r2, [r3, #0]
    a7a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ae:	781a      	ldrb	r2, [r3, #0]
    a7b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b8:	781b      	ldrb	r3, [r3, #0]
    a7ba:	4413      	add	r3, r2
    a7bc:	b2da      	uxtb	r2, r3
    a7be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c6:	701a      	strb	r2, [r3, #0]
    a7c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	3301      	adds	r3, #1
    a7d4:	b2da      	uxtb	r2, r3
    a7d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7de:	701a      	strb	r2, [r3, #0]
    a7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e8:	781b      	ldrb	r3, [r3, #0]
    a7ea:	2bff      	cmp	r3, #255	; 0xff
    a7ec:	d105      	bne.n	a7fa <send_desired+0xb2e>
    a7ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f6:	2200      	movs	r2, #0
    a7f8:	701a      	strb	r2, [r3, #0]
    a7fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a802:	781b      	ldrb	r3, [r3, #0]
    a804:	461a      	mov	r2, r3
    a806:	f240 5374 	movw	r3, #1396	; 0x574
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	7859      	ldrb	r1, [r3, #1]
    a810:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a818:	5499      	strb	r1, [r3, r2]
    a81a:	4b43      	ldr	r3, [pc, #268]	; (a928 <send_desired+0xc5c>)
    a81c:	781a      	ldrb	r2, [r3, #0]
    a81e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	4413      	add	r3, r2
    a82a:	b2da      	uxtb	r2, r3
    a82c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a834:	701a      	strb	r2, [r3, #0]
    a836:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a83e:	781a      	ldrb	r2, [r3, #0]
    a840:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a848:	781b      	ldrb	r3, [r3, #0]
    a84a:	4413      	add	r3, r2
    a84c:	b2da      	uxtb	r2, r3
    a84e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a856:	701a      	strb	r2, [r3, #0]
    a858:	f24c 5349 	movw	r3, #50505	; 0xc549
    a85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a860:	781b      	ldrb	r3, [r3, #0]
    a862:	3301      	adds	r3, #1
    a864:	b2da      	uxtb	r2, r3
    a866:	f24c 5349 	movw	r3, #50505	; 0xc549
    a86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a86e:	701a      	strb	r2, [r3, #0]
    a870:	f24c 5349 	movw	r3, #50505	; 0xc549
    a874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a878:	781b      	ldrb	r3, [r3, #0]
    a87a:	2bff      	cmp	r3, #255	; 0xff
    a87c:	d105      	bne.n	a88a <send_desired+0xbbe>
    a87e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a886:	2200      	movs	r2, #0
    a888:	701a      	strb	r2, [r3, #0]
    a88a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	461a      	mov	r2, r3
    a896:	f240 5374 	movw	r3, #1396	; 0x574
    a89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89e:	7899      	ldrb	r1, [r3, #2]
    a8a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a8:	5499      	strb	r1, [r3, r2]
    a8aa:	4b20      	ldr	r3, [pc, #128]	; (a92c <send_desired+0xc60>)
    a8ac:	781a      	ldrb	r2, [r3, #0]
    a8ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	4413      	add	r3, r2
    a8ba:	b2da      	uxtb	r2, r3
    a8bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c4:	701a      	strb	r2, [r3, #0]
    a8c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ce:	781a      	ldrb	r2, [r3, #0]
    a8d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d8:	781b      	ldrb	r3, [r3, #0]
    a8da:	4413      	add	r3, r2
    a8dc:	b2da      	uxtb	r2, r3
    a8de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e6:	701a      	strb	r2, [r3, #0]
    a8e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	3301      	adds	r3, #1
    a8f4:	b2da      	uxtb	r2, r3
    a8f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fe:	701a      	strb	r2, [r3, #0]
    a900:	f24c 5349 	movw	r3, #50505	; 0xc549
    a904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	2bff      	cmp	r3, #255	; 0xff
    a90c:	d110      	bne.n	a930 <send_desired+0xc64>
    a90e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a916:	2200      	movs	r2, #0
    a918:	701a      	strb	r2, [r3, #0]
    a91a:	e009      	b.n	a930 <send_desired+0xc64>
    a91c:	2004c8c5 	.word	0x2004c8c5
    a920:	2004c8c6 	.word	0x2004c8c6
    a924:	2004c8c7 	.word	0x2004c8c7
    a928:	20000575 	.word	0x20000575
    a92c:	20000576 	.word	0x20000576
    a930:	f24c 5349 	movw	r3, #50505	; 0xc549
    a934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	461a      	mov	r2, r3
    a93c:	f240 5374 	movw	r3, #1396	; 0x574
    a940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a944:	78d9      	ldrb	r1, [r3, #3]
    a946:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94e:	5499      	strb	r1, [r3, r2]
    a950:	4b79      	ldr	r3, [pc, #484]	; (ab38 <send_desired+0xe6c>)
    a952:	781a      	ldrb	r2, [r3, #0]
    a954:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95c:	781b      	ldrb	r3, [r3, #0]
    a95e:	4413      	add	r3, r2
    a960:	b2da      	uxtb	r2, r3
    a962:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96a:	701a      	strb	r2, [r3, #0]
    a96c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a974:	781a      	ldrb	r2, [r3, #0]
    a976:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97e:	781b      	ldrb	r3, [r3, #0]
    a980:	4413      	add	r3, r2
    a982:	b2da      	uxtb	r2, r3
    a984:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98c:	701a      	strb	r2, [r3, #0]
    a98e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	3301      	adds	r3, #1
    a99a:	b2da      	uxtb	r2, r3
    a99c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a4:	701a      	strb	r2, [r3, #0]
    a9a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ae:	781b      	ldrb	r3, [r3, #0]
    a9b0:	2bff      	cmp	r3, #255	; 0xff
    a9b2:	d105      	bne.n	a9c0 <send_desired+0xcf4>
    a9b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9bc:	2200      	movs	r2, #0
    a9be:	701a      	strb	r2, [r3, #0]
    a9c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	461a      	mov	r2, r3
    a9cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d4:	7819      	ldrb	r1, [r3, #0]
    a9d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9de:	5499      	strb	r1, [r3, r2]
    a9e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e8:	781b      	ldrb	r3, [r3, #0]
    a9ea:	3301      	adds	r3, #1
    a9ec:	b2da      	uxtb	r2, r3
    a9ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f6:	701a      	strb	r2, [r3, #0]
    a9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa00:	781b      	ldrb	r3, [r3, #0]
    aa02:	2bff      	cmp	r3, #255	; 0xff
    aa04:	d105      	bne.n	aa12 <send_desired+0xd46>
    aa06:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa0e:	2200      	movs	r2, #0
    aa10:	701a      	strb	r2, [r3, #0]
    aa12:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1a:	781b      	ldrb	r3, [r3, #0]
    aa1c:	461a      	mov	r2, r3
    aa1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa26:	7819      	ldrb	r1, [r3, #0]
    aa28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa30:	5499      	strb	r1, [r3, r2]
    aa32:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3a:	781b      	ldrb	r3, [r3, #0]
    aa3c:	3301      	adds	r3, #1
    aa3e:	b2da      	uxtb	r2, r3
    aa40:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa48:	701a      	strb	r2, [r3, #0]
    aa4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa52:	781b      	ldrb	r3, [r3, #0]
    aa54:	2bff      	cmp	r3, #255	; 0xff
    aa56:	d105      	bne.n	aa64 <send_desired+0xd98>
    aa58:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa60:	2200      	movs	r2, #0
    aa62:	701a      	strb	r2, [r3, #0]
    aa64:	f242 0339 	movw	r3, #8249	; 0x2039
    aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa6c:	781b      	ldrb	r3, [r3, #0]
    aa6e:	b2db      	uxtb	r3, r3
    aa70:	f003 0310 	and.w	r3, r3, #16
    aa74:	2b00      	cmp	r3, #0
    aa76:	d15a      	bne.n	ab2e <send_desired+0xe62>
    aa78:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	b2db      	uxtb	r3, r3
    aa84:	461a      	mov	r2, r3
    aa86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	5c9a      	ldrb	r2, [r3, r2]
    aa90:	f24c 634b 	movw	r3, #50763	; 0xc64b
    aa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa98:	701a      	strb	r2, [r3, #0]
    aa9a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    aa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa2:	2200      	movs	r2, #0
    aaa4:	701a      	strb	r2, [r3, #0]
    aaa6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	b2db      	uxtb	r3, r3
    aab2:	3301      	adds	r3, #1
    aab4:	b2da      	uxtb	r2, r3
    aab6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	701a      	strb	r2, [r3, #0]
    aac0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac8:	781b      	ldrb	r3, [r3, #0]
    aaca:	b2db      	uxtb	r3, r3
    aacc:	2bff      	cmp	r3, #255	; 0xff
    aace:	d105      	bne.n	aadc <send_desired+0xe10>
    aad0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad8:	2200      	movs	r2, #0
    aada:	701a      	strb	r2, [r3, #0]
    aadc:	f242 0338 	movw	r3, #8248	; 0x2038
    aae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae4:	f242 0238 	movw	r2, #8248	; 0x2038
    aae8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aaec:	7812      	ldrb	r2, [r2, #0]
    aaee:	b2d2      	uxtb	r2, r2
    aaf0:	f042 0201 	orr.w	r2, r2, #1
    aaf4:	b2d2      	uxtb	r2, r2
    aaf6:	701a      	strb	r2, [r3, #0]
    aaf8:	f242 0339 	movw	r3, #8249	; 0x2039
    aafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab00:	f242 0239 	movw	r2, #8249	; 0x2039
    ab04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab08:	7812      	ldrb	r2, [r2, #0]
    ab0a:	b2d2      	uxtb	r2, r2
    ab0c:	f042 0210 	orr.w	r2, r2, #16
    ab10:	b2d2      	uxtb	r2, r2
    ab12:	701a      	strb	r2, [r3, #0]
    ab14:	e00b      	b.n	ab2e <send_desired+0xe62>
    ab16:	f24c 5348 	movw	r3, #50504	; 0xc548
    ab1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1e:	781b      	ldrb	r3, [r3, #0]
    ab20:	3301      	adds	r3, #1
    ab22:	b2da      	uxtb	r2, r3
    ab24:	f24c 5348 	movw	r3, #50504	; 0xc548
    ab28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2c:	701a      	strb	r2, [r3, #0]
}
    ab2e:	46bd      	mov	sp, r7
    ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab34:	4770      	bx	lr
    ab36:	bf00      	nop
    ab38:	20000577 	.word	0x20000577

0000ab3c <send_bat>:
void send_bat(void){  //2000ms
    ab3c:	b480      	push	{r7}
    ab3e:	af00      	add	r7, sp, #0
  if(!boot)
    ab40:	f240 533d 	movw	r3, #1341	; 0x53d
    ab44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab48:	781b      	ldrb	r3, [r3, #0]
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	f040 83af 	bne.w	b2ae <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    ab50:	f24c 5341 	movw	r3, #50497	; 0xc541
    ab54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab58:	781a      	ldrb	r2, [r3, #0]
    ab5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ab5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ab62:	fba3 1302 	umull	r1, r3, r3, r2
    ab66:	0919      	lsrs	r1, r3, #4
    ab68:	460b      	mov	r3, r1
    ab6a:	009b      	lsls	r3, r3, #2
    ab6c:	440b      	add	r3, r1
    ab6e:	009b      	lsls	r3, r3, #2
    ab70:	1ad3      	subs	r3, r2, r3
    ab72:	b2db      	uxtb	r3, r3
    ab74:	2b08      	cmp	r3, #8
    ab76:	f040 839a 	bne.w	b2ae <send_bat+0x772>
    ab7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab82:	781a      	ldrb	r2, [r3, #0]
    ab84:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	b2db      	uxtb	r3, r3
    ab90:	429a      	cmp	r2, r3
    ab92:	d313      	bcc.n	abbc <send_bat+0x80>
    ab94:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	781b      	ldrb	r3, [r3, #0]
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	461a      	mov	r2, r3
    aba2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abaa:	781b      	ldrb	r3, [r3, #0]
    abac:	1ad3      	subs	r3, r2, r3
    abae:	33ff      	adds	r3, #255	; 0xff
    abb0:	2b0c      	cmp	r3, #12
    abb2:	bfd4      	ite	le
    abb4:	2300      	movle	r3, #0
    abb6:	2301      	movgt	r3, #1
    abb8:	b2db      	uxtb	r3, r3
    abba:	e011      	b.n	abe0 <send_bat+0xa4>
    abbc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	b2db      	uxtb	r3, r3
    abc8:	461a      	mov	r2, r3
    abca:	f24c 5349 	movw	r3, #50505	; 0xc549
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	1ad3      	subs	r3, r2, r3
    abd6:	2b0c      	cmp	r3, #12
    abd8:	bfd4      	ite	le
    abda:	2300      	movle	r3, #0
    abdc:	2301      	movgt	r3, #1
    abde:	b2db      	uxtb	r3, r3
    abe0:	2b00      	cmp	r3, #0
    abe2:	f000 8358 	beq.w	b296 <send_bat+0x75a>
    abe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abee:	781b      	ldrb	r3, [r3, #0]
    abf0:	461a      	mov	r2, r3
    abf2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfa:	2105      	movs	r1, #5
    abfc:	5499      	strb	r1, [r3, r2]
    abfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	3301      	adds	r3, #1
    ac0a:	b2da      	uxtb	r2, r3
    ac0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac14:	701a      	strb	r2, [r3, #0]
    ac16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1e:	781b      	ldrb	r3, [r3, #0]
    ac20:	2bff      	cmp	r3, #255	; 0xff
    ac22:	d105      	bne.n	ac30 <send_bat+0xf4>
    ac24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac2c:	2200      	movs	r2, #0
    ac2e:	701a      	strb	r2, [r3, #0]
    ac30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	461a      	mov	r2, r3
    ac3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac44:	210c      	movs	r1, #12
    ac46:	5499      	strb	r1, [r3, r2]
    ac48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	3301      	adds	r3, #1
    ac54:	b2da      	uxtb	r2, r3
    ac56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	701a      	strb	r2, [r3, #0]
    ac60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	2bff      	cmp	r3, #255	; 0xff
    ac6c:	d105      	bne.n	ac7a <send_bat+0x13e>
    ac6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	2200      	movs	r2, #0
    ac78:	701a      	strb	r2, [r3, #0]
    ac7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac82:	220c      	movs	r2, #12
    ac84:	701a      	strb	r2, [r3, #0]
    ac86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	220c      	movs	r2, #12
    ac90:	701a      	strb	r2, [r3, #0]
    ac92:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9a:	781b      	ldrb	r3, [r3, #0]
    ac9c:	461a      	mov	r2, r3
    ac9e:	f24c 5332 	movw	r3, #50482	; 0xc532
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	7819      	ldrb	r1, [r3, #0]
    aca8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	5499      	strb	r1, [r3, r2]
    acb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acba:	781a      	ldrb	r2, [r3, #0]
    acbc:	f24c 5332 	movw	r3, #50482	; 0xc532
    acc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc4:	781b      	ldrb	r3, [r3, #0]
    acc6:	4413      	add	r3, r2
    acc8:	b2da      	uxtb	r2, r3
    acca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	701a      	strb	r2, [r3, #0]
    acd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	781a      	ldrb	r2, [r3, #0]
    acde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ace2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace6:	781b      	ldrb	r3, [r3, #0]
    ace8:	4413      	add	r3, r2
    acea:	b2da      	uxtb	r2, r3
    acec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	3301      	adds	r3, #1
    ad02:	b2da      	uxtb	r2, r3
    ad04:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0c:	701a      	strb	r2, [r3, #0]
    ad0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	2bff      	cmp	r3, #255	; 0xff
    ad1a:	d105      	bne.n	ad28 <send_bat+0x1ec>
    ad1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad24:	2200      	movs	r2, #0
    ad26:	701a      	strb	r2, [r3, #0]
    ad28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad30:	781b      	ldrb	r3, [r3, #0]
    ad32:	461a      	mov	r2, r3
    ad34:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	7819      	ldrb	r1, [r3, #0]
    ad3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad46:	5499      	strb	r1, [r3, r2]
    ad48:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad50:	781a      	ldrb	r2, [r3, #0]
    ad52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5a:	781b      	ldrb	r3, [r3, #0]
    ad5c:	4413      	add	r3, r2
    ad5e:	b2da      	uxtb	r2, r3
    ad60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad68:	701a      	strb	r2, [r3, #0]
    ad6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad72:	781a      	ldrb	r2, [r3, #0]
    ad74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7c:	781b      	ldrb	r3, [r3, #0]
    ad7e:	4413      	add	r3, r2
    ad80:	b2da      	uxtb	r2, r3
    ad82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8a:	701a      	strb	r2, [r3, #0]
    ad8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	3301      	adds	r3, #1
    ad98:	b2da      	uxtb	r2, r3
    ad9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada2:	701a      	strb	r2, [r3, #0]
    ada4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ada8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adac:	781b      	ldrb	r3, [r3, #0]
    adae:	2bff      	cmp	r3, #255	; 0xff
    adb0:	d105      	bne.n	adbe <send_bat+0x282>
    adb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    adb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adba:	2200      	movs	r2, #0
    adbc:	701a      	strb	r2, [r3, #0]
    adbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    adc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	461a      	mov	r2, r3
    adca:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    adce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add2:	7859      	ldrb	r1, [r3, #1]
    add4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    add8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    addc:	5499      	strb	r1, [r3, r2]
    adde:	4bd5      	ldr	r3, [pc, #852]	; (b134 <send_bat+0x5f8>)
    ade0:	781a      	ldrb	r2, [r3, #0]
    ade2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ade6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adea:	781b      	ldrb	r3, [r3, #0]
    adec:	4413      	add	r3, r2
    adee:	b2da      	uxtb	r2, r3
    adf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	701a      	strb	r2, [r3, #0]
    adfa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae02:	781a      	ldrb	r2, [r3, #0]
    ae04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0c:	781b      	ldrb	r3, [r3, #0]
    ae0e:	4413      	add	r3, r2
    ae10:	b2da      	uxtb	r2, r3
    ae12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1a:	701a      	strb	r2, [r3, #0]
    ae1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae24:	781b      	ldrb	r3, [r3, #0]
    ae26:	3301      	adds	r3, #1
    ae28:	b2da      	uxtb	r2, r3
    ae2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae32:	701a      	strb	r2, [r3, #0]
    ae34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3c:	781b      	ldrb	r3, [r3, #0]
    ae3e:	2bff      	cmp	r3, #255	; 0xff
    ae40:	d105      	bne.n	ae4e <send_bat+0x312>
    ae42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4a:	2200      	movs	r2, #0
    ae4c:	701a      	strb	r2, [r3, #0]
    ae4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	461a      	mov	r2, r3
    ae5a:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae62:	7819      	ldrb	r1, [r3, #0]
    ae64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	5499      	strb	r1, [r3, r2]
    ae6e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	781a      	ldrb	r2, [r3, #0]
    ae78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	4413      	add	r3, r2
    ae84:	b2da      	uxtb	r2, r3
    ae86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	701a      	strb	r2, [r3, #0]
    ae90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae98:	781a      	ldrb	r2, [r3, #0]
    ae9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea2:	781b      	ldrb	r3, [r3, #0]
    aea4:	4413      	add	r3, r2
    aea6:	b2da      	uxtb	r2, r3
    aea8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	3301      	adds	r3, #1
    aebe:	b2da      	uxtb	r2, r3
    aec0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec8:	701a      	strb	r2, [r3, #0]
    aeca:	f24c 5349 	movw	r3, #50505	; 0xc549
    aece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed2:	781b      	ldrb	r3, [r3, #0]
    aed4:	2bff      	cmp	r3, #255	; 0xff
    aed6:	d105      	bne.n	aee4 <send_bat+0x3a8>
    aed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee0:	2200      	movs	r2, #0
    aee2:	701a      	strb	r2, [r3, #0]
    aee4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	461a      	mov	r2, r3
    aef0:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    aef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef8:	7819      	ldrb	r1, [r3, #0]
    aefa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af02:	5499      	strb	r1, [r3, r2]
    af04:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0c:	781a      	ldrb	r2, [r3, #0]
    af0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af16:	781b      	ldrb	r3, [r3, #0]
    af18:	4413      	add	r3, r2
    af1a:	b2da      	uxtb	r2, r3
    af1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af24:	701a      	strb	r2, [r3, #0]
    af26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2e:	781a      	ldrb	r2, [r3, #0]
    af30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af38:	781b      	ldrb	r3, [r3, #0]
    af3a:	4413      	add	r3, r2
    af3c:	b2da      	uxtb	r2, r3
    af3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af46:	701a      	strb	r2, [r3, #0]
    af48:	f24c 5349 	movw	r3, #50505	; 0xc549
    af4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af50:	781b      	ldrb	r3, [r3, #0]
    af52:	3301      	adds	r3, #1
    af54:	b2da      	uxtb	r2, r3
    af56:	f24c 5349 	movw	r3, #50505	; 0xc549
    af5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5e:	701a      	strb	r2, [r3, #0]
    af60:	f24c 5349 	movw	r3, #50505	; 0xc549
    af64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af68:	781b      	ldrb	r3, [r3, #0]
    af6a:	2bff      	cmp	r3, #255	; 0xff
    af6c:	d105      	bne.n	af7a <send_bat+0x43e>
    af6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af76:	2200      	movs	r2, #0
    af78:	701a      	strb	r2, [r3, #0]
    af7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    af7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	461a      	mov	r2, r3
    af86:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8e:	7859      	ldrb	r1, [r3, #1]
    af90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af98:	5499      	strb	r1, [r3, r2]
    af9a:	4b67      	ldr	r3, [pc, #412]	; (b138 <send_bat+0x5fc>)
    af9c:	781a      	ldrb	r2, [r3, #0]
    af9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa6:	781b      	ldrb	r3, [r3, #0]
    afa8:	4413      	add	r3, r2
    afaa:	b2da      	uxtb	r2, r3
    afac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb4:	701a      	strb	r2, [r3, #0]
    afb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	781a      	ldrb	r2, [r3, #0]
    afc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc8:	781b      	ldrb	r3, [r3, #0]
    afca:	4413      	add	r3, r2
    afcc:	b2da      	uxtb	r2, r3
    afce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd6:	701a      	strb	r2, [r3, #0]
    afd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    afdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe0:	781b      	ldrb	r3, [r3, #0]
    afe2:	3301      	adds	r3, #1
    afe4:	b2da      	uxtb	r2, r3
    afe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    afea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afee:	701a      	strb	r2, [r3, #0]
    aff0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff8:	781b      	ldrb	r3, [r3, #0]
    affa:	2bff      	cmp	r3, #255	; 0xff
    affc:	d105      	bne.n	b00a <send_bat+0x4ce>
    affe:	f24c 5349 	movw	r3, #50505	; 0xc549
    b002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b006:	2200      	movs	r2, #0
    b008:	701a      	strb	r2, [r3, #0]
    b00a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	461a      	mov	r2, r3
    b016:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	7819      	ldrb	r1, [r3, #0]
    b020:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b028:	5499      	strb	r1, [r3, r2]
    b02a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b032:	781a      	ldrb	r2, [r3, #0]
    b034:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03c:	781b      	ldrb	r3, [r3, #0]
    b03e:	4413      	add	r3, r2
    b040:	b2da      	uxtb	r2, r3
    b042:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04a:	701a      	strb	r2, [r3, #0]
    b04c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b054:	781a      	ldrb	r2, [r3, #0]
    b056:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	781b      	ldrb	r3, [r3, #0]
    b060:	4413      	add	r3, r2
    b062:	b2da      	uxtb	r2, r3
    b064:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06c:	701a      	strb	r2, [r3, #0]
    b06e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b076:	781b      	ldrb	r3, [r3, #0]
    b078:	3301      	adds	r3, #1
    b07a:	b2da      	uxtb	r2, r3
    b07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b084:	701a      	strb	r2, [r3, #0]
    b086:	f24c 5349 	movw	r3, #50505	; 0xc549
    b08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	2bff      	cmp	r3, #255	; 0xff
    b092:	d105      	bne.n	b0a0 <send_bat+0x564>
    b094:	f24c 5349 	movw	r3, #50505	; 0xc549
    b098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09c:	2200      	movs	r2, #0
    b09e:	701a      	strb	r2, [r3, #0]
    b0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	461a      	mov	r2, r3
    b0ac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b4:	7859      	ldrb	r1, [r3, #1]
    b0b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0be:	5499      	strb	r1, [r3, r2]
    b0c0:	4b1e      	ldr	r3, [pc, #120]	; (b13c <send_bat+0x600>)
    b0c2:	781a      	ldrb	r2, [r3, #0]
    b0c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0cc:	781b      	ldrb	r3, [r3, #0]
    b0ce:	4413      	add	r3, r2
    b0d0:	b2da      	uxtb	r2, r3
    b0d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0da:	701a      	strb	r2, [r3, #0]
    b0dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e4:	781a      	ldrb	r2, [r3, #0]
    b0e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ee:	781b      	ldrb	r3, [r3, #0]
    b0f0:	4413      	add	r3, r2
    b0f2:	b2da      	uxtb	r2, r3
    b0f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fc:	701a      	strb	r2, [r3, #0]
    b0fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    b102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b106:	781b      	ldrb	r3, [r3, #0]
    b108:	3301      	adds	r3, #1
    b10a:	b2da      	uxtb	r2, r3
    b10c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b114:	701a      	strb	r2, [r3, #0]
    b116:	f24c 5349 	movw	r3, #50505	; 0xc549
    b11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	2bff      	cmp	r3, #255	; 0xff
    b122:	d10d      	bne.n	b140 <send_bat+0x604>
    b124:	f24c 5349 	movw	r3, #50505	; 0xc549
    b128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12c:	2200      	movs	r2, #0
    b12e:	701a      	strb	r2, [r3, #0]
    b130:	e006      	b.n	b140 <send_bat+0x604>
    b132:	bf00      	nop
    b134:	2004cb2d 	.word	0x2004cb2d
    b138:	2004c8b7 	.word	0x2004c8b7
    b13c:	2004c8b5 	.word	0x2004c8b5
    b140:	f24c 5349 	movw	r3, #50505	; 0xc549
    b144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	461a      	mov	r2, r3
    b14c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b154:	7819      	ldrb	r1, [r3, #0]
    b156:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15e:	5499      	strb	r1, [r3, r2]
    b160:	f24c 5349 	movw	r3, #50505	; 0xc549
    b164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b168:	781b      	ldrb	r3, [r3, #0]
    b16a:	3301      	adds	r3, #1
    b16c:	b2da      	uxtb	r2, r3
    b16e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b176:	701a      	strb	r2, [r3, #0]
    b178:	f24c 5349 	movw	r3, #50505	; 0xc549
    b17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	2bff      	cmp	r3, #255	; 0xff
    b184:	d105      	bne.n	b192 <send_bat+0x656>
    b186:	f24c 5349 	movw	r3, #50505	; 0xc549
    b18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18e:	2200      	movs	r2, #0
    b190:	701a      	strb	r2, [r3, #0]
    b192:	f24c 5349 	movw	r3, #50505	; 0xc549
    b196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	461a      	mov	r2, r3
    b19e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a6:	7819      	ldrb	r1, [r3, #0]
    b1a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b0:	5499      	strb	r1, [r3, r2]
    b1b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ba:	781b      	ldrb	r3, [r3, #0]
    b1bc:	3301      	adds	r3, #1
    b1be:	b2da      	uxtb	r2, r3
    b1c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c8:	701a      	strb	r2, [r3, #0]
    b1ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d2:	781b      	ldrb	r3, [r3, #0]
    b1d4:	2bff      	cmp	r3, #255	; 0xff
    b1d6:	d105      	bne.n	b1e4 <send_bat+0x6a8>
    b1d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e0:	2200      	movs	r2, #0
    b1e2:	701a      	strb	r2, [r3, #0]
    b1e4:	f242 0339 	movw	r3, #8249	; 0x2039
    b1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ec:	781b      	ldrb	r3, [r3, #0]
    b1ee:	b2db      	uxtb	r3, r3
    b1f0:	f003 0310 	and.w	r3, r3, #16
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d15a      	bne.n	b2ae <send_bat+0x772>
    b1f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b200:	781b      	ldrb	r3, [r3, #0]
    b202:	b2db      	uxtb	r3, r3
    b204:	461a      	mov	r2, r3
    b206:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20e:	5c9a      	ldrb	r2, [r3, r2]
    b210:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b218:	701a      	strb	r2, [r3, #0]
    b21a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b222:	2200      	movs	r2, #0
    b224:	701a      	strb	r2, [r3, #0]
    b226:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22e:	781b      	ldrb	r3, [r3, #0]
    b230:	b2db      	uxtb	r3, r3
    b232:	3301      	adds	r3, #1
    b234:	b2da      	uxtb	r2, r3
    b236:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23e:	701a      	strb	r2, [r3, #0]
    b240:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	b2db      	uxtb	r3, r3
    b24c:	2bff      	cmp	r3, #255	; 0xff
    b24e:	d105      	bne.n	b25c <send_bat+0x720>
    b250:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b258:	2200      	movs	r2, #0
    b25a:	701a      	strb	r2, [r3, #0]
    b25c:	f242 0338 	movw	r3, #8248	; 0x2038
    b260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b264:	f242 0238 	movw	r2, #8248	; 0x2038
    b268:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b26c:	7812      	ldrb	r2, [r2, #0]
    b26e:	b2d2      	uxtb	r2, r2
    b270:	f042 0201 	orr.w	r2, r2, #1
    b274:	b2d2      	uxtb	r2, r2
    b276:	701a      	strb	r2, [r3, #0]
    b278:	f242 0339 	movw	r3, #8249	; 0x2039
    b27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b280:	f242 0239 	movw	r2, #8249	; 0x2039
    b284:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b288:	7812      	ldrb	r2, [r2, #0]
    b28a:	b2d2      	uxtb	r2, r2
    b28c:	f042 0210 	orr.w	r2, r2, #16
    b290:	b2d2      	uxtb	r2, r2
    b292:	701a      	strb	r2, [r3, #0]
    b294:	e00b      	b.n	b2ae <send_bat+0x772>
    b296:	f24c 5348 	movw	r3, #50504	; 0xc548
    b29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29e:	781b      	ldrb	r3, [r3, #0]
    b2a0:	3301      	adds	r3, #1
    b2a2:	b2da      	uxtb	r2, r3
    b2a4:	f24c 5348 	movw	r3, #50504	; 0xc548
    b2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ac:	701a      	strb	r2, [r3, #0]
}
    b2ae:	46bd      	mov	sp, r7
    b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b4:	4770      	bx	lr
    b2b6:	bf00      	nop

0000b2b8 <send_climb>:
void send_climb(void){  //2000ms
    b2b8:	b480      	push	{r7}
    b2ba:	af00      	add	r7, sp, #0
  if(!boot)
    b2bc:	f240 533d 	movw	r3, #1341	; 0x53d
    b2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c4:	781b      	ldrb	r3, [r3, #0]
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	f040 8569 	bne.w	bd9e <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b2cc:	f24c 5341 	movw	r3, #50497	; 0xc541
    b2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d4:	781a      	ldrb	r2, [r3, #0]
    b2d6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b2da:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b2de:	fba3 1302 	umull	r1, r3, r3, r2
    b2e2:	0919      	lsrs	r1, r3, #4
    b2e4:	460b      	mov	r3, r1
    b2e6:	009b      	lsls	r3, r3, #2
    b2e8:	440b      	add	r3, r1
    b2ea:	009b      	lsls	r3, r3, #2
    b2ec:	1ad3      	subs	r3, r2, r3
    b2ee:	b2db      	uxtb	r3, r3
    b2f0:	2b12      	cmp	r3, #18
    b2f2:	f040 8554 	bne.w	bd9e <send_climb+0xae6>
    b2f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	781a      	ldrb	r2, [r3, #0]
    b300:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	b2db      	uxtb	r3, r3
    b30c:	429a      	cmp	r2, r3
    b30e:	d313      	bcc.n	b338 <send_climb+0x80>
    b310:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	b2db      	uxtb	r3, r3
    b31c:	461a      	mov	r2, r3
    b31e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b326:	781b      	ldrb	r3, [r3, #0]
    b328:	1ad3      	subs	r3, r2, r3
    b32a:	33ff      	adds	r3, #255	; 0xff
    b32c:	2b12      	cmp	r3, #18
    b32e:	bfd4      	ite	le
    b330:	2300      	movle	r3, #0
    b332:	2301      	movgt	r3, #1
    b334:	b2db      	uxtb	r3, r3
    b336:	e011      	b.n	b35c <send_climb+0xa4>
    b338:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b340:	781b      	ldrb	r3, [r3, #0]
    b342:	b2db      	uxtb	r3, r3
    b344:	461a      	mov	r2, r3
    b346:	f24c 5349 	movw	r3, #50505	; 0xc549
    b34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	1ad3      	subs	r3, r2, r3
    b352:	2b12      	cmp	r3, #18
    b354:	bfd4      	ite	le
    b356:	2300      	movle	r3, #0
    b358:	2301      	movgt	r3, #1
    b35a:	b2db      	uxtb	r3, r3
    b35c:	2b00      	cmp	r3, #0
    b35e:	f000 8512 	beq.w	bd86 <send_climb+0xace>
    b362:	f24c 5349 	movw	r3, #50505	; 0xc549
    b366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	461a      	mov	r2, r3
    b36e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b376:	2105      	movs	r1, #5
    b378:	5499      	strb	r1, [r3, r2]
    b37a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	3301      	adds	r3, #1
    b386:	b2da      	uxtb	r2, r3
    b388:	f24c 5349 	movw	r3, #50505	; 0xc549
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	701a      	strb	r2, [r3, #0]
    b392:	f24c 5349 	movw	r3, #50505	; 0xc549
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	2bff      	cmp	r3, #255	; 0xff
    b39e:	d105      	bne.n	b3ac <send_climb+0xf4>
    b3a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	2200      	movs	r2, #0
    b3aa:	701a      	strb	r2, [r3, #0]
    b3ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b4:	781b      	ldrb	r3, [r3, #0]
    b3b6:	461a      	mov	r2, r3
    b3b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	210e      	movs	r1, #14
    b3c2:	5499      	strb	r1, [r3, r2]
    b3c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	3301      	adds	r3, #1
    b3d0:	b2da      	uxtb	r2, r3
    b3d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	2bff      	cmp	r3, #255	; 0xff
    b3e8:	d105      	bne.n	b3f6 <send_climb+0x13e>
    b3ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f2:	2200      	movs	r2, #0
    b3f4:	701a      	strb	r2, [r3, #0]
    b3f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fe:	220e      	movs	r2, #14
    b400:	701a      	strb	r2, [r3, #0]
    b402:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40a:	220e      	movs	r2, #14
    b40c:	701a      	strb	r2, [r3, #0]
    b40e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	461a      	mov	r2, r3
    b41a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b422:	7819      	ldrb	r1, [r3, #0]
    b424:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42c:	5499      	strb	r1, [r3, r2]
    b42e:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b436:	781a      	ldrb	r2, [r3, #0]
    b438:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b440:	781b      	ldrb	r3, [r3, #0]
    b442:	4413      	add	r3, r2
    b444:	b2da      	uxtb	r2, r3
    b446:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44e:	701a      	strb	r2, [r3, #0]
    b450:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b458:	781a      	ldrb	r2, [r3, #0]
    b45a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b462:	781b      	ldrb	r3, [r3, #0]
    b464:	4413      	add	r3, r2
    b466:	b2da      	uxtb	r2, r3
    b468:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b470:	701a      	strb	r2, [r3, #0]
    b472:	f24c 5349 	movw	r3, #50505	; 0xc549
    b476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	3301      	adds	r3, #1
    b47e:	b2da      	uxtb	r2, r3
    b480:	f24c 5349 	movw	r3, #50505	; 0xc549
    b484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b488:	701a      	strb	r2, [r3, #0]
    b48a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b492:	781b      	ldrb	r3, [r3, #0]
    b494:	2bff      	cmp	r3, #255	; 0xff
    b496:	d105      	bne.n	b4a4 <send_climb+0x1ec>
    b498:	f24c 5349 	movw	r3, #50505	; 0xc549
    b49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a0:	2200      	movs	r2, #0
    b4a2:	701a      	strb	r2, [r3, #0]
    b4a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ac:	781b      	ldrb	r3, [r3, #0]
    b4ae:	461a      	mov	r2, r3
    b4b0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b8:	7859      	ldrb	r1, [r3, #1]
    b4ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c2:	5499      	strb	r1, [r3, r2]
    b4c4:	4bd3      	ldr	r3, [pc, #844]	; (b814 <send_climb+0x55c>)
    b4c6:	781a      	ldrb	r2, [r3, #0]
    b4c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d0:	781b      	ldrb	r3, [r3, #0]
    b4d2:	4413      	add	r3, r2
    b4d4:	b2da      	uxtb	r2, r3
    b4d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4de:	701a      	strb	r2, [r3, #0]
    b4e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e8:	781a      	ldrb	r2, [r3, #0]
    b4ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f2:	781b      	ldrb	r3, [r3, #0]
    b4f4:	4413      	add	r3, r2
    b4f6:	b2da      	uxtb	r2, r3
    b4f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f24c 5349 	movw	r3, #50505	; 0xc549
    b506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	3301      	adds	r3, #1
    b50e:	b2da      	uxtb	r2, r3
    b510:	f24c 5349 	movw	r3, #50505	; 0xc549
    b514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b518:	701a      	strb	r2, [r3, #0]
    b51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b522:	781b      	ldrb	r3, [r3, #0]
    b524:	2bff      	cmp	r3, #255	; 0xff
    b526:	d105      	bne.n	b534 <send_climb+0x27c>
    b528:	f24c 5349 	movw	r3, #50505	; 0xc549
    b52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b530:	2200      	movs	r2, #0
    b532:	701a      	strb	r2, [r3, #0]
    b534:	f24c 5349 	movw	r3, #50505	; 0xc549
    b538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b53c:	781b      	ldrb	r3, [r3, #0]
    b53e:	461a      	mov	r2, r3
    b540:	f64c 0390 	movw	r3, #51344	; 0xc890
    b544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b548:	7819      	ldrb	r1, [r3, #0]
    b54a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b552:	5499      	strb	r1, [r3, r2]
    b554:	f64c 0390 	movw	r3, #51344	; 0xc890
    b558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55c:	781a      	ldrb	r2, [r3, #0]
    b55e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b566:	781b      	ldrb	r3, [r3, #0]
    b568:	4413      	add	r3, r2
    b56a:	b2da      	uxtb	r2, r3
    b56c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b574:	701a      	strb	r2, [r3, #0]
    b576:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57e:	781a      	ldrb	r2, [r3, #0]
    b580:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	4413      	add	r3, r2
    b58c:	b2da      	uxtb	r2, r3
    b58e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	701a      	strb	r2, [r3, #0]
    b598:	f24c 5349 	movw	r3, #50505	; 0xc549
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	781b      	ldrb	r3, [r3, #0]
    b5a2:	3301      	adds	r3, #1
    b5a4:	b2da      	uxtb	r2, r3
    b5a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ae:	701a      	strb	r2, [r3, #0]
    b5b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	2bff      	cmp	r3, #255	; 0xff
    b5bc:	d105      	bne.n	b5ca <send_climb+0x312>
    b5be:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c6:	2200      	movs	r2, #0
    b5c8:	701a      	strb	r2, [r3, #0]
    b5ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d2:	781b      	ldrb	r3, [r3, #0]
    b5d4:	461a      	mov	r2, r3
    b5d6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5de:	7859      	ldrb	r1, [r3, #1]
    b5e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e8:	5499      	strb	r1, [r3, r2]
    b5ea:	4b8b      	ldr	r3, [pc, #556]	; (b818 <send_climb+0x560>)
    b5ec:	781a      	ldrb	r2, [r3, #0]
    b5ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	4413      	add	r3, r2
    b5fa:	b2da      	uxtb	r2, r3
    b5fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b604:	701a      	strb	r2, [r3, #0]
    b606:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60e:	781a      	ldrb	r2, [r3, #0]
    b610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	4413      	add	r3, r2
    b61c:	b2da      	uxtb	r2, r3
    b61e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b626:	701a      	strb	r2, [r3, #0]
    b628:	f24c 5349 	movw	r3, #50505	; 0xc549
    b62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b630:	781b      	ldrb	r3, [r3, #0]
    b632:	3301      	adds	r3, #1
    b634:	b2da      	uxtb	r2, r3
    b636:	f24c 5349 	movw	r3, #50505	; 0xc549
    b63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63e:	701a      	strb	r2, [r3, #0]
    b640:	f24c 5349 	movw	r3, #50505	; 0xc549
    b644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b648:	781b      	ldrb	r3, [r3, #0]
    b64a:	2bff      	cmp	r3, #255	; 0xff
    b64c:	d105      	bne.n	b65a <send_climb+0x3a2>
    b64e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b656:	2200      	movs	r2, #0
    b658:	701a      	strb	r2, [r3, #0]
    b65a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	461a      	mov	r2, r3
    b666:	f64c 0390 	movw	r3, #51344	; 0xc890
    b66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66e:	7899      	ldrb	r1, [r3, #2]
    b670:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b678:	5499      	strb	r1, [r3, r2]
    b67a:	4b68      	ldr	r3, [pc, #416]	; (b81c <send_climb+0x564>)
    b67c:	781a      	ldrb	r2, [r3, #0]
    b67e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b686:	781b      	ldrb	r3, [r3, #0]
    b688:	4413      	add	r3, r2
    b68a:	b2da      	uxtb	r2, r3
    b68c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b694:	701a      	strb	r2, [r3, #0]
    b696:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69e:	781a      	ldrb	r2, [r3, #0]
    b6a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	4413      	add	r3, r2
    b6ac:	b2da      	uxtb	r2, r3
    b6ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b6:	701a      	strb	r2, [r3, #0]
    b6b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	3301      	adds	r3, #1
    b6c4:	b2da      	uxtb	r2, r3
    b6c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ce:	701a      	strb	r2, [r3, #0]
    b6d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d8:	781b      	ldrb	r3, [r3, #0]
    b6da:	2bff      	cmp	r3, #255	; 0xff
    b6dc:	d105      	bne.n	b6ea <send_climb+0x432>
    b6de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e6:	2200      	movs	r2, #0
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	461a      	mov	r2, r3
    b6f6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fe:	78d9      	ldrb	r1, [r3, #3]
    b700:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b708:	5499      	strb	r1, [r3, r2]
    b70a:	4b45      	ldr	r3, [pc, #276]	; (b820 <send_climb+0x568>)
    b70c:	781a      	ldrb	r2, [r3, #0]
    b70e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b716:	781b      	ldrb	r3, [r3, #0]
    b718:	4413      	add	r3, r2
    b71a:	b2da      	uxtb	r2, r3
    b71c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b724:	701a      	strb	r2, [r3, #0]
    b726:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72e:	781a      	ldrb	r2, [r3, #0]
    b730:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b738:	781b      	ldrb	r3, [r3, #0]
    b73a:	4413      	add	r3, r2
    b73c:	b2da      	uxtb	r2, r3
    b73e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b746:	701a      	strb	r2, [r3, #0]
    b748:	f24c 5349 	movw	r3, #50505	; 0xc549
    b74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b750:	781b      	ldrb	r3, [r3, #0]
    b752:	3301      	adds	r3, #1
    b754:	b2da      	uxtb	r2, r3
    b756:	f24c 5349 	movw	r3, #50505	; 0xc549
    b75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	f24c 5349 	movw	r3, #50505	; 0xc549
    b764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	2bff      	cmp	r3, #255	; 0xff
    b76c:	d105      	bne.n	b77a <send_climb+0x4c2>
    b76e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b776:	2200      	movs	r2, #0
    b778:	701a      	strb	r2, [r3, #0]
    b77a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b782:	781b      	ldrb	r3, [r3, #0]
    b784:	461a      	mov	r2, r3
    b786:	f64c 0398 	movw	r3, #51352	; 0xc898
    b78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78e:	7819      	ldrb	r1, [r3, #0]
    b790:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b798:	5499      	strb	r1, [r3, r2]
    b79a:	f64c 0398 	movw	r3, #51352	; 0xc898
    b79e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a2:	781a      	ldrb	r2, [r3, #0]
    b7a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	4413      	add	r3, r2
    b7b0:	b2da      	uxtb	r2, r3
    b7b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ba:	701a      	strb	r2, [r3, #0]
    b7bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c4:	781a      	ldrb	r2, [r3, #0]
    b7c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	4413      	add	r3, r2
    b7d2:	b2da      	uxtb	r2, r3
    b7d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7dc:	701a      	strb	r2, [r3, #0]
    b7de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	781b      	ldrb	r3, [r3, #0]
    b7e8:	3301      	adds	r3, #1
    b7ea:	b2da      	uxtb	r2, r3
    b7ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f4:	701a      	strb	r2, [r3, #0]
    b7f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	781b      	ldrb	r3, [r3, #0]
    b800:	2bff      	cmp	r3, #255	; 0xff
    b802:	d10f      	bne.n	b824 <send_climb+0x56c>
    b804:	f24c 5349 	movw	r3, #50505	; 0xc549
    b808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80c:	2200      	movs	r2, #0
    b80e:	701a      	strb	r2, [r3, #0]
    b810:	e008      	b.n	b824 <send_climb+0x56c>
    b812:	bf00      	nop
    b814:	2004c87d 	.word	0x2004c87d
    b818:	2004c891 	.word	0x2004c891
    b81c:	2004c892 	.word	0x2004c892
    b820:	2004c893 	.word	0x2004c893
    b824:	f24c 5349 	movw	r3, #50505	; 0xc549
    b828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82c:	781b      	ldrb	r3, [r3, #0]
    b82e:	461a      	mov	r2, r3
    b830:	f64c 0398 	movw	r3, #51352	; 0xc898
    b834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b838:	7859      	ldrb	r1, [r3, #1]
    b83a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b842:	5499      	strb	r1, [r3, r2]
    b844:	4bd1      	ldr	r3, [pc, #836]	; (bb8c <send_climb+0x8d4>)
    b846:	781a      	ldrb	r2, [r3, #0]
    b848:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b850:	781b      	ldrb	r3, [r3, #0]
    b852:	4413      	add	r3, r2
    b854:	b2da      	uxtb	r2, r3
    b856:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85e:	701a      	strb	r2, [r3, #0]
    b860:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b868:	781a      	ldrb	r2, [r3, #0]
    b86a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b872:	781b      	ldrb	r3, [r3, #0]
    b874:	4413      	add	r3, r2
    b876:	b2da      	uxtb	r2, r3
    b878:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	701a      	strb	r2, [r3, #0]
    b882:	f24c 5349 	movw	r3, #50505	; 0xc549
    b886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88a:	781b      	ldrb	r3, [r3, #0]
    b88c:	3301      	adds	r3, #1
    b88e:	b2da      	uxtb	r2, r3
    b890:	f24c 5349 	movw	r3, #50505	; 0xc549
    b894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b898:	701a      	strb	r2, [r3, #0]
    b89a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a2:	781b      	ldrb	r3, [r3, #0]
    b8a4:	2bff      	cmp	r3, #255	; 0xff
    b8a6:	d105      	bne.n	b8b4 <send_climb+0x5fc>
    b8a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b0:	2200      	movs	r2, #0
    b8b2:	701a      	strb	r2, [r3, #0]
    b8b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	461a      	mov	r2, r3
    b8c0:	f64c 0398 	movw	r3, #51352	; 0xc898
    b8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c8:	7899      	ldrb	r1, [r3, #2]
    b8ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d2:	5499      	strb	r1, [r3, r2]
    b8d4:	4bae      	ldr	r3, [pc, #696]	; (bb90 <send_climb+0x8d8>)
    b8d6:	781a      	ldrb	r2, [r3, #0]
    b8d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	4413      	add	r3, r2
    b8e4:	b2da      	uxtb	r2, r3
    b8e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ee:	701a      	strb	r2, [r3, #0]
    b8f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f8:	781a      	ldrb	r2, [r3, #0]
    b8fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b902:	781b      	ldrb	r3, [r3, #0]
    b904:	4413      	add	r3, r2
    b906:	b2da      	uxtb	r2, r3
    b908:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b910:	701a      	strb	r2, [r3, #0]
    b912:	f24c 5349 	movw	r3, #50505	; 0xc549
    b916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	3301      	adds	r3, #1
    b91e:	b2da      	uxtb	r2, r3
    b920:	f24c 5349 	movw	r3, #50505	; 0xc549
    b924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b928:	701a      	strb	r2, [r3, #0]
    b92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b932:	781b      	ldrb	r3, [r3, #0]
    b934:	2bff      	cmp	r3, #255	; 0xff
    b936:	d105      	bne.n	b944 <send_climb+0x68c>
    b938:	f24c 5349 	movw	r3, #50505	; 0xc549
    b93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b940:	2200      	movs	r2, #0
    b942:	701a      	strb	r2, [r3, #0]
    b944:	f24c 5349 	movw	r3, #50505	; 0xc549
    b948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94c:	781b      	ldrb	r3, [r3, #0]
    b94e:	461a      	mov	r2, r3
    b950:	f64c 0398 	movw	r3, #51352	; 0xc898
    b954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b958:	78d9      	ldrb	r1, [r3, #3]
    b95a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b962:	5499      	strb	r1, [r3, r2]
    b964:	4b8b      	ldr	r3, [pc, #556]	; (bb94 <send_climb+0x8dc>)
    b966:	781a      	ldrb	r2, [r3, #0]
    b968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	4413      	add	r3, r2
    b974:	b2da      	uxtb	r2, r3
    b976:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97e:	701a      	strb	r2, [r3, #0]
    b980:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b988:	781a      	ldrb	r2, [r3, #0]
    b98a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b992:	781b      	ldrb	r3, [r3, #0]
    b994:	4413      	add	r3, r2
    b996:	b2da      	uxtb	r2, r3
    b998:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a0:	701a      	strb	r2, [r3, #0]
    b9a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	3301      	adds	r3, #1
    b9ae:	b2da      	uxtb	r2, r3
    b9b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b8:	701a      	strb	r2, [r3, #0]
    b9ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	2bff      	cmp	r3, #255	; 0xff
    b9c6:	d105      	bne.n	b9d4 <send_climb+0x71c>
    b9c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d0:	2200      	movs	r2, #0
    b9d2:	701a      	strb	r2, [r3, #0]
    b9d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9dc:	781b      	ldrb	r3, [r3, #0]
    b9de:	461a      	mov	r2, r3
    b9e0:	f648 3300 	movw	r3, #35584	; 0x8b00
    b9e4:	f2c0 0301 	movt	r3, #1
    b9e8:	7819      	ldrb	r1, [r3, #0]
    b9ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f2:	5499      	strb	r1, [r3, r2]
    b9f4:	f648 3300 	movw	r3, #35584	; 0x8b00
    b9f8:	f2c0 0301 	movt	r3, #1
    b9fc:	781a      	ldrb	r2, [r3, #0]
    b9fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba06:	781b      	ldrb	r3, [r3, #0]
    ba08:	4413      	add	r3, r2
    ba0a:	b2da      	uxtb	r2, r3
    ba0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba14:	701a      	strb	r2, [r3, #0]
    ba16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1e:	781a      	ldrb	r2, [r3, #0]
    ba20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	4413      	add	r3, r2
    ba2c:	b2da      	uxtb	r2, r3
    ba2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba36:	701a      	strb	r2, [r3, #0]
    ba38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	3301      	adds	r3, #1
    ba44:	b2da      	uxtb	r2, r3
    ba46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4e:	701a      	strb	r2, [r3, #0]
    ba50:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	2bff      	cmp	r3, #255	; 0xff
    ba5c:	d105      	bne.n	ba6a <send_climb+0x7b2>
    ba5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	2200      	movs	r2, #0
    ba68:	701a      	strb	r2, [r3, #0]
    ba6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	461a      	mov	r2, r3
    ba76:	f648 3300 	movw	r3, #35584	; 0x8b00
    ba7a:	f2c0 0301 	movt	r3, #1
    ba7e:	7859      	ldrb	r1, [r3, #1]
    ba80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba88:	5499      	strb	r1, [r3, r2]
    ba8a:	4b43      	ldr	r3, [pc, #268]	; (bb98 <send_climb+0x8e0>)
    ba8c:	781a      	ldrb	r2, [r3, #0]
    ba8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	4413      	add	r3, r2
    ba9a:	b2da      	uxtb	r2, r3
    ba9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa4:	701a      	strb	r2, [r3, #0]
    baa6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baae:	781a      	ldrb	r2, [r3, #0]
    bab0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	4413      	add	r3, r2
    babc:	b2da      	uxtb	r2, r3
    babe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	701a      	strb	r2, [r3, #0]
    bac8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	3301      	adds	r3, #1
    bad4:	b2da      	uxtb	r2, r3
    bad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	701a      	strb	r2, [r3, #0]
    bae0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae8:	781b      	ldrb	r3, [r3, #0]
    baea:	2bff      	cmp	r3, #255	; 0xff
    baec:	d105      	bne.n	bafa <send_climb+0x842>
    baee:	f24c 5349 	movw	r3, #50505	; 0xc549
    baf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf6:	2200      	movs	r2, #0
    baf8:	701a      	strb	r2, [r3, #0]
    bafa:	f24c 5349 	movw	r3, #50505	; 0xc549
    bafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb02:	781b      	ldrb	r3, [r3, #0]
    bb04:	461a      	mov	r2, r3
    bb06:	f648 3300 	movw	r3, #35584	; 0x8b00
    bb0a:	f2c0 0301 	movt	r3, #1
    bb0e:	7899      	ldrb	r1, [r3, #2]
    bb10:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	5499      	strb	r1, [r3, r2]
    bb1a:	4b20      	ldr	r3, [pc, #128]	; (bb9c <send_climb+0x8e4>)
    bb1c:	781a      	ldrb	r2, [r3, #0]
    bb1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	4413      	add	r3, r2
    bb2a:	b2da      	uxtb	r2, r3
    bb2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb34:	701a      	strb	r2, [r3, #0]
    bb36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	781a      	ldrb	r2, [r3, #0]
    bb40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	4413      	add	r3, r2
    bb4c:	b2da      	uxtb	r2, r3
    bb4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	701a      	strb	r2, [r3, #0]
    bb58:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	3301      	adds	r3, #1
    bb64:	b2da      	uxtb	r2, r3
    bb66:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6e:	701a      	strb	r2, [r3, #0]
    bb70:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb78:	781b      	ldrb	r3, [r3, #0]
    bb7a:	2bff      	cmp	r3, #255	; 0xff
    bb7c:	d110      	bne.n	bba0 <send_climb+0x8e8>
    bb7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb86:	2200      	movs	r2, #0
    bb88:	701a      	strb	r2, [r3, #0]
    bb8a:	e009      	b.n	bba0 <send_climb+0x8e8>
    bb8c:	2004c899 	.word	0x2004c899
    bb90:	2004c89a 	.word	0x2004c89a
    bb94:	2004c89b 	.word	0x2004c89b
    bb98:	00018b01 	.word	0x00018b01
    bb9c:	00018b02 	.word	0x00018b02
    bba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba8:	781b      	ldrb	r3, [r3, #0]
    bbaa:	461a      	mov	r2, r3
    bbac:	f648 3300 	movw	r3, #35584	; 0x8b00
    bbb0:	f2c0 0301 	movt	r3, #1
    bbb4:	78d9      	ldrb	r1, [r3, #3]
    bbb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbe:	5499      	strb	r1, [r3, r2]
    bbc0:	4b79      	ldr	r3, [pc, #484]	; (bda8 <send_climb+0xaf0>)
    bbc2:	781a      	ldrb	r2, [r3, #0]
    bbc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbcc:	781b      	ldrb	r3, [r3, #0]
    bbce:	4413      	add	r3, r2
    bbd0:	b2da      	uxtb	r2, r3
    bbd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbda:	701a      	strb	r2, [r3, #0]
    bbdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe4:	781a      	ldrb	r2, [r3, #0]
    bbe6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	4413      	add	r3, r2
    bbf2:	b2da      	uxtb	r2, r3
    bbf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfc:	701a      	strb	r2, [r3, #0]
    bbfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc06:	781b      	ldrb	r3, [r3, #0]
    bc08:	3301      	adds	r3, #1
    bc0a:	b2da      	uxtb	r2, r3
    bc0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc14:	701a      	strb	r2, [r3, #0]
    bc16:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	2bff      	cmp	r3, #255	; 0xff
    bc22:	d105      	bne.n	bc30 <send_climb+0x978>
    bc24:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2c:	2200      	movs	r2, #0
    bc2e:	701a      	strb	r2, [r3, #0]
    bc30:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	461a      	mov	r2, r3
    bc3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc44:	7819      	ldrb	r1, [r3, #0]
    bc46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4e:	5499      	strb	r1, [r3, r2]
    bc50:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc58:	781b      	ldrb	r3, [r3, #0]
    bc5a:	3301      	adds	r3, #1
    bc5c:	b2da      	uxtb	r2, r3
    bc5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc66:	701a      	strb	r2, [r3, #0]
    bc68:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc70:	781b      	ldrb	r3, [r3, #0]
    bc72:	2bff      	cmp	r3, #255	; 0xff
    bc74:	d105      	bne.n	bc82 <send_climb+0x9ca>
    bc76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7e:	2200      	movs	r2, #0
    bc80:	701a      	strb	r2, [r3, #0]
    bc82:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	461a      	mov	r2, r3
    bc8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc96:	7819      	ldrb	r1, [r3, #0]
    bc98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca0:	5499      	strb	r1, [r3, r2]
    bca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	781b      	ldrb	r3, [r3, #0]
    bcac:	3301      	adds	r3, #1
    bcae:	b2da      	uxtb	r2, r3
    bcb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb8:	701a      	strb	r2, [r3, #0]
    bcba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc2:	781b      	ldrb	r3, [r3, #0]
    bcc4:	2bff      	cmp	r3, #255	; 0xff
    bcc6:	d105      	bne.n	bcd4 <send_climb+0xa1c>
    bcc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd0:	2200      	movs	r2, #0
    bcd2:	701a      	strb	r2, [r3, #0]
    bcd4:	f242 0339 	movw	r3, #8249	; 0x2039
    bcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	b2db      	uxtb	r3, r3
    bce0:	f003 0310 	and.w	r3, r3, #16
    bce4:	2b00      	cmp	r3, #0
    bce6:	d15a      	bne.n	bd9e <send_climb+0xae6>
    bce8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	b2db      	uxtb	r3, r3
    bcf4:	461a      	mov	r2, r3
    bcf6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfe:	5c9a      	ldrb	r2, [r3, r2]
    bd00:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	701a      	strb	r2, [r3, #0]
    bd0a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd12:	2200      	movs	r2, #0
    bd14:	701a      	strb	r2, [r3, #0]
    bd16:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	b2db      	uxtb	r3, r3
    bd22:	3301      	adds	r3, #1
    bd24:	b2da      	uxtb	r2, r3
    bd26:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2e:	701a      	strb	r2, [r3, #0]
    bd30:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	b2db      	uxtb	r3, r3
    bd3c:	2bff      	cmp	r3, #255	; 0xff
    bd3e:	d105      	bne.n	bd4c <send_climb+0xa94>
    bd40:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd48:	2200      	movs	r2, #0
    bd4a:	701a      	strb	r2, [r3, #0]
    bd4c:	f242 0338 	movw	r3, #8248	; 0x2038
    bd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd54:	f242 0238 	movw	r2, #8248	; 0x2038
    bd58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd5c:	7812      	ldrb	r2, [r2, #0]
    bd5e:	b2d2      	uxtb	r2, r2
    bd60:	f042 0201 	orr.w	r2, r2, #1
    bd64:	b2d2      	uxtb	r2, r2
    bd66:	701a      	strb	r2, [r3, #0]
    bd68:	f242 0339 	movw	r3, #8249	; 0x2039
    bd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd70:	f242 0239 	movw	r2, #8249	; 0x2039
    bd74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd78:	7812      	ldrb	r2, [r2, #0]
    bd7a:	b2d2      	uxtb	r2, r2
    bd7c:	f042 0210 	orr.w	r2, r2, #16
    bd80:	b2d2      	uxtb	r2, r2
    bd82:	701a      	strb	r2, [r3, #0]
    bd84:	e00b      	b.n	bd9e <send_climb+0xae6>
    bd86:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	3301      	adds	r3, #1
    bd92:	b2da      	uxtb	r2, r3
    bd94:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9c:	701a      	strb	r2, [r3, #0]
}
    bd9e:	46bd      	mov	sp, r7
    bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bda4:	4770      	bx	lr
    bda6:	bf00      	nop
    bda8:	00018b03 	.word	0x00018b03

0000bdac <send_mode>:
void send_mode(void){  //5000ms
    bdac:	b480      	push	{r7}
    bdae:	af00      	add	r7, sp, #0
  if(!boot)
    bdb0:	f240 533d 	movw	r3, #1341	; 0x53d
    bdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb8:	781b      	ldrb	r3, [r3, #0]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	f040 82ce 	bne.w	c35c <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bdc0:	f24c 5341 	movw	r3, #50497	; 0xc541
    bdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc8:	781a      	ldrb	r2, [r3, #0]
    bdca:	f248 531f 	movw	r3, #34079	; 0x851f
    bdce:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bdd2:	fba3 1302 	umull	r1, r3, r3, r2
    bdd6:	091b      	lsrs	r3, r3, #4
    bdd8:	2132      	movs	r1, #50	; 0x32
    bdda:	fb01 f303 	mul.w	r3, r1, r3
    bdde:	1ad3      	subs	r3, r2, r3
    bde0:	b2db      	uxtb	r3, r3
    bde2:	2b09      	cmp	r3, #9
    bde4:	f040 82ba 	bne.w	c35c <send_mode+0x5b0>
    bde8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf0:	781a      	ldrb	r2, [r3, #0]
    bdf2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfa:	781b      	ldrb	r3, [r3, #0]
    bdfc:	b2db      	uxtb	r3, r3
    bdfe:	429a      	cmp	r2, r3
    be00:	d313      	bcc.n	be2a <send_mode+0x7e>
    be02:	f24c 534a 	movw	r3, #50506	; 0xc54a
    be06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0a:	781b      	ldrb	r3, [r3, #0]
    be0c:	b2db      	uxtb	r3, r3
    be0e:	461a      	mov	r2, r3
    be10:	f24c 5349 	movw	r3, #50505	; 0xc549
    be14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be18:	781b      	ldrb	r3, [r3, #0]
    be1a:	1ad3      	subs	r3, r2, r3
    be1c:	33ff      	adds	r3, #255	; 0xff
    be1e:	2b09      	cmp	r3, #9
    be20:	bfd4      	ite	le
    be22:	2300      	movle	r3, #0
    be24:	2301      	movgt	r3, #1
    be26:	b2db      	uxtb	r3, r3
    be28:	e011      	b.n	be4e <send_mode+0xa2>
    be2a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    be2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be32:	781b      	ldrb	r3, [r3, #0]
    be34:	b2db      	uxtb	r3, r3
    be36:	461a      	mov	r2, r3
    be38:	f24c 5349 	movw	r3, #50505	; 0xc549
    be3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	1ad3      	subs	r3, r2, r3
    be44:	2b09      	cmp	r3, #9
    be46:	bfd4      	ite	le
    be48:	2300      	movle	r3, #0
    be4a:	2301      	movgt	r3, #1
    be4c:	b2db      	uxtb	r3, r3
    be4e:	2b00      	cmp	r3, #0
    be50:	f000 8278 	beq.w	c344 <send_mode+0x598>
    be54:	f24c 5349 	movw	r3, #50505	; 0xc549
    be58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5c:	781b      	ldrb	r3, [r3, #0]
    be5e:	461a      	mov	r2, r3
    be60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be68:	2105      	movs	r1, #5
    be6a:	5499      	strb	r1, [r3, r2]
    be6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be74:	781b      	ldrb	r3, [r3, #0]
    be76:	3301      	adds	r3, #1
    be78:	b2da      	uxtb	r2, r3
    be7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be82:	701a      	strb	r2, [r3, #0]
    be84:	f24c 5349 	movw	r3, #50505	; 0xc549
    be88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be8c:	781b      	ldrb	r3, [r3, #0]
    be8e:	2bff      	cmp	r3, #255	; 0xff
    be90:	d105      	bne.n	be9e <send_mode+0xf2>
    be92:	f24c 5349 	movw	r3, #50505	; 0xc549
    be96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9a:	2200      	movs	r2, #0
    be9c:	701a      	strb	r2, [r3, #0]
    be9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea6:	781b      	ldrb	r3, [r3, #0]
    bea8:	461a      	mov	r2, r3
    beaa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    beae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb2:	210b      	movs	r1, #11
    beb4:	5499      	strb	r1, [r3, r2]
    beb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    beba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bebe:	781b      	ldrb	r3, [r3, #0]
    bec0:	3301      	adds	r3, #1
    bec2:	b2da      	uxtb	r2, r3
    bec4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    becc:	701a      	strb	r2, [r3, #0]
    bece:	f24c 5349 	movw	r3, #50505	; 0xc549
    bed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed6:	781b      	ldrb	r3, [r3, #0]
    bed8:	2bff      	cmp	r3, #255	; 0xff
    beda:	d105      	bne.n	bee8 <send_mode+0x13c>
    bedc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee4:	2200      	movs	r2, #0
    bee6:	701a      	strb	r2, [r3, #0]
    bee8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    beec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef0:	220b      	movs	r2, #11
    bef2:	701a      	strb	r2, [r3, #0]
    bef4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befc:	220b      	movs	r2, #11
    befe:	701a      	strb	r2, [r3, #0]
    bf00:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	461a      	mov	r2, r3
    bf0c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bf10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf14:	7819      	ldrb	r1, [r3, #0]
    bf16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	5499      	strb	r1, [r3, r2]
    bf20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf28:	781a      	ldrb	r2, [r3, #0]
    bf2a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf32:	781b      	ldrb	r3, [r3, #0]
    bf34:	4413      	add	r3, r2
    bf36:	b2da      	uxtb	r2, r3
    bf38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	701a      	strb	r2, [r3, #0]
    bf42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4a:	781a      	ldrb	r2, [r3, #0]
    bf4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf54:	781b      	ldrb	r3, [r3, #0]
    bf56:	4413      	add	r3, r2
    bf58:	b2da      	uxtb	r2, r3
    bf5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf62:	701a      	strb	r2, [r3, #0]
    bf64:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6c:	781b      	ldrb	r3, [r3, #0]
    bf6e:	3301      	adds	r3, #1
    bf70:	b2da      	uxtb	r2, r3
    bf72:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7a:	701a      	strb	r2, [r3, #0]
    bf7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf84:	781b      	ldrb	r3, [r3, #0]
    bf86:	2bff      	cmp	r3, #255	; 0xff
    bf88:	d105      	bne.n	bf96 <send_mode+0x1ea>
    bf8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf92:	2200      	movs	r2, #0
    bf94:	701a      	strb	r2, [r3, #0]
    bf96:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9e:	781b      	ldrb	r3, [r3, #0]
    bfa0:	461a      	mov	r2, r3
    bfa2:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfaa:	7819      	ldrb	r1, [r3, #0]
    bfac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb4:	5499      	strb	r1, [r3, r2]
    bfb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbe:	781a      	ldrb	r2, [r3, #0]
    bfc0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	4413      	add	r3, r2
    bfcc:	b2da      	uxtb	r2, r3
    bfce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	701a      	strb	r2, [r3, #0]
    bfd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe0:	781a      	ldrb	r2, [r3, #0]
    bfe2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfea:	781b      	ldrb	r3, [r3, #0]
    bfec:	4413      	add	r3, r2
    bfee:	b2da      	uxtb	r2, r3
    bff0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff8:	701a      	strb	r2, [r3, #0]
    bffa:	f24c 5349 	movw	r3, #50505	; 0xc549
    bffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c002:	781b      	ldrb	r3, [r3, #0]
    c004:	3301      	adds	r3, #1
    c006:	b2da      	uxtb	r2, r3
    c008:	f24c 5349 	movw	r3, #50505	; 0xc549
    c00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c010:	701a      	strb	r2, [r3, #0]
    c012:	f24c 5349 	movw	r3, #50505	; 0xc549
    c016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01a:	781b      	ldrb	r3, [r3, #0]
    c01c:	2bff      	cmp	r3, #255	; 0xff
    c01e:	d105      	bne.n	c02c <send_mode+0x280>
    c020:	f24c 5349 	movw	r3, #50505	; 0xc549
    c024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c028:	2200      	movs	r2, #0
    c02a:	701a      	strb	r2, [r3, #0]
    c02c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c034:	781b      	ldrb	r3, [r3, #0]
    c036:	461a      	mov	r2, r3
    c038:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    c03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c040:	7819      	ldrb	r1, [r3, #0]
    c042:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04a:	5499      	strb	r1, [r3, r2]
    c04c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c054:	781a      	ldrb	r2, [r3, #0]
    c056:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    c05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05e:	781b      	ldrb	r3, [r3, #0]
    c060:	4413      	add	r3, r2
    c062:	b2da      	uxtb	r2, r3
    c064:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	701a      	strb	r2, [r3, #0]
    c06e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c076:	781a      	ldrb	r2, [r3, #0]
    c078:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c080:	781b      	ldrb	r3, [r3, #0]
    c082:	4413      	add	r3, r2
    c084:	b2da      	uxtb	r2, r3
    c086:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08e:	701a      	strb	r2, [r3, #0]
    c090:	f24c 5349 	movw	r3, #50505	; 0xc549
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	781b      	ldrb	r3, [r3, #0]
    c09a:	3301      	adds	r3, #1
    c09c:	b2da      	uxtb	r2, r3
    c09e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a6:	701a      	strb	r2, [r3, #0]
    c0a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b0:	781b      	ldrb	r3, [r3, #0]
    c0b2:	2bff      	cmp	r3, #255	; 0xff
    c0b4:	d105      	bne.n	c0c2 <send_mode+0x316>
    c0b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0be:	2200      	movs	r2, #0
    c0c0:	701a      	strb	r2, [r3, #0]
    c0c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ca:	781b      	ldrb	r3, [r3, #0]
    c0cc:	461a      	mov	r2, r3
    c0ce:	f24c 5333 	movw	r3, #50483	; 0xc533
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	7819      	ldrb	r1, [r3, #0]
    c0d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e0:	5499      	strb	r1, [r3, r2]
    c0e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ea:	781a      	ldrb	r2, [r3, #0]
    c0ec:	f24c 5333 	movw	r3, #50483	; 0xc533
    c0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	4413      	add	r3, r2
    c0f8:	b2da      	uxtb	r2, r3
    c0fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	701a      	strb	r2, [r3, #0]
    c104:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10c:	781a      	ldrb	r2, [r3, #0]
    c10e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	4413      	add	r3, r2
    c11a:	b2da      	uxtb	r2, r3
    c11c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c124:	701a      	strb	r2, [r3, #0]
    c126:	f24c 5349 	movw	r3, #50505	; 0xc549
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	3301      	adds	r3, #1
    c132:	b2da      	uxtb	r2, r3
    c134:	f24c 5349 	movw	r3, #50505	; 0xc549
    c138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13c:	701a      	strb	r2, [r3, #0]
    c13e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	2bff      	cmp	r3, #255	; 0xff
    c14a:	d105      	bne.n	c158 <send_mode+0x3ac>
    c14c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c154:	2200      	movs	r2, #0
    c156:	701a      	strb	r2, [r3, #0]
    c158:	f24c 5349 	movw	r3, #50505	; 0xc549
    c15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c160:	781b      	ldrb	r3, [r3, #0]
    c162:	461a      	mov	r2, r3
    c164:	f240 533c 	movw	r3, #1340	; 0x53c
    c168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16c:	7819      	ldrb	r1, [r3, #0]
    c16e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c176:	5499      	strb	r1, [r3, r2]
    c178:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c180:	781a      	ldrb	r2, [r3, #0]
    c182:	f240 533c 	movw	r3, #1340	; 0x53c
    c186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18a:	781b      	ldrb	r3, [r3, #0]
    c18c:	4413      	add	r3, r2
    c18e:	b2da      	uxtb	r2, r3
    c190:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c198:	701a      	strb	r2, [r3, #0]
    c19a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a2:	781a      	ldrb	r2, [r3, #0]
    c1a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ac:	781b      	ldrb	r3, [r3, #0]
    c1ae:	4413      	add	r3, r2
    c1b0:	b2da      	uxtb	r2, r3
    c1b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ba:	701a      	strb	r2, [r3, #0]
    c1bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c4:	781b      	ldrb	r3, [r3, #0]
    c1c6:	3301      	adds	r3, #1
    c1c8:	b2da      	uxtb	r2, r3
    c1ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d2:	701a      	strb	r2, [r3, #0]
    c1d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	2bff      	cmp	r3, #255	; 0xff
    c1e0:	d105      	bne.n	c1ee <send_mode+0x442>
    c1e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ea:	2200      	movs	r2, #0
    c1ec:	701a      	strb	r2, [r3, #0]
    c1ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	461a      	mov	r2, r3
    c1fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c202:	7819      	ldrb	r1, [r3, #0]
    c204:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20c:	5499      	strb	r1, [r3, r2]
    c20e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c216:	781b      	ldrb	r3, [r3, #0]
    c218:	3301      	adds	r3, #1
    c21a:	b2da      	uxtb	r2, r3
    c21c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c224:	701a      	strb	r2, [r3, #0]
    c226:	f24c 5349 	movw	r3, #50505	; 0xc549
    c22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	2bff      	cmp	r3, #255	; 0xff
    c232:	d105      	bne.n	c240 <send_mode+0x494>
    c234:	f24c 5349 	movw	r3, #50505	; 0xc549
    c238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23c:	2200      	movs	r2, #0
    c23e:	701a      	strb	r2, [r3, #0]
    c240:	f24c 5349 	movw	r3, #50505	; 0xc549
    c244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c248:	781b      	ldrb	r3, [r3, #0]
    c24a:	461a      	mov	r2, r3
    c24c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c254:	7819      	ldrb	r1, [r3, #0]
    c256:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25e:	5499      	strb	r1, [r3, r2]
    c260:	f24c 5349 	movw	r3, #50505	; 0xc549
    c264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c268:	781b      	ldrb	r3, [r3, #0]
    c26a:	3301      	adds	r3, #1
    c26c:	b2da      	uxtb	r2, r3
    c26e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c276:	701a      	strb	r2, [r3, #0]
    c278:	f24c 5349 	movw	r3, #50505	; 0xc549
    c27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c280:	781b      	ldrb	r3, [r3, #0]
    c282:	2bff      	cmp	r3, #255	; 0xff
    c284:	d105      	bne.n	c292 <send_mode+0x4e6>
    c286:	f24c 5349 	movw	r3, #50505	; 0xc549
    c28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28e:	2200      	movs	r2, #0
    c290:	701a      	strb	r2, [r3, #0]
    c292:	f242 0339 	movw	r3, #8249	; 0x2039
    c296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c29a:	781b      	ldrb	r3, [r3, #0]
    c29c:	b2db      	uxtb	r3, r3
    c29e:	f003 0310 	and.w	r3, r3, #16
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d15a      	bne.n	c35c <send_mode+0x5b0>
    c2a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ae:	781b      	ldrb	r3, [r3, #0]
    c2b0:	b2db      	uxtb	r3, r3
    c2b2:	461a      	mov	r2, r3
    c2b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2bc:	5c9a      	ldrb	r2, [r3, r2]
    c2be:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c6:	701a      	strb	r2, [r3, #0]
    c2c8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d0:	2200      	movs	r2, #0
    c2d2:	701a      	strb	r2, [r3, #0]
    c2d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	b2db      	uxtb	r3, r3
    c2e0:	3301      	adds	r3, #1
    c2e2:	b2da      	uxtb	r2, r3
    c2e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	701a      	strb	r2, [r3, #0]
    c2ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	781b      	ldrb	r3, [r3, #0]
    c2f8:	b2db      	uxtb	r3, r3
    c2fa:	2bff      	cmp	r3, #255	; 0xff
    c2fc:	d105      	bne.n	c30a <send_mode+0x55e>
    c2fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c306:	2200      	movs	r2, #0
    c308:	701a      	strb	r2, [r3, #0]
    c30a:	f242 0338 	movw	r3, #8248	; 0x2038
    c30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c312:	f242 0238 	movw	r2, #8248	; 0x2038
    c316:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c31a:	7812      	ldrb	r2, [r2, #0]
    c31c:	b2d2      	uxtb	r2, r2
    c31e:	f042 0201 	orr.w	r2, r2, #1
    c322:	b2d2      	uxtb	r2, r2
    c324:	701a      	strb	r2, [r3, #0]
    c326:	f242 0339 	movw	r3, #8249	; 0x2039
    c32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32e:	f242 0239 	movw	r2, #8249	; 0x2039
    c332:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c336:	7812      	ldrb	r2, [r2, #0]
    c338:	b2d2      	uxtb	r2, r2
    c33a:	f042 0210 	orr.w	r2, r2, #16
    c33e:	b2d2      	uxtb	r2, r2
    c340:	701a      	strb	r2, [r3, #0]
    c342:	e00b      	b.n	c35c <send_mode+0x5b0>
    c344:	f24c 5348 	movw	r3, #50504	; 0xc548
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	3301      	adds	r3, #1
    c350:	b2da      	uxtb	r2, r3
    c352:	f24c 5348 	movw	r3, #50504	; 0xc548
    c356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35a:	701a      	strb	r2, [r3, #0]
}
    c35c:	46bd      	mov	sp, r7
    c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c362:	4770      	bx	lr

0000c364 <send_debug>:
void send_debug(void){  //5000ms
    c364:	b480      	push	{r7}
    c366:	af00      	add	r7, sp, #0
  if(!boot)
    c368:	f240 533d 	movw	r3, #1341	; 0x53d
    c36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c370:	781b      	ldrb	r3, [r3, #0]
    c372:	2b00      	cmp	r3, #0
    c374:	f040 82cf 	bne.w	c916 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c378:	f24c 5341 	movw	r3, #50497	; 0xc541
    c37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c380:	781a      	ldrb	r2, [r3, #0]
    c382:	f248 531f 	movw	r3, #34079	; 0x851f
    c386:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c38a:	fba3 1302 	umull	r1, r3, r3, r2
    c38e:	091b      	lsrs	r3, r3, #4
    c390:	2132      	movs	r1, #50	; 0x32
    c392:	fb01 f303 	mul.w	r3, r1, r3
    c396:	1ad3      	subs	r3, r2, r3
    c398:	b2db      	uxtb	r3, r3
    c39a:	2b1d      	cmp	r3, #29
    c39c:	f040 82bb 	bne.w	c916 <send_debug+0x5b2>
    c3a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a8:	781a      	ldrb	r2, [r3, #0]
    c3aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	781b      	ldrb	r3, [r3, #0]
    c3b4:	b2db      	uxtb	r3, r3
    c3b6:	429a      	cmp	r2, r3
    c3b8:	d313      	bcc.n	c3e2 <send_debug+0x7e>
    c3ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c2:	781b      	ldrb	r3, [r3, #0]
    c3c4:	b2db      	uxtb	r3, r3
    c3c6:	461a      	mov	r2, r3
    c3c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d0:	781b      	ldrb	r3, [r3, #0]
    c3d2:	1ad3      	subs	r3, r2, r3
    c3d4:	33ff      	adds	r3, #255	; 0xff
    c3d6:	2b09      	cmp	r3, #9
    c3d8:	bfd4      	ite	le
    c3da:	2300      	movle	r3, #0
    c3dc:	2301      	movgt	r3, #1
    c3de:	b2db      	uxtb	r3, r3
    c3e0:	e011      	b.n	c406 <send_debug+0xa2>
    c3e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	b2db      	uxtb	r3, r3
    c3ee:	461a      	mov	r2, r3
    c3f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f8:	781b      	ldrb	r3, [r3, #0]
    c3fa:	1ad3      	subs	r3, r2, r3
    c3fc:	2b09      	cmp	r3, #9
    c3fe:	bfd4      	ite	le
    c400:	2300      	movle	r3, #0
    c402:	2301      	movgt	r3, #1
    c404:	b2db      	uxtb	r3, r3
    c406:	2b00      	cmp	r3, #0
    c408:	f000 8279 	beq.w	c8fe <send_debug+0x59a>
    c40c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	461a      	mov	r2, r3
    c418:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c420:	2105      	movs	r1, #5
    c422:	5499      	strb	r1, [r3, r2]
    c424:	f24c 5349 	movw	r3, #50505	; 0xc549
    c428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42c:	781b      	ldrb	r3, [r3, #0]
    c42e:	3301      	adds	r3, #1
    c430:	b2da      	uxtb	r2, r3
    c432:	f24c 5349 	movw	r3, #50505	; 0xc549
    c436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43a:	701a      	strb	r2, [r3, #0]
    c43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c444:	781b      	ldrb	r3, [r3, #0]
    c446:	2bff      	cmp	r3, #255	; 0xff
    c448:	d105      	bne.n	c456 <send_debug+0xf2>
    c44a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c452:	2200      	movs	r2, #0
    c454:	701a      	strb	r2, [r3, #0]
    c456:	f24c 5349 	movw	r3, #50505	; 0xc549
    c45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45e:	781b      	ldrb	r3, [r3, #0]
    c460:	461a      	mov	r2, r3
    c462:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46a:	210d      	movs	r1, #13
    c46c:	5499      	strb	r1, [r3, r2]
    c46e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	3301      	adds	r3, #1
    c47a:	b2da      	uxtb	r2, r3
    c47c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c484:	701a      	strb	r2, [r3, #0]
    c486:	f24c 5349 	movw	r3, #50505	; 0xc549
    c48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48e:	781b      	ldrb	r3, [r3, #0]
    c490:	2bff      	cmp	r3, #255	; 0xff
    c492:	d105      	bne.n	c4a0 <send_debug+0x13c>
    c494:	f24c 5349 	movw	r3, #50505	; 0xc549
    c498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49c:	2200      	movs	r2, #0
    c49e:	701a      	strb	r2, [r3, #0]
    c4a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a8:	220d      	movs	r2, #13
    c4aa:	701a      	strb	r2, [r3, #0]
    c4ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b4:	220d      	movs	r2, #13
    c4b6:	701a      	strb	r2, [r3, #0]
    c4b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	461a      	mov	r2, r3
    c4c4:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4cc:	781b      	ldrb	r3, [r3, #0]
    c4ce:	b2d9      	uxtb	r1, r3
    c4d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d8:	5499      	strb	r1, [r3, r2]
    c4da:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e2:	781a      	ldrb	r2, [r3, #0]
    c4e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ec:	781b      	ldrb	r3, [r3, #0]
    c4ee:	4413      	add	r3, r2
    c4f0:	b2da      	uxtb	r2, r3
    c4f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	701a      	strb	r2, [r3, #0]
    c4fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c504:	781a      	ldrb	r2, [r3, #0]
    c506:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	781b      	ldrb	r3, [r3, #0]
    c510:	4413      	add	r3, r2
    c512:	b2da      	uxtb	r2, r3
    c514:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51c:	701a      	strb	r2, [r3, #0]
    c51e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	781b      	ldrb	r3, [r3, #0]
    c528:	3301      	adds	r3, #1
    c52a:	b2da      	uxtb	r2, r3
    c52c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c534:	701a      	strb	r2, [r3, #0]
    c536:	f24c 5349 	movw	r3, #50505	; 0xc549
    c53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53e:	781b      	ldrb	r3, [r3, #0]
    c540:	2bff      	cmp	r3, #255	; 0xff
    c542:	d105      	bne.n	c550 <send_debug+0x1ec>
    c544:	f24c 5349 	movw	r3, #50505	; 0xc549
    c548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54c:	2200      	movs	r2, #0
    c54e:	701a      	strb	r2, [r3, #0]
    c550:	f24c 5349 	movw	r3, #50505	; 0xc549
    c554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c558:	781b      	ldrb	r3, [r3, #0]
    c55a:	461a      	mov	r2, r3
    c55c:	f24c 6380 	movw	r3, #50816	; 0xc680
    c560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c564:	7819      	ldrb	r1, [r3, #0]
    c566:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56e:	5499      	strb	r1, [r3, r2]
    c570:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c578:	781a      	ldrb	r2, [r3, #0]
    c57a:	f24c 6380 	movw	r3, #50816	; 0xc680
    c57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c582:	781b      	ldrb	r3, [r3, #0]
    c584:	4413      	add	r3, r2
    c586:	b2da      	uxtb	r2, r3
    c588:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	701a      	strb	r2, [r3, #0]
    c592:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59a:	781a      	ldrb	r2, [r3, #0]
    c59c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a4:	781b      	ldrb	r3, [r3, #0]
    c5a6:	4413      	add	r3, r2
    c5a8:	b2da      	uxtb	r2, r3
    c5aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b2:	701a      	strb	r2, [r3, #0]
    c5b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	781b      	ldrb	r3, [r3, #0]
    c5be:	3301      	adds	r3, #1
    c5c0:	b2da      	uxtb	r2, r3
    c5c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ca:	701a      	strb	r2, [r3, #0]
    c5cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d4:	781b      	ldrb	r3, [r3, #0]
    c5d6:	2bff      	cmp	r3, #255	; 0xff
    c5d8:	d105      	bne.n	c5e6 <send_debug+0x282>
    c5da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e2:	2200      	movs	r2, #0
    c5e4:	701a      	strb	r2, [r3, #0]
    c5e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ee:	781b      	ldrb	r3, [r3, #0]
    c5f0:	461a      	mov	r2, r3
    c5f2:	f24c 5348 	movw	r3, #50504	; 0xc548
    c5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fa:	7819      	ldrb	r1, [r3, #0]
    c5fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c604:	5499      	strb	r1, [r3, r2]
    c606:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60e:	781a      	ldrb	r2, [r3, #0]
    c610:	f24c 5348 	movw	r3, #50504	; 0xc548
    c614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	4413      	add	r3, r2
    c61c:	b2da      	uxtb	r2, r3
    c61e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	701a      	strb	r2, [r3, #0]
    c628:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	781a      	ldrb	r2, [r3, #0]
    c632:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	4413      	add	r3, r2
    c63e:	b2da      	uxtb	r2, r3
    c640:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c648:	701a      	strb	r2, [r3, #0]
    c64a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c652:	781b      	ldrb	r3, [r3, #0]
    c654:	3301      	adds	r3, #1
    c656:	b2da      	uxtb	r2, r3
    c658:	f24c 5349 	movw	r3, #50505	; 0xc549
    c65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c660:	701a      	strb	r2, [r3, #0]
    c662:	f24c 5349 	movw	r3, #50505	; 0xc549
    c666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66a:	781b      	ldrb	r3, [r3, #0]
    c66c:	2bff      	cmp	r3, #255	; 0xff
    c66e:	d105      	bne.n	c67c <send_debug+0x318>
    c670:	f24c 5349 	movw	r3, #50505	; 0xc549
    c674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c678:	2200      	movs	r2, #0
    c67a:	701a      	strb	r2, [r3, #0]
    c67c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c684:	781b      	ldrb	r3, [r3, #0]
    c686:	461a      	mov	r2, r3
    c688:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c690:	7819      	ldrb	r1, [r3, #0]
    c692:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69a:	5499      	strb	r1, [r3, r2]
    c69c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a4:	781a      	ldrb	r2, [r3, #0]
    c6a6:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	4413      	add	r3, r2
    c6b2:	b2da      	uxtb	r2, r3
    c6b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6bc:	701a      	strb	r2, [r3, #0]
    c6be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c6:	781a      	ldrb	r2, [r3, #0]
    c6c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d0:	781b      	ldrb	r3, [r3, #0]
    c6d2:	4413      	add	r3, r2
    c6d4:	b2da      	uxtb	r2, r3
    c6d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6de:	701a      	strb	r2, [r3, #0]
    c6e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	3301      	adds	r3, #1
    c6ec:	b2da      	uxtb	r2, r3
    c6ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f6:	701a      	strb	r2, [r3, #0]
    c6f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c700:	781b      	ldrb	r3, [r3, #0]
    c702:	2bff      	cmp	r3, #255	; 0xff
    c704:	d105      	bne.n	c712 <send_debug+0x3ae>
    c706:	f24c 5349 	movw	r3, #50505	; 0xc549
    c70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70e:	2200      	movs	r2, #0
    c710:	701a      	strb	r2, [r3, #0]
    c712:	f24c 5349 	movw	r3, #50505	; 0xc549
    c716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71a:	781b      	ldrb	r3, [r3, #0]
    c71c:	461a      	mov	r2, r3
    c71e:	f24c 5334 	movw	r3, #50484	; 0xc534
    c722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c726:	7819      	ldrb	r1, [r3, #0]
    c728:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c730:	5499      	strb	r1, [r3, r2]
    c732:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73a:	781a      	ldrb	r2, [r3, #0]
    c73c:	f24c 5334 	movw	r3, #50484	; 0xc534
    c740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c744:	781b      	ldrb	r3, [r3, #0]
    c746:	4413      	add	r3, r2
    c748:	b2da      	uxtb	r2, r3
    c74a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c752:	701a      	strb	r2, [r3, #0]
    c754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75c:	781a      	ldrb	r2, [r3, #0]
    c75e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c766:	781b      	ldrb	r3, [r3, #0]
    c768:	4413      	add	r3, r2
    c76a:	b2da      	uxtb	r2, r3
    c76c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c774:	701a      	strb	r2, [r3, #0]
    c776:	f24c 5349 	movw	r3, #50505	; 0xc549
    c77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77e:	781b      	ldrb	r3, [r3, #0]
    c780:	3301      	adds	r3, #1
    c782:	b2da      	uxtb	r2, r3
    c784:	f24c 5349 	movw	r3, #50505	; 0xc549
    c788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78c:	701a      	strb	r2, [r3, #0]
    c78e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c796:	781b      	ldrb	r3, [r3, #0]
    c798:	2bff      	cmp	r3, #255	; 0xff
    c79a:	d105      	bne.n	c7a8 <send_debug+0x444>
    c79c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a4:	2200      	movs	r2, #0
    c7a6:	701a      	strb	r2, [r3, #0]
    c7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	461a      	mov	r2, r3
    c7b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7bc:	7819      	ldrb	r1, [r3, #0]
    c7be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c6:	5499      	strb	r1, [r3, r2]
    c7c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	3301      	adds	r3, #1
    c7d4:	b2da      	uxtb	r2, r3
    c7d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7de:	701a      	strb	r2, [r3, #0]
    c7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	2bff      	cmp	r3, #255	; 0xff
    c7ec:	d105      	bne.n	c7fa <send_debug+0x496>
    c7ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f6:	2200      	movs	r2, #0
    c7f8:	701a      	strb	r2, [r3, #0]
    c7fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c802:	781b      	ldrb	r3, [r3, #0]
    c804:	461a      	mov	r2, r3
    c806:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	7819      	ldrb	r1, [r3, #0]
    c810:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c818:	5499      	strb	r1, [r3, r2]
    c81a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	3301      	adds	r3, #1
    c826:	b2da      	uxtb	r2, r3
    c828:	f24c 5349 	movw	r3, #50505	; 0xc549
    c82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c830:	701a      	strb	r2, [r3, #0]
    c832:	f24c 5349 	movw	r3, #50505	; 0xc549
    c836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83a:	781b      	ldrb	r3, [r3, #0]
    c83c:	2bff      	cmp	r3, #255	; 0xff
    c83e:	d105      	bne.n	c84c <send_debug+0x4e8>
    c840:	f24c 5349 	movw	r3, #50505	; 0xc549
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	2200      	movs	r2, #0
    c84a:	701a      	strb	r2, [r3, #0]
    c84c:	f242 0339 	movw	r3, #8249	; 0x2039
    c850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c854:	781b      	ldrb	r3, [r3, #0]
    c856:	b2db      	uxtb	r3, r3
    c858:	f003 0310 	and.w	r3, r3, #16
    c85c:	2b00      	cmp	r3, #0
    c85e:	d15a      	bne.n	c916 <send_debug+0x5b2>
    c860:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c868:	781b      	ldrb	r3, [r3, #0]
    c86a:	b2db      	uxtb	r3, r3
    c86c:	461a      	mov	r2, r3
    c86e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	5c9a      	ldrb	r2, [r3, r2]
    c878:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c880:	701a      	strb	r2, [r3, #0]
    c882:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88a:	2200      	movs	r2, #0
    c88c:	701a      	strb	r2, [r3, #0]
    c88e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c896:	781b      	ldrb	r3, [r3, #0]
    c898:	b2db      	uxtb	r3, r3
    c89a:	3301      	adds	r3, #1
    c89c:	b2da      	uxtb	r2, r3
    c89e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a6:	701a      	strb	r2, [r3, #0]
    c8a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	b2db      	uxtb	r3, r3
    c8b4:	2bff      	cmp	r3, #255	; 0xff
    c8b6:	d105      	bne.n	c8c4 <send_debug+0x560>
    c8b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c0:	2200      	movs	r2, #0
    c8c2:	701a      	strb	r2, [r3, #0]
    c8c4:	f242 0338 	movw	r3, #8248	; 0x2038
    c8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8cc:	f242 0238 	movw	r2, #8248	; 0x2038
    c8d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8d4:	7812      	ldrb	r2, [r2, #0]
    c8d6:	b2d2      	uxtb	r2, r2
    c8d8:	f042 0201 	orr.w	r2, r2, #1
    c8dc:	b2d2      	uxtb	r2, r2
    c8de:	701a      	strb	r2, [r3, #0]
    c8e0:	f242 0339 	movw	r3, #8249	; 0x2039
    c8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e8:	f242 0239 	movw	r2, #8249	; 0x2039
    c8ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c8f0:	7812      	ldrb	r2, [r2, #0]
    c8f2:	b2d2      	uxtb	r2, r2
    c8f4:	f042 0210 	orr.w	r2, r2, #16
    c8f8:	b2d2      	uxtb	r2, r2
    c8fa:	701a      	strb	r2, [r3, #0]
    c8fc:	e00b      	b.n	c916 <send_debug+0x5b2>
    c8fe:	f24c 5348 	movw	r3, #50504	; 0xc548
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	3301      	adds	r3, #1
    c90a:	b2da      	uxtb	r2, r3
    c90c:	f24c 5348 	movw	r3, #50504	; 0xc548
    c910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c914:	701a      	strb	r2, [r3, #0]
}
    c916:	46bd      	mov	sp, r7
    c918:	f85d 7b04 	ldr.w	r7, [sp], #4
    c91c:	4770      	bx	lr
    c91e:	bf00      	nop

0000c920 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c920:	b480      	push	{r7}
    c922:	af00      	add	r7, sp, #0
  if(!boot)
    c924:	f240 533d 	movw	r3, #1341	; 0x53d
    c928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c92c:	781b      	ldrb	r3, [r3, #0]
    c92e:	2b00      	cmp	r3, #0
    c930:	f040 83a9 	bne.w	d086 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c934:	f24c 5341 	movw	r3, #50497	; 0xc541
    c938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93c:	781a      	ldrb	r2, [r3, #0]
    c93e:	f248 531f 	movw	r3, #34079	; 0x851f
    c942:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c946:	fba3 1302 	umull	r1, r3, r3, r2
    c94a:	095b      	lsrs	r3, r3, #5
    c94c:	2164      	movs	r1, #100	; 0x64
    c94e:	fb01 f303 	mul.w	r3, r1, r3
    c952:	1ad3      	subs	r3, r2, r3
    c954:	b2db      	uxtb	r3, r3
    c956:	2b31      	cmp	r3, #49	; 0x31
    c958:	f040 8395 	bne.w	d086 <send_nav_ref+0x766>
    c95c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c964:	781a      	ldrb	r2, [r3, #0]
    c966:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	b2db      	uxtb	r3, r3
    c972:	429a      	cmp	r2, r3
    c974:	d313      	bcc.n	c99e <send_nav_ref+0x7e>
    c976:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97e:	781b      	ldrb	r3, [r3, #0]
    c980:	b2db      	uxtb	r3, r3
    c982:	461a      	mov	r2, r3
    c984:	f24c 5349 	movw	r3, #50505	; 0xc549
    c988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98c:	781b      	ldrb	r3, [r3, #0]
    c98e:	1ad3      	subs	r3, r2, r3
    c990:	33ff      	adds	r3, #255	; 0xff
    c992:	2b0c      	cmp	r3, #12
    c994:	bfd4      	ite	le
    c996:	2300      	movle	r3, #0
    c998:	2301      	movgt	r3, #1
    c99a:	b2db      	uxtb	r3, r3
    c99c:	e011      	b.n	c9c2 <send_nav_ref+0xa2>
    c99e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a6:	781b      	ldrb	r3, [r3, #0]
    c9a8:	b2db      	uxtb	r3, r3
    c9aa:	461a      	mov	r2, r3
    c9ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b4:	781b      	ldrb	r3, [r3, #0]
    c9b6:	1ad3      	subs	r3, r2, r3
    c9b8:	2b0c      	cmp	r3, #12
    c9ba:	bfd4      	ite	le
    c9bc:	2300      	movle	r3, #0
    c9be:	2301      	movgt	r3, #1
    c9c0:	b2db      	uxtb	r3, r3
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	f000 8353 	beq.w	d06e <send_nav_ref+0x74e>
    c9c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d0:	781b      	ldrb	r3, [r3, #0]
    c9d2:	461a      	mov	r2, r3
    c9d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9dc:	2105      	movs	r1, #5
    c9de:	5499      	strb	r1, [r3, r2]
    c9e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e8:	781b      	ldrb	r3, [r3, #0]
    c9ea:	3301      	adds	r3, #1
    c9ec:	b2da      	uxtb	r2, r3
    c9ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	701a      	strb	r2, [r3, #0]
    c9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	2bff      	cmp	r3, #255	; 0xff
    ca04:	d105      	bne.n	ca12 <send_nav_ref+0xf2>
    ca06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	2200      	movs	r2, #0
    ca10:	701a      	strb	r2, [r3, #0]
    ca12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca1a:	781b      	ldrb	r3, [r3, #0]
    ca1c:	461a      	mov	r2, r3
    ca1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	2109      	movs	r1, #9
    ca28:	5499      	strb	r1, [r3, r2]
    ca2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	3301      	adds	r3, #1
    ca36:	b2da      	uxtb	r2, r3
    ca38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca40:	701a      	strb	r2, [r3, #0]
    ca42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	2bff      	cmp	r3, #255	; 0xff
    ca4e:	d105      	bne.n	ca5c <send_nav_ref+0x13c>
    ca50:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca58:	2200      	movs	r2, #0
    ca5a:	701a      	strb	r2, [r3, #0]
    ca5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca64:	2209      	movs	r2, #9
    ca66:	701a      	strb	r2, [r3, #0]
    ca68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca70:	2209      	movs	r2, #9
    ca72:	701a      	strb	r2, [r3, #0]
    ca74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7c:	781b      	ldrb	r3, [r3, #0]
    ca7e:	461a      	mov	r2, r3
    ca80:	f648 23f8 	movw	r3, #35576	; 0x8af8
    ca84:	f2c0 0301 	movt	r3, #1
    ca88:	7819      	ldrb	r1, [r3, #0]
    ca8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca92:	5499      	strb	r1, [r3, r2]
    ca94:	f648 23f8 	movw	r3, #35576	; 0x8af8
    ca98:	f2c0 0301 	movt	r3, #1
    ca9c:	781a      	ldrb	r2, [r3, #0]
    ca9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    caa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	4413      	add	r3, r2
    caaa:	b2da      	uxtb	r2, r3
    caac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab4:	701a      	strb	r2, [r3, #0]
    cab6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	781a      	ldrb	r2, [r3, #0]
    cac0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac8:	781b      	ldrb	r3, [r3, #0]
    caca:	4413      	add	r3, r2
    cacc:	b2da      	uxtb	r2, r3
    cace:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad6:	701a      	strb	r2, [r3, #0]
    cad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae0:	781b      	ldrb	r3, [r3, #0]
    cae2:	3301      	adds	r3, #1
    cae4:	b2da      	uxtb	r2, r3
    cae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    caea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caee:	701a      	strb	r2, [r3, #0]
    caf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    caf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	2bff      	cmp	r3, #255	; 0xff
    cafc:	d105      	bne.n	cb0a <send_nav_ref+0x1ea>
    cafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb06:	2200      	movs	r2, #0
    cb08:	701a      	strb	r2, [r3, #0]
    cb0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	461a      	mov	r2, r3
    cb16:	f648 23f8 	movw	r3, #35576	; 0x8af8
    cb1a:	f2c0 0301 	movt	r3, #1
    cb1e:	7859      	ldrb	r1, [r3, #1]
    cb20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb28:	5499      	strb	r1, [r3, r2]
    cb2a:	4bd2      	ldr	r3, [pc, #840]	; (ce74 <send_nav_ref+0x554>)
    cb2c:	781a      	ldrb	r2, [r3, #0]
    cb2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	4413      	add	r3, r2
    cb3a:	b2da      	uxtb	r2, r3
    cb3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb44:	701a      	strb	r2, [r3, #0]
    cb46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4e:	781a      	ldrb	r2, [r3, #0]
    cb50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb58:	781b      	ldrb	r3, [r3, #0]
    cb5a:	4413      	add	r3, r2
    cb5c:	b2da      	uxtb	r2, r3
    cb5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb66:	701a      	strb	r2, [r3, #0]
    cb68:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb70:	781b      	ldrb	r3, [r3, #0]
    cb72:	3301      	adds	r3, #1
    cb74:	b2da      	uxtb	r2, r3
    cb76:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb7e:	701a      	strb	r2, [r3, #0]
    cb80:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb88:	781b      	ldrb	r3, [r3, #0]
    cb8a:	2bff      	cmp	r3, #255	; 0xff
    cb8c:	d105      	bne.n	cb9a <send_nav_ref+0x27a>
    cb8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb96:	2200      	movs	r2, #0
    cb98:	701a      	strb	r2, [r3, #0]
    cb9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba2:	781b      	ldrb	r3, [r3, #0]
    cba4:	461a      	mov	r2, r3
    cba6:	f648 23f8 	movw	r3, #35576	; 0x8af8
    cbaa:	f2c0 0301 	movt	r3, #1
    cbae:	7899      	ldrb	r1, [r3, #2]
    cbb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb8:	5499      	strb	r1, [r3, r2]
    cbba:	4baf      	ldr	r3, [pc, #700]	; (ce78 <send_nav_ref+0x558>)
    cbbc:	781a      	ldrb	r2, [r3, #0]
    cbbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc6:	781b      	ldrb	r3, [r3, #0]
    cbc8:	4413      	add	r3, r2
    cbca:	b2da      	uxtb	r2, r3
    cbcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd4:	701a      	strb	r2, [r3, #0]
    cbd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbde:	781a      	ldrb	r2, [r3, #0]
    cbe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe8:	781b      	ldrb	r3, [r3, #0]
    cbea:	4413      	add	r3, r2
    cbec:	b2da      	uxtb	r2, r3
    cbee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf6:	701a      	strb	r2, [r3, #0]
    cbf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc00:	781b      	ldrb	r3, [r3, #0]
    cc02:	3301      	adds	r3, #1
    cc04:	b2da      	uxtb	r2, r3
    cc06:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0e:	701a      	strb	r2, [r3, #0]
    cc10:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	2bff      	cmp	r3, #255	; 0xff
    cc1c:	d105      	bne.n	cc2a <send_nav_ref+0x30a>
    cc1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc26:	2200      	movs	r2, #0
    cc28:	701a      	strb	r2, [r3, #0]
    cc2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc32:	781b      	ldrb	r3, [r3, #0]
    cc34:	461a      	mov	r2, r3
    cc36:	f648 23f8 	movw	r3, #35576	; 0x8af8
    cc3a:	f2c0 0301 	movt	r3, #1
    cc3e:	78d9      	ldrb	r1, [r3, #3]
    cc40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc48:	5499      	strb	r1, [r3, r2]
    cc4a:	4b8c      	ldr	r3, [pc, #560]	; (ce7c <send_nav_ref+0x55c>)
    cc4c:	781a      	ldrb	r2, [r3, #0]
    cc4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	4413      	add	r3, r2
    cc5a:	b2da      	uxtb	r2, r3
    cc5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc64:	701a      	strb	r2, [r3, #0]
    cc66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	781a      	ldrb	r2, [r3, #0]
    cc70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	4413      	add	r3, r2
    cc7c:	b2da      	uxtb	r2, r3
    cc7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc86:	701a      	strb	r2, [r3, #0]
    cc88:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	3301      	adds	r3, #1
    cc94:	b2da      	uxtb	r2, r3
    cc96:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9e:	701a      	strb	r2, [r3, #0]
    cca0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	2bff      	cmp	r3, #255	; 0xff
    ccac:	d105      	bne.n	ccba <send_nav_ref+0x39a>
    ccae:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb6:	2200      	movs	r2, #0
    ccb8:	701a      	strb	r2, [r3, #0]
    ccba:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	461a      	mov	r2, r3
    ccc6:	f648 23fc 	movw	r3, #35580	; 0x8afc
    ccca:	f2c0 0301 	movt	r3, #1
    ccce:	7819      	ldrb	r1, [r3, #0]
    ccd0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ccd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd8:	5499      	strb	r1, [r3, r2]
    ccda:	f648 23fc 	movw	r3, #35580	; 0x8afc
    ccde:	f2c0 0301 	movt	r3, #1
    cce2:	781a      	ldrb	r2, [r3, #0]
    cce4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccec:	781b      	ldrb	r3, [r3, #0]
    ccee:	4413      	add	r3, r2
    ccf0:	b2da      	uxtb	r2, r3
    ccf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfa:	701a      	strb	r2, [r3, #0]
    ccfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd04:	781a      	ldrb	r2, [r3, #0]
    cd06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	781b      	ldrb	r3, [r3, #0]
    cd10:	4413      	add	r3, r2
    cd12:	b2da      	uxtb	r2, r3
    cd14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1c:	701a      	strb	r2, [r3, #0]
    cd1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd26:	781b      	ldrb	r3, [r3, #0]
    cd28:	3301      	adds	r3, #1
    cd2a:	b2da      	uxtb	r2, r3
    cd2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd34:	701a      	strb	r2, [r3, #0]
    cd36:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	2bff      	cmp	r3, #255	; 0xff
    cd42:	d105      	bne.n	cd50 <send_nav_ref+0x430>
    cd44:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4c:	2200      	movs	r2, #0
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd58:	781b      	ldrb	r3, [r3, #0]
    cd5a:	461a      	mov	r2, r3
    cd5c:	f648 23fc 	movw	r3, #35580	; 0x8afc
    cd60:	f2c0 0301 	movt	r3, #1
    cd64:	7859      	ldrb	r1, [r3, #1]
    cd66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6e:	5499      	strb	r1, [r3, r2]
    cd70:	4b43      	ldr	r3, [pc, #268]	; (ce80 <send_nav_ref+0x560>)
    cd72:	781a      	ldrb	r2, [r3, #0]
    cd74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7c:	781b      	ldrb	r3, [r3, #0]
    cd7e:	4413      	add	r3, r2
    cd80:	b2da      	uxtb	r2, r3
    cd82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8a:	701a      	strb	r2, [r3, #0]
    cd8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd94:	781a      	ldrb	r2, [r3, #0]
    cd96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	4413      	add	r3, r2
    cda2:	b2da      	uxtb	r2, r3
    cda4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdac:	701a      	strb	r2, [r3, #0]
    cdae:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb6:	781b      	ldrb	r3, [r3, #0]
    cdb8:	3301      	adds	r3, #1
    cdba:	b2da      	uxtb	r2, r3
    cdbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc4:	701a      	strb	r2, [r3, #0]
    cdc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdce:	781b      	ldrb	r3, [r3, #0]
    cdd0:	2bff      	cmp	r3, #255	; 0xff
    cdd2:	d105      	bne.n	cde0 <send_nav_ref+0x4c0>
    cdd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cddc:	2200      	movs	r2, #0
    cdde:	701a      	strb	r2, [r3, #0]
    cde0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde8:	781b      	ldrb	r3, [r3, #0]
    cdea:	461a      	mov	r2, r3
    cdec:	f648 23fc 	movw	r3, #35580	; 0x8afc
    cdf0:	f2c0 0301 	movt	r3, #1
    cdf4:	7899      	ldrb	r1, [r3, #2]
    cdf6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfe:	5499      	strb	r1, [r3, r2]
    ce00:	4b20      	ldr	r3, [pc, #128]	; (ce84 <send_nav_ref+0x564>)
    ce02:	781a      	ldrb	r2, [r3, #0]
    ce04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0c:	781b      	ldrb	r3, [r3, #0]
    ce0e:	4413      	add	r3, r2
    ce10:	b2da      	uxtb	r2, r3
    ce12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1a:	701a      	strb	r2, [r3, #0]
    ce1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce24:	781a      	ldrb	r2, [r3, #0]
    ce26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2e:	781b      	ldrb	r3, [r3, #0]
    ce30:	4413      	add	r3, r2
    ce32:	b2da      	uxtb	r2, r3
    ce34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3c:	701a      	strb	r2, [r3, #0]
    ce3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	3301      	adds	r3, #1
    ce4a:	b2da      	uxtb	r2, r3
    ce4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce54:	701a      	strb	r2, [r3, #0]
    ce56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5e:	781b      	ldrb	r3, [r3, #0]
    ce60:	2bff      	cmp	r3, #255	; 0xff
    ce62:	d111      	bne.n	ce88 <send_nav_ref+0x568>
    ce64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6c:	2200      	movs	r2, #0
    ce6e:	701a      	strb	r2, [r3, #0]
    ce70:	e00a      	b.n	ce88 <send_nav_ref+0x568>
    ce72:	bf00      	nop
    ce74:	00018af9 	.word	0x00018af9
    ce78:	00018afa 	.word	0x00018afa
    ce7c:	00018afb 	.word	0x00018afb
    ce80:	00018afd 	.word	0x00018afd
    ce84:	00018afe 	.word	0x00018afe
    ce88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	461a      	mov	r2, r3
    ce94:	f648 23fc 	movw	r3, #35580	; 0x8afc
    ce98:	f2c0 0301 	movt	r3, #1
    ce9c:	78d9      	ldrb	r1, [r3, #3]
    ce9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea6:	5499      	strb	r1, [r3, r2]
    cea8:	4b79      	ldr	r3, [pc, #484]	; (d090 <send_nav_ref+0x770>)
    ceaa:	781a      	ldrb	r2, [r3, #0]
    ceac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ceb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb4:	781b      	ldrb	r3, [r3, #0]
    ceb6:	4413      	add	r3, r2
    ceb8:	b2da      	uxtb	r2, r3
    ceba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec2:	701a      	strb	r2, [r3, #0]
    cec4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cecc:	781a      	ldrb	r2, [r3, #0]
    cece:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ced2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced6:	781b      	ldrb	r3, [r3, #0]
    ced8:	4413      	add	r3, r2
    ceda:	b2da      	uxtb	r2, r3
    cedc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee4:	701a      	strb	r2, [r3, #0]
    cee6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	3301      	adds	r3, #1
    cef2:	b2da      	uxtb	r2, r3
    cef4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefc:	701a      	strb	r2, [r3, #0]
    cefe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf06:	781b      	ldrb	r3, [r3, #0]
    cf08:	2bff      	cmp	r3, #255	; 0xff
    cf0a:	d105      	bne.n	cf18 <send_nav_ref+0x5f8>
    cf0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf14:	2200      	movs	r2, #0
    cf16:	701a      	strb	r2, [r3, #0]
    cf18:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf20:	781b      	ldrb	r3, [r3, #0]
    cf22:	461a      	mov	r2, r3
    cf24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cf28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2c:	7819      	ldrb	r1, [r3, #0]
    cf2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf36:	5499      	strb	r1, [r3, r2]
    cf38:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	3301      	adds	r3, #1
    cf44:	b2da      	uxtb	r2, r3
    cf46:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4e:	701a      	strb	r2, [r3, #0]
    cf50:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf58:	781b      	ldrb	r3, [r3, #0]
    cf5a:	2bff      	cmp	r3, #255	; 0xff
    cf5c:	d105      	bne.n	cf6a <send_nav_ref+0x64a>
    cf5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf66:	2200      	movs	r2, #0
    cf68:	701a      	strb	r2, [r3, #0]
    cf6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf72:	781b      	ldrb	r3, [r3, #0]
    cf74:	461a      	mov	r2, r3
    cf76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7e:	7819      	ldrb	r1, [r3, #0]
    cf80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf88:	5499      	strb	r1, [r3, r2]
    cf8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf92:	781b      	ldrb	r3, [r3, #0]
    cf94:	3301      	adds	r3, #1
    cf96:	b2da      	uxtb	r2, r3
    cf98:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa0:	701a      	strb	r2, [r3, #0]
    cfa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfaa:	781b      	ldrb	r3, [r3, #0]
    cfac:	2bff      	cmp	r3, #255	; 0xff
    cfae:	d105      	bne.n	cfbc <send_nav_ref+0x69c>
    cfb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb8:	2200      	movs	r2, #0
    cfba:	701a      	strb	r2, [r3, #0]
    cfbc:	f242 0339 	movw	r3, #8249	; 0x2039
    cfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc4:	781b      	ldrb	r3, [r3, #0]
    cfc6:	b2db      	uxtb	r3, r3
    cfc8:	f003 0310 	and.w	r3, r3, #16
    cfcc:	2b00      	cmp	r3, #0
    cfce:	d15a      	bne.n	d086 <send_nav_ref+0x766>
    cfd0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd8:	781b      	ldrb	r3, [r3, #0]
    cfda:	b2db      	uxtb	r3, r3
    cfdc:	461a      	mov	r2, r3
    cfde:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	5c9a      	ldrb	r2, [r3, r2]
    cfe8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    cfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff0:	701a      	strb	r2, [r3, #0]
    cff2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    cff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cffa:	2200      	movs	r2, #0
    cffc:	701a      	strb	r2, [r3, #0]
    cffe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	b2db      	uxtb	r3, r3
    d00a:	3301      	adds	r3, #1
    d00c:	b2da      	uxtb	r2, r3
    d00e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d016:	701a      	strb	r2, [r3, #0]
    d018:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	b2db      	uxtb	r3, r3
    d024:	2bff      	cmp	r3, #255	; 0xff
    d026:	d105      	bne.n	d034 <send_nav_ref+0x714>
    d028:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d030:	2200      	movs	r2, #0
    d032:	701a      	strb	r2, [r3, #0]
    d034:	f242 0338 	movw	r3, #8248	; 0x2038
    d038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03c:	f242 0238 	movw	r2, #8248	; 0x2038
    d040:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d044:	7812      	ldrb	r2, [r2, #0]
    d046:	b2d2      	uxtb	r2, r2
    d048:	f042 0201 	orr.w	r2, r2, #1
    d04c:	b2d2      	uxtb	r2, r2
    d04e:	701a      	strb	r2, [r3, #0]
    d050:	f242 0339 	movw	r3, #8249	; 0x2039
    d054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d058:	f242 0239 	movw	r2, #8249	; 0x2039
    d05c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d060:	7812      	ldrb	r2, [r2, #0]
    d062:	b2d2      	uxtb	r2, r2
    d064:	f042 0210 	orr.w	r2, r2, #16
    d068:	b2d2      	uxtb	r2, r2
    d06a:	701a      	strb	r2, [r3, #0]
    d06c:	e00b      	b.n	d086 <send_nav_ref+0x766>
    d06e:	f24c 5348 	movw	r3, #50504	; 0xc548
    d072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	3301      	adds	r3, #1
    d07a:	b2da      	uxtb	r2, r3
    d07c:	f24c 5348 	movw	r3, #50504	; 0xc548
    d080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d084:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d086:	46bd      	mov	sp, r7
    d088:	f85d 7b04 	ldr.w	r7, [sp], #4
    d08c:	4770      	bx	lr
    d08e:	bf00      	nop
    d090:	00018aff 	.word	0x00018aff

0000d094 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d094:	b480      	push	{r7}
    d096:	b083      	sub	sp, #12
    d098:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d09a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a2:	8a1b      	ldrh	r3, [r3, #16]
    d0a4:	b21b      	sxth	r3, r3
    d0a6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d0aa:	db0d      	blt.n	d0c8 <inflight_calib_mode_update+0x34>
    d0ac:	f24c 6350 	movw	r3, #50768	; 0xc650
    d0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b4:	8a1b      	ldrh	r3, [r3, #16]
    d0b6:	b21a      	sxth	r2, r3
    d0b8:	f640 437f 	movw	r3, #3199	; 0xc7f
    d0bc:	429a      	cmp	r2, r3
    d0be:	bfd4      	ite	le
    d0c0:	2300      	movle	r3, #0
    d0c2:	2301      	movgt	r3, #1
    d0c4:	b2db      	uxtb	r3, r3
    d0c6:	e000      	b.n	d0ca <inflight_calib_mode_update+0x36>
    d0c8:	2302      	movs	r3, #2
    d0ca:	71fb      	strb	r3, [r7, #7]
    d0cc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d4:	781b      	ldrb	r3, [r3, #0]
    d0d6:	79fa      	ldrb	r2, [r7, #7]
    d0d8:	429a      	cmp	r2, r3
    d0da:	d007      	beq.n	d0ec <inflight_calib_mode_update+0x58>
    d0dc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e4:	79fa      	ldrb	r2, [r7, #7]
    d0e6:	701a      	strb	r2, [r3, #0]
    d0e8:	2301      	movs	r3, #1
    d0ea:	e000      	b.n	d0ee <inflight_calib_mode_update+0x5a>
    d0ec:	2300      	movs	r3, #0
}
    d0ee:	4618      	mov	r0, r3
    d0f0:	370c      	adds	r7, #12
    d0f2:	46bd      	mov	sp, r7
    d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f8:	4770      	bx	lr
    d0fa:	bf00      	nop

0000d0fc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d0fc:	b580      	push	{r7, lr}
    d0fe:	b082      	sub	sp, #8
    d100:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d102:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10a:	2201      	movs	r2, #1
    d10c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d10e:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d116:	781b      	ldrb	r3, [r3, #0]
    d118:	b2db      	uxtb	r3, r3
    d11a:	2b00      	cmp	r3, #0
    d11c:	f000 83c0 	beq.w	d8a0 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d120:	2300      	movs	r3, #0
    d122:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d124:	f7fa fa4c 	bl	75c0 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d128:	4b3e      	ldr	r3, [pc, #248]	; (d224 <radio_control_task+0x128>)
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	b2db      	uxtb	r3, r3
    d12e:	f003 0302 	and.w	r3, r3, #2
    d132:	2b00      	cmp	r3, #0
    d134:	d00d      	beq.n	d152 <radio_control_task+0x56>
    d136:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d13e:	781b      	ldrb	r3, [r3, #0]
    d140:	2b01      	cmp	r3, #1
    d142:	d00d      	beq.n	d160 <radio_control_task+0x64>
    d144:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	2b00      	cmp	r3, #0
    d150:	d006      	beq.n	d160 <radio_control_task+0x64>
    d152:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d007      	beq.n	d170 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d160:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d168:	2203      	movs	r2, #3
    d16a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d16c:	2301      	movs	r3, #1
    d16e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d170:	4b2c      	ldr	r3, [pc, #176]	; (d224 <radio_control_task+0x128>)
    d172:	781b      	ldrb	r3, [r3, #0]
    d174:	b2db      	uxtb	r3, r3
    d176:	f003 0304 	and.w	r3, r3, #4
    d17a:	2b00      	cmp	r3, #0
    d17c:	d023      	beq.n	d1c6 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d17e:	f7fa f8f9 	bl	7374 <pprz_mode_update>
    d182:	4603      	mov	r3, r0
    d184:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d186:	79fa      	ldrb	r2, [r7, #7]
    d188:	79bb      	ldrb	r3, [r7, #6]
    d18a:	4313      	orrs	r3, r2
    d18c:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d18e:	f7fa f93d 	bl	740c <ir_estim_mode_update>
    d192:	4603      	mov	r3, r0
    d194:	461a      	mov	r2, r3
    d196:	79fb      	ldrb	r3, [r7, #7]
    d198:	4313      	orrs	r3, r2
    d19a:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d19c:	f7ff ff7a 	bl	d094 <inflight_calib_mode_update>
    d1a0:	4603      	mov	r3, r0
    d1a2:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d1a4:	797b      	ldrb	r3, [r7, #5]
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d102      	bne.n	d1b0 <radio_control_task+0xb4>
    d1aa:	79bb      	ldrb	r3, [r7, #6]
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d001      	beq.n	d1b4 <radio_control_task+0xb8>
    d1b0:	2301      	movs	r3, #1
    d1b2:	e000      	b.n	d1b6 <radio_control_task+0xba>
    d1b4:	2300      	movs	r3, #0
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	4618      	mov	r0, r3
    d1ba:	f008 fba1 	bl	15900 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d1be:	79fa      	ldrb	r2, [r7, #7]
    d1c0:	797b      	ldrb	r3, [r7, #5]
    d1c2:	4313      	orrs	r3, r2
    d1c4:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d1c6:	f7fa f949 	bl	745c <mcu1_status_update>
    d1ca:	4603      	mov	r3, r0
    d1cc:	461a      	mov	r2, r3
    d1ce:	79fb      	ldrb	r3, [r7, #7]
    d1d0:	4313      	orrs	r3, r2
    d1d2:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d1d4:	2301      	movs	r3, #1
    d1d6:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d1d8:	79fb      	ldrb	r3, [r7, #7]
    d1da:	2b00      	cmp	r3, #0
    d1dc:	f000 82bd 	beq.w	d75a <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d1e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e8:	781a      	ldrb	r2, [r3, #0]
    d1ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f2:	781b      	ldrb	r3, [r3, #0]
    d1f4:	b2db      	uxtb	r3, r3
    d1f6:	429a      	cmp	r2, r3
    d1f8:	d316      	bcc.n	d228 <radio_control_task+0x12c>
    d1fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d202:	781b      	ldrb	r3, [r3, #0]
    d204:	b2db      	uxtb	r3, r3
    d206:	461a      	mov	r2, r3
    d208:	f24c 5349 	movw	r3, #50505	; 0xc549
    d20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d210:	781b      	ldrb	r3, [r3, #0]
    d212:	1ad3      	subs	r3, r2, r3
    d214:	33ff      	adds	r3, #255	; 0xff
    d216:	2b09      	cmp	r3, #9
    d218:	bfd4      	ite	le
    d21a:	2300      	movle	r3, #0
    d21c:	2301      	movgt	r3, #1
    d21e:	b2db      	uxtb	r3, r3
    d220:	e014      	b.n	d24c <radio_control_task+0x150>
    d222:	bf00      	nop
    d224:	2004c663 	.word	0x2004c663
    d228:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	b2db      	uxtb	r3, r3
    d234:	461a      	mov	r2, r3
    d236:	f24c 5349 	movw	r3, #50505	; 0xc549
    d23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23e:	781b      	ldrb	r3, [r3, #0]
    d240:	1ad3      	subs	r3, r2, r3
    d242:	2b09      	cmp	r3, #9
    d244:	bfd4      	ite	le
    d246:	2300      	movle	r3, #0
    d248:	2301      	movgt	r3, #1
    d24a:	b2db      	uxtb	r3, r3
    d24c:	2b00      	cmp	r3, #0
    d24e:	f000 8278 	beq.w	d742 <radio_control_task+0x646>
    d252:	f24c 5349 	movw	r3, #50505	; 0xc549
    d256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25a:	781b      	ldrb	r3, [r3, #0]
    d25c:	461a      	mov	r2, r3
    d25e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d266:	2105      	movs	r1, #5
    d268:	5499      	strb	r1, [r3, r2]
    d26a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d272:	781b      	ldrb	r3, [r3, #0]
    d274:	3301      	adds	r3, #1
    d276:	b2da      	uxtb	r2, r3
    d278:	f24c 5349 	movw	r3, #50505	; 0xc549
    d27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d280:	701a      	strb	r2, [r3, #0]
    d282:	f24c 5349 	movw	r3, #50505	; 0xc549
    d286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	2bff      	cmp	r3, #255	; 0xff
    d28e:	d105      	bne.n	d29c <radio_control_task+0x1a0>
    d290:	f24c 5349 	movw	r3, #50505	; 0xc549
    d294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d298:	2200      	movs	r2, #0
    d29a:	701a      	strb	r2, [r3, #0]
    d29c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	461a      	mov	r2, r3
    d2a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b0:	210b      	movs	r1, #11
    d2b2:	5499      	strb	r1, [r3, r2]
    d2b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	3301      	adds	r3, #1
    d2c0:	b2da      	uxtb	r2, r3
    d2c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ca:	701a      	strb	r2, [r3, #0]
    d2cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	2bff      	cmp	r3, #255	; 0xff
    d2d8:	d105      	bne.n	d2e6 <radio_control_task+0x1ea>
    d2da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e2:	2200      	movs	r2, #0
    d2e4:	701a      	strb	r2, [r3, #0]
    d2e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ee:	220b      	movs	r2, #11
    d2f0:	701a      	strb	r2, [r3, #0]
    d2f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fa:	220b      	movs	r2, #11
    d2fc:	701a      	strb	r2, [r3, #0]
    d2fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    d302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d306:	781b      	ldrb	r3, [r3, #0]
    d308:	461a      	mov	r2, r3
    d30a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d312:	7819      	ldrb	r1, [r3, #0]
    d314:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31c:	5499      	strb	r1, [r3, r2]
    d31e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	781a      	ldrb	r2, [r3, #0]
    d328:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d330:	781b      	ldrb	r3, [r3, #0]
    d332:	4413      	add	r3, r2
    d334:	b2da      	uxtb	r2, r3
    d336:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	701a      	strb	r2, [r3, #0]
    d340:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d348:	781a      	ldrb	r2, [r3, #0]
    d34a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d352:	781b      	ldrb	r3, [r3, #0]
    d354:	4413      	add	r3, r2
    d356:	b2da      	uxtb	r2, r3
    d358:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d360:	701a      	strb	r2, [r3, #0]
    d362:	f24c 5349 	movw	r3, #50505	; 0xc549
    d366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	3301      	adds	r3, #1
    d36e:	b2da      	uxtb	r2, r3
    d370:	f24c 5349 	movw	r3, #50505	; 0xc549
    d374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d378:	701a      	strb	r2, [r3, #0]
    d37a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d382:	781b      	ldrb	r3, [r3, #0]
    d384:	2bff      	cmp	r3, #255	; 0xff
    d386:	d105      	bne.n	d394 <radio_control_task+0x298>
    d388:	f24c 5349 	movw	r3, #50505	; 0xc549
    d38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d390:	2200      	movs	r2, #0
    d392:	701a      	strb	r2, [r3, #0]
    d394:	f24c 5349 	movw	r3, #50505	; 0xc549
    d398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39c:	781b      	ldrb	r3, [r3, #0]
    d39e:	461a      	mov	r2, r3
    d3a0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a8:	7819      	ldrb	r1, [r3, #0]
    d3aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b2:	5499      	strb	r1, [r3, r2]
    d3b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	781a      	ldrb	r2, [r3, #0]
    d3be:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c6:	781b      	ldrb	r3, [r3, #0]
    d3c8:	4413      	add	r3, r2
    d3ca:	b2da      	uxtb	r2, r3
    d3cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	701a      	strb	r2, [r3, #0]
    d3d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3de:	781a      	ldrb	r2, [r3, #0]
    d3e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	4413      	add	r3, r2
    d3ec:	b2da      	uxtb	r2, r3
    d3ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f6:	701a      	strb	r2, [r3, #0]
    d3f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	3301      	adds	r3, #1
    d404:	b2da      	uxtb	r2, r3
    d406:	f24c 5349 	movw	r3, #50505	; 0xc549
    d40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40e:	701a      	strb	r2, [r3, #0]
    d410:	f24c 5349 	movw	r3, #50505	; 0xc549
    d414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d418:	781b      	ldrb	r3, [r3, #0]
    d41a:	2bff      	cmp	r3, #255	; 0xff
    d41c:	d105      	bne.n	d42a <radio_control_task+0x32e>
    d41e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d426:	2200      	movs	r2, #0
    d428:	701a      	strb	r2, [r3, #0]
    d42a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d432:	781b      	ldrb	r3, [r3, #0]
    d434:	461a      	mov	r2, r3
    d436:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	7819      	ldrb	r1, [r3, #0]
    d440:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d448:	5499      	strb	r1, [r3, r2]
    d44a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d452:	781a      	ldrb	r2, [r3, #0]
    d454:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45c:	781b      	ldrb	r3, [r3, #0]
    d45e:	4413      	add	r3, r2
    d460:	b2da      	uxtb	r2, r3
    d462:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46a:	701a      	strb	r2, [r3, #0]
    d46c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d474:	781a      	ldrb	r2, [r3, #0]
    d476:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47e:	781b      	ldrb	r3, [r3, #0]
    d480:	4413      	add	r3, r2
    d482:	b2da      	uxtb	r2, r3
    d484:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	781b      	ldrb	r3, [r3, #0]
    d498:	3301      	adds	r3, #1
    d49a:	b2da      	uxtb	r2, r3
    d49c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a4:	701a      	strb	r2, [r3, #0]
    d4a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ae:	781b      	ldrb	r3, [r3, #0]
    d4b0:	2bff      	cmp	r3, #255	; 0xff
    d4b2:	d105      	bne.n	d4c0 <radio_control_task+0x3c4>
    d4b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4bc:	2200      	movs	r2, #0
    d4be:	701a      	strb	r2, [r3, #0]
    d4c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c8:	781b      	ldrb	r3, [r3, #0]
    d4ca:	461a      	mov	r2, r3
    d4cc:	f24c 5333 	movw	r3, #50483	; 0xc533
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	7819      	ldrb	r1, [r3, #0]
    d4d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4de:	5499      	strb	r1, [r3, r2]
    d4e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e8:	781a      	ldrb	r2, [r3, #0]
    d4ea:	f24c 5333 	movw	r3, #50483	; 0xc533
    d4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f2:	781b      	ldrb	r3, [r3, #0]
    d4f4:	4413      	add	r3, r2
    d4f6:	b2da      	uxtb	r2, r3
    d4f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d500:	701a      	strb	r2, [r3, #0]
    d502:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50a:	781a      	ldrb	r2, [r3, #0]
    d50c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	4413      	add	r3, r2
    d518:	b2da      	uxtb	r2, r3
    d51a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d522:	701a      	strb	r2, [r3, #0]
    d524:	f24c 5349 	movw	r3, #50505	; 0xc549
    d528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	3301      	adds	r3, #1
    d530:	b2da      	uxtb	r2, r3
    d532:	f24c 5349 	movw	r3, #50505	; 0xc549
    d536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53a:	701a      	strb	r2, [r3, #0]
    d53c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	781b      	ldrb	r3, [r3, #0]
    d546:	2bff      	cmp	r3, #255	; 0xff
    d548:	d105      	bne.n	d556 <radio_control_task+0x45a>
    d54a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d552:	2200      	movs	r2, #0
    d554:	701a      	strb	r2, [r3, #0]
    d556:	f24c 5349 	movw	r3, #50505	; 0xc549
    d55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55e:	781b      	ldrb	r3, [r3, #0]
    d560:	461a      	mov	r2, r3
    d562:	f240 533c 	movw	r3, #1340	; 0x53c
    d566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56a:	7819      	ldrb	r1, [r3, #0]
    d56c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	5499      	strb	r1, [r3, r2]
    d576:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57e:	781a      	ldrb	r2, [r3, #0]
    d580:	f240 533c 	movw	r3, #1340	; 0x53c
    d584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	4413      	add	r3, r2
    d58c:	b2da      	uxtb	r2, r3
    d58e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d596:	701a      	strb	r2, [r3, #0]
    d598:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a0:	781a      	ldrb	r2, [r3, #0]
    d5a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5aa:	781b      	ldrb	r3, [r3, #0]
    d5ac:	4413      	add	r3, r2
    d5ae:	b2da      	uxtb	r2, r3
    d5b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b8:	701a      	strb	r2, [r3, #0]
    d5ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c2:	781b      	ldrb	r3, [r3, #0]
    d5c4:	3301      	adds	r3, #1
    d5c6:	b2da      	uxtb	r2, r3
    d5c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d0:	701a      	strb	r2, [r3, #0]
    d5d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5da:	781b      	ldrb	r3, [r3, #0]
    d5dc:	2bff      	cmp	r3, #255	; 0xff
    d5de:	d105      	bne.n	d5ec <radio_control_task+0x4f0>
    d5e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e8:	2200      	movs	r2, #0
    d5ea:	701a      	strb	r2, [r3, #0]
    d5ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	461a      	mov	r2, r3
    d5f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d600:	7819      	ldrb	r1, [r3, #0]
    d602:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	5499      	strb	r1, [r3, r2]
    d60c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d614:	781b      	ldrb	r3, [r3, #0]
    d616:	3301      	adds	r3, #1
    d618:	b2da      	uxtb	r2, r3
    d61a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	701a      	strb	r2, [r3, #0]
    d624:	f24c 5349 	movw	r3, #50505	; 0xc549
    d628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d62c:	781b      	ldrb	r3, [r3, #0]
    d62e:	2bff      	cmp	r3, #255	; 0xff
    d630:	d105      	bne.n	d63e <radio_control_task+0x542>
    d632:	f24c 5349 	movw	r3, #50505	; 0xc549
    d636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d63a:	2200      	movs	r2, #0
    d63c:	701a      	strb	r2, [r3, #0]
    d63e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d646:	781b      	ldrb	r3, [r3, #0]
    d648:	461a      	mov	r2, r3
    d64a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d652:	7819      	ldrb	r1, [r3, #0]
    d654:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65c:	5499      	strb	r1, [r3, r2]
    d65e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d666:	781b      	ldrb	r3, [r3, #0]
    d668:	3301      	adds	r3, #1
    d66a:	b2da      	uxtb	r2, r3
    d66c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d674:	701a      	strb	r2, [r3, #0]
    d676:	f24c 5349 	movw	r3, #50505	; 0xc549
    d67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67e:	781b      	ldrb	r3, [r3, #0]
    d680:	2bff      	cmp	r3, #255	; 0xff
    d682:	d105      	bne.n	d690 <radio_control_task+0x594>
    d684:	f24c 5349 	movw	r3, #50505	; 0xc549
    d688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68c:	2200      	movs	r2, #0
    d68e:	701a      	strb	r2, [r3, #0]
    d690:	f242 0339 	movw	r3, #8249	; 0x2039
    d694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d698:	781b      	ldrb	r3, [r3, #0]
    d69a:	b2db      	uxtb	r3, r3
    d69c:	f003 0310 	and.w	r3, r3, #16
    d6a0:	2b00      	cmp	r3, #0
    d6a2:	d15a      	bne.n	d75a <radio_control_task+0x65e>
    d6a4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ac:	781b      	ldrb	r3, [r3, #0]
    d6ae:	b2db      	uxtb	r3, r3
    d6b0:	461a      	mov	r2, r3
    d6b2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ba:	5c9a      	ldrb	r2, [r3, r2]
    d6bc:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c4:	701a      	strb	r2, [r3, #0]
    d6c6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ce:	2200      	movs	r2, #0
    d6d0:	701a      	strb	r2, [r3, #0]
    d6d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6da:	781b      	ldrb	r3, [r3, #0]
    d6dc:	b2db      	uxtb	r3, r3
    d6de:	3301      	adds	r3, #1
    d6e0:	b2da      	uxtb	r2, r3
    d6e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ea:	701a      	strb	r2, [r3, #0]
    d6ec:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f4:	781b      	ldrb	r3, [r3, #0]
    d6f6:	b2db      	uxtb	r3, r3
    d6f8:	2bff      	cmp	r3, #255	; 0xff
    d6fa:	d105      	bne.n	d708 <radio_control_task+0x60c>
    d6fc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d704:	2200      	movs	r2, #0
    d706:	701a      	strb	r2, [r3, #0]
    d708:	f242 0338 	movw	r3, #8248	; 0x2038
    d70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d710:	f242 0238 	movw	r2, #8248	; 0x2038
    d714:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d718:	7812      	ldrb	r2, [r2, #0]
    d71a:	b2d2      	uxtb	r2, r2
    d71c:	f042 0201 	orr.w	r2, r2, #1
    d720:	b2d2      	uxtb	r2, r2
    d722:	701a      	strb	r2, [r3, #0]
    d724:	f242 0339 	movw	r3, #8249	; 0x2039
    d728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72c:	f242 0239 	movw	r2, #8249	; 0x2039
    d730:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d734:	7812      	ldrb	r2, [r2, #0]
    d736:	b2d2      	uxtb	r2, r2
    d738:	f042 0210 	orr.w	r2, r2, #16
    d73c:	b2d2      	uxtb	r2, r2
    d73e:	701a      	strb	r2, [r3, #0]
    d740:	e00b      	b.n	d75a <radio_control_task+0x65e>
    d742:	f24c 5348 	movw	r3, #50504	; 0xc548
    d746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74a:	781b      	ldrb	r3, [r3, #0]
    d74c:	3301      	adds	r3, #1
    d74e:	b2da      	uxtb	r2, r3
    d750:	f24c 5348 	movw	r3, #50504	; 0xc548
    d754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d758:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d75a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d762:	885b      	ldrh	r3, [r3, #2]
    d764:	b21b      	sxth	r3, r3
    d766:	4618      	mov	r0, r3
    d768:	f00a fe82 	bl	18470 <__aeabi_i2f>
    d76c:	4603      	mov	r3, r0
    d76e:	4618      	mov	r0, r3
    d770:	f04f 0100 	mov.w	r1, #0
    d774:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d778:	f00a ff82 	bl	18680 <__aeabi_fdiv>
    d77c:	4603      	mov	r3, r0
    d77e:	4618      	mov	r0, r3
    d780:	f00a fa36 	bl	17bf0 <__aeabi_f2d>
    d784:	4602      	mov	r2, r0
    d786:	460b      	mov	r3, r1
    d788:	4610      	mov	r0, r2
    d78a:	4619      	mov	r1, r3
    d78c:	a346      	add	r3, pc, #280	; (adr r3, d8a8 <radio_control_task+0x7ac>)
    d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d792:	f00a fa81 	bl	17c98 <__aeabi_dmul>
    d796:	4602      	mov	r2, r0
    d798:	460b      	mov	r3, r1
    d79a:	4610      	mov	r0, r2
    d79c:	4619      	mov	r1, r3
    d79e:	f04f 0200 	mov.w	r2, #0
    d7a2:	f04f 0300 	mov.w	r3, #0
    d7a6:	f00a f8c5 	bl	17934 <__adddf3>
    d7aa:	4602      	mov	r2, r0
    d7ac:	460b      	mov	r3, r1
    d7ae:	4610      	mov	r0, r2
    d7b0:	4619      	mov	r1, r3
    d7b2:	f00a fd53 	bl	1825c <__aeabi_d2f>
    d7b6:	4602      	mov	r2, r0
    d7b8:	f64c 0374 	movw	r3, #51316	; 0xc874
    d7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d7c2:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ca:	889b      	ldrh	r3, [r3, #4]
    d7cc:	b21b      	sxth	r3, r3
    d7ce:	4618      	mov	r0, r3
    d7d0:	f00a fe4e 	bl	18470 <__aeabi_i2f>
    d7d4:	4603      	mov	r3, r0
    d7d6:	4618      	mov	r0, r3
    d7d8:	f04f 0100 	mov.w	r1, #0
    d7dc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d7e0:	f00a ff4e 	bl	18680 <__aeabi_fdiv>
    d7e4:	4603      	mov	r3, r0
    d7e6:	4618      	mov	r0, r3
    d7e8:	f00a fa02 	bl	17bf0 <__aeabi_f2d>
    d7ec:	4602      	mov	r2, r0
    d7ee:	460b      	mov	r3, r1
    d7f0:	4610      	mov	r0, r2
    d7f2:	4619      	mov	r1, r3
    d7f4:	f04f 0200 	mov.w	r2, #0
    d7f8:	f04f 0300 	mov.w	r3, #0
    d7fc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d800:	f00a fa4a 	bl	17c98 <__aeabi_dmul>
    d804:	4602      	mov	r2, r0
    d806:	460b      	mov	r3, r1
    d808:	4610      	mov	r0, r2
    d80a:	4619      	mov	r1, r3
    d80c:	f04f 0200 	mov.w	r2, #0
    d810:	f04f 0300 	mov.w	r3, #0
    d814:	f00a f88e 	bl	17934 <__adddf3>
    d818:	4602      	mov	r2, r0
    d81a:	460b      	mov	r3, r1
    d81c:	4610      	mov	r0, r2
    d81e:	4619      	mov	r1, r3
    d820:	f00a fd1c 	bl	1825c <__aeabi_d2f>
    d824:	4602      	mov	r2, r0
    d826:	f64c 0378 	movw	r3, #51320	; 0xc878
    d82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d830:	f24c 6350 	movw	r3, #50768	; 0xc650
    d834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d838:	881a      	ldrh	r2, [r3, #0]
    d83a:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d842:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d844:	f24c 6350 	movw	r3, #50768	; 0xc650
    d848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84c:	7c9a      	ldrb	r2, [r3, #18]
    d84e:	f24c 5334 	movw	r3, #50484	; 0xc534
    d852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d856:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d858:	f24c 6350 	movw	r3, #50768	; 0xc650
    d85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d860:	7d5a      	ldrb	r2, [r3, #21]
    d862:	f24c 5332 	movw	r3, #50482	; 0xc532
    d866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86a:	701a      	strb	r2, [r3, #0]

    events_update();
    d86c:	f7f9 fe26 	bl	74bc <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d870:	f7f8 fc26 	bl	60c0 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d874:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87c:	781b      	ldrb	r3, [r3, #0]
    d87e:	2b02      	cmp	r3, #2
    d880:	d10e      	bne.n	d8a0 <radio_control_task+0x7a4>
    d882:	f24c 6350 	movw	r3, #50768	; 0xc650
    d886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88a:	881b      	ldrh	r3, [r3, #0]
    d88c:	b21b      	sxth	r3, r3
    d88e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d892:	dd05      	ble.n	d8a0 <radio_control_task+0x7a4>
	launch = TRUE;
    d894:	f24c 5340 	movw	r3, #50496	; 0xc540
    d898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89c:	2201      	movs	r2, #1
    d89e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d8a0:	3708      	adds	r7, #8
    d8a2:	46bd      	mov	sp, r7
    d8a4:	bd80      	pop	{r7, pc}
    d8a6:	bf00      	nop
    d8a8:	33333333 	.word	0x33333333
    d8ac:	bfe33333 	.word	0xbfe33333

0000d8b0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d8b0:	b580      	push	{r7, lr}
    d8b2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d8b4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8bc:	2203      	movs	r2, #3
    d8be:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d8c0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c8:	781b      	ldrb	r3, [r3, #0]
    d8ca:	2b03      	cmp	r3, #3
    d8cc:	d102      	bne.n	d8d4 <navigation_update+0x24>
    nav_home();
    d8ce:	f007 fa9b 	bl	14e08 <nav_home>
    d8d2:	e001      	b.n	d8d8 <navigation_update+0x28>
  else
    nav_update();
    d8d4:	f007 fabe 	bl	14e54 <nav_update>
}
    d8d8:	bd80      	pop	{r7, pc}
    d8da:	bf00      	nop

0000d8dc <send_nav_values>:

void send_nav_values(void){
    d8dc:	b480      	push	{r7}
    d8de:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	781a      	ldrb	r2, [r3, #0]
    d8ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f2:	781b      	ldrb	r3, [r3, #0]
    d8f4:	b2db      	uxtb	r3, r3
    d8f6:	429a      	cmp	r2, r3
    d8f8:	d313      	bcc.n	d922 <send_nav_values+0x46>
    d8fa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	b2db      	uxtb	r3, r3
    d906:	461a      	mov	r2, r3
    d908:	f24c 5349 	movw	r3, #50505	; 0xc549
    d90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	1ad3      	subs	r3, r2, r3
    d914:	33ff      	adds	r3, #255	; 0xff
    d916:	2b1e      	cmp	r3, #30
    d918:	bfd4      	ite	le
    d91a:	2300      	movle	r3, #0
    d91c:	2301      	movgt	r3, #1
    d91e:	b2db      	uxtb	r3, r3
    d920:	e011      	b.n	d946 <send_nav_values+0x6a>
    d922:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	b2db      	uxtb	r3, r3
    d92e:	461a      	mov	r2, r3
    d930:	f24c 5349 	movw	r3, #50505	; 0xc549
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	1ad3      	subs	r3, r2, r3
    d93c:	2b1e      	cmp	r3, #30
    d93e:	bfd4      	ite	le
    d940:	2300      	movle	r3, #0
    d942:	2301      	movgt	r3, #1
    d944:	b2db      	uxtb	r3, r3
    d946:	2b00      	cmp	r3, #0
    d948:	f001 8094 	beq.w	ea74 <send_nav_values+0x1198>
    d94c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d954:	781b      	ldrb	r3, [r3, #0]
    d956:	461a      	mov	r2, r3
    d958:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d960:	2105      	movs	r1, #5
    d962:	5499      	strb	r1, [r3, r2]
    d964:	f24c 5349 	movw	r3, #50505	; 0xc549
    d968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96c:	781b      	ldrb	r3, [r3, #0]
    d96e:	3301      	adds	r3, #1
    d970:	b2da      	uxtb	r2, r3
    d972:	f24c 5349 	movw	r3, #50505	; 0xc549
    d976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97a:	701a      	strb	r2, [r3, #0]
    d97c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d984:	781b      	ldrb	r3, [r3, #0]
    d986:	2bff      	cmp	r3, #255	; 0xff
    d988:	d105      	bne.n	d996 <send_nav_values+0xba>
    d98a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d992:	2200      	movs	r2, #0
    d994:	701a      	strb	r2, [r3, #0]
    d996:	f24c 5349 	movw	r3, #50505	; 0xc549
    d99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99e:	781b      	ldrb	r3, [r3, #0]
    d9a0:	461a      	mov	r2, r3
    d9a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9aa:	210a      	movs	r1, #10
    d9ac:	5499      	strb	r1, [r3, r2]
    d9ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b6:	781b      	ldrb	r3, [r3, #0]
    d9b8:	3301      	adds	r3, #1
    d9ba:	b2da      	uxtb	r2, r3
    d9bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c4:	701a      	strb	r2, [r3, #0]
    d9c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	2bff      	cmp	r3, #255	; 0xff
    d9d2:	d105      	bne.n	d9e0 <send_nav_values+0x104>
    d9d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9dc:	2200      	movs	r2, #0
    d9de:	701a      	strb	r2, [r3, #0]
    d9e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e8:	220a      	movs	r2, #10
    d9ea:	701a      	strb	r2, [r3, #0]
    d9ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f4:	220a      	movs	r2, #10
    d9f6:	701a      	strb	r2, [r3, #0]
    d9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da00:	781b      	ldrb	r3, [r3, #0]
    da02:	461a      	mov	r2, r3
    da04:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	7819      	ldrb	r1, [r3, #0]
    da0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	5499      	strb	r1, [r3, r2]
    da18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	781a      	ldrb	r2, [r3, #0]
    da22:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    da26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2a:	781b      	ldrb	r3, [r3, #0]
    da2c:	4413      	add	r3, r2
    da2e:	b2da      	uxtb	r2, r3
    da30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	701a      	strb	r2, [r3, #0]
    da3a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da42:	781a      	ldrb	r2, [r3, #0]
    da44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4c:	781b      	ldrb	r3, [r3, #0]
    da4e:	4413      	add	r3, r2
    da50:	b2da      	uxtb	r2, r3
    da52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5a:	701a      	strb	r2, [r3, #0]
    da5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	781b      	ldrb	r3, [r3, #0]
    da66:	3301      	adds	r3, #1
    da68:	b2da      	uxtb	r2, r3
    da6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da72:	701a      	strb	r2, [r3, #0]
    da74:	f24c 5349 	movw	r3, #50505	; 0xc549
    da78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7c:	781b      	ldrb	r3, [r3, #0]
    da7e:	2bff      	cmp	r3, #255	; 0xff
    da80:	d105      	bne.n	da8e <send_nav_values+0x1b2>
    da82:	f24c 5349 	movw	r3, #50505	; 0xc549
    da86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8a:	2200      	movs	r2, #0
    da8c:	701a      	strb	r2, [r3, #0]
    da8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    da92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da96:	781b      	ldrb	r3, [r3, #0]
    da98:	461a      	mov	r2, r3
    da9a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa2:	7819      	ldrb	r1, [r3, #0]
    daa4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    daa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daac:	5499      	strb	r1, [r3, r2]
    daae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	781a      	ldrb	r2, [r3, #0]
    dab8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    dabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac0:	781b      	ldrb	r3, [r3, #0]
    dac2:	4413      	add	r3, r2
    dac4:	b2da      	uxtb	r2, r3
    dac6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	701a      	strb	r2, [r3, #0]
    dad0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad8:	781a      	ldrb	r2, [r3, #0]
    dada:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae2:	781b      	ldrb	r3, [r3, #0]
    dae4:	4413      	add	r3, r2
    dae6:	b2da      	uxtb	r2, r3
    dae8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf0:	701a      	strb	r2, [r3, #0]
    daf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    daf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafa:	781b      	ldrb	r3, [r3, #0]
    dafc:	3301      	adds	r3, #1
    dafe:	b2da      	uxtb	r2, r3
    db00:	f24c 5349 	movw	r3, #50505	; 0xc549
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	701a      	strb	r2, [r3, #0]
    db0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db12:	781b      	ldrb	r3, [r3, #0]
    db14:	2bff      	cmp	r3, #255	; 0xff
    db16:	d105      	bne.n	db24 <send_nav_values+0x248>
    db18:	f24c 5349 	movw	r3, #50505	; 0xc549
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	2200      	movs	r2, #0
    db22:	701a      	strb	r2, [r3, #0]
    db24:	f24c 5349 	movw	r3, #50505	; 0xc549
    db28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2c:	781b      	ldrb	r3, [r3, #0]
    db2e:	461a      	mov	r2, r3
    db30:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db38:	7819      	ldrb	r1, [r3, #0]
    db3a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db42:	5499      	strb	r1, [r3, r2]
    db44:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4c:	781a      	ldrb	r2, [r3, #0]
    db4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	4413      	add	r3, r2
    db5a:	b2da      	uxtb	r2, r3
    db5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db64:	701a      	strb	r2, [r3, #0]
    db66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6e:	781a      	ldrb	r2, [r3, #0]
    db70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db78:	781b      	ldrb	r3, [r3, #0]
    db7a:	4413      	add	r3, r2
    db7c:	b2da      	uxtb	r2, r3
    db7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db86:	701a      	strb	r2, [r3, #0]
    db88:	f24c 5349 	movw	r3, #50505	; 0xc549
    db8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db90:	781b      	ldrb	r3, [r3, #0]
    db92:	3301      	adds	r3, #1
    db94:	b2da      	uxtb	r2, r3
    db96:	f24c 5349 	movw	r3, #50505	; 0xc549
    db9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9e:	701a      	strb	r2, [r3, #0]
    dba0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba8:	781b      	ldrb	r3, [r3, #0]
    dbaa:	2bff      	cmp	r3, #255	; 0xff
    dbac:	d105      	bne.n	dbba <send_nav_values+0x2de>
    dbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb6:	2200      	movs	r2, #0
    dbb8:	701a      	strb	r2, [r3, #0]
    dbba:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc2:	781b      	ldrb	r3, [r3, #0]
    dbc4:	461a      	mov	r2, r3
    dbc6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbce:	7859      	ldrb	r1, [r3, #1]
    dbd0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd8:	5499      	strb	r1, [r3, r2]
    dbda:	4bd2      	ldr	r3, [pc, #840]	; (df24 <send_nav_values+0x648>)
    dbdc:	781a      	ldrb	r2, [r3, #0]
    dbde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe6:	781b      	ldrb	r3, [r3, #0]
    dbe8:	4413      	add	r3, r2
    dbea:	b2da      	uxtb	r2, r3
    dbec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf4:	701a      	strb	r2, [r3, #0]
    dbf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfe:	781a      	ldrb	r2, [r3, #0]
    dc00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc08:	781b      	ldrb	r3, [r3, #0]
    dc0a:	4413      	add	r3, r2
    dc0c:	b2da      	uxtb	r2, r3
    dc0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc16:	701a      	strb	r2, [r3, #0]
    dc18:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc20:	781b      	ldrb	r3, [r3, #0]
    dc22:	3301      	adds	r3, #1
    dc24:	b2da      	uxtb	r2, r3
    dc26:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2e:	701a      	strb	r2, [r3, #0]
    dc30:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	2bff      	cmp	r3, #255	; 0xff
    dc3c:	d105      	bne.n	dc4a <send_nav_values+0x36e>
    dc3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc46:	2200      	movs	r2, #0
    dc48:	701a      	strb	r2, [r3, #0]
    dc4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc52:	781b      	ldrb	r3, [r3, #0]
    dc54:	461a      	mov	r2, r3
    dc56:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5e:	7899      	ldrb	r1, [r3, #2]
    dc60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc68:	5499      	strb	r1, [r3, r2]
    dc6a:	4baf      	ldr	r3, [pc, #700]	; (df28 <send_nav_values+0x64c>)
    dc6c:	781a      	ldrb	r2, [r3, #0]
    dc6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	4413      	add	r3, r2
    dc7a:	b2da      	uxtb	r2, r3
    dc7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	701a      	strb	r2, [r3, #0]
    dc86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8e:	781a      	ldrb	r2, [r3, #0]
    dc90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc98:	781b      	ldrb	r3, [r3, #0]
    dc9a:	4413      	add	r3, r2
    dc9c:	b2da      	uxtb	r2, r3
    dc9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca6:	701a      	strb	r2, [r3, #0]
    dca8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb0:	781b      	ldrb	r3, [r3, #0]
    dcb2:	3301      	adds	r3, #1
    dcb4:	b2da      	uxtb	r2, r3
    dcb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	701a      	strb	r2, [r3, #0]
    dcc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc8:	781b      	ldrb	r3, [r3, #0]
    dcca:	2bff      	cmp	r3, #255	; 0xff
    dccc:	d105      	bne.n	dcda <send_nav_values+0x3fe>
    dcce:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	2200      	movs	r2, #0
    dcd8:	701a      	strb	r2, [r3, #0]
    dcda:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce2:	781b      	ldrb	r3, [r3, #0]
    dce4:	461a      	mov	r2, r3
    dce6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcee:	78d9      	ldrb	r1, [r3, #3]
    dcf0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf8:	5499      	strb	r1, [r3, r2]
    dcfa:	4b8c      	ldr	r3, [pc, #560]	; (df2c <send_nav_values+0x650>)
    dcfc:	781a      	ldrb	r2, [r3, #0]
    dcfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	4413      	add	r3, r2
    dd0a:	b2da      	uxtb	r2, r3
    dd0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	701a      	strb	r2, [r3, #0]
    dd16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1e:	781a      	ldrb	r2, [r3, #0]
    dd20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd28:	781b      	ldrb	r3, [r3, #0]
    dd2a:	4413      	add	r3, r2
    dd2c:	b2da      	uxtb	r2, r3
    dd2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd36:	701a      	strb	r2, [r3, #0]
    dd38:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	3301      	adds	r3, #1
    dd44:	b2da      	uxtb	r2, r3
    dd46:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4e:	701a      	strb	r2, [r3, #0]
    dd50:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd58:	781b      	ldrb	r3, [r3, #0]
    dd5a:	2bff      	cmp	r3, #255	; 0xff
    dd5c:	d105      	bne.n	dd6a <send_nav_values+0x48e>
    dd5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	2200      	movs	r2, #0
    dd68:	701a      	strb	r2, [r3, #0]
    dd6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd72:	781b      	ldrb	r3, [r3, #0]
    dd74:	461a      	mov	r2, r3
    dd76:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	7819      	ldrb	r1, [r3, #0]
    dd80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd88:	5499      	strb	r1, [r3, r2]
    dd8a:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd92:	781a      	ldrb	r2, [r3, #0]
    dd94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9c:	781b      	ldrb	r3, [r3, #0]
    dd9e:	4413      	add	r3, r2
    dda0:	b2da      	uxtb	r2, r3
    dda2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddaa:	701a      	strb	r2, [r3, #0]
    ddac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb4:	781a      	ldrb	r2, [r3, #0]
    ddb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	4413      	add	r3, r2
    ddc2:	b2da      	uxtb	r2, r3
    ddc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddcc:	701a      	strb	r2, [r3, #0]
    ddce:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd6:	781b      	ldrb	r3, [r3, #0]
    ddd8:	3301      	adds	r3, #1
    ddda:	b2da      	uxtb	r2, r3
    dddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde4:	701a      	strb	r2, [r3, #0]
    dde6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	2bff      	cmp	r3, #255	; 0xff
    ddf2:	d105      	bne.n	de00 <send_nav_values+0x524>
    ddf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfc:	2200      	movs	r2, #0
    ddfe:	701a      	strb	r2, [r3, #0]
    de00:	f24c 5349 	movw	r3, #50505	; 0xc549
    de04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de08:	781b      	ldrb	r3, [r3, #0]
    de0a:	461a      	mov	r2, r3
    de0c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	7859      	ldrb	r1, [r3, #1]
    de16:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1e:	5499      	strb	r1, [r3, r2]
    de20:	4b43      	ldr	r3, [pc, #268]	; (df30 <send_nav_values+0x654>)
    de22:	781a      	ldrb	r2, [r3, #0]
    de24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2c:	781b      	ldrb	r3, [r3, #0]
    de2e:	4413      	add	r3, r2
    de30:	b2da      	uxtb	r2, r3
    de32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3a:	701a      	strb	r2, [r3, #0]
    de3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de44:	781a      	ldrb	r2, [r3, #0]
    de46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4e:	781b      	ldrb	r3, [r3, #0]
    de50:	4413      	add	r3, r2
    de52:	b2da      	uxtb	r2, r3
    de54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5c:	701a      	strb	r2, [r3, #0]
    de5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de66:	781b      	ldrb	r3, [r3, #0]
    de68:	3301      	adds	r3, #1
    de6a:	b2da      	uxtb	r2, r3
    de6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de74:	701a      	strb	r2, [r3, #0]
    de76:	f24c 5349 	movw	r3, #50505	; 0xc549
    de7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7e:	781b      	ldrb	r3, [r3, #0]
    de80:	2bff      	cmp	r3, #255	; 0xff
    de82:	d105      	bne.n	de90 <send_nav_values+0x5b4>
    de84:	f24c 5349 	movw	r3, #50505	; 0xc549
    de88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8c:	2200      	movs	r2, #0
    de8e:	701a      	strb	r2, [r3, #0]
    de90:	f24c 5349 	movw	r3, #50505	; 0xc549
    de94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de98:	781b      	ldrb	r3, [r3, #0]
    de9a:	461a      	mov	r2, r3
    de9c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	7899      	ldrb	r1, [r3, #2]
    dea6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    deaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deae:	5499      	strb	r1, [r3, r2]
    deb0:	4b20      	ldr	r3, [pc, #128]	; (df34 <send_nav_values+0x658>)
    deb2:	781a      	ldrb	r2, [r3, #0]
    deb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	4413      	add	r3, r2
    dec0:	b2da      	uxtb	r2, r3
    dec2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deca:	701a      	strb	r2, [r3, #0]
    decc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ded0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded4:	781a      	ldrb	r2, [r3, #0]
    ded6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dede:	781b      	ldrb	r3, [r3, #0]
    dee0:	4413      	add	r3, r2
    dee2:	b2da      	uxtb	r2, r3
    dee4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deec:	701a      	strb	r2, [r3, #0]
    deee:	f24c 5349 	movw	r3, #50505	; 0xc549
    def2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def6:	781b      	ldrb	r3, [r3, #0]
    def8:	3301      	adds	r3, #1
    defa:	b2da      	uxtb	r2, r3
    defc:	f24c 5349 	movw	r3, #50505	; 0xc549
    df00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df04:	701a      	strb	r2, [r3, #0]
    df06:	f24c 5349 	movw	r3, #50505	; 0xc549
    df0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	2bff      	cmp	r3, #255	; 0xff
    df12:	d111      	bne.n	df38 <send_nav_values+0x65c>
    df14:	f24c 5349 	movw	r3, #50505	; 0xc549
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	2200      	movs	r2, #0
    df1e:	701a      	strb	r2, [r3, #0]
    df20:	e00a      	b.n	df38 <send_nav_values+0x65c>
    df22:	bf00      	nop
    df24:	2004cafd 	.word	0x2004cafd
    df28:	2004cafe 	.word	0x2004cafe
    df2c:	2004caff 	.word	0x2004caff
    df30:	2004cb01 	.word	0x2004cb01
    df34:	2004cb02 	.word	0x2004cb02
    df38:	f24c 5349 	movw	r3, #50505	; 0xc549
    df3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df40:	781b      	ldrb	r3, [r3, #0]
    df42:	461a      	mov	r2, r3
    df44:	f64c 3300 	movw	r3, #51968	; 0xcb00
    df48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4c:	78d9      	ldrb	r1, [r3, #3]
    df4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df56:	5499      	strb	r1, [r3, r2]
    df58:	4bd3      	ldr	r3, [pc, #844]	; (e2a8 <send_nav_values+0x9cc>)
    df5a:	781a      	ldrb	r2, [r3, #0]
    df5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df64:	781b      	ldrb	r3, [r3, #0]
    df66:	4413      	add	r3, r2
    df68:	b2da      	uxtb	r2, r3
    df6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	701a      	strb	r2, [r3, #0]
    df74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7c:	781a      	ldrb	r2, [r3, #0]
    df7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df86:	781b      	ldrb	r3, [r3, #0]
    df88:	4413      	add	r3, r2
    df8a:	b2da      	uxtb	r2, r3
    df8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	701a      	strb	r2, [r3, #0]
    df96:	f24c 5349 	movw	r3, #50505	; 0xc549
    df9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9e:	781b      	ldrb	r3, [r3, #0]
    dfa0:	3301      	adds	r3, #1
    dfa2:	b2da      	uxtb	r2, r3
    dfa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	701a      	strb	r2, [r3, #0]
    dfae:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb6:	781b      	ldrb	r3, [r3, #0]
    dfb8:	2bff      	cmp	r3, #255	; 0xff
    dfba:	d105      	bne.n	dfc8 <send_nav_values+0x6ec>
    dfbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	2200      	movs	r2, #0
    dfc6:	701a      	strb	r2, [r3, #0]
    dfc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd0:	781b      	ldrb	r3, [r3, #0]
    dfd2:	461a      	mov	r2, r3
    dfd4:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	7819      	ldrb	r1, [r3, #0]
    dfde:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe6:	5499      	strb	r1, [r3, r2]
    dfe8:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff0:	781a      	ldrb	r2, [r3, #0]
    dff2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffa:	781b      	ldrb	r3, [r3, #0]
    dffc:	4413      	add	r3, r2
    dffe:	b2da      	uxtb	r2, r3
    e000:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e008:	701a      	strb	r2, [r3, #0]
    e00a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e012:	781a      	ldrb	r2, [r3, #0]
    e014:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01c:	781b      	ldrb	r3, [r3, #0]
    e01e:	4413      	add	r3, r2
    e020:	b2da      	uxtb	r2, r3
    e022:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02a:	701a      	strb	r2, [r3, #0]
    e02c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e034:	781b      	ldrb	r3, [r3, #0]
    e036:	3301      	adds	r3, #1
    e038:	b2da      	uxtb	r2, r3
    e03a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e042:	701a      	strb	r2, [r3, #0]
    e044:	f24c 5349 	movw	r3, #50505	; 0xc549
    e048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04c:	781b      	ldrb	r3, [r3, #0]
    e04e:	2bff      	cmp	r3, #255	; 0xff
    e050:	d105      	bne.n	e05e <send_nav_values+0x782>
    e052:	f24c 5349 	movw	r3, #50505	; 0xc549
    e056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05a:	2200      	movs	r2, #0
    e05c:	701a      	strb	r2, [r3, #0]
    e05e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e066:	781b      	ldrb	r3, [r3, #0]
    e068:	461a      	mov	r2, r3
    e06a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e072:	7859      	ldrb	r1, [r3, #1]
    e074:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07c:	5499      	strb	r1, [r3, r2]
    e07e:	4b8b      	ldr	r3, [pc, #556]	; (e2ac <send_nav_values+0x9d0>)
    e080:	781a      	ldrb	r2, [r3, #0]
    e082:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08a:	781b      	ldrb	r3, [r3, #0]
    e08c:	4413      	add	r3, r2
    e08e:	b2da      	uxtb	r2, r3
    e090:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e098:	701a      	strb	r2, [r3, #0]
    e09a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a2:	781a      	ldrb	r2, [r3, #0]
    e0a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ac:	781b      	ldrb	r3, [r3, #0]
    e0ae:	4413      	add	r3, r2
    e0b0:	b2da      	uxtb	r2, r3
    e0b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	701a      	strb	r2, [r3, #0]
    e0bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c4:	781b      	ldrb	r3, [r3, #0]
    e0c6:	3301      	adds	r3, #1
    e0c8:	b2da      	uxtb	r2, r3
    e0ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d2:	701a      	strb	r2, [r3, #0]
    e0d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0dc:	781b      	ldrb	r3, [r3, #0]
    e0de:	2bff      	cmp	r3, #255	; 0xff
    e0e0:	d105      	bne.n	e0ee <send_nav_values+0x812>
    e0e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ea:	2200      	movs	r2, #0
    e0ec:	701a      	strb	r2, [r3, #0]
    e0ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	461a      	mov	r2, r3
    e0fa:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e102:	7899      	ldrb	r1, [r3, #2]
    e104:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10c:	5499      	strb	r1, [r3, r2]
    e10e:	4b68      	ldr	r3, [pc, #416]	; (e2b0 <send_nav_values+0x9d4>)
    e110:	781a      	ldrb	r2, [r3, #0]
    e112:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11a:	781b      	ldrb	r3, [r3, #0]
    e11c:	4413      	add	r3, r2
    e11e:	b2da      	uxtb	r2, r3
    e120:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e128:	701a      	strb	r2, [r3, #0]
    e12a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e132:	781a      	ldrb	r2, [r3, #0]
    e134:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13c:	781b      	ldrb	r3, [r3, #0]
    e13e:	4413      	add	r3, r2
    e140:	b2da      	uxtb	r2, r3
    e142:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14a:	701a      	strb	r2, [r3, #0]
    e14c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e154:	781b      	ldrb	r3, [r3, #0]
    e156:	3301      	adds	r3, #1
    e158:	b2da      	uxtb	r2, r3
    e15a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e162:	701a      	strb	r2, [r3, #0]
    e164:	f24c 5349 	movw	r3, #50505	; 0xc549
    e168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16c:	781b      	ldrb	r3, [r3, #0]
    e16e:	2bff      	cmp	r3, #255	; 0xff
    e170:	d105      	bne.n	e17e <send_nav_values+0x8a2>
    e172:	f24c 5349 	movw	r3, #50505	; 0xc549
    e176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17a:	2200      	movs	r2, #0
    e17c:	701a      	strb	r2, [r3, #0]
    e17e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e186:	781b      	ldrb	r3, [r3, #0]
    e188:	461a      	mov	r2, r3
    e18a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e192:	78d9      	ldrb	r1, [r3, #3]
    e194:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19c:	5499      	strb	r1, [r3, r2]
    e19e:	4b45      	ldr	r3, [pc, #276]	; (e2b4 <send_nav_values+0x9d8>)
    e1a0:	781a      	ldrb	r2, [r3, #0]
    e1a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1aa:	781b      	ldrb	r3, [r3, #0]
    e1ac:	4413      	add	r3, r2
    e1ae:	b2da      	uxtb	r2, r3
    e1b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b8:	701a      	strb	r2, [r3, #0]
    e1ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c2:	781a      	ldrb	r2, [r3, #0]
    e1c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	4413      	add	r3, r2
    e1d0:	b2da      	uxtb	r2, r3
    e1d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1da:	701a      	strb	r2, [r3, #0]
    e1dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	3301      	adds	r3, #1
    e1e8:	b2da      	uxtb	r2, r3
    e1ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	701a      	strb	r2, [r3, #0]
    e1f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fc:	781b      	ldrb	r3, [r3, #0]
    e1fe:	2bff      	cmp	r3, #255	; 0xff
    e200:	d105      	bne.n	e20e <send_nav_values+0x932>
    e202:	f24c 5349 	movw	r3, #50505	; 0xc549
    e206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20a:	2200      	movs	r2, #0
    e20c:	701a      	strb	r2, [r3, #0]
    e20e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	461a      	mov	r2, r3
    e21a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	7819      	ldrb	r1, [r3, #0]
    e224:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	5499      	strb	r1, [r3, r2]
    e22e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e236:	781a      	ldrb	r2, [r3, #0]
    e238:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e240:	781b      	ldrb	r3, [r3, #0]
    e242:	4413      	add	r3, r2
    e244:	b2da      	uxtb	r2, r3
    e246:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24e:	701a      	strb	r2, [r3, #0]
    e250:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e258:	781a      	ldrb	r2, [r3, #0]
    e25a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	4413      	add	r3, r2
    e266:	b2da      	uxtb	r2, r3
    e268:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e270:	701a      	strb	r2, [r3, #0]
    e272:	f24c 5349 	movw	r3, #50505	; 0xc549
    e276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27a:	781b      	ldrb	r3, [r3, #0]
    e27c:	3301      	adds	r3, #1
    e27e:	b2da      	uxtb	r2, r3
    e280:	f24c 5349 	movw	r3, #50505	; 0xc549
    e284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e288:	701a      	strb	r2, [r3, #0]
    e28a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e292:	781b      	ldrb	r3, [r3, #0]
    e294:	2bff      	cmp	r3, #255	; 0xff
    e296:	d10f      	bne.n	e2b8 <send_nav_values+0x9dc>
    e298:	f24c 5349 	movw	r3, #50505	; 0xc549
    e29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a0:	2200      	movs	r2, #0
    e2a2:	701a      	strb	r2, [r3, #0]
    e2a4:	e008      	b.n	e2b8 <send_nav_values+0x9dc>
    e2a6:	bf00      	nop
    e2a8:	2004cb03 	.word	0x2004cb03
    e2ac:	2004c88d 	.word	0x2004c88d
    e2b0:	2004c88e 	.word	0x2004c88e
    e2b4:	2004c88f 	.word	0x2004c88f
    e2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c0:	781b      	ldrb	r3, [r3, #0]
    e2c2:	461a      	mov	r2, r3
    e2c4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2cc:	7859      	ldrb	r1, [r3, #1]
    e2ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d6:	5499      	strb	r1, [r3, r2]
    e2d8:	4bd1      	ldr	r3, [pc, #836]	; (e620 <send_nav_values+0xd44>)
    e2da:	781a      	ldrb	r2, [r3, #0]
    e2dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e4:	781b      	ldrb	r3, [r3, #0]
    e2e6:	4413      	add	r3, r2
    e2e8:	b2da      	uxtb	r2, r3
    e2ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f2:	701a      	strb	r2, [r3, #0]
    e2f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fc:	781a      	ldrb	r2, [r3, #0]
    e2fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e306:	781b      	ldrb	r3, [r3, #0]
    e308:	4413      	add	r3, r2
    e30a:	b2da      	uxtb	r2, r3
    e30c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e314:	701a      	strb	r2, [r3, #0]
    e316:	f24c 5349 	movw	r3, #50505	; 0xc549
    e31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31e:	781b      	ldrb	r3, [r3, #0]
    e320:	3301      	adds	r3, #1
    e322:	b2da      	uxtb	r2, r3
    e324:	f24c 5349 	movw	r3, #50505	; 0xc549
    e328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32c:	701a      	strb	r2, [r3, #0]
    e32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e336:	781b      	ldrb	r3, [r3, #0]
    e338:	2bff      	cmp	r3, #255	; 0xff
    e33a:	d105      	bne.n	e348 <send_nav_values+0xa6c>
    e33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e344:	2200      	movs	r2, #0
    e346:	701a      	strb	r2, [r3, #0]
    e348:	f24c 5349 	movw	r3, #50505	; 0xc549
    e34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e350:	781b      	ldrb	r3, [r3, #0]
    e352:	461a      	mov	r2, r3
    e354:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35c:	7899      	ldrb	r1, [r3, #2]
    e35e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e366:	5499      	strb	r1, [r3, r2]
    e368:	4bae      	ldr	r3, [pc, #696]	; (e624 <send_nav_values+0xd48>)
    e36a:	781a      	ldrb	r2, [r3, #0]
    e36c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e374:	781b      	ldrb	r3, [r3, #0]
    e376:	4413      	add	r3, r2
    e378:	b2da      	uxtb	r2, r3
    e37a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e382:	701a      	strb	r2, [r3, #0]
    e384:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38c:	781a      	ldrb	r2, [r3, #0]
    e38e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e396:	781b      	ldrb	r3, [r3, #0]
    e398:	4413      	add	r3, r2
    e39a:	b2da      	uxtb	r2, r3
    e39c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a4:	701a      	strb	r2, [r3, #0]
    e3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	3301      	adds	r3, #1
    e3b2:	b2da      	uxtb	r2, r3
    e3b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	701a      	strb	r2, [r3, #0]
    e3be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c6:	781b      	ldrb	r3, [r3, #0]
    e3c8:	2bff      	cmp	r3, #255	; 0xff
    e3ca:	d105      	bne.n	e3d8 <send_nav_values+0xafc>
    e3cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d4:	2200      	movs	r2, #0
    e3d6:	701a      	strb	r2, [r3, #0]
    e3d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e0:	781b      	ldrb	r3, [r3, #0]
    e3e2:	461a      	mov	r2, r3
    e3e4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ec:	78d9      	ldrb	r1, [r3, #3]
    e3ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f6:	5499      	strb	r1, [r3, r2]
    e3f8:	4b8b      	ldr	r3, [pc, #556]	; (e628 <send_nav_values+0xd4c>)
    e3fa:	781a      	ldrb	r2, [r3, #0]
    e3fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	4413      	add	r3, r2
    e408:	b2da      	uxtb	r2, r3
    e40a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e412:	701a      	strb	r2, [r3, #0]
    e414:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41c:	781a      	ldrb	r2, [r3, #0]
    e41e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e426:	781b      	ldrb	r3, [r3, #0]
    e428:	4413      	add	r3, r2
    e42a:	b2da      	uxtb	r2, r3
    e42c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e434:	701a      	strb	r2, [r3, #0]
    e436:	f24c 5349 	movw	r3, #50505	; 0xc549
    e43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43e:	781b      	ldrb	r3, [r3, #0]
    e440:	3301      	adds	r3, #1
    e442:	b2da      	uxtb	r2, r3
    e444:	f24c 5349 	movw	r3, #50505	; 0xc549
    e448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44c:	701a      	strb	r2, [r3, #0]
    e44e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e456:	781b      	ldrb	r3, [r3, #0]
    e458:	2bff      	cmp	r3, #255	; 0xff
    e45a:	d105      	bne.n	e468 <send_nav_values+0xb8c>
    e45c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e464:	2200      	movs	r2, #0
    e466:	701a      	strb	r2, [r3, #0]
    e468:	f24c 5349 	movw	r3, #50505	; 0xc549
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	781b      	ldrb	r3, [r3, #0]
    e472:	461a      	mov	r2, r3
    e474:	f240 5358 	movw	r3, #1368	; 0x558
    e478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e47c:	7819      	ldrb	r1, [r3, #0]
    e47e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e486:	5499      	strb	r1, [r3, r2]
    e488:	f240 5358 	movw	r3, #1368	; 0x558
    e48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e490:	781a      	ldrb	r2, [r3, #0]
    e492:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49a:	781b      	ldrb	r3, [r3, #0]
    e49c:	4413      	add	r3, r2
    e49e:	b2da      	uxtb	r2, r3
    e4a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a8:	701a      	strb	r2, [r3, #0]
    e4aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b2:	781a      	ldrb	r2, [r3, #0]
    e4b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4bc:	781b      	ldrb	r3, [r3, #0]
    e4be:	4413      	add	r3, r2
    e4c0:	b2da      	uxtb	r2, r3
    e4c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ca:	701a      	strb	r2, [r3, #0]
    e4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d4:	781b      	ldrb	r3, [r3, #0]
    e4d6:	3301      	adds	r3, #1
    e4d8:	b2da      	uxtb	r2, r3
    e4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e2:	701a      	strb	r2, [r3, #0]
    e4e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	2bff      	cmp	r3, #255	; 0xff
    e4f0:	d105      	bne.n	e4fe <send_nav_values+0xc22>
    e4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fa:	2200      	movs	r2, #0
    e4fc:	701a      	strb	r2, [r3, #0]
    e4fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	461a      	mov	r2, r3
    e50a:	f240 5358 	movw	r3, #1368	; 0x558
    e50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e512:	7859      	ldrb	r1, [r3, #1]
    e514:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51c:	5499      	strb	r1, [r3, r2]
    e51e:	4b43      	ldr	r3, [pc, #268]	; (e62c <send_nav_values+0xd50>)
    e520:	781a      	ldrb	r2, [r3, #0]
    e522:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	4413      	add	r3, r2
    e52e:	b2da      	uxtb	r2, r3
    e530:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e538:	701a      	strb	r2, [r3, #0]
    e53a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e542:	781a      	ldrb	r2, [r3, #0]
    e544:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54c:	781b      	ldrb	r3, [r3, #0]
    e54e:	4413      	add	r3, r2
    e550:	b2da      	uxtb	r2, r3
    e552:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55a:	701a      	strb	r2, [r3, #0]
    e55c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e564:	781b      	ldrb	r3, [r3, #0]
    e566:	3301      	adds	r3, #1
    e568:	b2da      	uxtb	r2, r3
    e56a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e572:	701a      	strb	r2, [r3, #0]
    e574:	f24c 5349 	movw	r3, #50505	; 0xc549
    e578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57c:	781b      	ldrb	r3, [r3, #0]
    e57e:	2bff      	cmp	r3, #255	; 0xff
    e580:	d105      	bne.n	e58e <send_nav_values+0xcb2>
    e582:	f24c 5349 	movw	r3, #50505	; 0xc549
    e586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58a:	2200      	movs	r2, #0
    e58c:	701a      	strb	r2, [r3, #0]
    e58e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e596:	781b      	ldrb	r3, [r3, #0]
    e598:	461a      	mov	r2, r3
    e59a:	f240 5358 	movw	r3, #1368	; 0x558
    e59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a2:	7899      	ldrb	r1, [r3, #2]
    e5a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ac:	5499      	strb	r1, [r3, r2]
    e5ae:	4b20      	ldr	r3, [pc, #128]	; (e630 <send_nav_values+0xd54>)
    e5b0:	781a      	ldrb	r2, [r3, #0]
    e5b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ba:	781b      	ldrb	r3, [r3, #0]
    e5bc:	4413      	add	r3, r2
    e5be:	b2da      	uxtb	r2, r3
    e5c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c8:	701a      	strb	r2, [r3, #0]
    e5ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d2:	781a      	ldrb	r2, [r3, #0]
    e5d4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5dc:	781b      	ldrb	r3, [r3, #0]
    e5de:	4413      	add	r3, r2
    e5e0:	b2da      	uxtb	r2, r3
    e5e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ea:	701a      	strb	r2, [r3, #0]
    e5ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f4:	781b      	ldrb	r3, [r3, #0]
    e5f6:	3301      	adds	r3, #1
    e5f8:	b2da      	uxtb	r2, r3
    e5fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e602:	701a      	strb	r2, [r3, #0]
    e604:	f24c 5349 	movw	r3, #50505	; 0xc549
    e608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60c:	781b      	ldrb	r3, [r3, #0]
    e60e:	2bff      	cmp	r3, #255	; 0xff
    e610:	d110      	bne.n	e634 <send_nav_values+0xd58>
    e612:	f24c 5349 	movw	r3, #50505	; 0xc549
    e616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61a:	2200      	movs	r2, #0
    e61c:	701a      	strb	r2, [r3, #0]
    e61e:	e009      	b.n	e634 <send_nav_values+0xd58>
    e620:	2004c8d5 	.word	0x2004c8d5
    e624:	2004c8d6 	.word	0x2004c8d6
    e628:	2004c8d7 	.word	0x2004c8d7
    e62c:	20000559 	.word	0x20000559
    e630:	2000055a 	.word	0x2000055a
    e634:	f24c 5349 	movw	r3, #50505	; 0xc549
    e638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63c:	781b      	ldrb	r3, [r3, #0]
    e63e:	461a      	mov	r2, r3
    e640:	f240 5358 	movw	r3, #1368	; 0x558
    e644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e648:	78d9      	ldrb	r1, [r3, #3]
    e64a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e652:	5499      	strb	r1, [r3, r2]
    e654:	4bc2      	ldr	r3, [pc, #776]	; (e960 <send_nav_values+0x1084>)
    e656:	781a      	ldrb	r2, [r3, #0]
    e658:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	4413      	add	r3, r2
    e664:	b2da      	uxtb	r2, r3
    e666:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	701a      	strb	r2, [r3, #0]
    e670:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e678:	781a      	ldrb	r2, [r3, #0]
    e67a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e682:	781b      	ldrb	r3, [r3, #0]
    e684:	4413      	add	r3, r2
    e686:	b2da      	uxtb	r2, r3
    e688:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	701a      	strb	r2, [r3, #0]
    e692:	f24c 5349 	movw	r3, #50505	; 0xc549
    e696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	3301      	adds	r3, #1
    e69e:	b2da      	uxtb	r2, r3
    e6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	701a      	strb	r2, [r3, #0]
    e6aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b2:	781b      	ldrb	r3, [r3, #0]
    e6b4:	2bff      	cmp	r3, #255	; 0xff
    e6b6:	d105      	bne.n	e6c4 <send_nav_values+0xde8>
    e6b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	2200      	movs	r2, #0
    e6c2:	701a      	strb	r2, [r3, #0]
    e6c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6cc:	781b      	ldrb	r3, [r3, #0]
    e6ce:	461a      	mov	r2, r3
    e6d0:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d8:	7819      	ldrb	r1, [r3, #0]
    e6da:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e2:	5499      	strb	r1, [r3, r2]
    e6e4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ec:	781a      	ldrb	r2, [r3, #0]
    e6ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f6:	781b      	ldrb	r3, [r3, #0]
    e6f8:	4413      	add	r3, r2
    e6fa:	b2da      	uxtb	r2, r3
    e6fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e704:	701a      	strb	r2, [r3, #0]
    e706:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e70e:	781a      	ldrb	r2, [r3, #0]
    e710:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e718:	781b      	ldrb	r3, [r3, #0]
    e71a:	4413      	add	r3, r2
    e71c:	b2da      	uxtb	r2, r3
    e71e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e726:	701a      	strb	r2, [r3, #0]
    e728:	f24c 5349 	movw	r3, #50505	; 0xc549
    e72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e730:	781b      	ldrb	r3, [r3, #0]
    e732:	3301      	adds	r3, #1
    e734:	b2da      	uxtb	r2, r3
    e736:	f24c 5349 	movw	r3, #50505	; 0xc549
    e73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e73e:	701a      	strb	r2, [r3, #0]
    e740:	f24c 5349 	movw	r3, #50505	; 0xc549
    e744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	2bff      	cmp	r3, #255	; 0xff
    e74c:	d105      	bne.n	e75a <send_nav_values+0xe7e>
    e74e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e756:	2200      	movs	r2, #0
    e758:	701a      	strb	r2, [r3, #0]
    e75a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e762:	781b      	ldrb	r3, [r3, #0]
    e764:	461a      	mov	r2, r3
    e766:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76e:	7859      	ldrb	r1, [r3, #1]
    e770:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e778:	5499      	strb	r1, [r3, r2]
    e77a:	4b7a      	ldr	r3, [pc, #488]	; (e964 <send_nav_values+0x1088>)
    e77c:	781a      	ldrb	r2, [r3, #0]
    e77e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e786:	781b      	ldrb	r3, [r3, #0]
    e788:	4413      	add	r3, r2
    e78a:	b2da      	uxtb	r2, r3
    e78c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e794:	701a      	strb	r2, [r3, #0]
    e796:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e79e:	781a      	ldrb	r2, [r3, #0]
    e7a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a8:	781b      	ldrb	r3, [r3, #0]
    e7aa:	4413      	add	r3, r2
    e7ac:	b2da      	uxtb	r2, r3
    e7ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b6:	701a      	strb	r2, [r3, #0]
    e7b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c0:	781b      	ldrb	r3, [r3, #0]
    e7c2:	3301      	adds	r3, #1
    e7c4:	b2da      	uxtb	r2, r3
    e7c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ce:	701a      	strb	r2, [r3, #0]
    e7d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d8:	781b      	ldrb	r3, [r3, #0]
    e7da:	2bff      	cmp	r3, #255	; 0xff
    e7dc:	d105      	bne.n	e7ea <send_nav_values+0xf0e>
    e7de:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e6:	2200      	movs	r2, #0
    e7e8:	701a      	strb	r2, [r3, #0]
    e7ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	461a      	mov	r2, r3
    e7f6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fe:	7899      	ldrb	r1, [r3, #2]
    e800:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e808:	5499      	strb	r1, [r3, r2]
    e80a:	4b57      	ldr	r3, [pc, #348]	; (e968 <send_nav_values+0x108c>)
    e80c:	781a      	ldrb	r2, [r3, #0]
    e80e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e816:	781b      	ldrb	r3, [r3, #0]
    e818:	4413      	add	r3, r2
    e81a:	b2da      	uxtb	r2, r3
    e81c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e824:	701a      	strb	r2, [r3, #0]
    e826:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82e:	781a      	ldrb	r2, [r3, #0]
    e830:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e838:	781b      	ldrb	r3, [r3, #0]
    e83a:	4413      	add	r3, r2
    e83c:	b2da      	uxtb	r2, r3
    e83e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e846:	701a      	strb	r2, [r3, #0]
    e848:	f24c 5349 	movw	r3, #50505	; 0xc549
    e84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	3301      	adds	r3, #1
    e854:	b2da      	uxtb	r2, r3
    e856:	f24c 5349 	movw	r3, #50505	; 0xc549
    e85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85e:	701a      	strb	r2, [r3, #0]
    e860:	f24c 5349 	movw	r3, #50505	; 0xc549
    e864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e868:	781b      	ldrb	r3, [r3, #0]
    e86a:	2bff      	cmp	r3, #255	; 0xff
    e86c:	d105      	bne.n	e87a <send_nav_values+0xf9e>
    e86e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e876:	2200      	movs	r2, #0
    e878:	701a      	strb	r2, [r3, #0]
    e87a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e882:	781b      	ldrb	r3, [r3, #0]
    e884:	461a      	mov	r2, r3
    e886:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88e:	78d9      	ldrb	r1, [r3, #3]
    e890:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e898:	5499      	strb	r1, [r3, r2]
    e89a:	4b34      	ldr	r3, [pc, #208]	; (e96c <send_nav_values+0x1090>)
    e89c:	781a      	ldrb	r2, [r3, #0]
    e89e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a6:	781b      	ldrb	r3, [r3, #0]
    e8a8:	4413      	add	r3, r2
    e8aa:	b2da      	uxtb	r2, r3
    e8ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b4:	701a      	strb	r2, [r3, #0]
    e8b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8be:	781a      	ldrb	r2, [r3, #0]
    e8c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c8:	781b      	ldrb	r3, [r3, #0]
    e8ca:	4413      	add	r3, r2
    e8cc:	b2da      	uxtb	r2, r3
    e8ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d6:	701a      	strb	r2, [r3, #0]
    e8d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e0:	781b      	ldrb	r3, [r3, #0]
    e8e2:	3301      	adds	r3, #1
    e8e4:	b2da      	uxtb	r2, r3
    e8e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ee:	701a      	strb	r2, [r3, #0]
    e8f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f8:	781b      	ldrb	r3, [r3, #0]
    e8fa:	2bff      	cmp	r3, #255	; 0xff
    e8fc:	d105      	bne.n	e90a <send_nav_values+0x102e>
    e8fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    e902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e906:	2200      	movs	r2, #0
    e908:	701a      	strb	r2, [r3, #0]
    e90a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e912:	781b      	ldrb	r3, [r3, #0]
    e914:	461a      	mov	r2, r3
    e916:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91e:	7819      	ldrb	r1, [r3, #0]
    e920:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e928:	5499      	strb	r1, [r3, r2]
    e92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e932:	781b      	ldrb	r3, [r3, #0]
    e934:	3301      	adds	r3, #1
    e936:	b2da      	uxtb	r2, r3
    e938:	f24c 5349 	movw	r3, #50505	; 0xc549
    e93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e940:	701a      	strb	r2, [r3, #0]
    e942:	f24c 5349 	movw	r3, #50505	; 0xc549
    e946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94a:	781b      	ldrb	r3, [r3, #0]
    e94c:	2bff      	cmp	r3, #255	; 0xff
    e94e:	d10f      	bne.n	e970 <send_nav_values+0x1094>
    e950:	f24c 5349 	movw	r3, #50505	; 0xc549
    e954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e958:	2200      	movs	r2, #0
    e95a:	701a      	strb	r2, [r3, #0]
    e95c:	e008      	b.n	e970 <send_nav_values+0x1094>
    e95e:	bf00      	nop
    e960:	2000055b 	.word	0x2000055b
    e964:	2004c8d9 	.word	0x2004c8d9
    e968:	2004c8da 	.word	0x2004c8da
    e96c:	2004c8db 	.word	0x2004c8db
    e970:	f24c 5349 	movw	r3, #50505	; 0xc549
    e974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	461a      	mov	r2, r3
    e97c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e984:	7819      	ldrb	r1, [r3, #0]
    e986:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98e:	5499      	strb	r1, [r3, r2]
    e990:	f24c 5349 	movw	r3, #50505	; 0xc549
    e994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e998:	781b      	ldrb	r3, [r3, #0]
    e99a:	3301      	adds	r3, #1
    e99c:	b2da      	uxtb	r2, r3
    e99e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a6:	701a      	strb	r2, [r3, #0]
    e9a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b0:	781b      	ldrb	r3, [r3, #0]
    e9b2:	2bff      	cmp	r3, #255	; 0xff
    e9b4:	d105      	bne.n	e9c2 <send_nav_values+0x10e6>
    e9b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9be:	2200      	movs	r2, #0
    e9c0:	701a      	strb	r2, [r3, #0]
    e9c2:	f242 0339 	movw	r3, #8249	; 0x2039
    e9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ca:	781b      	ldrb	r3, [r3, #0]
    e9cc:	b2db      	uxtb	r3, r3
    e9ce:	f003 0310 	and.w	r3, r3, #16
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d15a      	bne.n	ea8c <send_nav_values+0x11b0>
    e9d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9de:	781b      	ldrb	r3, [r3, #0]
    e9e0:	b2db      	uxtb	r3, r3
    e9e2:	461a      	mov	r2, r3
    e9e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ec:	5c9a      	ldrb	r2, [r3, r2]
    e9ee:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f6:	701a      	strb	r2, [r3, #0]
    e9f8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea00:	2200      	movs	r2, #0
    ea02:	701a      	strb	r2, [r3, #0]
    ea04:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea0c:	781b      	ldrb	r3, [r3, #0]
    ea0e:	b2db      	uxtb	r3, r3
    ea10:	3301      	adds	r3, #1
    ea12:	b2da      	uxtb	r2, r3
    ea14:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea1c:	701a      	strb	r2, [r3, #0]
    ea1e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	b2db      	uxtb	r3, r3
    ea2a:	2bff      	cmp	r3, #255	; 0xff
    ea2c:	d105      	bne.n	ea3a <send_nav_values+0x115e>
    ea2e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ea32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea36:	2200      	movs	r2, #0
    ea38:	701a      	strb	r2, [r3, #0]
    ea3a:	f242 0338 	movw	r3, #8248	; 0x2038
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	f242 0238 	movw	r2, #8248	; 0x2038
    ea46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea4a:	7812      	ldrb	r2, [r2, #0]
    ea4c:	b2d2      	uxtb	r2, r2
    ea4e:	f042 0201 	orr.w	r2, r2, #1
    ea52:	b2d2      	uxtb	r2, r2
    ea54:	701a      	strb	r2, [r3, #0]
    ea56:	f242 0339 	movw	r3, #8249	; 0x2039
    ea5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5e:	f242 0239 	movw	r2, #8249	; 0x2039
    ea62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ea66:	7812      	ldrb	r2, [r2, #0]
    ea68:	b2d2      	uxtb	r2, r2
    ea6a:	f042 0210 	orr.w	r2, r2, #16
    ea6e:	b2d2      	uxtb	r2, r2
    ea70:	701a      	strb	r2, [r3, #0]
    ea72:	e00b      	b.n	ea8c <send_nav_values+0x11b0>
    ea74:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	3301      	adds	r3, #1
    ea80:	b2da      	uxtb	r2, r3
    ea82:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8a:	701a      	strb	r2, [r3, #0]
}
    ea8c:	46bd      	mov	sp, r7
    ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea92:	4770      	bx	lr

0000ea94 <course_run>:

void course_run(void){
    ea94:	b580      	push	{r7, lr}
    ea96:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea98:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa0:	781b      	ldrb	r3, [r3, #0]
    eaa2:	2b02      	cmp	r3, #2
    eaa4:	d006      	beq.n	eab4 <course_run+0x20>
    eaa6:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaae:	781b      	ldrb	r3, [r3, #0]
    eab0:	2b03      	cmp	r3, #3
    eab2:	d112      	bne.n	eada <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    eab4:	f24c 532e 	movw	r3, #50478	; 0xc52e
    eab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eabc:	781b      	ldrb	r3, [r3, #0]
    eabe:	2b02      	cmp	r3, #2
    eac0:	d901      	bls.n	eac6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    eac2:	f003 faf1 	bl	120a8 <course_pid_run>
    desired_roll = nav_desired_roll;
    eac6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    eaca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eace:	681a      	ldr	r2, [r3, #0]
    ead0:	f64c 0374 	movw	r3, #51316	; 0xc874
    ead4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    eada:	bd80      	pop	{r7, pc}

0000eadc <altitude_control_task>:

void altitude_control_task(void)
{
    eadc:	b580      	push	{r7, lr}
    eade:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eae0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae8:	781b      	ldrb	r3, [r3, #0]
    eaea:	2b02      	cmp	r3, #2
    eaec:	d006      	beq.n	eafc <altitude_control_task+0x20>
    eaee:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eaf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf6:	781b      	ldrb	r3, [r3, #0]
    eaf8:	2b03      	cmp	r3, #3
    eafa:	d108      	bne.n	eb0e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eafc:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	2b03      	cmp	r3, #3
    eb08:	d101      	bne.n	eb0e <altitude_control_task+0x32>
      			altitude_pid_run();
    eb0a:	f003 fd55 	bl	125b8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eb0e:	bd80      	pop	{r7, pc}

0000eb10 <climb_control_task>:
void climb_control_task(void)
{
    eb10:	b580      	push	{r7, lr}
    eb12:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eb14:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb1c:	781b      	ldrb	r3, [r3, #0]
    eb1e:	2b02      	cmp	r3, #2
    eb20:	d006      	beq.n	eb30 <climb_control_task+0x20>
    eb22:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2a:	781b      	ldrb	r3, [r3, #0]
    eb2c:	2b03      	cmp	r3, #3
    eb2e:	d135      	bne.n	eb9c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eb30:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb38:	781b      	ldrb	r3, [r3, #0]
    eb3a:	2b01      	cmp	r3, #1
    eb3c:	d901      	bls.n	eb42 <climb_control_task+0x32>
        	climb_pid_run();
    eb3e:	f003 fb6b 	bl	12218 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    eb42:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb4a:	781b      	ldrb	r3, [r3, #0]
    eb4c:	2b01      	cmp	r3, #1
    eb4e:	d10a      	bne.n	eb66 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    eb50:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	881b      	ldrh	r3, [r3, #0]
    eb5a:	b29a      	uxth	r2, r3
    eb5c:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb64:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eb66:	f24c 5335 	movw	r3, #50485	; 0xc535
    eb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb6e:	781b      	ldrb	r3, [r3, #0]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d10d      	bne.n	eb90 <climb_control_task+0x80>
    eb74:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    eb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7c:	881b      	ldrh	r3, [r3, #0]
    eb7e:	2b00      	cmp	r3, #0
    eb80:	d10c      	bne.n	eb9c <climb_control_task+0x8c>
    eb82:	f24c 5340 	movw	r3, #50496	; 0xc540
    eb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8a:	781b      	ldrb	r3, [r3, #0]
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d105      	bne.n	eb9c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eb90:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb98:	2200      	movs	r2, #0
    eb9a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eb9c:	bd80      	pop	{r7, pc}
    eb9e:	bf00      	nop

0000eba0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eba0:	b580      	push	{r7, lr}
    eba2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eba4:	f003 f926 	bl	11df4 <ir_update>
    estimator_update_state_infrared();
    eba8:	f006 fbac 	bl	15304 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ebac:	f003 f990 	bl	11ed0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ebb0:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ebb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb8:	881a      	ldrh	r2, [r3, #0]
    ebba:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ebc4:	f64c 037e 	movw	r3, #51326	; 0xc87e
    ebc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebcc:	881a      	ldrh	r2, [r3, #0]
    ebce:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ebd8:	f64c 0380 	movw	r3, #51328	; 0xc880
    ebdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe0:	881a      	ldrh	r2, [r3, #0]
    ebe2:	f24c 6368 	movw	r3, #50792	; 0xc668
    ebe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebea:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ebec:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ebf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf4:	681b      	ldr	r3, [r3, #0]
    ebf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebfa:	4618      	mov	r0, r3
    ebfc:	f008 fff8 	bl	17bf0 <__aeabi_f2d>
    ec00:	4602      	mov	r2, r0
    ec02:	460b      	mov	r3, r1
    ec04:	4610      	mov	r0, r2
    ec06:	4619      	mov	r1, r3
    ec08:	f04f 0200 	mov.w	r2, #0
    ec0c:	f04f 0300 	mov.w	r3, #0
    ec10:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec14:	f009 f840 	bl	17c98 <__aeabi_dmul>
    ec18:	4602      	mov	r2, r0
    ec1a:	460b      	mov	r3, r1
    ec1c:	4610      	mov	r0, r2
    ec1e:	4619      	mov	r1, r3
    ec20:	f04f 0200 	mov.w	r2, #0
    ec24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec28:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ec2c:	f009 faa6 	bl	1817c <__aeabi_dcmplt>
    ec30:	4603      	mov	r3, r0
    ec32:	2b00      	cmp	r3, #0
    ec34:	d002      	beq.n	ec3c <stabilisation_task+0x9c>
    ec36:	f64d 2280 	movw	r2, #55936	; 0xda80
    ec3a:	e046      	b.n	ecca <stabilisation_task+0x12a>
    ec3c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	681b      	ldr	r3, [r3, #0]
    ec46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec4a:	4618      	mov	r0, r3
    ec4c:	f008 ffd0 	bl	17bf0 <__aeabi_f2d>
    ec50:	4602      	mov	r2, r0
    ec52:	460b      	mov	r3, r1
    ec54:	4610      	mov	r0, r2
    ec56:	4619      	mov	r1, r3
    ec58:	f04f 0200 	mov.w	r2, #0
    ec5c:	f04f 0300 	mov.w	r3, #0
    ec60:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec64:	f009 f818 	bl	17c98 <__aeabi_dmul>
    ec68:	4602      	mov	r2, r0
    ec6a:	460b      	mov	r3, r1
    ec6c:	4610      	mov	r0, r2
    ec6e:	4619      	mov	r1, r3
    ec70:	f04f 0200 	mov.w	r2, #0
    ec74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec78:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ec7c:	f009 fa9c 	bl	181b8 <__aeabi_dcmpgt>
    ec80:	4603      	mov	r3, r0
    ec82:	2b00      	cmp	r3, #0
    ec84:	d002      	beq.n	ec8c <stabilisation_task+0xec>
    ec86:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ec8a:	e01d      	b.n	ecc8 <stabilisation_task+0x128>
    ec8c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec94:	681b      	ldr	r3, [r3, #0]
    ec96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec9a:	4618      	mov	r0, r3
    ec9c:	f008 ffa8 	bl	17bf0 <__aeabi_f2d>
    eca0:	4602      	mov	r2, r0
    eca2:	460b      	mov	r3, r1
    eca4:	4610      	mov	r0, r2
    eca6:	4619      	mov	r1, r3
    eca8:	f04f 0200 	mov.w	r2, #0
    ecac:	f04f 0300 	mov.w	r3, #0
    ecb0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ecb4:	f008 fff0 	bl	17c98 <__aeabi_dmul>
    ecb8:	4602      	mov	r2, r0
    ecba:	460b      	mov	r3, r1
    ecbc:	4610      	mov	r0, r2
    ecbe:	4619      	mov	r1, r3
    ecc0:	f009 fa84 	bl	181cc <__aeabi_d2iz>
    ecc4:	4603      	mov	r3, r0
    ecc6:	b29b      	uxth	r3, r3
    ecc8:	b29a      	uxth	r2, r3
    ecca:	f24c 6368 	movw	r3, #50792	; 0xc668
    ecce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ecd4:	bd80      	pop	{r7, pc}
    ecd6:	bf00      	nop

0000ecd8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ecd8:	b580      	push	{r7, lr}
    ecda:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ecdc:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    ece0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece4:	2200      	movs	r2, #0
    ece6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ece8:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ecec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf0:	781b      	ldrb	r3, [r3, #0]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	f001 81af 	beq.w	10056 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ecf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	781a      	ldrb	r2, [r3, #0]
    ed02:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0a:	781b      	ldrb	r3, [r3, #0]
    ed0c:	b2db      	uxtb	r3, r3
    ed0e:	429a      	cmp	r2, r3
    ed10:	d313      	bcc.n	ed3a <send_gps_pos+0x62>
    ed12:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	b2db      	uxtb	r3, r3
    ed1e:	461a      	mov	r2, r3
    ed20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed28:	781b      	ldrb	r3, [r3, #0]
    ed2a:	1ad3      	subs	r3, r2, r3
    ed2c:	33ff      	adds	r3, #255	; 0xff
    ed2e:	2b21      	cmp	r3, #33	; 0x21
    ed30:	bfd4      	ite	le
    ed32:	2300      	movle	r3, #0
    ed34:	2301      	movgt	r3, #1
    ed36:	b2db      	uxtb	r3, r3
    ed38:	e011      	b.n	ed5e <send_gps_pos+0x86>
    ed3a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	b2db      	uxtb	r3, r3
    ed46:	461a      	mov	r2, r3
    ed48:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed50:	781b      	ldrb	r3, [r3, #0]
    ed52:	1ad3      	subs	r3, r2, r3
    ed54:	2b21      	cmp	r3, #33	; 0x21
    ed56:	bfd4      	ite	le
    ed58:	2300      	movle	r3, #0
    ed5a:	2301      	movgt	r3, #1
    ed5c:	b2db      	uxtb	r3, r3
    ed5e:	2b00      	cmp	r3, #0
    ed60:	f001 816b 	beq.w	1003a <send_gps_pos+0x1362>
    ed64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6c:	781b      	ldrb	r3, [r3, #0]
    ed6e:	461a      	mov	r2, r3
    ed70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed78:	2105      	movs	r1, #5
    ed7a:	5499      	strb	r1, [r3, r2]
    ed7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed84:	781b      	ldrb	r3, [r3, #0]
    ed86:	3301      	adds	r3, #1
    ed88:	b2da      	uxtb	r2, r3
    ed8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed92:	701a      	strb	r2, [r3, #0]
    ed94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	781b      	ldrb	r3, [r3, #0]
    ed9e:	2bff      	cmp	r3, #255	; 0xff
    eda0:	d105      	bne.n	edae <send_gps_pos+0xd6>
    eda2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edaa:	2200      	movs	r2, #0
    edac:	701a      	strb	r2, [r3, #0]
    edae:	f24c 5349 	movw	r3, #50505	; 0xc549
    edb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	461a      	mov	r2, r3
    edba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc2:	2108      	movs	r1, #8
    edc4:	5499      	strb	r1, [r3, r2]
    edc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    edca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	3301      	adds	r3, #1
    edd2:	b2da      	uxtb	r2, r3
    edd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    edd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eddc:	701a      	strb	r2, [r3, #0]
    edde:	f24c 5349 	movw	r3, #50505	; 0xc549
    ede2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede6:	781b      	ldrb	r3, [r3, #0]
    ede8:	2bff      	cmp	r3, #255	; 0xff
    edea:	d105      	bne.n	edf8 <send_gps_pos+0x120>
    edec:	f24c 5349 	movw	r3, #50505	; 0xc549
    edf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf4:	2200      	movs	r2, #0
    edf6:	701a      	strb	r2, [r3, #0]
    edf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee00:	2208      	movs	r2, #8
    ee02:	701a      	strb	r2, [r3, #0]
    ee04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0c:	2208      	movs	r2, #8
    ee0e:	701a      	strb	r2, [r3, #0]
    ee10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee18:	781b      	ldrb	r3, [r3, #0]
    ee1a:	461a      	mov	r2, r3
    ee1c:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ee20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee24:	7819      	ldrb	r1, [r3, #0]
    ee26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2e:	5499      	strb	r1, [r3, r2]
    ee30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	781a      	ldrb	r2, [r3, #0]
    ee3a:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	781b      	ldrb	r3, [r3, #0]
    ee44:	4413      	add	r3, r2
    ee46:	b2da      	uxtb	r2, r3
    ee48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	701a      	strb	r2, [r3, #0]
    ee52:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	781a      	ldrb	r2, [r3, #0]
    ee5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee64:	781b      	ldrb	r3, [r3, #0]
    ee66:	4413      	add	r3, r2
    ee68:	b2da      	uxtb	r2, r3
    ee6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	3301      	adds	r3, #1
    ee80:	b2da      	uxtb	r2, r3
    ee82:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	701a      	strb	r2, [r3, #0]
    ee8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee94:	781b      	ldrb	r3, [r3, #0]
    ee96:	2bff      	cmp	r3, #255	; 0xff
    ee98:	d105      	bne.n	eea6 <send_gps_pos+0x1ce>
    ee9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	2200      	movs	r2, #0
    eea4:	701a      	strb	r2, [r3, #0]
    eea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeae:	781b      	ldrb	r3, [r3, #0]
    eeb0:	461a      	mov	r2, r3
    eeb2:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeba:	7819      	ldrb	r1, [r3, #0]
    eebc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec4:	5499      	strb	r1, [r3, r2]
    eec6:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eeca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eece:	781a      	ldrb	r2, [r3, #0]
    eed0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed8:	781b      	ldrb	r3, [r3, #0]
    eeda:	4413      	add	r3, r2
    eedc:	b2da      	uxtb	r2, r3
    eede:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee6:	701a      	strb	r2, [r3, #0]
    eee8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef0:	781a      	ldrb	r2, [r3, #0]
    eef2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefa:	781b      	ldrb	r3, [r3, #0]
    eefc:	4413      	add	r3, r2
    eefe:	b2da      	uxtb	r2, r3
    ef00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef08:	701a      	strb	r2, [r3, #0]
    ef0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef12:	781b      	ldrb	r3, [r3, #0]
    ef14:	3301      	adds	r3, #1
    ef16:	b2da      	uxtb	r2, r3
    ef18:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef20:	701a      	strb	r2, [r3, #0]
    ef22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2a:	781b      	ldrb	r3, [r3, #0]
    ef2c:	2bff      	cmp	r3, #255	; 0xff
    ef2e:	d105      	bne.n	ef3c <send_gps_pos+0x264>
    ef30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef38:	2200      	movs	r2, #0
    ef3a:	701a      	strb	r2, [r3, #0]
    ef3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef44:	781b      	ldrb	r3, [r3, #0]
    ef46:	461a      	mov	r2, r3
    ef48:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef50:	7859      	ldrb	r1, [r3, #1]
    ef52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5a:	5499      	strb	r1, [r3, r2]
    ef5c:	4bd1      	ldr	r3, [pc, #836]	; (f2a4 <send_gps_pos+0x5cc>)
    ef5e:	781a      	ldrb	r2, [r3, #0]
    ef60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef68:	781b      	ldrb	r3, [r3, #0]
    ef6a:	4413      	add	r3, r2
    ef6c:	b2da      	uxtb	r2, r3
    ef6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef76:	701a      	strb	r2, [r3, #0]
    ef78:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef80:	781a      	ldrb	r2, [r3, #0]
    ef82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef8a:	781b      	ldrb	r3, [r3, #0]
    ef8c:	4413      	add	r3, r2
    ef8e:	b2da      	uxtb	r2, r3
    ef90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef98:	701a      	strb	r2, [r3, #0]
    ef9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa2:	781b      	ldrb	r3, [r3, #0]
    efa4:	3301      	adds	r3, #1
    efa6:	b2da      	uxtb	r2, r3
    efa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    efac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb0:	701a      	strb	r2, [r3, #0]
    efb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    efb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efba:	781b      	ldrb	r3, [r3, #0]
    efbc:	2bff      	cmp	r3, #255	; 0xff
    efbe:	d105      	bne.n	efcc <send_gps_pos+0x2f4>
    efc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    efc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc8:	2200      	movs	r2, #0
    efca:	701a      	strb	r2, [r3, #0]
    efcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    efd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd4:	781b      	ldrb	r3, [r3, #0]
    efd6:	461a      	mov	r2, r3
    efd8:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    efdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe0:	7899      	ldrb	r1, [r3, #2]
    efe2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    efe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efea:	5499      	strb	r1, [r3, r2]
    efec:	4bae      	ldr	r3, [pc, #696]	; (f2a8 <send_gps_pos+0x5d0>)
    efee:	781a      	ldrb	r2, [r3, #0]
    eff0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff8:	781b      	ldrb	r3, [r3, #0]
    effa:	4413      	add	r3, r2
    effc:	b2da      	uxtb	r2, r3
    effe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f006:	701a      	strb	r2, [r3, #0]
    f008:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f010:	781a      	ldrb	r2, [r3, #0]
    f012:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01a:	781b      	ldrb	r3, [r3, #0]
    f01c:	4413      	add	r3, r2
    f01e:	b2da      	uxtb	r2, r3
    f020:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f028:	701a      	strb	r2, [r3, #0]
    f02a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f032:	781b      	ldrb	r3, [r3, #0]
    f034:	3301      	adds	r3, #1
    f036:	b2da      	uxtb	r2, r3
    f038:	f24c 5349 	movw	r3, #50505	; 0xc549
    f03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f040:	701a      	strb	r2, [r3, #0]
    f042:	f24c 5349 	movw	r3, #50505	; 0xc549
    f046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04a:	781b      	ldrb	r3, [r3, #0]
    f04c:	2bff      	cmp	r3, #255	; 0xff
    f04e:	d105      	bne.n	f05c <send_gps_pos+0x384>
    f050:	f24c 5349 	movw	r3, #50505	; 0xc549
    f054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f058:	2200      	movs	r2, #0
    f05a:	701a      	strb	r2, [r3, #0]
    f05c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f064:	781b      	ldrb	r3, [r3, #0]
    f066:	461a      	mov	r2, r3
    f068:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    f06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f070:	78d9      	ldrb	r1, [r3, #3]
    f072:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07a:	5499      	strb	r1, [r3, r2]
    f07c:	4b8b      	ldr	r3, [pc, #556]	; (f2ac <send_gps_pos+0x5d4>)
    f07e:	781a      	ldrb	r2, [r3, #0]
    f080:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	4413      	add	r3, r2
    f08c:	b2da      	uxtb	r2, r3
    f08e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f096:	701a      	strb	r2, [r3, #0]
    f098:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a0:	781a      	ldrb	r2, [r3, #0]
    f0a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0aa:	781b      	ldrb	r3, [r3, #0]
    f0ac:	4413      	add	r3, r2
    f0ae:	b2da      	uxtb	r2, r3
    f0b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b8:	701a      	strb	r2, [r3, #0]
    f0ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c2:	781b      	ldrb	r3, [r3, #0]
    f0c4:	3301      	adds	r3, #1
    f0c6:	b2da      	uxtb	r2, r3
    f0c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d0:	701a      	strb	r2, [r3, #0]
    f0d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0da:	781b      	ldrb	r3, [r3, #0]
    f0dc:	2bff      	cmp	r3, #255	; 0xff
    f0de:	d105      	bne.n	f0ec <send_gps_pos+0x414>
    f0e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e8:	2200      	movs	r2, #0
    f0ea:	701a      	strb	r2, [r3, #0]
    f0ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	781b      	ldrb	r3, [r3, #0]
    f0f6:	461a      	mov	r2, r3
    f0f8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f100:	7819      	ldrb	r1, [r3, #0]
    f102:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10a:	5499      	strb	r1, [r3, r2]
    f10c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f114:	781a      	ldrb	r2, [r3, #0]
    f116:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11e:	781b      	ldrb	r3, [r3, #0]
    f120:	4413      	add	r3, r2
    f122:	b2da      	uxtb	r2, r3
    f124:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12c:	701a      	strb	r2, [r3, #0]
    f12e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f136:	781a      	ldrb	r2, [r3, #0]
    f138:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f140:	781b      	ldrb	r3, [r3, #0]
    f142:	4413      	add	r3, r2
    f144:	b2da      	uxtb	r2, r3
    f146:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14e:	701a      	strb	r2, [r3, #0]
    f150:	f24c 5349 	movw	r3, #50505	; 0xc549
    f154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f158:	781b      	ldrb	r3, [r3, #0]
    f15a:	3301      	adds	r3, #1
    f15c:	b2da      	uxtb	r2, r3
    f15e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f166:	701a      	strb	r2, [r3, #0]
    f168:	f24c 5349 	movw	r3, #50505	; 0xc549
    f16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f170:	781b      	ldrb	r3, [r3, #0]
    f172:	2bff      	cmp	r3, #255	; 0xff
    f174:	d105      	bne.n	f182 <send_gps_pos+0x4aa>
    f176:	f24c 5349 	movw	r3, #50505	; 0xc549
    f17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17e:	2200      	movs	r2, #0
    f180:	701a      	strb	r2, [r3, #0]
    f182:	f24c 5349 	movw	r3, #50505	; 0xc549
    f186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18a:	781b      	ldrb	r3, [r3, #0]
    f18c:	461a      	mov	r2, r3
    f18e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f196:	7859      	ldrb	r1, [r3, #1]
    f198:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a0:	5499      	strb	r1, [r3, r2]
    f1a2:	4b43      	ldr	r3, [pc, #268]	; (f2b0 <send_gps_pos+0x5d8>)
    f1a4:	781a      	ldrb	r2, [r3, #0]
    f1a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ae:	781b      	ldrb	r3, [r3, #0]
    f1b0:	4413      	add	r3, r2
    f1b2:	b2da      	uxtb	r2, r3
    f1b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1bc:	701a      	strb	r2, [r3, #0]
    f1be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c6:	781a      	ldrb	r2, [r3, #0]
    f1c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d0:	781b      	ldrb	r3, [r3, #0]
    f1d2:	4413      	add	r3, r2
    f1d4:	b2da      	uxtb	r2, r3
    f1d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1de:	701a      	strb	r2, [r3, #0]
    f1e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e8:	781b      	ldrb	r3, [r3, #0]
    f1ea:	3301      	adds	r3, #1
    f1ec:	b2da      	uxtb	r2, r3
    f1ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f6:	701a      	strb	r2, [r3, #0]
    f1f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f200:	781b      	ldrb	r3, [r3, #0]
    f202:	2bff      	cmp	r3, #255	; 0xff
    f204:	d105      	bne.n	f212 <send_gps_pos+0x53a>
    f206:	f24c 5349 	movw	r3, #50505	; 0xc549
    f20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20e:	2200      	movs	r2, #0
    f210:	701a      	strb	r2, [r3, #0]
    f212:	f24c 5349 	movw	r3, #50505	; 0xc549
    f216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21a:	781b      	ldrb	r3, [r3, #0]
    f21c:	461a      	mov	r2, r3
    f21e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f226:	7899      	ldrb	r1, [r3, #2]
    f228:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f230:	5499      	strb	r1, [r3, r2]
    f232:	4b20      	ldr	r3, [pc, #128]	; (f2b4 <send_gps_pos+0x5dc>)
    f234:	781a      	ldrb	r2, [r3, #0]
    f236:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	4413      	add	r3, r2
    f242:	b2da      	uxtb	r2, r3
    f244:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24c:	701a      	strb	r2, [r3, #0]
    f24e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f256:	781a      	ldrb	r2, [r3, #0]
    f258:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f260:	781b      	ldrb	r3, [r3, #0]
    f262:	4413      	add	r3, r2
    f264:	b2da      	uxtb	r2, r3
    f266:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26e:	701a      	strb	r2, [r3, #0]
    f270:	f24c 5349 	movw	r3, #50505	; 0xc549
    f274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f278:	781b      	ldrb	r3, [r3, #0]
    f27a:	3301      	adds	r3, #1
    f27c:	b2da      	uxtb	r2, r3
    f27e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f286:	701a      	strb	r2, [r3, #0]
    f288:	f24c 5349 	movw	r3, #50505	; 0xc549
    f28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f290:	781b      	ldrb	r3, [r3, #0]
    f292:	2bff      	cmp	r3, #255	; 0xff
    f294:	d110      	bne.n	f2b8 <send_gps_pos+0x5e0>
    f296:	f24c 5349 	movw	r3, #50505	; 0xc549
    f29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29e:	2200      	movs	r2, #0
    f2a0:	701a      	strb	r2, [r3, #0]
    f2a2:	e009      	b.n	f2b8 <send_gps_pos+0x5e0>
    f2a4:	2004c6cd 	.word	0x2004c6cd
    f2a8:	2004c6ce 	.word	0x2004c6ce
    f2ac:	2004c6cf 	.word	0x2004c6cf
    f2b0:	2004c6d1 	.word	0x2004c6d1
    f2b4:	2004c6d2 	.word	0x2004c6d2
    f2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c0:	781b      	ldrb	r3, [r3, #0]
    f2c2:	461a      	mov	r2, r3
    f2c4:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f2c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2cc:	78d9      	ldrb	r1, [r3, #3]
    f2ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d6:	5499      	strb	r1, [r3, r2]
    f2d8:	4bd3      	ldr	r3, [pc, #844]	; (f628 <send_gps_pos+0x950>)
    f2da:	781a      	ldrb	r2, [r3, #0]
    f2dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e4:	781b      	ldrb	r3, [r3, #0]
    f2e6:	4413      	add	r3, r2
    f2e8:	b2da      	uxtb	r2, r3
    f2ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	701a      	strb	r2, [r3, #0]
    f2f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fc:	781a      	ldrb	r2, [r3, #0]
    f2fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f306:	781b      	ldrb	r3, [r3, #0]
    f308:	4413      	add	r3, r2
    f30a:	b2da      	uxtb	r2, r3
    f30c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f314:	701a      	strb	r2, [r3, #0]
    f316:	f24c 5349 	movw	r3, #50505	; 0xc549
    f31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31e:	781b      	ldrb	r3, [r3, #0]
    f320:	3301      	adds	r3, #1
    f322:	b2da      	uxtb	r2, r3
    f324:	f24c 5349 	movw	r3, #50505	; 0xc549
    f328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32c:	701a      	strb	r2, [r3, #0]
    f32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f336:	781b      	ldrb	r3, [r3, #0]
    f338:	2bff      	cmp	r3, #255	; 0xff
    f33a:	d105      	bne.n	f348 <send_gps_pos+0x670>
    f33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	2200      	movs	r2, #0
    f346:	701a      	strb	r2, [r3, #0]
    f348:	f24c 5349 	movw	r3, #50505	; 0xc549
    f34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f350:	781b      	ldrb	r3, [r3, #0]
    f352:	461a      	mov	r2, r3
    f354:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	7819      	ldrb	r1, [r3, #0]
    f35e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f366:	5499      	strb	r1, [r3, r2]
    f368:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f370:	781a      	ldrb	r2, [r3, #0]
    f372:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	4413      	add	r3, r2
    f37e:	b2da      	uxtb	r2, r3
    f380:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f388:	701a      	strb	r2, [r3, #0]
    f38a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f392:	781a      	ldrb	r2, [r3, #0]
    f394:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39c:	781b      	ldrb	r3, [r3, #0]
    f39e:	4413      	add	r3, r2
    f3a0:	b2da      	uxtb	r2, r3
    f3a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3aa:	701a      	strb	r2, [r3, #0]
    f3ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	3301      	adds	r3, #1
    f3b8:	b2da      	uxtb	r2, r3
    f3ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c2:	701a      	strb	r2, [r3, #0]
    f3c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3cc:	781b      	ldrb	r3, [r3, #0]
    f3ce:	2bff      	cmp	r3, #255	; 0xff
    f3d0:	d105      	bne.n	f3de <send_gps_pos+0x706>
    f3d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3da:	2200      	movs	r2, #0
    f3dc:	701a      	strb	r2, [r3, #0]
    f3de:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e6:	781b      	ldrb	r3, [r3, #0]
    f3e8:	461a      	mov	r2, r3
    f3ea:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f2:	7859      	ldrb	r1, [r3, #1]
    f3f4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fc:	5499      	strb	r1, [r3, r2]
    f3fe:	4b8b      	ldr	r3, [pc, #556]	; (f62c <send_gps_pos+0x954>)
    f400:	781a      	ldrb	r2, [r3, #0]
    f402:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40a:	781b      	ldrb	r3, [r3, #0]
    f40c:	4413      	add	r3, r2
    f40e:	b2da      	uxtb	r2, r3
    f410:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f418:	701a      	strb	r2, [r3, #0]
    f41a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f422:	781a      	ldrb	r2, [r3, #0]
    f424:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42c:	781b      	ldrb	r3, [r3, #0]
    f42e:	4413      	add	r3, r2
    f430:	b2da      	uxtb	r2, r3
    f432:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43a:	701a      	strb	r2, [r3, #0]
    f43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	3301      	adds	r3, #1
    f448:	b2da      	uxtb	r2, r3
    f44a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f452:	701a      	strb	r2, [r3, #0]
    f454:	f24c 5349 	movw	r3, #50505	; 0xc549
    f458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	2bff      	cmp	r3, #255	; 0xff
    f460:	d105      	bne.n	f46e <send_gps_pos+0x796>
    f462:	f24c 5349 	movw	r3, #50505	; 0xc549
    f466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46a:	2200      	movs	r2, #0
    f46c:	701a      	strb	r2, [r3, #0]
    f46e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f476:	781b      	ldrb	r3, [r3, #0]
    f478:	461a      	mov	r2, r3
    f47a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f482:	7899      	ldrb	r1, [r3, #2]
    f484:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48c:	5499      	strb	r1, [r3, r2]
    f48e:	4b68      	ldr	r3, [pc, #416]	; (f630 <send_gps_pos+0x958>)
    f490:	781a      	ldrb	r2, [r3, #0]
    f492:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49a:	781b      	ldrb	r3, [r3, #0]
    f49c:	4413      	add	r3, r2
    f49e:	b2da      	uxtb	r2, r3
    f4a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a8:	701a      	strb	r2, [r3, #0]
    f4aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b2:	781a      	ldrb	r2, [r3, #0]
    f4b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	4413      	add	r3, r2
    f4c0:	b2da      	uxtb	r2, r3
    f4c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ca:	701a      	strb	r2, [r3, #0]
    f4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	3301      	adds	r3, #1
    f4d8:	b2da      	uxtb	r2, r3
    f4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e2:	701a      	strb	r2, [r3, #0]
    f4e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ec:	781b      	ldrb	r3, [r3, #0]
    f4ee:	2bff      	cmp	r3, #255	; 0xff
    f4f0:	d105      	bne.n	f4fe <send_gps_pos+0x826>
    f4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fa:	2200      	movs	r2, #0
    f4fc:	701a      	strb	r2, [r3, #0]
    f4fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f506:	781b      	ldrb	r3, [r3, #0]
    f508:	461a      	mov	r2, r3
    f50a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f512:	78d9      	ldrb	r1, [r3, #3]
    f514:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51c:	5499      	strb	r1, [r3, r2]
    f51e:	4b45      	ldr	r3, [pc, #276]	; (f634 <send_gps_pos+0x95c>)
    f520:	781a      	ldrb	r2, [r3, #0]
    f522:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52a:	781b      	ldrb	r3, [r3, #0]
    f52c:	4413      	add	r3, r2
    f52e:	b2da      	uxtb	r2, r3
    f530:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f538:	701a      	strb	r2, [r3, #0]
    f53a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f542:	781a      	ldrb	r2, [r3, #0]
    f544:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	4413      	add	r3, r2
    f550:	b2da      	uxtb	r2, r3
    f552:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781b      	ldrb	r3, [r3, #0]
    f566:	3301      	adds	r3, #1
    f568:	b2da      	uxtb	r2, r3
    f56a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f572:	701a      	strb	r2, [r3, #0]
    f574:	f24c 5349 	movw	r3, #50505	; 0xc549
    f578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57c:	781b      	ldrb	r3, [r3, #0]
    f57e:	2bff      	cmp	r3, #255	; 0xff
    f580:	d105      	bne.n	f58e <send_gps_pos+0x8b6>
    f582:	f24c 5349 	movw	r3, #50505	; 0xc549
    f586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58a:	2200      	movs	r2, #0
    f58c:	701a      	strb	r2, [r3, #0]
    f58e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f596:	781b      	ldrb	r3, [r3, #0]
    f598:	461a      	mov	r2, r3
    f59a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a2:	7819      	ldrb	r1, [r3, #0]
    f5a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	5499      	strb	r1, [r3, r2]
    f5ae:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b6:	781a      	ldrb	r2, [r3, #0]
    f5b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c0:	781b      	ldrb	r3, [r3, #0]
    f5c2:	4413      	add	r3, r2
    f5c4:	b2da      	uxtb	r2, r3
    f5c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ce:	701a      	strb	r2, [r3, #0]
    f5d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d8:	781a      	ldrb	r2, [r3, #0]
    f5da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e2:	781b      	ldrb	r3, [r3, #0]
    f5e4:	4413      	add	r3, r2
    f5e6:	b2da      	uxtb	r2, r3
    f5e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f0:	701a      	strb	r2, [r3, #0]
    f5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fa:	781b      	ldrb	r3, [r3, #0]
    f5fc:	3301      	adds	r3, #1
    f5fe:	b2da      	uxtb	r2, r3
    f600:	f24c 5349 	movw	r3, #50505	; 0xc549
    f604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f608:	701a      	strb	r2, [r3, #0]
    f60a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	781b      	ldrb	r3, [r3, #0]
    f614:	2bff      	cmp	r3, #255	; 0xff
    f616:	d10f      	bne.n	f638 <send_gps_pos+0x960>
    f618:	f24c 5349 	movw	r3, #50505	; 0xc549
    f61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f620:	2200      	movs	r2, #0
    f622:	701a      	strb	r2, [r3, #0]
    f624:	e008      	b.n	f638 <send_gps_pos+0x960>
    f626:	bf00      	nop
    f628:	2004c6d3 	.word	0x2004c6d3
    f62c:	2004c6c9 	.word	0x2004c6c9
    f630:	2004c6ca 	.word	0x2004c6ca
    f634:	2004c6cb 	.word	0x2004c6cb
    f638:	f24c 5349 	movw	r3, #50505	; 0xc549
    f63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	461a      	mov	r2, r3
    f644:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64c:	7859      	ldrb	r1, [r3, #1]
    f64e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f656:	5499      	strb	r1, [r3, r2]
    f658:	4bd1      	ldr	r3, [pc, #836]	; (f9a0 <send_gps_pos+0xcc8>)
    f65a:	781a      	ldrb	r2, [r3, #0]
    f65c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f664:	781b      	ldrb	r3, [r3, #0]
    f666:	4413      	add	r3, r2
    f668:	b2da      	uxtb	r2, r3
    f66a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f672:	701a      	strb	r2, [r3, #0]
    f674:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67c:	781a      	ldrb	r2, [r3, #0]
    f67e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	4413      	add	r3, r2
    f68a:	b2da      	uxtb	r2, r3
    f68c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f694:	701a      	strb	r2, [r3, #0]
    f696:	f24c 5349 	movw	r3, #50505	; 0xc549
    f69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69e:	781b      	ldrb	r3, [r3, #0]
    f6a0:	3301      	adds	r3, #1
    f6a2:	b2da      	uxtb	r2, r3
    f6a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ac:	701a      	strb	r2, [r3, #0]
    f6ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b6:	781b      	ldrb	r3, [r3, #0]
    f6b8:	2bff      	cmp	r3, #255	; 0xff
    f6ba:	d105      	bne.n	f6c8 <send_gps_pos+0x9f0>
    f6bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c4:	2200      	movs	r2, #0
    f6c6:	701a      	strb	r2, [r3, #0]
    f6c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d0:	781b      	ldrb	r3, [r3, #0]
    f6d2:	461a      	mov	r2, r3
    f6d4:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6dc:	7899      	ldrb	r1, [r3, #2]
    f6de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e6:	5499      	strb	r1, [r3, r2]
    f6e8:	4bae      	ldr	r3, [pc, #696]	; (f9a4 <send_gps_pos+0xccc>)
    f6ea:	781a      	ldrb	r2, [r3, #0]
    f6ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f4:	781b      	ldrb	r3, [r3, #0]
    f6f6:	4413      	add	r3, r2
    f6f8:	b2da      	uxtb	r2, r3
    f6fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f702:	701a      	strb	r2, [r3, #0]
    f704:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70c:	781a      	ldrb	r2, [r3, #0]
    f70e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	4413      	add	r3, r2
    f71a:	b2da      	uxtb	r2, r3
    f71c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f724:	701a      	strb	r2, [r3, #0]
    f726:	f24c 5349 	movw	r3, #50505	; 0xc549
    f72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72e:	781b      	ldrb	r3, [r3, #0]
    f730:	3301      	adds	r3, #1
    f732:	b2da      	uxtb	r2, r3
    f734:	f24c 5349 	movw	r3, #50505	; 0xc549
    f738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73c:	701a      	strb	r2, [r3, #0]
    f73e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f746:	781b      	ldrb	r3, [r3, #0]
    f748:	2bff      	cmp	r3, #255	; 0xff
    f74a:	d105      	bne.n	f758 <send_gps_pos+0xa80>
    f74c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f754:	2200      	movs	r2, #0
    f756:	701a      	strb	r2, [r3, #0]
    f758:	f24c 5349 	movw	r3, #50505	; 0xc549
    f75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f760:	781b      	ldrb	r3, [r3, #0]
    f762:	461a      	mov	r2, r3
    f764:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76c:	78d9      	ldrb	r1, [r3, #3]
    f76e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f776:	5499      	strb	r1, [r3, r2]
    f778:	4b8b      	ldr	r3, [pc, #556]	; (f9a8 <send_gps_pos+0xcd0>)
    f77a:	781a      	ldrb	r2, [r3, #0]
    f77c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	4413      	add	r3, r2
    f788:	b2da      	uxtb	r2, r3
    f78a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f792:	701a      	strb	r2, [r3, #0]
    f794:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79c:	781a      	ldrb	r2, [r3, #0]
    f79e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a6:	781b      	ldrb	r3, [r3, #0]
    f7a8:	4413      	add	r3, r2
    f7aa:	b2da      	uxtb	r2, r3
    f7ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b4:	701a      	strb	r2, [r3, #0]
    f7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	3301      	adds	r3, #1
    f7c2:	b2da      	uxtb	r2, r3
    f7c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7cc:	701a      	strb	r2, [r3, #0]
    f7ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d6:	781b      	ldrb	r3, [r3, #0]
    f7d8:	2bff      	cmp	r3, #255	; 0xff
    f7da:	d105      	bne.n	f7e8 <send_gps_pos+0xb10>
    f7dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e4:	2200      	movs	r2, #0
    f7e6:	701a      	strb	r2, [r3, #0]
    f7e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	781b      	ldrb	r3, [r3, #0]
    f7f2:	461a      	mov	r2, r3
    f7f4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fc:	7819      	ldrb	r1, [r3, #0]
    f7fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f806:	5499      	strb	r1, [r3, r2]
    f808:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f810:	781a      	ldrb	r2, [r3, #0]
    f812:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81a:	781b      	ldrb	r3, [r3, #0]
    f81c:	4413      	add	r3, r2
    f81e:	b2da      	uxtb	r2, r3
    f820:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f828:	701a      	strb	r2, [r3, #0]
    f82a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f82e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f832:	781a      	ldrb	r2, [r3, #0]
    f834:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	4413      	add	r3, r2
    f840:	b2da      	uxtb	r2, r3
    f842:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84a:	701a      	strb	r2, [r3, #0]
    f84c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f854:	781b      	ldrb	r3, [r3, #0]
    f856:	3301      	adds	r3, #1
    f858:	b2da      	uxtb	r2, r3
    f85a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f862:	701a      	strb	r2, [r3, #0]
    f864:	f24c 5349 	movw	r3, #50505	; 0xc549
    f868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86c:	781b      	ldrb	r3, [r3, #0]
    f86e:	2bff      	cmp	r3, #255	; 0xff
    f870:	d105      	bne.n	f87e <send_gps_pos+0xba6>
    f872:	f24c 5349 	movw	r3, #50505	; 0xc549
    f876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87a:	2200      	movs	r2, #0
    f87c:	701a      	strb	r2, [r3, #0]
    f87e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f886:	781b      	ldrb	r3, [r3, #0]
    f888:	461a      	mov	r2, r3
    f88a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f892:	7859      	ldrb	r1, [r3, #1]
    f894:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89c:	5499      	strb	r1, [r3, r2]
    f89e:	4b43      	ldr	r3, [pc, #268]	; (f9ac <send_gps_pos+0xcd4>)
    f8a0:	781a      	ldrb	r2, [r3, #0]
    f8a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	781b      	ldrb	r3, [r3, #0]
    f8ac:	4413      	add	r3, r2
    f8ae:	b2da      	uxtb	r2, r3
    f8b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b8:	701a      	strb	r2, [r3, #0]
    f8ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c2:	781a      	ldrb	r2, [r3, #0]
    f8c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8cc:	781b      	ldrb	r3, [r3, #0]
    f8ce:	4413      	add	r3, r2
    f8d0:	b2da      	uxtb	r2, r3
    f8d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8da:	701a      	strb	r2, [r3, #0]
    f8dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e4:	781b      	ldrb	r3, [r3, #0]
    f8e6:	3301      	adds	r3, #1
    f8e8:	b2da      	uxtb	r2, r3
    f8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f2:	701a      	strb	r2, [r3, #0]
    f8f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	2bff      	cmp	r3, #255	; 0xff
    f900:	d105      	bne.n	f90e <send_gps_pos+0xc36>
    f902:	f24c 5349 	movw	r3, #50505	; 0xc549
    f906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90a:	2200      	movs	r2, #0
    f90c:	701a      	strb	r2, [r3, #0]
    f90e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f916:	781b      	ldrb	r3, [r3, #0]
    f918:	461a      	mov	r2, r3
    f91a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f922:	7899      	ldrb	r1, [r3, #2]
    f924:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92c:	5499      	strb	r1, [r3, r2]
    f92e:	4b20      	ldr	r3, [pc, #128]	; (f9b0 <send_gps_pos+0xcd8>)
    f930:	781a      	ldrb	r2, [r3, #0]
    f932:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f93a:	781b      	ldrb	r3, [r3, #0]
    f93c:	4413      	add	r3, r2
    f93e:	b2da      	uxtb	r2, r3
    f940:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f948:	701a      	strb	r2, [r3, #0]
    f94a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f952:	781a      	ldrb	r2, [r3, #0]
    f954:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95c:	781b      	ldrb	r3, [r3, #0]
    f95e:	4413      	add	r3, r2
    f960:	b2da      	uxtb	r2, r3
    f962:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96a:	701a      	strb	r2, [r3, #0]
    f96c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f974:	781b      	ldrb	r3, [r3, #0]
    f976:	3301      	adds	r3, #1
    f978:	b2da      	uxtb	r2, r3
    f97a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f982:	701a      	strb	r2, [r3, #0]
    f984:	f24c 5349 	movw	r3, #50505	; 0xc549
    f988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	2bff      	cmp	r3, #255	; 0xff
    f990:	d110      	bne.n	f9b4 <send_gps_pos+0xcdc>
    f992:	f24c 5349 	movw	r3, #50505	; 0xc549
    f996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99a:	2200      	movs	r2, #0
    f99c:	701a      	strb	r2, [r3, #0]
    f99e:	e009      	b.n	f9b4 <send_gps_pos+0xcdc>
    f9a0:	2004c6bd 	.word	0x2004c6bd
    f9a4:	2004c6be 	.word	0x2004c6be
    f9a8:	2004c6bf 	.word	0x2004c6bf
    f9ac:	2004c6c1 	.word	0x2004c6c1
    f9b0:	2004c6c2 	.word	0x2004c6c2
    f9b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9bc:	781b      	ldrb	r3, [r3, #0]
    f9be:	461a      	mov	r2, r3
    f9c0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c8:	78d9      	ldrb	r1, [r3, #3]
    f9ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d2:	5499      	strb	r1, [r3, r2]
    f9d4:	4bd3      	ldr	r3, [pc, #844]	; (fd24 <send_gps_pos+0x104c>)
    f9d6:	781a      	ldrb	r2, [r3, #0]
    f9d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	781b      	ldrb	r3, [r3, #0]
    f9e2:	4413      	add	r3, r2
    f9e4:	b2da      	uxtb	r2, r3
    f9e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	701a      	strb	r2, [r3, #0]
    f9f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f8:	781a      	ldrb	r2, [r3, #0]
    f9fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa02:	781b      	ldrb	r3, [r3, #0]
    fa04:	4413      	add	r3, r2
    fa06:	b2da      	uxtb	r2, r3
    fa08:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa10:	701a      	strb	r2, [r3, #0]
    fa12:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1a:	781b      	ldrb	r3, [r3, #0]
    fa1c:	3301      	adds	r3, #1
    fa1e:	b2da      	uxtb	r2, r3
    fa20:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa28:	701a      	strb	r2, [r3, #0]
    fa2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	2bff      	cmp	r3, #255	; 0xff
    fa36:	d105      	bne.n	fa44 <send_gps_pos+0xd6c>
    fa38:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	2200      	movs	r2, #0
    fa42:	701a      	strb	r2, [r3, #0]
    fa44:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4c:	781b      	ldrb	r3, [r3, #0]
    fa4e:	461a      	mov	r2, r3
    fa50:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	7819      	ldrb	r1, [r3, #0]
    fa5a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa62:	5499      	strb	r1, [r3, r2]
    fa64:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6c:	781a      	ldrb	r2, [r3, #0]
    fa6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa76:	781b      	ldrb	r3, [r3, #0]
    fa78:	4413      	add	r3, r2
    fa7a:	b2da      	uxtb	r2, r3
    fa7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa84:	701a      	strb	r2, [r3, #0]
    fa86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa8e:	781a      	ldrb	r2, [r3, #0]
    fa90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa98:	781b      	ldrb	r3, [r3, #0]
    fa9a:	4413      	add	r3, r2
    fa9c:	b2da      	uxtb	r2, r3
    fa9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    faa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa6:	701a      	strb	r2, [r3, #0]
    faa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    faac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab0:	781b      	ldrb	r3, [r3, #0]
    fab2:	3301      	adds	r3, #1
    fab4:	b2da      	uxtb	r2, r3
    fab6:	f24c 5349 	movw	r3, #50505	; 0xc549
    faba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabe:	701a      	strb	r2, [r3, #0]
    fac0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac8:	781b      	ldrb	r3, [r3, #0]
    faca:	2bff      	cmp	r3, #255	; 0xff
    facc:	d105      	bne.n	fada <send_gps_pos+0xe02>
    face:	f24c 5349 	movw	r3, #50505	; 0xc549
    fad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad6:	2200      	movs	r2, #0
    fad8:	701a      	strb	r2, [r3, #0]
    fada:	f24c 5349 	movw	r3, #50505	; 0xc549
    fade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae2:	781b      	ldrb	r3, [r3, #0]
    fae4:	461a      	mov	r2, r3
    fae6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    faea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faee:	7859      	ldrb	r1, [r3, #1]
    faf0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    faf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf8:	5499      	strb	r1, [r3, r2]
    fafa:	4b8b      	ldr	r3, [pc, #556]	; (fd28 <send_gps_pos+0x1050>)
    fafc:	781a      	ldrb	r2, [r3, #0]
    fafe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb06:	781b      	ldrb	r3, [r3, #0]
    fb08:	4413      	add	r3, r2
    fb0a:	b2da      	uxtb	r2, r3
    fb0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb14:	701a      	strb	r2, [r3, #0]
    fb16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1e:	781a      	ldrb	r2, [r3, #0]
    fb20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb28:	781b      	ldrb	r3, [r3, #0]
    fb2a:	4413      	add	r3, r2
    fb2c:	b2da      	uxtb	r2, r3
    fb2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb36:	701a      	strb	r2, [r3, #0]
    fb38:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb40:	781b      	ldrb	r3, [r3, #0]
    fb42:	3301      	adds	r3, #1
    fb44:	b2da      	uxtb	r2, r3
    fb46:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4e:	701a      	strb	r2, [r3, #0]
    fb50:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb58:	781b      	ldrb	r3, [r3, #0]
    fb5a:	2bff      	cmp	r3, #255	; 0xff
    fb5c:	d105      	bne.n	fb6a <send_gps_pos+0xe92>
    fb5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb66:	2200      	movs	r2, #0
    fb68:	701a      	strb	r2, [r3, #0]
    fb6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb72:	781b      	ldrb	r3, [r3, #0]
    fb74:	461a      	mov	r2, r3
    fb76:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7e:	7899      	ldrb	r1, [r3, #2]
    fb80:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb88:	5499      	strb	r1, [r3, r2]
    fb8a:	4b68      	ldr	r3, [pc, #416]	; (fd2c <send_gps_pos+0x1054>)
    fb8c:	781a      	ldrb	r2, [r3, #0]
    fb8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb96:	781b      	ldrb	r3, [r3, #0]
    fb98:	4413      	add	r3, r2
    fb9a:	b2da      	uxtb	r2, r3
    fb9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba4:	701a      	strb	r2, [r3, #0]
    fba6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbae:	781a      	ldrb	r2, [r3, #0]
    fbb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb8:	781b      	ldrb	r3, [r3, #0]
    fbba:	4413      	add	r3, r2
    fbbc:	b2da      	uxtb	r2, r3
    fbbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc6:	701a      	strb	r2, [r3, #0]
    fbc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd0:	781b      	ldrb	r3, [r3, #0]
    fbd2:	3301      	adds	r3, #1
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbde:	701a      	strb	r2, [r3, #0]
    fbe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe8:	781b      	ldrb	r3, [r3, #0]
    fbea:	2bff      	cmp	r3, #255	; 0xff
    fbec:	d105      	bne.n	fbfa <send_gps_pos+0xf22>
    fbee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf6:	2200      	movs	r2, #0
    fbf8:	701a      	strb	r2, [r3, #0]
    fbfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc02:	781b      	ldrb	r3, [r3, #0]
    fc04:	461a      	mov	r2, r3
    fc06:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0e:	78d9      	ldrb	r1, [r3, #3]
    fc10:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc18:	5499      	strb	r1, [r3, r2]
    fc1a:	4b45      	ldr	r3, [pc, #276]	; (fd30 <send_gps_pos+0x1058>)
    fc1c:	781a      	ldrb	r2, [r3, #0]
    fc1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc26:	781b      	ldrb	r3, [r3, #0]
    fc28:	4413      	add	r3, r2
    fc2a:	b2da      	uxtb	r2, r3
    fc2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc34:	701a      	strb	r2, [r3, #0]
    fc36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3e:	781a      	ldrb	r2, [r3, #0]
    fc40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc48:	781b      	ldrb	r3, [r3, #0]
    fc4a:	4413      	add	r3, r2
    fc4c:	b2da      	uxtb	r2, r3
    fc4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc60:	781b      	ldrb	r3, [r3, #0]
    fc62:	3301      	adds	r3, #1
    fc64:	b2da      	uxtb	r2, r3
    fc66:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6e:	701a      	strb	r2, [r3, #0]
    fc70:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc78:	781b      	ldrb	r3, [r3, #0]
    fc7a:	2bff      	cmp	r3, #255	; 0xff
    fc7c:	d105      	bne.n	fc8a <send_gps_pos+0xfb2>
    fc7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc86:	2200      	movs	r2, #0
    fc88:	701a      	strb	r2, [r3, #0]
    fc8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	461a      	mov	r2, r3
    fc96:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9e:	7819      	ldrb	r1, [r3, #0]
    fca0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	5499      	strb	r1, [r3, r2]
    fcaa:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fcae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb2:	781a      	ldrb	r2, [r3, #0]
    fcb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcbc:	781b      	ldrb	r3, [r3, #0]
    fcbe:	4413      	add	r3, r2
    fcc0:	b2da      	uxtb	r2, r3
    fcc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcca:	701a      	strb	r2, [r3, #0]
    fccc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd4:	781a      	ldrb	r2, [r3, #0]
    fcd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcde:	781b      	ldrb	r3, [r3, #0]
    fce0:	4413      	add	r3, r2
    fce2:	b2da      	uxtb	r2, r3
    fce4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcec:	701a      	strb	r2, [r3, #0]
    fcee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf6:	781b      	ldrb	r3, [r3, #0]
    fcf8:	3301      	adds	r3, #1
    fcfa:	b2da      	uxtb	r2, r3
    fcfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd04:	701a      	strb	r2, [r3, #0]
    fd06:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd0e:	781b      	ldrb	r3, [r3, #0]
    fd10:	2bff      	cmp	r3, #255	; 0xff
    fd12:	d10f      	bne.n	fd34 <send_gps_pos+0x105c>
    fd14:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1c:	2200      	movs	r2, #0
    fd1e:	701a      	strb	r2, [r3, #0]
    fd20:	e008      	b.n	fd34 <send_gps_pos+0x105c>
    fd22:	bf00      	nop
    fd24:	2004c6c3 	.word	0x2004c6c3
    fd28:	2004c6c5 	.word	0x2004c6c5
    fd2c:	2004c6c6 	.word	0x2004c6c6
    fd30:	2004c6c7 	.word	0x2004c6c7
    fd34:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3c:	781b      	ldrb	r3, [r3, #0]
    fd3e:	461a      	mov	r2, r3
    fd40:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd48:	7859      	ldrb	r1, [r3, #1]
    fd4a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd52:	5499      	strb	r1, [r3, r2]
    fd54:	4bc0      	ldr	r3, [pc, #768]	; (10058 <send_gps_pos+0x1380>)
    fd56:	781a      	ldrb	r2, [r3, #0]
    fd58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	4413      	add	r3, r2
    fd64:	b2da      	uxtb	r2, r3
    fd66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd6e:	701a      	strb	r2, [r3, #0]
    fd70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd78:	781a      	ldrb	r2, [r3, #0]
    fd7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd82:	781b      	ldrb	r3, [r3, #0]
    fd84:	4413      	add	r3, r2
    fd86:	b2da      	uxtb	r2, r3
    fd88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd90:	701a      	strb	r2, [r3, #0]
    fd92:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9a:	781b      	ldrb	r3, [r3, #0]
    fd9c:	3301      	adds	r3, #1
    fd9e:	b2da      	uxtb	r2, r3
    fda0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda8:	701a      	strb	r2, [r3, #0]
    fdaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb2:	781b      	ldrb	r3, [r3, #0]
    fdb4:	2bff      	cmp	r3, #255	; 0xff
    fdb6:	d105      	bne.n	fdc4 <send_gps_pos+0x10ec>
    fdb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc0:	2200      	movs	r2, #0
    fdc2:	701a      	strb	r2, [r3, #0]
    fdc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	461a      	mov	r2, r3
    fdd0:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd8:	7899      	ldrb	r1, [r3, #2]
    fdda:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde2:	5499      	strb	r1, [r3, r2]
    fde4:	4b9d      	ldr	r3, [pc, #628]	; (1005c <send_gps_pos+0x1384>)
    fde6:	781a      	ldrb	r2, [r3, #0]
    fde8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf0:	781b      	ldrb	r3, [r3, #0]
    fdf2:	4413      	add	r3, r2
    fdf4:	b2da      	uxtb	r2, r3
    fdf6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdfe:	701a      	strb	r2, [r3, #0]
    fe00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe08:	781a      	ldrb	r2, [r3, #0]
    fe0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe12:	781b      	ldrb	r3, [r3, #0]
    fe14:	4413      	add	r3, r2
    fe16:	b2da      	uxtb	r2, r3
    fe18:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe20:	701a      	strb	r2, [r3, #0]
    fe22:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe2a:	781b      	ldrb	r3, [r3, #0]
    fe2c:	3301      	adds	r3, #1
    fe2e:	b2da      	uxtb	r2, r3
    fe30:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe38:	701a      	strb	r2, [r3, #0]
    fe3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	2bff      	cmp	r3, #255	; 0xff
    fe46:	d105      	bne.n	fe54 <send_gps_pos+0x117c>
    fe48:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe50:	2200      	movs	r2, #0
    fe52:	701a      	strb	r2, [r3, #0]
    fe54:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5c:	781b      	ldrb	r3, [r3, #0]
    fe5e:	461a      	mov	r2, r3
    fe60:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fe64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe68:	78d9      	ldrb	r1, [r3, #3]
    fe6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe72:	5499      	strb	r1, [r3, r2]
    fe74:	4b7a      	ldr	r3, [pc, #488]	; (10060 <send_gps_pos+0x1388>)
    fe76:	781a      	ldrb	r2, [r3, #0]
    fe78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe80:	781b      	ldrb	r3, [r3, #0]
    fe82:	4413      	add	r3, r2
    fe84:	b2da      	uxtb	r2, r3
    fe86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8e:	701a      	strb	r2, [r3, #0]
    fe90:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe98:	781a      	ldrb	r2, [r3, #0]
    fe9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea2:	781b      	ldrb	r3, [r3, #0]
    fea4:	4413      	add	r3, r2
    fea6:	b2da      	uxtb	r2, r3
    fea8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    feac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb0:	701a      	strb	r2, [r3, #0]
    feb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    feb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	3301      	adds	r3, #1
    febe:	b2da      	uxtb	r2, r3
    fec0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec8:	701a      	strb	r2, [r3, #0]
    feca:	f24c 5349 	movw	r3, #50505	; 0xc549
    fece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed2:	781b      	ldrb	r3, [r3, #0]
    fed4:	2bff      	cmp	r3, #255	; 0xff
    fed6:	d105      	bne.n	fee4 <send_gps_pos+0x120c>
    fed8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee0:	2200      	movs	r2, #0
    fee2:	701a      	strb	r2, [r3, #0]
    fee4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feec:	781b      	ldrb	r3, [r3, #0]
    feee:	461a      	mov	r2, r3
    fef0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef8:	7819      	ldrb	r1, [r3, #0]
    fefa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff02:	5499      	strb	r1, [r3, r2]
    ff04:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0c:	781b      	ldrb	r3, [r3, #0]
    ff0e:	3301      	adds	r3, #1
    ff10:	b2da      	uxtb	r2, r3
    ff12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1a:	701a      	strb	r2, [r3, #0]
    ff1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff24:	781b      	ldrb	r3, [r3, #0]
    ff26:	2bff      	cmp	r3, #255	; 0xff
    ff28:	d105      	bne.n	ff36 <send_gps_pos+0x125e>
    ff2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff32:	2200      	movs	r2, #0
    ff34:	701a      	strb	r2, [r3, #0]
    ff36:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3e:	781b      	ldrb	r3, [r3, #0]
    ff40:	461a      	mov	r2, r3
    ff42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ff46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff4a:	7819      	ldrb	r1, [r3, #0]
    ff4c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff54:	5499      	strb	r1, [r3, r2]
    ff56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff5e:	781b      	ldrb	r3, [r3, #0]
    ff60:	3301      	adds	r3, #1
    ff62:	b2da      	uxtb	r2, r3
    ff64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6c:	701a      	strb	r2, [r3, #0]
    ff6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff76:	781b      	ldrb	r3, [r3, #0]
    ff78:	2bff      	cmp	r3, #255	; 0xff
    ff7a:	d105      	bne.n	ff88 <send_gps_pos+0x12b0>
    ff7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff84:	2200      	movs	r2, #0
    ff86:	701a      	strb	r2, [r3, #0]
    ff88:	f242 0339 	movw	r3, #8249	; 0x2039
    ff8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff90:	781b      	ldrb	r3, [r3, #0]
    ff92:	b2db      	uxtb	r3, r3
    ff94:	f003 0310 	and.w	r3, r3, #16
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d15a      	bne.n	10052 <send_gps_pos+0x137a>
    ff9c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa4:	781b      	ldrb	r3, [r3, #0]
    ffa6:	b2db      	uxtb	r3, r3
    ffa8:	461a      	mov	r2, r3
    ffaa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ffae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb2:	5c9a      	ldrb	r2, [r3, r2]
    ffb4:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ffb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffbc:	701a      	strb	r2, [r3, #0]
    ffbe:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ffc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc6:	2200      	movs	r2, #0
    ffc8:	701a      	strb	r2, [r3, #0]
    ffca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	b2db      	uxtb	r3, r3
    ffd6:	3301      	adds	r3, #1
    ffd8:	b2da      	uxtb	r2, r3
    ffda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe2:	701a      	strb	r2, [r3, #0]
    ffe4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ffe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffec:	781b      	ldrb	r3, [r3, #0]
    ffee:	b2db      	uxtb	r3, r3
    fff0:	2bff      	cmp	r3, #255	; 0xff
    fff2:	d105      	bne.n	10000 <send_gps_pos+0x1328>
    fff4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffc:	2200      	movs	r2, #0
    fffe:	701a      	strb	r2, [r3, #0]
   10000:	f242 0338 	movw	r3, #8248	; 0x2038
   10004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10008:	f242 0238 	movw	r2, #8248	; 0x2038
   1000c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10010:	7812      	ldrb	r2, [r2, #0]
   10012:	b2d2      	uxtb	r2, r2
   10014:	f042 0201 	orr.w	r2, r2, #1
   10018:	b2d2      	uxtb	r2, r2
   1001a:	701a      	strb	r2, [r3, #0]
   1001c:	f242 0339 	movw	r3, #8249	; 0x2039
   10020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10024:	f242 0239 	movw	r2, #8249	; 0x2039
   10028:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1002c:	7812      	ldrb	r2, [r2, #0]
   1002e:	b2d2      	uxtb	r2, r2
   10030:	f042 0210 	orr.w	r2, r2, #16
   10034:	b2d2      	uxtb	r2, r2
   10036:	701a      	strb	r2, [r3, #0]
   10038:	e00b      	b.n	10052 <send_gps_pos+0x137a>
   1003a:	f24c 5348 	movw	r3, #50504	; 0xc548
   1003e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	3301      	adds	r3, #1
   10046:	b2da      	uxtb	r2, r3
   10048:	f24c 5348 	movw	r3, #50504	; 0xc548
   1004c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10050:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   10052:	f005 fbfd 	bl	15850 <estimator_update_state_gps>
  }
}
   10056:	bd80      	pop	{r7, pc}
   10058:	2004c6b9 	.word	0x2004c6b9
   1005c:	2004c6ba 	.word	0x2004c6ba
   10060:	2004c6bb 	.word	0x2004c6bb

00010064 <send_radIR>:

void send_radIR(void){
   10064:	b480      	push	{r7}
   10066:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10068:	f24c 63de 	movw	r3, #50910	; 0xc6de
   1006c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10070:	781b      	ldrb	r3, [r3, #0]
   10072:	2b00      	cmp	r3, #0
   10074:	f000 85e8 	beq.w	10c48 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10078:	f24c 5349 	movw	r3, #50505	; 0xc549
   1007c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10080:	781a      	ldrb	r2, [r3, #0]
   10082:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008a:	781b      	ldrb	r3, [r3, #0]
   1008c:	b2db      	uxtb	r3, r3
   1008e:	429a      	cmp	r2, r3
   10090:	d313      	bcc.n	100ba <send_radIR+0x56>
   10092:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	781b      	ldrb	r3, [r3, #0]
   1009c:	b2db      	uxtb	r3, r3
   1009e:	461a      	mov	r2, r3
   100a0:	f24c 5349 	movw	r3, #50505	; 0xc549
   100a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a8:	781b      	ldrb	r3, [r3, #0]
   100aa:	1ad3      	subs	r3, r2, r3
   100ac:	33ff      	adds	r3, #255	; 0xff
   100ae:	2b14      	cmp	r3, #20
   100b0:	bfd4      	ite	le
   100b2:	2300      	movle	r3, #0
   100b4:	2301      	movgt	r3, #1
   100b6:	b2db      	uxtb	r3, r3
   100b8:	e011      	b.n	100de <send_radIR+0x7a>
   100ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	b2db      	uxtb	r3, r3
   100c6:	461a      	mov	r2, r3
   100c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   100cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d0:	781b      	ldrb	r3, [r3, #0]
   100d2:	1ad3      	subs	r3, r2, r3
   100d4:	2b14      	cmp	r3, #20
   100d6:	bfd4      	ite	le
   100d8:	2300      	movle	r3, #0
   100da:	2301      	movgt	r3, #1
   100dc:	b2db      	uxtb	r3, r3
   100de:	2b00      	cmp	r3, #0
   100e0:	f000 85a6 	beq.w	10c30 <send_radIR+0xbcc>
   100e4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	461a      	mov	r2, r3
   100f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f8:	2105      	movs	r1, #5
   100fa:	5499      	strb	r1, [r3, r2]
   100fc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10104:	781b      	ldrb	r3, [r3, #0]
   10106:	3301      	adds	r3, #1
   10108:	b2da      	uxtb	r2, r3
   1010a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	701a      	strb	r2, [r3, #0]
   10114:	f24c 5349 	movw	r3, #50505	; 0xc549
   10118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1011c:	781b      	ldrb	r3, [r3, #0]
   1011e:	2bff      	cmp	r3, #255	; 0xff
   10120:	d105      	bne.n	1012e <send_radIR+0xca>
   10122:	f24c 5349 	movw	r3, #50505	; 0xc549
   10126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012a:	2200      	movs	r2, #0
   1012c:	701a      	strb	r2, [r3, #0]
   1012e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10136:	781b      	ldrb	r3, [r3, #0]
   10138:	461a      	mov	r2, r3
   1013a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1013e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10142:	2105      	movs	r1, #5
   10144:	5499      	strb	r1, [r3, r2]
   10146:	f24c 5349 	movw	r3, #50505	; 0xc549
   1014a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014e:	781b      	ldrb	r3, [r3, #0]
   10150:	3301      	adds	r3, #1
   10152:	b2da      	uxtb	r2, r3
   10154:	f24c 5349 	movw	r3, #50505	; 0xc549
   10158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015c:	701a      	strb	r2, [r3, #0]
   1015e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10166:	781b      	ldrb	r3, [r3, #0]
   10168:	2bff      	cmp	r3, #255	; 0xff
   1016a:	d105      	bne.n	10178 <send_radIR+0x114>
   1016c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	2200      	movs	r2, #0
   10176:	701a      	strb	r2, [r3, #0]
   10178:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1017c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10180:	2205      	movs	r2, #5
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	2205      	movs	r2, #5
   1018e:	701a      	strb	r2, [r3, #0]
   10190:	f24c 5349 	movw	r3, #50505	; 0xc549
   10194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10198:	781b      	ldrb	r3, [r3, #0]
   1019a:	461a      	mov	r2, r3
   1019c:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a4:	7819      	ldrb	r1, [r3, #0]
   101a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
   101aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ae:	5499      	strb	r1, [r3, r2]
   101b0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b8:	781a      	ldrb	r2, [r3, #0]
   101ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c2:	781b      	ldrb	r3, [r3, #0]
   101c4:	4413      	add	r3, r2
   101c6:	b2da      	uxtb	r2, r3
   101c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d0:	701a      	strb	r2, [r3, #0]
   101d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101da:	781a      	ldrb	r2, [r3, #0]
   101dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e4:	781b      	ldrb	r3, [r3, #0]
   101e6:	4413      	add	r3, r2
   101e8:	b2da      	uxtb	r2, r3
   101ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f2:	701a      	strb	r2, [r3, #0]
   101f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fc:	781b      	ldrb	r3, [r3, #0]
   101fe:	3301      	adds	r3, #1
   10200:	b2da      	uxtb	r2, r3
   10202:	f24c 5349 	movw	r3, #50505	; 0xc549
   10206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020a:	701a      	strb	r2, [r3, #0]
   1020c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10214:	781b      	ldrb	r3, [r3, #0]
   10216:	2bff      	cmp	r3, #255	; 0xff
   10218:	d105      	bne.n	10226 <send_radIR+0x1c2>
   1021a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1021e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10222:	2200      	movs	r2, #0
   10224:	701a      	strb	r2, [r3, #0]
   10226:	f24c 5349 	movw	r3, #50505	; 0xc549
   1022a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022e:	781b      	ldrb	r3, [r3, #0]
   10230:	461a      	mov	r2, r3
   10232:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10236:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023a:	7859      	ldrb	r1, [r3, #1]
   1023c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10244:	5499      	strb	r1, [r3, r2]
   10246:	4bd2      	ldr	r3, [pc, #840]	; (10590 <send_radIR+0x52c>)
   10248:	781a      	ldrb	r2, [r3, #0]
   1024a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1024e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10252:	781b      	ldrb	r3, [r3, #0]
   10254:	4413      	add	r3, r2
   10256:	b2da      	uxtb	r2, r3
   10258:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1025c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10260:	701a      	strb	r2, [r3, #0]
   10262:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026a:	781a      	ldrb	r2, [r3, #0]
   1026c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10274:	781b      	ldrb	r3, [r3, #0]
   10276:	4413      	add	r3, r2
   10278:	b2da      	uxtb	r2, r3
   1027a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1027e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10282:	701a      	strb	r2, [r3, #0]
   10284:	f24c 5349 	movw	r3, #50505	; 0xc549
   10288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028c:	781b      	ldrb	r3, [r3, #0]
   1028e:	3301      	adds	r3, #1
   10290:	b2da      	uxtb	r2, r3
   10292:	f24c 5349 	movw	r3, #50505	; 0xc549
   10296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029a:	701a      	strb	r2, [r3, #0]
   1029c:	f24c 5349 	movw	r3, #50505	; 0xc549
   102a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a4:	781b      	ldrb	r3, [r3, #0]
   102a6:	2bff      	cmp	r3, #255	; 0xff
   102a8:	d105      	bne.n	102b6 <send_radIR+0x252>
   102aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   102ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b2:	2200      	movs	r2, #0
   102b4:	701a      	strb	r2, [r3, #0]
   102b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   102ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102be:	781b      	ldrb	r3, [r3, #0]
   102c0:	461a      	mov	r2, r3
   102c2:	f64c 3340 	movw	r3, #52032	; 0xcb40
   102c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ca:	7899      	ldrb	r1, [r3, #2]
   102cc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d4:	5499      	strb	r1, [r3, r2]
   102d6:	4baf      	ldr	r3, [pc, #700]	; (10594 <send_radIR+0x530>)
   102d8:	781a      	ldrb	r2, [r3, #0]
   102da:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	4413      	add	r3, r2
   102e6:	b2da      	uxtb	r2, r3
   102e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f0:	701a      	strb	r2, [r3, #0]
   102f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fa:	781a      	ldrb	r2, [r3, #0]
   102fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10304:	781b      	ldrb	r3, [r3, #0]
   10306:	4413      	add	r3, r2
   10308:	b2da      	uxtb	r2, r3
   1030a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1030e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10312:	701a      	strb	r2, [r3, #0]
   10314:	f24c 5349 	movw	r3, #50505	; 0xc549
   10318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031c:	781b      	ldrb	r3, [r3, #0]
   1031e:	3301      	adds	r3, #1
   10320:	b2da      	uxtb	r2, r3
   10322:	f24c 5349 	movw	r3, #50505	; 0xc549
   10326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032a:	701a      	strb	r2, [r3, #0]
   1032c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10334:	781b      	ldrb	r3, [r3, #0]
   10336:	2bff      	cmp	r3, #255	; 0xff
   10338:	d105      	bne.n	10346 <send_radIR+0x2e2>
   1033a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1033e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10342:	2200      	movs	r2, #0
   10344:	701a      	strb	r2, [r3, #0]
   10346:	f24c 5349 	movw	r3, #50505	; 0xc549
   1034a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034e:	781b      	ldrb	r3, [r3, #0]
   10350:	461a      	mov	r2, r3
   10352:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035a:	78d9      	ldrb	r1, [r3, #3]
   1035c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10364:	5499      	strb	r1, [r3, r2]
   10366:	4b8c      	ldr	r3, [pc, #560]	; (10598 <send_radIR+0x534>)
   10368:	781a      	ldrb	r2, [r3, #0]
   1036a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1036e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10372:	781b      	ldrb	r3, [r3, #0]
   10374:	4413      	add	r3, r2
   10376:	b2da      	uxtb	r2, r3
   10378:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	701a      	strb	r2, [r3, #0]
   10382:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038a:	781a      	ldrb	r2, [r3, #0]
   1038c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10394:	781b      	ldrb	r3, [r3, #0]
   10396:	4413      	add	r3, r2
   10398:	b2da      	uxtb	r2, r3
   1039a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1039e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a2:	701a      	strb	r2, [r3, #0]
   103a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   103a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	3301      	adds	r3, #1
   103b0:	b2da      	uxtb	r2, r3
   103b2:	f24c 5349 	movw	r3, #50505	; 0xc549
   103b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ba:	701a      	strb	r2, [r3, #0]
   103bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   103c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	2bff      	cmp	r3, #255	; 0xff
   103c8:	d105      	bne.n	103d6 <send_radIR+0x372>
   103ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	2200      	movs	r2, #0
   103d4:	701a      	strb	r2, [r3, #0]
   103d6:	f24c 5349 	movw	r3, #50505	; 0xc549
   103da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103de:	781b      	ldrb	r3, [r3, #0]
   103e0:	461a      	mov	r2, r3
   103e2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	7819      	ldrb	r1, [r3, #0]
   103ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
   103f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f4:	5499      	strb	r1, [r3, r2]
   103f6:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fe:	781a      	ldrb	r2, [r3, #0]
   10400:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10408:	781b      	ldrb	r3, [r3, #0]
   1040a:	4413      	add	r3, r2
   1040c:	b2da      	uxtb	r2, r3
   1040e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10416:	701a      	strb	r2, [r3, #0]
   10418:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1041c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10420:	781a      	ldrb	r2, [r3, #0]
   10422:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042a:	781b      	ldrb	r3, [r3, #0]
   1042c:	4413      	add	r3, r2
   1042e:	b2da      	uxtb	r2, r3
   10430:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10438:	701a      	strb	r2, [r3, #0]
   1043a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1043e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10442:	781b      	ldrb	r3, [r3, #0]
   10444:	3301      	adds	r3, #1
   10446:	b2da      	uxtb	r2, r3
   10448:	f24c 5349 	movw	r3, #50505	; 0xc549
   1044c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10450:	701a      	strb	r2, [r3, #0]
   10452:	f24c 5349 	movw	r3, #50505	; 0xc549
   10456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045a:	781b      	ldrb	r3, [r3, #0]
   1045c:	2bff      	cmp	r3, #255	; 0xff
   1045e:	d105      	bne.n	1046c <send_radIR+0x408>
   10460:	f24c 5349 	movw	r3, #50505	; 0xc549
   10464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10468:	2200      	movs	r2, #0
   1046a:	701a      	strb	r2, [r3, #0]
   1046c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10474:	781b      	ldrb	r3, [r3, #0]
   10476:	461a      	mov	r2, r3
   10478:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1047c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10480:	7859      	ldrb	r1, [r3, #1]
   10482:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048a:	5499      	strb	r1, [r3, r2]
   1048c:	4b43      	ldr	r3, [pc, #268]	; (1059c <send_radIR+0x538>)
   1048e:	781a      	ldrb	r2, [r3, #0]
   10490:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10498:	781b      	ldrb	r3, [r3, #0]
   1049a:	4413      	add	r3, r2
   1049c:	b2da      	uxtb	r2, r3
   1049e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a6:	701a      	strb	r2, [r3, #0]
   104a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b0:	781a      	ldrb	r2, [r3, #0]
   104b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ba:	781b      	ldrb	r3, [r3, #0]
   104bc:	4413      	add	r3, r2
   104be:	b2da      	uxtb	r2, r3
   104c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c8:	701a      	strb	r2, [r3, #0]
   104ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   104ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d2:	781b      	ldrb	r3, [r3, #0]
   104d4:	3301      	adds	r3, #1
   104d6:	b2da      	uxtb	r2, r3
   104d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   104dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e0:	701a      	strb	r2, [r3, #0]
   104e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ea:	781b      	ldrb	r3, [r3, #0]
   104ec:	2bff      	cmp	r3, #255	; 0xff
   104ee:	d105      	bne.n	104fc <send_radIR+0x498>
   104f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   104f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f8:	2200      	movs	r2, #0
   104fa:	701a      	strb	r2, [r3, #0]
   104fc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10504:	781b      	ldrb	r3, [r3, #0]
   10506:	461a      	mov	r2, r3
   10508:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1050c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10510:	7899      	ldrb	r1, [r3, #2]
   10512:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051a:	5499      	strb	r1, [r3, r2]
   1051c:	4b20      	ldr	r3, [pc, #128]	; (105a0 <send_radIR+0x53c>)
   1051e:	781a      	ldrb	r2, [r3, #0]
   10520:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10524:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10528:	781b      	ldrb	r3, [r3, #0]
   1052a:	4413      	add	r3, r2
   1052c:	b2da      	uxtb	r2, r3
   1052e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10536:	701a      	strb	r2, [r3, #0]
   10538:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1053c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10540:	781a      	ldrb	r2, [r3, #0]
   10542:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054a:	781b      	ldrb	r3, [r3, #0]
   1054c:	4413      	add	r3, r2
   1054e:	b2da      	uxtb	r2, r3
   10550:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10558:	701a      	strb	r2, [r3, #0]
   1055a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1055e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10562:	781b      	ldrb	r3, [r3, #0]
   10564:	3301      	adds	r3, #1
   10566:	b2da      	uxtb	r2, r3
   10568:	f24c 5349 	movw	r3, #50505	; 0xc549
   1056c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10570:	701a      	strb	r2, [r3, #0]
   10572:	f24c 5349 	movw	r3, #50505	; 0xc549
   10576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	2bff      	cmp	r3, #255	; 0xff
   1057e:	d111      	bne.n	105a4 <send_radIR+0x540>
   10580:	f24c 5349 	movw	r3, #50505	; 0xc549
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	2200      	movs	r2, #0
   1058a:	701a      	strb	r2, [r3, #0]
   1058c:	e00a      	b.n	105a4 <send_radIR+0x540>
   1058e:	bf00      	nop
   10590:	2004cb41 	.word	0x2004cb41
   10594:	2004cb42 	.word	0x2004cb42
   10598:	2004cb43 	.word	0x2004cb43
   1059c:	2004cb45 	.word	0x2004cb45
   105a0:	2004cb46 	.word	0x2004cb46
   105a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   105a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ac:	781b      	ldrb	r3, [r3, #0]
   105ae:	461a      	mov	r2, r3
   105b0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   105b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b8:	78d9      	ldrb	r1, [r3, #3]
   105ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
   105be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c2:	5499      	strb	r1, [r3, r2]
   105c4:	4bd3      	ldr	r3, [pc, #844]	; (10914 <send_radIR+0x8b0>)
   105c6:	781a      	ldrb	r2, [r3, #0]
   105c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d0:	781b      	ldrb	r3, [r3, #0]
   105d2:	4413      	add	r3, r2
   105d4:	b2da      	uxtb	r2, r3
   105d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	701a      	strb	r2, [r3, #0]
   105e0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e8:	781a      	ldrb	r2, [r3, #0]
   105ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f2:	781b      	ldrb	r3, [r3, #0]
   105f4:	4413      	add	r3, r2
   105f6:	b2da      	uxtb	r2, r3
   105f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10600:	701a      	strb	r2, [r3, #0]
   10602:	f24c 5349 	movw	r3, #50505	; 0xc549
   10606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	3301      	adds	r3, #1
   1060e:	b2da      	uxtb	r2, r3
   10610:	f24c 5349 	movw	r3, #50505	; 0xc549
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	701a      	strb	r2, [r3, #0]
   1061a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1061e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10622:	781b      	ldrb	r3, [r3, #0]
   10624:	2bff      	cmp	r3, #255	; 0xff
   10626:	d105      	bne.n	10634 <send_radIR+0x5d0>
   10628:	f24c 5349 	movw	r3, #50505	; 0xc549
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	2200      	movs	r2, #0
   10632:	701a      	strb	r2, [r3, #0]
   10634:	f24c 5349 	movw	r3, #50505	; 0xc549
   10638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063c:	781b      	ldrb	r3, [r3, #0]
   1063e:	461a      	mov	r2, r3
   10640:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	7819      	ldrb	r1, [r3, #0]
   1064a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1064e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10652:	5499      	strb	r1, [r3, r2]
   10654:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065c:	781a      	ldrb	r2, [r3, #0]
   1065e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10666:	781b      	ldrb	r3, [r3, #0]
   10668:	4413      	add	r3, r2
   1066a:	b2da      	uxtb	r2, r3
   1066c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10674:	701a      	strb	r2, [r3, #0]
   10676:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1067a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067e:	781a      	ldrb	r2, [r3, #0]
   10680:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	4413      	add	r3, r2
   1068c:	b2da      	uxtb	r2, r3
   1068e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10696:	701a      	strb	r2, [r3, #0]
   10698:	f24c 5349 	movw	r3, #50505	; 0xc549
   1069c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a0:	781b      	ldrb	r3, [r3, #0]
   106a2:	3301      	adds	r3, #1
   106a4:	b2da      	uxtb	r2, r3
   106a6:	f24c 5349 	movw	r3, #50505	; 0xc549
   106aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ae:	701a      	strb	r2, [r3, #0]
   106b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   106b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b8:	781b      	ldrb	r3, [r3, #0]
   106ba:	2bff      	cmp	r3, #255	; 0xff
   106bc:	d105      	bne.n	106ca <send_radIR+0x666>
   106be:	f24c 5349 	movw	r3, #50505	; 0xc549
   106c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c6:	2200      	movs	r2, #0
   106c8:	701a      	strb	r2, [r3, #0]
   106ca:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d2:	781b      	ldrb	r3, [r3, #0]
   106d4:	461a      	mov	r2, r3
   106d6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106de:	7859      	ldrb	r1, [r3, #1]
   106e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e8:	5499      	strb	r1, [r3, r2]
   106ea:	4b8b      	ldr	r3, [pc, #556]	; (10918 <send_radIR+0x8b4>)
   106ec:	781a      	ldrb	r2, [r3, #0]
   106ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f6:	781b      	ldrb	r3, [r3, #0]
   106f8:	4413      	add	r3, r2
   106fa:	b2da      	uxtb	r2, r3
   106fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10704:	701a      	strb	r2, [r3, #0]
   10706:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1070a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070e:	781a      	ldrb	r2, [r3, #0]
   10710:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10718:	781b      	ldrb	r3, [r3, #0]
   1071a:	4413      	add	r3, r2
   1071c:	b2da      	uxtb	r2, r3
   1071e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10726:	701a      	strb	r2, [r3, #0]
   10728:	f24c 5349 	movw	r3, #50505	; 0xc549
   1072c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10730:	781b      	ldrb	r3, [r3, #0]
   10732:	3301      	adds	r3, #1
   10734:	b2da      	uxtb	r2, r3
   10736:	f24c 5349 	movw	r3, #50505	; 0xc549
   1073a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073e:	701a      	strb	r2, [r3, #0]
   10740:	f24c 5349 	movw	r3, #50505	; 0xc549
   10744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10748:	781b      	ldrb	r3, [r3, #0]
   1074a:	2bff      	cmp	r3, #255	; 0xff
   1074c:	d105      	bne.n	1075a <send_radIR+0x6f6>
   1074e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10756:	2200      	movs	r2, #0
   10758:	701a      	strb	r2, [r3, #0]
   1075a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1075e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10762:	781b      	ldrb	r3, [r3, #0]
   10764:	461a      	mov	r2, r3
   10766:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1076a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076e:	7899      	ldrb	r1, [r3, #2]
   10770:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10778:	5499      	strb	r1, [r3, r2]
   1077a:	4b68      	ldr	r3, [pc, #416]	; (1091c <send_radIR+0x8b8>)
   1077c:	781a      	ldrb	r2, [r3, #0]
   1077e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10786:	781b      	ldrb	r3, [r3, #0]
   10788:	4413      	add	r3, r2
   1078a:	b2da      	uxtb	r2, r3
   1078c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10794:	701a      	strb	r2, [r3, #0]
   10796:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1079a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079e:	781a      	ldrb	r2, [r3, #0]
   107a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a8:	781b      	ldrb	r3, [r3, #0]
   107aa:	4413      	add	r3, r2
   107ac:	b2da      	uxtb	r2, r3
   107ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b6:	701a      	strb	r2, [r3, #0]
   107b8:	f24c 5349 	movw	r3, #50505	; 0xc549
   107bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c0:	781b      	ldrb	r3, [r3, #0]
   107c2:	3301      	adds	r3, #1
   107c4:	b2da      	uxtb	r2, r3
   107c6:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ce:	701a      	strb	r2, [r3, #0]
   107d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   107d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d8:	781b      	ldrb	r3, [r3, #0]
   107da:	2bff      	cmp	r3, #255	; 0xff
   107dc:	d105      	bne.n	107ea <send_radIR+0x786>
   107de:	f24c 5349 	movw	r3, #50505	; 0xc549
   107e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e6:	2200      	movs	r2, #0
   107e8:	701a      	strb	r2, [r3, #0]
   107ea:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f2:	781b      	ldrb	r3, [r3, #0]
   107f4:	461a      	mov	r2, r3
   107f6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   107fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fe:	78d9      	ldrb	r1, [r3, #3]
   10800:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10808:	5499      	strb	r1, [r3, r2]
   1080a:	4b45      	ldr	r3, [pc, #276]	; (10920 <send_radIR+0x8bc>)
   1080c:	781a      	ldrb	r2, [r3, #0]
   1080e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10816:	781b      	ldrb	r3, [r3, #0]
   10818:	4413      	add	r3, r2
   1081a:	b2da      	uxtb	r2, r3
   1081c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10824:	701a      	strb	r2, [r3, #0]
   10826:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1082a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082e:	781a      	ldrb	r2, [r3, #0]
   10830:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10838:	781b      	ldrb	r3, [r3, #0]
   1083a:	4413      	add	r3, r2
   1083c:	b2da      	uxtb	r2, r3
   1083e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10846:	701a      	strb	r2, [r3, #0]
   10848:	f24c 5349 	movw	r3, #50505	; 0xc549
   1084c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10850:	781b      	ldrb	r3, [r3, #0]
   10852:	3301      	adds	r3, #1
   10854:	b2da      	uxtb	r2, r3
   10856:	f24c 5349 	movw	r3, #50505	; 0xc549
   1085a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085e:	701a      	strb	r2, [r3, #0]
   10860:	f24c 5349 	movw	r3, #50505	; 0xc549
   10864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10868:	781b      	ldrb	r3, [r3, #0]
   1086a:	2bff      	cmp	r3, #255	; 0xff
   1086c:	d105      	bne.n	1087a <send_radIR+0x816>
   1086e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10876:	2200      	movs	r2, #0
   10878:	701a      	strb	r2, [r3, #0]
   1087a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1087e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10882:	781b      	ldrb	r3, [r3, #0]
   10884:	461a      	mov	r2, r3
   10886:	f240 5342 	movw	r3, #1346	; 0x542
   1088a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1088e:	7819      	ldrb	r1, [r3, #0]
   10890:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10898:	5499      	strb	r1, [r3, r2]
   1089a:	f240 5342 	movw	r3, #1346	; 0x542
   1089e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a2:	781a      	ldrb	r2, [r3, #0]
   108a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ac:	781b      	ldrb	r3, [r3, #0]
   108ae:	4413      	add	r3, r2
   108b0:	b2da      	uxtb	r2, r3
   108b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ba:	701a      	strb	r2, [r3, #0]
   108bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c4:	781a      	ldrb	r2, [r3, #0]
   108c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ce:	781b      	ldrb	r3, [r3, #0]
   108d0:	4413      	add	r3, r2
   108d2:	b2da      	uxtb	r2, r3
   108d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108dc:	701a      	strb	r2, [r3, #0]
   108de:	f24c 5349 	movw	r3, #50505	; 0xc549
   108e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e6:	781b      	ldrb	r3, [r3, #0]
   108e8:	3301      	adds	r3, #1
   108ea:	b2da      	uxtb	r2, r3
   108ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   108f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f4:	701a      	strb	r2, [r3, #0]
   108f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   108fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fe:	781b      	ldrb	r3, [r3, #0]
   10900:	2bff      	cmp	r3, #255	; 0xff
   10902:	d10f      	bne.n	10924 <send_radIR+0x8c0>
   10904:	f24c 5349 	movw	r3, #50505	; 0xc549
   10908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090c:	2200      	movs	r2, #0
   1090e:	701a      	strb	r2, [r3, #0]
   10910:	e008      	b.n	10924 <send_radIR+0x8c0>
   10912:	bf00      	nop
   10914:	2004cb47 	.word	0x2004cb47
   10918:	2004cb3d 	.word	0x2004cb3d
   1091c:	2004cb3e 	.word	0x2004cb3e
   10920:	2004cb3f 	.word	0x2004cb3f
   10924:	f24c 5349 	movw	r3, #50505	; 0xc549
   10928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092c:	781b      	ldrb	r3, [r3, #0]
   1092e:	461a      	mov	r2, r3
   10930:	f240 5342 	movw	r3, #1346	; 0x542
   10934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10938:	7859      	ldrb	r1, [r3, #1]
   1093a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1093e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10942:	5499      	strb	r1, [r3, r2]
   10944:	4bc2      	ldr	r3, [pc, #776]	; (10c50 <send_radIR+0xbec>)
   10946:	781a      	ldrb	r2, [r3, #0]
   10948:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1094c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10950:	781b      	ldrb	r3, [r3, #0]
   10952:	4413      	add	r3, r2
   10954:	b2da      	uxtb	r2, r3
   10956:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1095a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095e:	701a      	strb	r2, [r3, #0]
   10960:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10968:	781a      	ldrb	r2, [r3, #0]
   1096a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1096e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10972:	781b      	ldrb	r3, [r3, #0]
   10974:	4413      	add	r3, r2
   10976:	b2da      	uxtb	r2, r3
   10978:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1097c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10980:	701a      	strb	r2, [r3, #0]
   10982:	f24c 5349 	movw	r3, #50505	; 0xc549
   10986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098a:	781b      	ldrb	r3, [r3, #0]
   1098c:	3301      	adds	r3, #1
   1098e:	b2da      	uxtb	r2, r3
   10990:	f24c 5349 	movw	r3, #50505	; 0xc549
   10994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10998:	701a      	strb	r2, [r3, #0]
   1099a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1099e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a2:	781b      	ldrb	r3, [r3, #0]
   109a4:	2bff      	cmp	r3, #255	; 0xff
   109a6:	d105      	bne.n	109b4 <send_radIR+0x950>
   109a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b0:	2200      	movs	r2, #0
   109b2:	701a      	strb	r2, [r3, #0]
   109b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   109b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109bc:	781b      	ldrb	r3, [r3, #0]
   109be:	461a      	mov	r2, r3
   109c0:	f240 5344 	movw	r3, #1348	; 0x544
   109c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c8:	7819      	ldrb	r1, [r3, #0]
   109ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d2:	5499      	strb	r1, [r3, r2]
   109d4:	f240 5344 	movw	r3, #1348	; 0x544
   109d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109dc:	781a      	ldrb	r2, [r3, #0]
   109de:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e6:	781b      	ldrb	r3, [r3, #0]
   109e8:	4413      	add	r3, r2
   109ea:	b2da      	uxtb	r2, r3
   109ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f4:	701a      	strb	r2, [r3, #0]
   109f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109fe:	781a      	ldrb	r2, [r3, #0]
   10a00:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	4413      	add	r3, r2
   10a0c:	b2da      	uxtb	r2, r3
   10a0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a16:	701a      	strb	r2, [r3, #0]
   10a18:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a20:	781b      	ldrb	r3, [r3, #0]
   10a22:	3301      	adds	r3, #1
   10a24:	b2da      	uxtb	r2, r3
   10a26:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2e:	701a      	strb	r2, [r3, #0]
   10a30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	2bff      	cmp	r3, #255	; 0xff
   10a3c:	d105      	bne.n	10a4a <send_radIR+0x9e6>
   10a3e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a46:	2200      	movs	r2, #0
   10a48:	701a      	strb	r2, [r3, #0]
   10a4a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a52:	781b      	ldrb	r3, [r3, #0]
   10a54:	461a      	mov	r2, r3
   10a56:	f240 5344 	movw	r3, #1348	; 0x544
   10a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a5e:	7859      	ldrb	r1, [r3, #1]
   10a60:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a68:	5499      	strb	r1, [r3, r2]
   10a6a:	4b7a      	ldr	r3, [pc, #488]	; (10c54 <send_radIR+0xbf0>)
   10a6c:	781a      	ldrb	r2, [r3, #0]
   10a6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a76:	781b      	ldrb	r3, [r3, #0]
   10a78:	4413      	add	r3, r2
   10a7a:	b2da      	uxtb	r2, r3
   10a7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a84:	701a      	strb	r2, [r3, #0]
   10a86:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8e:	781a      	ldrb	r2, [r3, #0]
   10a90:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	4413      	add	r3, r2
   10a9c:	b2da      	uxtb	r2, r3
   10a9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa6:	701a      	strb	r2, [r3, #0]
   10aa8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	3301      	adds	r3, #1
   10ab4:	b2da      	uxtb	r2, r3
   10ab6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10abe:	701a      	strb	r2, [r3, #0]
   10ac0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac8:	781b      	ldrb	r3, [r3, #0]
   10aca:	2bff      	cmp	r3, #255	; 0xff
   10acc:	d105      	bne.n	10ada <send_radIR+0xa76>
   10ace:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad6:	2200      	movs	r2, #0
   10ad8:	701a      	strb	r2, [r3, #0]
   10ada:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae2:	781b      	ldrb	r3, [r3, #0]
   10ae4:	461a      	mov	r2, r3
   10ae6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aee:	7819      	ldrb	r1, [r3, #0]
   10af0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af8:	5499      	strb	r1, [r3, r2]
   10afa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b02:	781b      	ldrb	r3, [r3, #0]
   10b04:	3301      	adds	r3, #1
   10b06:	b2da      	uxtb	r2, r3
   10b08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b10:	701a      	strb	r2, [r3, #0]
   10b12:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b1a:	781b      	ldrb	r3, [r3, #0]
   10b1c:	2bff      	cmp	r3, #255	; 0xff
   10b1e:	d105      	bne.n	10b2c <send_radIR+0xac8>
   10b20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
   10b2c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b34:	781b      	ldrb	r3, [r3, #0]
   10b36:	461a      	mov	r2, r3
   10b38:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b40:	7819      	ldrb	r1, [r3, #0]
   10b42:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b4a:	5499      	strb	r1, [r3, r2]
   10b4c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b54:	781b      	ldrb	r3, [r3, #0]
   10b56:	3301      	adds	r3, #1
   10b58:	b2da      	uxtb	r2, r3
   10b5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b62:	701a      	strb	r2, [r3, #0]
   10b64:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6c:	781b      	ldrb	r3, [r3, #0]
   10b6e:	2bff      	cmp	r3, #255	; 0xff
   10b70:	d105      	bne.n	10b7e <send_radIR+0xb1a>
   10b72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7a:	2200      	movs	r2, #0
   10b7c:	701a      	strb	r2, [r3, #0]
   10b7e:	f242 0339 	movw	r3, #8249	; 0x2039
   10b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b86:	781b      	ldrb	r3, [r3, #0]
   10b88:	b2db      	uxtb	r3, r3
   10b8a:	f003 0310 	and.w	r3, r3, #16
   10b8e:	2b00      	cmp	r3, #0
   10b90:	d15a      	bne.n	10c48 <send_radIR+0xbe4>
   10b92:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	b2db      	uxtb	r3, r3
   10b9e:	461a      	mov	r2, r3
   10ba0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba8:	5c9a      	ldrb	r2, [r3, r2]
   10baa:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb2:	701a      	strb	r2, [r3, #0]
   10bb4:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbc:	2200      	movs	r2, #0
   10bbe:	701a      	strb	r2, [r3, #0]
   10bc0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc8:	781b      	ldrb	r3, [r3, #0]
   10bca:	b2db      	uxtb	r3, r3
   10bcc:	3301      	adds	r3, #1
   10bce:	b2da      	uxtb	r2, r3
   10bd0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd8:	701a      	strb	r2, [r3, #0]
   10bda:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	b2db      	uxtb	r3, r3
   10be6:	2bff      	cmp	r3, #255	; 0xff
   10be8:	d105      	bne.n	10bf6 <send_radIR+0xb92>
   10bea:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf2:	2200      	movs	r2, #0
   10bf4:	701a      	strb	r2, [r3, #0]
   10bf6:	f242 0338 	movw	r3, #8248	; 0x2038
   10bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfe:	f242 0238 	movw	r2, #8248	; 0x2038
   10c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c06:	7812      	ldrb	r2, [r2, #0]
   10c08:	b2d2      	uxtb	r2, r2
   10c0a:	f042 0201 	orr.w	r2, r2, #1
   10c0e:	b2d2      	uxtb	r2, r2
   10c10:	701a      	strb	r2, [r3, #0]
   10c12:	f242 0339 	movw	r3, #8249	; 0x2039
   10c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1a:	f242 0239 	movw	r2, #8249	; 0x2039
   10c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c22:	7812      	ldrb	r2, [r2, #0]
   10c24:	b2d2      	uxtb	r2, r2
   10c26:	f042 0210 	orr.w	r2, r2, #16
   10c2a:	b2d2      	uxtb	r2, r2
   10c2c:	701a      	strb	r2, [r3, #0]
   10c2e:	e00b      	b.n	10c48 <send_radIR+0xbe4>
   10c30:	f24c 5348 	movw	r3, #50504	; 0xc548
   10c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c38:	781b      	ldrb	r3, [r3, #0]
   10c3a:	3301      	adds	r3, #1
   10c3c:	b2da      	uxtb	r2, r3
   10c3e:	f24c 5348 	movw	r3, #50504	; 0xc548
   10c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c46:	701a      	strb	r2, [r3, #0]
}
   10c48:	46bd      	mov	sp, r7
   10c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c4e:	4770      	bx	lr
   10c50:	20000543 	.word	0x20000543
   10c54:	20000545 	.word	0x20000545

00010c58 <send_takeOff>:

void send_takeOff(void){
   10c58:	b580      	push	{r7, lr}
   10c5a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10c5c:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	781b      	ldrb	r3, [r3, #0]
   10c66:	2b00      	cmp	r3, #0
   10c68:	f000 8200 	beq.w	1106c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10c6c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c74:	881b      	ldrh	r3, [r3, #0]
   10c76:	2b00      	cmp	r3, #0
   10c78:	f040 81f2 	bne.w	11060 <send_takeOff+0x408>
   10c7c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c84:	681b      	ldr	r3, [r3, #0]
   10c86:	4618      	mov	r0, r3
   10c88:	f04f 0100 	mov.w	r1, #0
   10c8c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10c90:	f007 fdfe 	bl	18890 <__aeabi_fcmpgt>
   10c94:	4603      	mov	r3, r0
   10c96:	2b00      	cmp	r3, #0
   10c98:	f000 81e2 	beq.w	11060 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10c9c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca4:	2201      	movs	r2, #1
   10ca6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10ca8:	f24c 5340 	movw	r3, #50496	; 0xc540
   10cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb0:	2201      	movs	r2, #1
   10cb2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10cb4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbc:	781a      	ldrb	r2, [r3, #0]
   10cbe:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc6:	781b      	ldrb	r3, [r3, #0]
   10cc8:	b2db      	uxtb	r3, r3
   10cca:	429a      	cmp	r2, r3
   10ccc:	d313      	bcc.n	10cf6 <send_takeOff+0x9e>
   10cce:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd6:	781b      	ldrb	r3, [r3, #0]
   10cd8:	b2db      	uxtb	r3, r3
   10cda:	461a      	mov	r2, r3
   10cdc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	1ad3      	subs	r3, r2, r3
   10ce8:	33ff      	adds	r3, #255	; 0xff
   10cea:	2b06      	cmp	r3, #6
   10cec:	bfd4      	ite	le
   10cee:	2300      	movle	r3, #0
   10cf0:	2301      	movgt	r3, #1
   10cf2:	b2db      	uxtb	r3, r3
   10cf4:	e011      	b.n	10d1a <send_takeOff+0xc2>
   10cf6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfe:	781b      	ldrb	r3, [r3, #0]
   10d00:	b2db      	uxtb	r3, r3
   10d02:	461a      	mov	r2, r3
   10d04:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0c:	781b      	ldrb	r3, [r3, #0]
   10d0e:	1ad3      	subs	r3, r2, r3
   10d10:	2b06      	cmp	r3, #6
   10d12:	bfd4      	ite	le
   10d14:	2300      	movle	r3, #0
   10d16:	2301      	movgt	r3, #1
   10d18:	b2db      	uxtb	r3, r3
   10d1a:	2b00      	cmp	r3, #0
   10d1c:	f000 8194 	beq.w	11048 <send_takeOff+0x3f0>
   10d20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d28:	781b      	ldrb	r3, [r3, #0]
   10d2a:	461a      	mov	r2, r3
   10d2c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d34:	2105      	movs	r1, #5
   10d36:	5499      	strb	r1, [r3, r2]
   10d38:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d40:	781b      	ldrb	r3, [r3, #0]
   10d42:	3301      	adds	r3, #1
   10d44:	b2da      	uxtb	r2, r3
   10d46:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4e:	701a      	strb	r2, [r3, #0]
   10d50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	2bff      	cmp	r3, #255	; 0xff
   10d5c:	d105      	bne.n	10d6a <send_takeOff+0x112>
   10d5e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d66:	2200      	movs	r2, #0
   10d68:	701a      	strb	r2, [r3, #0]
   10d6a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d72:	781b      	ldrb	r3, [r3, #0]
   10d74:	461a      	mov	r2, r3
   10d76:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7e:	2104      	movs	r1, #4
   10d80:	5499      	strb	r1, [r3, r2]
   10d82:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8a:	781b      	ldrb	r3, [r3, #0]
   10d8c:	3301      	adds	r3, #1
   10d8e:	b2da      	uxtb	r2, r3
   10d90:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d98:	701a      	strb	r2, [r3, #0]
   10d9a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	2bff      	cmp	r3, #255	; 0xff
   10da6:	d105      	bne.n	10db4 <send_takeOff+0x15c>
   10da8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db0:	2200      	movs	r2, #0
   10db2:	701a      	strb	r2, [r3, #0]
   10db4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbc:	2204      	movs	r2, #4
   10dbe:	701a      	strb	r2, [r3, #0]
   10dc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc8:	2204      	movs	r2, #4
   10dca:	701a      	strb	r2, [r3, #0]
   10dcc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd4:	781b      	ldrb	r3, [r3, #0]
   10dd6:	461a      	mov	r2, r3
   10dd8:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de0:	7819      	ldrb	r1, [r3, #0]
   10de2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dea:	5499      	strb	r1, [r3, r2]
   10dec:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df4:	781a      	ldrb	r2, [r3, #0]
   10df6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfe:	781b      	ldrb	r3, [r3, #0]
   10e00:	4413      	add	r3, r2
   10e02:	b2da      	uxtb	r2, r3
   10e04:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0c:	701a      	strb	r2, [r3, #0]
   10e0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e16:	781a      	ldrb	r2, [r3, #0]
   10e18:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e20:	781b      	ldrb	r3, [r3, #0]
   10e22:	4413      	add	r3, r2
   10e24:	b2da      	uxtb	r2, r3
   10e26:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2e:	701a      	strb	r2, [r3, #0]
   10e30:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	3301      	adds	r3, #1
   10e3c:	b2da      	uxtb	r2, r3
   10e3e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e46:	701a      	strb	r2, [r3, #0]
   10e48:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	2bff      	cmp	r3, #255	; 0xff
   10e54:	d105      	bne.n	10e62 <send_takeOff+0x20a>
   10e56:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5e:	2200      	movs	r2, #0
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6a:	781b      	ldrb	r3, [r3, #0]
   10e6c:	461a      	mov	r2, r3
   10e6e:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e76:	7859      	ldrb	r1, [r3, #1]
   10e78:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e80:	5499      	strb	r1, [r3, r2]
   10e82:	4b7b      	ldr	r3, [pc, #492]	; (11070 <send_takeOff+0x418>)
   10e84:	781a      	ldrb	r2, [r3, #0]
   10e86:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e8e:	781b      	ldrb	r3, [r3, #0]
   10e90:	4413      	add	r3, r2
   10e92:	b2da      	uxtb	r2, r3
   10e94:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9c:	701a      	strb	r2, [r3, #0]
   10e9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea6:	781a      	ldrb	r2, [r3, #0]
   10ea8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb0:	781b      	ldrb	r3, [r3, #0]
   10eb2:	4413      	add	r3, r2
   10eb4:	b2da      	uxtb	r2, r3
   10eb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ebe:	701a      	strb	r2, [r3, #0]
   10ec0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec8:	781b      	ldrb	r3, [r3, #0]
   10eca:	3301      	adds	r3, #1
   10ecc:	b2da      	uxtb	r2, r3
   10ece:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed6:	701a      	strb	r2, [r3, #0]
   10ed8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee0:	781b      	ldrb	r3, [r3, #0]
   10ee2:	2bff      	cmp	r3, #255	; 0xff
   10ee4:	d105      	bne.n	10ef2 <send_takeOff+0x29a>
   10ee6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eee:	2200      	movs	r2, #0
   10ef0:	701a      	strb	r2, [r3, #0]
   10ef2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	461a      	mov	r2, r3
   10efe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f06:	7819      	ldrb	r1, [r3, #0]
   10f08:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f10:	5499      	strb	r1, [r3, r2]
   10f12:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1a:	781b      	ldrb	r3, [r3, #0]
   10f1c:	3301      	adds	r3, #1
   10f1e:	b2da      	uxtb	r2, r3
   10f20:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f28:	701a      	strb	r2, [r3, #0]
   10f2a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f32:	781b      	ldrb	r3, [r3, #0]
   10f34:	2bff      	cmp	r3, #255	; 0xff
   10f36:	d105      	bne.n	10f44 <send_takeOff+0x2ec>
   10f38:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f40:	2200      	movs	r2, #0
   10f42:	701a      	strb	r2, [r3, #0]
   10f44:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f4c:	781b      	ldrb	r3, [r3, #0]
   10f4e:	461a      	mov	r2, r3
   10f50:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f58:	7819      	ldrb	r1, [r3, #0]
   10f5a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f62:	5499      	strb	r1, [r3, r2]
   10f64:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6c:	781b      	ldrb	r3, [r3, #0]
   10f6e:	3301      	adds	r3, #1
   10f70:	b2da      	uxtb	r2, r3
   10f72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f7a:	701a      	strb	r2, [r3, #0]
   10f7c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f84:	781b      	ldrb	r3, [r3, #0]
   10f86:	2bff      	cmp	r3, #255	; 0xff
   10f88:	d105      	bne.n	10f96 <send_takeOff+0x33e>
   10f8a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f92:	2200      	movs	r2, #0
   10f94:	701a      	strb	r2, [r3, #0]
   10f96:	f242 0339 	movw	r3, #8249	; 0x2039
   10f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f9e:	781b      	ldrb	r3, [r3, #0]
   10fa0:	b2db      	uxtb	r3, r3
   10fa2:	f003 0310 	and.w	r3, r3, #16
   10fa6:	2b00      	cmp	r3, #0
   10fa8:	d15a      	bne.n	11060 <send_takeOff+0x408>
   10faa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb2:	781b      	ldrb	r3, [r3, #0]
   10fb4:	b2db      	uxtb	r3, r3
   10fb6:	461a      	mov	r2, r3
   10fb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc0:	5c9a      	ldrb	r2, [r3, r2]
   10fc2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fca:	701a      	strb	r2, [r3, #0]
   10fcc:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd4:	2200      	movs	r2, #0
   10fd6:	701a      	strb	r2, [r3, #0]
   10fd8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe0:	781b      	ldrb	r3, [r3, #0]
   10fe2:	b2db      	uxtb	r3, r3
   10fe4:	3301      	adds	r3, #1
   10fe6:	b2da      	uxtb	r2, r3
   10fe8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff0:	701a      	strb	r2, [r3, #0]
   10ff2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ffa:	781b      	ldrb	r3, [r3, #0]
   10ffc:	b2db      	uxtb	r3, r3
   10ffe:	2bff      	cmp	r3, #255	; 0xff
   11000:	d105      	bne.n	1100e <send_takeOff+0x3b6>
   11002:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1100a:	2200      	movs	r2, #0
   1100c:	701a      	strb	r2, [r3, #0]
   1100e:	f242 0338 	movw	r3, #8248	; 0x2038
   11012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11016:	f242 0238 	movw	r2, #8248	; 0x2038
   1101a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1101e:	7812      	ldrb	r2, [r2, #0]
   11020:	b2d2      	uxtb	r2, r2
   11022:	f042 0201 	orr.w	r2, r2, #1
   11026:	b2d2      	uxtb	r2, r2
   11028:	701a      	strb	r2, [r3, #0]
   1102a:	f242 0339 	movw	r3, #8249	; 0x2039
   1102e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11032:	f242 0239 	movw	r2, #8249	; 0x2039
   11036:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1103a:	7812      	ldrb	r2, [r2, #0]
   1103c:	b2d2      	uxtb	r2, r2
   1103e:	f042 0210 	orr.w	r2, r2, #16
   11042:	b2d2      	uxtb	r2, r2
   11044:	701a      	strb	r2, [r3, #0]
   11046:	e00b      	b.n	11060 <send_takeOff+0x408>
   11048:	f24c 5348 	movw	r3, #50504	; 0xc548
   1104c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11050:	781b      	ldrb	r3, [r3, #0]
   11052:	3301      	adds	r3, #1
   11054:	b2da      	uxtb	r2, r3
   11056:	f24c 5348 	movw	r3, #50504	; 0xc548
   1105a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1105e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   11060:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11068:	2200      	movs	r2, #0
   1106a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   1106c:	bd80      	pop	{r7, pc}
   1106e:	bf00      	nop
   11070:	2004c52b 	.word	0x2004c52b
   11074:	f3af 8000 	nop.w

00011078 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11078:	b480      	push	{r7}
   1107a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   1107c:	f242 0317 	movw	r3, #8215	; 0x2017
   11080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11084:	f242 0217 	movw	r2, #8215	; 0x2017
   11088:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1108c:	7812      	ldrb	r2, [r2, #0]
   1108e:	b2d2      	uxtb	r2, r2
   11090:	f042 0210 	orr.w	r2, r2, #16
   11094:	b2d2      	uxtb	r2, r2
   11096:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11098:	f242 0331 	movw	r3, #8241	; 0x2031
   1109c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a0:	2201      	movs	r2, #1
   110a2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   110a4:	f242 0333 	movw	r3, #8243	; 0x2033
   110a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ac:	2219      	movs	r2, #25
   110ae:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   110b0:	f242 0311 	movw	r3, #8209	; 0x2011
   110b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b8:	f242 0211 	movw	r2, #8209	; 0x2011
   110bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110c0:	7812      	ldrb	r2, [r2, #0]
   110c2:	b2d2      	uxtb	r2, r2
   110c4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   110c8:	b2d2      	uxtb	r2, r2
   110ca:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110cc:	f242 0312 	movw	r3, #8210	; 0x2012
   110d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d4:	f242 0212 	movw	r2, #8210	; 0x2012
   110d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110dc:	7812      	ldrb	r2, [r2, #0]
   110de:	b2d2      	uxtb	r2, r2
   110e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110e4:	b2d2      	uxtb	r2, r2
   110e6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   110e8:	f242 0312 	movw	r3, #8210	; 0x2012
   110ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f0:	f242 0212 	movw	r2, #8210	; 0x2012
   110f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110f8:	7812      	ldrb	r2, [r2, #0]
   110fa:	b2d2      	uxtb	r2, r2
   110fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11100:	b2d2      	uxtb	r2, r2
   11102:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   11104:	f242 033a 	movw	r3, #8250	; 0x203a
   11108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110c:	f242 023a 	movw	r2, #8250	; 0x203a
   11110:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11114:	7812      	ldrb	r2, [r2, #0]
   11116:	b2d2      	uxtb	r2, r2
   11118:	f042 0202 	orr.w	r2, r2, #2
   1111c:	b2d2      	uxtb	r2, r2
   1111e:	701a      	strb	r2, [r3, #0]
}
   11120:	46bd      	mov	sp, r7
   11122:	f85d 7b04 	ldr.w	r7, [sp], #4
   11126:	4770      	bx	lr

00011128 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11128:	b480      	push	{r7}
   1112a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1112c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11134:	781b      	ldrb	r3, [r3, #0]
   11136:	2b00      	cmp	r3, #0
   11138:	d10e      	bne.n	11158 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1113a:	f242 0312 	movw	r3, #8210	; 0x2012
   1113e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11142:	f242 0212 	movw	r2, #8210	; 0x2012
   11146:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1114a:	7812      	ldrb	r2, [r2, #0]
   1114c:	b2d2      	uxtb	r2, r2
   1114e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11152:	b2d2      	uxtb	r2, r2
   11154:	701a      	strb	r2, [r3, #0]
   11156:	e047      	b.n	111e8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11158:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1115c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11160:	781b      	ldrb	r3, [r3, #0]
   11162:	2b08      	cmp	r3, #8
   11164:	d832      	bhi.n	111cc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11166:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1116a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116e:	781b      	ldrb	r3, [r3, #0]
   11170:	f003 0301 	and.w	r3, r3, #1
   11174:	2b00      	cmp	r3, #0
   11176:	d00e      	beq.n	11196 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11178:	f242 0312 	movw	r3, #8210	; 0x2012
   1117c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11180:	f242 0212 	movw	r2, #8210	; 0x2012
   11184:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11188:	7812      	ldrb	r2, [r2, #0]
   1118a:	b2d2      	uxtb	r2, r2
   1118c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11190:	b2d2      	uxtb	r2, r2
   11192:	701a      	strb	r2, [r3, #0]
   11194:	e00d      	b.n	111b2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11196:	f242 0312 	movw	r3, #8210	; 0x2012
   1119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1119e:	f242 0212 	movw	r2, #8210	; 0x2012
   111a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111a6:	7812      	ldrb	r2, [r2, #0]
   111a8:	b2d2      	uxtb	r2, r2
   111aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   111ae:	b2d2      	uxtb	r2, r2
   111b0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   111b2:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ba:	781b      	ldrb	r3, [r3, #0]
   111bc:	085b      	lsrs	r3, r3, #1
   111be:	b2da      	uxtb	r2, r3
   111c0:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c8:	701a      	strb	r2, [r3, #0]
   111ca:	e00d      	b.n	111e8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   111cc:	f242 0312 	movw	r3, #8210	; 0x2012
   111d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d4:	f242 0212 	movw	r2, #8210	; 0x2012
   111d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111dc:	7812      	ldrb	r2, [r2, #0]
   111de:	b2d2      	uxtb	r2, r2
   111e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111e4:	b2d2      	uxtb	r2, r2
   111e6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   111e8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	3301      	adds	r3, #1
   111f4:	b2da      	uxtb	r2, r3
   111f6:	f24c 634c 	movw	r3, #50764	; 0xc64c
   111fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111fe:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11200:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	2b09      	cmp	r3, #9
   1120c:	d94d      	bls.n	112aa <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1120e:	f24c 5349 	movw	r3, #50505	; 0xc549
   11212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11216:	781a      	ldrb	r2, [r3, #0]
   11218:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1121c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	b2db      	uxtb	r3, r3
   11224:	429a      	cmp	r2, r3
   11226:	d10e      	bne.n	11246 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11228:	f242 0339 	movw	r3, #8249	; 0x2039
   1122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11230:	f242 0239 	movw	r2, #8249	; 0x2039
   11234:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11238:	7812      	ldrb	r2, [r2, #0]
   1123a:	b2d2      	uxtb	r2, r2
   1123c:	f022 0210 	bic.w	r2, r2, #16
   11240:	b2d2      	uxtb	r2, r2
   11242:	701a      	strb	r2, [r3, #0]
   11244:	e031      	b.n	112aa <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11246:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1124a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	b2db      	uxtb	r3, r3
   11252:	461a      	mov	r2, r3
   11254:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11258:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1125c:	5c9a      	ldrb	r2, [r3, r2]
   1125e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11266:	701a      	strb	r2, [r3, #0]
   11268:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1126c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11270:	2200      	movs	r2, #0
   11272:	701a      	strb	r2, [r3, #0]
   11274:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1127c:	781b      	ldrb	r3, [r3, #0]
   1127e:	b2db      	uxtb	r3, r3
   11280:	3301      	adds	r3, #1
   11282:	b2da      	uxtb	r2, r3
   11284:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128c:	701a      	strb	r2, [r3, #0]
   1128e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11296:	781b      	ldrb	r3, [r3, #0]
   11298:	b2db      	uxtb	r3, r3
   1129a:	2bff      	cmp	r3, #255	; 0xff
   1129c:	d105      	bne.n	112aa <__vector_5+0x182>
   1129e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   112a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a6:	2200      	movs	r2, #0
   112a8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   112aa:	46bd      	mov	sp, r7
   112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop

000112b4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   112b4:	b480      	push	{r7}
   112b6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   112b8:	f24c 637f 	movw	r3, #50815	; 0xc67f
   112bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   112c2:	f240 533e 	movw	r3, #1342	; 0x53e
   112c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ca:	2200      	movs	r2, #0
   112cc:	701a      	strb	r2, [r3, #0]
}
   112ce:	46bd      	mov	sp, r7
   112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   112d4:	4770      	bx	lr
   112d6:	bf00      	nop

000112d8 <link_fbw_send>:

void link_fbw_send(void) {
   112d8:	b480      	push	{r7}
   112da:	b083      	sub	sp, #12
   112dc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   112de:	f24c 6384 	movw	r3, #50820	; 0xc684
   112e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e6:	781b      	ldrb	r3, [r3, #0]
   112e8:	b2db      	uxtb	r3, r3
   112ea:	2b00      	cmp	r3, #0
   112ec:	d00c      	beq.n	11308 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   112ee:	f24c 6385 	movw	r3, #50821	; 0xc685
   112f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f6:	781b      	ldrb	r3, [r3, #0]
   112f8:	3301      	adds	r3, #1
   112fa:	b2da      	uxtb	r2, r3
   112fc:	f24c 6385 	movw	r3, #50821	; 0xc685
   11300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11304:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   11306:	e064      	b.n	113d2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11308:	f242 030d 	movw	r3, #8205	; 0x200d
   1130c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11310:	2251      	movs	r2, #81	; 0x51
   11312:	701a      	strb	r2, [r3, #0]
   11314:	f242 030e 	movw	r3, #8206	; 0x200e
   11318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131c:	781b      	ldrb	r3, [r3, #0]
   1131e:	b2db      	uxtb	r3, r3
   11320:	b2db      	uxtb	r3, r3
   11322:	b25b      	sxtb	r3, r3
   11324:	2b00      	cmp	r3, #0
   11326:	da05      	bge.n	11334 <link_fbw_send+0x5c>
   11328:	f242 030f 	movw	r3, #8207	; 0x200f
   1132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11330:	781b      	ldrb	r3, [r3, #0]
   11332:	71fb      	strb	r3, [r7, #7]
   11334:	f242 030d 	movw	r3, #8205	; 0x200d
   11338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133c:	f242 020d 	movw	r2, #8205	; 0x200d
   11340:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11344:	7812      	ldrb	r2, [r2, #0]
   11346:	b2d2      	uxtb	r2, r2
   11348:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1134c:	b2d2      	uxtb	r2, r2
   1134e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11350:	f24c 6384 	movw	r3, #50820	; 0xc684
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	2201      	movs	r2, #1
   1135a:	701a      	strb	r2, [r3, #0]
   1135c:	f242 0318 	movw	r3, #8216	; 0x2018
   11360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11364:	f242 0218 	movw	r2, #8216	; 0x2018
   11368:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1136c:	7812      	ldrb	r2, [r2, #0]
   1136e:	b2d2      	uxtb	r2, r2
   11370:	f022 0201 	bic.w	r2, r2, #1
   11374:	b2d2      	uxtb	r2, r2
   11376:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11378:	f24c 6381 	movw	r3, #50817	; 0xc681
   1137c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11380:	2200      	movs	r2, #0
   11382:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11384:	f24c 6382 	movw	r3, #50818	; 0xc682
   11388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138c:	2200      	movs	r2, #0
   1138e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11390:	f24c 6381 	movw	r3, #50817	; 0xc681
   11394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11398:	781b      	ldrb	r3, [r3, #0]
   1139a:	461a      	mov	r2, r3
   1139c:	f24c 6368 	movw	r3, #50792	; 0xc668
   113a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a4:	4413      	add	r3, r2
   113a6:	781a      	ldrb	r2, [r3, #0]
   113a8:	f24c 6383 	movw	r3, #50819	; 0xc683
   113ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   113b2:	f242 030f 	movw	r3, #8207	; 0x200f
   113b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ba:	f24c 6283 	movw	r2, #50819	; 0xc683
   113be:	f2c2 0204 	movt	r2, #8196	; 0x2004
   113c2:	7812      	ldrb	r2, [r2, #0]
   113c4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   113c6:	f24c 637e 	movw	r3, #50814	; 0xc67e
   113ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ce:	2200      	movs	r2, #0
   113d0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   113d2:	370c      	adds	r7, #12
   113d4:	46bd      	mov	sp, r7
   113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   113da:	4770      	bx	lr

000113dc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   113dc:	b480      	push	{r7}
   113de:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   113e0:	f242 032a 	movw	r3, #8234	; 0x202a
   113e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e8:	f242 022c 	movw	r2, #8236	; 0x202c
   113ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113f0:	8812      	ldrh	r2, [r2, #0]
   113f2:	b292      	uxth	r2, r2
   113f4:	32c8      	adds	r2, #200	; 0xc8
   113f6:	b292      	uxth	r2, r2
   113f8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   113fa:	f242 0336 	movw	r3, #8246	; 0x2036
   113fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11402:	f242 0236 	movw	r2, #8246	; 0x2036
   11406:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1140a:	7812      	ldrb	r2, [r2, #0]
   1140c:	b2d2      	uxtb	r2, r2
   1140e:	f042 0210 	orr.w	r2, r2, #16
   11412:	b2d2      	uxtb	r2, r2
   11414:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11416:	f242 0337 	movw	r3, #8247	; 0x2037
   1141a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141e:	f242 0237 	movw	r2, #8247	; 0x2037
   11422:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11426:	7812      	ldrb	r2, [r2, #0]
   11428:	b2d2      	uxtb	r2, r2
   1142a:	f042 0210 	orr.w	r2, r2, #16
   1142e:	b2d2      	uxtb	r2, r2
   11430:	701a      	strb	r2, [r3, #0]
}
   11432:	46bd      	mov	sp, r7
   11434:	f85d 7b04 	ldr.w	r7, [sp], #4
   11438:	4770      	bx	lr
   1143a:	bf00      	nop

0001143c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1143c:	b480      	push	{r7}
   1143e:	b083      	sub	sp, #12
   11440:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11442:	f242 0337 	movw	r3, #8247	; 0x2037
   11446:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144a:	f242 0237 	movw	r2, #8247	; 0x2037
   1144e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11452:	7812      	ldrb	r2, [r2, #0]
   11454:	b2d2      	uxtb	r2, r2
   11456:	f022 0210 	bic.w	r2, r2, #16
   1145a:	b2d2      	uxtb	r2, r2
   1145c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1145e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11466:	781b      	ldrb	r3, [r3, #0]
   11468:	3301      	adds	r3, #1
   1146a:	b2da      	uxtb	r2, r3
   1146c:	f24c 6381 	movw	r3, #50817	; 0xc681
   11470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11474:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11476:	f24c 6381 	movw	r3, #50817	; 0xc681
   1147a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1147e:	781b      	ldrb	r3, [r3, #0]
   11480:	2b17      	cmp	r3, #23
   11482:	d162      	bne.n	1154a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11484:	f242 030f 	movw	r3, #8207	; 0x200f
   11488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148c:	781b      	ldrb	r3, [r3, #0]
   1148e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11490:	f24c 6382 	movw	r3, #50818	; 0xc682
   11494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11498:	781b      	ldrb	r3, [r3, #0]
   1149a:	79fa      	ldrb	r2, [r7, #7]
   1149c:	429a      	cmp	r2, r3
   1149e:	d110      	bne.n	114c2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   114a0:	f24c 637e 	movw	r3, #50814	; 0xc67e
   114a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114a8:	2201      	movs	r2, #1
   114aa:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   114ac:	f24c 6350 	movw	r3, #50768	; 0xc650
   114b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114b4:	7d1a      	ldrb	r2, [r3, #20]
   114b6:	f24c 6380 	movw	r3, #50816	; 0xc680
   114ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114be:	701a      	strb	r2, [r3, #0]
   114c0:	e00c      	b.n	114dc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   114c2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   114c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ca:	781b      	ldrb	r3, [r3, #0]
   114cc:	b2db      	uxtb	r3, r3
   114ce:	3301      	adds	r3, #1
   114d0:	b2da      	uxtb	r2, r3
   114d2:	f24c 637f 	movw	r3, #50815	; 0xc67f
   114d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114da:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   114dc:	f240 533e 	movw	r3, #1342	; 0x53e
   114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e4:	2201      	movs	r2, #1
   114e6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   114e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   114ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114f0:	2200      	movs	r2, #0
   114f2:	701a      	strb	r2, [r3, #0]
   114f4:	f242 0318 	movw	r3, #8216	; 0x2018
   114f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fc:	f242 0218 	movw	r2, #8216	; 0x2018
   11500:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11504:	7812      	ldrb	r2, [r2, #0]
   11506:	b2d2      	uxtb	r2, r2
   11508:	f042 0201 	orr.w	r2, r2, #1
   1150c:	b2d2      	uxtb	r2, r2
   1150e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11510:	f242 030d 	movw	r3, #8205	; 0x200d
   11514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11518:	f242 020d 	movw	r2, #8205	; 0x200d
   1151c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11520:	7812      	ldrb	r2, [r2, #0]
   11522:	b2d2      	uxtb	r2, r2
   11524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11528:	b2d2      	uxtb	r2, r2
   1152a:	701a      	strb	r2, [r3, #0]
   1152c:	f242 030d 	movw	r3, #8205	; 0x200d
   11530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11534:	f242 020d 	movw	r2, #8205	; 0x200d
   11538:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1153c:	7812      	ldrb	r2, [r2, #0]
   1153e:	b2d2      	uxtb	r2, r2
   11540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11544:	b2d2      	uxtb	r2, r2
   11546:	701a      	strb	r2, [r3, #0]
    return;
   11548:	e051      	b.n	115ee <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1154a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1154e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11552:	781b      	ldrb	r3, [r3, #0]
   11554:	2b15      	cmp	r3, #21
   11556:	d820      	bhi.n	1159a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11558:	f24c 6381 	movw	r3, #50817	; 0xc681
   1155c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11560:	781b      	ldrb	r3, [r3, #0]
   11562:	461a      	mov	r2, r3
   11564:	f24c 6368 	movw	r3, #50792	; 0xc668
   11568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1156c:	4413      	add	r3, r2
   1156e:	781b      	ldrb	r3, [r3, #0]
   11570:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11572:	f242 030f 	movw	r3, #8207	; 0x200f
   11576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157a:	79fa      	ldrb	r2, [r7, #7]
   1157c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1157e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11586:	781a      	ldrb	r2, [r3, #0]
   11588:	79fb      	ldrb	r3, [r7, #7]
   1158a:	4053      	eors	r3, r2
   1158c:	b2da      	uxtb	r2, r3
   1158e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11596:	701a      	strb	r2, [r3, #0]
   11598:	e009      	b.n	115ae <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1159a:	f242 030f 	movw	r3, #8207	; 0x200f
   1159e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a2:	f24c 6283 	movw	r2, #50819	; 0xc683
   115a6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   115aa:	7812      	ldrb	r2, [r2, #0]
   115ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   115ae:	f242 030f 	movw	r3, #8207	; 0x200f
   115b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b6:	781b      	ldrb	r3, [r3, #0]
   115b8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   115ba:	f24c 6381 	movw	r3, #50817	; 0xc681
   115be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c2:	781b      	ldrb	r3, [r3, #0]
   115c4:	1e5a      	subs	r2, r3, #1
   115c6:	f24c 6350 	movw	r3, #50768	; 0xc650
   115ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ce:	4413      	add	r3, r2
   115d0:	79fa      	ldrb	r2, [r7, #7]
   115d2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   115d4:	f24c 6382 	movw	r3, #50818	; 0xc682
   115d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115dc:	781a      	ldrb	r2, [r3, #0]
   115de:	79fb      	ldrb	r3, [r7, #7]
   115e0:	4053      	eors	r3, r2
   115e2:	b2da      	uxtb	r2, r3
   115e4:	f24c 6382 	movw	r3, #50818	; 0xc682
   115e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ec:	701a      	strb	r2, [r3, #0]
}
   115ee:	370c      	adds	r7, #12
   115f0:	46bd      	mov	sp, r7
   115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115f6:	4770      	bx	lr

000115f8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   115f8:	b480      	push	{r7}
   115fa:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   115fc:	f242 0317 	movw	r3, #8215	; 0x2017
   11600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11604:	f242 0217 	movw	r2, #8215	; 0x2017
   11608:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1160c:	7812      	ldrb	r2, [r2, #0]
   1160e:	b2d2      	uxtb	r2, r2
   11610:	f042 0206 	orr.w	r2, r2, #6
   11614:	b2d2      	uxtb	r2, r2
   11616:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11618:	f242 0317 	movw	r3, #8215	; 0x2017
   1161c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11620:	f242 0217 	movw	r2, #8215	; 0x2017
   11624:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11628:	7812      	ldrb	r2, [r2, #0]
   1162a:	b2d2      	uxtb	r2, r2
   1162c:	f042 0201 	orr.w	r2, r2, #1
   11630:	b2d2      	uxtb	r2, r2
   11632:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11634:	f24c 6384 	movw	r3, #50820	; 0xc684
   11638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1163c:	2200      	movs	r2, #0
   1163e:	701a      	strb	r2, [r3, #0]
   11640:	f242 0318 	movw	r3, #8216	; 0x2018
   11644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11648:	f242 0218 	movw	r2, #8216	; 0x2018
   1164c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11650:	7812      	ldrb	r2, [r2, #0]
   11652:	b2d2      	uxtb	r2, r2
   11654:	f042 0201 	orr.w	r2, r2, #1
   11658:	b2d2      	uxtb	r2, r2
   1165a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1165c:	f242 0302 	movw	r3, #8194	; 0x2002
   11660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11664:	f242 0202 	movw	r2, #8194	; 0x2002
   11668:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1166c:	7812      	ldrb	r2, [r2, #0]
   1166e:	b2d2      	uxtb	r2, r2
   11670:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11674:	b2d2      	uxtb	r2, r2
   11676:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11678:	f24c 6384 	movw	r3, #50820	; 0xc684
   1167c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11680:	2200      	movs	r2, #0
   11682:	701a      	strb	r2, [r3, #0]
   11684:	f242 0303 	movw	r3, #8195	; 0x2003
   11688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1168c:	f242 0203 	movw	r2, #8195	; 0x2003
   11690:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11694:	7812      	ldrb	r2, [r2, #0]
   11696:	b2d2      	uxtb	r2, r2
   11698:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1169c:	b2d2      	uxtb	r2, r2
   1169e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   116a0:	f24c 6384 	movw	r3, #50820	; 0xc684
   116a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116a8:	2200      	movs	r2, #0
   116aa:	701a      	strb	r2, [r3, #0]
}
   116ac:	46bd      	mov	sp, r7
   116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   116b2:	4770      	bx	lr

000116b4 <__vector_17>:


SIGNAL(SIG_SPI) {
   116b4:	b580      	push	{r7, lr}
   116b6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   116b8:	f24c 6384 	movw	r3, #50820	; 0xc684
   116bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116c0:	781b      	ldrb	r3, [r3, #0]
   116c2:	b2db      	uxtb	r3, r3
   116c4:	2b01      	cmp	r3, #1
   116c6:	d102      	bne.n	116ce <__vector_17+0x1a>
    link_fbw_on_spi_it();
   116c8:	f7ff fe88 	bl	113dc <link_fbw_on_spi_it>
   116cc:	e00b      	b.n	116e6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   116ce:	f24c 5328 	movw	r3, #50472	; 0xc528
   116d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d6:	781b      	ldrb	r3, [r3, #0]
   116d8:	3301      	adds	r3, #1
   116da:	b2da      	uxtb	r2, r3
   116dc:	f24c 5328 	movw	r3, #50472	; 0xc528
   116e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e4:	701a      	strb	r2, [r3, #0]
}
   116e6:	bd80      	pop	{r7, pc}

000116e8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   116e8:	b480      	push	{r7}
   116ea:	b083      	sub	sp, #12
   116ec:	af00      	add	r7, sp, #0
   116ee:	4603      	mov	r3, r0
   116f0:	6039      	str	r1, [r7, #0]
   116f2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   116f4:	79fa      	ldrb	r2, [r7, #7]
   116f6:	f24c 6398 	movw	r3, #50840	; 0xc698
   116fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116fe:	6839      	ldr	r1, [r7, #0]
   11700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11704:	370c      	adds	r7, #12
   11706:	46bd      	mov	sp, r7
   11708:	f85d 7b04 	ldr.w	r7, [sp], #4
   1170c:	4770      	bx	lr
   1170e:	bf00      	nop

00011710 <adc_init>:

void 
adc_init( void )
{
   11710:	b480      	push	{r7}
   11712:	b083      	sub	sp, #12
   11714:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11716:	f242 0362 	movw	r3, #8290	; 0x2062
   1171a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1171e:	2200      	movs	r2, #0
   11720:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11722:	f242 0361 	movw	r3, #8289	; 0x2061
   11726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1172a:	2200      	movs	r2, #0
   1172c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1172e:	f242 0307 	movw	r3, #8199	; 0x2007
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	2240      	movs	r2, #64	; 0x40
   11738:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1173a:	f242 0308 	movw	r3, #8200	; 0x2008
   1173e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11742:	f242 0208 	movw	r2, #8200	; 0x2008
   11746:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1174a:	7812      	ldrb	r2, [r2, #0]
   1174c:	b2d2      	uxtb	r2, r2
   1174e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11752:	b2d2      	uxtb	r2, r2
   11754:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11756:	f242 0306 	movw	r3, #8198	; 0x2006
   1175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1175e:	22cf      	movs	r2, #207	; 0xcf
   11760:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11762:	2300      	movs	r3, #0
   11764:	71fb      	strb	r3, [r7, #7]
   11766:	e00a      	b.n	1177e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11768:	79fa      	ldrb	r2, [r7, #7]
   1176a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1176e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11772:	2100      	movs	r1, #0
   11774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11778:	79fb      	ldrb	r3, [r7, #7]
   1177a:	3301      	adds	r3, #1
   1177c:	71fb      	strb	r3, [r7, #7]
   1177e:	79fb      	ldrb	r3, [r7, #7]
   11780:	2b07      	cmp	r3, #7
   11782:	d9f1      	bls.n	11768 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11784:	370c      	adds	r7, #12
   11786:	46bd      	mov	sp, r7
   11788:	f85d 7b04 	ldr.w	r7, [sp], #4
   1178c:	4770      	bx	lr
   1178e:	bf00      	nop

00011790 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11790:	b480      	push	{r7}
   11792:	b085      	sub	sp, #20
   11794:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11796:	f242 0307 	movw	r3, #8199	; 0x2007
   1179a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1179e:	781b      	ldrb	r3, [r3, #0]
   117a0:	b2db      	uxtb	r3, r3
   117a2:	f003 0307 	and.w	r3, r3, #7
   117a6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   117a8:	7bfa      	ldrb	r2, [r7, #15]
   117aa:	f24c 6398 	movw	r3, #50840	; 0xc698
   117ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   117b6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   117b8:	f242 0304 	movw	r3, #8196	; 0x2004
   117bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c0:	881b      	ldrh	r3, [r3, #0]
   117c2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   117c4:	7bfa      	ldrb	r2, [r7, #15]
   117c6:	f24c 6388 	movw	r3, #50824	; 0xc688
   117ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ce:	88f9      	ldrh	r1, [r7, #6]
   117d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   117d4:	68bb      	ldr	r3, [r7, #8]
   117d6:	2b00      	cmp	r3, #0
   117d8:	d025      	beq.n	11826 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   117da:	68bb      	ldr	r3, [r7, #8]
   117dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   117e0:	3301      	adds	r3, #1
   117e2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   117e4:	7bbb      	ldrb	r3, [r7, #14]
   117e6:	2b1f      	cmp	r3, #31
   117e8:	d901      	bls.n	117ee <__vector_21+0x5e>
   117ea:	2300      	movs	r3, #0
   117ec:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   117ee:	68bb      	ldr	r3, [r7, #8]
   117f0:	881a      	ldrh	r2, [r3, #0]
   117f2:	7bbb      	ldrb	r3, [r7, #14]
   117f4:	68b9      	ldr	r1, [r7, #8]
   117f6:	005b      	lsls	r3, r3, #1
   117f8:	440b      	add	r3, r1
   117fa:	885b      	ldrh	r3, [r3, #2]
   117fc:	1ad3      	subs	r3, r2, r3
   117fe:	b29a      	uxth	r2, r3
   11800:	68bb      	ldr	r3, [r7, #8]
   11802:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11804:	7bbb      	ldrb	r3, [r7, #14]
   11806:	68ba      	ldr	r2, [r7, #8]
   11808:	005b      	lsls	r3, r3, #1
   1180a:	4413      	add	r3, r2
   1180c:	88fa      	ldrh	r2, [r7, #6]
   1180e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11810:	68bb      	ldr	r3, [r7, #8]
   11812:	881a      	ldrh	r2, [r3, #0]
   11814:	88fb      	ldrh	r3, [r7, #6]
   11816:	4413      	add	r3, r2
   11818:	b29a      	uxth	r2, r3
   1181a:	68bb      	ldr	r3, [r7, #8]
   1181c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1181e:	68bb      	ldr	r3, [r7, #8]
   11820:	7bba      	ldrb	r2, [r7, #14]
   11822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11826:	7bfb      	ldrb	r3, [r7, #15]
   11828:	3301      	adds	r3, #1
   1182a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1182c:	7bfb      	ldrb	r3, [r7, #15]
   1182e:	2b07      	cmp	r3, #7
   11830:	d901      	bls.n	11836 <__vector_21+0xa6>
    adc_input = 0;
   11832:	2300      	movs	r3, #0
   11834:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11836:	f242 0307 	movw	r3, #8199	; 0x2007
   1183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183e:	7bfa      	ldrb	r2, [r7, #15]
   11840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11844:	b2d2      	uxtb	r2, r2
   11846:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11848:	f242 0306 	movw	r3, #8198	; 0x2006
   1184c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11850:	f242 0206 	movw	r2, #8198	; 0x2006
   11854:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11858:	7812      	ldrb	r2, [r2, #0]
   1185a:	b2d2      	uxtb	r2, r2
   1185c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11860:	b2d2      	uxtb	r2, r2
   11862:	701a      	strb	r2, [r3, #0]
  
}
   11864:	3714      	adds	r7, #20
   11866:	46bd      	mov	sp, r7
   11868:	f85d 7b04 	ldr.w	r7, [sp], #4
   1186c:	4770      	bx	lr
   1186e:	bf00      	nop

00011870 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11870:	b580      	push	{r7, lr}
   11872:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11874:	f003 fca8 	bl	151c8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11878:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1187c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11880:	2200      	movs	r2, #0
   11882:	701a      	strb	r2, [r3, #0]
}
   11884:	bd80      	pop	{r7, pc}
   11886:	bf00      	nop

00011888 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11888:	b580      	push	{r7, lr}
   1188a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1188c:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11894:	781b      	ldrb	r3, [r3, #0]
   11896:	2b01      	cmp	r3, #1
   11898:	f040 80f9 	bne.w	11a8e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1189c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	781b      	ldrb	r3, [r3, #0]
   118a6:	2b08      	cmp	r3, #8
   118a8:	d128      	bne.n	118fc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   118aa:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b2:	685a      	ldr	r2, [r3, #4]
   118b4:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   118b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118bc:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   118be:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c6:	689a      	ldr	r2, [r3, #8]
   118c8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   118cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   118d2:	4b73      	ldr	r3, [pc, #460]	; (11aa0 <parse_gps_msg+0x218>)
   118d4:	681b      	ldr	r3, [r3, #0]
   118d6:	4618      	mov	r0, r3
   118d8:	f006 fdca 	bl	18470 <__aeabi_i2f>
   118dc:	4603      	mov	r3, r0
   118de:	4618      	mov	r0, r3
   118e0:	f04f 0100 	mov.w	r1, #0
   118e4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   118e8:	f006 feca 	bl	18680 <__aeabi_fdiv>
   118ec:	4603      	mov	r3, r0
   118ee:	461a      	mov	r2, r3
   118f0:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   118f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f8:	601a      	str	r2, [r3, #0]
   118fa:	e0c8      	b.n	11a8e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   118fc:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11904:	781b      	ldrb	r3, [r3, #0]
   11906:	2b03      	cmp	r3, #3
   11908:	d10a      	bne.n	11920 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1190a:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1190e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11912:	791a      	ldrb	r2, [r3, #4]
   11914:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   11918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1191c:	701a      	strb	r2, [r3, #0]
   1191e:	e0b6      	b.n	11a8e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11920:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11928:	781b      	ldrb	r3, [r3, #0]
   1192a:	2b12      	cmp	r3, #18
   1192c:	f040 80af 	bne.w	11a8e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11930:	4b5c      	ldr	r3, [pc, #368]	; (11aa4 <parse_gps_msg+0x21c>)
   11932:	681b      	ldr	r3, [r3, #0]
   11934:	4618      	mov	r0, r3
   11936:	f006 fd97 	bl	18468 <__aeabi_ui2f>
   1193a:	4603      	mov	r3, r0
   1193c:	4618      	mov	r0, r3
   1193e:	f04f 0100 	mov.w	r1, #0
   11942:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11946:	f006 fe9b 	bl	18680 <__aeabi_fdiv>
   1194a:	4603      	mov	r3, r0
   1194c:	461a      	mov	r2, r3
   1194e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   11952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11956:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11958:	4b51      	ldr	r3, [pc, #324]	; (11aa0 <parse_gps_msg+0x218>)
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	4618      	mov	r0, r3
   1195e:	f006 fd87 	bl	18470 <__aeabi_i2f>
   11962:	4603      	mov	r3, r0
   11964:	4618      	mov	r0, r3
   11966:	f04f 0100 	mov.w	r1, #0
   1196a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1196e:	f006 fe87 	bl	18680 <__aeabi_fdiv>
   11972:	4603      	mov	r3, r0
   11974:	461a      	mov	r2, r3
   11976:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1197a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1197e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11980:	4b49      	ldr	r3, [pc, #292]	; (11aa8 <parse_gps_msg+0x220>)
   11982:	681b      	ldr	r3, [r3, #0]
   11984:	4618      	mov	r0, r3
   11986:	f006 fd73 	bl	18470 <__aeabi_i2f>
   1198a:	4603      	mov	r3, r0
   1198c:	4618      	mov	r0, r3
   1198e:	f006 f92f 	bl	17bf0 <__aeabi_f2d>
   11992:	4602      	mov	r2, r0
   11994:	460b      	mov	r3, r1
   11996:	4610      	mov	r0, r2
   11998:	4619      	mov	r1, r3
   1199a:	a33d      	add	r3, pc, #244	; (adr r3, 11a90 <parse_gps_msg+0x208>)
   1199c:	e9d3 2300 	ldrd	r2, r3, [r3]
   119a0:	f006 faa4 	bl	17eec <__aeabi_ddiv>
   119a4:	4602      	mov	r2, r0
   119a6:	460b      	mov	r3, r1
   119a8:	4610      	mov	r0, r2
   119aa:	4619      	mov	r1, r3
   119ac:	f04f 0200 	mov.w	r2, #0
   119b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   119b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   119b8:	f006 fa98 	bl	17eec <__aeabi_ddiv>
   119bc:	4602      	mov	r2, r0
   119be:	460b      	mov	r3, r1
   119c0:	4610      	mov	r0, r2
   119c2:	4619      	mov	r1, r3
   119c4:	a334      	add	r3, pc, #208	; (adr r3, 11a98 <parse_gps_msg+0x210>)
   119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   119ca:	f006 f965 	bl	17c98 <__aeabi_dmul>
   119ce:	4602      	mov	r2, r0
   119d0:	460b      	mov	r3, r1
   119d2:	4610      	mov	r0, r2
   119d4:	4619      	mov	r1, r3
   119d6:	f006 fc41 	bl	1825c <__aeabi_d2f>
   119da:	4602      	mov	r2, r0
   119dc:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   119e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   119e6:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   119ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ee:	681b      	ldr	r3, [r3, #0]
   119f0:	4618      	mov	r0, r3
   119f2:	f006 fd39 	bl	18468 <__aeabi_ui2f>
   119f6:	4603      	mov	r3, r0
   119f8:	4618      	mov	r0, r3
   119fa:	f04f 0100 	mov.w	r1, #0
   119fe:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11a02:	f006 fe3d 	bl	18680 <__aeabi_fdiv>
   11a06:	4603      	mov	r3, r0
   11a08:	461a      	mov	r2, r3
   11a0a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   11a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a12:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11a14:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1c:	681a      	ldr	r2, [r3, #0]
   11a1e:	f248 531f 	movw	r3, #34079	; 0x851f
   11a22:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a26:	fb83 1302 	smull	r1, r3, r3, r2
   11a2a:	1159      	asrs	r1, r3, #5
   11a2c:	17d3      	asrs	r3, r2, #31
   11a2e:	1acb      	subs	r3, r1, r3
   11a30:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11a34:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11a38:	4618      	mov	r0, r3
   11a3a:	f006 fd19 	bl	18470 <__aeabi_i2f>
   11a3e:	4602      	mov	r2, r0
   11a40:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   11a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a48:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11a4a:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a52:	681a      	ldr	r2, [r3, #0]
   11a54:	f248 531f 	movw	r3, #34079	; 0x851f
   11a58:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a5c:	fb83 1302 	smull	r1, r3, r3, r2
   11a60:	1159      	asrs	r1, r3, #5
   11a62:	17d3      	asrs	r3, r2, #31
   11a64:	1aca      	subs	r2, r1, r3
   11a66:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11a6a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11a6e:	4413      	add	r3, r2
   11a70:	4618      	mov	r0, r3
   11a72:	f006 fcfd 	bl	18470 <__aeabi_i2f>
   11a76:	4602      	mov	r2, r0
   11a78:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   11a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a80:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11a82:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8a:	2201      	movs	r2, #1
   11a8c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11a8e:	bd80      	pop	{r7, pc}
   11a90:	00000000 	.word	0x00000000
   11a94:	40f86a00 	.word	0x40f86a00
   11a98:	5a7ed197 	.word	0x5a7ed197
   11a9c:	400921fb 	.word	0x400921fb
   11aa0:	2004c6ec 	.word	0x2004c6ec
   11aa4:	2004c6f4 	.word	0x2004c6f4
   11aa8:	2004c6f8 	.word	0x2004c6f8

00011aac <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11aac:	b480      	push	{r7}
   11aae:	b083      	sub	sp, #12
   11ab0:	af00      	add	r7, sp, #0
   11ab2:	4603      	mov	r3, r0
   11ab4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11ab6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11abe:	781b      	ldrb	r3, [r3, #0]
   11ac0:	2b06      	cmp	r3, #6
   11ac2:	d81d      	bhi.n	11b00 <parse_ubx+0x54>
    ck_a += c;
   11ac4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11acc:	781a      	ldrb	r2, [r3, #0]
   11ace:	79fb      	ldrb	r3, [r7, #7]
   11ad0:	4413      	add	r3, r2
   11ad2:	b2da      	uxtb	r2, r3
   11ad4:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11adc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11ade:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae6:	781a      	ldrb	r2, [r3, #0]
   11ae8:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af0:	781b      	ldrb	r3, [r3, #0]
   11af2:	4413      	add	r3, r2
   11af4:	b2da      	uxtb	r2, r3
   11af6:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afe:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11b00:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	2b00      	cmp	r3, #0
   11b0c:	d110      	bne.n	11b30 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11b0e:	79fb      	ldrb	r3, [r7, #7]
   11b10:	2bb5      	cmp	r3, #181	; 0xb5
   11b12:	f040 8135 	bne.w	11d80 <parse_ubx+0x2d4>
      ubx_status++;
   11b16:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	3301      	adds	r3, #1
   11b22:	b2da      	uxtb	r2, r3
   11b24:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11b2e:	e12f      	b.n	11d90 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11b30:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b38:	781b      	ldrb	r3, [r3, #0]
   11b3a:	2b01      	cmp	r3, #1
   11b3c:	d11c      	bne.n	11b78 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11b3e:	79fb      	ldrb	r3, [r7, #7]
   11b40:	2b62      	cmp	r3, #98	; 0x62
   11b42:	d000      	beq.n	11b46 <parse_ubx+0x9a>
      goto error;
   11b44:	e11d      	b.n	11d82 <parse_ubx+0x2d6>
    ck_a = 0;
   11b46:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4e:	2200      	movs	r2, #0
   11b50:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11b52:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5a:	2200      	movs	r2, #0
   11b5c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b5e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b66:	781b      	ldrb	r3, [r3, #0]
   11b68:	3301      	adds	r3, #1
   11b6a:	b2da      	uxtb	r2, r3
   11b6c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b74:	701a      	strb	r2, [r3, #0]
   11b76:	e103      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11b78:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b80:	781b      	ldrb	r3, [r3, #0]
   11b82:	2b02      	cmp	r3, #2
   11b84:	d127      	bne.n	11bd6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11b86:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	b2db      	uxtb	r3, r3
   11b92:	2b00      	cmp	r3, #0
   11b94:	d00c      	beq.n	11bb0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11b96:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	781b      	ldrb	r3, [r3, #0]
   11ba0:	3301      	adds	r3, #1
   11ba2:	b2da      	uxtb	r2, r3
   11ba4:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bac:	701a      	strb	r2, [r3, #0]
      goto error;
   11bae:	e0e8      	b.n	11d82 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11bb0:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb8:	79fa      	ldrb	r2, [r7, #7]
   11bba:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bbc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc4:	781b      	ldrb	r3, [r3, #0]
   11bc6:	3301      	adds	r3, #1
   11bc8:	b2da      	uxtb	r2, r3
   11bca:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd2:	701a      	strb	r2, [r3, #0]
   11bd4:	e0d4      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11bd6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bde:	781b      	ldrb	r3, [r3, #0]
   11be0:	2b03      	cmp	r3, #3
   11be2:	d112      	bne.n	11c0a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11be4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bec:	79fa      	ldrb	r2, [r7, #7]
   11bee:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bf0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf8:	781b      	ldrb	r3, [r3, #0]
   11bfa:	3301      	adds	r3, #1
   11bfc:	b2da      	uxtb	r2, r3
   11bfe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c06:	701a      	strb	r2, [r3, #0]
   11c08:	e0ba      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11c0a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c12:	781b      	ldrb	r3, [r3, #0]
   11c14:	2b04      	cmp	r3, #4
   11c16:	d113      	bne.n	11c40 <parse_ubx+0x194>
  {
    ubx_len = c;
   11c18:	79fb      	ldrb	r3, [r7, #7]
   11c1a:	b29a      	uxth	r2, r3
   11c1c:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c24:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11c26:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2e:	781b      	ldrb	r3, [r3, #0]
   11c30:	3301      	adds	r3, #1
   11c32:	b2da      	uxtb	r2, r3
   11c34:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3c:	701a      	strb	r2, [r3, #0]
   11c3e:	e09f      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11c40:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c48:	781b      	ldrb	r3, [r3, #0]
   11c4a:	2b05      	cmp	r3, #5
   11c4c:	d12b      	bne.n	11ca6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11c4e:	79fb      	ldrb	r3, [r7, #7]
   11c50:	021b      	lsls	r3, r3, #8
   11c52:	b29a      	uxth	r2, r3
   11c54:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5c:	881b      	ldrh	r3, [r3, #0]
   11c5e:	b29b      	uxth	r3, r3
   11c60:	4313      	orrs	r3, r2
   11c62:	b29b      	uxth	r3, r3
   11c64:	b29a      	uxth	r2, r3
   11c66:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11c70:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c78:	881b      	ldrh	r3, [r3, #0]
   11c7a:	2bff      	cmp	r3, #255	; 0xff
   11c7c:	d900      	bls.n	11c80 <parse_ubx+0x1d4>
      goto error;
   11c7e:	e080      	b.n	11d82 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11c80:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c88:	2200      	movs	r2, #0
   11c8a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c8c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c94:	781b      	ldrb	r3, [r3, #0]
   11c96:	3301      	adds	r3, #1
   11c98:	b2da      	uxtb	r2, r3
   11c9a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca2:	701a      	strb	r2, [r3, #0]
   11ca4:	e06c      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11ca6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cae:	781b      	ldrb	r3, [r3, #0]
   11cb0:	2b06      	cmp	r3, #6
   11cb2:	d131      	bne.n	11d18 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11cb4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cbc:	781b      	ldrb	r3, [r3, #0]
   11cbe:	461a      	mov	r2, r3
   11cc0:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc8:	79f9      	ldrb	r1, [r7, #7]
   11cca:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11ccc:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd4:	781b      	ldrb	r3, [r3, #0]
   11cd6:	3301      	adds	r3, #1
   11cd8:	b2da      	uxtb	r2, r3
   11cda:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11ce4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cec:	781b      	ldrb	r3, [r3, #0]
   11cee:	461a      	mov	r2, r3
   11cf0:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf8:	881b      	ldrh	r3, [r3, #0]
   11cfa:	429a      	cmp	r2, r3
   11cfc:	d340      	bcc.n	11d80 <parse_ubx+0x2d4>
      ubx_status++;
   11cfe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d06:	781b      	ldrb	r3, [r3, #0]
   11d08:	3301      	adds	r3, #1
   11d0a:	b2da      	uxtb	r2, r3
   11d0c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d14:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11d16:	e03b      	b.n	11d90 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11d18:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d20:	781b      	ldrb	r3, [r3, #0]
   11d22:	2b07      	cmp	r3, #7
   11d24:	d115      	bne.n	11d52 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11d26:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d2e:	781b      	ldrb	r3, [r3, #0]
   11d30:	79fa      	ldrb	r2, [r7, #7]
   11d32:	429a      	cmp	r2, r3
   11d34:	d000      	beq.n	11d38 <parse_ubx+0x28c>
      goto error;
   11d36:	e024      	b.n	11d82 <parse_ubx+0x2d6>
    ubx_status++;
   11d38:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d40:	781b      	ldrb	r3, [r3, #0]
   11d42:	3301      	adds	r3, #1
   11d44:	b2da      	uxtb	r2, r3
   11d46:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4e:	701a      	strb	r2, [r3, #0]
   11d50:	e016      	b.n	11d80 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11d52:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5a:	781b      	ldrb	r3, [r3, #0]
   11d5c:	2b08      	cmp	r3, #8
   11d5e:	d10f      	bne.n	11d80 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11d60:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d68:	781b      	ldrb	r3, [r3, #0]
   11d6a:	79fa      	ldrb	r2, [r7, #7]
   11d6c:	429a      	cmp	r2, r3
   11d6e:	d000      	beq.n	11d72 <parse_ubx+0x2c6>
      goto error;
   11d70:	e007      	b.n	11d82 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11d72:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d7a:	2201      	movs	r2, #1
   11d7c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11d7e:	e000      	b.n	11d82 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11d80:	e006      	b.n	11d90 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11d82:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d8a:	2200      	movs	r2, #0
   11d8c:	701a      	strb	r2, [r3, #0]
  return;
   11d8e:	bf00      	nop
}
   11d90:	370c      	adds	r7, #12
   11d92:	46bd      	mov	sp, r7
   11d94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d98:	4770      	bx	lr
   11d9a:	bf00      	nop

00011d9c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11d9c:	b580      	push	{r7, lr}
   11d9e:	b082      	sub	sp, #8
   11da0:	af00      	add	r7, sp, #0
   11da2:	f242 039c 	movw	r3, #8348	; 0x209c
   11da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11daa:	781b      	ldrb	r3, [r3, #0]
   11dac:	71fb      	strb	r3, [r7, #7]
   11dae:	79fb      	ldrb	r3, [r7, #7]
   11db0:	4618      	mov	r0, r3
   11db2:	f7ff fe7b 	bl	11aac <parse_ubx>
   11db6:	3708      	adds	r7, #8
   11db8:	46bd      	mov	sp, r7
   11dba:	bd80      	pop	{r7, pc}
   11dbc:	f3af 8000 	nop.w

00011dc0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11dc0:	b580      	push	{r7, lr}
   11dc2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11dc4:	f240 5348 	movw	r3, #1352	; 0x548
   11dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dcc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11dd0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11dd4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11dd6:	2001      	movs	r0, #1
   11dd8:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11ddc:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11de0:	f7ff fc82 	bl	116e8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11de4:	2002      	movs	r0, #2
   11de6:	f64c 0130 	movw	r1, #51248	; 0xc830
   11dea:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11dee:	f7ff fc7b 	bl	116e8 <adc_buf_channel>
}
   11df2:	bd80      	pop	{r7, pc}

00011df4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11df4:	b480      	push	{r7}
   11df6:	b083      	sub	sp, #12
   11df8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11dfa:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e02:	881b      	ldrh	r3, [r3, #0]
   11e04:	095b      	lsrs	r3, r3, #5
   11e06:	b29b      	uxth	r3, r3
   11e08:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11e0a:	f64c 0330 	movw	r3, #51248	; 0xc830
   11e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e12:	881b      	ldrh	r3, [r3, #0]
   11e14:	095b      	lsrs	r3, r3, #5
   11e16:	b29b      	uxth	r3, r3
   11e18:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11e1a:	88fb      	ldrh	r3, [r7, #6]
   11e1c:	425b      	negs	r3, r3
   11e1e:	b29a      	uxth	r2, r3
   11e20:	88bb      	ldrh	r3, [r7, #4]
   11e22:	1ad3      	subs	r3, r2, r3
   11e24:	b29a      	uxth	r2, r3
   11e26:	f240 5342 	movw	r3, #1346	; 0x542
   11e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2e:	881b      	ldrh	r3, [r3, #0]
   11e30:	b29b      	uxth	r3, r3
   11e32:	1ad3      	subs	r3, r2, r3
   11e34:	b29b      	uxth	r3, r3
   11e36:	b29a      	uxth	r2, r3
   11e38:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e40:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11e42:	88ba      	ldrh	r2, [r7, #4]
   11e44:	88fb      	ldrh	r3, [r7, #6]
   11e46:	1ad3      	subs	r3, r2, r3
   11e48:	b29a      	uxth	r2, r3
   11e4a:	f240 5344 	movw	r3, #1348	; 0x544
   11e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e52:	881b      	ldrh	r3, [r3, #0]
   11e54:	b29b      	uxth	r3, r3
   11e56:	1ad3      	subs	r3, r2, r3
   11e58:	b29b      	uxth	r3, r3
   11e5a:	b29a      	uxth	r2, r3
   11e5c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e64:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11e66:	370c      	adds	r7, #12
   11e68:	46bd      	mov	sp, r7
   11e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e6e:	4770      	bx	lr

00011e70 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11e70:	b580      	push	{r7, lr}
   11e72:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11e74:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e7c:	881b      	ldrh	r3, [r3, #0]
   11e7e:	b29b      	uxth	r3, r3
   11e80:	425b      	negs	r3, r3
   11e82:	b29b      	uxth	r3, r3
   11e84:	b29a      	uxth	r2, r3
   11e86:	f240 5340 	movw	r3, #1344	; 0x540
   11e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11e90:	f240 5340 	movw	r3, #1344	; 0x540
   11e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e98:	881b      	ldrh	r3, [r3, #0]
   11e9a:	b21b      	sxth	r3, r3
   11e9c:	4618      	mov	r0, r3
   11e9e:	f005 fe95 	bl	17bcc <__aeabi_i2d>
   11ea2:	4602      	mov	r2, r0
   11ea4:	460b      	mov	r3, r1
   11ea6:	f04f 0000 	mov.w	r0, #0
   11eaa:	f04f 0100 	mov.w	r1, #0
   11eae:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11eb2:	f006 f81b 	bl	17eec <__aeabi_ddiv>
   11eb6:	4602      	mov	r2, r0
   11eb8:	460b      	mov	r3, r1
   11eba:	4610      	mov	r0, r2
   11ebc:	4619      	mov	r1, r3
   11ebe:	f006 f9cd 	bl	1825c <__aeabi_d2f>
   11ec2:	4602      	mov	r2, r0
   11ec4:	f240 5348 	movw	r3, #1352	; 0x548
   11ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ecc:	601a      	str	r2, [r3, #0]
}
   11ece:	bd80      	pop	{r7, pc}

00011ed0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11ed0:	b590      	push	{r4, r7, lr}
   11ed2:	b083      	sub	sp, #12
   11ed4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11ed6:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ede:	681a      	ldr	r2, [r3, #0]
   11ee0:	f64c 0374 	movw	r3, #51316	; 0xc874
   11ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ee8:	681b      	ldr	r3, [r3, #0]
   11eea:	4610      	mov	r0, r2
   11eec:	4619      	mov	r1, r3
   11eee:	f006 fa09 	bl	18304 <__aeabi_fsub>
   11ef2:	4603      	mov	r3, r0
   11ef4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11ef6:	f240 534c 	movw	r3, #1356	; 0x54c
   11efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efe:	681b      	ldr	r3, [r3, #0]
   11f00:	4618      	mov	r0, r3
   11f02:	6879      	ldr	r1, [r7, #4]
   11f04:	f006 fb08 	bl	18518 <__aeabi_fmul>
   11f08:	4603      	mov	r3, r0
   11f0a:	4618      	mov	r0, r3
   11f0c:	f04f 0100 	mov.w	r1, #0
   11f10:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f14:	f006 fc9e 	bl	18854 <__aeabi_fcmplt>
   11f18:	4603      	mov	r3, r0
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d002      	beq.n	11f24 <roll_pitch_pid_run+0x54>
   11f1e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f22:	e026      	b.n	11f72 <roll_pitch_pid_run+0xa2>
   11f24:	f240 534c 	movw	r3, #1356	; 0x54c
   11f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f2c:	681b      	ldr	r3, [r3, #0]
   11f2e:	4618      	mov	r0, r3
   11f30:	6879      	ldr	r1, [r7, #4]
   11f32:	f006 faf1 	bl	18518 <__aeabi_fmul>
   11f36:	4603      	mov	r3, r0
   11f38:	4618      	mov	r0, r3
   11f3a:	f04f 0100 	mov.w	r1, #0
   11f3e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f42:	f006 fca5 	bl	18890 <__aeabi_fcmpgt>
   11f46:	4603      	mov	r3, r0
   11f48:	2b00      	cmp	r3, #0
   11f4a:	d002      	beq.n	11f52 <roll_pitch_pid_run+0x82>
   11f4c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f50:	e00e      	b.n	11f70 <roll_pitch_pid_run+0xa0>
   11f52:	f240 534c 	movw	r3, #1356	; 0x54c
   11f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5a:	681b      	ldr	r3, [r3, #0]
   11f5c:	4618      	mov	r0, r3
   11f5e:	6879      	ldr	r1, [r7, #4]
   11f60:	f006 fada 	bl	18518 <__aeabi_fmul>
   11f64:	4603      	mov	r3, r0
   11f66:	4618      	mov	r0, r3
   11f68:	f006 fc9c 	bl	188a4 <__aeabi_f2iz>
   11f6c:	4603      	mov	r3, r0
   11f6e:	b29b      	uxth	r3, r3
   11f70:	b29a      	uxth	r2, r3
   11f72:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f7a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11f7c:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	4618      	mov	r0, r3
   11f88:	f04f 0100 	mov.w	r1, #0
   11f8c:	f006 fc62 	bl	18854 <__aeabi_fcmplt>
   11f90:	4603      	mov	r3, r0
   11f92:	2b00      	cmp	r3, #0
   11f94:	d006      	beq.n	11fa4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11f96:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f9e:	f04f 0200 	mov.w	r2, #0
   11fa2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11fa4:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fac:	681a      	ldr	r2, [r3, #0]
   11fae:	f64c 0378 	movw	r3, #51320	; 0xc878
   11fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fb6:	681b      	ldr	r3, [r3, #0]
   11fb8:	4610      	mov	r0, r2
   11fba:	4619      	mov	r1, r3
   11fbc:	f006 f9a2 	bl	18304 <__aeabi_fsub>
   11fc0:	4603      	mov	r3, r0
   11fc2:	461c      	mov	r4, r3
   11fc4:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fcc:	681b      	ldr	r3, [r3, #0]
   11fce:	4618      	mov	r0, r3
   11fd0:	f04f 0100 	mov.w	r1, #0
   11fd4:	f006 fc3e 	bl	18854 <__aeabi_fcmplt>
   11fd8:	4603      	mov	r3, r0
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d007      	beq.n	11fee <roll_pitch_pid_run+0x11e>
   11fde:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fe6:	681b      	ldr	r3, [r3, #0]
   11fe8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fec:	e004      	b.n	11ff8 <roll_pitch_pid_run+0x128>
   11fee:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff6:	681a      	ldr	r2, [r3, #0]
   11ff8:	f64c 0384 	movw	r3, #51332	; 0xc884
   11ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12000:	681b      	ldr	r3, [r3, #0]
   12002:	4610      	mov	r0, r2
   12004:	4619      	mov	r1, r3
   12006:	f006 fa87 	bl	18518 <__aeabi_fmul>
   1200a:	4603      	mov	r3, r0
   1200c:	4620      	mov	r0, r4
   1200e:	4619      	mov	r1, r3
   12010:	f006 f978 	bl	18304 <__aeabi_fsub>
   12014:	4603      	mov	r3, r0
   12016:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1201a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   1201c:	f240 5350 	movw	r3, #1360	; 0x550
   12020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12024:	681b      	ldr	r3, [r3, #0]
   12026:	4618      	mov	r0, r3
   12028:	6879      	ldr	r1, [r7, #4]
   1202a:	f006 fa75 	bl	18518 <__aeabi_fmul>
   1202e:	4603      	mov	r3, r0
   12030:	4618      	mov	r0, r3
   12032:	f04f 0100 	mov.w	r1, #0
   12036:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1203a:	f006 fc0b 	bl	18854 <__aeabi_fcmplt>
   1203e:	4603      	mov	r3, r0
   12040:	2b00      	cmp	r3, #0
   12042:	d002      	beq.n	1204a <roll_pitch_pid_run+0x17a>
   12044:	f64d 2280 	movw	r2, #55936	; 0xda80
   12048:	e026      	b.n	12098 <roll_pitch_pid_run+0x1c8>
   1204a:	f240 5350 	movw	r3, #1360	; 0x550
   1204e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12052:	681b      	ldr	r3, [r3, #0]
   12054:	4618      	mov	r0, r3
   12056:	6879      	ldr	r1, [r7, #4]
   12058:	f006 fa5e 	bl	18518 <__aeabi_fmul>
   1205c:	4603      	mov	r3, r0
   1205e:	4618      	mov	r0, r3
   12060:	f04f 0100 	mov.w	r1, #0
   12064:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12068:	f006 fc12 	bl	18890 <__aeabi_fcmpgt>
   1206c:	4603      	mov	r3, r0
   1206e:	2b00      	cmp	r3, #0
   12070:	d002      	beq.n	12078 <roll_pitch_pid_run+0x1a8>
   12072:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12076:	e00e      	b.n	12096 <roll_pitch_pid_run+0x1c6>
   12078:	f240 5350 	movw	r3, #1360	; 0x550
   1207c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12080:	681b      	ldr	r3, [r3, #0]
   12082:	4618      	mov	r0, r3
   12084:	6879      	ldr	r1, [r7, #4]
   12086:	f006 fa47 	bl	18518 <__aeabi_fmul>
   1208a:	4603      	mov	r3, r0
   1208c:	4618      	mov	r0, r3
   1208e:	f006 fc09 	bl	188a4 <__aeabi_f2iz>
   12092:	4603      	mov	r3, r0
   12094:	b29b      	uxth	r3, r3
   12096:	b29a      	uxth	r2, r3
   12098:	f64c 0380 	movw	r3, #51328	; 0xc880
   1209c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120a0:	801a      	strh	r2, [r3, #0]
}
   120a2:	370c      	adds	r7, #12
   120a4:	46bd      	mov	sp, r7
   120a6:	bd90      	pop	{r4, r7, pc}

000120a8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   120a8:	b580      	push	{r7, lr}
   120aa:	b082      	sub	sp, #8
   120ac:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   120ae:	f64c 3338 	movw	r3, #52024	; 0xcb38
   120b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b6:	681a      	ldr	r2, [r3, #0]
   120b8:	f64c 038c 	movw	r3, #51340	; 0xc88c
   120bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120c0:	681b      	ldr	r3, [r3, #0]
   120c2:	4610      	mov	r0, r2
   120c4:	4619      	mov	r1, r3
   120c6:	f006 f91d 	bl	18304 <__aeabi_fsub>
   120ca:	4603      	mov	r3, r0
   120cc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   120ce:	e013      	b.n	120f8 <course_pid_run+0x50>
   120d0:	6878      	ldr	r0, [r7, #4]
   120d2:	f005 fd8d 	bl	17bf0 <__aeabi_f2d>
   120d6:	4602      	mov	r2, r0
   120d8:	460b      	mov	r3, r1
   120da:	4610      	mov	r0, r2
   120dc:	4619      	mov	r1, r3
   120de:	a348      	add	r3, pc, #288	; (adr r3, 12200 <course_pid_run+0x158>)
   120e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120e4:	f005 fc24 	bl	17930 <__aeabi_dsub>
   120e8:	4602      	mov	r2, r0
   120ea:	460b      	mov	r3, r1
   120ec:	4610      	mov	r0, r2
   120ee:	4619      	mov	r1, r3
   120f0:	f006 f8b4 	bl	1825c <__aeabi_d2f>
   120f4:	4603      	mov	r3, r0
   120f6:	607b      	str	r3, [r7, #4]
   120f8:	6878      	ldr	r0, [r7, #4]
   120fa:	f005 fd79 	bl	17bf0 <__aeabi_f2d>
   120fe:	4602      	mov	r2, r0
   12100:	460b      	mov	r3, r1
   12102:	4610      	mov	r0, r2
   12104:	4619      	mov	r1, r3
   12106:	a340      	add	r3, pc, #256	; (adr r3, 12208 <course_pid_run+0x160>)
   12108:	e9d3 2300 	ldrd	r2, r3, [r3]
   1210c:	f006 f854 	bl	181b8 <__aeabi_dcmpgt>
   12110:	4603      	mov	r3, r0
   12112:	2b00      	cmp	r3, #0
   12114:	d1dc      	bne.n	120d0 <course_pid_run+0x28>
   12116:	e013      	b.n	12140 <course_pid_run+0x98>
   12118:	6878      	ldr	r0, [r7, #4]
   1211a:	f005 fd69 	bl	17bf0 <__aeabi_f2d>
   1211e:	4602      	mov	r2, r0
   12120:	460b      	mov	r3, r1
   12122:	4610      	mov	r0, r2
   12124:	4619      	mov	r1, r3
   12126:	a336      	add	r3, pc, #216	; (adr r3, 12200 <course_pid_run+0x158>)
   12128:	e9d3 2300 	ldrd	r2, r3, [r3]
   1212c:	f005 fc02 	bl	17934 <__adddf3>
   12130:	4602      	mov	r2, r0
   12132:	460b      	mov	r3, r1
   12134:	4610      	mov	r0, r2
   12136:	4619      	mov	r1, r3
   12138:	f006 f890 	bl	1825c <__aeabi_d2f>
   1213c:	4603      	mov	r3, r0
   1213e:	607b      	str	r3, [r7, #4]
   12140:	6878      	ldr	r0, [r7, #4]
   12142:	f005 fd55 	bl	17bf0 <__aeabi_f2d>
   12146:	4602      	mov	r2, r0
   12148:	460b      	mov	r3, r1
   1214a:	4610      	mov	r0, r2
   1214c:	4619      	mov	r1, r3
   1214e:	a330      	add	r3, pc, #192	; (adr r3, 12210 <course_pid_run+0x168>)
   12150:	e9d3 2300 	ldrd	r2, r3, [r3]
   12154:	f006 f812 	bl	1817c <__aeabi_dcmplt>
   12158:	4603      	mov	r3, r0
   1215a:	2b00      	cmp	r3, #0
   1215c:	d1dc      	bne.n	12118 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1215e:	f240 5358 	movw	r3, #1368	; 0x558
   12162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12166:	681b      	ldr	r3, [r3, #0]
   12168:	4618      	mov	r0, r3
   1216a:	6879      	ldr	r1, [r7, #4]
   1216c:	f006 f9d4 	bl	18518 <__aeabi_fmul>
   12170:	4603      	mov	r3, r0
   12172:	461a      	mov	r2, r3
   12174:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1217c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1217e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12186:	681a      	ldr	r2, [r3, #0]
   12188:	f240 535c 	movw	r3, #1372	; 0x55c
   1218c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12190:	681b      	ldr	r3, [r3, #0]
   12192:	4610      	mov	r0, r2
   12194:	4619      	mov	r1, r3
   12196:	f006 fb7b 	bl	18890 <__aeabi_fcmpgt>
   1219a:	4603      	mov	r3, r0
   1219c:	2b00      	cmp	r3, #0
   1219e:	d00a      	beq.n	121b6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   121a0:	f240 535c 	movw	r3, #1372	; 0x55c
   121a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a8:	681a      	ldr	r2, [r3, #0]
   121aa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121b2:	601a      	str	r2, [r3, #0]
   121b4:	e01e      	b.n	121f4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   121b6:	f240 535c 	movw	r3, #1372	; 0x55c
   121ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121be:	681b      	ldr	r3, [r3, #0]
   121c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121c4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121cc:	681b      	ldr	r3, [r3, #0]
   121ce:	4610      	mov	r0, r2
   121d0:	4619      	mov	r1, r3
   121d2:	f006 fb5d 	bl	18890 <__aeabi_fcmpgt>
   121d6:	4603      	mov	r3, r0
   121d8:	2b00      	cmp	r3, #0
   121da:	d00b      	beq.n	121f4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   121dc:	f240 535c 	movw	r3, #1372	; 0x55c
   121e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   121ea:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   121ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f2:	601a      	str	r2, [r3, #0]
}
   121f4:	3708      	adds	r7, #8
   121f6:	46bd      	mov	sp, r7
   121f8:	bd80      	pop	{r7, pc}
   121fa:	bf00      	nop
   121fc:	f3af 8000 	nop.w
   12200:	54442d18 	.word	0x54442d18
   12204:	401921fb 	.word	0x401921fb
   12208:	54442d18 	.word	0x54442d18
   1220c:	400921fb 	.word	0x400921fb
   12210:	54442d18 	.word	0x54442d18
   12214:	c00921fb 	.word	0xc00921fb

00012218 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12218:	b5b0      	push	{r4, r5, r7, lr}
   1221a:	b082      	sub	sp, #8
   1221c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1221e:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   12222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12226:	681a      	ldr	r2, [r3, #0]
   12228:	f64c 0390 	movw	r3, #51344	; 0xc890
   1222c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12230:	681b      	ldr	r3, [r3, #0]
   12232:	4610      	mov	r0, r2
   12234:	4619      	mov	r1, r3
   12236:	f006 f865 	bl	18304 <__aeabi_fsub>
   1223a:	4603      	mov	r3, r0
   1223c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   1223e:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12246:	781b      	ldrb	r3, [r3, #0]
   12248:	2b00      	cmp	r3, #0
   1224a:	f000 80a8 	beq.w	1239e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1224e:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12256:	881b      	ldrh	r3, [r3, #0]
   12258:	b29a      	uxth	r2, r3
   1225a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1225e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12262:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12264:	f240 5364 	movw	r3, #1380	; 0x564
   12268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226c:	681a      	ldr	r2, [r3, #0]
   1226e:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12276:	681b      	ldr	r3, [r3, #0]
   12278:	4610      	mov	r0, r2
   1227a:	4619      	mov	r1, r3
   1227c:	f006 f94c 	bl	18518 <__aeabi_fmul>
   12280:	4603      	mov	r3, r0
   12282:	4618      	mov	r0, r3
   12284:	6879      	ldr	r1, [r7, #4]
   12286:	f006 f83f 	bl	18308 <__addsf3>
   1228a:	4603      	mov	r3, r0
   1228c:	461a      	mov	r2, r3
   1228e:	f240 5360 	movw	r3, #1376	; 0x560
   12292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12296:	681b      	ldr	r3, [r3, #0]
   12298:	4610      	mov	r0, r2
   1229a:	4619      	mov	r1, r3
   1229c:	f006 f93c 	bl	18518 <__aeabi_fmul>
   122a0:	4603      	mov	r3, r0
   122a2:	461a      	mov	r2, r3
   122a4:	f64c 0378 	movw	r3, #51320	; 0xc878
   122a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ac:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   122ae:	f64c 0378 	movw	r3, #51320	; 0xc878
   122b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b6:	681a      	ldr	r2, [r3, #0]
   122b8:	f240 5368 	movw	r3, #1384	; 0x568
   122bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c0:	681b      	ldr	r3, [r3, #0]
   122c2:	4610      	mov	r0, r2
   122c4:	4619      	mov	r1, r3
   122c6:	f006 fae3 	bl	18890 <__aeabi_fcmpgt>
   122ca:	4603      	mov	r3, r0
   122cc:	2b00      	cmp	r3, #0
   122ce:	d009      	beq.n	122e4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   122d0:	f240 5368 	movw	r3, #1384	; 0x568
   122d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d8:	681a      	ldr	r2, [r3, #0]
   122da:	f64c 0378 	movw	r3, #51320	; 0xc878
   122de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   122e4:	f64c 0378 	movw	r3, #51320	; 0xc878
   122e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ec:	681a      	ldr	r2, [r3, #0]
   122ee:	f240 536c 	movw	r3, #1388	; 0x56c
   122f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f6:	681b      	ldr	r3, [r3, #0]
   122f8:	4610      	mov	r0, r2
   122fa:	4619      	mov	r1, r3
   122fc:	f006 faaa 	bl	18854 <__aeabi_fcmplt>
   12300:	4603      	mov	r3, r0
   12302:	2b00      	cmp	r3, #0
   12304:	d009      	beq.n	1231a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   12306:	f240 536c 	movw	r3, #1388	; 0x56c
   1230a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1230e:	681a      	ldr	r2, [r3, #0]
   12310:	f64c 0378 	movw	r3, #51320	; 0xc878
   12314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12318:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1231a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1231e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12322:	681b      	ldr	r3, [r3, #0]
   12324:	4618      	mov	r0, r3
   12326:	6879      	ldr	r1, [r7, #4]
   12328:	f005 ffee 	bl	18308 <__addsf3>
   1232c:	4603      	mov	r3, r0
   1232e:	461a      	mov	r2, r3
   12330:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12338:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1233a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1233e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12342:	681b      	ldr	r3, [r3, #0]
   12344:	4618      	mov	r0, r3
   12346:	f04f 0100 	mov.w	r1, #0
   1234a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1234e:	f006 fa9f 	bl	18890 <__aeabi_fcmpgt>
   12352:	4603      	mov	r3, r0
   12354:	2b00      	cmp	r3, #0
   12356:	d008      	beq.n	1236a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12358:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1235c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12360:	f04f 0200 	mov.w	r2, #0
   12364:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12368:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1236a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1236e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12372:	681b      	ldr	r3, [r3, #0]
   12374:	4618      	mov	r0, r3
   12376:	f04f 0100 	mov.w	r1, #0
   1237a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1237e:	f006 fa69 	bl	18854 <__aeabi_fcmplt>
   12382:	4603      	mov	r3, r0
   12384:	2b00      	cmp	r3, #0
   12386:	d100      	bne.n	1238a <climb_pid_run+0x172>
   12388:	e109      	b.n	1259e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1238a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1238e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12392:	f04f 0200 	mov.w	r2, #0
   12396:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1239a:	601a      	str	r2, [r3, #0]
   1239c:	e0ff      	b.n	1259e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1239e:	f64c 0390 	movw	r3, #51344	; 0xc890
   123a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a6:	681b      	ldr	r3, [r3, #0]
   123a8:	4618      	mov	r0, r3
   123aa:	f04f 0100 	mov.w	r1, #0
   123ae:	f006 fa6f 	bl	18890 <__aeabi_fcmpgt>
   123b2:	4603      	mov	r3, r0
   123b4:	2b00      	cmp	r3, #0
   123b6:	d010      	beq.n	123da <climb_pid_run+0x1c2>
   123b8:	f64c 0390 	movw	r3, #51344	; 0xc890
   123bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c0:	681a      	ldr	r2, [r3, #0]
   123c2:	f240 5354 	movw	r3, #1364	; 0x554
   123c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ca:	681b      	ldr	r3, [r3, #0]
   123cc:	4610      	mov	r0, r2
   123ce:	4619      	mov	r1, r3
   123d0:	f006 f8a2 	bl	18518 <__aeabi_fmul>
   123d4:	4603      	mov	r3, r0
   123d6:	461a      	mov	r2, r3
   123d8:	e001      	b.n	123de <climb_pid_run+0x1c6>
   123da:	f04f 0200 	mov.w	r2, #0
   123de:	f64c 0388 	movw	r3, #51336	; 0xc888
   123e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   123e8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   123ec:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   123f0:	f64c 0398 	movw	r3, #51352	; 0xc898
   123f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f8:	681b      	ldr	r3, [r3, #0]
   123fa:	4610      	mov	r0, r2
   123fc:	4619      	mov	r1, r3
   123fe:	f006 f88b 	bl	18518 <__aeabi_fmul>
   12402:	4603      	mov	r3, r0
   12404:	4618      	mov	r0, r3
   12406:	6879      	ldr	r1, [r7, #4]
   12408:	f005 ff7e 	bl	18308 <__addsf3>
   1240c:	4603      	mov	r3, r0
   1240e:	461a      	mov	r2, r3
   12410:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12414:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12418:	4610      	mov	r0, r2
   1241a:	4619      	mov	r1, r3
   1241c:	f006 f87c 	bl	18518 <__aeabi_fmul>
   12420:	4603      	mov	r3, r0
   12422:	4618      	mov	r0, r3
   12424:	f005 fbe4 	bl	17bf0 <__aeabi_f2d>
   12428:	4602      	mov	r2, r0
   1242a:	460b      	mov	r3, r1
   1242c:	4610      	mov	r0, r2
   1242e:	4619      	mov	r1, r3
   12430:	a35d      	add	r3, pc, #372	; (adr r3, 125a8 <climb_pid_run+0x390>)
   12432:	e9d3 2300 	ldrd	r2, r3, [r3]
   12436:	f005 fa7d 	bl	17934 <__adddf3>
   1243a:	4602      	mov	r2, r0
   1243c:	460b      	mov	r3, r1
   1243e:	4614      	mov	r4, r2
   12440:	461d      	mov	r5, r3
   12442:	f64c 0390 	movw	r3, #51344	; 0xc890
   12446:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1244a:	681b      	ldr	r3, [r3, #0]
   1244c:	4618      	mov	r0, r3
   1244e:	f005 fbcf 	bl	17bf0 <__aeabi_f2d>
   12452:	4602      	mov	r2, r0
   12454:	460b      	mov	r3, r1
   12456:	4610      	mov	r0, r2
   12458:	4619      	mov	r1, r3
   1245a:	a355      	add	r3, pc, #340	; (adr r3, 125b0 <climb_pid_run+0x398>)
   1245c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12460:	f005 fc1a 	bl	17c98 <__aeabi_dmul>
   12464:	4602      	mov	r2, r0
   12466:	460b      	mov	r3, r1
   12468:	4620      	mov	r0, r4
   1246a:	4629      	mov	r1, r5
   1246c:	f005 fa62 	bl	17934 <__adddf3>
   12470:	4602      	mov	r2, r0
   12472:	460b      	mov	r3, r1
   12474:	4610      	mov	r0, r2
   12476:	4619      	mov	r1, r3
   12478:	f005 fef0 	bl	1825c <__aeabi_d2f>
   1247c:	4603      	mov	r3, r0
   1247e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12480:	f64c 0398 	movw	r3, #51352	; 0xc898
   12484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	4618      	mov	r0, r3
   1248c:	6879      	ldr	r1, [r7, #4]
   1248e:	f005 ff3b 	bl	18308 <__addsf3>
   12492:	4603      	mov	r3, r0
   12494:	461a      	mov	r2, r3
   12496:	f64c 0398 	movw	r3, #51352	; 0xc898
   1249a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1249e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   124a0:	f64c 0398 	movw	r3, #51352	; 0xc898
   124a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124a8:	681b      	ldr	r3, [r3, #0]
   124aa:	4618      	mov	r0, r3
   124ac:	f04f 0100 	mov.w	r1, #0
   124b0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   124b4:	f006 f9ec 	bl	18890 <__aeabi_fcmpgt>
   124b8:	4603      	mov	r3, r0
   124ba:	2b00      	cmp	r3, #0
   124bc:	d008      	beq.n	124d0 <climb_pid_run+0x2b8>
   124be:	f64c 0398 	movw	r3, #51352	; 0xc898
   124c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c6:	f04f 0200 	mov.w	r2, #0
   124ca:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   124ce:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   124d0:	f64c 0398 	movw	r3, #51352	; 0xc898
   124d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d8:	681b      	ldr	r3, [r3, #0]
   124da:	4618      	mov	r0, r3
   124dc:	f04f 0100 	mov.w	r1, #0
   124e0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   124e4:	f006 f9b6 	bl	18854 <__aeabi_fcmplt>
   124e8:	4603      	mov	r3, r0
   124ea:	2b00      	cmp	r3, #0
   124ec:	d008      	beq.n	12500 <climb_pid_run+0x2e8>
   124ee:	f64c 0398 	movw	r3, #51352	; 0xc898
   124f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124f6:	f04f 0200 	mov.w	r2, #0
   124fa:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   124fe:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12500:	6838      	ldr	r0, [r7, #0]
   12502:	f04f 0100 	mov.w	r1, #0
   12506:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1250a:	f006 f805 	bl	18518 <__aeabi_fmul>
   1250e:	4603      	mov	r3, r0
   12510:	4618      	mov	r0, r3
   12512:	f04f 0100 	mov.w	r1, #0
   12516:	f006 f99d 	bl	18854 <__aeabi_fcmplt>
   1251a:	4603      	mov	r3, r0
   1251c:	2b00      	cmp	r3, #0
   1251e:	d001      	beq.n	12524 <climb_pid_run+0x30c>
   12520:	2200      	movs	r2, #0
   12522:	e022      	b.n	1256a <climb_pid_run+0x352>
   12524:	6838      	ldr	r0, [r7, #0]
   12526:	f04f 0100 	mov.w	r1, #0
   1252a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1252e:	f005 fff3 	bl	18518 <__aeabi_fmul>
   12532:	4603      	mov	r3, r0
   12534:	4618      	mov	r0, r3
   12536:	f04f 0100 	mov.w	r1, #0
   1253a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1253e:	f006 f9a7 	bl	18890 <__aeabi_fcmpgt>
   12542:	4603      	mov	r3, r0
   12544:	2b00      	cmp	r3, #0
   12546:	d002      	beq.n	1254e <climb_pid_run+0x336>
   12548:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1254c:	e00c      	b.n	12568 <climb_pid_run+0x350>
   1254e:	6838      	ldr	r0, [r7, #0]
   12550:	f04f 0100 	mov.w	r1, #0
   12554:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12558:	f005 ffde 	bl	18518 <__aeabi_fmul>
   1255c:	4603      	mov	r3, r0
   1255e:	4618      	mov	r0, r3
   12560:	f006 f9a0 	bl	188a4 <__aeabi_f2iz>
   12564:	4603      	mov	r3, r0
   12566:	b29b      	uxth	r3, r3
   12568:	b29a      	uxth	r2, r3
   1256a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1256e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12572:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12574:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1257c:	681a      	ldr	r2, [r3, #0]
   1257e:	f64c 0388 	movw	r3, #51336	; 0xc888
   12582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12586:	681b      	ldr	r3, [r3, #0]
   12588:	4610      	mov	r0, r2
   1258a:	4619      	mov	r1, r3
   1258c:	f005 febc 	bl	18308 <__addsf3>
   12590:	4603      	mov	r3, r0
   12592:	461a      	mov	r2, r3
   12594:	f64c 0378 	movw	r3, #51320	; 0xc878
   12598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1259c:	601a      	str	r2, [r3, #0]
  }
}
   1259e:	3708      	adds	r7, #8
   125a0:	46bd      	mov	sp, r7
   125a2:	bdb0      	pop	{r4, r5, r7, pc}
   125a4:	f3af 8000 	nop.w
   125a8:	3d70a3d7 	.word	0x3d70a3d7
   125ac:	3fd3d70a 	.word	0x3fd3d70a
   125b0:	9999999a 	.word	0x9999999a
   125b4:	3fc99999 	.word	0x3fc99999

000125b8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   125b8:	b580      	push	{r7, lr}
   125ba:	b082      	sub	sp, #8
   125bc:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   125be:	f64c 3304 	movw	r3, #51972	; 0xcb04
   125c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c6:	681a      	ldr	r2, [r3, #0]
   125c8:	f240 5374 	movw	r3, #1396	; 0x574
   125cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	4610      	mov	r0, r2
   125d4:	4619      	mov	r1, r3
   125d6:	f005 fe95 	bl	18304 <__aeabi_fsub>
   125da:	4603      	mov	r3, r0
   125dc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   125de:	f240 5370 	movw	r3, #1392	; 0x570
   125e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e6:	681b      	ldr	r3, [r3, #0]
   125e8:	4618      	mov	r0, r3
   125ea:	6879      	ldr	r1, [r7, #4]
   125ec:	f005 ff94 	bl	18518 <__aeabi_fmul>
   125f0:	4603      	mov	r3, r0
   125f2:	461a      	mov	r2, r3
   125f4:	f64c 0394 	movw	r3, #51348	; 0xc894
   125f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fc:	681b      	ldr	r3, [r3, #0]
   125fe:	4610      	mov	r0, r2
   12600:	4619      	mov	r1, r3
   12602:	f005 fe81 	bl	18308 <__addsf3>
   12606:	4603      	mov	r3, r0
   12608:	461a      	mov	r2, r3
   1260a:	f64c 0390 	movw	r3, #51344	; 0xc890
   1260e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12612:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12614:	f64c 0390 	movw	r3, #51344	; 0xc890
   12618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261c:	681b      	ldr	r3, [r3, #0]
   1261e:	4618      	mov	r0, r3
   12620:	f04f 0100 	mov.w	r1, #0
   12624:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12628:	f006 f914 	bl	18854 <__aeabi_fcmplt>
   1262c:	4603      	mov	r3, r0
   1262e:	2b00      	cmp	r3, #0
   12630:	d008      	beq.n	12644 <altitude_pid_run+0x8c>
   12632:	f64c 0390 	movw	r3, #51344	; 0xc890
   12636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263a:	f04f 0200 	mov.w	r2, #0
   1263e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12642:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12644:	f64c 0390 	movw	r3, #51344	; 0xc890
   12648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264c:	681b      	ldr	r3, [r3, #0]
   1264e:	4618      	mov	r0, r3
   12650:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12654:	f006 f91c 	bl	18890 <__aeabi_fcmpgt>
   12658:	4603      	mov	r3, r0
   1265a:	2b00      	cmp	r3, #0
   1265c:	d006      	beq.n	1266c <altitude_pid_run+0xb4>
   1265e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1266a:	601a      	str	r2, [r3, #0]
}
   1266c:	3708      	adds	r7, #8
   1266e:	46bd      	mov	sp, r7
   12670:	bd80      	pop	{r7, pc}
   12672:	bf00      	nop
   12674:	f3af 8000 	nop.w

00012678 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1267a:	b08b      	sub	sp, #44	; 0x2c
   1267c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1267e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12686:	781b      	ldrb	r3, [r3, #0]
   12688:	2b00      	cmp	r3, #0
   1268a:	f040 8169 	bne.w	12960 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1268e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12696:	781b      	ldrb	r3, [r3, #0]
   12698:	2b00      	cmp	r3, #0
   1269a:	d13c      	bne.n	12716 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1269c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a4:	2200      	movs	r2, #0
   126a6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   126a8:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   126ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b0:	881b      	ldrh	r3, [r3, #0]
   126b2:	2b00      	cmp	r3, #0
   126b4:	d000      	beq.n	126b8 <auto_nav+0x40>
   126b6:	e03d      	b.n	12734 <auto_nav+0xbc>
	else NextStage(); 
   126b8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c0:	781b      	ldrb	r3, [r3, #0]
   126c2:	3301      	adds	r3, #1
   126c4:	b2da      	uxtb	r2, r3
   126c6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ce:	701a      	strb	r2, [r3, #0]
   126d0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   126d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d8:	681a      	ldr	r2, [r3, #0]
   126da:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   126de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e2:	601a      	str	r2, [r3, #0]
   126e4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   126e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ec:	681a      	ldr	r2, [r3, #0]
   126ee:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   126f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f6:	601a      	str	r2, [r3, #0]
   126f8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   126fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12700:	2200      	movs	r2, #0
   12702:	801a      	strh	r2, [r3, #0]
   12704:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270c:	f04f 0200 	mov.w	r2, #0
   12710:	601a      	str	r2, [r3, #0]
   12712:	f002 b883 	b.w	1481c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12716:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1271a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271e:	781b      	ldrb	r3, [r3, #0]
   12720:	2b01      	cmp	r3, #1
   12722:	d100      	bne.n	12726 <auto_nav+0xae>
    {   Goto(while_1)}
   12724:	e7ba      	b.n	1269c <auto_nav+0x24>
    else if (nav_stage == 2)
   12726:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	781b      	ldrb	r3, [r3, #0]
   12730:	2b02      	cmp	r3, #2
   12732:	d162      	bne.n	127fa <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12734:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273c:	2202      	movs	r2, #2
   1273e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12740:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	881b      	ldrh	r3, [r3, #0]
   1274a:	2b08      	cmp	r3, #8
   1274c:	d92e      	bls.n	127ac <auto_nav+0x134>
   1274e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12756:	781b      	ldrb	r3, [r3, #0]
   12758:	3301      	adds	r3, #1
   1275a:	b2da      	uxtb	r2, r3
   1275c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12764:	701a      	strb	r2, [r3, #0]
   12766:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1276a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276e:	681a      	ldr	r2, [r3, #0]
   12770:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12778:	601a      	str	r2, [r3, #0]
   1277a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1277e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12782:	681a      	ldr	r2, [r3, #0]
   12784:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278c:	601a      	str	r2, [r3, #0]
   1278e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12796:	2200      	movs	r2, #0
   12798:	801a      	strh	r2, [r3, #0]
   1279a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1279e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a2:	f04f 0200 	mov.w	r2, #0
   127a6:	601a      	str	r2, [r3, #0]
   127a8:	f002 b838 	b.w	1481c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   127ac:	f64c 038c 	movw	r3, #51340	; 0xc88c
   127b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   127b8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   127bc:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   127be:	f24c 532f 	movw	r3, #50479	; 0xc52f
   127c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c6:	2200      	movs	r2, #0
   127c8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   127ca:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   127ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d2:	f649 129a 	movw	r2, #39322	; 0x999a
   127d6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   127da:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   127dc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   127e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e4:	2201      	movs	r2, #1
   127e6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   127e8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   127ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   127f4:	801a      	strh	r2, [r3, #0]
        }
        return;
   127f6:	f002 b811 	b.w	1481c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   127fa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12802:	781b      	ldrb	r3, [r3, #0]
   12804:	2b03      	cmp	r3, #3
   12806:	d168      	bne.n	128da <auto_nav+0x262>
     {
	nav_stage = 3;	
   12808:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1280c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12810:	2203      	movs	r2, #3
   12812:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12814:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281c:	681b      	ldr	r3, [r3, #0]
   1281e:	4618      	mov	r0, r3
   12820:	f04f 0100 	mov.w	r1, #0
   12824:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12828:	f006 f832 	bl	18890 <__aeabi_fcmpgt>
   1282c:	4603      	mov	r3, r0
   1282e:	2b00      	cmp	r3, #0
   12830:	d02e      	beq.n	12890 <auto_nav+0x218>
   12832:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	781b      	ldrb	r3, [r3, #0]
   1283c:	3301      	adds	r3, #1
   1283e:	b2da      	uxtb	r2, r3
   12840:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12848:	701a      	strb	r2, [r3, #0]
   1284a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1284e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12852:	681a      	ldr	r2, [r3, #0]
   12854:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285c:	601a      	str	r2, [r3, #0]
   1285e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12866:	681a      	ldr	r2, [r3, #0]
   12868:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1286c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12870:	601a      	str	r2, [r3, #0]
   12872:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287a:	2200      	movs	r2, #0
   1287c:	801a      	strh	r2, [r3, #0]
   1287e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12886:	f04f 0200 	mov.w	r2, #0
   1288a:	601a      	str	r2, [r3, #0]
   1288c:	f001 bfc6 	b.w	1481c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12890:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12898:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1289c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   128a0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   128a2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   128a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128aa:	2200      	movs	r2, #0
   128ac:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   128ae:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b6:	f04f 0200 	mov.w	r2, #0
   128ba:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   128bc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   128c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c4:	2202      	movs	r2, #2
   128c6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   128c8:	f64c 0390 	movw	r3, #51344	; 0xc890
   128cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128d4:	601a      	str	r2, [r3, #0]
        }
        return;
   128d6:	f001 bfa1 	b.w	1481c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   128da:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	2b04      	cmp	r3, #4
   128e6:	f041 8799 	bne.w	1481c <auto_nav+0x21a4>
        NextBlock()
   128ea:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	3301      	adds	r3, #1
   128f6:	b2da      	uxtb	r2, r3
   128f8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	701a      	strb	r2, [r3, #0]
   12902:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290a:	2200      	movs	r2, #0
   1290c:	701a      	strb	r2, [r3, #0]
   1290e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	2200      	movs	r2, #0
   12918:	801a      	strh	r2, [r3, #0]
   1291a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1291e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12922:	681a      	ldr	r2, [r3, #0]
   12924:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292c:	601a      	str	r2, [r3, #0]
   1292e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12936:	681a      	ldr	r2, [r3, #0]
   12938:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1293c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12940:	601a      	str	r2, [r3, #0]
   12942:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294a:	2200      	movs	r2, #0
   1294c:	801a      	strh	r2, [r3, #0]
   1294e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12956:	f04f 0200 	mov.w	r2, #0
   1295a:	601a      	str	r2, [r3, #0]
   1295c:	f001 bf5e 	b.w	1481c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12960:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	781b      	ldrb	r3, [r3, #0]
   1296a:	2b01      	cmp	r3, #1
   1296c:	f040 81bc 	bne.w	12ce8 <auto_nav+0x670>
{
    nav_block = 1;
   12970:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12978:	2201      	movs	r2, #1
   1297a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1297c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12984:	781b      	ldrb	r3, [r3, #0]
   12986:	2b00      	cmp	r3, #0
   12988:	d007      	beq.n	1299a <auto_nav+0x322>
   1298a:	f24c 5330 	movw	r3, #50480	; 0xc530
   1298e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12992:	2200      	movs	r2, #0
   12994:	701a      	strb	r2, [r3, #0]
   12996:	2301      	movs	r3, #1
   12998:	e000      	b.n	1299c <auto_nav+0x324>
   1299a:	2300      	movs	r3, #0
   1299c:	2b00      	cmp	r3, #0
   1299e:	d034      	beq.n	12a0a <auto_nav+0x392>
	{ GotoBlock(2) }
   129a0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   129a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a8:	2202      	movs	r2, #2
   129aa:	701a      	strb	r2, [r3, #0]
   129ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b4:	2200      	movs	r2, #0
   129b6:	701a      	strb	r2, [r3, #0]
   129b8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   129bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c0:	2200      	movs	r2, #0
   129c2:	801a      	strh	r2, [r3, #0]
   129c4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   129c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129cc:	681a      	ldr	r2, [r3, #0]
   129ce:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   129d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d6:	601a      	str	r2, [r3, #0]
   129d8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   129dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e0:	681a      	ldr	r2, [r3, #0]
   129e2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ea:	601a      	str	r2, [r3, #0]
   129ec:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f4:	2200      	movs	r2, #0
   129f6:	801a      	strh	r2, [r3, #0]
   129f8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a00:	f04f 0200 	mov.w	r2, #0
   12a04:	601a      	str	r2, [r3, #0]
   12a06:	f001 bf09 	b.w	1481c <auto_nav+0x21a4>
    if(nav_stage == 0)
   12a0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	2b00      	cmp	r3, #0
   12a16:	d12e      	bne.n	12a76 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12a18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a20:	781b      	ldrb	r3, [r3, #0]
   12a22:	3301      	adds	r3, #1
   12a24:	b2da      	uxtb	r2, r3
   12a26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2e:	701a      	strb	r2, [r3, #0]
   12a30:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a38:	681a      	ldr	r2, [r3, #0]
   12a3a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a42:	601a      	str	r2, [r3, #0]
   12a44:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	681a      	ldr	r2, [r3, #0]
   12a4e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a56:	601a      	str	r2, [r3, #0]
   12a58:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a60:	2200      	movs	r2, #0
   12a62:	801a      	strh	r2, [r3, #0]
   12a64:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6c:	f04f 0200 	mov.w	r2, #0
   12a70:	601a      	str	r2, [r3, #0]
   12a72:	f001 bed3 	b.w	1481c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12a76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	781b      	ldrb	r3, [r3, #0]
   12a80:	2b01      	cmp	r3, #1
   12a82:	d169      	bne.n	12b58 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12a84:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a8c:	2201      	movs	r2, #1
   12a8e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12a90:	2001      	movs	r0, #1
   12a92:	f001 fed1 	bl	14838 <approaching>
   12a96:	4603      	mov	r3, r0
   12a98:	2b00      	cmp	r3, #0
   12a9a:	d034      	beq.n	12b06 <auto_nav+0x48e>
   12a9c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa4:	2201      	movs	r2, #1
   12aa6:	701a      	strb	r2, [r3, #0]
   12aa8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab0:	781b      	ldrb	r3, [r3, #0]
   12ab2:	3301      	adds	r3, #1
   12ab4:	b2da      	uxtb	r2, r3
   12ab6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abe:	701a      	strb	r2, [r3, #0]
   12ac0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac8:	681a      	ldr	r2, [r3, #0]
   12aca:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad2:	601a      	str	r2, [r3, #0]
   12ad4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12adc:	681a      	ldr	r2, [r3, #0]
   12ade:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae6:	601a      	str	r2, [r3, #0]
   12ae8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af0:	2200      	movs	r2, #0
   12af2:	801a      	strh	r2, [r3, #0]
   12af4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12afc:	f04f 0200 	mov.w	r2, #0
   12b00:	601a      	str	r2, [r3, #0]
   12b02:	f001 be8b 	b.w	1481c <auto_nav+0x21a4>
            fly_to(1);
   12b06:	2001      	movs	r0, #1
   12b08:	f001 ffca 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   12b0c:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b14:	2200      	movs	r2, #0
   12b16:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b18:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b20:	f04f 0200 	mov.w	r2, #0
   12b24:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b26:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	2203      	movs	r2, #3
   12b30:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12b32:	f240 5378 	movw	r3, #1400	; 0x578
   12b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b3a:	695a      	ldr	r2, [r3, #20]
   12b3c:	f240 5374 	movw	r3, #1396	; 0x574
   12b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b44:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b46:	f64c 0394 	movw	r3, #51348	; 0xc894
   12b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b4e:	f04f 0200 	mov.w	r2, #0
   12b52:	601a      	str	r2, [r3, #0]
          }
          return;
   12b54:	f001 be62 	b.w	1481c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b58:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	781b      	ldrb	r3, [r3, #0]
   12b62:	2b02      	cmp	r3, #2
   12b64:	d169      	bne.n	12c3a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12b66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6e:	2202      	movs	r2, #2
   12b70:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b72:	2004      	movs	r0, #4
   12b74:	f001 fe60 	bl	14838 <approaching>
   12b78:	4603      	mov	r3, r0
   12b7a:	2b00      	cmp	r3, #0
   12b7c:	d034      	beq.n	12be8 <auto_nav+0x570>
   12b7e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b86:	2204      	movs	r2, #4
   12b88:	701a      	strb	r2, [r3, #0]
   12b8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	781b      	ldrb	r3, [r3, #0]
   12b94:	3301      	adds	r3, #1
   12b96:	b2da      	uxtb	r2, r3
   12b98:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba0:	701a      	strb	r2, [r3, #0]
   12ba2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12baa:	681a      	ldr	r2, [r3, #0]
   12bac:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb4:	601a      	str	r2, [r3, #0]
   12bb6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bbe:	681a      	ldr	r2, [r3, #0]
   12bc0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc8:	601a      	str	r2, [r3, #0]
   12bca:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd2:	2200      	movs	r2, #0
   12bd4:	801a      	strh	r2, [r3, #0]
   12bd6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bde:	f04f 0200 	mov.w	r2, #0
   12be2:	601a      	str	r2, [r3, #0]
   12be4:	f001 be1a 	b.w	1481c <auto_nav+0x21a4>
            fly_to(4);
   12be8:	2004      	movs	r0, #4
   12bea:	f001 ff59 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   12bee:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf6:	2200      	movs	r2, #0
   12bf8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12bfa:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c02:	f04f 0200 	mov.w	r2, #0
   12c06:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c08:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	2203      	movs	r2, #3
   12c12:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12c14:	f240 5378 	movw	r3, #1400	; 0x578
   12c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c1e:	f240 5374 	movw	r3, #1396	; 0x574
   12c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c26:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c28:	f64c 0394 	movw	r3, #51348	; 0xc894
   12c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c30:	f04f 0200 	mov.w	r2, #0
   12c34:	601a      	str	r2, [r3, #0]
          }
          return;
   12c36:	f001 bdf1 	b.w	1481c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12c3a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	781b      	ldrb	r3, [r3, #0]
   12c44:	2b03      	cmp	r3, #3
   12c46:	d106      	bne.n	12c56 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12c48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c50:	2203      	movs	r2, #3
   12c52:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12c54:	e6e0      	b.n	12a18 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12c56:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5e:	781b      	ldrb	r3, [r3, #0]
   12c60:	2b04      	cmp	r3, #4
   12c62:	f041 85db 	bne.w	1481c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12c66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6e:	2204      	movs	r2, #4
   12c70:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12c72:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7a:	781b      	ldrb	r3, [r3, #0]
   12c7c:	3301      	adds	r3, #1
   12c7e:	b2da      	uxtb	r2, r3
   12c80:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	701a      	strb	r2, [r3, #0]
   12c8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c92:	2200      	movs	r2, #0
   12c94:	701a      	strb	r2, [r3, #0]
   12c96:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9e:	2200      	movs	r2, #0
   12ca0:	801a      	strh	r2, [r3, #0]
   12ca2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	681a      	ldr	r2, [r3, #0]
   12cac:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb4:	601a      	str	r2, [r3, #0]
   12cb6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cbe:	681a      	ldr	r2, [r3, #0]
   12cc0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc8:	601a      	str	r2, [r3, #0]
   12cca:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd2:	2200      	movs	r2, #0
   12cd4:	801a      	strh	r2, [r3, #0]
   12cd6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cde:	f04f 0200 	mov.w	r2, #0
   12ce2:	601a      	str	r2, [r3, #0]
   12ce4:	f001 bd9a 	b.w	1481c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ce8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	2b02      	cmp	r3, #2
   12cf4:	f040 8392 	bne.w	1341c <auto_nav+0xda4>
{
	nav_block = 2;
   12cf8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d00:	2202      	movs	r2, #2
   12d02:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12d04:	f24c 5330 	movw	r3, #50480	; 0xc530
   12d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0c:	781b      	ldrb	r3, [r3, #0]
   12d0e:	2b00      	cmp	r3, #0
   12d10:	d007      	beq.n	12d22 <auto_nav+0x6aa>
   12d12:	f24c 5330 	movw	r3, #50480	; 0xc530
   12d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1a:	2200      	movs	r2, #0
   12d1c:	701a      	strb	r2, [r3, #0]
   12d1e:	2301      	movs	r3, #1
   12d20:	e000      	b.n	12d24 <auto_nav+0x6ac>
   12d22:	2300      	movs	r3, #0
   12d24:	2b00      	cmp	r3, #0
   12d26:	d034      	beq.n	12d92 <auto_nav+0x71a>
   12d28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d30:	2203      	movs	r2, #3
   12d32:	701a      	strb	r2, [r3, #0]
   12d34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3c:	2200      	movs	r2, #0
   12d3e:	701a      	strb	r2, [r3, #0]
   12d40:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d48:	2200      	movs	r2, #0
   12d4a:	801a      	strh	r2, [r3, #0]
   12d4c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d54:	681a      	ldr	r2, [r3, #0]
   12d56:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5e:	601a      	str	r2, [r3, #0]
   12d60:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d68:	681a      	ldr	r2, [r3, #0]
   12d6a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d72:	601a      	str	r2, [r3, #0]
   12d74:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d7c:	2200      	movs	r2, #0
   12d7e:	801a      	strh	r2, [r3, #0]
   12d80:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d88:	f04f 0200 	mov.w	r2, #0
   12d8c:	601a      	str	r2, [r3, #0]
   12d8e:	f001 bd45 	b.w	1481c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12d92:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d134      	bne.n	12e0a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12da0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da8:	2200      	movs	r2, #0
   12daa:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12dac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db4:	781b      	ldrb	r3, [r3, #0]
   12db6:	3301      	adds	r3, #1
   12db8:	b2da      	uxtb	r2, r3
   12dba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc2:	701a      	strb	r2, [r3, #0]
   12dc4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dcc:	681a      	ldr	r2, [r3, #0]
   12dce:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd6:	601a      	str	r2, [r3, #0]
   12dd8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de0:	681a      	ldr	r2, [r3, #0]
   12de2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dea:	601a      	str	r2, [r3, #0]
   12dec:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df4:	2200      	movs	r2, #0
   12df6:	801a      	strh	r2, [r3, #0]
   12df8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e00:	f04f 0200 	mov.w	r2, #0
   12e04:	601a      	str	r2, [r3, #0]
   12e06:	f001 bd09 	b.w	1481c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12e0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	781b      	ldrb	r3, [r3, #0]
   12e14:	2b01      	cmp	r3, #1
   12e16:	d169      	bne.n	12eec <auto_nav+0x874>
    {
         nav_stage =1;
   12e18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e20:	2201      	movs	r2, #1
   12e22:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12e24:	2006      	movs	r0, #6
   12e26:	f001 fd07 	bl	14838 <approaching>
   12e2a:	4603      	mov	r3, r0
   12e2c:	2b00      	cmp	r3, #0
   12e2e:	d034      	beq.n	12e9a <auto_nav+0x822>
   12e30:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e38:	2206      	movs	r2, #6
   12e3a:	701a      	strb	r2, [r3, #0]
   12e3c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e44:	781b      	ldrb	r3, [r3, #0]
   12e46:	3301      	adds	r3, #1
   12e48:	b2da      	uxtb	r2, r3
   12e4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e52:	701a      	strb	r2, [r3, #0]
   12e54:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5c:	681a      	ldr	r2, [r3, #0]
   12e5e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e66:	601a      	str	r2, [r3, #0]
   12e68:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e70:	681a      	ldr	r2, [r3, #0]
   12e72:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7a:	601a      	str	r2, [r3, #0]
   12e7c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e84:	2200      	movs	r2, #0
   12e86:	801a      	strh	r2, [r3, #0]
   12e88:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e90:	f04f 0200 	mov.w	r2, #0
   12e94:	601a      	str	r2, [r3, #0]
   12e96:	f001 bcc1 	b.w	1481c <auto_nav+0x21a4>
            fly_to(6);
   12e9a:	2006      	movs	r0, #6
   12e9c:	f001 fe00 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   12ea0:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea8:	2200      	movs	r2, #0
   12eaa:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12eac:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb4:	f04f 0200 	mov.w	r2, #0
   12eb8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12eba:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec2:	2203      	movs	r2, #3
   12ec4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12ec6:	f240 5378 	movw	r3, #1400	; 0x578
   12eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12ed0:	f240 5374 	movw	r3, #1396	; 0x574
   12ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ed8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12eda:	f64c 0394 	movw	r3, #51348	; 0xc894
   12ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee2:	f04f 0200 	mov.w	r2, #0
   12ee6:	601a      	str	r2, [r3, #0]
          }
          return;
   12ee8:	f001 bc98 	b.w	1481c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12eec:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2b02      	cmp	r3, #2
   12ef8:	d169      	bne.n	12fce <auto_nav+0x956>
     {
         nav_stage =2; 
   12efa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f02:	2202      	movs	r2, #2
   12f04:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12f06:	2001      	movs	r0, #1
   12f08:	f001 fc96 	bl	14838 <approaching>
   12f0c:	4603      	mov	r3, r0
   12f0e:	2b00      	cmp	r3, #0
   12f10:	d034      	beq.n	12f7c <auto_nav+0x904>
   12f12:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1a:	2201      	movs	r2, #1
   12f1c:	701a      	strb	r2, [r3, #0]
   12f1e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	781b      	ldrb	r3, [r3, #0]
   12f28:	3301      	adds	r3, #1
   12f2a:	b2da      	uxtb	r2, r3
   12f2c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f34:	701a      	strb	r2, [r3, #0]
   12f36:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3e:	681a      	ldr	r2, [r3, #0]
   12f40:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f48:	601a      	str	r2, [r3, #0]
   12f4a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f52:	681a      	ldr	r2, [r3, #0]
   12f54:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5c:	601a      	str	r2, [r3, #0]
   12f5e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f66:	2200      	movs	r2, #0
   12f68:	801a      	strh	r2, [r3, #0]
   12f6a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f72:	f04f 0200 	mov.w	r2, #0
   12f76:	601a      	str	r2, [r3, #0]
   12f78:	f001 bc50 	b.w	1481c <auto_nav+0x21a4>
            fly_to(1);
   12f7c:	2001      	movs	r0, #1
   12f7e:	f001 fd8f 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   12f82:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f8a:	2200      	movs	r2, #0
   12f8c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f8e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f96:	f04f 0200 	mov.w	r2, #0
   12f9a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f9c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa4:	2203      	movs	r2, #3
   12fa6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12fa8:	f240 5378 	movw	r3, #1400	; 0x578
   12fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb0:	695a      	ldr	r2, [r3, #20]
   12fb2:	f240 5374 	movw	r3, #1396	; 0x574
   12fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fba:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12fbc:	f64c 0394 	movw	r3, #51348	; 0xc894
   12fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc4:	f04f 0200 	mov.w	r2, #0
   12fc8:	601a      	str	r2, [r3, #0]
          }
          return;
   12fca:	f001 bc27 	b.w	1481c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12fce:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	781b      	ldrb	r3, [r3, #0]
   12fd8:	2b03      	cmp	r3, #3
   12fda:	d16f      	bne.n	130bc <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12fdc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe4:	2203      	movs	r2, #3
   12fe6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12fe8:	2002      	movs	r0, #2
   12fea:	f001 fc25 	bl	14838 <approaching>
   12fee:	4603      	mov	r3, r0
   12ff0:	2b00      	cmp	r3, #0
   12ff2:	d034      	beq.n	1305e <auto_nav+0x9e6>
   12ff4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffc:	2202      	movs	r2, #2
   12ffe:	701a      	strb	r2, [r3, #0]
   13000:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13008:	781b      	ldrb	r3, [r3, #0]
   1300a:	3301      	adds	r3, #1
   1300c:	b2da      	uxtb	r2, r3
   1300e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13016:	701a      	strb	r2, [r3, #0]
   13018:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1301c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13020:	681a      	ldr	r2, [r3, #0]
   13022:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302a:	601a      	str	r2, [r3, #0]
   1302c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13034:	681a      	ldr	r2, [r3, #0]
   13036:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1303a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303e:	601a      	str	r2, [r3, #0]
   13040:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13048:	2200      	movs	r2, #0
   1304a:	801a      	strh	r2, [r3, #0]
   1304c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13054:	f04f 0200 	mov.w	r2, #0
   13058:	601a      	str	r2, [r3, #0]
   1305a:	f001 bbdf 	b.w	1481c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   1305e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13066:	781b      	ldrb	r3, [r3, #0]
   13068:	4618      	mov	r0, r3
   1306a:	2102      	movs	r1, #2
   1306c:	f001 fd3a 	bl	14ae4 <route_to>
            auto_pitch = FALSE;
   13070:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13078:	2200      	movs	r2, #0
   1307a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1307c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13084:	f04f 0200 	mov.w	r2, #0
   13088:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1308a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   1308e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13092:	2203      	movs	r2, #3
   13094:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   13096:	f240 5378 	movw	r3, #1400	; 0x578
   1309a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309e:	6a1a      	ldr	r2, [r3, #32]
   130a0:	f240 5374 	movw	r3, #1396	; 0x574
   130a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   130aa:	f64c 0394 	movw	r3, #51348	; 0xc894
   130ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b2:	f04f 0200 	mov.w	r2, #0
   130b6:	601a      	str	r2, [r3, #0]
          }
          return;
   130b8:	f001 bbb0 	b.w	1481c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   130bc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	781b      	ldrb	r3, [r3, #0]
   130c6:	2b04      	cmp	r3, #4
   130c8:	d169      	bne.n	1319e <auto_nav+0xb26>
       {
          nav_stage = 4;
   130ca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d2:	2204      	movs	r2, #4
   130d4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   130d6:	2003      	movs	r0, #3
   130d8:	f001 fbae 	bl	14838 <approaching>
   130dc:	4603      	mov	r3, r0
   130de:	2b00      	cmp	r3, #0
   130e0:	d034      	beq.n	1314c <auto_nav+0xad4>
   130e2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   130e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ea:	2203      	movs	r2, #3
   130ec:	701a      	strb	r2, [r3, #0]
   130ee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f6:	781b      	ldrb	r3, [r3, #0]
   130f8:	3301      	adds	r3, #1
   130fa:	b2da      	uxtb	r2, r3
   130fc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13104:	701a      	strb	r2, [r3, #0]
   13106:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1310a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310e:	681a      	ldr	r2, [r3, #0]
   13110:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13118:	601a      	str	r2, [r3, #0]
   1311a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1311e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13122:	681a      	ldr	r2, [r3, #0]
   13124:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312c:	601a      	str	r2, [r3, #0]
   1312e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13136:	2200      	movs	r2, #0
   13138:	801a      	strh	r2, [r3, #0]
   1313a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1313e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13142:	f04f 0200 	mov.w	r2, #0
   13146:	601a      	str	r2, [r3, #0]
   13148:	f001 bb68 	b.w	1481c <auto_nav+0x21a4>
            fly_to(3);
   1314c:	2003      	movs	r0, #3
   1314e:	f001 fca7 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   13152:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315a:	2200      	movs	r2, #0
   1315c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1315e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13166:	f04f 0200 	mov.w	r2, #0
   1316a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1316c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	2203      	movs	r2, #3
   13176:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13178:	f240 5378 	movw	r3, #1400	; 0x578
   1317c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13182:	f240 5374 	movw	r3, #1396	; 0x574
   13186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1318c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13194:	f04f 0200 	mov.w	r2, #0
   13198:	601a      	str	r2, [r3, #0]
          }
          return;
   1319a:	f001 bb3f 	b.w	1481c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1319e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	781b      	ldrb	r3, [r3, #0]
   131a8:	2b05      	cmp	r3, #5
   131aa:	d169      	bne.n	13280 <auto_nav+0xc08>
       {
          nav_stage =5;
   131ac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b4:	2205      	movs	r2, #5
   131b6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   131b8:	2004      	movs	r0, #4
   131ba:	f001 fb3d 	bl	14838 <approaching>
   131be:	4603      	mov	r3, r0
   131c0:	2b00      	cmp	r3, #0
   131c2:	d034      	beq.n	1322e <auto_nav+0xbb6>
   131c4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131cc:	2204      	movs	r2, #4
   131ce:	701a      	strb	r2, [r3, #0]
   131d0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	781b      	ldrb	r3, [r3, #0]
   131da:	3301      	adds	r3, #1
   131dc:	b2da      	uxtb	r2, r3
   131de:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   131e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e6:	701a      	strb	r2, [r3, #0]
   131e8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   131ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f0:	681a      	ldr	r2, [r3, #0]
   131f2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   131f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fa:	601a      	str	r2, [r3, #0]
   131fc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13204:	681a      	ldr	r2, [r3, #0]
   13206:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1320a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320e:	601a      	str	r2, [r3, #0]
   13210:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13218:	2200      	movs	r2, #0
   1321a:	801a      	strh	r2, [r3, #0]
   1321c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13224:	f04f 0200 	mov.w	r2, #0
   13228:	601a      	str	r2, [r3, #0]
   1322a:	f001 baf7 	b.w	1481c <auto_nav+0x21a4>
            fly_to(4);
   1322e:	2004      	movs	r0, #4
   13230:	f001 fc36 	bl	14aa0 <fly_to>
            auto_pitch = FALSE;
   13234:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323c:	2200      	movs	r2, #0
   1323e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13240:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13248:	f04f 0200 	mov.w	r2, #0
   1324c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1324e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13256:	2203      	movs	r2, #3
   13258:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1325a:	f240 5378 	movw	r3, #1400	; 0x578
   1325e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13264:	f240 5374 	movw	r3, #1396	; 0x574
   13268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1326e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13276:	f04f 0200 	mov.w	r2, #0
   1327a:	601a      	str	r2, [r3, #0]
          }
          return;
   1327c:	f001 bace 	b.w	1481c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13280:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	781b      	ldrb	r3, [r3, #0]
   1328a:	2b06      	cmp	r3, #6
   1328c:	d16f      	bne.n	1336e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1328e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13296:	2206      	movs	r2, #6
   13298:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1329a:	2005      	movs	r0, #5
   1329c:	f001 facc 	bl	14838 <approaching>
   132a0:	4603      	mov	r3, r0
   132a2:	2b00      	cmp	r3, #0
   132a4:	d034      	beq.n	13310 <auto_nav+0xc98>
   132a6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   132aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ae:	2205      	movs	r2, #5
   132b0:	701a      	strb	r2, [r3, #0]
   132b2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ba:	781b      	ldrb	r3, [r3, #0]
   132bc:	3301      	adds	r3, #1
   132be:	b2da      	uxtb	r2, r3
   132c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   132c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c8:	701a      	strb	r2, [r3, #0]
   132ca:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   132ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d2:	681a      	ldr	r2, [r3, #0]
   132d4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   132d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132dc:	601a      	str	r2, [r3, #0]
   132de:	f64c 3300 	movw	r3, #51968	; 0xcb00
   132e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e6:	681a      	ldr	r2, [r3, #0]
   132e8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f0:	601a      	str	r2, [r3, #0]
   132f2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   132f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fa:	2200      	movs	r2, #0
   132fc:	801a      	strh	r2, [r3, #0]
   132fe:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13306:	f04f 0200 	mov.w	r2, #0
   1330a:	601a      	str	r2, [r3, #0]
   1330c:	f001 ba86 	b.w	1481c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13310:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13318:	781b      	ldrb	r3, [r3, #0]
   1331a:	4618      	mov	r0, r3
   1331c:	2105      	movs	r1, #5
   1331e:	f001 fbe1 	bl	14ae4 <route_to>
            auto_pitch = FALSE;
   13322:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1332a:	2200      	movs	r2, #0
   1332c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1332e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13336:	f04f 0200 	mov.w	r2, #0
   1333a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1333c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13344:	2203      	movs	r2, #3
   13346:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13348:	f240 5378 	movw	r3, #1400	; 0x578
   1334c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13352:	f240 5374 	movw	r3, #1396	; 0x574
   13356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1335a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1335c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13364:	f04f 0200 	mov.w	r2, #0
   13368:	601a      	str	r2, [r3, #0]
          }
          return;
   1336a:	f001 ba57 	b.w	1481c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1336e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13376:	781b      	ldrb	r3, [r3, #0]
   13378:	2b07      	cmp	r3, #7
   1337a:	d106      	bne.n	1338a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1337c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13384:	2207      	movs	r2, #7
   13386:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13388:	e50a      	b.n	12da0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1338a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	781b      	ldrb	r3, [r3, #0]
   13394:	2b08      	cmp	r3, #8
   13396:	f041 8241 	bne.w	1481c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1339a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1339e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a2:	2208      	movs	r2, #8
   133a4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   133a6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ae:	781b      	ldrb	r3, [r3, #0]
   133b0:	3301      	adds	r3, #1
   133b2:	b2da      	uxtb	r2, r3
   133b4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	701a      	strb	r2, [r3, #0]
   133be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   133c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c6:	2200      	movs	r2, #0
   133c8:	701a      	strb	r2, [r3, #0]
   133ca:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   133ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d2:	2200      	movs	r2, #0
   133d4:	801a      	strh	r2, [r3, #0]
   133d6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   133da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133de:	681a      	ldr	r2, [r3, #0]
   133e0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   133e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e8:	601a      	str	r2, [r3, #0]
   133ea:	f64c 3300 	movw	r3, #51968	; 0xcb00
   133ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f2:	681a      	ldr	r2, [r3, #0]
   133f4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   133f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133fc:	601a      	str	r2, [r3, #0]
   133fe:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13406:	2200      	movs	r2, #0
   13408:	801a      	strh	r2, [r3, #0]
   1340a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1340e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13412:	f04f 0200 	mov.w	r2, #0
   13416:	601a      	str	r2, [r3, #0]
   13418:	f001 ba00 	b.w	1481c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1341c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13424:	781b      	ldrb	r3, [r3, #0]
   13426:	2b03      	cmp	r3, #3
   13428:	f040 8388 	bne.w	13b3c <auto_nav+0x14c4>
{
    nav_block = 3;
   1342c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13434:	2203      	movs	r2, #3
   13436:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13438:	f24c 5330 	movw	r3, #50480	; 0xc530
   1343c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13440:	781b      	ldrb	r3, [r3, #0]
   13442:	2b00      	cmp	r3, #0
   13444:	d007      	beq.n	13456 <auto_nav+0xdde>
   13446:	f24c 5330 	movw	r3, #50480	; 0xc530
   1344a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1344e:	2200      	movs	r2, #0
   13450:	701a      	strb	r2, [r3, #0]
   13452:	2301      	movs	r3, #1
   13454:	e000      	b.n	13458 <auto_nav+0xde0>
   13456:	2300      	movs	r3, #0
   13458:	2b00      	cmp	r3, #0
   1345a:	d034      	beq.n	134c6 <auto_nav+0xe4e>
   1345c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13464:	2204      	movs	r2, #4
   13466:	701a      	strb	r2, [r3, #0]
   13468:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1346c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13470:	2200      	movs	r2, #0
   13472:	701a      	strb	r2, [r3, #0]
   13474:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347c:	2200      	movs	r2, #0
   1347e:	801a      	strh	r2, [r3, #0]
   13480:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13488:	681a      	ldr	r2, [r3, #0]
   1348a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1348e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13492:	601a      	str	r2, [r3, #0]
   13494:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349c:	681a      	ldr	r2, [r3, #0]
   1349e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   134a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a6:	601a      	str	r2, [r3, #0]
   134a8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   134ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b0:	2200      	movs	r2, #0
   134b2:	801a      	strh	r2, [r3, #0]
   134b4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   134b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134bc:	f04f 0200 	mov.w	r2, #0
   134c0:	601a      	str	r2, [r3, #0]
   134c2:	f001 b9ab 	b.w	1481c <auto_nav+0x21a4>
    if(nav_stage == 0)
   134c6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   134ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ce:	781b      	ldrb	r3, [r3, #0]
   134d0:	2b00      	cmp	r3, #0
   134d2:	f040 82ea 	bne.w	13aaa <auto_nav+0x1432>
    {
        nav_stage = 0;
   134d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   134da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134de:	2200      	movs	r2, #0
   134e0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   134e2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   134e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ea:	781b      	ldrb	r3, [r3, #0]
   134ec:	2b02      	cmp	r3, #2
   134ee:	f040 81a5 	bne.w	1383c <auto_nav+0x11c4>
   134f2:	f24c 6350 	movw	r3, #50768	; 0xc650
   134f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134fa:	88db      	ldrh	r3, [r3, #6]
   134fc:	84fb      	strh	r3, [r7, #38]	; 0x26
   134fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13502:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13506:	dc04      	bgt.n	13512 <auto_nav+0xe9a>
   13508:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1350c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13510:	da7e      	bge.n	13610 <auto_nav+0xf98>
   13512:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13516:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1351a:	681b      	ldr	r3, [r3, #0]
   1351c:	4618      	mov	r0, r3
   1351e:	f004 fb67 	bl	17bf0 <__aeabi_f2d>
   13522:	4604      	mov	r4, r0
   13524:	460d      	mov	r5, r1
   13526:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1352a:	4618      	mov	r0, r3
   1352c:	f004 ffa0 	bl	18470 <__aeabi_i2f>
   13530:	4603      	mov	r3, r0
   13532:	4618      	mov	r0, r3
   13534:	f04f 0100 	mov.w	r1, #0
   13538:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1353c:	f005 f8a0 	bl	18680 <__aeabi_fdiv>
   13540:	4603      	mov	r3, r0
   13542:	4618      	mov	r0, r3
   13544:	f004 fb54 	bl	17bf0 <__aeabi_f2d>
   13548:	4602      	mov	r2, r0
   1354a:	460b      	mov	r3, r1
   1354c:	4610      	mov	r0, r2
   1354e:	4619      	mov	r1, r3
   13550:	f04f 0200 	mov.w	r2, #0
   13554:	f04f 0300 	mov.w	r3, #0
   13558:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1355c:	f004 fb9c 	bl	17c98 <__aeabi_dmul>
   13560:	4602      	mov	r2, r0
   13562:	460b      	mov	r3, r1
   13564:	4610      	mov	r0, r2
   13566:	4619      	mov	r1, r3
   13568:	f04f 0200 	mov.w	r2, #0
   1356c:	f04f 0300 	mov.w	r3, #0
   13570:	f004 f9e0 	bl	17934 <__adddf3>
   13574:	4602      	mov	r2, r0
   13576:	460b      	mov	r3, r1
   13578:	4620      	mov	r0, r4
   1357a:	4629      	mov	r1, r5
   1357c:	f004 f9da 	bl	17934 <__adddf3>
   13580:	4602      	mov	r2, r0
   13582:	460b      	mov	r3, r1
   13584:	4610      	mov	r0, r2
   13586:	4619      	mov	r1, r3
   13588:	f004 fe68 	bl	1825c <__aeabi_d2f>
   1358c:	4602      	mov	r2, r0
   1358e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13596:	601a      	str	r2, [r3, #0]
   13598:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1359c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135a0:	681b      	ldr	r3, [r3, #0]
   135a2:	4618      	mov	r0, r3
   135a4:	f04f 0100 	mov.w	r1, #0
   135a8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   135ac:	f005 f95c 	bl	18868 <__aeabi_fcmple>
   135b0:	4603      	mov	r3, r0
   135b2:	2b00      	cmp	r3, #0
   135b4:	d005      	beq.n	135c2 <auto_nav+0xf4a>
   135b6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135be:	681a      	ldr	r2, [r3, #0]
   135c0:	e003      	b.n	135ca <auto_nav+0xf52>
   135c2:	f04f 0200 	mov.w	r2, #0
   135c6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135ca:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d2:	601a      	str	r2, [r3, #0]
   135d4:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135dc:	681b      	ldr	r3, [r3, #0]
   135de:	4618      	mov	r0, r3
   135e0:	f04f 0100 	mov.w	r1, #0
   135e4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135e8:	f005 f948 	bl	1887c <__aeabi_fcmpge>
   135ec:	4603      	mov	r3, r0
   135ee:	2b00      	cmp	r3, #0
   135f0:	d005      	beq.n	135fe <auto_nav+0xf86>
   135f2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135fa:	681a      	ldr	r2, [r3, #0]
   135fc:	e003      	b.n	13606 <auto_nav+0xf8e>
   135fe:	f04f 0200 	mov.w	r2, #0
   13602:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13606:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1360a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1360e:	601a      	str	r2, [r3, #0]
   13610:	f24c 6350 	movw	r3, #50768	; 0xc650
   13614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13618:	889b      	ldrh	r3, [r3, #4]
   1361a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1361c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13620:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13624:	dc04      	bgt.n	13630 <auto_nav+0xfb8>
   13626:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1362a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1362e:	da7e      	bge.n	1372e <auto_nav+0x10b6>
   13630:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13638:	681b      	ldr	r3, [r3, #0]
   1363a:	4618      	mov	r0, r3
   1363c:	f004 fad8 	bl	17bf0 <__aeabi_f2d>
   13640:	4604      	mov	r4, r0
   13642:	460d      	mov	r5, r1
   13644:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13648:	4618      	mov	r0, r3
   1364a:	f004 ff11 	bl	18470 <__aeabi_i2f>
   1364e:	4603      	mov	r3, r0
   13650:	4618      	mov	r0, r3
   13652:	f04f 0100 	mov.w	r1, #0
   13656:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1365a:	f005 f811 	bl	18680 <__aeabi_fdiv>
   1365e:	4603      	mov	r3, r0
   13660:	4618      	mov	r0, r3
   13662:	f004 fac5 	bl	17bf0 <__aeabi_f2d>
   13666:	4602      	mov	r2, r0
   13668:	460b      	mov	r3, r1
   1366a:	4610      	mov	r0, r2
   1366c:	4619      	mov	r1, r3
   1366e:	f04f 0200 	mov.w	r2, #0
   13672:	f04f 0300 	mov.w	r3, #0
   13676:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1367a:	f004 fb0d 	bl	17c98 <__aeabi_dmul>
   1367e:	4602      	mov	r2, r0
   13680:	460b      	mov	r3, r1
   13682:	4610      	mov	r0, r2
   13684:	4619      	mov	r1, r3
   13686:	f04f 0200 	mov.w	r2, #0
   1368a:	f04f 0300 	mov.w	r3, #0
   1368e:	f004 f951 	bl	17934 <__adddf3>
   13692:	4602      	mov	r2, r0
   13694:	460b      	mov	r3, r1
   13696:	4620      	mov	r0, r4
   13698:	4629      	mov	r1, r5
   1369a:	f004 f94b 	bl	17934 <__adddf3>
   1369e:	4602      	mov	r2, r0
   136a0:	460b      	mov	r3, r1
   136a2:	4610      	mov	r0, r2
   136a4:	4619      	mov	r1, r3
   136a6:	f004 fdd9 	bl	1825c <__aeabi_d2f>
   136aa:	4602      	mov	r2, r0
   136ac:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136b4:	601a      	str	r2, [r3, #0]
   136b6:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136be:	681b      	ldr	r3, [r3, #0]
   136c0:	4618      	mov	r0, r3
   136c2:	f04f 0100 	mov.w	r1, #0
   136c6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   136ca:	f005 f8cd 	bl	18868 <__aeabi_fcmple>
   136ce:	4603      	mov	r3, r0
   136d0:	2b00      	cmp	r3, #0
   136d2:	d005      	beq.n	136e0 <auto_nav+0x1068>
   136d4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136dc:	681a      	ldr	r2, [r3, #0]
   136de:	e003      	b.n	136e8 <auto_nav+0x1070>
   136e0:	f04f 0200 	mov.w	r2, #0
   136e4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   136e8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136f0:	601a      	str	r2, [r3, #0]
   136f2:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136fa:	681b      	ldr	r3, [r3, #0]
   136fc:	4618      	mov	r0, r3
   136fe:	f04f 0100 	mov.w	r1, #0
   13702:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13706:	f005 f8b9 	bl	1887c <__aeabi_fcmpge>
   1370a:	4603      	mov	r3, r0
   1370c:	2b00      	cmp	r3, #0
   1370e:	d005      	beq.n	1371c <auto_nav+0x10a4>
   13710:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13718:	681a      	ldr	r2, [r3, #0]
   1371a:	e003      	b.n	13724 <auto_nav+0x10ac>
   1371c:	f04f 0200 	mov.w	r2, #0
   13720:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13724:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1372c:	601a      	str	r2, [r3, #0]
   1372e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13736:	2203      	movs	r2, #3
   13738:	701a      	strb	r2, [r3, #0]
   1373a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1373e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13742:	885b      	ldrh	r3, [r3, #2]
   13744:	847b      	strh	r3, [r7, #34]	; 0x22
   13746:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1374a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1374e:	dc04      	bgt.n	1375a <auto_nav+0x10e2>
   13750:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13754:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13758:	da70      	bge.n	1383c <auto_nav+0x11c4>
   1375a:	f240 5374 	movw	r3, #1396	; 0x574
   1375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13762:	681b      	ldr	r3, [r3, #0]
   13764:	4618      	mov	r0, r3
   13766:	f004 fa43 	bl	17bf0 <__aeabi_f2d>
   1376a:	4604      	mov	r4, r0
   1376c:	460d      	mov	r5, r1
   1376e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13772:	4618      	mov	r0, r3
   13774:	f004 fe7c 	bl	18470 <__aeabi_i2f>
   13778:	4603      	mov	r3, r0
   1377a:	4618      	mov	r0, r3
   1377c:	f04f 0100 	mov.w	r1, #0
   13780:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13784:	f004 ff7c 	bl	18680 <__aeabi_fdiv>
   13788:	4603      	mov	r3, r0
   1378a:	4618      	mov	r0, r3
   1378c:	f004 fa30 	bl	17bf0 <__aeabi_f2d>
   13790:	4602      	mov	r2, r0
   13792:	460b      	mov	r3, r1
   13794:	f04f 0000 	mov.w	r0, #0
   13798:	f04f 0100 	mov.w	r1, #0
   1379c:	f004 f8c8 	bl	17930 <__aeabi_dsub>
   137a0:	4602      	mov	r2, r0
   137a2:	460b      	mov	r3, r1
   137a4:	4620      	mov	r0, r4
   137a6:	4629      	mov	r1, r5
   137a8:	f004 f8c4 	bl	17934 <__adddf3>
   137ac:	4602      	mov	r2, r0
   137ae:	460b      	mov	r3, r1
   137b0:	4610      	mov	r0, r2
   137b2:	4619      	mov	r1, r3
   137b4:	f004 fd52 	bl	1825c <__aeabi_d2f>
   137b8:	4602      	mov	r2, r0
   137ba:	f240 5374 	movw	r3, #1396	; 0x574
   137be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c2:	601a      	str	r2, [r3, #0]
   137c4:	f240 5374 	movw	r3, #1396	; 0x574
   137c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	4618      	mov	r0, r3
   137d0:	f04f 0100 	mov.w	r1, #0
   137d4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   137d8:	f005 f850 	bl	1887c <__aeabi_fcmpge>
   137dc:	4603      	mov	r3, r0
   137de:	2b00      	cmp	r3, #0
   137e0:	d005      	beq.n	137ee <auto_nav+0x1176>
   137e2:	f240 5374 	movw	r3, #1396	; 0x574
   137e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ea:	681a      	ldr	r2, [r3, #0]
   137ec:	e003      	b.n	137f6 <auto_nav+0x117e>
   137ee:	f04f 0200 	mov.w	r2, #0
   137f2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   137f6:	f240 5374 	movw	r3, #1396	; 0x574
   137fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fe:	601a      	str	r2, [r3, #0]
   13800:	f240 5374 	movw	r3, #1396	; 0x574
   13804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13808:	681b      	ldr	r3, [r3, #0]
   1380a:	4618      	mov	r0, r3
   1380c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13810:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13814:	f005 f828 	bl	18868 <__aeabi_fcmple>
   13818:	4603      	mov	r3, r0
   1381a:	2b00      	cmp	r3, #0
   1381c:	d005      	beq.n	1382a <auto_nav+0x11b2>
   1381e:	f240 5374 	movw	r3, #1396	; 0x574
   13822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13826:	681a      	ldr	r2, [r3, #0]
   13828:	e003      	b.n	13832 <auto_nav+0x11ba>
   1382a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1382e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13832:	f240 5374 	movw	r3, #1396	; 0x574
   13836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1383a:	601a      	str	r2, [r3, #0]
   1383c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13844:	681a      	ldr	r2, [r3, #0]
   13846:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1384a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	4610      	mov	r0, r2
   13852:	4619      	mov	r1, r3
   13854:	f004 fd56 	bl	18304 <__aeabi_fsub>
   13858:	4603      	mov	r3, r0
   1385a:	4618      	mov	r0, r3
   1385c:	f004 f9c8 	bl	17bf0 <__aeabi_f2d>
   13860:	4604      	mov	r4, r0
   13862:	460d      	mov	r5, r1
   13864:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1386c:	681a      	ldr	r2, [r3, #0]
   1386e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13872:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13876:	681b      	ldr	r3, [r3, #0]
   13878:	4610      	mov	r0, r2
   1387a:	4619      	mov	r1, r3
   1387c:	f004 fd42 	bl	18304 <__aeabi_fsub>
   13880:	4603      	mov	r3, r0
   13882:	4618      	mov	r0, r3
   13884:	f004 f9b4 	bl	17bf0 <__aeabi_f2d>
   13888:	4602      	mov	r2, r0
   1388a:	460b      	mov	r3, r1
   1388c:	4620      	mov	r0, r4
   1388e:	4629      	mov	r1, r5
   13890:	f002 fa12 	bl	15cb8 <pp_atan2>
   13894:	4602      	mov	r2, r0
   13896:	460b      	mov	r3, r1
   13898:	4610      	mov	r0, r2
   1389a:	4619      	mov	r1, r3
   1389c:	f004 fcde 	bl	1825c <__aeabi_d2f>
   138a0:	4603      	mov	r3, r0
   138a2:	61fb      	str	r3, [r7, #28]
   138a4:	69f8      	ldr	r0, [r7, #28]
   138a6:	f004 f9a3 	bl	17bf0 <__aeabi_f2d>
   138aa:	4604      	mov	r4, r0
   138ac:	460d      	mov	r5, r1
   138ae:	f64c 3334 	movw	r3, #52020	; 0xcb34
   138b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138b6:	681b      	ldr	r3, [r3, #0]
   138b8:	4618      	mov	r0, r3
   138ba:	f04f 0100 	mov.w	r1, #0
   138be:	f2cc 2148 	movt	r1, #49736	; 0xc248
   138c2:	f004 fe29 	bl	18518 <__aeabi_fmul>
   138c6:	4603      	mov	r3, r0
   138c8:	4618      	mov	r0, r3
   138ca:	f004 f991 	bl	17bf0 <__aeabi_f2d>
   138ce:	4602      	mov	r2, r0
   138d0:	460b      	mov	r3, r1
   138d2:	f04f 0000 	mov.w	r0, #0
   138d6:	f04f 0100 	mov.w	r1, #0
   138da:	f2c4 0114 	movt	r1, #16404	; 0x4014
   138de:	f004 fb05 	bl	17eec <__aeabi_ddiv>
   138e2:	4602      	mov	r2, r0
   138e4:	460b      	mov	r3, r1
   138e6:	4620      	mov	r0, r4
   138e8:	4629      	mov	r1, r5
   138ea:	f004 f823 	bl	17934 <__adddf3>
   138ee:	4602      	mov	r2, r0
   138f0:	460b      	mov	r3, r1
   138f2:	4610      	mov	r0, r2
   138f4:	4619      	mov	r1, r3
   138f6:	f004 fcb1 	bl	1825c <__aeabi_d2f>
   138fa:	4603      	mov	r3, r0
   138fc:	61bb      	str	r3, [r7, #24]
   138fe:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13906:	681b      	ldr	r3, [r3, #0]
   13908:	4618      	mov	r0, r3
   1390a:	f004 f971 	bl	17bf0 <__aeabi_f2d>
   1390e:	4604      	mov	r4, r0
   13910:	460d      	mov	r5, r1
   13912:	69b8      	ldr	r0, [r7, #24]
   13914:	f004 f96c 	bl	17bf0 <__aeabi_f2d>
   13918:	4602      	mov	r2, r0
   1391a:	460b      	mov	r3, r1
   1391c:	4610      	mov	r0, r2
   1391e:	4619      	mov	r1, r3
   13920:	a3b1      	add	r3, pc, #708	; (adr r3, 13be8 <auto_nav+0x1570>)
   13922:	e9d3 2300 	ldrd	r2, r3, [r3]
   13926:	f004 f805 	bl	17934 <__adddf3>
   1392a:	4602      	mov	r2, r0
   1392c:	460b      	mov	r3, r1
   1392e:	4610      	mov	r0, r2
   13930:	4619      	mov	r1, r3
   13932:	f002 fa81 	bl	15e38 <pp_sin>
   13936:	4602      	mov	r2, r0
   13938:	460b      	mov	r3, r1
   1393a:	4610      	mov	r0, r2
   1393c:	4619      	mov	r1, r3
   1393e:	f04f 0200 	mov.w	r2, #0
   13942:	f04f 0300 	mov.w	r3, #0
   13946:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1394a:	f004 f9a5 	bl	17c98 <__aeabi_dmul>
   1394e:	4602      	mov	r2, r0
   13950:	460b      	mov	r3, r1
   13952:	4620      	mov	r0, r4
   13954:	4629      	mov	r1, r5
   13956:	f003 ffed 	bl	17934 <__adddf3>
   1395a:	4602      	mov	r2, r0
   1395c:	460b      	mov	r3, r1
   1395e:	4610      	mov	r0, r2
   13960:	4619      	mov	r1, r3
   13962:	f004 fc7b 	bl	1825c <__aeabi_d2f>
   13966:	4606      	mov	r6, r0
   13968:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1396c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13970:	681b      	ldr	r3, [r3, #0]
   13972:	4618      	mov	r0, r3
   13974:	f004 f93c 	bl	17bf0 <__aeabi_f2d>
   13978:	4604      	mov	r4, r0
   1397a:	460d      	mov	r5, r1
   1397c:	69b8      	ldr	r0, [r7, #24]
   1397e:	f004 f937 	bl	17bf0 <__aeabi_f2d>
   13982:	4602      	mov	r2, r0
   13984:	460b      	mov	r3, r1
   13986:	4610      	mov	r0, r2
   13988:	4619      	mov	r1, r3
   1398a:	f002 fa55 	bl	15e38 <pp_sin>
   1398e:	4602      	mov	r2, r0
   13990:	460b      	mov	r3, r1
   13992:	4610      	mov	r0, r2
   13994:	4619      	mov	r1, r3
   13996:	f04f 0200 	mov.w	r2, #0
   1399a:	f04f 0300 	mov.w	r3, #0
   1399e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   139a2:	f004 f979 	bl	17c98 <__aeabi_dmul>
   139a6:	4602      	mov	r2, r0
   139a8:	460b      	mov	r3, r1
   139aa:	4620      	mov	r0, r4
   139ac:	4629      	mov	r1, r5
   139ae:	f003 ffc1 	bl	17934 <__adddf3>
   139b2:	4602      	mov	r2, r0
   139b4:	460b      	mov	r3, r1
   139b6:	4610      	mov	r0, r2
   139b8:	4619      	mov	r1, r3
   139ba:	f004 fc4f 	bl	1825c <__aeabi_d2f>
   139be:	4603      	mov	r3, r0
   139c0:	4630      	mov	r0, r6
   139c2:	4619      	mov	r1, r3
   139c4:	f001 f81c 	bl	14a00 <fly_to_xy>
   139c8:	69b8      	ldr	r0, [r7, #24]
   139ca:	f004 f911 	bl	17bf0 <__aeabi_f2d>
   139ce:	4602      	mov	r2, r0
   139d0:	460b      	mov	r3, r1
   139d2:	a185      	add	r1, pc, #532	; (adr r1, 13be8 <auto_nav+0x1570>)
   139d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   139d8:	f003 ffaa 	bl	17930 <__aeabi_dsub>
   139dc:	4602      	mov	r2, r0
   139de:	460b      	mov	r3, r1
   139e0:	4610      	mov	r0, r2
   139e2:	4619      	mov	r1, r3
   139e4:	a382      	add	r3, pc, #520	; (adr r3, 13bf0 <auto_nav+0x1578>)
   139e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   139ea:	f004 fa7f 	bl	17eec <__aeabi_ddiv>
   139ee:	4602      	mov	r2, r0
   139f0:	460b      	mov	r3, r1
   139f2:	4610      	mov	r0, r2
   139f4:	4619      	mov	r1, r3
   139f6:	f04f 0200 	mov.w	r2, #0
   139fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   139fe:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13a02:	f004 f949 	bl	17c98 <__aeabi_dmul>
   13a06:	4602      	mov	r2, r0
   13a08:	460b      	mov	r3, r1
   13a0a:	4610      	mov	r0, r2
   13a0c:	4619      	mov	r1, r3
   13a0e:	f004 fc25 	bl	1825c <__aeabi_d2f>
   13a12:	4602      	mov	r2, r0
   13a14:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1c:	601a      	str	r2, [r3, #0]
   13a1e:	e012      	b.n	13a46 <auto_nav+0x13ce>
   13a20:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a28:	681b      	ldr	r3, [r3, #0]
   13a2a:	4618      	mov	r0, r3
   13a2c:	f04f 0100 	mov.w	r1, #0
   13a30:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a34:	f004 fc68 	bl	18308 <__addsf3>
   13a38:	4603      	mov	r3, r0
   13a3a:	461a      	mov	r2, r3
   13a3c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a44:	601a      	str	r2, [r3, #0]
   13a46:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a4e:	681b      	ldr	r3, [r3, #0]
   13a50:	4618      	mov	r0, r3
   13a52:	f04f 0100 	mov.w	r1, #0
   13a56:	f004 fefd 	bl	18854 <__aeabi_fcmplt>
   13a5a:	4603      	mov	r3, r0
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d1df      	bne.n	13a20 <auto_nav+0x13a8>
   13a60:	e012      	b.n	13a88 <auto_nav+0x1410>
   13a62:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a6a:	681b      	ldr	r3, [r3, #0]
   13a6c:	4618      	mov	r0, r3
   13a6e:	f04f 0100 	mov.w	r1, #0
   13a72:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a76:	f004 fc45 	bl	18304 <__aeabi_fsub>
   13a7a:	4603      	mov	r3, r0
   13a7c:	461a      	mov	r2, r3
   13a7e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a86:	601a      	str	r2, [r3, #0]
   13a88:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a90:	681b      	ldr	r3, [r3, #0]
   13a92:	4618      	mov	r0, r3
   13a94:	f04f 0100 	mov.w	r1, #0
   13a98:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a9c:	f004 feee 	bl	1887c <__aeabi_fcmpge>
   13aa0:	4603      	mov	r3, r0
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	d1dd      	bne.n	13a62 <auto_nav+0x13ea>
        return;
   13aa6:	f000 beb9 	b.w	1481c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13aaa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab2:	781b      	ldrb	r3, [r3, #0]
   13ab4:	2b01      	cmp	r3, #1
   13ab6:	f040 86b1 	bne.w	1481c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13aba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac2:	2201      	movs	r2, #1
   13ac4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ac6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ace:	781b      	ldrb	r3, [r3, #0]
   13ad0:	3301      	adds	r3, #1
   13ad2:	b2da      	uxtb	r2, r3
   13ad4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	701a      	strb	r2, [r3, #0]
   13ade:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae6:	2200      	movs	r2, #0
   13ae8:	701a      	strb	r2, [r3, #0]
   13aea:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af2:	2200      	movs	r2, #0
   13af4:	801a      	strh	r2, [r3, #0]
   13af6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13afe:	681a      	ldr	r2, [r3, #0]
   13b00:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b08:	601a      	str	r2, [r3, #0]
   13b0a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b12:	681a      	ldr	r2, [r3, #0]
   13b14:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b1c:	601a      	str	r2, [r3, #0]
   13b1e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b26:	2200      	movs	r2, #0
   13b28:	801a      	strh	r2, [r3, #0]
   13b2a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b32:	f04f 0200 	mov.w	r2, #0
   13b36:	601a      	str	r2, [r3, #0]
   13b38:	f000 be70 	b.w	1481c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13b3c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b44:	781b      	ldrb	r3, [r3, #0]
   13b46:	2b04      	cmp	r3, #4
   13b48:	f040 8202 	bne.w	13f50 <auto_nav+0x18d8>
{
    nav_block = 4;
   13b4c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b54:	2204      	movs	r2, #4
   13b56:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13b58:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b60:	781b      	ldrb	r3, [r3, #0]
   13b62:	2b00      	cmp	r3, #0
   13b64:	d007      	beq.n	13b76 <auto_nav+0x14fe>
   13b66:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b6e:	2200      	movs	r2, #0
   13b70:	701a      	strb	r2, [r3, #0]
   13b72:	2301      	movs	r3, #1
   13b74:	e000      	b.n	13b78 <auto_nav+0x1500>
   13b76:	2300      	movs	r3, #0
   13b78:	2b00      	cmp	r3, #0
   13b7a:	d03d      	beq.n	13bf8 <auto_nav+0x1580>
   13b7c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b84:	2205      	movs	r2, #5
   13b86:	701a      	strb	r2, [r3, #0]
   13b88:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b90:	2200      	movs	r2, #0
   13b92:	701a      	strb	r2, [r3, #0]
   13b94:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	2200      	movs	r2, #0
   13b9e:	801a      	strh	r2, [r3, #0]
   13ba0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ba8:	681a      	ldr	r2, [r3, #0]
   13baa:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bb2:	601a      	str	r2, [r3, #0]
   13bb4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bbc:	681a      	ldr	r2, [r3, #0]
   13bbe:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc6:	601a      	str	r2, [r3, #0]
   13bc8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd0:	2200      	movs	r2, #0
   13bd2:	801a      	strh	r2, [r3, #0]
   13bd4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bdc:	f04f 0200 	mov.w	r2, #0
   13be0:	601a      	str	r2, [r3, #0]
   13be2:	f000 be1b 	b.w	1481c <auto_nav+0x21a4>
   13be6:	bf00      	nop
   13be8:	54442d18 	.word	0x54442d18
   13bec:	3ff921fb 	.word	0x3ff921fb
   13bf0:	54442d18 	.word	0x54442d18
   13bf4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13bf8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	2b00      	cmp	r3, #0
   13c04:	f040 815b 	bne.w	13ebe <auto_nav+0x1846>
    {
        nav_stage = 0;
   13c08:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c10:	2200      	movs	r2, #0
   13c12:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13c14:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c1c:	2200      	movs	r2, #0
   13c1e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13c20:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c28:	f04f 0200 	mov.w	r2, #0
   13c2c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13c2e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c36:	2203      	movs	r2, #3
   13c38:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13c3a:	f240 5378 	movw	r3, #1400	; 0x578
   13c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c42:	689a      	ldr	r2, [r3, #8]
   13c44:	f240 5374 	movw	r3, #1396	; 0x574
   13c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c4c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13c4e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c56:	f04f 0200 	mov.w	r2, #0
   13c5a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13c5c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c64:	681a      	ldr	r2, [r3, #0]
   13c66:	f240 5378 	movw	r3, #1400	; 0x578
   13c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c6e:	685b      	ldr	r3, [r3, #4]
   13c70:	4610      	mov	r0, r2
   13c72:	4619      	mov	r1, r3
   13c74:	f004 fb46 	bl	18304 <__aeabi_fsub>
   13c78:	4603      	mov	r3, r0
   13c7a:	4618      	mov	r0, r3
   13c7c:	f003 ffb8 	bl	17bf0 <__aeabi_f2d>
   13c80:	4604      	mov	r4, r0
   13c82:	460d      	mov	r5, r1
   13c84:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c8c:	681a      	ldr	r2, [r3, #0]
   13c8e:	f240 5378 	movw	r3, #1400	; 0x578
   13c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c96:	681b      	ldr	r3, [r3, #0]
   13c98:	4610      	mov	r0, r2
   13c9a:	4619      	mov	r1, r3
   13c9c:	f004 fb32 	bl	18304 <__aeabi_fsub>
   13ca0:	4603      	mov	r3, r0
   13ca2:	4618      	mov	r0, r3
   13ca4:	f003 ffa4 	bl	17bf0 <__aeabi_f2d>
   13ca8:	4602      	mov	r2, r0
   13caa:	460b      	mov	r3, r1
   13cac:	4620      	mov	r0, r4
   13cae:	4629      	mov	r1, r5
   13cb0:	f002 f802 	bl	15cb8 <pp_atan2>
   13cb4:	4602      	mov	r2, r0
   13cb6:	460b      	mov	r3, r1
   13cb8:	4610      	mov	r0, r2
   13cba:	4619      	mov	r1, r3
   13cbc:	f004 face 	bl	1825c <__aeabi_d2f>
   13cc0:	4603      	mov	r3, r0
   13cc2:	617b      	str	r3, [r7, #20]
   13cc4:	6978      	ldr	r0, [r7, #20]
   13cc6:	f003 ff93 	bl	17bf0 <__aeabi_f2d>
   13cca:	4604      	mov	r4, r0
   13ccc:	460d      	mov	r5, r1
   13cce:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cd6:	681b      	ldr	r3, [r3, #0]
   13cd8:	4618      	mov	r0, r3
   13cda:	f04f 0100 	mov.w	r1, #0
   13cde:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13ce2:	f004 fc19 	bl	18518 <__aeabi_fmul>
   13ce6:	4603      	mov	r3, r0
   13ce8:	4618      	mov	r0, r3
   13cea:	f003 ff81 	bl	17bf0 <__aeabi_f2d>
   13cee:	4602      	mov	r2, r0
   13cf0:	460b      	mov	r3, r1
   13cf2:	f04f 0000 	mov.w	r0, #0
   13cf6:	f04f 0100 	mov.w	r1, #0
   13cfa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13cfe:	f004 f8f5 	bl	17eec <__aeabi_ddiv>
   13d02:	4602      	mov	r2, r0
   13d04:	460b      	mov	r3, r1
   13d06:	4620      	mov	r0, r4
   13d08:	4629      	mov	r1, r5
   13d0a:	f003 fe13 	bl	17934 <__adddf3>
   13d0e:	4602      	mov	r2, r0
   13d10:	460b      	mov	r3, r1
   13d12:	4610      	mov	r0, r2
   13d14:	4619      	mov	r1, r3
   13d16:	f004 faa1 	bl	1825c <__aeabi_d2f>
   13d1a:	4603      	mov	r3, r0
   13d1c:	613b      	str	r3, [r7, #16]
   13d1e:	f240 5378 	movw	r3, #1400	; 0x578
   13d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d26:	681b      	ldr	r3, [r3, #0]
   13d28:	4618      	mov	r0, r3
   13d2a:	f003 ff61 	bl	17bf0 <__aeabi_f2d>
   13d2e:	4604      	mov	r4, r0
   13d30:	460d      	mov	r5, r1
   13d32:	6938      	ldr	r0, [r7, #16]
   13d34:	f003 ff5c 	bl	17bf0 <__aeabi_f2d>
   13d38:	4602      	mov	r2, r0
   13d3a:	460b      	mov	r3, r1
   13d3c:	4610      	mov	r0, r2
   13d3e:	4619      	mov	r1, r3
   13d40:	a3af      	add	r3, pc, #700	; (adr r3, 14000 <auto_nav+0x1988>)
   13d42:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d46:	f003 fdf5 	bl	17934 <__adddf3>
   13d4a:	4602      	mov	r2, r0
   13d4c:	460b      	mov	r3, r1
   13d4e:	4610      	mov	r0, r2
   13d50:	4619      	mov	r1, r3
   13d52:	f002 f871 	bl	15e38 <pp_sin>
   13d56:	4602      	mov	r2, r0
   13d58:	460b      	mov	r3, r1
   13d5a:	4610      	mov	r0, r2
   13d5c:	4619      	mov	r1, r3
   13d5e:	a3aa      	add	r3, pc, #680	; (adr r3, 14008 <auto_nav+0x1990>)
   13d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d64:	f003 ff98 	bl	17c98 <__aeabi_dmul>
   13d68:	4602      	mov	r2, r0
   13d6a:	460b      	mov	r3, r1
   13d6c:	4620      	mov	r0, r4
   13d6e:	4629      	mov	r1, r5
   13d70:	f003 fde0 	bl	17934 <__adddf3>
   13d74:	4602      	mov	r2, r0
   13d76:	460b      	mov	r3, r1
   13d78:	4610      	mov	r0, r2
   13d7a:	4619      	mov	r1, r3
   13d7c:	f004 fa6e 	bl	1825c <__aeabi_d2f>
   13d80:	4606      	mov	r6, r0
   13d82:	f240 5378 	movw	r3, #1400	; 0x578
   13d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d8a:	685b      	ldr	r3, [r3, #4]
   13d8c:	4618      	mov	r0, r3
   13d8e:	f003 ff2f 	bl	17bf0 <__aeabi_f2d>
   13d92:	4604      	mov	r4, r0
   13d94:	460d      	mov	r5, r1
   13d96:	6938      	ldr	r0, [r7, #16]
   13d98:	f003 ff2a 	bl	17bf0 <__aeabi_f2d>
   13d9c:	4602      	mov	r2, r0
   13d9e:	460b      	mov	r3, r1
   13da0:	4610      	mov	r0, r2
   13da2:	4619      	mov	r1, r3
   13da4:	f002 f848 	bl	15e38 <pp_sin>
   13da8:	4602      	mov	r2, r0
   13daa:	460b      	mov	r3, r1
   13dac:	4610      	mov	r0, r2
   13dae:	4619      	mov	r1, r3
   13db0:	a395      	add	r3, pc, #596	; (adr r3, 14008 <auto_nav+0x1990>)
   13db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13db6:	f003 ff6f 	bl	17c98 <__aeabi_dmul>
   13dba:	4602      	mov	r2, r0
   13dbc:	460b      	mov	r3, r1
   13dbe:	4620      	mov	r0, r4
   13dc0:	4629      	mov	r1, r5
   13dc2:	f003 fdb7 	bl	17934 <__adddf3>
   13dc6:	4602      	mov	r2, r0
   13dc8:	460b      	mov	r3, r1
   13dca:	4610      	mov	r0, r2
   13dcc:	4619      	mov	r1, r3
   13dce:	f004 fa45 	bl	1825c <__aeabi_d2f>
   13dd2:	4603      	mov	r3, r0
   13dd4:	4630      	mov	r0, r6
   13dd6:	4619      	mov	r1, r3
   13dd8:	f000 fe12 	bl	14a00 <fly_to_xy>
   13ddc:	6938      	ldr	r0, [r7, #16]
   13dde:	f003 ff07 	bl	17bf0 <__aeabi_f2d>
   13de2:	4602      	mov	r2, r0
   13de4:	460b      	mov	r3, r1
   13de6:	a186      	add	r1, pc, #536	; (adr r1, 14000 <auto_nav+0x1988>)
   13de8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13dec:	f003 fda0 	bl	17930 <__aeabi_dsub>
   13df0:	4602      	mov	r2, r0
   13df2:	460b      	mov	r3, r1
   13df4:	4610      	mov	r0, r2
   13df6:	4619      	mov	r1, r3
   13df8:	a385      	add	r3, pc, #532	; (adr r3, 14010 <auto_nav+0x1998>)
   13dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dfe:	f004 f875 	bl	17eec <__aeabi_ddiv>
   13e02:	4602      	mov	r2, r0
   13e04:	460b      	mov	r3, r1
   13e06:	4610      	mov	r0, r2
   13e08:	4619      	mov	r1, r3
   13e0a:	f04f 0200 	mov.w	r2, #0
   13e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13e12:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13e16:	f003 ff3f 	bl	17c98 <__aeabi_dmul>
   13e1a:	4602      	mov	r2, r0
   13e1c:	460b      	mov	r3, r1
   13e1e:	4610      	mov	r0, r2
   13e20:	4619      	mov	r1, r3
   13e22:	f004 fa1b 	bl	1825c <__aeabi_d2f>
   13e26:	4602      	mov	r2, r0
   13e28:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e30:	601a      	str	r2, [r3, #0]
   13e32:	e012      	b.n	13e5a <auto_nav+0x17e2>
   13e34:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3c:	681b      	ldr	r3, [r3, #0]
   13e3e:	4618      	mov	r0, r3
   13e40:	f04f 0100 	mov.w	r1, #0
   13e44:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e48:	f004 fa5e 	bl	18308 <__addsf3>
   13e4c:	4603      	mov	r3, r0
   13e4e:	461a      	mov	r2, r3
   13e50:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e58:	601a      	str	r2, [r3, #0]
   13e5a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e62:	681b      	ldr	r3, [r3, #0]
   13e64:	4618      	mov	r0, r3
   13e66:	f04f 0100 	mov.w	r1, #0
   13e6a:	f004 fcf3 	bl	18854 <__aeabi_fcmplt>
   13e6e:	4603      	mov	r3, r0
   13e70:	2b00      	cmp	r3, #0
   13e72:	d1df      	bne.n	13e34 <auto_nav+0x17bc>
   13e74:	e012      	b.n	13e9c <auto_nav+0x1824>
   13e76:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e7e:	681b      	ldr	r3, [r3, #0]
   13e80:	4618      	mov	r0, r3
   13e82:	f04f 0100 	mov.w	r1, #0
   13e86:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e8a:	f004 fa3b 	bl	18304 <__aeabi_fsub>
   13e8e:	4603      	mov	r3, r0
   13e90:	461a      	mov	r2, r3
   13e92:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e9a:	601a      	str	r2, [r3, #0]
   13e9c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea4:	681b      	ldr	r3, [r3, #0]
   13ea6:	4618      	mov	r0, r3
   13ea8:	f04f 0100 	mov.w	r1, #0
   13eac:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13eb0:	f004 fce4 	bl	1887c <__aeabi_fcmpge>
   13eb4:	4603      	mov	r3, r0
   13eb6:	2b00      	cmp	r3, #0
   13eb8:	d1dd      	bne.n	13e76 <auto_nav+0x17fe>
        return;
   13eba:	f000 bcaf 	b.w	1481c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13ebe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec6:	781b      	ldrb	r3, [r3, #0]
   13ec8:	2b01      	cmp	r3, #1
   13eca:	f040 84a7 	bne.w	1481c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13ece:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed6:	2201      	movs	r2, #1
   13ed8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13eda:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee2:	781b      	ldrb	r3, [r3, #0]
   13ee4:	3301      	adds	r3, #1
   13ee6:	b2da      	uxtb	r2, r3
   13ee8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	701a      	strb	r2, [r3, #0]
   13ef2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	2200      	movs	r2, #0
   13efc:	701a      	strb	r2, [r3, #0]
   13efe:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f06:	2200      	movs	r2, #0
   13f08:	801a      	strh	r2, [r3, #0]
   13f0a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f12:	681a      	ldr	r2, [r3, #0]
   13f14:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f1c:	601a      	str	r2, [r3, #0]
   13f1e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f26:	681a      	ldr	r2, [r3, #0]
   13f28:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f30:	601a      	str	r2, [r3, #0]
   13f32:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3a:	2200      	movs	r2, #0
   13f3c:	801a      	strh	r2, [r3, #0]
   13f3e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f46:	f04f 0200 	mov.w	r2, #0
   13f4a:	601a      	str	r2, [r3, #0]
   13f4c:	f000 bc66 	b.w	1481c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13f50:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	2b05      	cmp	r3, #5
   13f5c:	f040 845e 	bne.w	1481c <auto_nav+0x21a4>
{
    nav_block = 5;
   13f60:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f68:	2205      	movs	r2, #5
   13f6a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13f6c:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f74:	781b      	ldrb	r3, [r3, #0]
   13f76:	2b00      	cmp	r3, #0
   13f78:	d007      	beq.n	13f8a <auto_nav+0x1912>
   13f7a:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f82:	2200      	movs	r2, #0
   13f84:	701a      	strb	r2, [r3, #0]
   13f86:	2301      	movs	r3, #1
   13f88:	e000      	b.n	13f8c <auto_nav+0x1914>
   13f8a:	2300      	movs	r3, #0
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d043      	beq.n	14018 <auto_nav+0x19a0>
   13f90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f98:	2201      	movs	r2, #1
   13f9a:	701a      	strb	r2, [r3, #0]
   13f9c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa4:	2200      	movs	r2, #0
   13fa6:	701a      	strb	r2, [r3, #0]
   13fa8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb0:	2200      	movs	r2, #0
   13fb2:	801a      	strh	r2, [r3, #0]
   13fb4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fbc:	681a      	ldr	r2, [r3, #0]
   13fbe:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc6:	601a      	str	r2, [r3, #0]
   13fc8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd0:	681a      	ldr	r2, [r3, #0]
   13fd2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fda:	601a      	str	r2, [r3, #0]
   13fdc:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe4:	2200      	movs	r2, #0
   13fe6:	801a      	strh	r2, [r3, #0]
   13fe8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff0:	f04f 0200 	mov.w	r2, #0
   13ff4:	601a      	str	r2, [r3, #0]
   13ff6:	f000 bc11 	b.w	1481c <auto_nav+0x21a4>
   13ffa:	bf00      	nop
   13ffc:	f3af 8000 	nop.w
   14000:	54442d18 	.word	0x54442d18
   14004:	3ff921fb 	.word	0x3ff921fb
   14008:	00000000 	.word	0x00000000
   1400c:	4062c000 	.word	0x4062c000
   14010:	54442d18 	.word	0x54442d18
   14014:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   14018:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1401c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14020:	781b      	ldrb	r3, [r3, #0]
   14022:	2b00      	cmp	r3, #0
   14024:	d133      	bne.n	1408e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   14026:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1402a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1402e:	2200      	movs	r2, #0
   14030:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   14032:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403a:	781b      	ldrb	r3, [r3, #0]
   1403c:	3301      	adds	r3, #1
   1403e:	b2da      	uxtb	r2, r3
   14040:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14048:	701a      	strb	r2, [r3, #0]
   1404a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1404e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14052:	681a      	ldr	r2, [r3, #0]
   14054:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1405c:	601a      	str	r2, [r3, #0]
   1405e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14066:	681a      	ldr	r2, [r3, #0]
   14068:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1406c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14070:	601a      	str	r2, [r3, #0]
   14072:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1407a:	2200      	movs	r2, #0
   1407c:	801a      	strh	r2, [r3, #0]
   1407e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14086:	f04f 0200 	mov.w	r2, #0
   1408a:	601a      	str	r2, [r3, #0]
   1408c:	e3c6      	b.n	1481c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   1408e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14096:	781b      	ldrb	r3, [r3, #0]
   14098:	2b01      	cmp	r3, #1
   1409a:	f040 81b5 	bne.w	14408 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1409e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   140a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140a6:	2201      	movs	r2, #1
   140a8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   140aa:	f24c 532f 	movw	r3, #50479	; 0xc52f
   140ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b2:	2200      	movs	r2, #0
   140b4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   140b6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   140ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140be:	f04f 0200 	mov.w	r2, #0
   140c2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   140c4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   140c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140cc:	2203      	movs	r2, #3
   140ce:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   140d0:	f240 5378 	movw	r3, #1400	; 0x578
   140d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d8:	695a      	ldr	r2, [r3, #20]
   140da:	f240 5374 	movw	r3, #1396	; 0x574
   140de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   140e4:	f64c 0394 	movw	r3, #51348	; 0xc894
   140e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ec:	f04f 0200 	mov.w	r2, #0
   140f0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   140f2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   140f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140fa:	681a      	ldr	r2, [r3, #0]
   140fc:	f240 5378 	movw	r3, #1400	; 0x578
   14100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14104:	691b      	ldr	r3, [r3, #16]
   14106:	4610      	mov	r0, r2
   14108:	4619      	mov	r1, r3
   1410a:	f004 f8fb 	bl	18304 <__aeabi_fsub>
   1410e:	4603      	mov	r3, r0
   14110:	4618      	mov	r0, r3
   14112:	f003 fd6d 	bl	17bf0 <__aeabi_f2d>
   14116:	4604      	mov	r4, r0
   14118:	460d      	mov	r5, r1
   1411a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1411e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14122:	681a      	ldr	r2, [r3, #0]
   14124:	f240 5378 	movw	r3, #1400	; 0x578
   14128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1412c:	68db      	ldr	r3, [r3, #12]
   1412e:	4610      	mov	r0, r2
   14130:	4619      	mov	r1, r3
   14132:	f004 f8e7 	bl	18304 <__aeabi_fsub>
   14136:	4603      	mov	r3, r0
   14138:	4618      	mov	r0, r3
   1413a:	f003 fd59 	bl	17bf0 <__aeabi_f2d>
   1413e:	4602      	mov	r2, r0
   14140:	460b      	mov	r3, r1
   14142:	4620      	mov	r0, r4
   14144:	4629      	mov	r1, r5
   14146:	f001 fdb7 	bl	15cb8 <pp_atan2>
   1414a:	4602      	mov	r2, r0
   1414c:	460b      	mov	r3, r1
   1414e:	4610      	mov	r0, r2
   14150:	4619      	mov	r1, r3
   14152:	f004 f883 	bl	1825c <__aeabi_d2f>
   14156:	4603      	mov	r3, r0
   14158:	60fb      	str	r3, [r7, #12]
   1415a:	68f8      	ldr	r0, [r7, #12]
   1415c:	f003 fd48 	bl	17bf0 <__aeabi_f2d>
   14160:	4604      	mov	r4, r0
   14162:	460d      	mov	r5, r1
   14164:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1416c:	681b      	ldr	r3, [r3, #0]
   1416e:	4618      	mov	r0, r3
   14170:	f04f 0100 	mov.w	r1, #0
   14174:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14178:	f004 f9ce 	bl	18518 <__aeabi_fmul>
   1417c:	4603      	mov	r3, r0
   1417e:	4618      	mov	r0, r3
   14180:	f003 fd36 	bl	17bf0 <__aeabi_f2d>
   14184:	4602      	mov	r2, r0
   14186:	460b      	mov	r3, r1
   14188:	f04f 0000 	mov.w	r0, #0
   1418c:	f04f 0100 	mov.w	r1, #0
   14190:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14194:	f003 feaa 	bl	17eec <__aeabi_ddiv>
   14198:	4602      	mov	r2, r0
   1419a:	460b      	mov	r3, r1
   1419c:	4620      	mov	r0, r4
   1419e:	4629      	mov	r1, r5
   141a0:	f003 fbc8 	bl	17934 <__adddf3>
   141a4:	4602      	mov	r2, r0
   141a6:	460b      	mov	r3, r1
   141a8:	4610      	mov	r0, r2
   141aa:	4619      	mov	r1, r3
   141ac:	f004 f856 	bl	1825c <__aeabi_d2f>
   141b0:	4603      	mov	r3, r0
   141b2:	60bb      	str	r3, [r7, #8]
   141b4:	f240 5378 	movw	r3, #1400	; 0x578
   141b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141bc:	68db      	ldr	r3, [r3, #12]
   141be:	4618      	mov	r0, r3
   141c0:	f003 fd16 	bl	17bf0 <__aeabi_f2d>
   141c4:	4604      	mov	r4, r0
   141c6:	460d      	mov	r5, r1
   141c8:	68b8      	ldr	r0, [r7, #8]
   141ca:	f003 fd11 	bl	17bf0 <__aeabi_f2d>
   141ce:	4602      	mov	r2, r0
   141d0:	460b      	mov	r3, r1
   141d2:	4610      	mov	r0, r2
   141d4:	4619      	mov	r1, r3
   141d6:	a388      	add	r3, pc, #544	; (adr r3, 143f8 <auto_nav+0x1d80>)
   141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   141dc:	f003 fbaa 	bl	17934 <__adddf3>
   141e0:	4602      	mov	r2, r0
   141e2:	460b      	mov	r3, r1
   141e4:	4610      	mov	r0, r2
   141e6:	4619      	mov	r1, r3
   141e8:	f001 fe26 	bl	15e38 <pp_sin>
   141ec:	4602      	mov	r2, r0
   141ee:	460b      	mov	r3, r1
   141f0:	4610      	mov	r0, r2
   141f2:	4619      	mov	r1, r3
   141f4:	f04f 0200 	mov.w	r2, #0
   141f8:	f04f 0300 	mov.w	r3, #0
   141fc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14200:	f003 fd4a 	bl	17c98 <__aeabi_dmul>
   14204:	4602      	mov	r2, r0
   14206:	460b      	mov	r3, r1
   14208:	4620      	mov	r0, r4
   1420a:	4629      	mov	r1, r5
   1420c:	f003 fb92 	bl	17934 <__adddf3>
   14210:	4602      	mov	r2, r0
   14212:	460b      	mov	r3, r1
   14214:	4610      	mov	r0, r2
   14216:	4619      	mov	r1, r3
   14218:	f004 f820 	bl	1825c <__aeabi_d2f>
   1421c:	4606      	mov	r6, r0
   1421e:	f240 5378 	movw	r3, #1400	; 0x578
   14222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14226:	691b      	ldr	r3, [r3, #16]
   14228:	4618      	mov	r0, r3
   1422a:	f003 fce1 	bl	17bf0 <__aeabi_f2d>
   1422e:	4604      	mov	r4, r0
   14230:	460d      	mov	r5, r1
   14232:	68b8      	ldr	r0, [r7, #8]
   14234:	f003 fcdc 	bl	17bf0 <__aeabi_f2d>
   14238:	4602      	mov	r2, r0
   1423a:	460b      	mov	r3, r1
   1423c:	4610      	mov	r0, r2
   1423e:	4619      	mov	r1, r3
   14240:	f001 fdfa 	bl	15e38 <pp_sin>
   14244:	4602      	mov	r2, r0
   14246:	460b      	mov	r3, r1
   14248:	4610      	mov	r0, r2
   1424a:	4619      	mov	r1, r3
   1424c:	f04f 0200 	mov.w	r2, #0
   14250:	f04f 0300 	mov.w	r3, #0
   14254:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14258:	f003 fd1e 	bl	17c98 <__aeabi_dmul>
   1425c:	4602      	mov	r2, r0
   1425e:	460b      	mov	r3, r1
   14260:	4620      	mov	r0, r4
   14262:	4629      	mov	r1, r5
   14264:	f003 fb66 	bl	17934 <__adddf3>
   14268:	4602      	mov	r2, r0
   1426a:	460b      	mov	r3, r1
   1426c:	4610      	mov	r0, r2
   1426e:	4619      	mov	r1, r3
   14270:	f003 fff4 	bl	1825c <__aeabi_d2f>
   14274:	4603      	mov	r3, r0
   14276:	4630      	mov	r0, r6
   14278:	4619      	mov	r1, r3
   1427a:	f000 fbc1 	bl	14a00 <fly_to_xy>
   1427e:	68b8      	ldr	r0, [r7, #8]
   14280:	f003 fcb6 	bl	17bf0 <__aeabi_f2d>
   14284:	4602      	mov	r2, r0
   14286:	460b      	mov	r3, r1
   14288:	a15b      	add	r1, pc, #364	; (adr r1, 143f8 <auto_nav+0x1d80>)
   1428a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1428e:	f003 fb4f 	bl	17930 <__aeabi_dsub>
   14292:	4602      	mov	r2, r0
   14294:	460b      	mov	r3, r1
   14296:	4610      	mov	r0, r2
   14298:	4619      	mov	r1, r3
   1429a:	a359      	add	r3, pc, #356	; (adr r3, 14400 <auto_nav+0x1d88>)
   1429c:	e9d3 2300 	ldrd	r2, r3, [r3]
   142a0:	f003 fe24 	bl	17eec <__aeabi_ddiv>
   142a4:	4602      	mov	r2, r0
   142a6:	460b      	mov	r3, r1
   142a8:	4610      	mov	r0, r2
   142aa:	4619      	mov	r1, r3
   142ac:	f04f 0200 	mov.w	r2, #0
   142b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   142b4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   142b8:	f003 fcee 	bl	17c98 <__aeabi_dmul>
   142bc:	4602      	mov	r2, r0
   142be:	460b      	mov	r3, r1
   142c0:	4610      	mov	r0, r2
   142c2:	4619      	mov	r1, r3
   142c4:	f003 ffca 	bl	1825c <__aeabi_d2f>
   142c8:	4602      	mov	r2, r0
   142ca:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d2:	601a      	str	r2, [r3, #0]
   142d4:	e012      	b.n	142fc <auto_nav+0x1c84>
   142d6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142de:	681b      	ldr	r3, [r3, #0]
   142e0:	4618      	mov	r0, r3
   142e2:	f04f 0100 	mov.w	r1, #0
   142e6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142ea:	f004 f80d 	bl	18308 <__addsf3>
   142ee:	4603      	mov	r3, r0
   142f0:	461a      	mov	r2, r3
   142f2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fa:	601a      	str	r2, [r3, #0]
   142fc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14300:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	4618      	mov	r0, r3
   14308:	f04f 0100 	mov.w	r1, #0
   1430c:	f004 faa2 	bl	18854 <__aeabi_fcmplt>
   14310:	4603      	mov	r3, r0
   14312:	2b00      	cmp	r3, #0
   14314:	d1df      	bne.n	142d6 <auto_nav+0x1c5e>
   14316:	e012      	b.n	1433e <auto_nav+0x1cc6>
   14318:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1431c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14320:	681b      	ldr	r3, [r3, #0]
   14322:	4618      	mov	r0, r3
   14324:	f04f 0100 	mov.w	r1, #0
   14328:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1432c:	f003 ffea 	bl	18304 <__aeabi_fsub>
   14330:	4603      	mov	r3, r0
   14332:	461a      	mov	r2, r3
   14334:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1433c:	601a      	str	r2, [r3, #0]
   1433e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14346:	681b      	ldr	r3, [r3, #0]
   14348:	4618      	mov	r0, r3
   1434a:	f04f 0100 	mov.w	r1, #0
   1434e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14352:	f004 fa93 	bl	1887c <__aeabi_fcmpge>
   14356:	4603      	mov	r3, r0
   14358:	2b00      	cmp	r3, #0
   1435a:	d1dd      	bne.n	14318 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1435c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14364:	681b      	ldr	r3, [r3, #0]
   14366:	4618      	mov	r0, r3
   14368:	f04f 0100 	mov.w	r1, #0
   1436c:	f004 fa90 	bl	18890 <__aeabi_fcmpgt>
   14370:	4603      	mov	r3, r0
   14372:	2b00      	cmp	r3, #0
   14374:	d100      	bne.n	14378 <auto_nav+0x1d00>
        return;
   14376:	e251      	b.n	1481c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14378:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1437c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14380:	681b      	ldr	r3, [r3, #0]
   14382:	4618      	mov	r0, r3
   14384:	f04f 0100 	mov.w	r1, #0
   14388:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1438c:	f004 fa62 	bl	18854 <__aeabi_fcmplt>
   14390:	4603      	mov	r3, r0
   14392:	2b00      	cmp	r3, #0
   14394:	d100      	bne.n	14398 <auto_nav+0x1d20>
        return;
   14396:	e241      	b.n	1481c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14398:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1439c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143a0:	781b      	ldrb	r3, [r3, #0]
   143a2:	3301      	adds	r3, #1
   143a4:	b2da      	uxtb	r2, r3
   143a6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ae:	701a      	strb	r2, [r3, #0]
   143b0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   143b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b8:	681a      	ldr	r2, [r3, #0]
   143ba:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   143be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143c2:	601a      	str	r2, [r3, #0]
   143c4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   143c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143cc:	681a      	ldr	r2, [r3, #0]
   143ce:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   143d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d6:	601a      	str	r2, [r3, #0]
   143d8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   143dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143e0:	2200      	movs	r2, #0
   143e2:	801a      	strh	r2, [r3, #0]
   143e4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   143e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ec:	f04f 0200 	mov.w	r2, #0
   143f0:	601a      	str	r2, [r3, #0]
   143f2:	e213      	b.n	1481c <auto_nav+0x21a4>
   143f4:	f3af 8000 	nop.w
   143f8:	54442d18 	.word	0x54442d18
   143fc:	3ff921fb 	.word	0x3ff921fb
   14400:	54442d18 	.word	0x54442d18
   14404:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14408:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1440c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14410:	781b      	ldrb	r3, [r3, #0]
   14412:	2b02      	cmp	r3, #2
   14414:	f040 81ad 	bne.w	14772 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14418:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1441c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14420:	2202      	movs	r2, #2
   14422:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14424:	f24c 532f 	movw	r3, #50479	; 0xc52f
   14428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1442c:	2200      	movs	r2, #0
   1442e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14430:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14438:	f04f 0200 	mov.w	r2, #0
   1443c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1443e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14446:	2203      	movs	r2, #3
   14448:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1444a:	f240 5378 	movw	r3, #1400	; 0x578
   1444e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14454:	f240 5374 	movw	r3, #1396	; 0x574
   14458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1445c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1445e:	f64c 0394 	movw	r3, #51348	; 0xc894
   14462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14466:	f04f 0200 	mov.w	r2, #0
   1446a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1446c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14470:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14474:	681a      	ldr	r2, [r3, #0]
   14476:	f240 5378 	movw	r3, #1400	; 0x578
   1447a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14480:	4610      	mov	r0, r2
   14482:	4619      	mov	r1, r3
   14484:	f003 ff3e 	bl	18304 <__aeabi_fsub>
   14488:	4603      	mov	r3, r0
   1448a:	4618      	mov	r0, r3
   1448c:	f003 fbb0 	bl	17bf0 <__aeabi_f2d>
   14490:	4604      	mov	r4, r0
   14492:	460d      	mov	r5, r1
   14494:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1449c:	681a      	ldr	r2, [r3, #0]
   1449e:	f240 5378 	movw	r3, #1400	; 0x578
   144a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   144a8:	4610      	mov	r0, r2
   144aa:	4619      	mov	r1, r3
   144ac:	f003 ff2a 	bl	18304 <__aeabi_fsub>
   144b0:	4603      	mov	r3, r0
   144b2:	4618      	mov	r0, r3
   144b4:	f003 fb9c 	bl	17bf0 <__aeabi_f2d>
   144b8:	4602      	mov	r2, r0
   144ba:	460b      	mov	r3, r1
   144bc:	4620      	mov	r0, r4
   144be:	4629      	mov	r1, r5
   144c0:	f001 fbfa 	bl	15cb8 <pp_atan2>
   144c4:	4602      	mov	r2, r0
   144c6:	460b      	mov	r3, r1
   144c8:	4610      	mov	r0, r2
   144ca:	4619      	mov	r1, r3
   144cc:	f003 fec6 	bl	1825c <__aeabi_d2f>
   144d0:	4603      	mov	r3, r0
   144d2:	607b      	str	r3, [r7, #4]
   144d4:	6878      	ldr	r0, [r7, #4]
   144d6:	f003 fb8b 	bl	17bf0 <__aeabi_f2d>
   144da:	4604      	mov	r4, r0
   144dc:	460d      	mov	r5, r1
   144de:	f64c 3334 	movw	r3, #52020	; 0xcb34
   144e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144e6:	681b      	ldr	r3, [r3, #0]
   144e8:	4618      	mov	r0, r3
   144ea:	f04f 0100 	mov.w	r1, #0
   144ee:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   144f2:	f004 f811 	bl	18518 <__aeabi_fmul>
   144f6:	4603      	mov	r3, r0
   144f8:	4618      	mov	r0, r3
   144fa:	f003 fb79 	bl	17bf0 <__aeabi_f2d>
   144fe:	4602      	mov	r2, r0
   14500:	460b      	mov	r3, r1
   14502:	f04f 0000 	mov.w	r0, #0
   14506:	f04f 0100 	mov.w	r1, #0
   1450a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1450e:	f003 fced 	bl	17eec <__aeabi_ddiv>
   14512:	4602      	mov	r2, r0
   14514:	460b      	mov	r3, r1
   14516:	4620      	mov	r0, r4
   14518:	4629      	mov	r1, r5
   1451a:	f003 fa0b 	bl	17934 <__adddf3>
   1451e:	4602      	mov	r2, r0
   14520:	460b      	mov	r3, r1
   14522:	4610      	mov	r0, r2
   14524:	4619      	mov	r1, r3
   14526:	f003 fe99 	bl	1825c <__aeabi_d2f>
   1452a:	4603      	mov	r3, r0
   1452c:	603b      	str	r3, [r7, #0]
   1452e:	f240 5378 	movw	r3, #1400	; 0x578
   14532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14538:	4618      	mov	r0, r3
   1453a:	f003 fb59 	bl	17bf0 <__aeabi_f2d>
   1453e:	4604      	mov	r4, r0
   14540:	460d      	mov	r5, r1
   14542:	6838      	ldr	r0, [r7, #0]
   14544:	f003 fb54 	bl	17bf0 <__aeabi_f2d>
   14548:	4602      	mov	r2, r0
   1454a:	460b      	mov	r3, r1
   1454c:	4610      	mov	r0, r2
   1454e:	4619      	mov	r1, r3
   14550:	a3b5      	add	r3, pc, #724	; (adr r3, 14828 <auto_nav+0x21b0>)
   14552:	e9d3 2300 	ldrd	r2, r3, [r3]
   14556:	f003 f9ed 	bl	17934 <__adddf3>
   1455a:	4602      	mov	r2, r0
   1455c:	460b      	mov	r3, r1
   1455e:	4610      	mov	r0, r2
   14560:	4619      	mov	r1, r3
   14562:	f001 fc69 	bl	15e38 <pp_sin>
   14566:	4602      	mov	r2, r0
   14568:	460b      	mov	r3, r1
   1456a:	4610      	mov	r0, r2
   1456c:	4619      	mov	r1, r3
   1456e:	f04f 0200 	mov.w	r2, #0
   14572:	f04f 0300 	mov.w	r3, #0
   14576:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1457a:	f003 fb8d 	bl	17c98 <__aeabi_dmul>
   1457e:	4602      	mov	r2, r0
   14580:	460b      	mov	r3, r1
   14582:	4620      	mov	r0, r4
   14584:	4629      	mov	r1, r5
   14586:	f003 f9d5 	bl	17934 <__adddf3>
   1458a:	4602      	mov	r2, r0
   1458c:	460b      	mov	r3, r1
   1458e:	4610      	mov	r0, r2
   14590:	4619      	mov	r1, r3
   14592:	f003 fe63 	bl	1825c <__aeabi_d2f>
   14596:	4606      	mov	r6, r0
   14598:	f240 5378 	movw	r3, #1400	; 0x578
   1459c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   145a2:	4618      	mov	r0, r3
   145a4:	f003 fb24 	bl	17bf0 <__aeabi_f2d>
   145a8:	4604      	mov	r4, r0
   145aa:	460d      	mov	r5, r1
   145ac:	6838      	ldr	r0, [r7, #0]
   145ae:	f003 fb1f 	bl	17bf0 <__aeabi_f2d>
   145b2:	4602      	mov	r2, r0
   145b4:	460b      	mov	r3, r1
   145b6:	4610      	mov	r0, r2
   145b8:	4619      	mov	r1, r3
   145ba:	f001 fc3d 	bl	15e38 <pp_sin>
   145be:	4602      	mov	r2, r0
   145c0:	460b      	mov	r3, r1
   145c2:	4610      	mov	r0, r2
   145c4:	4619      	mov	r1, r3
   145c6:	f04f 0200 	mov.w	r2, #0
   145ca:	f04f 0300 	mov.w	r3, #0
   145ce:	f2c4 0359 	movt	r3, #16473	; 0x4059
   145d2:	f003 fb61 	bl	17c98 <__aeabi_dmul>
   145d6:	4602      	mov	r2, r0
   145d8:	460b      	mov	r3, r1
   145da:	4620      	mov	r0, r4
   145dc:	4629      	mov	r1, r5
   145de:	f003 f9a9 	bl	17934 <__adddf3>
   145e2:	4602      	mov	r2, r0
   145e4:	460b      	mov	r3, r1
   145e6:	4610      	mov	r0, r2
   145e8:	4619      	mov	r1, r3
   145ea:	f003 fe37 	bl	1825c <__aeabi_d2f>
   145ee:	4603      	mov	r3, r0
   145f0:	4630      	mov	r0, r6
   145f2:	4619      	mov	r1, r3
   145f4:	f000 fa04 	bl	14a00 <fly_to_xy>
   145f8:	6838      	ldr	r0, [r7, #0]
   145fa:	f003 faf9 	bl	17bf0 <__aeabi_f2d>
   145fe:	4602      	mov	r2, r0
   14600:	460b      	mov	r3, r1
   14602:	a189      	add	r1, pc, #548	; (adr r1, 14828 <auto_nav+0x21b0>)
   14604:	e9d1 0100 	ldrd	r0, r1, [r1]
   14608:	f003 f992 	bl	17930 <__aeabi_dsub>
   1460c:	4602      	mov	r2, r0
   1460e:	460b      	mov	r3, r1
   14610:	4610      	mov	r0, r2
   14612:	4619      	mov	r1, r3
   14614:	a386      	add	r3, pc, #536	; (adr r3, 14830 <auto_nav+0x21b8>)
   14616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1461a:	f003 fc67 	bl	17eec <__aeabi_ddiv>
   1461e:	4602      	mov	r2, r0
   14620:	460b      	mov	r3, r1
   14622:	4610      	mov	r0, r2
   14624:	4619      	mov	r1, r3
   14626:	f04f 0200 	mov.w	r2, #0
   1462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1462e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14632:	f003 fb31 	bl	17c98 <__aeabi_dmul>
   14636:	4602      	mov	r2, r0
   14638:	460b      	mov	r3, r1
   1463a:	4610      	mov	r0, r2
   1463c:	4619      	mov	r1, r3
   1463e:	f003 fe0d 	bl	1825c <__aeabi_d2f>
   14642:	4602      	mov	r2, r0
   14644:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1464c:	601a      	str	r2, [r3, #0]
   1464e:	e012      	b.n	14676 <auto_nav+0x1ffe>
   14650:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14658:	681b      	ldr	r3, [r3, #0]
   1465a:	4618      	mov	r0, r3
   1465c:	f04f 0100 	mov.w	r1, #0
   14660:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14664:	f003 fe50 	bl	18308 <__addsf3>
   14668:	4603      	mov	r3, r0
   1466a:	461a      	mov	r2, r3
   1466c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14674:	601a      	str	r2, [r3, #0]
   14676:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1467a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	4618      	mov	r0, r3
   14682:	f04f 0100 	mov.w	r1, #0
   14686:	f004 f8e5 	bl	18854 <__aeabi_fcmplt>
   1468a:	4603      	mov	r3, r0
   1468c:	2b00      	cmp	r3, #0
   1468e:	d1df      	bne.n	14650 <auto_nav+0x1fd8>
   14690:	e012      	b.n	146b8 <auto_nav+0x2040>
   14692:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1469a:	681b      	ldr	r3, [r3, #0]
   1469c:	4618      	mov	r0, r3
   1469e:	f04f 0100 	mov.w	r1, #0
   146a2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146a6:	f003 fe2d 	bl	18304 <__aeabi_fsub>
   146aa:	4603      	mov	r3, r0
   146ac:	461a      	mov	r2, r3
   146ae:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b6:	601a      	str	r2, [r3, #0]
   146b8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	4618      	mov	r0, r3
   146c4:	f04f 0100 	mov.w	r1, #0
   146c8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146cc:	f004 f8d6 	bl	1887c <__aeabi_fcmpge>
   146d0:	4603      	mov	r3, r0
   146d2:	2b00      	cmp	r3, #0
   146d4:	d1dd      	bne.n	14692 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   146d6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146de:	681b      	ldr	r3, [r3, #0]
   146e0:	4618      	mov	r0, r3
   146e2:	f04f 0100 	mov.w	r1, #0
   146e6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   146ea:	f004 f8d1 	bl	18890 <__aeabi_fcmpgt>
   146ee:	4603      	mov	r3, r0
   146f0:	2b00      	cmp	r3, #0
   146f2:	d100      	bne.n	146f6 <auto_nav+0x207e>
          return;
   146f4:	e092      	b.n	1481c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146f6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   146fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fe:	681b      	ldr	r3, [r3, #0]
   14700:	4618      	mov	r0, r3
   14702:	f04f 0100 	mov.w	r1, #0
   14706:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1470a:	f004 f8a3 	bl	18854 <__aeabi_fcmplt>
   1470e:	4603      	mov	r3, r0
   14710:	2b00      	cmp	r3, #0
   14712:	d100      	bne.n	14716 <auto_nav+0x209e>
          return;
   14714:	e082      	b.n	1481c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14716:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1471a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471e:	781b      	ldrb	r3, [r3, #0]
   14720:	3301      	adds	r3, #1
   14722:	b2da      	uxtb	r2, r3
   14724:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472c:	701a      	strb	r2, [r3, #0]
   1472e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14736:	681a      	ldr	r2, [r3, #0]
   14738:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1473c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14740:	601a      	str	r2, [r3, #0]
   14742:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474a:	681a      	ldr	r2, [r3, #0]
   1474c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14754:	601a      	str	r2, [r3, #0]
   14756:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1475a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1475e:	2200      	movs	r2, #0
   14760:	801a      	strh	r2, [r3, #0]
   14762:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1476a:	f04f 0200 	mov.w	r2, #0
   1476e:	601a      	str	r2, [r3, #0]
   14770:	e054      	b.n	1481c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14772:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1477a:	781b      	ldrb	r3, [r3, #0]
   1477c:	2b03      	cmp	r3, #3
   1477e:	d106      	bne.n	1478e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14780:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14788:	2203      	movs	r2, #3
   1478a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1478c:	e44b      	b.n	14026 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1478e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14796:	781b      	ldrb	r3, [r3, #0]
   14798:	2b04      	cmp	r3, #4
   1479a:	d13f      	bne.n	1481c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1479c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   147a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a4:	2204      	movs	r2, #4
   147a6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   147a8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   147ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b0:	781b      	ldrb	r3, [r3, #0]
   147b2:	3301      	adds	r3, #1
   147b4:	b2da      	uxtb	r2, r3
   147b6:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   147ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147be:	701a      	strb	r2, [r3, #0]
   147c0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   147c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c8:	2200      	movs	r2, #0
   147ca:	701a      	strb	r2, [r3, #0]
   147cc:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   147d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d4:	2200      	movs	r2, #0
   147d6:	801a      	strh	r2, [r3, #0]
   147d8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   147dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e0:	681a      	ldr	r2, [r3, #0]
   147e2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   147e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ea:	601a      	str	r2, [r3, #0]
   147ec:	f64c 3300 	movw	r3, #51968	; 0xcb00
   147f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f4:	681a      	ldr	r2, [r3, #0]
   147f6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   147fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fe:	601a      	str	r2, [r3, #0]
   14800:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14808:	2200      	movs	r2, #0
   1480a:	801a      	strh	r2, [r3, #0]
   1480c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14814:	f04f 0200 	mov.w	r2, #0
   14818:	601a      	str	r2, [r3, #0]
   1481a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1481c:	372c      	adds	r7, #44	; 0x2c
   1481e:	46bd      	mov	sp, r7
   14820:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14822:	bf00      	nop
   14824:	f3af 8000 	nop.w
   14828:	54442d18 	.word	0x54442d18
   1482c:	3ff921fb 	.word	0x3ff921fb
   14830:	54442d18 	.word	0x54442d18
   14834:	400921fb 	.word	0x400921fb

00014838 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14838:	b590      	push	{r4, r7, lr}
   1483a:	b087      	sub	sp, #28
   1483c:	af00      	add	r7, sp, #0
   1483e:	4603      	mov	r3, r0
   14840:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14842:	79f9      	ldrb	r1, [r7, #7]
   14844:	f240 5278 	movw	r2, #1400	; 0x578
   14848:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1484c:	460b      	mov	r3, r1
   1484e:	005b      	lsls	r3, r3, #1
   14850:	440b      	add	r3, r1
   14852:	009b      	lsls	r3, r3, #2
   14854:	4413      	add	r3, r2
   14856:	681a      	ldr	r2, [r3, #0]
   14858:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1485c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14860:	681b      	ldr	r3, [r3, #0]
   14862:	4610      	mov	r0, r2
   14864:	4619      	mov	r1, r3
   14866:	f003 fd4d 	bl	18304 <__aeabi_fsub>
   1486a:	4603      	mov	r3, r0
   1486c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1486e:	79f9      	ldrb	r1, [r7, #7]
   14870:	f240 5278 	movw	r2, #1400	; 0x578
   14874:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14878:	460b      	mov	r3, r1
   1487a:	005b      	lsls	r3, r3, #1
   1487c:	440b      	add	r3, r1
   1487e:	009b      	lsls	r3, r3, #2
   14880:	4413      	add	r3, r2
   14882:	3304      	adds	r3, #4
   14884:	681a      	ldr	r2, [r3, #0]
   14886:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1488a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1488e:	681b      	ldr	r3, [r3, #0]
   14890:	4610      	mov	r0, r2
   14892:	4619      	mov	r1, r3
   14894:	f003 fd36 	bl	18304 <__aeabi_fsub>
   14898:	4603      	mov	r3, r0
   1489a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1489c:	6978      	ldr	r0, [r7, #20]
   1489e:	6979      	ldr	r1, [r7, #20]
   148a0:	f003 fe3a 	bl	18518 <__aeabi_fmul>
   148a4:	4603      	mov	r3, r0
   148a6:	461c      	mov	r4, r3
   148a8:	6938      	ldr	r0, [r7, #16]
   148aa:	6939      	ldr	r1, [r7, #16]
   148ac:	f003 fe34 	bl	18518 <__aeabi_fmul>
   148b0:	4603      	mov	r3, r0
   148b2:	4620      	mov	r0, r4
   148b4:	4619      	mov	r1, r3
   148b6:	f003 fd27 	bl	18308 <__addsf3>
   148ba:	4603      	mov	r3, r0
   148bc:	461a      	mov	r2, r3
   148be:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   148c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148c6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   148c8:	f64c 3334 	movw	r3, #52020	; 0xcb34
   148cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d0:	681b      	ldr	r3, [r3, #0]
   148d2:	4618      	mov	r0, r3
   148d4:	f04f 0100 	mov.w	r1, #0
   148d8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   148dc:	f003 fe1c 	bl	18518 <__aeabi_fmul>
   148e0:	4603      	mov	r3, r0
   148e2:	461a      	mov	r2, r3
   148e4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ec:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   148ee:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f6:	681b      	ldr	r3, [r3, #0]
   148f8:	4618      	mov	r0, r3
   148fa:	f04f 0100 	mov.w	r1, #0
   148fe:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14902:	f003 ffa7 	bl	18854 <__aeabi_fcmplt>
   14906:	4603      	mov	r3, r0
   14908:	2b00      	cmp	r3, #0
   1490a:	d004      	beq.n	14916 <approaching+0xde>
   1490c:	f04f 0200 	mov.w	r2, #0
   14910:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14914:	e004      	b.n	14920 <approaching+0xe8>
   14916:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1491a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1491e:	681a      	ldr	r2, [r3, #0]
   14920:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14928:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1492a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1492e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14932:	681a      	ldr	r2, [r3, #0]
   14934:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1493c:	681b      	ldr	r3, [r3, #0]
   1493e:	4610      	mov	r0, r2
   14940:	4619      	mov	r1, r3
   14942:	f003 fde9 	bl	18518 <__aeabi_fmul>
   14946:	4603      	mov	r3, r0
   14948:	461a      	mov	r2, r3
   1494a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1494e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14952:	681b      	ldr	r3, [r3, #0]
   14954:	4610      	mov	r0, r2
   14956:	4619      	mov	r1, r3
   14958:	f003 ff9a 	bl	18890 <__aeabi_fcmpgt>
   1495c:	4603      	mov	r3, r0
   1495e:	2b00      	cmp	r3, #0
   14960:	d001      	beq.n	14966 <approaching+0x12e>
    return TRUE;
   14962:	2301      	movs	r3, #1
   14964:	e048      	b.n	149f8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14966:	79f9      	ldrb	r1, [r7, #7]
   14968:	f240 5278 	movw	r2, #1400	; 0x578
   1496c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14970:	460b      	mov	r3, r1
   14972:	005b      	lsls	r3, r3, #1
   14974:	440b      	add	r3, r1
   14976:	009b      	lsls	r3, r3, #2
   14978:	4413      	add	r3, r2
   1497a:	681a      	ldr	r2, [r3, #0]
   1497c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14984:	681b      	ldr	r3, [r3, #0]
   14986:	4610      	mov	r0, r2
   14988:	4619      	mov	r1, r3
   1498a:	f003 fcbb 	bl	18304 <__aeabi_fsub>
   1498e:	4603      	mov	r3, r0
   14990:	4618      	mov	r0, r3
   14992:	6979      	ldr	r1, [r7, #20]
   14994:	f003 fdc0 	bl	18518 <__aeabi_fmul>
   14998:	4603      	mov	r3, r0
   1499a:	461c      	mov	r4, r3
   1499c:	79f9      	ldrb	r1, [r7, #7]
   1499e:	f240 5278 	movw	r2, #1400	; 0x578
   149a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149a6:	460b      	mov	r3, r1
   149a8:	005b      	lsls	r3, r3, #1
   149aa:	440b      	add	r3, r1
   149ac:	009b      	lsls	r3, r3, #2
   149ae:	4413      	add	r3, r2
   149b0:	3304      	adds	r3, #4
   149b2:	681a      	ldr	r2, [r3, #0]
   149b4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   149b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149bc:	681b      	ldr	r3, [r3, #0]
   149be:	4610      	mov	r0, r2
   149c0:	4619      	mov	r1, r3
   149c2:	f003 fc9f 	bl	18304 <__aeabi_fsub>
   149c6:	4603      	mov	r3, r0
   149c8:	4618      	mov	r0, r3
   149ca:	6939      	ldr	r1, [r7, #16]
   149cc:	f003 fda4 	bl	18518 <__aeabi_fmul>
   149d0:	4603      	mov	r3, r0
   149d2:	4620      	mov	r0, r4
   149d4:	4619      	mov	r1, r3
   149d6:	f003 fc97 	bl	18308 <__addsf3>
   149da:	4603      	mov	r3, r0
   149dc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   149de:	2301      	movs	r3, #1
   149e0:	461c      	mov	r4, r3
   149e2:	68f8      	ldr	r0, [r7, #12]
   149e4:	f04f 0100 	mov.w	r1, #0
   149e8:	f003 ff34 	bl	18854 <__aeabi_fcmplt>
   149ec:	4603      	mov	r3, r0
   149ee:	2b00      	cmp	r3, #0
   149f0:	d101      	bne.n	149f6 <approaching+0x1be>
   149f2:	2300      	movs	r3, #0
   149f4:	461c      	mov	r4, r3
   149f6:	b2e3      	uxtb	r3, r4
}
   149f8:	4618      	mov	r0, r3
   149fa:	371c      	adds	r7, #28
   149fc:	46bd      	mov	sp, r7
   149fe:	bd90      	pop	{r4, r7, pc}

00014a00 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14a00:	b5b0      	push	{r4, r5, r7, lr}
   14a02:	b082      	sub	sp, #8
   14a04:	af00      	add	r7, sp, #0
   14a06:	6078      	str	r0, [r7, #4]
   14a08:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14a0a:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   14a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a12:	687a      	ldr	r2, [r7, #4]
   14a14:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14a16:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   14a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a1e:	683a      	ldr	r2, [r7, #0]
   14a20:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14a22:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a2a:	681b      	ldr	r3, [r3, #0]
   14a2c:	6838      	ldr	r0, [r7, #0]
   14a2e:	4619      	mov	r1, r3
   14a30:	f003 fc68 	bl	18304 <__aeabi_fsub>
   14a34:	4603      	mov	r3, r0
   14a36:	4618      	mov	r0, r3
   14a38:	f003 f8da 	bl	17bf0 <__aeabi_f2d>
   14a3c:	4604      	mov	r4, r0
   14a3e:	460d      	mov	r5, r1
   14a40:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a48:	681b      	ldr	r3, [r3, #0]
   14a4a:	6878      	ldr	r0, [r7, #4]
   14a4c:	4619      	mov	r1, r3
   14a4e:	f003 fc59 	bl	18304 <__aeabi_fsub>
   14a52:	4603      	mov	r3, r0
   14a54:	4618      	mov	r0, r3
   14a56:	f003 f8cb 	bl	17bf0 <__aeabi_f2d>
   14a5a:	4602      	mov	r2, r0
   14a5c:	460b      	mov	r3, r1
   14a5e:	4620      	mov	r0, r4
   14a60:	4629      	mov	r1, r5
   14a62:	f001 f929 	bl	15cb8 <pp_atan2>
   14a66:	4602      	mov	r2, r0
   14a68:	460b      	mov	r3, r1
   14a6a:	a10b      	add	r1, pc, #44	; (adr r1, 14a98 <fly_to_xy+0x98>)
   14a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14a70:	f002 ff5e 	bl	17930 <__aeabi_dsub>
   14a74:	4602      	mov	r2, r0
   14a76:	460b      	mov	r3, r1
   14a78:	4610      	mov	r0, r2
   14a7a:	4619      	mov	r1, r3
   14a7c:	f003 fbee 	bl	1825c <__aeabi_d2f>
   14a80:	4602      	mov	r2, r0
   14a82:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a8a:	601a      	str	r2, [r3, #0]
}
   14a8c:	3708      	adds	r7, #8
   14a8e:	46bd      	mov	sp, r7
   14a90:	bdb0      	pop	{r4, r5, r7, pc}
   14a92:	bf00      	nop
   14a94:	f3af 8000 	nop.w
   14a98:	54442d18 	.word	0x54442d18
   14a9c:	3ff921fb 	.word	0x3ff921fb

00014aa0 <fly_to>:

static void fly_to(uint8_t wp) { 
   14aa0:	b580      	push	{r7, lr}
   14aa2:	b082      	sub	sp, #8
   14aa4:	af00      	add	r7, sp, #0
   14aa6:	4603      	mov	r3, r0
   14aa8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14aaa:	79f9      	ldrb	r1, [r7, #7]
   14aac:	f240 5278 	movw	r2, #1400	; 0x578
   14ab0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ab4:	460b      	mov	r3, r1
   14ab6:	005b      	lsls	r3, r3, #1
   14ab8:	440b      	add	r3, r1
   14aba:	009b      	lsls	r3, r3, #2
   14abc:	4413      	add	r3, r2
   14abe:	6818      	ldr	r0, [r3, #0]
   14ac0:	79f9      	ldrb	r1, [r7, #7]
   14ac2:	f240 5278 	movw	r2, #1400	; 0x578
   14ac6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aca:	460b      	mov	r3, r1
   14acc:	005b      	lsls	r3, r3, #1
   14ace:	440b      	add	r3, r1
   14ad0:	009b      	lsls	r3, r3, #2
   14ad2:	4413      	add	r3, r2
   14ad4:	3304      	adds	r3, #4
   14ad6:	681b      	ldr	r3, [r3, #0]
   14ad8:	4619      	mov	r1, r3
   14ada:	f7ff ff91 	bl	14a00 <fly_to_xy>
}
   14ade:	3708      	adds	r7, #8
   14ae0:	46bd      	mov	sp, r7
   14ae2:	bd80      	pop	{r7, pc}

00014ae4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14ae4:	b5b0      	push	{r4, r5, r7, lr}
   14ae6:	b088      	sub	sp, #32
   14ae8:	af00      	add	r7, sp, #0
   14aea:	4602      	mov	r2, r0
   14aec:	460b      	mov	r3, r1
   14aee:	71fa      	strb	r2, [r7, #7]
   14af0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14af2:	79f9      	ldrb	r1, [r7, #7]
   14af4:	f240 5278 	movw	r2, #1400	; 0x578
   14af8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14afc:	460b      	mov	r3, r1
   14afe:	005b      	lsls	r3, r3, #1
   14b00:	440b      	add	r3, r1
   14b02:	009b      	lsls	r3, r3, #2
   14b04:	4413      	add	r3, r2
   14b06:	681b      	ldr	r3, [r3, #0]
   14b08:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14b0a:	79f9      	ldrb	r1, [r7, #7]
   14b0c:	f240 5278 	movw	r2, #1400	; 0x578
   14b10:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b14:	460b      	mov	r3, r1
   14b16:	005b      	lsls	r3, r3, #1
   14b18:	440b      	add	r3, r1
   14b1a:	009b      	lsls	r3, r3, #2
   14b1c:	4413      	add	r3, r2
   14b1e:	3304      	adds	r3, #4
   14b20:	681b      	ldr	r3, [r3, #0]
   14b22:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14b24:	79b9      	ldrb	r1, [r7, #6]
   14b26:	f240 5278 	movw	r2, #1400	; 0x578
   14b2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b2e:	460b      	mov	r3, r1
   14b30:	005b      	lsls	r3, r3, #1
   14b32:	440b      	add	r3, r1
   14b34:	009b      	lsls	r3, r3, #2
   14b36:	4413      	add	r3, r2
   14b38:	681b      	ldr	r3, [r3, #0]
   14b3a:	4618      	mov	r0, r3
   14b3c:	69f9      	ldr	r1, [r7, #28]
   14b3e:	f003 fbe1 	bl	18304 <__aeabi_fsub>
   14b42:	4603      	mov	r3, r0
   14b44:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14b46:	79b9      	ldrb	r1, [r7, #6]
   14b48:	f240 5278 	movw	r2, #1400	; 0x578
   14b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b50:	460b      	mov	r3, r1
   14b52:	005b      	lsls	r3, r3, #1
   14b54:	440b      	add	r3, r1
   14b56:	009b      	lsls	r3, r3, #2
   14b58:	4413      	add	r3, r2
   14b5a:	3304      	adds	r3, #4
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	4618      	mov	r0, r3
   14b60:	69b9      	ldr	r1, [r7, #24]
   14b62:	f003 fbcf 	bl	18304 <__aeabi_fsub>
   14b66:	4603      	mov	r3, r0
   14b68:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14b6a:	6978      	ldr	r0, [r7, #20]
   14b6c:	6979      	ldr	r1, [r7, #20]
   14b6e:	f003 fcd3 	bl	18518 <__aeabi_fmul>
   14b72:	4603      	mov	r3, r0
   14b74:	461c      	mov	r4, r3
   14b76:	6938      	ldr	r0, [r7, #16]
   14b78:	6939      	ldr	r1, [r7, #16]
   14b7a:	f003 fccd 	bl	18518 <__aeabi_fmul>
   14b7e:	4603      	mov	r3, r0
   14b80:	4620      	mov	r0, r4
   14b82:	4619      	mov	r1, r3
   14b84:	f003 fbc0 	bl	18308 <__addsf3>
   14b88:	4603      	mov	r3, r0
   14b8a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14b8c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b94:	681b      	ldr	r3, [r3, #0]
   14b96:	4618      	mov	r0, r3
   14b98:	69f9      	ldr	r1, [r7, #28]
   14b9a:	f003 fbb3 	bl	18304 <__aeabi_fsub>
   14b9e:	4603      	mov	r3, r0
   14ba0:	4618      	mov	r0, r3
   14ba2:	6979      	ldr	r1, [r7, #20]
   14ba4:	f003 fcb8 	bl	18518 <__aeabi_fmul>
   14ba8:	4603      	mov	r3, r0
   14baa:	461c      	mov	r4, r3
   14bac:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb4:	681b      	ldr	r3, [r3, #0]
   14bb6:	4618      	mov	r0, r3
   14bb8:	69b9      	ldr	r1, [r7, #24]
   14bba:	f003 fba3 	bl	18304 <__aeabi_fsub>
   14bbe:	4603      	mov	r3, r0
   14bc0:	4618      	mov	r0, r3
   14bc2:	6939      	ldr	r1, [r7, #16]
   14bc4:	f003 fca8 	bl	18518 <__aeabi_fmul>
   14bc8:	4603      	mov	r3, r0
   14bca:	4620      	mov	r0, r4
   14bcc:	4619      	mov	r1, r3
   14bce:	f003 fb9b 	bl	18308 <__addsf3>
   14bd2:	4603      	mov	r3, r0
   14bd4:	4618      	mov	r0, r3
   14bd6:	68f9      	ldr	r1, [r7, #12]
   14bd8:	f003 fd52 	bl	18680 <__aeabi_fdiv>
   14bdc:	4603      	mov	r3, r0
   14bde:	461a      	mov	r2, r3
   14be0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14bea:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf2:	681b      	ldr	r3, [r3, #0]
   14bf4:	4618      	mov	r0, r3
   14bf6:	f04f 0100 	mov.w	r1, #0
   14bfa:	f003 fe3f 	bl	1887c <__aeabi_fcmpge>
   14bfe:	4603      	mov	r3, r0
   14c00:	2b00      	cmp	r3, #0
   14c02:	d005      	beq.n	14c10 <route_to+0x12c>
   14c04:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c0c:	681a      	ldr	r2, [r3, #0]
   14c0e:	e001      	b.n	14c14 <route_to+0x130>
   14c10:	f04f 0200 	mov.w	r2, #0
   14c14:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c1c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14c1e:	68f8      	ldr	r0, [r7, #12]
   14c20:	f002 ffe6 	bl	17bf0 <__aeabi_f2d>
   14c24:	4602      	mov	r2, r0
   14c26:	460b      	mov	r3, r1
   14c28:	4610      	mov	r0, r2
   14c2a:	4619      	mov	r1, r3
   14c2c:	f001 f9f4 	bl	16018 <pp_sqrt>
   14c30:	4602      	mov	r2, r0
   14c32:	460b      	mov	r3, r1
   14c34:	4610      	mov	r0, r2
   14c36:	4619      	mov	r1, r3
   14c38:	f003 fb10 	bl	1825c <__aeabi_d2f>
   14c3c:	4602      	mov	r2, r0
   14c3e:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c46:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14c48:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c50:	681b      	ldr	r3, [r3, #0]
   14c52:	4618      	mov	r0, r3
   14c54:	f002 ffcc 	bl	17bf0 <__aeabi_f2d>
   14c58:	4604      	mov	r4, r0
   14c5a:	460d      	mov	r5, r1
   14c5c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c64:	681a      	ldr	r2, [r3, #0]
   14c66:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c6e:	681b      	ldr	r3, [r3, #0]
   14c70:	4610      	mov	r0, r2
   14c72:	4619      	mov	r1, r3
   14c74:	f003 fd04 	bl	18680 <__aeabi_fdiv>
   14c78:	4603      	mov	r3, r0
   14c7a:	4618      	mov	r0, r3
   14c7c:	f04f 0100 	mov.w	r1, #0
   14c80:	f003 fdfc 	bl	1887c <__aeabi_fcmpge>
   14c84:	4603      	mov	r3, r0
   14c86:	2b00      	cmp	r3, #0
   14c88:	d014      	beq.n	14cb4 <route_to+0x1d0>
   14c8a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c92:	681a      	ldr	r2, [r3, #0]
   14c94:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c9c:	681b      	ldr	r3, [r3, #0]
   14c9e:	4610      	mov	r0, r2
   14ca0:	4619      	mov	r1, r3
   14ca2:	f003 fced 	bl	18680 <__aeabi_fdiv>
   14ca6:	4603      	mov	r3, r0
   14ca8:	4618      	mov	r0, r3
   14caa:	f002 ffa1 	bl	17bf0 <__aeabi_f2d>
   14cae:	4602      	mov	r2, r0
   14cb0:	460b      	mov	r3, r1
   14cb2:	e003      	b.n	14cbc <route_to+0x1d8>
   14cb4:	f04f 0200 	mov.w	r2, #0
   14cb8:	f04f 0300 	mov.w	r3, #0
   14cbc:	4620      	mov	r0, r4
   14cbe:	4629      	mov	r1, r5
   14cc0:	f002 fe38 	bl	17934 <__adddf3>
   14cc4:	4602      	mov	r2, r0
   14cc6:	460b      	mov	r3, r1
   14cc8:	4610      	mov	r0, r2
   14cca:	4619      	mov	r1, r3
   14ccc:	f003 fac6 	bl	1825c <__aeabi_d2f>
   14cd0:	4602      	mov	r2, r0
   14cd2:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cda:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14cdc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ce4:	681b      	ldr	r3, [r3, #0]
   14ce6:	4618      	mov	r0, r3
   14ce8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14cec:	f003 fdc6 	bl	1887c <__aeabi_fcmpge>
   14cf0:	4603      	mov	r3, r0
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	d002      	beq.n	14cfc <route_to+0x218>
   14cf6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14cfa:	e004      	b.n	14d06 <route_to+0x222>
   14cfc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d04:	681a      	ldr	r2, [r3, #0]
   14d06:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14d10:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d18:	681b      	ldr	r3, [r3, #0]
   14d1a:	4618      	mov	r0, r3
   14d1c:	6979      	ldr	r1, [r7, #20]
   14d1e:	f003 fbfb 	bl	18518 <__aeabi_fmul>
   14d22:	4603      	mov	r3, r0
   14d24:	4618      	mov	r0, r3
   14d26:	69f9      	ldr	r1, [r7, #28]
   14d28:	f003 faee 	bl	18308 <__addsf3>
   14d2c:	4603      	mov	r3, r0
   14d2e:	461c      	mov	r4, r3
   14d30:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d38:	681b      	ldr	r3, [r3, #0]
   14d3a:	4618      	mov	r0, r3
   14d3c:	6939      	ldr	r1, [r7, #16]
   14d3e:	f003 fbeb 	bl	18518 <__aeabi_fmul>
   14d42:	4603      	mov	r3, r0
   14d44:	4618      	mov	r0, r3
   14d46:	69b9      	ldr	r1, [r7, #24]
   14d48:	f003 fade 	bl	18308 <__addsf3>
   14d4c:	4603      	mov	r3, r0
   14d4e:	4620      	mov	r0, r4
   14d50:	4619      	mov	r1, r3
   14d52:	f7ff fe55 	bl	14a00 <fly_to_xy>
}
   14d56:	3720      	adds	r7, #32
   14d58:	46bd      	mov	sp, r7
   14d5a:	bdb0      	pop	{r4, r5, r7, pc}

00014d5c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14d5c:	b590      	push	{r4, r7, lr}
   14d5e:	b083      	sub	sp, #12
   14d60:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14d62:	f240 5378 	movw	r3, #1400	; 0x578
   14d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d6a:	681a      	ldr	r2, [r3, #0]
   14d6c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d74:	681b      	ldr	r3, [r3, #0]
   14d76:	4610      	mov	r0, r2
   14d78:	4619      	mov	r1, r3
   14d7a:	f003 fac3 	bl	18304 <__aeabi_fsub>
   14d7e:	4603      	mov	r3, r0
   14d80:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14d82:	f240 5378 	movw	r3, #1400	; 0x578
   14d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d8a:	685a      	ldr	r2, [r3, #4]
   14d8c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d94:	681b      	ldr	r3, [r3, #0]
   14d96:	4610      	mov	r0, r2
   14d98:	4619      	mov	r1, r3
   14d9a:	f003 fab3 	bl	18304 <__aeabi_fsub>
   14d9e:	4603      	mov	r3, r0
   14da0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14da2:	6878      	ldr	r0, [r7, #4]
   14da4:	6879      	ldr	r1, [r7, #4]
   14da6:	f003 fbb7 	bl	18518 <__aeabi_fmul>
   14daa:	4603      	mov	r3, r0
   14dac:	461c      	mov	r4, r3
   14dae:	6838      	ldr	r0, [r7, #0]
   14db0:	6839      	ldr	r1, [r7, #0]
   14db2:	f003 fbb1 	bl	18518 <__aeabi_fmul>
   14db6:	4603      	mov	r3, r0
   14db8:	4620      	mov	r0, r4
   14dba:	4619      	mov	r1, r3
   14dbc:	f003 faa4 	bl	18308 <__addsf3>
   14dc0:	4603      	mov	r3, r0
   14dc2:	461a      	mov	r2, r3
   14dc4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dcc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14dce:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dd6:	681b      	ldr	r3, [r3, #0]
   14dd8:	2201      	movs	r2, #1
   14dda:	4614      	mov	r4, r2
   14ddc:	4618      	mov	r0, r3
   14dde:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14de2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14de6:	f003 fd53 	bl	18890 <__aeabi_fcmpgt>
   14dea:	4603      	mov	r3, r0
   14dec:	2b00      	cmp	r3, #0
   14dee:	d101      	bne.n	14df4 <compute_dist2_to_home+0x98>
   14df0:	2300      	movs	r3, #0
   14df2:	461c      	mov	r4, r3
   14df4:	b2e3      	uxtb	r3, r4
   14df6:	461a      	mov	r2, r3
   14df8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e00:	701a      	strb	r2, [r3, #0]
}
   14e02:	370c      	adds	r7, #12
   14e04:	46bd      	mov	sp, r7
   14e06:	bd90      	pop	{r4, r7, pc}

00014e08 <nav_home>:

void nav_home(void) {
   14e08:	b580      	push	{r7, lr}
   14e0a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14e0c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e14:	f04f 0200 	mov.w	r2, #0
   14e18:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14e1a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e22:	2203      	movs	r2, #3
   14e24:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14e26:	f240 5374 	movw	r3, #1396	; 0x574
   14e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e2e:	f04f 0200 	mov.w	r2, #0
   14e32:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14e36:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14e38:	f7ff ff90 	bl	14d5c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14e3c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e44:	681a      	ldr	r2, [r3, #0]
   14e46:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e4e:	601a      	str	r2, [r3, #0]
}
   14e50:	bd80      	pop	{r7, pc}
   14e52:	bf00      	nop

00014e54 <nav_update>:

void nav_update(void) {
   14e54:	b580      	push	{r7, lr}
   14e56:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14e58:	f7ff ff80 	bl	14d5c <compute_dist2_to_home>

  auto_nav();
   14e5c:	f7fd fc0c 	bl	12678 <auto_nav>
}
   14e60:	bd80      	pop	{r7, pc}
   14e62:	bf00      	nop

00014e64 <nav_init>:


void nav_init(void) {
   14e64:	b480      	push	{r7}
   14e66:	af00      	add	r7, sp, #0
  nav_block = 0;
   14e68:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e70:	2200      	movs	r2, #0
   14e72:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14e74:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e7c:	2200      	movs	r2, #0
   14e7e:	701a      	strb	r2, [r3, #0]
}
   14e80:	46bd      	mov	sp, r7
   14e82:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e86:	4770      	bx	lr

00014e88 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14e88:	b480      	push	{r7}
   14e8a:	b083      	sub	sp, #12
   14e8c:	af00      	add	r7, sp, #0
   14e8e:	4603      	mov	r3, r0
   14e90:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14e92:	f242 030a 	movw	r3, #8202	; 0x200a
   14e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9a:	781b      	ldrb	r3, [r3, #0]
   14e9c:	b2db      	uxtb	r3, r3
   14e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14ea2:	2b00      	cmp	r3, #0
   14ea4:	d028      	beq.n	14ef8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14ea6:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eae:	781b      	ldrb	r3, [r3, #0]
   14eb0:	b2db      	uxtb	r3, r3
   14eb2:	461a      	mov	r2, r3
   14eb4:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ebc:	781b      	ldrb	r3, [r3, #0]
   14ebe:	3301      	adds	r3, #1
   14ec0:	429a      	cmp	r2, r3
   14ec2:	d100      	bne.n	14ec6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14ec4:	e02c      	b.n	14f20 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14ec6:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ece:	781b      	ldrb	r3, [r3, #0]
   14ed0:	461a      	mov	r2, r3
   14ed2:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eda:	79f9      	ldrb	r1, [r7, #7]
   14edc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14ede:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ee6:	781b      	ldrb	r3, [r3, #0]
   14ee8:	3301      	adds	r3, #1
   14eea:	b2da      	uxtb	r2, r3
   14eec:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ef4:	701a      	strb	r2, [r3, #0]
   14ef6:	e013      	b.n	14f20 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14ef8:	f242 030c 	movw	r3, #8204	; 0x200c
   14efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f00:	79fa      	ldrb	r2, [r7, #7]
   14f02:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14f04:	f242 030a 	movw	r3, #8202	; 0x200a
   14f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f0c:	f242 020a 	movw	r2, #8202	; 0x200a
   14f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f14:	7812      	ldrb	r2, [r2, #0]
   14f16:	b2d2      	uxtb	r2, r2
   14f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f1c:	b2d2      	uxtb	r2, r2
   14f1e:	701a      	strb	r2, [r3, #0]
  }
}
   14f20:	370c      	adds	r7, #12
   14f22:	46bd      	mov	sp, r7
   14f24:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f28:	4770      	bx	lr
   14f2a:	bf00      	nop

00014f2c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14f2c:	b480      	push	{r7}
   14f2e:	b083      	sub	sp, #12
   14f30:	af00      	add	r7, sp, #0
   14f32:	4603      	mov	r3, r0
   14f34:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14f36:	f242 039a 	movw	r3, #8346	; 0x209a
   14f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3e:	781b      	ldrb	r3, [r3, #0]
   14f40:	b2db      	uxtb	r3, r3
   14f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f46:	2b00      	cmp	r3, #0
   14f48:	d028      	beq.n	14f9c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14f4a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f52:	781b      	ldrb	r3, [r3, #0]
   14f54:	b2db      	uxtb	r3, r3
   14f56:	461a      	mov	r2, r3
   14f58:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f60:	781b      	ldrb	r3, [r3, #0]
   14f62:	3301      	adds	r3, #1
   14f64:	429a      	cmp	r2, r3
   14f66:	d100      	bne.n	14f6a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f68:	e02c      	b.n	14fc4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14f6a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f72:	781b      	ldrb	r3, [r3, #0]
   14f74:	461a      	mov	r2, r3
   14f76:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f7e:	79f9      	ldrb	r1, [r7, #7]
   14f80:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14f82:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	3301      	adds	r3, #1
   14f8e:	b2da      	uxtb	r2, r3
   14f90:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f98:	701a      	strb	r2, [r3, #0]
   14f9a:	e013      	b.n	14fc4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14f9c:	f242 039c 	movw	r3, #8348	; 0x209c
   14fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa4:	79fa      	ldrb	r2, [r7, #7]
   14fa6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14fa8:	f242 039a 	movw	r3, #8346	; 0x209a
   14fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb0:	f242 029a 	movw	r2, #8346	; 0x209a
   14fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fb8:	7812      	ldrb	r2, [r2, #0]
   14fba:	b2d2      	uxtb	r2, r2
   14fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14fc0:	b2d2      	uxtb	r2, r2
   14fc2:	701a      	strb	r2, [r3, #0]
  }
}
   14fc4:	370c      	adds	r7, #12
   14fc6:	46bd      	mov	sp, r7
   14fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fcc:	4770      	bx	lr
   14fce:	bf00      	nop

00014fd0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14fd0:	b580      	push	{r7, lr}
   14fd2:	b084      	sub	sp, #16
   14fd4:	af00      	add	r7, sp, #0
   14fd6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14fd8:	2300      	movs	r3, #0
   14fda:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14fdc:	e009      	b.n	14ff2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14fde:	7bfb      	ldrb	r3, [r7, #15]
   14fe0:	687a      	ldr	r2, [r7, #4]
   14fe2:	4413      	add	r3, r2
   14fe4:	781b      	ldrb	r3, [r3, #0]
   14fe6:	4618      	mov	r0, r3
   14fe8:	f7ff ff4e 	bl	14e88 <uart0_transmit>
    i++;
   14fec:	7bfb      	ldrb	r3, [r7, #15]
   14fee:	3301      	adds	r3, #1
   14ff0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14ff2:	7bfb      	ldrb	r3, [r7, #15]
   14ff4:	687a      	ldr	r2, [r7, #4]
   14ff6:	4413      	add	r3, r2
   14ff8:	781b      	ldrb	r3, [r3, #0]
   14ffa:	2b00      	cmp	r3, #0
   14ffc:	d1ef      	bne.n	14fde <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14ffe:	3710      	adds	r7, #16
   15000:	46bd      	mov	sp, r7
   15002:	bd80      	pop	{r7, pc}

00015004 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   15004:	b590      	push	{r4, r7, lr}
   15006:	b089      	sub	sp, #36	; 0x24
   15008:	af00      	add	r7, sp, #0
   1500a:	4603      	mov	r3, r0
   1500c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1500e:	f648 3318 	movw	r3, #35608	; 0x8b18
   15012:	f2c0 0301 	movt	r3, #1
   15016:	f107 040c 	add.w	r4, r7, #12
   1501a:	6818      	ldr	r0, [r3, #0]
   1501c:	6859      	ldr	r1, [r3, #4]
   1501e:	689a      	ldr	r2, [r3, #8]
   15020:	68db      	ldr	r3, [r3, #12]
   15022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   15024:	79fb      	ldrb	r3, [r7, #7]
   15026:	091b      	lsrs	r3, r3, #4
   15028:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1502a:	79fb      	ldrb	r3, [r7, #7]
   1502c:	f003 030f 	and.w	r3, r3, #15
   15030:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   15032:	230f      	movs	r3, #15
   15034:	77fb      	strb	r3, [r7, #31]
    low = 15;
   15036:	230f      	movs	r3, #15
   15038:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   1503a:	7ffb      	ldrb	r3, [r7, #31]
   1503c:	f107 0220 	add.w	r2, r7, #32
   15040:	4413      	add	r3, r2
   15042:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15046:	4618      	mov	r0, r3
   15048:	f7ff ff1e 	bl	14e88 <uart0_transmit>
  uart0_transmit(hex[low]);
   1504c:	7fbb      	ldrb	r3, [r7, #30]
   1504e:	f107 0220 	add.w	r2, r7, #32
   15052:	4413      	add	r3, r2
   15054:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   15058:	4618      	mov	r0, r3
   1505a:	f7ff ff15 	bl	14e88 <uart0_transmit>
}
   1505e:	3724      	adds	r7, #36	; 0x24
   15060:	46bd      	mov	sp, r7
   15062:	bd90      	pop	{r4, r7, pc}

00015064 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   15064:	b480      	push	{r7}
   15066:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15068:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   1506c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15070:	781a      	ldrb	r2, [r3, #0]
   15072:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   15076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1507a:	781b      	ldrb	r3, [r3, #0]
   1507c:	b2db      	uxtb	r3, r3
   1507e:	429a      	cmp	r2, r3
   15080:	d10e      	bne.n	150a0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   15082:	f242 030a 	movw	r3, #8202	; 0x200a
   15086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1508a:	f242 020a 	movw	r2, #8202	; 0x200a
   1508e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15092:	7812      	ldrb	r2, [r2, #0]
   15094:	b2d2      	uxtb	r2, r2
   15096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1509a:	b2d2      	uxtb	r2, r2
   1509c:	701a      	strb	r2, [r3, #0]
   1509e:	e01d      	b.n	150dc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   150a0:	f242 030c 	movw	r3, #8204	; 0x200c
   150a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a8:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   150ac:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150b0:	7812      	ldrb	r2, [r2, #0]
   150b2:	b2d2      	uxtb	r2, r2
   150b4:	4611      	mov	r1, r2
   150b6:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   150ba:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150be:	5c52      	ldrb	r2, [r2, r1]
   150c0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   150c2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   150c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ca:	781b      	ldrb	r3, [r3, #0]
   150cc:	b2db      	uxtb	r3, r3
   150ce:	3301      	adds	r3, #1
   150d0:	b2da      	uxtb	r2, r3
   150d2:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   150d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150da:	701a      	strb	r2, [r3, #0]
  }
}
   150dc:	46bd      	mov	sp, r7
   150de:	f85d 7b04 	ldr.w	r7, [sp], #4
   150e2:	4770      	bx	lr

000150e4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   150e4:	b480      	push	{r7}
   150e6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   150e8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   150ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150f0:	781a      	ldrb	r2, [r3, #0]
   150f2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   150f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150fa:	781b      	ldrb	r3, [r3, #0]
   150fc:	b2db      	uxtb	r3, r3
   150fe:	429a      	cmp	r2, r3
   15100:	d10e      	bne.n	15120 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   15102:	f242 039a 	movw	r3, #8346	; 0x209a
   15106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1510a:	f242 029a 	movw	r2, #8346	; 0x209a
   1510e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15112:	7812      	ldrb	r2, [r2, #0]
   15114:	b2d2      	uxtb	r2, r2
   15116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1511a:	b2d2      	uxtb	r2, r2
   1511c:	701a      	strb	r2, [r3, #0]
   1511e:	e01d      	b.n	1515c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15120:	f242 039c 	movw	r3, #8348	; 0x209c
   15124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15128:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   1512c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15130:	7812      	ldrb	r2, [r2, #0]
   15132:	b2d2      	uxtb	r2, r2
   15134:	4611      	mov	r1, r2
   15136:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   1513a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1513e:	5c52      	ldrb	r2, [r2, r1]
   15140:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15142:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514a:	781b      	ldrb	r3, [r3, #0]
   1514c:	b2db      	uxtb	r3, r3
   1514e:	3301      	adds	r3, #1
   15150:	b2da      	uxtb	r2, r3
   15152:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1515a:	701a      	strb	r2, [r3, #0]
  }
}
   1515c:	46bd      	mov	sp, r7
   1515e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15162:	4770      	bx	lr

00015164 <uart0_init>:

void uart0_init( void ) {
   15164:	b480      	push	{r7}
   15166:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15168:	f242 0390 	movw	r3, #8336	; 0x2090
   1516c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15170:	2200      	movs	r2, #0
   15172:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15174:	f242 0309 	movw	r3, #8201	; 0x2009
   15178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517c:	2219      	movs	r2, #25
   1517e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15180:	f242 030b 	movw	r3, #8203	; 0x200b
   15184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15188:	2200      	movs	r2, #0
   1518a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1518c:	f242 030a 	movw	r3, #8202	; 0x200a
   15190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15194:	2218      	movs	r2, #24
   15196:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15198:	f242 0395 	movw	r3, #8341	; 0x2095
   1519c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a0:	2206      	movs	r2, #6
   151a2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   151a4:	f242 030a 	movw	r3, #8202	; 0x200a
   151a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ac:	f242 020a 	movw	r2, #8202	; 0x200a
   151b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151b4:	7812      	ldrb	r2, [r2, #0]
   151b6:	b2d2      	uxtb	r2, r2
   151b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   151bc:	b2d2      	uxtb	r2, r2
   151be:	701a      	strb	r2, [r3, #0]
}
   151c0:	46bd      	mov	sp, r7
   151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   151c6:	4770      	bx	lr

000151c8 <uart1_init>:

void uart1_init( void ) {
   151c8:	b480      	push	{r7}
   151ca:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   151cc:	f242 0398 	movw	r3, #8344	; 0x2098
   151d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d4:	2200      	movs	r2, #0
   151d6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   151d8:	f242 0399 	movw	r3, #8345	; 0x2099
   151dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e0:	2219      	movs	r2, #25
   151e2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   151e4:	f242 039b 	movw	r3, #8347	; 0x209b
   151e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ec:	2200      	movs	r2, #0
   151ee:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   151f0:	f242 039a 	movw	r3, #8346	; 0x209a
   151f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f8:	2218      	movs	r2, #24
   151fa:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   151fc:	f242 039d 	movw	r3, #8349	; 0x209d
   15200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15204:	2206      	movs	r2, #6
   15206:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15208:	f242 039a 	movw	r3, #8346	; 0x209a
   1520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15210:	f242 029a 	movw	r2, #8346	; 0x209a
   15214:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15218:	7812      	ldrb	r2, [r2, #0]
   1521a:	b2d2      	uxtb	r2, r2
   1521c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15220:	b2d2      	uxtb	r2, r2
   15222:	701a      	strb	r2, [r3, #0]
}
   15224:	46bd      	mov	sp, r7
   15226:	f85d 7b04 	ldr.w	r7, [sp], #4
   1522a:	4770      	bx	lr
   1522c:	0000      	movs	r0, r0
	...

00015230 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   15230:	b480      	push	{r7}
   15232:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   15234:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1523c:	f04f 0200 	mov.w	r2, #0
   15240:	601a      	str	r2, [r3, #0]
   15242:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1524a:	f04f 0200 	mov.w	r2, #0
   1524e:	601a      	str	r2, [r3, #0]
   15250:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15258:	f04f 0200 	mov.w	r2, #0
   1525c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1525e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15266:	f04f 0200 	mov.w	r2, #0
   1526a:	601a      	str	r2, [r3, #0]
   1526c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15274:	f04f 0200 	mov.w	r2, #0
   15278:	601a      	str	r2, [r3, #0]
   1527a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1527e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15282:	f04f 0200 	mov.w	r2, #0
   15286:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15288:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1528c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15290:	f04f 0200 	mov.w	r2, #0
   15294:	601a      	str	r2, [r3, #0]
   15296:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1529a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1529e:	f04f 0200 	mov.w	r2, #0
   152a2:	601a      	str	r2, [r3, #0]
   152a4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   152a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ac:	f04f 0200 	mov.w	r2, #0
   152b0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   152b2:	f64c 3320 	movw	r3, #52000	; 0xcb20
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	f04f 0200 	mov.w	r2, #0
   152be:	601a      	str	r2, [r3, #0]
   152c0:	f64c 3324 	movw	r3, #52004	; 0xcb24
   152c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152c8:	f04f 0200 	mov.w	r2, #0
   152cc:	601a      	str	r2, [r3, #0]
   152ce:	f64c 3328 	movw	r3, #52008	; 0xcb28
   152d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d6:	f04f 0200 	mov.w	r2, #0
   152da:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   152dc:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   152e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e4:	2200      	movs	r2, #0
   152e6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   152e8:	f240 5348 	movw	r3, #1352	; 0x548
   152ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152f0:	681a      	ldr	r2, [r3, #0]
   152f2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   152f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152fa:	601a      	str	r2, [r3, #0]
}
   152fc:	46bd      	mov	sp, r7
   152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   15302:	4770      	bx	lr

00015304 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   15304:	b580      	push	{r7, lr}
   15306:	b082      	sub	sp, #8
   15308:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1530a:	f240 533c 	movw	r3, #1340	; 0x53c
   1530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15312:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15314:	2b01      	cmp	r3, #1
   15316:	d105      	bne.n	15324 <estimator_update_state_infrared+0x20>
   15318:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1531c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15320:	681b      	ldr	r3, [r3, #0]
   15322:	e004      	b.n	1532e <estimator_update_state_infrared+0x2a>
   15324:	f240 5348 	movw	r3, #1352	; 0x548
   15328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1532c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1532e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15330:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15338:	881b      	ldrh	r3, [r3, #0]
   1533a:	b21b      	sxth	r3, r3
   1533c:	4618      	mov	r0, r3
   1533e:	f003 f897 	bl	18470 <__aeabi_i2f>
   15342:	4603      	mov	r3, r0
   15344:	4618      	mov	r0, r3
   15346:	6879      	ldr	r1, [r7, #4]
   15348:	f003 f8e6 	bl	18518 <__aeabi_fmul>
   1534c:	4603      	mov	r3, r0
   1534e:	461a      	mov	r2, r3
   15350:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15358:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1535a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   1535e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15362:	881b      	ldrh	r3, [r3, #0]
   15364:	b21b      	sxth	r3, r3
   15366:	4618      	mov	r0, r3
   15368:	f003 f882 	bl	18470 <__aeabi_i2f>
   1536c:	4603      	mov	r3, r0
   1536e:	4618      	mov	r0, r3
   15370:	6879      	ldr	r1, [r7, #4]
   15372:	f003 f8d1 	bl	18518 <__aeabi_fmul>
   15376:	4603      	mov	r3, r0
   15378:	461a      	mov	r2, r3
   1537a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1537e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15382:	601a      	str	r2, [r3, #0]
}
   15384:	3708      	adds	r7, #8
   15386:	46bd      	mov	sp, r7
   15388:	bd80      	pop	{r7, pc}
   1538a:	bf00      	nop

0001538c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1538c:	b5b0      	push	{r4, r5, r7, lr}
   1538e:	b084      	sub	sp, #16
   15390:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15392:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1539a:	781b      	ldrb	r3, [r3, #0]
   1539c:	2b00      	cmp	r3, #0
   1539e:	f000 81e8 	beq.w	15772 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   153a2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   153a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153aa:	681a      	ldr	r2, [r3, #0]
   153ac:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   153b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153b4:	681b      	ldr	r3, [r3, #0]
   153b6:	4610      	mov	r0, r2
   153b8:	4619      	mov	r1, r3
   153ba:	f002 ffa3 	bl	18304 <__aeabi_fsub>
   153be:	4603      	mov	r3, r0
   153c0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   153c2:	68b8      	ldr	r0, [r7, #8]
   153c4:	f002 fc14 	bl	17bf0 <__aeabi_f2d>
   153c8:	4602      	mov	r2, r0
   153ca:	460b      	mov	r3, r1
   153cc:	4610      	mov	r0, r2
   153ce:	4619      	mov	r1, r3
   153d0:	a385      	add	r3, pc, #532	; (adr r3, 155e8 <estimator_update_ir_estim+0x25c>)
   153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d6:	f002 feef 	bl	181b8 <__aeabi_dcmpgt>
   153da:	4603      	mov	r3, r0
   153dc:	2b00      	cmp	r3, #0
   153de:	d100      	bne.n	153e2 <estimator_update_ir_estim+0x56>
   153e0:	e219      	b.n	15816 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   153e2:	f64c 3338 	movw	r3, #52024	; 0xcb38
   153e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153ea:	681a      	ldr	r2, [r3, #0]
   153ec:	f64c 3350 	movw	r3, #52048	; 0xcb50
   153f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153f4:	681b      	ldr	r3, [r3, #0]
   153f6:	4610      	mov	r0, r2
   153f8:	4619      	mov	r1, r3
   153fa:	f002 ff83 	bl	18304 <__aeabi_fsub>
   153fe:	4603      	mov	r3, r0
   15400:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15402:	e013      	b.n	1542c <estimator_update_ir_estim+0xa0>
   15404:	68f8      	ldr	r0, [r7, #12]
   15406:	f002 fbf3 	bl	17bf0 <__aeabi_f2d>
   1540a:	4602      	mov	r2, r0
   1540c:	460b      	mov	r3, r1
   1540e:	4610      	mov	r0, r2
   15410:	4619      	mov	r1, r3
   15412:	a377      	add	r3, pc, #476	; (adr r3, 155f0 <estimator_update_ir_estim+0x264>)
   15414:	e9d3 2300 	ldrd	r2, r3, [r3]
   15418:	f002 fa8a 	bl	17930 <__aeabi_dsub>
   1541c:	4602      	mov	r2, r0
   1541e:	460b      	mov	r3, r1
   15420:	4610      	mov	r0, r2
   15422:	4619      	mov	r1, r3
   15424:	f002 ff1a 	bl	1825c <__aeabi_d2f>
   15428:	4603      	mov	r3, r0
   1542a:	60fb      	str	r3, [r7, #12]
   1542c:	68f8      	ldr	r0, [r7, #12]
   1542e:	f002 fbdf 	bl	17bf0 <__aeabi_f2d>
   15432:	4602      	mov	r2, r0
   15434:	460b      	mov	r3, r1
   15436:	4610      	mov	r0, r2
   15438:	4619      	mov	r1, r3
   1543a:	a36f      	add	r3, pc, #444	; (adr r3, 155f8 <estimator_update_ir_estim+0x26c>)
   1543c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15440:	f002 feba 	bl	181b8 <__aeabi_dcmpgt>
   15444:	4603      	mov	r3, r0
   15446:	2b00      	cmp	r3, #0
   15448:	d1dc      	bne.n	15404 <estimator_update_ir_estim+0x78>
   1544a:	e013      	b.n	15474 <estimator_update_ir_estim+0xe8>
   1544c:	68f8      	ldr	r0, [r7, #12]
   1544e:	f002 fbcf 	bl	17bf0 <__aeabi_f2d>
   15452:	4602      	mov	r2, r0
   15454:	460b      	mov	r3, r1
   15456:	4610      	mov	r0, r2
   15458:	4619      	mov	r1, r3
   1545a:	a365      	add	r3, pc, #404	; (adr r3, 155f0 <estimator_update_ir_estim+0x264>)
   1545c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15460:	f002 fa68 	bl	17934 <__adddf3>
   15464:	4602      	mov	r2, r0
   15466:	460b      	mov	r3, r1
   15468:	4610      	mov	r0, r2
   1546a:	4619      	mov	r1, r3
   1546c:	f002 fef6 	bl	1825c <__aeabi_d2f>
   15470:	4603      	mov	r3, r0
   15472:	60fb      	str	r3, [r7, #12]
   15474:	68f8      	ldr	r0, [r7, #12]
   15476:	f002 fbbb 	bl	17bf0 <__aeabi_f2d>
   1547a:	4602      	mov	r2, r0
   1547c:	460b      	mov	r3, r1
   1547e:	4610      	mov	r0, r2
   15480:	4619      	mov	r1, r3
   15482:	a35f      	add	r3, pc, #380	; (adr r3, 15600 <estimator_update_ir_estim+0x274>)
   15484:	e9d3 2300 	ldrd	r2, r3, [r3]
   15488:	f002 fe78 	bl	1817c <__aeabi_dcmplt>
   1548c:	4603      	mov	r3, r0
   1548e:	2b00      	cmp	r3, #0
   15490:	d1dc      	bne.n	1544c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15492:	68f8      	ldr	r0, [r7, #12]
   15494:	68b9      	ldr	r1, [r7, #8]
   15496:	f003 f8f3 	bl	18680 <__aeabi_fdiv>
   1549a:	4603      	mov	r3, r0
   1549c:	4618      	mov	r0, r3
   1549e:	f002 fba7 	bl	17bf0 <__aeabi_f2d>
   154a2:	4602      	mov	r2, r0
   154a4:	460b      	mov	r3, r1
   154a6:	4610      	mov	r0, r2
   154a8:	4619      	mov	r1, r3
   154aa:	f04f 0200 	mov.w	r2, #0
   154ae:	f04f 0300 	mov.w	r3, #0
   154b2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   154b6:	f002 fbef 	bl	17c98 <__aeabi_dmul>
   154ba:	4602      	mov	r2, r0
   154bc:	460b      	mov	r3, r1
   154be:	4610      	mov	r0, r2
   154c0:	4619      	mov	r1, r3
   154c2:	a351      	add	r3, pc, #324	; (adr r3, 15608 <estimator_update_ir_estim+0x27c>)
   154c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154c8:	f002 fd10 	bl	17eec <__aeabi_ddiv>
   154cc:	4602      	mov	r2, r0
   154ce:	460b      	mov	r3, r1
   154d0:	4610      	mov	r0, r2
   154d2:	4619      	mov	r1, r3
   154d4:	f002 fec2 	bl	1825c <__aeabi_d2f>
   154d8:	4603      	mov	r3, r0
   154da:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   154dc:	e013      	b.n	15506 <estimator_update_ir_estim+0x17a>
   154de:	68f8      	ldr	r0, [r7, #12]
   154e0:	f002 fb86 	bl	17bf0 <__aeabi_f2d>
   154e4:	4602      	mov	r2, r0
   154e6:	460b      	mov	r3, r1
   154e8:	4610      	mov	r0, r2
   154ea:	4619      	mov	r1, r3
   154ec:	a340      	add	r3, pc, #256	; (adr r3, 155f0 <estimator_update_ir_estim+0x264>)
   154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   154f2:	f002 fa1d 	bl	17930 <__aeabi_dsub>
   154f6:	4602      	mov	r2, r0
   154f8:	460b      	mov	r3, r1
   154fa:	4610      	mov	r0, r2
   154fc:	4619      	mov	r1, r3
   154fe:	f002 fead 	bl	1825c <__aeabi_d2f>
   15502:	4603      	mov	r3, r0
   15504:	60fb      	str	r3, [r7, #12]
   15506:	68f8      	ldr	r0, [r7, #12]
   15508:	f002 fb72 	bl	17bf0 <__aeabi_f2d>
   1550c:	4602      	mov	r2, r0
   1550e:	460b      	mov	r3, r1
   15510:	4610      	mov	r0, r2
   15512:	4619      	mov	r1, r3
   15514:	a338      	add	r3, pc, #224	; (adr r3, 155f8 <estimator_update_ir_estim+0x26c>)
   15516:	e9d3 2300 	ldrd	r2, r3, [r3]
   1551a:	f002 fe4d 	bl	181b8 <__aeabi_dcmpgt>
   1551e:	4603      	mov	r3, r0
   15520:	2b00      	cmp	r3, #0
   15522:	d1dc      	bne.n	154de <estimator_update_ir_estim+0x152>
   15524:	e013      	b.n	1554e <estimator_update_ir_estim+0x1c2>
   15526:	68f8      	ldr	r0, [r7, #12]
   15528:	f002 fb62 	bl	17bf0 <__aeabi_f2d>
   1552c:	4602      	mov	r2, r0
   1552e:	460b      	mov	r3, r1
   15530:	4610      	mov	r0, r2
   15532:	4619      	mov	r1, r3
   15534:	a32e      	add	r3, pc, #184	; (adr r3, 155f0 <estimator_update_ir_estim+0x264>)
   15536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1553a:	f002 f9fb 	bl	17934 <__adddf3>
   1553e:	4602      	mov	r2, r0
   15540:	460b      	mov	r3, r1
   15542:	4610      	mov	r0, r2
   15544:	4619      	mov	r1, r3
   15546:	f002 fe89 	bl	1825c <__aeabi_d2f>
   1554a:	4603      	mov	r3, r0
   1554c:	60fb      	str	r3, [r7, #12]
   1554e:	68f8      	ldr	r0, [r7, #12]
   15550:	f002 fb4e 	bl	17bf0 <__aeabi_f2d>
   15554:	4602      	mov	r2, r0
   15556:	460b      	mov	r3, r1
   15558:	4610      	mov	r0, r2
   1555a:	4619      	mov	r1, r3
   1555c:	a328      	add	r3, pc, #160	; (adr r3, 15600 <estimator_update_ir_estim+0x274>)
   1555e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15562:	f002 fe0b 	bl	1817c <__aeabi_dcmplt>
   15566:	4603      	mov	r3, r0
   15568:	2b00      	cmp	r3, #0
   1556a:	d1dc      	bne.n	15526 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1556c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15574:	881b      	ldrh	r3, [r3, #0]
   15576:	b21b      	sxth	r3, r3
   15578:	4618      	mov	r0, r3
   1557a:	f002 ff79 	bl	18470 <__aeabi_i2f>
   1557e:	4602      	mov	r2, r0
   15580:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15588:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1558a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1558e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15592:	68fa      	ldr	r2, [r7, #12]
   15594:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15596:	68f8      	ldr	r0, [r7, #12]
   15598:	f04f 0100 	mov.w	r1, #0
   1559c:	f003 f95a 	bl	18854 <__aeabi_fcmplt>
   155a0:	4603      	mov	r3, r0
   155a2:	2b00      	cmp	r3, #0
   155a4:	d003      	beq.n	155ae <estimator_update_ir_estim+0x222>
   155a6:	68fb      	ldr	r3, [r7, #12]
   155a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   155ac:	e000      	b.n	155b0 <estimator_update_ir_estim+0x224>
   155ae:	68fb      	ldr	r3, [r7, #12]
   155b0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   155b2:	6878      	ldr	r0, [r7, #4]
   155b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   155b8:	f003 f94c 	bl	18854 <__aeabi_fcmplt>
   155bc:	4603      	mov	r3, r0
   155be:	2b00      	cmp	r3, #0
   155c0:	d100      	bne.n	155c4 <estimator_update_ir_estim+0x238>
   155c2:	e128      	b.n	15816 <estimator_update_ir_estim+0x48a>
   155c4:	6878      	ldr	r0, [r7, #4]
   155c6:	f002 fb13 	bl	17bf0 <__aeabi_f2d>
   155ca:	4602      	mov	r2, r0
   155cc:	460b      	mov	r3, r1
   155ce:	4610      	mov	r0, r2
   155d0:	4619      	mov	r1, r3
   155d2:	a30f      	add	r3, pc, #60	; (adr r3, 15610 <estimator_update_ir_estim+0x284>)
   155d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   155d8:	f002 fdee 	bl	181b8 <__aeabi_dcmpgt>
   155dc:	4603      	mov	r3, r0
   155de:	2b00      	cmp	r3, #0
   155e0:	d11a      	bne.n	15618 <estimator_update_ir_estim+0x28c>
   155e2:	e118      	b.n	15816 <estimator_update_ir_estim+0x48a>
   155e4:	f3af 8000 	nop.w
   155e8:	9999999a 	.word	0x9999999a
   155ec:	3fb99999 	.word	0x3fb99999
   155f0:	54442d18 	.word	0x54442d18
   155f4:	401921fb 	.word	0x401921fb
   155f8:	54442d18 	.word	0x54442d18
   155fc:	400921fb 	.word	0x400921fb
   15600:	54442d18 	.word	0x54442d18
   15604:	c00921fb 	.word	0xc00921fb
   15608:	51eb851f 	.word	0x51eb851f
   1560c:	40239eb8 	.word	0x40239eb8
   15610:	9999999a 	.word	0x9999999a
   15614:	3fa99999 	.word	0x3fa99999
   15618:	f240 5340 	movw	r3, #1344	; 0x540
   1561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15620:	881b      	ldrh	r3, [r3, #0]
   15622:	b21b      	sxth	r3, r3
   15624:	425b      	negs	r3, r3
   15626:	0fda      	lsrs	r2, r3, #31
   15628:	4413      	add	r3, r2
   1562a:	105b      	asrs	r3, r3, #1
   1562c:	461a      	mov	r2, r3
   1562e:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15636:	881b      	ldrh	r3, [r3, #0]
   15638:	b21b      	sxth	r3, r3
   1563a:	429a      	cmp	r2, r3
   1563c:	f280 8098 	bge.w	15770 <estimator_update_ir_estim+0x3e4>
   15640:	f240 5340 	movw	r3, #1344	; 0x540
   15644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15648:	881b      	ldrh	r3, [r3, #0]
   1564a:	b21b      	sxth	r3, r3
   1564c:	0fda      	lsrs	r2, r3, #31
   1564e:	4413      	add	r3, r2
   15650:	105b      	asrs	r3, r3, #1
   15652:	b29a      	uxth	r2, r3
   15654:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1565c:	881b      	ldrh	r3, [r3, #0]
   1565e:	b212      	sxth	r2, r2
   15660:	b21b      	sxth	r3, r3
   15662:	429a      	cmp	r2, r3
   15664:	f340 8084 	ble.w	15770 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15668:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1566c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15670:	681a      	ldr	r2, [r3, #0]
   15672:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1567a:	681b      	ldr	r3, [r3, #0]
   1567c:	4610      	mov	r0, r2
   1567e:	4619      	mov	r1, r3
   15680:	f002 ff4a 	bl	18518 <__aeabi_fmul>
   15684:	4603      	mov	r3, r0
   15686:	4618      	mov	r0, r3
   15688:	f002 fab2 	bl	17bf0 <__aeabi_f2d>
   1568c:	4604      	mov	r4, r0
   1568e:	460d      	mov	r5, r1
   15690:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15698:	681b      	ldr	r3, [r3, #0]
   1569a:	4618      	mov	r0, r3
   1569c:	f002 faa8 	bl	17bf0 <__aeabi_f2d>
   156a0:	4602      	mov	r2, r0
   156a2:	460b      	mov	r3, r1
   156a4:	4610      	mov	r0, r2
   156a6:	4619      	mov	r1, r3
   156a8:	a367      	add	r3, pc, #412	; (adr r3, 15848 <estimator_update_ir_estim+0x4bc>)
   156aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   156ae:	f002 faf3 	bl	17c98 <__aeabi_dmul>
   156b2:	4602      	mov	r2, r0
   156b4:	460b      	mov	r3, r1
   156b6:	4620      	mov	r0, r4
   156b8:	4629      	mov	r1, r5
   156ba:	f002 f93b 	bl	17934 <__adddf3>
   156be:	4602      	mov	r2, r0
   156c0:	460b      	mov	r3, r1
   156c2:	4610      	mov	r0, r2
   156c4:	4619      	mov	r1, r3
   156c6:	f002 fdc9 	bl	1825c <__aeabi_d2f>
   156ca:	4602      	mov	r2, r0
   156cc:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156d4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   156d6:	f64c 3340 	movw	r3, #52032	; 0xcb40
   156da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156de:	681a      	ldr	r2, [r3, #0]
   156e0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   156e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e8:	681b      	ldr	r3, [r3, #0]
   156ea:	4610      	mov	r0, r2
   156ec:	4619      	mov	r1, r3
   156ee:	f002 ff13 	bl	18518 <__aeabi_fmul>
   156f2:	4603      	mov	r3, r0
   156f4:	4618      	mov	r0, r3
   156f6:	f002 fa7b 	bl	17bf0 <__aeabi_f2d>
   156fa:	4604      	mov	r4, r0
   156fc:	460d      	mov	r5, r1
   156fe:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15706:	681b      	ldr	r3, [r3, #0]
   15708:	4618      	mov	r0, r3
   1570a:	f002 fa71 	bl	17bf0 <__aeabi_f2d>
   1570e:	4602      	mov	r2, r0
   15710:	460b      	mov	r3, r1
   15712:	4610      	mov	r0, r2
   15714:	4619      	mov	r1, r3
   15716:	a34c      	add	r3, pc, #304	; (adr r3, 15848 <estimator_update_ir_estim+0x4bc>)
   15718:	e9d3 2300 	ldrd	r2, r3, [r3]
   1571c:	f002 fabc 	bl	17c98 <__aeabi_dmul>
   15720:	4602      	mov	r2, r0
   15722:	460b      	mov	r3, r1
   15724:	4620      	mov	r0, r4
   15726:	4629      	mov	r1, r5
   15728:	f002 f904 	bl	17934 <__adddf3>
   1572c:	4602      	mov	r2, r0
   1572e:	460b      	mov	r3, r1
   15730:	4610      	mov	r0, r2
   15732:	4619      	mov	r1, r3
   15734:	f002 fd92 	bl	1825c <__aeabi_d2f>
   15738:	4602      	mov	r2, r0
   1573a:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1573e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15742:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15744:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574c:	681a      	ldr	r2, [r3, #0]
   1574e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15756:	681b      	ldr	r3, [r3, #0]
   15758:	4610      	mov	r0, r2
   1575a:	4619      	mov	r1, r3
   1575c:	f002 ff90 	bl	18680 <__aeabi_fdiv>
   15760:	4603      	mov	r3, r0
   15762:	461a      	mov	r2, r3
   15764:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576c:	601a      	str	r2, [r3, #0]
   1576e:	e052      	b.n	15816 <estimator_update_ir_estim+0x48a>
   15770:	e051      	b.n	15816 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15772:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577a:	2201      	movs	r2, #1
   1577c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1577e:	f240 5340 	movw	r3, #1344	; 0x540
   15782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15786:	881b      	ldrh	r3, [r3, #0]
   15788:	b21b      	sxth	r3, r3
   1578a:	4618      	mov	r0, r3
   1578c:	f002 fe70 	bl	18470 <__aeabi_i2f>
   15790:	4603      	mov	r3, r0
   15792:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15794:	6838      	ldr	r0, [r7, #0]
   15796:	6839      	ldr	r1, [r7, #0]
   15798:	f002 febe 	bl	18518 <__aeabi_fmul>
   1579c:	4603      	mov	r3, r0
   1579e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   157a0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   157a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a8:	681b      	ldr	r3, [r3, #0]
   157aa:	4618      	mov	r0, r3
   157ac:	f002 fa20 	bl	17bf0 <__aeabi_f2d>
   157b0:	4602      	mov	r2, r0
   157b2:	460b      	mov	r3, r1
   157b4:	4610      	mov	r0, r2
   157b6:	4619      	mov	r1, r3
   157b8:	f04f 0200 	mov.w	r2, #0
   157bc:	f04f 0300 	mov.w	r3, #0
   157c0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   157c4:	f002 fa68 	bl	17c98 <__aeabi_dmul>
   157c8:	4602      	mov	r2, r0
   157ca:	460b      	mov	r3, r1
   157cc:	4614      	mov	r4, r2
   157ce:	461d      	mov	r5, r3
   157d0:	6838      	ldr	r0, [r7, #0]
   157d2:	f002 fa0d 	bl	17bf0 <__aeabi_f2d>
   157d6:	4602      	mov	r2, r0
   157d8:	460b      	mov	r3, r1
   157da:	4620      	mov	r0, r4
   157dc:	4629      	mov	r1, r5
   157de:	f002 fa5b 	bl	17c98 <__aeabi_dmul>
   157e2:	4602      	mov	r2, r0
   157e4:	460b      	mov	r3, r1
   157e6:	4610      	mov	r0, r2
   157e8:	4619      	mov	r1, r3
   157ea:	f002 fd37 	bl	1825c <__aeabi_d2f>
   157ee:	4602      	mov	r2, r0
   157f0:	f64c 3354 	movw	r3, #52052	; 0xcb54
   157f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   157fa:	6838      	ldr	r0, [r7, #0]
   157fc:	f04f 0100 	mov.w	r1, #0
   15800:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15804:	f002 fe88 	bl	18518 <__aeabi_fmul>
   15808:	4603      	mov	r3, r0
   1580a:	461a      	mov	r2, r3
   1580c:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15814:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15816:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1581a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581e:	681a      	ldr	r2, [r3, #0]
   15820:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15828:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1582a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1582e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15832:	681a      	ldr	r2, [r3, #0]
   15834:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1583c:	601a      	str	r2, [r3, #0]
}
   1583e:	3710      	adds	r7, #16
   15840:	46bd      	mov	sp, r7
   15842:	bdb0      	pop	{r4, r5, r7, pc}
   15844:	f3af 8000 	nop.w
   15848:	d916872b 	.word	0xd916872b
   1584c:	3feff7ce 	.word	0x3feff7ce

00015850 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15850:	b580      	push	{r7, lr}
   15852:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15854:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1585c:	781b      	ldrb	r3, [r3, #0]
   1585e:	f003 0320 	and.w	r3, r3, #32
   15862:	2b00      	cmp	r3, #0
   15864:	d044      	beq.n	158f0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15866:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1586a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586e:	681a      	ldr	r2, [r3, #0]
   15870:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15878:	601a      	str	r2, [r3, #0]
   1587a:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1587e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15882:	681a      	ldr	r2, [r3, #0]
   15884:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1588c:	601a      	str	r2, [r3, #0]
   1588e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   15892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15896:	681a      	ldr	r2, [r3, #0]
   15898:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1589c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   158a2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   158a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158aa:	681a      	ldr	r2, [r3, #0]
   158ac:	f64c 3334 	movw	r3, #52020	; 0xcb34
   158b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b4:	601a      	str	r2, [r3, #0]
   158b6:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   158ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158be:	681a      	ldr	r2, [r3, #0]
   158c0:	f64c 3338 	movw	r3, #52024	; 0xcb38
   158c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c8:	601a      	str	r2, [r3, #0]
   158ca:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   158ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d2:	681a      	ldr	r2, [r3, #0]
   158d4:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   158d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158dc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   158de:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   158e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e6:	881b      	ldrh	r3, [r3, #0]
   158e8:	2b00      	cmp	r3, #0
   158ea:	d001      	beq.n	158f0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   158ec:	f7ff fd4e 	bl	1538c <estimator_update_ir_estim>
  }
}
   158f0:	bd80      	pop	{r7, pc}
   158f2:	bf00      	nop

000158f4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   158f4:	b480      	push	{r7}
   158f6:	af00      	add	r7, sp, #0
  
}
   158f8:	46bd      	mov	sp, r7
   158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   158fe:	4770      	bx	lr

00015900 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15900:	b5b0      	push	{r4, r5, r7, lr}
   15902:	b082      	sub	sp, #8
   15904:	af00      	add	r7, sp, #0
   15906:	4603      	mov	r3, r0
   15908:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1590a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1590e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15912:	781b      	ldrb	r3, [r3, #0]
   15914:	2b01      	cmp	r3, #1
   15916:	f040 80e0 	bne.w	15ada <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1591a:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   1591e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15922:	781b      	ldrb	r3, [r3, #0]
   15924:	2b02      	cmp	r3, #2
   15926:	d168      	bne.n	159fa <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15928:	79fb      	ldrb	r3, [r7, #7]
   1592a:	2b00      	cmp	r3, #0
   1592c:	d013      	beq.n	15956 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1592e:	f240 5344 	movw	r3, #1348	; 0x544
   15932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15936:	881a      	ldrh	r2, [r3, #0]
   15938:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1593c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15940:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15942:	f24c 6350 	movw	r3, #50768	; 0xc650
   15946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594a:	895a      	ldrh	r2, [r3, #10]
   1594c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15954:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15956:	f24c 6350 	movw	r3, #50768	; 0xc650
   1595a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1595e:	895b      	ldrh	r3, [r3, #10]
   15960:	b21a      	sxth	r2, r3
   15962:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1596a:	881b      	ldrh	r3, [r3, #0]
   1596c:	b21b      	sxth	r3, r3
   1596e:	1ad3      	subs	r3, r2, r3
   15970:	4618      	mov	r0, r3
   15972:	f002 fd7d 	bl	18470 <__aeabi_i2f>
   15976:	4603      	mov	r3, r0
   15978:	4618      	mov	r0, r3
   1597a:	f002 f939 	bl	17bf0 <__aeabi_f2d>
   1597e:	4602      	mov	r2, r0
   15980:	460b      	mov	r3, r1
   15982:	4610      	mov	r0, r2
   15984:	4619      	mov	r1, r3
   15986:	f04f 0200 	mov.w	r2, #0
   1598a:	f04f 0300 	mov.w	r3, #0
   1598e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15992:	f002 f981 	bl	17c98 <__aeabi_dmul>
   15996:	4602      	mov	r2, r0
   15998:	460b      	mov	r3, r1
   1599a:	4610      	mov	r0, r2
   1599c:	4619      	mov	r1, r3
   1599e:	f04f 0200 	mov.w	r2, #0
   159a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   159a6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   159aa:	f002 fa9f 	bl	17eec <__aeabi_ddiv>
   159ae:	4602      	mov	r2, r0
   159b0:	460b      	mov	r3, r1
   159b2:	4610      	mov	r0, r2
   159b4:	4619      	mov	r1, r3
   159b6:	f002 fc09 	bl	181cc <__aeabi_d2iz>
   159ba:	4603      	mov	r3, r0
   159bc:	b29b      	uxth	r3, r3
   159be:	b29a      	uxth	r2, r3
   159c0:	f64c 3362 	movw	r3, #52066	; 0xcb62
   159c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c8:	881b      	ldrh	r3, [r3, #0]
   159ca:	b29b      	uxth	r3, r3
   159cc:	4413      	add	r3, r2
   159ce:	b29b      	uxth	r3, r3
   159d0:	b29a      	uxth	r2, r3
   159d2:	f240 5344 	movw	r3, #1348	; 0x544
   159d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159da:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   159dc:	f240 5344 	movw	r3, #1348	; 0x544
   159e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159e4:	881b      	ldrh	r3, [r3, #0]
   159e6:	b21b      	sxth	r3, r3
   159e8:	4618      	mov	r0, r3
   159ea:	f002 fd41 	bl	18470 <__aeabi_i2f>
   159ee:	4602      	mov	r2, r0
   159f0:	f24c 5338 	movw	r3, #50488	; 0xc538
   159f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159fa:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   159fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a02:	781b      	ldrb	r3, [r3, #0]
   15a04:	2b02      	cmp	r3, #2
   15a06:	d168      	bne.n	15ada <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15a08:	79fb      	ldrb	r3, [r7, #7]
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d013      	beq.n	15a36 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15a0e:	f240 5342 	movw	r3, #1346	; 0x542
   15a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a16:	881a      	ldrh	r2, [r3, #0]
   15a18:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a20:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15a22:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a2a:	899a      	ldrh	r2, [r3, #12]
   15a2c:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a34:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15a36:	f24c 6350 	movw	r3, #50768	; 0xc650
   15a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a3e:	899b      	ldrh	r3, [r3, #12]
   15a40:	b21a      	sxth	r2, r3
   15a42:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a4a:	881b      	ldrh	r3, [r3, #0]
   15a4c:	b21b      	sxth	r3, r3
   15a4e:	1ad3      	subs	r3, r2, r3
   15a50:	4618      	mov	r0, r3
   15a52:	f002 fd0d 	bl	18470 <__aeabi_i2f>
   15a56:	4603      	mov	r3, r0
   15a58:	4618      	mov	r0, r3
   15a5a:	f002 f8c9 	bl	17bf0 <__aeabi_f2d>
   15a5e:	4602      	mov	r2, r0
   15a60:	460b      	mov	r3, r1
   15a62:	4610      	mov	r0, r2
   15a64:	4619      	mov	r1, r3
   15a66:	f04f 0200 	mov.w	r2, #0
   15a6a:	f04f 0300 	mov.w	r3, #0
   15a6e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15a72:	f002 f911 	bl	17c98 <__aeabi_dmul>
   15a76:	4602      	mov	r2, r0
   15a78:	460b      	mov	r3, r1
   15a7a:	4610      	mov	r0, r2
   15a7c:	4619      	mov	r1, r3
   15a7e:	f04f 0200 	mov.w	r2, #0
   15a82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a86:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a8a:	f002 fa2f 	bl	17eec <__aeabi_ddiv>
   15a8e:	4602      	mov	r2, r0
   15a90:	460b      	mov	r3, r1
   15a92:	4610      	mov	r0, r2
   15a94:	4619      	mov	r1, r3
   15a96:	f002 fb99 	bl	181cc <__aeabi_d2iz>
   15a9a:	4603      	mov	r3, r0
   15a9c:	b29b      	uxth	r3, r3
   15a9e:	b29a      	uxth	r2, r3
   15aa0:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa8:	881b      	ldrh	r3, [r3, #0]
   15aaa:	b29b      	uxth	r3, r3
   15aac:	4413      	add	r3, r2
   15aae:	b29b      	uxth	r3, r3
   15ab0:	b29a      	uxth	r2, r3
   15ab2:	f240 5342 	movw	r3, #1346	; 0x542
   15ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aba:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15abc:	f240 5342 	movw	r3, #1346	; 0x542
   15ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac4:	881b      	ldrh	r3, [r3, #0]
   15ac6:	b21b      	sxth	r3, r3
   15ac8:	4618      	mov	r0, r3
   15aca:	f002 fcd1 	bl	18470 <__aeabi_i2f>
   15ace:	4602      	mov	r2, r0
   15ad0:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15ada:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae2:	781b      	ldrb	r3, [r3, #0]
   15ae4:	2b02      	cmp	r3, #2
   15ae6:	f040 80da 	bne.w	15c9e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15aea:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15af2:	781b      	ldrb	r3, [r3, #0]
   15af4:	2b02      	cmp	r3, #2
   15af6:	d165      	bne.n	15bc4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15af8:	79fb      	ldrb	r3, [r7, #7]
   15afa:	2b00      	cmp	r3, #0
   15afc:	d013      	beq.n	15b26 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15afe:	f240 5358 	movw	r3, #1368	; 0x558
   15b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b06:	681a      	ldr	r2, [r3, #0]
   15b08:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b10:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15b12:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b1a:	895a      	ldrh	r2, [r3, #10]
   15b1c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b24:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15b26:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b2e:	681b      	ldr	r3, [r3, #0]
   15b30:	4618      	mov	r0, r3
   15b32:	f002 f85d 	bl	17bf0 <__aeabi_f2d>
   15b36:	4604      	mov	r4, r0
   15b38:	460d      	mov	r5, r1
   15b3a:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b42:	895b      	ldrh	r3, [r3, #10]
   15b44:	b21a      	sxth	r2, r3
   15b46:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b4e:	881b      	ldrh	r3, [r3, #0]
   15b50:	b21b      	sxth	r3, r3
   15b52:	1ad3      	subs	r3, r2, r3
   15b54:	4618      	mov	r0, r3
   15b56:	f002 fc8b 	bl	18470 <__aeabi_i2f>
   15b5a:	4603      	mov	r3, r0
   15b5c:	4618      	mov	r0, r3
   15b5e:	f002 f847 	bl	17bf0 <__aeabi_f2d>
   15b62:	4602      	mov	r2, r0
   15b64:	460b      	mov	r3, r1
   15b66:	4610      	mov	r0, r2
   15b68:	4619      	mov	r1, r3
   15b6a:	a34f      	add	r3, pc, #316	; (adr r3, 15ca8 <inflight_calib+0x3a8>)
   15b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b70:	f002 f892 	bl	17c98 <__aeabi_dmul>
   15b74:	4602      	mov	r2, r0
   15b76:	460b      	mov	r3, r1
   15b78:	4610      	mov	r0, r2
   15b7a:	4619      	mov	r1, r3
   15b7c:	f04f 0200 	mov.w	r2, #0
   15b80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b84:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b88:	f002 f9b0 	bl	17eec <__aeabi_ddiv>
   15b8c:	4602      	mov	r2, r0
   15b8e:	460b      	mov	r3, r1
   15b90:	4620      	mov	r0, r4
   15b92:	4629      	mov	r1, r5
   15b94:	f001 fece 	bl	17934 <__adddf3>
   15b98:	4602      	mov	r2, r0
   15b9a:	460b      	mov	r3, r1
   15b9c:	4610      	mov	r0, r2
   15b9e:	4619      	mov	r1, r3
   15ba0:	f002 fb5c 	bl	1825c <__aeabi_d2f>
   15ba4:	4602      	mov	r2, r0
   15ba6:	f240 5358 	movw	r3, #1368	; 0x558
   15baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bae:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15bb0:	f240 5358 	movw	r3, #1368	; 0x558
   15bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bb8:	681a      	ldr	r2, [r3, #0]
   15bba:	f24c 5338 	movw	r3, #50488	; 0xc538
   15bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bc2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15bc4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bcc:	781b      	ldrb	r3, [r3, #0]
   15bce:	2b02      	cmp	r3, #2
   15bd0:	d165      	bne.n	15c9e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15bd2:	79fb      	ldrb	r3, [r7, #7]
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	d013      	beq.n	15c00 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15bd8:	f240 535c 	movw	r3, #1372	; 0x55c
   15bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15be0:	681a      	ldr	r2, [r3, #0]
   15be2:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bea:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15bec:	f24c 6350 	movw	r3, #50768	; 0xc650
   15bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bf4:	899a      	ldrh	r2, [r3, #12]
   15bf6:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bfe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15c00:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c08:	681b      	ldr	r3, [r3, #0]
   15c0a:	4618      	mov	r0, r3
   15c0c:	f001 fff0 	bl	17bf0 <__aeabi_f2d>
   15c10:	4604      	mov	r4, r0
   15c12:	460d      	mov	r5, r1
   15c14:	f24c 6350 	movw	r3, #50768	; 0xc650
   15c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c1c:	899b      	ldrh	r3, [r3, #12]
   15c1e:	b21a      	sxth	r2, r3
   15c20:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c28:	881b      	ldrh	r3, [r3, #0]
   15c2a:	b21b      	sxth	r3, r3
   15c2c:	1ad3      	subs	r3, r2, r3
   15c2e:	4618      	mov	r0, r3
   15c30:	f002 fc1e 	bl	18470 <__aeabi_i2f>
   15c34:	4603      	mov	r3, r0
   15c36:	4618      	mov	r0, r3
   15c38:	f001 ffda 	bl	17bf0 <__aeabi_f2d>
   15c3c:	4602      	mov	r2, r0
   15c3e:	460b      	mov	r3, r1
   15c40:	4610      	mov	r0, r2
   15c42:	4619      	mov	r1, r3
   15c44:	a31a      	add	r3, pc, #104	; (adr r3, 15cb0 <inflight_calib+0x3b0>)
   15c46:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c4a:	f002 f825 	bl	17c98 <__aeabi_dmul>
   15c4e:	4602      	mov	r2, r0
   15c50:	460b      	mov	r3, r1
   15c52:	4610      	mov	r0, r2
   15c54:	4619      	mov	r1, r3
   15c56:	f04f 0200 	mov.w	r2, #0
   15c5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15c5e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15c62:	f002 f943 	bl	17eec <__aeabi_ddiv>
   15c66:	4602      	mov	r2, r0
   15c68:	460b      	mov	r3, r1
   15c6a:	4620      	mov	r0, r4
   15c6c:	4629      	mov	r1, r5
   15c6e:	f001 fe61 	bl	17934 <__adddf3>
   15c72:	4602      	mov	r2, r0
   15c74:	460b      	mov	r3, r1
   15c76:	4610      	mov	r0, r2
   15c78:	4619      	mov	r1, r3
   15c7a:	f002 faef 	bl	1825c <__aeabi_d2f>
   15c7e:	4602      	mov	r2, r0
   15c80:	f240 535c 	movw	r3, #1372	; 0x55c
   15c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c88:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15c8a:	f240 535c 	movw	r3, #1372	; 0x55c
   15c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c92:	681a      	ldr	r2, [r3, #0]
   15c94:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c9c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15c9e:	3708      	adds	r7, #8
   15ca0:	46bd      	mov	sp, r7
   15ca2:	bdb0      	pop	{r4, r5, r7, pc}
   15ca4:	f3af 8000 	nop.w
   15ca8:	9999999a 	.word	0x9999999a
   15cac:	3fb99999 	.word	0x3fb99999
   15cb0:	9999999a 	.word	0x9999999a
   15cb4:	bfc99999 	.word	0xbfc99999

00015cb8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15cbc:	b08e      	sub	sp, #56	; 0x38
   15cbe:	af00      	add	r7, sp, #0
   15cc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15cc4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15cc8:	a357      	add	r3, pc, #348	; (adr r3, 15e28 <pp_atan2+0x170>)
   15cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15cd6:	f04f 0200 	mov.w	r2, #0
   15cda:	f04f 0300 	mov.w	r3, #0
   15cde:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15ce2:	f001 ffd9 	bl	17c98 <__aeabi_dmul>
   15ce6:	4602      	mov	r2, r0
   15ce8:	460b      	mov	r3, r1
   15cea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15cee:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cf2:	f04f 0200 	mov.w	r2, #0
   15cf6:	f04f 0300 	mov.w	r3, #0
   15cfa:	f002 fa3f 	bl	1817c <__aeabi_dcmplt>
   15cfe:	4603      	mov	r3, r0
   15d00:	2b00      	cmp	r3, #0
   15d02:	d009      	beq.n	15d18 <pp_atan2+0x60>
   15d04:	a14a      	add	r1, pc, #296	; (adr r1, 15e30 <pp_atan2+0x178>)
   15d06:	e9d1 0100 	ldrd	r0, r1, [r1]
   15d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d0e:	f001 fe0f 	bl	17930 <__aeabi_dsub>
   15d12:	4602      	mov	r2, r0
   15d14:	460b      	mov	r3, r1
   15d16:	e008      	b.n	15d2a <pp_atan2+0x72>
   15d18:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d1c:	a344      	add	r3, pc, #272	; (adr r3, 15e30 <pp_atan2+0x178>)
   15d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d22:	f001 fe07 	bl	17934 <__adddf3>
   15d26:	4602      	mov	r2, r0
   15d28:	460b      	mov	r3, r1
   15d2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15d2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d32:	f04f 0200 	mov.w	r2, #0
   15d36:	f04f 0300 	mov.w	r3, #0
   15d3a:	f002 fa3d 	bl	181b8 <__aeabi_dcmpgt>
   15d3e:	4603      	mov	r3, r0
   15d40:	2b00      	cmp	r3, #0
   15d42:	d02a      	beq.n	15d9a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d4c:	f001 fdf0 	bl	17930 <__aeabi_dsub>
   15d50:	4602      	mov	r2, r0
   15d52:	460b      	mov	r3, r1
   15d54:	4690      	mov	r8, r2
   15d56:	4699      	mov	r9, r3
   15d58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d60:	f001 fde8 	bl	17934 <__adddf3>
   15d64:	4602      	mov	r2, r0
   15d66:	460b      	mov	r3, r1
   15d68:	4640      	mov	r0, r8
   15d6a:	4649      	mov	r1, r9
   15d6c:	f002 f8be 	bl	17eec <__aeabi_ddiv>
   15d70:	4602      	mov	r2, r0
   15d72:	460b      	mov	r3, r1
   15d74:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d80:	f001 ff8a 	bl	17c98 <__aeabi_dmul>
   15d84:	4602      	mov	r2, r0
   15d86:	460b      	mov	r3, r1
   15d88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d8c:	f001 fdd0 	bl	17930 <__aeabi_dsub>
   15d90:	4602      	mov	r2, r0
   15d92:	460b      	mov	r3, r1
   15d94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15d98:	e029      	b.n	15dee <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15da2:	f001 fdc7 	bl	17934 <__adddf3>
   15da6:	4602      	mov	r2, r0
   15da8:	460b      	mov	r3, r1
   15daa:	4690      	mov	r8, r2
   15dac:	4699      	mov	r9, r3
   15dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15db2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15db6:	f001 fdbb 	bl	17930 <__aeabi_dsub>
   15dba:	4602      	mov	r2, r0
   15dbc:	460b      	mov	r3, r1
   15dbe:	4640      	mov	r0, r8
   15dc0:	4649      	mov	r1, r9
   15dc2:	f002 f893 	bl	17eec <__aeabi_ddiv>
   15dc6:	4602      	mov	r2, r0
   15dc8:	460b      	mov	r3, r1
   15dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15dd6:	f001 ff5f 	bl	17c98 <__aeabi_dmul>
   15dda:	4602      	mov	r2, r0
   15ddc:	460b      	mov	r3, r1
   15dde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15de2:	f001 fda5 	bl	17930 <__aeabi_dsub>
   15de6:	4602      	mov	r2, r0
   15de8:	460b      	mov	r3, r1
   15dea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15dee:	e9d7 0100 	ldrd	r0, r1, [r7]
   15df2:	f04f 0200 	mov.w	r2, #0
   15df6:	f04f 0300 	mov.w	r3, #0
   15dfa:	f002 f9bf 	bl	1817c <__aeabi_dcmplt>
   15dfe:	4603      	mov	r3, r0
   15e00:	2b00      	cmp	r3, #0
   15e02:	d004      	beq.n	15e0e <pp_atan2+0x156>
		return (-angle);
   15e04:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e08:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e0c:	e001      	b.n	15e12 <pp_atan2+0x15a>
	else
		return angle;
   15e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15e12:	4622      	mov	r2, r4
   15e14:	462b      	mov	r3, r5
}
   15e16:	4610      	mov	r0, r2
   15e18:	4619      	mov	r1, r3
   15e1a:	3738      	adds	r7, #56	; 0x38
   15e1c:	46bd      	mov	sp, r7
   15e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15e22:	bf00      	nop
   15e24:	f3af 8000 	nop.w
   15e28:	54442d18 	.word	0x54442d18
   15e2c:	3fe921fb 	.word	0x3fe921fb
   15e30:	d9d7bdbb 	.word	0xd9d7bdbb
   15e34:	3ddb7cdf 	.word	0x3ddb7cdf

00015e38 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15e38:	b5b0      	push	{r4, r5, r7, lr}
   15e3a:	b08c      	sub	sp, #48	; 0x30
   15e3c:	af00      	add	r7, sp, #0
   15e3e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15e42:	e9d7 2300 	ldrd	r2, r3, [r7]
   15e46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e4a:	2301      	movs	r3, #1
   15e4c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15e4e:	e00a      	b.n	15e66 <pp_sin+0x2e>
   15e50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e54:	a35a      	add	r3, pc, #360	; (adr r3, 15fc0 <pp_sin+0x188>)
   15e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e5a:	f001 fd6b 	bl	17934 <__adddf3>
   15e5e:	4602      	mov	r2, r0
   15e60:	460b      	mov	r3, r1
   15e62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e6a:	a357      	add	r3, pc, #348	; (adr r3, 15fc8 <pp_sin+0x190>)
   15e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e70:	f002 f984 	bl	1817c <__aeabi_dcmplt>
   15e74:	4603      	mov	r3, r0
   15e76:	2b00      	cmp	r3, #0
   15e78:	d1ea      	bne.n	15e50 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15e7a:	e00a      	b.n	15e92 <pp_sin+0x5a>
   15e7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e80:	a34f      	add	r3, pc, #316	; (adr r3, 15fc0 <pp_sin+0x188>)
   15e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e86:	f001 fd53 	bl	17930 <__aeabi_dsub>
   15e8a:	4602      	mov	r2, r0
   15e8c:	460b      	mov	r3, r1
   15e8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e96:	a34e      	add	r3, pc, #312	; (adr r3, 15fd0 <pp_sin+0x198>)
   15e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e9c:	f002 f98c 	bl	181b8 <__aeabi_dcmpgt>
   15ea0:	4603      	mov	r3, r0
   15ea2:	2b00      	cmp	r3, #0
   15ea4:	d1ea      	bne.n	15e7c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eaa:	a34b      	add	r3, pc, #300	; (adr r3, 15fd8 <pp_sin+0x1a0>)
   15eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eb0:	f002 f982 	bl	181b8 <__aeabi_dcmpgt>
   15eb4:	4603      	mov	r3, r0
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	d00d      	beq.n	15ed6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ebe:	a348      	add	r3, pc, #288	; (adr r3, 15fe0 <pp_sin+0x1a8>)
   15ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ec4:	f001 fd34 	bl	17930 <__aeabi_dsub>
   15ec8:	4602      	mov	r2, r0
   15eca:	460b      	mov	r3, r1
   15ecc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15ed0:	f04f 33ff 	mov.w	r3, #4294967295
   15ed4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eda:	a343      	add	r3, pc, #268	; (adr r3, 15fe8 <pp_sin+0x1b0>)
   15edc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ee0:	f002 f804 	bl	17eec <__aeabi_ddiv>
   15ee4:	4602      	mov	r2, r0
   15ee6:	460b      	mov	r3, r1
   15ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ef4:	f001 fed0 	bl	17c98 <__aeabi_dmul>
   15ef8:	4602      	mov	r2, r0
   15efa:	460b      	mov	r3, r1
   15efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15f00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15f04:	a33a      	add	r3, pc, #232	; (adr r3, 15ff0 <pp_sin+0x1b8>)
   15f06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f0a:	f001 fec5 	bl	17c98 <__aeabi_dmul>
   15f0e:	4602      	mov	r2, r0
   15f10:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15f12:	4610      	mov	r0, r2
   15f14:	4619      	mov	r1, r3
   15f16:	a338      	add	r3, pc, #224	; (adr r3, 15ff8 <pp_sin+0x1c0>)
   15f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f1c:	f001 fd08 	bl	17930 <__aeabi_dsub>
   15f20:	4602      	mov	r2, r0
   15f22:	460b      	mov	r3, r1
   15f24:	4610      	mov	r0, r2
   15f26:	4619      	mov	r1, r3
   15f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f2c:	f001 feb4 	bl	17c98 <__aeabi_dmul>
   15f30:	4602      	mov	r2, r0
   15f32:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15f34:	4610      	mov	r0, r2
   15f36:	4619      	mov	r1, r3
   15f38:	a331      	add	r3, pc, #196	; (adr r3, 16000 <pp_sin+0x1c8>)
   15f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f3e:	f001 fcf9 	bl	17934 <__adddf3>
   15f42:	4602      	mov	r2, r0
   15f44:	460b      	mov	r3, r1
   15f46:	4610      	mov	r0, r2
   15f48:	4619      	mov	r1, r3
   15f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f4e:	f001 fea3 	bl	17c98 <__aeabi_dmul>
   15f52:	4602      	mov	r2, r0
   15f54:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15f56:	4610      	mov	r0, r2
   15f58:	4619      	mov	r1, r3
   15f5a:	a32b      	add	r3, pc, #172	; (adr r3, 16008 <pp_sin+0x1d0>)
   15f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f60:	f001 fce6 	bl	17930 <__aeabi_dsub>
   15f64:	4602      	mov	r2, r0
   15f66:	460b      	mov	r3, r1
   15f68:	4610      	mov	r0, r2
   15f6a:	4619      	mov	r1, r3
   15f6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f70:	f001 fe92 	bl	17c98 <__aeabi_dmul>
   15f74:	4602      	mov	r2, r0
   15f76:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15f78:	4610      	mov	r0, r2
   15f7a:	4619      	mov	r1, r3
   15f7c:	a324      	add	r3, pc, #144	; (adr r3, 16010 <pp_sin+0x1d8>)
   15f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f82:	f001 fcd7 	bl	17934 <__adddf3>
   15f86:	4602      	mov	r2, r0
   15f88:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15f8a:	4610      	mov	r0, r2
   15f8c:	4619      	mov	r1, r3
   15f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f92:	f001 fe81 	bl	17c98 <__aeabi_dmul>
   15f96:	4602      	mov	r2, r0
   15f98:	460b      	mov	r3, r1
   15f9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15fa0:	2b00      	cmp	r3, #0
   15fa2:	da04      	bge.n	15fae <pp_sin+0x176>
   15fa4:	68bc      	ldr	r4, [r7, #8]
   15fa6:	68fb      	ldr	r3, [r7, #12]
   15fa8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15fac:	e001      	b.n	15fb2 <pp_sin+0x17a>
   15fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15fb2:	4622      	mov	r2, r4
   15fb4:	462b      	mov	r3, r5
}
   15fb6:	4610      	mov	r0, r2
   15fb8:	4619      	mov	r1, r3
   15fba:	3730      	adds	r7, #48	; 0x30
   15fbc:	46bd      	mov	sp, r7
   15fbe:	bdb0      	pop	{r4, r5, r7, pc}
   15fc0:	54442d18 	.word	0x54442d18
   15fc4:	401921fb 	.word	0x401921fb
   15fc8:	54442d18 	.word	0x54442d18
   15fcc:	bff921fb 	.word	0xbff921fb
   15fd0:	7f3321d2 	.word	0x7f3321d2
   15fd4:	4012d97c 	.word	0x4012d97c
   15fd8:	54442d18 	.word	0x54442d18
   15fdc:	3ff921fb 	.word	0x3ff921fb
   15fe0:	54442d18 	.word	0x54442d18
   15fe4:	400921fb 	.word	0x400921fb
   15fe8:	5443d6f4 	.word	0x5443d6f4
   15fec:	3ff921fb 	.word	0x3ff921fb
   15ff0:	48a890af 	.word	0x48a890af
   15ff4:	3f23daf7 	.word	0x3f23daf7
   15ff8:	645b6d0e 	.word	0x645b6d0e
   15ffc:	3f7324cc 	.word	0x3f7324cc
   16000:	f65619a5 	.word	0xf65619a5
   16004:	3fb4668a 	.word	0x3fb4668a
   16008:	16acf9cd 	.word	0x16acf9cd
   1600c:	3fe4abbc 	.word	0x3fe4abbc
   16010:	520817f7 	.word	0x520817f7
   16014:	3ff921fb 	.word	0x3ff921fb

00016018 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   16018:	b480      	push	{r7}
   1601a:	b083      	sub	sp, #12
   1601c:	af00      	add	r7, sp, #0
   1601e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   16022:	4610      	mov	r0, r2
   16024:	4619      	mov	r1, r3
   16026:	370c      	adds	r7, #12
   16028:	46bd      	mov	sp, r7
   1602a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1602e:	4770      	bx	lr

00016030 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   16030:	b480      	push	{r7}
   16032:	b083      	sub	sp, #12
   16034:	af00      	add	r7, sp, #0
   16036:	4603      	mov	r3, r0
   16038:	6039      	str	r1, [r7, #0]
   1603a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1603c:	79fa      	ldrb	r2, [r7, #7]
   1603e:	f64c 3380 	movw	r3, #52096	; 0xcb80
   16042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16046:	6839      	ldr	r1, [r7, #0]
   16048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1604c:	370c      	adds	r7, #12
   1604e:	46bd      	mov	sp, r7
   16050:	f85d 7b04 	ldr.w	r7, [sp], #4
   16054:	4770      	bx	lr
   16056:	bf00      	nop

00016058 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   16058:	b480      	push	{r7}
   1605a:	b083      	sub	sp, #12
   1605c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1605e:	f242 0315 	movw	r3, #8213	; 0x2015
   16062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16066:	2200      	movs	r2, #0
   16068:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1606a:	f242 0314 	movw	r3, #8212	; 0x2014
   1606e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16072:	2200      	movs	r2, #0
   16074:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   16076:	f242 0307 	movw	r3, #8199	; 0x2007
   1607a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607e:	22c0      	movs	r2, #192	; 0xc0
   16080:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   16082:	f242 0306 	movw	r3, #8198	; 0x2006
   16086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608a:	22cf      	movs	r2, #207	; 0xcf
   1608c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1608e:	2300      	movs	r3, #0
   16090:	71fb      	strb	r3, [r7, #7]
   16092:	e00a      	b.n	160aa <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   16094:	79fa      	ldrb	r2, [r7, #7]
   16096:	f64c 3380 	movw	r3, #52096	; 0xcb80
   1609a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1609e:	2100      	movs	r1, #0
   160a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   160a4:	79fb      	ldrb	r3, [r7, #7]
   160a6:	3301      	adds	r3, #1
   160a8:	71fb      	strb	r3, [r7, #7]
   160aa:	79fb      	ldrb	r3, [r7, #7]
   160ac:	2b07      	cmp	r3, #7
   160ae:	d9f1      	bls.n	16094 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   160b0:	370c      	adds	r7, #12
   160b2:	46bd      	mov	sp, r7
   160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   160b8:	4770      	bx	lr
   160ba:	bf00      	nop

000160bc <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   160bc:	b480      	push	{r7}
   160be:	b083      	sub	sp, #12
   160c0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   160c2:	f242 0326 	movw	r3, #8230	; 0x2026
   160c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ca:	881b      	ldrh	r3, [r3, #0]
   160cc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   160ce:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   160d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d6:	881b      	ldrh	r3, [r3, #0]
   160d8:	88fa      	ldrh	r2, [r7, #6]
   160da:	1ad3      	subs	r3, r2, r3
   160dc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   160de:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   160e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e6:	88fa      	ldrh	r2, [r7, #6]
   160e8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   160ea:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f2:	781b      	ldrb	r3, [r3, #0]
   160f4:	2b00      	cmp	r3, #0
   160f6:	d11e      	bne.n	16136 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   160f8:	f242 0324 	movw	r3, #8228	; 0x2024
   160fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16100:	781b      	ldrb	r3, [r3, #0]
   16102:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   16104:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1610c:	781b      	ldrb	r3, [r3, #0]
   1610e:	78fa      	ldrb	r2, [r7, #3]
   16110:	1ad3      	subs	r3, r2, r3
   16112:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   16114:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611c:	78fa      	ldrb	r2, [r7, #3]
   1611e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16120:	78bb      	ldrb	r3, [r7, #2]
   16122:	2b6d      	cmp	r3, #109	; 0x6d
   16124:	d906      	bls.n	16134 <__vector_34+0x78>
      state = 1;
   16126:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1612a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1612e:	2201      	movs	r2, #1
   16130:	701a      	strb	r2, [r3, #0]
   16132:	e053      	b.n	161dc <__vector_34+0x120>
   16134:	e052      	b.n	161dc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   16136:	88bb      	ldrh	r3, [r7, #4]
   16138:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   1613c:	d304      	bcc.n	16148 <__vector_34+0x8c>
   1613e:	88ba      	ldrh	r2, [r7, #4]
   16140:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16144:	429a      	cmp	r2, r3
   16146:	d911      	bls.n	1616c <__vector_34+0xb0>
      RestartPpmCycle();
   16148:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1614c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16150:	2200      	movs	r2, #0
   16152:	701a      	strb	r2, [r3, #0]
   16154:	f242 0324 	movw	r3, #8228	; 0x2024
   16158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1615c:	781b      	ldrb	r3, [r3, #0]
   1615e:	b2da      	uxtb	r2, r3
   16160:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16168:	701a      	strb	r2, [r3, #0]
   1616a:	e038      	b.n	161de <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1616c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16174:	781b      	ldrb	r3, [r3, #0]
   16176:	1e5a      	subs	r2, r3, #1
   16178:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16180:	88b9      	ldrh	r1, [r7, #4]
   16182:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16186:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	781b      	ldrb	r3, [r3, #0]
   16190:	2b08      	cmp	r3, #8
   16192:	d917      	bls.n	161c4 <__vector_34+0x108>
      ppm_valid	= 1;
   16194:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619c:	2201      	movs	r2, #1
   1619e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   161a0:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a8:	2200      	movs	r2, #0
   161aa:	701a      	strb	r2, [r3, #0]
   161ac:	f242 0324 	movw	r3, #8228	; 0x2024
   161b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b4:	781b      	ldrb	r3, [r3, #0]
   161b6:	b2da      	uxtb	r2, r3
   161b8:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   161bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c0:	701a      	strb	r2, [r3, #0]
   161c2:	e00c      	b.n	161de <__vector_34+0x122>
    } else 
      state++;
   161c4:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161cc:	781b      	ldrb	r3, [r3, #0]
   161ce:	3301      	adds	r3, #1
   161d0:	b2da      	uxtb	r2, r3
   161d2:	f64c 33de 	movw	r3, #52190	; 0xcbde
   161d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161da:	701a      	strb	r2, [r3, #0]
  }
  return;
   161dc:	bf00      	nop
}
   161de:	370c      	adds	r7, #12
   161e0:	46bd      	mov	sp, r7
   161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   161e6:	4770      	bx	lr

000161e8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   161e8:	b590      	push	{r4, r7, lr}
   161ea:	b083      	sub	sp, #12
   161ec:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   161ee:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f6:	881b      	ldrh	r3, [r3, #0]
   161f8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   161fc:	b29b      	uxth	r3, r3
   161fe:	80fb      	strh	r3, [r7, #6]
   16200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16204:	4618      	mov	r0, r3
   16206:	f002 f933 	bl	18470 <__aeabi_i2f>
   1620a:	4603      	mov	r3, r0
   1620c:	4618      	mov	r0, r3
   1620e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   16212:	f002 f981 	bl	18518 <__aeabi_fmul>
   16216:	4603      	mov	r3, r0
   16218:	4618      	mov	r0, r3
   1621a:	f002 fb43 	bl	188a4 <__aeabi_f2iz>
   1621e:	4603      	mov	r3, r0
   16220:	b29a      	uxth	r2, r3
   16222:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1622a:	801a      	strh	r2, [r3, #0]
   1622c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16234:	881b      	ldrh	r3, [r3, #0]
   16236:	b21b      	sxth	r3, r3
   16238:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1623c:	dd07      	ble.n	1624e <last_radio_from_ppm+0x66>
   1623e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16246:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1624a:	801a      	strh	r2, [r3, #0]
   1624c:	e00d      	b.n	1626a <last_radio_from_ppm+0x82>
   1624e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16256:	881b      	ldrh	r3, [r3, #0]
   16258:	b21b      	sxth	r3, r3
   1625a:	2b00      	cmp	r3, #0
   1625c:	da05      	bge.n	1626a <last_radio_from_ppm+0x82>
   1625e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16266:	2200      	movs	r2, #0
   16268:	801a      	strh	r2, [r3, #0]
   1626a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16272:	885b      	ldrh	r3, [r3, #2]
   16274:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16278:	b29b      	uxth	r3, r3
   1627a:	80fb      	strh	r3, [r7, #6]
   1627c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16280:	4618      	mov	r0, r3
   16282:	f002 f8f5 	bl	18470 <__aeabi_i2f>
   16286:	4603      	mov	r3, r0
   16288:	4618      	mov	r0, r3
   1628a:	f002 fb0b 	bl	188a4 <__aeabi_f2iz>
   1628e:	4603      	mov	r3, r0
   16290:	b29a      	uxth	r2, r3
   16292:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1629a:	805a      	strh	r2, [r3, #2]
   1629c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a4:	885b      	ldrh	r3, [r3, #2]
   162a6:	b21b      	sxth	r3, r3
   162a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162ac:	dd07      	ble.n	162be <last_radio_from_ppm+0xd6>
   162ae:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ba:	805a      	strh	r2, [r3, #2]
   162bc:	e00f      	b.n	162de <last_radio_from_ppm+0xf6>
   162be:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c6:	885b      	ldrh	r3, [r3, #2]
   162c8:	b21b      	sxth	r3, r3
   162ca:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162ce:	da06      	bge.n	162de <last_radio_from_ppm+0xf6>
   162d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d8:	f64d 2280 	movw	r2, #55936	; 0xda80
   162dc:	805a      	strh	r2, [r3, #2]
   162de:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e6:	889b      	ldrh	r3, [r3, #4]
   162e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162ec:	b29b      	uxth	r3, r3
   162ee:	80fb      	strh	r3, [r7, #6]
   162f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162f4:	4618      	mov	r0, r3
   162f6:	f002 f8bb 	bl	18470 <__aeabi_i2f>
   162fa:	4603      	mov	r3, r0
   162fc:	4618      	mov	r0, r3
   162fe:	f002 fad1 	bl	188a4 <__aeabi_f2iz>
   16302:	4603      	mov	r3, r0
   16304:	b29a      	uxth	r2, r3
   16306:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1630a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630e:	809a      	strh	r2, [r3, #4]
   16310:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16318:	889b      	ldrh	r3, [r3, #4]
   1631a:	b21b      	sxth	r3, r3
   1631c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16320:	dd07      	ble.n	16332 <last_radio_from_ppm+0x14a>
   16322:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1632a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1632e:	809a      	strh	r2, [r3, #4]
   16330:	e00f      	b.n	16352 <last_radio_from_ppm+0x16a>
   16332:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1633a:	889b      	ldrh	r3, [r3, #4]
   1633c:	b21b      	sxth	r3, r3
   1633e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16342:	da06      	bge.n	16352 <last_radio_from_ppm+0x16a>
   16344:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16350:	809a      	strh	r2, [r3, #4]
   16352:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635a:	88db      	ldrh	r3, [r3, #6]
   1635c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16360:	b29b      	uxth	r3, r3
   16362:	80fb      	strh	r3, [r7, #6]
   16364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16368:	4618      	mov	r0, r3
   1636a:	f002 f881 	bl	18470 <__aeabi_i2f>
   1636e:	4603      	mov	r3, r0
   16370:	4618      	mov	r0, r3
   16372:	f002 fa97 	bl	188a4 <__aeabi_f2iz>
   16376:	4603      	mov	r3, r0
   16378:	b29a      	uxth	r2, r3
   1637a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1637e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16382:	80da      	strh	r2, [r3, #6]
   16384:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638c:	88db      	ldrh	r3, [r3, #6]
   1638e:	b21b      	sxth	r3, r3
   16390:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16394:	dd07      	ble.n	163a6 <last_radio_from_ppm+0x1be>
   16396:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163a2:	80da      	strh	r2, [r3, #6]
   163a4:	e00f      	b.n	163c6 <last_radio_from_ppm+0x1de>
   163a6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   163aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ae:	88db      	ldrh	r3, [r3, #6]
   163b0:	b21b      	sxth	r3, r3
   163b2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163b6:	da06      	bge.n	163c6 <last_radio_from_ppm+0x1de>
   163b8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   163bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c0:	f64d 2280 	movw	r2, #55936	; 0xda80
   163c4:	80da      	strh	r2, [r3, #6]
   163c6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ce:	891b      	ldrh	r3, [r3, #8]
   163d0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163d4:	b29b      	uxth	r3, r3
   163d6:	80fb      	strh	r3, [r7, #6]
   163d8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e0:	891b      	ldrh	r3, [r3, #8]
   163e2:	b21b      	sxth	r3, r3
   163e4:	4618      	mov	r0, r3
   163e6:	f002 f843 	bl	18470 <__aeabi_i2f>
   163ea:	4604      	mov	r4, r0
   163ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163f0:	4618      	mov	r0, r3
   163f2:	f002 f83d 	bl	18470 <__aeabi_i2f>
   163f6:	4603      	mov	r3, r0
   163f8:	4618      	mov	r0, r3
   163fa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163fe:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16402:	f002 f889 	bl	18518 <__aeabi_fmul>
   16406:	4603      	mov	r3, r0
   16408:	4620      	mov	r0, r4
   1640a:	4619      	mov	r1, r3
   1640c:	f001 ff7c 	bl	18308 <__addsf3>
   16410:	4603      	mov	r3, r0
   16412:	4618      	mov	r0, r3
   16414:	f002 fa46 	bl	188a4 <__aeabi_f2iz>
   16418:	4603      	mov	r3, r0
   1641a:	b29a      	uxth	r2, r3
   1641c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16424:	811a      	strh	r2, [r3, #8]
   16426:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1642e:	895b      	ldrh	r3, [r3, #10]
   16430:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16434:	b29b      	uxth	r3, r3
   16436:	80fb      	strh	r3, [r7, #6]
   16438:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1643c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16440:	895b      	ldrh	r3, [r3, #10]
   16442:	b21b      	sxth	r3, r3
   16444:	4618      	mov	r0, r3
   16446:	f002 f813 	bl	18470 <__aeabi_i2f>
   1644a:	4604      	mov	r4, r0
   1644c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16450:	4618      	mov	r0, r3
   16452:	f002 f80d 	bl	18470 <__aeabi_i2f>
   16456:	4603      	mov	r3, r0
   16458:	4618      	mov	r0, r3
   1645a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1645e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16462:	f002 f859 	bl	18518 <__aeabi_fmul>
   16466:	4603      	mov	r3, r0
   16468:	4620      	mov	r0, r4
   1646a:	4619      	mov	r1, r3
   1646c:	f001 ff4c 	bl	18308 <__addsf3>
   16470:	4603      	mov	r3, r0
   16472:	4618      	mov	r0, r3
   16474:	f002 fa16 	bl	188a4 <__aeabi_f2iz>
   16478:	4603      	mov	r3, r0
   1647a:	b29a      	uxth	r2, r3
   1647c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16484:	815a      	strh	r2, [r3, #10]
   16486:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1648e:	899b      	ldrh	r3, [r3, #12]
   16490:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16494:	b29b      	uxth	r3, r3
   16496:	80fb      	strh	r3, [r7, #6]
   16498:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1649c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a0:	899b      	ldrh	r3, [r3, #12]
   164a2:	b21b      	sxth	r3, r3
   164a4:	4618      	mov	r0, r3
   164a6:	f001 ffe3 	bl	18470 <__aeabi_i2f>
   164aa:	4604      	mov	r4, r0
   164ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164b0:	4618      	mov	r0, r3
   164b2:	f001 ffdd 	bl	18470 <__aeabi_i2f>
   164b6:	4603      	mov	r3, r0
   164b8:	4618      	mov	r0, r3
   164ba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164be:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164c2:	f002 f829 	bl	18518 <__aeabi_fmul>
   164c6:	4603      	mov	r3, r0
   164c8:	4620      	mov	r0, r4
   164ca:	4619      	mov	r1, r3
   164cc:	f001 ff1c 	bl	18308 <__addsf3>
   164d0:	4603      	mov	r3, r0
   164d2:	4618      	mov	r0, r3
   164d4:	f002 f9e6 	bl	188a4 <__aeabi_f2iz>
   164d8:	4603      	mov	r3, r0
   164da:	b29a      	uxth	r2, r3
   164dc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e4:	819a      	strh	r2, [r3, #12]
   164e6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   164ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ee:	89db      	ldrh	r3, [r3, #14]
   164f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164f4:	b29b      	uxth	r3, r3
   164f6:	80fb      	strh	r3, [r7, #6]
   164f8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16500:	89db      	ldrh	r3, [r3, #14]
   16502:	b21b      	sxth	r3, r3
   16504:	4618      	mov	r0, r3
   16506:	f001 ffb3 	bl	18470 <__aeabi_i2f>
   1650a:	4604      	mov	r4, r0
   1650c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16510:	4618      	mov	r0, r3
   16512:	f001 ffad 	bl	18470 <__aeabi_i2f>
   16516:	4603      	mov	r3, r0
   16518:	4618      	mov	r0, r3
   1651a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1651e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16522:	f001 fff9 	bl	18518 <__aeabi_fmul>
   16526:	4603      	mov	r3, r0
   16528:	4620      	mov	r0, r4
   1652a:	4619      	mov	r1, r3
   1652c:	f001 feec 	bl	18308 <__addsf3>
   16530:	4603      	mov	r3, r0
   16532:	4618      	mov	r0, r3
   16534:	f002 f9b6 	bl	188a4 <__aeabi_f2iz>
   16538:	4603      	mov	r3, r0
   1653a:	b29a      	uxth	r2, r3
   1653c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16544:	81da      	strh	r2, [r3, #14]
   16546:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1654e:	8a1b      	ldrh	r3, [r3, #16]
   16550:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16554:	b29b      	uxth	r3, r3
   16556:	80fb      	strh	r3, [r7, #6]
   16558:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1655c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16560:	8a1b      	ldrh	r3, [r3, #16]
   16562:	b21b      	sxth	r3, r3
   16564:	4618      	mov	r0, r3
   16566:	f001 ff83 	bl	18470 <__aeabi_i2f>
   1656a:	4604      	mov	r4, r0
   1656c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16570:	4618      	mov	r0, r3
   16572:	f001 ff7d 	bl	18470 <__aeabi_i2f>
   16576:	4603      	mov	r3, r0
   16578:	4618      	mov	r0, r3
   1657a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1657e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16582:	f001 ffc9 	bl	18518 <__aeabi_fmul>
   16586:	4603      	mov	r3, r0
   16588:	4620      	mov	r0, r4
   1658a:	4619      	mov	r1, r3
   1658c:	f001 febc 	bl	18308 <__addsf3>
   16590:	4603      	mov	r3, r0
   16592:	4618      	mov	r0, r3
   16594:	f002 f986 	bl	188a4 <__aeabi_f2iz>
   16598:	4603      	mov	r3, r0
   1659a:	b29a      	uxth	r2, r3
   1659c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a4:	821a      	strh	r2, [r3, #16]
   165a6:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ae:	781b      	ldrb	r3, [r3, #0]
   165b0:	3301      	adds	r3, #1
   165b2:	b2da      	uxtb	r2, r3
   165b4:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165bc:	701a      	strb	r2, [r3, #0]
   165be:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c6:	781b      	ldrb	r3, [r3, #0]
   165c8:	2b0a      	cmp	r3, #10
   165ca:	f040 8101 	bne.w	167d0 <last_radio_from_ppm+0x5e8>
   165ce:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   165d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d6:	2200      	movs	r2, #0
   165d8:	701a      	strb	r2, [r3, #0]
   165da:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e2:	891a      	ldrh	r2, [r3, #8]
   165e4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ec:	811a      	strh	r2, [r3, #8]
   165ee:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f6:	2200      	movs	r2, #0
   165f8:	811a      	strh	r2, [r3, #8]
   165fa:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16602:	891b      	ldrh	r3, [r3, #8]
   16604:	b21b      	sxth	r3, r3
   16606:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1660a:	dd07      	ble.n	1661c <last_radio_from_ppm+0x434>
   1660c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16618:	811a      	strh	r2, [r3, #8]
   1661a:	e00f      	b.n	1663c <last_radio_from_ppm+0x454>
   1661c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16624:	891b      	ldrh	r3, [r3, #8]
   16626:	b21b      	sxth	r3, r3
   16628:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1662c:	da06      	bge.n	1663c <last_radio_from_ppm+0x454>
   1662e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16636:	f64d 2280 	movw	r2, #55936	; 0xda80
   1663a:	811a      	strh	r2, [r3, #8]
   1663c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16644:	895a      	ldrh	r2, [r3, #10]
   16646:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1664e:	815a      	strh	r2, [r3, #10]
   16650:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16658:	2200      	movs	r2, #0
   1665a:	815a      	strh	r2, [r3, #10]
   1665c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16664:	895b      	ldrh	r3, [r3, #10]
   16666:	b21b      	sxth	r3, r3
   16668:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1666c:	dd07      	ble.n	1667e <last_radio_from_ppm+0x496>
   1666e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16676:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1667a:	815a      	strh	r2, [r3, #10]
   1667c:	e00f      	b.n	1669e <last_radio_from_ppm+0x4b6>
   1667e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16686:	895b      	ldrh	r3, [r3, #10]
   16688:	b21b      	sxth	r3, r3
   1668a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1668e:	da06      	bge.n	1669e <last_radio_from_ppm+0x4b6>
   16690:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16698:	f64d 2280 	movw	r2, #55936	; 0xda80
   1669c:	815a      	strh	r2, [r3, #10]
   1669e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a6:	899a      	ldrh	r2, [r3, #12]
   166a8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b0:	819a      	strh	r2, [r3, #12]
   166b2:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ba:	2200      	movs	r2, #0
   166bc:	819a      	strh	r2, [r3, #12]
   166be:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c6:	899b      	ldrh	r3, [r3, #12]
   166c8:	b21b      	sxth	r3, r3
   166ca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166ce:	dd07      	ble.n	166e0 <last_radio_from_ppm+0x4f8>
   166d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166dc:	819a      	strh	r2, [r3, #12]
   166de:	e00f      	b.n	16700 <last_radio_from_ppm+0x518>
   166e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e8:	899b      	ldrh	r3, [r3, #12]
   166ea:	b21b      	sxth	r3, r3
   166ec:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166f0:	da06      	bge.n	16700 <last_radio_from_ppm+0x518>
   166f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fa:	f64d 2280 	movw	r2, #55936	; 0xda80
   166fe:	819a      	strh	r2, [r3, #12]
   16700:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16708:	89da      	ldrh	r2, [r3, #14]
   1670a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1670e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16712:	81da      	strh	r2, [r3, #14]
   16714:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671c:	2200      	movs	r2, #0
   1671e:	81da      	strh	r2, [r3, #14]
   16720:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16728:	89db      	ldrh	r3, [r3, #14]
   1672a:	b21b      	sxth	r3, r3
   1672c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16730:	dd07      	ble.n	16742 <last_radio_from_ppm+0x55a>
   16732:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1673a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1673e:	81da      	strh	r2, [r3, #14]
   16740:	e00f      	b.n	16762 <last_radio_from_ppm+0x57a>
   16742:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1674a:	89db      	ldrh	r3, [r3, #14]
   1674c:	b21b      	sxth	r3, r3
   1674e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16752:	da06      	bge.n	16762 <last_radio_from_ppm+0x57a>
   16754:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16760:	81da      	strh	r2, [r3, #14]
   16762:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676a:	8a1a      	ldrh	r2, [r3, #16]
   1676c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16774:	821a      	strh	r2, [r3, #16]
   16776:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1677a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677e:	2200      	movs	r2, #0
   16780:	821a      	strh	r2, [r3, #16]
   16782:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678a:	8a1b      	ldrh	r3, [r3, #16]
   1678c:	b21b      	sxth	r3, r3
   1678e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16792:	dd07      	ble.n	167a4 <last_radio_from_ppm+0x5bc>
   16794:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1679c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   167a0:	821a      	strh	r2, [r3, #16]
   167a2:	e00f      	b.n	167c4 <last_radio_from_ppm+0x5dc>
   167a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   167a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ac:	8a1b      	ldrh	r3, [r3, #16]
   167ae:	b21b      	sxth	r3, r3
   167b0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   167b4:	da06      	bge.n	167c4 <last_radio_from_ppm+0x5dc>
   167b6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   167ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167be:	f64d 2280 	movw	r2, #55936	; 0xda80
   167c2:	821a      	strh	r2, [r3, #16]
   167c4:	f64c 33da 	movw	r3, #52186	; 0xcbda
   167c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167cc:	2201      	movs	r2, #1
   167ce:	701a      	strb	r2, [r3, #0]
}
   167d0:	370c      	adds	r7, #12
   167d2:	46bd      	mov	sp, r7
   167d4:	bd90      	pop	{r4, r7, pc}
   167d6:	bf00      	nop

000167d8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   167d8:	b480      	push	{r7}
   167da:	af00      	add	r7, sp, #0
  idx_buf = 0;
   167dc:	f64c 4314 	movw	r3, #52244	; 0xcc14
   167e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e4:	2200      	movs	r2, #0
   167e6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   167e8:	f64c 4315 	movw	r3, #52245	; 0xcc15
   167ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f0:	2200      	movs	r2, #0
   167f2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   167f4:	f64c 4314 	movw	r3, #52244	; 0xcc14
   167f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167fc:	781b      	ldrb	r3, [r3, #0]
   167fe:	b2db      	uxtb	r3, r3
   16800:	461a      	mov	r2, r3
   16802:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1680a:	4413      	add	r3, r2
   1680c:	781a      	ldrb	r2, [r3, #0]
   1680e:	f64c 4316 	movw	r3, #52246	; 0xcc16
   16812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16816:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16818:	f242 030f 	movw	r3, #8207	; 0x200f
   1681c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16820:	f64c 4216 	movw	r2, #52246	; 0xcc16
   16824:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16828:	7812      	ldrb	r2, [r2, #0]
   1682a:	b2d2      	uxtb	r2, r2
   1682c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1682e:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16836:	2200      	movs	r2, #0
   16838:	701a      	strb	r2, [r3, #0]
}
   1683a:	46bd      	mov	sp, r7
   1683c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16840:	4770      	bx	lr
   16842:	bf00      	nop

00016844 <fbw_spi_init>:

void fbw_spi_init(void) {
   16844:	b480      	push	{r7}
   16846:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16848:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1684c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16850:	2200      	movs	r2, #0
   16852:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16854:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1685c:	2200      	movs	r2, #0
   1685e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16860:	f242 0317 	movw	r3, #8215	; 0x2017
   16864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16868:	f242 0217 	movw	r2, #8215	; 0x2017
   1686c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16870:	7812      	ldrb	r2, [r2, #0]
   16872:	b2d2      	uxtb	r2, r2
   16874:	f042 0210 	orr.w	r2, r2, #16
   16878:	b2d2      	uxtb	r2, r2
   1687a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1687c:	f242 030d 	movw	r3, #8205	; 0x200d
   16880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16884:	2240      	movs	r2, #64	; 0x40
   16886:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16888:	f242 030d 	movw	r3, #8205	; 0x200d
   1688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16890:	f242 020d 	movw	r2, #8205	; 0x200d
   16894:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16898:	7812      	ldrb	r2, [r2, #0]
   1689a:	b2d2      	uxtb	r2, r2
   1689c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168a0:	b2d2      	uxtb	r2, r2
   168a2:	701a      	strb	r2, [r3, #0]
}
   168a4:	46bd      	mov	sp, r7
   168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   168aa:	4770      	bx	lr
   168ac:	0000      	movs	r0, r0
	...

000168b0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   168b0:	b480      	push	{r7}
   168b2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   168b4:	f242 032f 	movw	r3, #8239	; 0x202f
   168b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168bc:	2200      	movs	r2, #0
   168be:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   168c0:	f242 032e 	movw	r3, #8238	; 0x202e
   168c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c8:	2201      	movs	r2, #1
   168ca:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   168cc:	f242 0325 	movw	r3, #8229	; 0x2025
   168d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d4:	2207      	movs	r2, #7
   168d6:	701a      	strb	r2, [r3, #0]
}
   168d8:	46bd      	mov	sp, r7
   168da:	f85d 7b04 	ldr.w	r7, [sp], #4
   168de:	4770      	bx	lr

000168e0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   168e0:	b480      	push	{r7}
   168e2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   168e4:	f242 032e 	movw	r3, #8238	; 0x202e
   168e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ec:	f242 022e 	movw	r2, #8238	; 0x202e
   168f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168f4:	7812      	ldrb	r2, [r2, #0]
   168f6:	b2d2      	uxtb	r2, r2
   168f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   168fc:	b2d2      	uxtb	r2, r2
   168fe:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16900:	f242 032e 	movw	r3, #8238	; 0x202e
   16904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16908:	f242 022e 	movw	r2, #8238	; 0x202e
   1690c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16910:	7812      	ldrb	r2, [r2, #0]
   16912:	b2d2      	uxtb	r2, r2
   16914:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16918:	b2d2      	uxtb	r2, r2
   1691a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1691c:	f242 0317 	movw	r3, #8215	; 0x2017
   16920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16924:	f242 0217 	movw	r2, #8215	; 0x2017
   16928:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1692c:	7812      	ldrb	r2, [r2, #0]
   1692e:	b2d2      	uxtb	r2, r2
   16930:	f022 0201 	bic.w	r2, r2, #1
   16934:	b2d2      	uxtb	r2, r2
   16936:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16938:	f242 0337 	movw	r3, #8247	; 0x2037
   1693c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16940:	f242 0237 	movw	r2, #8247	; 0x2037
   16944:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16948:	7812      	ldrb	r2, [r2, #0]
   1694a:	b2d2      	uxtb	r2, r2
   1694c:	f042 0220 	orr.w	r2, r2, #32
   16950:	b2d2      	uxtb	r2, r2
   16952:	701a      	strb	r2, [r3, #0]
}
   16954:	46bd      	mov	sp, r7
   16956:	f85d 7b04 	ldr.w	r7, [sp], #4
   1695a:	4770      	bx	lr

0001695c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1695c:	b580      	push	{r7, lr}
   1695e:	b082      	sub	sp, #8
   16960:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16962:	2300      	movs	r3, #0
   16964:	71fb      	strb	r3, [r7, #7]
   16966:	e010      	b.n	1698a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16968:	79fa      	ldrb	r2, [r7, #7]
   1696a:	79f9      	ldrb	r1, [r7, #7]
   1696c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16974:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16978:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16980:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16984:	79fb      	ldrb	r3, [r7, #7]
   16986:	3301      	adds	r3, #1
   16988:	71fb      	strb	r3, [r7, #7]
   1698a:	79fb      	ldrb	r3, [r7, #7]
   1698c:	2b08      	cmp	r3, #8
   1698e:	d9eb      	bls.n	16968 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16990:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16998:	781b      	ldrb	r3, [r3, #0]
   1699a:	2b00      	cmp	r3, #0
   1699c:	bf0c      	ite	eq
   1699e:	2300      	moveq	r3, #0
   169a0:	2301      	movne	r3, #1
   169a2:	b2db      	uxtb	r3, r3
   169a4:	461a      	mov	r2, r3
   169a6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169ae:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   169b0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b8:	7cdb      	ldrb	r3, [r3, #19]
   169ba:	b2da      	uxtb	r2, r3
   169bc:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   169c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c4:	781b      	ldrb	r3, [r3, #0]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d001      	beq.n	169ce <to_autopilot_from_last_radio+0x72>
   169ca:	2302      	movs	r3, #2
   169cc:	e000      	b.n	169d0 <to_autopilot_from_last_radio+0x74>
   169ce:	2300      	movs	r3, #0
   169d0:	4313      	orrs	r3, r2
   169d2:	b2db      	uxtb	r3, r3
   169d4:	b2da      	uxtb	r2, r3
   169d6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169de:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   169e0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   169e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e8:	781b      	ldrb	r3, [r3, #0]
   169ea:	2b00      	cmp	r3, #0
   169ec:	d012      	beq.n	16a14 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   169ee:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f6:	7cdb      	ldrb	r3, [r3, #19]
   169f8:	f043 0304 	orr.w	r3, r3, #4
   169fc:	b2da      	uxtb	r2, r3
   169fe:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a06:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16a08:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a10:	2200      	movs	r2, #0
   16a12:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16a14:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   16a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a1c:	781a      	ldrb	r2, [r3, #0]
   16a1e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a26:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16a28:	f64c 4318 	movw	r3, #52248	; 0xcc18
   16a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a30:	881b      	ldrh	r3, [r3, #0]
   16a32:	4618      	mov	r0, r3
   16a34:	f001 f8ca 	bl	17bcc <__aeabi_i2d>
   16a38:	4602      	mov	r2, r0
   16a3a:	460b      	mov	r3, r1
   16a3c:	4610      	mov	r0, r2
   16a3e:	4619      	mov	r1, r3
   16a40:	a31b      	add	r3, pc, #108	; (adr r3, 16ab0 <to_autopilot_from_last_radio+0x154>)
   16a42:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a46:	f001 f927 	bl	17c98 <__aeabi_dmul>
   16a4a:	4602      	mov	r2, r0
   16a4c:	460b      	mov	r3, r1
   16a4e:	4610      	mov	r0, r2
   16a50:	4619      	mov	r1, r3
   16a52:	f04f 0200 	mov.w	r2, #0
   16a56:	f04f 0300 	mov.w	r3, #0
   16a5a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16a5e:	f001 fa45 	bl	17eec <__aeabi_ddiv>
   16a62:	4602      	mov	r2, r0
   16a64:	460b      	mov	r3, r1
   16a66:	4610      	mov	r0, r2
   16a68:	4619      	mov	r1, r3
   16a6a:	a313      	add	r3, pc, #76	; (adr r3, 16ab8 <to_autopilot_from_last_radio+0x15c>)
   16a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a70:	f000 ff60 	bl	17934 <__adddf3>
   16a74:	4602      	mov	r2, r0
   16a76:	460b      	mov	r3, r1
   16a78:	4610      	mov	r0, r2
   16a7a:	4619      	mov	r1, r3
   16a7c:	f04f 0200 	mov.w	r2, #0
   16a80:	f04f 0300 	mov.w	r3, #0
   16a84:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16a88:	f001 f906 	bl	17c98 <__aeabi_dmul>
   16a8c:	4602      	mov	r2, r0
   16a8e:	460b      	mov	r3, r1
   16a90:	4610      	mov	r0, r2
   16a92:	4619      	mov	r1, r3
   16a94:	f001 fbc2 	bl	1821c <__aeabi_d2uiz>
   16a98:	4603      	mov	r3, r0
   16a9a:	b2da      	uxtb	r2, r3
   16a9c:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16aa6:	3708      	adds	r7, #8
   16aa8:	46bd      	mov	sp, r7
   16aaa:	bd80      	pop	{r7, pc}
   16aac:	f3af 8000 	nop.w
   16ab0:	1eb851ec 	.word	0x1eb851ec
   16ab4:	3f91eb85 	.word	0x3f91eb85
   16ab8:	020c49ba 	.word	0x020c49ba
   16abc:	3fb6872b 	.word	0x3fb6872b

00016ac0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16ac0:	b580      	push	{r7, lr}
   16ac2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16ac4:	f242 0316 	movw	r3, #8214	; 0x2016
   16ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16acc:	781b      	ldrb	r3, [r3, #0]
   16ace:	b2db      	uxtb	r3, r3
   16ad0:	f003 0304 	and.w	r3, r3, #4
   16ad4:	2b00      	cmp	r3, #0
   16ad6:	d011      	beq.n	16afc <send_data_to_autopilot_task+0x3c>
   16ad8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae0:	781b      	ldrb	r3, [r3, #0]
   16ae2:	b2db      	uxtb	r3, r3
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d009      	beq.n	16afc <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16ae8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af0:	2200      	movs	r2, #0
   16af2:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16af4:	f7ff ff32 	bl	1695c <to_autopilot_from_last_radio>
      spi_reset();
   16af8:	f7ff fe6e 	bl	167d8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16afc:	bd80      	pop	{r7, pc}
   16afe:	bf00      	nop

00016b00 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16b00:	b580      	push	{r7, lr}
   16b02:	af00      	add	r7, sp, #0
  uart_init_tx();
   16b04:	f000 fb68 	bl	171d8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16b08:	f648 303c 	movw	r0, #35644	; 0x8b3c
   16b0c:	f2c0 0001 	movt	r0, #1
   16b10:	f000 fc40 	bl	17394 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16b14:	f7ff faa0 	bl	16058 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16b18:	2003      	movs	r0, #3
   16b1a:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16b1e:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16b22:	f7ff fa85 	bl	16030 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16b26:	2006      	movs	r0, #6
   16b28:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16b2c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16b30:	f7ff fa7e 	bl	16030 <fbw_adc_buf_channel>
#endif
  timer_init();
   16b34:	f7ff febc 	bl	168b0 <timer_init>
  servo_init();
   16b38:	f000 f8fa 	bl	16d30 <servo_init>
  ppm_init();
   16b3c:	f7ff fed0 	bl	168e0 <ppm_init>
  fbw_spi_init();
   16b40:	f7ff fe80 	bl	16844 <fbw_spi_init>
  //sei(); //FN
}
   16b44:	bd80      	pop	{r7, pc}
   16b46:	bf00      	nop

00016b48 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16b48:	b580      	push	{r7, lr}
   16b4a:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16b4c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	b2db      	uxtb	r3, r3
   16b58:	2b00      	cmp	r3, #0
   16b5a:	d04c      	beq.n	16bf6 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16b5c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b64:	2200      	movs	r2, #0
   16b66:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16b68:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	3301      	adds	r3, #1
   16b74:	b2da      	uxtb	r2, r3
   16b76:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7e:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16b80:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b88:	2201      	movs	r2, #1
   16b8a:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16b8c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b94:	2200      	movs	r2, #0
   16b96:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16b98:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba0:	2200      	movs	r2, #0
   16ba2:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16ba4:	f7ff fb20 	bl	161e8 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16ba8:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb0:	781b      	ldrb	r3, [r3, #0]
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d011      	beq.n	16bda <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16bb6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bbe:	891b      	ldrh	r3, [r3, #8]
   16bc0:	b21b      	sxth	r3, r3
   16bc2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16bc6:	bfb4      	ite	lt
   16bc8:	2300      	movlt	r3, #0
   16bca:	2301      	movge	r3, #1
   16bcc:	b2db      	uxtb	r3, r3
   16bce:	461a      	mov	r2, r3
   16bd0:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd8:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16bda:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be2:	781b      	ldrb	r3, [r3, #0]
   16be4:	2b00      	cmp	r3, #0
   16be6:	d11a      	bne.n	16c1e <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16be8:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16bec:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16bf0:	f000 f97c 	bl	16eec <servo_set>
   16bf4:	e013      	b.n	16c1e <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16bf6:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfe:	781b      	ldrb	r3, [r3, #0]
   16c00:	2b00      	cmp	r3, #0
   16c02:	d10c      	bne.n	16c1e <test_ppm_task+0xd6>
   16c04:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c0c:	781b      	ldrb	r3, [r3, #0]
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d005      	beq.n	16c1e <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16c12:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c1a:	2201      	movs	r2, #1
   16c1c:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16c1e:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c26:	881b      	ldrh	r3, [r3, #0]
   16c28:	2b1d      	cmp	r3, #29
   16c2a:	d905      	bls.n	16c38 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16c2c:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c34:	2200      	movs	r2, #0
   16c36:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16c38:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c40:	881b      	ldrh	r3, [r3, #0]
   16c42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16c46:	d305      	bcc.n	16c54 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16c48:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c50:	2201      	movs	r2, #1
   16c52:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16c54:	bd80      	pop	{r7, pc}
   16c56:	bf00      	nop

00016c58 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16c58:	b580      	push	{r7, lr}
   16c5a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16c5c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c64:	781b      	ldrb	r3, [r3, #0]
   16c66:	2b00      	cmp	r3, #0
   16c68:	d106      	bne.n	16c78 <check_failsafe_task+0x20>
   16c6a:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c72:	781b      	ldrb	r3, [r3, #0]
   16c74:	2b00      	cmp	r3, #0
   16c76:	d00d      	beq.n	16c94 <check_failsafe_task+0x3c>
   16c78:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c80:	781b      	ldrb	r3, [r3, #0]
   16c82:	2b01      	cmp	r3, #1
   16c84:	d10c      	bne.n	16ca0 <check_failsafe_task+0x48>
   16c86:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c8e:	781b      	ldrb	r3, [r3, #0]
   16c90:	2b00      	cmp	r3, #0
   16c92:	d105      	bne.n	16ca0 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16c94:	f648 3028 	movw	r0, #35624	; 0x8b28
   16c98:	f2c0 0001 	movt	r0, #1
   16c9c:	f000 f926 	bl	16eec <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16ca0:	bd80      	pop	{r7, pc}
   16ca2:	bf00      	nop

00016ca4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16ca4:	b580      	push	{r7, lr}
   16ca6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16ca8:	f242 0316 	movw	r3, #8214	; 0x2016
   16cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb0:	781b      	ldrb	r3, [r3, #0]
   16cb2:	b2db      	uxtb	r3, r3
   16cb4:	f003 0304 	and.w	r3, r3, #4
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d028      	beq.n	16d0e <check_mega128_values_task+0x6a>
   16cbc:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cc4:	781b      	ldrb	r3, [r3, #0]
   16cc6:	b2db      	uxtb	r3, r3
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d020      	beq.n	16d0e <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16ccc:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cd4:	781b      	ldrb	r3, [r3, #0]
   16cd6:	b2db      	uxtb	r3, r3
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d018      	beq.n	16d0e <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16cdc:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce4:	2200      	movs	r2, #0
   16ce6:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16ce8:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cf0:	2201      	movs	r2, #1
   16cf2:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16cf4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cfc:	781b      	ldrb	r3, [r3, #0]
   16cfe:	2b01      	cmp	r3, #1
   16d00:	d105      	bne.n	16d0e <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16d02:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16d06:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16d0a:	f000 f8ef 	bl	16eec <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16d0e:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d16:	781b      	ldrb	r3, [r3, #0]
   16d18:	2b1e      	cmp	r3, #30
   16d1a:	d105      	bne.n	16d28 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16d1c:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d24:	2200      	movs	r2, #0
   16d26:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16d28:	bd80      	pop	{r7, pc}
   16d2a:	bf00      	nop
   16d2c:	f3af 8000 	nop.w

00016d30 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16d30:	b480      	push	{r7}
   16d32:	b083      	sub	sp, #12
   16d34:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16d36:	f242 0311 	movw	r3, #8209	; 0x2011
   16d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d3e:	f242 0211 	movw	r2, #8209	; 0x2011
   16d42:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d46:	7812      	ldrb	r2, [r2, #0]
   16d48:	b2d2      	uxtb	r2, r2
   16d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d4e:	b2d2      	uxtb	r2, r2
   16d50:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16d52:	f242 0317 	movw	r3, #8215	; 0x2017
   16d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d5a:	f242 0217 	movw	r2, #8215	; 0x2017
   16d5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d62:	7812      	ldrb	r2, [r2, #0]
   16d64:	b2d2      	uxtb	r2, r2
   16d66:	f042 0202 	orr.w	r2, r2, #2
   16d6a:	b2d2      	uxtb	r2, r2
   16d6c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d6e:	f242 0312 	movw	r3, #8210	; 0x2012
   16d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d76:	f242 0212 	movw	r2, #8210	; 0x2012
   16d7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d7e:	7812      	ldrb	r2, [r2, #0]
   16d80:	b2d2      	uxtb	r2, r2
   16d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d86:	b2d2      	uxtb	r2, r2
   16d88:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16d8a:	f242 0318 	movw	r3, #8216	; 0x2018
   16d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d92:	f242 0218 	movw	r2, #8216	; 0x2018
   16d96:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d9a:	7812      	ldrb	r2, [r2, #0]
   16d9c:	b2d2      	uxtb	r2, r2
   16d9e:	f022 0202 	bic.w	r2, r2, #2
   16da2:	b2d2      	uxtb	r2, r2
   16da4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16da6:	2300      	movs	r3, #0
   16da8:	71fb      	strb	r3, [r7, #7]
   16daa:	e00b      	b.n	16dc4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16dac:	79fa      	ldrb	r2, [r7, #7]
   16dae:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16db6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16dba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16dbe:	79fb      	ldrb	r3, [r7, #7]
   16dc0:	3301      	adds	r3, #1
   16dc2:	71fb      	strb	r3, [r7, #7]
   16dc4:	79fb      	ldrb	r3, [r7, #7]
   16dc6:	2b09      	cmp	r3, #9
   16dc8:	d9f0      	bls.n	16dac <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16dca:	f242 032a 	movw	r3, #8234	; 0x202a
   16dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16dd6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16dd8:	f242 032f 	movw	r3, #8239	; 0x202f
   16ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de0:	f242 022f 	movw	r2, #8239	; 0x202f
   16de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16de8:	7812      	ldrb	r2, [r2, #0]
   16dea:	b2d2      	uxtb	r2, r2
   16dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16df0:	b2d2      	uxtb	r2, r2
   16df2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16df4:	f242 0336 	movw	r3, #8246	; 0x2036
   16df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dfc:	2210      	movs	r2, #16
   16dfe:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16e00:	f242 0312 	movw	r3, #8210	; 0x2012
   16e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e08:	f242 0212 	movw	r2, #8210	; 0x2012
   16e0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e10:	7812      	ldrb	r2, [r2, #0]
   16e12:	b2d2      	uxtb	r2, r2
   16e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16e18:	b2d2      	uxtb	r2, r2
   16e1a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16e1c:	f242 0337 	movw	r3, #8247	; 0x2037
   16e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e24:	f242 0237 	movw	r2, #8247	; 0x2037
   16e28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e2c:	7812      	ldrb	r2, [r2, #0]
   16e2e:	b2d2      	uxtb	r2, r2
   16e30:	f042 0210 	orr.w	r2, r2, #16
   16e34:	b2d2      	uxtb	r2, r2
   16e36:	701a      	strb	r2, [r3, #0]
}
   16e38:	370c      	adds	r7, #12
   16e3a:	46bd      	mov	sp, r7
   16e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e40:	4770      	bx	lr
   16e42:	bf00      	nop

00016e44 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16e44:	b480      	push	{r7}
   16e46:	b083      	sub	sp, #12
   16e48:	af00      	add	r7, sp, #0
   16e4a:	4602      	mov	r2, r0
   16e4c:	460b      	mov	r3, r1
   16e4e:	71fa      	strb	r2, [r7, #7]
   16e50:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16e52:	79f9      	ldrb	r1, [r7, #7]
   16e54:	88bb      	ldrh	r3, [r7, #4]
   16e56:	011b      	lsls	r3, r3, #4
   16e58:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e5c:	d308      	bcc.n	16e70 <servo_set_one+0x2c>
   16e5e:	88bb      	ldrh	r3, [r7, #4]
   16e60:	011b      	lsls	r3, r3, #4
   16e62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e66:	bf28      	it	cs
   16e68:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e6c:	b29a      	uxth	r2, r3
   16e6e:	e001      	b.n	16e74 <servo_set_one+0x30>
   16e70:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e74:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16e80:	370c      	adds	r7, #12
   16e82:	46bd      	mov	sp, r7
   16e84:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e88:	4770      	bx	lr
   16e8a:	bf00      	nop

00016e8c <servo_transmit>:

void 
servo_transmit(void) {
   16e8c:	b580      	push	{r7, lr}
   16e8e:	b082      	sub	sp, #8
   16e90:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16e92:	2000      	movs	r0, #0
   16e94:	f000 f9e6 	bl	17264 <uart_transmit>
   16e98:	2000      	movs	r0, #0
   16e9a:	f000 f9e3 	bl	17264 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e9e:	2300      	movs	r3, #0
   16ea0:	71fb      	strb	r3, [r7, #7]
   16ea2:	e01a      	b.n	16eda <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16ea4:	79fa      	ldrb	r2, [r7, #7]
   16ea6:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16eb2:	0a1b      	lsrs	r3, r3, #8
   16eb4:	b29b      	uxth	r3, r3
   16eb6:	b2db      	uxtb	r3, r3
   16eb8:	4618      	mov	r0, r3
   16eba:	f000 f9d3 	bl	17264 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16ebe:	79fa      	ldrb	r2, [r7, #7]
   16ec0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ecc:	b2db      	uxtb	r3, r3
   16ece:	4618      	mov	r0, r3
   16ed0:	f000 f9c8 	bl	17264 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16ed4:	79fb      	ldrb	r3, [r7, #7]
   16ed6:	3301      	adds	r3, #1
   16ed8:	71fb      	strb	r3, [r7, #7]
   16eda:	79fb      	ldrb	r3, [r7, #7]
   16edc:	2b09      	cmp	r3, #9
   16ede:	d9e1      	bls.n	16ea4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16ee0:	200a      	movs	r0, #10
   16ee2:	f000 f9bf 	bl	17264 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16ee6:	3708      	adds	r7, #8
   16ee8:	46bd      	mov	sp, r7
   16eea:	bd80      	pop	{r7, pc}

00016eec <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16eec:	b5b0      	push	{r4, r5, r7, lr}
   16eee:	b084      	sub	sp, #16
   16ef0:	af00      	add	r7, sp, #0
   16ef2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16ef4:	687b      	ldr	r3, [r7, #4]
   16ef6:	330a      	adds	r3, #10
   16ef8:	881b      	ldrh	r3, [r3, #0]
   16efa:	b21b      	sxth	r3, r3
   16efc:	005b      	lsls	r3, r3, #1
   16efe:	4618      	mov	r0, r3
   16f00:	f000 fe64 	bl	17bcc <__aeabi_i2d>
   16f04:	4602      	mov	r2, r0
   16f06:	460b      	mov	r3, r1
   16f08:	4610      	mov	r0, r2
   16f0a:	4619      	mov	r1, r3
   16f0c:	a3a6      	add	r3, pc, #664	; (adr r3, 171a8 <servo_set+0x2bc>)
   16f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f12:	f000 fec1 	bl	17c98 <__aeabi_dmul>
   16f16:	4602      	mov	r2, r0
   16f18:	460b      	mov	r3, r1
   16f1a:	4610      	mov	r0, r2
   16f1c:	4619      	mov	r1, r3
   16f1e:	f001 f955 	bl	181cc <__aeabi_d2iz>
   16f22:	4603      	mov	r3, r0
   16f24:	b29b      	uxth	r3, r3
   16f26:	b29b      	uxth	r3, r3
   16f28:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f2c:	81fb      	strh	r3, [r7, #14]
   16f2e:	89fb      	ldrh	r3, [r7, #14]
   16f30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f34:	d307      	bcc.n	16f46 <servo_set+0x5a>
   16f36:	89fb      	ldrh	r3, [r7, #14]
   16f38:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f3c:	bf28      	it	cs
   16f3e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f42:	b29a      	uxth	r2, r3
   16f44:	e001      	b.n	16f4a <servo_set+0x5e>
   16f46:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f4a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f52:	80da      	strh	r2, [r3, #6]
   16f54:	687b      	ldr	r3, [r7, #4]
   16f56:	881b      	ldrh	r3, [r3, #0]
   16f58:	b21b      	sxth	r3, r3
   16f5a:	005b      	lsls	r3, r3, #1
   16f5c:	4618      	mov	r0, r3
   16f5e:	f000 fe35 	bl	17bcc <__aeabi_i2d>
   16f62:	4602      	mov	r2, r0
   16f64:	460b      	mov	r3, r1
   16f66:	4610      	mov	r0, r2
   16f68:	4619      	mov	r1, r3
   16f6a:	a38f      	add	r3, pc, #572	; (adr r3, 171a8 <servo_set+0x2bc>)
   16f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f70:	f000 fe92 	bl	17c98 <__aeabi_dmul>
   16f74:	4602      	mov	r2, r0
   16f76:	460b      	mov	r3, r1
   16f78:	4610      	mov	r0, r2
   16f7a:	4619      	mov	r1, r3
   16f7c:	f001 f926 	bl	181cc <__aeabi_d2iz>
   16f80:	4603      	mov	r3, r0
   16f82:	b29b      	uxth	r3, r3
   16f84:	b29b      	uxth	r3, r3
   16f86:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f8a:	81fb      	strh	r3, [r7, #14]
   16f8c:	89fb      	ldrh	r3, [r7, #14]
   16f8e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f92:	d307      	bcc.n	16fa4 <servo_set+0xb8>
   16f94:	89fb      	ldrh	r3, [r7, #14]
   16f96:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f9a:	bf28      	it	cs
   16f9c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fa0:	b29a      	uxth	r2, r3
   16fa2:	e001      	b.n	16fa8 <servo_set+0xbc>
   16fa4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fa8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fb0:	825a      	strh	r2, [r3, #18]
   16fb2:	687b      	ldr	r3, [r7, #4]
   16fb4:	3304      	adds	r3, #4
   16fb6:	881b      	ldrh	r3, [r3, #0]
   16fb8:	b21b      	sxth	r3, r3
   16fba:	4618      	mov	r0, r3
   16fbc:	f000 fe06 	bl	17bcc <__aeabi_i2d>
   16fc0:	4602      	mov	r2, r0
   16fc2:	460b      	mov	r3, r1
   16fc4:	4610      	mov	r0, r2
   16fc6:	4619      	mov	r1, r3
   16fc8:	a379      	add	r3, pc, #484	; (adr r3, 171b0 <servo_set+0x2c4>)
   16fca:	e9d3 2300 	ldrd	r2, r3, [r3]
   16fce:	f000 fe63 	bl	17c98 <__aeabi_dmul>
   16fd2:	4602      	mov	r2, r0
   16fd4:	460b      	mov	r3, r1
   16fd6:	4610      	mov	r0, r2
   16fd8:	4619      	mov	r1, r3
   16fda:	f001 f8f7 	bl	181cc <__aeabi_d2iz>
   16fde:	4603      	mov	r3, r0
   16fe0:	b29b      	uxth	r3, r3
   16fe2:	b29b      	uxth	r3, r3
   16fe4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16fe8:	3320      	adds	r3, #32
   16fea:	81fb      	strh	r3, [r7, #14]
   16fec:	89fb      	ldrh	r3, [r7, #14]
   16fee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ff2:	d307      	bcc.n	17004 <servo_set+0x118>
   16ff4:	89fb      	ldrh	r3, [r7, #14]
   16ff6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ffa:	bf28      	it	cs
   16ffc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17000:	b29a      	uxth	r2, r3
   17002:	e001      	b.n	17008 <servo_set+0x11c>
   17004:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17008:	f64c 43ac 	movw	r3, #52396	; 0xccac
   1700c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17010:	819a      	strh	r2, [r3, #12]
   17012:	687b      	ldr	r3, [r7, #4]
   17014:	885b      	ldrh	r3, [r3, #2]
   17016:	81bb      	strh	r3, [r7, #12]
   17018:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1701c:	2b00      	cmp	r3, #0
   1701e:	dd06      	ble.n	1702e <servo_set+0x142>
   17020:	f04f 0400 	mov.w	r4, #0
   17024:	f04f 0500 	mov.w	r5, #0
   17028:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1702c:	e002      	b.n	17034 <servo_set+0x148>
   1702e:	a562      	add	r5, pc, #392	; (adr r5, 171b8 <servo_set+0x2cc>)
   17030:	e9d5 4500 	ldrd	r4, r5, [r5]
   17034:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17038:	4618      	mov	r0, r3
   1703a:	f000 fdc7 	bl	17bcc <__aeabi_i2d>
   1703e:	4602      	mov	r2, r0
   17040:	460b      	mov	r3, r1
   17042:	4620      	mov	r0, r4
   17044:	4629      	mov	r1, r5
   17046:	f000 fe27 	bl	17c98 <__aeabi_dmul>
   1704a:	4602      	mov	r2, r0
   1704c:	460b      	mov	r3, r1
   1704e:	4610      	mov	r0, r2
   17050:	4619      	mov	r1, r3
   17052:	a35b      	add	r3, pc, #364	; (adr r3, 171c0 <servo_set+0x2d4>)
   17054:	e9d3 2300 	ldrd	r2, r3, [r3]
   17058:	f000 fe1e 	bl	17c98 <__aeabi_dmul>
   1705c:	4602      	mov	r2, r0
   1705e:	460b      	mov	r3, r1
   17060:	4610      	mov	r0, r2
   17062:	4619      	mov	r1, r3
   17064:	f001 f8b2 	bl	181cc <__aeabi_d2iz>
   17068:	4603      	mov	r3, r0
   1706a:	b29b      	uxth	r3, r3
   1706c:	b29b      	uxth	r3, r3
   1706e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   17072:	81fb      	strh	r3, [r7, #14]
   17074:	89fb      	ldrh	r3, [r7, #14]
   17076:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1707a:	d307      	bcc.n	1708c <servo_set+0x1a0>
   1707c:	89fb      	ldrh	r3, [r7, #14]
   1707e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17082:	bf28      	it	cs
   17084:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17088:	b29a      	uxth	r2, r3
   1708a:	e001      	b.n	17090 <servo_set+0x1a4>
   1708c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17090:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17098:	801a      	strh	r2, [r3, #0]
   1709a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1709e:	2b00      	cmp	r3, #0
   170a0:	dd03      	ble.n	170aa <servo_set+0x1be>
   170a2:	a545      	add	r5, pc, #276	; (adr r5, 171b8 <servo_set+0x2cc>)
   170a4:	e9d5 4500 	ldrd	r4, r5, [r5]
   170a8:	e005      	b.n	170b6 <servo_set+0x1ca>
   170aa:	f04f 0400 	mov.w	r4, #0
   170ae:	f04f 0500 	mov.w	r5, #0
   170b2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   170b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170ba:	4618      	mov	r0, r3
   170bc:	f000 fd86 	bl	17bcc <__aeabi_i2d>
   170c0:	4602      	mov	r2, r0
   170c2:	460b      	mov	r3, r1
   170c4:	4620      	mov	r0, r4
   170c6:	4629      	mov	r1, r5
   170c8:	f000 fde6 	bl	17c98 <__aeabi_dmul>
   170cc:	4602      	mov	r2, r0
   170ce:	460b      	mov	r3, r1
   170d0:	4610      	mov	r0, r2
   170d2:	4619      	mov	r1, r3
   170d4:	a33c      	add	r3, pc, #240	; (adr r3, 171c8 <servo_set+0x2dc>)
   170d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   170da:	f000 fddd 	bl	17c98 <__aeabi_dmul>
   170de:	4602      	mov	r2, r0
   170e0:	460b      	mov	r3, r1
   170e2:	4610      	mov	r0, r2
   170e4:	4619      	mov	r1, r3
   170e6:	f001 f871 	bl	181cc <__aeabi_d2iz>
   170ea:	4603      	mov	r3, r0
   170ec:	b29b      	uxth	r3, r3
   170ee:	b29b      	uxth	r3, r3
   170f0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   170f4:	3320      	adds	r3, #32
   170f6:	81fb      	strh	r3, [r7, #14]
   170f8:	89fb      	ldrh	r3, [r7, #14]
   170fa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   170fe:	d307      	bcc.n	17110 <servo_set+0x224>
   17100:	89fb      	ldrh	r3, [r7, #14]
   17102:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17106:	bf28      	it	cs
   17108:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1710c:	b29a      	uxth	r2, r3
   1710e:	e001      	b.n	17114 <servo_set+0x228>
   17110:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17114:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1711c:	809a      	strh	r2, [r3, #4]
   1711e:	687b      	ldr	r3, [r7, #4]
   17120:	3306      	adds	r3, #6
   17122:	881b      	ldrh	r3, [r3, #0]
   17124:	b21b      	sxth	r3, r3
   17126:	4618      	mov	r0, r3
   17128:	f000 fd50 	bl	17bcc <__aeabi_i2d>
   1712c:	4604      	mov	r4, r0
   1712e:	460d      	mov	r5, r1
   17130:	687b      	ldr	r3, [r7, #4]
   17132:	3302      	adds	r3, #2
   17134:	881b      	ldrh	r3, [r3, #0]
   17136:	b21b      	sxth	r3, r3
   17138:	4618      	mov	r0, r3
   1713a:	f000 fd47 	bl	17bcc <__aeabi_i2d>
   1713e:	4602      	mov	r2, r0
   17140:	460b      	mov	r3, r1
   17142:	4620      	mov	r0, r4
   17144:	4629      	mov	r1, r5
   17146:	f000 fbf5 	bl	17934 <__adddf3>
   1714a:	4602      	mov	r2, r0
   1714c:	460b      	mov	r3, r1
   1714e:	4610      	mov	r0, r2
   17150:	4619      	mov	r1, r3
   17152:	a31f      	add	r3, pc, #124	; (adr r3, 171d0 <servo_set+0x2e4>)
   17154:	e9d3 2300 	ldrd	r2, r3, [r3]
   17158:	f000 fd9e 	bl	17c98 <__aeabi_dmul>
   1715c:	4602      	mov	r2, r0
   1715e:	460b      	mov	r3, r1
   17160:	4610      	mov	r0, r2
   17162:	4619      	mov	r1, r3
   17164:	f001 f832 	bl	181cc <__aeabi_d2iz>
   17168:	4603      	mov	r3, r0
   1716a:	b29b      	uxth	r3, r3
   1716c:	b29b      	uxth	r3, r3
   1716e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17172:	3320      	adds	r3, #32
   17174:	81fb      	strh	r3, [r7, #14]
   17176:	89fb      	ldrh	r3, [r7, #14]
   17178:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1717c:	d307      	bcc.n	1718e <servo_set+0x2a2>
   1717e:	89fb      	ldrh	r3, [r7, #14]
   17180:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17184:	bf28      	it	cs
   17186:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1718a:	b29a      	uxth	r2, r3
   1718c:	e001      	b.n	17192 <servo_set+0x2a6>
   1718e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17192:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1719a:	81da      	strh	r2, [r3, #14]
}
   1719c:	3710      	adds	r7, #16
   1719e:	46bd      	mov	sp, r7
   171a0:	bdb0      	pop	{r4, r5, r7, pc}
   171a2:	bf00      	nop
   171a4:	f3af 8000 	nop.w
   171a8:	aaaa9ef0 	.word	0xaaaa9ef0
   171ac:	3feaaaaa 	.word	0x3feaaaaa
   171b0:	fc96473e 	.word	0xfc96473e
   171b4:	3fdfc962 	.word	0x3fdfc962
   171b8:	51eb851f 	.word	0x51eb851f
   171bc:	3fe51eb8 	.word	0x3fe51eb8
   171c0:	9999999a 	.word	0x9999999a
   171c4:	bfe19999 	.word	0xbfe19999
   171c8:	aaaa9ef0 	.word	0xaaaa9ef0
   171cc:	bfe0aaaa 	.word	0xbfe0aaaa
   171d0:	eeeed77a 	.word	0xeeeed77a
   171d4:	bfdeeeee 	.word	0xbfdeeeee

000171d8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   171d8:	b480      	push	{r7}
   171da:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   171dc:	f242 0320 	movw	r3, #8224	; 0x2020
   171e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171e4:	2200      	movs	r2, #0
   171e6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   171e8:	f242 0309 	movw	r3, #8201	; 0x2009
   171ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171f0:	2219      	movs	r2, #25
   171f2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   171f4:	f242 030b 	movw	r3, #8203	; 0x200b
   171f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171fc:	2200      	movs	r2, #0
   171fe:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17200:	f242 030a 	movw	r3, #8202	; 0x200a
   17204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17208:	2208      	movs	r2, #8
   1720a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1720c:	f242 0320 	movw	r3, #8224	; 0x2020
   17210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17214:	2286      	movs	r2, #134	; 0x86
   17216:	701a      	strb	r2, [r3, #0]
}
   17218:	46bd      	mov	sp, r7
   1721a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1721e:	4770      	bx	lr

00017220 <uart_init_rx>:

void uart_init_rx() {
   17220:	b480      	push	{r7}
   17222:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   17224:	f242 030a 	movw	r3, #8202	; 0x200a
   17228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1722c:	f242 020a 	movw	r2, #8202	; 0x200a
   17230:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17234:	7812      	ldrb	r2, [r2, #0]
   17236:	b2d2      	uxtb	r2, r2
   17238:	f042 0210 	orr.w	r2, r2, #16
   1723c:	b2d2      	uxtb	r2, r2
   1723e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17240:	f242 030a 	movw	r3, #8202	; 0x200a
   17244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17248:	f242 020a 	movw	r2, #8202	; 0x200a
   1724c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17250:	7812      	ldrb	r2, [r2, #0]
   17252:	b2d2      	uxtb	r2, r2
   17254:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17258:	b2d2      	uxtb	r2, r2
   1725a:	701a      	strb	r2, [r3, #0]
}
   1725c:	46bd      	mov	sp, r7
   1725e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17262:	4770      	bx	lr

00017264 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17264:	b480      	push	{r7}
   17266:	b083      	sub	sp, #12
   17268:	af00      	add	r7, sp, #0
   1726a:	4603      	mov	r3, r0
   1726c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1726e:	f242 030a 	movw	r3, #8202	; 0x200a
   17272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17276:	781b      	ldrb	r3, [r3, #0]
   17278:	b2db      	uxtb	r3, r3
   1727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1727e:	2b00      	cmp	r3, #0
   17280:	d028      	beq.n	172d4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17282:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1728a:	781b      	ldrb	r3, [r3, #0]
   1728c:	b2db      	uxtb	r3, r3
   1728e:	461a      	mov	r2, r3
   17290:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17298:	781b      	ldrb	r3, [r3, #0]
   1729a:	3301      	adds	r3, #1
   1729c:	429a      	cmp	r2, r3
   1729e:	d100      	bne.n	172a2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   172a0:	e02c      	b.n	172fc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   172a2:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172aa:	781b      	ldrb	r3, [r3, #0]
   172ac:	461a      	mov	r2, r3
   172ae:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   172b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172b6:	79f9      	ldrb	r1, [r7, #7]
   172b8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   172ba:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172c2:	781b      	ldrb	r3, [r3, #0]
   172c4:	3301      	adds	r3, #1
   172c6:	b2da      	uxtb	r2, r3
   172c8:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   172cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172d0:	701a      	strb	r2, [r3, #0]
   172d2:	e013      	b.n	172fc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   172d4:	f242 030c 	movw	r3, #8204	; 0x200c
   172d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172dc:	79fa      	ldrb	r2, [r7, #7]
   172de:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   172e0:	f242 030a 	movw	r3, #8202	; 0x200a
   172e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172e8:	f242 020a 	movw	r2, #8202	; 0x200a
   172ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172f0:	7812      	ldrb	r2, [r2, #0]
   172f2:	b2d2      	uxtb	r2, r2
   172f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   172f8:	b2d2      	uxtb	r2, r2
   172fa:	701a      	strb	r2, [r3, #0]
  }
}
   172fc:	370c      	adds	r7, #12
   172fe:	46bd      	mov	sp, r7
   17300:	f85d 7b04 	ldr.w	r7, [sp], #4
   17304:	4770      	bx	lr
   17306:	bf00      	nop

00017308 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17308:	b590      	push	{r4, r7, lr}
   1730a:	b089      	sub	sp, #36	; 0x24
   1730c:	af00      	add	r7, sp, #0
   1730e:	4603      	mov	r3, r0
   17310:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17312:	f648 337c 	movw	r3, #35708	; 0x8b7c
   17316:	f2c0 0301 	movt	r3, #1
   1731a:	f107 040c 	add.w	r4, r7, #12
   1731e:	6818      	ldr	r0, [r3, #0]
   17320:	6859      	ldr	r1, [r3, #4]
   17322:	689a      	ldr	r2, [r3, #8]
   17324:	68db      	ldr	r3, [r3, #12]
   17326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17328:	79fb      	ldrb	r3, [r7, #7]
   1732a:	091b      	lsrs	r3, r3, #4
   1732c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1732e:	79fb      	ldrb	r3, [r7, #7]
   17330:	f003 030f 	and.w	r3, r3, #15
   17334:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   17336:	230f      	movs	r3, #15
   17338:	77fb      	strb	r3, [r7, #31]
        low = 15;
   1733a:	230f      	movs	r3, #15
   1733c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   1733e:	7ffb      	ldrb	r3, [r7, #31]
   17340:	f107 0220 	add.w	r2, r7, #32
   17344:	4413      	add	r3, r2
   17346:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1734a:	4618      	mov	r0, r3
   1734c:	f7ff ff8a 	bl	17264 <uart_transmit>
  uart_transmit(hex[low]);
   17350:	7fbb      	ldrb	r3, [r7, #30]
   17352:	f107 0220 	add.w	r2, r7, #32
   17356:	4413      	add	r3, r2
   17358:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1735c:	4618      	mov	r0, r3
   1735e:	f7ff ff81 	bl	17264 <uart_transmit>
} 
   17362:	3724      	adds	r7, #36	; 0x24
   17364:	46bd      	mov	sp, r7
   17366:	bd90      	pop	{r4, r7, pc}

00017368 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17368:	b580      	push	{r7, lr}
   1736a:	b084      	sub	sp, #16
   1736c:	af00      	add	r7, sp, #0
   1736e:	4603      	mov	r3, r0
   17370:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17372:	88fb      	ldrh	r3, [r7, #6]
   17374:	0a1b      	lsrs	r3, r3, #8
   17376:	b29b      	uxth	r3, r3
   17378:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1737a:	88fb      	ldrh	r3, [r7, #6]
   1737c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1737e:	7bfb      	ldrb	r3, [r7, #15]
   17380:	4618      	mov	r0, r3
   17382:	f7ff ffc1 	bl	17308 <uart_print_hex>
  uart_print_hex(low);
   17386:	7bbb      	ldrb	r3, [r7, #14]
   17388:	4618      	mov	r0, r3
   1738a:	f7ff ffbd 	bl	17308 <uart_print_hex>
}
   1738e:	3710      	adds	r7, #16
   17390:	46bd      	mov	sp, r7
   17392:	bd80      	pop	{r7, pc}

00017394 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17394:	b580      	push	{r7, lr}
   17396:	b084      	sub	sp, #16
   17398:	af00      	add	r7, sp, #0
   1739a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1739c:	2300      	movs	r3, #0
   1739e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   173a0:	e009      	b.n	173b6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   173a2:	7bfb      	ldrb	r3, [r7, #15]
   173a4:	687a      	ldr	r2, [r7, #4]
   173a6:	4413      	add	r3, r2
   173a8:	781b      	ldrb	r3, [r3, #0]
   173aa:	4618      	mov	r0, r3
   173ac:	f7ff ff5a 	bl	17264 <uart_transmit>
    i++;
   173b0:	7bfb      	ldrb	r3, [r7, #15]
   173b2:	3301      	adds	r3, #1
   173b4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   173b6:	7bfb      	ldrb	r3, [r7, #15]
   173b8:	687a      	ldr	r2, [r7, #4]
   173ba:	4413      	add	r3, r2
   173bc:	781b      	ldrb	r3, [r3, #0]
   173be:	2b00      	cmp	r3, #0
   173c0:	d1ef      	bne.n	173a2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   173c2:	3710      	adds	r7, #16
   173c4:	46bd      	mov	sp, r7
   173c6:	bd80      	pop	{r7, pc}

000173c8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   173c8:	b480      	push	{r7}
   173ca:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   173cc:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   173d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173d4:	781a      	ldrb	r2, [r3, #0]
   173d6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173de:	781b      	ldrb	r3, [r3, #0]
   173e0:	b2db      	uxtb	r3, r3
   173e2:	429a      	cmp	r2, r3
   173e4:	d10e      	bne.n	17404 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   173e6:	f242 030a 	movw	r3, #8202	; 0x200a
   173ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173ee:	f242 020a 	movw	r2, #8202	; 0x200a
   173f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   173f6:	7812      	ldrb	r2, [r2, #0]
   173f8:	b2d2      	uxtb	r2, r2
   173fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   173fe:	b2d2      	uxtb	r2, r2
   17400:	701a      	strb	r2, [r3, #0]
   17402:	e01d      	b.n	17440 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17404:	f242 030c 	movw	r3, #8204	; 0x200c
   17408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1740c:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   17410:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17414:	7812      	ldrb	r2, [r2, #0]
   17416:	b2d2      	uxtb	r2, r2
   17418:	4611      	mov	r1, r2
   1741a:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   1741e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17422:	5c52      	ldrb	r2, [r2, r1]
   17424:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17426:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1742a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1742e:	781b      	ldrb	r3, [r3, #0]
   17430:	b2db      	uxtb	r3, r3
   17432:	3301      	adds	r3, #1
   17434:	b2da      	uxtb	r2, r3
   17436:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1743e:	701a      	strb	r2, [r3, #0]
  }
}
   17440:	46bd      	mov	sp, r7
   17442:	f85d 7b04 	ldr.w	r7, [sp], #4
   17446:	4770      	bx	lr

00017448 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17448:	b580      	push	{r7, lr}
   1744a:	b082      	sub	sp, #8
   1744c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1744e:	2010      	movs	r0, #16
   17450:	2101      	movs	r1, #1
   17452:	f7e9 fcb5 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17456:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1745a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1745e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17462:	2201      	movs	r2, #1
   17464:	f7e9 ffbc 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1746c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1746e:	2310      	movs	r3, #16
   17470:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17472:	2303      	movs	r3, #3
   17474:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17476:	1d3b      	adds	r3, r7, #4
   17478:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1747c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17480:	4619      	mov	r1, r3
   17482:	f7e9 fe71 	bl	1168 <GPIO_Init>
}
   17486:	3708      	adds	r7, #8
   17488:	46bd      	mov	sp, r7
   1748a:	bd80      	pop	{r7, pc}

0001748c <init_button>:

void init_button(void)
{
   1748c:	b580      	push	{r7, lr}
   1748e:	b082      	sub	sp, #8
   17490:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17492:	2004      	movs	r0, #4
   17494:	2101      	movs	r1, #1
   17496:	f7e9 fc93 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1749a:	2301      	movs	r3, #1
   1749c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1749e:	2304      	movs	r3, #4
   174a0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   174a2:	2303      	movs	r3, #3
   174a4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   174a6:	1d3b      	adds	r3, r7, #4
   174a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   174ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174b0:	4619      	mov	r1, r3
   174b2:	f7e9 fe59 	bl	1168 <GPIO_Init>
}
   174b6:	3708      	adds	r7, #8
   174b8:	46bd      	mov	sp, r7
   174ba:	bd80      	pop	{r7, pc}

000174bc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   174bc:	b580      	push	{r7, lr}
   174be:	b084      	sub	sp, #16
   174c0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   174c2:	2001      	movs	r0, #1
   174c4:	2101      	movs	r1, #1
   174c6:	f7e9 fc7b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   174ca:	2000      	movs	r0, #0
   174cc:	2100      	movs	r1, #0
   174ce:	f7ea f87f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   174d2:	2301      	movs	r3, #1
   174d4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   174d6:	2300      	movs	r3, #0
   174d8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   174da:	2308      	movs	r3, #8
   174dc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   174de:	2301      	movs	r3, #1
   174e0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   174e2:	f107 0308 	add.w	r3, r7, #8
   174e6:	4618      	mov	r0, r3
   174e8:	f7ea fd78 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   174ec:	2306      	movs	r3, #6
   174ee:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   174f0:	230f      	movs	r3, #15
   174f2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   174f4:	230f      	movs	r3, #15
   174f6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   174f8:	2301      	movs	r3, #1
   174fa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   174fc:	1d3b      	adds	r3, r7, #4
   174fe:	4618      	mov	r0, r3
   17500:	f7ea fea6 	bl	2250 <NVIC_Init>
}
   17504:	3710      	adds	r7, #16
   17506:	46bd      	mov	sp, r7
   17508:	bd80      	pop	{r7, pc}
   1750a:	bf00      	nop

0001750c <init_rs232>:

void init_rs232(void)
{
   1750c:	b580      	push	{r7, lr}
   1750e:	b086      	sub	sp, #24
   17510:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17512:	2005      	movs	r0, #5
   17514:	2101      	movs	r1, #1
   17516:	f7e9 fc53 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1751a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1751e:	2101      	movs	r1, #1
   17520:	f7e9 fc76 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17524:	2308      	movs	r3, #8
   17526:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17528:	2304      	movs	r3, #4
   1752a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1752c:	1d3b      	adds	r3, r7, #4
   1752e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17532:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17536:	4619      	mov	r1, r3
   17538:	f7e9 fe16 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1753c:	2304      	movs	r3, #4
   1753e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17540:	2303      	movs	r3, #3
   17542:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17544:	2318      	movs	r3, #24
   17546:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17548:	1d3b      	adds	r3, r7, #4
   1754a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1754e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17552:	4619      	mov	r1, r3
   17554:	f7e9 fe08 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17558:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1755c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1755e:	2300      	movs	r3, #0
   17560:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17562:	2300      	movs	r3, #0
   17564:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17566:	2300      	movs	r3, #0
   17568:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1756a:	2300      	movs	r3, #0
   1756c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1756e:	230c      	movs	r3, #12
   17570:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17572:	f107 0308 	add.w	r3, r7, #8
   17576:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1757a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1757e:	4619      	mov	r1, r3
   17580:	f7ea f8da 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17584:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17588:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1758c:	2101      	movs	r1, #1
   1758e:	f7ea f9f1 	bl	1974 <USART_Cmd>
}
   17592:	3718      	adds	r7, #24
   17594:	46bd      	mov	sp, r7
   17596:	bd80      	pop	{r7, pc}

00017598 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17598:	b580      	push	{r7, lr}
   1759a:	b082      	sub	sp, #8
   1759c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1759e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175a6:	f240 7127 	movw	r1, #1831	; 0x727
   175aa:	2200      	movs	r2, #0
   175ac:	f7ea fa02 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   175b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175b8:	f240 5125 	movw	r1, #1317	; 0x525
   175bc:	2201      	movs	r2, #1
   175be:	f7ea f9f9 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   175c2:	2326      	movs	r3, #38	; 0x26
   175c4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   175c6:	2300      	movs	r3, #0
   175c8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   175ca:	2301      	movs	r3, #1
   175cc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   175ce:	1d3b      	adds	r3, r7, #4
   175d0:	4618      	mov	r0, r3
   175d2:	f7ea fe3d 	bl	2250 <NVIC_Init>
}
   175d6:	3708      	adds	r7, #8
   175d8:	46bd      	mov	sp, r7
   175da:	bd80      	pop	{r7, pc}

000175dc <enable_rs232>:

void enable_rs232(void)
{
   175dc:	b580      	push	{r7, lr}
   175de:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   175e0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175e8:	2101      	movs	r1, #1
   175ea:	f7ea f9c3 	bl	1974 <USART_Cmd>
}
   175ee:	bd80      	pop	{r7, pc}

000175f0 <send_byte>:

void send_byte(uint8_t b)
{
   175f0:	b580      	push	{r7, lr}
   175f2:	b082      	sub	sp, #8
   175f4:	af00      	add	r7, sp, #0
   175f6:	4603      	mov	r3, r0
   175f8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   175fa:	bf00      	nop
   175fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17600:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17604:	2180      	movs	r1, #128	; 0x80
   17606:	f7ea fc21 	bl	1e4c <USART_GetFlagStatus>
   1760a:	4603      	mov	r3, r0
   1760c:	2b00      	cmp	r3, #0
   1760e:	d0f5      	beq.n	175fc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17614:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1761c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17620:	68d2      	ldr	r2, [r2, #12]
   17622:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17626:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17628:	79fb      	ldrb	r3, [r7, #7]
   1762a:	b29b      	uxth	r3, r3
   1762c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17630:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17634:	4619      	mov	r1, r3
   17636:	f7ea fabd 	bl	1bb4 <USART_SendData>
}
   1763a:	3708      	adds	r7, #8
   1763c:	46bd      	mov	sp, r7
   1763e:	bd80      	pop	{r7, pc}

00017640 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17640:	b580      	push	{r7, lr}
   17642:	b082      	sub	sp, #8
   17644:	af00      	add	r7, sp, #0
   17646:	4603      	mov	r3, r0
   17648:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1764a:	79fb      	ldrb	r3, [r7, #7]
   1764c:	3330      	adds	r3, #48	; 0x30
   1764e:	b2db      	uxtb	r3, r3
   17650:	4618      	mov	r0, r3
   17652:	f7ff ffcd 	bl	175f0 <send_byte>
}
   17656:	3708      	adds	r7, #8
   17658:	46bd      	mov	sp, r7
   1765a:	bd80      	pop	{r7, pc}

0001765c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1765c:	b580      	push	{r7, lr}
   1765e:	b084      	sub	sp, #16
   17660:	af00      	add	r7, sp, #0
   17662:	6078      	str	r0, [r7, #4]
    int i = 0;
   17664:	2300      	movs	r3, #0
   17666:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17668:	e009      	b.n	1767e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1766a:	68fb      	ldr	r3, [r7, #12]
   1766c:	687a      	ldr	r2, [r7, #4]
   1766e:	4413      	add	r3, r2
   17670:	781b      	ldrb	r3, [r3, #0]
   17672:	4618      	mov	r0, r3
   17674:	f7ff ffbc 	bl	175f0 <send_byte>
        i++;
   17678:	68fb      	ldr	r3, [r7, #12]
   1767a:	3301      	adds	r3, #1
   1767c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1767e:	68fb      	ldr	r3, [r7, #12]
   17680:	687a      	ldr	r2, [r7, #4]
   17682:	4413      	add	r3, r2
   17684:	781b      	ldrb	r3, [r3, #0]
   17686:	2b00      	cmp	r3, #0
   17688:	d1ef      	bne.n	1766a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1768a:	3710      	adds	r7, #16
   1768c:	46bd      	mov	sp, r7
   1768e:	bd80      	pop	{r7, pc}

00017690 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17690:	b580      	push	{r7, lr}
   17692:	b08a      	sub	sp, #40	; 0x28
   17694:	af00      	add	r7, sp, #0
   17696:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17698:	2300      	movs	r3, #0
   1769a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1769c:	687b      	ldr	r3, [r7, #4]
   1769e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   176a0:	69fb      	ldr	r3, [r7, #28]
   176a2:	2b00      	cmp	r3, #0
   176a4:	d106      	bne.n	176b4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   176a6:	f648 308c 	movw	r0, #35724	; 0x8b8c
   176aa:	f2c0 0001 	movt	r0, #1
   176ae:	f7ff ffd5 	bl	1765c <vPrintString>
   176b2:	e062      	b.n	1777a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   176b4:	e024      	b.n	17700 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   176b6:	69f9      	ldr	r1, [r7, #28]
   176b8:	f246 6367 	movw	r3, #26215	; 0x6667
   176bc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   176c0:	fb83 2301 	smull	r2, r3, r3, r1
   176c4:	109a      	asrs	r2, r3, #2
   176c6:	17cb      	asrs	r3, r1, #31
   176c8:	1ad2      	subs	r2, r2, r3
   176ca:	4613      	mov	r3, r2
   176cc:	009b      	lsls	r3, r3, #2
   176ce:	4413      	add	r3, r2
   176d0:	005b      	lsls	r3, r3, #1
   176d2:	1aca      	subs	r2, r1, r3
   176d4:	b2d3      	uxtb	r3, r2
   176d6:	3330      	adds	r3, #48	; 0x30
   176d8:	b2da      	uxtb	r2, r3
   176da:	f107 010c 	add.w	r1, r7, #12
   176de:	6a3b      	ldr	r3, [r7, #32]
   176e0:	440b      	add	r3, r1
   176e2:	701a      	strb	r2, [r3, #0]
            count ++;
   176e4:	6a3b      	ldr	r3, [r7, #32]
   176e6:	3301      	adds	r3, #1
   176e8:	623b      	str	r3, [r7, #32]
            num /= 10;
   176ea:	69fa      	ldr	r2, [r7, #28]
   176ec:	f246 6367 	movw	r3, #26215	; 0x6667
   176f0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   176f4:	fb83 1302 	smull	r1, r3, r3, r2
   176f8:	1099      	asrs	r1, r3, #2
   176fa:	17d3      	asrs	r3, r2, #31
   176fc:	1acb      	subs	r3, r1, r3
   176fe:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17700:	69fb      	ldr	r3, [r7, #28]
   17702:	2b00      	cmp	r3, #0
   17704:	d1d7      	bne.n	176b6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17706:	f107 020c 	add.w	r2, r7, #12
   1770a:	6a3b      	ldr	r3, [r7, #32]
   1770c:	4413      	add	r3, r2
   1770e:	2200      	movs	r2, #0
   17710:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17712:	2300      	movs	r3, #0
   17714:	627b      	str	r3, [r7, #36]	; 0x24
   17716:	e020      	b.n	1775a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17718:	f107 020c 	add.w	r2, r7, #12
   1771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1771e:	4413      	add	r3, r2
   17720:	781b      	ldrb	r3, [r3, #0]
   17722:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17724:	6a3a      	ldr	r2, [r7, #32]
   17726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17728:	1ad3      	subs	r3, r2, r3
   1772a:	3b01      	subs	r3, #1
   1772c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17730:	4413      	add	r3, r2
   17732:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17736:	f107 010c 	add.w	r1, r7, #12
   1773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1773c:	440b      	add	r3, r1
   1773e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17740:	6a3a      	ldr	r2, [r7, #32]
   17742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17744:	1ad3      	subs	r3, r2, r3
   17746:	3b01      	subs	r3, #1
   17748:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1774c:	440b      	add	r3, r1
   1774e:	7efa      	ldrb	r2, [r7, #27]
   17750:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17756:	3301      	adds	r3, #1
   17758:	627b      	str	r3, [r7, #36]	; 0x24
   1775a:	6a3b      	ldr	r3, [r7, #32]
   1775c:	085a      	lsrs	r2, r3, #1
   1775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17760:	429a      	cmp	r2, r3
   17762:	d8d9      	bhi.n	17718 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17764:	f107 030c 	add.w	r3, r7, #12
   17768:	4618      	mov	r0, r3
   1776a:	f7ff ff77 	bl	1765c <vPrintString>
        vPrintString("\n\r");
   1776e:	f648 3090 	movw	r0, #35728	; 0x8b90
   17772:	f2c0 0001 	movt	r0, #1
   17776:	f7ff ff71 	bl	1765c <vPrintString>
    }
}
   1777a:	3728      	adds	r7, #40	; 0x28
   1777c:	46bd      	mov	sp, r7
   1777e:	bd80      	pop	{r7, pc}

00017780 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17780:	b580      	push	{r7, lr}
   17782:	b084      	sub	sp, #16
   17784:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17786:	2300      	movs	r3, #0
   17788:	60fb      	str	r3, [r7, #12]
   1778a:	e01e      	b.n	177ca <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   1778c:	f240 0390 	movw	r3, #144	; 0x90
   17790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17794:	68fa      	ldr	r2, [r7, #12]
   17796:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1779a:	f240 0328 	movw	r3, #40	; 0x28
   1779e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177a2:	68fa      	ldr	r2, [r7, #12]
   177a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   177a8:	f240 0328 	movw	r3, #40	; 0x28
   177ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   177b0:	68fa      	ldr	r2, [r7, #12]
   177b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   177b6:	463b      	mov	r3, r7
   177b8:	f7eb fa96 	bl	2ce8 <pxEventGenericCreate>
   177bc:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   177be:	68b8      	ldr	r0, [r7, #8]
   177c0:	f7eb fe4a 	bl	3458 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   177c4:	68fb      	ldr	r3, [r7, #12]
   177c6:	3301      	adds	r3, #1
   177c8:	60fb      	str	r3, [r7, #12]
   177ca:	68fb      	ldr	r3, [r7, #12]
   177cc:	2b0c      	cmp	r3, #12
   177ce:	dddd      	ble.n	1778c <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   177d0:	3710      	adds	r7, #16
   177d2:	46bd      	mov	sp, r7
   177d4:	bd80      	pop	{r7, pc}
   177d6:	bf00      	nop

000177d8 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   177d8:	b580      	push	{r7, lr}
   177da:	b086      	sub	sp, #24
   177dc:	af04      	add	r7, sp, #16
    init_led();
   177de:	f7ff fe33 	bl	17448 <init_led>
    init_rs232();
   177e2:	f7ff fe93 	bl	1750c <init_rs232>
    enable_rs232_interrupts();
   177e6:	f7ff fed7 	bl	17598 <enable_rs232_interrupts>
    enable_rs232();
   177ea:	f7ff fef7 	bl	175dc <enable_rs232>
    vSemaphoreInitialise();
   177ee:	f7eb fe9b 	bl	3528 <vSemaphoreInitialise>
    vContextInit();
   177f2:	f7eb fed9 	bl	35a8 <vContextInit>
    vInitialiseEventLists();  
   177f6:	f7eb f937 	bl	2a68 <vInitialiseEventLists>
    vStartTask();
   177fa:	f7ff ffc1 	bl	17780 <vStartTask>
    PapabenchInit();
   177fe:	f7ec fa91 	bl	3d24 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17802:	2300      	movs	r3, #0
   17804:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   17806:	2301      	movs	r3, #1
   17808:	9300      	str	r3, [sp, #0]
   1780a:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   1780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17812:	9301      	str	r3, [sp, #4]
   17814:	2300      	movs	r3, #0
   17816:	9302      	str	r3, [sp, #8]
   17818:	2300      	movs	r3, #0
   1781a:	9303      	str	r3, [sp, #12]
   1781c:	f643 404d 	movw	r0, #15437	; 0x3c4d
   17820:	f2c0 0000 	movt	r0, #0
   17824:	f648 3194 	movw	r1, #35732	; 0x8b94
   17828:	f2c0 0101 	movt	r1, #1
   1782c:	2280      	movs	r2, #128	; 0x80
   1782e:	2300      	movs	r3, #0
   17830:	f7ed f91c 	bl	4a6c <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   17834:	2304      	movs	r3, #4
   17836:	9300      	str	r3, [sp, #0]
   17838:	4b25      	ldr	r3, [pc, #148]	; (178d0 <main+0xf8>)
   1783a:	9301      	str	r3, [sp, #4]
   1783c:	2300      	movs	r3, #0
   1783e:	9302      	str	r3, [sp, #8]
   17840:	2300      	movs	r3, #0
   17842:	9303      	str	r3, [sp, #12]
   17844:	f643 008d 	movw	r0, #14477	; 0x388d
   17848:	f2c0 0000 	movt	r0, #0
   1784c:	f648 31a0 	movw	r1, #35744	; 0x8ba0
   17850:	f2c0 0101 	movt	r1, #1
   17854:	2280      	movs	r2, #128	; 0x80
   17856:	2300      	movs	r3, #0
   17858:	f7ed f908 	bl	4a6c <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   1785c:	2302      	movs	r3, #2
   1785e:	9300      	str	r3, [sp, #0]
   17860:	4b1c      	ldr	r3, [pc, #112]	; (178d4 <main+0xfc>)
   17862:	9301      	str	r3, [sp, #4]
   17864:	2300      	movs	r3, #0
   17866:	9302      	str	r3, [sp, #8]
   17868:	2300      	movs	r3, #0
   1786a:	9303      	str	r3, [sp, #12]
   1786c:	f643 10b5 	movw	r0, #14773	; 0x39b5
   17870:	f2c0 0000 	movt	r0, #0
   17874:	f648 31ac 	movw	r1, #35756	; 0x8bac
   17878:	f2c0 0101 	movt	r1, #1
   1787c:	2280      	movs	r2, #128	; 0x80
   1787e:	2300      	movs	r3, #0
   17880:	f7ed f8f4 	bl	4a6c <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   17884:	2303      	movs	r3, #3
   17886:	9300      	str	r3, [sp, #0]
   17888:	4b13      	ldr	r3, [pc, #76]	; (178d8 <main+0x100>)
   1788a:	9301      	str	r3, [sp, #4]
   1788c:	2300      	movs	r3, #0
   1788e:	9302      	str	r3, [sp, #8]
   17890:	2300      	movs	r3, #0
   17892:	9303      	str	r3, [sp, #12]
   17894:	f643 3031 	movw	r0, #15153	; 0x3b31
   17898:	f2c0 0000 	movt	r0, #0
   1789c:	f648 31b8 	movw	r1, #35768	; 0x8bb8
   178a0:	f2c0 0101 	movt	r1, #1
   178a4:	2280      	movs	r2, #128	; 0x80
   178a6:	2300      	movs	r3, #0
   178a8:	f7ed f8e0 	bl	4a6c <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   178ac:	f241 3354 	movw	r3, #4948	; 0x1354
   178b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   178b4:	681b      	ldr	r3, [r3, #0]
   178b6:	4618      	mov	r0, r3
   178b8:	2100      	movs	r1, #0
   178ba:	2200      	movs	r2, #0
   178bc:	2300      	movs	r3, #0
   178be:	f7ec fdc3 	bl	4448 <xQueueGenericSend>
    vTaskStartScheduler();
   178c2:	f7ed fc51 	bl	5168 <vTaskStartScheduler>

    return 0;
   178c6:	2300      	movs	r3, #0
}
   178c8:	4618      	mov	r0, r3
   178ca:	3708      	adds	r7, #8
   178cc:	46bd      	mov	sp, r7
   178ce:	bd80      	pop	{r7, pc}
   178d0:	2004cdc8 	.word	0x2004cdc8
   178d4:	2004cdcc 	.word	0x2004cdcc
   178d8:	2004cdd0 	.word	0x2004cdd0

000178dc <myTraceCreate>:

void myTraceCreate      (){
   178dc:	b480      	push	{r7}
   178de:	af00      	add	r7, sp, #0
}
   178e0:	46bd      	mov	sp, r7
   178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   178e6:	4770      	bx	lr

000178e8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   178e8:	b480      	push	{r7}
   178ea:	af00      	add	r7, sp, #0
}
   178ec:	46bd      	mov	sp, r7
   178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   178f2:	4770      	bx	lr

000178f4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   178f4:	b480      	push	{r7}
   178f6:	af00      	add	r7, sp, #0
}
   178f8:	46bd      	mov	sp, r7
   178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   178fe:	4770      	bx	lr

00017900 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17900:	b580      	push	{r7, lr}
   17902:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   17904:	f7eb f914 	bl	2b30 <xIsExecutableEventArrive>
   17908:	4603      	mov	r3, r0
   1790a:	2b00      	cmp	r3, #0
   1790c:	d00a      	beq.n	17924 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   1790e:	f241 3354 	movw	r3, #4948	; 0x1354
   17912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17916:	681b      	ldr	r3, [r3, #0]
   17918:	4618      	mov	r0, r3
   1791a:	2100      	movs	r1, #0
   1791c:	2200      	movs	r2, #0
   1791e:	2300      	movs	r3, #0
   17920:	f7ec fd92 	bl	4448 <xQueueGenericSend>
}
   17924:	bd80      	pop	{r7, pc}
   17926:	bf00      	nop

00017928 <__aeabi_drsub>:
   17928:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1792c:	e002      	b.n	17934 <__adddf3>
   1792e:	bf00      	nop

00017930 <__aeabi_dsub>:
   17930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017934 <__adddf3>:
   17934:	b530      	push	{r4, r5, lr}
   17936:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1793a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1793e:	ea94 0f05 	teq	r4, r5
   17942:	bf08      	it	eq
   17944:	ea90 0f02 	teqeq	r0, r2
   17948:	bf1f      	itttt	ne
   1794a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1794e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17952:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17956:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1795a:	f000 80e2 	beq.w	17b22 <__adddf3+0x1ee>
   1795e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17962:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17966:	bfb8      	it	lt
   17968:	426d      	neglt	r5, r5
   1796a:	dd0c      	ble.n	17986 <__adddf3+0x52>
   1796c:	442c      	add	r4, r5
   1796e:	ea80 0202 	eor.w	r2, r0, r2
   17972:	ea81 0303 	eor.w	r3, r1, r3
   17976:	ea82 0000 	eor.w	r0, r2, r0
   1797a:	ea83 0101 	eor.w	r1, r3, r1
   1797e:	ea80 0202 	eor.w	r2, r0, r2
   17982:	ea81 0303 	eor.w	r3, r1, r3
   17986:	2d36      	cmp	r5, #54	; 0x36
   17988:	bf88      	it	hi
   1798a:	bd30      	pophi	{r4, r5, pc}
   1798c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17990:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17994:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17998:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1799c:	d002      	beq.n	179a4 <__adddf3+0x70>
   1799e:	4240      	negs	r0, r0
   179a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   179a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   179a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   179ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   179b0:	d002      	beq.n	179b8 <__adddf3+0x84>
   179b2:	4252      	negs	r2, r2
   179b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   179b8:	ea94 0f05 	teq	r4, r5
   179bc:	f000 80a7 	beq.w	17b0e <__adddf3+0x1da>
   179c0:	f1a4 0401 	sub.w	r4, r4, #1
   179c4:	f1d5 0e20 	rsbs	lr, r5, #32
   179c8:	db0d      	blt.n	179e6 <__adddf3+0xb2>
   179ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   179ce:	fa22 f205 	lsr.w	r2, r2, r5
   179d2:	1880      	adds	r0, r0, r2
   179d4:	f141 0100 	adc.w	r1, r1, #0
   179d8:	fa03 f20e 	lsl.w	r2, r3, lr
   179dc:	1880      	adds	r0, r0, r2
   179de:	fa43 f305 	asr.w	r3, r3, r5
   179e2:	4159      	adcs	r1, r3
   179e4:	e00e      	b.n	17a04 <__adddf3+0xd0>
   179e6:	f1a5 0520 	sub.w	r5, r5, #32
   179ea:	f10e 0e20 	add.w	lr, lr, #32
   179ee:	2a01      	cmp	r2, #1
   179f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   179f4:	bf28      	it	cs
   179f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   179fa:	fa43 f305 	asr.w	r3, r3, r5
   179fe:	18c0      	adds	r0, r0, r3
   17a00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a08:	d507      	bpl.n	17a1a <__adddf3+0xe6>
   17a0a:	f04f 0e00 	mov.w	lr, #0
   17a0e:	f1dc 0c00 	rsbs	ip, ip, #0
   17a12:	eb7e 0000 	sbcs.w	r0, lr, r0
   17a16:	eb6e 0101 	sbc.w	r1, lr, r1
   17a1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17a1e:	d31b      	bcc.n	17a58 <__adddf3+0x124>
   17a20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17a24:	d30c      	bcc.n	17a40 <__adddf3+0x10c>
   17a26:	0849      	lsrs	r1, r1, #1
   17a28:	ea5f 0030 	movs.w	r0, r0, rrx
   17a2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17a30:	f104 0401 	add.w	r4, r4, #1
   17a34:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17a38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17a3c:	f080 809a 	bcs.w	17b74 <__adddf3+0x240>
   17a40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17a44:	bf08      	it	eq
   17a46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17a4a:	f150 0000 	adcs.w	r0, r0, #0
   17a4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a52:	ea41 0105 	orr.w	r1, r1, r5
   17a56:	bd30      	pop	{r4, r5, pc}
   17a58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17a5c:	4140      	adcs	r0, r0
   17a5e:	eb41 0101 	adc.w	r1, r1, r1
   17a62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17a66:	f1a4 0401 	sub.w	r4, r4, #1
   17a6a:	d1e9      	bne.n	17a40 <__adddf3+0x10c>
   17a6c:	f091 0f00 	teq	r1, #0
   17a70:	bf04      	itt	eq
   17a72:	4601      	moveq	r1, r0
   17a74:	2000      	moveq	r0, #0
   17a76:	fab1 f381 	clz	r3, r1
   17a7a:	bf08      	it	eq
   17a7c:	3320      	addeq	r3, #32
   17a7e:	f1a3 030b 	sub.w	r3, r3, #11
   17a82:	f1b3 0220 	subs.w	r2, r3, #32
   17a86:	da0c      	bge.n	17aa2 <__adddf3+0x16e>
   17a88:	320c      	adds	r2, #12
   17a8a:	dd08      	ble.n	17a9e <__adddf3+0x16a>
   17a8c:	f102 0c14 	add.w	ip, r2, #20
   17a90:	f1c2 020c 	rsb	r2, r2, #12
   17a94:	fa01 f00c 	lsl.w	r0, r1, ip
   17a98:	fa21 f102 	lsr.w	r1, r1, r2
   17a9c:	e00c      	b.n	17ab8 <__adddf3+0x184>
   17a9e:	f102 0214 	add.w	r2, r2, #20
   17aa2:	bfd8      	it	le
   17aa4:	f1c2 0c20 	rsble	ip, r2, #32
   17aa8:	fa01 f102 	lsl.w	r1, r1, r2
   17aac:	fa20 fc0c 	lsr.w	ip, r0, ip
   17ab0:	bfdc      	itt	le
   17ab2:	ea41 010c 	orrle.w	r1, r1, ip
   17ab6:	4090      	lslle	r0, r2
   17ab8:	1ae4      	subs	r4, r4, r3
   17aba:	bfa2      	ittt	ge
   17abc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17ac0:	4329      	orrge	r1, r5
   17ac2:	bd30      	popge	{r4, r5, pc}
   17ac4:	ea6f 0404 	mvn.w	r4, r4
   17ac8:	3c1f      	subs	r4, #31
   17aca:	da1c      	bge.n	17b06 <__adddf3+0x1d2>
   17acc:	340c      	adds	r4, #12
   17ace:	dc0e      	bgt.n	17aee <__adddf3+0x1ba>
   17ad0:	f104 0414 	add.w	r4, r4, #20
   17ad4:	f1c4 0220 	rsb	r2, r4, #32
   17ad8:	fa20 f004 	lsr.w	r0, r0, r4
   17adc:	fa01 f302 	lsl.w	r3, r1, r2
   17ae0:	ea40 0003 	orr.w	r0, r0, r3
   17ae4:	fa21 f304 	lsr.w	r3, r1, r4
   17ae8:	ea45 0103 	orr.w	r1, r5, r3
   17aec:	bd30      	pop	{r4, r5, pc}
   17aee:	f1c4 040c 	rsb	r4, r4, #12
   17af2:	f1c4 0220 	rsb	r2, r4, #32
   17af6:	fa20 f002 	lsr.w	r0, r0, r2
   17afa:	fa01 f304 	lsl.w	r3, r1, r4
   17afe:	ea40 0003 	orr.w	r0, r0, r3
   17b02:	4629      	mov	r1, r5
   17b04:	bd30      	pop	{r4, r5, pc}
   17b06:	fa21 f004 	lsr.w	r0, r1, r4
   17b0a:	4629      	mov	r1, r5
   17b0c:	bd30      	pop	{r4, r5, pc}
   17b0e:	f094 0f00 	teq	r4, #0
   17b12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17b16:	bf06      	itte	eq
   17b18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17b1c:	3401      	addeq	r4, #1
   17b1e:	3d01      	subne	r5, #1
   17b20:	e74e      	b.n	179c0 <__adddf3+0x8c>
   17b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b26:	bf18      	it	ne
   17b28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17b2c:	d029      	beq.n	17b82 <__adddf3+0x24e>
   17b2e:	ea94 0f05 	teq	r4, r5
   17b32:	bf08      	it	eq
   17b34:	ea90 0f02 	teqeq	r0, r2
   17b38:	d005      	beq.n	17b46 <__adddf3+0x212>
   17b3a:	ea54 0c00 	orrs.w	ip, r4, r0
   17b3e:	bf04      	itt	eq
   17b40:	4619      	moveq	r1, r3
   17b42:	4610      	moveq	r0, r2
   17b44:	bd30      	pop	{r4, r5, pc}
   17b46:	ea91 0f03 	teq	r1, r3
   17b4a:	bf1e      	ittt	ne
   17b4c:	2100      	movne	r1, #0
   17b4e:	2000      	movne	r0, #0
   17b50:	bd30      	popne	{r4, r5, pc}
   17b52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17b56:	d105      	bne.n	17b64 <__adddf3+0x230>
   17b58:	0040      	lsls	r0, r0, #1
   17b5a:	4149      	adcs	r1, r1
   17b5c:	bf28      	it	cs
   17b5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17b62:	bd30      	pop	{r4, r5, pc}
   17b64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17b68:	bf3c      	itt	cc
   17b6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17b6e:	bd30      	popcc	{r4, r5, pc}
   17b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b7c:	f04f 0000 	mov.w	r0, #0
   17b80:	bd30      	pop	{r4, r5, pc}
   17b82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b86:	bf1a      	itte	ne
   17b88:	4619      	movne	r1, r3
   17b8a:	4610      	movne	r0, r2
   17b8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17b90:	bf1c      	itt	ne
   17b92:	460b      	movne	r3, r1
   17b94:	4602      	movne	r2, r0
   17b96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b9a:	bf06      	itte	eq
   17b9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17ba0:	ea91 0f03 	teqeq	r1, r3
   17ba4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17ba8:	bd30      	pop	{r4, r5, pc}
   17baa:	bf00      	nop

00017bac <__aeabi_ui2d>:
   17bac:	f090 0f00 	teq	r0, #0
   17bb0:	bf04      	itt	eq
   17bb2:	2100      	moveq	r1, #0
   17bb4:	4770      	bxeq	lr
   17bb6:	b530      	push	{r4, r5, lr}
   17bb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17bbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17bc0:	f04f 0500 	mov.w	r5, #0
   17bc4:	f04f 0100 	mov.w	r1, #0
   17bc8:	e750      	b.n	17a6c <__adddf3+0x138>
   17bca:	bf00      	nop

00017bcc <__aeabi_i2d>:
   17bcc:	f090 0f00 	teq	r0, #0
   17bd0:	bf04      	itt	eq
   17bd2:	2100      	moveq	r1, #0
   17bd4:	4770      	bxeq	lr
   17bd6:	b530      	push	{r4, r5, lr}
   17bd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17bdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17be0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17be4:	bf48      	it	mi
   17be6:	4240      	negmi	r0, r0
   17be8:	f04f 0100 	mov.w	r1, #0
   17bec:	e73e      	b.n	17a6c <__adddf3+0x138>
   17bee:	bf00      	nop

00017bf0 <__aeabi_f2d>:
   17bf0:	0042      	lsls	r2, r0, #1
   17bf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17bf6:	ea4f 0131 	mov.w	r1, r1, rrx
   17bfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17bfe:	bf1f      	itttt	ne
   17c00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17c04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17c08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17c0c:	4770      	bxne	lr
   17c0e:	f092 0f00 	teq	r2, #0
   17c12:	bf14      	ite	ne
   17c14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17c18:	4770      	bxeq	lr
   17c1a:	b530      	push	{r4, r5, lr}
   17c1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   17c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17c28:	e720      	b.n	17a6c <__adddf3+0x138>
   17c2a:	bf00      	nop

00017c2c <__aeabi_ul2d>:
   17c2c:	ea50 0201 	orrs.w	r2, r0, r1
   17c30:	bf08      	it	eq
   17c32:	4770      	bxeq	lr
   17c34:	b530      	push	{r4, r5, lr}
   17c36:	f04f 0500 	mov.w	r5, #0
   17c3a:	e00a      	b.n	17c52 <__aeabi_l2d+0x16>

00017c3c <__aeabi_l2d>:
   17c3c:	ea50 0201 	orrs.w	r2, r0, r1
   17c40:	bf08      	it	eq
   17c42:	4770      	bxeq	lr
   17c44:	b530      	push	{r4, r5, lr}
   17c46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17c4a:	d502      	bpl.n	17c52 <__aeabi_l2d+0x16>
   17c4c:	4240      	negs	r0, r0
   17c4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17c52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17c5e:	f43f aedc 	beq.w	17a1a <__adddf3+0xe6>
   17c62:	f04f 0203 	mov.w	r2, #3
   17c66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c6a:	bf18      	it	ne
   17c6c:	3203      	addne	r2, #3
   17c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c72:	bf18      	it	ne
   17c74:	3203      	addne	r2, #3
   17c76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17c7a:	f1c2 0320 	rsb	r3, r2, #32
   17c7e:	fa00 fc03 	lsl.w	ip, r0, r3
   17c82:	fa20 f002 	lsr.w	r0, r0, r2
   17c86:	fa01 fe03 	lsl.w	lr, r1, r3
   17c8a:	ea40 000e 	orr.w	r0, r0, lr
   17c8e:	fa21 f102 	lsr.w	r1, r1, r2
   17c92:	4414      	add	r4, r2
   17c94:	e6c1      	b.n	17a1a <__adddf3+0xe6>
   17c96:	bf00      	nop

00017c98 <__aeabi_dmul>:
   17c98:	b570      	push	{r4, r5, r6, lr}
   17c9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17ca2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17ca6:	bf1d      	ittte	ne
   17ca8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17cac:	ea94 0f0c 	teqne	r4, ip
   17cb0:	ea95 0f0c 	teqne	r5, ip
   17cb4:	f000 f8de 	bleq	17e74 <__aeabi_dmul+0x1dc>
   17cb8:	442c      	add	r4, r5
   17cba:	ea81 0603 	eor.w	r6, r1, r3
   17cbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17cc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17cc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17cca:	bf18      	it	ne
   17ccc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17cd8:	d038      	beq.n	17d4c <__aeabi_dmul+0xb4>
   17cda:	fba0 ce02 	umull	ip, lr, r0, r2
   17cde:	f04f 0500 	mov.w	r5, #0
   17ce2:	fbe1 e502 	umlal	lr, r5, r1, r2
   17ce6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17cea:	fbe0 e503 	umlal	lr, r5, r0, r3
   17cee:	f04f 0600 	mov.w	r6, #0
   17cf2:	fbe1 5603 	umlal	r5, r6, r1, r3
   17cf6:	f09c 0f00 	teq	ip, #0
   17cfa:	bf18      	it	ne
   17cfc:	f04e 0e01 	orrne.w	lr, lr, #1
   17d00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17d04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17d08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17d0c:	d204      	bcs.n	17d18 <__aeabi_dmul+0x80>
   17d0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17d12:	416d      	adcs	r5, r5
   17d14:	eb46 0606 	adc.w	r6, r6, r6
   17d18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17d1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17d20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17d24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17d28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17d2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17d30:	bf88      	it	hi
   17d32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17d36:	d81e      	bhi.n	17d76 <__aeabi_dmul+0xde>
   17d38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17d3c:	bf08      	it	eq
   17d3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17d42:	f150 0000 	adcs.w	r0, r0, #0
   17d46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d4a:	bd70      	pop	{r4, r5, r6, pc}
   17d4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17d50:	ea46 0101 	orr.w	r1, r6, r1
   17d54:	ea40 0002 	orr.w	r0, r0, r2
   17d58:	ea81 0103 	eor.w	r1, r1, r3
   17d5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17d60:	bfc2      	ittt	gt
   17d62:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d6a:	bd70      	popgt	{r4, r5, r6, pc}
   17d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d70:	f04f 0e00 	mov.w	lr, #0
   17d74:	3c01      	subs	r4, #1
   17d76:	f300 80ab 	bgt.w	17ed0 <__aeabi_dmul+0x238>
   17d7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17d7e:	bfde      	ittt	le
   17d80:	2000      	movle	r0, #0
   17d82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17d86:	bd70      	pople	{r4, r5, r6, pc}
   17d88:	f1c4 0400 	rsb	r4, r4, #0
   17d8c:	3c20      	subs	r4, #32
   17d8e:	da35      	bge.n	17dfc <__aeabi_dmul+0x164>
   17d90:	340c      	adds	r4, #12
   17d92:	dc1b      	bgt.n	17dcc <__aeabi_dmul+0x134>
   17d94:	f104 0414 	add.w	r4, r4, #20
   17d98:	f1c4 0520 	rsb	r5, r4, #32
   17d9c:	fa00 f305 	lsl.w	r3, r0, r5
   17da0:	fa20 f004 	lsr.w	r0, r0, r4
   17da4:	fa01 f205 	lsl.w	r2, r1, r5
   17da8:	ea40 0002 	orr.w	r0, r0, r2
   17dac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17db0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17db4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17db8:	fa21 f604 	lsr.w	r6, r1, r4
   17dbc:	eb42 0106 	adc.w	r1, r2, r6
   17dc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17dc4:	bf08      	it	eq
   17dc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dca:	bd70      	pop	{r4, r5, r6, pc}
   17dcc:	f1c4 040c 	rsb	r4, r4, #12
   17dd0:	f1c4 0520 	rsb	r5, r4, #32
   17dd4:	fa00 f304 	lsl.w	r3, r0, r4
   17dd8:	fa20 f005 	lsr.w	r0, r0, r5
   17ddc:	fa01 f204 	lsl.w	r2, r1, r4
   17de0:	ea40 0002 	orr.w	r0, r0, r2
   17de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17de8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17dec:	f141 0100 	adc.w	r1, r1, #0
   17df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17df4:	bf08      	it	eq
   17df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dfa:	bd70      	pop	{r4, r5, r6, pc}
   17dfc:	f1c4 0520 	rsb	r5, r4, #32
   17e00:	fa00 f205 	lsl.w	r2, r0, r5
   17e04:	ea4e 0e02 	orr.w	lr, lr, r2
   17e08:	fa20 f304 	lsr.w	r3, r0, r4
   17e0c:	fa01 f205 	lsl.w	r2, r1, r5
   17e10:	ea43 0302 	orr.w	r3, r3, r2
   17e14:	fa21 f004 	lsr.w	r0, r1, r4
   17e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e1c:	fa21 f204 	lsr.w	r2, r1, r4
   17e20:	ea20 0002 	bic.w	r0, r0, r2
   17e24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17e28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e2c:	bf08      	it	eq
   17e2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e32:	bd70      	pop	{r4, r5, r6, pc}
   17e34:	f094 0f00 	teq	r4, #0
   17e38:	d10f      	bne.n	17e5a <__aeabi_dmul+0x1c2>
   17e3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17e3e:	0040      	lsls	r0, r0, #1
   17e40:	eb41 0101 	adc.w	r1, r1, r1
   17e44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17e48:	bf08      	it	eq
   17e4a:	3c01      	subeq	r4, #1
   17e4c:	d0f7      	beq.n	17e3e <__aeabi_dmul+0x1a6>
   17e4e:	ea41 0106 	orr.w	r1, r1, r6
   17e52:	f095 0f00 	teq	r5, #0
   17e56:	bf18      	it	ne
   17e58:	4770      	bxne	lr
   17e5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17e5e:	0052      	lsls	r2, r2, #1
   17e60:	eb43 0303 	adc.w	r3, r3, r3
   17e64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17e68:	bf08      	it	eq
   17e6a:	3d01      	subeq	r5, #1
   17e6c:	d0f7      	beq.n	17e5e <__aeabi_dmul+0x1c6>
   17e6e:	ea43 0306 	orr.w	r3, r3, r6
   17e72:	4770      	bx	lr
   17e74:	ea94 0f0c 	teq	r4, ip
   17e78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e7c:	bf18      	it	ne
   17e7e:	ea95 0f0c 	teqne	r5, ip
   17e82:	d00c      	beq.n	17e9e <__aeabi_dmul+0x206>
   17e84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e88:	bf18      	it	ne
   17e8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e8e:	d1d1      	bne.n	17e34 <__aeabi_dmul+0x19c>
   17e90:	ea81 0103 	eor.w	r1, r1, r3
   17e94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e98:	f04f 0000 	mov.w	r0, #0
   17e9c:	bd70      	pop	{r4, r5, r6, pc}
   17e9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ea2:	bf06      	itte	eq
   17ea4:	4610      	moveq	r0, r2
   17ea6:	4619      	moveq	r1, r3
   17ea8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17eac:	d019      	beq.n	17ee2 <__aeabi_dmul+0x24a>
   17eae:	ea94 0f0c 	teq	r4, ip
   17eb2:	d102      	bne.n	17eba <__aeabi_dmul+0x222>
   17eb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17eb8:	d113      	bne.n	17ee2 <__aeabi_dmul+0x24a>
   17eba:	ea95 0f0c 	teq	r5, ip
   17ebe:	d105      	bne.n	17ecc <__aeabi_dmul+0x234>
   17ec0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17ec4:	bf1c      	itt	ne
   17ec6:	4610      	movne	r0, r2
   17ec8:	4619      	movne	r1, r3
   17eca:	d10a      	bne.n	17ee2 <__aeabi_dmul+0x24a>
   17ecc:	ea81 0103 	eor.w	r1, r1, r3
   17ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ed4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ed8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17edc:	f04f 0000 	mov.w	r0, #0
   17ee0:	bd70      	pop	{r4, r5, r6, pc}
   17ee2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ee6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17eea:	bd70      	pop	{r4, r5, r6, pc}

00017eec <__aeabi_ddiv>:
   17eec:	b570      	push	{r4, r5, r6, lr}
   17eee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17ef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17ef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17efa:	bf1d      	ittte	ne
   17efc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17f00:	ea94 0f0c 	teqne	r4, ip
   17f04:	ea95 0f0c 	teqne	r5, ip
   17f08:	f000 f8a7 	bleq	1805a <__aeabi_ddiv+0x16e>
   17f0c:	eba4 0405 	sub.w	r4, r4, r5
   17f10:	ea81 0e03 	eor.w	lr, r1, r3
   17f14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17f18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17f1c:	f000 8088 	beq.w	18030 <__aeabi_ddiv+0x144>
   17f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17f24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17f28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17f2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17f30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17f34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17f38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17f3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17f40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17f44:	429d      	cmp	r5, r3
   17f46:	bf08      	it	eq
   17f48:	4296      	cmpeq	r6, r2
   17f4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17f4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17f52:	d202      	bcs.n	17f5a <__aeabi_ddiv+0x6e>
   17f54:	085b      	lsrs	r3, r3, #1
   17f56:	ea4f 0232 	mov.w	r2, r2, rrx
   17f5a:	1ab6      	subs	r6, r6, r2
   17f5c:	eb65 0503 	sbc.w	r5, r5, r3
   17f60:	085b      	lsrs	r3, r3, #1
   17f62:	ea4f 0232 	mov.w	r2, r2, rrx
   17f66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17f6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17f6e:	ebb6 0e02 	subs.w	lr, r6, r2
   17f72:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f76:	bf22      	ittt	cs
   17f78:	1ab6      	subcs	r6, r6, r2
   17f7a:	4675      	movcs	r5, lr
   17f7c:	ea40 000c 	orrcs.w	r0, r0, ip
   17f80:	085b      	lsrs	r3, r3, #1
   17f82:	ea4f 0232 	mov.w	r2, r2, rrx
   17f86:	ebb6 0e02 	subs.w	lr, r6, r2
   17f8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f8e:	bf22      	ittt	cs
   17f90:	1ab6      	subcs	r6, r6, r2
   17f92:	4675      	movcs	r5, lr
   17f94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f98:	085b      	lsrs	r3, r3, #1
   17f9a:	ea4f 0232 	mov.w	r2, r2, rrx
   17f9e:	ebb6 0e02 	subs.w	lr, r6, r2
   17fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17fa6:	bf22      	ittt	cs
   17fa8:	1ab6      	subcs	r6, r6, r2
   17faa:	4675      	movcs	r5, lr
   17fac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17fb0:	085b      	lsrs	r3, r3, #1
   17fb2:	ea4f 0232 	mov.w	r2, r2, rrx
   17fb6:	ebb6 0e02 	subs.w	lr, r6, r2
   17fba:	eb75 0e03 	sbcs.w	lr, r5, r3
   17fbe:	bf22      	ittt	cs
   17fc0:	1ab6      	subcs	r6, r6, r2
   17fc2:	4675      	movcs	r5, lr
   17fc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17fc8:	ea55 0e06 	orrs.w	lr, r5, r6
   17fcc:	d018      	beq.n	18000 <__aeabi_ddiv+0x114>
   17fce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17fd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17fd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17fda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17fde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17fe2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17fe6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17fea:	d1c0      	bne.n	17f6e <__aeabi_ddiv+0x82>
   17fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ff0:	d10b      	bne.n	1800a <__aeabi_ddiv+0x11e>
   17ff2:	ea41 0100 	orr.w	r1, r1, r0
   17ff6:	f04f 0000 	mov.w	r0, #0
   17ffa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17ffe:	e7b6      	b.n	17f6e <__aeabi_ddiv+0x82>
   18000:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18004:	bf04      	itt	eq
   18006:	4301      	orreq	r1, r0
   18008:	2000      	moveq	r0, #0
   1800a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1800e:	bf88      	it	hi
   18010:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18014:	f63f aeaf 	bhi.w	17d76 <__aeabi_dmul+0xde>
   18018:	ebb5 0c03 	subs.w	ip, r5, r3
   1801c:	bf04      	itt	eq
   1801e:	ebb6 0c02 	subseq.w	ip, r6, r2
   18022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18026:	f150 0000 	adcs.w	r0, r0, #0
   1802a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1802e:	bd70      	pop	{r4, r5, r6, pc}
   18030:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18034:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18038:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1803c:	bfc2      	ittt	gt
   1803e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18046:	bd70      	popgt	{r4, r5, r6, pc}
   18048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1804c:	f04f 0e00 	mov.w	lr, #0
   18050:	3c01      	subs	r4, #1
   18052:	e690      	b.n	17d76 <__aeabi_dmul+0xde>
   18054:	ea45 0e06 	orr.w	lr, r5, r6
   18058:	e68d      	b.n	17d76 <__aeabi_dmul+0xde>
   1805a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1805e:	ea94 0f0c 	teq	r4, ip
   18062:	bf08      	it	eq
   18064:	ea95 0f0c 	teqeq	r5, ip
   18068:	f43f af3b 	beq.w	17ee2 <__aeabi_dmul+0x24a>
   1806c:	ea94 0f0c 	teq	r4, ip
   18070:	d10a      	bne.n	18088 <__aeabi_ddiv+0x19c>
   18072:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18076:	f47f af34 	bne.w	17ee2 <__aeabi_dmul+0x24a>
   1807a:	ea95 0f0c 	teq	r5, ip
   1807e:	f47f af25 	bne.w	17ecc <__aeabi_dmul+0x234>
   18082:	4610      	mov	r0, r2
   18084:	4619      	mov	r1, r3
   18086:	e72c      	b.n	17ee2 <__aeabi_dmul+0x24a>
   18088:	ea95 0f0c 	teq	r5, ip
   1808c:	d106      	bne.n	1809c <__aeabi_ddiv+0x1b0>
   1808e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18092:	f43f aefd 	beq.w	17e90 <__aeabi_dmul+0x1f8>
   18096:	4610      	mov	r0, r2
   18098:	4619      	mov	r1, r3
   1809a:	e722      	b.n	17ee2 <__aeabi_dmul+0x24a>
   1809c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   180a0:	bf18      	it	ne
   180a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   180a6:	f47f aec5 	bne.w	17e34 <__aeabi_dmul+0x19c>
   180aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   180ae:	f47f af0d 	bne.w	17ecc <__aeabi_dmul+0x234>
   180b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   180b6:	f47f aeeb 	bne.w	17e90 <__aeabi_dmul+0x1f8>
   180ba:	e712      	b.n	17ee2 <__aeabi_dmul+0x24a>

000180bc <__gedf2>:
   180bc:	f04f 3cff 	mov.w	ip, #4294967295
   180c0:	e006      	b.n	180d0 <__cmpdf2+0x4>
   180c2:	bf00      	nop

000180c4 <__ledf2>:
   180c4:	f04f 0c01 	mov.w	ip, #1
   180c8:	e002      	b.n	180d0 <__cmpdf2+0x4>
   180ca:	bf00      	nop

000180cc <__cmpdf2>:
   180cc:	f04f 0c01 	mov.w	ip, #1
   180d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   180d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180e0:	bf18      	it	ne
   180e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   180e6:	d01b      	beq.n	18120 <__cmpdf2+0x54>
   180e8:	b001      	add	sp, #4
   180ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   180ee:	bf0c      	ite	eq
   180f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   180f4:	ea91 0f03 	teqne	r1, r3
   180f8:	bf02      	ittt	eq
   180fa:	ea90 0f02 	teqeq	r0, r2
   180fe:	2000      	moveq	r0, #0
   18100:	4770      	bxeq	lr
   18102:	f110 0f00 	cmn.w	r0, #0
   18106:	ea91 0f03 	teq	r1, r3
   1810a:	bf58      	it	pl
   1810c:	4299      	cmppl	r1, r3
   1810e:	bf08      	it	eq
   18110:	4290      	cmpeq	r0, r2
   18112:	bf2c      	ite	cs
   18114:	17d8      	asrcs	r0, r3, #31
   18116:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1811a:	f040 0001 	orr.w	r0, r0, #1
   1811e:	4770      	bx	lr
   18120:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18128:	d102      	bne.n	18130 <__cmpdf2+0x64>
   1812a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1812e:	d107      	bne.n	18140 <__cmpdf2+0x74>
   18130:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18138:	d1d6      	bne.n	180e8 <__cmpdf2+0x1c>
   1813a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1813e:	d0d3      	beq.n	180e8 <__cmpdf2+0x1c>
   18140:	f85d 0b04 	ldr.w	r0, [sp], #4
   18144:	4770      	bx	lr
   18146:	bf00      	nop

00018148 <__aeabi_cdrcmple>:
   18148:	4684      	mov	ip, r0
   1814a:	4610      	mov	r0, r2
   1814c:	4662      	mov	r2, ip
   1814e:	468c      	mov	ip, r1
   18150:	4619      	mov	r1, r3
   18152:	4663      	mov	r3, ip
   18154:	e000      	b.n	18158 <__aeabi_cdcmpeq>
   18156:	bf00      	nop

00018158 <__aeabi_cdcmpeq>:
   18158:	b501      	push	{r0, lr}
   1815a:	f7ff ffb7 	bl	180cc <__cmpdf2>
   1815e:	2800      	cmp	r0, #0
   18160:	bf48      	it	mi
   18162:	f110 0f00 	cmnmi.w	r0, #0
   18166:	bd01      	pop	{r0, pc}

00018168 <__aeabi_dcmpeq>:
   18168:	f84d ed08 	str.w	lr, [sp, #-8]!
   1816c:	f7ff fff4 	bl	18158 <__aeabi_cdcmpeq>
   18170:	bf0c      	ite	eq
   18172:	2001      	moveq	r0, #1
   18174:	2000      	movne	r0, #0
   18176:	f85d fb08 	ldr.w	pc, [sp], #8
   1817a:	bf00      	nop

0001817c <__aeabi_dcmplt>:
   1817c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18180:	f7ff ffea 	bl	18158 <__aeabi_cdcmpeq>
   18184:	bf34      	ite	cc
   18186:	2001      	movcc	r0, #1
   18188:	2000      	movcs	r0, #0
   1818a:	f85d fb08 	ldr.w	pc, [sp], #8
   1818e:	bf00      	nop

00018190 <__aeabi_dcmple>:
   18190:	f84d ed08 	str.w	lr, [sp, #-8]!
   18194:	f7ff ffe0 	bl	18158 <__aeabi_cdcmpeq>
   18198:	bf94      	ite	ls
   1819a:	2001      	movls	r0, #1
   1819c:	2000      	movhi	r0, #0
   1819e:	f85d fb08 	ldr.w	pc, [sp], #8
   181a2:	bf00      	nop

000181a4 <__aeabi_dcmpge>:
   181a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   181a8:	f7ff ffce 	bl	18148 <__aeabi_cdrcmple>
   181ac:	bf94      	ite	ls
   181ae:	2001      	movls	r0, #1
   181b0:	2000      	movhi	r0, #0
   181b2:	f85d fb08 	ldr.w	pc, [sp], #8
   181b6:	bf00      	nop

000181b8 <__aeabi_dcmpgt>:
   181b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   181bc:	f7ff ffc4 	bl	18148 <__aeabi_cdrcmple>
   181c0:	bf34      	ite	cc
   181c2:	2001      	movcc	r0, #1
   181c4:	2000      	movcs	r0, #0
   181c6:	f85d fb08 	ldr.w	pc, [sp], #8
   181ca:	bf00      	nop

000181cc <__aeabi_d2iz>:
   181cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   181d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181d4:	d215      	bcs.n	18202 <__aeabi_d2iz+0x36>
   181d6:	d511      	bpl.n	181fc <__aeabi_d2iz+0x30>
   181d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   181dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181e0:	d912      	bls.n	18208 <__aeabi_d2iz+0x3c>
   181e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   181f2:	fa23 f002 	lsr.w	r0, r3, r2
   181f6:	bf18      	it	ne
   181f8:	4240      	negne	r0, r0
   181fa:	4770      	bx	lr
   181fc:	f04f 0000 	mov.w	r0, #0
   18200:	4770      	bx	lr
   18202:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18206:	d105      	bne.n	18214 <__aeabi_d2iz+0x48>
   18208:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1820c:	bf08      	it	eq
   1820e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18212:	4770      	bx	lr
   18214:	f04f 0000 	mov.w	r0, #0
   18218:	4770      	bx	lr
   1821a:	bf00      	nop

0001821c <__aeabi_d2uiz>:
   1821c:	004a      	lsls	r2, r1, #1
   1821e:	d211      	bcs.n	18244 <__aeabi_d2uiz+0x28>
   18220:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18224:	d211      	bcs.n	1824a <__aeabi_d2uiz+0x2e>
   18226:	d50d      	bpl.n	18244 <__aeabi_d2uiz+0x28>
   18228:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1822c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18230:	d40e      	bmi.n	18250 <__aeabi_d2uiz+0x34>
   18232:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1823a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1823e:	fa23 f002 	lsr.w	r0, r3, r2
   18242:	4770      	bx	lr
   18244:	f04f 0000 	mov.w	r0, #0
   18248:	4770      	bx	lr
   1824a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1824e:	d102      	bne.n	18256 <__aeabi_d2uiz+0x3a>
   18250:	f04f 30ff 	mov.w	r0, #4294967295
   18254:	4770      	bx	lr
   18256:	f04f 0000 	mov.w	r0, #0
   1825a:	4770      	bx	lr

0001825c <__aeabi_d2f>:
   1825c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18260:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18264:	bf24      	itt	cs
   18266:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1826a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1826e:	d90d      	bls.n	1828c <__aeabi_d2f+0x30>
   18270:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18274:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18278:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1827c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18280:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18284:	bf08      	it	eq
   18286:	f020 0001 	biceq.w	r0, r0, #1
   1828a:	4770      	bx	lr
   1828c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18290:	d121      	bne.n	182d6 <__aeabi_d2f+0x7a>
   18292:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18296:	bfbc      	itt	lt
   18298:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1829c:	4770      	bxlt	lr
   1829e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   182a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   182a6:	f1c2 0218 	rsb	r2, r2, #24
   182aa:	f1c2 0c20 	rsb	ip, r2, #32
   182ae:	fa10 f30c 	lsls.w	r3, r0, ip
   182b2:	fa20 f002 	lsr.w	r0, r0, r2
   182b6:	bf18      	it	ne
   182b8:	f040 0001 	orrne.w	r0, r0, #1
   182bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   182c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   182c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   182c8:	ea40 000c 	orr.w	r0, r0, ip
   182cc:	fa23 f302 	lsr.w	r3, r3, r2
   182d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   182d4:	e7cc      	b.n	18270 <__aeabi_d2f+0x14>
   182d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   182da:	d107      	bne.n	182ec <__aeabi_d2f+0x90>
   182dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   182e0:	bf1e      	ittt	ne
   182e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   182e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   182ea:	4770      	bxne	lr
   182ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   182f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182f8:	4770      	bx	lr
   182fa:	bf00      	nop

000182fc <__aeabi_frsub>:
   182fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18300:	e002      	b.n	18308 <__addsf3>
   18302:	bf00      	nop

00018304 <__aeabi_fsub>:
   18304:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018308 <__addsf3>:
   18308:	0042      	lsls	r2, r0, #1
   1830a:	bf1f      	itttt	ne
   1830c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18310:	ea92 0f03 	teqne	r2, r3
   18314:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18318:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1831c:	d06a      	beq.n	183f4 <__addsf3+0xec>
   1831e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18322:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18326:	bfc1      	itttt	gt
   18328:	18d2      	addgt	r2, r2, r3
   1832a:	4041      	eorgt	r1, r0
   1832c:	4048      	eorgt	r0, r1
   1832e:	4041      	eorgt	r1, r0
   18330:	bfb8      	it	lt
   18332:	425b      	neglt	r3, r3
   18334:	2b19      	cmp	r3, #25
   18336:	bf88      	it	hi
   18338:	4770      	bxhi	lr
   1833a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1833e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18342:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18346:	bf18      	it	ne
   18348:	4240      	negne	r0, r0
   1834a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1834e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18352:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18356:	bf18      	it	ne
   18358:	4249      	negne	r1, r1
   1835a:	ea92 0f03 	teq	r2, r3
   1835e:	d03f      	beq.n	183e0 <__addsf3+0xd8>
   18360:	f1a2 0201 	sub.w	r2, r2, #1
   18364:	fa41 fc03 	asr.w	ip, r1, r3
   18368:	eb10 000c 	adds.w	r0, r0, ip
   1836c:	f1c3 0320 	rsb	r3, r3, #32
   18370:	fa01 f103 	lsl.w	r1, r1, r3
   18374:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18378:	d502      	bpl.n	18380 <__addsf3+0x78>
   1837a:	4249      	negs	r1, r1
   1837c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18380:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18384:	d313      	bcc.n	183ae <__addsf3+0xa6>
   18386:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1838a:	d306      	bcc.n	1839a <__addsf3+0x92>
   1838c:	0840      	lsrs	r0, r0, #1
   1838e:	ea4f 0131 	mov.w	r1, r1, rrx
   18392:	f102 0201 	add.w	r2, r2, #1
   18396:	2afe      	cmp	r2, #254	; 0xfe
   18398:	d251      	bcs.n	1843e <__addsf3+0x136>
   1839a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1839e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   183a2:	bf08      	it	eq
   183a4:	f020 0001 	biceq.w	r0, r0, #1
   183a8:	ea40 0003 	orr.w	r0, r0, r3
   183ac:	4770      	bx	lr
   183ae:	0049      	lsls	r1, r1, #1
   183b0:	eb40 0000 	adc.w	r0, r0, r0
   183b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   183b8:	f1a2 0201 	sub.w	r2, r2, #1
   183bc:	d1ed      	bne.n	1839a <__addsf3+0x92>
   183be:	fab0 fc80 	clz	ip, r0
   183c2:	f1ac 0c08 	sub.w	ip, ip, #8
   183c6:	ebb2 020c 	subs.w	r2, r2, ip
   183ca:	fa00 f00c 	lsl.w	r0, r0, ip
   183ce:	bfaa      	itet	ge
   183d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   183d4:	4252      	neglt	r2, r2
   183d6:	4318      	orrge	r0, r3
   183d8:	bfbc      	itt	lt
   183da:	40d0      	lsrlt	r0, r2
   183dc:	4318      	orrlt	r0, r3
   183de:	4770      	bx	lr
   183e0:	f092 0f00 	teq	r2, #0
   183e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   183e8:	bf06      	itte	eq
   183ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   183ee:	3201      	addeq	r2, #1
   183f0:	3b01      	subne	r3, #1
   183f2:	e7b5      	b.n	18360 <__addsf3+0x58>
   183f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   183f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   183fc:	bf18      	it	ne
   183fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18402:	d021      	beq.n	18448 <__addsf3+0x140>
   18404:	ea92 0f03 	teq	r2, r3
   18408:	d004      	beq.n	18414 <__addsf3+0x10c>
   1840a:	f092 0f00 	teq	r2, #0
   1840e:	bf08      	it	eq
   18410:	4608      	moveq	r0, r1
   18412:	4770      	bx	lr
   18414:	ea90 0f01 	teq	r0, r1
   18418:	bf1c      	itt	ne
   1841a:	2000      	movne	r0, #0
   1841c:	4770      	bxne	lr
   1841e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18422:	d104      	bne.n	1842e <__addsf3+0x126>
   18424:	0040      	lsls	r0, r0, #1
   18426:	bf28      	it	cs
   18428:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1842c:	4770      	bx	lr
   1842e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18432:	bf3c      	itt	cc
   18434:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18438:	4770      	bxcc	lr
   1843a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1843e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18442:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18446:	4770      	bx	lr
   18448:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1844c:	bf16      	itet	ne
   1844e:	4608      	movne	r0, r1
   18450:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18454:	4601      	movne	r1, r0
   18456:	0242      	lsls	r2, r0, #9
   18458:	bf06      	itte	eq
   1845a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1845e:	ea90 0f01 	teqeq	r0, r1
   18462:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18466:	4770      	bx	lr

00018468 <__aeabi_ui2f>:
   18468:	f04f 0300 	mov.w	r3, #0
   1846c:	e004      	b.n	18478 <__aeabi_i2f+0x8>
   1846e:	bf00      	nop

00018470 <__aeabi_i2f>:
   18470:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18474:	bf48      	it	mi
   18476:	4240      	negmi	r0, r0
   18478:	ea5f 0c00 	movs.w	ip, r0
   1847c:	bf08      	it	eq
   1847e:	4770      	bxeq	lr
   18480:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18484:	4601      	mov	r1, r0
   18486:	f04f 0000 	mov.w	r0, #0
   1848a:	e01c      	b.n	184c6 <__aeabi_l2f+0x2a>

0001848c <__aeabi_ul2f>:
   1848c:	ea50 0201 	orrs.w	r2, r0, r1
   18490:	bf08      	it	eq
   18492:	4770      	bxeq	lr
   18494:	f04f 0300 	mov.w	r3, #0
   18498:	e00a      	b.n	184b0 <__aeabi_l2f+0x14>
   1849a:	bf00      	nop

0001849c <__aeabi_l2f>:
   1849c:	ea50 0201 	orrs.w	r2, r0, r1
   184a0:	bf08      	it	eq
   184a2:	4770      	bxeq	lr
   184a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   184a8:	d502      	bpl.n	184b0 <__aeabi_l2f+0x14>
   184aa:	4240      	negs	r0, r0
   184ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   184b0:	ea5f 0c01 	movs.w	ip, r1
   184b4:	bf02      	ittt	eq
   184b6:	4684      	moveq	ip, r0
   184b8:	4601      	moveq	r1, r0
   184ba:	2000      	moveq	r0, #0
   184bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   184c0:	bf08      	it	eq
   184c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   184c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   184ca:	fabc f28c 	clz	r2, ip
   184ce:	3a08      	subs	r2, #8
   184d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   184d4:	db10      	blt.n	184f8 <__aeabi_l2f+0x5c>
   184d6:	fa01 fc02 	lsl.w	ip, r1, r2
   184da:	4463      	add	r3, ip
   184dc:	fa00 fc02 	lsl.w	ip, r0, r2
   184e0:	f1c2 0220 	rsb	r2, r2, #32
   184e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   184e8:	fa20 f202 	lsr.w	r2, r0, r2
   184ec:	eb43 0002 	adc.w	r0, r3, r2
   184f0:	bf08      	it	eq
   184f2:	f020 0001 	biceq.w	r0, r0, #1
   184f6:	4770      	bx	lr
   184f8:	f102 0220 	add.w	r2, r2, #32
   184fc:	fa01 fc02 	lsl.w	ip, r1, r2
   18500:	f1c2 0220 	rsb	r2, r2, #32
   18504:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18508:	fa21 f202 	lsr.w	r2, r1, r2
   1850c:	eb43 0002 	adc.w	r0, r3, r2
   18510:	bf08      	it	eq
   18512:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18516:	4770      	bx	lr

00018518 <__aeabi_fmul>:
   18518:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1851c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18520:	bf1e      	ittt	ne
   18522:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18526:	ea92 0f0c 	teqne	r2, ip
   1852a:	ea93 0f0c 	teqne	r3, ip
   1852e:	d06f      	beq.n	18610 <__aeabi_fmul+0xf8>
   18530:	441a      	add	r2, r3
   18532:	ea80 0c01 	eor.w	ip, r0, r1
   18536:	0240      	lsls	r0, r0, #9
   18538:	bf18      	it	ne
   1853a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1853e:	d01e      	beq.n	1857e <__aeabi_fmul+0x66>
   18540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18544:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18548:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1854c:	fba0 3101 	umull	r3, r1, r0, r1
   18550:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18554:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18558:	bf3e      	ittt	cc
   1855a:	0049      	lslcc	r1, r1, #1
   1855c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18560:	005b      	lslcc	r3, r3, #1
   18562:	ea40 0001 	orr.w	r0, r0, r1
   18566:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1856a:	2afd      	cmp	r2, #253	; 0xfd
   1856c:	d81d      	bhi.n	185aa <__aeabi_fmul+0x92>
   1856e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18572:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18576:	bf08      	it	eq
   18578:	f020 0001 	biceq.w	r0, r0, #1
   1857c:	4770      	bx	lr
   1857e:	f090 0f00 	teq	r0, #0
   18582:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18586:	bf08      	it	eq
   18588:	0249      	lsleq	r1, r1, #9
   1858a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1858e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18592:	3a7f      	subs	r2, #127	; 0x7f
   18594:	bfc2      	ittt	gt
   18596:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1859a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1859e:	4770      	bxgt	lr
   185a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   185a4:	f04f 0300 	mov.w	r3, #0
   185a8:	3a01      	subs	r2, #1
   185aa:	dc5d      	bgt.n	18668 <__aeabi_fmul+0x150>
   185ac:	f112 0f19 	cmn.w	r2, #25
   185b0:	bfdc      	itt	le
   185b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   185b6:	4770      	bxle	lr
   185b8:	f1c2 0200 	rsb	r2, r2, #0
   185bc:	0041      	lsls	r1, r0, #1
   185be:	fa21 f102 	lsr.w	r1, r1, r2
   185c2:	f1c2 0220 	rsb	r2, r2, #32
   185c6:	fa00 fc02 	lsl.w	ip, r0, r2
   185ca:	ea5f 0031 	movs.w	r0, r1, rrx
   185ce:	f140 0000 	adc.w	r0, r0, #0
   185d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   185d6:	bf08      	it	eq
   185d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   185dc:	4770      	bx	lr
   185de:	f092 0f00 	teq	r2, #0
   185e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   185e6:	bf02      	ittt	eq
   185e8:	0040      	lsleq	r0, r0, #1
   185ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   185ee:	3a01      	subeq	r2, #1
   185f0:	d0f9      	beq.n	185e6 <__aeabi_fmul+0xce>
   185f2:	ea40 000c 	orr.w	r0, r0, ip
   185f6:	f093 0f00 	teq	r3, #0
   185fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   185fe:	bf02      	ittt	eq
   18600:	0049      	lsleq	r1, r1, #1
   18602:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18606:	3b01      	subeq	r3, #1
   18608:	d0f9      	beq.n	185fe <__aeabi_fmul+0xe6>
   1860a:	ea41 010c 	orr.w	r1, r1, ip
   1860e:	e78f      	b.n	18530 <__aeabi_fmul+0x18>
   18610:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18614:	ea92 0f0c 	teq	r2, ip
   18618:	bf18      	it	ne
   1861a:	ea93 0f0c 	teqne	r3, ip
   1861e:	d00a      	beq.n	18636 <__aeabi_fmul+0x11e>
   18620:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18624:	bf18      	it	ne
   18626:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1862a:	d1d8      	bne.n	185de <__aeabi_fmul+0xc6>
   1862c:	ea80 0001 	eor.w	r0, r0, r1
   18630:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18634:	4770      	bx	lr
   18636:	f090 0f00 	teq	r0, #0
   1863a:	bf17      	itett	ne
   1863c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18640:	4608      	moveq	r0, r1
   18642:	f091 0f00 	teqne	r1, #0
   18646:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1864a:	d014      	beq.n	18676 <__aeabi_fmul+0x15e>
   1864c:	ea92 0f0c 	teq	r2, ip
   18650:	d101      	bne.n	18656 <__aeabi_fmul+0x13e>
   18652:	0242      	lsls	r2, r0, #9
   18654:	d10f      	bne.n	18676 <__aeabi_fmul+0x15e>
   18656:	ea93 0f0c 	teq	r3, ip
   1865a:	d103      	bne.n	18664 <__aeabi_fmul+0x14c>
   1865c:	024b      	lsls	r3, r1, #9
   1865e:	bf18      	it	ne
   18660:	4608      	movne	r0, r1
   18662:	d108      	bne.n	18676 <__aeabi_fmul+0x15e>
   18664:	ea80 0001 	eor.w	r0, r0, r1
   18668:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1866c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18674:	4770      	bx	lr
   18676:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1867a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1867e:	4770      	bx	lr

00018680 <__aeabi_fdiv>:
   18680:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18684:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18688:	bf1e      	ittt	ne
   1868a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1868e:	ea92 0f0c 	teqne	r2, ip
   18692:	ea93 0f0c 	teqne	r3, ip
   18696:	d069      	beq.n	1876c <__aeabi_fdiv+0xec>
   18698:	eba2 0203 	sub.w	r2, r2, r3
   1869c:	ea80 0c01 	eor.w	ip, r0, r1
   186a0:	0249      	lsls	r1, r1, #9
   186a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   186a6:	d037      	beq.n	18718 <__aeabi_fdiv+0x98>
   186a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   186ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   186b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   186b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   186b8:	428b      	cmp	r3, r1
   186ba:	bf38      	it	cc
   186bc:	005b      	lslcc	r3, r3, #1
   186be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   186c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   186c6:	428b      	cmp	r3, r1
   186c8:	bf24      	itt	cs
   186ca:	1a5b      	subcs	r3, r3, r1
   186cc:	ea40 000c 	orrcs.w	r0, r0, ip
   186d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   186d4:	bf24      	itt	cs
   186d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   186da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   186de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   186e2:	bf24      	itt	cs
   186e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   186e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   186ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   186f0:	bf24      	itt	cs
   186f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   186f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   186fa:	011b      	lsls	r3, r3, #4
   186fc:	bf18      	it	ne
   186fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18702:	d1e0      	bne.n	186c6 <__aeabi_fdiv+0x46>
   18704:	2afd      	cmp	r2, #253	; 0xfd
   18706:	f63f af50 	bhi.w	185aa <__aeabi_fmul+0x92>
   1870a:	428b      	cmp	r3, r1
   1870c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18710:	bf08      	it	eq
   18712:	f020 0001 	biceq.w	r0, r0, #1
   18716:	4770      	bx	lr
   18718:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1871c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18720:	327f      	adds	r2, #127	; 0x7f
   18722:	bfc2      	ittt	gt
   18724:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18728:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1872c:	4770      	bxgt	lr
   1872e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18732:	f04f 0300 	mov.w	r3, #0
   18736:	3a01      	subs	r2, #1
   18738:	e737      	b.n	185aa <__aeabi_fmul+0x92>
   1873a:	f092 0f00 	teq	r2, #0
   1873e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18742:	bf02      	ittt	eq
   18744:	0040      	lsleq	r0, r0, #1
   18746:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1874a:	3a01      	subeq	r2, #1
   1874c:	d0f9      	beq.n	18742 <__aeabi_fdiv+0xc2>
   1874e:	ea40 000c 	orr.w	r0, r0, ip
   18752:	f093 0f00 	teq	r3, #0
   18756:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1875a:	bf02      	ittt	eq
   1875c:	0049      	lsleq	r1, r1, #1
   1875e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18762:	3b01      	subeq	r3, #1
   18764:	d0f9      	beq.n	1875a <__aeabi_fdiv+0xda>
   18766:	ea41 010c 	orr.w	r1, r1, ip
   1876a:	e795      	b.n	18698 <__aeabi_fdiv+0x18>
   1876c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18770:	ea92 0f0c 	teq	r2, ip
   18774:	d108      	bne.n	18788 <__aeabi_fdiv+0x108>
   18776:	0242      	lsls	r2, r0, #9
   18778:	f47f af7d 	bne.w	18676 <__aeabi_fmul+0x15e>
   1877c:	ea93 0f0c 	teq	r3, ip
   18780:	f47f af70 	bne.w	18664 <__aeabi_fmul+0x14c>
   18784:	4608      	mov	r0, r1
   18786:	e776      	b.n	18676 <__aeabi_fmul+0x15e>
   18788:	ea93 0f0c 	teq	r3, ip
   1878c:	d104      	bne.n	18798 <__aeabi_fdiv+0x118>
   1878e:	024b      	lsls	r3, r1, #9
   18790:	f43f af4c 	beq.w	1862c <__aeabi_fmul+0x114>
   18794:	4608      	mov	r0, r1
   18796:	e76e      	b.n	18676 <__aeabi_fmul+0x15e>
   18798:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1879c:	bf18      	it	ne
   1879e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   187a2:	d1ca      	bne.n	1873a <__aeabi_fdiv+0xba>
   187a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   187a8:	f47f af5c 	bne.w	18664 <__aeabi_fmul+0x14c>
   187ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   187b0:	f47f af3c 	bne.w	1862c <__aeabi_fmul+0x114>
   187b4:	e75f      	b.n	18676 <__aeabi_fmul+0x15e>
   187b6:	bf00      	nop

000187b8 <__gesf2>:
   187b8:	f04f 3cff 	mov.w	ip, #4294967295
   187bc:	e006      	b.n	187cc <__cmpsf2+0x4>
   187be:	bf00      	nop

000187c0 <__lesf2>:
   187c0:	f04f 0c01 	mov.w	ip, #1
   187c4:	e002      	b.n	187cc <__cmpsf2+0x4>
   187c6:	bf00      	nop

000187c8 <__cmpsf2>:
   187c8:	f04f 0c01 	mov.w	ip, #1
   187cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   187d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   187d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   187d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   187dc:	bf18      	it	ne
   187de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   187e2:	d011      	beq.n	18808 <__cmpsf2+0x40>
   187e4:	b001      	add	sp, #4
   187e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   187ea:	bf18      	it	ne
   187ec:	ea90 0f01 	teqne	r0, r1
   187f0:	bf58      	it	pl
   187f2:	ebb2 0003 	subspl.w	r0, r2, r3
   187f6:	bf88      	it	hi
   187f8:	17c8      	asrhi	r0, r1, #31
   187fa:	bf38      	it	cc
   187fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18800:	bf18      	it	ne
   18802:	f040 0001 	orrne.w	r0, r0, #1
   18806:	4770      	bx	lr
   18808:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1880c:	d102      	bne.n	18814 <__cmpsf2+0x4c>
   1880e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18812:	d105      	bne.n	18820 <__cmpsf2+0x58>
   18814:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18818:	d1e4      	bne.n	187e4 <__cmpsf2+0x1c>
   1881a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1881e:	d0e1      	beq.n	187e4 <__cmpsf2+0x1c>
   18820:	f85d 0b04 	ldr.w	r0, [sp], #4
   18824:	4770      	bx	lr
   18826:	bf00      	nop

00018828 <__aeabi_cfrcmple>:
   18828:	4684      	mov	ip, r0
   1882a:	4608      	mov	r0, r1
   1882c:	4661      	mov	r1, ip
   1882e:	e7ff      	b.n	18830 <__aeabi_cfcmpeq>

00018830 <__aeabi_cfcmpeq>:
   18830:	b50f      	push	{r0, r1, r2, r3, lr}
   18832:	f7ff ffc9 	bl	187c8 <__cmpsf2>
   18836:	2800      	cmp	r0, #0
   18838:	bf48      	it	mi
   1883a:	f110 0f00 	cmnmi.w	r0, #0
   1883e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018840 <__aeabi_fcmpeq>:
   18840:	f84d ed08 	str.w	lr, [sp, #-8]!
   18844:	f7ff fff4 	bl	18830 <__aeabi_cfcmpeq>
   18848:	bf0c      	ite	eq
   1884a:	2001      	moveq	r0, #1
   1884c:	2000      	movne	r0, #0
   1884e:	f85d fb08 	ldr.w	pc, [sp], #8
   18852:	bf00      	nop

00018854 <__aeabi_fcmplt>:
   18854:	f84d ed08 	str.w	lr, [sp, #-8]!
   18858:	f7ff ffea 	bl	18830 <__aeabi_cfcmpeq>
   1885c:	bf34      	ite	cc
   1885e:	2001      	movcc	r0, #1
   18860:	2000      	movcs	r0, #0
   18862:	f85d fb08 	ldr.w	pc, [sp], #8
   18866:	bf00      	nop

00018868 <__aeabi_fcmple>:
   18868:	f84d ed08 	str.w	lr, [sp, #-8]!
   1886c:	f7ff ffe0 	bl	18830 <__aeabi_cfcmpeq>
   18870:	bf94      	ite	ls
   18872:	2001      	movls	r0, #1
   18874:	2000      	movhi	r0, #0
   18876:	f85d fb08 	ldr.w	pc, [sp], #8
   1887a:	bf00      	nop

0001887c <__aeabi_fcmpge>:
   1887c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18880:	f7ff ffd2 	bl	18828 <__aeabi_cfrcmple>
   18884:	bf94      	ite	ls
   18886:	2001      	movls	r0, #1
   18888:	2000      	movhi	r0, #0
   1888a:	f85d fb08 	ldr.w	pc, [sp], #8
   1888e:	bf00      	nop

00018890 <__aeabi_fcmpgt>:
   18890:	f84d ed08 	str.w	lr, [sp, #-8]!
   18894:	f7ff ffc8 	bl	18828 <__aeabi_cfrcmple>
   18898:	bf34      	ite	cc
   1889a:	2001      	movcc	r0, #1
   1889c:	2000      	movcs	r0, #0
   1889e:	f85d fb08 	ldr.w	pc, [sp], #8
   188a2:	bf00      	nop

000188a4 <__aeabi_f2iz>:
   188a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   188a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   188ac:	d30f      	bcc.n	188ce <__aeabi_f2iz+0x2a>
   188ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
   188b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   188b6:	d90d      	bls.n	188d4 <__aeabi_f2iz+0x30>
   188b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   188bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   188c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   188c4:	fa23 f002 	lsr.w	r0, r3, r2
   188c8:	bf18      	it	ne
   188ca:	4240      	negne	r0, r0
   188cc:	4770      	bx	lr
   188ce:	f04f 0000 	mov.w	r0, #0
   188d2:	4770      	bx	lr
   188d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   188d8:	d101      	bne.n	188de <__aeabi_f2iz+0x3a>
   188da:	0242      	lsls	r2, r0, #9
   188dc:	d105      	bne.n	188ea <__aeabi_f2iz+0x46>
   188de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   188e2:	bf08      	it	eq
   188e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   188e8:	4770      	bx	lr
   188ea:	f04f 0000 	mov.w	r0, #0
   188ee:	4770      	bx	lr

000188f0 <memcpy>:
   188f0:	2a0f      	cmp	r2, #15
   188f2:	b4f0      	push	{r4, r5, r6, r7}
   188f4:	d945      	bls.n	18982 <memcpy+0x92>
   188f6:	ea40 0301 	orr.w	r3, r0, r1
   188fa:	079b      	lsls	r3, r3, #30
   188fc:	d145      	bne.n	1898a <memcpy+0x9a>
   188fe:	f1a2 0710 	sub.w	r7, r2, #16
   18902:	460c      	mov	r4, r1
   18904:	4603      	mov	r3, r0
   18906:	093f      	lsrs	r7, r7, #4
   18908:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1890c:	3610      	adds	r6, #16
   1890e:	6825      	ldr	r5, [r4, #0]
   18910:	3310      	adds	r3, #16
   18912:	3410      	adds	r4, #16
   18914:	f843 5c10 	str.w	r5, [r3, #-16]
   18918:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1891c:	f843 5c0c 	str.w	r5, [r3, #-12]
   18920:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18924:	f843 5c08 	str.w	r5, [r3, #-8]
   18928:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1892c:	f843 5c04 	str.w	r5, [r3, #-4]
   18930:	42b3      	cmp	r3, r6
   18932:	d1ec      	bne.n	1890e <memcpy+0x1e>
   18934:	1c7b      	adds	r3, r7, #1
   18936:	f002 0c0f 	and.w	ip, r2, #15
   1893a:	f1bc 0f03 	cmp.w	ip, #3
   1893e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18942:	4419      	add	r1, r3
   18944:	4403      	add	r3, r0
   18946:	d922      	bls.n	1898e <memcpy+0x9e>
   18948:	460e      	mov	r6, r1
   1894a:	461d      	mov	r5, r3
   1894c:	4664      	mov	r4, ip
   1894e:	f856 7b04 	ldr.w	r7, [r6], #4
   18952:	3c04      	subs	r4, #4
   18954:	2c03      	cmp	r4, #3
   18956:	f845 7b04 	str.w	r7, [r5], #4
   1895a:	d8f8      	bhi.n	1894e <memcpy+0x5e>
   1895c:	f1ac 0404 	sub.w	r4, ip, #4
   18960:	f002 0203 	and.w	r2, r2, #3
   18964:	f024 0403 	bic.w	r4, r4, #3
   18968:	3404      	adds	r4, #4
   1896a:	4423      	add	r3, r4
   1896c:	4421      	add	r1, r4
   1896e:	b132      	cbz	r2, 1897e <memcpy+0x8e>
   18970:	440a      	add	r2, r1
   18972:	f811 4b01 	ldrb.w	r4, [r1], #1
   18976:	4291      	cmp	r1, r2
   18978:	f803 4b01 	strb.w	r4, [r3], #1
   1897c:	d1f9      	bne.n	18972 <memcpy+0x82>
   1897e:	bcf0      	pop	{r4, r5, r6, r7}
   18980:	4770      	bx	lr
   18982:	4603      	mov	r3, r0
   18984:	2a00      	cmp	r2, #0
   18986:	d1f3      	bne.n	18970 <memcpy+0x80>
   18988:	e7f9      	b.n	1897e <memcpy+0x8e>
   1898a:	4603      	mov	r3, r0
   1898c:	e7f0      	b.n	18970 <memcpy+0x80>
   1898e:	4662      	mov	r2, ip
   18990:	2a00      	cmp	r2, #0
   18992:	d1ed      	bne.n	18970 <memcpy+0x80>
   18994:	e7f3      	b.n	1897e <memcpy+0x8e>
   18996:	bf00      	nop

00018998 <memset>:
   18998:	0783      	lsls	r3, r0, #30
   1899a:	b4f0      	push	{r4, r5, r6, r7}
   1899c:	d048      	beq.n	18a30 <memset+0x98>
   1899e:	1e54      	subs	r4, r2, #1
   189a0:	2a00      	cmp	r2, #0
   189a2:	d043      	beq.n	18a2c <memset+0x94>
   189a4:	b2cd      	uxtb	r5, r1
   189a6:	4603      	mov	r3, r0
   189a8:	e002      	b.n	189b0 <memset+0x18>
   189aa:	2c00      	cmp	r4, #0
   189ac:	d03e      	beq.n	18a2c <memset+0x94>
   189ae:	4614      	mov	r4, r2
   189b0:	f803 5b01 	strb.w	r5, [r3], #1
   189b4:	f013 0f03 	tst.w	r3, #3
   189b8:	f104 32ff 	add.w	r2, r4, #4294967295
   189bc:	d1f5      	bne.n	189aa <memset+0x12>
   189be:	2c03      	cmp	r4, #3
   189c0:	d92d      	bls.n	18a1e <memset+0x86>
   189c2:	b2cd      	uxtb	r5, r1
   189c4:	2c0f      	cmp	r4, #15
   189c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   189ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   189ce:	d918      	bls.n	18a02 <memset+0x6a>
   189d0:	f1a4 0710 	sub.w	r7, r4, #16
   189d4:	f103 0610 	add.w	r6, r3, #16
   189d8:	461a      	mov	r2, r3
   189da:	093f      	lsrs	r7, r7, #4
   189dc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   189e0:	6015      	str	r5, [r2, #0]
   189e2:	3210      	adds	r2, #16
   189e4:	f842 5c0c 	str.w	r5, [r2, #-12]
   189e8:	f842 5c08 	str.w	r5, [r2, #-8]
   189ec:	f842 5c04 	str.w	r5, [r2, #-4]
   189f0:	42b2      	cmp	r2, r6
   189f2:	d1f5      	bne.n	189e0 <memset+0x48>
   189f4:	f004 040f 	and.w	r4, r4, #15
   189f8:	3701      	adds	r7, #1
   189fa:	2c03      	cmp	r4, #3
   189fc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18a00:	d90d      	bls.n	18a1e <memset+0x86>
   18a02:	461e      	mov	r6, r3
   18a04:	4622      	mov	r2, r4
   18a06:	3a04      	subs	r2, #4
   18a08:	f846 5b04 	str.w	r5, [r6], #4
   18a0c:	2a03      	cmp	r2, #3
   18a0e:	d8fa      	bhi.n	18a06 <memset+0x6e>
   18a10:	1f22      	subs	r2, r4, #4
   18a12:	f004 0403 	and.w	r4, r4, #3
   18a16:	f022 0203 	bic.w	r2, r2, #3
   18a1a:	3204      	adds	r2, #4
   18a1c:	4413      	add	r3, r2
   18a1e:	b12c      	cbz	r4, 18a2c <memset+0x94>
   18a20:	b2c9      	uxtb	r1, r1
   18a22:	441c      	add	r4, r3
   18a24:	f803 1b01 	strb.w	r1, [r3], #1
   18a28:	42a3      	cmp	r3, r4
   18a2a:	d1fb      	bne.n	18a24 <memset+0x8c>
   18a2c:	bcf0      	pop	{r4, r5, r6, r7}
   18a2e:	4770      	bx	lr
   18a30:	4614      	mov	r4, r2
   18a32:	4603      	mov	r3, r0
   18a34:	e7c3      	b.n	189be <memset+0x26>
   18a36:	bf00      	nop

00018a38 <strncpy>:
   18a38:	ea40 0301 	orr.w	r3, r0, r1
   18a3c:	079b      	lsls	r3, r3, #30
   18a3e:	b470      	push	{r4, r5, r6}
   18a40:	d12b      	bne.n	18a9a <strncpy+0x62>
   18a42:	2a03      	cmp	r2, #3
   18a44:	bf84      	itt	hi
   18a46:	460b      	movhi	r3, r1
   18a48:	4605      	movhi	r5, r0
   18a4a:	d926      	bls.n	18a9a <strncpy+0x62>
   18a4c:	4619      	mov	r1, r3
   18a4e:	f853 4b04 	ldr.w	r4, [r3], #4
   18a52:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18a56:	ea26 0604 	bic.w	r6, r6, r4
   18a5a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18a5e:	d105      	bne.n	18a6c <strncpy+0x34>
   18a60:	3a04      	subs	r2, #4
   18a62:	f845 4b04 	str.w	r4, [r5], #4
   18a66:	2a03      	cmp	r2, #3
   18a68:	4619      	mov	r1, r3
   18a6a:	d8ef      	bhi.n	18a4c <strncpy+0x14>
   18a6c:	b19a      	cbz	r2, 18a96 <strncpy+0x5e>
   18a6e:	780c      	ldrb	r4, [r1, #0]
   18a70:	3a01      	subs	r2, #1
   18a72:	1c6b      	adds	r3, r5, #1
   18a74:	702c      	strb	r4, [r5, #0]
   18a76:	b13c      	cbz	r4, 18a88 <strncpy+0x50>
   18a78:	b16a      	cbz	r2, 18a96 <strncpy+0x5e>
   18a7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18a7e:	3a01      	subs	r2, #1
   18a80:	f803 4b01 	strb.w	r4, [r3], #1
   18a84:	2c00      	cmp	r4, #0
   18a86:	d1f7      	bne.n	18a78 <strncpy+0x40>
   18a88:	b12a      	cbz	r2, 18a96 <strncpy+0x5e>
   18a8a:	441a      	add	r2, r3
   18a8c:	2100      	movs	r1, #0
   18a8e:	f803 1b01 	strb.w	r1, [r3], #1
   18a92:	4293      	cmp	r3, r2
   18a94:	d1fb      	bne.n	18a8e <strncpy+0x56>
   18a96:	bc70      	pop	{r4, r5, r6}
   18a98:	4770      	bx	lr
   18a9a:	4605      	mov	r5, r0
   18a9c:	e7e6      	b.n	18a6c <strncpy+0x34>
   18a9e:	bf00      	nop

00018aa0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18aa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18aa2:	e003      	b.n	18aac <LoopCopyDataInit>

00018aa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18aa4:	4b0a      	ldr	r3, [pc, #40]	; (18ad0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18aa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18aa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18aaa:	3104      	adds	r1, #4

00018aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18aac:	4809      	ldr	r0, [pc, #36]	; (18ad4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18aae:	4b0a      	ldr	r3, [pc, #40]	; (18ad8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18ab0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18ab2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18ab4:	d3f6      	bcc.n	18aa4 <CopyDataInit>
	ldr	r2, =_sbss
   18ab6:	4a09      	ldr	r2, [pc, #36]	; (18adc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18ab8:	e002      	b.n	18ac0 <LoopFillZerobss>

00018aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18aba:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18abc:	f842 3b04 	str.w	r3, [r2], #4

00018ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18ac0:	4b07      	ldr	r3, [pc, #28]	; (18ae0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18ac2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18ac4:	d3f9      	bcc.n	18aba <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18ac6:	f7e7 fc39 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18aca:	f7fe fe85 	bl	177d8 <main>
	bx	lr    
   18ace:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18ad0:	00018bc4 	.word	0x00018bc4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18ad4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18ad8:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18adc:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18ae0:	2004cdd4 	.word	0x2004cdd4

00018ae4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18ae4:	e7fe      	b.n	18ae4 <ADC1_2_IRQHandler>
   18ae6:	0000      	movs	r0, r0
   18ae8:	454c4449 	.word	0x454c4449
   18aec:	00000000 	.word	0x00000000

00018af0 <ulKernelPriority>:
   18af0:	0000007f                                ....

00018af4 <heapSTRUCT_SIZE>:
   18af4:	00010010                                         ..

00018af6 <version>:
   18af6:	3d5a0001                                         ..

00018af8 <utm_east0>:
   18af8:	00093d5a                                Z=..

00018afc <utm_north0>:
   18afc:	005875e6                                .uX.

00018b00 <climb_pgain>:
   18b00:	bcf5c28f                                ....

00018b04 <climb_igain>:
   18b04:	3dcccccd                                ...=

00018b08 <level_gaz>:
   18b08:	3e9eb852                                R..>

00018b0c <nav_east0>:
   18b0c:	00093d5a                                Z=..

00018b10 <nav_north0>:
   18b10:	005875e6                                .uX.

00018b14 <nb_waypoint>:
   18b14:	00000007 33323130 37363534 42413938     ....0123456789AB
   18b24:	46454443                                CDEF

00018b28 <failsafe>:
	...
   18b3c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18b4c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18b5c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18b6c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18b7c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18b8c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18b9c:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18bac:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18bbc:	6e617672 00000074                       rvant...
