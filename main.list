
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 c1 87 01 00 05 88 01 00 05 88 01 00     .P. ............
      10:	05 88 01 00 05 88 01 00 05 88 01 00 00 00 00 00     ................
	...
      2c:	a9 5a 00 00 05 88 01 00 00 00 00 00 b5 5b 00 00     .Z...........[..
      3c:	f1 5b 00 00 05 88 01 00 05 88 01 00 05 88 01 00     .[..............
      4c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      5c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      6c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      7c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      8c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      9c:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      ac:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      bc:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      cc:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
      dc:	05 88 01 00 05 88 01 00 05 88 01 00 05 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018960 	.word	0x00018960
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2004c798 	.word	0x2004c798

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fc21 	bl	5c40 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fd62 	bl	3f14 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fd5d 	bl	3f14 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fd3d 	bl	3f2c <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fd7c 	bl	3fec <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fd26 	bl	3f7c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fd16 	bl	3f7c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fd09 	bl	3f7c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fd2a 	bl	3fec <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fd21 	bl	3fec <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fca0 	bl	3f2c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fd6f 	bl	50e8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc94 	bl	3fec <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc8b 	bl	3fec <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fc06 	bl	3f2c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fb3d 	bl	3ed4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fb31 	bl	3ed4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fb2b 	bl	3ed4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fb25 	bl	3ed4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb8f 	bl	3fec <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fb26 	bl	3f2c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b084      	sub	sp, #16
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventPool );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 fadd 	bl	3ed4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventList );
    291a:	f240 501c 	movw	r0, #1308	; 0x51c
    291e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2922:	f001 fad7 	bl	3ed4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2926:	f240 5030 	movw	r0, #1328	; 0x530
    292a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    292e:	f001 fad1 	bl	3ed4 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2932:	2300      	movs	r3, #0
    2934:	607b      	str	r3, [r7, #4]
    2936:	e00f      	b.n	2958 <prvInitialiseEventLists+0x50>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2938:	687a      	ldr	r2, [r7, #4]
    293a:	4613      	mov	r3, r2
    293c:	009b      	lsls	r3, r3, #2
    293e:	4413      	add	r3, r2
    2940:	009b      	lsls	r3, r3, #2
    2942:	f240 5244 	movw	r2, #1348	; 0x544
    2946:	f2c2 0200 	movt	r2, #8192	; 0x2000
    294a:	4413      	add	r3, r2
    294c:	4618      	mov	r0, r3
    294e:	f001 fac1 	bl	3ed4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventPool );
    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	3301      	adds	r3, #1
    2956:	607b      	str	r3, [r7, #4]
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	2b00      	cmp	r3, #0
    295c:	ddec      	ble.n	2938 <prvInitialiseEventLists+0x30>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList.
    eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    295e:	203c      	movs	r0, #60	; 0x3c
    2960:	f003 f96e 	bl	5c40 <pvPortMalloc>
    2964:	60f8      	str	r0, [r7, #12]
    if( pxEndFlagEvent != NULL )
    2966:	68fb      	ldr	r3, [r7, #12]
    2968:	2b00      	cmp	r3, #0
    296a:	d01e      	beq.n	29aa <prvInitialiseEventLists+0xa2>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    296c:	68fb      	ldr	r3, [r7, #12]
    296e:	f04f 32ff 	mov.w	r2, #4294967295
    2972:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2974:	68fb      	ldr	r3, [r7, #12]
    2976:	f04f 32ff 	mov.w	r2, #4294967295
    297a:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	f04f 32ff 	mov.w	r2, #4294967295
    2982:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2984:	68fb      	ldr	r3, [r7, #12]
    2986:	f04f 32ff 	mov.w	r2, #4294967295
    298a:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	3318      	adds	r3, #24
    2990:	68f8      	ldr	r0, [r7, #12]
    2992:	4619      	mov	r1, r3
    2994:	f000 f9b8 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	3318      	adds	r3, #24
    299c:	f240 501c 	movw	r0, #1308	; 0x51c
    29a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29a4:	4619      	mov	r1, r3
    29a6:	f001 fac1 	bl	3f2c <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList
    eveECB * pxEndFlagEvent1 = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    29aa:	203c      	movs	r0, #60	; 0x3c
    29ac:	f003 f948 	bl	5c40 <pvPortMalloc>
    29b0:	60b8      	str	r0, [r7, #8]
    if( pxEndFlagEvent1 != NULL )
    29b2:	68bb      	ldr	r3, [r7, #8]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d01e      	beq.n	29f6 <prvInitialiseEventLists+0xee>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent1->xTimeStamp.xDeadline= portMAX_DELAY;
    29b8:	68bb      	ldr	r3, [r7, #8]
    29ba:	f04f 32ff 	mov.w	r2, #4294967295
    29be:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent1->xTimeStamp.xTime = portMAX_DELAY;
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f04f 32ff 	mov.w	r2, #4294967295
    29c6:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent1->xTimeStamp.xMicroStep = portMAX_DELAY;
    29c8:	68bb      	ldr	r3, [r7, #8]
    29ca:	f04f 32ff 	mov.w	r2, #4294967295
    29ce:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent1->xTimeStamp.xLevel = portMAX_DELAY;
    29d0:	68bb      	ldr	r3, [r7, #8]
    29d2:	f04f 32ff 	mov.w	r2, #4294967295
    29d6:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent1, (xListItem *) & pxEndFlagEvent1->xEventListItem );
    29d8:	68bb      	ldr	r3, [r7, #8]
    29da:	3318      	adds	r3, #24
    29dc:	68b8      	ldr	r0, [r7, #8]
    29de:	4619      	mov	r1, r3
    29e0:	f000 f992 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent1->xEventListItem); 
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	3318      	adds	r3, #24
    29e8:	f240 5030 	movw	r0, #1328	; 0x530
    29ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29f0:	4619      	mov	r1, r3
    29f2:	f001 fa9b 	bl	3f2c <vListInsertEnd>
    }
}
    29f6:	3710      	adds	r7, #16
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    29fc:	b490      	push	{r4, r7}
    29fe:	b084      	sub	sp, #16
    2a00:	af00      	add	r7, sp, #0
    2a02:	463c      	mov	r4, r7
    2a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d201      	bcs.n	2a14 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2a10:	2301      	movs	r3, #1
    2a12:	e014      	b.n	2a3e <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	69fb      	ldr	r3, [r7, #28]
    2a18:	429a      	cmp	r2, r3
    2a1a:	d10f      	bne.n	2a3c <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	69bb      	ldr	r3, [r7, #24]
    2a20:	429a      	cmp	r2, r3
    2a22:	d201      	bcs.n	2a28 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2a24:	2301      	movs	r3, #1
    2a26:	e00a      	b.n	2a3e <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2a28:	683a      	ldr	r2, [r7, #0]
    2a2a:	69bb      	ldr	r3, [r7, #24]
    2a2c:	429a      	cmp	r2, r3
    2a2e:	d105      	bne.n	2a3c <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a30:	68fa      	ldr	r2, [r7, #12]
    2a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a34:	429a      	cmp	r2, r3
    2a36:	da01      	bge.n	2a3c <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2a38:	2301      	movs	r3, #1
    2a3a:	e000      	b.n	2a3e <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2a3c:	2300      	movs	r3, #0
}
    2a3e:	4618      	mov	r0, r3
    2a40:	3710      	adds	r7, #16
    2a42:	46bd      	mov	sp, r7
    2a44:	bc90      	pop	{r4, r7}
    2a46:	4770      	bx	lr

00002a48 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2a48:	b490      	push	{r4, r7}
    2a4a:	b084      	sub	sp, #16
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	463c      	mov	r4, r7
    2a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	69bb      	ldr	r3, [r7, #24]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d201      	bcs.n	2a60 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2a5c:	2301      	movs	r3, #1
    2a5e:	e014      	b.n	2a8a <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2a60:	683a      	ldr	r2, [r7, #0]
    2a62:	69bb      	ldr	r3, [r7, #24]
    2a64:	429a      	cmp	r2, r3
    2a66:	d10f      	bne.n	2a88 <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d201      	bcs.n	2a74 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2a70:	2301      	movs	r3, #1
    2a72:	e00a      	b.n	2a8a <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2a74:	687a      	ldr	r2, [r7, #4]
    2a76:	69fb      	ldr	r3, [r7, #28]
    2a78:	429a      	cmp	r2, r3
    2a7a:	d105      	bne.n	2a88 <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a7c:	68fa      	ldr	r2, [r7, #12]
    2a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a80:	429a      	cmp	r2, r3
    2a82:	da01      	bge.n	2a88 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2a84:	2301      	movs	r3, #1
    2a86:	e000      	b.n	2a8a <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2a88:	2300      	movs	r3, #0
}
    2a8a:	4618      	mov	r0, r3
    2a8c:	3710      	adds	r7, #16
    2a8e:	46bd      	mov	sp, r7
    2a90:	bc90      	pop	{r4, r7}
    2a92:	4770      	bx	lr

00002a94 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2a94:	b480      	push	{r7}
    2a96:	b083      	sub	sp, #12
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	681b      	ldr	r3, [r3, #0]
}
    2aa0:	4618      	mov	r0, r3
    2aa2:	370c      	adds	r7, #12
    2aa4:	46bd      	mov	sp, r7
    2aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aaa:	4770      	bx	lr

00002aac <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2aac:	b480      	push	{r7}
    2aae:	b083      	sub	sp, #12
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	685b      	ldr	r3, [r3, #4]
}
    2ab8:	4618      	mov	r0, r3
    2aba:	370c      	adds	r7, #12
    2abc:	46bd      	mov	sp, r7
    2abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac2:	4770      	bx	lr

00002ac4 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2ac4:	b490      	push	{r4, r7}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
    2acc:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2ace:	687a      	ldr	r2, [r7, #4]
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	4614      	mov	r4, r2
    2ad4:	3308      	adds	r3, #8
    2ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2adc:	6878      	ldr	r0, [r7, #4]
    2ade:	3708      	adds	r7, #8
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bc90      	pop	{r4, r7}
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop

00002ae8 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2ae8:	b490      	push	{r4, r7}
    2aea:	b082      	sub	sp, #8
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
    2af0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2af2:	687a      	ldr	r2, [r7, #4]
    2af4:	683b      	ldr	r3, [r7, #0]
    2af6:	4614      	mov	r4, r2
    2af8:	332c      	adds	r3, #44	; 0x2c
    2afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b00:	6878      	ldr	r0, [r7, #4]
    2b02:	3708      	adds	r7, #8
    2b04:	46bd      	mov	sp, r7
    2b06:	bc90      	pop	{r4, r7}
    2b08:	4770      	bx	lr
    2b0a:	bf00      	nop

00002b0c <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2b0c:	b480      	push	{r7}
    2b0e:	b085      	sub	sp, #20
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b1c:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2b1e:	68fb      	ldr	r3, [r7, #12]
    2b20:	68ba      	ldr	r2, [r7, #8]
    2b22:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2b24:	68fb      	ldr	r3, [r7, #12]
    2b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b28:	2b01      	cmp	r3, #1
    2b2a:	d103      	bne.n	2b34 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	68ba      	ldr	r2, [r7, #8]
    2b30:	60da      	str	r2, [r3, #12]
    2b32:	e003      	b.n	2b3c <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b38:	68fb      	ldr	r3, [r7, #12]
    2b3a:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2b3c:	68fb      	ldr	r3, [r7, #12]
    2b3e:	2200      	movs	r2, #0
    2b40:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2b42:	f240 5358 	movw	r3, #1368	; 0x558
    2b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	461a      	mov	r2, r3
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2b52:	f240 5358 	movw	r3, #1368	; 0x558
    2b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	1c5a      	adds	r2, r3, #1
    2b5e:	f240 5358 	movw	r3, #1368	; 0x558
    2b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b66:	601a      	str	r2, [r3, #0]
}
    2b68:	3714      	adds	r7, #20
    2b6a:	46bd      	mov	sp, r7
    2b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop

00002b74 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2b74:	b084      	sub	sp, #16
    2b76:	b490      	push	{r4, r7}
    2b78:	b082      	sub	sp, #8
    2b7a:	af00      	add	r7, sp, #0
    2b7c:	6078      	str	r0, [r7, #4]
    2b7e:	f107 0014 	add.w	r0, r7, #20
    2b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2b8c:	f107 0314 	add.w	r3, r7, #20
    2b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b96:	3708      	adds	r7, #8
    2b98:	46bd      	mov	sp, r7
    2b9a:	bc90      	pop	{r4, r7}
    2b9c:	b004      	add	sp, #16
    2b9e:	4770      	bx	lr

00002ba0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ba0:	b480      	push	{r7}
    2ba2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ba4:	f240 5344 	movw	r3, #1348	; 0x544
    2ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2bac:	4618      	mov	r0, r3
    2bae:	46bd      	mov	sp, r7
    2bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop

00002bb8 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2bb8:	b590      	push	{r4, r7, lr}
    2bba:	b091      	sub	sp, #68	; 0x44
    2bbc:	af04      	add	r7, sp, #16
    2bbe:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2bc0:	f240 531c 	movw	r3, #1308	; 0x51c
    2bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bc8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	68db      	ldr	r3, [r3, #12]
    2bce:	f107 0208 	add.w	r2, r7, #8
    2bd2:	4610      	mov	r0, r2
    2bd4:	4619      	mov	r1, r3
    2bd6:	f7ff ff75 	bl	2ac4 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2be0:	d103      	bne.n	2bea <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be4:	691b      	ldr	r3, [r3, #16]
    2be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2be8:	e021      	b.n	2c2e <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2bea:	f002 ffb1 	bl	5b50 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bf0:	3308      	adds	r3, #8
    2bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bf4:	e002      	b.n	2bfc <prvEventListGenericInsert1+0x44>
    2bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	68db      	ldr	r3, [r3, #12]
    2c02:	f107 0218 	add.w	r2, r7, #24
    2c06:	4610      	mov	r0, r2
    2c08:	4619      	mov	r1, r3
    2c0a:	f7ff ff5b 	bl	2ac4 <xEventGetxTimeStamp>
    2c0e:	466c      	mov	r4, sp
    2c10:	f107 0308 	add.w	r3, r7, #8
    2c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c1a:	f107 0318 	add.w	r3, r7, #24
    2c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c20:	f7ff feec 	bl	29fc <xCompareFunction1>
    2c24:	4603      	mov	r3, r0
    2c26:	2b00      	cmp	r3, #0
    2c28:	d1e5      	bne.n	2bf6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2c2a:	f002 ffa7 	bl	5b7c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c30:	685a      	ldr	r2, [r3, #4]
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	685b      	ldr	r3, [r3, #4]
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2c42:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c46:	687a      	ldr	r2, [r7, #4]
    2c48:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c4e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	1c5a      	adds	r2, r3, #1
    2c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c58:	601a      	str	r2, [r3, #0]
}
    2c5a:	3734      	adds	r7, #52	; 0x34
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd90      	pop	{r4, r7, pc}

00002c60 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b091      	sub	sp, #68	; 0x44
    2c64:	af04      	add	r7, sp, #16
    2c66:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2c68:	f240 5330 	movw	r3, #1328	; 0x530
    2c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c70:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	68db      	ldr	r3, [r3, #12]
    2c76:	f107 0208 	add.w	r2, r7, #8
    2c7a:	4610      	mov	r0, r2
    2c7c:	4619      	mov	r1, r3
    2c7e:	f7ff ff21 	bl	2ac4 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c82:	68fb      	ldr	r3, [r7, #12]
    2c84:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c88:	d103      	bne.n	2c92 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8c:	691b      	ldr	r3, [r3, #16]
    2c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c90:	e021      	b.n	2cd6 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c92:	f002 ff5d 	bl	5b50 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c98:	3308      	adds	r3, #8
    2c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c9c:	e002      	b.n	2ca4 <prvEventListGenericInsert2+0x44>
    2c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	68db      	ldr	r3, [r3, #12]
    2caa:	f107 0218 	add.w	r2, r7, #24
    2cae:	4610      	mov	r0, r2
    2cb0:	4619      	mov	r1, r3
    2cb2:	f7ff ff07 	bl	2ac4 <xEventGetxTimeStamp>
    2cb6:	466c      	mov	r4, sp
    2cb8:	f107 0308 	add.w	r3, r7, #8
    2cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cc2:	f107 0318 	add.w	r3, r7, #24
    2cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc8:	f7ff febe 	bl	2a48 <xCompareFunction2>
    2ccc:	4603      	mov	r3, r0
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d1e5      	bne.n	2c9e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cd2:	f002 ff53 	bl	5b7c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cd8:	685a      	ldr	r2, [r3, #4]
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	685b      	ldr	r3, [r3, #4]
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cea:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cee:	687a      	ldr	r2, [r7, #4]
    2cf0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cf6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	1c5a      	adds	r2, r3, #1
    2cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d00:	601a      	str	r2, [r3, #0]
}
    2d02:	3734      	adds	r7, #52	; 0x34
    2d04:	46bd      	mov	sp, r7
    2d06:	bd90      	pop	{r4, r7, pc}

00002d08 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2d08:	b480      	push	{r7}
    2d0a:	b083      	sub	sp, #12
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
    2d10:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2d12:	683b      	ldr	r3, [r7, #0]
    2d14:	687a      	ldr	r2, [r7, #4]
    2d16:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2d18:	370c      	adds	r7, #12
    2d1a:	46bd      	mov	sp, r7
    2d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop

00002d24 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2d24:	b084      	sub	sp, #16
    2d26:	b580      	push	{r7, lr}
    2d28:	b086      	sub	sp, #24
    2d2a:	af02      	add	r7, sp, #8
    2d2c:	6078      	str	r0, [r7, #4]
    2d2e:	f107 001c 	add.w	r0, r7, #28
    2d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2d36:	2300      	movs	r3, #0
    2d38:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d3a:	f002 ff09 	bl	5b50 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2d3e:	f240 0328 	movw	r3, #40	; 0x28
    2d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d107      	bne.n	2d5c <vEventGenericCreate+0x38>
    {
        IS_FIRST_EVENT = 0;
    2d4c:	f240 0328 	movw	r3, #40	; 0x28
    2d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d54:	2200      	movs	r2, #0
    2d56:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2d58:	f7ff fdd6 	bl	2908 <prvInitialiseEventLists>
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d5c:	f002 fd90 	bl	5880 <xTaskGetCurrentTaskHandle>
    2d60:	60b8      	str	r0, [r7, #8]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2d62:	203c      	movs	r0, #60	; 0x3c
    2d64:	f002 ff6c 	bl	5c40 <pvPortMalloc>
    2d68:	60f8      	str	r0, [r7, #12]
    if( pxNewEvent == NULL )
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d105      	bne.n	2d7c <vEventGenericCreate+0x58>
    {
        vPrintString("malloc for event stack failed\n\r");
    2d70:	f648 0008 	movw	r0, #34824	; 0x8808
    2d74:	f2c0 0001 	movt	r0, #1
    2d78:	f014 fa74 	bl	17264 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d01f      	beq.n	2dc2 <vEventGenericCreate+0x9e>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	68ba      	ldr	r2, [r7, #8]
    2d86:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	687a      	ldr	r2, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d90:	9300      	str	r3, [sp, #0]
    2d92:	f107 031c 	add.w	r3, r7, #28
    2d96:	cb0e      	ldmia	r3, {r1, r2, r3}
    2d98:	68f8      	ldr	r0, [r7, #12]
    2d9a:	f7ff feeb 	bl	2b74 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2d9e:	68f8      	ldr	r0, [r7, #12]
    2da0:	f7ff feb4 	bl	2b0c <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	3318      	adds	r3, #24
    2da8:	68f8      	ldr	r0, [r7, #12]
    2daa:	4619      	mov	r1, r3
    2dac:	f7ff ffac 	bl	2d08 <vListIntialiseEventItem>

        // insert the event into eventpool with O(1)
        vListInsertEnd(&xEventPool, (xListItem *)& pxNewEvent->xEventListItem);
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	3318      	adds	r3, #24
    2db4:	f240 5008 	movw	r0, #1288	; 0x508
    2db8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2dbc:	4619      	mov	r1, r3
    2dbe:	f001 f8b5 	bl	3f2c <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    2dc2:	f002 fedb 	bl	5b7c <vPortExitCritical>

}
    2dc6:	3710      	adds	r7, #16
    2dc8:	46bd      	mov	sp, r7
    2dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2dce:	b004      	add	sp, #16
    2dd0:	4770      	bx	lr
    2dd2:	bf00      	nop

00002dd4 <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b088      	sub	sp, #32
    2dd8:	af00      	add	r7, sp, #0
    2dda:	6078      	str	r0, [r7, #4]
    2ddc:	6039      	str	r1, [r7, #0]
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2dde:	e00b      	b.n	2df8 <xEventListGenericTransit+0x24>
    {
        temp_pxEventListItem = (xListItem *) xEventPool.xListEnd.pxNext;    
    2de0:	f240 5308 	movw	r3, #1288	; 0x508
    2de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2de8:	68db      	ldr	r3, [r3, #12]
    2dea:	61fb      	str	r3, [r7, #28]
        vListRemove(temp_pxEventListItem);
    2dec:	69f8      	ldr	r0, [r7, #28]
    2dee:	f001 f8fd 	bl	3fec <vListRemove>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    2df2:	69f8      	ldr	r0, [r7, #28]
    2df4:	f7ff fee0 	bl	2bb8 <prvEventListGenericInsert1>
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2df8:	f240 5308 	movw	r3, #1288	; 0x508
    2dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d1ec      	bne.n	2de0 <xEventListGenericTransit+0xc>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // if there is only End Flag Event in xEventList, then return NULL.
    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2e06:	f240 531c 	movw	r3, #1308	; 0x51c
    2e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e0e:	681b      	ldr	r3, [r3, #0]
    2e10:	2b01      	cmp	r3, #1
    2e12:	d108      	bne.n	2e26 <xEventListGenericTransit+0x52>
    {
        *pxEventListItem  = NULL;
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	2200      	movs	r2, #0
    2e18:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	2200      	movs	r2, #0
    2e1e:	601a      	str	r2, [r3, #0]
        return -1;
    2e20:	f04f 33ff 	mov.w	r3, #4294967295
    2e24:	e055      	b.n	2ed2 <xEventListGenericTransit+0xfe>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e26:	e020      	b.n	2e6a <xEventListGenericTransit+0x96>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2e28:	f240 531c 	movw	r3, #1308	; 0x51c
    2e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e30:	68db      	ldr	r3, [r3, #12]
    2e32:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2e34:	69fb      	ldr	r3, [r7, #28]
    2e36:	68db      	ldr	r3, [r3, #12]
    2e38:	f107 0208 	add.w	r2, r7, #8
    2e3c:	4610      	mov	r0, r2
    2e3e:	4619      	mov	r1, r3
    2e40:	f7ff fe40 	bl	2ac4 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2e44:	f002 f950 	bl	50e8 <xTaskGetTickCount>
    2e48:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2e4a:	68fa      	ldr	r2, [r7, #12]
    2e4c:	69bb      	ldr	r3, [r7, #24]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d80a      	bhi.n	2e68 <xEventListGenericTransit+0x94>
        {
            taskENTER_CRITICAL();
    2e52:	f002 fe7d 	bl	5b50 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2e56:	69f8      	ldr	r0, [r7, #28]
    2e58:	f001 f8c8 	bl	3fec <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2e5c:	69f8      	ldr	r0, [r7, #28]
    2e5e:	f7ff feff 	bl	2c60 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2e62:	f002 fe8b 	bl	5b7c <vPortExitCritical>
    2e66:	e000      	b.n	2e6a <xEventListGenericTransit+0x96>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2e68:	e006      	b.n	2e78 <xEventListGenericTransit+0xa4>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e6a:	f240 531c 	movw	r3, #1308	; 0x51c
    2e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e72:	681b      	ldr	r3, [r3, #0]
    2e74:	2b01      	cmp	r3, #1
    2e76:	d8d7      	bhi.n	2e28 <xEventListGenericTransit+0x54>
        }

    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2e78:	f240 5330 	movw	r3, #1328	; 0x530
    2e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	2b01      	cmp	r3, #1
    2e84:	d107      	bne.n	2e96 <xEventListGenericTransit+0xc2>
    {
        *pxCurrentReadyList = NULL;
    2e86:	683b      	ldr	r3, [r7, #0]
    2e88:	2200      	movs	r2, #0
    2e8a:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	2200      	movs	r2, #0
    2e90:	601a      	str	r2, [r3, #0]
        return 0;
    2e92:	2300      	movs	r3, #0
    2e94:	e01d      	b.n	2ed2 <xEventListGenericTransit+0xfe>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2e96:	f7ff fe83 	bl	2ba0 <pxGetReadyList>
    2e9a:	4602      	mov	r2, r0
    2e9c:	683b      	ldr	r3, [r7, #0]
    2e9e:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2ea0:	f240 5330 	movw	r3, #1328	; 0x530
    2ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ea8:	68da      	ldr	r2, [r3, #12]
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2eae:	f002 fe4f 	bl	5b50 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	4618      	mov	r0, r3
    2eb8:	f001 f898 	bl	3fec <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2ebc:	683b      	ldr	r3, [r7, #0]
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	4610      	mov	r0, r2
    2ec6:	4619      	mov	r1, r3
    2ec8:	f001 f830 	bl	3f2c <vListInsertEnd>
        taskEXIT_CRITICAL();
    2ecc:	f002 fe56 	bl	5b7c <vPortExitCritical>
    }

    return 1;
    2ed0:	2301      	movs	r3, #1
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	3720      	adds	r7, #32
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop

00002edc <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b088      	sub	sp, #32
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	60f8      	str	r0, [r7, #12]
    2ee4:	60b9      	str	r1, [r7, #8]
    2ee6:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	681b      	ldr	r3, [r3, #0]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d103      	bne.n	2efc <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2ef4:	68fb      	ldr	r3, [r7, #12]
    2ef6:	2200      	movs	r2, #0
    2ef8:	601a      	str	r2, [r3, #0]
        return;
    2efa:	e04d      	b.n	2f98 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2efc:	69bb      	ldr	r3, [r7, #24]
    2efe:	68db      	ldr	r3, [r3, #12]
    2f00:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2f02:	f002 fe25 	bl	5b50 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2f06:	f002 fcbb 	bl	5880 <xTaskGetCurrentTaskHandle>
    2f0a:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f0c:	e01e      	b.n	2f4c <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f0e:	69fb      	ldr	r3, [r7, #28]
    2f10:	68db      	ldr	r3, [r3, #12]
    2f12:	4618      	mov	r0, r3
    2f14:	f7ff fdbe 	bl	2a94 <xEventGetpxSource>
    2f18:	4602      	mov	r2, r0
    2f1a:	68bb      	ldr	r3, [r7, #8]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	d112      	bne.n	2f46 <vEventGenericReceive+0x6a>
    2f20:	69fb      	ldr	r3, [r7, #28]
    2f22:	68db      	ldr	r3, [r3, #12]
    2f24:	4618      	mov	r0, r3
    2f26:	f7ff fdc1 	bl	2aac <xEventGetpxDestination>
    2f2a:	4602      	mov	r2, r0
    2f2c:	697b      	ldr	r3, [r7, #20]
    2f2e:	429a      	cmp	r2, r3
    2f30:	d109      	bne.n	2f46 <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2f32:	69fb      	ldr	r3, [r7, #28]
    2f34:	68da      	ldr	r2, [r3, #12]
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2f3a:	69f8      	ldr	r0, [r7, #28]
    2f3c:	f001 f856 	bl	3fec <vListRemove>
            taskEXIT_CRITICAL();
    2f40:	f002 fe1c 	bl	5b7c <vPortExitCritical>
            return;
    2f44:	e028      	b.n	2f98 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f46:	69fb      	ldr	r3, [r7, #28]
    2f48:	685b      	ldr	r3, [r3, #4]
    2f4a:	61fb      	str	r3, [r7, #28]
    2f4c:	69bb      	ldr	r3, [r7, #24]
    2f4e:	691a      	ldr	r2, [r3, #16]
    2f50:	69fb      	ldr	r3, [r7, #28]
    2f52:	429a      	cmp	r2, r3
    2f54:	d1db      	bne.n	2f0e <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f56:	69fb      	ldr	r3, [r7, #28]
    2f58:	68db      	ldr	r3, [r3, #12]
    2f5a:	4618      	mov	r0, r3
    2f5c:	f7ff fd9a 	bl	2a94 <xEventGetpxSource>
    2f60:	4602      	mov	r2, r0
    2f62:	68bb      	ldr	r3, [r7, #8]
    2f64:	429a      	cmp	r2, r3
    2f66:	d112      	bne.n	2f8e <vEventGenericReceive+0xb2>
    2f68:	69fb      	ldr	r3, [r7, #28]
    2f6a:	68db      	ldr	r3, [r3, #12]
    2f6c:	4618      	mov	r0, r3
    2f6e:	f7ff fd9d 	bl	2aac <xEventGetpxDestination>
    2f72:	4602      	mov	r2, r0
    2f74:	697b      	ldr	r3, [r7, #20]
    2f76:	429a      	cmp	r2, r3
    2f78:	d109      	bne.n	2f8e <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2f7a:	69fb      	ldr	r3, [r7, #28]
    2f7c:	68da      	ldr	r2, [r3, #12]
    2f7e:	68fb      	ldr	r3, [r7, #12]
    2f80:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2f82:	69f8      	ldr	r0, [r7, #28]
    2f84:	f001 f832 	bl	3fec <vListRemove>
        taskEXIT_CRITICAL();
    2f88:	f002 fdf8 	bl	5b7c <vPortExitCritical>
        return;
    2f8c:	e004      	b.n	2f98 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	2200      	movs	r2, #0
    2f92:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2f94:	f002 fdf2 	bl	5b7c <vPortExitCritical>
}
    2f98:	3720      	adds	r7, #32
    2f9a:	46bd      	mov	sp, r7
    2f9c:	bd80      	pop	{r7, pc}
    2f9e:	bf00      	nop

00002fa0 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2fa8:	f002 fdd2 	bl	5b50 <vPortEnterCritical>

    vPortFree( xEvent );
    2fac:	6878      	ldr	r0, [r7, #4]
    2fae:	f002 ff0b 	bl	5dc8 <vPortFree>

    taskEXIT_CRITICAL();
    2fb2:	f002 fde3 	bl	5b7c <vPortExitCritical>
}
    2fb6:	3708      	adds	r7, #8
    2fb8:	46bd      	mov	sp, r7
    2fba:	bd80      	pop	{r7, pc}

00002fbc <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2fbc:	b580      	push	{r7, lr}
    2fbe:	b082      	sub	sp, #8
    2fc0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2fc2:	2300      	movs	r3, #0
    2fc4:	607b      	str	r3, [r7, #4]
    2fc6:	e033      	b.n	3030 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2fc8:	2001      	movs	r0, #1
    2fca:	2100      	movs	r1, #0
    2fcc:	2203      	movs	r2, #3
    2fce:	f001 f883 	bl	40d8 <xQueueGenericCreate>
    2fd2:	4601      	mov	r1, r0
    2fd4:	f640 3368 	movw	r3, #2920	; 0xb68
    2fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fdc:	687a      	ldr	r2, [r7, #4]
    2fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2fe2:	f640 3368 	movw	r3, #2920	; 0xb68
    2fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fea:	687a      	ldr	r2, [r7, #4]
    2fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d00c      	beq.n	300e <vSemaphoreInitialise+0x52>
    2ff4:	f640 3368 	movw	r3, #2920	; 0xb68
    2ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3002:	4618      	mov	r0, r3
    3004:	2100      	movs	r1, #0
    3006:	2200      	movs	r2, #0
    3008:	2300      	movs	r3, #0
    300a:	f001 f8f3 	bl	41f4 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    300e:	f640 3368 	movw	r3, #2920	; 0xb68
    3012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3016:	687a      	ldr	r2, [r7, #4]
    3018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    301c:	4618      	mov	r0, r3
    301e:	2100      	movs	r1, #0
    3020:	f04f 32ff 	mov.w	r2, #4294967295
    3024:	2300      	movs	r3, #0
    3026:	f001 f9ab 	bl	4380 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	3301      	adds	r3, #1
    302e:	607b      	str	r3, [r7, #4]
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	2b22      	cmp	r3, #34	; 0x22
    3034:	ddc8      	ble.n	2fc8 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3036:	3708      	adds	r7, #8
    3038:	46bd      	mov	sp, r7
    303a:	bd80      	pop	{r7, pc}

0000303c <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    303c:	b480      	push	{r7}
    303e:	b085      	sub	sp, #20
    3040:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3042:	2300      	movs	r3, #0
    3044:	60fb      	str	r3, [r7, #12]
    3046:	e073      	b.n	3130 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    3048:	f240 5364 	movw	r3, #1380	; 0x564
    304c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3050:	68fa      	ldr	r2, [r7, #12]
    3052:	212c      	movs	r1, #44	; 0x2c
    3054:	fb01 f202 	mul.w	r2, r1, r2
    3058:	4413      	add	r3, r2
    305a:	68fa      	ldr	r2, [r7, #12]
    305c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    305e:	f240 5364 	movw	r3, #1380	; 0x564
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	68fa      	ldr	r2, [r7, #12]
    3068:	212c      	movs	r1, #44	; 0x2c
    306a:	fb01 f202 	mul.w	r2, r1, r2
    306e:	4413      	add	r3, r2
    3070:	3304      	adds	r3, #4
    3072:	2200      	movs	r2, #0
    3074:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3076:	f240 5364 	movw	r3, #1380	; 0x564
    307a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307e:	68fa      	ldr	r2, [r7, #12]
    3080:	212c      	movs	r1, #44	; 0x2c
    3082:	fb01 f202 	mul.w	r2, r1, r2
    3086:	4413      	add	r3, r2
    3088:	3308      	adds	r3, #8
    308a:	2200      	movs	r2, #0
    308c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    308e:	f240 0394 	movw	r3, #148	; 0x94
    3092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3096:	68fa      	ldr	r2, [r7, #12]
    3098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    309c:	f240 5364 	movw	r3, #1380	; 0x564
    30a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a4:	68f9      	ldr	r1, [r7, #12]
    30a6:	202c      	movs	r0, #44	; 0x2c
    30a8:	fb00 f101 	mul.w	r1, r0, r1
    30ac:	440b      	add	r3, r1
    30ae:	331c      	adds	r3, #28
    30b0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    30b2:	f240 3354 	movw	r3, #852	; 0x354
    30b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ba:	68fa      	ldr	r2, [r7, #12]
    30bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30c0:	f240 5364 	movw	r3, #1380	; 0x564
    30c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30c8:	68f9      	ldr	r1, [r7, #12]
    30ca:	202c      	movs	r0, #44	; 0x2c
    30cc:	fb00 f101 	mul.w	r1, r0, r1
    30d0:	440b      	add	r3, r1
    30d2:	3320      	adds	r3, #32
    30d4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    30d6:	f240 1320 	movw	r3, #288	; 0x120
    30da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30de:	68fa      	ldr	r2, [r7, #12]
    30e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30e4:	f240 5364 	movw	r3, #1380	; 0x564
    30e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ec:	68f9      	ldr	r1, [r7, #12]
    30ee:	202c      	movs	r0, #44	; 0x2c
    30f0:	fb00 f101 	mul.w	r1, r0, r1
    30f4:	440b      	add	r3, r1
    30f6:	3328      	adds	r3, #40	; 0x28
    30f8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    30fa:	f240 1320 	movw	r3, #288	; 0x120
    30fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3102:	68fa      	ldr	r2, [r7, #12]
    3104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3108:	f240 032c 	movw	r3, #44	; 0x2c
    310c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3114:	f240 5364 	movw	r3, #1380	; 0x564
    3118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    311c:	68f9      	ldr	r1, [r7, #12]
    311e:	202c      	movs	r0, #44	; 0x2c
    3120:	fb00 f101 	mul.w	r1, r0, r1
    3124:	440b      	add	r3, r1
    3126:	3324      	adds	r3, #36	; 0x24
    3128:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	3301      	adds	r3, #1
    312e:	60fb      	str	r3, [r7, #12]
    3130:	68fb      	ldr	r3, [r7, #12]
    3132:	2b22      	cmp	r3, #34	; 0x22
    3134:	dd88      	ble.n	3048 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3136:	2300      	movs	r3, #0
    3138:	60fb      	str	r3, [r7, #12]
    313a:	e080      	b.n	323e <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    313c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3140:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3144:	68f9      	ldr	r1, [r7, #12]
    3146:	460b      	mov	r3, r1
    3148:	005b      	lsls	r3, r3, #1
    314a:	440b      	add	r3, r1
    314c:	009b      	lsls	r3, r3, #2
    314e:	4413      	add	r3, r2
    3150:	3304      	adds	r3, #4
    3152:	681b      	ldr	r3, [r3, #0]
    3154:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3156:	f240 12ac 	movw	r2, #428	; 0x1ac
    315a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    315e:	68f9      	ldr	r1, [r7, #12]
    3160:	460b      	mov	r3, r1
    3162:	005b      	lsls	r3, r3, #1
    3164:	440b      	add	r3, r1
    3166:	009b      	lsls	r3, r3, #2
    3168:	4413      	add	r3, r2
    316a:	3308      	adds	r3, #8
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3170:	f240 5364 	movw	r3, #1380	; 0x564
    3174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3178:	68ba      	ldr	r2, [r7, #8]
    317a:	212c      	movs	r1, #44	; 0x2c
    317c:	fb01 f202 	mul.w	r2, r1, r2
    3180:	4413      	add	r3, r2
    3182:	3308      	adds	r3, #8
    3184:	6818      	ldr	r0, [r3, #0]
    3186:	f240 5264 	movw	r2, #1380	; 0x564
    318a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    318e:	68b9      	ldr	r1, [r7, #8]
    3190:	460b      	mov	r3, r1
    3192:	009b      	lsls	r3, r3, #2
    3194:	440b      	add	r3, r1
    3196:	005b      	lsls	r3, r3, #1
    3198:	440b      	add	r3, r1
    319a:	4403      	add	r3, r0
    319c:	3304      	adds	r3, #4
    319e:	009b      	lsls	r3, r3, #2
    31a0:	4413      	add	r3, r2
    31a2:	687a      	ldr	r2, [r7, #4]
    31a4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    31a6:	f240 5364 	movw	r3, #1380	; 0x564
    31aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ae:	68ba      	ldr	r2, [r7, #8]
    31b0:	212c      	movs	r1, #44	; 0x2c
    31b2:	fb01 f202 	mul.w	r2, r1, r2
    31b6:	4413      	add	r3, r2
    31b8:	3308      	adds	r3, #8
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	1c5a      	adds	r2, r3, #1
    31be:	f240 5364 	movw	r3, #1380	; 0x564
    31c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31c6:	68b9      	ldr	r1, [r7, #8]
    31c8:	202c      	movs	r0, #44	; 0x2c
    31ca:	fb00 f101 	mul.w	r1, r0, r1
    31ce:	440b      	add	r3, r1
    31d0:	3308      	adds	r3, #8
    31d2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    31d4:	f240 5364 	movw	r3, #1380	; 0x564
    31d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31dc:	687a      	ldr	r2, [r7, #4]
    31de:	212c      	movs	r1, #44	; 0x2c
    31e0:	fb01 f202 	mul.w	r2, r1, r2
    31e4:	4413      	add	r3, r2
    31e6:	3304      	adds	r3, #4
    31e8:	6818      	ldr	r0, [r3, #0]
    31ea:	f240 5264 	movw	r2, #1380	; 0x564
    31ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31f2:	6879      	ldr	r1, [r7, #4]
    31f4:	460b      	mov	r3, r1
    31f6:	009b      	lsls	r3, r3, #2
    31f8:	440b      	add	r3, r1
    31fa:	005b      	lsls	r3, r3, #1
    31fc:	440b      	add	r3, r1
    31fe:	4403      	add	r3, r0
    3200:	3302      	adds	r3, #2
    3202:	009b      	lsls	r3, r3, #2
    3204:	4413      	add	r3, r2
    3206:	68ba      	ldr	r2, [r7, #8]
    3208:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    320a:	f240 5364 	movw	r3, #1380	; 0x564
    320e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3212:	687a      	ldr	r2, [r7, #4]
    3214:	212c      	movs	r1, #44	; 0x2c
    3216:	fb01 f202 	mul.w	r2, r1, r2
    321a:	4413      	add	r3, r2
    321c:	3304      	adds	r3, #4
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	1c5a      	adds	r2, r3, #1
    3222:	f240 5364 	movw	r3, #1380	; 0x564
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	6879      	ldr	r1, [r7, #4]
    322c:	202c      	movs	r0, #44	; 0x2c
    322e:	fb00 f101 	mul.w	r1, r0, r1
    3232:	440b      	add	r3, r1
    3234:	3304      	adds	r3, #4
    3236:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3238:	68fb      	ldr	r3, [r7, #12]
    323a:	3301      	adds	r3, #1
    323c:	60fb      	str	r3, [r7, #12]
    323e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3246:	681a      	ldr	r2, [r3, #0]
    3248:	68fb      	ldr	r3, [r7, #12]
    324a:	429a      	cmp	r2, r3
    324c:	f73f af76 	bgt.w	313c <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3250:	3714      	adds	r7, #20
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
    325a:	bf00      	nop

0000325c <vTaskDelayLET>:

void vTaskDelayLET()
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3262:	f002 fb0d 	bl	5880 <xTaskGetCurrentTaskHandle>
    3266:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3268:	68b8      	ldr	r0, [r7, #8]
    326a:	f002 fbbf 	bl	59ec <xTaskGetxStartTime>
    326e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3270:	68b8      	ldr	r0, [r7, #8]
    3272:	f002 fbc7 	bl	5a04 <xTaskGetxLet>
    3276:	4602      	mov	r2, r0
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	4413      	add	r3, r2
    327c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    327e:	f001 ff33 	bl	50e8 <xTaskGetTickCount>
    3282:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3284:	e002      	b.n	328c <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    3286:	f001 ff2f 	bl	50e8 <xTaskGetTickCount>
    328a:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    328c:	68fa      	ldr	r2, [r7, #12]
    328e:	683b      	ldr	r3, [r7, #0]
    3290:	429a      	cmp	r2, r3
    3292:	d3f8      	bcc.n	3286 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3294:	3710      	adds	r7, #16
    3296:	46bd      	mov	sp, r7
    3298:	bd80      	pop	{r7, pc}
    329a:	bf00      	nop

0000329c <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32a0:	b088      	sub	sp, #32
    32a2:	af00      	add	r7, sp, #0
    32a4:	6078      	str	r0, [r7, #4]
    32a6:	6039      	str	r1, [r7, #0]
    32a8:	4669      	mov	r1, sp
    32aa:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    32ac:	6879      	ldr	r1, [r7, #4]
    32ae:	6849      	ldr	r1, [r1, #4]
    32b0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    32b2:	69be      	ldr	r6, [r7, #24]
    32b4:	1e71      	subs	r1, r6, #1
    32b6:	6179      	str	r1, [r7, #20]
    32b8:	4631      	mov	r1, r6
    32ba:	4608      	mov	r0, r1
    32bc:	f04f 0100 	mov.w	r1, #0
    32c0:	014d      	lsls	r5, r1, #5
    32c2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    32c6:	0144      	lsls	r4, r0, #5
    32c8:	4631      	mov	r1, r6
    32ca:	4608      	mov	r0, r1
    32cc:	f04f 0100 	mov.w	r1, #0
    32d0:	014b      	lsls	r3, r1, #5
    32d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    32d6:	0142      	lsls	r2, r0, #5
    32d8:	4633      	mov	r3, r6
    32da:	009b      	lsls	r3, r3, #2
    32dc:	3303      	adds	r3, #3
    32de:	3307      	adds	r3, #7
    32e0:	08db      	lsrs	r3, r3, #3
    32e2:	00db      	lsls	r3, r3, #3
    32e4:	ebad 0d03 	sub.w	sp, sp, r3
    32e8:	466b      	mov	r3, sp
    32ea:	3303      	adds	r3, #3
    32ec:	089b      	lsrs	r3, r3, #2
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    32f8:	f640 3368 	movw	r3, #2920	; 0xb68
    32fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3300:	68fa      	ldr	r2, [r7, #12]
    3302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3306:	4618      	mov	r0, r3
    3308:	2100      	movs	r1, #0
    330a:	f04f 32ff 	mov.w	r2, #4294967295
    330e:	2300      	movs	r3, #0
    3310:	f001 f836 	bl	4380 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3314:	f001 fee8 	bl	50e8 <xTaskGetTickCount>
    3318:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    331a:	f640 33f4 	movw	r3, #3060	; 0xbf4
    331e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3322:	68fa      	ldr	r2, [r7, #12]
    3324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3328:	4618      	mov	r0, r3
    332a:	68b9      	ldr	r1, [r7, #8]
    332c:	f002 fb76 	bl	5a1c <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3330:	2300      	movs	r3, #0
    3332:	61fb      	str	r3, [r7, #28]
    3334:	e024      	b.n	3380 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3336:	687a      	ldr	r2, [r7, #4]
    3338:	69fb      	ldr	r3, [r7, #28]
    333a:	3302      	adds	r3, #2
    333c:	009b      	lsls	r3, r3, #2
    333e:	4413      	add	r3, r2
    3340:	6859      	ldr	r1, [r3, #4]
    3342:	693b      	ldr	r3, [r7, #16]
    3344:	69fa      	ldr	r2, [r7, #28]
    3346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    334a:	69fb      	ldr	r3, [r7, #28]
    334c:	009b      	lsls	r3, r3, #2
    334e:	683a      	ldr	r2, [r7, #0]
    3350:	18d1      	adds	r1, r2, r3
    3352:	693b      	ldr	r3, [r7, #16]
    3354:	69fa      	ldr	r2, [r7, #28]
    3356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    335a:	f640 33f4 	movw	r3, #3060	; 0xbf4
    335e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3366:	f240 5360 	movw	r3, #1376	; 0x560
    336a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336e:	681b      	ldr	r3, [r3, #0]
    3370:	4608      	mov	r0, r1
    3372:	4611      	mov	r1, r2
    3374:	461a      	mov	r2, r3
    3376:	f7ff fdb1 	bl	2edc <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    337a:	69fb      	ldr	r3, [r7, #28]
    337c:	3301      	adds	r3, #1
    337e:	61fb      	str	r3, [r7, #28]
    3380:	69fa      	ldr	r2, [r7, #28]
    3382:	69bb      	ldr	r3, [r7, #24]
    3384:	429a      	cmp	r2, r3
    3386:	dbd6      	blt.n	3336 <vEventReceiveAll+0x9a>
    3388:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    338a:	3720      	adds	r7, #32
    338c:	46bd      	mov	sp, r7
    338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3392:	bf00      	nop

00003394 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3394:	b580      	push	{r7, lr}
    3396:	b084      	sub	sp, #16
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	685b      	ldr	r3, [r3, #4]
    33a2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    33a4:	2300      	movs	r3, #0
    33a6:	60fb      	str	r3, [r7, #12]
    33a8:	e00a      	b.n	33c0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    33aa:	68fb      	ldr	r3, [r7, #12]
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	683a      	ldr	r2, [r7, #0]
    33b0:	4413      	add	r3, r2
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	4618      	mov	r0, r3
    33b6:	f7ff fdf3 	bl	2fa0 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    33ba:	68fb      	ldr	r3, [r7, #12]
    33bc:	3301      	adds	r3, #1
    33be:	60fb      	str	r3, [r7, #12]
    33c0:	68fa      	ldr	r2, [r7, #12]
    33c2:	68bb      	ldr	r3, [r7, #8]
    33c4:	429a      	cmp	r2, r3
    33c6:	dbf0      	blt.n	33aa <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    33c8:	3710      	adds	r7, #16
    33ca:	46bd      	mov	sp, r7
    33cc:	bd80      	pop	{r7, pc}
    33ce:	bf00      	nop

000033d0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    33d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33d4:	b08a      	sub	sp, #40	; 0x28
    33d6:	af02      	add	r7, sp, #8
    33d8:	6078      	str	r0, [r7, #4]
    33da:	6039      	str	r1, [r7, #0]
    33dc:	4669      	mov	r1, sp
    33de:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    33e0:	6879      	ldr	r1, [r7, #4]
    33e2:	6889      	ldr	r1, [r1, #8]
    33e4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    33e6:	6879      	ldr	r1, [r7, #4]
    33e8:	6809      	ldr	r1, [r1, #0]
    33ea:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    33ec:	6879      	ldr	r1, [r7, #4]
    33ee:	6a49      	ldr	r1, [r1, #36]	; 0x24
    33f0:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    33f2:	69be      	ldr	r6, [r7, #24]
    33f4:	1e71      	subs	r1, r6, #1
    33f6:	60f9      	str	r1, [r7, #12]
    33f8:	4631      	mov	r1, r6
    33fa:	4608      	mov	r0, r1
    33fc:	f04f 0100 	mov.w	r1, #0
    3400:	014d      	lsls	r5, r1, #5
    3402:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3406:	0144      	lsls	r4, r0, #5
    3408:	4631      	mov	r1, r6
    340a:	4608      	mov	r0, r1
    340c:	f04f 0100 	mov.w	r1, #0
    3410:	014b      	lsls	r3, r1, #5
    3412:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3416:	0142      	lsls	r2, r0, #5
    3418:	4633      	mov	r3, r6
    341a:	009b      	lsls	r3, r3, #2
    341c:	3303      	adds	r3, #3
    341e:	3307      	adds	r3, #7
    3420:	08db      	lsrs	r3, r3, #3
    3422:	00db      	lsls	r3, r3, #3
    3424:	ebad 0d03 	sub.w	sp, sp, r3
    3428:	ab02      	add	r3, sp, #8
    342a:	3303      	adds	r3, #3
    342c:	089b      	lsrs	r3, r3, #2
    342e:	009b      	lsls	r3, r3, #2
    3430:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3432:	2300      	movs	r3, #0
    3434:	61fb      	str	r3, [r7, #28]
    3436:	e033      	b.n	34a0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3438:	687a      	ldr	r2, [r7, #4]
    343a:	69fb      	ldr	r3, [r7, #28]
    343c:	3304      	adds	r3, #4
    343e:	009b      	lsls	r3, r3, #2
    3440:	4413      	add	r3, r2
    3442:	6859      	ldr	r1, [r3, #4]
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	69fa      	ldr	r2, [r7, #28]
    3448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    344c:	68bb      	ldr	r3, [r7, #8]
    344e:	69fa      	ldr	r2, [r7, #28]
    3450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3454:	697b      	ldr	r3, [r7, #20]
    3456:	429a      	cmp	r2, r3
    3458:	dc06      	bgt.n	3468 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    345a:	69fb      	ldr	r3, [r7, #28]
    345c:	011b      	lsls	r3, r3, #4
    345e:	683a      	ldr	r2, [r7, #0]
    3460:	4413      	add	r3, r2
    3462:	2201      	movs	r2, #1
    3464:	609a      	str	r2, [r3, #8]
    3466:	e005      	b.n	3474 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3468:	69fb      	ldr	r3, [r7, #28]
    346a:	011b      	lsls	r3, r3, #4
    346c:	683a      	ldr	r2, [r7, #0]
    346e:	4413      	add	r3, r2
    3470:	2200      	movs	r2, #0
    3472:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3474:	68bb      	ldr	r3, [r7, #8]
    3476:	69fa      	ldr	r2, [r7, #28]
    3478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    347c:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3488:	69fb      	ldr	r3, [r7, #28]
    348a:	011b      	lsls	r3, r3, #4
    348c:	683a      	ldr	r2, [r7, #0]
    348e:	4413      	add	r3, r2
    3490:	68da      	ldr	r2, [r3, #12]
    3492:	9200      	str	r2, [sp, #0]
    3494:	cb0e      	ldmia	r3, {r1, r2, r3}
    3496:	f7ff fc45 	bl	2d24 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    349a:	69fb      	ldr	r3, [r7, #28]
    349c:	3301      	adds	r3, #1
    349e:	61fb      	str	r3, [r7, #28]
    34a0:	69fa      	ldr	r2, [r7, #28]
    34a2:	69bb      	ldr	r3, [r7, #24]
    34a4:	429a      	cmp	r2, r3
    34a6:	dbc7      	blt.n	3438 <vEventCreateAll+0x68>
    34a8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    34aa:	3720      	adds	r7, #32
    34ac:	46bd      	mov	sp, r7
    34ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b2:	bf00      	nop

000034b4 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    34b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b8:	b095      	sub	sp, #84	; 0x54
    34ba:	af00      	add	r7, sp, #0
    34bc:	60f8      	str	r0, [r7, #12]
    34be:	466b      	mov	r3, sp
    34c0:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    34c2:	2301      	movs	r3, #1
    34c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    34c6:	68fb      	ldr	r3, [r7, #12]
    34c8:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    34ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34cc:	689b      	ldr	r3, [r3, #8]
    34ce:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    34d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34d8:	69db      	ldr	r3, [r3, #28]
    34da:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34e0:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    34e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34e4:	6a1b      	ldr	r3, [r3, #32]
    34e6:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    34e8:	2301      	movs	r3, #1
    34ea:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    34ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    34f0:	fb02 f303 	mul.w	r3, r2, r3
    34f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    34f6:	f640 33f4 	movw	r3, #3060	; 0xbf4
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3504:	4618      	mov	r0, r3
    3506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3508:	f002 fa96 	bl	5a38 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    350c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    350e:	1e4b      	subs	r3, r1, #1
    3510:	623b      	str	r3, [r7, #32]
    3512:	460b      	mov	r3, r1
    3514:	461a      	mov	r2, r3
    3516:	f04f 0300 	mov.w	r3, #0
    351a:	0158      	lsls	r0, r3, #5
    351c:	6078      	str	r0, [r7, #4]
    351e:	6878      	ldr	r0, [r7, #4]
    3520:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3524:	6078      	str	r0, [r7, #4]
    3526:	0150      	lsls	r0, r2, #5
    3528:	460b      	mov	r3, r1
    352a:	461a      	mov	r2, r3
    352c:	f04f 0300 	mov.w	r3, #0
    3530:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3534:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3538:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    353c:	460b      	mov	r3, r1
    353e:	009b      	lsls	r3, r3, #2
    3540:	3303      	adds	r3, #3
    3542:	3307      	adds	r3, #7
    3544:	08db      	lsrs	r3, r3, #3
    3546:	00db      	lsls	r3, r3, #3
    3548:	ebad 0d03 	sub.w	sp, sp, r3
    354c:	466b      	mov	r3, sp
    354e:	3303      	adds	r3, #3
    3550:	089b      	lsrs	r3, r3, #2
    3552:	009b      	lsls	r3, r3, #2
    3554:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3556:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3558:	1e4b      	subs	r3, r1, #1
    355a:	61bb      	str	r3, [r7, #24]
    355c:	460b      	mov	r3, r1
    355e:	461a      	mov	r2, r3
    3560:	f04f 0300 	mov.w	r3, #0
    3564:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3568:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    356c:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3570:	460b      	mov	r3, r1
    3572:	461a      	mov	r2, r3
    3574:	f04f 0300 	mov.w	r3, #0
    3578:	01dd      	lsls	r5, r3, #7
    357a:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    357e:	01d4      	lsls	r4, r2, #7
    3580:	460b      	mov	r3, r1
    3582:	011b      	lsls	r3, r3, #4
    3584:	3303      	adds	r3, #3
    3586:	3307      	adds	r3, #7
    3588:	08db      	lsrs	r3, r3, #3
    358a:	00db      	lsls	r3, r3, #3
    358c:	ebad 0d03 	sub.w	sp, sp, r3
    3590:	466b      	mov	r3, sp
    3592:	3303      	adds	r3, #3
    3594:	089b      	lsrs	r3, r3, #2
    3596:	009b      	lsls	r3, r3, #2
    3598:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    359c:	2b01      	cmp	r3, #1
    359e:	d127      	bne.n	35f0 <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    35a0:	f640 3368 	movw	r3, #2920	; 0xb68
    35a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35ae:	4618      	mov	r0, r3
    35b0:	2100      	movs	r1, #0
    35b2:	f04f 32ff 	mov.w	r2, #4294967295
    35b6:	2300      	movs	r3, #0
    35b8:	f000 fee2 	bl	4380 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35be:	f013 fe6b 	bl	17298 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    35c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35c4:	f013 fe68 	bl	17298 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    35c8:	f001 fd8e 	bl	50e8 <xTaskGetTickCount>
    35cc:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    35ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    35d0:	f013 fe62 	bl	17298 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35d4:	f640 33f4 	movw	r3, #3060	; 0xbf4
    35d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e2:	4618      	mov	r0, r3
    35e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35e6:	f002 fa19 	bl	5a1c <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    35ea:	2300      	movs	r3, #0
    35ec:	647b      	str	r3, [r7, #68]	; 0x44
    35ee:	e027      	b.n	3640 <vSensor+0x18c>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    35f0:	69fb      	ldr	r3, [r7, #28]
    35f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    35f4:	4619      	mov	r1, r3
    35f6:	f7ff fe51 	bl	329c <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35fc:	f013 fe4c 	bl	17298 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    3600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3602:	f013 fe49 	bl	17298 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    3606:	f001 fd6f 	bl	50e8 <xTaskGetTickCount>
    360a:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    360c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    360e:	f013 fe43 	bl	17298 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3612:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3620:	4618      	mov	r0, r3
    3622:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3624:	f002 f9fa 	bl	5a1c <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
    3628:	697b      	ldr	r3, [r7, #20]
    362a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    362c:	2000      	movs	r0, #0
    362e:	2100      	movs	r1, #0
    3630:	461a      	mov	r2, r3
    3632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3634:	47a0      	blx	r4
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    363a:	4619      	mov	r1, r3
    363c:	f7ff feaa 	bl	3394 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    3640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3642:	3301      	adds	r3, #1
    3644:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3648:	6aba      	ldr	r2, [r7, #40]	; 0x28
    364a:	fb02 f303 	mul.w	r3, r2, r3
    364e:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    3650:	2300      	movs	r3, #0
    3652:	64bb      	str	r3, [r7, #72]	; 0x48
    3654:	e011      	b.n	367a <vSensor+0x1c6>
        {
            xDatas[i].xNextPeriod = deadline;
    3656:	697a      	ldr	r2, [r7, #20]
    3658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365a:	011b      	lsls	r3, r3, #4
    365c:	4413      	add	r3, r2
    365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3660:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3666:	441a      	add	r2, r3
    3668:	6979      	ldr	r1, [r7, #20]
    366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    366c:	011b      	lsls	r3, r3, #4
    366e:	440b      	add	r3, r1
    3670:	3304      	adds	r3, #4
    3672:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3676:	3301      	adds	r3, #1
    3678:	64bb      	str	r3, [r7, #72]	; 0x48
    367a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    367e:	429a      	cmp	r2, r3
    3680:	dbe9      	blt.n	3656 <vSensor+0x1a2>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
            //xDatas[i].xTime = deadline -xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    3682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3684:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3686:	1ad2      	subs	r2, r2, r3
    3688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    368a:	4413      	add	r3, r2
    368c:	461a      	mov	r2, r3
    368e:	f240 535c 	movw	r3, #1372	; 0x55c
    3692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3696:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3698:	697b      	ldr	r3, [r7, #20]
    369a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    369c:	4619      	mov	r1, r3
    369e:	f7ff fe97 	bl	33d0 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    36a2:	697b      	ldr	r3, [r7, #20]
    36a4:	681a      	ldr	r2, [r3, #0]
    36a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    36a8:	429a      	cmp	r2, r3
    36aa:	d20a      	bcs.n	36c2 <vSensor+0x20e>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    36ac:	697b      	ldr	r3, [r7, #20]
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	4618      	mov	r0, r3
    36b2:	f013 fdf1 	bl	17298 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    36b6:	f648 0028 	movw	r0, #34856	; 0x8828
    36ba:	f2c0 0001 	movt	r0, #1
    36be:	f013 fdd1 	bl	17264 <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    36c2:	f001 fd11 	bl	50e8 <xTaskGetTickCount>
    36c6:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    36c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36ca:	f013 fde5 	bl	17298 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    36ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36d0:	f013 fde2 	bl	17298 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    36d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36d6:	f103 020a 	add.w	r2, r3, #10
    36da:	4613      	mov	r3, r2
    36dc:	005b      	lsls	r3, r3, #1
    36de:	4413      	add	r3, r2
    36e0:	4618      	mov	r0, r3
    36e2:	f013 fdd9 	bl	17298 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    36e6:	f001 fcff 	bl	50e8 <xTaskGetTickCount>
    36ea:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    36ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    36ee:	f244 2340 	movw	r3, #16960	; 0x4240
    36f2:	f2c0 030f 	movt	r3, #15
    36f6:	429a      	cmp	r2, r3
    36f8:	d900      	bls.n	36fc <vSensor+0x248>
        {
            break;
    36fa:	e00c      	b.n	3716 <vSensor+0x262>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36fc:	f640 3368 	movw	r3, #2920	; 0xb68
    3700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3708:	4618      	mov	r0, r3
    370a:	2100      	movs	r1, #0
    370c:	2200      	movs	r2, #0
    370e:	2300      	movs	r3, #0
    3710:	f000 fd70 	bl	41f4 <xQueueGenericSend>
    }
    3714:	e741      	b.n	359a <vSensor+0xe6>
    3716:	46b5      	mov	sp, r6
}
    3718:	3754      	adds	r7, #84	; 0x54
    371a:	46bd      	mov	sp, r7
    371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003720 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3724:	b097      	sub	sp, #92	; 0x5c
    3726:	af00      	add	r7, sp, #0
    3728:	61f8      	str	r0, [r7, #28]
    372a:	4669      	mov	r1, sp
    372c:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    372e:	69f9      	ldr	r1, [r7, #28]
    3730:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    3732:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3734:	6849      	ldr	r1, [r1, #4]
    3736:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3738:	6d39      	ldr	r1, [r7, #80]	; 0x50
    373a:	6889      	ldr	r1, [r1, #8]
    373c:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    373e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3740:	6809      	ldr	r1, [r1, #0]
    3742:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3744:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3746:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3748:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    374a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    374c:	6a09      	ldr	r1, [r1, #32]
    374e:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3750:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    3752:	1e71      	subs	r1, r6, #1
    3754:	63b9      	str	r1, [r7, #56]	; 0x38
    3756:	4631      	mov	r1, r6
    3758:	4608      	mov	r0, r1
    375a:	f04f 0100 	mov.w	r1, #0
    375e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    3762:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3766:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    376a:	4631      	mov	r1, r6
    376c:	4608      	mov	r0, r1
    376e:	f04f 0100 	mov.w	r1, #0
    3772:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3776:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    377a:	ea4f 1840 	mov.w	r8, r0, lsl #5
    377e:	4631      	mov	r1, r6
    3780:	0089      	lsls	r1, r1, #2
    3782:	3103      	adds	r1, #3
    3784:	3107      	adds	r1, #7
    3786:	08c9      	lsrs	r1, r1, #3
    3788:	00c9      	lsls	r1, r1, #3
    378a:	ebad 0d01 	sub.w	sp, sp, r1
    378e:	4669      	mov	r1, sp
    3790:	3103      	adds	r1, #3
    3792:	0889      	lsrs	r1, r1, #2
    3794:	0089      	lsls	r1, r1, #2
    3796:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3798:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    379a:	1e71      	subs	r1, r6, #1
    379c:	6339      	str	r1, [r7, #48]	; 0x30
    379e:	4631      	mov	r1, r6
    37a0:	4608      	mov	r0, r1
    37a2:	f04f 0100 	mov.w	r1, #0
    37a6:	01cd      	lsls	r5, r1, #7
    37a8:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    37ac:	01c4      	lsls	r4, r0, #7
    37ae:	4631      	mov	r1, r6
    37b0:	4608      	mov	r0, r1
    37b2:	f04f 0100 	mov.w	r1, #0
    37b6:	01cb      	lsls	r3, r1, #7
    37b8:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    37bc:	01c2      	lsls	r2, r0, #7
    37be:	4633      	mov	r3, r6
    37c0:	011b      	lsls	r3, r3, #4
    37c2:	3303      	adds	r3, #3
    37c4:	3307      	adds	r3, #7
    37c6:	08db      	lsrs	r3, r3, #3
    37c8:	00db      	lsls	r3, r3, #3
    37ca:	ebad 0d03 	sub.w	sp, sp, r3
    37ce:	466b      	mov	r3, sp
    37d0:	3303      	adds	r3, #3
    37d2:	089b      	lsrs	r3, r3, #2
    37d4:	009b      	lsls	r3, r3, #2
    37d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    37d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    37da:	69db      	ldr	r3, [r3, #28]
    37dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    37de:	f640 33f4 	movw	r3, #3060	; 0xbf4
    37e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    37e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37ec:	4618      	mov	r0, r3
    37ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    37f0:	f002 f922 	bl	5a38 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    37f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    37f8:	4619      	mov	r1, r3
    37fa:	f7ff fd4f 	bl	329c <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    37fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
    3800:	f013 fd4a 	bl	17298 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    3804:	f001 fc82 	bl	510c <xTaskGetTickCountFromISR>
    3808:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    380a:	f640 33f4 	movw	r3, #3060	; 0xbf4
    380e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3818:	4618      	mov	r0, r3
    381a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    381c:	f002 f8fe 	bl	5a1c <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3820:	2300      	movs	r3, #0
    3822:	657b      	str	r3, [r7, #84]	; 0x54
    3824:	e01e      	b.n	3864 <vServant+0x144>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    382e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3832:	0112      	lsls	r2, r2, #4
    3834:	188c      	adds	r4, r1, r2
    3836:	f107 0208 	add.w	r2, r7, #8
    383a:	4610      	mov	r0, r2
    383c:	4619      	mov	r1, r3
    383e:	f7ff f953 	bl	2ae8 <xEventGetxData>
    3842:	f107 0308 	add.w	r3, r7, #8
    3846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3850:	441a      	add	r2, r3
    3852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3856:	011b      	lsls	r3, r3, #4
    3858:	440b      	add	r3, r1
    385a:	3304      	adds	r3, #4
    385c:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3860:	3301      	adds	r3, #1
    3862:	657b      	str	r3, [r7, #84]	; 0x54
    3864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3868:	429a      	cmp	r2, r3
    386a:	dbdc      	blt.n	3826 <vServant+0x106>
            //xDatas[i].xTime = xFutureModelTime + xLet;
            //xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    386e:	681a      	ldr	r2, [r3, #0]
    3870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3872:	1ad3      	subs	r3, r2, r3
    3874:	4618      	mov	r0, r3
    3876:	f013 fd0f 	bl	17298 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    387a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    387c:	f013 fd0c 	bl	17298 <vPrintNumber>
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    3880:	2300      	movs	r3, #0
    3882:	657b      	str	r3, [r7, #84]	; 0x54
    3884:	e00a      	b.n	389c <vServant+0x17c>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
    3886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    388a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    388c:	4610      	mov	r0, r2
    388e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3890:	461a      	mov	r2, r3
    3892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3894:	47a0      	blx	r4
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
        vPrintNumber( xCurrentTime );   // start time of current servant
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    3896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3898:	3301      	adds	r3, #1
    389a:	657b      	str	r3, [r7, #84]	; 0x54
    389c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    389e:	2b63      	cmp	r3, #99	; 0x63
    38a0:	ddf1      	ble.n	3886 <vServant+0x166>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    38a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38a6:	4619      	mov	r1, r3
    38a8:	f7ff fd74 	bl	3394 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    38ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38b0:	4619      	mov	r1, r3
    38b2:	f7ff fd8d 	bl	33d0 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    38b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38b8:	681a      	ldr	r2, [r3, #0]
    38ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38bc:	429a      	cmp	r2, r3
    38be:	d20a      	bcs.n	38d6 <vServant+0x1b6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    38c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	4618      	mov	r0, r3
    38c6:	f013 fce7 	bl	17298 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    38ca:	f648 004c 	movw	r0, #34892	; 0x884c
    38ce:	f2c0 0001 	movt	r0, #1
    38d2:	f013 fcc7 	bl	17264 <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    38d6:	f7ff fcc1 	bl	325c <vTaskDelayLET>
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    38da:	f001 fc05 	bl	50e8 <xTaskGetTickCount>
    38de:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    38e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    38e2:	f013 fcd9 	bl	17298 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    38e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	4618      	mov	r0, r3
    38ec:	f013 fcd4 	bl	17298 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    38f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    38f2:	f103 020a 	add.w	r2, r3, #10
    38f6:	4613      	mov	r3, r2
    38f8:	005b      	lsls	r3, r3, #1
    38fa:	4413      	add	r3, r2
    38fc:	4618      	mov	r0, r3
    38fe:	f013 fccb 	bl	17298 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    3902:	f001 fbf1 	bl	50e8 <xTaskGetTickCount>
    3906:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    3908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    390a:	f244 2340 	movw	r3, #16960	; 0x4240
    390e:	f2c0 030f 	movt	r3, #15
    3912:	429a      	cmp	r2, r3
    3914:	d900      	bls.n	3918 <vServant+0x1f8>
        {
            break;
    3916:	e00c      	b.n	3932 <vServant+0x212>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3918:	f640 3368 	movw	r3, #2920	; 0xb68
    391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3924:	4618      	mov	r0, r3
    3926:	2100      	movs	r1, #0
    3928:	2200      	movs	r2, #0
    392a:	2300      	movs	r3, #0
    392c:	f000 fc62 	bl	41f4 <xQueueGenericSend>
    }
    3930:	e760      	b.n	37f4 <vServant+0xd4>
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	469d      	mov	sp, r3
}
    3936:	375c      	adds	r7, #92	; 0x5c
    3938:	46bd      	mov	sp, r7
    393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    393e:	bf00      	nop

00003940 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3940:	b580      	push	{r7, lr}
    3942:	b090      	sub	sp, #64	; 0x40
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    394e:	681b      	ldr	r3, [r3, #0]
    3950:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3952:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3954:	69db      	ldr	r3, [r3, #28]
    3956:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3958:	f640 33f4 	movw	r3, #3060	; 0xbf4
    395c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3966:	4618      	mov	r0, r3
    3968:	6a39      	ldr	r1, [r7, #32]
    396a:	f002 f865 	bl	5a38 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    396e:	f640 3368 	movw	r3, #2920	; 0xb68
    3972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    397c:	4618      	mov	r0, r3
    397e:	2100      	movs	r1, #0
    3980:	f04f 32ff 	mov.w	r2, #4294967295
    3984:	2300      	movs	r3, #0
    3986:	f000 fcfb 	bl	4380 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    398a:	f001 fbad 	bl	50e8 <xTaskGetTickCount>
    398e:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3990:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    399a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    399e:	4618      	mov	r0, r3
    39a0:	69f9      	ldr	r1, [r7, #28]
    39a2:	f002 f83b 	bl	5a1c <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    39a6:	2300      	movs	r3, #0
    39a8:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    39aa:	e094      	b.n	3ad6 <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    39ac:	f107 030c 	add.w	r3, r7, #12
    39b0:	4618      	mov	r0, r3
    39b2:	f240 5160 	movw	r1, #1376	; 0x560
    39b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    39ba:	f7ff fa0b 	bl	2dd4 <xEventListGenericTransit>
    39be:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    39c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    39c6:	d100      	bne.n	39ca <vR_Servant+0x8a>
            {
                // no event
                break;
    39c8:	e089      	b.n	3ade <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    39ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39cc:	2b00      	cmp	r3, #0
    39ce:	d100      	bne.n	39d2 <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    39d0:	e081      	b.n	3ad6 <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	68db      	ldr	r3, [r3, #12]
    39d6:	4618      	mov	r0, r3
    39d8:	f7ff f868 	bl	2aac <xEventGetpxDestination>
    39dc:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    39de:	68fb      	ldr	r3, [r7, #12]
    39e0:	68db      	ldr	r3, [r3, #12]
    39e2:	4618      	mov	r0, r3
    39e4:	f7ff f856 	bl	2a94 <xEventGetpxSource>
    39e8:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    39ea:	2301      	movs	r3, #1
    39ec:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    39ee:	2300      	movs	r3, #0
    39f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    39f2:	e068      	b.n	3ac6 <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    39f4:	f240 12ac 	movw	r2, #428	; 0x1ac
    39f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39fe:	460b      	mov	r3, r1
    3a00:	005b      	lsls	r3, r3, #1
    3a02:	440b      	add	r3, r1
    3a04:	009b      	lsls	r3, r3, #2
    3a06:	4413      	add	r3, r2
    3a08:	3304      	adds	r3, #4
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3a0e:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a18:	460b      	mov	r3, r1
    3a1a:	005b      	lsls	r3, r3, #1
    3a1c:	440b      	add	r3, r1
    3a1e:	009b      	lsls	r3, r3, #2
    3a20:	4413      	add	r3, r2
    3a22:	3308      	adds	r3, #8
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3a28:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a30:	693a      	ldr	r2, [r7, #16]
    3a32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a38:	429a      	cmp	r2, r3
    3a3a:	d141      	bne.n	3ac0 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3a3c:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a44:	697a      	ldr	r2, [r7, #20]
    3a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a4a:	69bb      	ldr	r3, [r7, #24]
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d127      	bne.n	3aa0 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3a50:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a5a:	460b      	mov	r3, r1
    3a5c:	005b      	lsls	r3, r3, #1
    3a5e:	440b      	add	r3, r1
    3a60:	009b      	lsls	r3, r3, #2
    3a62:	4413      	add	r3, r2
    3a64:	330c      	adds	r3, #12
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	2b02      	cmp	r3, #2
    3a6a:	d10b      	bne.n	3a84 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3a6c:	f648 0074 	movw	r0, #34932	; 0x8874
    3a70:	f2c0 0001 	movt	r0, #1
    3a74:	f013 fbf6 	bl	17264 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3a78:	68fb      	ldr	r3, [r7, #12]
    3a7a:	68db      	ldr	r3, [r3, #12]
    3a7c:	4618      	mov	r0, r3
    3a7e:	f7ff fa8f 	bl	2fa0 <vEventGenericDelete>
    3a82:	e01d      	b.n	3ac0 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3a84:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a8e:	460b      	mov	r3, r1
    3a90:	005b      	lsls	r3, r3, #1
    3a92:	440b      	add	r3, r1
    3a94:	009b      	lsls	r3, r3, #2
    3a96:	4413      	add	r3, r2
    3a98:	330c      	adds	r3, #12
    3a9a:	2202      	movs	r2, #2
    3a9c:	601a      	str	r2, [r3, #0]
    3a9e:	e00f      	b.n	3ac0 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3aa0:	f240 12ac 	movw	r2, #428	; 0x1ac
    3aa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3aaa:	460b      	mov	r3, r1
    3aac:	005b      	lsls	r3, r3, #1
    3aae:	440b      	add	r3, r1
    3ab0:	009b      	lsls	r3, r3, #2
    3ab2:	4413      	add	r3, r2
    3ab4:	330c      	adds	r3, #12
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	2b01      	cmp	r3, #1
    3aba:	d101      	bne.n	3ac0 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3abc:	2300      	movs	r3, #0
    3abe:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ac2:	3301      	adds	r3, #1
    3ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    3ac6:	f240 13ac 	movw	r3, #428	; 0x1ac
    3aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ace:	681a      	ldr	r2, [r3, #0]
    3ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ad2:	429a      	cmp	r2, r3
    3ad4:	dc8e      	bgt.n	39f4 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ad8:	2b00      	cmp	r3, #0
    3ada:	f43f af67 	beq.w	39ac <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ae4:	d100      	bne.n	3ae8 <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    3ae6:	e045      	b.n	3b74 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    3ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3aea:	2b00      	cmp	r3, #0
    3aec:	d100      	bne.n	3af0 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    3aee:	e041      	b.n	3b74 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3af0:	2300      	movs	r3, #0
    3af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    3af4:	e028      	b.n	3b48 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3af6:	f240 12ac 	movw	r2, #428	; 0x1ac
    3afa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b00:	460b      	mov	r3, r1
    3b02:	005b      	lsls	r3, r3, #1
    3b04:	440b      	add	r3, r1
    3b06:	009b      	lsls	r3, r3, #2
    3b08:	4413      	add	r3, r2
    3b0a:	3308      	adds	r3, #8
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3b10:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b18:	693a      	ldr	r2, [r7, #16]
    3b1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b20:	429a      	cmp	r2, r3
    3b22:	d10e      	bne.n	3b42 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3b24:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b2e:	460b      	mov	r3, r1
    3b30:	005b      	lsls	r3, r3, #1
    3b32:	440b      	add	r3, r1
    3b34:	009b      	lsls	r3, r3, #2
    3b36:	4413      	add	r3, r2
    3b38:	330c      	adds	r3, #12
    3b3a:	2201      	movs	r2, #1
    3b3c:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3b3e:	693b      	ldr	r3, [r7, #16]
    3b40:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b44:	3301      	adds	r3, #1
    3b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b48:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b50:	681a      	ldr	r2, [r3, #0]
    3b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b54:	429a      	cmp	r2, r3
    3b56:	dcce      	bgt.n	3af6 <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3b58:	f640 3368 	movw	r3, #2920	; 0xb68
    3b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3b66:	4618      	mov	r0, r3
    3b68:	2100      	movs	r1, #0
    3b6a:	2200      	movs	r2, #0
    3b6c:	2300      	movs	r3, #0
    3b6e:	f000 fb41 	bl	41f4 <xQueueGenericSend>
        }
    }
    3b72:	e6fc      	b.n	396e <vR_Servant+0x2e>
    3b74:	e6fb      	b.n	396e <vR_Servant+0x2e>
    3b76:	bf00      	nop

00003b78 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b78:	b480      	push	{r7}
    3b7a:	b085      	sub	sp, #20
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	60f8      	str	r0, [r7, #12]
    3b80:	60b9      	str	r1, [r7, #8]
    3b82:	607a      	str	r2, [r7, #4]
    3b84:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3b86:	3714      	adds	r7, #20
    3b88:	46bd      	mov	sp, r7
    3b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8e:	4770      	bx	lr

00003b90 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	60f8      	str	r0, [r7, #12]
    3b98:	60b9      	str	r1, [r7, #8]
    3b9a:	607a      	str	r2, [r7, #4]
    3b9c:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3b9e:	f012 f99f 	bl	15ee0 <last_radio_from_ppm>
}
    3ba2:	3710      	adds	r7, #16
    3ba4:	46bd      	mov	sp, r7
    3ba6:	bd80      	pop	{r7, pc}

00003ba8 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba8:	b480      	push	{r7}
    3baa:	b085      	sub	sp, #20
    3bac:	af00      	add	r7, sp, #0
    3bae:	60f8      	str	r0, [r7, #12]
    3bb0:	60b9      	str	r1, [r7, #8]
    3bb2:	607a      	str	r2, [r7, #4]
    3bb4:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3bb6:	3714      	adds	r7, #20
    3bb8:	46bd      	mov	sp, r7
    3bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bbe:	4770      	bx	lr

00003bc0 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bc0:	b480      	push	{r7}
    3bc2:	b085      	sub	sp, #20
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	60f8      	str	r0, [r7, #12]
    3bc8:	60b9      	str	r1, [r7, #8]
    3bca:	607a      	str	r2, [r7, #4]
    3bcc:	603b      	str	r3, [r7, #0]
}
    3bce:	3714      	adds	r7, #20
    3bd0:	46bd      	mov	sp, r7
    3bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd6:	4770      	bx	lr

00003bd8 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	b084      	sub	sp, #16
    3bdc:	af00      	add	r7, sp, #0
    3bde:	60f8      	str	r0, [r7, #12]
    3be0:	60b9      	str	r1, [r7, #8]
    3be2:	607a      	str	r2, [r7, #4]
    3be4:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3be6:	f012 fd35 	bl	16654 <to_autopilot_from_last_radio>
}
    3bea:	3710      	adds	r7, #16
    3bec:	46bd      	mov	sp, r7
    3bee:	bd80      	pop	{r7, pc}

00003bf0 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b084      	sub	sp, #16
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	60f8      	str	r0, [r7, #12]
    3bf8:	60b9      	str	r1, [r7, #8]
    3bfa:	607a      	str	r2, [r7, #4]
    3bfc:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3bfe:	f012 fc67 	bl	164d0 <spi_reset>
}
    3c02:	3710      	adds	r7, #16
    3c04:	46bd      	mov	sp, r7
    3c06:	bd80      	pop	{r7, pc}

00003c08 <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c08:	b480      	push	{r7}
    3c0a:	b085      	sub	sp, #20
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	60f8      	str	r0, [r7, #12]
    3c10:	60b9      	str	r1, [r7, #8]
    3c12:	607a      	str	r2, [r7, #4]
    3c14:	603b      	str	r3, [r7, #0]
}
    3c16:	3714      	adds	r7, #20
    3c18:	46bd      	mov	sp, r7
    3c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c1e:	4770      	bx	lr

00003c20 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c20:	b580      	push	{r7, lr}
    3c22:	b084      	sub	sp, #16
    3c24:	af00      	add	r7, sp, #0
    3c26:	60f8      	str	r0, [r7, #12]
    3c28:	60b9      	str	r1, [r7, #8]
    3c2a:	607a      	str	r2, [r7, #4]
    3c2c:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3c2e:	f012 fe59 	bl	168e4 <check_mega128_values_task>
}
    3c32:	3710      	adds	r7, #16
    3c34:	46bd      	mov	sp, r7
    3c36:	bd80      	pop	{r7, pc}

00003c38 <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c38:	b480      	push	{r7}
    3c3a:	b085      	sub	sp, #20
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	60f8      	str	r0, [r7, #12]
    3c40:	60b9      	str	r1, [r7, #8]
    3c42:	607a      	str	r2, [r7, #4]
    3c44:	603b      	str	r3, [r7, #0]
}
    3c46:	3714      	adds	r7, #20
    3c48:	46bd      	mov	sp, r7
    3c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c4e:	4770      	bx	lr

00003c50 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c50:	b580      	push	{r7, lr}
    3c52:	b084      	sub	sp, #16
    3c54:	af00      	add	r7, sp, #0
    3c56:	60f8      	str	r0, [r7, #12]
    3c58:	60b9      	str	r1, [r7, #8]
    3c5a:	607a      	str	r2, [r7, #4]
    3c5c:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3c5e:	f012 ff19 	bl	16a94 <servo_transmit>
}
    3c62:	3710      	adds	r7, #16
    3c64:	46bd      	mov	sp, r7
    3c66:	bd80      	pop	{r7, pc}

00003c68 <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c68:	b480      	push	{r7}
    3c6a:	b085      	sub	sp, #20
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	60f8      	str	r0, [r7, #12]
    3c70:	60b9      	str	r1, [r7, #8]
    3c72:	607a      	str	r2, [r7, #4]
    3c74:	603b      	str	r3, [r7, #0]
}
    3c76:	3714      	adds	r7, #20
    3c78:	46bd      	mov	sp, r7
    3c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7e:	4770      	bx	lr

00003c80 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	60f8      	str	r0, [r7, #12]
    3c88:	60b9      	str	r1, [r7, #8]
    3c8a:	607a      	str	r2, [r7, #4]
    3c8c:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3c8e:	f012 fe1f 	bl	168d0 <check_failsafe_task>
}
    3c92:	3710      	adds	r7, #16
    3c94:	46bd      	mov	sp, r7
    3c96:	bd80      	pop	{r7, pc}

00003c98 <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c98:	b480      	push	{r7}
    3c9a:	b085      	sub	sp, #20
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	60f8      	str	r0, [r7, #12]
    3ca0:	60b9      	str	r1, [r7, #8]
    3ca2:	607a      	str	r2, [r7, #4]
    3ca4:	603b      	str	r3, [r7, #0]
}
    3ca6:	3714      	adds	r7, #20
    3ca8:	46bd      	mov	sp, r7
    3caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cae:	4770      	bx	lr

00003cb0 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	607a      	str	r2, [r7, #4]
    3cbc:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3cbe:	f009 f8a1 	bl	ce04 <radio_control_task>
}
    3cc2:	3710      	adds	r7, #16
    3cc4:	46bd      	mov	sp, r7
    3cc6:	bd80      	pop	{r7, pc}

00003cc8 <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b084      	sub	sp, #16
    3ccc:	af00      	add	r7, sp, #0
    3cce:	60f8      	str	r0, [r7, #12]
    3cd0:	60b9      	str	r1, [r7, #8]
    3cd2:	607a      	str	r2, [r7, #4]
    3cd4:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3cd6:	f00d ff47 	bl	11b68 <ir_gain_calib>
}
    3cda:	3710      	adds	r7, #16
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}

00003ce0 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3ce0:	b480      	push	{r7}
    3ce2:	b085      	sub	sp, #20
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	60f8      	str	r0, [r7, #12]
    3ce8:	60b9      	str	r1, [r7, #8]
    3cea:	607a      	str	r2, [r7, #4]
    3cec:	603b      	str	r3, [r7, #0]
}
    3cee:	3714      	adds	r7, #20
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr

00003cf8 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b084      	sub	sp, #16
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	60f8      	str	r0, [r7, #12]
    3d00:	60b9      	str	r1, [r7, #8]
    3d02:	607a      	str	r2, [r7, #4]
    3d04:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3d06:	f00d fef1 	bl	11aec <ir_update>
}
    3d0a:	3710      	adds	r7, #16
    3d0c:	46bd      	mov	sp, r7
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	60f8      	str	r0, [r7, #12]
    3d18:	60b9      	str	r1, [r7, #8]
    3d1a:	607a      	str	r2, [r7, #4]
    3d1c:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3d1e:	f011 f96d 	bl	14ffc <estimator_update_state_infrared>
}
    3d22:	3710      	adds	r7, #16
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}

00003d28 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b084      	sub	sp, #16
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	60f8      	str	r0, [r7, #12]
    3d30:	60b9      	str	r1, [r7, #8]
    3d32:	607a      	str	r2, [r7, #4]
    3d34:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3d36:	f00d ff47 	bl	11bc8 <roll_pitch_pid_run>
}
    3d3a:	3710      	adds	r7, #16
    3d3c:	46bd      	mov	sp, r7
    3d3e:	bd80      	pop	{r7, pc}

00003d40 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d40:	b480      	push	{r7}
    3d42:	b085      	sub	sp, #20
    3d44:	af00      	add	r7, sp, #0
    3d46:	60f8      	str	r0, [r7, #12]
    3d48:	60b9      	str	r1, [r7, #8]
    3d4a:	607a      	str	r2, [r7, #4]
    3d4c:	603b      	str	r3, [r7, #0]
}
    3d4e:	3714      	adds	r7, #20
    3d50:	46bd      	mov	sp, r7
    3d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d56:	4770      	bx	lr

00003d58 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b084      	sub	sp, #16
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	60f8      	str	r0, [r7, #12]
    3d60:	60b9      	str	r1, [r7, #8]
    3d62:	607a      	str	r2, [r7, #4]
    3d64:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3d66:	f00d f933 	bl	10fd0 <link_fbw_send>
}
    3d6a:	3710      	adds	r7, #16
    3d6c:	46bd      	mov	sp, r7
    3d6e:	bd80      	pop	{r7, pc}

00003d70 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d70:	b480      	push	{r7}
    3d72:	b085      	sub	sp, #20
    3d74:	af00      	add	r7, sp, #0
    3d76:	60f8      	str	r0, [r7, #12]
    3d78:	60b9      	str	r1, [r7, #8]
    3d7a:	607a      	str	r2, [r7, #4]
    3d7c:	603b      	str	r3, [r7, #0]
}
    3d7e:	3714      	adds	r7, #20
    3d80:	46bd      	mov	sp, r7
    3d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d86:	4770      	bx	lr

00003d88 <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	60f8      	str	r0, [r7, #12]
    3d90:	60b9      	str	r1, [r7, #8]
    3d92:	607a      	str	r2, [r7, #4]
    3d94:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3d96:	f00d fbf3 	bl	11580 <parse_gps_msg>
}
    3d9a:	3710      	adds	r7, #16
    3d9c:	46bd      	mov	sp, r7
    3d9e:	bd80      	pop	{r7, pc}

00003da0 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b084      	sub	sp, #16
    3da4:	af00      	add	r7, sp, #0
    3da6:	60f8      	str	r0, [r7, #12]
    3da8:	60b9      	str	r1, [r7, #8]
    3daa:	607a      	str	r2, [r7, #4]
    3dac:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3dae:	f00a fe0f 	bl	e9d0 <send_gps_pos>
    send_radIR();
    3db2:	f00b ffd3 	bl	fd5c <send_radIR>
    send_takeOff();
    3db6:	f00c fdcb 	bl	10950 <send_takeOff>
}
    3dba:	3710      	adds	r7, #16
    3dbc:	46bd      	mov	sp, r7
    3dbe:	bd80      	pop	{r7, pc}

00003dc0 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dc0:	b480      	push	{r7}
    3dc2:	b085      	sub	sp, #20
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	60f8      	str	r0, [r7, #12]
    3dc8:	60b9      	str	r1, [r7, #8]
    3dca:	607a      	str	r2, [r7, #4]
    3dcc:	603b      	str	r3, [r7, #0]
}
    3dce:	3714      	adds	r7, #20
    3dd0:	46bd      	mov	sp, r7
    3dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd6:	4770      	bx	lr

00003dd8 <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b084      	sub	sp, #16
    3ddc:	af00      	add	r7, sp, #0
    3dde:	60f8      	str	r0, [r7, #12]
    3de0:	60b9      	str	r1, [r7, #8]
    3de2:	607a      	str	r2, [r7, #4]
    3de4:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3de6:	f010 fe8b 	bl	14b00 <nav_home>
}
    3dea:	3710      	adds	r7, #16
    3dec:	46bd      	mov	sp, r7
    3dee:	bd80      	pop	{r7, pc}

00003df0 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b084      	sub	sp, #16
    3df4:	af00      	add	r7, sp, #0
    3df6:	60f8      	str	r0, [r7, #12]
    3df8:	60b9      	str	r1, [r7, #8]
    3dfa:	607a      	str	r2, [r7, #4]
    3dfc:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3dfe:	f010 fea5 	bl	14b4c <nav_update>
}
    3e02:	3710      	adds	r7, #16
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}

00003e08 <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b084      	sub	sp, #16
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	60f8      	str	r0, [r7, #12]
    3e10:	60b9      	str	r1, [r7, #8]
    3e12:	607a      	str	r2, [r7, #4]
    3e14:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3e16:	f00d ffc3 	bl	11da0 <course_pid_run>
}
    3e1a:	3710      	adds	r7, #16
    3e1c:	46bd      	mov	sp, r7
    3e1e:	bd80      	pop	{r7, pc}

00003e20 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e20:	b480      	push	{r7}
    3e22:	b085      	sub	sp, #20
    3e24:	af00      	add	r7, sp, #0
    3e26:	60f8      	str	r0, [r7, #12]
    3e28:	60b9      	str	r1, [r7, #8]
    3e2a:	607a      	str	r2, [r7, #4]
    3e2c:	603b      	str	r3, [r7, #0]
}
    3e2e:	3714      	adds	r7, #20
    3e30:	46bd      	mov	sp, r7
    3e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e36:	4770      	bx	lr

00003e38 <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	b084      	sub	sp, #16
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	60f8      	str	r0, [r7, #12]
    3e40:	60b9      	str	r1, [r7, #8]
    3e42:	607a      	str	r2, [r7, #4]
    3e44:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3e46:	f00e fa33 	bl	122b0 <altitude_pid_run>
}
    3e4a:	3710      	adds	r7, #16
    3e4c:	46bd      	mov	sp, r7
    3e4e:	bd80      	pop	{r7, pc}

00003e50 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e50:	b480      	push	{r7}
    3e52:	b085      	sub	sp, #20
    3e54:	af00      	add	r7, sp, #0
    3e56:	60f8      	str	r0, [r7, #12]
    3e58:	60b9      	str	r1, [r7, #8]
    3e5a:	607a      	str	r2, [r7, #4]
    3e5c:	603b      	str	r3, [r7, #0]
}
    3e5e:	3714      	adds	r7, #20
    3e60:	46bd      	mov	sp, r7
    3e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e66:	4770      	bx	lr

00003e68 <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	b084      	sub	sp, #16
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	60f8      	str	r0, [r7, #12]
    3e70:	60b9      	str	r1, [r7, #8]
    3e72:	607a      	str	r2, [r7, #4]
    3e74:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3e76:	f00e f84b 	bl	11f10 <climb_pid_run>
}
    3e7a:	3710      	adds	r7, #16
    3e7c:	46bd      	mov	sp, r7
    3e7e:	bd80      	pop	{r7, pc}

00003e80 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e80:	b480      	push	{r7}
    3e82:	b085      	sub	sp, #20
    3e84:	af00      	add	r7, sp, #0
    3e86:	60f8      	str	r0, [r7, #12]
    3e88:	60b9      	str	r1, [r7, #8]
    3e8a:	607a      	str	r2, [r7, #4]
    3e8c:	603b      	str	r3, [r7, #0]
}
    3e8e:	3714      	adds	r7, #20
    3e90:	46bd      	mov	sp, r7
    3e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e96:	4770      	bx	lr

00003e98 <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b084      	sub	sp, #16
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	60f8      	str	r0, [r7, #12]
    3ea0:	60b9      	str	r1, [r7, #8]
    3ea2:	607a      	str	r2, [r7, #4]
    3ea4:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3ea6:	f003 fa75 	bl	7394 <send_boot>
    send_attitude();
    3eaa:	f004 fa43 	bl	8334 <send_attitude>
    send_adc();
    3eae:	f004 ff35 	bl	8d1c <send_adc>
    send_settings();
    3eb2:	f005 f9bb 	bl	922c <send_settings>
    send_desired();
    3eb6:	f005 fdbd 	bl	9a34 <send_desired>
    send_bat();
    3eba:	f006 fceb 	bl	a894 <send_bat>
    send_climb();
    3ebe:	f007 f89f 	bl	b000 <send_climb>
    send_mode();
    3ec2:	f007 fe0f 	bl	bae4 <send_mode>
    send_debug();
    3ec6:	f008 f8e1 	bl	c08c <send_debug>
    send_nav_ref();
    3eca:	f008 fbb5 	bl	c638 <send_nav_ref>
}
    3ece:	3710      	adds	r7, #16
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bd80      	pop	{r7, pc}

00003ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3ed4:	b480      	push	{r7}
    3ed6:	b083      	sub	sp, #12
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	f103 0208 	add.w	r2, r3, #8
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	f04f 32ff 	mov.w	r2, #4294967295
    3eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	f103 0208 	add.w	r2, r3, #8
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	f103 0208 	add.w	r2, r3, #8
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	2200      	movs	r2, #0
    3f06:	601a      	str	r2, [r3, #0]
}
    3f08:	370c      	adds	r7, #12
    3f0a:	46bd      	mov	sp, r7
    3f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop

00003f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3f14:	b480      	push	{r7}
    3f16:	b083      	sub	sp, #12
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	2200      	movs	r2, #0
    3f20:	611a      	str	r2, [r3, #16]
}
    3f22:	370c      	adds	r7, #12
    3f24:	46bd      	mov	sp, r7
    3f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f2a:	4770      	bx	lr

00003f2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3f2c:	b480      	push	{r7}
    3f2e:	b085      	sub	sp, #20
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    3f34:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	685b      	ldr	r3, [r3, #4]
    3f3a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3f3c:	68fb      	ldr	r3, [r7, #12]
    3f3e:	685a      	ldr	r2, [r3, #4]
    3f40:	683b      	ldr	r3, [r7, #0]
    3f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	685a      	ldr	r2, [r3, #4]
    3f48:	683b      	ldr	r3, [r7, #0]
    3f4a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3f4c:	68fb      	ldr	r3, [r7, #12]
    3f4e:	685b      	ldr	r3, [r3, #4]
    3f50:	683a      	ldr	r2, [r7, #0]
    3f52:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3f54:	68fb      	ldr	r3, [r7, #12]
    3f56:	683a      	ldr	r2, [r7, #0]
    3f58:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3f5a:	687b      	ldr	r3, [r7, #4]
    3f5c:	683a      	ldr	r2, [r7, #0]
    3f5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3f60:	683b      	ldr	r3, [r7, #0]
    3f62:	687a      	ldr	r2, [r7, #4]
    3f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	1c5a      	adds	r2, r3, #1
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	601a      	str	r2, [r3, #0]
}
    3f70:	3714      	adds	r7, #20
    3f72:	46bd      	mov	sp, r7
    3f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop

00003f7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3f7c:	b480      	push	{r7}
    3f7e:	b085      	sub	sp, #20
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3f86:	683b      	ldr	r3, [r7, #0]
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3f8c:	68bb      	ldr	r3, [r7, #8]
    3f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f92:	d103      	bne.n	3f9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	691b      	ldr	r3, [r3, #16]
    3f98:	60fb      	str	r3, [r7, #12]
    3f9a:	e00c      	b.n	3fb6 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	3308      	adds	r3, #8
    3fa0:	60fb      	str	r3, [r7, #12]
    3fa2:	e002      	b.n	3faa <vListInsert+0x2e>
    3fa4:	68fb      	ldr	r3, [r7, #12]
    3fa6:	685b      	ldr	r3, [r3, #4]
    3fa8:	60fb      	str	r3, [r7, #12]
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	685b      	ldr	r3, [r3, #4]
    3fae:	681a      	ldr	r2, [r3, #0]
    3fb0:	68bb      	ldr	r3, [r7, #8]
    3fb2:	429a      	cmp	r2, r3
    3fb4:	d9f6      	bls.n	3fa4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3fb6:	68fb      	ldr	r3, [r7, #12]
    3fb8:	685a      	ldr	r2, [r3, #4]
    3fba:	683b      	ldr	r3, [r7, #0]
    3fbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3fbe:	683b      	ldr	r3, [r7, #0]
    3fc0:	685b      	ldr	r3, [r3, #4]
    3fc2:	683a      	ldr	r2, [r7, #0]
    3fc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3fc6:	683b      	ldr	r3, [r7, #0]
    3fc8:	68fa      	ldr	r2, [r7, #12]
    3fca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	683a      	ldr	r2, [r7, #0]
    3fd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3fd2:	683b      	ldr	r3, [r7, #0]
    3fd4:	687a      	ldr	r2, [r7, #4]
    3fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	1c5a      	adds	r2, r3, #1
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	601a      	str	r2, [r3, #0]
}
    3fe2:	3714      	adds	r7, #20
    3fe4:	46bd      	mov	sp, r7
    3fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fea:	4770      	bx	lr

00003fec <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3fec:	b480      	push	{r7}
    3fee:	b085      	sub	sp, #20
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	685b      	ldr	r3, [r3, #4]
    3ff8:	687a      	ldr	r2, [r7, #4]
    3ffa:	6892      	ldr	r2, [r2, #8]
    3ffc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	689b      	ldr	r3, [r3, #8]
    4002:	687a      	ldr	r2, [r7, #4]
    4004:	6852      	ldr	r2, [r2, #4]
    4006:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	691b      	ldr	r3, [r3, #16]
    400c:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	685a      	ldr	r2, [r3, #4]
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	429a      	cmp	r2, r3
    4016:	d103      	bne.n	4020 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	689a      	ldr	r2, [r3, #8]
    401c:	68fb      	ldr	r3, [r7, #12]
    401e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	2200      	movs	r2, #0
    4024:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4026:	68fb      	ldr	r3, [r7, #12]
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	1e5a      	subs	r2, r3, #1
    402c:	68fb      	ldr	r3, [r7, #12]
    402e:	601a      	str	r2, [r3, #0]
}
    4030:	3714      	adds	r7, #20
    4032:	46bd      	mov	sp, r7
    4034:	f85d 7b04 	ldr.w	r7, [sp], #4
    4038:	4770      	bx	lr
    403a:	bf00      	nop

0000403c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    403c:	b580      	push	{r7, lr}
    403e:	b084      	sub	sp, #16
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
    4044:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4046:	2301      	movs	r3, #1
    4048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    404a:	683b      	ldr	r3, [r7, #0]
    404c:	2b01      	cmp	r3, #1
    404e:	d00b      	beq.n	4068 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4054:	2b00      	cmp	r3, #0
    4056:	d001      	beq.n	405c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4058:	2300      	movs	r3, #0
    405a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	691b      	ldr	r3, [r3, #16]
    4060:	2b00      	cmp	r3, #0
    4062:	d001      	beq.n	4068 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4064:	2300      	movs	r3, #0
    4066:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4068:	68fb      	ldr	r3, [r7, #12]
    406a:	2b01      	cmp	r3, #1
    406c:	d12f      	bne.n	40ce <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	681a      	ldr	r2, [r3, #0]
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4076:	6879      	ldr	r1, [r7, #4]
    4078:	6c09      	ldr	r1, [r1, #64]	; 0x40
    407a:	fb01 f303 	mul.w	r3, r1, r3
    407e:	441a      	add	r2, r3
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	2200      	movs	r2, #0
    4088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	681a      	ldr	r2, [r3, #0]
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	681a      	ldr	r2, [r3, #0]
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    409a:	3b01      	subs	r3, #1
    409c:	6879      	ldr	r1, [r7, #4]
    409e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    40a0:	fb01 f303 	mul.w	r3, r1, r3
    40a4:	441a      	add	r2, r3
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	f04f 32ff 	mov.w	r2, #4294967295
    40b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	f04f 32ff 	mov.w	r2, #4294967295
    40b8:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	3310      	adds	r3, #16
    40be:	4618      	mov	r0, r3
    40c0:	f7ff ff08 	bl	3ed4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	3324      	adds	r3, #36	; 0x24
    40c8:	4618      	mov	r0, r3
    40ca:	f7ff ff03 	bl	3ed4 <vListInitialise>
	}

	return xReturn;
    40ce:	68fb      	ldr	r3, [r7, #12]
}
    40d0:	4618      	mov	r0, r3
    40d2:	3710      	adds	r7, #16
    40d4:	46bd      	mov	sp, r7
    40d6:	bd80      	pop	{r7, pc}

000040d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    40d8:	b580      	push	{r7, lr}
    40da:	b088      	sub	sp, #32
    40dc:	af00      	add	r7, sp, #0
    40de:	60f8      	str	r0, [r7, #12]
    40e0:	60b9      	str	r1, [r7, #8]
    40e2:	4613      	mov	r3, r2
    40e4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    40e6:	2300      	movs	r3, #0
    40e8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    40ea:	68fb      	ldr	r3, [r7, #12]
    40ec:	2b00      	cmp	r3, #0
    40ee:	d026      	beq.n	413e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    40f0:	204c      	movs	r0, #76	; 0x4c
    40f2:	f001 fda5 	bl	5c40 <pvPortMalloc>
    40f6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    40f8:	69bb      	ldr	r3, [r7, #24]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d01f      	beq.n	413e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    40fe:	68fb      	ldr	r3, [r7, #12]
    4100:	68ba      	ldr	r2, [r7, #8]
    4102:	fb02 f303 	mul.w	r3, r2, r3
    4106:	3301      	adds	r3, #1
    4108:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    410a:	6978      	ldr	r0, [r7, #20]
    410c:	f001 fd98 	bl	5c40 <pvPortMalloc>
    4110:	4602      	mov	r2, r0
    4112:	69bb      	ldr	r3, [r7, #24]
    4114:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4116:	69bb      	ldr	r3, [r7, #24]
    4118:	681b      	ldr	r3, [r3, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d00c      	beq.n	4138 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    411e:	69bb      	ldr	r3, [r7, #24]
    4120:	68fa      	ldr	r2, [r7, #12]
    4122:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4124:	69bb      	ldr	r3, [r7, #24]
    4126:	68ba      	ldr	r2, [r7, #8]
    4128:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    412a:	69b8      	ldr	r0, [r7, #24]
    412c:	2101      	movs	r1, #1
    412e:	f7ff ff85 	bl	403c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4132:	69bb      	ldr	r3, [r7, #24]
    4134:	61fb      	str	r3, [r7, #28]
    4136:	e002      	b.n	413e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4138:	69b8      	ldr	r0, [r7, #24]
    413a:	f001 fe45 	bl	5dc8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    413e:	69fb      	ldr	r3, [r7, #28]
}
    4140:	4618      	mov	r0, r3
    4142:	3720      	adds	r7, #32
    4144:	46bd      	mov	sp, r7
    4146:	bd80      	pop	{r7, pc}

00004148 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4148:	b580      	push	{r7, lr}
    414a:	b084      	sub	sp, #16
    414c:	af00      	add	r7, sp, #0
    414e:	4603      	mov	r3, r0
    4150:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4152:	204c      	movs	r0, #76	; 0x4c
    4154:	f001 fd74 	bl	5c40 <pvPortMalloc>
    4158:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    415a:	68fb      	ldr	r3, [r7, #12]
    415c:	2b00      	cmp	r3, #0
    415e:	d02c      	beq.n	41ba <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	2200      	movs	r2, #0
    4164:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	2200      	movs	r2, #0
    416a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	2200      	movs	r2, #0
    4170:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4172:	68fb      	ldr	r3, [r7, #12]
    4174:	2200      	movs	r2, #0
    4176:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4178:	68fb      	ldr	r3, [r7, #12]
    417a:	2200      	movs	r2, #0
    417c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    417e:	68fb      	ldr	r3, [r7, #12]
    4180:	2201      	movs	r2, #1
    4182:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4184:	68fb      	ldr	r3, [r7, #12]
    4186:	2200      	movs	r2, #0
    4188:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	f04f 32ff 	mov.w	r2, #4294967295
    4190:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4192:	68fb      	ldr	r3, [r7, #12]
    4194:	f04f 32ff 	mov.w	r2, #4294967295
    4198:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	3310      	adds	r3, #16
    419e:	4618      	mov	r0, r3
    41a0:	f7ff fe98 	bl	3ed4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	3324      	adds	r3, #36	; 0x24
    41a8:	4618      	mov	r0, r3
    41aa:	f7ff fe93 	bl	3ed4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    41ae:	68f8      	ldr	r0, [r7, #12]
    41b0:	2100      	movs	r1, #0
    41b2:	2200      	movs	r2, #0
    41b4:	2300      	movs	r3, #0
    41b6:	f000 f81d 	bl	41f4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    41ba:	68fb      	ldr	r3, [r7, #12]
	}
    41bc:	4618      	mov	r0, r3
    41be:	3710      	adds	r7, #16
    41c0:	46bd      	mov	sp, r7
    41c2:	bd80      	pop	{r7, pc}

000041c4 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    41cc:	f001 fcc0 	bl	5b50 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	681b      	ldr	r3, [r3, #0]
    41d4:	2b00      	cmp	r3, #0
    41d6:	d103      	bne.n	41e0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	685b      	ldr	r3, [r3, #4]
    41dc:	60fb      	str	r3, [r7, #12]
    41de:	e001      	b.n	41e4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    41e0:	2300      	movs	r3, #0
    41e2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    41e4:	f001 fcca 	bl	5b7c <vPortExitCritical>
		
		return pxReturn;
    41e8:	68fb      	ldr	r3, [r7, #12]
	}
    41ea:	4618      	mov	r0, r3
    41ec:	3710      	adds	r7, #16
    41ee:	46bd      	mov	sp, r7
    41f0:	bd80      	pop	{r7, pc}
    41f2:	bf00      	nop

000041f4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b088      	sub	sp, #32
    41f8:	af00      	add	r7, sp, #0
    41fa:	60f8      	str	r0, [r7, #12]
    41fc:	60b9      	str	r1, [r7, #8]
    41fe:	607a      	str	r2, [r7, #4]
    4200:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4202:	2300      	movs	r3, #0
    4204:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4206:	f001 fca3 	bl	5b50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4212:	429a      	cmp	r2, r3
    4214:	d216      	bcs.n	4244 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4216:	68f8      	ldr	r0, [r7, #12]
    4218:	68b9      	ldr	r1, [r7, #8]
    421a:	683a      	ldr	r2, [r7, #0]
    421c:	f000 f9d6 	bl	45cc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4224:	2b00      	cmp	r3, #0
    4226:	d009      	beq.n	423c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	3324      	adds	r3, #36	; 0x24
    422c:	4618      	mov	r0, r3
    422e:	f001 f905 	bl	543c <xTaskRemoveFromEventList>
    4232:	4603      	mov	r3, r0
    4234:	2b01      	cmp	r3, #1
    4236:	d101      	bne.n	423c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4238:	f001 fc7c 	bl	5b34 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    423c:	f001 fc9e 	bl	5b7c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4240:	2301      	movs	r3, #1
    4242:	e059      	b.n	42f8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	2b00      	cmp	r3, #0
    4248:	d103      	bne.n	4252 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    424a:	f001 fc97 	bl	5b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    424e:	2300      	movs	r3, #0
    4250:	e052      	b.n	42f8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4252:	69fb      	ldr	r3, [r7, #28]
    4254:	2b00      	cmp	r3, #0
    4256:	d106      	bne.n	4266 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4258:	f107 0314 	add.w	r3, r7, #20
    425c:	4618      	mov	r0, r3
    425e:	f001 f945 	bl	54ec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4262:	2301      	movs	r3, #1
    4264:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4266:	f001 fc89 	bl	5b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    426a:	f000 fe93 	bl	4f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    426e:	f001 fc6f 	bl	5b50 <vPortEnterCritical>
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4276:	f1b3 3fff 	cmp.w	r3, #4294967295
    427a:	d102      	bne.n	4282 <xQueueGenericSend+0x8e>
    427c:	68fb      	ldr	r3, [r7, #12]
    427e:	2200      	movs	r2, #0
    4280:	645a      	str	r2, [r3, #68]	; 0x44
    4282:	68fb      	ldr	r3, [r7, #12]
    4284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4286:	f1b3 3fff 	cmp.w	r3, #4294967295
    428a:	d102      	bne.n	4292 <xQueueGenericSend+0x9e>
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	2200      	movs	r2, #0
    4290:	649a      	str	r2, [r3, #72]	; 0x48
    4292:	f001 fc73 	bl	5b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4296:	f107 0214 	add.w	r2, r7, #20
    429a:	1d3b      	adds	r3, r7, #4
    429c:	4610      	mov	r0, r2
    429e:	4619      	mov	r1, r3
    42a0:	f001 f93c 	bl	551c <xTaskCheckForTimeOut>
    42a4:	4603      	mov	r3, r0
    42a6:	2b00      	cmp	r3, #0
    42a8:	d11e      	bne.n	42e8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    42aa:	68f8      	ldr	r0, [r7, #12]
    42ac:	f000 fa86 	bl	47bc <prvIsQueueFull>
    42b0:	4603      	mov	r3, r0
    42b2:	2b00      	cmp	r3, #0
    42b4:	d012      	beq.n	42dc <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    42b6:	68fb      	ldr	r3, [r7, #12]
    42b8:	f103 0210 	add.w	r2, r3, #16
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	4610      	mov	r0, r2
    42c0:	4619      	mov	r1, r3
    42c2:	f001 f883 	bl	53cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    42c6:	68f8      	ldr	r0, [r7, #12]
    42c8:	f000 fa02 	bl	46d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    42cc:	f000 fe74 	bl	4fb8 <xTaskResumeAll>
    42d0:	4603      	mov	r3, r0
    42d2:	2b00      	cmp	r3, #0
    42d4:	d10f      	bne.n	42f6 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    42d6:	f001 fc2d 	bl	5b34 <vPortYieldFromISR>
    42da:	e00c      	b.n	42f6 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    42dc:	68f8      	ldr	r0, [r7, #12]
    42de:	f000 f9f7 	bl	46d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    42e2:	f000 fe69 	bl	4fb8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    42e6:	e78e      	b.n	4206 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    42e8:	68f8      	ldr	r0, [r7, #12]
    42ea:	f000 f9f1 	bl	46d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    42ee:	f000 fe63 	bl	4fb8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    42f2:	2300      	movs	r3, #0
    42f4:	e000      	b.n	42f8 <xQueueGenericSend+0x104>
		}
	}
    42f6:	e786      	b.n	4206 <xQueueGenericSend+0x12>
}
    42f8:	4618      	mov	r0, r3
    42fa:	3720      	adds	r7, #32
    42fc:	46bd      	mov	sp, r7
    42fe:	bd80      	pop	{r7, pc}

00004300 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4300:	b580      	push	{r7, lr}
    4302:	b086      	sub	sp, #24
    4304:	af00      	add	r7, sp, #0
    4306:	60f8      	str	r0, [r7, #12]
    4308:	60b9      	str	r1, [r7, #8]
    430a:	607a      	str	r2, [r7, #4]
    430c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    430e:	2300      	movs	r3, #0
    4310:	613b      	str	r3, [r7, #16]
    4312:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4316:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    431e:	68fb      	ldr	r3, [r7, #12]
    4320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4322:	429a      	cmp	r2, r3
    4324:	d221      	bcs.n	436a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4326:	68f8      	ldr	r0, [r7, #12]
    4328:	68b9      	ldr	r1, [r7, #8]
    432a:	683a      	ldr	r2, [r7, #0]
    432c:	f000 f94e 	bl	45cc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4330:	68fb      	ldr	r3, [r7, #12]
    4332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4334:	f1b3 3fff 	cmp.w	r3, #4294967295
    4338:	d10f      	bne.n	435a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    433a:	68fb      	ldr	r3, [r7, #12]
    433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    433e:	2b00      	cmp	r3, #0
    4340:	d010      	beq.n	4364 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4342:	68fb      	ldr	r3, [r7, #12]
    4344:	3324      	adds	r3, #36	; 0x24
    4346:	4618      	mov	r0, r3
    4348:	f001 f878 	bl	543c <xTaskRemoveFromEventList>
    434c:	4603      	mov	r3, r0
    434e:	2b00      	cmp	r3, #0
    4350:	d008      	beq.n	4364 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	2201      	movs	r2, #1
    4356:	601a      	str	r2, [r3, #0]
    4358:	e004      	b.n	4364 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    435e:	1c5a      	adds	r2, r3, #1
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4364:	2301      	movs	r3, #1
    4366:	617b      	str	r3, [r7, #20]
    4368:	e001      	b.n	436e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    436a:	2300      	movs	r3, #0
    436c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    436e:	f04f 0000 	mov.w	r0, #0
    4372:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4376:	697b      	ldr	r3, [r7, #20]
}
    4378:	4618      	mov	r0, r3
    437a:	3718      	adds	r7, #24
    437c:	46bd      	mov	sp, r7
    437e:	bd80      	pop	{r7, pc}

00004380 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4380:	b580      	push	{r7, lr}
    4382:	b088      	sub	sp, #32
    4384:	af00      	add	r7, sp, #0
    4386:	60f8      	str	r0, [r7, #12]
    4388:	60b9      	str	r1, [r7, #8]
    438a:	607a      	str	r2, [r7, #4]
    438c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    438e:	2300      	movs	r3, #0
    4390:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4392:	f001 fbdd 	bl	5b50 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4396:	68fb      	ldr	r3, [r7, #12]
    4398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    439a:	2b00      	cmp	r3, #0
    439c:	d03b      	beq.n	4416 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	68db      	ldr	r3, [r3, #12]
    43a2:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    43a4:	68f8      	ldr	r0, [r7, #12]
    43a6:	68b9      	ldr	r1, [r7, #8]
    43a8:	f000 f96c 	bl	4684 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    43ac:	683b      	ldr	r3, [r7, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d11c      	bne.n	43ec <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    43b6:	1e5a      	subs	r2, r3, #1
    43b8:	68fb      	ldr	r3, [r7, #12]
    43ba:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    43bc:	68fb      	ldr	r3, [r7, #12]
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d104      	bne.n	43ce <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    43c4:	f001 fa5c 	bl	5880 <xTaskGetCurrentTaskHandle>
    43c8:	4602      	mov	r2, r0
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	691b      	ldr	r3, [r3, #16]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d01b      	beq.n	440e <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    43d6:	68fb      	ldr	r3, [r7, #12]
    43d8:	3310      	adds	r3, #16
    43da:	4618      	mov	r0, r3
    43dc:	f001 f82e 	bl	543c <xTaskRemoveFromEventList>
    43e0:	4603      	mov	r3, r0
    43e2:	2b01      	cmp	r3, #1
    43e4:	d113      	bne.n	440e <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    43e6:	f001 fba5 	bl	5b34 <vPortYieldFromISR>
    43ea:	e010      	b.n	440e <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	69ba      	ldr	r2, [r7, #24]
    43f0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43f6:	2b00      	cmp	r3, #0
    43f8:	d009      	beq.n	440e <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	3324      	adds	r3, #36	; 0x24
    43fe:	4618      	mov	r0, r3
    4400:	f001 f81c 	bl	543c <xTaskRemoveFromEventList>
    4404:	4603      	mov	r3, r0
    4406:	2b00      	cmp	r3, #0
    4408:	d001      	beq.n	440e <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    440a:	f001 fb93 	bl	5b34 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    440e:	f001 fbb5 	bl	5b7c <vPortExitCritical>
				return pdPASS;
    4412:	2301      	movs	r3, #1
    4414:	e066      	b.n	44e4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	2b00      	cmp	r3, #0
    441a:	d103      	bne.n	4424 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    441c:	f001 fbae 	bl	5b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4420:	2300      	movs	r3, #0
    4422:	e05f      	b.n	44e4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4424:	69fb      	ldr	r3, [r7, #28]
    4426:	2b00      	cmp	r3, #0
    4428:	d106      	bne.n	4438 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    442a:	f107 0310 	add.w	r3, r7, #16
    442e:	4618      	mov	r0, r3
    4430:	f001 f85c 	bl	54ec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4434:	2301      	movs	r3, #1
    4436:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4438:	f001 fba0 	bl	5b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    443c:	f000 fdaa 	bl	4f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4440:	f001 fb86 	bl	5b50 <vPortEnterCritical>
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4448:	f1b3 3fff 	cmp.w	r3, #4294967295
    444c:	d102      	bne.n	4454 <xQueueGenericReceive+0xd4>
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	2200      	movs	r2, #0
    4452:	645a      	str	r2, [r3, #68]	; 0x44
    4454:	68fb      	ldr	r3, [r7, #12]
    4456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4458:	f1b3 3fff 	cmp.w	r3, #4294967295
    445c:	d102      	bne.n	4464 <xQueueGenericReceive+0xe4>
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	2200      	movs	r2, #0
    4462:	649a      	str	r2, [r3, #72]	; 0x48
    4464:	f001 fb8a 	bl	5b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4468:	f107 0210 	add.w	r2, r7, #16
    446c:	1d3b      	adds	r3, r7, #4
    446e:	4610      	mov	r0, r2
    4470:	4619      	mov	r1, r3
    4472:	f001 f853 	bl	551c <xTaskCheckForTimeOut>
    4476:	4603      	mov	r3, r0
    4478:	2b00      	cmp	r3, #0
    447a:	d12b      	bne.n	44d4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    447c:	68f8      	ldr	r0, [r7, #12]
    447e:	f000 f973 	bl	4768 <prvIsQueueEmpty>
    4482:	4603      	mov	r3, r0
    4484:	2b00      	cmp	r3, #0
    4486:	d01f      	beq.n	44c8 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	2b00      	cmp	r3, #0
    448e:	d108      	bne.n	44a2 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4490:	f001 fb5e 	bl	5b50 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4494:	68fb      	ldr	r3, [r7, #12]
    4496:	685b      	ldr	r3, [r3, #4]
    4498:	4618      	mov	r0, r3
    449a:	f001 fa01 	bl	58a0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    449e:	f001 fb6d 	bl	5b7c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	4610      	mov	r0, r2
    44ac:	4619      	mov	r1, r3
    44ae:	f000 ff8d 	bl	53cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    44b2:	68f8      	ldr	r0, [r7, #12]
    44b4:	f000 f90c 	bl	46d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    44b8:	f000 fd7e 	bl	4fb8 <xTaskResumeAll>
    44bc:	4603      	mov	r3, r0
    44be:	2b00      	cmp	r3, #0
    44c0:	d10f      	bne.n	44e2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    44c2:	f001 fb37 	bl	5b34 <vPortYieldFromISR>
    44c6:	e00c      	b.n	44e2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44c8:	68f8      	ldr	r0, [r7, #12]
    44ca:	f000 f901 	bl	46d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44ce:	f000 fd73 	bl	4fb8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    44d2:	e75e      	b.n	4392 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    44d4:	68f8      	ldr	r0, [r7, #12]
    44d6:	f000 f8fb 	bl	46d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44da:	f000 fd6d 	bl	4fb8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    44de:	2300      	movs	r3, #0
    44e0:	e000      	b.n	44e4 <xQueueGenericReceive+0x164>
		}
	}
    44e2:	e756      	b.n	4392 <xQueueGenericReceive+0x12>
}
    44e4:	4618      	mov	r0, r3
    44e6:	3720      	adds	r7, #32
    44e8:	46bd      	mov	sp, r7
    44ea:	bd80      	pop	{r7, pc}

000044ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b086      	sub	sp, #24
    44f0:	af00      	add	r7, sp, #0
    44f2:	60f8      	str	r0, [r7, #12]
    44f4:	60b9      	str	r1, [r7, #8]
    44f6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44f8:	2300      	movs	r3, #0
    44fa:	613b      	str	r3, [r7, #16]
    44fc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4500:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4508:	2b00      	cmp	r3, #0
    450a:	d025      	beq.n	4558 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    450c:	68f8      	ldr	r0, [r7, #12]
    450e:	68b9      	ldr	r1, [r7, #8]
    4510:	f000 f8b8 	bl	4684 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4518:	1e5a      	subs	r2, r3, #1
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4522:	f1b3 3fff 	cmp.w	r3, #4294967295
    4526:	d10f      	bne.n	4548 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	691b      	ldr	r3, [r3, #16]
    452c:	2b00      	cmp	r3, #0
    452e:	d010      	beq.n	4552 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4530:	68fb      	ldr	r3, [r7, #12]
    4532:	3310      	adds	r3, #16
    4534:	4618      	mov	r0, r3
    4536:	f000 ff81 	bl	543c <xTaskRemoveFromEventList>
    453a:	4603      	mov	r3, r0
    453c:	2b00      	cmp	r3, #0
    453e:	d008      	beq.n	4552 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	2201      	movs	r2, #1
    4544:	601a      	str	r2, [r3, #0]
    4546:	e004      	b.n	4552 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    454c:	1c5a      	adds	r2, r3, #1
    454e:	68fb      	ldr	r3, [r7, #12]
    4550:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4552:	2301      	movs	r3, #1
    4554:	617b      	str	r3, [r7, #20]
    4556:	e001      	b.n	455c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4558:	2300      	movs	r3, #0
    455a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    455c:	f04f 0000 	mov.w	r0, #0
    4560:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4564:	697b      	ldr	r3, [r7, #20]
}
    4566:	4618      	mov	r0, r3
    4568:	3718      	adds	r7, #24
    456a:	46bd      	mov	sp, r7
    456c:	bd80      	pop	{r7, pc}
    456e:	bf00      	nop

00004570 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4570:	b580      	push	{r7, lr}
    4572:	b084      	sub	sp, #16
    4574:	af00      	add	r7, sp, #0
    4576:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4578:	f001 faea 	bl	5b50 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4580:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4582:	f001 fafb 	bl	5b7c <vPortExitCritical>

	return uxReturn;
    4586:	68fb      	ldr	r3, [r7, #12]
}
    4588:	4618      	mov	r0, r3
    458a:	3710      	adds	r7, #16
    458c:	46bd      	mov	sp, r7
    458e:	bd80      	pop	{r7, pc}

00004590 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4590:	b480      	push	{r7}
    4592:	b085      	sub	sp, #20
    4594:	af00      	add	r7, sp, #0
    4596:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    459c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    459e:	68fb      	ldr	r3, [r7, #12]
}
    45a0:	4618      	mov	r0, r3
    45a2:	3714      	adds	r7, #20
    45a4:	46bd      	mov	sp, r7
    45a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45aa:	4770      	bx	lr

000045ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	681b      	ldr	r3, [r3, #0]
    45b8:	4618      	mov	r0, r3
    45ba:	f001 fc05 	bl	5dc8 <vPortFree>
	vPortFree( pxQueue );
    45be:	6878      	ldr	r0, [r7, #4]
    45c0:	f001 fc02 	bl	5dc8 <vPortFree>
}
    45c4:	3708      	adds	r7, #8
    45c6:	46bd      	mov	sp, r7
    45c8:	bd80      	pop	{r7, pc}
    45ca:	bf00      	nop

000045cc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    45cc:	b580      	push	{r7, lr}
    45ce:	b084      	sub	sp, #16
    45d0:	af00      	add	r7, sp, #0
    45d2:	60f8      	str	r0, [r7, #12]
    45d4:	60b9      	str	r1, [r7, #8]
    45d6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45dc:	2b00      	cmp	r3, #0
    45de:	d10c      	bne.n	45fa <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45e0:	68fb      	ldr	r3, [r7, #12]
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d145      	bne.n	4674 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	685b      	ldr	r3, [r3, #4]
    45ec:	4618      	mov	r0, r3
    45ee:	f001 f9bb 	bl	5968 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	2200      	movs	r2, #0
    45f6:	605a      	str	r2, [r3, #4]
    45f8:	e03c      	b.n	4674 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d11a      	bne.n	4636 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	689a      	ldr	r2, [r3, #8]
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4608:	4610      	mov	r0, r2
    460a:	68b9      	ldr	r1, [r7, #8]
    460c:	461a      	mov	r2, r3
    460e:	f013 ffff 	bl	18610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	689a      	ldr	r2, [r3, #8]
    4616:	68fb      	ldr	r3, [r7, #12]
    4618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    461a:	441a      	add	r2, r3
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	689a      	ldr	r2, [r3, #8]
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	685b      	ldr	r3, [r3, #4]
    4628:	429a      	cmp	r2, r3
    462a:	d323      	bcc.n	4674 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	681a      	ldr	r2, [r3, #0]
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	609a      	str	r2, [r3, #8]
    4634:	e01e      	b.n	4674 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	68da      	ldr	r2, [r3, #12]
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    463e:	4610      	mov	r0, r2
    4640:	68b9      	ldr	r1, [r7, #8]
    4642:	461a      	mov	r2, r3
    4644:	f013 ffe4 	bl	18610 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	68da      	ldr	r2, [r3, #12]
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4650:	425b      	negs	r3, r3
    4652:	441a      	add	r2, r3
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	68da      	ldr	r2, [r3, #12]
    465c:	68fb      	ldr	r3, [r7, #12]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	429a      	cmp	r2, r3
    4662:	d207      	bcs.n	4674 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4664:	68fb      	ldr	r3, [r7, #12]
    4666:	685a      	ldr	r2, [r3, #4]
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    466c:	425b      	negs	r3, r3
    466e:	441a      	add	r2, r3
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4678:	1c5a      	adds	r2, r3, #1
    467a:	68fb      	ldr	r3, [r7, #12]
    467c:	639a      	str	r2, [r3, #56]	; 0x38
}
    467e:	3710      	adds	r7, #16
    4680:	46bd      	mov	sp, r7
    4682:	bd80      	pop	{r7, pc}

00004684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4684:	b580      	push	{r7, lr}
    4686:	b082      	sub	sp, #8
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
    468c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	2b00      	cmp	r3, #0
    4694:	d019      	beq.n	46ca <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	68da      	ldr	r2, [r3, #12]
    469a:	687b      	ldr	r3, [r7, #4]
    469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    469e:	441a      	add	r2, r3
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	68da      	ldr	r2, [r3, #12]
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	685b      	ldr	r3, [r3, #4]
    46ac:	429a      	cmp	r2, r3
    46ae:	d303      	bcc.n	46b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	681a      	ldr	r2, [r3, #0]
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	68da      	ldr	r2, [r3, #12]
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46c0:	6838      	ldr	r0, [r7, #0]
    46c2:	4611      	mov	r1, r2
    46c4:	461a      	mov	r2, r3
    46c6:	f013 ffa3 	bl	18610 <memcpy>
	}
}
    46ca:	3708      	adds	r7, #8
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}

000046d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    46d8:	f001 fa3a 	bl	5b50 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    46dc:	e014      	b.n	4708 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46e2:	2b00      	cmp	r3, #0
    46e4:	d00f      	beq.n	4706 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    46e6:	687b      	ldr	r3, [r7, #4]
    46e8:	3324      	adds	r3, #36	; 0x24
    46ea:	4618      	mov	r0, r3
    46ec:	f000 fea6 	bl	543c <xTaskRemoveFromEventList>
    46f0:	4603      	mov	r3, r0
    46f2:	2b00      	cmp	r3, #0
    46f4:	d001      	beq.n	46fa <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    46f6:	f000 ff5d 	bl	55b4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46fe:	1e5a      	subs	r2, r3, #1
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	649a      	str	r2, [r3, #72]	; 0x48
    4704:	e000      	b.n	4708 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4706:	e003      	b.n	4710 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    470c:	2b00      	cmp	r3, #0
    470e:	dce6      	bgt.n	46de <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4710:	687b      	ldr	r3, [r7, #4]
    4712:	f04f 32ff 	mov.w	r2, #4294967295
    4716:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4718:	f001 fa30 	bl	5b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    471c:	f001 fa18 	bl	5b50 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4720:	e014      	b.n	474c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	691b      	ldr	r3, [r3, #16]
    4726:	2b00      	cmp	r3, #0
    4728:	d00f      	beq.n	474a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	3310      	adds	r3, #16
    472e:	4618      	mov	r0, r3
    4730:	f000 fe84 	bl	543c <xTaskRemoveFromEventList>
    4734:	4603      	mov	r3, r0
    4736:	2b00      	cmp	r3, #0
    4738:	d001      	beq.n	473e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    473a:	f000 ff3b 	bl	55b4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4742:	1e5a      	subs	r2, r3, #1
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	645a      	str	r2, [r3, #68]	; 0x44
    4748:	e000      	b.n	474c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    474a:	e003      	b.n	4754 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4750:	2b00      	cmp	r3, #0
    4752:	dce6      	bgt.n	4722 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	f04f 32ff 	mov.w	r2, #4294967295
    475a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    475c:	f001 fa0e 	bl	5b7c <vPortExitCritical>
}
    4760:	3708      	adds	r7, #8
    4762:	46bd      	mov	sp, r7
    4764:	bd80      	pop	{r7, pc}
    4766:	bf00      	nop

00004768 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4768:	b580      	push	{r7, lr}
    476a:	b084      	sub	sp, #16
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4770:	f001 f9ee 	bl	5b50 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4778:	2b00      	cmp	r3, #0
    477a:	bf14      	ite	ne
    477c:	2300      	movne	r3, #0
    477e:	2301      	moveq	r3, #1
    4780:	b2db      	uxtb	r3, r3
    4782:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4784:	f001 f9fa 	bl	5b7c <vPortExitCritical>

	return xReturn;
    4788:	68fb      	ldr	r3, [r7, #12]
}
    478a:	4618      	mov	r0, r3
    478c:	3710      	adds	r7, #16
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	bf00      	nop

00004794 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4794:	b480      	push	{r7}
    4796:	b085      	sub	sp, #20
    4798:	af00      	add	r7, sp, #0
    479a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47a0:	2b00      	cmp	r3, #0
    47a2:	bf14      	ite	ne
    47a4:	2300      	movne	r3, #0
    47a6:	2301      	moveq	r3, #1
    47a8:	b2db      	uxtb	r3, r3
    47aa:	60fb      	str	r3, [r7, #12]

	return xReturn;
    47ac:	68fb      	ldr	r3, [r7, #12]
}
    47ae:	4618      	mov	r0, r3
    47b0:	3714      	adds	r7, #20
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop

000047bc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    47bc:	b580      	push	{r7, lr}
    47be:	b084      	sub	sp, #16
    47c0:	af00      	add	r7, sp, #0
    47c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    47c4:	f001 f9c4 	bl	5b50 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47d0:	429a      	cmp	r2, r3
    47d2:	bf14      	ite	ne
    47d4:	2300      	movne	r3, #0
    47d6:	2301      	moveq	r3, #1
    47d8:	b2db      	uxtb	r3, r3
    47da:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    47dc:	f001 f9ce 	bl	5b7c <vPortExitCritical>

	return xReturn;
    47e0:	68fb      	ldr	r3, [r7, #12]
}
    47e2:	4618      	mov	r0, r3
    47e4:	3710      	adds	r7, #16
    47e6:	46bd      	mov	sp, r7
    47e8:	bd80      	pop	{r7, pc}
    47ea:	bf00      	nop

000047ec <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    47ec:	b480      	push	{r7}
    47ee:	b085      	sub	sp, #20
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47fc:	429a      	cmp	r2, r3
    47fe:	bf14      	ite	ne
    4800:	2300      	movne	r3, #0
    4802:	2301      	moveq	r3, #1
    4804:	b2db      	uxtb	r3, r3
    4806:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4808:	68fb      	ldr	r3, [r7, #12]
}
    480a:	4618      	mov	r0, r3
    480c:	3714      	adds	r7, #20
    480e:	46bd      	mov	sp, r7
    4810:	f85d 7b04 	ldr.w	r7, [sp], #4
    4814:	4770      	bx	lr
    4816:	bf00      	nop

00004818 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4818:	b580      	push	{r7, lr}
    481a:	b08a      	sub	sp, #40	; 0x28
    481c:	af02      	add	r7, sp, #8
    481e:	60f8      	str	r0, [r7, #12]
    4820:	60b9      	str	r1, [r7, #8]
    4822:	603b      	str	r3, [r7, #0]
    4824:	4613      	mov	r3, r2
    4826:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4828:	88fb      	ldrh	r3, [r7, #6]
    482a:	4618      	mov	r0, r3
    482c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    482e:	f000 ffe5 	bl	57fc <prvAllocateTCBAndStack>
    4832:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4834:	69bb      	ldr	r3, [r7, #24]
    4836:	2b00      	cmp	r3, #0
    4838:	f000 80a1 	beq.w	497e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    483c:	69bb      	ldr	r3, [r7, #24]
    483e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4840:	88fb      	ldrh	r3, [r7, #6]
    4842:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4846:	3b01      	subs	r3, #1
    4848:	009b      	lsls	r3, r3, #2
    484a:	4413      	add	r3, r2
    484c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    484e:	697b      	ldr	r3, [r7, #20]
    4850:	f023 0307 	bic.w	r3, r3, #7
    4854:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4856:	88fb      	ldrh	r3, [r7, #6]
    4858:	9300      	str	r3, [sp, #0]
    485a:	69b8      	ldr	r0, [r7, #24]
    485c:	68b9      	ldr	r1, [r7, #8]
    485e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4862:	f000 febd 	bl	55e0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4866:	6978      	ldr	r0, [r7, #20]
    4868:	68f9      	ldr	r1, [r7, #12]
    486a:	683a      	ldr	r2, [r7, #0]
    486c:	f001 f8f2 	bl	5a54 <pxPortInitialiseStack>
    4870:	4602      	mov	r2, r0
    4872:	69bb      	ldr	r3, [r7, #24]
    4874:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4878:	2b00      	cmp	r3, #0
    487a:	d002      	beq.n	4882 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    487e:	69ba      	ldr	r2, [r7, #24]
    4880:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4882:	f001 f965 	bl	5b50 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4886:	f640 6384 	movw	r3, #3716	; 0xe84
    488a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    488e:	681b      	ldr	r3, [r3, #0]
    4890:	1c5a      	adds	r2, r3, #1
    4892:	f640 6384 	movw	r3, #3716	; 0xe84
    4896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    489a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    489c:	f640 4380 	movw	r3, #3200	; 0xc80
    48a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d10f      	bne.n	48ca <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    48aa:	f640 4380 	movw	r3, #3200	; 0xc80
    48ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b2:	69ba      	ldr	r2, [r7, #24]
    48b4:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    48b6:	f640 6384 	movw	r3, #3716	; 0xe84
    48ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48be:	681b      	ldr	r3, [r3, #0]
    48c0:	2b01      	cmp	r3, #1
    48c2:	d118      	bne.n	48f6 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    48c4:	f000 fec2 	bl	564c <prvInitialiseTaskLists>
    48c8:	e015      	b.n	48f6 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    48ca:	f640 6394 	movw	r3, #3732	; 0xe94
    48ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	2b00      	cmp	r3, #0
    48d6:	d10e      	bne.n	48f6 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    48d8:	f640 4380 	movw	r3, #3200	; 0xc80
    48dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e0:	681b      	ldr	r3, [r3, #0]
    48e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48e6:	429a      	cmp	r2, r3
    48e8:	d805      	bhi.n	48f6 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    48ea:	f640 4380 	movw	r3, #3200	; 0xc80
    48ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f2:	69ba      	ldr	r2, [r7, #24]
    48f4:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    48f6:	69bb      	ldr	r3, [r7, #24]
    48f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48fa:	f640 638c 	movw	r3, #3724	; 0xe8c
    48fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	429a      	cmp	r2, r3
    4906:	d906      	bls.n	4916 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4908:	69bb      	ldr	r3, [r7, #24]
    490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    490c:	f640 638c 	movw	r3, #3724	; 0xe8c
    4910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4914:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4916:	f640 63a8 	movw	r3, #3752	; 0xea8
    491a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	1c5a      	adds	r2, r3, #1
    4922:	f640 63a8 	movw	r3, #3752	; 0xea8
    4926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    492c:	69bb      	ldr	r3, [r7, #24]
    492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4930:	f640 6390 	movw	r3, #3728	; 0xe90
    4934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	429a      	cmp	r2, r3
    493c:	d906      	bls.n	494c <xTaskGenericCreate+0x134>
    493e:	69bb      	ldr	r3, [r7, #24]
    4940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4942:	f640 6390 	movw	r3, #3728	; 0xe90
    4946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494a:	601a      	str	r2, [r3, #0]
    494c:	69bb      	ldr	r3, [r7, #24]
    494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4950:	4613      	mov	r3, r2
    4952:	009b      	lsls	r3, r3, #2
    4954:	4413      	add	r3, r2
    4956:	009b      	lsls	r3, r3, #2
    4958:	f640 4284 	movw	r2, #3204	; 0xc84
    495c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4960:	441a      	add	r2, r3
    4962:	69bb      	ldr	r3, [r7, #24]
    4964:	3304      	adds	r3, #4
    4966:	4610      	mov	r0, r2
    4968:	4619      	mov	r1, r3
    496a:	f7ff fadf 	bl	3f2c <vListInsertEnd>

			xReturn = pdPASS;
    496e:	2301      	movs	r3, #1
    4970:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4972:	69b8      	ldr	r0, [r7, #24]
    4974:	f012 fdc0 	bl	174f8 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4978:	f001 f900 	bl	5b7c <vPortExitCritical>
    497c:	e002      	b.n	4984 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    497e:	f04f 33ff 	mov.w	r3, #4294967295
    4982:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4984:	69fb      	ldr	r3, [r7, #28]
    4986:	2b01      	cmp	r3, #1
    4988:	d111      	bne.n	49ae <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    498a:	f640 6394 	movw	r3, #3732	; 0xe94
    498e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	2b00      	cmp	r3, #0
    4996:	d00a      	beq.n	49ae <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4998:	f640 4380 	movw	r3, #3200	; 0xc80
    499c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    49a6:	429a      	cmp	r2, r3
    49a8:	d201      	bcs.n	49ae <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    49aa:	f001 f8c3 	bl	5b34 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    49ae:	69fb      	ldr	r3, [r7, #28]
}
    49b0:	4618      	mov	r0, r3
    49b2:	3720      	adds	r7, #32
    49b4:	46bd      	mov	sp, r7
    49b6:	bd80      	pop	{r7, pc}

000049b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    49b8:	b580      	push	{r7, lr}
    49ba:	b084      	sub	sp, #16
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    49c0:	f001 f8c6 	bl	5b50 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    49c4:	f640 4380 	movw	r3, #3200	; 0xc80
    49c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	687a      	ldr	r2, [r7, #4]
    49d0:	429a      	cmp	r2, r3
    49d2:	d101      	bne.n	49d8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    49d4:	2300      	movs	r3, #0
    49d6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	2b00      	cmp	r3, #0
    49dc:	d105      	bne.n	49ea <vTaskDelete+0x32>
    49de:	f640 4380 	movw	r3, #3200	; 0xc80
    49e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	e000      	b.n	49ec <vTaskDelete+0x34>
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    49ee:	68fb      	ldr	r3, [r7, #12]
    49f0:	3304      	adds	r3, #4
    49f2:	4618      	mov	r0, r3
    49f4:	f7ff fafa 	bl	3fec <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49fc:	2b00      	cmp	r3, #0
    49fe:	d004      	beq.n	4a0a <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4a00:	68fb      	ldr	r3, [r7, #12]
    4a02:	3318      	adds	r3, #24
    4a04:	4618      	mov	r0, r3
    4a06:	f7ff faf1 	bl	3fec <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	3304      	adds	r3, #4
    4a0e:	f640 6058 	movw	r0, #3672	; 0xe58
    4a12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4a16:	4619      	mov	r1, r3
    4a18:	f7ff fa88 	bl	3f2c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4a1c:	f640 636c 	movw	r3, #3692	; 0xe6c
    4a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a24:	681b      	ldr	r3, [r3, #0]
    4a26:	1c5a      	adds	r2, r3, #1
    4a28:	f640 636c 	movw	r3, #3692	; 0xe6c
    4a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a30:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4a32:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	1c5a      	adds	r2, r3, #1
    4a3e:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a46:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4a48:	f001 f898 	bl	5b7c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4a4c:	f640 6394 	movw	r3, #3732	; 0xe94
    4a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d004      	beq.n	4a64 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d101      	bne.n	4a64 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4a60:	f001 f868 	bl	5b34 <vPortYieldFromISR>
			}
		}
	}
    4a64:	3710      	adds	r7, #16
    4a66:	46bd      	mov	sp, r7
    4a68:	bd80      	pop	{r7, pc}
    4a6a:	bf00      	nop

00004a6c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b086      	sub	sp, #24
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
    4a74:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4a76:	2300      	movs	r3, #0
    4a78:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4a7a:	f000 fa8b 	bl	4f94 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	681a      	ldr	r2, [r3, #0]
    4a82:	683b      	ldr	r3, [r7, #0]
    4a84:	4413      	add	r3, r2
    4a86:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	681a      	ldr	r2, [r3, #0]
    4a8c:	f640 6388 	movw	r3, #3720	; 0xe88
    4a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	429a      	cmp	r2, r3
    4a98:	d90f      	bls.n	4aba <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	681a      	ldr	r2, [r3, #0]
    4a9e:	693b      	ldr	r3, [r7, #16]
    4aa0:	429a      	cmp	r2, r3
    4aa2:	d919      	bls.n	4ad8 <vTaskDelayUntil+0x6c>
    4aa4:	f640 6388 	movw	r3, #3720	; 0xe88
    4aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	693a      	ldr	r2, [r7, #16]
    4ab0:	429a      	cmp	r2, r3
    4ab2:	d911      	bls.n	4ad8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ab4:	2301      	movs	r3, #1
    4ab6:	617b      	str	r3, [r7, #20]
    4ab8:	e00e      	b.n	4ad8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	681a      	ldr	r2, [r3, #0]
    4abe:	693b      	ldr	r3, [r7, #16]
    4ac0:	429a      	cmp	r2, r3
    4ac2:	d807      	bhi.n	4ad4 <vTaskDelayUntil+0x68>
    4ac4:	f640 6388 	movw	r3, #3720	; 0xe88
    4ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	693a      	ldr	r2, [r7, #16]
    4ad0:	429a      	cmp	r2, r3
    4ad2:	d901      	bls.n	4ad8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ad4:	2301      	movs	r3, #1
    4ad6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	693a      	ldr	r2, [r7, #16]
    4adc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4ade:	697b      	ldr	r3, [r7, #20]
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d00b      	beq.n	4afc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4ae4:	f640 4380 	movw	r3, #3200	; 0xc80
    4ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	3304      	adds	r3, #4
    4af0:	4618      	mov	r0, r3
    4af2:	f7ff fa7b 	bl	3fec <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4af6:	6938      	ldr	r0, [r7, #16]
    4af8:	f000 fe3c 	bl	5774 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4afc:	f000 fa5c 	bl	4fb8 <xTaskResumeAll>
    4b00:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	2b00      	cmp	r3, #0
    4b06:	d101      	bne.n	4b0c <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4b08:	f001 f814 	bl	5b34 <vPortYieldFromISR>
		}
	}
    4b0c:	3718      	adds	r7, #24
    4b0e:	46bd      	mov	sp, r7
    4b10:	bd80      	pop	{r7, pc}
    4b12:	bf00      	nop

00004b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4b14:	b580      	push	{r7, lr}
    4b16:	b084      	sub	sp, #16
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4b1c:	2300      	movs	r3, #0
    4b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	2b00      	cmp	r3, #0
    4b24:	d018      	beq.n	4b58 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4b26:	f000 fa35 	bl	4f94 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4b2a:	f640 6388 	movw	r3, #3720	; 0xe88
    4b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b32:	681a      	ldr	r2, [r3, #0]
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	4413      	add	r3, r2
    4b38:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4b3a:	f640 4380 	movw	r3, #3200	; 0xc80
    4b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	3304      	adds	r3, #4
    4b46:	4618      	mov	r0, r3
    4b48:	f7ff fa50 	bl	3fec <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4b4c:	68b8      	ldr	r0, [r7, #8]
    4b4e:	f000 fe11 	bl	5774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4b52:	f000 fa31 	bl	4fb8 <xTaskResumeAll>
    4b56:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4b58:	68fb      	ldr	r3, [r7, #12]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	d101      	bne.n	4b62 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4b5e:	f000 ffe9 	bl	5b34 <vPortYieldFromISR>
		}
	}
    4b62:	3710      	adds	r7, #16
    4b64:	46bd      	mov	sp, r7
    4b66:	bd80      	pop	{r7, pc}

00004b68 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b084      	sub	sp, #16
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4b70:	f000 ffee 	bl	5b50 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	2b00      	cmp	r3, #0
    4b78:	d105      	bne.n	4b86 <uxTaskPriorityGet+0x1e>
    4b7a:	f640 4380 	movw	r3, #3200	; 0xc80
    4b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	e000      	b.n	4b88 <uxTaskPriorityGet+0x20>
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4b8a:	68fb      	ldr	r3, [r7, #12]
    4b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b8e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4b90:	f000 fff4 	bl	5b7c <vPortExitCritical>

		return uxReturn;
    4b94:	68bb      	ldr	r3, [r7, #8]
	}
    4b96:	4618      	mov	r0, r3
    4b98:	3710      	adds	r7, #16
    4b9a:	46bd      	mov	sp, r7
    4b9c:	bd80      	pop	{r7, pc}
    4b9e:	bf00      	nop

00004ba0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b086      	sub	sp, #24
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
    4ba8:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4baa:	2300      	movs	r3, #0
    4bac:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4bae:	683b      	ldr	r3, [r7, #0]
    4bb0:	2b13      	cmp	r3, #19
    4bb2:	d901      	bls.n	4bb8 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4bb4:	2313      	movs	r3, #19
    4bb6:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4bb8:	f000 ffca 	bl	5b50 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4bbc:	f640 4380 	movw	r3, #3200	; 0xc80
    4bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc4:	681b      	ldr	r3, [r3, #0]
    4bc6:	687a      	ldr	r2, [r7, #4]
    4bc8:	429a      	cmp	r2, r3
    4bca:	d101      	bne.n	4bd0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4bcc:	2300      	movs	r3, #0
    4bce:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d105      	bne.n	4be2 <vTaskPrioritySet+0x42>
    4bd6:	f640 4380 	movw	r3, #3200	; 0xc80
    4bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	e000      	b.n	4be4 <vTaskPrioritySet+0x44>
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4be6:	693b      	ldr	r3, [r7, #16]
    4be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bea:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4bec:	68fa      	ldr	r2, [r7, #12]
    4bee:	683b      	ldr	r3, [r7, #0]
    4bf0:	429a      	cmp	r2, r3
    4bf2:	d058      	beq.n	4ca6 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4bf4:	683a      	ldr	r2, [r7, #0]
    4bf6:	68fb      	ldr	r3, [r7, #12]
    4bf8:	429a      	cmp	r2, r3
    4bfa:	d905      	bls.n	4c08 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d007      	beq.n	4c12 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4c02:	2301      	movs	r3, #1
    4c04:	617b      	str	r3, [r7, #20]
    4c06:	e004      	b.n	4c12 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d101      	bne.n	4c12 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4c0e:	2301      	movs	r3, #1
    4c10:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4c16:	693b      	ldr	r3, [r7, #16]
    4c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c1a:	429a      	cmp	r2, r3
    4c1c:	d102      	bne.n	4c24 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4c1e:	693b      	ldr	r3, [r7, #16]
    4c20:	683a      	ldr	r2, [r7, #0]
    4c22:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4c24:	693b      	ldr	r3, [r7, #16]
    4c26:	683a      	ldr	r2, [r7, #0]
    4c28:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4c2a:	683b      	ldr	r3, [r7, #0]
    4c2c:	f1c3 0214 	rsb	r2, r3, #20
    4c30:	693b      	ldr	r3, [r7, #16]
    4c32:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4c34:	693b      	ldr	r3, [r7, #16]
    4c36:	6959      	ldr	r1, [r3, #20]
    4c38:	68fa      	ldr	r2, [r7, #12]
    4c3a:	4613      	mov	r3, r2
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	4413      	add	r3, r2
    4c40:	009b      	lsls	r3, r3, #2
    4c42:	f640 4284 	movw	r2, #3204	; 0xc84
    4c46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c4a:	4413      	add	r3, r2
    4c4c:	4299      	cmp	r1, r3
    4c4e:	d125      	bne.n	4c9c <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4c50:	693b      	ldr	r3, [r7, #16]
    4c52:	3304      	adds	r3, #4
    4c54:	4618      	mov	r0, r3
    4c56:	f7ff f9c9 	bl	3fec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c5a:	693b      	ldr	r3, [r7, #16]
    4c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c5e:	f640 6390 	movw	r3, #3728	; 0xe90
    4c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	429a      	cmp	r2, r3
    4c6a:	d906      	bls.n	4c7a <vTaskPrioritySet+0xda>
    4c6c:	693b      	ldr	r3, [r7, #16]
    4c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c70:	f640 6390 	movw	r3, #3728	; 0xe90
    4c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c78:	601a      	str	r2, [r3, #0]
    4c7a:	693b      	ldr	r3, [r7, #16]
    4c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c7e:	4613      	mov	r3, r2
    4c80:	009b      	lsls	r3, r3, #2
    4c82:	4413      	add	r3, r2
    4c84:	009b      	lsls	r3, r3, #2
    4c86:	f640 4284 	movw	r2, #3204	; 0xc84
    4c8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c8e:	441a      	add	r2, r3
    4c90:	693b      	ldr	r3, [r7, #16]
    4c92:	3304      	adds	r3, #4
    4c94:	4610      	mov	r0, r2
    4c96:	4619      	mov	r1, r3
    4c98:	f7ff f948 	bl	3f2c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4c9c:	697b      	ldr	r3, [r7, #20]
    4c9e:	2b01      	cmp	r3, #1
    4ca0:	d101      	bne.n	4ca6 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4ca2:	f000 ff47 	bl	5b34 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4ca6:	f000 ff69 	bl	5b7c <vPortExitCritical>
	}
    4caa:	3718      	adds	r7, #24
    4cac:	46bd      	mov	sp, r7
    4cae:	bd80      	pop	{r7, pc}

00004cb0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4cb0:	b580      	push	{r7, lr}
    4cb2:	b084      	sub	sp, #16
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4cb8:	f000 ff4a 	bl	5b50 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4cbc:	f640 4380 	movw	r3, #3200	; 0xc80
    4cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	687a      	ldr	r2, [r7, #4]
    4cc8:	429a      	cmp	r2, r3
    4cca:	d101      	bne.n	4cd0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4ccc:	2300      	movs	r3, #0
    4cce:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d105      	bne.n	4ce2 <vTaskSuspend+0x32>
    4cd6:	f640 4380 	movw	r3, #3200	; 0xc80
    4cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cde:	681b      	ldr	r3, [r3, #0]
    4ce0:	e000      	b.n	4ce4 <vTaskSuspend+0x34>
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ce6:	68fb      	ldr	r3, [r7, #12]
    4ce8:	3304      	adds	r3, #4
    4cea:	4618      	mov	r0, r3
    4cec:	f7ff f97e 	bl	3fec <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	d004      	beq.n	4d02 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cf8:	68fb      	ldr	r3, [r7, #12]
    4cfa:	3318      	adds	r3, #24
    4cfc:	4618      	mov	r0, r3
    4cfe:	f7ff f975 	bl	3fec <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4d02:	68fb      	ldr	r3, [r7, #12]
    4d04:	3304      	adds	r3, #4
    4d06:	f640 6070 	movw	r0, #3696	; 0xe70
    4d0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4d0e:	4619      	mov	r1, r3
    4d10:	f7ff f90c 	bl	3f2c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4d14:	f000 ff32 	bl	5b7c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d11e      	bne.n	4d5c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4d1e:	f640 6394 	movw	r3, #3732	; 0xe94
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d002      	beq.n	4d32 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4d2c:	f000 ff02 	bl	5b34 <vPortYieldFromISR>
    4d30:	e014      	b.n	4d5c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4d32:	f640 6370 	movw	r3, #3696	; 0xe70
    4d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3a:	681a      	ldr	r2, [r3, #0]
    4d3c:	f640 6384 	movw	r3, #3716	; 0xe84
    4d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d44:	681b      	ldr	r3, [r3, #0]
    4d46:	429a      	cmp	r2, r3
    4d48:	d106      	bne.n	4d58 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4d4a:	f640 4380 	movw	r3, #3200	; 0xc80
    4d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d52:	2200      	movs	r2, #0
    4d54:	601a      	str	r2, [r3, #0]
    4d56:	e001      	b.n	4d5c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4d58:	f000 fadc 	bl	5314 <vTaskSwitchContext>
				}
			}
		}
	}
    4d5c:	3710      	adds	r7, #16
    4d5e:	46bd      	mov	sp, r7
    4d60:	bd80      	pop	{r7, pc}
    4d62:	bf00      	nop

00004d64 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4d64:	b480      	push	{r7}
    4d66:	b085      	sub	sp, #20
    4d68:	af00      	add	r7, sp, #0
    4d6a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4d6c:	2300      	movs	r3, #0
    4d6e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4d74:	68bb      	ldr	r3, [r7, #8]
    4d76:	695a      	ldr	r2, [r3, #20]
    4d78:	f640 6370 	movw	r3, #3696	; 0xe70
    4d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d80:	429a      	cmp	r2, r3
    4d82:	d10d      	bne.n	4da0 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4d84:	68bb      	ldr	r3, [r7, #8]
    4d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d88:	f640 6344 	movw	r3, #3652	; 0xe44
    4d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d90:	429a      	cmp	r2, r3
    4d92:	d005      	beq.n	4da0 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4d94:	68bb      	ldr	r3, [r7, #8]
    4d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d101      	bne.n	4da0 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4d9c:	2301      	movs	r3, #1
    4d9e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4da0:	68fb      	ldr	r3, [r7, #12]
	}
    4da2:	4618      	mov	r0, r3
    4da4:	3714      	adds	r7, #20
    4da6:	46bd      	mov	sp, r7
    4da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dac:	4770      	bx	lr
    4dae:	bf00      	nop

00004db0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4db0:	b580      	push	{r7, lr}
    4db2:	b084      	sub	sp, #16
    4db4:	af00      	add	r7, sp, #0
    4db6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d043      	beq.n	4e4a <vTaskResume+0x9a>
    4dc2:	f640 4380 	movw	r3, #3200	; 0xc80
    4dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	68fa      	ldr	r2, [r7, #12]
    4dce:	429a      	cmp	r2, r3
    4dd0:	d03b      	beq.n	4e4a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4dd2:	f000 febd 	bl	5b50 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4dd6:	68f8      	ldr	r0, [r7, #12]
    4dd8:	f7ff ffc4 	bl	4d64 <xTaskIsTaskSuspended>
    4ddc:	4603      	mov	r3, r0
    4dde:	2b01      	cmp	r3, #1
    4de0:	d131      	bne.n	4e46 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	3304      	adds	r3, #4
    4de6:	4618      	mov	r0, r3
    4de8:	f7ff f900 	bl	3fec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4dec:	68fb      	ldr	r3, [r7, #12]
    4dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4df0:	f640 6390 	movw	r3, #3728	; 0xe90
    4df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d906      	bls.n	4e0c <vTaskResume+0x5c>
    4dfe:	68fb      	ldr	r3, [r7, #12]
    4e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e02:	f640 6390 	movw	r3, #3728	; 0xe90
    4e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0a:	601a      	str	r2, [r3, #0]
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e10:	4613      	mov	r3, r2
    4e12:	009b      	lsls	r3, r3, #2
    4e14:	4413      	add	r3, r2
    4e16:	009b      	lsls	r3, r3, #2
    4e18:	f640 4284 	movw	r2, #3204	; 0xc84
    4e1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e20:	441a      	add	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	3304      	adds	r3, #4
    4e26:	4610      	mov	r0, r2
    4e28:	4619      	mov	r1, r3
    4e2a:	f7ff f87f 	bl	3f2c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4e2e:	68fb      	ldr	r3, [r7, #12]
    4e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e32:	f640 4380 	movw	r3, #3200	; 0xc80
    4e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e3a:	681b      	ldr	r3, [r3, #0]
    4e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e3e:	429a      	cmp	r2, r3
    4e40:	d301      	bcc.n	4e46 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4e42:	f000 fe77 	bl	5b34 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4e46:	f000 fe99 	bl	5b7c <vPortExitCritical>
		}
	}
    4e4a:	3710      	adds	r7, #16
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bd80      	pop	{r7, pc}

00004e50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4e50:	b580      	push	{r7, lr}
    4e52:	b086      	sub	sp, #24
    4e54:	af00      	add	r7, sp, #0
    4e56:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e58:	2300      	movs	r3, #0
    4e5a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4e60:	2300      	movs	r3, #0
    4e62:	60fb      	str	r3, [r7, #12]
    4e64:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e68:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4e6c:	6938      	ldr	r0, [r7, #16]
    4e6e:	f7ff ff79 	bl	4d64 <xTaskIsTaskSuspended>
    4e72:	4603      	mov	r3, r0
    4e74:	2b01      	cmp	r3, #1
    4e76:	d144      	bne.n	4f02 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e78:	f640 6398 	movw	r3, #3736	; 0xe98
    4e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e80:	681b      	ldr	r3, [r3, #0]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d134      	bne.n	4ef0 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4e86:	693b      	ldr	r3, [r7, #16]
    4e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e8a:	f640 4380 	movw	r3, #3200	; 0xc80
    4e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e92:	681b      	ldr	r3, [r3, #0]
    4e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e96:	429a      	cmp	r2, r3
    4e98:	bf34      	ite	cc
    4e9a:	2300      	movcc	r3, #0
    4e9c:	2301      	movcs	r3, #1
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4ea2:	693b      	ldr	r3, [r7, #16]
    4ea4:	3304      	adds	r3, #4
    4ea6:	4618      	mov	r0, r3
    4ea8:	f7ff f8a0 	bl	3fec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4eac:	693b      	ldr	r3, [r7, #16]
    4eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eb0:	f640 6390 	movw	r3, #3728	; 0xe90
    4eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	429a      	cmp	r2, r3
    4ebc:	d906      	bls.n	4ecc <xTaskResumeFromISR+0x7c>
    4ebe:	693b      	ldr	r3, [r7, #16]
    4ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec2:	f640 6390 	movw	r3, #3728	; 0xe90
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	601a      	str	r2, [r3, #0]
    4ecc:	693b      	ldr	r3, [r7, #16]
    4ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed0:	4613      	mov	r3, r2
    4ed2:	009b      	lsls	r3, r3, #2
    4ed4:	4413      	add	r3, r2
    4ed6:	009b      	lsls	r3, r3, #2
    4ed8:	f640 4284 	movw	r2, #3204	; 0xc84
    4edc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ee0:	441a      	add	r2, r3
    4ee2:	693b      	ldr	r3, [r7, #16]
    4ee4:	3304      	adds	r3, #4
    4ee6:	4610      	mov	r0, r2
    4ee8:	4619      	mov	r1, r3
    4eea:	f7ff f81f 	bl	3f2c <vListInsertEnd>
    4eee:	e008      	b.n	4f02 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4ef0:	693b      	ldr	r3, [r7, #16]
    4ef2:	3318      	adds	r3, #24
    4ef4:	f640 6044 	movw	r0, #3652	; 0xe44
    4ef8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4efc:	4619      	mov	r1, r3
    4efe:	f7ff f815 	bl	3f2c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4f02:	f04f 0000 	mov.w	r0, #0
    4f06:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4f0a:	697b      	ldr	r3, [r7, #20]
	}
    4f0c:	4618      	mov	r0, r3
    4f0e:	3718      	adds	r7, #24
    4f10:	46bd      	mov	sp, r7
    4f12:	bd80      	pop	{r7, pc}

00004f14 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b086      	sub	sp, #24
    4f18:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4f1a:	2300      	movs	r3, #0
    4f1c:	9300      	str	r3, [sp, #0]
    4f1e:	2300      	movs	r3, #0
    4f20:	9301      	str	r3, [sp, #4]
    4f22:	2300      	movs	r3, #0
    4f24:	9302      	str	r3, [sp, #8]
    4f26:	2300      	movs	r3, #0
    4f28:	9303      	str	r3, [sp, #12]
    4f2a:	f245 50cd 	movw	r0, #21965	; 0x55cd
    4f2e:	f2c0 0000 	movt	r0, #0
    4f32:	f648 0198 	movw	r1, #34968	; 0x8898
    4f36:	f2c0 0101 	movt	r1, #1
    4f3a:	2280      	movs	r2, #128	; 0x80
    4f3c:	2300      	movs	r3, #0
    4f3e:	f7ff fc6b 	bl	4818 <xTaskGenericCreate>
    4f42:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2b01      	cmp	r3, #1
    4f48:	d111      	bne.n	4f6e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4f4a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f4e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4f52:	f640 6394 	movw	r3, #3732	; 0xe94
    4f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f5a:	2201      	movs	r2, #1
    4f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4f5e:	f640 6388 	movw	r3, #3720	; 0xe88
    4f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f66:	2200      	movs	r2, #0
    4f68:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4f6a:	f000 fdb5 	bl	5ad8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4f6e:	3708      	adds	r7, #8
    4f70:	46bd      	mov	sp, r7
    4f72:	bd80      	pop	{r7, pc}

00004f74 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4f74:	b580      	push	{r7, lr}
    4f76:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4f78:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f7c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4f80:	f640 6394 	movw	r3, #3732	; 0xe94
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	2200      	movs	r2, #0
    4f8a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4f8c:	f000 fdcc 	bl	5b28 <vPortEndScheduler>
}
    4f90:	bd80      	pop	{r7, pc}
    4f92:	bf00      	nop

00004f94 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4f94:	b480      	push	{r7}
    4f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4f98:	f640 6398 	movw	r3, #3736	; 0xe98
    4f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	1c5a      	adds	r2, r3, #1
    4fa4:	f640 6398 	movw	r3, #3736	; 0xe98
    4fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fac:	601a      	str	r2, [r3, #0]
}
    4fae:	46bd      	mov	sp, r7
    4fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb4:	4770      	bx	lr
    4fb6:	bf00      	nop

00004fb8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4fb8:	b590      	push	{r4, r7, lr}
    4fba:	b083      	sub	sp, #12
    4fbc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4fbe:	2300      	movs	r3, #0
    4fc0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4fc2:	f000 fdc5 	bl	5b50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4fc6:	f640 6398 	movw	r3, #3736	; 0xe98
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	681b      	ldr	r3, [r3, #0]
    4fd0:	1e5a      	subs	r2, r3, #1
    4fd2:	f640 6398 	movw	r3, #3736	; 0xe98
    4fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fda:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4fdc:	f640 6398 	movw	r3, #3736	; 0xe98
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d177      	bne.n	50da <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4fea:	f640 6384 	movw	r3, #3716	; 0xe84
    4fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d070      	beq.n	50da <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4ff8:	2300      	movs	r3, #0
    4ffa:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4ffc:	e036      	b.n	506c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4ffe:	f640 6344 	movw	r3, #3652	; 0xe44
    5002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5006:	68db      	ldr	r3, [r3, #12]
    5008:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    500a:	f104 0318 	add.w	r3, r4, #24
    500e:	4618      	mov	r0, r3
    5010:	f7fe ffec 	bl	3fec <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5014:	1d23      	adds	r3, r4, #4
    5016:	4618      	mov	r0, r3
    5018:	f7fe ffe8 	bl	3fec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    501c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    501e:	f640 6390 	movw	r3, #3728	; 0xe90
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	429a      	cmp	r2, r3
    502a:	d905      	bls.n	5038 <xTaskResumeAll+0x80>
    502c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    502e:	f640 6390 	movw	r3, #3728	; 0xe90
    5032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5036:	601a      	str	r2, [r3, #0]
    5038:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    503a:	4613      	mov	r3, r2
    503c:	009b      	lsls	r3, r3, #2
    503e:	4413      	add	r3, r2
    5040:	009b      	lsls	r3, r3, #2
    5042:	f640 4284 	movw	r2, #3204	; 0xc84
    5046:	f2c2 0200 	movt	r2, #8192	; 0x2000
    504a:	441a      	add	r2, r3
    504c:	1d23      	adds	r3, r4, #4
    504e:	4610      	mov	r0, r2
    5050:	4619      	mov	r1, r3
    5052:	f7fe ff6b 	bl	3f2c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5058:	f640 4380 	movw	r3, #3200	; 0xc80
    505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5064:	429a      	cmp	r2, r3
    5066:	d301      	bcc.n	506c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5068:	2301      	movs	r3, #1
    506a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    506c:	f640 6344 	movw	r3, #3652	; 0xe44
    5070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5074:	681b      	ldr	r3, [r3, #0]
    5076:	2b00      	cmp	r3, #0
    5078:	d1c1      	bne.n	4ffe <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    507a:	f640 639c 	movw	r3, #3740	; 0xe9c
    507e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	2b00      	cmp	r3, #0
    5086:	d014      	beq.n	50b2 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5088:	e00c      	b.n	50a4 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    508a:	f000 f865 	bl	5158 <vTaskIncrementTick>
						--uxMissedTicks;
    508e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	1e5a      	subs	r2, r3, #1
    509a:	f640 639c 	movw	r3, #3740	; 0xe9c
    509e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    50a4:	f640 639c 	movw	r3, #3740	; 0xe9c
    50a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ac:	681b      	ldr	r3, [r3, #0]
    50ae:	2b00      	cmp	r3, #0
    50b0:	d1eb      	bne.n	508a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    50b2:	683b      	ldr	r3, [r7, #0]
    50b4:	2b01      	cmp	r3, #1
    50b6:	d006      	beq.n	50c6 <xTaskResumeAll+0x10e>
    50b8:	f640 63a0 	movw	r3, #3744	; 0xea0
    50bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	2b01      	cmp	r3, #1
    50c4:	d109      	bne.n	50da <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    50c6:	2301      	movs	r3, #1
    50c8:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    50ca:	f640 63a0 	movw	r3, #3744	; 0xea0
    50ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d2:	2200      	movs	r2, #0
    50d4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    50d6:	f000 fd2d 	bl	5b34 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    50da:	f000 fd4f 	bl	5b7c <vPortExitCritical>

	return xAlreadyYielded;
    50de:	687b      	ldr	r3, [r7, #4]
}
    50e0:	4618      	mov	r0, r3
    50e2:	370c      	adds	r7, #12
    50e4:	46bd      	mov	sp, r7
    50e6:	bd90      	pop	{r4, r7, pc}

000050e8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    50ee:	f000 fd2f 	bl	5b50 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    50f2:	f640 6388 	movw	r3, #3720	; 0xe88
    50f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fa:	681b      	ldr	r3, [r3, #0]
    50fc:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    50fe:	f000 fd3d 	bl	5b7c <vPortExitCritical>

	return xTicks;
    5102:	687b      	ldr	r3, [r7, #4]
}
    5104:	4618      	mov	r0, r3
    5106:	3708      	adds	r7, #8
    5108:	46bd      	mov	sp, r7
    510a:	bd80      	pop	{r7, pc}

0000510c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    510c:	b480      	push	{r7}
    510e:	b083      	sub	sp, #12
    5110:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5112:	2300      	movs	r3, #0
    5114:	607b      	str	r3, [r7, #4]
    5116:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    511a:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    511e:	f640 6388 	movw	r3, #3720	; 0xe88
    5122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    512a:	f04f 0000 	mov.w	r0, #0
    512e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5132:	683b      	ldr	r3, [r7, #0]
}
    5134:	4618      	mov	r0, r3
    5136:	370c      	adds	r7, #12
    5138:	46bd      	mov	sp, r7
    513a:	f85d 7b04 	ldr.w	r7, [sp], #4
    513e:	4770      	bx	lr

00005140 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5140:	b480      	push	{r7}
    5142:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5144:	f640 6384 	movw	r3, #3716	; 0xe84
    5148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    514c:	681b      	ldr	r3, [r3, #0]
}
    514e:	4618      	mov	r0, r3
    5150:	46bd      	mov	sp, r7
    5152:	f85d 7b04 	ldr.w	r7, [sp], #4
    5156:	4770      	bx	lr

00005158 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5158:	b580      	push	{r7, lr}
    515a:	b084      	sub	sp, #16
    515c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    515e:	f640 6398 	movw	r3, #3736	; 0xe98
    5162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	2b00      	cmp	r3, #0
    516a:	f040 80b9 	bne.w	52e0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    516e:	f640 6388 	movw	r3, #3720	; 0xe88
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	681b      	ldr	r3, [r3, #0]
    5178:	1c5a      	adds	r2, r3, #1
    517a:	f640 6388 	movw	r3, #3720	; 0xe88
    517e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5182:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5184:	f640 6388 	movw	r3, #3720	; 0xe88
    5188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	2b00      	cmp	r3, #0
    5190:	d13f      	bne.n	5212 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5192:	f640 633c 	movw	r3, #3644	; 0xe3c
    5196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    519e:	f640 6340 	movw	r3, #3648	; 0xe40
    51a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a6:	681a      	ldr	r2, [r3, #0]
    51a8:	f640 633c 	movw	r3, #3644	; 0xe3c
    51ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    51b2:	f640 6340 	movw	r3, #3648	; 0xe40
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	68fa      	ldr	r2, [r7, #12]
    51bc:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    51be:	f640 63a4 	movw	r3, #3748	; 0xea4
    51c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c6:	681b      	ldr	r3, [r3, #0]
    51c8:	1c5a      	adds	r2, r3, #1
    51ca:	f640 63a4 	movw	r3, #3748	; 0xea4
    51ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    51d4:	f640 633c 	movw	r3, #3644	; 0xe3c
    51d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d107      	bne.n	51f4 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    51e4:	f240 33e0 	movw	r3, #992	; 0x3e0
    51e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ec:	f04f 32ff 	mov.w	r2, #4294967295
    51f0:	601a      	str	r2, [r3, #0]
    51f2:	e00e      	b.n	5212 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    51f4:	f640 633c 	movw	r3, #3644	; 0xe3c
    51f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	68db      	ldr	r3, [r3, #12]
    5200:	68db      	ldr	r3, [r3, #12]
    5202:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5204:	68bb      	ldr	r3, [r7, #8]
    5206:	685a      	ldr	r2, [r3, #4]
    5208:	f240 33e0 	movw	r3, #992	; 0x3e0
    520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5210:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5212:	f640 6388 	movw	r3, #3720	; 0xe88
    5216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521a:	681a      	ldr	r2, [r3, #0]
    521c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	429a      	cmp	r2, r3
    5228:	d359      	bcc.n	52de <vTaskIncrementTick+0x186>
    522a:	f640 633c 	movw	r3, #3644	; 0xe3c
    522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d107      	bne.n	524a <vTaskIncrementTick+0xf2>
    523a:	f240 33e0 	movw	r3, #992	; 0x3e0
    523e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5242:	f04f 32ff 	mov.w	r2, #4294967295
    5246:	601a      	str	r2, [r3, #0]
    5248:	e049      	b.n	52de <vTaskIncrementTick+0x186>
    524a:	f640 633c 	movw	r3, #3644	; 0xe3c
    524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5252:	681b      	ldr	r3, [r3, #0]
    5254:	68db      	ldr	r3, [r3, #12]
    5256:	68db      	ldr	r3, [r3, #12]
    5258:	60bb      	str	r3, [r7, #8]
    525a:	68bb      	ldr	r3, [r7, #8]
    525c:	685b      	ldr	r3, [r3, #4]
    525e:	607b      	str	r3, [r7, #4]
    5260:	f640 6388 	movw	r3, #3720	; 0xe88
    5264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5268:	681a      	ldr	r2, [r3, #0]
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	429a      	cmp	r2, r3
    526e:	d206      	bcs.n	527e <vTaskIncrementTick+0x126>
    5270:	f240 33e0 	movw	r3, #992	; 0x3e0
    5274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5278:	687a      	ldr	r2, [r7, #4]
    527a:	601a      	str	r2, [r3, #0]
    527c:	e02f      	b.n	52de <vTaskIncrementTick+0x186>
    527e:	68bb      	ldr	r3, [r7, #8]
    5280:	3304      	adds	r3, #4
    5282:	4618      	mov	r0, r3
    5284:	f7fe feb2 	bl	3fec <vListRemove>
    5288:	68bb      	ldr	r3, [r7, #8]
    528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    528c:	2b00      	cmp	r3, #0
    528e:	d004      	beq.n	529a <vTaskIncrementTick+0x142>
    5290:	68bb      	ldr	r3, [r7, #8]
    5292:	3318      	adds	r3, #24
    5294:	4618      	mov	r0, r3
    5296:	f7fe fea9 	bl	3fec <vListRemove>
    529a:	68bb      	ldr	r3, [r7, #8]
    529c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    529e:	f640 6390 	movw	r3, #3728	; 0xe90
    52a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	429a      	cmp	r2, r3
    52aa:	d906      	bls.n	52ba <vTaskIncrementTick+0x162>
    52ac:	68bb      	ldr	r3, [r7, #8]
    52ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52b0:	f640 6390 	movw	r3, #3728	; 0xe90
    52b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b8:	601a      	str	r2, [r3, #0]
    52ba:	68bb      	ldr	r3, [r7, #8]
    52bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52be:	4613      	mov	r3, r2
    52c0:	009b      	lsls	r3, r3, #2
    52c2:	4413      	add	r3, r2
    52c4:	009b      	lsls	r3, r3, #2
    52c6:	f640 4284 	movw	r2, #3204	; 0xc84
    52ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52ce:	441a      	add	r2, r3
    52d0:	68bb      	ldr	r3, [r7, #8]
    52d2:	3304      	adds	r3, #4
    52d4:	4610      	mov	r0, r2
    52d6:	4619      	mov	r1, r3
    52d8:	f7fe fe28 	bl	3f2c <vListInsertEnd>
    52dc:	e7a5      	b.n	522a <vTaskIncrementTick+0xd2>
    52de:	e00c      	b.n	52fa <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    52e0:	f640 639c 	movw	r3, #3740	; 0xe9c
    52e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e8:	681b      	ldr	r3, [r3, #0]
    52ea:	1c5a      	adds	r2, r3, #1
    52ec:	f640 639c 	movw	r3, #3740	; 0xe9c
    52f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    52f6:	f012 f911 	bl	1751c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    52fa:	f640 639c 	movw	r3, #3740	; 0xe9c
    52fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	2b00      	cmp	r3, #0
    5306:	d101      	bne.n	530c <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    5308:	f012 f908 	bl	1751c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    530c:	3710      	adds	r7, #16
    530e:	46bd      	mov	sp, r7
    5310:	bd80      	pop	{r7, pc}
    5312:	bf00      	nop

00005314 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    531a:	f640 6398 	movw	r3, #3736	; 0xe98
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	2b00      	cmp	r3, #0
    5326:	d006      	beq.n	5336 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5328:	f640 63a0 	movw	r3, #3744	; 0xea0
    532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5330:	2201      	movs	r2, #1
    5332:	601a      	str	r2, [r3, #0]
    5334:	e047      	b.n	53c6 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5336:	f012 f8eb 	bl	17510 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    533a:	e00a      	b.n	5352 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    533c:	f640 6390 	movw	r3, #3728	; 0xe90
    5340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	1e5a      	subs	r2, r3, #1
    5348:	f640 6390 	movw	r3, #3728	; 0xe90
    534c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5350:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5352:	f640 6390 	movw	r3, #3728	; 0xe90
    5356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535a:	6819      	ldr	r1, [r3, #0]
    535c:	f640 4284 	movw	r2, #3204	; 0xc84
    5360:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5364:	460b      	mov	r3, r1
    5366:	009b      	lsls	r3, r3, #2
    5368:	440b      	add	r3, r1
    536a:	009b      	lsls	r3, r3, #2
    536c:	4413      	add	r3, r2
    536e:	681b      	ldr	r3, [r3, #0]
    5370:	2b00      	cmp	r3, #0
    5372:	d0e3      	beq.n	533c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5374:	f640 6390 	movw	r3, #3728	; 0xe90
    5378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537c:	681a      	ldr	r2, [r3, #0]
    537e:	4613      	mov	r3, r2
    5380:	009b      	lsls	r3, r3, #2
    5382:	4413      	add	r3, r2
    5384:	009b      	lsls	r3, r3, #2
    5386:	f640 4284 	movw	r2, #3204	; 0xc84
    538a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    538e:	4413      	add	r3, r2
    5390:	607b      	str	r3, [r7, #4]
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	685b      	ldr	r3, [r3, #4]
    5396:	685a      	ldr	r2, [r3, #4]
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	605a      	str	r2, [r3, #4]
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	685a      	ldr	r2, [r3, #4]
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	3308      	adds	r3, #8
    53a4:	429a      	cmp	r2, r3
    53a6:	d104      	bne.n	53b2 <vTaskSwitchContext+0x9e>
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	685b      	ldr	r3, [r3, #4]
    53ac:	685a      	ldr	r2, [r3, #4]
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	605a      	str	r2, [r3, #4]
    53b2:	687b      	ldr	r3, [r7, #4]
    53b4:	685b      	ldr	r3, [r3, #4]
    53b6:	68da      	ldr	r2, [r3, #12]
    53b8:	f640 4380 	movw	r3, #3200	; 0xc80
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    53c2:	f012 f89f 	bl	17504 <myTraceSwitchedIn>
	}
}
    53c6:	3708      	adds	r7, #8
    53c8:	46bd      	mov	sp, r7
    53ca:	bd80      	pop	{r7, pc}

000053cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    53cc:	b580      	push	{r7, lr}
    53ce:	b084      	sub	sp, #16
    53d0:	af00      	add	r7, sp, #0
    53d2:	6078      	str	r0, [r7, #4]
    53d4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    53d6:	f640 4380 	movw	r3, #3200	; 0xc80
    53da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53de:	681b      	ldr	r3, [r3, #0]
    53e0:	3318      	adds	r3, #24
    53e2:	6878      	ldr	r0, [r7, #4]
    53e4:	4619      	mov	r1, r3
    53e6:	f7fe fdc9 	bl	3f7c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53ea:	f640 4380 	movw	r3, #3200	; 0xc80
    53ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	3304      	adds	r3, #4
    53f6:	4618      	mov	r0, r3
    53f8:	f7fe fdf8 	bl	3fec <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    53fc:	683b      	ldr	r3, [r7, #0]
    53fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    5402:	d10d      	bne.n	5420 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5404:	f640 4380 	movw	r3, #3200	; 0xc80
    5408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	3304      	adds	r3, #4
    5410:	f640 6070 	movw	r0, #3696	; 0xe70
    5414:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5418:	4619      	mov	r1, r3
    541a:	f7fe fd87 	bl	3f2c <vListInsertEnd>
    541e:	e00a      	b.n	5436 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5420:	f640 6388 	movw	r3, #3720	; 0xe88
    5424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5428:	681a      	ldr	r2, [r3, #0]
    542a:	683b      	ldr	r3, [r7, #0]
    542c:	4413      	add	r3, r2
    542e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5430:	68f8      	ldr	r0, [r7, #12]
    5432:	f000 f99f 	bl	5774 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5436:	3710      	adds	r7, #16
    5438:	46bd      	mov	sp, r7
    543a:	bd80      	pop	{r7, pc}

0000543c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    543c:	b580      	push	{r7, lr}
    543e:	b084      	sub	sp, #16
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	68db      	ldr	r3, [r3, #12]
    5448:	68db      	ldr	r3, [r3, #12]
    544a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    544c:	68bb      	ldr	r3, [r7, #8]
    544e:	3318      	adds	r3, #24
    5450:	4618      	mov	r0, r3
    5452:	f7fe fdcb 	bl	3fec <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5456:	f640 6398 	movw	r3, #3736	; 0xe98
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	2b00      	cmp	r3, #0
    5462:	d126      	bne.n	54b2 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5464:	68bb      	ldr	r3, [r7, #8]
    5466:	3304      	adds	r3, #4
    5468:	4618      	mov	r0, r3
    546a:	f7fe fdbf 	bl	3fec <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    546e:	68bb      	ldr	r3, [r7, #8]
    5470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5472:	f640 6390 	movw	r3, #3728	; 0xe90
    5476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	429a      	cmp	r2, r3
    547e:	d906      	bls.n	548e <xTaskRemoveFromEventList+0x52>
    5480:	68bb      	ldr	r3, [r7, #8]
    5482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5484:	f640 6390 	movw	r3, #3728	; 0xe90
    5488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548c:	601a      	str	r2, [r3, #0]
    548e:	68bb      	ldr	r3, [r7, #8]
    5490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5492:	4613      	mov	r3, r2
    5494:	009b      	lsls	r3, r3, #2
    5496:	4413      	add	r3, r2
    5498:	009b      	lsls	r3, r3, #2
    549a:	f640 4284 	movw	r2, #3204	; 0xc84
    549e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54a2:	441a      	add	r2, r3
    54a4:	68bb      	ldr	r3, [r7, #8]
    54a6:	3304      	adds	r3, #4
    54a8:	4610      	mov	r0, r2
    54aa:	4619      	mov	r1, r3
    54ac:	f7fe fd3e 	bl	3f2c <vListInsertEnd>
    54b0:	e008      	b.n	54c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    54b2:	68bb      	ldr	r3, [r7, #8]
    54b4:	3318      	adds	r3, #24
    54b6:	f640 6044 	movw	r0, #3652	; 0xe44
    54ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    54be:	4619      	mov	r1, r3
    54c0:	f7fe fd34 	bl	3f2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    54c4:	68bb      	ldr	r3, [r7, #8]
    54c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54c8:	f640 4380 	movw	r3, #3200	; 0xc80
    54cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    54d4:	429a      	cmp	r2, r3
    54d6:	d302      	bcc.n	54de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    54d8:	2301      	movs	r3, #1
    54da:	60fb      	str	r3, [r7, #12]
    54dc:	e001      	b.n	54e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    54de:	2300      	movs	r3, #0
    54e0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    54e2:	68fb      	ldr	r3, [r7, #12]
}
    54e4:	4618      	mov	r0, r3
    54e6:	3710      	adds	r7, #16
    54e8:	46bd      	mov	sp, r7
    54ea:	bd80      	pop	{r7, pc}

000054ec <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    54ec:	b480      	push	{r7}
    54ee:	b083      	sub	sp, #12
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    54f4:	f640 63a4 	movw	r3, #3748	; 0xea4
    54f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fc:	681a      	ldr	r2, [r3, #0]
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5502:	f640 6388 	movw	r3, #3720	; 0xe88
    5506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550a:	681a      	ldr	r2, [r3, #0]
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	605a      	str	r2, [r3, #4]
}
    5510:	370c      	adds	r7, #12
    5512:	46bd      	mov	sp, r7
    5514:	f85d 7b04 	ldr.w	r7, [sp], #4
    5518:	4770      	bx	lr
    551a:	bf00      	nop

0000551c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    551c:	b580      	push	{r7, lr}
    551e:	b084      	sub	sp, #16
    5520:	af00      	add	r7, sp, #0
    5522:	6078      	str	r0, [r7, #4]
    5524:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5526:	f000 fb13 	bl	5b50 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    552a:	683b      	ldr	r3, [r7, #0]
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5532:	d102      	bne.n	553a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5534:	2300      	movs	r3, #0
    5536:	60fb      	str	r3, [r7, #12]
    5538:	e035      	b.n	55a6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	681a      	ldr	r2, [r3, #0]
    553e:	f640 63a4 	movw	r3, #3748	; 0xea4
    5542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5546:	681b      	ldr	r3, [r3, #0]
    5548:	429a      	cmp	r2, r3
    554a:	d00b      	beq.n	5564 <xTaskCheckForTimeOut+0x48>
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	685a      	ldr	r2, [r3, #4]
    5550:	f640 6388 	movw	r3, #3720	; 0xe88
    5554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5558:	681b      	ldr	r3, [r3, #0]
    555a:	429a      	cmp	r2, r3
    555c:	d802      	bhi.n	5564 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    555e:	2301      	movs	r3, #1
    5560:	60fb      	str	r3, [r7, #12]
    5562:	e020      	b.n	55a6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5564:	f640 6388 	movw	r3, #3720	; 0xe88
    5568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    556c:	681a      	ldr	r2, [r3, #0]
    556e:	687b      	ldr	r3, [r7, #4]
    5570:	685b      	ldr	r3, [r3, #4]
    5572:	1ad2      	subs	r2, r2, r3
    5574:	683b      	ldr	r3, [r7, #0]
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	429a      	cmp	r2, r3
    557a:	d212      	bcs.n	55a2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    557c:	683b      	ldr	r3, [r7, #0]
    557e:	681a      	ldr	r2, [r3, #0]
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	6859      	ldr	r1, [r3, #4]
    5584:	f640 6388 	movw	r3, #3720	; 0xe88
    5588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	1acb      	subs	r3, r1, r3
    5590:	441a      	add	r2, r3
    5592:	683b      	ldr	r3, [r7, #0]
    5594:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5596:	6878      	ldr	r0, [r7, #4]
    5598:	f7ff ffa8 	bl	54ec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    559c:	2300      	movs	r3, #0
    559e:	60fb      	str	r3, [r7, #12]
    55a0:	e001      	b.n	55a6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    55a2:	2301      	movs	r3, #1
    55a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    55a6:	f000 fae9 	bl	5b7c <vPortExitCritical>

	return xReturn;
    55aa:	68fb      	ldr	r3, [r7, #12]
}
    55ac:	4618      	mov	r0, r3
    55ae:	3710      	adds	r7, #16
    55b0:	46bd      	mov	sp, r7
    55b2:	bd80      	pop	{r7, pc}

000055b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    55b4:	b480      	push	{r7}
    55b6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    55b8:	f640 63a0 	movw	r3, #3744	; 0xea0
    55bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c0:	2201      	movs	r2, #1
    55c2:	601a      	str	r2, [r3, #0]
}
    55c4:	46bd      	mov	sp, r7
    55c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ca:	4770      	bx	lr

000055cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b082      	sub	sp, #8
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    55d4:	f000 f886 	bl	56e4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    55d8:	f000 faac 	bl	5b34 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    55dc:	e7fa      	b.n	55d4 <prvIdleTask+0x8>
    55de:	bf00      	nop

000055e0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    55e0:	b580      	push	{r7, lr}
    55e2:	b084      	sub	sp, #16
    55e4:	af00      	add	r7, sp, #0
    55e6:	60f8      	str	r0, [r7, #12]
    55e8:	60b9      	str	r1, [r7, #8]
    55ea:	607a      	str	r2, [r7, #4]
    55ec:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	3334      	adds	r3, #52	; 0x34
    55f2:	4618      	mov	r0, r3
    55f4:	68b9      	ldr	r1, [r7, #8]
    55f6:	2210      	movs	r2, #16
    55f8:	f013 f8ae 	bl	18758 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	2200      	movs	r2, #0
    5600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	2b13      	cmp	r3, #19
    5608:	d901      	bls.n	560e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    560a:	2313      	movs	r3, #19
    560c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    560e:	68fb      	ldr	r3, [r7, #12]
    5610:	687a      	ldr	r2, [r7, #4]
    5612:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5614:	68fb      	ldr	r3, [r7, #12]
    5616:	687a      	ldr	r2, [r7, #4]
    5618:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    561a:	68fb      	ldr	r3, [r7, #12]
    561c:	3304      	adds	r3, #4
    561e:	4618      	mov	r0, r3
    5620:	f7fe fc78 	bl	3f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5624:	68fb      	ldr	r3, [r7, #12]
    5626:	3318      	adds	r3, #24
    5628:	4618      	mov	r0, r3
    562a:	f7fe fc73 	bl	3f14 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	68fa      	ldr	r2, [r7, #12]
    5632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	f1c3 0214 	rsb	r2, r3, #20
    563a:	68fb      	ldr	r3, [r7, #12]
    563c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    563e:	68fb      	ldr	r3, [r7, #12]
    5640:	68fa      	ldr	r2, [r7, #12]
    5642:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5644:	3710      	adds	r7, #16
    5646:	46bd      	mov	sp, r7
    5648:	bd80      	pop	{r7, pc}
    564a:	bf00      	nop

0000564c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    564c:	b580      	push	{r7, lr}
    564e:	b082      	sub	sp, #8
    5650:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5652:	2300      	movs	r3, #0
    5654:	607b      	str	r3, [r7, #4]
    5656:	e00f      	b.n	5678 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5658:	687a      	ldr	r2, [r7, #4]
    565a:	4613      	mov	r3, r2
    565c:	009b      	lsls	r3, r3, #2
    565e:	4413      	add	r3, r2
    5660:	009b      	lsls	r3, r3, #2
    5662:	f640 4284 	movw	r2, #3204	; 0xc84
    5666:	f2c2 0200 	movt	r2, #8192	; 0x2000
    566a:	4413      	add	r3, r2
    566c:	4618      	mov	r0, r3
    566e:	f7fe fc31 	bl	3ed4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	3301      	adds	r3, #1
    5676:	607b      	str	r3, [r7, #4]
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	2b13      	cmp	r3, #19
    567c:	d9ec      	bls.n	5658 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    567e:	f640 6014 	movw	r0, #3604	; 0xe14
    5682:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5686:	f7fe fc25 	bl	3ed4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    568a:	f640 6028 	movw	r0, #3624	; 0xe28
    568e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5692:	f7fe fc1f 	bl	3ed4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5696:	f640 6044 	movw	r0, #3652	; 0xe44
    569a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    569e:	f7fe fc19 	bl	3ed4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    56a2:	f640 6058 	movw	r0, #3672	; 0xe58
    56a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56aa:	f7fe fc13 	bl	3ed4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    56ae:	f640 6070 	movw	r0, #3696	; 0xe70
    56b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56b6:	f7fe fc0d 	bl	3ed4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    56ba:	f640 633c 	movw	r3, #3644	; 0xe3c
    56be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c2:	f640 6214 	movw	r2, #3604	; 0xe14
    56c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    56cc:	f640 6340 	movw	r3, #3648	; 0xe40
    56d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d4:	f640 6228 	movw	r2, #3624	; 0xe28
    56d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56dc:	601a      	str	r2, [r3, #0]
}
    56de:	3708      	adds	r7, #8
    56e0:	46bd      	mov	sp, r7
    56e2:	bd80      	pop	{r7, pc}

000056e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    56e4:	b580      	push	{r7, lr}
    56e6:	b082      	sub	sp, #8
    56e8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    56ea:	f640 636c 	movw	r3, #3692	; 0xe6c
    56ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	2b00      	cmp	r3, #0
    56f6:	d03a      	beq.n	576e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    56f8:	f7ff fc4c 	bl	4f94 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    56fc:	f640 6358 	movw	r3, #3672	; 0xe58
    5700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	2b00      	cmp	r3, #0
    5708:	bf14      	ite	ne
    570a:	2300      	movne	r3, #0
    570c:	2301      	moveq	r3, #1
    570e:	b2db      	uxtb	r3, r3
    5710:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5712:	f7ff fc51 	bl	4fb8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5716:	687b      	ldr	r3, [r7, #4]
    5718:	2b00      	cmp	r3, #0
    571a:	d128      	bne.n	576e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    571c:	f000 fa18 	bl	5b50 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5720:	f640 6358 	movw	r3, #3672	; 0xe58
    5724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5728:	68db      	ldr	r3, [r3, #12]
    572a:	68db      	ldr	r3, [r3, #12]
    572c:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    572e:	683b      	ldr	r3, [r7, #0]
    5730:	3304      	adds	r3, #4
    5732:	4618      	mov	r0, r3
    5734:	f7fe fc5a 	bl	3fec <vListRemove>
					--uxCurrentNumberOfTasks;
    5738:	f640 6384 	movw	r3, #3716	; 0xe84
    573c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	1e5a      	subs	r2, r3, #1
    5744:	f640 6384 	movw	r3, #3716	; 0xe84
    5748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    574c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    574e:	f640 636c 	movw	r3, #3692	; 0xe6c
    5752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	1e5a      	subs	r2, r3, #1
    575a:	f640 636c 	movw	r3, #3692	; 0xe6c
    575e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5762:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5764:	f000 fa0a 	bl	5b7c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5768:	6838      	ldr	r0, [r7, #0]
    576a:	f000 f879 	bl	5860 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    576e:	3708      	adds	r7, #8
    5770:	46bd      	mov	sp, r7
    5772:	bd80      	pop	{r7, pc}

00005774 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5774:	b580      	push	{r7, lr}
    5776:	b082      	sub	sp, #8
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    577c:	f640 4380 	movw	r3, #3200	; 0xc80
    5780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	687a      	ldr	r2, [r7, #4]
    5788:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    578a:	f640 6388 	movw	r3, #3720	; 0xe88
    578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	687a      	ldr	r2, [r7, #4]
    5796:	429a      	cmp	r2, r3
    5798:	d20f      	bcs.n	57ba <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    579a:	f640 6340 	movw	r3, #3648	; 0xe40
    579e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a2:	681a      	ldr	r2, [r3, #0]
    57a4:	f640 4380 	movw	r3, #3200	; 0xc80
    57a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	3304      	adds	r3, #4
    57b0:	4610      	mov	r0, r2
    57b2:	4619      	mov	r1, r3
    57b4:	f7fe fbe2 	bl	3f7c <vListInsert>
    57b8:	e01c      	b.n	57f4 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    57ba:	f640 633c 	movw	r3, #3644	; 0xe3c
    57be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c2:	681a      	ldr	r2, [r3, #0]
    57c4:	f640 4380 	movw	r3, #3200	; 0xc80
    57c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57cc:	681b      	ldr	r3, [r3, #0]
    57ce:	3304      	adds	r3, #4
    57d0:	4610      	mov	r0, r2
    57d2:	4619      	mov	r1, r3
    57d4:	f7fe fbd2 	bl	3f7c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    57d8:	f240 33e0 	movw	r3, #992	; 0x3e0
    57dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	687a      	ldr	r2, [r7, #4]
    57e4:	429a      	cmp	r2, r3
    57e6:	d205      	bcs.n	57f4 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    57e8:	f240 33e0 	movw	r3, #992	; 0x3e0
    57ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f0:	687a      	ldr	r2, [r7, #4]
    57f2:	601a      	str	r2, [r3, #0]
		}
	}
}
    57f4:	3708      	adds	r7, #8
    57f6:	46bd      	mov	sp, r7
    57f8:	bd80      	pop	{r7, pc}
    57fa:	bf00      	nop

000057fc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b084      	sub	sp, #16
    5800:	af00      	add	r7, sp, #0
    5802:	4603      	mov	r3, r0
    5804:	6039      	str	r1, [r7, #0]
    5806:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5808:	2050      	movs	r0, #80	; 0x50
    580a:	f000 fa19 	bl	5c40 <pvPortMalloc>
    580e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	2b00      	cmp	r3, #0
    5814:	d01f      	beq.n	5856 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	2b00      	cmp	r3, #0
    581a:	d106      	bne.n	582a <prvAllocateTCBAndStack+0x2e>
    581c:	88fb      	ldrh	r3, [r7, #6]
    581e:	009b      	lsls	r3, r3, #2
    5820:	4618      	mov	r0, r3
    5822:	f000 fa0d 	bl	5c40 <pvPortMalloc>
    5826:	4603      	mov	r3, r0
    5828:	e000      	b.n	582c <prvAllocateTCBAndStack+0x30>
    582a:	683b      	ldr	r3, [r7, #0]
    582c:	68fa      	ldr	r2, [r7, #12]
    582e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5830:	68fb      	ldr	r3, [r7, #12]
    5832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5834:	2b00      	cmp	r3, #0
    5836:	d105      	bne.n	5844 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5838:	68f8      	ldr	r0, [r7, #12]
    583a:	f000 fac5 	bl	5dc8 <vPortFree>
			pxNewTCB = NULL;
    583e:	2300      	movs	r3, #0
    5840:	60fb      	str	r3, [r7, #12]
    5842:	e008      	b.n	5856 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5844:	68fb      	ldr	r3, [r7, #12]
    5846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5848:	88fb      	ldrh	r3, [r7, #6]
    584a:	009b      	lsls	r3, r3, #2
    584c:	4610      	mov	r0, r2
    584e:	21a5      	movs	r1, #165	; 0xa5
    5850:	461a      	mov	r2, r3
    5852:	f012 ff31 	bl	186b8 <memset>
		}
	}

	return pxNewTCB;
    5856:	68fb      	ldr	r3, [r7, #12]
}
    5858:	4618      	mov	r0, r3
    585a:	3710      	adds	r7, #16
    585c:	46bd      	mov	sp, r7
    585e:	bd80      	pop	{r7, pc}

00005860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    586c:	4618      	mov	r0, r3
    586e:	f000 faab 	bl	5dc8 <vPortFree>
		vPortFree( pxTCB );
    5872:	6878      	ldr	r0, [r7, #4]
    5874:	f000 faa8 	bl	5dc8 <vPortFree>
	}
    5878:	3708      	adds	r7, #8
    587a:	46bd      	mov	sp, r7
    587c:	bd80      	pop	{r7, pc}
    587e:	bf00      	nop

00005880 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5880:	b480      	push	{r7}
    5882:	b083      	sub	sp, #12
    5884:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5886:	f640 4380 	movw	r3, #3200	; 0xc80
    588a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    588e:	681b      	ldr	r3, [r3, #0]
    5890:	607b      	str	r3, [r7, #4]

		return xReturn;
    5892:	687b      	ldr	r3, [r7, #4]
	}
    5894:	4618      	mov	r0, r3
    5896:	370c      	adds	r7, #12
    5898:	46bd      	mov	sp, r7
    589a:	f85d 7b04 	ldr.w	r7, [sp], #4
    589e:	4770      	bx	lr

000058a0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    58a0:	b580      	push	{r7, lr}
    58a2:	b084      	sub	sp, #16
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    58ac:	68fb      	ldr	r3, [r7, #12]
    58ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58b0:	f640 4380 	movw	r3, #3200	; 0xc80
    58b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b8:	681b      	ldr	r3, [r3, #0]
    58ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58bc:	429a      	cmp	r2, r3
    58be:	d24f      	bcs.n	5960 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    58c0:	f640 4380 	movw	r3, #3200	; 0xc80
    58c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58cc:	f1c3 0214 	rsb	r2, r3, #20
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	6959      	ldr	r1, [r3, #20]
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58dc:	4613      	mov	r3, r2
    58de:	009b      	lsls	r3, r3, #2
    58e0:	4413      	add	r3, r2
    58e2:	009b      	lsls	r3, r3, #2
    58e4:	f640 4284 	movw	r2, #3204	; 0xc84
    58e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58ec:	4413      	add	r3, r2
    58ee:	4299      	cmp	r1, r3
    58f0:	d12e      	bne.n	5950 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	3304      	adds	r3, #4
    58f6:	4618      	mov	r0, r3
    58f8:	f7fe fb78 	bl	3fec <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    58fc:	f640 4380 	movw	r3, #3200	; 0xc80
    5900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5904:	681b      	ldr	r3, [r3, #0]
    5906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5908:	68fb      	ldr	r3, [r7, #12]
    590a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5910:	f640 6390 	movw	r3, #3728	; 0xe90
    5914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	429a      	cmp	r2, r3
    591c:	d906      	bls.n	592c <vTaskPriorityInherit+0x8c>
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5922:	f640 6390 	movw	r3, #3728	; 0xe90
    5926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592a:	601a      	str	r2, [r3, #0]
    592c:	68fb      	ldr	r3, [r7, #12]
    592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5930:	4613      	mov	r3, r2
    5932:	009b      	lsls	r3, r3, #2
    5934:	4413      	add	r3, r2
    5936:	009b      	lsls	r3, r3, #2
    5938:	f640 4284 	movw	r2, #3204	; 0xc84
    593c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5940:	441a      	add	r2, r3
    5942:	68fb      	ldr	r3, [r7, #12]
    5944:	3304      	adds	r3, #4
    5946:	4610      	mov	r0, r2
    5948:	4619      	mov	r1, r3
    594a:	f7fe faef 	bl	3f2c <vListInsertEnd>
    594e:	e007      	b.n	5960 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5950:	f640 4380 	movw	r3, #3200	; 0xc80
    5954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5960:	3710      	adds	r7, #16
    5962:	46bd      	mov	sp, r7
    5964:	bd80      	pop	{r7, pc}
    5966:	bf00      	nop

00005968 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5968:	b580      	push	{r7, lr}
    596a:	b084      	sub	sp, #16
    596c:	af00      	add	r7, sp, #0
    596e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5974:	687b      	ldr	r3, [r7, #4]
    5976:	2b00      	cmp	r3, #0
    5978:	d035      	beq.n	59e6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5982:	429a      	cmp	r2, r3
    5984:	d02f      	beq.n	59e6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5986:	68fb      	ldr	r3, [r7, #12]
    5988:	3304      	adds	r3, #4
    598a:	4618      	mov	r0, r3
    598c:	f7fe fb2e 	bl	3fec <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5990:	68fb      	ldr	r3, [r7, #12]
    5992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5994:	68fb      	ldr	r3, [r7, #12]
    5996:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    599c:	f1c3 0214 	rsb	r2, r3, #20
    59a0:	68fb      	ldr	r3, [r7, #12]
    59a2:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    59a4:	68fb      	ldr	r3, [r7, #12]
    59a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59a8:	f640 6390 	movw	r3, #3728	; 0xe90
    59ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	429a      	cmp	r2, r3
    59b4:	d906      	bls.n	59c4 <vTaskPriorityDisinherit+0x5c>
    59b6:	68fb      	ldr	r3, [r7, #12]
    59b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59ba:	f640 6390 	movw	r3, #3728	; 0xe90
    59be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c2:	601a      	str	r2, [r3, #0]
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59c8:	4613      	mov	r3, r2
    59ca:	009b      	lsls	r3, r3, #2
    59cc:	4413      	add	r3, r2
    59ce:	009b      	lsls	r3, r3, #2
    59d0:	f640 4284 	movw	r2, #3204	; 0xc84
    59d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59d8:	441a      	add	r2, r3
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	3304      	adds	r3, #4
    59de:	4610      	mov	r0, r2
    59e0:	4619      	mov	r1, r3
    59e2:	f7fe faa3 	bl	3f2c <vListInsertEnd>
			}
		}
	}
    59e6:	3710      	adds	r7, #16
    59e8:	46bd      	mov	sp, r7
    59ea:	bd80      	pop	{r7, pc}

000059ec <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    59ec:	b480      	push	{r7}
    59ee:	b083      	sub	sp, #12
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    59f8:	4618      	mov	r0, r3
    59fa:	370c      	adds	r7, #12
    59fc:	46bd      	mov	sp, r7
    59fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a02:	4770      	bx	lr

00005a04 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5a04:	b480      	push	{r7}
    5a06:	b083      	sub	sp, #12
    5a08:	af00      	add	r7, sp, #0
    5a0a:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5a10:	4618      	mov	r0, r3
    5a12:	370c      	adds	r7, #12
    5a14:	46bd      	mov	sp, r7
    5a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1a:	4770      	bx	lr

00005a1c <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5a1c:	b480      	push	{r7}
    5a1e:	b083      	sub	sp, #12
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
    5a24:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	683a      	ldr	r2, [r7, #0]
    5a2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5a2c:	370c      	adds	r7, #12
    5a2e:	46bd      	mov	sp, r7
    5a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a34:	4770      	bx	lr
    5a36:	bf00      	nop

00005a38 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5a38:	b480      	push	{r7}
    5a3a:	b083      	sub	sp, #12
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
    5a40:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	683a      	ldr	r2, [r7, #0]
    5a46:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5a48:	370c      	adds	r7, #12
    5a4a:	46bd      	mov	sp, r7
    5a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5a54:	b480      	push	{r7}
    5a56:	b085      	sub	sp, #20
    5a58:	af00      	add	r7, sp, #0
    5a5a:	60f8      	str	r0, [r7, #12]
    5a5c:	60b9      	str	r1, [r7, #8]
    5a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5a60:	68fb      	ldr	r3, [r7, #12]
    5a62:	3b04      	subs	r3, #4
    5a64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	3b04      	subs	r3, #4
    5a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5a74:	68ba      	ldr	r2, [r7, #8]
    5a76:	68fb      	ldr	r3, [r7, #12]
    5a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	3b04      	subs	r3, #4
    5a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5a80:	68fb      	ldr	r3, [r7, #12]
    5a82:	2200      	movs	r2, #0
    5a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5a86:	68fb      	ldr	r3, [r7, #12]
    5a88:	3b14      	subs	r3, #20
    5a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5a8c:	687a      	ldr	r2, [r7, #4]
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	3b20      	subs	r3, #32
    5a96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5a98:	68fb      	ldr	r3, [r7, #12]
}
    5a9a:	4618      	mov	r0, r3
    5a9c:	3714      	adds	r7, #20
    5a9e:	46bd      	mov	sp, r7
    5aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa4:	4770      	bx	lr
    5aa6:	bf00      	nop

00005aa8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5aa8:	4b06      	ldr	r3, [pc, #24]	; (5ac4 <pxCurrentTCBConst2>)
    5aaa:	6819      	ldr	r1, [r3, #0]
    5aac:	6808      	ldr	r0, [r1, #0]
    5aae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ab2:	f380 8809 	msr	PSP, r0
    5ab6:	f04f 0000 	mov.w	r0, #0
    5aba:	f380 8811 	msr	BASEPRI, r0
    5abe:	f04e 0e0d 	orr.w	lr, lr, #13
    5ac2:	4770      	bx	lr

00005ac4 <pxCurrentTCBConst2>:
    5ac4:	20000c80 	.word	0x20000c80

00005ac8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5ac8:	485c      	ldr	r0, [pc, #368]	; (5c3c <prvSetupTimerInterrupt+0x28>)
    5aca:	6800      	ldr	r0, [r0, #0]
    5acc:	6800      	ldr	r0, [r0, #0]
    5ace:	f380 8808 	msr	MSP, r0
    5ad2:	b662      	cpsie	i
    5ad4:	df00      	svc	0
    5ad6:	bf00      	nop

00005ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5adc:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ae0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ae4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5ae8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5aec:	6812      	ldr	r2, [r2, #0]
    5aee:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5af2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5af4:	f64e 5320 	movw	r3, #60704	; 0xed20
    5af8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5afc:	f64e 5220 	movw	r2, #60704	; 0xed20
    5b00:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5b04:	6812      	ldr	r2, [r2, #0]
    5b06:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5b0a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5b0c:	f000 f882 	bl	5c14 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5b10:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b18:	2200      	movs	r2, #0
    5b1a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5b1c:	f7ff ffd4 	bl	5ac8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5b20:	2300      	movs	r3, #0
}
    5b22:	4618      	mov	r0, r3
    5b24:	bd80      	pop	{r7, pc}
    5b26:	bf00      	nop

00005b28 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5b28:	b480      	push	{r7}
    5b2a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5b2c:	46bd      	mov	sp, r7
    5b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b32:	4770      	bx	lr

00005b34 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5b34:	b480      	push	{r7}
    5b36:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5b38:	f64e 5304 	movw	r3, #60676	; 0xed04
    5b3c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5b44:	601a      	str	r2, [r3, #0]
}
    5b46:	46bd      	mov	sp, r7
    5b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4c:	4770      	bx	lr
    5b4e:	bf00      	nop

00005b50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5b50:	b480      	push	{r7}
    5b52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5b54:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b58:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5b5c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b64:	681b      	ldr	r3, [r3, #0]
    5b66:	1c5a      	adds	r2, r3, #1
    5b68:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b70:	601a      	str	r2, [r3, #0]
}
    5b72:	46bd      	mov	sp, r7
    5b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b78:	4770      	bx	lr
    5b7a:	bf00      	nop

00005b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5b7c:	b480      	push	{r7}
    5b7e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5b80:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	1e5a      	subs	r2, r3, #1
    5b8c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b94:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5b96:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d103      	bne.n	5bac <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5ba4:	f04f 0000 	mov.w	r0, #0
    5ba8:	f380 8811 	msr	BASEPRI, r0
	}
}
    5bac:	46bd      	mov	sp, r7
    5bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb2:	4770      	bx	lr

00005bb4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5bb4:	f3ef 8009 	mrs	r0, PSP
    5bb8:	4b0c      	ldr	r3, [pc, #48]	; (5bec <pxCurrentTCBConst>)
    5bba:	681a      	ldr	r2, [r3, #0]
    5bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5bc0:	6010      	str	r0, [r2, #0]
    5bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
    5bc6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5bca:	f380 8811 	msr	BASEPRI, r0
    5bce:	f7ff fba1 	bl	5314 <vTaskSwitchContext>
    5bd2:	f04f 0000 	mov.w	r0, #0
    5bd6:	f380 8811 	msr	BASEPRI, r0
    5bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5bde:	6819      	ldr	r1, [r3, #0]
    5be0:	6808      	ldr	r0, [r1, #0]
    5be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5be6:	f380 8809 	msr	PSP, r0
    5bea:	4770      	bx	lr

00005bec <pxCurrentTCBConst>:
    5bec:	20000c80 	.word	0x20000c80

00005bf0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b082      	sub	sp, #8
    5bf4:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5bf6:	2300      	movs	r3, #0
    5bf8:	607b      	str	r3, [r7, #4]
    5bfa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5bfe:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5c02:	f7ff faa9 	bl	5158 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5c06:	f04f 0000 	mov.w	r0, #0
    5c0a:	f380 8811 	msr	BASEPRI, r0
}
    5c0e:	3708      	adds	r7, #8
    5c10:	46bd      	mov	sp, r7
    5c12:	bd80      	pop	{r7, pc}

00005c14 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5c14:	b480      	push	{r7}
    5c16:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5c18:	f24e 0314 	movw	r3, #57364	; 0xe014
    5c1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c20:	f245 425f 	movw	r2, #21599	; 0x545f
    5c24:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5c26:	f24e 0310 	movw	r3, #57360	; 0xe010
    5c2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c2e:	2207      	movs	r2, #7
    5c30:	601a      	str	r2, [r3, #0]
}
    5c32:	46bd      	mov	sp, r7
    5c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c38:	4770      	bx	lr
    5c3a:	0000      	.short	0x0000
    5c3c:	e000ed08 	.word	0xe000ed08

00005c40 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b08a      	sub	sp, #40	; 0x28
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5c48:	2300      	movs	r3, #0
    5c4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5c4c:	f7ff f9a2 	bl	4f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5c50:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d130      	bne.n	5cc0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5c5e:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c66:	f640 62b0 	movw	r2, #3760	; 0xeb0
    5c6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c6e:	601a      	str	r2, [r3, #0]
    5c70:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c78:	2200      	movs	r2, #0
    5c7a:	605a      	str	r2, [r3, #4]
    5c7c:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
    5c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c84:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5c88:	605a      	str	r2, [r3, #4]
    5c8a:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
    5c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5c92:	2200      	movs	r2, #0
    5c94:	601a      	str	r2, [r3, #0]
    5c96:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9e:	617b      	str	r3, [r7, #20]
    5ca0:	697b      	ldr	r3, [r7, #20]
    5ca2:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5ca6:	605a      	str	r2, [r3, #4]
    5ca8:	697a      	ldr	r2, [r7, #20]
    5caa:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
    5cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cb2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5cb4:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cbc:	2201      	movs	r2, #1
    5cbe:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d00d      	beq.n	5ce2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5cc6:	2310      	movs	r3, #16
    5cc8:	687a      	ldr	r2, [r7, #4]
    5cca:	4413      	add	r3, r2
    5ccc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	f003 0307 	and.w	r3, r3, #7
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d004      	beq.n	5ce2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	f023 0307 	bic.w	r3, r3, #7
    5cde:	3308      	adds	r3, #8
    5ce0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d068      	beq.n	5dba <pvPortMalloc+0x17a>
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5cee:	d264      	bcs.n	5dba <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5cf0:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5cf8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5cfa:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5d06:	e004      	b.n	5d12 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d0a:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d0e:	681b      	ldr	r3, [r3, #0]
    5d10:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d14:	685a      	ldr	r2, [r3, #4]
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	429a      	cmp	r2, r3
    5d1a:	d203      	bcs.n	5d24 <pvPortMalloc+0xe4>
    5d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d1e:	681b      	ldr	r3, [r3, #0]
    5d20:	2b00      	cmp	r3, #0
    5d22:	d1f1      	bne.n	5d08 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d26:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
    5d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d2e:	429a      	cmp	r2, r3
    5d30:	d043      	beq.n	5dba <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5d32:	6a3b      	ldr	r3, [r7, #32]
    5d34:	681a      	ldr	r2, [r3, #0]
    5d36:	2310      	movs	r3, #16
    5d38:	4413      	add	r3, r2
    5d3a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d3e:	681a      	ldr	r2, [r3, #0]
    5d40:	6a3b      	ldr	r3, [r7, #32]
    5d42:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d46:	685a      	ldr	r2, [r3, #4]
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	1ad2      	subs	r2, r2, r3
    5d4c:	2310      	movs	r3, #16
    5d4e:	005b      	lsls	r3, r3, #1
    5d50:	429a      	cmp	r2, r3
    5d52:	d925      	bls.n	5da0 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	4413      	add	r3, r2
    5d5a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d5e:	685a      	ldr	r2, [r3, #4]
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	1ad2      	subs	r2, r2, r3
    5d64:	693b      	ldr	r3, [r7, #16]
    5d66:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d6a:	687a      	ldr	r2, [r7, #4]
    5d6c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5d6e:	693b      	ldr	r3, [r7, #16]
    5d70:	685b      	ldr	r3, [r3, #4]
    5d72:	60fb      	str	r3, [r7, #12]
    5d74:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d7c:	61bb      	str	r3, [r7, #24]
    5d7e:	e002      	b.n	5d86 <pvPortMalloc+0x146>
    5d80:	69bb      	ldr	r3, [r7, #24]
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	61bb      	str	r3, [r7, #24]
    5d86:	69bb      	ldr	r3, [r7, #24]
    5d88:	681b      	ldr	r3, [r3, #0]
    5d8a:	685a      	ldr	r2, [r3, #4]
    5d8c:	68fb      	ldr	r3, [r7, #12]
    5d8e:	429a      	cmp	r2, r3
    5d90:	d3f6      	bcc.n	5d80 <pvPortMalloc+0x140>
    5d92:	69bb      	ldr	r3, [r7, #24]
    5d94:	681a      	ldr	r2, [r3, #0]
    5d96:	693b      	ldr	r3, [r7, #16]
    5d98:	601a      	str	r2, [r3, #0]
    5d9a:	69bb      	ldr	r3, [r7, #24]
    5d9c:	693a      	ldr	r2, [r7, #16]
    5d9e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5da0:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da8:	681a      	ldr	r2, [r3, #0]
    5daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dac:	685b      	ldr	r3, [r3, #4]
    5dae:	1ad2      	subs	r2, r2, r3
    5db0:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5dba:	f7ff f8fd 	bl	4fb8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5dbe:	69fb      	ldr	r3, [r7, #28]
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	3728      	adds	r7, #40	; 0x28
    5dc4:	46bd      	mov	sp, r7
    5dc6:	bd80      	pop	{r7, pc}

00005dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b086      	sub	sp, #24
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d030      	beq.n	5e3c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5dda:	2310      	movs	r3, #16
    5ddc:	425b      	negs	r3, r3
    5dde:	693a      	ldr	r2, [r7, #16]
    5de0:	4413      	add	r3, r2
    5de2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5de4:	693b      	ldr	r3, [r7, #16]
    5de6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5de8:	f7ff f8d4 	bl	4f94 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5dec:	68fb      	ldr	r3, [r7, #12]
    5dee:	685b      	ldr	r3, [r3, #4]
    5df0:	60bb      	str	r3, [r7, #8]
    5df2:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
    5df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dfa:	617b      	str	r3, [r7, #20]
    5dfc:	e002      	b.n	5e04 <vPortFree+0x3c>
    5dfe:	697b      	ldr	r3, [r7, #20]
    5e00:	681b      	ldr	r3, [r3, #0]
    5e02:	617b      	str	r3, [r7, #20]
    5e04:	697b      	ldr	r3, [r7, #20]
    5e06:	681b      	ldr	r3, [r3, #0]
    5e08:	685a      	ldr	r2, [r3, #4]
    5e0a:	68bb      	ldr	r3, [r7, #8]
    5e0c:	429a      	cmp	r2, r3
    5e0e:	d3f6      	bcc.n	5dfe <vPortFree+0x36>
    5e10:	697b      	ldr	r3, [r7, #20]
    5e12:	681a      	ldr	r2, [r3, #0]
    5e14:	68fb      	ldr	r3, [r7, #12]
    5e16:	601a      	str	r2, [r3, #0]
    5e18:	697b      	ldr	r3, [r7, #20]
    5e1a:	68fa      	ldr	r2, [r7, #12]
    5e1c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5e1e:	68fb      	ldr	r3, [r7, #12]
    5e20:	685a      	ldr	r2, [r3, #4]
    5e22:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2a:	681b      	ldr	r3, [r3, #0]
    5e2c:	441a      	add	r2, r3
    5e2e:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e36:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5e38:	f7ff f8be 	bl	4fb8 <xTaskResumeAll>
	}
}
    5e3c:	3718      	adds	r7, #24
    5e3e:	46bd      	mov	sp, r7
    5e40:	bd80      	pop	{r7, pc}
    5e42:	bf00      	nop

00005e44 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5e44:	b480      	push	{r7}
    5e46:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5e48:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e50:	681b      	ldr	r3, [r3, #0]
}
    5e52:	4618      	mov	r0, r3
    5e54:	46bd      	mov	sp, r7
    5e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5a:	4770      	bx	lr

00005e5c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5e5c:	b480      	push	{r7}
    5e5e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5e60:	46bd      	mov	sp, r7
    5e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e66:	4770      	bx	lr

00005e68 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5e68:	b580      	push	{r7, lr}
    5e6a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5e6c:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    5e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	2b00      	cmp	r3, #0
    5e78:	f040 815d 	bne.w	6136 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5e7c:	f64b 63ca 	movw	r3, #48842	; 0xbeca
    5e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e84:	881b      	ldrh	r3, [r3, #0]
    5e86:	2b09      	cmp	r3, #9
    5e88:	f201 8145 	bhi.w	7116 <ground_calibrate+0x12ae>
    5e8c:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    5e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	2b01      	cmp	r3, #1
    5e98:	f041 813d 	bne.w	7116 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5e9c:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    5ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea4:	2201      	movs	r2, #1
    5ea6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5ea8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eb0:	781a      	ldrb	r2, [r3, #0]
    5eb2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    5eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	b2db      	uxtb	r3, r3
    5ebe:	429a      	cmp	r2, r3
    5ec0:	d313      	bcc.n	5eea <ground_calibrate+0x82>
    5ec2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    5ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eca:	781b      	ldrb	r3, [r3, #0]
    5ecc:	b2db      	uxtb	r3, r3
    5ece:	461a      	mov	r2, r3
    5ed0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	1ad3      	subs	r3, r2, r3
    5edc:	33ff      	adds	r3, #255	; 0xff
    5ede:	2b04      	cmp	r3, #4
    5ee0:	bfd4      	ite	le
    5ee2:	2300      	movle	r3, #0
    5ee4:	2301      	movgt	r3, #1
    5ee6:	b2db      	uxtb	r3, r3
    5ee8:	e011      	b.n	5f0e <ground_calibrate+0xa6>
    5eea:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    5eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	461a      	mov	r2, r3
    5ef8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f00:	781b      	ldrb	r3, [r3, #0]
    5f02:	1ad3      	subs	r3, r2, r3
    5f04:	2b04      	cmp	r3, #4
    5f06:	bfd4      	ite	le
    5f08:	2300      	movle	r3, #0
    5f0a:	2301      	movgt	r3, #1
    5f0c:	b2db      	uxtb	r3, r3
    5f0e:	2b00      	cmp	r3, #0
    5f10:	f000 8103 	beq.w	611a <ground_calibrate+0x2b2>
    5f14:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1c:	781b      	ldrb	r3, [r3, #0]
    5f1e:	461a      	mov	r2, r3
    5f20:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    5f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f28:	2105      	movs	r1, #5
    5f2a:	5499      	strb	r1, [r3, r2]
    5f2c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	3301      	adds	r3, #1
    5f38:	b2da      	uxtb	r2, r3
    5f3a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f42:	701a      	strb	r2, [r3, #0]
    5f44:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	2bff      	cmp	r3, #255	; 0xff
    5f50:	d105      	bne.n	5f5e <ground_calibrate+0xf6>
    5f52:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f5a:	2200      	movs	r2, #0
    5f5c:	701a      	strb	r2, [r3, #0]
    5f5e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	461a      	mov	r2, r3
    5f6a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    5f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f72:	2102      	movs	r1, #2
    5f74:	5499      	strb	r1, [r3, r2]
    5f76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	3301      	adds	r3, #1
    5f82:	b2da      	uxtb	r2, r3
    5f84:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8c:	701a      	strb	r2, [r3, #0]
    5f8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	2bff      	cmp	r3, #255	; 0xff
    5f9a:	d105      	bne.n	5fa8 <ground_calibrate+0x140>
    5f9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa4:	2200      	movs	r2, #0
    5fa6:	701a      	strb	r2, [r3, #0]
    5fa8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    5fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fb0:	2202      	movs	r2, #2
    5fb2:	701a      	strb	r2, [r3, #0]
    5fb4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	2202      	movs	r2, #2
    5fbe:	701a      	strb	r2, [r3, #0]
    5fc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc8:	781b      	ldrb	r3, [r3, #0]
    5fca:	461a      	mov	r2, r3
    5fcc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    5fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd4:	7819      	ldrb	r1, [r3, #0]
    5fd6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    5fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fde:	5499      	strb	r1, [r3, r2]
    5fe0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe8:	781b      	ldrb	r3, [r3, #0]
    5fea:	3301      	adds	r3, #1
    5fec:	b2da      	uxtb	r2, r3
    5fee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff6:	701a      	strb	r2, [r3, #0]
    5ff8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    5ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	2bff      	cmp	r3, #255	; 0xff
    6004:	d105      	bne.n	6012 <ground_calibrate+0x1aa>
    6006:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    600a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600e:	2200      	movs	r2, #0
    6010:	701a      	strb	r2, [r3, #0]
    6012:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	461a      	mov	r2, r3
    601e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6026:	7819      	ldrb	r1, [r3, #0]
    6028:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    602c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6030:	5499      	strb	r1, [r3, r2]
    6032:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    603a:	781b      	ldrb	r3, [r3, #0]
    603c:	3301      	adds	r3, #1
    603e:	b2da      	uxtb	r2, r3
    6040:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6048:	701a      	strb	r2, [r3, #0]
    604a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	2bff      	cmp	r3, #255	; 0xff
    6056:	d105      	bne.n	6064 <ground_calibrate+0x1fc>
    6058:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    605c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6060:	2200      	movs	r2, #0
    6062:	701a      	strb	r2, [r3, #0]
    6064:	f242 0339 	movw	r3, #8249	; 0x2039
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	b2db      	uxtb	r3, r3
    6070:	f003 0310 	and.w	r3, r3, #16
    6074:	2b00      	cmp	r3, #0
    6076:	f041 804e 	bne.w	7116 <ground_calibrate+0x12ae>
    607a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    607e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	b2db      	uxtb	r3, r3
    6086:	461a      	mov	r2, r3
    6088:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    608c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6090:	5c9a      	ldrb	r2, [r3, r2]
    6092:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    6096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    609a:	701a      	strb	r2, [r3, #0]
    609c:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	2200      	movs	r2, #0
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    60ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b0:	781b      	ldrb	r3, [r3, #0]
    60b2:	b2db      	uxtb	r3, r3
    60b4:	3301      	adds	r3, #1
    60b6:	b2da      	uxtb	r2, r3
    60b8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    60bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c0:	701a      	strb	r2, [r3, #0]
    60c2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    60c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ca:	781b      	ldrb	r3, [r3, #0]
    60cc:	b2db      	uxtb	r3, r3
    60ce:	2bff      	cmp	r3, #255	; 0xff
    60d0:	d105      	bne.n	60de <ground_calibrate+0x276>
    60d2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    60d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60da:	2200      	movs	r2, #0
    60dc:	701a      	strb	r2, [r3, #0]
    60de:	f242 0338 	movw	r3, #8248	; 0x2038
    60e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e6:	f242 0238 	movw	r2, #8248	; 0x2038
    60ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    60ee:	7812      	ldrb	r2, [r2, #0]
    60f0:	b2d2      	uxtb	r2, r2
    60f2:	f042 0201 	orr.w	r2, r2, #1
    60f6:	b2d2      	uxtb	r2, r2
    60f8:	701a      	strb	r2, [r3, #0]
    60fa:	f242 0339 	movw	r3, #8249	; 0x2039
    60fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6102:	f242 0239 	movw	r2, #8249	; 0x2039
    6106:	f2c2 0200 	movt	r2, #8192	; 0x2000
    610a:	7812      	ldrb	r2, [r2, #0]
    610c:	b2d2      	uxtb	r2, r2
    610e:	f042 0210 	orr.w	r2, r2, #16
    6112:	b2d2      	uxtb	r2, r2
    6114:	701a      	strb	r2, [r3, #0]
    6116:	f000 bffe 	b.w	7116 <ground_calibrate+0x12ae>
    611a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	3301      	adds	r3, #1
    6126:	b2da      	uxtb	r2, r3
    6128:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	701a      	strb	r2, [r3, #0]
    6132:	f000 bff0 	b.w	7116 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6136:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    613a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613e:	781b      	ldrb	r3, [r3, #0]
    6140:	2b01      	cmp	r3, #1
    6142:	f040 87e8 	bne.w	7116 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6146:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    614a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614e:	885b      	ldrh	r3, [r3, #2]
    6150:	b21b      	sxth	r3, r3
    6152:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6156:	db09      	blt.n	616c <ground_calibrate+0x304>
    6158:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    615c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6160:	885b      	ldrh	r3, [r3, #2]
    6162:	b21b      	sxth	r3, r3
    6164:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6168:	f340 87d5 	ble.w	7116 <ground_calibrate+0x12ae>
      ir_gain_calib();
    616c:	f00b fcfc 	bl	11b68 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6170:	f240 33f8 	movw	r3, #1016	; 0x3f8
    6174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6178:	681a      	ldr	r2, [r3, #0]
    617a:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6184:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    618c:	781a      	ldrb	r2, [r3, #0]
    618e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	b2db      	uxtb	r3, r3
    619a:	429a      	cmp	r2, r3
    619c:	d313      	bcc.n	61c6 <ground_calibrate+0x35e>
    619e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    61a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	b2db      	uxtb	r3, r3
    61aa:	461a      	mov	r2, r3
    61ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    61b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	1ad3      	subs	r3, r2, r3
    61b8:	33ff      	adds	r3, #255	; 0xff
    61ba:	2b14      	cmp	r3, #20
    61bc:	bfd4      	ite	le
    61be:	2300      	movle	r3, #0
    61c0:	2301      	movgt	r3, #1
    61c2:	b2db      	uxtb	r3, r3
    61c4:	e011      	b.n	61ea <ground_calibrate+0x382>
    61c6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    61ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ce:	781b      	ldrb	r3, [r3, #0]
    61d0:	b2db      	uxtb	r3, r3
    61d2:	461a      	mov	r2, r3
    61d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    61d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	1ad3      	subs	r3, r2, r3
    61e0:	2b14      	cmp	r3, #20
    61e2:	bfd4      	ite	le
    61e4:	2300      	movle	r3, #0
    61e6:	2301      	movgt	r3, #1
    61e8:	b2db      	uxtb	r3, r3
    61ea:	2b00      	cmp	r3, #0
    61ec:	f000 85a6 	beq.w	6d3c <ground_calibrate+0xed4>
    61f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    61f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	461a      	mov	r2, r3
    61fc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6204:	2105      	movs	r1, #5
    6206:	5499      	strb	r1, [r3, r2]
    6208:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    620c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6210:	781b      	ldrb	r3, [r3, #0]
    6212:	3301      	adds	r3, #1
    6214:	b2da      	uxtb	r2, r3
    6216:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    621a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    621e:	701a      	strb	r2, [r3, #0]
    6220:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	2bff      	cmp	r3, #255	; 0xff
    622c:	d105      	bne.n	623a <ground_calibrate+0x3d2>
    622e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6236:	2200      	movs	r2, #0
    6238:	701a      	strb	r2, [r3, #0]
    623a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    623e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6242:	781b      	ldrb	r3, [r3, #0]
    6244:	461a      	mov	r2, r3
    6246:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    624a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624e:	2105      	movs	r1, #5
    6250:	5499      	strb	r1, [r3, r2]
    6252:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625a:	781b      	ldrb	r3, [r3, #0]
    625c:	3301      	adds	r3, #1
    625e:	b2da      	uxtb	r2, r3
    6260:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6268:	701a      	strb	r2, [r3, #0]
    626a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6272:	781b      	ldrb	r3, [r3, #0]
    6274:	2bff      	cmp	r3, #255	; 0xff
    6276:	d105      	bne.n	6284 <ground_calibrate+0x41c>
    6278:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6280:	2200      	movs	r2, #0
    6282:	701a      	strb	r2, [r3, #0]
    6284:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628c:	2205      	movs	r2, #5
    628e:	701a      	strb	r2, [r3, #0]
    6290:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6298:	2205      	movs	r2, #5
    629a:	701a      	strb	r2, [r3, #0]
    629c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    62a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a4:	781b      	ldrb	r3, [r3, #0]
    62a6:	461a      	mov	r2, r3
    62a8:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	7819      	ldrb	r1, [r3, #0]
    62b2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    62b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ba:	5499      	strb	r1, [r3, r2]
    62bc:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    62c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c4:	781a      	ldrb	r2, [r3, #0]
    62c6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    62ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	4413      	add	r3, r2
    62d2:	b2da      	uxtb	r2, r3
    62d4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    62d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62dc:	701a      	strb	r2, [r3, #0]
    62de:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    62e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e6:	781a      	ldrb	r2, [r3, #0]
    62e8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    62ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	4413      	add	r3, r2
    62f4:	b2da      	uxtb	r2, r3
    62f6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    62fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fe:	701a      	strb	r2, [r3, #0]
    6300:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	3301      	adds	r3, #1
    630c:	b2da      	uxtb	r2, r3
    630e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6316:	701a      	strb	r2, [r3, #0]
    6318:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    631c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	2bff      	cmp	r3, #255	; 0xff
    6324:	d105      	bne.n	6332 <ground_calibrate+0x4ca>
    6326:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632e:	2200      	movs	r2, #0
    6330:	701a      	strb	r2, [r3, #0]
    6332:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	461a      	mov	r2, r3
    633e:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    6342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6346:	7859      	ldrb	r1, [r3, #1]
    6348:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	5499      	strb	r1, [r3, r2]
    6352:	4bd2      	ldr	r3, [pc, #840]	; (669c <ground_calibrate+0x834>)
    6354:	781a      	ldrb	r2, [r3, #0]
    6356:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    635a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635e:	781b      	ldrb	r3, [r3, #0]
    6360:	4413      	add	r3, r2
    6362:	b2da      	uxtb	r2, r3
    6364:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636c:	701a      	strb	r2, [r3, #0]
    636e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6376:	781a      	ldrb	r2, [r3, #0]
    6378:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	4413      	add	r3, r2
    6384:	b2da      	uxtb	r2, r3
    6386:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638e:	701a      	strb	r2, [r3, #0]
    6390:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	3301      	adds	r3, #1
    639c:	b2da      	uxtb	r2, r3
    639e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    63a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a6:	701a      	strb	r2, [r3, #0]
    63a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	781b      	ldrb	r3, [r3, #0]
    63b2:	2bff      	cmp	r3, #255	; 0xff
    63b4:	d105      	bne.n	63c2 <ground_calibrate+0x55a>
    63b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	2200      	movs	r2, #0
    63c0:	701a      	strb	r2, [r3, #0]
    63c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    63c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ca:	781b      	ldrb	r3, [r3, #0]
    63cc:	461a      	mov	r2, r3
    63ce:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    63d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d6:	7899      	ldrb	r1, [r3, #2]
    63d8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    63dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e0:	5499      	strb	r1, [r3, r2]
    63e2:	4baf      	ldr	r3, [pc, #700]	; (66a0 <ground_calibrate+0x838>)
    63e4:	781a      	ldrb	r2, [r3, #0]
    63e6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    63ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ee:	781b      	ldrb	r3, [r3, #0]
    63f0:	4413      	add	r3, r2
    63f2:	b2da      	uxtb	r2, r3
    63f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    63f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fc:	701a      	strb	r2, [r3, #0]
    63fe:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6406:	781a      	ldrb	r2, [r3, #0]
    6408:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    640c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	4413      	add	r3, r2
    6414:	b2da      	uxtb	r2, r3
    6416:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    641a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    641e:	701a      	strb	r2, [r3, #0]
    6420:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	781b      	ldrb	r3, [r3, #0]
    642a:	3301      	adds	r3, #1
    642c:	b2da      	uxtb	r2, r3
    642e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6436:	701a      	strb	r2, [r3, #0]
    6438:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    643c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6440:	781b      	ldrb	r3, [r3, #0]
    6442:	2bff      	cmp	r3, #255	; 0xff
    6444:	d105      	bne.n	6452 <ground_calibrate+0x5ea>
    6446:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644e:	2200      	movs	r2, #0
    6450:	701a      	strb	r2, [r3, #0]
    6452:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645a:	781b      	ldrb	r3, [r3, #0]
    645c:	461a      	mov	r2, r3
    645e:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    6462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6466:	78d9      	ldrb	r1, [r3, #3]
    6468:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    646c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6470:	5499      	strb	r1, [r3, r2]
    6472:	4b8c      	ldr	r3, [pc, #560]	; (66a4 <ground_calibrate+0x83c>)
    6474:	781a      	ldrb	r2, [r3, #0]
    6476:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    647a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647e:	781b      	ldrb	r3, [r3, #0]
    6480:	4413      	add	r3, r2
    6482:	b2da      	uxtb	r2, r3
    6484:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648c:	701a      	strb	r2, [r3, #0]
    648e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6496:	781a      	ldrb	r2, [r3, #0]
    6498:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    649c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a0:	781b      	ldrb	r3, [r3, #0]
    64a2:	4413      	add	r3, r2
    64a4:	b2da      	uxtb	r2, r3
    64a6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    64aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ae:	701a      	strb	r2, [r3, #0]
    64b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    64b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b8:	781b      	ldrb	r3, [r3, #0]
    64ba:	3301      	adds	r3, #1
    64bc:	b2da      	uxtb	r2, r3
    64be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    64c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c6:	701a      	strb	r2, [r3, #0]
    64c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    64cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	2bff      	cmp	r3, #255	; 0xff
    64d4:	d105      	bne.n	64e2 <ground_calibrate+0x67a>
    64d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    64da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64de:	2200      	movs	r2, #0
    64e0:	701a      	strb	r2, [r3, #0]
    64e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    64e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ea:	781b      	ldrb	r3, [r3, #0]
    64ec:	461a      	mov	r2, r3
    64ee:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    64f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f6:	7819      	ldrb	r1, [r3, #0]
    64f8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    64fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6500:	5499      	strb	r1, [r3, r2]
    6502:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    6506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650a:	781a      	ldrb	r2, [r3, #0]
    650c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	4413      	add	r3, r2
    6518:	b2da      	uxtb	r2, r3
    651a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    651e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6522:	701a      	strb	r2, [r3, #0]
    6524:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652c:	781a      	ldrb	r2, [r3, #0]
    652e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	781b      	ldrb	r3, [r3, #0]
    6538:	4413      	add	r3, r2
    653a:	b2da      	uxtb	r2, r3
    653c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6544:	701a      	strb	r2, [r3, #0]
    6546:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	3301      	adds	r3, #1
    6552:	b2da      	uxtb	r2, r3
    6554:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655c:	701a      	strb	r2, [r3, #0]
    655e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	2bff      	cmp	r3, #255	; 0xff
    656a:	d105      	bne.n	6578 <ground_calibrate+0x710>
    656c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6574:	2200      	movs	r2, #0
    6576:	701a      	strb	r2, [r3, #0]
    6578:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    657c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6580:	781b      	ldrb	r3, [r3, #0]
    6582:	461a      	mov	r2, r3
    6584:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	7859      	ldrb	r1, [r3, #1]
    658e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	5499      	strb	r1, [r3, r2]
    6598:	4b43      	ldr	r3, [pc, #268]	; (66a8 <ground_calibrate+0x840>)
    659a:	781a      	ldrb	r2, [r3, #0]
    659c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    65a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a4:	781b      	ldrb	r3, [r3, #0]
    65a6:	4413      	add	r3, r2
    65a8:	b2da      	uxtb	r2, r3
    65aa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    65ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b2:	701a      	strb	r2, [r3, #0]
    65b4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    65b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65bc:	781a      	ldrb	r2, [r3, #0]
    65be:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	4413      	add	r3, r2
    65ca:	b2da      	uxtb	r2, r3
    65cc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    65d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d4:	701a      	strb	r2, [r3, #0]
    65d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	3301      	adds	r3, #1
    65e2:	b2da      	uxtb	r2, r3
    65e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    65e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ec:	701a      	strb	r2, [r3, #0]
    65ee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	781b      	ldrb	r3, [r3, #0]
    65f8:	2bff      	cmp	r3, #255	; 0xff
    65fa:	d105      	bne.n	6608 <ground_calibrate+0x7a0>
    65fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6604:	2200      	movs	r2, #0
    6606:	701a      	strb	r2, [r3, #0]
    6608:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	461a      	mov	r2, r3
    6614:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    6618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661c:	7899      	ldrb	r1, [r3, #2]
    661e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	5499      	strb	r1, [r3, r2]
    6628:	4b20      	ldr	r3, [pc, #128]	; (66ac <ground_calibrate+0x844>)
    662a:	781a      	ldrb	r2, [r3, #0]
    662c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	4413      	add	r3, r2
    6638:	b2da      	uxtb	r2, r3
    663a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    663e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6642:	701a      	strb	r2, [r3, #0]
    6644:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664c:	781a      	ldrb	r2, [r3, #0]
    664e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	781b      	ldrb	r3, [r3, #0]
    6658:	4413      	add	r3, r2
    665a:	b2da      	uxtb	r2, r3
    665c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6664:	701a      	strb	r2, [r3, #0]
    6666:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	3301      	adds	r3, #1
    6672:	b2da      	uxtb	r2, r3
    6674:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667c:	701a      	strb	r2, [r3, #0]
    667e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	781b      	ldrb	r3, [r3, #0]
    6688:	2bff      	cmp	r3, #255	; 0xff
    668a:	d111      	bne.n	66b0 <ground_calibrate+0x848>
    668c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6694:	2200      	movs	r2, #0
    6696:	701a      	strb	r2, [r3, #0]
    6698:	e00a      	b.n	66b0 <ground_calibrate+0x848>
    669a:	bf00      	nop
    669c:	2004c4e1 	.word	0x2004c4e1
    66a0:	2004c4e2 	.word	0x2004c4e2
    66a4:	2004c4e3 	.word	0x2004c4e3
    66a8:	2004c4e5 	.word	0x2004c4e5
    66ac:	2004c4e6 	.word	0x2004c4e6
    66b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    66b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	461a      	mov	r2, r3
    66bc:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    66c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c4:	78d9      	ldrb	r1, [r3, #3]
    66c6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	5499      	strb	r1, [r3, r2]
    66d0:	4bd3      	ldr	r3, [pc, #844]	; (6a20 <ground_calibrate+0xbb8>)
    66d2:	781a      	ldrb	r2, [r3, #0]
    66d4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    66d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66dc:	781b      	ldrb	r3, [r3, #0]
    66de:	4413      	add	r3, r2
    66e0:	b2da      	uxtb	r2, r3
    66e2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    66e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ea:	701a      	strb	r2, [r3, #0]
    66ec:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    66f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f4:	781a      	ldrb	r2, [r3, #0]
    66f6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    66fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	4413      	add	r3, r2
    6702:	b2da      	uxtb	r2, r3
    6704:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670c:	701a      	strb	r2, [r3, #0]
    670e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6716:	781b      	ldrb	r3, [r3, #0]
    6718:	3301      	adds	r3, #1
    671a:	b2da      	uxtb	r2, r3
    671c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6724:	701a      	strb	r2, [r3, #0]
    6726:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    672a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672e:	781b      	ldrb	r3, [r3, #0]
    6730:	2bff      	cmp	r3, #255	; 0xff
    6732:	d105      	bne.n	6740 <ground_calibrate+0x8d8>
    6734:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673c:	2200      	movs	r2, #0
    673e:	701a      	strb	r2, [r3, #0]
    6740:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6748:	781b      	ldrb	r3, [r3, #0]
    674a:	461a      	mov	r2, r3
    674c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    6750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6754:	7819      	ldrb	r1, [r3, #0]
    6756:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675e:	5499      	strb	r1, [r3, r2]
    6760:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	781a      	ldrb	r2, [r3, #0]
    676a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    676e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6772:	781b      	ldrb	r3, [r3, #0]
    6774:	4413      	add	r3, r2
    6776:	b2da      	uxtb	r2, r3
    6778:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6780:	701a      	strb	r2, [r3, #0]
    6782:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678a:	781a      	ldrb	r2, [r3, #0]
    678c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	4413      	add	r3, r2
    6798:	b2da      	uxtb	r2, r3
    679a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    679e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a2:	701a      	strb	r2, [r3, #0]
    67a4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	3301      	adds	r3, #1
    67b0:	b2da      	uxtb	r2, r3
    67b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    67b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ba:	701a      	strb	r2, [r3, #0]
    67bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	2bff      	cmp	r3, #255	; 0xff
    67c8:	d105      	bne.n	67d6 <ground_calibrate+0x96e>
    67ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	2200      	movs	r2, #0
    67d4:	701a      	strb	r2, [r3, #0]
    67d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    67da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	461a      	mov	r2, r3
    67e2:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    67e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ea:	7859      	ldrb	r1, [r3, #1]
    67ec:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	5499      	strb	r1, [r3, r2]
    67f6:	4b8b      	ldr	r3, [pc, #556]	; (6a24 <ground_calibrate+0xbbc>)
    67f8:	781a      	ldrb	r2, [r3, #0]
    67fa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    67fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	4413      	add	r3, r2
    6806:	b2da      	uxtb	r2, r3
    6808:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    680c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6810:	701a      	strb	r2, [r3, #0]
    6812:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681a:	781a      	ldrb	r2, [r3, #0]
    681c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	4413      	add	r3, r2
    6828:	b2da      	uxtb	r2, r3
    682a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	3301      	adds	r3, #1
    6840:	b2da      	uxtb	r2, r3
    6842:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684a:	701a      	strb	r2, [r3, #0]
    684c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	2bff      	cmp	r3, #255	; 0xff
    6858:	d105      	bne.n	6866 <ground_calibrate+0x9fe>
    685a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    685e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
    6866:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	461a      	mov	r2, r3
    6872:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	7899      	ldrb	r1, [r3, #2]
    687c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	5499      	strb	r1, [r3, r2]
    6886:	4b68      	ldr	r3, [pc, #416]	; (6a28 <ground_calibrate+0xbc0>)
    6888:	781a      	ldrb	r2, [r3, #0]
    688a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    688e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	4413      	add	r3, r2
    6896:	b2da      	uxtb	r2, r3
    6898:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    689c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a0:	701a      	strb	r2, [r3, #0]
    68a2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    68a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68aa:	781a      	ldrb	r2, [r3, #0]
    68ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	781b      	ldrb	r3, [r3, #0]
    68b6:	4413      	add	r3, r2
    68b8:	b2da      	uxtb	r2, r3
    68ba:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    68be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c2:	701a      	strb	r2, [r3, #0]
    68c4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	3301      	adds	r3, #1
    68d0:	b2da      	uxtb	r2, r3
    68d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	701a      	strb	r2, [r3, #0]
    68dc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	781b      	ldrb	r3, [r3, #0]
    68e6:	2bff      	cmp	r3, #255	; 0xff
    68e8:	d105      	bne.n	68f6 <ground_calibrate+0xa8e>
    68ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    68ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f2:	2200      	movs	r2, #0
    68f4:	701a      	strb	r2, [r3, #0]
    68f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    68fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	461a      	mov	r2, r3
    6902:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    6906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690a:	78d9      	ldrb	r1, [r3, #3]
    690c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	5499      	strb	r1, [r3, r2]
    6916:	4b45      	ldr	r3, [pc, #276]	; (6a2c <ground_calibrate+0xbc4>)
    6918:	781a      	ldrb	r2, [r3, #0]
    691a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    691e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	4413      	add	r3, r2
    6926:	b2da      	uxtb	r2, r3
    6928:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6930:	701a      	strb	r2, [r3, #0]
    6932:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693a:	781a      	ldrb	r2, [r3, #0]
    693c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	4413      	add	r3, r2
    6948:	b2da      	uxtb	r2, r3
    694a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    694e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6952:	701a      	strb	r2, [r3, #0]
    6954:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695c:	781b      	ldrb	r3, [r3, #0]
    695e:	3301      	adds	r3, #1
    6960:	b2da      	uxtb	r2, r3
    6962:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696a:	701a      	strb	r2, [r3, #0]
    696c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	2bff      	cmp	r3, #255	; 0xff
    6978:	d105      	bne.n	6986 <ground_calibrate+0xb1e>
    697a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    697e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6982:	2200      	movs	r2, #0
    6984:	701a      	strb	r2, [r3, #0]
    6986:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    698a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698e:	781b      	ldrb	r3, [r3, #0]
    6990:	461a      	mov	r2, r3
    6992:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699a:	7819      	ldrb	r1, [r3, #0]
    699c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    69a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a4:	5499      	strb	r1, [r3, r2]
    69a6:	f240 33f2 	movw	r3, #1010	; 0x3f2
    69aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ae:	781a      	ldrb	r2, [r3, #0]
    69b0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    69b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	4413      	add	r3, r2
    69bc:	b2da      	uxtb	r2, r3
    69be:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	701a      	strb	r2, [r3, #0]
    69c8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    69cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d0:	781a      	ldrb	r2, [r3, #0]
    69d2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	4413      	add	r3, r2
    69de:	b2da      	uxtb	r2, r3
    69e0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    69e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e8:	701a      	strb	r2, [r3, #0]
    69ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	3301      	adds	r3, #1
    69f6:	b2da      	uxtb	r2, r3
    69f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    69fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	2bff      	cmp	r3, #255	; 0xff
    6a0e:	d10f      	bne.n	6a30 <ground_calibrate+0xbc8>
    6a10:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a18:	2200      	movs	r2, #0
    6a1a:	701a      	strb	r2, [r3, #0]
    6a1c:	e008      	b.n	6a30 <ground_calibrate+0xbc8>
    6a1e:	bf00      	nop
    6a20:	2004c4e7 	.word	0x2004c4e7
    6a24:	2004c4dd 	.word	0x2004c4dd
    6a28:	2004c4de 	.word	0x2004c4de
    6a2c:	2004c4df 	.word	0x2004c4df
    6a30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a38:	781b      	ldrb	r3, [r3, #0]
    6a3a:	461a      	mov	r2, r3
    6a3c:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a44:	7859      	ldrb	r1, [r3, #1]
    6a46:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4e:	5499      	strb	r1, [r3, r2]
    6a50:	4bd4      	ldr	r3, [pc, #848]	; (6da4 <ground_calibrate+0xf3c>)
    6a52:	781a      	ldrb	r2, [r3, #0]
    6a54:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	4413      	add	r3, r2
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781a      	ldrb	r2, [r3, #0]
    6a76:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	4413      	add	r3, r2
    6a82:	b2da      	uxtb	r2, r3
    6a84:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	701a      	strb	r2, [r3, #0]
    6a8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	3301      	adds	r3, #1
    6a9a:	b2da      	uxtb	r2, r3
    6a9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	701a      	strb	r2, [r3, #0]
    6aa6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	2bff      	cmp	r3, #255	; 0xff
    6ab2:	d105      	bne.n	6ac0 <ground_calibrate+0xc58>
    6ab4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	2200      	movs	r2, #0
    6abe:	701a      	strb	r2, [r3, #0]
    6ac0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	461a      	mov	r2, r3
    6acc:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad4:	7819      	ldrb	r1, [r3, #0]
    6ad6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ade:	5499      	strb	r1, [r3, r2]
    6ae0:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae8:	781a      	ldrb	r2, [r3, #0]
    6aea:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	4413      	add	r3, r2
    6af6:	b2da      	uxtb	r2, r3
    6af8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	701a      	strb	r2, [r3, #0]
    6b02:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	781a      	ldrb	r2, [r3, #0]
    6b0c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b14:	781b      	ldrb	r3, [r3, #0]
    6b16:	4413      	add	r3, r2
    6b18:	b2da      	uxtb	r2, r3
    6b1a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	701a      	strb	r2, [r3, #0]
    6b24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	3301      	adds	r3, #1
    6b30:	b2da      	uxtb	r2, r3
    6b32:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	701a      	strb	r2, [r3, #0]
    6b3c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	2bff      	cmp	r3, #255	; 0xff
    6b48:	d105      	bne.n	6b56 <ground_calibrate+0xcee>
    6b4a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b52:	2200      	movs	r2, #0
    6b54:	701a      	strb	r2, [r3, #0]
    6b56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5e:	781b      	ldrb	r3, [r3, #0]
    6b60:	461a      	mov	r2, r3
    6b62:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b6a:	7859      	ldrb	r1, [r3, #1]
    6b6c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	5499      	strb	r1, [r3, r2]
    6b76:	4b8c      	ldr	r3, [pc, #560]	; (6da8 <ground_calibrate+0xf40>)
    6b78:	781a      	ldrb	r2, [r3, #0]
    6b7a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	4413      	add	r3, r2
    6b86:	b2da      	uxtb	r2, r3
    6b88:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b90:	701a      	strb	r2, [r3, #0]
    6b92:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	781a      	ldrb	r2, [r3, #0]
    6b9c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	4413      	add	r3, r2
    6ba8:	b2da      	uxtb	r2, r3
    6baa:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	3301      	adds	r3, #1
    6bc0:	b2da      	uxtb	r2, r3
    6bc2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bca:	701a      	strb	r2, [r3, #0]
    6bcc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	2bff      	cmp	r3, #255	; 0xff
    6bd8:	d105      	bne.n	6be6 <ground_calibrate+0xd7e>
    6bda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	2200      	movs	r2, #0
    6be4:	701a      	strb	r2, [r3, #0]
    6be6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	461a      	mov	r2, r3
    6bf2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	7819      	ldrb	r1, [r3, #0]
    6bfc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c04:	5499      	strb	r1, [r3, r2]
    6c06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	3301      	adds	r3, #1
    6c12:	b2da      	uxtb	r2, r3
    6c14:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1c:	701a      	strb	r2, [r3, #0]
    6c1e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	2bff      	cmp	r3, #255	; 0xff
    6c2a:	d105      	bne.n	6c38 <ground_calibrate+0xdd0>
    6c2c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c34:	2200      	movs	r2, #0
    6c36:	701a      	strb	r2, [r3, #0]
    6c38:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	461a      	mov	r2, r3
    6c44:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	7819      	ldrb	r1, [r3, #0]
    6c4e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c56:	5499      	strb	r1, [r3, r2]
    6c58:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	3301      	adds	r3, #1
    6c64:	b2da      	uxtb	r2, r3
    6c66:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6e:	701a      	strb	r2, [r3, #0]
    6c70:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c78:	781b      	ldrb	r3, [r3, #0]
    6c7a:	2bff      	cmp	r3, #255	; 0xff
    6c7c:	d105      	bne.n	6c8a <ground_calibrate+0xe22>
    6c7e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c86:	2200      	movs	r2, #0
    6c88:	701a      	strb	r2, [r3, #0]
    6c8a:	f242 0339 	movw	r3, #8249	; 0x2039
    6c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c92:	781b      	ldrb	r3, [r3, #0]
    6c94:	b2db      	uxtb	r3, r3
    6c96:	f003 0310 	and.w	r3, r3, #16
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d15a      	bne.n	6d54 <ground_calibrate+0xeec>
    6c9e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	b2db      	uxtb	r3, r3
    6caa:	461a      	mov	r2, r3
    6cac:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb4:	5c9a      	ldrb	r2, [r3, r2]
    6cb6:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    6cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbe:	701a      	strb	r2, [r3, #0]
    6cc0:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    6cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc8:	2200      	movs	r2, #0
    6cca:	701a      	strb	r2, [r3, #0]
    6ccc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	b2db      	uxtb	r3, r3
    6cd8:	3301      	adds	r3, #1
    6cda:	b2da      	uxtb	r2, r3
    6cdc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce4:	701a      	strb	r2, [r3, #0]
    6ce6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	b2db      	uxtb	r3, r3
    6cf2:	2bff      	cmp	r3, #255	; 0xff
    6cf4:	d105      	bne.n	6d02 <ground_calibrate+0xe9a>
    6cf6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfe:	2200      	movs	r2, #0
    6d00:	701a      	strb	r2, [r3, #0]
    6d02:	f242 0338 	movw	r3, #8248	; 0x2038
    6d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0a:	f242 0238 	movw	r2, #8248	; 0x2038
    6d0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d12:	7812      	ldrb	r2, [r2, #0]
    6d14:	b2d2      	uxtb	r2, r2
    6d16:	f042 0201 	orr.w	r2, r2, #1
    6d1a:	b2d2      	uxtb	r2, r2
    6d1c:	701a      	strb	r2, [r3, #0]
    6d1e:	f242 0339 	movw	r3, #8249	; 0x2039
    6d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d26:	f242 0239 	movw	r2, #8249	; 0x2039
    6d2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d2e:	7812      	ldrb	r2, [r2, #0]
    6d30:	b2d2      	uxtb	r2, r2
    6d32:	f042 0210 	orr.w	r2, r2, #16
    6d36:	b2d2      	uxtb	r2, r2
    6d38:	701a      	strb	r2, [r3, #0]
    6d3a:	e00b      	b.n	6d54 <ground_calibrate+0xeec>
    6d3c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    6d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	3301      	adds	r3, #1
    6d48:	b2da      	uxtb	r2, r3
    6d4a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    6d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d52:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6d54:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    6d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5c:	2202      	movs	r2, #2
    6d5e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6d60:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d68:	781a      	ldrb	r2, [r3, #0]
    6d6a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	b2db      	uxtb	r3, r3
    6d76:	429a      	cmp	r2, r3
    6d78:	d318      	bcc.n	6dac <ground_calibrate+0xf44>
    6d7a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	b2db      	uxtb	r3, r3
    6d86:	461a      	mov	r2, r3
    6d88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	781b      	ldrb	r3, [r3, #0]
    6d92:	1ad3      	subs	r3, r2, r3
    6d94:	33ff      	adds	r3, #255	; 0xff
    6d96:	2b06      	cmp	r3, #6
    6d98:	bfd4      	ite	le
    6d9a:	2300      	movle	r3, #0
    6d9c:	2301      	movgt	r3, #1
    6d9e:	b2db      	uxtb	r3, r3
    6da0:	e016      	b.n	6dd0 <ground_calibrate+0xf68>
    6da2:	bf00      	nop
    6da4:	200003f3 	.word	0x200003f3
    6da8:	200003f5 	.word	0x200003f5
    6dac:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    6db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db4:	781b      	ldrb	r3, [r3, #0]
    6db6:	b2db      	uxtb	r3, r3
    6db8:	461a      	mov	r2, r3
    6dba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc2:	781b      	ldrb	r3, [r3, #0]
    6dc4:	1ad3      	subs	r3, r2, r3
    6dc6:	2b06      	cmp	r3, #6
    6dc8:	bfd4      	ite	le
    6dca:	2300      	movle	r3, #0
    6dcc:	2301      	movgt	r3, #1
    6dce:	b2db      	uxtb	r3, r3
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	f000 8194 	beq.w	70fe <ground_calibrate+0x1296>
    6dd6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	461a      	mov	r2, r3
    6de2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	2105      	movs	r1, #5
    6dec:	5499      	strb	r1, [r3, r2]
    6dee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	3301      	adds	r3, #1
    6dfa:	b2da      	uxtb	r2, r3
    6dfc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e04:	701a      	strb	r2, [r3, #0]
    6e06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2bff      	cmp	r3, #255	; 0xff
    6e12:	d105      	bne.n	6e20 <ground_calibrate+0xfb8>
    6e14:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1c:	2200      	movs	r2, #0
    6e1e:	701a      	strb	r2, [r3, #0]
    6e20:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	461a      	mov	r2, r3
    6e2c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e34:	2103      	movs	r1, #3
    6e36:	5499      	strb	r1, [r3, r2]
    6e38:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e40:	781b      	ldrb	r3, [r3, #0]
    6e42:	3301      	adds	r3, #1
    6e44:	b2da      	uxtb	r2, r3
    6e46:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4e:	701a      	strb	r2, [r3, #0]
    6e50:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	781b      	ldrb	r3, [r3, #0]
    6e5a:	2bff      	cmp	r3, #255	; 0xff
    6e5c:	d105      	bne.n	6e6a <ground_calibrate+0x1002>
    6e5e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e66:	2200      	movs	r2, #0
    6e68:	701a      	strb	r2, [r3, #0]
    6e6a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e72:	2203      	movs	r2, #3
    6e74:	701a      	strb	r2, [r3, #0]
    6e76:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7e:	2203      	movs	r2, #3
    6e80:	701a      	strb	r2, [r3, #0]
    6e82:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	461a      	mov	r2, r3
    6e8e:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e96:	7819      	ldrb	r1, [r3, #0]
    6e98:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea0:	5499      	strb	r1, [r3, r2]
    6ea2:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	781a      	ldrb	r2, [r3, #0]
    6eac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	4413      	add	r3, r2
    6eb8:	b2da      	uxtb	r2, r3
    6eba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec2:	701a      	strb	r2, [r3, #0]
    6ec4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	781a      	ldrb	r2, [r3, #0]
    6ece:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	4413      	add	r3, r2
    6eda:	b2da      	uxtb	r2, r3
    6edc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee4:	701a      	strb	r2, [r3, #0]
    6ee6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	3301      	adds	r3, #1
    6ef2:	b2da      	uxtb	r2, r3
    6ef4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	701a      	strb	r2, [r3, #0]
    6efe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	2bff      	cmp	r3, #255	; 0xff
    6f0a:	d105      	bne.n	6f18 <ground_calibrate+0x10b0>
    6f0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f14:	2200      	movs	r2, #0
    6f16:	701a      	strb	r2, [r3, #0]
    6f18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	461a      	mov	r2, r3
    6f24:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f2c:	7859      	ldrb	r1, [r3, #1]
    6f2e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	5499      	strb	r1, [r3, r2]
    6f38:	4b77      	ldr	r3, [pc, #476]	; (7118 <ground_calibrate+0x12b0>)
    6f3a:	781a      	ldrb	r2, [r3, #0]
    6f3c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	4413      	add	r3, r2
    6f48:	b2da      	uxtb	r2, r3
    6f4a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f52:	701a      	strb	r2, [r3, #0]
    6f54:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5c:	781a      	ldrb	r2, [r3, #0]
    6f5e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	4413      	add	r3, r2
    6f6a:	b2da      	uxtb	r2, r3
    6f6c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    6f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f74:	701a      	strb	r2, [r3, #0]
    6f76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7e:	781b      	ldrb	r3, [r3, #0]
    6f80:	3301      	adds	r3, #1
    6f82:	b2da      	uxtb	r2, r3
    6f84:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8c:	701a      	strb	r2, [r3, #0]
    6f8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	2bff      	cmp	r3, #255	; 0xff
    6f9a:	d105      	bne.n	6fa8 <ground_calibrate+0x1140>
    6f9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa4:	2200      	movs	r2, #0
    6fa6:	701a      	strb	r2, [r3, #0]
    6fa8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb0:	781b      	ldrb	r3, [r3, #0]
    6fb2:	461a      	mov	r2, r3
    6fb4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    6fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbc:	7819      	ldrb	r1, [r3, #0]
    6fbe:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    6fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc6:	5499      	strb	r1, [r3, r2]
    6fc8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd0:	781b      	ldrb	r3, [r3, #0]
    6fd2:	3301      	adds	r3, #1
    6fd4:	b2da      	uxtb	r2, r3
    6fd6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fde:	701a      	strb	r2, [r3, #0]
    6fe0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	2bff      	cmp	r3, #255	; 0xff
    6fec:	d105      	bne.n	6ffa <ground_calibrate+0x1192>
    6fee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff6:	2200      	movs	r2, #0
    6ff8:	701a      	strb	r2, [r3, #0]
    6ffa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    6ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	461a      	mov	r2, r3
    7006:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    700a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700e:	7819      	ldrb	r1, [r3, #0]
    7010:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7018:	5499      	strb	r1, [r3, r2]
    701a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    701e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	3301      	adds	r3, #1
    7026:	b2da      	uxtb	r2, r3
    7028:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	701a      	strb	r2, [r3, #0]
    7032:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	2bff      	cmp	r3, #255	; 0xff
    703e:	d105      	bne.n	704c <ground_calibrate+0x11e4>
    7040:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7048:	2200      	movs	r2, #0
    704a:	701a      	strb	r2, [r3, #0]
    704c:	f242 0339 	movw	r3, #8249	; 0x2039
    7050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7054:	781b      	ldrb	r3, [r3, #0]
    7056:	b2db      	uxtb	r3, r3
    7058:	f003 0310 	and.w	r3, r3, #16
    705c:	2b00      	cmp	r3, #0
    705e:	d15a      	bne.n	7116 <ground_calibrate+0x12ae>
    7060:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7068:	781b      	ldrb	r3, [r3, #0]
    706a:	b2db      	uxtb	r3, r3
    706c:	461a      	mov	r2, r3
    706e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7076:	5c9a      	ldrb	r2, [r3, r2]
    7078:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	701a      	strb	r2, [r3, #0]
    7082:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    7086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708a:	2200      	movs	r2, #0
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	b2db      	uxtb	r3, r3
    709a:	3301      	adds	r3, #1
    709c:	b2da      	uxtb	r2, r3
    709e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	701a      	strb	r2, [r3, #0]
    70a8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    70ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	b2db      	uxtb	r3, r3
    70b4:	2bff      	cmp	r3, #255	; 0xff
    70b6:	d105      	bne.n	70c4 <ground_calibrate+0x125c>
    70b8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    70bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c0:	2200      	movs	r2, #0
    70c2:	701a      	strb	r2, [r3, #0]
    70c4:	f242 0338 	movw	r3, #8248	; 0x2038
    70c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70cc:	f242 0238 	movw	r2, #8248	; 0x2038
    70d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    70d4:	7812      	ldrb	r2, [r2, #0]
    70d6:	b2d2      	uxtb	r2, r2
    70d8:	f042 0201 	orr.w	r2, r2, #1
    70dc:	b2d2      	uxtb	r2, r2
    70de:	701a      	strb	r2, [r3, #0]
    70e0:	f242 0339 	movw	r3, #8249	; 0x2039
    70e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e8:	f242 0239 	movw	r2, #8249	; 0x2039
    70ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    70f0:	7812      	ldrb	r2, [r2, #0]
    70f2:	b2d2      	uxtb	r2, r2
    70f4:	f042 0210 	orr.w	r2, r2, #16
    70f8:	b2d2      	uxtb	r2, r2
    70fa:	701a      	strb	r2, [r3, #0]
    70fc:	e00b      	b.n	7116 <ground_calibrate+0x12ae>
    70fe:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    7102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	3301      	adds	r3, #1
    710a:	b2da      	uxtb	r2, r3
    710c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    7110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7114:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7116:	bd80      	pop	{r7, pc}
    7118:	200003f1 	.word	0x200003f1

0000711c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    711c:	b480      	push	{r7}
    711e:	b083      	sub	sp, #12
    7120:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7122:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    7126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	2b03      	cmp	r3, #3
    712e:	d10c      	bne.n	714a <pprz_mode_update+0x2e>
    7130:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    7134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	2b00      	cmp	r3, #0
    713c:	d032      	beq.n	71a4 <pprz_mode_update+0x88>
    713e:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    7142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7146:	2200      	movs	r2, #0
    7148:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    714a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    714e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7152:	891b      	ldrh	r3, [r3, #8]
    7154:	b21b      	sxth	r3, r3
    7156:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    715a:	dc0f      	bgt.n	717c <pprz_mode_update+0x60>
    715c:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	891b      	ldrh	r3, [r3, #8]
    7166:	b21a      	sxth	r2, r3
    7168:	f64e 5341 	movw	r3, #60737	; 0xed41
    716c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7170:	429a      	cmp	r2, r3
    7172:	bfb4      	ite	lt
    7174:	2300      	movlt	r3, #0
    7176:	2301      	movge	r3, #1
    7178:	b2db      	uxtb	r3, r3
    717a:	e000      	b.n	717e <pprz_mode_update+0x62>
    717c:	2302      	movs	r3, #2
    717e:	71fb      	strb	r3, [r7, #7]
    7180:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    7184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	79fa      	ldrb	r2, [r7, #7]
    718c:	429a      	cmp	r2, r3
    718e:	d007      	beq.n	71a0 <pprz_mode_update+0x84>
    7190:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    7194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7198:	79fa      	ldrb	r2, [r7, #7]
    719a:	701a      	strb	r2, [r3, #0]
    719c:	2301      	movs	r3, #1
    719e:	e002      	b.n	71a6 <pprz_mode_update+0x8a>
    71a0:	2300      	movs	r3, #0
    71a2:	e000      	b.n	71a6 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    71a4:	2300      	movs	r3, #0
}
    71a6:	4618      	mov	r0, r3
    71a8:	370c      	adds	r7, #12
    71aa:	46bd      	mov	sp, r7
    71ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b0:	4770      	bx	lr
    71b2:	bf00      	nop

000071b4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    71b4:	b480      	push	{r7}
    71b6:	b083      	sub	sp, #12
    71b8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    71ba:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    71be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c2:	89db      	ldrh	r3, [r3, #14]
    71c4:	b21a      	sxth	r2, r3
    71c6:	f640 437f 	movw	r3, #3199	; 0xc7f
    71ca:	429a      	cmp	r2, r3
    71cc:	bfd4      	ite	le
    71ce:	2300      	movle	r3, #0
    71d0:	2301      	movgt	r3, #1
    71d2:	b2db      	uxtb	r3, r3
    71d4:	71fb      	strb	r3, [r7, #7]
    71d6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    71da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	79fa      	ldrb	r2, [r7, #7]
    71e2:	429a      	cmp	r2, r3
    71e4:	d007      	beq.n	71f6 <ir_estim_mode_update+0x42>
    71e6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    71ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ee:	79fa      	ldrb	r2, [r7, #7]
    71f0:	701a      	strb	r2, [r3, #0]
    71f2:	2301      	movs	r3, #1
    71f4:	e000      	b.n	71f8 <ir_estim_mode_update+0x44>
    71f6:	2300      	movs	r3, #0
}
    71f8:	4618      	mov	r0, r3
    71fa:	370c      	adds	r7, #12
    71fc:	46bd      	mov	sp, r7
    71fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7202:	4770      	bx	lr

00007204 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    7204:	b480      	push	{r7}
    7206:	b083      	sub	sp, #12
    7208:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    720a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    720e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7212:	7cdb      	ldrb	r3, [r3, #19]
    7214:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7216:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    721a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	79fa      	ldrb	r2, [r7, #7]
    7222:	429a      	cmp	r2, r3
    7224:	d017      	beq.n	7256 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7226:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	781b      	ldrb	r3, [r3, #0]
    7230:	461a      	mov	r2, r3
    7232:	79fb      	ldrb	r3, [r7, #7]
    7234:	4053      	eors	r3, r2
    7236:	f003 0303 	and.w	r3, r3, #3
    723a:	2b00      	cmp	r3, #0
    723c:	bf0c      	ite	eq
    723e:	2300      	moveq	r3, #0
    7240:	2301      	movne	r3, #1
    7242:	b2db      	uxtb	r3, r3
    7244:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7246:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    724a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    724e:	79fa      	ldrb	r2, [r7, #7]
    7250:	701a      	strb	r2, [r3, #0]
    return changed;
    7252:	79bb      	ldrb	r3, [r7, #6]
    7254:	e000      	b.n	7258 <mcu1_status_update+0x54>
  }
  return FALSE;
    7256:	2300      	movs	r3, #0
}
    7258:	4618      	mov	r0, r3
    725a:	370c      	adds	r7, #12
    725c:	46bd      	mov	sp, r7
    725e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7262:	4770      	bx	lr

00007264 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7264:	b480      	push	{r7}
    7266:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7268:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	781b      	ldrb	r3, [r3, #0]
    7272:	2b00      	cmp	r3, #0
    7274:	d12a      	bne.n	72cc <events_update+0x68>
    7276:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    727a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727e:	895b      	ldrh	r3, [r3, #10]
    7280:	b21b      	sxth	r3, r3
    7282:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7286:	dd21      	ble.n	72cc <events_update+0x68>
    7288:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    728c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7290:	881b      	ldrh	r3, [r3, #0]
    7292:	2b13      	cmp	r3, #19
    7294:	d819      	bhi.n	72ca <events_update+0x66>
    7296:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    729a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    729e:	881b      	ldrh	r3, [r3, #0]
    72a0:	3301      	adds	r3, #1
    72a2:	b29a      	uxth	r2, r3
    72a4:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    72a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ac:	801a      	strh	r2, [r3, #0]
    72ae:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    72b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b6:	881b      	ldrh	r3, [r3, #0]
    72b8:	2b14      	cmp	r3, #20
    72ba:	d106      	bne.n	72ca <events_update+0x66>
    72bc:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    72c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c4:	2201      	movs	r2, #1
    72c6:	701a      	strb	r2, [r3, #0]
    72c8:	e00c      	b.n	72e4 <events_update+0x80>
    72ca:	e00b      	b.n	72e4 <events_update+0x80>
    72cc:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    72d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d4:	2200      	movs	r2, #0
    72d6:	801a      	strh	r2, [r3, #0]
    72d8:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    72dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e0:	2200      	movs	r2, #0
    72e2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    72e4:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    72e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d12a      	bne.n	7348 <events_update+0xe4>
    72f2:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    72f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fa:	895b      	ldrh	r3, [r3, #10]
    72fc:	b21b      	sxth	r3, r3
    72fe:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    7302:	da21      	bge.n	7348 <events_update+0xe4>
    7304:	f64b 63e6 	movw	r3, #48870	; 0xbee6
    7308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    730c:	881b      	ldrh	r3, [r3, #0]
    730e:	2b13      	cmp	r3, #19
    7310:	d819      	bhi.n	7346 <events_update+0xe2>
    7312:	f64b 63e6 	movw	r3, #48870	; 0xbee6
    7316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731a:	881b      	ldrh	r3, [r3, #0]
    731c:	3301      	adds	r3, #1
    731e:	b29a      	uxth	r2, r3
    7320:	f64b 63e6 	movw	r3, #48870	; 0xbee6
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	801a      	strh	r2, [r3, #0]
    732a:	f64b 63e6 	movw	r3, #48870	; 0xbee6
    732e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7332:	881b      	ldrh	r3, [r3, #0]
    7334:	2b14      	cmp	r3, #20
    7336:	d106      	bne.n	7346 <events_update+0xe2>
    7338:	f64b 63d1 	movw	r3, #48849	; 0xbed1
    733c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7340:	2201      	movs	r2, #1
    7342:	701a      	strb	r2, [r3, #0]
    7344:	e00c      	b.n	7360 <events_update+0xfc>
    7346:	e00b      	b.n	7360 <events_update+0xfc>
    7348:	f64b 63e6 	movw	r3, #48870	; 0xbee6
    734c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7350:	2200      	movs	r2, #0
    7352:	801a      	strh	r2, [r3, #0]
    7354:	f64b 63d1 	movw	r3, #48849	; 0xbed1
    7358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735c:	2200      	movs	r2, #0
    735e:	701a      	strb	r2, [r3, #0]
}  
    7360:	46bd      	mov	sp, r7
    7362:	f85d 7b04 	ldr.w	r7, [sp], #4
    7366:	4770      	bx	lr

00007368 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7368:	b480      	push	{r7}
    736a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    736c:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    7370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7374:	88da      	ldrh	r2, [r3, #6]
    7376:	f24c 0308 	movw	r3, #49160	; 0xc008
    737a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7380:	f24c 0308 	movw	r3, #49160	; 0xc008
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	2200      	movs	r2, #0
    738a:	74da      	strb	r2, [r3, #19]
}
    738c:	46bd      	mov	sp, r7
    738e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7392:	4770      	bx	lr

00007394 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7394:	b480      	push	{r7}
    7396:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7398:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    739c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a0:	781a      	ldrb	r2, [r3, #0]
    73a2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    73a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	b2db      	uxtb	r3, r3
    73ae:	429a      	cmp	r2, r3
    73b0:	d313      	bcc.n	73da <send_boot+0x46>
    73b2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    73b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	b2db      	uxtb	r3, r3
    73be:	461a      	mov	r2, r3
    73c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    73c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c8:	781b      	ldrb	r3, [r3, #0]
    73ca:	1ad3      	subs	r3, r2, r3
    73cc:	33ff      	adds	r3, #255	; 0xff
    73ce:	2b06      	cmp	r3, #6
    73d0:	bfd4      	ite	le
    73d2:	2300      	movle	r3, #0
    73d4:	2301      	movgt	r3, #1
    73d6:	b2db      	uxtb	r3, r3
    73d8:	e011      	b.n	73fe <send_boot+0x6a>
    73da:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    73de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	b2db      	uxtb	r3, r3
    73e6:	461a      	mov	r2, r3
    73e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    73ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	1ad3      	subs	r3, r2, r3
    73f4:	2b06      	cmp	r3, #6
    73f6:	bfd4      	ite	le
    73f8:	2300      	movle	r3, #0
    73fa:	2301      	movgt	r3, #1
    73fc:	b2db      	uxtb	r3, r3
    73fe:	2b00      	cmp	r3, #0
    7400:	f000 8194 	beq.w	772c <send_boot+0x398>
    7404:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740c:	781b      	ldrb	r3, [r3, #0]
    740e:	461a      	mov	r2, r3
    7410:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7418:	2105      	movs	r1, #5
    741a:	5499      	strb	r1, [r3, r2]
    741c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	3301      	adds	r3, #1
    7428:	b2da      	uxtb	r2, r3
    742a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    742e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7432:	701a      	strb	r2, [r3, #0]
    7434:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743c:	781b      	ldrb	r3, [r3, #0]
    743e:	2bff      	cmp	r3, #255	; 0xff
    7440:	d105      	bne.n	744e <send_boot+0xba>
    7442:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744a:	2200      	movs	r2, #0
    744c:	701a      	strb	r2, [r3, #0]
    744e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	461a      	mov	r2, r3
    745a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    745e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7462:	2101      	movs	r1, #1
    7464:	5499      	strb	r1, [r3, r2]
    7466:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    746a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746e:	781b      	ldrb	r3, [r3, #0]
    7470:	3301      	adds	r3, #1
    7472:	b2da      	uxtb	r2, r3
    7474:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747c:	701a      	strb	r2, [r3, #0]
    747e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	2bff      	cmp	r3, #255	; 0xff
    748a:	d105      	bne.n	7498 <send_boot+0x104>
    748c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7494:	2200      	movs	r2, #0
    7496:	701a      	strb	r2, [r3, #0]
    7498:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    749c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a0:	2201      	movs	r2, #1
    74a2:	701a      	strb	r2, [r3, #0]
    74a4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    74a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ac:	2201      	movs	r2, #1
    74ae:	701a      	strb	r2, [r3, #0]
    74b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    74b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	461a      	mov	r2, r3
    74bc:	f648 03a6 	movw	r3, #34982	; 0x88a6
    74c0:	f2c0 0301 	movt	r3, #1
    74c4:	7819      	ldrb	r1, [r3, #0]
    74c6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    74ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ce:	5499      	strb	r1, [r3, r2]
    74d0:	f648 03a6 	movw	r3, #34982	; 0x88a6
    74d4:	f2c0 0301 	movt	r3, #1
    74d8:	781a      	ldrb	r2, [r3, #0]
    74da:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    74de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e2:	781b      	ldrb	r3, [r3, #0]
    74e4:	4413      	add	r3, r2
    74e6:	b2da      	uxtb	r2, r3
    74e8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    74ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f0:	701a      	strb	r2, [r3, #0]
    74f2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    74f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fa:	781a      	ldrb	r2, [r3, #0]
    74fc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	4413      	add	r3, r2
    7508:	b2da      	uxtb	r2, r3
    750a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    750e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7512:	701a      	strb	r2, [r3, #0]
    7514:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	3301      	adds	r3, #1
    7520:	b2da      	uxtb	r2, r3
    7522:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    752a:	701a      	strb	r2, [r3, #0]
    752c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	2bff      	cmp	r3, #255	; 0xff
    7538:	d105      	bne.n	7546 <send_boot+0x1b2>
    753a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    753e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7542:	2200      	movs	r2, #0
    7544:	701a      	strb	r2, [r3, #0]
    7546:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    754a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754e:	781b      	ldrb	r3, [r3, #0]
    7550:	461a      	mov	r2, r3
    7552:	f648 03a6 	movw	r3, #34982	; 0x88a6
    7556:	f2c0 0301 	movt	r3, #1
    755a:	7859      	ldrb	r1, [r3, #1]
    755c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	5499      	strb	r1, [r3, r2]
    7566:	4b88      	ldr	r3, [pc, #544]	; (7788 <send_boot+0x3f4>)
    7568:	781a      	ldrb	r2, [r3, #0]
    756a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    756e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7572:	781b      	ldrb	r3, [r3, #0]
    7574:	4413      	add	r3, r2
    7576:	b2da      	uxtb	r2, r3
    7578:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    757c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7580:	701a      	strb	r2, [r3, #0]
    7582:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758a:	781a      	ldrb	r2, [r3, #0]
    758c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	4413      	add	r3, r2
    7598:	b2da      	uxtb	r2, r3
    759a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    759e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a2:	701a      	strb	r2, [r3, #0]
    75a4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	3301      	adds	r3, #1
    75b0:	b2da      	uxtb	r2, r3
    75b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ba:	701a      	strb	r2, [r3, #0]
    75bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	2bff      	cmp	r3, #255	; 0xff
    75c8:	d105      	bne.n	75d6 <send_boot+0x242>
    75ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d2:	2200      	movs	r2, #0
    75d4:	701a      	strb	r2, [r3, #0]
    75d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	461a      	mov	r2, r3
    75e2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    75e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ea:	7819      	ldrb	r1, [r3, #0]
    75ec:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    75f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f4:	5499      	strb	r1, [r3, r2]
    75f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    75fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	3301      	adds	r3, #1
    7602:	b2da      	uxtb	r2, r3
    7604:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760c:	701a      	strb	r2, [r3, #0]
    760e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7616:	781b      	ldrb	r3, [r3, #0]
    7618:	2bff      	cmp	r3, #255	; 0xff
    761a:	d105      	bne.n	7628 <send_boot+0x294>
    761c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	2200      	movs	r2, #0
    7626:	701a      	strb	r2, [r3, #0]
    7628:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    762c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7630:	781b      	ldrb	r3, [r3, #0]
    7632:	461a      	mov	r2, r3
    7634:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	7819      	ldrb	r1, [r3, #0]
    763e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7646:	5499      	strb	r1, [r3, r2]
    7648:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    764c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	3301      	adds	r3, #1
    7654:	b2da      	uxtb	r2, r3
    7656:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    765a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765e:	701a      	strb	r2, [r3, #0]
    7660:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	2bff      	cmp	r3, #255	; 0xff
    766c:	d105      	bne.n	767a <send_boot+0x2e6>
    766e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7676:	2200      	movs	r2, #0
    7678:	701a      	strb	r2, [r3, #0]
    767a:	f242 0339 	movw	r3, #8249	; 0x2039
    767e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	b2db      	uxtb	r3, r3
    7686:	f003 0310 	and.w	r3, r3, #16
    768a:	2b00      	cmp	r3, #0
    768c:	d15a      	bne.n	7744 <send_boot+0x3b0>
    768e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	b2db      	uxtb	r3, r3
    769a:	461a      	mov	r2, r3
    769c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    76a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a4:	5c9a      	ldrb	r2, [r3, r2]
    76a6:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    76aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ae:	701a      	strb	r2, [r3, #0]
    76b0:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    76b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b8:	2200      	movs	r2, #0
    76ba:	701a      	strb	r2, [r3, #0]
    76bc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    76c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c4:	781b      	ldrb	r3, [r3, #0]
    76c6:	b2db      	uxtb	r3, r3
    76c8:	3301      	adds	r3, #1
    76ca:	b2da      	uxtb	r2, r3
    76cc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	701a      	strb	r2, [r3, #0]
    76d6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    76da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	b2db      	uxtb	r3, r3
    76e2:	2bff      	cmp	r3, #255	; 0xff
    76e4:	d105      	bne.n	76f2 <send_boot+0x35e>
    76e6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    76ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ee:	2200      	movs	r2, #0
    76f0:	701a      	strb	r2, [r3, #0]
    76f2:	f242 0338 	movw	r3, #8248	; 0x2038
    76f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fa:	f242 0238 	movw	r2, #8248	; 0x2038
    76fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7702:	7812      	ldrb	r2, [r2, #0]
    7704:	b2d2      	uxtb	r2, r2
    7706:	f042 0201 	orr.w	r2, r2, #1
    770a:	b2d2      	uxtb	r2, r2
    770c:	701a      	strb	r2, [r3, #0]
    770e:	f242 0339 	movw	r3, #8249	; 0x2039
    7712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7716:	f242 0239 	movw	r2, #8249	; 0x2039
    771a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    771e:	7812      	ldrb	r2, [r2, #0]
    7720:	b2d2      	uxtb	r2, r2
    7722:	f042 0210 	orr.w	r2, r2, #16
    7726:	b2d2      	uxtb	r2, r2
    7728:	701a      	strb	r2, [r3, #0]
    772a:	e00b      	b.n	7744 <send_boot+0x3b0>
    772c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	3301      	adds	r3, #1
    7738:	b2da      	uxtb	r2, r3
    773a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    773e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7742:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7744:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	781a      	ldrb	r2, [r3, #0]
    774e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	b2db      	uxtb	r3, r3
    775a:	429a      	cmp	r2, r3
    775c:	d316      	bcc.n	778c <send_boot+0x3f8>
    775e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	b2db      	uxtb	r3, r3
    776a:	461a      	mov	r2, r3
    776c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	781b      	ldrb	r3, [r3, #0]
    7776:	1ad3      	subs	r3, r2, r3
    7778:	33ff      	adds	r3, #255	; 0xff
    777a:	2b14      	cmp	r3, #20
    777c:	bfd4      	ite	le
    777e:	2300      	movle	r3, #0
    7780:	2301      	movgt	r3, #1
    7782:	b2db      	uxtb	r3, r3
    7784:	e014      	b.n	77b0 <send_boot+0x41c>
    7786:	bf00      	nop
    7788:	000188a7 	.word	0x000188a7
    778c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	b2db      	uxtb	r3, r3
    7798:	461a      	mov	r2, r3
    779a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    779e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a2:	781b      	ldrb	r3, [r3, #0]
    77a4:	1ad3      	subs	r3, r2, r3
    77a6:	2b14      	cmp	r3, #20
    77a8:	bfd4      	ite	le
    77aa:	2300      	movle	r3, #0
    77ac:	2301      	movgt	r3, #1
    77ae:	b2db      	uxtb	r3, r3
    77b0:	2b00      	cmp	r3, #0
    77b2:	f000 85a5 	beq.w	8300 <send_boot+0xf6c>
    77b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    77ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	461a      	mov	r2, r3
    77c2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    77c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ca:	2105      	movs	r1, #5
    77cc:	5499      	strb	r1, [r3, r2]
    77ce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    77d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	3301      	adds	r3, #1
    77da:	b2da      	uxtb	r2, r3
    77dc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    77e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e4:	701a      	strb	r2, [r3, #0]
    77e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    77ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	2bff      	cmp	r3, #255	; 0xff
    77f2:	d105      	bne.n	7800 <send_boot+0x46c>
    77f4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    77f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fc:	2200      	movs	r2, #0
    77fe:	701a      	strb	r2, [r3, #0]
    7800:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7808:	781b      	ldrb	r3, [r3, #0]
    780a:	461a      	mov	r2, r3
    780c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7814:	2105      	movs	r1, #5
    7816:	5499      	strb	r1, [r3, r2]
    7818:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    781c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	3301      	adds	r3, #1
    7824:	b2da      	uxtb	r2, r3
    7826:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    782a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782e:	701a      	strb	r2, [r3, #0]
    7830:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	2bff      	cmp	r3, #255	; 0xff
    783c:	d105      	bne.n	784a <send_boot+0x4b6>
    783e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	2200      	movs	r2, #0
    7848:	701a      	strb	r2, [r3, #0]
    784a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    784e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7852:	2205      	movs	r2, #5
    7854:	701a      	strb	r2, [r3, #0]
    7856:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	2205      	movs	r2, #5
    7860:	701a      	strb	r2, [r3, #0]
    7862:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	461a      	mov	r2, r3
    786e:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	7819      	ldrb	r1, [r3, #0]
    7878:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    787c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7880:	5499      	strb	r1, [r3, r2]
    7882:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    7886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788a:	781a      	ldrb	r2, [r3, #0]
    788c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	4413      	add	r3, r2
    7898:	b2da      	uxtb	r2, r3
    789a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    789e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a2:	701a      	strb	r2, [r3, #0]
    78a4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    78a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ac:	781a      	ldrb	r2, [r3, #0]
    78ae:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    78b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	4413      	add	r3, r2
    78ba:	b2da      	uxtb	r2, r3
    78bc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    78c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c4:	701a      	strb	r2, [r3, #0]
    78c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    78ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	3301      	adds	r3, #1
    78d2:	b2da      	uxtb	r2, r3
    78d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    78d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78dc:	701a      	strb	r2, [r3, #0]
    78de:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    78e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	2bff      	cmp	r3, #255	; 0xff
    78ea:	d105      	bne.n	78f8 <send_boot+0x564>
    78ec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    78f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f4:	2200      	movs	r2, #0
    78f6:	701a      	strb	r2, [r3, #0]
    78f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    78fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7900:	781b      	ldrb	r3, [r3, #0]
    7902:	461a      	mov	r2, r3
    7904:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	7859      	ldrb	r1, [r3, #1]
    790e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	5499      	strb	r1, [r3, r2]
    7918:	4bd1      	ldr	r3, [pc, #836]	; (7c60 <send_boot+0x8cc>)
    791a:	781a      	ldrb	r2, [r3, #0]
    791c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	781b      	ldrb	r3, [r3, #0]
    7926:	4413      	add	r3, r2
    7928:	b2da      	uxtb	r2, r3
    792a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    792e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7932:	701a      	strb	r2, [r3, #0]
    7934:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	781a      	ldrb	r2, [r3, #0]
    793e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	781b      	ldrb	r3, [r3, #0]
    7948:	4413      	add	r3, r2
    794a:	b2da      	uxtb	r2, r3
    794c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7954:	701a      	strb	r2, [r3, #0]
    7956:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	3301      	adds	r3, #1
    7962:	b2da      	uxtb	r2, r3
    7964:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796c:	701a      	strb	r2, [r3, #0]
    796e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7976:	781b      	ldrb	r3, [r3, #0]
    7978:	2bff      	cmp	r3, #255	; 0xff
    797a:	d105      	bne.n	7988 <send_boot+0x5f4>
    797c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7984:	2200      	movs	r2, #0
    7986:	701a      	strb	r2, [r3, #0]
    7988:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    798c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	461a      	mov	r2, r3
    7994:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	7899      	ldrb	r1, [r3, #2]
    799e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    79a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a6:	5499      	strb	r1, [r3, r2]
    79a8:	4bae      	ldr	r3, [pc, #696]	; (7c64 <send_boot+0x8d0>)
    79aa:	781a      	ldrb	r2, [r3, #0]
    79ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    79b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b4:	781b      	ldrb	r3, [r3, #0]
    79b6:	4413      	add	r3, r2
    79b8:	b2da      	uxtb	r2, r3
    79ba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    79be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c2:	701a      	strb	r2, [r3, #0]
    79c4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    79c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79cc:	781a      	ldrb	r2, [r3, #0]
    79ce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    79d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	4413      	add	r3, r2
    79da:	b2da      	uxtb	r2, r3
    79dc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    79e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e4:	701a      	strb	r2, [r3, #0]
    79e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	3301      	adds	r3, #1
    79f2:	b2da      	uxtb	r2, r3
    79f4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	701a      	strb	r2, [r3, #0]
    79fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	2bff      	cmp	r3, #255	; 0xff
    7a0a:	d105      	bne.n	7a18 <send_boot+0x684>
    7a0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	2200      	movs	r2, #0
    7a16:	701a      	strb	r2, [r3, #0]
    7a18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	461a      	mov	r2, r3
    7a24:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    7a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2c:	78d9      	ldrb	r1, [r3, #3]
    7a2e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a36:	5499      	strb	r1, [r3, r2]
    7a38:	4b8b      	ldr	r3, [pc, #556]	; (7c68 <send_boot+0x8d4>)
    7a3a:	781a      	ldrb	r2, [r3, #0]
    7a3c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a44:	781b      	ldrb	r3, [r3, #0]
    7a46:	4413      	add	r3, r2
    7a48:	b2da      	uxtb	r2, r3
    7a4a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a52:	701a      	strb	r2, [r3, #0]
    7a54:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5c:	781a      	ldrb	r2, [r3, #0]
    7a5e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	4413      	add	r3, r2
    7a6a:	b2da      	uxtb	r2, r3
    7a6c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a74:	701a      	strb	r2, [r3, #0]
    7a76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7e:	781b      	ldrb	r3, [r3, #0]
    7a80:	3301      	adds	r3, #1
    7a82:	b2da      	uxtb	r2, r3
    7a84:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8c:	701a      	strb	r2, [r3, #0]
    7a8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	2bff      	cmp	r3, #255	; 0xff
    7a9a:	d105      	bne.n	7aa8 <send_boot+0x714>
    7a9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa4:	2200      	movs	r2, #0
    7aa6:	701a      	strb	r2, [r3, #0]
    7aa8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab0:	781b      	ldrb	r3, [r3, #0]
    7ab2:	461a      	mov	r2, r3
    7ab4:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    7ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abc:	7819      	ldrb	r1, [r3, #0]
    7abe:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	5499      	strb	r1, [r3, r2]
    7ac8:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    7acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad0:	781a      	ldrb	r2, [r3, #0]
    7ad2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ada:	781b      	ldrb	r3, [r3, #0]
    7adc:	4413      	add	r3, r2
    7ade:	b2da      	uxtb	r2, r3
    7ae0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae8:	701a      	strb	r2, [r3, #0]
    7aea:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af2:	781a      	ldrb	r2, [r3, #0]
    7af4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	4413      	add	r3, r2
    7b00:	b2da      	uxtb	r2, r3
    7b02:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0a:	701a      	strb	r2, [r3, #0]
    7b0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	3301      	adds	r3, #1
    7b18:	b2da      	uxtb	r2, r3
    7b1a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	2bff      	cmp	r3, #255	; 0xff
    7b30:	d105      	bne.n	7b3e <send_boot+0x7aa>
    7b32:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3a:	2200      	movs	r2, #0
    7b3c:	701a      	strb	r2, [r3, #0]
    7b3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	461a      	mov	r2, r3
    7b4a:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    7b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b52:	7859      	ldrb	r1, [r3, #1]
    7b54:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	5499      	strb	r1, [r3, r2]
    7b5e:	4b43      	ldr	r3, [pc, #268]	; (7c6c <send_boot+0x8d8>)
    7b60:	781a      	ldrb	r2, [r3, #0]
    7b62:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	4413      	add	r3, r2
    7b6e:	b2da      	uxtb	r2, r3
    7b70:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b78:	701a      	strb	r2, [r3, #0]
    7b7a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b82:	781a      	ldrb	r2, [r3, #0]
    7b84:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	4413      	add	r3, r2
    7b90:	b2da      	uxtb	r2, r3
    7b92:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9a:	701a      	strb	r2, [r3, #0]
    7b9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba4:	781b      	ldrb	r3, [r3, #0]
    7ba6:	3301      	adds	r3, #1
    7ba8:	b2da      	uxtb	r2, r3
    7baa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb2:	701a      	strb	r2, [r3, #0]
    7bb4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	2bff      	cmp	r3, #255	; 0xff
    7bc0:	d105      	bne.n	7bce <send_boot+0x83a>
    7bc2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bca:	2200      	movs	r2, #0
    7bcc:	701a      	strb	r2, [r3, #0]
    7bce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	461a      	mov	r2, r3
    7bda:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    7bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be2:	7899      	ldrb	r1, [r3, #2]
    7be4:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bec:	5499      	strb	r1, [r3, r2]
    7bee:	4b20      	ldr	r3, [pc, #128]	; (7c70 <send_boot+0x8dc>)
    7bf0:	781a      	ldrb	r2, [r3, #0]
    7bf2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfa:	781b      	ldrb	r3, [r3, #0]
    7bfc:	4413      	add	r3, r2
    7bfe:	b2da      	uxtb	r2, r3
    7c00:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c08:	701a      	strb	r2, [r3, #0]
    7c0a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c12:	781a      	ldrb	r2, [r3, #0]
    7c14:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	4413      	add	r3, r2
    7c20:	b2da      	uxtb	r2, r3
    7c22:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2a:	701a      	strb	r2, [r3, #0]
    7c2c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	3301      	adds	r3, #1
    7c38:	b2da      	uxtb	r2, r3
    7c3a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c42:	701a      	strb	r2, [r3, #0]
    7c44:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	2bff      	cmp	r3, #255	; 0xff
    7c50:	d110      	bne.n	7c74 <send_boot+0x8e0>
    7c52:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5a:	2200      	movs	r2, #0
    7c5c:	701a      	strb	r2, [r3, #0]
    7c5e:	e009      	b.n	7c74 <send_boot+0x8e0>
    7c60:	2004c4e1 	.word	0x2004c4e1
    7c64:	2004c4e2 	.word	0x2004c4e2
    7c68:	2004c4e3 	.word	0x2004c4e3
    7c6c:	2004c4e5 	.word	0x2004c4e5
    7c70:	2004c4e6 	.word	0x2004c4e6
    7c74:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	461a      	mov	r2, r3
    7c80:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
    7c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c88:	78d9      	ldrb	r1, [r3, #3]
    7c8a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c92:	5499      	strb	r1, [r3, r2]
    7c94:	4bd3      	ldr	r3, [pc, #844]	; (7fe4 <send_boot+0xc50>)
    7c96:	781a      	ldrb	r2, [r3, #0]
    7c98:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	4413      	add	r3, r2
    7ca4:	b2da      	uxtb	r2, r3
    7ca6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	701a      	strb	r2, [r3, #0]
    7cb0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb8:	781a      	ldrb	r2, [r3, #0]
    7cba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc2:	781b      	ldrb	r3, [r3, #0]
    7cc4:	4413      	add	r3, r2
    7cc6:	b2da      	uxtb	r2, r3
    7cc8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd0:	701a      	strb	r2, [r3, #0]
    7cd2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cda:	781b      	ldrb	r3, [r3, #0]
    7cdc:	3301      	adds	r3, #1
    7cde:	b2da      	uxtb	r2, r3
    7ce0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce8:	701a      	strb	r2, [r3, #0]
    7cea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	2bff      	cmp	r3, #255	; 0xff
    7cf6:	d105      	bne.n	7d04 <send_boot+0x970>
    7cf8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d00:	2200      	movs	r2, #0
    7d02:	701a      	strb	r2, [r3, #0]
    7d04:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	461a      	mov	r2, r3
    7d10:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    7d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d18:	7819      	ldrb	r1, [r3, #0]
    7d1a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	5499      	strb	r1, [r3, r2]
    7d24:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	781a      	ldrb	r2, [r3, #0]
    7d2e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	4413      	add	r3, r2
    7d3a:	b2da      	uxtb	r2, r3
    7d3c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	701a      	strb	r2, [r3, #0]
    7d46:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4e:	781a      	ldrb	r2, [r3, #0]
    7d50:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	4413      	add	r3, r2
    7d5c:	b2da      	uxtb	r2, r3
    7d5e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d66:	701a      	strb	r2, [r3, #0]
    7d68:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	781b      	ldrb	r3, [r3, #0]
    7d72:	3301      	adds	r3, #1
    7d74:	b2da      	uxtb	r2, r3
    7d76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7e:	701a      	strb	r2, [r3, #0]
    7d80:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	781b      	ldrb	r3, [r3, #0]
    7d8a:	2bff      	cmp	r3, #255	; 0xff
    7d8c:	d105      	bne.n	7d9a <send_boot+0xa06>
    7d8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d96:	2200      	movs	r2, #0
    7d98:	701a      	strb	r2, [r3, #0]
    7d9a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	461a      	mov	r2, r3
    7da6:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    7daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dae:	7859      	ldrb	r1, [r3, #1]
    7db0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db8:	5499      	strb	r1, [r3, r2]
    7dba:	4b8b      	ldr	r3, [pc, #556]	; (7fe8 <send_boot+0xc54>)
    7dbc:	781a      	ldrb	r2, [r3, #0]
    7dbe:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	4413      	add	r3, r2
    7dca:	b2da      	uxtb	r2, r3
    7dcc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd4:	701a      	strb	r2, [r3, #0]
    7dd6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dde:	781a      	ldrb	r2, [r3, #0]
    7de0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	4413      	add	r3, r2
    7dec:	b2da      	uxtb	r2, r3
    7dee:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df6:	701a      	strb	r2, [r3, #0]
    7df8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	3301      	adds	r3, #1
    7e04:	b2da      	uxtb	r2, r3
    7e06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0e:	701a      	strb	r2, [r3, #0]
    7e10:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e18:	781b      	ldrb	r3, [r3, #0]
    7e1a:	2bff      	cmp	r3, #255	; 0xff
    7e1c:	d105      	bne.n	7e2a <send_boot+0xa96>
    7e1e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e26:	2200      	movs	r2, #0
    7e28:	701a      	strb	r2, [r3, #0]
    7e2a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	461a      	mov	r2, r3
    7e36:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    7e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3e:	7899      	ldrb	r1, [r3, #2]
    7e40:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e48:	5499      	strb	r1, [r3, r2]
    7e4a:	4b68      	ldr	r3, [pc, #416]	; (7fec <send_boot+0xc58>)
    7e4c:	781a      	ldrb	r2, [r3, #0]
    7e4e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e56:	781b      	ldrb	r3, [r3, #0]
    7e58:	4413      	add	r3, r2
    7e5a:	b2da      	uxtb	r2, r3
    7e5c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e64:	701a      	strb	r2, [r3, #0]
    7e66:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6e:	781a      	ldrb	r2, [r3, #0]
    7e70:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	4413      	add	r3, r2
    7e7c:	b2da      	uxtb	r2, r3
    7e7e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e86:	701a      	strb	r2, [r3, #0]
    7e88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	3301      	adds	r3, #1
    7e94:	b2da      	uxtb	r2, r3
    7e96:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9e:	701a      	strb	r2, [r3, #0]
    7ea0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea8:	781b      	ldrb	r3, [r3, #0]
    7eaa:	2bff      	cmp	r3, #255	; 0xff
    7eac:	d105      	bne.n	7eba <send_boot+0xb26>
    7eae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb6:	2200      	movs	r2, #0
    7eb8:	701a      	strb	r2, [r3, #0]
    7eba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	461a      	mov	r2, r3
    7ec6:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    7eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ece:	78d9      	ldrb	r1, [r3, #3]
    7ed0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed8:	5499      	strb	r1, [r3, r2]
    7eda:	4b45      	ldr	r3, [pc, #276]	; (7ff0 <send_boot+0xc5c>)
    7edc:	781a      	ldrb	r2, [r3, #0]
    7ede:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	4413      	add	r3, r2
    7eea:	b2da      	uxtb	r2, r3
    7eec:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef4:	701a      	strb	r2, [r3, #0]
    7ef6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efe:	781a      	ldrb	r2, [r3, #0]
    7f00:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	4413      	add	r3, r2
    7f0c:	b2da      	uxtb	r2, r3
    7f0e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f16:	701a      	strb	r2, [r3, #0]
    7f18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	3301      	adds	r3, #1
    7f24:	b2da      	uxtb	r2, r3
    7f26:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2e:	701a      	strb	r2, [r3, #0]
    7f30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f38:	781b      	ldrb	r3, [r3, #0]
    7f3a:	2bff      	cmp	r3, #255	; 0xff
    7f3c:	d105      	bne.n	7f4a <send_boot+0xbb6>
    7f3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f46:	2200      	movs	r2, #0
    7f48:	701a      	strb	r2, [r3, #0]
    7f4a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f52:	781b      	ldrb	r3, [r3, #0]
    7f54:	461a      	mov	r2, r3
    7f56:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5e:	7819      	ldrb	r1, [r3, #0]
    7f60:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    7f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f68:	5499      	strb	r1, [r3, r2]
    7f6a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f72:	781a      	ldrb	r2, [r3, #0]
    7f74:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	4413      	add	r3, r2
    7f80:	b2da      	uxtb	r2, r3
    7f82:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8a:	701a      	strb	r2, [r3, #0]
    7f8c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f94:	781a      	ldrb	r2, [r3, #0]
    7f96:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	781b      	ldrb	r3, [r3, #0]
    7fa0:	4413      	add	r3, r2
    7fa2:	b2da      	uxtb	r2, r3
    7fa4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    7fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fac:	701a      	strb	r2, [r3, #0]
    7fae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	3301      	adds	r3, #1
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	2bff      	cmp	r3, #255	; 0xff
    7fd2:	d10f      	bne.n	7ff4 <send_boot+0xc60>
    7fd4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fdc:	2200      	movs	r2, #0
    7fde:	701a      	strb	r2, [r3, #0]
    7fe0:	e008      	b.n	7ff4 <send_boot+0xc60>
    7fe2:	bf00      	nop
    7fe4:	2004c4e7 	.word	0x2004c4e7
    7fe8:	2004c4dd 	.word	0x2004c4dd
    7fec:	2004c4de 	.word	0x2004c4de
    7ff0:	2004c4df 	.word	0x2004c4df
    7ff4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    7ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffc:	781b      	ldrb	r3, [r3, #0]
    7ffe:	461a      	mov	r2, r3
    8000:	f240 33f2 	movw	r3, #1010	; 0x3f2
    8004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8008:	7859      	ldrb	r1, [r3, #1]
    800a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    800e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8012:	5499      	strb	r1, [r3, r2]
    8014:	4bc5      	ldr	r3, [pc, #788]	; (832c <send_boot+0xf98>)
    8016:	781a      	ldrb	r2, [r3, #0]
    8018:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    801c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	4413      	add	r3, r2
    8024:	b2da      	uxtb	r2, r3
    8026:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    802a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802e:	701a      	strb	r2, [r3, #0]
    8030:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	781a      	ldrb	r2, [r3, #0]
    803a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    803e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8042:	781b      	ldrb	r3, [r3, #0]
    8044:	4413      	add	r3, r2
    8046:	b2da      	uxtb	r2, r3
    8048:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    804c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8050:	701a      	strb	r2, [r3, #0]
    8052:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	3301      	adds	r3, #1
    805e:	b2da      	uxtb	r2, r3
    8060:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8068:	701a      	strb	r2, [r3, #0]
    806a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    806e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8072:	781b      	ldrb	r3, [r3, #0]
    8074:	2bff      	cmp	r3, #255	; 0xff
    8076:	d105      	bne.n	8084 <send_boot+0xcf0>
    8078:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    807c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8080:	2200      	movs	r2, #0
    8082:	701a      	strb	r2, [r3, #0]
    8084:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	461a      	mov	r2, r3
    8090:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8098:	7819      	ldrb	r1, [r3, #0]
    809a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    809e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a2:	5499      	strb	r1, [r3, r2]
    80a4:	f240 33f4 	movw	r3, #1012	; 0x3f4
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	781a      	ldrb	r2, [r3, #0]
    80ae:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	4413      	add	r3, r2
    80ba:	b2da      	uxtb	r2, r3
    80bc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    80c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c4:	701a      	strb	r2, [r3, #0]
    80c6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	781a      	ldrb	r2, [r3, #0]
    80d0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    80d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	4413      	add	r3, r2
    80dc:	b2da      	uxtb	r2, r3
    80de:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	701a      	strb	r2, [r3, #0]
    80e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    80ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	3301      	adds	r3, #1
    80f4:	b2da      	uxtb	r2, r3
    80f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	701a      	strb	r2, [r3, #0]
    8100:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	2bff      	cmp	r3, #255	; 0xff
    810c:	d105      	bne.n	811a <send_boot+0xd86>
    810e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	2200      	movs	r2, #0
    8118:	701a      	strb	r2, [r3, #0]
    811a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    811e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8122:	781b      	ldrb	r3, [r3, #0]
    8124:	461a      	mov	r2, r3
    8126:	f240 33f4 	movw	r3, #1012	; 0x3f4
    812a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812e:	7859      	ldrb	r1, [r3, #1]
    8130:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8138:	5499      	strb	r1, [r3, r2]
    813a:	4b7d      	ldr	r3, [pc, #500]	; (8330 <send_boot+0xf9c>)
    813c:	781a      	ldrb	r2, [r3, #0]
    813e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	4413      	add	r3, r2
    814a:	b2da      	uxtb	r2, r3
    814c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8154:	701a      	strb	r2, [r3, #0]
    8156:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    815a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815e:	781a      	ldrb	r2, [r3, #0]
    8160:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8168:	781b      	ldrb	r3, [r3, #0]
    816a:	4413      	add	r3, r2
    816c:	b2da      	uxtb	r2, r3
    816e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8176:	701a      	strb	r2, [r3, #0]
    8178:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    817c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	3301      	adds	r3, #1
    8184:	b2da      	uxtb	r2, r3
    8186:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    818a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818e:	701a      	strb	r2, [r3, #0]
    8190:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8198:	781b      	ldrb	r3, [r3, #0]
    819a:	2bff      	cmp	r3, #255	; 0xff
    819c:	d105      	bne.n	81aa <send_boot+0xe16>
    819e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a6:	2200      	movs	r2, #0
    81a8:	701a      	strb	r2, [r3, #0]
    81aa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b2:	781b      	ldrb	r3, [r3, #0]
    81b4:	461a      	mov	r2, r3
    81b6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    81ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81be:	7819      	ldrb	r1, [r3, #0]
    81c0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    81c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c8:	5499      	strb	r1, [r3, r2]
    81ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	3301      	adds	r3, #1
    81d6:	b2da      	uxtb	r2, r3
    81d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e0:	701a      	strb	r2, [r3, #0]
    81e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ea:	781b      	ldrb	r3, [r3, #0]
    81ec:	2bff      	cmp	r3, #255	; 0xff
    81ee:	d105      	bne.n	81fc <send_boot+0xe68>
    81f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    81f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f8:	2200      	movs	r2, #0
    81fa:	701a      	strb	r2, [r3, #0]
    81fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8204:	781b      	ldrb	r3, [r3, #0]
    8206:	461a      	mov	r2, r3
    8208:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    820c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8210:	7819      	ldrb	r1, [r3, #0]
    8212:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821a:	5499      	strb	r1, [r3, r2]
    821c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	3301      	adds	r3, #1
    8228:	b2da      	uxtb	r2, r3
    822a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    822e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8232:	701a      	strb	r2, [r3, #0]
    8234:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	2bff      	cmp	r3, #255	; 0xff
    8240:	d105      	bne.n	824e <send_boot+0xeba>
    8242:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824a:	2200      	movs	r2, #0
    824c:	701a      	strb	r2, [r3, #0]
    824e:	f242 0339 	movw	r3, #8249	; 0x2039
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	b2db      	uxtb	r3, r3
    825a:	f003 0310 	and.w	r3, r3, #16
    825e:	2b00      	cmp	r3, #0
    8260:	d15a      	bne.n	8318 <send_boot+0xf84>
    8262:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826a:	781b      	ldrb	r3, [r3, #0]
    826c:	b2db      	uxtb	r3, r3
    826e:	461a      	mov	r2, r3
    8270:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8278:	5c9a      	ldrb	r2, [r3, r2]
    827a:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    827e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8282:	701a      	strb	r2, [r3, #0]
    8284:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    8288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828c:	2200      	movs	r2, #0
    828e:	701a      	strb	r2, [r3, #0]
    8290:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	b2db      	uxtb	r3, r3
    829c:	3301      	adds	r3, #1
    829e:	b2da      	uxtb	r2, r3
    82a0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    82a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a8:	701a      	strb	r2, [r3, #0]
    82aa:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    82ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	b2db      	uxtb	r3, r3
    82b6:	2bff      	cmp	r3, #255	; 0xff
    82b8:	d105      	bne.n	82c6 <send_boot+0xf32>
    82ba:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    82be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c2:	2200      	movs	r2, #0
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	f242 0338 	movw	r3, #8248	; 0x2038
    82ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ce:	f242 0238 	movw	r2, #8248	; 0x2038
    82d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    82d6:	7812      	ldrb	r2, [r2, #0]
    82d8:	b2d2      	uxtb	r2, r2
    82da:	f042 0201 	orr.w	r2, r2, #1
    82de:	b2d2      	uxtb	r2, r2
    82e0:	701a      	strb	r2, [r3, #0]
    82e2:	f242 0339 	movw	r3, #8249	; 0x2039
    82e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ea:	f242 0239 	movw	r2, #8249	; 0x2039
    82ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    82f2:	7812      	ldrb	r2, [r2, #0]
    82f4:	b2d2      	uxtb	r2, r2
    82f6:	f042 0210 	orr.w	r2, r2, #16
    82fa:	b2d2      	uxtb	r2, r2
    82fc:	701a      	strb	r2, [r3, #0]
    82fe:	e00b      	b.n	8318 <send_boot+0xf84>
    8300:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	3301      	adds	r3, #1
    830c:	b2da      	uxtb	r2, r3
    830e:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8318:	f240 33ed 	movw	r3, #1005	; 0x3ed
    831c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8320:	2200      	movs	r2, #0
    8322:	701a      	strb	r2, [r3, #0]
  }
}
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr
    832c:	200003f3 	.word	0x200003f3
    8330:	200003f5 	.word	0x200003f5

00008334 <send_attitude>:
void send_attitude(void){ //499ms
    8334:	b480      	push	{r7}
    8336:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8338:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    833c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	3301      	adds	r3, #1
    8344:	b2da      	uxtb	r2, r3
    8346:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    834a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8350:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    8354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	2bfa      	cmp	r3, #250	; 0xfa
    835c:	d105      	bne.n	836a <send_attitude+0x36>
    835e:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    8362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8366:	2200      	movs	r2, #0
    8368:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    836a:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    836e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8372:	781a      	ldrb	r2, [r3, #0]
    8374:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8378:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    837c:	fba3 1302 	umull	r1, r3, r3, r2
    8380:	0899      	lsrs	r1, r3, #2
    8382:	460b      	mov	r3, r1
    8384:	009b      	lsls	r3, r3, #2
    8386:	440b      	add	r3, r1
    8388:	1ad3      	subs	r3, r2, r3
    838a:	b2db      	uxtb	r3, r3
    838c:	2b00      	cmp	r3, #0
    838e:	f040 84c1 	bne.w	8d14 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8392:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839a:	781a      	ldrb	r2, [r3, #0]
    839c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    83a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	b2db      	uxtb	r3, r3
    83a8:	429a      	cmp	r2, r3
    83aa:	d313      	bcc.n	83d4 <send_attitude+0xa0>
    83ac:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    83b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	b2db      	uxtb	r3, r3
    83b8:	461a      	mov	r2, r3
    83ba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    83be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	1ad3      	subs	r3, r2, r3
    83c6:	33ff      	adds	r3, #255	; 0xff
    83c8:	2b10      	cmp	r3, #16
    83ca:	bfd4      	ite	le
    83cc:	2300      	movle	r3, #0
    83ce:	2301      	movgt	r3, #1
    83d0:	b2db      	uxtb	r3, r3
    83d2:	e011      	b.n	83f8 <send_attitude+0xc4>
    83d4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    83d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83dc:	781b      	ldrb	r3, [r3, #0]
    83de:	b2db      	uxtb	r3, r3
    83e0:	461a      	mov	r2, r3
    83e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	1ad3      	subs	r3, r2, r3
    83ee:	2b10      	cmp	r3, #16
    83f0:	bfd4      	ite	le
    83f2:	2300      	movle	r3, #0
    83f4:	2301      	movgt	r3, #1
    83f6:	b2db      	uxtb	r3, r3
    83f8:	2b00      	cmp	r3, #0
    83fa:	f000 847f 	beq.w	8cfc <send_attitude+0x9c8>
    83fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	461a      	mov	r2, r3
    840a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    840e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8412:	2105      	movs	r1, #5
    8414:	5499      	strb	r1, [r3, r2]
    8416:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    841a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	3301      	adds	r3, #1
    8422:	b2da      	uxtb	r2, r3
    8424:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842c:	701a      	strb	r2, [r3, #0]
    842e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8436:	781b      	ldrb	r3, [r3, #0]
    8438:	2bff      	cmp	r3, #255	; 0xff
    843a:	d105      	bne.n	8448 <send_attitude+0x114>
    843c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8444:	2200      	movs	r2, #0
    8446:	701a      	strb	r2, [r3, #0]
    8448:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    844c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	461a      	mov	r2, r3
    8454:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845c:	2106      	movs	r1, #6
    845e:	5499      	strb	r1, [r3, r2]
    8460:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	3301      	adds	r3, #1
    846c:	b2da      	uxtb	r2, r3
    846e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8476:	701a      	strb	r2, [r3, #0]
    8478:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    847c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	2bff      	cmp	r3, #255	; 0xff
    8484:	d105      	bne.n	8492 <send_attitude+0x15e>
    8486:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    848a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848e:	2200      	movs	r2, #0
    8490:	701a      	strb	r2, [r3, #0]
    8492:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849a:	2206      	movs	r2, #6
    849c:	701a      	strb	r2, [r3, #0]
    849e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    84a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a6:	2206      	movs	r2, #6
    84a8:	701a      	strb	r2, [r3, #0]
    84aa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	461a      	mov	r2, r3
    84b6:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    84ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84be:	7819      	ldrb	r1, [r3, #0]
    84c0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    84c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c8:	5499      	strb	r1, [r3, r2]
    84ca:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781a      	ldrb	r2, [r3, #0]
    84d4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    84d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84dc:	781b      	ldrb	r3, [r3, #0]
    84de:	4413      	add	r3, r2
    84e0:	b2da      	uxtb	r2, r3
    84e2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	701a      	strb	r2, [r3, #0]
    84ec:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    84f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f4:	781a      	ldrb	r2, [r3, #0]
    84f6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    84fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fe:	781b      	ldrb	r3, [r3, #0]
    8500:	4413      	add	r3, r2
    8502:	b2da      	uxtb	r2, r3
    8504:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850c:	701a      	strb	r2, [r3, #0]
    850e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	3301      	adds	r3, #1
    851a:	b2da      	uxtb	r2, r3
    851c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8524:	701a      	strb	r2, [r3, #0]
    8526:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    852a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852e:	781b      	ldrb	r3, [r3, #0]
    8530:	2bff      	cmp	r3, #255	; 0xff
    8532:	d105      	bne.n	8540 <send_attitude+0x20c>
    8534:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853c:	2200      	movs	r2, #0
    853e:	701a      	strb	r2, [r3, #0]
    8540:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8548:	781b      	ldrb	r3, [r3, #0]
    854a:	461a      	mov	r2, r3
    854c:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    8550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8554:	7859      	ldrb	r1, [r3, #1]
    8556:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    855a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855e:	5499      	strb	r1, [r3, r2]
    8560:	4bd1      	ldr	r3, [pc, #836]	; (88a8 <send_attitude+0x574>)
    8562:	781a      	ldrb	r2, [r3, #0]
    8564:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856c:	781b      	ldrb	r3, [r3, #0]
    856e:	4413      	add	r3, r2
    8570:	b2da      	uxtb	r2, r3
    8572:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857a:	701a      	strb	r2, [r3, #0]
    857c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8584:	781a      	ldrb	r2, [r3, #0]
    8586:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	4413      	add	r3, r2
    8592:	b2da      	uxtb	r2, r3
    8594:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859c:	701a      	strb	r2, [r3, #0]
    859e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    85a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a6:	781b      	ldrb	r3, [r3, #0]
    85a8:	3301      	adds	r3, #1
    85aa:	b2da      	uxtb	r2, r3
    85ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    85b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b4:	701a      	strb	r2, [r3, #0]
    85b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    85ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85be:	781b      	ldrb	r3, [r3, #0]
    85c0:	2bff      	cmp	r3, #255	; 0xff
    85c2:	d105      	bne.n	85d0 <send_attitude+0x29c>
    85c4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    85c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85cc:	2200      	movs	r2, #0
    85ce:	701a      	strb	r2, [r3, #0]
    85d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    85d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d8:	781b      	ldrb	r3, [r3, #0]
    85da:	461a      	mov	r2, r3
    85dc:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    85e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e4:	7899      	ldrb	r1, [r3, #2]
    85e6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	5499      	strb	r1, [r3, r2]
    85f0:	4bae      	ldr	r3, [pc, #696]	; (88ac <send_attitude+0x578>)
    85f2:	781a      	ldrb	r2, [r3, #0]
    85f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    85f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	4413      	add	r3, r2
    8600:	b2da      	uxtb	r2, r3
    8602:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860a:	701a      	strb	r2, [r3, #0]
    860c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8614:	781a      	ldrb	r2, [r3, #0]
    8616:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    861a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	4413      	add	r3, r2
    8622:	b2da      	uxtb	r2, r3
    8624:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	701a      	strb	r2, [r3, #0]
    862e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	3301      	adds	r3, #1
    863a:	b2da      	uxtb	r2, r3
    863c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8644:	701a      	strb	r2, [r3, #0]
    8646:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2bff      	cmp	r3, #255	; 0xff
    8652:	d105      	bne.n	8660 <send_attitude+0x32c>
    8654:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865c:	2200      	movs	r2, #0
    865e:	701a      	strb	r2, [r3, #0]
    8660:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	461a      	mov	r2, r3
    866c:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    8670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8674:	78d9      	ldrb	r1, [r3, #3]
    8676:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    867a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    867e:	5499      	strb	r1, [r3, r2]
    8680:	4b8b      	ldr	r3, [pc, #556]	; (88b0 <send_attitude+0x57c>)
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	4413      	add	r3, r2
    8690:	b2da      	uxtb	r2, r3
    8692:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869a:	701a      	strb	r2, [r3, #0]
    869c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    86aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	4413      	add	r3, r2
    86b2:	b2da      	uxtb	r2, r3
    86b4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    86b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86bc:	701a      	strb	r2, [r3, #0]
    86be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    86c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	3301      	adds	r3, #1
    86ca:	b2da      	uxtb	r2, r3
    86cc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    86d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    86da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2bff      	cmp	r3, #255	; 0xff
    86e2:	d105      	bne.n	86f0 <send_attitude+0x3bc>
    86e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	2200      	movs	r2, #0
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    86f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	461a      	mov	r2, r3
    86fc:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    8700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8704:	7819      	ldrb	r1, [r3, #0]
    8706:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    870a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870e:	5499      	strb	r1, [r3, r2]
    8710:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    8714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8718:	781a      	ldrb	r2, [r3, #0]
    871a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    871e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8722:	781b      	ldrb	r3, [r3, #0]
    8724:	4413      	add	r3, r2
    8726:	b2da      	uxtb	r2, r3
    8728:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    872c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8730:	701a      	strb	r2, [r3, #0]
    8732:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873a:	781a      	ldrb	r2, [r3, #0]
    873c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	4413      	add	r3, r2
    8748:	b2da      	uxtb	r2, r3
    874a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    874e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8752:	701a      	strb	r2, [r3, #0]
    8754:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	781b      	ldrb	r3, [r3, #0]
    875e:	3301      	adds	r3, #1
    8760:	b2da      	uxtb	r2, r3
    8762:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876a:	701a      	strb	r2, [r3, #0]
    876c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	2bff      	cmp	r3, #255	; 0xff
    8778:	d105      	bne.n	8786 <send_attitude+0x452>
    877a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    877e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8782:	2200      	movs	r2, #0
    8784:	701a      	strb	r2, [r3, #0]
    8786:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    878a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	461a      	mov	r2, r3
    8792:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    8796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879a:	7859      	ldrb	r1, [r3, #1]
    879c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	5499      	strb	r1, [r3, r2]
    87a6:	4b43      	ldr	r3, [pc, #268]	; (88b4 <send_attitude+0x580>)
    87a8:	781a      	ldrb	r2, [r3, #0]
    87aa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    87ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	4413      	add	r3, r2
    87b6:	b2da      	uxtb	r2, r3
    87b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    87bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c0:	701a      	strb	r2, [r3, #0]
    87c2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    87c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ca:	781a      	ldrb	r2, [r3, #0]
    87cc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	4413      	add	r3, r2
    87d8:	b2da      	uxtb	r2, r3
    87da:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    87de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e2:	701a      	strb	r2, [r3, #0]
    87e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	781b      	ldrb	r3, [r3, #0]
    87ee:	3301      	adds	r3, #1
    87f0:	b2da      	uxtb	r2, r3
    87f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    87f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fa:	701a      	strb	r2, [r3, #0]
    87fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	781b      	ldrb	r3, [r3, #0]
    8806:	2bff      	cmp	r3, #255	; 0xff
    8808:	d105      	bne.n	8816 <send_attitude+0x4e2>
    880a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    880e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8812:	2200      	movs	r2, #0
    8814:	701a      	strb	r2, [r3, #0]
    8816:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    881a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	461a      	mov	r2, r3
    8822:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    8826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882a:	7899      	ldrb	r1, [r3, #2]
    882c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	5499      	strb	r1, [r3, r2]
    8836:	4b20      	ldr	r3, [pc, #128]	; (88b8 <send_attitude+0x584>)
    8838:	781a      	ldrb	r2, [r3, #0]
    883a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    883e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8842:	781b      	ldrb	r3, [r3, #0]
    8844:	4413      	add	r3, r2
    8846:	b2da      	uxtb	r2, r3
    8848:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    884c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8850:	701a      	strb	r2, [r3, #0]
    8852:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885a:	781a      	ldrb	r2, [r3, #0]
    885c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	4413      	add	r3, r2
    8868:	b2da      	uxtb	r2, r3
    886a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    886e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8872:	701a      	strb	r2, [r3, #0]
    8874:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	3301      	adds	r3, #1
    8880:	b2da      	uxtb	r2, r3
    8882:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	2bff      	cmp	r3, #255	; 0xff
    8898:	d110      	bne.n	88bc <send_attitude+0x588>
    889a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    889e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a2:	2200      	movs	r2, #0
    88a4:	701a      	strb	r2, [r3, #0]
    88a6:	e009      	b.n	88bc <send_attitude+0x588>
    88a8:	2004c4a9 	.word	0x2004c4a9
    88ac:	2004c4aa 	.word	0x2004c4aa
    88b0:	2004c4ab 	.word	0x2004c4ab
    88b4:	2004c4ad 	.word	0x2004c4ad
    88b8:	2004c4ae 	.word	0x2004c4ae
    88bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	781b      	ldrb	r3, [r3, #0]
    88c6:	461a      	mov	r2, r3
    88c8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    88cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d0:	78d9      	ldrb	r1, [r3, #3]
    88d2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    88d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88da:	5499      	strb	r1, [r3, r2]
    88dc:	4bc2      	ldr	r3, [pc, #776]	; (8be8 <send_attitude+0x8b4>)
    88de:	781a      	ldrb	r2, [r3, #0]
    88e0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    88e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	4413      	add	r3, r2
    88ec:	b2da      	uxtb	r2, r3
    88ee:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    88f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f6:	701a      	strb	r2, [r3, #0]
    88f8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    88fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8900:	781a      	ldrb	r2, [r3, #0]
    8902:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890a:	781b      	ldrb	r3, [r3, #0]
    890c:	4413      	add	r3, r2
    890e:	b2da      	uxtb	r2, r3
    8910:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8918:	701a      	strb	r2, [r3, #0]
    891a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    891e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	3301      	adds	r3, #1
    8926:	b2da      	uxtb	r2, r3
    8928:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    892c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8930:	701a      	strb	r2, [r3, #0]
    8932:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	2bff      	cmp	r3, #255	; 0xff
    893e:	d105      	bne.n	894c <send_attitude+0x618>
    8940:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8948:	2200      	movs	r2, #0
    894a:	701a      	strb	r2, [r3, #0]
    894c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	461a      	mov	r2, r3
    8958:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    895c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8960:	7819      	ldrb	r1, [r3, #0]
    8962:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896a:	5499      	strb	r1, [r3, r2]
    896c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    8970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8974:	781a      	ldrb	r2, [r3, #0]
    8976:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    897a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	4413      	add	r3, r2
    8982:	b2da      	uxtb	r2, r3
    8984:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898c:	701a      	strb	r2, [r3, #0]
    898e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8996:	781a      	ldrb	r2, [r3, #0]
    8998:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    899c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	4413      	add	r3, r2
    89a4:	b2da      	uxtb	r2, r3
    89a6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    89aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ae:	701a      	strb	r2, [r3, #0]
    89b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    89b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	3301      	adds	r3, #1
    89bc:	b2da      	uxtb	r2, r3
    89be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    89c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c6:	701a      	strb	r2, [r3, #0]
    89c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    89cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d0:	781b      	ldrb	r3, [r3, #0]
    89d2:	2bff      	cmp	r3, #255	; 0xff
    89d4:	d105      	bne.n	89e2 <send_attitude+0x6ae>
    89d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    89da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89de:	2200      	movs	r2, #0
    89e0:	701a      	strb	r2, [r3, #0]
    89e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    89e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	461a      	mov	r2, r3
    89ee:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    89f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f6:	7859      	ldrb	r1, [r3, #1]
    89f8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    89fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a00:	5499      	strb	r1, [r3, r2]
    8a02:	4b7a      	ldr	r3, [pc, #488]	; (8bec <send_attitude+0x8b8>)
    8a04:	781a      	ldrb	r2, [r3, #0]
    8a06:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0e:	781b      	ldrb	r3, [r3, #0]
    8a10:	4413      	add	r3, r2
    8a12:	b2da      	uxtb	r2, r3
    8a14:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1c:	701a      	strb	r2, [r3, #0]
    8a1e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a26:	781a      	ldrb	r2, [r3, #0]
    8a28:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a30:	781b      	ldrb	r3, [r3, #0]
    8a32:	4413      	add	r3, r2
    8a34:	b2da      	uxtb	r2, r3
    8a36:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3e:	701a      	strb	r2, [r3, #0]
    8a40:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	3301      	adds	r3, #1
    8a4c:	b2da      	uxtb	r2, r3
    8a4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a56:	701a      	strb	r2, [r3, #0]
    8a58:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a60:	781b      	ldrb	r3, [r3, #0]
    8a62:	2bff      	cmp	r3, #255	; 0xff
    8a64:	d105      	bne.n	8a72 <send_attitude+0x73e>
    8a66:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6e:	2200      	movs	r2, #0
    8a70:	701a      	strb	r2, [r3, #0]
    8a72:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	461a      	mov	r2, r3
    8a7e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    8a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a86:	7899      	ldrb	r1, [r3, #2]
    8a88:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a90:	5499      	strb	r1, [r3, r2]
    8a92:	4b57      	ldr	r3, [pc, #348]	; (8bf0 <send_attitude+0x8bc>)
    8a94:	781a      	ldrb	r2, [r3, #0]
    8a96:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	4413      	add	r3, r2
    8aa2:	b2da      	uxtb	r2, r3
    8aa4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aac:	701a      	strb	r2, [r3, #0]
    8aae:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab6:	781a      	ldrb	r2, [r3, #0]
    8ab8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac0:	781b      	ldrb	r3, [r3, #0]
    8ac2:	4413      	add	r3, r2
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	3301      	adds	r3, #1
    8adc:	b2da      	uxtb	r2, r3
    8ade:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae6:	701a      	strb	r2, [r3, #0]
    8ae8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	2bff      	cmp	r3, #255	; 0xff
    8af4:	d105      	bne.n	8b02 <send_attitude+0x7ce>
    8af6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afe:	2200      	movs	r2, #0
    8b00:	701a      	strb	r2, [r3, #0]
    8b02:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	461a      	mov	r2, r3
    8b0e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    8b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b16:	78d9      	ldrb	r1, [r3, #3]
    8b18:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b20:	5499      	strb	r1, [r3, r2]
    8b22:	4b34      	ldr	r3, [pc, #208]	; (8bf4 <send_attitude+0x8c0>)
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	4413      	add	r3, r2
    8b32:	b2da      	uxtb	r2, r3
    8b34:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3c:	701a      	strb	r2, [r3, #0]
    8b3e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b46:	781a      	ldrb	r2, [r3, #0]
    8b48:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	4413      	add	r3, r2
    8b54:	b2da      	uxtb	r2, r3
    8b56:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5e:	701a      	strb	r2, [r3, #0]
    8b60:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	781b      	ldrb	r3, [r3, #0]
    8b6a:	3301      	adds	r3, #1
    8b6c:	b2da      	uxtb	r2, r3
    8b6e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b76:	701a      	strb	r2, [r3, #0]
    8b78:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	2bff      	cmp	r3, #255	; 0xff
    8b84:	d105      	bne.n	8b92 <send_attitude+0x85e>
    8b86:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
    8b92:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	461a      	mov	r2, r3
    8b9e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba6:	7819      	ldrb	r1, [r3, #0]
    8ba8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	5499      	strb	r1, [r3, r2]
    8bb2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	3301      	adds	r3, #1
    8bbe:	b2da      	uxtb	r2, r3
    8bc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc8:	701a      	strb	r2, [r3, #0]
    8bca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd2:	781b      	ldrb	r3, [r3, #0]
    8bd4:	2bff      	cmp	r3, #255	; 0xff
    8bd6:	d10f      	bne.n	8bf8 <send_attitude+0x8c4>
    8bd8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	2200      	movs	r2, #0
    8be2:	701a      	strb	r2, [r3, #0]
    8be4:	e008      	b.n	8bf8 <send_attitude+0x8c4>
    8be6:	bf00      	nop
    8be8:	2004c4af 	.word	0x2004c4af
    8bec:	2004c4b1 	.word	0x2004c4b1
    8bf0:	2004c4b2 	.word	0x2004c4b2
    8bf4:	2004c4b3 	.word	0x2004c4b3
    8bf8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c00:	781b      	ldrb	r3, [r3, #0]
    8c02:	461a      	mov	r2, r3
    8c04:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0c:	7819      	ldrb	r1, [r3, #0]
    8c0e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	5499      	strb	r1, [r3, r2]
    8c18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	3301      	adds	r3, #1
    8c24:	b2da      	uxtb	r2, r3
    8c26:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	701a      	strb	r2, [r3, #0]
    8c30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	2bff      	cmp	r3, #255	; 0xff
    8c3c:	d105      	bne.n	8c4a <send_attitude+0x916>
    8c3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	2200      	movs	r2, #0
    8c48:	701a      	strb	r2, [r3, #0]
    8c4a:	f242 0339 	movw	r3, #8249	; 0x2039
    8c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c52:	781b      	ldrb	r3, [r3, #0]
    8c54:	b2db      	uxtb	r3, r3
    8c56:	f003 0310 	and.w	r3, r3, #16
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d15a      	bne.n	8d14 <send_attitude+0x9e0>
    8c5e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	b2db      	uxtb	r3, r3
    8c6a:	461a      	mov	r2, r3
    8c6c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c74:	5c9a      	ldrb	r2, [r3, r2]
    8c76:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	701a      	strb	r2, [r3, #0]
    8c80:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	2200      	movs	r2, #0
    8c8a:	701a      	strb	r2, [r3, #0]
    8c8c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c94:	781b      	ldrb	r3, [r3, #0]
    8c96:	b2db      	uxtb	r3, r3
    8c98:	3301      	adds	r3, #1
    8c9a:	b2da      	uxtb	r2, r3
    8c9c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca4:	701a      	strb	r2, [r3, #0]
    8ca6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	781b      	ldrb	r3, [r3, #0]
    8cb0:	b2db      	uxtb	r3, r3
    8cb2:	2bff      	cmp	r3, #255	; 0xff
    8cb4:	d105      	bne.n	8cc2 <send_attitude+0x98e>
    8cb6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	2200      	movs	r2, #0
    8cc0:	701a      	strb	r2, [r3, #0]
    8cc2:	f242 0338 	movw	r3, #8248	; 0x2038
    8cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cca:	f242 0238 	movw	r2, #8248	; 0x2038
    8cce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8cd2:	7812      	ldrb	r2, [r2, #0]
    8cd4:	b2d2      	uxtb	r2, r2
    8cd6:	f042 0201 	orr.w	r2, r2, #1
    8cda:	b2d2      	uxtb	r2, r2
    8cdc:	701a      	strb	r2, [r3, #0]
    8cde:	f242 0339 	movw	r3, #8249	; 0x2039
    8ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce6:	f242 0239 	movw	r2, #8249	; 0x2039
    8cea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8cee:	7812      	ldrb	r2, [r2, #0]
    8cf0:	b2d2      	uxtb	r2, r2
    8cf2:	f042 0210 	orr.w	r2, r2, #16
    8cf6:	b2d2      	uxtb	r2, r2
    8cf8:	701a      	strb	r2, [r3, #0]
    8cfa:	e00b      	b.n	8d14 <send_attitude+0x9e0>
    8cfc:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    8d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d04:	781b      	ldrb	r3, [r3, #0]
    8d06:	3301      	adds	r3, #1
    8d08:	b2da      	uxtb	r2, r3
    8d0a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    8d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d12:	701a      	strb	r2, [r3, #0]
  }
}
    8d14:	46bd      	mov	sp, r7
    8d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d1a:	4770      	bx	lr

00008d1c <send_adc>:
  
void send_adc(void){  //500ms
    8d1c:	b480      	push	{r7}
    8d1e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8d20:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    8d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d28:	781a      	ldrb	r2, [r3, #0]
    8d2a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8d2e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8d32:	fba3 1302 	umull	r1, r3, r3, r2
    8d36:	0899      	lsrs	r1, r3, #2
    8d38:	460b      	mov	r3, r1
    8d3a:	009b      	lsls	r3, r3, #2
    8d3c:	440b      	add	r3, r1
    8d3e:	1ad3      	subs	r3, r2, r3
    8d40:	b2db      	uxtb	r3, r3
    8d42:	2b01      	cmp	r3, #1
    8d44:	f040 8269 	bne.w	921a <send_adc+0x4fe>
    8d48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d50:	781a      	ldrb	r2, [r3, #0]
    8d52:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d5a:	781b      	ldrb	r3, [r3, #0]
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	429a      	cmp	r2, r3
    8d60:	d313      	bcc.n	8d8a <send_adc+0x6e>
    8d62:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	b2db      	uxtb	r3, r3
    8d6e:	461a      	mov	r2, r3
    8d70:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	1ad3      	subs	r3, r2, r3
    8d7c:	33ff      	adds	r3, #255	; 0xff
    8d7e:	2b08      	cmp	r3, #8
    8d80:	bfd4      	ite	le
    8d82:	2300      	movle	r3, #0
    8d84:	2301      	movgt	r3, #1
    8d86:	b2db      	uxtb	r3, r3
    8d88:	e011      	b.n	8dae <send_adc+0x92>
    8d8a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    8d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	b2db      	uxtb	r3, r3
    8d96:	461a      	mov	r2, r3
    8d98:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	1ad3      	subs	r3, r2, r3
    8da4:	2b08      	cmp	r3, #8
    8da6:	bfd4      	ite	le
    8da8:	2300      	movle	r3, #0
    8daa:	2301      	movgt	r3, #1
    8dac:	b2db      	uxtb	r3, r3
    8dae:	2b00      	cmp	r3, #0
    8db0:	f000 8227 	beq.w	9202 <send_adc+0x4e6>
    8db4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	461a      	mov	r2, r3
    8dc0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc8:	2105      	movs	r1, #5
    8dca:	5499      	strb	r1, [r3, r2]
    8dcc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd4:	781b      	ldrb	r3, [r3, #0]
    8dd6:	3301      	adds	r3, #1
    8dd8:	b2da      	uxtb	r2, r3
    8dda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de2:	701a      	strb	r2, [r3, #0]
    8de4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	2bff      	cmp	r3, #255	; 0xff
    8df0:	d105      	bne.n	8dfe <send_adc+0xe2>
    8df2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfa:	2200      	movs	r2, #0
    8dfc:	701a      	strb	r2, [r3, #0]
    8dfe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e06:	781b      	ldrb	r3, [r3, #0]
    8e08:	461a      	mov	r2, r3
    8e0a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e12:	2107      	movs	r1, #7
    8e14:	5499      	strb	r1, [r3, r2]
    8e16:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1e:	781b      	ldrb	r3, [r3, #0]
    8e20:	3301      	adds	r3, #1
    8e22:	b2da      	uxtb	r2, r3
    8e24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2c:	701a      	strb	r2, [r3, #0]
    8e2e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	2bff      	cmp	r3, #255	; 0xff
    8e3a:	d105      	bne.n	8e48 <send_adc+0x12c>
    8e3c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e44:	2200      	movs	r2, #0
    8e46:	701a      	strb	r2, [r3, #0]
    8e48:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e50:	2207      	movs	r2, #7
    8e52:	701a      	strb	r2, [r3, #0]
    8e54:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5c:	2207      	movs	r2, #7
    8e5e:	701a      	strb	r2, [r3, #0]
    8e60:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	461a      	mov	r2, r3
    8e6c:	f24c 1388 	movw	r3, #49544	; 0xc188
    8e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e74:	7819      	ldrb	r1, [r3, #0]
    8e76:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e7e:	5499      	strb	r1, [r3, r2]
    8e80:	f24c 1388 	movw	r3, #49544	; 0xc188
    8e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e88:	781a      	ldrb	r2, [r3, #0]
    8e8a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	4413      	add	r3, r2
    8e96:	b2da      	uxtb	r2, r3
    8e98:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea0:	701a      	strb	r2, [r3, #0]
    8ea2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eaa:	781a      	ldrb	r2, [r3, #0]
    8eac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	4413      	add	r3, r2
    8eb8:	b2da      	uxtb	r2, r3
    8eba:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec2:	701a      	strb	r2, [r3, #0]
    8ec4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	3301      	adds	r3, #1
    8ed0:	b2da      	uxtb	r2, r3
    8ed2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eda:	701a      	strb	r2, [r3, #0]
    8edc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee4:	781b      	ldrb	r3, [r3, #0]
    8ee6:	2bff      	cmp	r3, #255	; 0xff
    8ee8:	d105      	bne.n	8ef6 <send_adc+0x1da>
    8eea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef2:	2200      	movs	r2, #0
    8ef4:	701a      	strb	r2, [r3, #0]
    8ef6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efe:	781b      	ldrb	r3, [r3, #0]
    8f00:	461a      	mov	r2, r3
    8f02:	f24c 1388 	movw	r3, #49544	; 0xc188
    8f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f0a:	7859      	ldrb	r1, [r3, #1]
    8f0c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f14:	5499      	strb	r1, [r3, r2]
    8f16:	4bc3      	ldr	r3, [pc, #780]	; (9224 <send_adc+0x508>)
    8f18:	781a      	ldrb	r2, [r3, #0]
    8f1a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f22:	781b      	ldrb	r3, [r3, #0]
    8f24:	4413      	add	r3, r2
    8f26:	b2da      	uxtb	r2, r3
    8f28:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f30:	701a      	strb	r2, [r3, #0]
    8f32:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3a:	781a      	ldrb	r2, [r3, #0]
    8f3c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	4413      	add	r3, r2
    8f48:	b2da      	uxtb	r2, r3
    8f4a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f52:	701a      	strb	r2, [r3, #0]
    8f54:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	781b      	ldrb	r3, [r3, #0]
    8f5e:	3301      	adds	r3, #1
    8f60:	b2da      	uxtb	r2, r3
    8f62:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f6a:	701a      	strb	r2, [r3, #0]
    8f6c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	2bff      	cmp	r3, #255	; 0xff
    8f78:	d105      	bne.n	8f86 <send_adc+0x26a>
    8f7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f82:	2200      	movs	r2, #0
    8f84:	701a      	strb	r2, [r3, #0]
    8f86:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8e:	781b      	ldrb	r3, [r3, #0]
    8f90:	461a      	mov	r2, r3
    8f92:	f24c 138a 	movw	r3, #49546	; 0xc18a
    8f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9a:	7819      	ldrb	r1, [r3, #0]
    8f9c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    8fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa4:	5499      	strb	r1, [r3, r2]
    8fa6:	f24c 138a 	movw	r3, #49546	; 0xc18a
    8faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fae:	781a      	ldrb	r2, [r3, #0]
    8fb0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb8:	781b      	ldrb	r3, [r3, #0]
    8fba:	4413      	add	r3, r2
    8fbc:	b2da      	uxtb	r2, r3
    8fbe:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc6:	701a      	strb	r2, [r3, #0]
    8fc8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd0:	781a      	ldrb	r2, [r3, #0]
    8fd2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	4413      	add	r3, r2
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	701a      	strb	r2, [r3, #0]
    8fea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	3301      	adds	r3, #1
    8ff6:	b2da      	uxtb	r2, r3
    8ff8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    8ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9000:	701a      	strb	r2, [r3, #0]
    9002:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	781b      	ldrb	r3, [r3, #0]
    900c:	2bff      	cmp	r3, #255	; 0xff
    900e:	d105      	bne.n	901c <send_adc+0x300>
    9010:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9018:	2200      	movs	r2, #0
    901a:	701a      	strb	r2, [r3, #0]
    901c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	461a      	mov	r2, r3
    9028:	f24c 138a 	movw	r3, #49546	; 0xc18a
    902c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9030:	7859      	ldrb	r1, [r3, #1]
    9032:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	5499      	strb	r1, [r3, r2]
    903c:	4b7a      	ldr	r3, [pc, #488]	; (9228 <send_adc+0x50c>)
    903e:	781a      	ldrb	r2, [r3, #0]
    9040:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	4413      	add	r3, r2
    904c:	b2da      	uxtb	r2, r3
    904e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9056:	701a      	strb	r2, [r3, #0]
    9058:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    905c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9060:	781a      	ldrb	r2, [r3, #0]
    9062:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	4413      	add	r3, r2
    906e:	b2da      	uxtb	r2, r3
    9070:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9078:	701a      	strb	r2, [r3, #0]
    907a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	3301      	adds	r3, #1
    9086:	b2da      	uxtb	r2, r3
    9088:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    908c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9090:	701a      	strb	r2, [r3, #0]
    9092:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	2bff      	cmp	r3, #255	; 0xff
    909e:	d105      	bne.n	90ac <send_adc+0x390>
    90a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a8:	2200      	movs	r2, #0
    90aa:	701a      	strb	r2, [r3, #0]
    90ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	461a      	mov	r2, r3
    90b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    90bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c0:	7819      	ldrb	r1, [r3, #0]
    90c2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	5499      	strb	r1, [r3, r2]
    90cc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d4:	781b      	ldrb	r3, [r3, #0]
    90d6:	3301      	adds	r3, #1
    90d8:	b2da      	uxtb	r2, r3
    90da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e2:	701a      	strb	r2, [r3, #0]
    90e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	2bff      	cmp	r3, #255	; 0xff
    90f0:	d105      	bne.n	90fe <send_adc+0x3e2>
    90f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    90f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fa:	2200      	movs	r2, #0
    90fc:	701a      	strb	r2, [r3, #0]
    90fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9106:	781b      	ldrb	r3, [r3, #0]
    9108:	461a      	mov	r2, r3
    910a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    910e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9112:	7819      	ldrb	r1, [r3, #0]
    9114:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911c:	5499      	strb	r1, [r3, r2]
    911e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	3301      	adds	r3, #1
    912a:	b2da      	uxtb	r2, r3
    912c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9134:	701a      	strb	r2, [r3, #0]
    9136:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    913a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	2bff      	cmp	r3, #255	; 0xff
    9142:	d105      	bne.n	9150 <send_adc+0x434>
    9144:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	2200      	movs	r2, #0
    914e:	701a      	strb	r2, [r3, #0]
    9150:	f242 0339 	movw	r3, #8249	; 0x2039
    9154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	b2db      	uxtb	r3, r3
    915c:	f003 0310 	and.w	r3, r3, #16
    9160:	2b00      	cmp	r3, #0
    9162:	d15a      	bne.n	921a <send_adc+0x4fe>
    9164:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	b2db      	uxtb	r3, r3
    9170:	461a      	mov	r2, r3
    9172:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917a:	5c9a      	ldrb	r2, [r3, r2]
    917c:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    9180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9184:	701a      	strb	r2, [r3, #0]
    9186:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    918a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918e:	2200      	movs	r2, #0
    9190:	701a      	strb	r2, [r3, #0]
    9192:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	b2db      	uxtb	r3, r3
    919e:	3301      	adds	r3, #1
    91a0:	b2da      	uxtb	r2, r3
    91a2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    91a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91aa:	701a      	strb	r2, [r3, #0]
    91ac:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    91b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b4:	781b      	ldrb	r3, [r3, #0]
    91b6:	b2db      	uxtb	r3, r3
    91b8:	2bff      	cmp	r3, #255	; 0xff
    91ba:	d105      	bne.n	91c8 <send_adc+0x4ac>
    91bc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    91c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c4:	2200      	movs	r2, #0
    91c6:	701a      	strb	r2, [r3, #0]
    91c8:	f242 0338 	movw	r3, #8248	; 0x2038
    91cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d0:	f242 0238 	movw	r2, #8248	; 0x2038
    91d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    91d8:	7812      	ldrb	r2, [r2, #0]
    91da:	b2d2      	uxtb	r2, r2
    91dc:	f042 0201 	orr.w	r2, r2, #1
    91e0:	b2d2      	uxtb	r2, r2
    91e2:	701a      	strb	r2, [r3, #0]
    91e4:	f242 0339 	movw	r3, #8249	; 0x2039
    91e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ec:	f242 0239 	movw	r2, #8249	; 0x2039
    91f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    91f4:	7812      	ldrb	r2, [r2, #0]
    91f6:	b2d2      	uxtb	r2, r2
    91f8:	f042 0210 	orr.w	r2, r2, #16
    91fc:	b2d2      	uxtb	r2, r2
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	e00b      	b.n	921a <send_adc+0x4fe>
    9202:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	3301      	adds	r3, #1
    920e:	b2da      	uxtb	r2, r3
    9210:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9218:	701a      	strb	r2, [r3, #0]
}
    921a:	46bd      	mov	sp, r7
    921c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9220:	4770      	bx	lr
    9222:	bf00      	nop
    9224:	2004c189 	.word	0x2004c189
    9228:	2004c18b 	.word	0x2004c18b

0000922c <send_settings>:
void send_settings(void){ //500ms
    922c:	b480      	push	{r7}
    922e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9230:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    9234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9238:	781a      	ldrb	r2, [r3, #0]
    923a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    923e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9242:	fba3 1302 	umull	r1, r3, r3, r2
    9246:	0899      	lsrs	r1, r3, #2
    9248:	460b      	mov	r3, r1
    924a:	009b      	lsls	r3, r3, #2
    924c:	440b      	add	r3, r1
    924e:	1ad3      	subs	r3, r2, r3
    9250:	b2db      	uxtb	r3, r3
    9252:	2b02      	cmp	r3, #2
    9254:	f040 83e7 	bne.w	9a26 <send_settings+0x7fa>
    9258:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    925c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2b00      	cmp	r3, #0
    9264:	f000 83df 	beq.w	9a26 <send_settings+0x7fa>
    9268:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    926c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9270:	781a      	ldrb	r2, [r3, #0]
    9272:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927a:	781b      	ldrb	r3, [r3, #0]
    927c:	b2db      	uxtb	r3, r3
    927e:	429a      	cmp	r2, r3
    9280:	d313      	bcc.n	92aa <send_settings+0x7e>
    9282:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	b2db      	uxtb	r3, r3
    928e:	461a      	mov	r2, r3
    9290:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	1ad3      	subs	r3, r2, r3
    929c:	33ff      	adds	r3, #255	; 0xff
    929e:	2b0d      	cmp	r3, #13
    92a0:	bfd4      	ite	le
    92a2:	2300      	movle	r3, #0
    92a4:	2301      	movgt	r3, #1
    92a6:	b2db      	uxtb	r3, r3
    92a8:	e011      	b.n	92ce <send_settings+0xa2>
    92aa:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    92ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b2:	781b      	ldrb	r3, [r3, #0]
    92b4:	b2db      	uxtb	r3, r3
    92b6:	461a      	mov	r2, r3
    92b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    92bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	1ad3      	subs	r3, r2, r3
    92c4:	2b0d      	cmp	r3, #13
    92c6:	bfd4      	ite	le
    92c8:	2300      	movle	r3, #0
    92ca:	2301      	movgt	r3, #1
    92cc:	b2db      	uxtb	r3, r3
    92ce:	2b00      	cmp	r3, #0
    92d0:	f000 839d 	beq.w	9a0e <send_settings+0x7e2>
    92d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    92d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92dc:	781b      	ldrb	r3, [r3, #0]
    92de:	461a      	mov	r2, r3
    92e0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    92e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e8:	2105      	movs	r1, #5
    92ea:	5499      	strb	r1, [r3, r2]
    92ec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    92f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	3301      	adds	r3, #1
    92f8:	b2da      	uxtb	r2, r3
    92fa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	701a      	strb	r2, [r3, #0]
    9304:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	781b      	ldrb	r3, [r3, #0]
    930e:	2bff      	cmp	r3, #255	; 0xff
    9310:	d105      	bne.n	931e <send_settings+0xf2>
    9312:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931a:	2200      	movs	r2, #0
    931c:	701a      	strb	r2, [r3, #0]
    931e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	461a      	mov	r2, r3
    932a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	2111      	movs	r1, #17
    9334:	5499      	strb	r1, [r3, r2]
    9336:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    933a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	3301      	adds	r3, #1
    9342:	b2da      	uxtb	r2, r3
    9344:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934c:	701a      	strb	r2, [r3, #0]
    934e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9356:	781b      	ldrb	r3, [r3, #0]
    9358:	2bff      	cmp	r3, #255	; 0xff
    935a:	d105      	bne.n	9368 <send_settings+0x13c>
    935c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9364:	2200      	movs	r2, #0
    9366:	701a      	strb	r2, [r3, #0]
    9368:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    936c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9370:	2211      	movs	r2, #17
    9372:	701a      	strb	r2, [r3, #0]
    9374:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937c:	2211      	movs	r2, #17
    937e:	701a      	strb	r2, [r3, #0]
    9380:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9388:	781b      	ldrb	r3, [r3, #0]
    938a:	461a      	mov	r2, r3
    938c:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    9390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9394:	7819      	ldrb	r1, [r3, #0]
    9396:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    939a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939e:	5499      	strb	r1, [r3, r2]
    93a0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    93a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a8:	781a      	ldrb	r2, [r3, #0]
    93aa:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    93ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b2:	781b      	ldrb	r3, [r3, #0]
    93b4:	4413      	add	r3, r2
    93b6:	b2da      	uxtb	r2, r3
    93b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    93bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c0:	701a      	strb	r2, [r3, #0]
    93c2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    93c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ca:	781a      	ldrb	r2, [r3, #0]
    93cc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    93d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d4:	781b      	ldrb	r3, [r3, #0]
    93d6:	4413      	add	r3, r2
    93d8:	b2da      	uxtb	r2, r3
    93da:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    93de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e2:	701a      	strb	r2, [r3, #0]
    93e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    93e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ec:	781b      	ldrb	r3, [r3, #0]
    93ee:	3301      	adds	r3, #1
    93f0:	b2da      	uxtb	r2, r3
    93f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    93f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fa:	701a      	strb	r2, [r3, #0]
    93fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9404:	781b      	ldrb	r3, [r3, #0]
    9406:	2bff      	cmp	r3, #255	; 0xff
    9408:	d105      	bne.n	9416 <send_settings+0x1ea>
    940a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    940e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9412:	2200      	movs	r2, #0
    9414:	701a      	strb	r2, [r3, #0]
    9416:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    941a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941e:	781b      	ldrb	r3, [r3, #0]
    9420:	461a      	mov	r2, r3
    9422:	f64b 63d8 	movw	r3, #48856	; 0xbed8
    9426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    942a:	7819      	ldrb	r1, [r3, #0]
    942c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	5499      	strb	r1, [r3, r2]
    9436:	f64b 63d8 	movw	r3, #48856	; 0xbed8
    943a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    943e:	781a      	ldrb	r2, [r3, #0]
    9440:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9448:	781b      	ldrb	r3, [r3, #0]
    944a:	4413      	add	r3, r2
    944c:	b2da      	uxtb	r2, r3
    944e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9456:	701a      	strb	r2, [r3, #0]
    9458:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    945c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9460:	781a      	ldrb	r2, [r3, #0]
    9462:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	4413      	add	r3, r2
    946e:	b2da      	uxtb	r2, r3
    9470:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9478:	701a      	strb	r2, [r3, #0]
    947a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    947e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	3301      	adds	r3, #1
    9486:	b2da      	uxtb	r2, r3
    9488:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	701a      	strb	r2, [r3, #0]
    9492:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949a:	781b      	ldrb	r3, [r3, #0]
    949c:	2bff      	cmp	r3, #255	; 0xff
    949e:	d105      	bne.n	94ac <send_settings+0x280>
    94a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    94a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a8:	2200      	movs	r2, #0
    94aa:	701a      	strb	r2, [r3, #0]
    94ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    94b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	461a      	mov	r2, r3
    94b8:	f64b 63d8 	movw	r3, #48856	; 0xbed8
    94bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c0:	7859      	ldrb	r1, [r3, #1]
    94c2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	5499      	strb	r1, [r3, r2]
    94cc:	4bd1      	ldr	r3, [pc, #836]	; (9814 <send_settings+0x5e8>)
    94ce:	781a      	ldrb	r2, [r3, #0]
    94d0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    94d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d8:	781b      	ldrb	r3, [r3, #0]
    94da:	4413      	add	r3, r2
    94dc:	b2da      	uxtb	r2, r3
    94de:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    94e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e6:	701a      	strb	r2, [r3, #0]
    94e8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    94ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f0:	781a      	ldrb	r2, [r3, #0]
    94f2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    94f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fa:	781b      	ldrb	r3, [r3, #0]
    94fc:	4413      	add	r3, r2
    94fe:	b2da      	uxtb	r2, r3
    9500:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9508:	701a      	strb	r2, [r3, #0]
    950a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    950e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9512:	781b      	ldrb	r3, [r3, #0]
    9514:	3301      	adds	r3, #1
    9516:	b2da      	uxtb	r2, r3
    9518:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    951c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9520:	701a      	strb	r2, [r3, #0]
    9522:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	2bff      	cmp	r3, #255	; 0xff
    952e:	d105      	bne.n	953c <send_settings+0x310>
    9530:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9538:	2200      	movs	r2, #0
    953a:	701a      	strb	r2, [r3, #0]
    953c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9544:	781b      	ldrb	r3, [r3, #0]
    9546:	461a      	mov	r2, r3
    9548:	f64b 63d8 	movw	r3, #48856	; 0xbed8
    954c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9550:	7899      	ldrb	r1, [r3, #2]
    9552:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955a:	5499      	strb	r1, [r3, r2]
    955c:	4bae      	ldr	r3, [pc, #696]	; (9818 <send_settings+0x5ec>)
    955e:	781a      	ldrb	r2, [r3, #0]
    9560:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	4413      	add	r3, r2
    956c:	b2da      	uxtb	r2, r3
    956e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9576:	701a      	strb	r2, [r3, #0]
    9578:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    957c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9580:	781a      	ldrb	r2, [r3, #0]
    9582:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	4413      	add	r3, r2
    958e:	b2da      	uxtb	r2, r3
    9590:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9598:	701a      	strb	r2, [r3, #0]
    959a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    959e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	3301      	adds	r3, #1
    95a6:	b2da      	uxtb	r2, r3
    95a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    95ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b0:	701a      	strb	r2, [r3, #0]
    95b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	781b      	ldrb	r3, [r3, #0]
    95bc:	2bff      	cmp	r3, #255	; 0xff
    95be:	d105      	bne.n	95cc <send_settings+0x3a0>
    95c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    95c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c8:	2200      	movs	r2, #0
    95ca:	701a      	strb	r2, [r3, #0]
    95cc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    95d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	461a      	mov	r2, r3
    95d8:	f64b 63d8 	movw	r3, #48856	; 0xbed8
    95dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e0:	78d9      	ldrb	r1, [r3, #3]
    95e2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    95e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ea:	5499      	strb	r1, [r3, r2]
    95ec:	4b8b      	ldr	r3, [pc, #556]	; (981c <send_settings+0x5f0>)
    95ee:	781a      	ldrb	r2, [r3, #0]
    95f0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    95f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f8:	781b      	ldrb	r3, [r3, #0]
    95fa:	4413      	add	r3, r2
    95fc:	b2da      	uxtb	r2, r3
    95fe:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9606:	701a      	strb	r2, [r3, #0]
    9608:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    960c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9610:	781a      	ldrb	r2, [r3, #0]
    9612:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961a:	781b      	ldrb	r3, [r3, #0]
    961c:	4413      	add	r3, r2
    961e:	b2da      	uxtb	r2, r3
    9620:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9628:	701a      	strb	r2, [r3, #0]
    962a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    962e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	3301      	adds	r3, #1
    9636:	b2da      	uxtb	r2, r3
    9638:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    963c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9640:	701a      	strb	r2, [r3, #0]
    9642:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	2bff      	cmp	r3, #255	; 0xff
    964e:	d105      	bne.n	965c <send_settings+0x430>
    9650:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9658:	2200      	movs	r2, #0
    965a:	701a      	strb	r2, [r3, #0]
    965c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	461a      	mov	r2, r3
    9668:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    966c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9670:	7819      	ldrb	r1, [r3, #0]
    9672:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967a:	5499      	strb	r1, [r3, r2]
    967c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    9680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9684:	781a      	ldrb	r2, [r3, #0]
    9686:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    968a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968e:	781b      	ldrb	r3, [r3, #0]
    9690:	4413      	add	r3, r2
    9692:	b2da      	uxtb	r2, r3
    9694:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969c:	701a      	strb	r2, [r3, #0]
    969e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    96a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a6:	781a      	ldrb	r2, [r3, #0]
    96a8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    96ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	4413      	add	r3, r2
    96b4:	b2da      	uxtb	r2, r3
    96b6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    96ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    96c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	3301      	adds	r3, #1
    96cc:	b2da      	uxtb	r2, r3
    96ce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    96d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d6:	701a      	strb	r2, [r3, #0]
    96d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	781b      	ldrb	r3, [r3, #0]
    96e2:	2bff      	cmp	r3, #255	; 0xff
    96e4:	d105      	bne.n	96f2 <send_settings+0x4c6>
    96e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    96ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ee:	2200      	movs	r2, #0
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	461a      	mov	r2, r3
    96fe:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    9702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9706:	7859      	ldrb	r1, [r3, #1]
    9708:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	5499      	strb	r1, [r3, r2]
    9712:	4b43      	ldr	r3, [pc, #268]	; (9820 <send_settings+0x5f4>)
    9714:	781a      	ldrb	r2, [r3, #0]
    9716:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    971a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	4413      	add	r3, r2
    9722:	b2da      	uxtb	r2, r3
    9724:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972c:	701a      	strb	r2, [r3, #0]
    972e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9736:	781a      	ldrb	r2, [r3, #0]
    9738:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	781b      	ldrb	r3, [r3, #0]
    9742:	4413      	add	r3, r2
    9744:	b2da      	uxtb	r2, r3
    9746:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    974a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974e:	701a      	strb	r2, [r3, #0]
    9750:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	3301      	adds	r3, #1
    975c:	b2da      	uxtb	r2, r3
    975e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9766:	701a      	strb	r2, [r3, #0]
    9768:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    976c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9770:	781b      	ldrb	r3, [r3, #0]
    9772:	2bff      	cmp	r3, #255	; 0xff
    9774:	d105      	bne.n	9782 <send_settings+0x556>
    9776:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    977a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    977e:	2200      	movs	r2, #0
    9780:	701a      	strb	r2, [r3, #0]
    9782:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	461a      	mov	r2, r3
    978e:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    9792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9796:	7899      	ldrb	r1, [r3, #2]
    9798:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    979c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a0:	5499      	strb	r1, [r3, r2]
    97a2:	4b20      	ldr	r3, [pc, #128]	; (9824 <send_settings+0x5f8>)
    97a4:	781a      	ldrb	r2, [r3, #0]
    97a6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    97aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ae:	781b      	ldrb	r3, [r3, #0]
    97b0:	4413      	add	r3, r2
    97b2:	b2da      	uxtb	r2, r3
    97b4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    97b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97bc:	701a      	strb	r2, [r3, #0]
    97be:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    97c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c6:	781a      	ldrb	r2, [r3, #0]
    97c8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    97cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d0:	781b      	ldrb	r3, [r3, #0]
    97d2:	4413      	add	r3, r2
    97d4:	b2da      	uxtb	r2, r3
    97d6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    97da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97de:	701a      	strb	r2, [r3, #0]
    97e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    97e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	3301      	adds	r3, #1
    97ec:	b2da      	uxtb	r2, r3
    97ee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    97f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f6:	701a      	strb	r2, [r3, #0]
    97f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    97fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	2bff      	cmp	r3, #255	; 0xff
    9804:	d110      	bne.n	9828 <send_settings+0x5fc>
    9806:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    980a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    980e:	2200      	movs	r2, #0
    9810:	701a      	strb	r2, [r3, #0]
    9812:	e009      	b.n	9828 <send_settings+0x5fc>
    9814:	2004bed9 	.word	0x2004bed9
    9818:	2004beda 	.word	0x2004beda
    981c:	2004bedb 	.word	0x2004bedb
    9820:	2004bedd 	.word	0x2004bedd
    9824:	2004bede 	.word	0x2004bede
    9828:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    982c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	461a      	mov	r2, r3
    9834:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    9838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    983c:	78d9      	ldrb	r1, [r3, #3]
    983e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9846:	5499      	strb	r1, [r3, r2]
    9848:	4b79      	ldr	r3, [pc, #484]	; (9a30 <send_settings+0x804>)
    984a:	781a      	ldrb	r2, [r3, #0]
    984c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	4413      	add	r3, r2
    9858:	b2da      	uxtb	r2, r3
    985a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    985e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9862:	701a      	strb	r2, [r3, #0]
    9864:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    986c:	781a      	ldrb	r2, [r3, #0]
    986e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	4413      	add	r3, r2
    987a:	b2da      	uxtb	r2, r3
    987c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9884:	701a      	strb	r2, [r3, #0]
    9886:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    988a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988e:	781b      	ldrb	r3, [r3, #0]
    9890:	3301      	adds	r3, #1
    9892:	b2da      	uxtb	r2, r3
    9894:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    989c:	701a      	strb	r2, [r3, #0]
    989e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	2bff      	cmp	r3, #255	; 0xff
    98aa:	d105      	bne.n	98b8 <send_settings+0x68c>
    98ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b4:	2200      	movs	r2, #0
    98b6:	701a      	strb	r2, [r3, #0]
    98b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	461a      	mov	r2, r3
    98c4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    98c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98cc:	7819      	ldrb	r1, [r3, #0]
    98ce:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	5499      	strb	r1, [r3, r2]
    98d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	3301      	adds	r3, #1
    98e4:	b2da      	uxtb	r2, r3
    98e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    98f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	2bff      	cmp	r3, #255	; 0xff
    98fc:	d105      	bne.n	990a <send_settings+0x6de>
    98fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	2200      	movs	r2, #0
    9908:	701a      	strb	r2, [r3, #0]
    990a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    990e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9912:	781b      	ldrb	r3, [r3, #0]
    9914:	461a      	mov	r2, r3
    9916:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	7819      	ldrb	r1, [r3, #0]
    9920:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	5499      	strb	r1, [r3, r2]
    992a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    992e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	3301      	adds	r3, #1
    9936:	b2da      	uxtb	r2, r3
    9938:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	701a      	strb	r2, [r3, #0]
    9942:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994a:	781b      	ldrb	r3, [r3, #0]
    994c:	2bff      	cmp	r3, #255	; 0xff
    994e:	d105      	bne.n	995c <send_settings+0x730>
    9950:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9958:	2200      	movs	r2, #0
    995a:	701a      	strb	r2, [r3, #0]
    995c:	f242 0339 	movw	r3, #8249	; 0x2039
    9960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9964:	781b      	ldrb	r3, [r3, #0]
    9966:	b2db      	uxtb	r3, r3
    9968:	f003 0310 	and.w	r3, r3, #16
    996c:	2b00      	cmp	r3, #0
    996e:	d15a      	bne.n	9a26 <send_settings+0x7fa>
    9970:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	b2db      	uxtb	r3, r3
    997c:	461a      	mov	r2, r3
    997e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9986:	5c9a      	ldrb	r2, [r3, r2]
    9988:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    998c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9990:	701a      	strb	r2, [r3, #0]
    9992:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    9996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999a:	2200      	movs	r2, #0
    999c:	701a      	strb	r2, [r3, #0]
    999e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    99a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	b2db      	uxtb	r3, r3
    99aa:	3301      	adds	r3, #1
    99ac:	b2da      	uxtb	r2, r3
    99ae:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    99b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b6:	701a      	strb	r2, [r3, #0]
    99b8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    99bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	b2db      	uxtb	r3, r3
    99c4:	2bff      	cmp	r3, #255	; 0xff
    99c6:	d105      	bne.n	99d4 <send_settings+0x7a8>
    99c8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    99cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d0:	2200      	movs	r2, #0
    99d2:	701a      	strb	r2, [r3, #0]
    99d4:	f242 0338 	movw	r3, #8248	; 0x2038
    99d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99dc:	f242 0238 	movw	r2, #8248	; 0x2038
    99e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99e4:	7812      	ldrb	r2, [r2, #0]
    99e6:	b2d2      	uxtb	r2, r2
    99e8:	f042 0201 	orr.w	r2, r2, #1
    99ec:	b2d2      	uxtb	r2, r2
    99ee:	701a      	strb	r2, [r3, #0]
    99f0:	f242 0339 	movw	r3, #8249	; 0x2039
    99f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f8:	f242 0239 	movw	r2, #8249	; 0x2039
    99fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9a00:	7812      	ldrb	r2, [r2, #0]
    9a02:	b2d2      	uxtb	r2, r2
    9a04:	f042 0210 	orr.w	r2, r2, #16
    9a08:	b2d2      	uxtb	r2, r2
    9a0a:	701a      	strb	r2, [r3, #0]
    9a0c:	e00b      	b.n	9a26 <send_settings+0x7fa>
    9a0e:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a16:	781b      	ldrb	r3, [r3, #0]
    9a18:	3301      	adds	r3, #1
    9a1a:	b2da      	uxtb	r2, r3
    9a1c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    9a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a24:	701a      	strb	r2, [r3, #0]
}
    9a26:	46bd      	mov	sp, r7
    9a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a2c:	4770      	bx	lr
    9a2e:	bf00      	nop
    9a30:	2004bedf 	.word	0x2004bedf

00009a34 <send_desired>:
void send_desired(void){  //1000ms
    9a34:	b480      	push	{r7}
    9a36:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9a38:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    9a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a40:	781a      	ldrb	r2, [r3, #0]
    9a42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9a46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9a4a:	fba3 1302 	umull	r1, r3, r3, r2
    9a4e:	08d9      	lsrs	r1, r3, #3
    9a50:	460b      	mov	r3, r1
    9a52:	009b      	lsls	r3, r3, #2
    9a54:	440b      	add	r3, r1
    9a56:	005b      	lsls	r3, r3, #1
    9a58:	1ad3      	subs	r3, r2, r3
    9a5a:	b2db      	uxtb	r3, r3
    9a5c:	2b03      	cmp	r3, #3
    9a5e:	f040 8712 	bne.w	a886 <send_desired+0xe52>
    9a62:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6a:	781a      	ldrb	r2, [r3, #0]
    9a6c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a74:	781b      	ldrb	r3, [r3, #0]
    9a76:	b2db      	uxtb	r3, r3
    9a78:	429a      	cmp	r2, r3
    9a7a:	d313      	bcc.n	9aa4 <send_desired+0x70>
    9a7c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	781b      	ldrb	r3, [r3, #0]
    9a86:	b2db      	uxtb	r3, r3
    9a88:	461a      	mov	r2, r3
    9a8a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a92:	781b      	ldrb	r3, [r3, #0]
    9a94:	1ad3      	subs	r3, r2, r3
    9a96:	33ff      	adds	r3, #255	; 0xff
    9a98:	2b18      	cmp	r3, #24
    9a9a:	bfd4      	ite	le
    9a9c:	2300      	movle	r3, #0
    9a9e:	2301      	movgt	r3, #1
    9aa0:	b2db      	uxtb	r3, r3
    9aa2:	e011      	b.n	9ac8 <send_desired+0x94>
    9aa4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    9aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	b2db      	uxtb	r3, r3
    9ab0:	461a      	mov	r2, r3
    9ab2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aba:	781b      	ldrb	r3, [r3, #0]
    9abc:	1ad3      	subs	r3, r2, r3
    9abe:	2b18      	cmp	r3, #24
    9ac0:	bfd4      	ite	le
    9ac2:	2300      	movle	r3, #0
    9ac4:	2301      	movgt	r3, #1
    9ac6:	b2db      	uxtb	r3, r3
    9ac8:	2b00      	cmp	r3, #0
    9aca:	f000 86d0 	beq.w	a86e <send_desired+0xe3a>
    9ace:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	461a      	mov	r2, r3
    9ada:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae2:	2105      	movs	r1, #5
    9ae4:	5499      	strb	r1, [r3, r2]
    9ae6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	3301      	adds	r3, #1
    9af2:	b2da      	uxtb	r2, r3
    9af4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afc:	701a      	strb	r2, [r3, #0]
    9afe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b06:	781b      	ldrb	r3, [r3, #0]
    9b08:	2bff      	cmp	r3, #255	; 0xff
    9b0a:	d105      	bne.n	9b18 <send_desired+0xe4>
    9b0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b14:	2200      	movs	r2, #0
    9b16:	701a      	strb	r2, [r3, #0]
    9b18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	461a      	mov	r2, r3
    9b24:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b2c:	2112      	movs	r1, #18
    9b2e:	5499      	strb	r1, [r3, r2]
    9b30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	3301      	adds	r3, #1
    9b3c:	b2da      	uxtb	r2, r3
    9b3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	2bff      	cmp	r3, #255	; 0xff
    9b54:	d105      	bne.n	9b62 <send_desired+0x12e>
    9b56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5e:	2200      	movs	r2, #0
    9b60:	701a      	strb	r2, [r3, #0]
    9b62:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6a:	2212      	movs	r2, #18
    9b6c:	701a      	strb	r2, [r3, #0]
    9b6e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b76:	2212      	movs	r2, #18
    9b78:	701a      	strb	r2, [r3, #0]
    9b7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	461a      	mov	r2, r3
    9b86:	f24c 2314 	movw	r3, #49684	; 0xc214
    9b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8e:	7819      	ldrb	r1, [r3, #0]
    9b90:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b98:	5499      	strb	r1, [r3, r2]
    9b9a:	f24c 2314 	movw	r3, #49684	; 0xc214
    9b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba2:	781a      	ldrb	r2, [r3, #0]
    9ba4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bac:	781b      	ldrb	r3, [r3, #0]
    9bae:	4413      	add	r3, r2
    9bb0:	b2da      	uxtb	r2, r3
    9bb2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bba:	701a      	strb	r2, [r3, #0]
    9bbc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc4:	781a      	ldrb	r2, [r3, #0]
    9bc6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	4413      	add	r3, r2
    9bd2:	b2da      	uxtb	r2, r3
    9bd4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bdc:	701a      	strb	r2, [r3, #0]
    9bde:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	3301      	adds	r3, #1
    9bea:	b2da      	uxtb	r2, r3
    9bec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf4:	701a      	strb	r2, [r3, #0]
    9bf6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfe:	781b      	ldrb	r3, [r3, #0]
    9c00:	2bff      	cmp	r3, #255	; 0xff
    9c02:	d105      	bne.n	9c10 <send_desired+0x1dc>
    9c04:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0c:	2200      	movs	r2, #0
    9c0e:	701a      	strb	r2, [r3, #0]
    9c10:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c18:	781b      	ldrb	r3, [r3, #0]
    9c1a:	461a      	mov	r2, r3
    9c1c:	f24c 2314 	movw	r3, #49684	; 0xc214
    9c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c24:	7859      	ldrb	r1, [r3, #1]
    9c26:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2e:	5499      	strb	r1, [r3, r2]
    9c30:	4bd1      	ldr	r3, [pc, #836]	; (9f78 <send_desired+0x544>)
    9c32:	781a      	ldrb	r2, [r3, #0]
    9c34:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3c:	781b      	ldrb	r3, [r3, #0]
    9c3e:	4413      	add	r3, r2
    9c40:	b2da      	uxtb	r2, r3
    9c42:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4a:	701a      	strb	r2, [r3, #0]
    9c4c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c54:	781a      	ldrb	r2, [r3, #0]
    9c56:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5e:	781b      	ldrb	r3, [r3, #0]
    9c60:	4413      	add	r3, r2
    9c62:	b2da      	uxtb	r2, r3
    9c64:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6c:	701a      	strb	r2, [r3, #0]
    9c6e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c76:	781b      	ldrb	r3, [r3, #0]
    9c78:	3301      	adds	r3, #1
    9c7a:	b2da      	uxtb	r2, r3
    9c7c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c84:	701a      	strb	r2, [r3, #0]
    9c86:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8e:	781b      	ldrb	r3, [r3, #0]
    9c90:	2bff      	cmp	r3, #255	; 0xff
    9c92:	d105      	bne.n	9ca0 <send_desired+0x26c>
    9c94:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9c:	2200      	movs	r2, #0
    9c9e:	701a      	strb	r2, [r3, #0]
    9ca0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca8:	781b      	ldrb	r3, [r3, #0]
    9caa:	461a      	mov	r2, r3
    9cac:	f24c 2314 	movw	r3, #49684	; 0xc214
    9cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb4:	7899      	ldrb	r1, [r3, #2]
    9cb6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbe:	5499      	strb	r1, [r3, r2]
    9cc0:	4bae      	ldr	r3, [pc, #696]	; (9f7c <send_desired+0x548>)
    9cc2:	781a      	ldrb	r2, [r3, #0]
    9cc4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ccc:	781b      	ldrb	r3, [r3, #0]
    9cce:	4413      	add	r3, r2
    9cd0:	b2da      	uxtb	r2, r3
    9cd2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cda:	701a      	strb	r2, [r3, #0]
    9cdc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce4:	781a      	ldrb	r2, [r3, #0]
    9ce6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	4413      	add	r3, r2
    9cf2:	b2da      	uxtb	r2, r3
    9cf4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfc:	701a      	strb	r2, [r3, #0]
    9cfe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	3301      	adds	r3, #1
    9d0a:	b2da      	uxtb	r2, r3
    9d0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	701a      	strb	r2, [r3, #0]
    9d16:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	2bff      	cmp	r3, #255	; 0xff
    9d22:	d105      	bne.n	9d30 <send_desired+0x2fc>
    9d24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	2200      	movs	r2, #0
    9d2e:	701a      	strb	r2, [r3, #0]
    9d30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d38:	781b      	ldrb	r3, [r3, #0]
    9d3a:	461a      	mov	r2, r3
    9d3c:	f24c 2314 	movw	r3, #49684	; 0xc214
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	78d9      	ldrb	r1, [r3, #3]
    9d46:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	5499      	strb	r1, [r3, r2]
    9d50:	4b8b      	ldr	r3, [pc, #556]	; (9f80 <send_desired+0x54c>)
    9d52:	781a      	ldrb	r2, [r3, #0]
    9d54:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5c:	781b      	ldrb	r3, [r3, #0]
    9d5e:	4413      	add	r3, r2
    9d60:	b2da      	uxtb	r2, r3
    9d62:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6a:	701a      	strb	r2, [r3, #0]
    9d6c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d74:	781a      	ldrb	r2, [r3, #0]
    9d76:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d7e:	781b      	ldrb	r3, [r3, #0]
    9d80:	4413      	add	r3, r2
    9d82:	b2da      	uxtb	r2, r3
    9d84:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	701a      	strb	r2, [r3, #0]
    9d8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	3301      	adds	r3, #1
    9d9a:	b2da      	uxtb	r2, r3
    9d9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	701a      	strb	r2, [r3, #0]
    9da6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	2bff      	cmp	r3, #255	; 0xff
    9db2:	d105      	bne.n	9dc0 <send_desired+0x38c>
    9db4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	2200      	movs	r2, #0
    9dbe:	701a      	strb	r2, [r3, #0]
    9dc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	461a      	mov	r2, r3
    9dcc:	f24c 2318 	movw	r3, #49688	; 0xc218
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	7819      	ldrb	r1, [r3, #0]
    9dd6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	5499      	strb	r1, [r3, r2]
    9de0:	f24c 2318 	movw	r3, #49688	; 0xc218
    9de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de8:	781a      	ldrb	r2, [r3, #0]
    9dea:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	4413      	add	r3, r2
    9df6:	b2da      	uxtb	r2, r3
    9df8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e00:	701a      	strb	r2, [r3, #0]
    9e02:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0a:	781a      	ldrb	r2, [r3, #0]
    9e0c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	4413      	add	r3, r2
    9e18:	b2da      	uxtb	r2, r3
    9e1a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e22:	701a      	strb	r2, [r3, #0]
    9e24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	3301      	adds	r3, #1
    9e30:	b2da      	uxtb	r2, r3
    9e32:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	701a      	strb	r2, [r3, #0]
    9e3c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	781b      	ldrb	r3, [r3, #0]
    9e46:	2bff      	cmp	r3, #255	; 0xff
    9e48:	d105      	bne.n	9e56 <send_desired+0x422>
    9e4a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e52:	2200      	movs	r2, #0
    9e54:	701a      	strb	r2, [r3, #0]
    9e56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	461a      	mov	r2, r3
    9e62:	f24c 2318 	movw	r3, #49688	; 0xc218
    9e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6a:	7859      	ldrb	r1, [r3, #1]
    9e6c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	5499      	strb	r1, [r3, r2]
    9e76:	4b43      	ldr	r3, [pc, #268]	; (9f84 <send_desired+0x550>)
    9e78:	781a      	ldrb	r2, [r3, #0]
    9e7a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	781b      	ldrb	r3, [r3, #0]
    9e84:	4413      	add	r3, r2
    9e86:	b2da      	uxtb	r2, r3
    9e88:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e90:	701a      	strb	r2, [r3, #0]
    9e92:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9a:	781a      	ldrb	r2, [r3, #0]
    9e9c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	4413      	add	r3, r2
    9ea8:	b2da      	uxtb	r2, r3
    9eaa:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb2:	701a      	strb	r2, [r3, #0]
    9eb4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	3301      	adds	r3, #1
    9ec0:	b2da      	uxtb	r2, r3
    9ec2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eca:	701a      	strb	r2, [r3, #0]
    9ecc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed4:	781b      	ldrb	r3, [r3, #0]
    9ed6:	2bff      	cmp	r3, #255	; 0xff
    9ed8:	d105      	bne.n	9ee6 <send_desired+0x4b2>
    9eda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee2:	2200      	movs	r2, #0
    9ee4:	701a      	strb	r2, [r3, #0]
    9ee6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eee:	781b      	ldrb	r3, [r3, #0]
    9ef0:	461a      	mov	r2, r3
    9ef2:	f24c 2318 	movw	r3, #49688	; 0xc218
    9ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efa:	7899      	ldrb	r1, [r3, #2]
    9efc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	5499      	strb	r1, [r3, r2]
    9f06:	4b20      	ldr	r3, [pc, #128]	; (9f88 <send_desired+0x554>)
    9f08:	781a      	ldrb	r2, [r3, #0]
    9f0a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f12:	781b      	ldrb	r3, [r3, #0]
    9f14:	4413      	add	r3, r2
    9f16:	b2da      	uxtb	r2, r3
    9f18:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f20:	701a      	strb	r2, [r3, #0]
    9f22:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2a:	781a      	ldrb	r2, [r3, #0]
    9f2c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	781b      	ldrb	r3, [r3, #0]
    9f36:	4413      	add	r3, r2
    9f38:	b2da      	uxtb	r2, r3
    9f3a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f42:	701a      	strb	r2, [r3, #0]
    9f44:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	3301      	adds	r3, #1
    9f50:	b2da      	uxtb	r2, r3
    9f52:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5a:	701a      	strb	r2, [r3, #0]
    9f5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	781b      	ldrb	r3, [r3, #0]
    9f66:	2bff      	cmp	r3, #255	; 0xff
    9f68:	d110      	bne.n	9f8c <send_desired+0x558>
    9f6a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f72:	2200      	movs	r2, #0
    9f74:	701a      	strb	r2, [r3, #0]
    9f76:	e009      	b.n	9f8c <send_desired+0x558>
    9f78:	2004c215 	.word	0x2004c215
    9f7c:	2004c216 	.word	0x2004c216
    9f80:	2004c217 	.word	0x2004c217
    9f84:	2004c219 	.word	0x2004c219
    9f88:	2004c21a 	.word	0x2004c21a
    9f8c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	461a      	mov	r2, r3
    9f98:	f24c 2318 	movw	r3, #49688	; 0xc218
    9f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa0:	78d9      	ldrb	r1, [r3, #3]
    9fa2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9faa:	5499      	strb	r1, [r3, r2]
    9fac:	4bd3      	ldr	r3, [pc, #844]	; (a2fc <send_desired+0x8c8>)
    9fae:	781a      	ldrb	r2, [r3, #0]
    9fb0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb8:	781b      	ldrb	r3, [r3, #0]
    9fba:	4413      	add	r3, r2
    9fbc:	b2da      	uxtb	r2, r3
    9fbe:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc6:	701a      	strb	r2, [r3, #0]
    9fc8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd0:	781a      	ldrb	r2, [r3, #0]
    9fd2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    9fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fda:	781b      	ldrb	r3, [r3, #0]
    9fdc:	4413      	add	r3, r2
    9fde:	b2da      	uxtb	r2, r3
    9fe0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    9fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe8:	701a      	strb	r2, [r3, #0]
    9fea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff2:	781b      	ldrb	r3, [r3, #0]
    9ff4:	3301      	adds	r3, #1
    9ff6:	b2da      	uxtb	r2, r3
    9ff8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    9ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a000:	701a      	strb	r2, [r3, #0]
    a002:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	2bff      	cmp	r3, #255	; 0xff
    a00e:	d105      	bne.n	a01c <send_desired+0x5e8>
    a010:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a018:	2200      	movs	r2, #0
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	461a      	mov	r2, r3
    a028:	f24c 2360 	movw	r3, #49760	; 0xc260
    a02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a030:	7819      	ldrb	r1, [r3, #0]
    a032:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03a:	5499      	strb	r1, [r3, r2]
    a03c:	f24c 2360 	movw	r3, #49760	; 0xc260
    a040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a044:	781a      	ldrb	r2, [r3, #0]
    a046:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	4413      	add	r3, r2
    a052:	b2da      	uxtb	r2, r3
    a054:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05c:	701a      	strb	r2, [r3, #0]
    a05e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a066:	781a      	ldrb	r2, [r3, #0]
    a068:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a070:	781b      	ldrb	r3, [r3, #0]
    a072:	4413      	add	r3, r2
    a074:	b2da      	uxtb	r2, r3
    a076:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07e:	701a      	strb	r2, [r3, #0]
    a080:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	3301      	adds	r3, #1
    a08c:	b2da      	uxtb	r2, r3
    a08e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	701a      	strb	r2, [r3, #0]
    a098:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	2bff      	cmp	r3, #255	; 0xff
    a0a4:	d105      	bne.n	a0b2 <send_desired+0x67e>
    a0a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ae:	2200      	movs	r2, #0
    a0b0:	701a      	strb	r2, [r3, #0]
    a0b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	461a      	mov	r2, r3
    a0be:	f24c 2360 	movw	r3, #49760	; 0xc260
    a0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c6:	7859      	ldrb	r1, [r3, #1]
    a0c8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	5499      	strb	r1, [r3, r2]
    a0d2:	4b8b      	ldr	r3, [pc, #556]	; (a300 <send_desired+0x8cc>)
    a0d4:	781a      	ldrb	r2, [r3, #0]
    a0d6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	4413      	add	r3, r2
    a0e2:	b2da      	uxtb	r2, r3
    a0e4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ec:	701a      	strb	r2, [r3, #0]
    a0ee:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f6:	781a      	ldrb	r2, [r3, #0]
    a0f8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	4413      	add	r3, r2
    a104:	b2da      	uxtb	r2, r3
    a106:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10e:	701a      	strb	r2, [r3, #0]
    a110:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a118:	781b      	ldrb	r3, [r3, #0]
    a11a:	3301      	adds	r3, #1
    a11c:	b2da      	uxtb	r2, r3
    a11e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a126:	701a      	strb	r2, [r3, #0]
    a128:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a130:	781b      	ldrb	r3, [r3, #0]
    a132:	2bff      	cmp	r3, #255	; 0xff
    a134:	d105      	bne.n	a142 <send_desired+0x70e>
    a136:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13e:	2200      	movs	r2, #0
    a140:	701a      	strb	r2, [r3, #0]
    a142:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	461a      	mov	r2, r3
    a14e:	f24c 2360 	movw	r3, #49760	; 0xc260
    a152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a156:	7899      	ldrb	r1, [r3, #2]
    a158:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a160:	5499      	strb	r1, [r3, r2]
    a162:	4b68      	ldr	r3, [pc, #416]	; (a304 <send_desired+0x8d0>)
    a164:	781a      	ldrb	r2, [r3, #0]
    a166:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16e:	781b      	ldrb	r3, [r3, #0]
    a170:	4413      	add	r3, r2
    a172:	b2da      	uxtb	r2, r3
    a174:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17c:	701a      	strb	r2, [r3, #0]
    a17e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a186:	781a      	ldrb	r2, [r3, #0]
    a188:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a190:	781b      	ldrb	r3, [r3, #0]
    a192:	4413      	add	r3, r2
    a194:	b2da      	uxtb	r2, r3
    a196:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19e:	701a      	strb	r2, [r3, #0]
    a1a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	3301      	adds	r3, #1
    a1ac:	b2da      	uxtb	r2, r3
    a1ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	701a      	strb	r2, [r3, #0]
    a1b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c0:	781b      	ldrb	r3, [r3, #0]
    a1c2:	2bff      	cmp	r3, #255	; 0xff
    a1c4:	d105      	bne.n	a1d2 <send_desired+0x79e>
    a1c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ce:	2200      	movs	r2, #0
    a1d0:	701a      	strb	r2, [r3, #0]
    a1d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1da:	781b      	ldrb	r3, [r3, #0]
    a1dc:	461a      	mov	r2, r3
    a1de:	f24c 2360 	movw	r3, #49760	; 0xc260
    a1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e6:	78d9      	ldrb	r1, [r3, #3]
    a1e8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	5499      	strb	r1, [r3, r2]
    a1f2:	4b45      	ldr	r3, [pc, #276]	; (a308 <send_desired+0x8d4>)
    a1f4:	781a      	ldrb	r2, [r3, #0]
    a1f6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fe:	781b      	ldrb	r3, [r3, #0]
    a200:	4413      	add	r3, r2
    a202:	b2da      	uxtb	r2, r3
    a204:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20c:	701a      	strb	r2, [r3, #0]
    a20e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a216:	781a      	ldrb	r2, [r3, #0]
    a218:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a220:	781b      	ldrb	r3, [r3, #0]
    a222:	4413      	add	r3, r2
    a224:	b2da      	uxtb	r2, r3
    a226:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	701a      	strb	r2, [r3, #0]
    a230:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	3301      	adds	r3, #1
    a23c:	b2da      	uxtb	r2, r3
    a23e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	701a      	strb	r2, [r3, #0]
    a248:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a250:	781b      	ldrb	r3, [r3, #0]
    a252:	2bff      	cmp	r3, #255	; 0xff
    a254:	d105      	bne.n	a262 <send_desired+0x82e>
    a256:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	2200      	movs	r2, #0
    a260:	701a      	strb	r2, [r3, #0]
    a262:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26a:	781b      	ldrb	r3, [r3, #0]
    a26c:	461a      	mov	r2, r3
    a26e:	f24c 2364 	movw	r3, #49764	; 0xc264
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	7819      	ldrb	r1, [r3, #0]
    a278:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	5499      	strb	r1, [r3, r2]
    a282:	f24c 2364 	movw	r3, #49764	; 0xc264
    a286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28a:	781a      	ldrb	r2, [r3, #0]
    a28c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a294:	781b      	ldrb	r3, [r3, #0]
    a296:	4413      	add	r3, r2
    a298:	b2da      	uxtb	r2, r3
    a29a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a2:	701a      	strb	r2, [r3, #0]
    a2a4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ac:	781a      	ldrb	r2, [r3, #0]
    a2ae:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	781b      	ldrb	r3, [r3, #0]
    a2b8:	4413      	add	r3, r2
    a2ba:	b2da      	uxtb	r2, r3
    a2bc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c4:	701a      	strb	r2, [r3, #0]
    a2c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	3301      	adds	r3, #1
    a2d2:	b2da      	uxtb	r2, r3
    a2d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	701a      	strb	r2, [r3, #0]
    a2de:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781b      	ldrb	r3, [r3, #0]
    a2e8:	2bff      	cmp	r3, #255	; 0xff
    a2ea:	d10f      	bne.n	a30c <send_desired+0x8d8>
    a2ec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f4:	2200      	movs	r2, #0
    a2f6:	701a      	strb	r2, [r3, #0]
    a2f8:	e008      	b.n	a30c <send_desired+0x8d8>
    a2fa:	bf00      	nop
    a2fc:	2004c21b 	.word	0x2004c21b
    a300:	2004c261 	.word	0x2004c261
    a304:	2004c262 	.word	0x2004c262
    a308:	2004c263 	.word	0x2004c263
    a30c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	461a      	mov	r2, r3
    a318:	f24c 2364 	movw	r3, #49764	; 0xc264
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	7859      	ldrb	r1, [r3, #1]
    a322:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32a:	5499      	strb	r1, [r3, r2]
    a32c:	4bd1      	ldr	r3, [pc, #836]	; (a674 <send_desired+0xc40>)
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a338:	781b      	ldrb	r3, [r3, #0]
    a33a:	4413      	add	r3, r2
    a33c:	b2da      	uxtb	r2, r3
    a33e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	701a      	strb	r2, [r3, #0]
    a348:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	781a      	ldrb	r2, [r3, #0]
    a352:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35a:	781b      	ldrb	r3, [r3, #0]
    a35c:	4413      	add	r3, r2
    a35e:	b2da      	uxtb	r2, r3
    a360:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a368:	701a      	strb	r2, [r3, #0]
    a36a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	3301      	adds	r3, #1
    a376:	b2da      	uxtb	r2, r3
    a378:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a380:	701a      	strb	r2, [r3, #0]
    a382:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	2bff      	cmp	r3, #255	; 0xff
    a38e:	d105      	bne.n	a39c <send_desired+0x968>
    a390:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a398:	2200      	movs	r2, #0
    a39a:	701a      	strb	r2, [r3, #0]
    a39c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a4:	781b      	ldrb	r3, [r3, #0]
    a3a6:	461a      	mov	r2, r3
    a3a8:	f24c 2364 	movw	r3, #49764	; 0xc264
    a3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b0:	7899      	ldrb	r1, [r3, #2]
    a3b2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ba:	5499      	strb	r1, [r3, r2]
    a3bc:	4bae      	ldr	r3, [pc, #696]	; (a678 <send_desired+0xc44>)
    a3be:	781a      	ldrb	r2, [r3, #0]
    a3c0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	4413      	add	r3, r2
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	701a      	strb	r2, [r3, #0]
    a3d8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	781a      	ldrb	r2, [r3, #0]
    a3e2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	4413      	add	r3, r2
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	3301      	adds	r3, #1
    a406:	b2da      	uxtb	r2, r3
    a408:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a410:	701a      	strb	r2, [r3, #0]
    a412:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	2bff      	cmp	r3, #255	; 0xff
    a41e:	d105      	bne.n	a42c <send_desired+0x9f8>
    a420:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a428:	2200      	movs	r2, #0
    a42a:	701a      	strb	r2, [r3, #0]
    a42c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a434:	781b      	ldrb	r3, [r3, #0]
    a436:	461a      	mov	r2, r3
    a438:	f24c 2364 	movw	r3, #49764	; 0xc264
    a43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a440:	78d9      	ldrb	r1, [r3, #3]
    a442:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44a:	5499      	strb	r1, [r3, r2]
    a44c:	4b8b      	ldr	r3, [pc, #556]	; (a67c <send_desired+0xc48>)
    a44e:	781a      	ldrb	r2, [r3, #0]
    a450:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a458:	781b      	ldrb	r3, [r3, #0]
    a45a:	4413      	add	r3, r2
    a45c:	b2da      	uxtb	r2, r3
    a45e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	701a      	strb	r2, [r3, #0]
    a468:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	781a      	ldrb	r2, [r3, #0]
    a472:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	4413      	add	r3, r2
    a47e:	b2da      	uxtb	r2, r3
    a480:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a488:	701a      	strb	r2, [r3, #0]
    a48a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	3301      	adds	r3, #1
    a496:	b2da      	uxtb	r2, r3
    a498:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a0:	701a      	strb	r2, [r3, #0]
    a4a2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4aa:	781b      	ldrb	r3, [r3, #0]
    a4ac:	2bff      	cmp	r3, #255	; 0xff
    a4ae:	d105      	bne.n	a4bc <send_desired+0xa88>
    a4b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b8:	2200      	movs	r2, #0
    a4ba:	701a      	strb	r2, [r3, #0]
    a4bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c4:	781b      	ldrb	r3, [r3, #0]
    a4c6:	461a      	mov	r2, r3
    a4c8:	f240 4324 	movw	r3, #1060	; 0x424
    a4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d0:	7819      	ldrb	r1, [r3, #0]
    a4d2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4da:	5499      	strb	r1, [r3, r2]
    a4dc:	f240 4324 	movw	r3, #1060	; 0x424
    a4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e4:	781a      	ldrb	r2, [r3, #0]
    a4e6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ee:	781b      	ldrb	r3, [r3, #0]
    a4f0:	4413      	add	r3, r2
    a4f2:	b2da      	uxtb	r2, r3
    a4f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fc:	701a      	strb	r2, [r3, #0]
    a4fe:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a506:	781a      	ldrb	r2, [r3, #0]
    a508:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	4413      	add	r3, r2
    a514:	b2da      	uxtb	r2, r3
    a516:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	3301      	adds	r3, #1
    a52c:	b2da      	uxtb	r2, r3
    a52e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	701a      	strb	r2, [r3, #0]
    a538:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781b      	ldrb	r3, [r3, #0]
    a542:	2bff      	cmp	r3, #255	; 0xff
    a544:	d105      	bne.n	a552 <send_desired+0xb1e>
    a546:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54e:	2200      	movs	r2, #0
    a550:	701a      	strb	r2, [r3, #0]
    a552:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55a:	781b      	ldrb	r3, [r3, #0]
    a55c:	461a      	mov	r2, r3
    a55e:	f240 4324 	movw	r3, #1060	; 0x424
    a562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a566:	7859      	ldrb	r1, [r3, #1]
    a568:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	5499      	strb	r1, [r3, r2]
    a572:	4b43      	ldr	r3, [pc, #268]	; (a680 <send_desired+0xc4c>)
    a574:	781a      	ldrb	r2, [r3, #0]
    a576:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	4413      	add	r3, r2
    a582:	b2da      	uxtb	r2, r3
    a584:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58c:	701a      	strb	r2, [r3, #0]
    a58e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a596:	781a      	ldrb	r2, [r3, #0]
    a598:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	4413      	add	r3, r2
    a5a4:	b2da      	uxtb	r2, r3
    a5a6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	3301      	adds	r3, #1
    a5bc:	b2da      	uxtb	r2, r3
    a5be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d0:	781b      	ldrb	r3, [r3, #0]
    a5d2:	2bff      	cmp	r3, #255	; 0xff
    a5d4:	d105      	bne.n	a5e2 <send_desired+0xbae>
    a5d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5de:	2200      	movs	r2, #0
    a5e0:	701a      	strb	r2, [r3, #0]
    a5e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	461a      	mov	r2, r3
    a5ee:	f240 4324 	movw	r3, #1060	; 0x424
    a5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f6:	7899      	ldrb	r1, [r3, #2]
    a5f8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a600:	5499      	strb	r1, [r3, r2]
    a602:	4b20      	ldr	r3, [pc, #128]	; (a684 <send_desired+0xc50>)
    a604:	781a      	ldrb	r2, [r3, #0]
    a606:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	4413      	add	r3, r2
    a612:	b2da      	uxtb	r2, r3
    a614:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61c:	701a      	strb	r2, [r3, #0]
    a61e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a626:	781a      	ldrb	r2, [r3, #0]
    a628:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a630:	781b      	ldrb	r3, [r3, #0]
    a632:	4413      	add	r3, r2
    a634:	b2da      	uxtb	r2, r3
    a636:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	3301      	adds	r3, #1
    a64c:	b2da      	uxtb	r2, r3
    a64e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a656:	701a      	strb	r2, [r3, #0]
    a658:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	781b      	ldrb	r3, [r3, #0]
    a662:	2bff      	cmp	r3, #255	; 0xff
    a664:	d110      	bne.n	a688 <send_desired+0xc54>
    a666:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66e:	2200      	movs	r2, #0
    a670:	701a      	strb	r2, [r3, #0]
    a672:	e009      	b.n	a688 <send_desired+0xc54>
    a674:	2004c265 	.word	0x2004c265
    a678:	2004c266 	.word	0x2004c266
    a67c:	2004c267 	.word	0x2004c267
    a680:	20000425 	.word	0x20000425
    a684:	20000426 	.word	0x20000426
    a688:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	781b      	ldrb	r3, [r3, #0]
    a692:	461a      	mov	r2, r3
    a694:	f240 4324 	movw	r3, #1060	; 0x424
    a698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69c:	78d9      	ldrb	r1, [r3, #3]
    a69e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a6:	5499      	strb	r1, [r3, r2]
    a6a8:	4b79      	ldr	r3, [pc, #484]	; (a890 <send_desired+0xe5c>)
    a6aa:	781a      	ldrb	r2, [r3, #0]
    a6ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	4413      	add	r3, r2
    a6b8:	b2da      	uxtb	r2, r3
    a6ba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c2:	701a      	strb	r2, [r3, #0]
    a6c4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6cc:	781a      	ldrb	r2, [r3, #0]
    a6ce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	4413      	add	r3, r2
    a6da:	b2da      	uxtb	r2, r3
    a6dc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e4:	701a      	strb	r2, [r3, #0]
    a6e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	3301      	adds	r3, #1
    a6f2:	b2da      	uxtb	r2, r3
    a6f4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fc:	701a      	strb	r2, [r3, #0]
    a6fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	2bff      	cmp	r3, #255	; 0xff
    a70a:	d105      	bne.n	a718 <send_desired+0xce4>
    a70c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a714:	2200      	movs	r2, #0
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	461a      	mov	r2, r3
    a724:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72c:	7819      	ldrb	r1, [r3, #0]
    a72e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a736:	5499      	strb	r1, [r3, r2]
    a738:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a740:	781b      	ldrb	r3, [r3, #0]
    a742:	3301      	adds	r3, #1
    a744:	b2da      	uxtb	r2, r3
    a746:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74e:	701a      	strb	r2, [r3, #0]
    a750:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a758:	781b      	ldrb	r3, [r3, #0]
    a75a:	2bff      	cmp	r3, #255	; 0xff
    a75c:	d105      	bne.n	a76a <send_desired+0xd36>
    a75e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a766:	2200      	movs	r2, #0
    a768:	701a      	strb	r2, [r3, #0]
    a76a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	461a      	mov	r2, r3
    a776:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77e:	7819      	ldrb	r1, [r3, #0]
    a780:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a788:	5499      	strb	r1, [r3, r2]
    a78a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a792:	781b      	ldrb	r3, [r3, #0]
    a794:	3301      	adds	r3, #1
    a796:	b2da      	uxtb	r2, r3
    a798:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a0:	701a      	strb	r2, [r3, #0]
    a7a2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7aa:	781b      	ldrb	r3, [r3, #0]
    a7ac:	2bff      	cmp	r3, #255	; 0xff
    a7ae:	d105      	bne.n	a7bc <send_desired+0xd88>
    a7b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b8:	2200      	movs	r2, #0
    a7ba:	701a      	strb	r2, [r3, #0]
    a7bc:	f242 0339 	movw	r3, #8249	; 0x2039
    a7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c4:	781b      	ldrb	r3, [r3, #0]
    a7c6:	b2db      	uxtb	r3, r3
    a7c8:	f003 0310 	and.w	r3, r3, #16
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d15a      	bne.n	a886 <send_desired+0xe52>
    a7d0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	b2db      	uxtb	r3, r3
    a7dc:	461a      	mov	r2, r3
    a7de:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e6:	5c9a      	ldrb	r2, [r3, r2]
    a7e8:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	701a      	strb	r2, [r3, #0]
    a7f2:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    a7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fa:	2200      	movs	r2, #0
    a7fc:	701a      	strb	r2, [r3, #0]
    a7fe:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	b2db      	uxtb	r3, r3
    a80a:	3301      	adds	r3, #1
    a80c:	b2da      	uxtb	r2, r3
    a80e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a816:	701a      	strb	r2, [r3, #0]
    a818:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	b2db      	uxtb	r3, r3
    a824:	2bff      	cmp	r3, #255	; 0xff
    a826:	d105      	bne.n	a834 <send_desired+0xe00>
    a828:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a830:	2200      	movs	r2, #0
    a832:	701a      	strb	r2, [r3, #0]
    a834:	f242 0338 	movw	r3, #8248	; 0x2038
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	f242 0238 	movw	r2, #8248	; 0x2038
    a840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a844:	7812      	ldrb	r2, [r2, #0]
    a846:	b2d2      	uxtb	r2, r2
    a848:	f042 0201 	orr.w	r2, r2, #1
    a84c:	b2d2      	uxtb	r2, r2
    a84e:	701a      	strb	r2, [r3, #0]
    a850:	f242 0339 	movw	r3, #8249	; 0x2039
    a854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a858:	f242 0239 	movw	r2, #8249	; 0x2039
    a85c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a860:	7812      	ldrb	r2, [r2, #0]
    a862:	b2d2      	uxtb	r2, r2
    a864:	f042 0210 	orr.w	r2, r2, #16
    a868:	b2d2      	uxtb	r2, r2
    a86a:	701a      	strb	r2, [r3, #0]
    a86c:	e00b      	b.n	a886 <send_desired+0xe52>
    a86e:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    a872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a876:	781b      	ldrb	r3, [r3, #0]
    a878:	3301      	adds	r3, #1
    a87a:	b2da      	uxtb	r2, r3
    a87c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    a880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a884:	701a      	strb	r2, [r3, #0]
}
    a886:	46bd      	mov	sp, r7
    a888:	f85d 7b04 	ldr.w	r7, [sp], #4
    a88c:	4770      	bx	lr
    a88e:	bf00      	nop
    a890:	20000427 	.word	0x20000427

0000a894 <send_bat>:
void send_bat(void){  //2000ms
    a894:	b480      	push	{r7}
    a896:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a898:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    a89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a0:	781a      	ldrb	r2, [r3, #0]
    a8a2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a8a6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a8aa:	fba3 1302 	umull	r1, r3, r3, r2
    a8ae:	0919      	lsrs	r1, r3, #4
    a8b0:	460b      	mov	r3, r1
    a8b2:	009b      	lsls	r3, r3, #2
    a8b4:	440b      	add	r3, r1
    a8b6:	009b      	lsls	r3, r3, #2
    a8b8:	1ad3      	subs	r3, r2, r3
    a8ba:	b2db      	uxtb	r3, r3
    a8bc:	2b08      	cmp	r3, #8
    a8be:	f040 839a 	bne.w	aff6 <send_bat+0x762>
    a8c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ca:	781a      	ldrb	r2, [r3, #0]
    a8cc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d4:	781b      	ldrb	r3, [r3, #0]
    a8d6:	b2db      	uxtb	r3, r3
    a8d8:	429a      	cmp	r2, r3
    a8da:	d313      	bcc.n	a904 <send_bat+0x70>
    a8dc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e4:	781b      	ldrb	r3, [r3, #0]
    a8e6:	b2db      	uxtb	r3, r3
    a8e8:	461a      	mov	r2, r3
    a8ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f2:	781b      	ldrb	r3, [r3, #0]
    a8f4:	1ad3      	subs	r3, r2, r3
    a8f6:	33ff      	adds	r3, #255	; 0xff
    a8f8:	2b0c      	cmp	r3, #12
    a8fa:	bfd4      	ite	le
    a8fc:	2300      	movle	r3, #0
    a8fe:	2301      	movgt	r3, #1
    a900:	b2db      	uxtb	r3, r3
    a902:	e011      	b.n	a928 <send_bat+0x94>
    a904:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    a908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90c:	781b      	ldrb	r3, [r3, #0]
    a90e:	b2db      	uxtb	r3, r3
    a910:	461a      	mov	r2, r3
    a912:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91a:	781b      	ldrb	r3, [r3, #0]
    a91c:	1ad3      	subs	r3, r2, r3
    a91e:	2b0c      	cmp	r3, #12
    a920:	bfd4      	ite	le
    a922:	2300      	movle	r3, #0
    a924:	2301      	movgt	r3, #1
    a926:	b2db      	uxtb	r3, r3
    a928:	2b00      	cmp	r3, #0
    a92a:	f000 8358 	beq.w	afde <send_bat+0x74a>
    a92e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a936:	781b      	ldrb	r3, [r3, #0]
    a938:	461a      	mov	r2, r3
    a93a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a942:	2105      	movs	r1, #5
    a944:	5499      	strb	r1, [r3, r2]
    a946:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94e:	781b      	ldrb	r3, [r3, #0]
    a950:	3301      	adds	r3, #1
    a952:	b2da      	uxtb	r2, r3
    a954:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95c:	701a      	strb	r2, [r3, #0]
    a95e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	2bff      	cmp	r3, #255	; 0xff
    a96a:	d105      	bne.n	a978 <send_bat+0xe4>
    a96c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a974:	2200      	movs	r2, #0
    a976:	701a      	strb	r2, [r3, #0]
    a978:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a980:	781b      	ldrb	r3, [r3, #0]
    a982:	461a      	mov	r2, r3
    a984:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98c:	210c      	movs	r1, #12
    a98e:	5499      	strb	r1, [r3, r2]
    a990:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	3301      	adds	r3, #1
    a99c:	b2da      	uxtb	r2, r3
    a99e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a6:	701a      	strb	r2, [r3, #0]
    a9a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b0:	781b      	ldrb	r3, [r3, #0]
    a9b2:	2bff      	cmp	r3, #255	; 0xff
    a9b4:	d105      	bne.n	a9c2 <send_bat+0x12e>
    a9b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9be:	2200      	movs	r2, #0
    a9c0:	701a      	strb	r2, [r3, #0]
    a9c2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ca:	220c      	movs	r2, #12
    a9cc:	701a      	strb	r2, [r3, #0]
    a9ce:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    a9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d6:	220c      	movs	r2, #12
    a9d8:	701a      	strb	r2, [r3, #0]
    a9da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    a9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e2:	781b      	ldrb	r3, [r3, #0]
    a9e4:	461a      	mov	r2, r3
    a9e6:	f64b 63d2 	movw	r3, #48850	; 0xbed2
    a9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ee:	7819      	ldrb	r1, [r3, #0]
    a9f0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    a9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f8:	5499      	strb	r1, [r3, r2]
    a9fa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    a9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa02:	781a      	ldrb	r2, [r3, #0]
    aa04:	f64b 63d2 	movw	r3, #48850	; 0xbed2
    aa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa0c:	781b      	ldrb	r3, [r3, #0]
    aa0e:	4413      	add	r3, r2
    aa10:	b2da      	uxtb	r2, r3
    aa12:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    aa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1a:	701a      	strb	r2, [r3, #0]
    aa1c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    aa20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa24:	781a      	ldrb	r2, [r3, #0]
    aa26:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    aa2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2e:	781b      	ldrb	r3, [r3, #0]
    aa30:	4413      	add	r3, r2
    aa32:	b2da      	uxtb	r2, r3
    aa34:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    aa38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	3301      	adds	r3, #1
    aa4a:	b2da      	uxtb	r2, r3
    aa4c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aa50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa54:	701a      	strb	r2, [r3, #0]
    aa56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aa5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5e:	781b      	ldrb	r3, [r3, #0]
    aa60:	2bff      	cmp	r3, #255	; 0xff
    aa62:	d105      	bne.n	aa70 <send_bat+0x1dc>
    aa64:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	2200      	movs	r2, #0
    aa6e:	701a      	strb	r2, [r3, #0]
    aa70:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa78:	781b      	ldrb	r3, [r3, #0]
    aa7a:	461a      	mov	r2, r3
    aa7c:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
    aa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa84:	7819      	ldrb	r1, [r3, #0]
    aa86:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	5499      	strb	r1, [r3, r2]
    aa90:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
    aa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa98:	781a      	ldrb	r2, [r3, #0]
    aa9a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    aa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa2:	781b      	ldrb	r3, [r3, #0]
    aaa4:	4413      	add	r3, r2
    aaa6:	b2da      	uxtb	r2, r3
    aaa8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    aaac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab0:	701a      	strb	r2, [r3, #0]
    aab2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	781a      	ldrb	r2, [r3, #0]
    aabc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	781b      	ldrb	r3, [r3, #0]
    aac6:	4413      	add	r3, r2
    aac8:	b2da      	uxtb	r2, r3
    aaca:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	3301      	adds	r3, #1
    aae0:	b2da      	uxtb	r2, r3
    aae2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaea:	701a      	strb	r2, [r3, #0]
    aaec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	2bff      	cmp	r3, #255	; 0xff
    aaf8:	d105      	bne.n	ab06 <send_bat+0x272>
    aafa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab02:	2200      	movs	r2, #0
    ab04:	701a      	strb	r2, [r3, #0]
    ab06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0e:	781b      	ldrb	r3, [r3, #0]
    ab10:	461a      	mov	r2, r3
    ab12:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
    ab16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1a:	7859      	ldrb	r1, [r3, #1]
    ab1c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	5499      	strb	r1, [r3, r2]
    ab26:	4bd5      	ldr	r3, [pc, #852]	; (ae7c <send_bat+0x5e8>)
    ab28:	781a      	ldrb	r2, [r3, #0]
    ab2a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ab2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	4413      	add	r3, r2
    ab36:	b2da      	uxtb	r2, r3
    ab38:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ab3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab40:	701a      	strb	r2, [r3, #0]
    ab42:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ab46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4a:	781a      	ldrb	r2, [r3, #0]
    ab4c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ab50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab54:	781b      	ldrb	r3, [r3, #0]
    ab56:	4413      	add	r3, r2
    ab58:	b2da      	uxtb	r2, r3
    ab5a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ab5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab62:	701a      	strb	r2, [r3, #0]
    ab64:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6c:	781b      	ldrb	r3, [r3, #0]
    ab6e:	3301      	adds	r3, #1
    ab70:	b2da      	uxtb	r2, r3
    ab72:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7a:	701a      	strb	r2, [r3, #0]
    ab7c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	2bff      	cmp	r3, #255	; 0xff
    ab88:	d105      	bne.n	ab96 <send_bat+0x302>
    ab8a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	2200      	movs	r2, #0
    ab94:	701a      	strb	r2, [r3, #0]
    ab96:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ab9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	461a      	mov	r2, r3
    aba2:	f64b 63d5 	movw	r3, #48853	; 0xbed5
    aba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abaa:	7819      	ldrb	r1, [r3, #0]
    abac:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    abb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb4:	5499      	strb	r1, [r3, r2]
    abb6:	f64b 63d5 	movw	r3, #48853	; 0xbed5
    abba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbe:	781a      	ldrb	r2, [r3, #0]
    abc0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    abc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	4413      	add	r3, r2
    abcc:	b2da      	uxtb	r2, r3
    abce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    abd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd6:	701a      	strb	r2, [r3, #0]
    abd8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    abdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe0:	781a      	ldrb	r2, [r3, #0]
    abe2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    abe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	4413      	add	r3, r2
    abee:	b2da      	uxtb	r2, r3
    abf0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    abf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf8:	701a      	strb	r2, [r3, #0]
    abfa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    abfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac02:	781b      	ldrb	r3, [r3, #0]
    ac04:	3301      	adds	r3, #1
    ac06:	b2da      	uxtb	r2, r3
    ac08:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	701a      	strb	r2, [r3, #0]
    ac12:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	2bff      	cmp	r3, #255	; 0xff
    ac1e:	d105      	bne.n	ac2c <send_bat+0x398>
    ac20:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ac24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac28:	2200      	movs	r2, #0
    ac2a:	701a      	strb	r2, [r3, #0]
    ac2c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ac30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	461a      	mov	r2, r3
    ac38:	f24c 2356 	movw	r3, #49750	; 0xc256
    ac3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac40:	7819      	ldrb	r1, [r3, #0]
    ac42:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ac46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4a:	5499      	strb	r1, [r3, r2]
    ac4c:	f24c 2356 	movw	r3, #49750	; 0xc256
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	781a      	ldrb	r2, [r3, #0]
    ac56:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	4413      	add	r3, r2
    ac62:	b2da      	uxtb	r2, r3
    ac64:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ac68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6c:	701a      	strb	r2, [r3, #0]
    ac6e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	781a      	ldrb	r2, [r3, #0]
    ac78:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ac7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac80:	781b      	ldrb	r3, [r3, #0]
    ac82:	4413      	add	r3, r2
    ac84:	b2da      	uxtb	r2, r3
    ac86:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ac94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	3301      	adds	r3, #1
    ac9c:	b2da      	uxtb	r2, r3
    ac9e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	701a      	strb	r2, [r3, #0]
    aca8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	2bff      	cmp	r3, #255	; 0xff
    acb4:	d105      	bne.n	acc2 <send_bat+0x42e>
    acb6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    acba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbe:	2200      	movs	r2, #0
    acc0:	701a      	strb	r2, [r3, #0]
    acc2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    acc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acca:	781b      	ldrb	r3, [r3, #0]
    accc:	461a      	mov	r2, r3
    acce:	f24c 2356 	movw	r3, #49750	; 0xc256
    acd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd6:	7859      	ldrb	r1, [r3, #1]
    acd8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    acdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace0:	5499      	strb	r1, [r3, r2]
    ace2:	4b67      	ldr	r3, [pc, #412]	; (ae80 <send_bat+0x5ec>)
    ace4:	781a      	ldrb	r2, [r3, #0]
    ace6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    acea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acee:	781b      	ldrb	r3, [r3, #0]
    acf0:	4413      	add	r3, r2
    acf2:	b2da      	uxtb	r2, r3
    acf4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    acf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfc:	701a      	strb	r2, [r3, #0]
    acfe:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ad02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad06:	781a      	ldrb	r2, [r3, #0]
    ad08:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ad0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad10:	781b      	ldrb	r3, [r3, #0]
    ad12:	4413      	add	r3, r2
    ad14:	b2da      	uxtb	r2, r3
    ad16:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ad1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1e:	701a      	strb	r2, [r3, #0]
    ad20:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ad24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad28:	781b      	ldrb	r3, [r3, #0]
    ad2a:	3301      	adds	r3, #1
    ad2c:	b2da      	uxtb	r2, r3
    ad2e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ad32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad36:	701a      	strb	r2, [r3, #0]
    ad38:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	2bff      	cmp	r3, #255	; 0xff
    ad44:	d105      	bne.n	ad52 <send_bat+0x4be>
    ad46:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ad4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4e:	2200      	movs	r2, #0
    ad50:	701a      	strb	r2, [r3, #0]
    ad52:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ad56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5a:	781b      	ldrb	r3, [r3, #0]
    ad5c:	461a      	mov	r2, r3
    ad5e:	f24c 2354 	movw	r3, #49748	; 0xc254
    ad62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad66:	7819      	ldrb	r1, [r3, #0]
    ad68:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ad6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad70:	5499      	strb	r1, [r3, r2]
    ad72:	f24c 2354 	movw	r3, #49748	; 0xc254
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	781a      	ldrb	r2, [r3, #0]
    ad7c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ad80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad84:	781b      	ldrb	r3, [r3, #0]
    ad86:	4413      	add	r3, r2
    ad88:	b2da      	uxtb	r2, r3
    ad8a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ad8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad92:	701a      	strb	r2, [r3, #0]
    ad94:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ad98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9c:	781a      	ldrb	r2, [r3, #0]
    ad9e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ada2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada6:	781b      	ldrb	r3, [r3, #0]
    ada8:	4413      	add	r3, r2
    adaa:	b2da      	uxtb	r2, r3
    adac:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    adb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb4:	701a      	strb	r2, [r3, #0]
    adb6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	3301      	adds	r3, #1
    adc2:	b2da      	uxtb	r2, r3
    adc4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	701a      	strb	r2, [r3, #0]
    adce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	2bff      	cmp	r3, #255	; 0xff
    adda:	d105      	bne.n	ade8 <send_bat+0x554>
    addc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ade0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade4:	2200      	movs	r2, #0
    ade6:	701a      	strb	r2, [r3, #0]
    ade8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    adec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf0:	781b      	ldrb	r3, [r3, #0]
    adf2:	461a      	mov	r2, r3
    adf4:	f24c 2354 	movw	r3, #49748	; 0xc254
    adf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfc:	7859      	ldrb	r1, [r3, #1]
    adfe:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	5499      	strb	r1, [r3, r2]
    ae08:	4b1e      	ldr	r3, [pc, #120]	; (ae84 <send_bat+0x5f0>)
    ae0a:	781a      	ldrb	r2, [r3, #0]
    ae0c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ae10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae14:	781b      	ldrb	r3, [r3, #0]
    ae16:	4413      	add	r3, r2
    ae18:	b2da      	uxtb	r2, r3
    ae1a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ae1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae22:	701a      	strb	r2, [r3, #0]
    ae24:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ae28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2c:	781a      	ldrb	r2, [r3, #0]
    ae2e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	781b      	ldrb	r3, [r3, #0]
    ae38:	4413      	add	r3, r2
    ae3a:	b2da      	uxtb	r2, r3
    ae3c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	701a      	strb	r2, [r3, #0]
    ae46:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	3301      	adds	r3, #1
    ae52:	b2da      	uxtb	r2, r3
    ae54:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ae58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5c:	701a      	strb	r2, [r3, #0]
    ae5e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	2bff      	cmp	r3, #255	; 0xff
    ae6a:	d10d      	bne.n	ae88 <send_bat+0x5f4>
    ae6c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ae70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae74:	2200      	movs	r2, #0
    ae76:	701a      	strb	r2, [r3, #0]
    ae78:	e006      	b.n	ae88 <send_bat+0x5f4>
    ae7a:	bf00      	nop
    ae7c:	2004c4cd 	.word	0x2004c4cd
    ae80:	2004c257 	.word	0x2004c257
    ae84:	2004c255 	.word	0x2004c255
    ae88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ae8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	461a      	mov	r2, r3
    ae94:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ae98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9c:	7819      	ldrb	r1, [r3, #0]
    ae9e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	5499      	strb	r1, [r3, r2]
    aea8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	3301      	adds	r3, #1
    aeb4:	b2da      	uxtb	r2, r3
    aeb6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebe:	701a      	strb	r2, [r3, #0]
    aec0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec8:	781b      	ldrb	r3, [r3, #0]
    aeca:	2bff      	cmp	r3, #255	; 0xff
    aecc:	d105      	bne.n	aeda <send_bat+0x646>
    aece:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	2200      	movs	r2, #0
    aed8:	701a      	strb	r2, [r3, #0]
    aeda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	461a      	mov	r2, r3
    aee6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	7819      	ldrb	r1, [r3, #0]
    aef0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    aef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef8:	5499      	strb	r1, [r3, r2]
    aefa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    aefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af02:	781b      	ldrb	r3, [r3, #0]
    af04:	3301      	adds	r3, #1
    af06:	b2da      	uxtb	r2, r3
    af08:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    af0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af10:	701a      	strb	r2, [r3, #0]
    af12:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    af16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1a:	781b      	ldrb	r3, [r3, #0]
    af1c:	2bff      	cmp	r3, #255	; 0xff
    af1e:	d105      	bne.n	af2c <send_bat+0x698>
    af20:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    af24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af28:	2200      	movs	r2, #0
    af2a:	701a      	strb	r2, [r3, #0]
    af2c:	f242 0339 	movw	r3, #8249	; 0x2039
    af30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af34:	781b      	ldrb	r3, [r3, #0]
    af36:	b2db      	uxtb	r3, r3
    af38:	f003 0310 	and.w	r3, r3, #16
    af3c:	2b00      	cmp	r3, #0
    af3e:	d15a      	bne.n	aff6 <send_bat+0x762>
    af40:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    af44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	b2db      	uxtb	r3, r3
    af4c:	461a      	mov	r2, r3
    af4e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	5c9a      	ldrb	r2, [r3, r2]
    af58:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	701a      	strb	r2, [r3, #0]
    af62:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    af66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6a:	2200      	movs	r2, #0
    af6c:	701a      	strb	r2, [r3, #0]
    af6e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    af72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af76:	781b      	ldrb	r3, [r3, #0]
    af78:	b2db      	uxtb	r3, r3
    af7a:	3301      	adds	r3, #1
    af7c:	b2da      	uxtb	r2, r3
    af7e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	701a      	strb	r2, [r3, #0]
    af88:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    af8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	b2db      	uxtb	r3, r3
    af94:	2bff      	cmp	r3, #255	; 0xff
    af96:	d105      	bne.n	afa4 <send_bat+0x710>
    af98:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    af9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa0:	2200      	movs	r2, #0
    afa2:	701a      	strb	r2, [r3, #0]
    afa4:	f242 0338 	movw	r3, #8248	; 0x2038
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	f242 0238 	movw	r2, #8248	; 0x2038
    afb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    afb4:	7812      	ldrb	r2, [r2, #0]
    afb6:	b2d2      	uxtb	r2, r2
    afb8:	f042 0201 	orr.w	r2, r2, #1
    afbc:	b2d2      	uxtb	r2, r2
    afbe:	701a      	strb	r2, [r3, #0]
    afc0:	f242 0339 	movw	r3, #8249	; 0x2039
    afc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc8:	f242 0239 	movw	r2, #8249	; 0x2039
    afcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    afd0:	7812      	ldrb	r2, [r2, #0]
    afd2:	b2d2      	uxtb	r2, r2
    afd4:	f042 0210 	orr.w	r2, r2, #16
    afd8:	b2d2      	uxtb	r2, r2
    afda:	701a      	strb	r2, [r3, #0]
    afdc:	e00b      	b.n	aff6 <send_bat+0x762>
    afde:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    afe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe6:	781b      	ldrb	r3, [r3, #0]
    afe8:	3301      	adds	r3, #1
    afea:	b2da      	uxtb	r2, r3
    afec:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    aff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff4:	701a      	strb	r2, [r3, #0]
}
    aff6:	46bd      	mov	sp, r7
    aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    affc:	4770      	bx	lr
    affe:	bf00      	nop

0000b000 <send_climb>:
void send_climb(void){  //2000ms
    b000:	b480      	push	{r7}
    b002:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b004:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    b008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00c:	781a      	ldrb	r2, [r3, #0]
    b00e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b012:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b016:	fba3 1302 	umull	r1, r3, r3, r2
    b01a:	0919      	lsrs	r1, r3, #4
    b01c:	460b      	mov	r3, r1
    b01e:	009b      	lsls	r3, r3, #2
    b020:	440b      	add	r3, r1
    b022:	009b      	lsls	r3, r3, #2
    b024:	1ad3      	subs	r3, r2, r3
    b026:	b2db      	uxtb	r3, r3
    b028:	2b12      	cmp	r3, #18
    b02a:	f040 8554 	bne.w	bad6 <send_climb+0xad6>
    b02e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b036:	781a      	ldrb	r2, [r3, #0]
    b038:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    b03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	b2db      	uxtb	r3, r3
    b044:	429a      	cmp	r2, r3
    b046:	d313      	bcc.n	b070 <send_climb+0x70>
    b048:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    b04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b050:	781b      	ldrb	r3, [r3, #0]
    b052:	b2db      	uxtb	r3, r3
    b054:	461a      	mov	r2, r3
    b056:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	781b      	ldrb	r3, [r3, #0]
    b060:	1ad3      	subs	r3, r2, r3
    b062:	33ff      	adds	r3, #255	; 0xff
    b064:	2b12      	cmp	r3, #18
    b066:	bfd4      	ite	le
    b068:	2300      	movle	r3, #0
    b06a:	2301      	movgt	r3, #1
    b06c:	b2db      	uxtb	r3, r3
    b06e:	e011      	b.n	b094 <send_climb+0x94>
    b070:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    b074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b078:	781b      	ldrb	r3, [r3, #0]
    b07a:	b2db      	uxtb	r3, r3
    b07c:	461a      	mov	r2, r3
    b07e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	1ad3      	subs	r3, r2, r3
    b08a:	2b12      	cmp	r3, #18
    b08c:	bfd4      	ite	le
    b08e:	2300      	movle	r3, #0
    b090:	2301      	movgt	r3, #1
    b092:	b2db      	uxtb	r3, r3
    b094:	2b00      	cmp	r3, #0
    b096:	f000 8512 	beq.w	babe <send_climb+0xabe>
    b09a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	461a      	mov	r2, r3
    b0a6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ae:	2105      	movs	r1, #5
    b0b0:	5499      	strb	r1, [r3, r2]
    b0b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ba:	781b      	ldrb	r3, [r3, #0]
    b0bc:	3301      	adds	r3, #1
    b0be:	b2da      	uxtb	r2, r3
    b0c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c8:	701a      	strb	r2, [r3, #0]
    b0ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	2bff      	cmp	r3, #255	; 0xff
    b0d6:	d105      	bne.n	b0e4 <send_climb+0xe4>
    b0d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e0:	2200      	movs	r2, #0
    b0e2:	701a      	strb	r2, [r3, #0]
    b0e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ec:	781b      	ldrb	r3, [r3, #0]
    b0ee:	461a      	mov	r2, r3
    b0f0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f8:	210e      	movs	r1, #14
    b0fa:	5499      	strb	r1, [r3, r2]
    b0fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b104:	781b      	ldrb	r3, [r3, #0]
    b106:	3301      	adds	r3, #1
    b108:	b2da      	uxtb	r2, r3
    b10a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b112:	701a      	strb	r2, [r3, #0]
    b114:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	2bff      	cmp	r3, #255	; 0xff
    b120:	d105      	bne.n	b12e <send_climb+0x12e>
    b122:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12a:	2200      	movs	r2, #0
    b12c:	701a      	strb	r2, [r3, #0]
    b12e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b136:	220e      	movs	r2, #14
    b138:	701a      	strb	r2, [r3, #0]
    b13a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b142:	220e      	movs	r2, #14
    b144:	701a      	strb	r2, [r3, #0]
    b146:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14e:	781b      	ldrb	r3, [r3, #0]
    b150:	461a      	mov	r2, r3
    b152:	f24c 231c 	movw	r3, #49692	; 0xc21c
    b156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15a:	7819      	ldrb	r1, [r3, #0]
    b15c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	5499      	strb	r1, [r3, r2]
    b166:	f24c 231c 	movw	r3, #49692	; 0xc21c
    b16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16e:	781a      	ldrb	r2, [r3, #0]
    b170:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b178:	781b      	ldrb	r3, [r3, #0]
    b17a:	4413      	add	r3, r2
    b17c:	b2da      	uxtb	r2, r3
    b17e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b186:	701a      	strb	r2, [r3, #0]
    b188:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b190:	781a      	ldrb	r2, [r3, #0]
    b192:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	4413      	add	r3, r2
    b19e:	b2da      	uxtb	r2, r3
    b1a0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a8:	701a      	strb	r2, [r3, #0]
    b1aa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	3301      	adds	r3, #1
    b1b6:	b2da      	uxtb	r2, r3
    b1b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c0:	701a      	strb	r2, [r3, #0]
    b1c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	2bff      	cmp	r3, #255	; 0xff
    b1ce:	d105      	bne.n	b1dc <send_climb+0x1dc>
    b1d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	2200      	movs	r2, #0
    b1da:	701a      	strb	r2, [r3, #0]
    b1dc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	461a      	mov	r2, r3
    b1e8:	f24c 231c 	movw	r3, #49692	; 0xc21c
    b1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f0:	7859      	ldrb	r1, [r3, #1]
    b1f2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fa:	5499      	strb	r1, [r3, r2]
    b1fc:	4bd3      	ldr	r3, [pc, #844]	; (b54c <send_climb+0x54c>)
    b1fe:	781a      	ldrb	r2, [r3, #0]
    b200:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b208:	781b      	ldrb	r3, [r3, #0]
    b20a:	4413      	add	r3, r2
    b20c:	b2da      	uxtb	r2, r3
    b20e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b216:	701a      	strb	r2, [r3, #0]
    b218:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b220:	781a      	ldrb	r2, [r3, #0]
    b222:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	4413      	add	r3, r2
    b22e:	b2da      	uxtb	r2, r3
    b230:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b238:	701a      	strb	r2, [r3, #0]
    b23a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	3301      	adds	r3, #1
    b246:	b2da      	uxtb	r2, r3
    b248:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	701a      	strb	r2, [r3, #0]
    b252:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2bff      	cmp	r3, #255	; 0xff
    b25e:	d105      	bne.n	b26c <send_climb+0x26c>
    b260:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	461a      	mov	r2, r3
    b278:	f24c 2330 	movw	r3, #49712	; 0xc230
    b27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b280:	7819      	ldrb	r1, [r3, #0]
    b282:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28a:	5499      	strb	r1, [r3, r2]
    b28c:	f24c 2330 	movw	r3, #49712	; 0xc230
    b290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b294:	781a      	ldrb	r2, [r3, #0]
    b296:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29e:	781b      	ldrb	r3, [r3, #0]
    b2a0:	4413      	add	r3, r2
    b2a2:	b2da      	uxtb	r2, r3
    b2a4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ac:	701a      	strb	r2, [r3, #0]
    b2ae:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b6:	781a      	ldrb	r2, [r3, #0]
    b2b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c0:	781b      	ldrb	r3, [r3, #0]
    b2c2:	4413      	add	r3, r2
    b2c4:	b2da      	uxtb	r2, r3
    b2c6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ce:	701a      	strb	r2, [r3, #0]
    b2d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	3301      	adds	r3, #1
    b2dc:	b2da      	uxtb	r2, r3
    b2de:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e6:	701a      	strb	r2, [r3, #0]
    b2e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	781b      	ldrb	r3, [r3, #0]
    b2f2:	2bff      	cmp	r3, #255	; 0xff
    b2f4:	d105      	bne.n	b302 <send_climb+0x302>
    b2f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fe:	2200      	movs	r2, #0
    b300:	701a      	strb	r2, [r3, #0]
    b302:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30a:	781b      	ldrb	r3, [r3, #0]
    b30c:	461a      	mov	r2, r3
    b30e:	f24c 2330 	movw	r3, #49712	; 0xc230
    b312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b316:	7859      	ldrb	r1, [r3, #1]
    b318:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b320:	5499      	strb	r1, [r3, r2]
    b322:	4b8b      	ldr	r3, [pc, #556]	; (b550 <send_climb+0x550>)
    b324:	781a      	ldrb	r2, [r3, #0]
    b326:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32e:	781b      	ldrb	r3, [r3, #0]
    b330:	4413      	add	r3, r2
    b332:	b2da      	uxtb	r2, r3
    b334:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33c:	701a      	strb	r2, [r3, #0]
    b33e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b346:	781a      	ldrb	r2, [r3, #0]
    b348:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b350:	781b      	ldrb	r3, [r3, #0]
    b352:	4413      	add	r3, r2
    b354:	b2da      	uxtb	r2, r3
    b356:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35e:	701a      	strb	r2, [r3, #0]
    b360:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	3301      	adds	r3, #1
    b36c:	b2da      	uxtb	r2, r3
    b36e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b376:	701a      	strb	r2, [r3, #0]
    b378:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	2bff      	cmp	r3, #255	; 0xff
    b384:	d105      	bne.n	b392 <send_climb+0x392>
    b386:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38e:	2200      	movs	r2, #0
    b390:	701a      	strb	r2, [r3, #0]
    b392:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	461a      	mov	r2, r3
    b39e:	f24c 2330 	movw	r3, #49712	; 0xc230
    b3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a6:	7899      	ldrb	r1, [r3, #2]
    b3a8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b0:	5499      	strb	r1, [r3, r2]
    b3b2:	4b68      	ldr	r3, [pc, #416]	; (b554 <send_climb+0x554>)
    b3b4:	781a      	ldrb	r2, [r3, #0]
    b3b6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	781b      	ldrb	r3, [r3, #0]
    b3c0:	4413      	add	r3, r2
    b3c2:	b2da      	uxtb	r2, r3
    b3c4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3cc:	701a      	strb	r2, [r3, #0]
    b3ce:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d6:	781a      	ldrb	r2, [r3, #0]
    b3d8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	4413      	add	r3, r2
    b3e4:	b2da      	uxtb	r2, r3
    b3e6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ee:	701a      	strb	r2, [r3, #0]
    b3f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	3301      	adds	r3, #1
    b3fc:	b2da      	uxtb	r2, r3
    b3fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b406:	701a      	strb	r2, [r3, #0]
    b408:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b410:	781b      	ldrb	r3, [r3, #0]
    b412:	2bff      	cmp	r3, #255	; 0xff
    b414:	d105      	bne.n	b422 <send_climb+0x422>
    b416:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41e:	2200      	movs	r2, #0
    b420:	701a      	strb	r2, [r3, #0]
    b422:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42a:	781b      	ldrb	r3, [r3, #0]
    b42c:	461a      	mov	r2, r3
    b42e:	f24c 2330 	movw	r3, #49712	; 0xc230
    b432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b436:	78d9      	ldrb	r1, [r3, #3]
    b438:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b440:	5499      	strb	r1, [r3, r2]
    b442:	4b45      	ldr	r3, [pc, #276]	; (b558 <send_climb+0x558>)
    b444:	781a      	ldrb	r2, [r3, #0]
    b446:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44e:	781b      	ldrb	r3, [r3, #0]
    b450:	4413      	add	r3, r2
    b452:	b2da      	uxtb	r2, r3
    b454:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45c:	701a      	strb	r2, [r3, #0]
    b45e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b466:	781a      	ldrb	r2, [r3, #0]
    b468:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b470:	781b      	ldrb	r3, [r3, #0]
    b472:	4413      	add	r3, r2
    b474:	b2da      	uxtb	r2, r3
    b476:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47e:	701a      	strb	r2, [r3, #0]
    b480:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	3301      	adds	r3, #1
    b48c:	b2da      	uxtb	r2, r3
    b48e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b496:	701a      	strb	r2, [r3, #0]
    b498:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a0:	781b      	ldrb	r3, [r3, #0]
    b4a2:	2bff      	cmp	r3, #255	; 0xff
    b4a4:	d105      	bne.n	b4b2 <send_climb+0x4b2>
    b4a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	2200      	movs	r2, #0
    b4b0:	701a      	strb	r2, [r3, #0]
    b4b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ba:	781b      	ldrb	r3, [r3, #0]
    b4bc:	461a      	mov	r2, r3
    b4be:	f24c 2338 	movw	r3, #49720	; 0xc238
    b4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c6:	7819      	ldrb	r1, [r3, #0]
    b4c8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d0:	5499      	strb	r1, [r3, r2]
    b4d2:	f24c 2338 	movw	r3, #49720	; 0xc238
    b4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4da:	781a      	ldrb	r2, [r3, #0]
    b4dc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	4413      	add	r3, r2
    b4e8:	b2da      	uxtb	r2, r3
    b4ea:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f2:	701a      	strb	r2, [r3, #0]
    b4f4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fc:	781a      	ldrb	r2, [r3, #0]
    b4fe:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b506:	781b      	ldrb	r3, [r3, #0]
    b508:	4413      	add	r3, r2
    b50a:	b2da      	uxtb	r2, r3
    b50c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b514:	701a      	strb	r2, [r3, #0]
    b516:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	3301      	adds	r3, #1
    b522:	b2da      	uxtb	r2, r3
    b524:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52c:	701a      	strb	r2, [r3, #0]
    b52e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b536:	781b      	ldrb	r3, [r3, #0]
    b538:	2bff      	cmp	r3, #255	; 0xff
    b53a:	d10f      	bne.n	b55c <send_climb+0x55c>
    b53c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b544:	2200      	movs	r2, #0
    b546:	701a      	strb	r2, [r3, #0]
    b548:	e008      	b.n	b55c <send_climb+0x55c>
    b54a:	bf00      	nop
    b54c:	2004c21d 	.word	0x2004c21d
    b550:	2004c231 	.word	0x2004c231
    b554:	2004c232 	.word	0x2004c232
    b558:	2004c233 	.word	0x2004c233
    b55c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b564:	781b      	ldrb	r3, [r3, #0]
    b566:	461a      	mov	r2, r3
    b568:	f24c 2338 	movw	r3, #49720	; 0xc238
    b56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b570:	7859      	ldrb	r1, [r3, #1]
    b572:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57a:	5499      	strb	r1, [r3, r2]
    b57c:	4bd1      	ldr	r3, [pc, #836]	; (b8c4 <send_climb+0x8c4>)
    b57e:	781a      	ldrb	r2, [r3, #0]
    b580:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	4413      	add	r3, r2
    b58c:	b2da      	uxtb	r2, r3
    b58e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	701a      	strb	r2, [r3, #0]
    b598:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	781a      	ldrb	r2, [r3, #0]
    b5a2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	4413      	add	r3, r2
    b5ae:	b2da      	uxtb	r2, r3
    b5b0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b8:	701a      	strb	r2, [r3, #0]
    b5ba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c2:	781b      	ldrb	r3, [r3, #0]
    b5c4:	3301      	adds	r3, #1
    b5c6:	b2da      	uxtb	r2, r3
    b5c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d0:	701a      	strb	r2, [r3, #0]
    b5d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5da:	781b      	ldrb	r3, [r3, #0]
    b5dc:	2bff      	cmp	r3, #255	; 0xff
    b5de:	d105      	bne.n	b5ec <send_climb+0x5ec>
    b5e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e8:	2200      	movs	r2, #0
    b5ea:	701a      	strb	r2, [r3, #0]
    b5ec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f4:	781b      	ldrb	r3, [r3, #0]
    b5f6:	461a      	mov	r2, r3
    b5f8:	f24c 2338 	movw	r3, #49720	; 0xc238
    b5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b600:	7899      	ldrb	r1, [r3, #2]
    b602:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60a:	5499      	strb	r1, [r3, r2]
    b60c:	4bae      	ldr	r3, [pc, #696]	; (b8c8 <send_climb+0x8c8>)
    b60e:	781a      	ldrb	r2, [r3, #0]
    b610:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	4413      	add	r3, r2
    b61c:	b2da      	uxtb	r2, r3
    b61e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b626:	701a      	strb	r2, [r3, #0]
    b628:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b630:	781a      	ldrb	r2, [r3, #0]
    b632:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	4413      	add	r3, r2
    b63e:	b2da      	uxtb	r2, r3
    b640:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b648:	701a      	strb	r2, [r3, #0]
    b64a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	3301      	adds	r3, #1
    b656:	b2da      	uxtb	r2, r3
    b658:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b660:	701a      	strb	r2, [r3, #0]
    b662:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	2bff      	cmp	r3, #255	; 0xff
    b66e:	d105      	bne.n	b67c <send_climb+0x67c>
    b670:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b678:	2200      	movs	r2, #0
    b67a:	701a      	strb	r2, [r3, #0]
    b67c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	461a      	mov	r2, r3
    b688:	f24c 2338 	movw	r3, #49720	; 0xc238
    b68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b690:	78d9      	ldrb	r1, [r3, #3]
    b692:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69a:	5499      	strb	r1, [r3, r2]
    b69c:	4b8b      	ldr	r3, [pc, #556]	; (b8cc <send_climb+0x8cc>)
    b69e:	781a      	ldrb	r2, [r3, #0]
    b6a0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	4413      	add	r3, r2
    b6ac:	b2da      	uxtb	r2, r3
    b6ae:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b6:	701a      	strb	r2, [r3, #0]
    b6b8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c0:	781a      	ldrb	r2, [r3, #0]
    b6c2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	4413      	add	r3, r2
    b6ce:	b2da      	uxtb	r2, r3
    b6d0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d8:	701a      	strb	r2, [r3, #0]
    b6da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e2:	781b      	ldrb	r3, [r3, #0]
    b6e4:	3301      	adds	r3, #1
    b6e6:	b2da      	uxtb	r2, r3
    b6e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f0:	701a      	strb	r2, [r3, #0]
    b6f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fa:	781b      	ldrb	r3, [r3, #0]
    b6fc:	2bff      	cmp	r3, #255	; 0xff
    b6fe:	d105      	bne.n	b70c <send_climb+0x70c>
    b700:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b708:	2200      	movs	r2, #0
    b70a:	701a      	strb	r2, [r3, #0]
    b70c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b714:	781b      	ldrb	r3, [r3, #0]
    b716:	461a      	mov	r2, r3
    b718:	f648 03b0 	movw	r3, #34992	; 0x88b0
    b71c:	f2c0 0301 	movt	r3, #1
    b720:	7819      	ldrb	r1, [r3, #0]
    b722:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72a:	5499      	strb	r1, [r3, r2]
    b72c:	f648 03b0 	movw	r3, #34992	; 0x88b0
    b730:	f2c0 0301 	movt	r3, #1
    b734:	781a      	ldrb	r2, [r3, #0]
    b736:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73e:	781b      	ldrb	r3, [r3, #0]
    b740:	4413      	add	r3, r2
    b742:	b2da      	uxtb	r2, r3
    b744:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74c:	701a      	strb	r2, [r3, #0]
    b74e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b756:	781a      	ldrb	r2, [r3, #0]
    b758:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	4413      	add	r3, r2
    b764:	b2da      	uxtb	r2, r3
    b766:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	3301      	adds	r3, #1
    b77c:	b2da      	uxtb	r2, r3
    b77e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	701a      	strb	r2, [r3, #0]
    b788:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	2bff      	cmp	r3, #255	; 0xff
    b794:	d105      	bne.n	b7a2 <send_climb+0x7a2>
    b796:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	2200      	movs	r2, #0
    b7a0:	701a      	strb	r2, [r3, #0]
    b7a2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	461a      	mov	r2, r3
    b7ae:	f648 03b0 	movw	r3, #34992	; 0x88b0
    b7b2:	f2c0 0301 	movt	r3, #1
    b7b6:	7859      	ldrb	r1, [r3, #1]
    b7b8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	5499      	strb	r1, [r3, r2]
    b7c2:	4b43      	ldr	r3, [pc, #268]	; (b8d0 <send_climb+0x8d0>)
    b7c4:	781a      	ldrb	r2, [r3, #0]
    b7c6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	4413      	add	r3, r2
    b7d2:	b2da      	uxtb	r2, r3
    b7d4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7dc:	701a      	strb	r2, [r3, #0]
    b7de:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	781a      	ldrb	r2, [r3, #0]
    b7e8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f0:	781b      	ldrb	r3, [r3, #0]
    b7f2:	4413      	add	r3, r2
    b7f4:	b2da      	uxtb	r2, r3
    b7f6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	701a      	strb	r2, [r3, #0]
    b800:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	3301      	adds	r3, #1
    b80c:	b2da      	uxtb	r2, r3
    b80e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b816:	701a      	strb	r2, [r3, #0]
    b818:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b820:	781b      	ldrb	r3, [r3, #0]
    b822:	2bff      	cmp	r3, #255	; 0xff
    b824:	d105      	bne.n	b832 <send_climb+0x832>
    b826:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82e:	2200      	movs	r2, #0
    b830:	701a      	strb	r2, [r3, #0]
    b832:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	461a      	mov	r2, r3
    b83e:	f648 03b0 	movw	r3, #34992	; 0x88b0
    b842:	f2c0 0301 	movt	r3, #1
    b846:	7899      	ldrb	r1, [r3, #2]
    b848:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b850:	5499      	strb	r1, [r3, r2]
    b852:	4b20      	ldr	r3, [pc, #128]	; (b8d4 <send_climb+0x8d4>)
    b854:	781a      	ldrb	r2, [r3, #0]
    b856:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	4413      	add	r3, r2
    b862:	b2da      	uxtb	r2, r3
    b864:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86c:	701a      	strb	r2, [r3, #0]
    b86e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b876:	781a      	ldrb	r2, [r3, #0]
    b878:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b880:	781b      	ldrb	r3, [r3, #0]
    b882:	4413      	add	r3, r2
    b884:	b2da      	uxtb	r2, r3
    b886:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88e:	701a      	strb	r2, [r3, #0]
    b890:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	3301      	adds	r3, #1
    b89c:	b2da      	uxtb	r2, r3
    b89e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a6:	701a      	strb	r2, [r3, #0]
    b8a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b0:	781b      	ldrb	r3, [r3, #0]
    b8b2:	2bff      	cmp	r3, #255	; 0xff
    b8b4:	d110      	bne.n	b8d8 <send_climb+0x8d8>
    b8b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8be:	2200      	movs	r2, #0
    b8c0:	701a      	strb	r2, [r3, #0]
    b8c2:	e009      	b.n	b8d8 <send_climb+0x8d8>
    b8c4:	2004c239 	.word	0x2004c239
    b8c8:	2004c23a 	.word	0x2004c23a
    b8cc:	2004c23b 	.word	0x2004c23b
    b8d0:	000188b1 	.word	0x000188b1
    b8d4:	000188b2 	.word	0x000188b2
    b8d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	461a      	mov	r2, r3
    b8e4:	f648 03b0 	movw	r3, #34992	; 0x88b0
    b8e8:	f2c0 0301 	movt	r3, #1
    b8ec:	78d9      	ldrb	r1, [r3, #3]
    b8ee:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f6:	5499      	strb	r1, [r3, r2]
    b8f8:	4b79      	ldr	r3, [pc, #484]	; (bae0 <send_climb+0xae0>)
    b8fa:	781a      	ldrb	r2, [r3, #0]
    b8fc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	4413      	add	r3, r2
    b908:	b2da      	uxtb	r2, r3
    b90a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b912:	701a      	strb	r2, [r3, #0]
    b914:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b91c:	781a      	ldrb	r2, [r3, #0]
    b91e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b926:	781b      	ldrb	r3, [r3, #0]
    b928:	4413      	add	r3, r2
    b92a:	b2da      	uxtb	r2, r3
    b92c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b934:	701a      	strb	r2, [r3, #0]
    b936:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	3301      	adds	r3, #1
    b942:	b2da      	uxtb	r2, r3
    b944:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b94c:	701a      	strb	r2, [r3, #0]
    b94e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b956:	781b      	ldrb	r3, [r3, #0]
    b958:	2bff      	cmp	r3, #255	; 0xff
    b95a:	d105      	bne.n	b968 <send_climb+0x968>
    b95c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b964:	2200      	movs	r2, #0
    b966:	701a      	strb	r2, [r3, #0]
    b968:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	461a      	mov	r2, r3
    b974:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    b978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b97c:	7819      	ldrb	r1, [r3, #0]
    b97e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	5499      	strb	r1, [r3, r2]
    b988:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	3301      	adds	r3, #1
    b994:	b2da      	uxtb	r2, r3
    b996:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	701a      	strb	r2, [r3, #0]
    b9a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	2bff      	cmp	r3, #255	; 0xff
    b9ac:	d105      	bne.n	b9ba <send_climb+0x9ba>
    b9ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b6:	2200      	movs	r2, #0
    b9b8:	701a      	strb	r2, [r3, #0]
    b9ba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	461a      	mov	r2, r3
    b9c6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    b9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ce:	7819      	ldrb	r1, [r3, #0]
    b9d0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    b9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d8:	5499      	strb	r1, [r3, r2]
    b9da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e2:	781b      	ldrb	r3, [r3, #0]
    b9e4:	3301      	adds	r3, #1
    b9e6:	b2da      	uxtb	r2, r3
    b9e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	701a      	strb	r2, [r3, #0]
    b9f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    b9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	2bff      	cmp	r3, #255	; 0xff
    b9fe:	d105      	bne.n	ba0c <send_climb+0xa0c>
    ba00:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	2200      	movs	r2, #0
    ba0a:	701a      	strb	r2, [r3, #0]
    ba0c:	f242 0339 	movw	r3, #8249	; 0x2039
    ba10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba14:	781b      	ldrb	r3, [r3, #0]
    ba16:	b2db      	uxtb	r3, r3
    ba18:	f003 0310 	and.w	r3, r3, #16
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d15a      	bne.n	bad6 <send_climb+0xad6>
    ba20:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ba24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	b2db      	uxtb	r3, r3
    ba2c:	461a      	mov	r2, r3
    ba2e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ba32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba36:	5c9a      	ldrb	r2, [r3, r2]
    ba38:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	701a      	strb	r2, [r3, #0]
    ba42:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    ba46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4a:	2200      	movs	r2, #0
    ba4c:	701a      	strb	r2, [r3, #0]
    ba4e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	b2db      	uxtb	r3, r3
    ba5a:	3301      	adds	r3, #1
    ba5c:	b2da      	uxtb	r2, r3
    ba5e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ba62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba66:	701a      	strb	r2, [r3, #0]
    ba68:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ba6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba70:	781b      	ldrb	r3, [r3, #0]
    ba72:	b2db      	uxtb	r3, r3
    ba74:	2bff      	cmp	r3, #255	; 0xff
    ba76:	d105      	bne.n	ba84 <send_climb+0xa84>
    ba78:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ba7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba80:	2200      	movs	r2, #0
    ba82:	701a      	strb	r2, [r3, #0]
    ba84:	f242 0338 	movw	r3, #8248	; 0x2038
    ba88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8c:	f242 0238 	movw	r2, #8248	; 0x2038
    ba90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba94:	7812      	ldrb	r2, [r2, #0]
    ba96:	b2d2      	uxtb	r2, r2
    ba98:	f042 0201 	orr.w	r2, r2, #1
    ba9c:	b2d2      	uxtb	r2, r2
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f242 0339 	movw	r3, #8249	; 0x2039
    baa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa8:	f242 0239 	movw	r2, #8249	; 0x2039
    baac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bab0:	7812      	ldrb	r2, [r2, #0]
    bab2:	b2d2      	uxtb	r2, r2
    bab4:	f042 0210 	orr.w	r2, r2, #16
    bab8:	b2d2      	uxtb	r2, r2
    baba:	701a      	strb	r2, [r3, #0]
    babc:	e00b      	b.n	bad6 <send_climb+0xad6>
    babe:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	3301      	adds	r3, #1
    baca:	b2da      	uxtb	r2, r3
    bacc:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    bad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad4:	701a      	strb	r2, [r3, #0]
}
    bad6:	46bd      	mov	sp, r7
    bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    badc:	4770      	bx	lr
    bade:	bf00      	nop
    bae0:	000188b3 	.word	0x000188b3

0000bae4 <send_mode>:
void send_mode(void){  //5000ms
    bae4:	b480      	push	{r7}
    bae6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bae8:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    baec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf0:	781a      	ldrb	r2, [r3, #0]
    baf2:	f248 531f 	movw	r3, #34079	; 0x851f
    baf6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bafa:	fba3 1302 	umull	r1, r3, r3, r2
    bafe:	091b      	lsrs	r3, r3, #4
    bb00:	2132      	movs	r1, #50	; 0x32
    bb02:	fb01 f303 	mul.w	r3, r1, r3
    bb06:	1ad3      	subs	r3, r2, r3
    bb08:	b2db      	uxtb	r3, r3
    bb0a:	2b09      	cmp	r3, #9
    bb0c:	f040 82ba 	bne.w	c084 <send_mode+0x5a0>
    bb10:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	781a      	ldrb	r2, [r3, #0]
    bb1a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    bb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	b2db      	uxtb	r3, r3
    bb26:	429a      	cmp	r2, r3
    bb28:	d313      	bcc.n	bb52 <send_mode+0x6e>
    bb2a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    bb2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb32:	781b      	ldrb	r3, [r3, #0]
    bb34:	b2db      	uxtb	r3, r3
    bb36:	461a      	mov	r2, r3
    bb38:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	1ad3      	subs	r3, r2, r3
    bb44:	33ff      	adds	r3, #255	; 0xff
    bb46:	2b09      	cmp	r3, #9
    bb48:	bfd4      	ite	le
    bb4a:	2300      	movle	r3, #0
    bb4c:	2301      	movgt	r3, #1
    bb4e:	b2db      	uxtb	r3, r3
    bb50:	e011      	b.n	bb76 <send_mode+0x92>
    bb52:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    bb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5a:	781b      	ldrb	r3, [r3, #0]
    bb5c:	b2db      	uxtb	r3, r3
    bb5e:	461a      	mov	r2, r3
    bb60:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	781b      	ldrb	r3, [r3, #0]
    bb6a:	1ad3      	subs	r3, r2, r3
    bb6c:	2b09      	cmp	r3, #9
    bb6e:	bfd4      	ite	le
    bb70:	2300      	movle	r3, #0
    bb72:	2301      	movgt	r3, #1
    bb74:	b2db      	uxtb	r3, r3
    bb76:	2b00      	cmp	r3, #0
    bb78:	f000 8278 	beq.w	c06c <send_mode+0x588>
    bb7c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	461a      	mov	r2, r3
    bb88:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb90:	2105      	movs	r1, #5
    bb92:	5499      	strb	r1, [r3, r2]
    bb94:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	3301      	adds	r3, #1
    bba0:	b2da      	uxtb	r2, r3
    bba2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbaa:	701a      	strb	r2, [r3, #0]
    bbac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb4:	781b      	ldrb	r3, [r3, #0]
    bbb6:	2bff      	cmp	r3, #255	; 0xff
    bbb8:	d105      	bne.n	bbc6 <send_mode+0xe2>
    bbba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc2:	2200      	movs	r2, #0
    bbc4:	701a      	strb	r2, [r3, #0]
    bbc6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbce:	781b      	ldrb	r3, [r3, #0]
    bbd0:	461a      	mov	r2, r3
    bbd2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbda:	210b      	movs	r1, #11
    bbdc:	5499      	strb	r1, [r3, r2]
    bbde:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe6:	781b      	ldrb	r3, [r3, #0]
    bbe8:	3301      	adds	r3, #1
    bbea:	b2da      	uxtb	r2, r3
    bbec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf4:	701a      	strb	r2, [r3, #0]
    bbf6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	2bff      	cmp	r3, #255	; 0xff
    bc02:	d105      	bne.n	bc10 <send_mode+0x12c>
    bc04:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc0c:	2200      	movs	r2, #0
    bc0e:	701a      	strb	r2, [r3, #0]
    bc10:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc18:	220b      	movs	r2, #11
    bc1a:	701a      	strb	r2, [r3, #0]
    bc1c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc24:	220b      	movs	r2, #11
    bc26:	701a      	strb	r2, [r3, #0]
    bc28:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc30:	781b      	ldrb	r3, [r3, #0]
    bc32:	461a      	mov	r2, r3
    bc34:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    bc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc3c:	7819      	ldrb	r1, [r3, #0]
    bc3e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc46:	5499      	strb	r1, [r3, r2]
    bc48:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc50:	781a      	ldrb	r2, [r3, #0]
    bc52:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    bc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5a:	781b      	ldrb	r3, [r3, #0]
    bc5c:	4413      	add	r3, r2
    bc5e:	b2da      	uxtb	r2, r3
    bc60:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc68:	701a      	strb	r2, [r3, #0]
    bc6a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc72:	781a      	ldrb	r2, [r3, #0]
    bc74:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7c:	781b      	ldrb	r3, [r3, #0]
    bc7e:	4413      	add	r3, r2
    bc80:	b2da      	uxtb	r2, r3
    bc82:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bc86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8a:	701a      	strb	r2, [r3, #0]
    bc8c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc94:	781b      	ldrb	r3, [r3, #0]
    bc96:	3301      	adds	r3, #1
    bc98:	b2da      	uxtb	r2, r3
    bc9a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca2:	701a      	strb	r2, [r3, #0]
    bca4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcac:	781b      	ldrb	r3, [r3, #0]
    bcae:	2bff      	cmp	r3, #255	; 0xff
    bcb0:	d105      	bne.n	bcbe <send_mode+0x1da>
    bcb2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcba:	2200      	movs	r2, #0
    bcbc:	701a      	strb	r2, [r3, #0]
    bcbe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	461a      	mov	r2, r3
    bcca:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    bcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd2:	7819      	ldrb	r1, [r3, #0]
    bcd4:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcdc:	5499      	strb	r1, [r3, r2]
    bcde:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce6:	781a      	ldrb	r2, [r3, #0]
    bce8:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    bcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	4413      	add	r3, r2
    bcf4:	b2da      	uxtb	r2, r3
    bcf6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfe:	701a      	strb	r2, [r3, #0]
    bd00:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	781a      	ldrb	r2, [r3, #0]
    bd0a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	4413      	add	r3, r2
    bd16:	b2da      	uxtb	r2, r3
    bd18:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd20:	701a      	strb	r2, [r3, #0]
    bd22:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2a:	781b      	ldrb	r3, [r3, #0]
    bd2c:	3301      	adds	r3, #1
    bd2e:	b2da      	uxtb	r2, r3
    bd30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	701a      	strb	r2, [r3, #0]
    bd3a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	2bff      	cmp	r3, #255	; 0xff
    bd46:	d105      	bne.n	bd54 <send_mode+0x270>
    bd48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd50:	2200      	movs	r2, #0
    bd52:	701a      	strb	r2, [r3, #0]
    bd54:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5c:	781b      	ldrb	r3, [r3, #0]
    bd5e:	461a      	mov	r2, r3
    bd60:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    bd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd68:	7819      	ldrb	r1, [r3, #0]
    bd6a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd72:	5499      	strb	r1, [r3, r2]
    bd74:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7c:	781a      	ldrb	r2, [r3, #0]
    bd7e:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    bd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd86:	781b      	ldrb	r3, [r3, #0]
    bd88:	4413      	add	r3, r2
    bd8a:	b2da      	uxtb	r2, r3
    bd8c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd94:	701a      	strb	r2, [r3, #0]
    bd96:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9e:	781a      	ldrb	r2, [r3, #0]
    bda0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda8:	781b      	ldrb	r3, [r3, #0]
    bdaa:	4413      	add	r3, r2
    bdac:	b2da      	uxtb	r2, r3
    bdae:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bdb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb6:	701a      	strb	r2, [r3, #0]
    bdb8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bdbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc0:	781b      	ldrb	r3, [r3, #0]
    bdc2:	3301      	adds	r3, #1
    bdc4:	b2da      	uxtb	r2, r3
    bdc6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdce:	701a      	strb	r2, [r3, #0]
    bdd0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	2bff      	cmp	r3, #255	; 0xff
    bddc:	d105      	bne.n	bdea <send_mode+0x306>
    bdde:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde6:	2200      	movs	r2, #0
    bde8:	701a      	strb	r2, [r3, #0]
    bdea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	461a      	mov	r2, r3
    bdf6:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    bdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfe:	7819      	ldrb	r1, [r3, #0]
    be00:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	5499      	strb	r1, [r3, r2]
    be0a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    be0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be12:	781a      	ldrb	r2, [r3, #0]
    be14:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    be18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1c:	781b      	ldrb	r3, [r3, #0]
    be1e:	4413      	add	r3, r2
    be20:	b2da      	uxtb	r2, r3
    be22:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    be26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2a:	701a      	strb	r2, [r3, #0]
    be2c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    be30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be34:	781a      	ldrb	r2, [r3, #0]
    be36:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    be3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	4413      	add	r3, r2
    be42:	b2da      	uxtb	r2, r3
    be44:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    be48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4c:	701a      	strb	r2, [r3, #0]
    be4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    be52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be56:	781b      	ldrb	r3, [r3, #0]
    be58:	3301      	adds	r3, #1
    be5a:	b2da      	uxtb	r2, r3
    be5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    be60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be64:	701a      	strb	r2, [r3, #0]
    be66:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    be6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	2bff      	cmp	r3, #255	; 0xff
    be72:	d105      	bne.n	be80 <send_mode+0x39c>
    be74:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    be78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7c:	2200      	movs	r2, #0
    be7e:	701a      	strb	r2, [r3, #0]
    be80:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	461a      	mov	r2, r3
    be8c:	f240 33ec 	movw	r3, #1004	; 0x3ec
    be90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be94:	7819      	ldrb	r1, [r3, #0]
    be96:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    be9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9e:	5499      	strb	r1, [r3, r2]
    bea0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea8:	781a      	ldrb	r2, [r3, #0]
    beaa:	f240 33ec 	movw	r3, #1004	; 0x3ec
    beae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	4413      	add	r3, r2
    beb6:	b2da      	uxtb	r2, r3
    beb8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec0:	701a      	strb	r2, [r3, #0]
    bec2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beca:	781a      	ldrb	r2, [r3, #0]
    becc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed4:	781b      	ldrb	r3, [r3, #0]
    bed6:	4413      	add	r3, r2
    bed8:	b2da      	uxtb	r2, r3
    beda:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee2:	701a      	strb	r2, [r3, #0]
    bee4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	3301      	adds	r3, #1
    bef0:	b2da      	uxtb	r2, r3
    bef2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befa:	701a      	strb	r2, [r3, #0]
    befc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	2bff      	cmp	r3, #255	; 0xff
    bf08:	d105      	bne.n	bf16 <send_mode+0x432>
    bf0a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf12:	2200      	movs	r2, #0
    bf14:	701a      	strb	r2, [r3, #0]
    bf16:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	461a      	mov	r2, r3
    bf22:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    bf26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2a:	7819      	ldrb	r1, [r3, #0]
    bf2c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bf30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf34:	5499      	strb	r1, [r3, r2]
    bf36:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	3301      	adds	r3, #1
    bf42:	b2da      	uxtb	r2, r3
    bf44:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4c:	701a      	strb	r2, [r3, #0]
    bf4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	2bff      	cmp	r3, #255	; 0xff
    bf5a:	d105      	bne.n	bf68 <send_mode+0x484>
    bf5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf64:	2200      	movs	r2, #0
    bf66:	701a      	strb	r2, [r3, #0]
    bf68:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	461a      	mov	r2, r3
    bf74:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    bf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7c:	7819      	ldrb	r1, [r3, #0]
    bf7e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bf82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf86:	5499      	strb	r1, [r3, r2]
    bf88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf90:	781b      	ldrb	r3, [r3, #0]
    bf92:	3301      	adds	r3, #1
    bf94:	b2da      	uxtb	r2, r3
    bf96:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9e:	701a      	strb	r2, [r3, #0]
    bfa0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa8:	781b      	ldrb	r3, [r3, #0]
    bfaa:	2bff      	cmp	r3, #255	; 0xff
    bfac:	d105      	bne.n	bfba <send_mode+0x4d6>
    bfae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    bfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb6:	2200      	movs	r2, #0
    bfb8:	701a      	strb	r2, [r3, #0]
    bfba:	f242 0339 	movw	r3, #8249	; 0x2039
    bfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc2:	781b      	ldrb	r3, [r3, #0]
    bfc4:	b2db      	uxtb	r3, r3
    bfc6:	f003 0310 	and.w	r3, r3, #16
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d15a      	bne.n	c084 <send_mode+0x5a0>
    bfce:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	b2db      	uxtb	r3, r3
    bfda:	461a      	mov	r2, r3
    bfdc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    bfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe4:	5c9a      	ldrb	r2, [r3, r2]
    bfe6:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	701a      	strb	r2, [r3, #0]
    bff0:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    bff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff8:	2200      	movs	r2, #0
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	b2db      	uxtb	r3, r3
    c008:	3301      	adds	r3, #1
    c00a:	b2da      	uxtb	r2, r3
    c00c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c014:	701a      	strb	r2, [r3, #0]
    c016:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	b2db      	uxtb	r3, r3
    c022:	2bff      	cmp	r3, #255	; 0xff
    c024:	d105      	bne.n	c032 <send_mode+0x54e>
    c026:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02e:	2200      	movs	r2, #0
    c030:	701a      	strb	r2, [r3, #0]
    c032:	f242 0338 	movw	r3, #8248	; 0x2038
    c036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03a:	f242 0238 	movw	r2, #8248	; 0x2038
    c03e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c042:	7812      	ldrb	r2, [r2, #0]
    c044:	b2d2      	uxtb	r2, r2
    c046:	f042 0201 	orr.w	r2, r2, #1
    c04a:	b2d2      	uxtb	r2, r2
    c04c:	701a      	strb	r2, [r3, #0]
    c04e:	f242 0339 	movw	r3, #8249	; 0x2039
    c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c056:	f242 0239 	movw	r2, #8249	; 0x2039
    c05a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c05e:	7812      	ldrb	r2, [r2, #0]
    c060:	b2d2      	uxtb	r2, r2
    c062:	f042 0210 	orr.w	r2, r2, #16
    c066:	b2d2      	uxtb	r2, r2
    c068:	701a      	strb	r2, [r3, #0]
    c06a:	e00b      	b.n	c084 <send_mode+0x5a0>
    c06c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c074:	781b      	ldrb	r3, [r3, #0]
    c076:	3301      	adds	r3, #1
    c078:	b2da      	uxtb	r2, r3
    c07a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c082:	701a      	strb	r2, [r3, #0]
}
    c084:	46bd      	mov	sp, r7
    c086:	f85d 7b04 	ldr.w	r7, [sp], #4
    c08a:	4770      	bx	lr

0000c08c <send_debug>:
void send_debug(void){  //5000ms
    c08c:	b480      	push	{r7}
    c08e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c090:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	781a      	ldrb	r2, [r3, #0]
    c09a:	f248 531f 	movw	r3, #34079	; 0x851f
    c09e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c0a2:	fba3 1302 	umull	r1, r3, r3, r2
    c0a6:	091b      	lsrs	r3, r3, #4
    c0a8:	2132      	movs	r1, #50	; 0x32
    c0aa:	fb01 f303 	mul.w	r3, r1, r3
    c0ae:	1ad3      	subs	r3, r2, r3
    c0b0:	b2db      	uxtb	r3, r3
    c0b2:	2b1d      	cmp	r3, #29
    c0b4:	f040 82bb 	bne.w	c62e <send_debug+0x5a2>
    c0b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c0:	781a      	ldrb	r2, [r3, #0]
    c0c2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ca:	781b      	ldrb	r3, [r3, #0]
    c0cc:	b2db      	uxtb	r3, r3
    c0ce:	429a      	cmp	r2, r3
    c0d0:	d313      	bcc.n	c0fa <send_debug+0x6e>
    c0d2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0da:	781b      	ldrb	r3, [r3, #0]
    c0dc:	b2db      	uxtb	r3, r3
    c0de:	461a      	mov	r2, r3
    c0e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e8:	781b      	ldrb	r3, [r3, #0]
    c0ea:	1ad3      	subs	r3, r2, r3
    c0ec:	33ff      	adds	r3, #255	; 0xff
    c0ee:	2b09      	cmp	r3, #9
    c0f0:	bfd4      	ite	le
    c0f2:	2300      	movle	r3, #0
    c0f4:	2301      	movgt	r3, #1
    c0f6:	b2db      	uxtb	r3, r3
    c0f8:	e011      	b.n	c11e <send_debug+0x92>
    c0fa:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	b2db      	uxtb	r3, r3
    c106:	461a      	mov	r2, r3
    c108:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c110:	781b      	ldrb	r3, [r3, #0]
    c112:	1ad3      	subs	r3, r2, r3
    c114:	2b09      	cmp	r3, #9
    c116:	bfd4      	ite	le
    c118:	2300      	movle	r3, #0
    c11a:	2301      	movgt	r3, #1
    c11c:	b2db      	uxtb	r3, r3
    c11e:	2b00      	cmp	r3, #0
    c120:	f000 8279 	beq.w	c616 <send_debug+0x58a>
    c124:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12c:	781b      	ldrb	r3, [r3, #0]
    c12e:	461a      	mov	r2, r3
    c130:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c138:	2105      	movs	r1, #5
    c13a:	5499      	strb	r1, [r3, r2]
    c13c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	3301      	adds	r3, #1
    c148:	b2da      	uxtb	r2, r3
    c14a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c152:	701a      	strb	r2, [r3, #0]
    c154:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	2bff      	cmp	r3, #255	; 0xff
    c160:	d105      	bne.n	c16e <send_debug+0xe2>
    c162:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16a:	2200      	movs	r2, #0
    c16c:	701a      	strb	r2, [r3, #0]
    c16e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c176:	781b      	ldrb	r3, [r3, #0]
    c178:	461a      	mov	r2, r3
    c17a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c182:	210d      	movs	r1, #13
    c184:	5499      	strb	r1, [r3, r2]
    c186:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18e:	781b      	ldrb	r3, [r3, #0]
    c190:	3301      	adds	r3, #1
    c192:	b2da      	uxtb	r2, r3
    c194:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	701a      	strb	r2, [r3, #0]
    c19e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a6:	781b      	ldrb	r3, [r3, #0]
    c1a8:	2bff      	cmp	r3, #255	; 0xff
    c1aa:	d105      	bne.n	c1b8 <send_debug+0x12c>
    c1ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b4:	2200      	movs	r2, #0
    c1b6:	701a      	strb	r2, [r3, #0]
    c1b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c0:	220d      	movs	r2, #13
    c1c2:	701a      	strb	r2, [r3, #0]
    c1c4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1cc:	220d      	movs	r2, #13
    c1ce:	701a      	strb	r2, [r3, #0]
    c1d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d8:	781b      	ldrb	r3, [r3, #0]
    c1da:	461a      	mov	r2, r3
    c1dc:	f24c 031f 	movw	r3, #49183	; 0xc01f
    c1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e4:	781b      	ldrb	r3, [r3, #0]
    c1e6:	b2d9      	uxtb	r1, r3
    c1e8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f0:	5499      	strb	r1, [r3, r2]
    c1f2:	f24c 031f 	movw	r3, #49183	; 0xc01f
    c1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fa:	781a      	ldrb	r2, [r3, #0]
    c1fc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c204:	781b      	ldrb	r3, [r3, #0]
    c206:	4413      	add	r3, r2
    c208:	b2da      	uxtb	r2, r3
    c20a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c212:	701a      	strb	r2, [r3, #0]
    c214:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21c:	781a      	ldrb	r2, [r3, #0]
    c21e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c226:	781b      	ldrb	r3, [r3, #0]
    c228:	4413      	add	r3, r2
    c22a:	b2da      	uxtb	r2, r3
    c22c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c234:	701a      	strb	r2, [r3, #0]
    c236:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	3301      	adds	r3, #1
    c242:	b2da      	uxtb	r2, r3
    c244:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24c:	701a      	strb	r2, [r3, #0]
    c24e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c256:	781b      	ldrb	r3, [r3, #0]
    c258:	2bff      	cmp	r3, #255	; 0xff
    c25a:	d105      	bne.n	c268 <send_debug+0x1dc>
    c25c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c264:	2200      	movs	r2, #0
    c266:	701a      	strb	r2, [r3, #0]
    c268:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c270:	781b      	ldrb	r3, [r3, #0]
    c272:	461a      	mov	r2, r3
    c274:	f24c 0320 	movw	r3, #49184	; 0xc020
    c278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27c:	7819      	ldrb	r1, [r3, #0]
    c27e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c286:	5499      	strb	r1, [r3, r2]
    c288:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c290:	781a      	ldrb	r2, [r3, #0]
    c292:	f24c 0320 	movw	r3, #49184	; 0xc020
    c296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29a:	781b      	ldrb	r3, [r3, #0]
    c29c:	4413      	add	r3, r2
    c29e:	b2da      	uxtb	r2, r3
    c2a0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a8:	701a      	strb	r2, [r3, #0]
    c2aa:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b2:	781a      	ldrb	r2, [r3, #0]
    c2b4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2bc:	781b      	ldrb	r3, [r3, #0]
    c2be:	4413      	add	r3, r2
    c2c0:	b2da      	uxtb	r2, r3
    c2c2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ca:	701a      	strb	r2, [r3, #0]
    c2cc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	3301      	adds	r3, #1
    c2d8:	b2da      	uxtb	r2, r3
    c2da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	2bff      	cmp	r3, #255	; 0xff
    c2f0:	d105      	bne.n	c2fe <send_debug+0x272>
    c2f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	2200      	movs	r2, #0
    c2fc:	701a      	strb	r2, [r3, #0]
    c2fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c306:	781b      	ldrb	r3, [r3, #0]
    c308:	461a      	mov	r2, r3
    c30a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c312:	7819      	ldrb	r1, [r3, #0]
    c314:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31c:	5499      	strb	r1, [r3, r2]
    c31e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c326:	781a      	ldrb	r2, [r3, #0]
    c328:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c330:	781b      	ldrb	r3, [r3, #0]
    c332:	4413      	add	r3, r2
    c334:	b2da      	uxtb	r2, r3
    c336:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c33e:	701a      	strb	r2, [r3, #0]
    c340:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c348:	781a      	ldrb	r2, [r3, #0]
    c34a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c352:	781b      	ldrb	r3, [r3, #0]
    c354:	4413      	add	r3, r2
    c356:	b2da      	uxtb	r2, r3
    c358:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c360:	701a      	strb	r2, [r3, #0]
    c362:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36a:	781b      	ldrb	r3, [r3, #0]
    c36c:	3301      	adds	r3, #1
    c36e:	b2da      	uxtb	r2, r3
    c370:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c378:	701a      	strb	r2, [r3, #0]
    c37a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	2bff      	cmp	r3, #255	; 0xff
    c386:	d105      	bne.n	c394 <send_debug+0x308>
    c388:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c390:	2200      	movs	r2, #0
    c392:	701a      	strb	r2, [r3, #0]
    c394:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39c:	781b      	ldrb	r3, [r3, #0]
    c39e:	461a      	mov	r2, r3
    c3a0:	f24c 1387 	movw	r3, #49543	; 0xc187
    c3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a8:	7819      	ldrb	r1, [r3, #0]
    c3aa:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	5499      	strb	r1, [r3, r2]
    c3b4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	781a      	ldrb	r2, [r3, #0]
    c3be:	f24c 1387 	movw	r3, #49543	; 0xc187
    c3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	4413      	add	r3, r2
    c3ca:	b2da      	uxtb	r2, r3
    c3cc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d4:	701a      	strb	r2, [r3, #0]
    c3d6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3de:	781a      	ldrb	r2, [r3, #0]
    c3e0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	4413      	add	r3, r2
    c3ec:	b2da      	uxtb	r2, r3
    c3ee:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f6:	701a      	strb	r2, [r3, #0]
    c3f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c400:	781b      	ldrb	r3, [r3, #0]
    c402:	3301      	adds	r3, #1
    c404:	b2da      	uxtb	r2, r3
    c406:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40e:	701a      	strb	r2, [r3, #0]
    c410:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	2bff      	cmp	r3, #255	; 0xff
    c41c:	d105      	bne.n	c42a <send_debug+0x39e>
    c41e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c426:	2200      	movs	r2, #0
    c428:	701a      	strb	r2, [r3, #0]
    c42a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c432:	781b      	ldrb	r3, [r3, #0]
    c434:	461a      	mov	r2, r3
    c436:	f64b 63d4 	movw	r3, #48852	; 0xbed4
    c43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43e:	7819      	ldrb	r1, [r3, #0]
    c440:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c448:	5499      	strb	r1, [r3, r2]
    c44a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c452:	781a      	ldrb	r2, [r3, #0]
    c454:	f64b 63d4 	movw	r3, #48852	; 0xbed4
    c458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45c:	781b      	ldrb	r3, [r3, #0]
    c45e:	4413      	add	r3, r2
    c460:	b2da      	uxtb	r2, r3
    c462:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46a:	701a      	strb	r2, [r3, #0]
    c46c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c474:	781a      	ldrb	r2, [r3, #0]
    c476:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47e:	781b      	ldrb	r3, [r3, #0]
    c480:	4413      	add	r3, r2
    c482:	b2da      	uxtb	r2, r3
    c484:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48c:	701a      	strb	r2, [r3, #0]
    c48e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	3301      	adds	r3, #1
    c49a:	b2da      	uxtb	r2, r3
    c49c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a4:	701a      	strb	r2, [r3, #0]
    c4a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	2bff      	cmp	r3, #255	; 0xff
    c4b2:	d105      	bne.n	c4c0 <send_debug+0x434>
    c4b4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4bc:	2200      	movs	r2, #0
    c4be:	701a      	strb	r2, [r3, #0]
    c4c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c8:	781b      	ldrb	r3, [r3, #0]
    c4ca:	461a      	mov	r2, r3
    c4cc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d4:	7819      	ldrb	r1, [r3, #0]
    c4d6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4de:	5499      	strb	r1, [r3, r2]
    c4e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	3301      	adds	r3, #1
    c4ec:	b2da      	uxtb	r2, r3
    c4ee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	701a      	strb	r2, [r3, #0]
    c4f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	2bff      	cmp	r3, #255	; 0xff
    c504:	d105      	bne.n	c512 <send_debug+0x486>
    c506:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	2200      	movs	r2, #0
    c510:	701a      	strb	r2, [r3, #0]
    c512:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	461a      	mov	r2, r3
    c51e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	7819      	ldrb	r1, [r3, #0]
    c528:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c530:	5499      	strb	r1, [r3, r2]
    c532:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53a:	781b      	ldrb	r3, [r3, #0]
    c53c:	3301      	adds	r3, #1
    c53e:	b2da      	uxtb	r2, r3
    c540:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c548:	701a      	strb	r2, [r3, #0]
    c54a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c552:	781b      	ldrb	r3, [r3, #0]
    c554:	2bff      	cmp	r3, #255	; 0xff
    c556:	d105      	bne.n	c564 <send_debug+0x4d8>
    c558:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c560:	2200      	movs	r2, #0
    c562:	701a      	strb	r2, [r3, #0]
    c564:	f242 0339 	movw	r3, #8249	; 0x2039
    c568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	b2db      	uxtb	r3, r3
    c570:	f003 0310 	and.w	r3, r3, #16
    c574:	2b00      	cmp	r3, #0
    c576:	d15a      	bne.n	c62e <send_debug+0x5a2>
    c578:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c580:	781b      	ldrb	r3, [r3, #0]
    c582:	b2db      	uxtb	r3, r3
    c584:	461a      	mov	r2, r3
    c586:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58e:	5c9a      	ldrb	r2, [r3, r2]
    c590:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    c594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c598:	701a      	strb	r2, [r3, #0]
    c59a:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    c59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a2:	2200      	movs	r2, #0
    c5a4:	701a      	strb	r2, [r3, #0]
    c5a6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	b2db      	uxtb	r3, r3
    c5b2:	3301      	adds	r3, #1
    c5b4:	b2da      	uxtb	r2, r3
    c5b6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5be:	701a      	strb	r2, [r3, #0]
    c5c0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	b2db      	uxtb	r3, r3
    c5cc:	2bff      	cmp	r3, #255	; 0xff
    c5ce:	d105      	bne.n	c5dc <send_debug+0x550>
    c5d0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d8:	2200      	movs	r2, #0
    c5da:	701a      	strb	r2, [r3, #0]
    c5dc:	f242 0338 	movw	r3, #8248	; 0x2038
    c5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e4:	f242 0238 	movw	r2, #8248	; 0x2038
    c5e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5ec:	7812      	ldrb	r2, [r2, #0]
    c5ee:	b2d2      	uxtb	r2, r2
    c5f0:	f042 0201 	orr.w	r2, r2, #1
    c5f4:	b2d2      	uxtb	r2, r2
    c5f6:	701a      	strb	r2, [r3, #0]
    c5f8:	f242 0339 	movw	r3, #8249	; 0x2039
    c5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c600:	f242 0239 	movw	r2, #8249	; 0x2039
    c604:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c608:	7812      	ldrb	r2, [r2, #0]
    c60a:	b2d2      	uxtb	r2, r2
    c60c:	f042 0210 	orr.w	r2, r2, #16
    c610:	b2d2      	uxtb	r2, r2
    c612:	701a      	strb	r2, [r3, #0]
    c614:	e00b      	b.n	c62e <send_debug+0x5a2>
    c616:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61e:	781b      	ldrb	r3, [r3, #0]
    c620:	3301      	adds	r3, #1
    c622:	b2da      	uxtb	r2, r3
    c624:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    c628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62c:	701a      	strb	r2, [r3, #0]
}
    c62e:	46bd      	mov	sp, r7
    c630:	f85d 7b04 	ldr.w	r7, [sp], #4
    c634:	4770      	bx	lr
    c636:	bf00      	nop

0000c638 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c638:	b480      	push	{r7}
    c63a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c63c:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	781a      	ldrb	r2, [r3, #0]
    c646:	f248 531f 	movw	r3, #34079	; 0x851f
    c64a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c64e:	fba3 1302 	umull	r1, r3, r3, r2
    c652:	095b      	lsrs	r3, r3, #5
    c654:	2164      	movs	r1, #100	; 0x64
    c656:	fb01 f303 	mul.w	r3, r1, r3
    c65a:	1ad3      	subs	r3, r2, r3
    c65c:	b2db      	uxtb	r3, r3
    c65e:	2b31      	cmp	r3, #49	; 0x31
    c660:	f040 8395 	bne.w	cd8e <send_nav_ref+0x756>
    c664:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66c:	781a      	ldrb	r2, [r3, #0]
    c66e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c676:	781b      	ldrb	r3, [r3, #0]
    c678:	b2db      	uxtb	r3, r3
    c67a:	429a      	cmp	r2, r3
    c67c:	d313      	bcc.n	c6a6 <send_nav_ref+0x6e>
    c67e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	b2db      	uxtb	r3, r3
    c68a:	461a      	mov	r2, r3
    c68c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c694:	781b      	ldrb	r3, [r3, #0]
    c696:	1ad3      	subs	r3, r2, r3
    c698:	33ff      	adds	r3, #255	; 0xff
    c69a:	2b0c      	cmp	r3, #12
    c69c:	bfd4      	ite	le
    c69e:	2300      	movle	r3, #0
    c6a0:	2301      	movgt	r3, #1
    c6a2:	b2db      	uxtb	r3, r3
    c6a4:	e011      	b.n	c6ca <send_nav_ref+0x92>
    c6a6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    c6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ae:	781b      	ldrb	r3, [r3, #0]
    c6b0:	b2db      	uxtb	r3, r3
    c6b2:	461a      	mov	r2, r3
    c6b4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	1ad3      	subs	r3, r2, r3
    c6c0:	2b0c      	cmp	r3, #12
    c6c2:	bfd4      	ite	le
    c6c4:	2300      	movle	r3, #0
    c6c6:	2301      	movgt	r3, #1
    c6c8:	b2db      	uxtb	r3, r3
    c6ca:	2b00      	cmp	r3, #0
    c6cc:	f000 8353 	beq.w	cd76 <send_nav_ref+0x73e>
    c6d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d8:	781b      	ldrb	r3, [r3, #0]
    c6da:	461a      	mov	r2, r3
    c6dc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e4:	2105      	movs	r1, #5
    c6e6:	5499      	strb	r1, [r3, r2]
    c6e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	3301      	adds	r3, #1
    c6f4:	b2da      	uxtb	r2, r3
    c6f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fe:	701a      	strb	r2, [r3, #0]
    c700:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c708:	781b      	ldrb	r3, [r3, #0]
    c70a:	2bff      	cmp	r3, #255	; 0xff
    c70c:	d105      	bne.n	c71a <send_nav_ref+0xe2>
    c70e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	2200      	movs	r2, #0
    c718:	701a      	strb	r2, [r3, #0]
    c71a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	461a      	mov	r2, r3
    c726:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72e:	2109      	movs	r1, #9
    c730:	5499      	strb	r1, [r3, r2]
    c732:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	3301      	adds	r3, #1
    c73e:	b2da      	uxtb	r2, r3
    c740:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c748:	701a      	strb	r2, [r3, #0]
    c74a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	2bff      	cmp	r3, #255	; 0xff
    c756:	d105      	bne.n	c764 <send_nav_ref+0x12c>
    c758:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c760:	2200      	movs	r2, #0
    c762:	701a      	strb	r2, [r3, #0]
    c764:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c76c:	2209      	movs	r2, #9
    c76e:	701a      	strb	r2, [r3, #0]
    c770:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c778:	2209      	movs	r2, #9
    c77a:	701a      	strb	r2, [r3, #0]
    c77c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c784:	781b      	ldrb	r3, [r3, #0]
    c786:	461a      	mov	r2, r3
    c788:	f648 03a8 	movw	r3, #34984	; 0x88a8
    c78c:	f2c0 0301 	movt	r3, #1
    c790:	7819      	ldrb	r1, [r3, #0]
    c792:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79a:	5499      	strb	r1, [r3, r2]
    c79c:	f648 03a8 	movw	r3, #34984	; 0x88a8
    c7a0:	f2c0 0301 	movt	r3, #1
    c7a4:	781a      	ldrb	r2, [r3, #0]
    c7a6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ae:	781b      	ldrb	r3, [r3, #0]
    c7b0:	4413      	add	r3, r2
    c7b2:	b2da      	uxtb	r2, r3
    c7b4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7bc:	701a      	strb	r2, [r3, #0]
    c7be:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c6:	781a      	ldrb	r2, [r3, #0]
    c7c8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	4413      	add	r3, r2
    c7d4:	b2da      	uxtb	r2, r3
    c7d6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7de:	701a      	strb	r2, [r3, #0]
    c7e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	3301      	adds	r3, #1
    c7ec:	b2da      	uxtb	r2, r3
    c7ee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f6:	701a      	strb	r2, [r3, #0]
    c7f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c800:	781b      	ldrb	r3, [r3, #0]
    c802:	2bff      	cmp	r3, #255	; 0xff
    c804:	d105      	bne.n	c812 <send_nav_ref+0x1da>
    c806:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	2200      	movs	r2, #0
    c810:	701a      	strb	r2, [r3, #0]
    c812:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c81a:	781b      	ldrb	r3, [r3, #0]
    c81c:	461a      	mov	r2, r3
    c81e:	f648 03a8 	movw	r3, #34984	; 0x88a8
    c822:	f2c0 0301 	movt	r3, #1
    c826:	7859      	ldrb	r1, [r3, #1]
    c828:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c830:	5499      	strb	r1, [r3, r2]
    c832:	4bd2      	ldr	r3, [pc, #840]	; (cb7c <send_nav_ref+0x544>)
    c834:	781a      	ldrb	r2, [r3, #0]
    c836:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	4413      	add	r3, r2
    c842:	b2da      	uxtb	r2, r3
    c844:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84c:	701a      	strb	r2, [r3, #0]
    c84e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c856:	781a      	ldrb	r2, [r3, #0]
    c858:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c860:	781b      	ldrb	r3, [r3, #0]
    c862:	4413      	add	r3, r2
    c864:	b2da      	uxtb	r2, r3
    c866:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86e:	701a      	strb	r2, [r3, #0]
    c870:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	3301      	adds	r3, #1
    c87c:	b2da      	uxtb	r2, r3
    c87e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c886:	701a      	strb	r2, [r3, #0]
    c888:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	2bff      	cmp	r3, #255	; 0xff
    c894:	d105      	bne.n	c8a2 <send_nav_ref+0x26a>
    c896:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	2200      	movs	r2, #0
    c8a0:	701a      	strb	r2, [r3, #0]
    c8a2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	461a      	mov	r2, r3
    c8ae:	f648 03a8 	movw	r3, #34984	; 0x88a8
    c8b2:	f2c0 0301 	movt	r3, #1
    c8b6:	7899      	ldrb	r1, [r3, #2]
    c8b8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c0:	5499      	strb	r1, [r3, r2]
    c8c2:	4baf      	ldr	r3, [pc, #700]	; (cb80 <send_nav_ref+0x548>)
    c8c4:	781a      	ldrb	r2, [r3, #0]
    c8c6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ce:	781b      	ldrb	r3, [r3, #0]
    c8d0:	4413      	add	r3, r2
    c8d2:	b2da      	uxtb	r2, r3
    c8d4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8dc:	701a      	strb	r2, [r3, #0]
    c8de:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e6:	781a      	ldrb	r2, [r3, #0]
    c8e8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f0:	781b      	ldrb	r3, [r3, #0]
    c8f2:	4413      	add	r3, r2
    c8f4:	b2da      	uxtb	r2, r3
    c8f6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fe:	701a      	strb	r2, [r3, #0]
    c900:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c908:	781b      	ldrb	r3, [r3, #0]
    c90a:	3301      	adds	r3, #1
    c90c:	b2da      	uxtb	r2, r3
    c90e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c916:	701a      	strb	r2, [r3, #0]
    c918:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	2bff      	cmp	r3, #255	; 0xff
    c924:	d105      	bne.n	c932 <send_nav_ref+0x2fa>
    c926:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
    c932:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93a:	781b      	ldrb	r3, [r3, #0]
    c93c:	461a      	mov	r2, r3
    c93e:	f648 03a8 	movw	r3, #34984	; 0x88a8
    c942:	f2c0 0301 	movt	r3, #1
    c946:	78d9      	ldrb	r1, [r3, #3]
    c948:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c950:	5499      	strb	r1, [r3, r2]
    c952:	4b8c      	ldr	r3, [pc, #560]	; (cb84 <send_nav_ref+0x54c>)
    c954:	781a      	ldrb	r2, [r3, #0]
    c956:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c95e:	781b      	ldrb	r3, [r3, #0]
    c960:	4413      	add	r3, r2
    c962:	b2da      	uxtb	r2, r3
    c964:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96c:	701a      	strb	r2, [r3, #0]
    c96e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c976:	781a      	ldrb	r2, [r3, #0]
    c978:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c980:	781b      	ldrb	r3, [r3, #0]
    c982:	4413      	add	r3, r2
    c984:	b2da      	uxtb	r2, r3
    c986:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    c98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98e:	701a      	strb	r2, [r3, #0]
    c990:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c998:	781b      	ldrb	r3, [r3, #0]
    c99a:	3301      	adds	r3, #1
    c99c:	b2da      	uxtb	r2, r3
    c99e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a6:	701a      	strb	r2, [r3, #0]
    c9a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b0:	781b      	ldrb	r3, [r3, #0]
    c9b2:	2bff      	cmp	r3, #255	; 0xff
    c9b4:	d105      	bne.n	c9c2 <send_nav_ref+0x38a>
    c9b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	2200      	movs	r2, #0
    c9c0:	701a      	strb	r2, [r3, #0]
    c9c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    c9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ca:	781b      	ldrb	r3, [r3, #0]
    c9cc:	461a      	mov	r2, r3
    c9ce:	f648 03ac 	movw	r3, #34988	; 0x88ac
    c9d2:	f2c0 0301 	movt	r3, #1
    c9d6:	7819      	ldrb	r1, [r3, #0]
    c9d8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    c9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e0:	5499      	strb	r1, [r3, r2]
    c9e2:	f648 03ac 	movw	r3, #34988	; 0x88ac
    c9e6:	f2c0 0301 	movt	r3, #1
    c9ea:	781a      	ldrb	r2, [r3, #0]
    c9ec:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f4:	781b      	ldrb	r3, [r3, #0]
    c9f6:	4413      	add	r3, r2
    c9f8:	b2da      	uxtb	r2, r3
    c9fa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    c9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca02:	701a      	strb	r2, [r3, #0]
    ca04:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ca08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0c:	781a      	ldrb	r2, [r3, #0]
    ca0e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ca12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	4413      	add	r3, r2
    ca1a:	b2da      	uxtb	r2, r3
    ca1c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ca20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca24:	701a      	strb	r2, [r3, #0]
    ca26:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ca2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	3301      	adds	r3, #1
    ca32:	b2da      	uxtb	r2, r3
    ca34:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	701a      	strb	r2, [r3, #0]
    ca3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ca42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca46:	781b      	ldrb	r3, [r3, #0]
    ca48:	2bff      	cmp	r3, #255	; 0xff
    ca4a:	d105      	bne.n	ca58 <send_nav_ref+0x420>
    ca4c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ca50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca54:	2200      	movs	r2, #0
    ca56:	701a      	strb	r2, [r3, #0]
    ca58:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ca5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca60:	781b      	ldrb	r3, [r3, #0]
    ca62:	461a      	mov	r2, r3
    ca64:	f648 03ac 	movw	r3, #34988	; 0x88ac
    ca68:	f2c0 0301 	movt	r3, #1
    ca6c:	7859      	ldrb	r1, [r3, #1]
    ca6e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	5499      	strb	r1, [r3, r2]
    ca78:	4b43      	ldr	r3, [pc, #268]	; (cb88 <send_nav_ref+0x550>)
    ca7a:	781a      	ldrb	r2, [r3, #0]
    ca7c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ca80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca84:	781b      	ldrb	r3, [r3, #0]
    ca86:	4413      	add	r3, r2
    ca88:	b2da      	uxtb	r2, r3
    ca8a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ca8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ca98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9c:	781a      	ldrb	r2, [r3, #0]
    ca9e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    caa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	4413      	add	r3, r2
    caaa:	b2da      	uxtb	r2, r3
    caac:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab4:	701a      	strb	r2, [r3, #0]
    cab6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	781b      	ldrb	r3, [r3, #0]
    cac0:	3301      	adds	r3, #1
    cac2:	b2da      	uxtb	r2, r3
    cac4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cacc:	701a      	strb	r2, [r3, #0]
    cace:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	2bff      	cmp	r3, #255	; 0xff
    cada:	d105      	bne.n	cae8 <send_nav_ref+0x4b0>
    cadc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae4:	2200      	movs	r2, #0
    cae6:	701a      	strb	r2, [r3, #0]
    cae8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	781b      	ldrb	r3, [r3, #0]
    caf2:	461a      	mov	r2, r3
    caf4:	f648 03ac 	movw	r3, #34988	; 0x88ac
    caf8:	f2c0 0301 	movt	r3, #1
    cafc:	7899      	ldrb	r1, [r3, #2]
    cafe:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb06:	5499      	strb	r1, [r3, r2]
    cb08:	4b20      	ldr	r3, [pc, #128]	; (cb8c <send_nav_ref+0x554>)
    cb0a:	781a      	ldrb	r2, [r3, #0]
    cb0c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	4413      	add	r3, r2
    cb18:	b2da      	uxtb	r2, r3
    cb1a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb22:	701a      	strb	r2, [r3, #0]
    cb24:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2c:	781a      	ldrb	r2, [r3, #0]
    cb2e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	4413      	add	r3, r2
    cb3a:	b2da      	uxtb	r2, r3
    cb3c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cb40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb44:	701a      	strb	r2, [r3, #0]
    cb46:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	3301      	adds	r3, #1
    cb52:	b2da      	uxtb	r2, r3
    cb54:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5c:	701a      	strb	r2, [r3, #0]
    cb5e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb66:	781b      	ldrb	r3, [r3, #0]
    cb68:	2bff      	cmp	r3, #255	; 0xff
    cb6a:	d111      	bne.n	cb90 <send_nav_ref+0x558>
    cb6c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb74:	2200      	movs	r2, #0
    cb76:	701a      	strb	r2, [r3, #0]
    cb78:	e00a      	b.n	cb90 <send_nav_ref+0x558>
    cb7a:	bf00      	nop
    cb7c:	000188a9 	.word	0x000188a9
    cb80:	000188aa 	.word	0x000188aa
    cb84:	000188ab 	.word	0x000188ab
    cb88:	000188ad 	.word	0x000188ad
    cb8c:	000188ae 	.word	0x000188ae
    cb90:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	461a      	mov	r2, r3
    cb9c:	f648 03ac 	movw	r3, #34988	; 0x88ac
    cba0:	f2c0 0301 	movt	r3, #1
    cba4:	78d9      	ldrb	r1, [r3, #3]
    cba6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbae:	5499      	strb	r1, [r3, r2]
    cbb0:	4b79      	ldr	r3, [pc, #484]	; (cd98 <send_nav_ref+0x760>)
    cbb2:	781a      	ldrb	r2, [r3, #0]
    cbb4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	4413      	add	r3, r2
    cbc0:	b2da      	uxtb	r2, r3
    cbc2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbca:	701a      	strb	r2, [r3, #0]
    cbcc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd4:	781a      	ldrb	r2, [r3, #0]
    cbd6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbde:	781b      	ldrb	r3, [r3, #0]
    cbe0:	4413      	add	r3, r2
    cbe2:	b2da      	uxtb	r2, r3
    cbe4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cbe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbec:	701a      	strb	r2, [r3, #0]
    cbee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf6:	781b      	ldrb	r3, [r3, #0]
    cbf8:	3301      	adds	r3, #1
    cbfa:	b2da      	uxtb	r2, r3
    cbfc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc04:	701a      	strb	r2, [r3, #0]
    cc06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	2bff      	cmp	r3, #255	; 0xff
    cc12:	d105      	bne.n	cc20 <send_nav_ref+0x5e8>
    cc14:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1c:	2200      	movs	r2, #0
    cc1e:	701a      	strb	r2, [r3, #0]
    cc20:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc28:	781b      	ldrb	r3, [r3, #0]
    cc2a:	461a      	mov	r2, r3
    cc2c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cc30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc34:	7819      	ldrb	r1, [r3, #0]
    cc36:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3e:	5499      	strb	r1, [r3, r2]
    cc40:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc48:	781b      	ldrb	r3, [r3, #0]
    cc4a:	3301      	adds	r3, #1
    cc4c:	b2da      	uxtb	r2, r3
    cc4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc56:	701a      	strb	r2, [r3, #0]
    cc58:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	2bff      	cmp	r3, #255	; 0xff
    cc64:	d105      	bne.n	cc72 <send_nav_ref+0x63a>
    cc66:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6e:	2200      	movs	r2, #0
    cc70:	701a      	strb	r2, [r3, #0]
    cc72:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	461a      	mov	r2, r3
    cc7e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc86:	7819      	ldrb	r1, [r3, #0]
    cc88:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc90:	5499      	strb	r1, [r3, r2]
    cc92:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	3301      	adds	r3, #1
    cc9e:	b2da      	uxtb	r2, r3
    cca0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca8:	701a      	strb	r2, [r3, #0]
    ccaa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ccae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb2:	781b      	ldrb	r3, [r3, #0]
    ccb4:	2bff      	cmp	r3, #255	; 0xff
    ccb6:	d105      	bne.n	ccc4 <send_nav_ref+0x68c>
    ccb8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ccbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc0:	2200      	movs	r2, #0
    ccc2:	701a      	strb	r2, [r3, #0]
    ccc4:	f242 0339 	movw	r3, #8249	; 0x2039
    ccc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	b2db      	uxtb	r3, r3
    ccd0:	f003 0310 	and.w	r3, r3, #16
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d15a      	bne.n	cd8e <send_nav_ref+0x756>
    ccd8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ccdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce0:	781b      	ldrb	r3, [r3, #0]
    cce2:	b2db      	uxtb	r3, r3
    cce4:	461a      	mov	r2, r3
    cce6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	5c9a      	ldrb	r2, [r3, r2]
    ccf0:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    ccf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf8:	701a      	strb	r2, [r3, #0]
    ccfa:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    ccfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd02:	2200      	movs	r2, #0
    cd04:	701a      	strb	r2, [r3, #0]
    cd06:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	781b      	ldrb	r3, [r3, #0]
    cd10:	b2db      	uxtb	r3, r3
    cd12:	3301      	adds	r3, #1
    cd14:	b2da      	uxtb	r2, r3
    cd16:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	701a      	strb	r2, [r3, #0]
    cd20:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd28:	781b      	ldrb	r3, [r3, #0]
    cd2a:	b2db      	uxtb	r3, r3
    cd2c:	2bff      	cmp	r3, #255	; 0xff
    cd2e:	d105      	bne.n	cd3c <send_nav_ref+0x704>
    cd30:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd38:	2200      	movs	r2, #0
    cd3a:	701a      	strb	r2, [r3, #0]
    cd3c:	f242 0338 	movw	r3, #8248	; 0x2038
    cd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd44:	f242 0238 	movw	r2, #8248	; 0x2038
    cd48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd4c:	7812      	ldrb	r2, [r2, #0]
    cd4e:	b2d2      	uxtb	r2, r2
    cd50:	f042 0201 	orr.w	r2, r2, #1
    cd54:	b2d2      	uxtb	r2, r2
    cd56:	701a      	strb	r2, [r3, #0]
    cd58:	f242 0339 	movw	r3, #8249	; 0x2039
    cd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd60:	f242 0239 	movw	r2, #8249	; 0x2039
    cd64:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd68:	7812      	ldrb	r2, [r2, #0]
    cd6a:	b2d2      	uxtb	r2, r2
    cd6c:	f042 0210 	orr.w	r2, r2, #16
    cd70:	b2d2      	uxtb	r2, r2
    cd72:	701a      	strb	r2, [r3, #0]
    cd74:	e00b      	b.n	cd8e <send_nav_ref+0x756>
    cd76:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	3301      	adds	r3, #1
    cd82:	b2da      	uxtb	r2, r3
    cd84:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cd8e:	46bd      	mov	sp, r7
    cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd94:	4770      	bx	lr
    cd96:	bf00      	nop
    cd98:	000188af 	.word	0x000188af

0000cd9c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cd9c:	b480      	push	{r7}
    cd9e:	b083      	sub	sp, #12
    cda0:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cda2:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    cda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdaa:	8a1b      	ldrh	r3, [r3, #16]
    cdac:	b21b      	sxth	r3, r3
    cdae:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cdb2:	db0d      	blt.n	cdd0 <inflight_calib_mode_update+0x34>
    cdb4:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	8a1b      	ldrh	r3, [r3, #16]
    cdbe:	b21a      	sxth	r2, r3
    cdc0:	f640 437f 	movw	r3, #3199	; 0xc7f
    cdc4:	429a      	cmp	r2, r3
    cdc6:	bfd4      	ite	le
    cdc8:	2300      	movle	r3, #0
    cdca:	2301      	movgt	r3, #1
    cdcc:	b2db      	uxtb	r3, r3
    cdce:	e000      	b.n	cdd2 <inflight_calib_mode_update+0x36>
    cdd0:	2302      	movs	r3, #2
    cdd2:	71fb      	strb	r3, [r7, #7]
    cdd4:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    cdd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	79fa      	ldrb	r2, [r7, #7]
    cde0:	429a      	cmp	r2, r3
    cde2:	d007      	beq.n	cdf4 <inflight_calib_mode_update+0x58>
    cde4:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	79fa      	ldrb	r2, [r7, #7]
    cdee:	701a      	strb	r2, [r3, #0]
    cdf0:	2301      	movs	r3, #1
    cdf2:	e000      	b.n	cdf6 <inflight_calib_mode_update+0x5a>
    cdf4:	2300      	movs	r3, #0
}
    cdf6:	4618      	mov	r0, r3
    cdf8:	370c      	adds	r7, #12
    cdfa:	46bd      	mov	sp, r7
    cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce00:	4770      	bx	lr
    ce02:	bf00      	nop

0000ce04 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    ce04:	b580      	push	{r7, lr}
    ce06:	b082      	sub	sp, #8
    ce08:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    ce0a:	f24c 031e 	movw	r3, #49182	; 0xc01e
    ce0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce12:	2201      	movs	r2, #1
    ce14:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    ce16:	f24c 031e 	movw	r3, #49182	; 0xc01e
    ce1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	b2db      	uxtb	r3, r3
    ce22:	2b00      	cmp	r3, #0
    ce24:	f000 83b8 	beq.w	d598 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    ce28:	2300      	movs	r3, #0
    ce2a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    ce2c:	f7fa fa9c 	bl	7368 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    ce30:	4b3a      	ldr	r3, [pc, #232]	; (cf1c <radio_control_task+0x118>)
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	b2db      	uxtb	r3, r3
    ce36:	f003 0302 	and.w	r3, r3, #2
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d00d      	beq.n	ce5a <radio_control_task+0x56>
    ce3e:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    ce42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b01      	cmp	r3, #1
    ce4a:	d00d      	beq.n	ce68 <radio_control_task+0x64>
    ce4c:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    ce50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce54:	781b      	ldrb	r3, [r3, #0]
    ce56:	2b00      	cmp	r3, #0
    ce58:	d006      	beq.n	ce68 <radio_control_task+0x64>
    ce5a:	f24c 237c 	movw	r3, #49788	; 0xc27c
    ce5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d007      	beq.n	ce78 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    ce68:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    ce6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce70:	2203      	movs	r2, #3
    ce72:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    ce74:	2301      	movs	r3, #1
    ce76:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    ce78:	f7fa f950 	bl	711c <pprz_mode_update>
    ce7c:	4603      	mov	r3, r0
    ce7e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    ce80:	79fa      	ldrb	r2, [r7, #7]
    ce82:	79bb      	ldrb	r3, [r7, #6]
    ce84:	4313      	orrs	r3, r2
    ce86:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    ce88:	f7fa f994 	bl	71b4 <ir_estim_mode_update>
    ce8c:	4603      	mov	r3, r0
    ce8e:	461a      	mov	r2, r3
    ce90:	79fb      	ldrb	r3, [r7, #7]
    ce92:	4313      	orrs	r3, r2
    ce94:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    ce96:	f7ff ff81 	bl	cd9c <inflight_calib_mode_update>
    ce9a:	4603      	mov	r3, r0
    ce9c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    ce9e:	797b      	ldrb	r3, [r7, #5]
    cea0:	2b00      	cmp	r3, #0
    cea2:	d102      	bne.n	ceaa <radio_control_task+0xa6>
    cea4:	79bb      	ldrb	r3, [r7, #6]
    cea6:	2b00      	cmp	r3, #0
    cea8:	d001      	beq.n	ceae <radio_control_task+0xaa>
    ceaa:	2301      	movs	r3, #1
    ceac:	e000      	b.n	ceb0 <radio_control_task+0xac>
    ceae:	2300      	movs	r3, #0
    ceb0:	b2db      	uxtb	r3, r3
    ceb2:	4618      	mov	r0, r3
    ceb4:	f008 fba0 	bl	155f8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    ceb8:	79fa      	ldrb	r2, [r7, #7]
    ceba:	797b      	ldrb	r3, [r7, #5]
    cebc:	4313      	orrs	r3, r2
    cebe:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cec0:	f7fa f9a0 	bl	7204 <mcu1_status_update>
    cec4:	4603      	mov	r3, r0
    cec6:	461a      	mov	r2, r3
    cec8:	79fb      	ldrb	r3, [r7, #7]
    ceca:	4313      	orrs	r3, r2
    cecc:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cece:	2301      	movs	r3, #1
    ced0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    ced2:	79fb      	ldrb	r3, [r7, #7]
    ced4:	2b00      	cmp	r3, #0
    ced6:	f000 82bc 	beq.w	d452 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    ceda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee2:	781a      	ldrb	r2, [r3, #0]
    cee4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceec:	781b      	ldrb	r3, [r3, #0]
    ceee:	b2db      	uxtb	r3, r3
    cef0:	429a      	cmp	r2, r3
    cef2:	d315      	bcc.n	cf20 <radio_control_task+0x11c>
    cef4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefc:	781b      	ldrb	r3, [r3, #0]
    cefe:	b2db      	uxtb	r3, r3
    cf00:	461a      	mov	r2, r3
    cf02:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0a:	781b      	ldrb	r3, [r3, #0]
    cf0c:	1ad3      	subs	r3, r2, r3
    cf0e:	33ff      	adds	r3, #255	; 0xff
    cf10:	2b09      	cmp	r3, #9
    cf12:	bfd4      	ite	le
    cf14:	2300      	movle	r3, #0
    cf16:	2301      	movgt	r3, #1
    cf18:	b2db      	uxtb	r3, r3
    cf1a:	e013      	b.n	cf44 <radio_control_task+0x140>
    cf1c:	2004c003 	.word	0x2004c003
    cf20:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    cf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf28:	781b      	ldrb	r3, [r3, #0]
    cf2a:	b2db      	uxtb	r3, r3
    cf2c:	461a      	mov	r2, r3
    cf2e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf36:	781b      	ldrb	r3, [r3, #0]
    cf38:	1ad3      	subs	r3, r2, r3
    cf3a:	2b09      	cmp	r3, #9
    cf3c:	bfd4      	ite	le
    cf3e:	2300      	movle	r3, #0
    cf40:	2301      	movgt	r3, #1
    cf42:	b2db      	uxtb	r3, r3
    cf44:	2b00      	cmp	r3, #0
    cf46:	f000 8278 	beq.w	d43a <radio_control_task+0x636>
    cf4a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	461a      	mov	r2, r3
    cf56:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5e:	2105      	movs	r1, #5
    cf60:	5499      	strb	r1, [r3, r2]
    cf62:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	3301      	adds	r3, #1
    cf6e:	b2da      	uxtb	r2, r3
    cf70:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf78:	701a      	strb	r2, [r3, #0]
    cf7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	2bff      	cmp	r3, #255	; 0xff
    cf86:	d105      	bne.n	cf94 <radio_control_task+0x190>
    cf88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf90:	2200      	movs	r2, #0
    cf92:	701a      	strb	r2, [r3, #0]
    cf94:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cf98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9c:	781b      	ldrb	r3, [r3, #0]
    cf9e:	461a      	mov	r2, r3
    cfa0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    cfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa8:	210b      	movs	r1, #11
    cfaa:	5499      	strb	r1, [r3, r2]
    cfac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb4:	781b      	ldrb	r3, [r3, #0]
    cfb6:	3301      	adds	r3, #1
    cfb8:	b2da      	uxtb	r2, r3
    cfba:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc2:	701a      	strb	r2, [r3, #0]
    cfc4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	2bff      	cmp	r3, #255	; 0xff
    cfd0:	d105      	bne.n	cfde <radio_control_task+0x1da>
    cfd2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfda:	2200      	movs	r2, #0
    cfdc:	701a      	strb	r2, [r3, #0]
    cfde:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	220b      	movs	r2, #11
    cfe8:	701a      	strb	r2, [r3, #0]
    cfea:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    cfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff2:	220b      	movs	r2, #11
    cff4:	701a      	strb	r2, [r3, #0]
    cff6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    cffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	461a      	mov	r2, r3
    d002:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    d006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00a:	7819      	ldrb	r1, [r3, #0]
    d00c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d014:	5499      	strb	r1, [r3, r2]
    d016:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01e:	781a      	ldrb	r2, [r3, #0]
    d020:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    d024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d028:	781b      	ldrb	r3, [r3, #0]
    d02a:	4413      	add	r3, r2
    d02c:	b2da      	uxtb	r2, r3
    d02e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d036:	701a      	strb	r2, [r3, #0]
    d038:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d040:	781a      	ldrb	r2, [r3, #0]
    d042:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d04a:	781b      	ldrb	r3, [r3, #0]
    d04c:	4413      	add	r3, r2
    d04e:	b2da      	uxtb	r2, r3
    d050:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d058:	701a      	strb	r2, [r3, #0]
    d05a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	3301      	adds	r3, #1
    d066:	b2da      	uxtb	r2, r3
    d068:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d070:	701a      	strb	r2, [r3, #0]
    d072:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d07a:	781b      	ldrb	r3, [r3, #0]
    d07c:	2bff      	cmp	r3, #255	; 0xff
    d07e:	d105      	bne.n	d08c <radio_control_task+0x288>
    d080:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d088:	2200      	movs	r2, #0
    d08a:	701a      	strb	r2, [r3, #0]
    d08c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	461a      	mov	r2, r3
    d098:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    d09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a0:	7819      	ldrb	r1, [r3, #0]
    d0a2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0aa:	5499      	strb	r1, [r3, r2]
    d0ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b4:	781a      	ldrb	r2, [r3, #0]
    d0b6:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    d0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0be:	781b      	ldrb	r3, [r3, #0]
    d0c0:	4413      	add	r3, r2
    d0c2:	b2da      	uxtb	r2, r3
    d0c4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0cc:	701a      	strb	r2, [r3, #0]
    d0ce:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d6:	781a      	ldrb	r2, [r3, #0]
    d0d8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e0:	781b      	ldrb	r3, [r3, #0]
    d0e2:	4413      	add	r3, r2
    d0e4:	b2da      	uxtb	r2, r3
    d0e6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ee:	701a      	strb	r2, [r3, #0]
    d0f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	3301      	adds	r3, #1
    d0fc:	b2da      	uxtb	r2, r3
    d0fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d106:	701a      	strb	r2, [r3, #0]
    d108:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d110:	781b      	ldrb	r3, [r3, #0]
    d112:	2bff      	cmp	r3, #255	; 0xff
    d114:	d105      	bne.n	d122 <radio_control_task+0x31e>
    d116:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11e:	2200      	movs	r2, #0
    d120:	701a      	strb	r2, [r3, #0]
    d122:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	461a      	mov	r2, r3
    d12e:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    d132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d136:	7819      	ldrb	r1, [r3, #0]
    d138:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	5499      	strb	r1, [r3, r2]
    d142:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14a:	781a      	ldrb	r2, [r3, #0]
    d14c:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
    d150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d154:	781b      	ldrb	r3, [r3, #0]
    d156:	4413      	add	r3, r2
    d158:	b2da      	uxtb	r2, r3
    d15a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d162:	701a      	strb	r2, [r3, #0]
    d164:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d16c:	781a      	ldrb	r2, [r3, #0]
    d16e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d176:	781b      	ldrb	r3, [r3, #0]
    d178:	4413      	add	r3, r2
    d17a:	b2da      	uxtb	r2, r3
    d17c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d184:	701a      	strb	r2, [r3, #0]
    d186:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	3301      	adds	r3, #1
    d192:	b2da      	uxtb	r2, r3
    d194:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19c:	701a      	strb	r2, [r3, #0]
    d19e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a6:	781b      	ldrb	r3, [r3, #0]
    d1a8:	2bff      	cmp	r3, #255	; 0xff
    d1aa:	d105      	bne.n	d1b8 <radio_control_task+0x3b4>
    d1ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b4:	2200      	movs	r2, #0
    d1b6:	701a      	strb	r2, [r3, #0]
    d1b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c0:	781b      	ldrb	r3, [r3, #0]
    d1c2:	461a      	mov	r2, r3
    d1c4:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    d1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1cc:	7819      	ldrb	r1, [r3, #0]
    d1ce:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	5499      	strb	r1, [r3, r2]
    d1d8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e0:	781a      	ldrb	r2, [r3, #0]
    d1e2:	f64b 63d3 	movw	r3, #48851	; 0xbed3
    d1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ea:	781b      	ldrb	r3, [r3, #0]
    d1ec:	4413      	add	r3, r2
    d1ee:	b2da      	uxtb	r2, r3
    d1f0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f8:	701a      	strb	r2, [r3, #0]
    d1fa:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d202:	781a      	ldrb	r2, [r3, #0]
    d204:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d20c:	781b      	ldrb	r3, [r3, #0]
    d20e:	4413      	add	r3, r2
    d210:	b2da      	uxtb	r2, r3
    d212:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21a:	701a      	strb	r2, [r3, #0]
    d21c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d224:	781b      	ldrb	r3, [r3, #0]
    d226:	3301      	adds	r3, #1
    d228:	b2da      	uxtb	r2, r3
    d22a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	701a      	strb	r2, [r3, #0]
    d234:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23c:	781b      	ldrb	r3, [r3, #0]
    d23e:	2bff      	cmp	r3, #255	; 0xff
    d240:	d105      	bne.n	d24e <radio_control_task+0x44a>
    d242:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d24a:	2200      	movs	r2, #0
    d24c:	701a      	strb	r2, [r3, #0]
    d24e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	461a      	mov	r2, r3
    d25a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d262:	7819      	ldrb	r1, [r3, #0]
    d264:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26c:	5499      	strb	r1, [r3, r2]
    d26e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d276:	781a      	ldrb	r2, [r3, #0]
    d278:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	4413      	add	r3, r2
    d284:	b2da      	uxtb	r2, r3
    d286:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28e:	701a      	strb	r2, [r3, #0]
    d290:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d298:	781a      	ldrb	r2, [r3, #0]
    d29a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a2:	781b      	ldrb	r3, [r3, #0]
    d2a4:	4413      	add	r3, r2
    d2a6:	b2da      	uxtb	r2, r3
    d2a8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b0:	701a      	strb	r2, [r3, #0]
    d2b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	781b      	ldrb	r3, [r3, #0]
    d2bc:	3301      	adds	r3, #1
    d2be:	b2da      	uxtb	r2, r3
    d2c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	701a      	strb	r2, [r3, #0]
    d2ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d2:	781b      	ldrb	r3, [r3, #0]
    d2d4:	2bff      	cmp	r3, #255	; 0xff
    d2d6:	d105      	bne.n	d2e4 <radio_control_task+0x4e0>
    d2d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e0:	2200      	movs	r2, #0
    d2e2:	701a      	strb	r2, [r3, #0]
    d2e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	461a      	mov	r2, r3
    d2f0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f8:	7819      	ldrb	r1, [r3, #0]
    d2fa:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d302:	5499      	strb	r1, [r3, r2]
    d304:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30c:	781b      	ldrb	r3, [r3, #0]
    d30e:	3301      	adds	r3, #1
    d310:	b2da      	uxtb	r2, r3
    d312:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31a:	701a      	strb	r2, [r3, #0]
    d31c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d324:	781b      	ldrb	r3, [r3, #0]
    d326:	2bff      	cmp	r3, #255	; 0xff
    d328:	d105      	bne.n	d336 <radio_control_task+0x532>
    d32a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d332:	2200      	movs	r2, #0
    d334:	701a      	strb	r2, [r3, #0]
    d336:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	461a      	mov	r2, r3
    d342:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34a:	7819      	ldrb	r1, [r3, #0]
    d34c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d354:	5499      	strb	r1, [r3, r2]
    d356:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	781b      	ldrb	r3, [r3, #0]
    d360:	3301      	adds	r3, #1
    d362:	b2da      	uxtb	r2, r3
    d364:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36c:	701a      	strb	r2, [r3, #0]
    d36e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	2bff      	cmp	r3, #255	; 0xff
    d37a:	d105      	bne.n	d388 <radio_control_task+0x584>
    d37c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d384:	2200      	movs	r2, #0
    d386:	701a      	strb	r2, [r3, #0]
    d388:	f242 0339 	movw	r3, #8249	; 0x2039
    d38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d390:	781b      	ldrb	r3, [r3, #0]
    d392:	b2db      	uxtb	r3, r3
    d394:	f003 0310 	and.w	r3, r3, #16
    d398:	2b00      	cmp	r3, #0
    d39a:	d15a      	bne.n	d452 <radio_control_task+0x64e>
    d39c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a4:	781b      	ldrb	r3, [r3, #0]
    d3a6:	b2db      	uxtb	r3, r3
    d3a8:	461a      	mov	r2, r3
    d3aa:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b2:	5c9a      	ldrb	r2, [r3, r2]
    d3b4:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	701a      	strb	r2, [r3, #0]
    d3be:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    d3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c6:	2200      	movs	r2, #0
    d3c8:	701a      	strb	r2, [r3, #0]
    d3ca:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d2:	781b      	ldrb	r3, [r3, #0]
    d3d4:	b2db      	uxtb	r3, r3
    d3d6:	3301      	adds	r3, #1
    d3d8:	b2da      	uxtb	r2, r3
    d3da:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e2:	701a      	strb	r2, [r3, #0]
    d3e4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ec:	781b      	ldrb	r3, [r3, #0]
    d3ee:	b2db      	uxtb	r3, r3
    d3f0:	2bff      	cmp	r3, #255	; 0xff
    d3f2:	d105      	bne.n	d400 <radio_control_task+0x5fc>
    d3f4:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fc:	2200      	movs	r2, #0
    d3fe:	701a      	strb	r2, [r3, #0]
    d400:	f242 0338 	movw	r3, #8248	; 0x2038
    d404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d408:	f242 0238 	movw	r2, #8248	; 0x2038
    d40c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d410:	7812      	ldrb	r2, [r2, #0]
    d412:	b2d2      	uxtb	r2, r2
    d414:	f042 0201 	orr.w	r2, r2, #1
    d418:	b2d2      	uxtb	r2, r2
    d41a:	701a      	strb	r2, [r3, #0]
    d41c:	f242 0339 	movw	r3, #8249	; 0x2039
    d420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d424:	f242 0239 	movw	r2, #8249	; 0x2039
    d428:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d42c:	7812      	ldrb	r2, [r2, #0]
    d42e:	b2d2      	uxtb	r2, r2
    d430:	f042 0210 	orr.w	r2, r2, #16
    d434:	b2d2      	uxtb	r2, r2
    d436:	701a      	strb	r2, [r3, #0]
    d438:	e00b      	b.n	d452 <radio_control_task+0x64e>
    d43a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    d43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d442:	781b      	ldrb	r3, [r3, #0]
    d444:	3301      	adds	r3, #1
    d446:	b2da      	uxtb	r2, r3
    d448:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    d44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d450:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d452:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45a:	885b      	ldrh	r3, [r3, #2]
    d45c:	b21b      	sxth	r3, r3
    d45e:	4618      	mov	r0, r3
    d460:	f00a fe96 	bl	18190 <__aeabi_i2f>
    d464:	4603      	mov	r3, r0
    d466:	4618      	mov	r0, r3
    d468:	f04f 0100 	mov.w	r1, #0
    d46c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d470:	f00a ff96 	bl	183a0 <__aeabi_fdiv>
    d474:	4603      	mov	r3, r0
    d476:	4618      	mov	r0, r3
    d478:	f00a fa4a 	bl	17910 <__aeabi_f2d>
    d47c:	4602      	mov	r2, r0
    d47e:	460b      	mov	r3, r1
    d480:	4610      	mov	r0, r2
    d482:	4619      	mov	r1, r3
    d484:	a346      	add	r3, pc, #280	; (adr r3, d5a0 <radio_control_task+0x79c>)
    d486:	e9d3 2300 	ldrd	r2, r3, [r3]
    d48a:	f00a fa95 	bl	179b8 <__aeabi_dmul>
    d48e:	4602      	mov	r2, r0
    d490:	460b      	mov	r3, r1
    d492:	4610      	mov	r0, r2
    d494:	4619      	mov	r1, r3
    d496:	f04f 0200 	mov.w	r2, #0
    d49a:	f04f 0300 	mov.w	r3, #0
    d49e:	f00a f8d9 	bl	17654 <__adddf3>
    d4a2:	4602      	mov	r2, r0
    d4a4:	460b      	mov	r3, r1
    d4a6:	4610      	mov	r0, r2
    d4a8:	4619      	mov	r1, r3
    d4aa:	f00a fd67 	bl	17f7c <__aeabi_d2f>
    d4ae:	4602      	mov	r2, r0
    d4b0:	f24c 2314 	movw	r3, #49684	; 0xc214
    d4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b8:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d4ba:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c2:	889b      	ldrh	r3, [r3, #4]
    d4c4:	b21b      	sxth	r3, r3
    d4c6:	4618      	mov	r0, r3
    d4c8:	f00a fe62 	bl	18190 <__aeabi_i2f>
    d4cc:	4603      	mov	r3, r0
    d4ce:	4618      	mov	r0, r3
    d4d0:	f04f 0100 	mov.w	r1, #0
    d4d4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d4d8:	f00a ff62 	bl	183a0 <__aeabi_fdiv>
    d4dc:	4603      	mov	r3, r0
    d4de:	4618      	mov	r0, r3
    d4e0:	f00a fa16 	bl	17910 <__aeabi_f2d>
    d4e4:	4602      	mov	r2, r0
    d4e6:	460b      	mov	r3, r1
    d4e8:	4610      	mov	r0, r2
    d4ea:	4619      	mov	r1, r3
    d4ec:	f04f 0200 	mov.w	r2, #0
    d4f0:	f04f 0300 	mov.w	r3, #0
    d4f4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d4f8:	f00a fa5e 	bl	179b8 <__aeabi_dmul>
    d4fc:	4602      	mov	r2, r0
    d4fe:	460b      	mov	r3, r1
    d500:	4610      	mov	r0, r2
    d502:	4619      	mov	r1, r3
    d504:	f04f 0200 	mov.w	r2, #0
    d508:	f04f 0300 	mov.w	r3, #0
    d50c:	f00a f8a2 	bl	17654 <__adddf3>
    d510:	4602      	mov	r2, r0
    d512:	460b      	mov	r3, r1
    d514:	4610      	mov	r0, r2
    d516:	4619      	mov	r1, r3
    d518:	f00a fd30 	bl	17f7c <__aeabi_d2f>
    d51c:	4602      	mov	r2, r0
    d51e:	f24c 2318 	movw	r3, #49688	; 0xc218
    d522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d526:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d528:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d530:	881a      	ldrh	r2, [r3, #0]
    d532:	f24c 231c 	movw	r3, #49692	; 0xc21c
    d536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d53c:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	7c9a      	ldrb	r2, [r3, #18]
    d546:	f64b 63d4 	movw	r3, #48852	; 0xbed4
    d54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d550:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d558:	7d5a      	ldrb	r2, [r3, #21]
    d55a:	f64b 63d2 	movw	r3, #48850	; 0xbed2
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	701a      	strb	r2, [r3, #0]

    events_update();
    d564:	f7f9 fe7e 	bl	7264 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d568:	f7f8 fc7e 	bl	5e68 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d56c:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    d570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d574:	781b      	ldrb	r3, [r3, #0]
    d576:	2b02      	cmp	r3, #2
    d578:	d10e      	bne.n	d598 <radio_control_task+0x794>
    d57a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
    d57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d582:	881b      	ldrh	r3, [r3, #0]
    d584:	b21b      	sxth	r3, r3
    d586:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d58a:	dd05      	ble.n	d598 <radio_control_task+0x794>
	launch = TRUE;
    d58c:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    d590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d594:	2201      	movs	r2, #1
    d596:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d598:	3708      	adds	r7, #8
    d59a:	46bd      	mov	sp, r7
    d59c:	bd80      	pop	{r7, pc}
    d59e:	bf00      	nop
    d5a0:	33333333 	.word	0x33333333
    d5a4:	bfe33333 	.word	0xbfe33333

0000d5a8 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d5a8:	b580      	push	{r7, lr}
    d5aa:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d5ac:	f64b 63ce 	movw	r3, #48846	; 0xbece
    d5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b4:	2203      	movs	r2, #3
    d5b6:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d5b8:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    d5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c0:	781b      	ldrb	r3, [r3, #0]
    d5c2:	2b03      	cmp	r3, #3
    d5c4:	d102      	bne.n	d5cc <navigation_update+0x24>
    nav_home();
    d5c6:	f007 fa9b 	bl	14b00 <nav_home>
    d5ca:	e001      	b.n	d5d0 <navigation_update+0x28>
  else
    nav_update();
    d5cc:	f007 fabe 	bl	14b4c <nav_update>
}
    d5d0:	bd80      	pop	{r7, pc}
    d5d2:	bf00      	nop

0000d5d4 <send_nav_values>:

void send_nav_values(void){
    d5d4:	b480      	push	{r7}
    d5d6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d5d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e0:	781a      	ldrb	r2, [r3, #0]
    d5e2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	b2db      	uxtb	r3, r3
    d5ee:	429a      	cmp	r2, r3
    d5f0:	d313      	bcc.n	d61a <send_nav_values+0x46>
    d5f2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fa:	781b      	ldrb	r3, [r3, #0]
    d5fc:	b2db      	uxtb	r3, r3
    d5fe:	461a      	mov	r2, r3
    d600:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d608:	781b      	ldrb	r3, [r3, #0]
    d60a:	1ad3      	subs	r3, r2, r3
    d60c:	33ff      	adds	r3, #255	; 0xff
    d60e:	2b1e      	cmp	r3, #30
    d610:	bfd4      	ite	le
    d612:	2300      	movle	r3, #0
    d614:	2301      	movgt	r3, #1
    d616:	b2db      	uxtb	r3, r3
    d618:	e011      	b.n	d63e <send_nav_values+0x6a>
    d61a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	781b      	ldrb	r3, [r3, #0]
    d624:	b2db      	uxtb	r3, r3
    d626:	461a      	mov	r2, r3
    d628:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d630:	781b      	ldrb	r3, [r3, #0]
    d632:	1ad3      	subs	r3, r2, r3
    d634:	2b1e      	cmp	r3, #30
    d636:	bfd4      	ite	le
    d638:	2300      	movle	r3, #0
    d63a:	2301      	movgt	r3, #1
    d63c:	b2db      	uxtb	r3, r3
    d63e:	2b00      	cmp	r3, #0
    d640:	f001 8094 	beq.w	e76c <send_nav_values+0x1198>
    d644:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64c:	781b      	ldrb	r3, [r3, #0]
    d64e:	461a      	mov	r2, r3
    d650:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d658:	2105      	movs	r1, #5
    d65a:	5499      	strb	r1, [r3, r2]
    d65c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	3301      	adds	r3, #1
    d668:	b2da      	uxtb	r2, r3
    d66a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	701a      	strb	r2, [r3, #0]
    d674:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67c:	781b      	ldrb	r3, [r3, #0]
    d67e:	2bff      	cmp	r3, #255	; 0xff
    d680:	d105      	bne.n	d68e <send_nav_values+0xba>
    d682:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68a:	2200      	movs	r2, #0
    d68c:	701a      	strb	r2, [r3, #0]
    d68e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	461a      	mov	r2, r3
    d69a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a2:	210a      	movs	r1, #10
    d6a4:	5499      	strb	r1, [r3, r2]
    d6a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ae:	781b      	ldrb	r3, [r3, #0]
    d6b0:	3301      	adds	r3, #1
    d6b2:	b2da      	uxtb	r2, r3
    d6b4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6bc:	701a      	strb	r2, [r3, #0]
    d6be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c6:	781b      	ldrb	r3, [r3, #0]
    d6c8:	2bff      	cmp	r3, #255	; 0xff
    d6ca:	d105      	bne.n	d6d8 <send_nav_values+0x104>
    d6cc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d4:	2200      	movs	r2, #0
    d6d6:	701a      	strb	r2, [r3, #0]
    d6d8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e0:	220a      	movs	r2, #10
    d6e2:	701a      	strb	r2, [r3, #0]
    d6e4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ec:	220a      	movs	r2, #10
    d6ee:	701a      	strb	r2, [r3, #0]
    d6f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f8:	781b      	ldrb	r3, [r3, #0]
    d6fa:	461a      	mov	r2, r3
    d6fc:	f24c 2341 	movw	r3, #49729	; 0xc241
    d700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d704:	7819      	ldrb	r1, [r3, #0]
    d706:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70e:	5499      	strb	r1, [r3, r2]
    d710:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d718:	781a      	ldrb	r2, [r3, #0]
    d71a:	f24c 2341 	movw	r3, #49729	; 0xc241
    d71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d722:	781b      	ldrb	r3, [r3, #0]
    d724:	4413      	add	r3, r2
    d726:	b2da      	uxtb	r2, r3
    d728:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d730:	701a      	strb	r2, [r3, #0]
    d732:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73a:	781a      	ldrb	r2, [r3, #0]
    d73c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d744:	781b      	ldrb	r3, [r3, #0]
    d746:	4413      	add	r3, r2
    d748:	b2da      	uxtb	r2, r3
    d74a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d752:	701a      	strb	r2, [r3, #0]
    d754:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	781b      	ldrb	r3, [r3, #0]
    d75e:	3301      	adds	r3, #1
    d760:	b2da      	uxtb	r2, r3
    d762:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d76a:	701a      	strb	r2, [r3, #0]
    d76c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d774:	781b      	ldrb	r3, [r3, #0]
    d776:	2bff      	cmp	r3, #255	; 0xff
    d778:	d105      	bne.n	d786 <send_nav_values+0x1b2>
    d77a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d782:	2200      	movs	r2, #0
    d784:	701a      	strb	r2, [r3, #0]
    d786:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78e:	781b      	ldrb	r3, [r3, #0]
    d790:	461a      	mov	r2, r3
    d792:	f24c 2340 	movw	r3, #49728	; 0xc240
    d796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79a:	7819      	ldrb	r1, [r3, #0]
    d79c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a4:	5499      	strb	r1, [r3, r2]
    d7a6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ae:	781a      	ldrb	r2, [r3, #0]
    d7b0:	f24c 2340 	movw	r3, #49728	; 0xc240
    d7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b8:	781b      	ldrb	r3, [r3, #0]
    d7ba:	4413      	add	r3, r2
    d7bc:	b2da      	uxtb	r2, r3
    d7be:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c6:	701a      	strb	r2, [r3, #0]
    d7c8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d0:	781a      	ldrb	r2, [r3, #0]
    d7d2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7da:	781b      	ldrb	r3, [r3, #0]
    d7dc:	4413      	add	r3, r2
    d7de:	b2da      	uxtb	r2, r3
    d7e0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e8:	701a      	strb	r2, [r3, #0]
    d7ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f2:	781b      	ldrb	r3, [r3, #0]
    d7f4:	3301      	adds	r3, #1
    d7f6:	b2da      	uxtb	r2, r3
    d7f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	701a      	strb	r2, [r3, #0]
    d802:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80a:	781b      	ldrb	r3, [r3, #0]
    d80c:	2bff      	cmp	r3, #255	; 0xff
    d80e:	d105      	bne.n	d81c <send_nav_values+0x248>
    d810:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d818:	2200      	movs	r2, #0
    d81a:	701a      	strb	r2, [r3, #0]
    d81c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d824:	781b      	ldrb	r3, [r3, #0]
    d826:	461a      	mov	r2, r3
    d828:	f24c 439c 	movw	r3, #50332	; 0xc49c
    d82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d830:	7819      	ldrb	r1, [r3, #0]
    d832:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	5499      	strb	r1, [r3, r2]
    d83c:	f24c 439c 	movw	r3, #50332	; 0xc49c
    d840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d844:	781a      	ldrb	r2, [r3, #0]
    d846:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d84e:	781b      	ldrb	r3, [r3, #0]
    d850:	4413      	add	r3, r2
    d852:	b2da      	uxtb	r2, r3
    d854:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85c:	701a      	strb	r2, [r3, #0]
    d85e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d866:	781a      	ldrb	r2, [r3, #0]
    d868:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d870:	781b      	ldrb	r3, [r3, #0]
    d872:	4413      	add	r3, r2
    d874:	b2da      	uxtb	r2, r3
    d876:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87e:	701a      	strb	r2, [r3, #0]
    d880:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	3301      	adds	r3, #1
    d88c:	b2da      	uxtb	r2, r3
    d88e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d896:	701a      	strb	r2, [r3, #0]
    d898:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a0:	781b      	ldrb	r3, [r3, #0]
    d8a2:	2bff      	cmp	r3, #255	; 0xff
    d8a4:	d105      	bne.n	d8b2 <send_nav_values+0x2de>
    d8a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ae:	2200      	movs	r2, #0
    d8b0:	701a      	strb	r2, [r3, #0]
    d8b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ba:	781b      	ldrb	r3, [r3, #0]
    d8bc:	461a      	mov	r2, r3
    d8be:	f24c 439c 	movw	r3, #50332	; 0xc49c
    d8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c6:	7859      	ldrb	r1, [r3, #1]
    d8c8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	5499      	strb	r1, [r3, r2]
    d8d2:	4bd2      	ldr	r3, [pc, #840]	; (dc1c <send_nav_values+0x648>)
    d8d4:	781a      	ldrb	r2, [r3, #0]
    d8d6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8de:	781b      	ldrb	r3, [r3, #0]
    d8e0:	4413      	add	r3, r2
    d8e2:	b2da      	uxtb	r2, r3
    d8e4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ec:	701a      	strb	r2, [r3, #0]
    d8ee:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f6:	781a      	ldrb	r2, [r3, #0]
    d8f8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d900:	781b      	ldrb	r3, [r3, #0]
    d902:	4413      	add	r3, r2
    d904:	b2da      	uxtb	r2, r3
    d906:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90e:	701a      	strb	r2, [r3, #0]
    d910:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d918:	781b      	ldrb	r3, [r3, #0]
    d91a:	3301      	adds	r3, #1
    d91c:	b2da      	uxtb	r2, r3
    d91e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d926:	701a      	strb	r2, [r3, #0]
    d928:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d930:	781b      	ldrb	r3, [r3, #0]
    d932:	2bff      	cmp	r3, #255	; 0xff
    d934:	d105      	bne.n	d942 <send_nav_values+0x36e>
    d936:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93e:	2200      	movs	r2, #0
    d940:	701a      	strb	r2, [r3, #0]
    d942:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94a:	781b      	ldrb	r3, [r3, #0]
    d94c:	461a      	mov	r2, r3
    d94e:	f24c 439c 	movw	r3, #50332	; 0xc49c
    d952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d956:	7899      	ldrb	r1, [r3, #2]
    d958:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d960:	5499      	strb	r1, [r3, r2]
    d962:	4baf      	ldr	r3, [pc, #700]	; (dc20 <send_nav_values+0x64c>)
    d964:	781a      	ldrb	r2, [r3, #0]
    d966:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96e:	781b      	ldrb	r3, [r3, #0]
    d970:	4413      	add	r3, r2
    d972:	b2da      	uxtb	r2, r3
    d974:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97c:	701a      	strb	r2, [r3, #0]
    d97e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d986:	781a      	ldrb	r2, [r3, #0]
    d988:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d990:	781b      	ldrb	r3, [r3, #0]
    d992:	4413      	add	r3, r2
    d994:	b2da      	uxtb	r2, r3
    d996:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    d99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99e:	701a      	strb	r2, [r3, #0]
    d9a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	781b      	ldrb	r3, [r3, #0]
    d9aa:	3301      	adds	r3, #1
    d9ac:	b2da      	uxtb	r2, r3
    d9ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b6:	701a      	strb	r2, [r3, #0]
    d9b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	2bff      	cmp	r3, #255	; 0xff
    d9c4:	d105      	bne.n	d9d2 <send_nav_values+0x3fe>
    d9c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ce:	2200      	movs	r2, #0
    d9d0:	701a      	strb	r2, [r3, #0]
    d9d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    d9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	461a      	mov	r2, r3
    d9de:	f24c 439c 	movw	r3, #50332	; 0xc49c
    d9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e6:	78d9      	ldrb	r1, [r3, #3]
    d9e8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    d9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f0:	5499      	strb	r1, [r3, r2]
    d9f2:	4b8c      	ldr	r3, [pc, #560]	; (dc24 <send_nav_values+0x650>)
    d9f4:	781a      	ldrb	r2, [r3, #0]
    d9f6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    d9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fe:	781b      	ldrb	r3, [r3, #0]
    da00:	4413      	add	r3, r2
    da02:	b2da      	uxtb	r2, r3
    da04:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	701a      	strb	r2, [r3, #0]
    da0e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	781a      	ldrb	r2, [r3, #0]
    da18:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    da1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	4413      	add	r3, r2
    da24:	b2da      	uxtb	r2, r3
    da26:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    da2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2e:	701a      	strb	r2, [r3, #0]
    da30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	3301      	adds	r3, #1
    da3c:	b2da      	uxtb	r2, r3
    da3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    da42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da46:	701a      	strb	r2, [r3, #0]
    da48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    da4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	2bff      	cmp	r3, #255	; 0xff
    da54:	d105      	bne.n	da62 <send_nav_values+0x48e>
    da56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    da5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5e:	2200      	movs	r2, #0
    da60:	701a      	strb	r2, [r3, #0]
    da62:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    da66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6a:	781b      	ldrb	r3, [r3, #0]
    da6c:	461a      	mov	r2, r3
    da6e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    da72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da76:	7819      	ldrb	r1, [r3, #0]
    da78:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	5499      	strb	r1, [r3, r2]
    da82:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    da86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8a:	781a      	ldrb	r2, [r3, #0]
    da8c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    da90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da94:	781b      	ldrb	r3, [r3, #0]
    da96:	4413      	add	r3, r2
    da98:	b2da      	uxtb	r2, r3
    da9a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    da9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa2:	701a      	strb	r2, [r3, #0]
    daa4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    daa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daac:	781a      	ldrb	r2, [r3, #0]
    daae:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	781b      	ldrb	r3, [r3, #0]
    dab8:	4413      	add	r3, r2
    daba:	b2da      	uxtb	r2, r3
    dabc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac4:	701a      	strb	r2, [r3, #0]
    dac6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	781b      	ldrb	r3, [r3, #0]
    dad0:	3301      	adds	r3, #1
    dad2:	b2da      	uxtb	r2, r3
    dad4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dadc:	701a      	strb	r2, [r3, #0]
    dade:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	2bff      	cmp	r3, #255	; 0xff
    daea:	d105      	bne.n	daf8 <send_nav_values+0x524>
    daec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    daf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf4:	2200      	movs	r2, #0
    daf6:	701a      	strb	r2, [r3, #0]
    daf8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db00:	781b      	ldrb	r3, [r3, #0]
    db02:	461a      	mov	r2, r3
    db04:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    db08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0c:	7859      	ldrb	r1, [r3, #1]
    db0e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	5499      	strb	r1, [r3, r2]
    db18:	4b43      	ldr	r3, [pc, #268]	; (dc28 <send_nav_values+0x654>)
    db1a:	781a      	ldrb	r2, [r3, #0]
    db1c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    db20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db24:	781b      	ldrb	r3, [r3, #0]
    db26:	4413      	add	r3, r2
    db28:	b2da      	uxtb	r2, r3
    db2a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    db2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db32:	701a      	strb	r2, [r3, #0]
    db34:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    db38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3c:	781a      	ldrb	r2, [r3, #0]
    db3e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	4413      	add	r3, r2
    db4a:	b2da      	uxtb	r2, r3
    db4c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    db50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db54:	701a      	strb	r2, [r3, #0]
    db56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    db5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5e:	781b      	ldrb	r3, [r3, #0]
    db60:	3301      	adds	r3, #1
    db62:	b2da      	uxtb	r2, r3
    db64:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    db68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6c:	701a      	strb	r2, [r3, #0]
    db6e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    db72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db76:	781b      	ldrb	r3, [r3, #0]
    db78:	2bff      	cmp	r3, #255	; 0xff
    db7a:	d105      	bne.n	db88 <send_nav_values+0x5b4>
    db7c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    db80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db84:	2200      	movs	r2, #0
    db86:	701a      	strb	r2, [r3, #0]
    db88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    db8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db90:	781b      	ldrb	r3, [r3, #0]
    db92:	461a      	mov	r2, r3
    db94:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    db98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9c:	7899      	ldrb	r1, [r3, #2]
    db9e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    dba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba6:	5499      	strb	r1, [r3, r2]
    dba8:	4b20      	ldr	r3, [pc, #128]	; (dc2c <send_nav_values+0x658>)
    dbaa:	781a      	ldrb	r2, [r3, #0]
    dbac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb4:	781b      	ldrb	r3, [r3, #0]
    dbb6:	4413      	add	r3, r2
    dbb8:	b2da      	uxtb	r2, r3
    dbba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dbbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc2:	701a      	strb	r2, [r3, #0]
    dbc4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbcc:	781a      	ldrb	r2, [r3, #0]
    dbce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	4413      	add	r3, r2
    dbda:	b2da      	uxtb	r2, r3
    dbdc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe4:	701a      	strb	r2, [r3, #0]
    dbe6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	3301      	adds	r3, #1
    dbf2:	b2da      	uxtb	r2, r3
    dbf4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfc:	701a      	strb	r2, [r3, #0]
    dbfe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	2bff      	cmp	r3, #255	; 0xff
    dc0a:	d111      	bne.n	dc30 <send_nav_values+0x65c>
    dc0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc14:	2200      	movs	r2, #0
    dc16:	701a      	strb	r2, [r3, #0]
    dc18:	e00a      	b.n	dc30 <send_nav_values+0x65c>
    dc1a:	bf00      	nop
    dc1c:	2004c49d 	.word	0x2004c49d
    dc20:	2004c49e 	.word	0x2004c49e
    dc24:	2004c49f 	.word	0x2004c49f
    dc28:	2004c4a1 	.word	0x2004c4a1
    dc2c:	2004c4a2 	.word	0x2004c4a2
    dc30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	461a      	mov	r2, r3
    dc3c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    dc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc44:	78d9      	ldrb	r1, [r3, #3]
    dc46:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	5499      	strb	r1, [r3, r2]
    dc50:	4bd3      	ldr	r3, [pc, #844]	; (dfa0 <send_nav_values+0x9cc>)
    dc52:	781a      	ldrb	r2, [r3, #0]
    dc54:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5c:	781b      	ldrb	r3, [r3, #0]
    dc5e:	4413      	add	r3, r2
    dc60:	b2da      	uxtb	r2, r3
    dc62:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6a:	701a      	strb	r2, [r3, #0]
    dc6c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc74:	781a      	ldrb	r2, [r3, #0]
    dc76:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	781b      	ldrb	r3, [r3, #0]
    dc80:	4413      	add	r3, r2
    dc82:	b2da      	uxtb	r2, r3
    dc84:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	3301      	adds	r3, #1
    dc9a:	b2da      	uxtb	r2, r3
    dc9c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca4:	701a      	strb	r2, [r3, #0]
    dca6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	781b      	ldrb	r3, [r3, #0]
    dcb0:	2bff      	cmp	r3, #255	; 0xff
    dcb2:	d105      	bne.n	dcc0 <send_nav_values+0x6ec>
    dcb4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dcb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbc:	2200      	movs	r2, #0
    dcbe:	701a      	strb	r2, [r3, #0]
    dcc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc8:	781b      	ldrb	r3, [r3, #0]
    dcca:	461a      	mov	r2, r3
    dccc:	f24c 232c 	movw	r3, #49708	; 0xc22c
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	7819      	ldrb	r1, [r3, #0]
    dcd6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    dcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcde:	5499      	strb	r1, [r3, r2]
    dce0:	f24c 232c 	movw	r3, #49708	; 0xc22c
    dce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce8:	781a      	ldrb	r2, [r3, #0]
    dcea:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dcee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf2:	781b      	ldrb	r3, [r3, #0]
    dcf4:	4413      	add	r3, r2
    dcf6:	b2da      	uxtb	r2, r3
    dcf8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd00:	701a      	strb	r2, [r3, #0]
    dd02:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dd06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0a:	781a      	ldrb	r2, [r3, #0]
    dd0c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	781b      	ldrb	r3, [r3, #0]
    dd16:	4413      	add	r3, r2
    dd18:	b2da      	uxtb	r2, r3
    dd1a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd22:	701a      	strb	r2, [r3, #0]
    dd24:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	781b      	ldrb	r3, [r3, #0]
    dd2e:	3301      	adds	r3, #1
    dd30:	b2da      	uxtb	r2, r3
    dd32:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3a:	701a      	strb	r2, [r3, #0]
    dd3c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	2bff      	cmp	r3, #255	; 0xff
    dd48:	d105      	bne.n	dd56 <send_nav_values+0x782>
    dd4a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	2200      	movs	r2, #0
    dd54:	701a      	strb	r2, [r3, #0]
    dd56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5e:	781b      	ldrb	r3, [r3, #0]
    dd60:	461a      	mov	r2, r3
    dd62:	f24c 232c 	movw	r3, #49708	; 0xc22c
    dd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6a:	7859      	ldrb	r1, [r3, #1]
    dd6c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	5499      	strb	r1, [r3, r2]
    dd76:	4b8b      	ldr	r3, [pc, #556]	; (dfa4 <send_nav_values+0x9d0>)
    dd78:	781a      	ldrb	r2, [r3, #0]
    dd7a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd82:	781b      	ldrb	r3, [r3, #0]
    dd84:	4413      	add	r3, r2
    dd86:	b2da      	uxtb	r2, r3
    dd88:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd90:	701a      	strb	r2, [r3, #0]
    dd92:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9a:	781a      	ldrb	r2, [r3, #0]
    dd9c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	781b      	ldrb	r3, [r3, #0]
    dda6:	4413      	add	r3, r2
    dda8:	b2da      	uxtb	r2, r3
    ddaa:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ddae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb2:	701a      	strb	r2, [r3, #0]
    ddb4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ddb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbc:	781b      	ldrb	r3, [r3, #0]
    ddbe:	3301      	adds	r3, #1
    ddc0:	b2da      	uxtb	r2, r3
    ddc2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ddc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddca:	701a      	strb	r2, [r3, #0]
    ddcc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ddd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd4:	781b      	ldrb	r3, [r3, #0]
    ddd6:	2bff      	cmp	r3, #255	; 0xff
    ddd8:	d105      	bne.n	dde6 <send_nav_values+0x812>
    ddda:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ddde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde2:	2200      	movs	r2, #0
    dde4:	701a      	strb	r2, [r3, #0]
    dde6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ddea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	461a      	mov	r2, r3
    ddf2:	f24c 232c 	movw	r3, #49708	; 0xc22c
    ddf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfa:	7899      	ldrb	r1, [r3, #2]
    ddfc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    de00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de04:	5499      	strb	r1, [r3, r2]
    de06:	4b68      	ldr	r3, [pc, #416]	; (dfa8 <send_nav_values+0x9d4>)
    de08:	781a      	ldrb	r2, [r3, #0]
    de0a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    de0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de12:	781b      	ldrb	r3, [r3, #0]
    de14:	4413      	add	r3, r2
    de16:	b2da      	uxtb	r2, r3
    de18:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    de1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de20:	701a      	strb	r2, [r3, #0]
    de22:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    de26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2a:	781a      	ldrb	r2, [r3, #0]
    de2c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	781b      	ldrb	r3, [r3, #0]
    de36:	4413      	add	r3, r2
    de38:	b2da      	uxtb	r2, r3
    de3a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    de3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de42:	701a      	strb	r2, [r3, #0]
    de44:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	781b      	ldrb	r3, [r3, #0]
    de4e:	3301      	adds	r3, #1
    de50:	b2da      	uxtb	r2, r3
    de52:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    de56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5a:	701a      	strb	r2, [r3, #0]
    de5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	2bff      	cmp	r3, #255	; 0xff
    de68:	d105      	bne.n	de76 <send_nav_values+0x8a2>
    de6a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    de6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de72:	2200      	movs	r2, #0
    de74:	701a      	strb	r2, [r3, #0]
    de76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    de7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7e:	781b      	ldrb	r3, [r3, #0]
    de80:	461a      	mov	r2, r3
    de82:	f24c 232c 	movw	r3, #49708	; 0xc22c
    de86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8a:	78d9      	ldrb	r1, [r3, #3]
    de8c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	5499      	strb	r1, [r3, r2]
    de96:	4b45      	ldr	r3, [pc, #276]	; (dfac <send_nav_values+0x9d8>)
    de98:	781a      	ldrb	r2, [r3, #0]
    de9a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    de9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	4413      	add	r3, r2
    dea6:	b2da      	uxtb	r2, r3
    dea8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    deac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb0:	701a      	strb	r2, [r3, #0]
    deb2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    deb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deba:	781a      	ldrb	r2, [r3, #0]
    debc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	4413      	add	r3, r2
    dec8:	b2da      	uxtb	r2, r3
    deca:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	781b      	ldrb	r3, [r3, #0]
    dede:	3301      	adds	r3, #1
    dee0:	b2da      	uxtb	r2, r3
    dee2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deea:	701a      	strb	r2, [r3, #0]
    deec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	781b      	ldrb	r3, [r3, #0]
    def6:	2bff      	cmp	r3, #255	; 0xff
    def8:	d105      	bne.n	df06 <send_nav_values+0x932>
    defa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    defe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df02:	2200      	movs	r2, #0
    df04:	701a      	strb	r2, [r3, #0]
    df06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    df0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	461a      	mov	r2, r3
    df12:	f24c 2374 	movw	r3, #49780	; 0xc274
    df16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1a:	7819      	ldrb	r1, [r3, #0]
    df1c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	5499      	strb	r1, [r3, r2]
    df26:	f24c 2374 	movw	r3, #49780	; 0xc274
    df2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2e:	781a      	ldrb	r2, [r3, #0]
    df30:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    df34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	4413      	add	r3, r2
    df3c:	b2da      	uxtb	r2, r3
    df3e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    df42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df46:	701a      	strb	r2, [r3, #0]
    df48:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    df4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df50:	781a      	ldrb	r2, [r3, #0]
    df52:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	781b      	ldrb	r3, [r3, #0]
    df5c:	4413      	add	r3, r2
    df5e:	b2da      	uxtb	r2, r3
    df60:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    df64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df68:	701a      	strb	r2, [r3, #0]
    df6a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	781b      	ldrb	r3, [r3, #0]
    df74:	3301      	adds	r3, #1
    df76:	b2da      	uxtb	r2, r3
    df78:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    df7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df80:	701a      	strb	r2, [r3, #0]
    df82:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	781b      	ldrb	r3, [r3, #0]
    df8c:	2bff      	cmp	r3, #255	; 0xff
    df8e:	d10f      	bne.n	dfb0 <send_nav_values+0x9dc>
    df90:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    df94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df98:	2200      	movs	r2, #0
    df9a:	701a      	strb	r2, [r3, #0]
    df9c:	e008      	b.n	dfb0 <send_nav_values+0x9dc>
    df9e:	bf00      	nop
    dfa0:	2004c4a3 	.word	0x2004c4a3
    dfa4:	2004c22d 	.word	0x2004c22d
    dfa8:	2004c22e 	.word	0x2004c22e
    dfac:	2004c22f 	.word	0x2004c22f
    dfb0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    dfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb8:	781b      	ldrb	r3, [r3, #0]
    dfba:	461a      	mov	r2, r3
    dfbc:	f24c 2374 	movw	r3, #49780	; 0xc274
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	7859      	ldrb	r1, [r3, #1]
    dfc6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    dfca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfce:	5499      	strb	r1, [r3, r2]
    dfd0:	4bd1      	ldr	r3, [pc, #836]	; (e318 <send_nav_values+0xd44>)
    dfd2:	781a      	ldrb	r2, [r3, #0]
    dfd4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	4413      	add	r3, r2
    dfe0:	b2da      	uxtb	r2, r3
    dfe2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	701a      	strb	r2, [r3, #0]
    dfec:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	781a      	ldrb	r2, [r3, #0]
    dff6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    dffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffe:	781b      	ldrb	r3, [r3, #0]
    e000:	4413      	add	r3, r2
    e002:	b2da      	uxtb	r2, r3
    e004:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00c:	701a      	strb	r2, [r3, #0]
    e00e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e016:	781b      	ldrb	r3, [r3, #0]
    e018:	3301      	adds	r3, #1
    e01a:	b2da      	uxtb	r2, r3
    e01c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e024:	701a      	strb	r2, [r3, #0]
    e026:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02e:	781b      	ldrb	r3, [r3, #0]
    e030:	2bff      	cmp	r3, #255	; 0xff
    e032:	d105      	bne.n	e040 <send_nav_values+0xa6c>
    e034:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03c:	2200      	movs	r2, #0
    e03e:	701a      	strb	r2, [r3, #0]
    e040:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e048:	781b      	ldrb	r3, [r3, #0]
    e04a:	461a      	mov	r2, r3
    e04c:	f24c 2374 	movw	r3, #49780	; 0xc274
    e050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e054:	7899      	ldrb	r1, [r3, #2]
    e056:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05e:	5499      	strb	r1, [r3, r2]
    e060:	4bae      	ldr	r3, [pc, #696]	; (e31c <send_nav_values+0xd48>)
    e062:	781a      	ldrb	r2, [r3, #0]
    e064:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	4413      	add	r3, r2
    e070:	b2da      	uxtb	r2, r3
    e072:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07a:	701a      	strb	r2, [r3, #0]
    e07c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e084:	781a      	ldrb	r2, [r3, #0]
    e086:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08e:	781b      	ldrb	r3, [r3, #0]
    e090:	4413      	add	r3, r2
    e092:	b2da      	uxtb	r2, r3
    e094:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09c:	701a      	strb	r2, [r3, #0]
    e09e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a6:	781b      	ldrb	r3, [r3, #0]
    e0a8:	3301      	adds	r3, #1
    e0aa:	b2da      	uxtb	r2, r3
    e0ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b4:	701a      	strb	r2, [r3, #0]
    e0b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	2bff      	cmp	r3, #255	; 0xff
    e0c2:	d105      	bne.n	e0d0 <send_nav_values+0xafc>
    e0c4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	2200      	movs	r2, #0
    e0ce:	701a      	strb	r2, [r3, #0]
    e0d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d8:	781b      	ldrb	r3, [r3, #0]
    e0da:	461a      	mov	r2, r3
    e0dc:	f24c 2374 	movw	r3, #49780	; 0xc274
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	78d9      	ldrb	r1, [r3, #3]
    e0e6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ee:	5499      	strb	r1, [r3, r2]
    e0f0:	4b8b      	ldr	r3, [pc, #556]	; (e320 <send_nav_values+0xd4c>)
    e0f2:	781a      	ldrb	r2, [r3, #0]
    e0f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	4413      	add	r3, r2
    e100:	b2da      	uxtb	r2, r3
    e102:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	701a      	strb	r2, [r3, #0]
    e10c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	781a      	ldrb	r2, [r3, #0]
    e116:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	4413      	add	r3, r2
    e122:	b2da      	uxtb	r2, r3
    e124:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12c:	701a      	strb	r2, [r3, #0]
    e12e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e136:	781b      	ldrb	r3, [r3, #0]
    e138:	3301      	adds	r3, #1
    e13a:	b2da      	uxtb	r2, r3
    e13c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e144:	701a      	strb	r2, [r3, #0]
    e146:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	2bff      	cmp	r3, #255	; 0xff
    e152:	d105      	bne.n	e160 <send_nav_values+0xb8c>
    e154:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15c:	2200      	movs	r2, #0
    e15e:	701a      	strb	r2, [r3, #0]
    e160:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e168:	781b      	ldrb	r3, [r3, #0]
    e16a:	461a      	mov	r2, r3
    e16c:	f240 4308 	movw	r3, #1032	; 0x408
    e170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e174:	7819      	ldrb	r1, [r3, #0]
    e176:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17e:	5499      	strb	r1, [r3, r2]
    e180:	f240 4308 	movw	r3, #1032	; 0x408
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	781a      	ldrb	r2, [r3, #0]
    e18a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e192:	781b      	ldrb	r3, [r3, #0]
    e194:	4413      	add	r3, r2
    e196:	b2da      	uxtb	r2, r3
    e198:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a0:	701a      	strb	r2, [r3, #0]
    e1a2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1aa:	781a      	ldrb	r2, [r3, #0]
    e1ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	781b      	ldrb	r3, [r3, #0]
    e1b6:	4413      	add	r3, r2
    e1b8:	b2da      	uxtb	r2, r3
    e1ba:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c2:	701a      	strb	r2, [r3, #0]
    e1c4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	3301      	adds	r3, #1
    e1d0:	b2da      	uxtb	r2, r3
    e1d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1da:	701a      	strb	r2, [r3, #0]
    e1dc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	2bff      	cmp	r3, #255	; 0xff
    e1e8:	d105      	bne.n	e1f6 <send_nav_values+0xc22>
    e1ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f2:	2200      	movs	r2, #0
    e1f4:	701a      	strb	r2, [r3, #0]
    e1f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fe:	781b      	ldrb	r3, [r3, #0]
    e200:	461a      	mov	r2, r3
    e202:	f240 4308 	movw	r3, #1032	; 0x408
    e206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20a:	7859      	ldrb	r1, [r3, #1]
    e20c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	5499      	strb	r1, [r3, r2]
    e216:	4b43      	ldr	r3, [pc, #268]	; (e324 <send_nav_values+0xd50>)
    e218:	781a      	ldrb	r2, [r3, #0]
    e21a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e222:	781b      	ldrb	r3, [r3, #0]
    e224:	4413      	add	r3, r2
    e226:	b2da      	uxtb	r2, r3
    e228:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e230:	701a      	strb	r2, [r3, #0]
    e232:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23a:	781a      	ldrb	r2, [r3, #0]
    e23c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e244:	781b      	ldrb	r3, [r3, #0]
    e246:	4413      	add	r3, r2
    e248:	b2da      	uxtb	r2, r3
    e24a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e252:	701a      	strb	r2, [r3, #0]
    e254:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25c:	781b      	ldrb	r3, [r3, #0]
    e25e:	3301      	adds	r3, #1
    e260:	b2da      	uxtb	r2, r3
    e262:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26a:	701a      	strb	r2, [r3, #0]
    e26c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e274:	781b      	ldrb	r3, [r3, #0]
    e276:	2bff      	cmp	r3, #255	; 0xff
    e278:	d105      	bne.n	e286 <send_nav_values+0xcb2>
    e27a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e282:	2200      	movs	r2, #0
    e284:	701a      	strb	r2, [r3, #0]
    e286:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28e:	781b      	ldrb	r3, [r3, #0]
    e290:	461a      	mov	r2, r3
    e292:	f240 4308 	movw	r3, #1032	; 0x408
    e296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29a:	7899      	ldrb	r1, [r3, #2]
    e29c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a4:	5499      	strb	r1, [r3, r2]
    e2a6:	4b20      	ldr	r3, [pc, #128]	; (e328 <send_nav_values+0xd54>)
    e2a8:	781a      	ldrb	r2, [r3, #0]
    e2aa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b2:	781b      	ldrb	r3, [r3, #0]
    e2b4:	4413      	add	r3, r2
    e2b6:	b2da      	uxtb	r2, r3
    e2b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c0:	701a      	strb	r2, [r3, #0]
    e2c2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ca:	781a      	ldrb	r2, [r3, #0]
    e2cc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d4:	781b      	ldrb	r3, [r3, #0]
    e2d6:	4413      	add	r3, r2
    e2d8:	b2da      	uxtb	r2, r3
    e2da:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e2:	701a      	strb	r2, [r3, #0]
    e2e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ec:	781b      	ldrb	r3, [r3, #0]
    e2ee:	3301      	adds	r3, #1
    e2f0:	b2da      	uxtb	r2, r3
    e2f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fa:	701a      	strb	r2, [r3, #0]
    e2fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e304:	781b      	ldrb	r3, [r3, #0]
    e306:	2bff      	cmp	r3, #255	; 0xff
    e308:	d110      	bne.n	e32c <send_nav_values+0xd58>
    e30a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e312:	2200      	movs	r2, #0
    e314:	701a      	strb	r2, [r3, #0]
    e316:	e009      	b.n	e32c <send_nav_values+0xd58>
    e318:	2004c275 	.word	0x2004c275
    e31c:	2004c276 	.word	0x2004c276
    e320:	2004c277 	.word	0x2004c277
    e324:	20000409 	.word	0x20000409
    e328:	2000040a 	.word	0x2000040a
    e32c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e334:	781b      	ldrb	r3, [r3, #0]
    e336:	461a      	mov	r2, r3
    e338:	f240 4308 	movw	r3, #1032	; 0x408
    e33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e340:	78d9      	ldrb	r1, [r3, #3]
    e342:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e34a:	5499      	strb	r1, [r3, r2]
    e34c:	4bc2      	ldr	r3, [pc, #776]	; (e658 <send_nav_values+0x1084>)
    e34e:	781a      	ldrb	r2, [r3, #0]
    e350:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	4413      	add	r3, r2
    e35c:	b2da      	uxtb	r2, r3
    e35e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e366:	701a      	strb	r2, [r3, #0]
    e368:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e370:	781a      	ldrb	r2, [r3, #0]
    e372:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37a:	781b      	ldrb	r3, [r3, #0]
    e37c:	4413      	add	r3, r2
    e37e:	b2da      	uxtb	r2, r3
    e380:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e388:	701a      	strb	r2, [r3, #0]
    e38a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e392:	781b      	ldrb	r3, [r3, #0]
    e394:	3301      	adds	r3, #1
    e396:	b2da      	uxtb	r2, r3
    e398:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a0:	701a      	strb	r2, [r3, #0]
    e3a2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3aa:	781b      	ldrb	r3, [r3, #0]
    e3ac:	2bff      	cmp	r3, #255	; 0xff
    e3ae:	d105      	bne.n	e3bc <send_nav_values+0xde8>
    e3b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b8:	2200      	movs	r2, #0
    e3ba:	701a      	strb	r2, [r3, #0]
    e3bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c4:	781b      	ldrb	r3, [r3, #0]
    e3c6:	461a      	mov	r2, r3
    e3c8:	f24c 2378 	movw	r3, #49784	; 0xc278
    e3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d0:	7819      	ldrb	r1, [r3, #0]
    e3d2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3da:	5499      	strb	r1, [r3, r2]
    e3dc:	f24c 2378 	movw	r3, #49784	; 0xc278
    e3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e4:	781a      	ldrb	r2, [r3, #0]
    e3e6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	4413      	add	r3, r2
    e3f2:	b2da      	uxtb	r2, r3
    e3f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	701a      	strb	r2, [r3, #0]
    e3fe:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e406:	781a      	ldrb	r2, [r3, #0]
    e408:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e410:	781b      	ldrb	r3, [r3, #0]
    e412:	4413      	add	r3, r2
    e414:	b2da      	uxtb	r2, r3
    e416:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41e:	701a      	strb	r2, [r3, #0]
    e420:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e428:	781b      	ldrb	r3, [r3, #0]
    e42a:	3301      	adds	r3, #1
    e42c:	b2da      	uxtb	r2, r3
    e42e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e436:	701a      	strb	r2, [r3, #0]
    e438:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e440:	781b      	ldrb	r3, [r3, #0]
    e442:	2bff      	cmp	r3, #255	; 0xff
    e444:	d105      	bne.n	e452 <send_nav_values+0xe7e>
    e446:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44e:	2200      	movs	r2, #0
    e450:	701a      	strb	r2, [r3, #0]
    e452:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45a:	781b      	ldrb	r3, [r3, #0]
    e45c:	461a      	mov	r2, r3
    e45e:	f24c 2378 	movw	r3, #49784	; 0xc278
    e462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e466:	7859      	ldrb	r1, [r3, #1]
    e468:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	5499      	strb	r1, [r3, r2]
    e472:	4b7a      	ldr	r3, [pc, #488]	; (e65c <send_nav_values+0x1088>)
    e474:	781a      	ldrb	r2, [r3, #0]
    e476:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47e:	781b      	ldrb	r3, [r3, #0]
    e480:	4413      	add	r3, r2
    e482:	b2da      	uxtb	r2, r3
    e484:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48c:	701a      	strb	r2, [r3, #0]
    e48e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e496:	781a      	ldrb	r2, [r3, #0]
    e498:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a0:	781b      	ldrb	r3, [r3, #0]
    e4a2:	4413      	add	r3, r2
    e4a4:	b2da      	uxtb	r2, r3
    e4a6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ae:	701a      	strb	r2, [r3, #0]
    e4b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b8:	781b      	ldrb	r3, [r3, #0]
    e4ba:	3301      	adds	r3, #1
    e4bc:	b2da      	uxtb	r2, r3
    e4be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c6:	701a      	strb	r2, [r3, #0]
    e4c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d0:	781b      	ldrb	r3, [r3, #0]
    e4d2:	2bff      	cmp	r3, #255	; 0xff
    e4d4:	d105      	bne.n	e4e2 <send_nav_values+0xf0e>
    e4d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4de:	2200      	movs	r2, #0
    e4e0:	701a      	strb	r2, [r3, #0]
    e4e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ea:	781b      	ldrb	r3, [r3, #0]
    e4ec:	461a      	mov	r2, r3
    e4ee:	f24c 2378 	movw	r3, #49784	; 0xc278
    e4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f6:	7899      	ldrb	r1, [r3, #2]
    e4f8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e500:	5499      	strb	r1, [r3, r2]
    e502:	4b57      	ldr	r3, [pc, #348]	; (e660 <send_nav_values+0x108c>)
    e504:	781a      	ldrb	r2, [r3, #0]
    e506:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50e:	781b      	ldrb	r3, [r3, #0]
    e510:	4413      	add	r3, r2
    e512:	b2da      	uxtb	r2, r3
    e514:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51c:	701a      	strb	r2, [r3, #0]
    e51e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e526:	781a      	ldrb	r2, [r3, #0]
    e528:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	4413      	add	r3, r2
    e534:	b2da      	uxtb	r2, r3
    e536:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53e:	701a      	strb	r2, [r3, #0]
    e540:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	3301      	adds	r3, #1
    e54c:	b2da      	uxtb	r2, r3
    e54e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e556:	701a      	strb	r2, [r3, #0]
    e558:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e560:	781b      	ldrb	r3, [r3, #0]
    e562:	2bff      	cmp	r3, #255	; 0xff
    e564:	d105      	bne.n	e572 <send_nav_values+0xf9e>
    e566:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56e:	2200      	movs	r2, #0
    e570:	701a      	strb	r2, [r3, #0]
    e572:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	461a      	mov	r2, r3
    e57e:	f24c 2378 	movw	r3, #49784	; 0xc278
    e582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e586:	78d9      	ldrb	r1, [r3, #3]
    e588:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e590:	5499      	strb	r1, [r3, r2]
    e592:	4b34      	ldr	r3, [pc, #208]	; (e664 <send_nav_values+0x1090>)
    e594:	781a      	ldrb	r2, [r3, #0]
    e596:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59e:	781b      	ldrb	r3, [r3, #0]
    e5a0:	4413      	add	r3, r2
    e5a2:	b2da      	uxtb	r2, r3
    e5a4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ac:	701a      	strb	r2, [r3, #0]
    e5ae:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b6:	781a      	ldrb	r2, [r3, #0]
    e5b8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	4413      	add	r3, r2
    e5c4:	b2da      	uxtb	r2, r3
    e5c6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ce:	701a      	strb	r2, [r3, #0]
    e5d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	781b      	ldrb	r3, [r3, #0]
    e5da:	3301      	adds	r3, #1
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e6:	701a      	strb	r2, [r3, #0]
    e5e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	2bff      	cmp	r3, #255	; 0xff
    e5f4:	d105      	bne.n	e602 <send_nav_values+0x102e>
    e5f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fe:	2200      	movs	r2, #0
    e600:	701a      	strb	r2, [r3, #0]
    e602:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60a:	781b      	ldrb	r3, [r3, #0]
    e60c:	461a      	mov	r2, r3
    e60e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    e612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e616:	7819      	ldrb	r1, [r3, #0]
    e618:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e620:	5499      	strb	r1, [r3, r2]
    e622:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	3301      	adds	r3, #1
    e62e:	b2da      	uxtb	r2, r3
    e630:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e638:	701a      	strb	r2, [r3, #0]
    e63a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2bff      	cmp	r3, #255	; 0xff
    e646:	d10f      	bne.n	e668 <send_nav_values+0x1094>
    e648:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e650:	2200      	movs	r2, #0
    e652:	701a      	strb	r2, [r3, #0]
    e654:	e008      	b.n	e668 <send_nav_values+0x1094>
    e656:	bf00      	nop
    e658:	2000040b 	.word	0x2000040b
    e65c:	2004c279 	.word	0x2004c279
    e660:	2004c27a 	.word	0x2004c27a
    e664:	2004c27b 	.word	0x2004c27b
    e668:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e670:	781b      	ldrb	r3, [r3, #0]
    e672:	461a      	mov	r2, r3
    e674:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    e678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67c:	7819      	ldrb	r1, [r3, #0]
    e67e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	5499      	strb	r1, [r3, r2]
    e688:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	3301      	adds	r3, #1
    e694:	b2da      	uxtb	r2, r3
    e696:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	701a      	strb	r2, [r3, #0]
    e6a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	2bff      	cmp	r3, #255	; 0xff
    e6ac:	d105      	bne.n	e6ba <send_nav_values+0x10e6>
    e6ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	2200      	movs	r2, #0
    e6b8:	701a      	strb	r2, [r3, #0]
    e6ba:	f242 0339 	movw	r3, #8249	; 0x2039
    e6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c2:	781b      	ldrb	r3, [r3, #0]
    e6c4:	b2db      	uxtb	r3, r3
    e6c6:	f003 0310 	and.w	r3, r3, #16
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d15a      	bne.n	e784 <send_nav_values+0x11b0>
    e6ce:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	b2db      	uxtb	r3, r3
    e6da:	461a      	mov	r2, r3
    e6dc:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    e6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e4:	5c9a      	ldrb	r2, [r3, r2]
    e6e6:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    e6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ee:	701a      	strb	r2, [r3, #0]
    e6f0:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    e6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f8:	2200      	movs	r2, #0
    e6fa:	701a      	strb	r2, [r3, #0]
    e6fc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e704:	781b      	ldrb	r3, [r3, #0]
    e706:	b2db      	uxtb	r3, r3
    e708:	3301      	adds	r3, #1
    e70a:	b2da      	uxtb	r2, r3
    e70c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e714:	701a      	strb	r2, [r3, #0]
    e716:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	781b      	ldrb	r3, [r3, #0]
    e720:	b2db      	uxtb	r3, r3
    e722:	2bff      	cmp	r3, #255	; 0xff
    e724:	d105      	bne.n	e732 <send_nav_values+0x115e>
    e726:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72e:	2200      	movs	r2, #0
    e730:	701a      	strb	r2, [r3, #0]
    e732:	f242 0338 	movw	r3, #8248	; 0x2038
    e736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e73a:	f242 0238 	movw	r2, #8248	; 0x2038
    e73e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e742:	7812      	ldrb	r2, [r2, #0]
    e744:	b2d2      	uxtb	r2, r2
    e746:	f042 0201 	orr.w	r2, r2, #1
    e74a:	b2d2      	uxtb	r2, r2
    e74c:	701a      	strb	r2, [r3, #0]
    e74e:	f242 0339 	movw	r3, #8249	; 0x2039
    e752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e756:	f242 0239 	movw	r2, #8249	; 0x2039
    e75a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e75e:	7812      	ldrb	r2, [r2, #0]
    e760:	b2d2      	uxtb	r2, r2
    e762:	f042 0210 	orr.w	r2, r2, #16
    e766:	b2d2      	uxtb	r2, r2
    e768:	701a      	strb	r2, [r3, #0]
    e76a:	e00b      	b.n	e784 <send_nav_values+0x11b0>
    e76c:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    e770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e774:	781b      	ldrb	r3, [r3, #0]
    e776:	3301      	adds	r3, #1
    e778:	b2da      	uxtb	r2, r3
    e77a:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    e77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e782:	701a      	strb	r2, [r3, #0]
}
    e784:	46bd      	mov	sp, r7
    e786:	f85d 7b04 	ldr.w	r7, [sp], #4
    e78a:	4770      	bx	lr

0000e78c <course_run>:

void course_run(void){
    e78c:	b580      	push	{r7, lr}
    e78e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e790:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	2b02      	cmp	r3, #2
    e79c:	d006      	beq.n	e7ac <course_run+0x20>
    e79e:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	2b03      	cmp	r3, #3
    e7aa:	d112      	bne.n	e7d2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e7ac:	f64b 63ce 	movw	r3, #48846	; 0xbece
    e7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b4:	781b      	ldrb	r3, [r3, #0]
    e7b6:	2b02      	cmp	r3, #2
    e7b8:	d901      	bls.n	e7be <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e7ba:	f003 faf1 	bl	11da0 <course_pid_run>
    desired_roll = nav_desired_roll;
    e7be:	f24c 2370 	movw	r3, #49776	; 0xc270
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	681a      	ldr	r2, [r3, #0]
    e7c8:	f24c 2314 	movw	r3, #49684	; 0xc214
    e7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e7d2:	bd80      	pop	{r7, pc}

0000e7d4 <altitude_control_task>:

void altitude_control_task(void)
{
    e7d4:	b580      	push	{r7, lr}
    e7d6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e7d8:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	2b02      	cmp	r3, #2
    e7e4:	d006      	beq.n	e7f4 <altitude_control_task+0x20>
    e7e6:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	781b      	ldrb	r3, [r3, #0]
    e7f0:	2b03      	cmp	r3, #3
    e7f2:	d108      	bne.n	e806 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e7f4:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    e7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fc:	781b      	ldrb	r3, [r3, #0]
    e7fe:	2b03      	cmp	r3, #3
    e800:	d101      	bne.n	e806 <altitude_control_task+0x32>
      			altitude_pid_run();
    e802:	f003 fd55 	bl	122b0 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e806:	bd80      	pop	{r7, pc}

0000e808 <climb_control_task>:
void climb_control_task(void)
{
    e808:	b580      	push	{r7, lr}
    e80a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e80c:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e814:	781b      	ldrb	r3, [r3, #0]
    e816:	2b02      	cmp	r3, #2
    e818:	d006      	beq.n	e828 <climb_control_task+0x20>
    e81a:	f64b 63cc 	movw	r3, #48844	; 0xbecc
    e81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e822:	781b      	ldrb	r3, [r3, #0]
    e824:	2b03      	cmp	r3, #3
    e826:	d135      	bne.n	e894 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e828:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    e82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e830:	781b      	ldrb	r3, [r3, #0]
    e832:	2b01      	cmp	r3, #1
    e834:	d901      	bls.n	e83a <climb_control_task+0x32>
        	climb_pid_run();
    e836:	f003 fb6b 	bl	11f10 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e83a:	f64b 63cd 	movw	r3, #48845	; 0xbecd
    e83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	2b01      	cmp	r3, #1
    e846:	d10a      	bne.n	e85e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e848:	f24c 2368 	movw	r3, #49768	; 0xc268
    e84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e850:	881b      	ldrh	r3, [r3, #0]
    e852:	b29a      	uxth	r2, r3
    e854:	f24c 231c 	movw	r3, #49692	; 0xc21c
    e858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e85c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e85e:	f64b 63d5 	movw	r3, #48853	; 0xbed5
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	781b      	ldrb	r3, [r3, #0]
    e868:	2b00      	cmp	r3, #0
    e86a:	d10d      	bne.n	e888 <climb_control_task+0x80>
    e86c:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
    e870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e874:	881b      	ldrh	r3, [r3, #0]
    e876:	2b00      	cmp	r3, #0
    e878:	d10c      	bne.n	e894 <climb_control_task+0x8c>
    e87a:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    e87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e882:	781b      	ldrb	r3, [r3, #0]
    e884:	2b00      	cmp	r3, #0
    e886:	d105      	bne.n	e894 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e888:	f24c 231c 	movw	r3, #49692	; 0xc21c
    e88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e890:	2200      	movs	r2, #0
    e892:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e894:	bd80      	pop	{r7, pc}
    e896:	bf00      	nop

0000e898 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e898:	b580      	push	{r7, lr}
    e89a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e89c:	f003 f926 	bl	11aec <ir_update>
    estimator_update_state_infrared();
    e8a0:	f006 fbac 	bl	14ffc <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e8a4:	f003 f990 	bl	11bc8 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e8a8:	f24c 231c 	movw	r3, #49692	; 0xc21c
    e8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b0:	881a      	ldrh	r2, [r3, #0]
    e8b2:	f24c 0308 	movw	r3, #49160	; 0xc008
    e8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ba:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e8bc:	f24c 231e 	movw	r3, #49694	; 0xc21e
    e8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c4:	881a      	ldrh	r2, [r3, #0]
    e8c6:	f24c 0308 	movw	r3, #49160	; 0xc008
    e8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ce:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e8d0:	f24c 2320 	movw	r3, #49696	; 0xc220
    e8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d8:	881a      	ldrh	r2, [r3, #0]
    e8da:	f24c 0308 	movw	r3, #49160	; 0xc008
    e8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e8e4:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    e8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ec:	681b      	ldr	r3, [r3, #0]
    e8ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e8f2:	4618      	mov	r0, r3
    e8f4:	f009 f80c 	bl	17910 <__aeabi_f2d>
    e8f8:	4602      	mov	r2, r0
    e8fa:	460b      	mov	r3, r1
    e8fc:	4610      	mov	r0, r2
    e8fe:	4619      	mov	r1, r3
    e900:	f04f 0200 	mov.w	r2, #0
    e904:	f04f 0300 	mov.w	r3, #0
    e908:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e90c:	f009 f854 	bl	179b8 <__aeabi_dmul>
    e910:	4602      	mov	r2, r0
    e912:	460b      	mov	r3, r1
    e914:	4610      	mov	r0, r2
    e916:	4619      	mov	r1, r3
    e918:	f04f 0200 	mov.w	r2, #0
    e91c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e920:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e924:	f009 faba 	bl	17e9c <__aeabi_dcmplt>
    e928:	4603      	mov	r3, r0
    e92a:	2b00      	cmp	r3, #0
    e92c:	d002      	beq.n	e934 <stabilisation_task+0x9c>
    e92e:	f64d 2280 	movw	r2, #55936	; 0xda80
    e932:	e046      	b.n	e9c2 <stabilisation_task+0x12a>
    e934:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    e938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93c:	681b      	ldr	r3, [r3, #0]
    e93e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e942:	4618      	mov	r0, r3
    e944:	f008 ffe4 	bl	17910 <__aeabi_f2d>
    e948:	4602      	mov	r2, r0
    e94a:	460b      	mov	r3, r1
    e94c:	4610      	mov	r0, r2
    e94e:	4619      	mov	r1, r3
    e950:	f04f 0200 	mov.w	r2, #0
    e954:	f04f 0300 	mov.w	r3, #0
    e958:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e95c:	f009 f82c 	bl	179b8 <__aeabi_dmul>
    e960:	4602      	mov	r2, r0
    e962:	460b      	mov	r3, r1
    e964:	4610      	mov	r0, r2
    e966:	4619      	mov	r1, r3
    e968:	f04f 0200 	mov.w	r2, #0
    e96c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e970:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e974:	f009 fab0 	bl	17ed8 <__aeabi_dcmpgt>
    e978:	4603      	mov	r3, r0
    e97a:	2b00      	cmp	r3, #0
    e97c:	d002      	beq.n	e984 <stabilisation_task+0xec>
    e97e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e982:	e01d      	b.n	e9c0 <stabilisation_task+0x128>
    e984:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    e988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98c:	681b      	ldr	r3, [r3, #0]
    e98e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e992:	4618      	mov	r0, r3
    e994:	f008 ffbc 	bl	17910 <__aeabi_f2d>
    e998:	4602      	mov	r2, r0
    e99a:	460b      	mov	r3, r1
    e99c:	4610      	mov	r0, r2
    e99e:	4619      	mov	r1, r3
    e9a0:	f04f 0200 	mov.w	r2, #0
    e9a4:	f04f 0300 	mov.w	r3, #0
    e9a8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e9ac:	f009 f804 	bl	179b8 <__aeabi_dmul>
    e9b0:	4602      	mov	r2, r0
    e9b2:	460b      	mov	r3, r1
    e9b4:	4610      	mov	r0, r2
    e9b6:	4619      	mov	r1, r3
    e9b8:	f009 fa98 	bl	17eec <__aeabi_d2iz>
    e9bc:	4603      	mov	r3, r0
    e9be:	b29b      	uxth	r3, r3
    e9c0:	b29a      	uxth	r2, r3
    e9c2:	f24c 0308 	movw	r3, #49160	; 0xc008
    e9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ca:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e9cc:	bd80      	pop	{r7, pc}
    e9ce:	bf00      	nop

0000e9d0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e9d0:	b580      	push	{r7, lr}
    e9d2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e9d4:	f24c 037d 	movw	r3, #49277	; 0xc07d
    e9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9dc:	2200      	movs	r2, #0
    e9de:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e9e0:	f24c 037e 	movw	r3, #49278	; 0xc07e
    e9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	2b00      	cmp	r3, #0
    e9ec:	f001 81af 	beq.w	fd4e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e9f0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    e9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f8:	781a      	ldrb	r2, [r3, #0]
    e9fa:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    e9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea02:	781b      	ldrb	r3, [r3, #0]
    ea04:	b2db      	uxtb	r3, r3
    ea06:	429a      	cmp	r2, r3
    ea08:	d313      	bcc.n	ea32 <send_gps_pos+0x62>
    ea0a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ea0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	b2db      	uxtb	r3, r3
    ea16:	461a      	mov	r2, r3
    ea18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	1ad3      	subs	r3, r2, r3
    ea24:	33ff      	adds	r3, #255	; 0xff
    ea26:	2b21      	cmp	r3, #33	; 0x21
    ea28:	bfd4      	ite	le
    ea2a:	2300      	movle	r3, #0
    ea2c:	2301      	movgt	r3, #1
    ea2e:	b2db      	uxtb	r3, r3
    ea30:	e011      	b.n	ea56 <send_gps_pos+0x86>
    ea32:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    ea36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3a:	781b      	ldrb	r3, [r3, #0]
    ea3c:	b2db      	uxtb	r3, r3
    ea3e:	461a      	mov	r2, r3
    ea40:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	1ad3      	subs	r3, r2, r3
    ea4c:	2b21      	cmp	r3, #33	; 0x21
    ea4e:	bfd4      	ite	le
    ea50:	2300      	movle	r3, #0
    ea52:	2301      	movgt	r3, #1
    ea54:	b2db      	uxtb	r3, r3
    ea56:	2b00      	cmp	r3, #0
    ea58:	f001 816b 	beq.w	fd32 <send_gps_pos+0x1362>
    ea5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea64:	781b      	ldrb	r3, [r3, #0]
    ea66:	461a      	mov	r2, r3
    ea68:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ea6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea70:	2105      	movs	r1, #5
    ea72:	5499      	strb	r1, [r3, r2]
    ea74:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	3301      	adds	r3, #1
    ea80:	b2da      	uxtb	r2, r3
    ea82:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8a:	701a      	strb	r2, [r3, #0]
    ea8c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea94:	781b      	ldrb	r3, [r3, #0]
    ea96:	2bff      	cmp	r3, #255	; 0xff
    ea98:	d105      	bne.n	eaa6 <send_gps_pos+0xd6>
    ea9a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ea9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa2:	2200      	movs	r2, #0
    eaa4:	701a      	strb	r2, [r3, #0]
    eaa6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaae:	781b      	ldrb	r3, [r3, #0]
    eab0:	461a      	mov	r2, r3
    eab2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    eab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaba:	2108      	movs	r1, #8
    eabc:	5499      	strb	r1, [r3, r2]
    eabe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac6:	781b      	ldrb	r3, [r3, #0]
    eac8:	3301      	adds	r3, #1
    eaca:	b2da      	uxtb	r2, r3
    eacc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ead0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead4:	701a      	strb	r2, [r3, #0]
    ead6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eade:	781b      	ldrb	r3, [r3, #0]
    eae0:	2bff      	cmp	r3, #255	; 0xff
    eae2:	d105      	bne.n	eaf0 <send_gps_pos+0x120>
    eae4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaec:	2200      	movs	r2, #0
    eaee:	701a      	strb	r2, [r3, #0]
    eaf0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf8:	2208      	movs	r2, #8
    eafa:	701a      	strb	r2, [r3, #0]
    eafc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb04:	2208      	movs	r2, #8
    eb06:	701a      	strb	r2, [r3, #0]
    eb08:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb10:	781b      	ldrb	r3, [r3, #0]
    eb12:	461a      	mov	r2, r3
    eb14:	f24c 037c 	movw	r3, #49276	; 0xc07c
    eb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb1c:	7819      	ldrb	r1, [r3, #0]
    eb1e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    eb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb26:	5499      	strb	r1, [r3, r2]
    eb28:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb30:	781a      	ldrb	r2, [r3, #0]
    eb32:	f24c 037c 	movw	r3, #49276	; 0xc07c
    eb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3a:	781b      	ldrb	r3, [r3, #0]
    eb3c:	4413      	add	r3, r2
    eb3e:	b2da      	uxtb	r2, r3
    eb40:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb48:	701a      	strb	r2, [r3, #0]
    eb4a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb52:	781a      	ldrb	r2, [r3, #0]
    eb54:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eb58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb5c:	781b      	ldrb	r3, [r3, #0]
    eb5e:	4413      	add	r3, r2
    eb60:	b2da      	uxtb	r2, r3
    eb62:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb6a:	701a      	strb	r2, [r3, #0]
    eb6c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb74:	781b      	ldrb	r3, [r3, #0]
    eb76:	3301      	adds	r3, #1
    eb78:	b2da      	uxtb	r2, r3
    eb7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb82:	701a      	strb	r2, [r3, #0]
    eb84:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	781b      	ldrb	r3, [r3, #0]
    eb8e:	2bff      	cmp	r3, #255	; 0xff
    eb90:	d105      	bne.n	eb9e <send_gps_pos+0x1ce>
    eb92:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb9a:	2200      	movs	r2, #0
    eb9c:	701a      	strb	r2, [r3, #0]
    eb9e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba6:	781b      	ldrb	r3, [r3, #0]
    eba8:	461a      	mov	r2, r3
    ebaa:	f24c 036c 	movw	r3, #49260	; 0xc06c
    ebae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb2:	7819      	ldrb	r1, [r3, #0]
    ebb4:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ebb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebbc:	5499      	strb	r1, [r3, r2]
    ebbe:	f24c 036c 	movw	r3, #49260	; 0xc06c
    ebc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc6:	781a      	ldrb	r2, [r3, #0]
    ebc8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ebcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd0:	781b      	ldrb	r3, [r3, #0]
    ebd2:	4413      	add	r3, r2
    ebd4:	b2da      	uxtb	r2, r3
    ebd6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ebda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebde:	701a      	strb	r2, [r3, #0]
    ebe0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ebe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe8:	781a      	ldrb	r2, [r3, #0]
    ebea:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ebee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	4413      	add	r3, r2
    ebf6:	b2da      	uxtb	r2, r3
    ebf8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ebfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec00:	701a      	strb	r2, [r3, #0]
    ec02:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	3301      	adds	r3, #1
    ec0e:	b2da      	uxtb	r2, r3
    ec10:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec18:	701a      	strb	r2, [r3, #0]
    ec1a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec22:	781b      	ldrb	r3, [r3, #0]
    ec24:	2bff      	cmp	r3, #255	; 0xff
    ec26:	d105      	bne.n	ec34 <send_gps_pos+0x264>
    ec28:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec30:	2200      	movs	r2, #0
    ec32:	701a      	strb	r2, [r3, #0]
    ec34:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3c:	781b      	ldrb	r3, [r3, #0]
    ec3e:	461a      	mov	r2, r3
    ec40:	f24c 036c 	movw	r3, #49260	; 0xc06c
    ec44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec48:	7859      	ldrb	r1, [r3, #1]
    ec4a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	5499      	strb	r1, [r3, r2]
    ec54:	4bd1      	ldr	r3, [pc, #836]	; (ef9c <send_gps_pos+0x5cc>)
    ec56:	781a      	ldrb	r2, [r3, #0]
    ec58:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ec5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec60:	781b      	ldrb	r3, [r3, #0]
    ec62:	4413      	add	r3, r2
    ec64:	b2da      	uxtb	r2, r3
    ec66:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ec6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6e:	701a      	strb	r2, [r3, #0]
    ec70:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ec74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec78:	781a      	ldrb	r2, [r3, #0]
    ec7a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	781b      	ldrb	r3, [r3, #0]
    ec84:	4413      	add	r3, r2
    ec86:	b2da      	uxtb	r2, r3
    ec88:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ec8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec90:	701a      	strb	r2, [r3, #0]
    ec92:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ec96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	3301      	adds	r3, #1
    ec9e:	b2da      	uxtb	r2, r3
    eca0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca8:	701a      	strb	r2, [r3, #0]
    ecaa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ecae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb2:	781b      	ldrb	r3, [r3, #0]
    ecb4:	2bff      	cmp	r3, #255	; 0xff
    ecb6:	d105      	bne.n	ecc4 <send_gps_pos+0x2f4>
    ecb8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	2200      	movs	r2, #0
    ecc2:	701a      	strb	r2, [r3, #0]
    ecc4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ecc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eccc:	781b      	ldrb	r3, [r3, #0]
    ecce:	461a      	mov	r2, r3
    ecd0:	f24c 036c 	movw	r3, #49260	; 0xc06c
    ecd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd8:	7899      	ldrb	r1, [r3, #2]
    ecda:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ecde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece2:	5499      	strb	r1, [r3, r2]
    ece4:	4bae      	ldr	r3, [pc, #696]	; (efa0 <send_gps_pos+0x5d0>)
    ece6:	781a      	ldrb	r2, [r3, #0]
    ece8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ecec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf0:	781b      	ldrb	r3, [r3, #0]
    ecf2:	4413      	add	r3, r2
    ecf4:	b2da      	uxtb	r2, r3
    ecf6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ecfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecfe:	701a      	strb	r2, [r3, #0]
    ed00:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ed04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed08:	781a      	ldrb	r2, [r3, #0]
    ed0a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ed0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed12:	781b      	ldrb	r3, [r3, #0]
    ed14:	4413      	add	r3, r2
    ed16:	b2da      	uxtb	r2, r3
    ed18:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ed1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed20:	701a      	strb	r2, [r3, #0]
    ed22:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ed26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	3301      	adds	r3, #1
    ed2e:	b2da      	uxtb	r2, r3
    ed30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ed34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed38:	701a      	strb	r2, [r3, #0]
    ed3a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	2bff      	cmp	r3, #255	; 0xff
    ed46:	d105      	bne.n	ed54 <send_gps_pos+0x384>
    ed48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ed4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed50:	2200      	movs	r2, #0
    ed52:	701a      	strb	r2, [r3, #0]
    ed54:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ed58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5c:	781b      	ldrb	r3, [r3, #0]
    ed5e:	461a      	mov	r2, r3
    ed60:	f24c 036c 	movw	r3, #49260	; 0xc06c
    ed64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed68:	78d9      	ldrb	r1, [r3, #3]
    ed6a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ed6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed72:	5499      	strb	r1, [r3, r2]
    ed74:	4b8b      	ldr	r3, [pc, #556]	; (efa4 <send_gps_pos+0x5d4>)
    ed76:	781a      	ldrb	r2, [r3, #0]
    ed78:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ed7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed80:	781b      	ldrb	r3, [r3, #0]
    ed82:	4413      	add	r3, r2
    ed84:	b2da      	uxtb	r2, r3
    ed86:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	701a      	strb	r2, [r3, #0]
    ed90:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	781a      	ldrb	r2, [r3, #0]
    ed9a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	781b      	ldrb	r3, [r3, #0]
    eda4:	4413      	add	r3, r2
    eda6:	b2da      	uxtb	r2, r3
    eda8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	701a      	strb	r2, [r3, #0]
    edb2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	3301      	adds	r3, #1
    edbe:	b2da      	uxtb	r2, r3
    edc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    edc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc8:	701a      	strb	r2, [r3, #0]
    edca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    edce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	2bff      	cmp	r3, #255	; 0xff
    edd6:	d105      	bne.n	ede4 <send_gps_pos+0x414>
    edd8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede0:	2200      	movs	r2, #0
    ede2:	701a      	strb	r2, [r3, #0]
    ede4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ede8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edec:	781b      	ldrb	r3, [r3, #0]
    edee:	461a      	mov	r2, r3
    edf0:	f24c 0370 	movw	r3, #49264	; 0xc070
    edf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf8:	7819      	ldrb	r1, [r3, #0]
    edfa:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	5499      	strb	r1, [r3, r2]
    ee04:	f24c 0370 	movw	r3, #49264	; 0xc070
    ee08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0c:	781a      	ldrb	r2, [r3, #0]
    ee0e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ee12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee16:	781b      	ldrb	r3, [r3, #0]
    ee18:	4413      	add	r3, r2
    ee1a:	b2da      	uxtb	r2, r3
    ee1c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ee20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee24:	701a      	strb	r2, [r3, #0]
    ee26:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ee2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2e:	781a      	ldrb	r2, [r3, #0]
    ee30:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	4413      	add	r3, r2
    ee3c:	b2da      	uxtb	r2, r3
    ee3e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ee42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee46:	701a      	strb	r2, [r3, #0]
    ee48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	781b      	ldrb	r3, [r3, #0]
    ee52:	3301      	adds	r3, #1
    ee54:	b2da      	uxtb	r2, r3
    ee56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ee5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5e:	701a      	strb	r2, [r3, #0]
    ee60:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	781b      	ldrb	r3, [r3, #0]
    ee6a:	2bff      	cmp	r3, #255	; 0xff
    ee6c:	d105      	bne.n	ee7a <send_gps_pos+0x4aa>
    ee6e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ee72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee76:	2200      	movs	r2, #0
    ee78:	701a      	strb	r2, [r3, #0]
    ee7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ee7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee82:	781b      	ldrb	r3, [r3, #0]
    ee84:	461a      	mov	r2, r3
    ee86:	f24c 0370 	movw	r3, #49264	; 0xc070
    ee8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8e:	7859      	ldrb	r1, [r3, #1]
    ee90:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	5499      	strb	r1, [r3, r2]
    ee9a:	4b43      	ldr	r3, [pc, #268]	; (efa8 <send_gps_pos+0x5d8>)
    ee9c:	781a      	ldrb	r2, [r3, #0]
    ee9e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea6:	781b      	ldrb	r3, [r3, #0]
    eea8:	4413      	add	r3, r2
    eeaa:	b2da      	uxtb	r2, r3
    eeac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb4:	701a      	strb	r2, [r3, #0]
    eeb6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eeba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebe:	781a      	ldrb	r2, [r3, #0]
    eec0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	781b      	ldrb	r3, [r3, #0]
    eeca:	4413      	add	r3, r2
    eecc:	b2da      	uxtb	r2, r3
    eece:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed6:	701a      	strb	r2, [r3, #0]
    eed8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee0:	781b      	ldrb	r3, [r3, #0]
    eee2:	3301      	adds	r3, #1
    eee4:	b2da      	uxtb	r2, r3
    eee6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeee:	701a      	strb	r2, [r3, #0]
    eef0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    eef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef8:	781b      	ldrb	r3, [r3, #0]
    eefa:	2bff      	cmp	r3, #255	; 0xff
    eefc:	d105      	bne.n	ef0a <send_gps_pos+0x53a>
    eefe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef06:	2200      	movs	r2, #0
    ef08:	701a      	strb	r2, [r3, #0]
    ef0a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef12:	781b      	ldrb	r3, [r3, #0]
    ef14:	461a      	mov	r2, r3
    ef16:	f24c 0370 	movw	r3, #49264	; 0xc070
    ef1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1e:	7899      	ldrb	r1, [r3, #2]
    ef20:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ef24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef28:	5499      	strb	r1, [r3, r2]
    ef2a:	4b20      	ldr	r3, [pc, #128]	; (efac <send_gps_pos+0x5dc>)
    ef2c:	781a      	ldrb	r2, [r3, #0]
    ef2e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ef32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef36:	781b      	ldrb	r3, [r3, #0]
    ef38:	4413      	add	r3, r2
    ef3a:	b2da      	uxtb	r2, r3
    ef3c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ef40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef44:	701a      	strb	r2, [r3, #0]
    ef46:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ef4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef4e:	781a      	ldrb	r2, [r3, #0]
    ef50:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ef54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef58:	781b      	ldrb	r3, [r3, #0]
    ef5a:	4413      	add	r3, r2
    ef5c:	b2da      	uxtb	r2, r3
    ef5e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ef62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef66:	701a      	strb	r2, [r3, #0]
    ef68:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	3301      	adds	r3, #1
    ef74:	b2da      	uxtb	r2, r3
    ef76:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7e:	701a      	strb	r2, [r3, #0]
    ef80:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	781b      	ldrb	r3, [r3, #0]
    ef8a:	2bff      	cmp	r3, #255	; 0xff
    ef8c:	d110      	bne.n	efb0 <send_gps_pos+0x5e0>
    ef8e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ef92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef96:	2200      	movs	r2, #0
    ef98:	701a      	strb	r2, [r3, #0]
    ef9a:	e009      	b.n	efb0 <send_gps_pos+0x5e0>
    ef9c:	2004c06d 	.word	0x2004c06d
    efa0:	2004c06e 	.word	0x2004c06e
    efa4:	2004c06f 	.word	0x2004c06f
    efa8:	2004c071 	.word	0x2004c071
    efac:	2004c072 	.word	0x2004c072
    efb0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	461a      	mov	r2, r3
    efbc:	f24c 0370 	movw	r3, #49264	; 0xc070
    efc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc4:	78d9      	ldrb	r1, [r3, #3]
    efc6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    efca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efce:	5499      	strb	r1, [r3, r2]
    efd0:	4bd3      	ldr	r3, [pc, #844]	; (f320 <send_gps_pos+0x950>)
    efd2:	781a      	ldrb	r2, [r3, #0]
    efd4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    efd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efdc:	781b      	ldrb	r3, [r3, #0]
    efde:	4413      	add	r3, r2
    efe0:	b2da      	uxtb	r2, r3
    efe2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    efe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efea:	701a      	strb	r2, [r3, #0]
    efec:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    eff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff4:	781a      	ldrb	r2, [r3, #0]
    eff6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    effa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effe:	781b      	ldrb	r3, [r3, #0]
    f000:	4413      	add	r3, r2
    f002:	b2da      	uxtb	r2, r3
    f004:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00c:	701a      	strb	r2, [r3, #0]
    f00e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f016:	781b      	ldrb	r3, [r3, #0]
    f018:	3301      	adds	r3, #1
    f01a:	b2da      	uxtb	r2, r3
    f01c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f024:	701a      	strb	r2, [r3, #0]
    f026:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02e:	781b      	ldrb	r3, [r3, #0]
    f030:	2bff      	cmp	r3, #255	; 0xff
    f032:	d105      	bne.n	f040 <send_gps_pos+0x670>
    f034:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03c:	2200      	movs	r2, #0
    f03e:	701a      	strb	r2, [r3, #0]
    f040:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	781b      	ldrb	r3, [r3, #0]
    f04a:	461a      	mov	r2, r3
    f04c:	f24c 0368 	movw	r3, #49256	; 0xc068
    f050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f054:	7819      	ldrb	r1, [r3, #0]
    f056:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05e:	5499      	strb	r1, [r3, r2]
    f060:	f24c 0368 	movw	r3, #49256	; 0xc068
    f064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f068:	781a      	ldrb	r2, [r3, #0]
    f06a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f072:	781b      	ldrb	r3, [r3, #0]
    f074:	4413      	add	r3, r2
    f076:	b2da      	uxtb	r2, r3
    f078:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f080:	701a      	strb	r2, [r3, #0]
    f082:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08a:	781a      	ldrb	r2, [r3, #0]
    f08c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f094:	781b      	ldrb	r3, [r3, #0]
    f096:	4413      	add	r3, r2
    f098:	b2da      	uxtb	r2, r3
    f09a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a2:	701a      	strb	r2, [r3, #0]
    f0a4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ac:	781b      	ldrb	r3, [r3, #0]
    f0ae:	3301      	adds	r3, #1
    f0b0:	b2da      	uxtb	r2, r3
    f0b2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ba:	701a      	strb	r2, [r3, #0]
    f0bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c4:	781b      	ldrb	r3, [r3, #0]
    f0c6:	2bff      	cmp	r3, #255	; 0xff
    f0c8:	d105      	bne.n	f0d6 <send_gps_pos+0x706>
    f0ca:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f0ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d2:	2200      	movs	r2, #0
    f0d4:	701a      	strb	r2, [r3, #0]
    f0d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	461a      	mov	r2, r3
    f0e2:	f24c 0368 	movw	r3, #49256	; 0xc068
    f0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ea:	7859      	ldrb	r1, [r3, #1]
    f0ec:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	5499      	strb	r1, [r3, r2]
    f0f6:	4b8b      	ldr	r3, [pc, #556]	; (f324 <send_gps_pos+0x954>)
    f0f8:	781a      	ldrb	r2, [r3, #0]
    f0fa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f0fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f102:	781b      	ldrb	r3, [r3, #0]
    f104:	4413      	add	r3, r2
    f106:	b2da      	uxtb	r2, r3
    f108:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f110:	701a      	strb	r2, [r3, #0]
    f112:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11a:	781a      	ldrb	r2, [r3, #0]
    f11c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f124:	781b      	ldrb	r3, [r3, #0]
    f126:	4413      	add	r3, r2
    f128:	b2da      	uxtb	r2, r3
    f12a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f132:	701a      	strb	r2, [r3, #0]
    f134:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f13c:	781b      	ldrb	r3, [r3, #0]
    f13e:	3301      	adds	r3, #1
    f140:	b2da      	uxtb	r2, r3
    f142:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14a:	701a      	strb	r2, [r3, #0]
    f14c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f154:	781b      	ldrb	r3, [r3, #0]
    f156:	2bff      	cmp	r3, #255	; 0xff
    f158:	d105      	bne.n	f166 <send_gps_pos+0x796>
    f15a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f162:	2200      	movs	r2, #0
    f164:	701a      	strb	r2, [r3, #0]
    f166:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	461a      	mov	r2, r3
    f172:	f24c 0368 	movw	r3, #49256	; 0xc068
    f176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17a:	7899      	ldrb	r1, [r3, #2]
    f17c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f184:	5499      	strb	r1, [r3, r2]
    f186:	4b68      	ldr	r3, [pc, #416]	; (f328 <send_gps_pos+0x958>)
    f188:	781a      	ldrb	r2, [r3, #0]
    f18a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f192:	781b      	ldrb	r3, [r3, #0]
    f194:	4413      	add	r3, r2
    f196:	b2da      	uxtb	r2, r3
    f198:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a0:	701a      	strb	r2, [r3, #0]
    f1a2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1aa:	781a      	ldrb	r2, [r3, #0]
    f1ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b4:	781b      	ldrb	r3, [r3, #0]
    f1b6:	4413      	add	r3, r2
    f1b8:	b2da      	uxtb	r2, r3
    f1ba:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c2:	701a      	strb	r2, [r3, #0]
    f1c4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1cc:	781b      	ldrb	r3, [r3, #0]
    f1ce:	3301      	adds	r3, #1
    f1d0:	b2da      	uxtb	r2, r3
    f1d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1da:	701a      	strb	r2, [r3, #0]
    f1dc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e4:	781b      	ldrb	r3, [r3, #0]
    f1e6:	2bff      	cmp	r3, #255	; 0xff
    f1e8:	d105      	bne.n	f1f6 <send_gps_pos+0x826>
    f1ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f2:	2200      	movs	r2, #0
    f1f4:	701a      	strb	r2, [r3, #0]
    f1f6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fe:	781b      	ldrb	r3, [r3, #0]
    f200:	461a      	mov	r2, r3
    f202:	f24c 0368 	movw	r3, #49256	; 0xc068
    f206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20a:	78d9      	ldrb	r1, [r3, #3]
    f20c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f214:	5499      	strb	r1, [r3, r2]
    f216:	4b45      	ldr	r3, [pc, #276]	; (f32c <send_gps_pos+0x95c>)
    f218:	781a      	ldrb	r2, [r3, #0]
    f21a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f222:	781b      	ldrb	r3, [r3, #0]
    f224:	4413      	add	r3, r2
    f226:	b2da      	uxtb	r2, r3
    f228:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f230:	701a      	strb	r2, [r3, #0]
    f232:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23a:	781a      	ldrb	r2, [r3, #0]
    f23c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f244:	781b      	ldrb	r3, [r3, #0]
    f246:	4413      	add	r3, r2
    f248:	b2da      	uxtb	r2, r3
    f24a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f252:	701a      	strb	r2, [r3, #0]
    f254:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	781b      	ldrb	r3, [r3, #0]
    f25e:	3301      	adds	r3, #1
    f260:	b2da      	uxtb	r2, r3
    f262:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26a:	701a      	strb	r2, [r3, #0]
    f26c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f274:	781b      	ldrb	r3, [r3, #0]
    f276:	2bff      	cmp	r3, #255	; 0xff
    f278:	d105      	bne.n	f286 <send_gps_pos+0x8b6>
    f27a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f282:	2200      	movs	r2, #0
    f284:	701a      	strb	r2, [r3, #0]
    f286:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28e:	781b      	ldrb	r3, [r3, #0]
    f290:	461a      	mov	r2, r3
    f292:	f24c 035c 	movw	r3, #49244	; 0xc05c
    f296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29a:	7819      	ldrb	r1, [r3, #0]
    f29c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a4:	5499      	strb	r1, [r3, r2]
    f2a6:	f24c 035c 	movw	r3, #49244	; 0xc05c
    f2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ae:	781a      	ldrb	r2, [r3, #0]
    f2b0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	4413      	add	r3, r2
    f2bc:	b2da      	uxtb	r2, r3
    f2be:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c6:	701a      	strb	r2, [r3, #0]
    f2c8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d0:	781a      	ldrb	r2, [r3, #0]
    f2d2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	781b      	ldrb	r3, [r3, #0]
    f2dc:	4413      	add	r3, r2
    f2de:	b2da      	uxtb	r2, r3
    f2e0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e8:	701a      	strb	r2, [r3, #0]
    f2ea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	781b      	ldrb	r3, [r3, #0]
    f2f4:	3301      	adds	r3, #1
    f2f6:	b2da      	uxtb	r2, r3
    f2f8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f300:	701a      	strb	r2, [r3, #0]
    f302:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	781b      	ldrb	r3, [r3, #0]
    f30c:	2bff      	cmp	r3, #255	; 0xff
    f30e:	d10f      	bne.n	f330 <send_gps_pos+0x960>
    f310:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f318:	2200      	movs	r2, #0
    f31a:	701a      	strb	r2, [r3, #0]
    f31c:	e008      	b.n	f330 <send_gps_pos+0x960>
    f31e:	bf00      	nop
    f320:	2004c073 	.word	0x2004c073
    f324:	2004c069 	.word	0x2004c069
    f328:	2004c06a 	.word	0x2004c06a
    f32c:	2004c06b 	.word	0x2004c06b
    f330:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f338:	781b      	ldrb	r3, [r3, #0]
    f33a:	461a      	mov	r2, r3
    f33c:	f24c 035c 	movw	r3, #49244	; 0xc05c
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	7859      	ldrb	r1, [r3, #1]
    f346:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f34e:	5499      	strb	r1, [r3, r2]
    f350:	4bd1      	ldr	r3, [pc, #836]	; (f698 <send_gps_pos+0xcc8>)
    f352:	781a      	ldrb	r2, [r3, #0]
    f354:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35c:	781b      	ldrb	r3, [r3, #0]
    f35e:	4413      	add	r3, r2
    f360:	b2da      	uxtb	r2, r3
    f362:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	701a      	strb	r2, [r3, #0]
    f36c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	781a      	ldrb	r2, [r3, #0]
    f376:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	4413      	add	r3, r2
    f382:	b2da      	uxtb	r2, r3
    f384:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38c:	701a      	strb	r2, [r3, #0]
    f38e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f396:	781b      	ldrb	r3, [r3, #0]
    f398:	3301      	adds	r3, #1
    f39a:	b2da      	uxtb	r2, r3
    f39c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a4:	701a      	strb	r2, [r3, #0]
    f3a6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ae:	781b      	ldrb	r3, [r3, #0]
    f3b0:	2bff      	cmp	r3, #255	; 0xff
    f3b2:	d105      	bne.n	f3c0 <send_gps_pos+0x9f0>
    f3b4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3bc:	2200      	movs	r2, #0
    f3be:	701a      	strb	r2, [r3, #0]
    f3c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c8:	781b      	ldrb	r3, [r3, #0]
    f3ca:	461a      	mov	r2, r3
    f3cc:	f24c 035c 	movw	r3, #49244	; 0xc05c
    f3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d4:	7899      	ldrb	r1, [r3, #2]
    f3d6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3de:	5499      	strb	r1, [r3, r2]
    f3e0:	4bae      	ldr	r3, [pc, #696]	; (f69c <send_gps_pos+0xccc>)
    f3e2:	781a      	ldrb	r2, [r3, #0]
    f3e4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ec:	781b      	ldrb	r3, [r3, #0]
    f3ee:	4413      	add	r3, r2
    f3f0:	b2da      	uxtb	r2, r3
    f3f2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fa:	701a      	strb	r2, [r3, #0]
    f3fc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f404:	781a      	ldrb	r2, [r3, #0]
    f406:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	4413      	add	r3, r2
    f412:	b2da      	uxtb	r2, r3
    f414:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41c:	701a      	strb	r2, [r3, #0]
    f41e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	3301      	adds	r3, #1
    f42a:	b2da      	uxtb	r2, r3
    f42c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f434:	701a      	strb	r2, [r3, #0]
    f436:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	2bff      	cmp	r3, #255	; 0xff
    f442:	d105      	bne.n	f450 <send_gps_pos+0xa80>
    f444:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	2200      	movs	r2, #0
    f44e:	701a      	strb	r2, [r3, #0]
    f450:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f458:	781b      	ldrb	r3, [r3, #0]
    f45a:	461a      	mov	r2, r3
    f45c:	f24c 035c 	movw	r3, #49244	; 0xc05c
    f460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f464:	78d9      	ldrb	r1, [r3, #3]
    f466:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46e:	5499      	strb	r1, [r3, r2]
    f470:	4b8b      	ldr	r3, [pc, #556]	; (f6a0 <send_gps_pos+0xcd0>)
    f472:	781a      	ldrb	r2, [r3, #0]
    f474:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47c:	781b      	ldrb	r3, [r3, #0]
    f47e:	4413      	add	r3, r2
    f480:	b2da      	uxtb	r2, r3
    f482:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	701a      	strb	r2, [r3, #0]
    f48c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	781a      	ldrb	r2, [r3, #0]
    f496:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49e:	781b      	ldrb	r3, [r3, #0]
    f4a0:	4413      	add	r3, r2
    f4a2:	b2da      	uxtb	r2, r3
    f4a4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ac:	701a      	strb	r2, [r3, #0]
    f4ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b6:	781b      	ldrb	r3, [r3, #0]
    f4b8:	3301      	adds	r3, #1
    f4ba:	b2da      	uxtb	r2, r3
    f4bc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c4:	701a      	strb	r2, [r3, #0]
    f4c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ce:	781b      	ldrb	r3, [r3, #0]
    f4d0:	2bff      	cmp	r3, #255	; 0xff
    f4d2:	d105      	bne.n	f4e0 <send_gps_pos+0xb10>
    f4d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4dc:	2200      	movs	r2, #0
    f4de:	701a      	strb	r2, [r3, #0]
    f4e0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e8:	781b      	ldrb	r3, [r3, #0]
    f4ea:	461a      	mov	r2, r3
    f4ec:	f24c 0360 	movw	r3, #49248	; 0xc060
    f4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f4:	7819      	ldrb	r1, [r3, #0]
    f4f6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fe:	5499      	strb	r1, [r3, r2]
    f500:	f24c 0360 	movw	r3, #49248	; 0xc060
    f504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f508:	781a      	ldrb	r2, [r3, #0]
    f50a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f512:	781b      	ldrb	r3, [r3, #0]
    f514:	4413      	add	r3, r2
    f516:	b2da      	uxtb	r2, r3
    f518:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f520:	701a      	strb	r2, [r3, #0]
    f522:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52a:	781a      	ldrb	r2, [r3, #0]
    f52c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	781b      	ldrb	r3, [r3, #0]
    f536:	4413      	add	r3, r2
    f538:	b2da      	uxtb	r2, r3
    f53a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f542:	701a      	strb	r2, [r3, #0]
    f544:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	3301      	adds	r3, #1
    f550:	b2da      	uxtb	r2, r3
    f552:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781b      	ldrb	r3, [r3, #0]
    f566:	2bff      	cmp	r3, #255	; 0xff
    f568:	d105      	bne.n	f576 <send_gps_pos+0xba6>
    f56a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f572:	2200      	movs	r2, #0
    f574:	701a      	strb	r2, [r3, #0]
    f576:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57e:	781b      	ldrb	r3, [r3, #0]
    f580:	461a      	mov	r2, r3
    f582:	f24c 0360 	movw	r3, #49248	; 0xc060
    f586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58a:	7859      	ldrb	r1, [r3, #1]
    f58c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	5499      	strb	r1, [r3, r2]
    f596:	4b43      	ldr	r3, [pc, #268]	; (f6a4 <send_gps_pos+0xcd4>)
    f598:	781a      	ldrb	r2, [r3, #0]
    f59a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	4413      	add	r3, r2
    f5a6:	b2da      	uxtb	r2, r3
    f5a8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b0:	701a      	strb	r2, [r3, #0]
    f5b2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ba:	781a      	ldrb	r2, [r3, #0]
    f5bc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	781b      	ldrb	r3, [r3, #0]
    f5c6:	4413      	add	r3, r2
    f5c8:	b2da      	uxtb	r2, r3
    f5ca:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d2:	701a      	strb	r2, [r3, #0]
    f5d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	3301      	adds	r3, #1
    f5e0:	b2da      	uxtb	r2, r3
    f5e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ea:	701a      	strb	r2, [r3, #0]
    f5ec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f4:	781b      	ldrb	r3, [r3, #0]
    f5f6:	2bff      	cmp	r3, #255	; 0xff
    f5f8:	d105      	bne.n	f606 <send_gps_pos+0xc36>
    f5fa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f602:	2200      	movs	r2, #0
    f604:	701a      	strb	r2, [r3, #0]
    f606:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60e:	781b      	ldrb	r3, [r3, #0]
    f610:	461a      	mov	r2, r3
    f612:	f24c 0360 	movw	r3, #49248	; 0xc060
    f616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61a:	7899      	ldrb	r1, [r3, #2]
    f61c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f624:	5499      	strb	r1, [r3, r2]
    f626:	4b20      	ldr	r3, [pc, #128]	; (f6a8 <send_gps_pos+0xcd8>)
    f628:	781a      	ldrb	r2, [r3, #0]
    f62a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f632:	781b      	ldrb	r3, [r3, #0]
    f634:	4413      	add	r3, r2
    f636:	b2da      	uxtb	r2, r3
    f638:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f640:	701a      	strb	r2, [r3, #0]
    f642:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64a:	781a      	ldrb	r2, [r3, #0]
    f64c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f654:	781b      	ldrb	r3, [r3, #0]
    f656:	4413      	add	r3, r2
    f658:	b2da      	uxtb	r2, r3
    f65a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f662:	701a      	strb	r2, [r3, #0]
    f664:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66c:	781b      	ldrb	r3, [r3, #0]
    f66e:	3301      	adds	r3, #1
    f670:	b2da      	uxtb	r2, r3
    f672:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67a:	701a      	strb	r2, [r3, #0]
    f67c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f684:	781b      	ldrb	r3, [r3, #0]
    f686:	2bff      	cmp	r3, #255	; 0xff
    f688:	d110      	bne.n	f6ac <send_gps_pos+0xcdc>
    f68a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f692:	2200      	movs	r2, #0
    f694:	701a      	strb	r2, [r3, #0]
    f696:	e009      	b.n	f6ac <send_gps_pos+0xcdc>
    f698:	2004c05d 	.word	0x2004c05d
    f69c:	2004c05e 	.word	0x2004c05e
    f6a0:	2004c05f 	.word	0x2004c05f
    f6a4:	2004c061 	.word	0x2004c061
    f6a8:	2004c062 	.word	0x2004c062
    f6ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b4:	781b      	ldrb	r3, [r3, #0]
    f6b6:	461a      	mov	r2, r3
    f6b8:	f24c 0360 	movw	r3, #49248	; 0xc060
    f6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c0:	78d9      	ldrb	r1, [r3, #3]
    f6c2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ca:	5499      	strb	r1, [r3, r2]
    f6cc:	4bd3      	ldr	r3, [pc, #844]	; (fa1c <send_gps_pos+0x104c>)
    f6ce:	781a      	ldrb	r2, [r3, #0]
    f6d0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d8:	781b      	ldrb	r3, [r3, #0]
    f6da:	4413      	add	r3, r2
    f6dc:	b2da      	uxtb	r2, r3
    f6de:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e6:	701a      	strb	r2, [r3, #0]
    f6e8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f0:	781a      	ldrb	r2, [r3, #0]
    f6f2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fa:	781b      	ldrb	r3, [r3, #0]
    f6fc:	4413      	add	r3, r2
    f6fe:	b2da      	uxtb	r2, r3
    f700:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f708:	701a      	strb	r2, [r3, #0]
    f70a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f712:	781b      	ldrb	r3, [r3, #0]
    f714:	3301      	adds	r3, #1
    f716:	b2da      	uxtb	r2, r3
    f718:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f720:	701a      	strb	r2, [r3, #0]
    f722:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72a:	781b      	ldrb	r3, [r3, #0]
    f72c:	2bff      	cmp	r3, #255	; 0xff
    f72e:	d105      	bne.n	f73c <send_gps_pos+0xd6c>
    f730:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f738:	2200      	movs	r2, #0
    f73a:	701a      	strb	r2, [r3, #0]
    f73c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	461a      	mov	r2, r3
    f748:	f24c 0364 	movw	r3, #49252	; 0xc064
    f74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f750:	7819      	ldrb	r1, [r3, #0]
    f752:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75a:	5499      	strb	r1, [r3, r2]
    f75c:	f24c 0364 	movw	r3, #49252	; 0xc064
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	781a      	ldrb	r2, [r3, #0]
    f766:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	4413      	add	r3, r2
    f772:	b2da      	uxtb	r2, r3
    f774:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77c:	701a      	strb	r2, [r3, #0]
    f77e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f786:	781a      	ldrb	r2, [r3, #0]
    f788:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f790:	781b      	ldrb	r3, [r3, #0]
    f792:	4413      	add	r3, r2
    f794:	b2da      	uxtb	r2, r3
    f796:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79e:	701a      	strb	r2, [r3, #0]
    f7a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a8:	781b      	ldrb	r3, [r3, #0]
    f7aa:	3301      	adds	r3, #1
    f7ac:	b2da      	uxtb	r2, r3
    f7ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b6:	701a      	strb	r2, [r3, #0]
    f7b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	2bff      	cmp	r3, #255	; 0xff
    f7c4:	d105      	bne.n	f7d2 <send_gps_pos+0xe02>
    f7c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ce:	2200      	movs	r2, #0
    f7d0:	701a      	strb	r2, [r3, #0]
    f7d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	461a      	mov	r2, r3
    f7de:	f24c 0364 	movw	r3, #49252	; 0xc064
    f7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e6:	7859      	ldrb	r1, [r3, #1]
    f7e8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	5499      	strb	r1, [r3, r2]
    f7f2:	4b8b      	ldr	r3, [pc, #556]	; (fa20 <send_gps_pos+0x1050>)
    f7f4:	781a      	ldrb	r2, [r3, #0]
    f7f6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fe:	781b      	ldrb	r3, [r3, #0]
    f800:	4413      	add	r3, r2
    f802:	b2da      	uxtb	r2, r3
    f804:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80c:	701a      	strb	r2, [r3, #0]
    f80e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f816:	781a      	ldrb	r2, [r3, #0]
    f818:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f820:	781b      	ldrb	r3, [r3, #0]
    f822:	4413      	add	r3, r2
    f824:	b2da      	uxtb	r2, r3
    f826:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82e:	701a      	strb	r2, [r3, #0]
    f830:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f838:	781b      	ldrb	r3, [r3, #0]
    f83a:	3301      	adds	r3, #1
    f83c:	b2da      	uxtb	r2, r3
    f83e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f846:	701a      	strb	r2, [r3, #0]
    f848:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f850:	781b      	ldrb	r3, [r3, #0]
    f852:	2bff      	cmp	r3, #255	; 0xff
    f854:	d105      	bne.n	f862 <send_gps_pos+0xe92>
    f856:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85e:	2200      	movs	r2, #0
    f860:	701a      	strb	r2, [r3, #0]
    f862:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86a:	781b      	ldrb	r3, [r3, #0]
    f86c:	461a      	mov	r2, r3
    f86e:	f24c 0364 	movw	r3, #49252	; 0xc064
    f872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f876:	7899      	ldrb	r1, [r3, #2]
    f878:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f880:	5499      	strb	r1, [r3, r2]
    f882:	4b68      	ldr	r3, [pc, #416]	; (fa24 <send_gps_pos+0x1054>)
    f884:	781a      	ldrb	r2, [r3, #0]
    f886:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88e:	781b      	ldrb	r3, [r3, #0]
    f890:	4413      	add	r3, r2
    f892:	b2da      	uxtb	r2, r3
    f894:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89c:	701a      	strb	r2, [r3, #0]
    f89e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a6:	781a      	ldrb	r2, [r3, #0]
    f8a8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	4413      	add	r3, r2
    f8b4:	b2da      	uxtb	r2, r3
    f8b6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8be:	701a      	strb	r2, [r3, #0]
    f8c0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c8:	781b      	ldrb	r3, [r3, #0]
    f8ca:	3301      	adds	r3, #1
    f8cc:	b2da      	uxtb	r2, r3
    f8ce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d6:	701a      	strb	r2, [r3, #0]
    f8d8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e0:	781b      	ldrb	r3, [r3, #0]
    f8e2:	2bff      	cmp	r3, #255	; 0xff
    f8e4:	d105      	bne.n	f8f2 <send_gps_pos+0xf22>
    f8e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ee:	2200      	movs	r2, #0
    f8f0:	701a      	strb	r2, [r3, #0]
    f8f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fa:	781b      	ldrb	r3, [r3, #0]
    f8fc:	461a      	mov	r2, r3
    f8fe:	f24c 0364 	movw	r3, #49252	; 0xc064
    f902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f906:	78d9      	ldrb	r1, [r3, #3]
    f908:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f910:	5499      	strb	r1, [r3, r2]
    f912:	4b45      	ldr	r3, [pc, #276]	; (fa28 <send_gps_pos+0x1058>)
    f914:	781a      	ldrb	r2, [r3, #0]
    f916:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91e:	781b      	ldrb	r3, [r3, #0]
    f920:	4413      	add	r3, r2
    f922:	b2da      	uxtb	r2, r3
    f924:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92c:	701a      	strb	r2, [r3, #0]
    f92e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f936:	781a      	ldrb	r2, [r3, #0]
    f938:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f940:	781b      	ldrb	r3, [r3, #0]
    f942:	4413      	add	r3, r2
    f944:	b2da      	uxtb	r2, r3
    f946:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94e:	701a      	strb	r2, [r3, #0]
    f950:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	3301      	adds	r3, #1
    f95c:	b2da      	uxtb	r2, r3
    f95e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f966:	701a      	strb	r2, [r3, #0]
    f968:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f970:	781b      	ldrb	r3, [r3, #0]
    f972:	2bff      	cmp	r3, #255	; 0xff
    f974:	d105      	bne.n	f982 <send_gps_pos+0xfb2>
    f976:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97e:	2200      	movs	r2, #0
    f980:	701a      	strb	r2, [r3, #0]
    f982:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98a:	781b      	ldrb	r3, [r3, #0]
    f98c:	461a      	mov	r2, r3
    f98e:	f24c 0358 	movw	r3, #49240	; 0xc058
    f992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f996:	7819      	ldrb	r1, [r3, #0]
    f998:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    f99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a0:	5499      	strb	r1, [r3, r2]
    f9a2:	f24c 0358 	movw	r3, #49240	; 0xc058
    f9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9aa:	781a      	ldrb	r2, [r3, #0]
    f9ac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b4:	781b      	ldrb	r3, [r3, #0]
    f9b6:	4413      	add	r3, r2
    f9b8:	b2da      	uxtb	r2, r3
    f9ba:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c2:	701a      	strb	r2, [r3, #0]
    f9c4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9cc:	781a      	ldrb	r2, [r3, #0]
    f9ce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	781b      	ldrb	r3, [r3, #0]
    f9d8:	4413      	add	r3, r2
    f9da:	b2da      	uxtb	r2, r3
    f9dc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    f9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e4:	701a      	strb	r2, [r3, #0]
    f9e6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	781b      	ldrb	r3, [r3, #0]
    f9f0:	3301      	adds	r3, #1
    f9f2:	b2da      	uxtb	r2, r3
    f9f4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    f9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fc:	701a      	strb	r2, [r3, #0]
    f9fe:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	781b      	ldrb	r3, [r3, #0]
    fa08:	2bff      	cmp	r3, #255	; 0xff
    fa0a:	d10f      	bne.n	fa2c <send_gps_pos+0x105c>
    fa0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fa10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa14:	2200      	movs	r2, #0
    fa16:	701a      	strb	r2, [r3, #0]
    fa18:	e008      	b.n	fa2c <send_gps_pos+0x105c>
    fa1a:	bf00      	nop
    fa1c:	2004c063 	.word	0x2004c063
    fa20:	2004c065 	.word	0x2004c065
    fa24:	2004c066 	.word	0x2004c066
    fa28:	2004c067 	.word	0x2004c067
    fa2c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fa30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	461a      	mov	r2, r3
    fa38:	f24c 0358 	movw	r3, #49240	; 0xc058
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	7859      	ldrb	r1, [r3, #1]
    fa42:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fa46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4a:	5499      	strb	r1, [r3, r2]
    fa4c:	4bc0      	ldr	r3, [pc, #768]	; (fd50 <send_gps_pos+0x1380>)
    fa4e:	781a      	ldrb	r2, [r3, #0]
    fa50:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	4413      	add	r3, r2
    fa5c:	b2da      	uxtb	r2, r3
    fa5e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	701a      	strb	r2, [r3, #0]
    fa68:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	781a      	ldrb	r2, [r3, #0]
    fa72:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fa76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7a:	781b      	ldrb	r3, [r3, #0]
    fa7c:	4413      	add	r3, r2
    fa7e:	b2da      	uxtb	r2, r3
    fa80:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fa84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa88:	701a      	strb	r2, [r3, #0]
    fa8a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fa8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa92:	781b      	ldrb	r3, [r3, #0]
    fa94:	3301      	adds	r3, #1
    fa96:	b2da      	uxtb	r2, r3
    fa98:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa0:	701a      	strb	r2, [r3, #0]
    faa2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    faa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	2bff      	cmp	r3, #255	; 0xff
    faae:	d105      	bne.n	fabc <send_gps_pos+0x10ec>
    fab0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab8:	2200      	movs	r2, #0
    faba:	701a      	strb	r2, [r3, #0]
    fabc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac4:	781b      	ldrb	r3, [r3, #0]
    fac6:	461a      	mov	r2, r3
    fac8:	f24c 0358 	movw	r3, #49240	; 0xc058
    facc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad0:	7899      	ldrb	r1, [r3, #2]
    fad2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fada:	5499      	strb	r1, [r3, r2]
    fadc:	4b9d      	ldr	r3, [pc, #628]	; (fd54 <send_gps_pos+0x1384>)
    fade:	781a      	ldrb	r2, [r3, #0]
    fae0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae8:	781b      	ldrb	r3, [r3, #0]
    faea:	4413      	add	r3, r2
    faec:	b2da      	uxtb	r2, r3
    faee:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    faf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf6:	701a      	strb	r2, [r3, #0]
    faf8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fafc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb00:	781a      	ldrb	r2, [r3, #0]
    fb02:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0a:	781b      	ldrb	r3, [r3, #0]
    fb0c:	4413      	add	r3, r2
    fb0e:	b2da      	uxtb	r2, r3
    fb10:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb18:	701a      	strb	r2, [r3, #0]
    fb1a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb22:	781b      	ldrb	r3, [r3, #0]
    fb24:	3301      	adds	r3, #1
    fb26:	b2da      	uxtb	r2, r3
    fb28:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb30:	701a      	strb	r2, [r3, #0]
    fb32:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3a:	781b      	ldrb	r3, [r3, #0]
    fb3c:	2bff      	cmp	r3, #255	; 0xff
    fb3e:	d105      	bne.n	fb4c <send_gps_pos+0x117c>
    fb40:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	2200      	movs	r2, #0
    fb4a:	701a      	strb	r2, [r3, #0]
    fb4c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb54:	781b      	ldrb	r3, [r3, #0]
    fb56:	461a      	mov	r2, r3
    fb58:	f24c 0358 	movw	r3, #49240	; 0xc058
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	78d9      	ldrb	r1, [r3, #3]
    fb62:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6a:	5499      	strb	r1, [r3, r2]
    fb6c:	4b7a      	ldr	r3, [pc, #488]	; (fd58 <send_gps_pos+0x1388>)
    fb6e:	781a      	ldrb	r2, [r3, #0]
    fb70:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	4413      	add	r3, r2
    fb7c:	b2da      	uxtb	r2, r3
    fb7e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	701a      	strb	r2, [r3, #0]
    fb88:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	781a      	ldrb	r2, [r3, #0]
    fb92:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9a:	781b      	ldrb	r3, [r3, #0]
    fb9c:	4413      	add	r3, r2
    fb9e:	b2da      	uxtb	r2, r3
    fba0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba8:	701a      	strb	r2, [r3, #0]
    fbaa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	3301      	adds	r3, #1
    fbb6:	b2da      	uxtb	r2, r3
    fbb8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc0:	701a      	strb	r2, [r3, #0]
    fbc2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	2bff      	cmp	r3, #255	; 0xff
    fbce:	d105      	bne.n	fbdc <send_gps_pos+0x120c>
    fbd0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd8:	2200      	movs	r2, #0
    fbda:	701a      	strb	r2, [r3, #0]
    fbdc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe4:	781b      	ldrb	r3, [r3, #0]
    fbe6:	461a      	mov	r2, r3
    fbe8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf0:	7819      	ldrb	r1, [r3, #0]
    fbf2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fbf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfa:	5499      	strb	r1, [r3, r2]
    fbfc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	3301      	adds	r3, #1
    fc08:	b2da      	uxtb	r2, r3
    fc0a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc12:	701a      	strb	r2, [r3, #0]
    fc14:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1c:	781b      	ldrb	r3, [r3, #0]
    fc1e:	2bff      	cmp	r3, #255	; 0xff
    fc20:	d105      	bne.n	fc2e <send_gps_pos+0x125e>
    fc22:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2a:	2200      	movs	r2, #0
    fc2c:	701a      	strb	r2, [r3, #0]
    fc2e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	461a      	mov	r2, r3
    fc3a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc42:	7819      	ldrb	r1, [r3, #0]
    fc44:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fc48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4c:	5499      	strb	r1, [r3, r2]
    fc4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc56:	781b      	ldrb	r3, [r3, #0]
    fc58:	3301      	adds	r3, #1
    fc5a:	b2da      	uxtb	r2, r3
    fc5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc64:	701a      	strb	r2, [r3, #0]
    fc66:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6e:	781b      	ldrb	r3, [r3, #0]
    fc70:	2bff      	cmp	r3, #255	; 0xff
    fc72:	d105      	bne.n	fc80 <send_gps_pos+0x12b0>
    fc74:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7c:	2200      	movs	r2, #0
    fc7e:	701a      	strb	r2, [r3, #0]
    fc80:	f242 0339 	movw	r3, #8249	; 0x2039
    fc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc88:	781b      	ldrb	r3, [r3, #0]
    fc8a:	b2db      	uxtb	r3, r3
    fc8c:	f003 0310 	and.w	r3, r3, #16
    fc90:	2b00      	cmp	r3, #0
    fc92:	d15a      	bne.n	fd4a <send_gps_pos+0x137a>
    fc94:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	b2db      	uxtb	r3, r3
    fca0:	461a      	mov	r2, r3
    fca2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcaa:	5c9a      	ldrb	r2, [r3, r2]
    fcac:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
    fcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb4:	701a      	strb	r2, [r3, #0]
    fcb6:	f64b 73ec 	movw	r3, #49132	; 0xbfec
    fcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcbe:	2200      	movs	r2, #0
    fcc0:	701a      	strb	r2, [r3, #0]
    fcc2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcca:	781b      	ldrb	r3, [r3, #0]
    fccc:	b2db      	uxtb	r3, r3
    fcce:	3301      	adds	r3, #1
    fcd0:	b2da      	uxtb	r2, r3
    fcd2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fcd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcda:	701a      	strb	r2, [r3, #0]
    fcdc:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce4:	781b      	ldrb	r3, [r3, #0]
    fce6:	b2db      	uxtb	r3, r3
    fce8:	2bff      	cmp	r3, #255	; 0xff
    fcea:	d105      	bne.n	fcf8 <send_gps_pos+0x1328>
    fcec:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf4:	2200      	movs	r2, #0
    fcf6:	701a      	strb	r2, [r3, #0]
    fcf8:	f242 0338 	movw	r3, #8248	; 0x2038
    fcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd00:	f242 0238 	movw	r2, #8248	; 0x2038
    fd04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd08:	7812      	ldrb	r2, [r2, #0]
    fd0a:	b2d2      	uxtb	r2, r2
    fd0c:	f042 0201 	orr.w	r2, r2, #1
    fd10:	b2d2      	uxtb	r2, r2
    fd12:	701a      	strb	r2, [r3, #0]
    fd14:	f242 0339 	movw	r3, #8249	; 0x2039
    fd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd1c:	f242 0239 	movw	r2, #8249	; 0x2039
    fd20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd24:	7812      	ldrb	r2, [r2, #0]
    fd26:	b2d2      	uxtb	r2, r2
    fd28:	f042 0210 	orr.w	r2, r2, #16
    fd2c:	b2d2      	uxtb	r2, r2
    fd2e:	701a      	strb	r2, [r3, #0]
    fd30:	e00b      	b.n	fd4a <send_gps_pos+0x137a>
    fd32:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    fd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3a:	781b      	ldrb	r3, [r3, #0]
    fd3c:	3301      	adds	r3, #1
    fd3e:	b2da      	uxtb	r2, r3
    fd40:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    fd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd48:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fd4a:	f005 fbfd 	bl	15548 <estimator_update_state_gps>
  }
}
    fd4e:	bd80      	pop	{r7, pc}
    fd50:	2004c059 	.word	0x2004c059
    fd54:	2004c05a 	.word	0x2004c05a
    fd58:	2004c05b 	.word	0x2004c05b

0000fd5c <send_radIR>:

void send_radIR(void){
    fd5c:	b480      	push	{r7}
    fd5e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fd60:	f24c 037e 	movw	r3, #49278	; 0xc07e
    fd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd68:	781b      	ldrb	r3, [r3, #0]
    fd6a:	2b00      	cmp	r3, #0
    fd6c:	f000 85e8 	beq.w	10940 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fd70:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd78:	781a      	ldrb	r2, [r3, #0]
    fd7a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd82:	781b      	ldrb	r3, [r3, #0]
    fd84:	b2db      	uxtb	r3, r3
    fd86:	429a      	cmp	r2, r3
    fd88:	d313      	bcc.n	fdb2 <send_radIR+0x56>
    fd8a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	b2db      	uxtb	r3, r3
    fd96:	461a      	mov	r2, r3
    fd98:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	781b      	ldrb	r3, [r3, #0]
    fda2:	1ad3      	subs	r3, r2, r3
    fda4:	33ff      	adds	r3, #255	; 0xff
    fda6:	2b14      	cmp	r3, #20
    fda8:	bfd4      	ite	le
    fdaa:	2300      	movle	r3, #0
    fdac:	2301      	movgt	r3, #1
    fdae:	b2db      	uxtb	r3, r3
    fdb0:	e011      	b.n	fdd6 <send_radIR+0x7a>
    fdb2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
    fdb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdba:	781b      	ldrb	r3, [r3, #0]
    fdbc:	b2db      	uxtb	r3, r3
    fdbe:	461a      	mov	r2, r3
    fdc0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc8:	781b      	ldrb	r3, [r3, #0]
    fdca:	1ad3      	subs	r3, r2, r3
    fdcc:	2b14      	cmp	r3, #20
    fdce:	bfd4      	ite	le
    fdd0:	2300      	movle	r3, #0
    fdd2:	2301      	movgt	r3, #1
    fdd4:	b2db      	uxtb	r3, r3
    fdd6:	2b00      	cmp	r3, #0
    fdd8:	f000 85a6 	beq.w	10928 <send_radIR+0xbcc>
    fddc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde4:	781b      	ldrb	r3, [r3, #0]
    fde6:	461a      	mov	r2, r3
    fde8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf0:	2105      	movs	r1, #5
    fdf2:	5499      	strb	r1, [r3, r2]
    fdf4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fdf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdfc:	781b      	ldrb	r3, [r3, #0]
    fdfe:	3301      	adds	r3, #1
    fe00:	b2da      	uxtb	r2, r3
    fe02:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	701a      	strb	r2, [r3, #0]
    fe0c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe14:	781b      	ldrb	r3, [r3, #0]
    fe16:	2bff      	cmp	r3, #255	; 0xff
    fe18:	d105      	bne.n	fe26 <send_radIR+0xca>
    fe1a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe22:	2200      	movs	r2, #0
    fe24:	701a      	strb	r2, [r3, #0]
    fe26:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe2e:	781b      	ldrb	r3, [r3, #0]
    fe30:	461a      	mov	r2, r3
    fe32:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fe36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3a:	2105      	movs	r1, #5
    fe3c:	5499      	strb	r1, [r3, r2]
    fe3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe46:	781b      	ldrb	r3, [r3, #0]
    fe48:	3301      	adds	r3, #1
    fe4a:	b2da      	uxtb	r2, r3
    fe4c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe54:	701a      	strb	r2, [r3, #0]
    fe56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe5e:	781b      	ldrb	r3, [r3, #0]
    fe60:	2bff      	cmp	r3, #255	; 0xff
    fe62:	d105      	bne.n	fe70 <send_radIR+0x114>
    fe64:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6c:	2200      	movs	r2, #0
    fe6e:	701a      	strb	r2, [r3, #0]
    fe70:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fe74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe78:	2205      	movs	r2, #5
    fe7a:	701a      	strb	r2, [r3, #0]
    fe7c:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fe80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe84:	2205      	movs	r2, #5
    fe86:	701a      	strb	r2, [r3, #0]
    fe88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fe8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe90:	781b      	ldrb	r3, [r3, #0]
    fe92:	461a      	mov	r2, r3
    fe94:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    fe98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9c:	7819      	ldrb	r1, [r3, #0]
    fe9e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    fea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea6:	5499      	strb	r1, [r3, r2]
    fea8:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    feac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb0:	781a      	ldrb	r2, [r3, #0]
    feb2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    feb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	4413      	add	r3, r2
    febe:	b2da      	uxtb	r2, r3
    fec0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec8:	701a      	strb	r2, [r3, #0]
    feca:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed2:	781a      	ldrb	r2, [r3, #0]
    fed4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fedc:	781b      	ldrb	r3, [r3, #0]
    fede:	4413      	add	r3, r2
    fee0:	b2da      	uxtb	r2, r3
    fee2:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    fee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feea:	701a      	strb	r2, [r3, #0]
    feec:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef4:	781b      	ldrb	r3, [r3, #0]
    fef6:	3301      	adds	r3, #1
    fef8:	b2da      	uxtb	r2, r3
    fefa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    fefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff02:	701a      	strb	r2, [r3, #0]
    ff04:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0c:	781b      	ldrb	r3, [r3, #0]
    ff0e:	2bff      	cmp	r3, #255	; 0xff
    ff10:	d105      	bne.n	ff1e <send_radIR+0x1c2>
    ff12:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1a:	2200      	movs	r2, #0
    ff1c:	701a      	strb	r2, [r3, #0]
    ff1e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff26:	781b      	ldrb	r3, [r3, #0]
    ff28:	461a      	mov	r2, r3
    ff2a:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    ff2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff32:	7859      	ldrb	r1, [r3, #1]
    ff34:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ff38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3c:	5499      	strb	r1, [r3, r2]
    ff3e:	4bd2      	ldr	r3, [pc, #840]	; (10288 <send_radIR+0x52c>)
    ff40:	781a      	ldrb	r2, [r3, #0]
    ff42:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ff46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff4a:	781b      	ldrb	r3, [r3, #0]
    ff4c:	4413      	add	r3, r2
    ff4e:	b2da      	uxtb	r2, r3
    ff50:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ff54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff58:	701a      	strb	r2, [r3, #0]
    ff5a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ff5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff62:	781a      	ldrb	r2, [r3, #0]
    ff64:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ff68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6c:	781b      	ldrb	r3, [r3, #0]
    ff6e:	4413      	add	r3, r2
    ff70:	b2da      	uxtb	r2, r3
    ff72:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ff76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7a:	701a      	strb	r2, [r3, #0]
    ff7c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	3301      	adds	r3, #1
    ff88:	b2da      	uxtb	r2, r3
    ff8a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff92:	701a      	strb	r2, [r3, #0]
    ff94:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ff98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff9c:	781b      	ldrb	r3, [r3, #0]
    ff9e:	2bff      	cmp	r3, #255	; 0xff
    ffa0:	d105      	bne.n	ffae <send_radIR+0x252>
    ffa2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ffa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffaa:	2200      	movs	r2, #0
    ffac:	701a      	strb	r2, [r3, #0]
    ffae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
    ffb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb6:	781b      	ldrb	r3, [r3, #0]
    ffb8:	461a      	mov	r2, r3
    ffba:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
    ffbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc2:	7899      	ldrb	r1, [r3, #2]
    ffc4:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    ffc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffcc:	5499      	strb	r1, [r3, r2]
    ffce:	4baf      	ldr	r3, [pc, #700]	; (1028c <send_radIR+0x530>)
    ffd0:	781a      	ldrb	r2, [r3, #0]
    ffd2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ffd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	4413      	add	r3, r2
    ffde:	b2da      	uxtb	r2, r3
    ffe0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    ffe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe8:	701a      	strb	r2, [r3, #0]
    ffea:	f64b 73ee 	movw	r3, #49134	; 0xbfee
    ffee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff2:	781a      	ldrb	r2, [r3, #0]
    fff4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
    fff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	4413      	add	r3, r2
   10000:	b2da      	uxtb	r2, r3
   10002:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000a:	701a      	strb	r2, [r3, #0]
   1000c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	3301      	adds	r3, #1
   10018:	b2da      	uxtb	r2, r3
   1001a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1001e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10022:	701a      	strb	r2, [r3, #0]
   10024:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002c:	781b      	ldrb	r3, [r3, #0]
   1002e:	2bff      	cmp	r3, #255	; 0xff
   10030:	d105      	bne.n	1003e <send_radIR+0x2e2>
   10032:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003a:	2200      	movs	r2, #0
   1003c:	701a      	strb	r2, [r3, #0]
   1003e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10046:	781b      	ldrb	r3, [r3, #0]
   10048:	461a      	mov	r2, r3
   1004a:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
   1004e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10052:	78d9      	ldrb	r1, [r3, #3]
   10054:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005c:	5499      	strb	r1, [r3, r2]
   1005e:	4b8c      	ldr	r3, [pc, #560]	; (10290 <send_radIR+0x534>)
   10060:	781a      	ldrb	r2, [r3, #0]
   10062:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006a:	781b      	ldrb	r3, [r3, #0]
   1006c:	4413      	add	r3, r2
   1006e:	b2da      	uxtb	r2, r3
   10070:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10078:	701a      	strb	r2, [r3, #0]
   1007a:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1007e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10082:	781a      	ldrb	r2, [r3, #0]
   10084:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1008c:	781b      	ldrb	r3, [r3, #0]
   1008e:	4413      	add	r3, r2
   10090:	b2da      	uxtb	r2, r3
   10092:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	701a      	strb	r2, [r3, #0]
   1009c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   100a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	3301      	adds	r3, #1
   100a8:	b2da      	uxtb	r2, r3
   100aa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   100ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   100b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	2bff      	cmp	r3, #255	; 0xff
   100c0:	d105      	bne.n	100ce <send_radIR+0x372>
   100c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   100c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ca:	2200      	movs	r2, #0
   100cc:	701a      	strb	r2, [r3, #0]
   100ce:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   100d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d6:	781b      	ldrb	r3, [r3, #0]
   100d8:	461a      	mov	r2, r3
   100da:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   100de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e2:	7819      	ldrb	r1, [r3, #0]
   100e4:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   100e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ec:	5499      	strb	r1, [r3, r2]
   100ee:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   100f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f6:	781a      	ldrb	r2, [r3, #0]
   100f8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   100fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	4413      	add	r3, r2
   10104:	b2da      	uxtb	r2, r3
   10106:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1010a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010e:	701a      	strb	r2, [r3, #0]
   10110:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	781a      	ldrb	r2, [r3, #0]
   1011a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	4413      	add	r3, r2
   10126:	b2da      	uxtb	r2, r3
   10128:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1012c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10130:	701a      	strb	r2, [r3, #0]
   10132:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	781b      	ldrb	r3, [r3, #0]
   1013c:	3301      	adds	r3, #1
   1013e:	b2da      	uxtb	r2, r3
   10140:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10148:	701a      	strb	r2, [r3, #0]
   1014a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	2bff      	cmp	r3, #255	; 0xff
   10156:	d105      	bne.n	10164 <send_radIR+0x408>
   10158:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1015c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10160:	2200      	movs	r2, #0
   10162:	701a      	strb	r2, [r3, #0]
   10164:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016c:	781b      	ldrb	r3, [r3, #0]
   1016e:	461a      	mov	r2, r3
   10170:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   10174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10178:	7859      	ldrb	r1, [r3, #1]
   1017a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	5499      	strb	r1, [r3, r2]
   10184:	4b43      	ldr	r3, [pc, #268]	; (10294 <send_radIR+0x538>)
   10186:	781a      	ldrb	r2, [r3, #0]
   10188:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1018c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10190:	781b      	ldrb	r3, [r3, #0]
   10192:	4413      	add	r3, r2
   10194:	b2da      	uxtb	r2, r3
   10196:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1019a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019e:	701a      	strb	r2, [r3, #0]
   101a0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   101a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a8:	781a      	ldrb	r2, [r3, #0]
   101aa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	781b      	ldrb	r3, [r3, #0]
   101b4:	4413      	add	r3, r2
   101b6:	b2da      	uxtb	r2, r3
   101b8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   101bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c0:	701a      	strb	r2, [r3, #0]
   101c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   101c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ca:	781b      	ldrb	r3, [r3, #0]
   101cc:	3301      	adds	r3, #1
   101ce:	b2da      	uxtb	r2, r3
   101d0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   101d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d8:	701a      	strb	r2, [r3, #0]
   101da:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   101de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e2:	781b      	ldrb	r3, [r3, #0]
   101e4:	2bff      	cmp	r3, #255	; 0xff
   101e6:	d105      	bne.n	101f4 <send_radIR+0x498>
   101e8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   101ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f0:	2200      	movs	r2, #0
   101f2:	701a      	strb	r2, [r3, #0]
   101f4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   101f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fc:	781b      	ldrb	r3, [r3, #0]
   101fe:	461a      	mov	r2, r3
   10200:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   10204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10208:	7899      	ldrb	r1, [r3, #2]
   1020a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1020e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10212:	5499      	strb	r1, [r3, r2]
   10214:	4b20      	ldr	r3, [pc, #128]	; (10298 <send_radIR+0x53c>)
   10216:	781a      	ldrb	r2, [r3, #0]
   10218:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1021c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10220:	781b      	ldrb	r3, [r3, #0]
   10222:	4413      	add	r3, r2
   10224:	b2da      	uxtb	r2, r3
   10226:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1022a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1022e:	701a      	strb	r2, [r3, #0]
   10230:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10238:	781a      	ldrb	r2, [r3, #0]
   1023a:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1023e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10242:	781b      	ldrb	r3, [r3, #0]
   10244:	4413      	add	r3, r2
   10246:	b2da      	uxtb	r2, r3
   10248:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1024c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10250:	701a      	strb	r2, [r3, #0]
   10252:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	3301      	adds	r3, #1
   1025e:	b2da      	uxtb	r2, r3
   10260:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10268:	701a      	strb	r2, [r3, #0]
   1026a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	781b      	ldrb	r3, [r3, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	d111      	bne.n	1029c <send_radIR+0x540>
   10278:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1027c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10280:	2200      	movs	r2, #0
   10282:	701a      	strb	r2, [r3, #0]
   10284:	e00a      	b.n	1029c <send_radIR+0x540>
   10286:	bf00      	nop
   10288:	2004c4e1 	.word	0x2004c4e1
   1028c:	2004c4e2 	.word	0x2004c4e2
   10290:	2004c4e3 	.word	0x2004c4e3
   10294:	2004c4e5 	.word	0x2004c4e5
   10298:	2004c4e6 	.word	0x2004c4e6
   1029c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   102a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a4:	781b      	ldrb	r3, [r3, #0]
   102a6:	461a      	mov	r2, r3
   102a8:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   102ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b0:	78d9      	ldrb	r1, [r3, #3]
   102b2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	5499      	strb	r1, [r3, r2]
   102bc:	4bd3      	ldr	r3, [pc, #844]	; (1060c <send_radIR+0x8b0>)
   102be:	781a      	ldrb	r2, [r3, #0]
   102c0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   102c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c8:	781b      	ldrb	r3, [r3, #0]
   102ca:	4413      	add	r3, r2
   102cc:	b2da      	uxtb	r2, r3
   102ce:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   102d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d6:	701a      	strb	r2, [r3, #0]
   102d8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   102dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e0:	781a      	ldrb	r2, [r3, #0]
   102e2:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	781b      	ldrb	r3, [r3, #0]
   102ec:	4413      	add	r3, r2
   102ee:	b2da      	uxtb	r2, r3
   102f0:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   102f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f8:	701a      	strb	r2, [r3, #0]
   102fa:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	781b      	ldrb	r3, [r3, #0]
   10304:	3301      	adds	r3, #1
   10306:	b2da      	uxtb	r2, r3
   10308:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1030c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10310:	701a      	strb	r2, [r3, #0]
   10312:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	781b      	ldrb	r3, [r3, #0]
   1031c:	2bff      	cmp	r3, #255	; 0xff
   1031e:	d105      	bne.n	1032c <send_radIR+0x5d0>
   10320:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10328:	2200      	movs	r2, #0
   1032a:	701a      	strb	r2, [r3, #0]
   1032c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10334:	781b      	ldrb	r3, [r3, #0]
   10336:	461a      	mov	r2, r3
   10338:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	7819      	ldrb	r1, [r3, #0]
   10342:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034a:	5499      	strb	r1, [r3, r2]
   1034c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10354:	781a      	ldrb	r2, [r3, #0]
   10356:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1035a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035e:	781b      	ldrb	r3, [r3, #0]
   10360:	4413      	add	r3, r2
   10362:	b2da      	uxtb	r2, r3
   10364:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036c:	701a      	strb	r2, [r3, #0]
   1036e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10376:	781a      	ldrb	r2, [r3, #0]
   10378:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	781b      	ldrb	r3, [r3, #0]
   10382:	4413      	add	r3, r2
   10384:	b2da      	uxtb	r2, r3
   10386:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1038a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038e:	701a      	strb	r2, [r3, #0]
   10390:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	781b      	ldrb	r3, [r3, #0]
   1039a:	3301      	adds	r3, #1
   1039c:	b2da      	uxtb	r2, r3
   1039e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   103a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a6:	701a      	strb	r2, [r3, #0]
   103a8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	2bff      	cmp	r3, #255	; 0xff
   103b4:	d105      	bne.n	103c2 <send_radIR+0x666>
   103b6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   103ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103be:	2200      	movs	r2, #0
   103c0:	701a      	strb	r2, [r3, #0]
   103c2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   103c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ca:	781b      	ldrb	r3, [r3, #0]
   103cc:	461a      	mov	r2, r3
   103ce:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   103d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d6:	7859      	ldrb	r1, [r3, #1]
   103d8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	5499      	strb	r1, [r3, r2]
   103e2:	4b8b      	ldr	r3, [pc, #556]	; (10610 <send_radIR+0x8b4>)
   103e4:	781a      	ldrb	r2, [r3, #0]
   103e6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   103ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	4413      	add	r3, r2
   103f2:	b2da      	uxtb	r2, r3
   103f4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   103f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fc:	701a      	strb	r2, [r3, #0]
   103fe:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10402:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10406:	781a      	ldrb	r2, [r3, #0]
   10408:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	781b      	ldrb	r3, [r3, #0]
   10412:	4413      	add	r3, r2
   10414:	b2da      	uxtb	r2, r3
   10416:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1041a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041e:	701a      	strb	r2, [r3, #0]
   10420:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	3301      	adds	r3, #1
   1042c:	b2da      	uxtb	r2, r3
   1042e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10436:	701a      	strb	r2, [r3, #0]
   10438:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1043c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10440:	781b      	ldrb	r3, [r3, #0]
   10442:	2bff      	cmp	r3, #255	; 0xff
   10444:	d105      	bne.n	10452 <send_radIR+0x6f6>
   10446:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1044a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044e:	2200      	movs	r2, #0
   10450:	701a      	strb	r2, [r3, #0]
   10452:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045a:	781b      	ldrb	r3, [r3, #0]
   1045c:	461a      	mov	r2, r3
   1045e:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10466:	7899      	ldrb	r1, [r3, #2]
   10468:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1046c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10470:	5499      	strb	r1, [r3, r2]
   10472:	4b68      	ldr	r3, [pc, #416]	; (10614 <send_radIR+0x8b8>)
   10474:	781a      	ldrb	r2, [r3, #0]
   10476:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1047a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1047e:	781b      	ldrb	r3, [r3, #0]
   10480:	4413      	add	r3, r2
   10482:	b2da      	uxtb	r2, r3
   10484:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048c:	701a      	strb	r2, [r3, #0]
   1048e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10496:	781a      	ldrb	r2, [r3, #0]
   10498:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	781b      	ldrb	r3, [r3, #0]
   104a2:	4413      	add	r3, r2
   104a4:	b2da      	uxtb	r2, r3
   104a6:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   104aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ae:	701a      	strb	r2, [r3, #0]
   104b0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	3301      	adds	r3, #1
   104bc:	b2da      	uxtb	r2, r3
   104be:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   104c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c6:	701a      	strb	r2, [r3, #0]
   104c8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	781b      	ldrb	r3, [r3, #0]
   104d2:	2bff      	cmp	r3, #255	; 0xff
   104d4:	d105      	bne.n	104e2 <send_radIR+0x786>
   104d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   104da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104de:	2200      	movs	r2, #0
   104e0:	701a      	strb	r2, [r3, #0]
   104e2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   104e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ea:	781b      	ldrb	r3, [r3, #0]
   104ec:	461a      	mov	r2, r3
   104ee:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   104f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f6:	78d9      	ldrb	r1, [r3, #3]
   104f8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	5499      	strb	r1, [r3, r2]
   10502:	4b45      	ldr	r3, [pc, #276]	; (10618 <send_radIR+0x8bc>)
   10504:	781a      	ldrb	r2, [r3, #0]
   10506:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1050a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050e:	781b      	ldrb	r3, [r3, #0]
   10510:	4413      	add	r3, r2
   10512:	b2da      	uxtb	r2, r3
   10514:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051c:	701a      	strb	r2, [r3, #0]
   1051e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10526:	781a      	ldrb	r2, [r3, #0]
   10528:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	781b      	ldrb	r3, [r3, #0]
   10532:	4413      	add	r3, r2
   10534:	b2da      	uxtb	r2, r3
   10536:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1053a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053e:	701a      	strb	r2, [r3, #0]
   10540:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	781b      	ldrb	r3, [r3, #0]
   1054a:	3301      	adds	r3, #1
   1054c:	b2da      	uxtb	r2, r3
   1054e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10556:	701a      	strb	r2, [r3, #0]
   10558:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1055c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	2bff      	cmp	r3, #255	; 0xff
   10564:	d105      	bne.n	10572 <send_radIR+0x816>
   10566:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1056a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056e:	2200      	movs	r2, #0
   10570:	701a      	strb	r2, [r3, #0]
   10572:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	461a      	mov	r2, r3
   1057e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10586:	7819      	ldrb	r1, [r3, #0]
   10588:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	5499      	strb	r1, [r3, r2]
   10592:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1059a:	781a      	ldrb	r2, [r3, #0]
   1059c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   105a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a4:	781b      	ldrb	r3, [r3, #0]
   105a6:	4413      	add	r3, r2
   105a8:	b2da      	uxtb	r2, r3
   105aa:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   105ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b2:	701a      	strb	r2, [r3, #0]
   105b4:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   105b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105bc:	781a      	ldrb	r2, [r3, #0]
   105be:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	781b      	ldrb	r3, [r3, #0]
   105c8:	4413      	add	r3, r2
   105ca:	b2da      	uxtb	r2, r3
   105cc:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   105d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d4:	701a      	strb	r2, [r3, #0]
   105d6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	781b      	ldrb	r3, [r3, #0]
   105e0:	3301      	adds	r3, #1
   105e2:	b2da      	uxtb	r2, r3
   105e4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   105e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ec:	701a      	strb	r2, [r3, #0]
   105ee:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	781b      	ldrb	r3, [r3, #0]
   105f8:	2bff      	cmp	r3, #255	; 0xff
   105fa:	d10f      	bne.n	1061c <send_radIR+0x8c0>
   105fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10604:	2200      	movs	r2, #0
   10606:	701a      	strb	r2, [r3, #0]
   10608:	e008      	b.n	1061c <send_radIR+0x8c0>
   1060a:	bf00      	nop
   1060c:	2004c4e7 	.word	0x2004c4e7
   10610:	2004c4dd 	.word	0x2004c4dd
   10614:	2004c4de 	.word	0x2004c4de
   10618:	2004c4df 	.word	0x2004c4df
   1061c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10624:	781b      	ldrb	r3, [r3, #0]
   10626:	461a      	mov	r2, r3
   10628:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1062c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10630:	7859      	ldrb	r1, [r3, #1]
   10632:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063a:	5499      	strb	r1, [r3, r2]
   1063c:	4bc2      	ldr	r3, [pc, #776]	; (10948 <send_radIR+0xbec>)
   1063e:	781a      	ldrb	r2, [r3, #0]
   10640:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10648:	781b      	ldrb	r3, [r3, #0]
   1064a:	4413      	add	r3, r2
   1064c:	b2da      	uxtb	r2, r3
   1064e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10656:	701a      	strb	r2, [r3, #0]
   10658:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	781a      	ldrb	r2, [r3, #0]
   10662:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066a:	781b      	ldrb	r3, [r3, #0]
   1066c:	4413      	add	r3, r2
   1066e:	b2da      	uxtb	r2, r3
   10670:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10678:	701a      	strb	r2, [r3, #0]
   1067a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1067e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10682:	781b      	ldrb	r3, [r3, #0]
   10684:	3301      	adds	r3, #1
   10686:	b2da      	uxtb	r2, r3
   10688:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1068c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10690:	701a      	strb	r2, [r3, #0]
   10692:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069a:	781b      	ldrb	r3, [r3, #0]
   1069c:	2bff      	cmp	r3, #255	; 0xff
   1069e:	d105      	bne.n	106ac <send_radIR+0x950>
   106a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   106a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a8:	2200      	movs	r2, #0
   106aa:	701a      	strb	r2, [r3, #0]
   106ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   106b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b4:	781b      	ldrb	r3, [r3, #0]
   106b6:	461a      	mov	r2, r3
   106b8:	f240 33f4 	movw	r3, #1012	; 0x3f4
   106bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c0:	7819      	ldrb	r1, [r3, #0]
   106c2:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   106c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ca:	5499      	strb	r1, [r3, r2]
   106cc:	f240 33f4 	movw	r3, #1012	; 0x3f4
   106d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d4:	781a      	ldrb	r2, [r3, #0]
   106d6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   106da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106de:	781b      	ldrb	r3, [r3, #0]
   106e0:	4413      	add	r3, r2
   106e2:	b2da      	uxtb	r2, r3
   106e4:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   106e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ec:	701a      	strb	r2, [r3, #0]
   106ee:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   106f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f6:	781a      	ldrb	r2, [r3, #0]
   106f8:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   106fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10700:	781b      	ldrb	r3, [r3, #0]
   10702:	4413      	add	r3, r2
   10704:	b2da      	uxtb	r2, r3
   10706:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1070a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070e:	701a      	strb	r2, [r3, #0]
   10710:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10718:	781b      	ldrb	r3, [r3, #0]
   1071a:	3301      	adds	r3, #1
   1071c:	b2da      	uxtb	r2, r3
   1071e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10726:	701a      	strb	r2, [r3, #0]
   10728:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1072c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10730:	781b      	ldrb	r3, [r3, #0]
   10732:	2bff      	cmp	r3, #255	; 0xff
   10734:	d105      	bne.n	10742 <send_radIR+0x9e6>
   10736:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1073a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073e:	2200      	movs	r2, #0
   10740:	701a      	strb	r2, [r3, #0]
   10742:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	461a      	mov	r2, r3
   1074e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10756:	7859      	ldrb	r1, [r3, #1]
   10758:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1075c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10760:	5499      	strb	r1, [r3, r2]
   10762:	4b7a      	ldr	r3, [pc, #488]	; (1094c <send_radIR+0xbf0>)
   10764:	781a      	ldrb	r2, [r3, #0]
   10766:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1076a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076e:	781b      	ldrb	r3, [r3, #0]
   10770:	4413      	add	r3, r2
   10772:	b2da      	uxtb	r2, r3
   10774:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077c:	701a      	strb	r2, [r3, #0]
   1077e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10786:	781a      	ldrb	r2, [r3, #0]
   10788:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   1078c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10790:	781b      	ldrb	r3, [r3, #0]
   10792:	4413      	add	r3, r2
   10794:	b2da      	uxtb	r2, r3
   10796:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   1079a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079e:	701a      	strb	r2, [r3, #0]
   107a0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a8:	781b      	ldrb	r3, [r3, #0]
   107aa:	3301      	adds	r3, #1
   107ac:	b2da      	uxtb	r2, r3
   107ae:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b6:	701a      	strb	r2, [r3, #0]
   107b8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c0:	781b      	ldrb	r3, [r3, #0]
   107c2:	2bff      	cmp	r3, #255	; 0xff
   107c4:	d105      	bne.n	107d2 <send_radIR+0xa76>
   107c6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ce:	2200      	movs	r2, #0
   107d0:	701a      	strb	r2, [r3, #0]
   107d2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107da:	781b      	ldrb	r3, [r3, #0]
   107dc:	461a      	mov	r2, r3
   107de:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   107e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e6:	7819      	ldrb	r1, [r3, #0]
   107e8:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   107ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f0:	5499      	strb	r1, [r3, r2]
   107f2:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   107f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fa:	781b      	ldrb	r3, [r3, #0]
   107fc:	3301      	adds	r3, #1
   107fe:	b2da      	uxtb	r2, r3
   10800:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10808:	701a      	strb	r2, [r3, #0]
   1080a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1080e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10812:	781b      	ldrb	r3, [r3, #0]
   10814:	2bff      	cmp	r3, #255	; 0xff
   10816:	d105      	bne.n	10824 <send_radIR+0xac8>
   10818:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1081c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10820:	2200      	movs	r2, #0
   10822:	701a      	strb	r2, [r3, #0]
   10824:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082c:	781b      	ldrb	r3, [r3, #0]
   1082e:	461a      	mov	r2, r3
   10830:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10838:	7819      	ldrb	r1, [r3, #0]
   1083a:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1083e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10842:	5499      	strb	r1, [r3, r2]
   10844:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084c:	781b      	ldrb	r3, [r3, #0]
   1084e:	3301      	adds	r3, #1
   10850:	b2da      	uxtb	r2, r3
   10852:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085a:	701a      	strb	r2, [r3, #0]
   1085c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10864:	781b      	ldrb	r3, [r3, #0]
   10866:	2bff      	cmp	r3, #255	; 0xff
   10868:	d105      	bne.n	10876 <send_radIR+0xb1a>
   1086a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   1086e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10872:	2200      	movs	r2, #0
   10874:	701a      	strb	r2, [r3, #0]
   10876:	f242 0339 	movw	r3, #8249	; 0x2039
   1087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1087e:	781b      	ldrb	r3, [r3, #0]
   10880:	b2db      	uxtb	r3, r3
   10882:	f003 0310 	and.w	r3, r3, #16
   10886:	2b00      	cmp	r3, #0
   10888:	d15a      	bne.n	10940 <send_radIR+0xbe4>
   1088a:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   1088e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	b2db      	uxtb	r3, r3
   10896:	461a      	mov	r2, r3
   10898:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1089c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a0:	5c9a      	ldrb	r2, [r3, r2]
   108a2:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   108a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108aa:	701a      	strb	r2, [r3, #0]
   108ac:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   108b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b4:	2200      	movs	r2, #0
   108b6:	701a      	strb	r2, [r3, #0]
   108b8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   108bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	b2db      	uxtb	r3, r3
   108c4:	3301      	adds	r3, #1
   108c6:	b2da      	uxtb	r2, r3
   108c8:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   108cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d0:	701a      	strb	r2, [r3, #0]
   108d2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   108d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108da:	781b      	ldrb	r3, [r3, #0]
   108dc:	b2db      	uxtb	r3, r3
   108de:	2bff      	cmp	r3, #255	; 0xff
   108e0:	d105      	bne.n	108ee <send_radIR+0xb92>
   108e2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   108e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ea:	2200      	movs	r2, #0
   108ec:	701a      	strb	r2, [r3, #0]
   108ee:	f242 0338 	movw	r3, #8248	; 0x2038
   108f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f6:	f242 0238 	movw	r2, #8248	; 0x2038
   108fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108fe:	7812      	ldrb	r2, [r2, #0]
   10900:	b2d2      	uxtb	r2, r2
   10902:	f042 0201 	orr.w	r2, r2, #1
   10906:	b2d2      	uxtb	r2, r2
   10908:	701a      	strb	r2, [r3, #0]
   1090a:	f242 0339 	movw	r3, #8249	; 0x2039
   1090e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10912:	f242 0239 	movw	r2, #8249	; 0x2039
   10916:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1091a:	7812      	ldrb	r2, [r2, #0]
   1091c:	b2d2      	uxtb	r2, r2
   1091e:	f042 0210 	orr.w	r2, r2, #16
   10922:	b2d2      	uxtb	r2, r2
   10924:	701a      	strb	r2, [r3, #0]
   10926:	e00b      	b.n	10940 <send_radIR+0xbe4>
   10928:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	781b      	ldrb	r3, [r3, #0]
   10932:	3301      	adds	r3, #1
   10934:	b2da      	uxtb	r2, r3
   10936:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   1093a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093e:	701a      	strb	r2, [r3, #0]
}
   10940:	46bd      	mov	sp, r7
   10942:	f85d 7b04 	ldr.w	r7, [sp], #4
   10946:	4770      	bx	lr
   10948:	200003f3 	.word	0x200003f3
   1094c:	200003f5 	.word	0x200003f5

00010950 <send_takeOff>:

void send_takeOff(void){
   10950:	b580      	push	{r7, lr}
   10952:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10954:	f24c 037e 	movw	r3, #49278	; 0xc07e
   10958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095c:	781b      	ldrb	r3, [r3, #0]
   1095e:	2b00      	cmp	r3, #0
   10960:	f000 8200 	beq.w	10d64 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10964:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   10968:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096c:	881b      	ldrh	r3, [r3, #0]
   1096e:	2b00      	cmp	r3, #0
   10970:	f040 81f2 	bne.w	10d58 <send_takeOff+0x408>
   10974:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   10978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097c:	681b      	ldr	r3, [r3, #0]
   1097e:	4618      	mov	r0, r3
   10980:	f04f 0100 	mov.w	r1, #0
   10984:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10988:	f007 fe12 	bl	185b0 <__aeabi_fcmpgt>
   1098c:	4603      	mov	r3, r0
   1098e:	2b00      	cmp	r3, #0
   10990:	f000 81e2 	beq.w	10d58 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10994:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   10998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099c:	2201      	movs	r2, #1
   1099e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   109a0:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   109a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a8:	2201      	movs	r2, #1
   109aa:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   109ac:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   109b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b4:	781a      	ldrb	r2, [r3, #0]
   109b6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   109ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109be:	781b      	ldrb	r3, [r3, #0]
   109c0:	b2db      	uxtb	r3, r3
   109c2:	429a      	cmp	r2, r3
   109c4:	d313      	bcc.n	109ee <send_takeOff+0x9e>
   109c6:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   109ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ce:	781b      	ldrb	r3, [r3, #0]
   109d0:	b2db      	uxtb	r3, r3
   109d2:	461a      	mov	r2, r3
   109d4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   109d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109dc:	781b      	ldrb	r3, [r3, #0]
   109de:	1ad3      	subs	r3, r2, r3
   109e0:	33ff      	adds	r3, #255	; 0xff
   109e2:	2b06      	cmp	r3, #6
   109e4:	bfd4      	ite	le
   109e6:	2300      	movle	r3, #0
   109e8:	2301      	movgt	r3, #1
   109ea:	b2db      	uxtb	r3, r3
   109ec:	e011      	b.n	10a12 <send_takeOff+0xc2>
   109ee:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   109f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f6:	781b      	ldrb	r3, [r3, #0]
   109f8:	b2db      	uxtb	r3, r3
   109fa:	461a      	mov	r2, r3
   109fc:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a04:	781b      	ldrb	r3, [r3, #0]
   10a06:	1ad3      	subs	r3, r2, r3
   10a08:	2b06      	cmp	r3, #6
   10a0a:	bfd4      	ite	le
   10a0c:	2300      	movle	r3, #0
   10a0e:	2301      	movgt	r3, #1
   10a10:	b2db      	uxtb	r3, r3
   10a12:	2b00      	cmp	r3, #0
   10a14:	f000 8194 	beq.w	10d40 <send_takeOff+0x3f0>
   10a18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a20:	781b      	ldrb	r3, [r3, #0]
   10a22:	461a      	mov	r2, r3
   10a24:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2c:	2105      	movs	r1, #5
   10a2e:	5499      	strb	r1, [r3, r2]
   10a30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	3301      	adds	r3, #1
   10a3c:	b2da      	uxtb	r2, r3
   10a3e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a46:	701a      	strb	r2, [r3, #0]
   10a48:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a50:	781b      	ldrb	r3, [r3, #0]
   10a52:	2bff      	cmp	r3, #255	; 0xff
   10a54:	d105      	bne.n	10a62 <send_takeOff+0x112>
   10a56:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a5e:	2200      	movs	r2, #0
   10a60:	701a      	strb	r2, [r3, #0]
   10a62:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6a:	781b      	ldrb	r3, [r3, #0]
   10a6c:	461a      	mov	r2, r3
   10a6e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a76:	2104      	movs	r1, #4
   10a78:	5499      	strb	r1, [r3, r2]
   10a7a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a82:	781b      	ldrb	r3, [r3, #0]
   10a84:	3301      	adds	r3, #1
   10a86:	b2da      	uxtb	r2, r3
   10a88:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a90:	701a      	strb	r2, [r3, #0]
   10a92:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	781b      	ldrb	r3, [r3, #0]
   10a9c:	2bff      	cmp	r3, #255	; 0xff
   10a9e:	d105      	bne.n	10aac <send_takeOff+0x15c>
   10aa0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa8:	2200      	movs	r2, #0
   10aaa:	701a      	strb	r2, [r3, #0]
   10aac:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab4:	2204      	movs	r2, #4
   10ab6:	701a      	strb	r2, [r3, #0]
   10ab8:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac0:	2204      	movs	r2, #4
   10ac2:	701a      	strb	r2, [r3, #0]
   10ac4:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10acc:	781b      	ldrb	r3, [r3, #0]
   10ace:	461a      	mov	r2, r3
   10ad0:	f64b 63ca 	movw	r3, #48842	; 0xbeca
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	7819      	ldrb	r1, [r3, #0]
   10ada:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae2:	5499      	strb	r1, [r3, r2]
   10ae4:	f64b 63ca 	movw	r3, #48842	; 0xbeca
   10ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aec:	781a      	ldrb	r2, [r3, #0]
   10aee:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af6:	781b      	ldrb	r3, [r3, #0]
   10af8:	4413      	add	r3, r2
   10afa:	b2da      	uxtb	r2, r3
   10afc:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b04:	701a      	strb	r2, [r3, #0]
   10b06:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b0e:	781a      	ldrb	r2, [r3, #0]
   10b10:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b18:	781b      	ldrb	r3, [r3, #0]
   10b1a:	4413      	add	r3, r2
   10b1c:	b2da      	uxtb	r2, r3
   10b1e:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b26:	701a      	strb	r2, [r3, #0]
   10b28:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b30:	781b      	ldrb	r3, [r3, #0]
   10b32:	3301      	adds	r3, #1
   10b34:	b2da      	uxtb	r2, r3
   10b36:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3e:	701a      	strb	r2, [r3, #0]
   10b40:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	2bff      	cmp	r3, #255	; 0xff
   10b4c:	d105      	bne.n	10b5a <send_takeOff+0x20a>
   10b4e:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b56:	2200      	movs	r2, #0
   10b58:	701a      	strb	r2, [r3, #0]
   10b5a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b62:	781b      	ldrb	r3, [r3, #0]
   10b64:	461a      	mov	r2, r3
   10b66:	f64b 63ca 	movw	r3, #48842	; 0xbeca
   10b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6e:	7859      	ldrb	r1, [r3, #1]
   10b70:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b78:	5499      	strb	r1, [r3, r2]
   10b7a:	4b7b      	ldr	r3, [pc, #492]	; (10d68 <send_takeOff+0x418>)
   10b7c:	781a      	ldrb	r2, [r3, #0]
   10b7e:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b86:	781b      	ldrb	r3, [r3, #0]
   10b88:	4413      	add	r3, r2
   10b8a:	b2da      	uxtb	r2, r3
   10b8c:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b94:	701a      	strb	r2, [r3, #0]
   10b96:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9e:	781a      	ldrb	r2, [r3, #0]
   10ba0:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba8:	781b      	ldrb	r3, [r3, #0]
   10baa:	4413      	add	r3, r2
   10bac:	b2da      	uxtb	r2, r3
   10bae:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb6:	701a      	strb	r2, [r3, #0]
   10bb8:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc0:	781b      	ldrb	r3, [r3, #0]
   10bc2:	3301      	adds	r3, #1
   10bc4:	b2da      	uxtb	r2, r3
   10bc6:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bce:	701a      	strb	r2, [r3, #0]
   10bd0:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd8:	781b      	ldrb	r3, [r3, #0]
   10bda:	2bff      	cmp	r3, #255	; 0xff
   10bdc:	d105      	bne.n	10bea <send_takeOff+0x29a>
   10bde:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be6:	2200      	movs	r2, #0
   10be8:	701a      	strb	r2, [r3, #0]
   10bea:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf2:	781b      	ldrb	r3, [r3, #0]
   10bf4:	461a      	mov	r2, r3
   10bf6:	f64b 73ed 	movw	r3, #49133	; 0xbfed
   10bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bfe:	7819      	ldrb	r1, [r3, #0]
   10c00:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c08:	5499      	strb	r1, [r3, r2]
   10c0a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c12:	781b      	ldrb	r3, [r3, #0]
   10c14:	3301      	adds	r3, #1
   10c16:	b2da      	uxtb	r2, r3
   10c18:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c20:	701a      	strb	r2, [r3, #0]
   10c22:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c2a:	781b      	ldrb	r3, [r3, #0]
   10c2c:	2bff      	cmp	r3, #255	; 0xff
   10c2e:	d105      	bne.n	10c3c <send_takeOff+0x2ec>
   10c30:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c38:	2200      	movs	r2, #0
   10c3a:	701a      	strb	r2, [r3, #0]
   10c3c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c44:	781b      	ldrb	r3, [r3, #0]
   10c46:	461a      	mov	r2, r3
   10c48:	f64b 73ee 	movw	r3, #49134	; 0xbfee
   10c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c50:	7819      	ldrb	r1, [r3, #0]
   10c52:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c5a:	5499      	strb	r1, [r3, r2]
   10c5c:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	781b      	ldrb	r3, [r3, #0]
   10c66:	3301      	adds	r3, #1
   10c68:	b2da      	uxtb	r2, r3
   10c6a:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c72:	701a      	strb	r2, [r3, #0]
   10c74:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	781b      	ldrb	r3, [r3, #0]
   10c7e:	2bff      	cmp	r3, #255	; 0xff
   10c80:	d105      	bne.n	10c8e <send_takeOff+0x33e>
   10c82:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c8a:	2200      	movs	r2, #0
   10c8c:	701a      	strb	r2, [r3, #0]
   10c8e:	f242 0339 	movw	r3, #8249	; 0x2039
   10c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	f003 0310 	and.w	r3, r3, #16
   10c9e:	2b00      	cmp	r3, #0
   10ca0:	d15a      	bne.n	10d58 <send_takeOff+0x408>
   10ca2:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10caa:	781b      	ldrb	r3, [r3, #0]
   10cac:	b2db      	uxtb	r3, r3
   10cae:	461a      	mov	r2, r3
   10cb0:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb8:	5c9a      	ldrb	r2, [r3, r2]
   10cba:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   10cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc2:	701a      	strb	r2, [r3, #0]
   10cc4:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	2200      	movs	r2, #0
   10cce:	701a      	strb	r2, [r3, #0]
   10cd0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd8:	781b      	ldrb	r3, [r3, #0]
   10cda:	b2db      	uxtb	r3, r3
   10cdc:	3301      	adds	r3, #1
   10cde:	b2da      	uxtb	r2, r3
   10ce0:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce8:	701a      	strb	r2, [r3, #0]
   10cea:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf2:	781b      	ldrb	r3, [r3, #0]
   10cf4:	b2db      	uxtb	r3, r3
   10cf6:	2bff      	cmp	r3, #255	; 0xff
   10cf8:	d105      	bne.n	10d06 <send_takeOff+0x3b6>
   10cfa:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d02:	2200      	movs	r2, #0
   10d04:	701a      	strb	r2, [r3, #0]
   10d06:	f242 0338 	movw	r3, #8248	; 0x2038
   10d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d0e:	f242 0238 	movw	r2, #8248	; 0x2038
   10d12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d16:	7812      	ldrb	r2, [r2, #0]
   10d18:	b2d2      	uxtb	r2, r2
   10d1a:	f042 0201 	orr.w	r2, r2, #1
   10d1e:	b2d2      	uxtb	r2, r2
   10d20:	701a      	strb	r2, [r3, #0]
   10d22:	f242 0339 	movw	r3, #8249	; 0x2039
   10d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d2a:	f242 0239 	movw	r2, #8249	; 0x2039
   10d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d32:	7812      	ldrb	r2, [r2, #0]
   10d34:	b2d2      	uxtb	r2, r2
   10d36:	f042 0210 	orr.w	r2, r2, #16
   10d3a:	b2d2      	uxtb	r2, r2
   10d3c:	701a      	strb	r2, [r3, #0]
   10d3e:	e00b      	b.n	10d58 <send_takeOff+0x408>
   10d40:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   10d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d48:	781b      	ldrb	r3, [r3, #0]
   10d4a:	3301      	adds	r3, #1
   10d4c:	b2da      	uxtb	r2, r3
   10d4e:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   10d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d56:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10d58:	f24c 037e 	movw	r3, #49278	; 0xc07e
   10d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d60:	2200      	movs	r2, #0
   10d62:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10d64:	bd80      	pop	{r7, pc}
   10d66:	bf00      	nop
   10d68:	2004becb 	.word	0x2004becb
   10d6c:	f3af 8000 	nop.w

00010d70 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10d70:	b480      	push	{r7}
   10d72:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10d74:	f242 0317 	movw	r3, #8215	; 0x2017
   10d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d7c:	f242 0217 	movw	r2, #8215	; 0x2017
   10d80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d84:	7812      	ldrb	r2, [r2, #0]
   10d86:	b2d2      	uxtb	r2, r2
   10d88:	f042 0210 	orr.w	r2, r2, #16
   10d8c:	b2d2      	uxtb	r2, r2
   10d8e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10d90:	f242 0331 	movw	r3, #8241	; 0x2031
   10d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d98:	2201      	movs	r2, #1
   10d9a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10d9c:	f242 0333 	movw	r3, #8243	; 0x2033
   10da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da4:	2219      	movs	r2, #25
   10da6:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10da8:	f242 0311 	movw	r3, #8209	; 0x2011
   10dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db0:	f242 0211 	movw	r2, #8209	; 0x2011
   10db4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10db8:	7812      	ldrb	r2, [r2, #0]
   10dba:	b2d2      	uxtb	r2, r2
   10dbc:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10dc0:	b2d2      	uxtb	r2, r2
   10dc2:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10dc4:	f242 0312 	movw	r3, #8210	; 0x2012
   10dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dcc:	f242 0212 	movw	r2, #8210	; 0x2012
   10dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dd4:	7812      	ldrb	r2, [r2, #0]
   10dd6:	b2d2      	uxtb	r2, r2
   10dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ddc:	b2d2      	uxtb	r2, r2
   10dde:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10de0:	f242 0312 	movw	r3, #8210	; 0x2012
   10de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de8:	f242 0212 	movw	r2, #8210	; 0x2012
   10dec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10df0:	7812      	ldrb	r2, [r2, #0]
   10df2:	b2d2      	uxtb	r2, r2
   10df4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10df8:	b2d2      	uxtb	r2, r2
   10dfa:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10dfc:	f242 033a 	movw	r3, #8250	; 0x203a
   10e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e04:	f242 023a 	movw	r2, #8250	; 0x203a
   10e08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e0c:	7812      	ldrb	r2, [r2, #0]
   10e0e:	b2d2      	uxtb	r2, r2
   10e10:	f042 0202 	orr.w	r2, r2, #2
   10e14:	b2d2      	uxtb	r2, r2
   10e16:	701a      	strb	r2, [r3, #0]
}
   10e18:	46bd      	mov	sp, r7
   10e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e1e:	4770      	bx	lr

00010e20 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10e20:	b480      	push	{r7}
   10e22:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10e24:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2c:	781b      	ldrb	r3, [r3, #0]
   10e2e:	2b00      	cmp	r3, #0
   10e30:	d10e      	bne.n	10e50 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e32:	f242 0312 	movw	r3, #8210	; 0x2012
   10e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e3a:	f242 0212 	movw	r2, #8210	; 0x2012
   10e3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e42:	7812      	ldrb	r2, [r2, #0]
   10e44:	b2d2      	uxtb	r2, r2
   10e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10e4a:	b2d2      	uxtb	r2, r2
   10e4c:	701a      	strb	r2, [r3, #0]
   10e4e:	e047      	b.n	10ee0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10e50:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	2b08      	cmp	r3, #8
   10e5c:	d832      	bhi.n	10ec4 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10e5e:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   10e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e66:	781b      	ldrb	r3, [r3, #0]
   10e68:	f003 0301 	and.w	r3, r3, #1
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	d00e      	beq.n	10e8e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e70:	f242 0312 	movw	r3, #8210	; 0x2012
   10e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e78:	f242 0212 	movw	r2, #8210	; 0x2012
   10e7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e80:	7812      	ldrb	r2, [r2, #0]
   10e82:	b2d2      	uxtb	r2, r2
   10e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10e88:	b2d2      	uxtb	r2, r2
   10e8a:	701a      	strb	r2, [r3, #0]
   10e8c:	e00d      	b.n	10eaa <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e8e:	f242 0312 	movw	r3, #8210	; 0x2012
   10e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e96:	f242 0212 	movw	r2, #8210	; 0x2012
   10e9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e9e:	7812      	ldrb	r2, [r2, #0]
   10ea0:	b2d2      	uxtb	r2, r2
   10ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10ea6:	b2d2      	uxtb	r2, r2
   10ea8:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10eaa:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	781b      	ldrb	r3, [r3, #0]
   10eb4:	085b      	lsrs	r3, r3, #1
   10eb6:	b2da      	uxtb	r2, r3
   10eb8:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   10ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec0:	701a      	strb	r2, [r3, #0]
   10ec2:	e00d      	b.n	10ee0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10ec4:	f242 0312 	movw	r3, #8210	; 0x2012
   10ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ecc:	f242 0212 	movw	r2, #8210	; 0x2012
   10ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ed4:	7812      	ldrb	r2, [r2, #0]
   10ed6:	b2d2      	uxtb	r2, r2
   10ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10edc:	b2d2      	uxtb	r2, r2
   10ede:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10ee0:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee8:	781b      	ldrb	r3, [r3, #0]
   10eea:	3301      	adds	r3, #1
   10eec:	b2da      	uxtb	r2, r3
   10eee:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10ef8:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	2b09      	cmp	r3, #9
   10f04:	d94d      	bls.n	10fa2 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10f06:	f64b 63e9 	movw	r3, #48873	; 0xbee9
   10f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0e:	781a      	ldrb	r2, [r3, #0]
   10f10:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f18:	781b      	ldrb	r3, [r3, #0]
   10f1a:	b2db      	uxtb	r3, r3
   10f1c:	429a      	cmp	r2, r3
   10f1e:	d10e      	bne.n	10f3e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10f20:	f242 0339 	movw	r3, #8249	; 0x2039
   10f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f28:	f242 0239 	movw	r2, #8249	; 0x2039
   10f2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f30:	7812      	ldrb	r2, [r2, #0]
   10f32:	b2d2      	uxtb	r2, r2
   10f34:	f022 0210 	bic.w	r2, r2, #16
   10f38:	b2d2      	uxtb	r2, r2
   10f3a:	701a      	strb	r2, [r3, #0]
   10f3c:	e031      	b.n	10fa2 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10f3e:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	b2db      	uxtb	r3, r3
   10f4a:	461a      	mov	r2, r3
   10f4c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   10f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f54:	5c9a      	ldrb	r2, [r3, r2]
   10f56:	f64b 73eb 	movw	r3, #49131	; 0xbfeb
   10f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5e:	701a      	strb	r2, [r3, #0]
   10f60:	f64b 73ec 	movw	r3, #49132	; 0xbfec
   10f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f68:	2200      	movs	r2, #0
   10f6a:	701a      	strb	r2, [r3, #0]
   10f6c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f74:	781b      	ldrb	r3, [r3, #0]
   10f76:	b2db      	uxtb	r3, r3
   10f78:	3301      	adds	r3, #1
   10f7a:	b2da      	uxtb	r2, r3
   10f7c:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f84:	701a      	strb	r2, [r3, #0]
   10f86:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8e:	781b      	ldrb	r3, [r3, #0]
   10f90:	b2db      	uxtb	r3, r3
   10f92:	2bff      	cmp	r3, #255	; 0xff
   10f94:	d105      	bne.n	10fa2 <__vector_5+0x182>
   10f96:	f64b 63ea 	movw	r3, #48874	; 0xbeea
   10f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f9e:	2200      	movs	r2, #0
   10fa0:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10fa2:	46bd      	mov	sp, r7
   10fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fa8:	4770      	bx	lr
   10faa:	bf00      	nop

00010fac <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10fac:	b480      	push	{r7}
   10fae:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10fb0:	f24c 031f 	movw	r3, #49183	; 0xc01f
   10fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb8:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10fba:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fc2:	2200      	movs	r2, #0
   10fc4:	701a      	strb	r2, [r3, #0]
}
   10fc6:	46bd      	mov	sp, r7
   10fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fcc:	4770      	bx	lr
   10fce:	bf00      	nop

00010fd0 <link_fbw_send>:

void link_fbw_send(void) {
   10fd0:	b480      	push	{r7}
   10fd2:	b083      	sub	sp, #12
   10fd4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10fd6:	f24c 0324 	movw	r3, #49188	; 0xc024
   10fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fde:	781b      	ldrb	r3, [r3, #0]
   10fe0:	b2db      	uxtb	r3, r3
   10fe2:	2b00      	cmp	r3, #0
   10fe4:	d00c      	beq.n	11000 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10fe6:	f24c 0325 	movw	r3, #49189	; 0xc025
   10fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fee:	781b      	ldrb	r3, [r3, #0]
   10ff0:	3301      	adds	r3, #1
   10ff2:	b2da      	uxtb	r2, r3
   10ff4:	f24c 0325 	movw	r3, #49189	; 0xc025
   10ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ffc:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10ffe:	e064      	b.n	110ca <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11000:	f242 030d 	movw	r3, #8205	; 0x200d
   11004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11008:	2251      	movs	r2, #81	; 0x51
   1100a:	701a      	strb	r2, [r3, #0]
   1100c:	f242 030e 	movw	r3, #8206	; 0x200e
   11010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11014:	781b      	ldrb	r3, [r3, #0]
   11016:	b2db      	uxtb	r3, r3
   11018:	b2db      	uxtb	r3, r3
   1101a:	b25b      	sxtb	r3, r3
   1101c:	2b00      	cmp	r3, #0
   1101e:	da05      	bge.n	1102c <link_fbw_send+0x5c>
   11020:	f242 030f 	movw	r3, #8207	; 0x200f
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	781b      	ldrb	r3, [r3, #0]
   1102a:	71fb      	strb	r3, [r7, #7]
   1102c:	f242 030d 	movw	r3, #8205	; 0x200d
   11030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11034:	f242 020d 	movw	r2, #8205	; 0x200d
   11038:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1103c:	7812      	ldrb	r2, [r2, #0]
   1103e:	b2d2      	uxtb	r2, r2
   11040:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11044:	b2d2      	uxtb	r2, r2
   11046:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11048:	f24c 0324 	movw	r3, #49188	; 0xc024
   1104c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11050:	2201      	movs	r2, #1
   11052:	701a      	strb	r2, [r3, #0]
   11054:	f242 0318 	movw	r3, #8216	; 0x2018
   11058:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1105c:	f242 0218 	movw	r2, #8216	; 0x2018
   11060:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11064:	7812      	ldrb	r2, [r2, #0]
   11066:	b2d2      	uxtb	r2, r2
   11068:	f022 0201 	bic.w	r2, r2, #1
   1106c:	b2d2      	uxtb	r2, r2
   1106e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11070:	f24c 0321 	movw	r3, #49185	; 0xc021
   11074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11078:	2200      	movs	r2, #0
   1107a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1107c:	f24c 0322 	movw	r3, #49186	; 0xc022
   11080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11084:	2200      	movs	r2, #0
   11086:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11088:	f24c 0321 	movw	r3, #49185	; 0xc021
   1108c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11090:	781b      	ldrb	r3, [r3, #0]
   11092:	461a      	mov	r2, r3
   11094:	f24c 0308 	movw	r3, #49160	; 0xc008
   11098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1109c:	4413      	add	r3, r2
   1109e:	781a      	ldrb	r2, [r3, #0]
   110a0:	f24c 0323 	movw	r3, #49187	; 0xc023
   110a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a8:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   110aa:	f242 030f 	movw	r3, #8207	; 0x200f
   110ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b2:	f24c 0223 	movw	r2, #49187	; 0xc023
   110b6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   110ba:	7812      	ldrb	r2, [r2, #0]
   110bc:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   110be:	f24c 031e 	movw	r3, #49182	; 0xc01e
   110c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c6:	2200      	movs	r2, #0
   110c8:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   110ca:	370c      	adds	r7, #12
   110cc:	46bd      	mov	sp, r7
   110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   110d2:	4770      	bx	lr

000110d4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   110d4:	b480      	push	{r7}
   110d6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   110d8:	f242 032a 	movw	r3, #8234	; 0x202a
   110dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e0:	f242 022c 	movw	r2, #8236	; 0x202c
   110e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110e8:	8812      	ldrh	r2, [r2, #0]
   110ea:	b292      	uxth	r2, r2
   110ec:	32c8      	adds	r2, #200	; 0xc8
   110ee:	b292      	uxth	r2, r2
   110f0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   110f2:	f242 0336 	movw	r3, #8246	; 0x2036
   110f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110fa:	f242 0236 	movw	r2, #8246	; 0x2036
   110fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11102:	7812      	ldrb	r2, [r2, #0]
   11104:	b2d2      	uxtb	r2, r2
   11106:	f042 0210 	orr.w	r2, r2, #16
   1110a:	b2d2      	uxtb	r2, r2
   1110c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   1110e:	f242 0337 	movw	r3, #8247	; 0x2037
   11112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11116:	f242 0237 	movw	r2, #8247	; 0x2037
   1111a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1111e:	7812      	ldrb	r2, [r2, #0]
   11120:	b2d2      	uxtb	r2, r2
   11122:	f042 0210 	orr.w	r2, r2, #16
   11126:	b2d2      	uxtb	r2, r2
   11128:	701a      	strb	r2, [r3, #0]
}
   1112a:	46bd      	mov	sp, r7
   1112c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11130:	4770      	bx	lr
   11132:	bf00      	nop

00011134 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11134:	b480      	push	{r7}
   11136:	b083      	sub	sp, #12
   11138:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1113a:	f242 0337 	movw	r3, #8247	; 0x2037
   1113e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11142:	f242 0237 	movw	r2, #8247	; 0x2037
   11146:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1114a:	7812      	ldrb	r2, [r2, #0]
   1114c:	b2d2      	uxtb	r2, r2
   1114e:	f022 0210 	bic.w	r2, r2, #16
   11152:	b2d2      	uxtb	r2, r2
   11154:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11156:	f24c 0321 	movw	r3, #49185	; 0xc021
   1115a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1115e:	781b      	ldrb	r3, [r3, #0]
   11160:	3301      	adds	r3, #1
   11162:	b2da      	uxtb	r2, r3
   11164:	f24c 0321 	movw	r3, #49185	; 0xc021
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1116e:	f24c 0321 	movw	r3, #49185	; 0xc021
   11172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11176:	781b      	ldrb	r3, [r3, #0]
   11178:	2b17      	cmp	r3, #23
   1117a:	d162      	bne.n	11242 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1117c:	f242 030f 	movw	r3, #8207	; 0x200f
   11180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11184:	781b      	ldrb	r3, [r3, #0]
   11186:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11188:	f24c 0322 	movw	r3, #49186	; 0xc022
   1118c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11190:	781b      	ldrb	r3, [r3, #0]
   11192:	79fa      	ldrb	r2, [r7, #7]
   11194:	429a      	cmp	r2, r3
   11196:	d110      	bne.n	111ba <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11198:	f24c 031e 	movw	r3, #49182	; 0xc01e
   1119c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a0:	2201      	movs	r2, #1
   111a2:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   111a4:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   111a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ac:	7d1a      	ldrb	r2, [r3, #20]
   111ae:	f24c 0320 	movw	r3, #49184	; 0xc020
   111b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b6:	701a      	strb	r2, [r3, #0]
   111b8:	e00c      	b.n	111d4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   111ba:	f24c 031f 	movw	r3, #49183	; 0xc01f
   111be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c2:	781b      	ldrb	r3, [r3, #0]
   111c4:	b2db      	uxtb	r3, r3
   111c6:	3301      	adds	r3, #1
   111c8:	b2da      	uxtb	r2, r3
   111ca:	f24c 031f 	movw	r3, #49183	; 0xc01f
   111ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   111d4:	f240 33ee 	movw	r3, #1006	; 0x3ee
   111d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111dc:	2201      	movs	r2, #1
   111de:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   111e0:	f24c 0324 	movw	r3, #49188	; 0xc024
   111e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e8:	2200      	movs	r2, #0
   111ea:	701a      	strb	r2, [r3, #0]
   111ec:	f242 0318 	movw	r3, #8216	; 0x2018
   111f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f4:	f242 0218 	movw	r2, #8216	; 0x2018
   111f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111fc:	7812      	ldrb	r2, [r2, #0]
   111fe:	b2d2      	uxtb	r2, r2
   11200:	f042 0201 	orr.w	r2, r2, #1
   11204:	b2d2      	uxtb	r2, r2
   11206:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11208:	f242 030d 	movw	r3, #8205	; 0x200d
   1120c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11210:	f242 020d 	movw	r2, #8205	; 0x200d
   11214:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11218:	7812      	ldrb	r2, [r2, #0]
   1121a:	b2d2      	uxtb	r2, r2
   1121c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11220:	b2d2      	uxtb	r2, r2
   11222:	701a      	strb	r2, [r3, #0]
   11224:	f242 030d 	movw	r3, #8205	; 0x200d
   11228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122c:	f242 020d 	movw	r2, #8205	; 0x200d
   11230:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11234:	7812      	ldrb	r2, [r2, #0]
   11236:	b2d2      	uxtb	r2, r2
   11238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1123c:	b2d2      	uxtb	r2, r2
   1123e:	701a      	strb	r2, [r3, #0]
    return;
   11240:	e051      	b.n	112e6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11242:	f24c 0321 	movw	r3, #49185	; 0xc021
   11246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124a:	781b      	ldrb	r3, [r3, #0]
   1124c:	2b15      	cmp	r3, #21
   1124e:	d820      	bhi.n	11292 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11250:	f24c 0321 	movw	r3, #49185	; 0xc021
   11254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11258:	781b      	ldrb	r3, [r3, #0]
   1125a:	461a      	mov	r2, r3
   1125c:	f24c 0308 	movw	r3, #49160	; 0xc008
   11260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11264:	4413      	add	r3, r2
   11266:	781b      	ldrb	r3, [r3, #0]
   11268:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1126a:	f242 030f 	movw	r3, #8207	; 0x200f
   1126e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11272:	79fa      	ldrb	r2, [r7, #7]
   11274:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11276:	f24c 0323 	movw	r3, #49187	; 0xc023
   1127a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1127e:	781a      	ldrb	r2, [r3, #0]
   11280:	79fb      	ldrb	r3, [r7, #7]
   11282:	4053      	eors	r3, r2
   11284:	b2da      	uxtb	r2, r3
   11286:	f24c 0323 	movw	r3, #49187	; 0xc023
   1128a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128e:	701a      	strb	r2, [r3, #0]
   11290:	e009      	b.n	112a6 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11292:	f242 030f 	movw	r3, #8207	; 0x200f
   11296:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1129a:	f24c 0223 	movw	r2, #49187	; 0xc023
   1129e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   112a2:	7812      	ldrb	r2, [r2, #0]
   112a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   112a6:	f242 030f 	movw	r3, #8207	; 0x200f
   112aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ae:	781b      	ldrb	r3, [r3, #0]
   112b0:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   112b2:	f24c 0321 	movw	r3, #49185	; 0xc021
   112b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ba:	781b      	ldrb	r3, [r3, #0]
   112bc:	1e5a      	subs	r2, r3, #1
   112be:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   112c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112c6:	4413      	add	r3, r2
   112c8:	79fa      	ldrb	r2, [r7, #7]
   112ca:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   112cc:	f24c 0322 	movw	r3, #49186	; 0xc022
   112d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d4:	781a      	ldrb	r2, [r3, #0]
   112d6:	79fb      	ldrb	r3, [r7, #7]
   112d8:	4053      	eors	r3, r2
   112da:	b2da      	uxtb	r2, r3
   112dc:	f24c 0322 	movw	r3, #49186	; 0xc022
   112e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e4:	701a      	strb	r2, [r3, #0]
}
   112e6:	370c      	adds	r7, #12
   112e8:	46bd      	mov	sp, r7
   112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   112ee:	4770      	bx	lr

000112f0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   112f0:	b480      	push	{r7}
   112f2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   112f4:	f242 0317 	movw	r3, #8215	; 0x2017
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f242 0217 	movw	r2, #8215	; 0x2017
   11300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11304:	7812      	ldrb	r2, [r2, #0]
   11306:	b2d2      	uxtb	r2, r2
   11308:	f042 0206 	orr.w	r2, r2, #6
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11310:	f242 0317 	movw	r3, #8215	; 0x2017
   11314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11318:	f242 0217 	movw	r2, #8215	; 0x2017
   1131c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11320:	7812      	ldrb	r2, [r2, #0]
   11322:	b2d2      	uxtb	r2, r2
   11324:	f042 0201 	orr.w	r2, r2, #1
   11328:	b2d2      	uxtb	r2, r2
   1132a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   1132c:	f24c 0324 	movw	r3, #49188	; 0xc024
   11330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11334:	2200      	movs	r2, #0
   11336:	701a      	strb	r2, [r3, #0]
   11338:	f242 0318 	movw	r3, #8216	; 0x2018
   1133c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11340:	f242 0218 	movw	r2, #8216	; 0x2018
   11344:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11348:	7812      	ldrb	r2, [r2, #0]
   1134a:	b2d2      	uxtb	r2, r2
   1134c:	f042 0201 	orr.w	r2, r2, #1
   11350:	b2d2      	uxtb	r2, r2
   11352:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11354:	f242 0302 	movw	r3, #8194	; 0x2002
   11358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1135c:	f242 0202 	movw	r2, #8194	; 0x2002
   11360:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11364:	7812      	ldrb	r2, [r2, #0]
   11366:	b2d2      	uxtb	r2, r2
   11368:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1136c:	b2d2      	uxtb	r2, r2
   1136e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11370:	f24c 0324 	movw	r3, #49188	; 0xc024
   11374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11378:	2200      	movs	r2, #0
   1137a:	701a      	strb	r2, [r3, #0]
   1137c:	f242 0303 	movw	r3, #8195	; 0x2003
   11380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11384:	f242 0203 	movw	r2, #8195	; 0x2003
   11388:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1138c:	7812      	ldrb	r2, [r2, #0]
   1138e:	b2d2      	uxtb	r2, r2
   11390:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11394:	b2d2      	uxtb	r2, r2
   11396:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11398:	f24c 0324 	movw	r3, #49188	; 0xc024
   1139c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a0:	2200      	movs	r2, #0
   113a2:	701a      	strb	r2, [r3, #0]
}
   113a4:	46bd      	mov	sp, r7
   113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   113aa:	4770      	bx	lr

000113ac <__vector_17>:


SIGNAL(SIG_SPI) {
   113ac:	b580      	push	{r7, lr}
   113ae:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   113b0:	f24c 0324 	movw	r3, #49188	; 0xc024
   113b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b8:	781b      	ldrb	r3, [r3, #0]
   113ba:	b2db      	uxtb	r3, r3
   113bc:	2b01      	cmp	r3, #1
   113be:	d102      	bne.n	113c6 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   113c0:	f7ff fe88 	bl	110d4 <link_fbw_on_spi_it>
   113c4:	e00b      	b.n	113de <__vector_17+0x32>
  else
    fatal_error_nb++;
   113c6:	f64b 63c8 	movw	r3, #48840	; 0xbec8
   113ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113ce:	781b      	ldrb	r3, [r3, #0]
   113d0:	3301      	adds	r3, #1
   113d2:	b2da      	uxtb	r2, r3
   113d4:	f64b 63c8 	movw	r3, #48840	; 0xbec8
   113d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113dc:	701a      	strb	r2, [r3, #0]
}
   113de:	bd80      	pop	{r7, pc}

000113e0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   113e0:	b480      	push	{r7}
   113e2:	b083      	sub	sp, #12
   113e4:	af00      	add	r7, sp, #0
   113e6:	4603      	mov	r3, r0
   113e8:	6039      	str	r1, [r7, #0]
   113ea:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   113ec:	79fa      	ldrb	r2, [r7, #7]
   113ee:	f24c 0338 	movw	r3, #49208	; 0xc038
   113f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f6:	6839      	ldr	r1, [r7, #0]
   113f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   113fc:	370c      	adds	r7, #12
   113fe:	46bd      	mov	sp, r7
   11400:	f85d 7b04 	ldr.w	r7, [sp], #4
   11404:	4770      	bx	lr
   11406:	bf00      	nop

00011408 <adc_init>:

void 
adc_init( void )
{
   11408:	b480      	push	{r7}
   1140a:	b083      	sub	sp, #12
   1140c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1140e:	f242 0362 	movw	r3, #8290	; 0x2062
   11412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11416:	2200      	movs	r2, #0
   11418:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1141a:	f242 0361 	movw	r3, #8289	; 0x2061
   1141e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11422:	2200      	movs	r2, #0
   11424:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11426:	f242 0307 	movw	r3, #8199	; 0x2007
   1142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142e:	2240      	movs	r2, #64	; 0x40
   11430:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11432:	f242 0308 	movw	r3, #8200	; 0x2008
   11436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1143a:	f242 0208 	movw	r2, #8200	; 0x2008
   1143e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11442:	7812      	ldrb	r2, [r2, #0]
   11444:	b2d2      	uxtb	r2, r2
   11446:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1144a:	b2d2      	uxtb	r2, r2
   1144c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1144e:	f242 0306 	movw	r3, #8198	; 0x2006
   11452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11456:	22cf      	movs	r2, #207	; 0xcf
   11458:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1145a:	2300      	movs	r3, #0
   1145c:	71fb      	strb	r3, [r7, #7]
   1145e:	e00a      	b.n	11476 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11460:	79fa      	ldrb	r2, [r7, #7]
   11462:	f24c 0338 	movw	r3, #49208	; 0xc038
   11466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1146a:	2100      	movs	r1, #0
   1146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11470:	79fb      	ldrb	r3, [r7, #7]
   11472:	3301      	adds	r3, #1
   11474:	71fb      	strb	r3, [r7, #7]
   11476:	79fb      	ldrb	r3, [r7, #7]
   11478:	2b07      	cmp	r3, #7
   1147a:	d9f1      	bls.n	11460 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1147c:	370c      	adds	r7, #12
   1147e:	46bd      	mov	sp, r7
   11480:	f85d 7b04 	ldr.w	r7, [sp], #4
   11484:	4770      	bx	lr
   11486:	bf00      	nop

00011488 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11488:	b480      	push	{r7}
   1148a:	b085      	sub	sp, #20
   1148c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1148e:	f242 0307 	movw	r3, #8199	; 0x2007
   11492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11496:	781b      	ldrb	r3, [r3, #0]
   11498:	b2db      	uxtb	r3, r3
   1149a:	f003 0307 	and.w	r3, r3, #7
   1149e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   114a0:	7bfa      	ldrb	r2, [r7, #15]
   114a2:	f24c 0338 	movw	r3, #49208	; 0xc038
   114a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   114ae:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   114b0:	f242 0304 	movw	r3, #8196	; 0x2004
   114b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b8:	881b      	ldrh	r3, [r3, #0]
   114ba:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   114bc:	7bfa      	ldrb	r2, [r7, #15]
   114be:	f24c 0328 	movw	r3, #49192	; 0xc028
   114c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c6:	88f9      	ldrh	r1, [r7, #6]
   114c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   114cc:	68bb      	ldr	r3, [r7, #8]
   114ce:	2b00      	cmp	r3, #0
   114d0:	d025      	beq.n	1151e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   114d2:	68bb      	ldr	r3, [r7, #8]
   114d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   114d8:	3301      	adds	r3, #1
   114da:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   114dc:	7bbb      	ldrb	r3, [r7, #14]
   114de:	2b1f      	cmp	r3, #31
   114e0:	d901      	bls.n	114e6 <__vector_21+0x5e>
   114e2:	2300      	movs	r3, #0
   114e4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   114e6:	68bb      	ldr	r3, [r7, #8]
   114e8:	881a      	ldrh	r2, [r3, #0]
   114ea:	7bbb      	ldrb	r3, [r7, #14]
   114ec:	68b9      	ldr	r1, [r7, #8]
   114ee:	005b      	lsls	r3, r3, #1
   114f0:	440b      	add	r3, r1
   114f2:	885b      	ldrh	r3, [r3, #2]
   114f4:	1ad3      	subs	r3, r2, r3
   114f6:	b29a      	uxth	r2, r3
   114f8:	68bb      	ldr	r3, [r7, #8]
   114fa:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   114fc:	7bbb      	ldrb	r3, [r7, #14]
   114fe:	68ba      	ldr	r2, [r7, #8]
   11500:	005b      	lsls	r3, r3, #1
   11502:	4413      	add	r3, r2
   11504:	88fa      	ldrh	r2, [r7, #6]
   11506:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11508:	68bb      	ldr	r3, [r7, #8]
   1150a:	881a      	ldrh	r2, [r3, #0]
   1150c:	88fb      	ldrh	r3, [r7, #6]
   1150e:	4413      	add	r3, r2
   11510:	b29a      	uxth	r2, r3
   11512:	68bb      	ldr	r3, [r7, #8]
   11514:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11516:	68bb      	ldr	r3, [r7, #8]
   11518:	7bba      	ldrb	r2, [r7, #14]
   1151a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1151e:	7bfb      	ldrb	r3, [r7, #15]
   11520:	3301      	adds	r3, #1
   11522:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11524:	7bfb      	ldrb	r3, [r7, #15]
   11526:	2b07      	cmp	r3, #7
   11528:	d901      	bls.n	1152e <__vector_21+0xa6>
    adc_input = 0;
   1152a:	2300      	movs	r3, #0
   1152c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1152e:	f242 0307 	movw	r3, #8199	; 0x2007
   11532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11536:	7bfa      	ldrb	r2, [r7, #15]
   11538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1153c:	b2d2      	uxtb	r2, r2
   1153e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11540:	f242 0306 	movw	r3, #8198	; 0x2006
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	f242 0206 	movw	r2, #8198	; 0x2006
   1154c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11550:	7812      	ldrb	r2, [r2, #0]
   11552:	b2d2      	uxtb	r2, r2
   11554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11558:	b2d2      	uxtb	r2, r2
   1155a:	701a      	strb	r2, [r3, #0]
  
}
   1155c:	3714      	adds	r7, #20
   1155e:	46bd      	mov	sp, r7
   11560:	f85d 7b04 	ldr.w	r7, [sp], #4
   11564:	4770      	bx	lr
   11566:	bf00      	nop

00011568 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11568:	b580      	push	{r7, lr}
   1156a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1156c:	f003 fca8 	bl	14ec0 <uart1_init>
#endif
  ubx_status = UNINIT;
   11570:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11578:	2200      	movs	r2, #0
   1157a:	701a      	strb	r2, [r3, #0]
}
   1157c:	bd80      	pop	{r7, pc}
   1157e:	bf00      	nop

00011580 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11580:	b580      	push	{r7, lr}
   11582:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11584:	f24c 1386 	movw	r3, #49542	; 0xc186
   11588:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1158c:	781b      	ldrb	r3, [r3, #0]
   1158e:	2b01      	cmp	r3, #1
   11590:	f040 80f9 	bne.w	11786 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11594:	f24c 1385 	movw	r3, #49541	; 0xc185
   11598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1159c:	781b      	ldrb	r3, [r3, #0]
   1159e:	2b08      	cmp	r3, #8
   115a0:	d128      	bne.n	115f4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   115a2:	f24c 0380 	movw	r3, #49280	; 0xc080
   115a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115aa:	685a      	ldr	r2, [r3, #4]
   115ac:	f24c 036c 	movw	r3, #49260	; 0xc06c
   115b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115b4:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   115b6:	f24c 0380 	movw	r3, #49280	; 0xc080
   115ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115be:	689a      	ldr	r2, [r3, #8]
   115c0:	f24c 0370 	movw	r3, #49264	; 0xc070
   115c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c8:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   115ca:	4b73      	ldr	r3, [pc, #460]	; (11798 <parse_gps_msg+0x218>)
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	4618      	mov	r0, r3
   115d0:	f006 fdde 	bl	18190 <__aeabi_i2f>
   115d4:	4603      	mov	r3, r0
   115d6:	4618      	mov	r0, r3
   115d8:	f04f 0100 	mov.w	r1, #0
   115dc:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   115e0:	f006 fede 	bl	183a0 <__aeabi_fdiv>
   115e4:	4603      	mov	r3, r0
   115e6:	461a      	mov	r2, r3
   115e8:	f24c 035c 	movw	r3, #49244	; 0xc05c
   115ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f0:	601a      	str	r2, [r3, #0]
   115f2:	e0c8      	b.n	11786 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   115f4:	f24c 1385 	movw	r3, #49541	; 0xc185
   115f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115fc:	781b      	ldrb	r3, [r3, #0]
   115fe:	2b03      	cmp	r3, #3
   11600:	d10a      	bne.n	11618 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   11602:	f24c 0380 	movw	r3, #49280	; 0xc080
   11606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1160a:	791a      	ldrb	r2, [r3, #4]
   1160c:	f24c 037c 	movw	r3, #49276	; 0xc07c
   11610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11614:	701a      	strb	r2, [r3, #0]
   11616:	e0b6      	b.n	11786 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11618:	f24c 1385 	movw	r3, #49541	; 0xc185
   1161c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11620:	781b      	ldrb	r3, [r3, #0]
   11622:	2b12      	cmp	r3, #18
   11624:	f040 80af 	bne.w	11786 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11628:	4b5c      	ldr	r3, [pc, #368]	; (1179c <parse_gps_msg+0x21c>)
   1162a:	681b      	ldr	r3, [r3, #0]
   1162c:	4618      	mov	r0, r3
   1162e:	f006 fdab 	bl	18188 <__aeabi_ui2f>
   11632:	4603      	mov	r3, r0
   11634:	4618      	mov	r0, r3
   11636:	f04f 0100 	mov.w	r1, #0
   1163a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1163e:	f006 feaf 	bl	183a0 <__aeabi_fdiv>
   11642:	4603      	mov	r3, r0
   11644:	461a      	mov	r2, r3
   11646:	f24c 0360 	movw	r3, #49248	; 0xc060
   1164a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1164e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11650:	4b51      	ldr	r3, [pc, #324]	; (11798 <parse_gps_msg+0x218>)
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	4618      	mov	r0, r3
   11656:	f006 fd9b 	bl	18190 <__aeabi_i2f>
   1165a:	4603      	mov	r3, r0
   1165c:	4618      	mov	r0, r3
   1165e:	f04f 0100 	mov.w	r1, #0
   11662:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11666:	f006 fe9b 	bl	183a0 <__aeabi_fdiv>
   1166a:	4603      	mov	r3, r0
   1166c:	461a      	mov	r2, r3
   1166e:	f24c 0364 	movw	r3, #49252	; 0xc064
   11672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11676:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11678:	4b49      	ldr	r3, [pc, #292]	; (117a0 <parse_gps_msg+0x220>)
   1167a:	681b      	ldr	r3, [r3, #0]
   1167c:	4618      	mov	r0, r3
   1167e:	f006 fd87 	bl	18190 <__aeabi_i2f>
   11682:	4603      	mov	r3, r0
   11684:	4618      	mov	r0, r3
   11686:	f006 f943 	bl	17910 <__aeabi_f2d>
   1168a:	4602      	mov	r2, r0
   1168c:	460b      	mov	r3, r1
   1168e:	4610      	mov	r0, r2
   11690:	4619      	mov	r1, r3
   11692:	a33d      	add	r3, pc, #244	; (adr r3, 11788 <parse_gps_msg+0x208>)
   11694:	e9d3 2300 	ldrd	r2, r3, [r3]
   11698:	f006 fab8 	bl	17c0c <__aeabi_ddiv>
   1169c:	4602      	mov	r2, r0
   1169e:	460b      	mov	r3, r1
   116a0:	4610      	mov	r0, r2
   116a2:	4619      	mov	r1, r3
   116a4:	f04f 0200 	mov.w	r2, #0
   116a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   116ac:	f2c4 0366 	movt	r3, #16486	; 0x4066
   116b0:	f006 faac 	bl	17c0c <__aeabi_ddiv>
   116b4:	4602      	mov	r2, r0
   116b6:	460b      	mov	r3, r1
   116b8:	4610      	mov	r0, r2
   116ba:	4619      	mov	r1, r3
   116bc:	a334      	add	r3, pc, #208	; (adr r3, 11790 <parse_gps_msg+0x210>)
   116be:	e9d3 2300 	ldrd	r2, r3, [r3]
   116c2:	f006 f979 	bl	179b8 <__aeabi_dmul>
   116c6:	4602      	mov	r2, r0
   116c8:	460b      	mov	r3, r1
   116ca:	4610      	mov	r0, r2
   116cc:	4619      	mov	r1, r3
   116ce:	f006 fc55 	bl	17f7c <__aeabi_d2f>
   116d2:	4602      	mov	r2, r0
   116d4:	f24c 0368 	movw	r3, #49256	; 0xc068
   116d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116dc:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   116de:	f24c 0380 	movw	r3, #49280	; 0xc080
   116e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	4618      	mov	r0, r3
   116ea:	f006 fd4d 	bl	18188 <__aeabi_ui2f>
   116ee:	4603      	mov	r3, r0
   116f0:	4618      	mov	r0, r3
   116f2:	f04f 0100 	mov.w	r1, #0
   116f6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   116fa:	f006 fe51 	bl	183a0 <__aeabi_fdiv>
   116fe:	4603      	mov	r3, r0
   11700:	461a      	mov	r2, r3
   11702:	f24c 0358 	movw	r3, #49240	; 0xc058
   11706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1170a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   1170c:	f24c 036c 	movw	r3, #49260	; 0xc06c
   11710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11714:	681a      	ldr	r2, [r3, #0]
   11716:	f248 531f 	movw	r3, #34079	; 0x851f
   1171a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1171e:	fb83 1302 	smull	r1, r3, r3, r2
   11722:	1159      	asrs	r1, r3, #5
   11724:	17d3      	asrs	r3, r2, #31
   11726:	1acb      	subs	r3, r1, r3
   11728:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1172c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11730:	4618      	mov	r0, r3
   11732:	f006 fd2d 	bl	18190 <__aeabi_i2f>
   11736:	4602      	mov	r2, r0
   11738:	f24c 0374 	movw	r3, #49268	; 0xc074
   1173c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11740:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11742:	f24c 0370 	movw	r3, #49264	; 0xc070
   11746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1174a:	681a      	ldr	r2, [r3, #0]
   1174c:	f248 531f 	movw	r3, #34079	; 0x851f
   11750:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11754:	fb83 1302 	smull	r1, r3, r3, r2
   11758:	1159      	asrs	r1, r3, #5
   1175a:	17d3      	asrs	r3, r2, #31
   1175c:	1aca      	subs	r2, r1, r3
   1175e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11762:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11766:	4413      	add	r3, r2
   11768:	4618      	mov	r0, r3
   1176a:	f006 fd11 	bl	18190 <__aeabi_i2f>
   1176e:	4602      	mov	r2, r0
   11770:	f24c 0378 	movw	r3, #49272	; 0xc078
   11774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11778:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1177a:	f24c 037e 	movw	r3, #49278	; 0xc07e
   1177e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11782:	2201      	movs	r2, #1
   11784:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11786:	bd80      	pop	{r7, pc}
   11788:	00000000 	.word	0x00000000
   1178c:	40f86a00 	.word	0x40f86a00
   11790:	5a7ed197 	.word	0x5a7ed197
   11794:	400921fb 	.word	0x400921fb
   11798:	2004c08c 	.word	0x2004c08c
   1179c:	2004c094 	.word	0x2004c094
   117a0:	2004c098 	.word	0x2004c098

000117a4 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   117a4:	b480      	push	{r7}
   117a6:	b083      	sub	sp, #12
   117a8:	af00      	add	r7, sp, #0
   117aa:	4603      	mov	r3, r0
   117ac:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   117ae:	f24c 137f 	movw	r3, #49535	; 0xc17f
   117b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b6:	781b      	ldrb	r3, [r3, #0]
   117b8:	2b06      	cmp	r3, #6
   117ba:	d81d      	bhi.n	117f8 <parse_ubx+0x54>
    ck_a += c;
   117bc:	f24c 1383 	movw	r3, #49539	; 0xc183
   117c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c4:	781a      	ldrb	r2, [r3, #0]
   117c6:	79fb      	ldrb	r3, [r7, #7]
   117c8:	4413      	add	r3, r2
   117ca:	b2da      	uxtb	r2, r3
   117cc:	f24c 1383 	movw	r3, #49539	; 0xc183
   117d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   117d6:	f24c 1384 	movw	r3, #49540	; 0xc184
   117da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117de:	781a      	ldrb	r2, [r3, #0]
   117e0:	f24c 1383 	movw	r3, #49539	; 0xc183
   117e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e8:	781b      	ldrb	r3, [r3, #0]
   117ea:	4413      	add	r3, r2
   117ec:	b2da      	uxtb	r2, r3
   117ee:	f24c 1384 	movw	r3, #49540	; 0xc184
   117f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117f6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   117f8:	f24c 137f 	movw	r3, #49535	; 0xc17f
   117fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11800:	781b      	ldrb	r3, [r3, #0]
   11802:	2b00      	cmp	r3, #0
   11804:	d110      	bne.n	11828 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11806:	79fb      	ldrb	r3, [r7, #7]
   11808:	2bb5      	cmp	r3, #181	; 0xb5
   1180a:	f040 8135 	bne.w	11a78 <parse_ubx+0x2d4>
      ubx_status++;
   1180e:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11816:	781b      	ldrb	r3, [r3, #0]
   11818:	3301      	adds	r3, #1
   1181a:	b2da      	uxtb	r2, r3
   1181c:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11824:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11826:	e12f      	b.n	11a88 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11828:	f24c 137f 	movw	r3, #49535	; 0xc17f
   1182c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	2b01      	cmp	r3, #1
   11834:	d11c      	bne.n	11870 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11836:	79fb      	ldrb	r3, [r7, #7]
   11838:	2b62      	cmp	r3, #98	; 0x62
   1183a:	d000      	beq.n	1183e <parse_ubx+0x9a>
      goto error;
   1183c:	e11d      	b.n	11a7a <parse_ubx+0x2d6>
    ck_a = 0;
   1183e:	f24c 1383 	movw	r3, #49539	; 0xc183
   11842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11846:	2200      	movs	r2, #0
   11848:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1184a:	f24c 1384 	movw	r3, #49540	; 0xc184
   1184e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11852:	2200      	movs	r2, #0
   11854:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11856:	f24c 137f 	movw	r3, #49535	; 0xc17f
   1185a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1185e:	781b      	ldrb	r3, [r3, #0]
   11860:	3301      	adds	r3, #1
   11862:	b2da      	uxtb	r2, r3
   11864:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1186c:	701a      	strb	r2, [r3, #0]
   1186e:	e103      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11870:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11878:	781b      	ldrb	r3, [r3, #0]
   1187a:	2b02      	cmp	r3, #2
   1187c:	d127      	bne.n	118ce <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1187e:	f24c 037d 	movw	r3, #49277	; 0xc07d
   11882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11886:	781b      	ldrb	r3, [r3, #0]
   11888:	b2db      	uxtb	r3, r3
   1188a:	2b00      	cmp	r3, #0
   1188c:	d00c      	beq.n	118a8 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   1188e:	f24c 1387 	movw	r3, #49543	; 0xc187
   11892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11896:	781b      	ldrb	r3, [r3, #0]
   11898:	3301      	adds	r3, #1
   1189a:	b2da      	uxtb	r2, r3
   1189c:	f24c 1387 	movw	r3, #49543	; 0xc187
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	701a      	strb	r2, [r3, #0]
      goto error;
   118a6:	e0e8      	b.n	11a7a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   118a8:	f24c 1386 	movw	r3, #49542	; 0xc186
   118ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b0:	79fa      	ldrb	r2, [r7, #7]
   118b2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118b4:	f24c 137f 	movw	r3, #49535	; 0xc17f
   118b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118bc:	781b      	ldrb	r3, [r3, #0]
   118be:	3301      	adds	r3, #1
   118c0:	b2da      	uxtb	r2, r3
   118c2:	f24c 137f 	movw	r3, #49535	; 0xc17f
   118c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ca:	701a      	strb	r2, [r3, #0]
   118cc:	e0d4      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   118ce:	f24c 137f 	movw	r3, #49535	; 0xc17f
   118d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	2b03      	cmp	r3, #3
   118da:	d112      	bne.n	11902 <parse_ubx+0x15e>
  {
    ubx_id = c;
   118dc:	f24c 1385 	movw	r3, #49541	; 0xc185
   118e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e4:	79fa      	ldrb	r2, [r7, #7]
   118e6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118e8:	f24c 137f 	movw	r3, #49535	; 0xc17f
   118ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f0:	781b      	ldrb	r3, [r3, #0]
   118f2:	3301      	adds	r3, #1
   118f4:	b2da      	uxtb	r2, r3
   118f6:	f24c 137f 	movw	r3, #49535	; 0xc17f
   118fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118fe:	701a      	strb	r2, [r3, #0]
   11900:	e0ba      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11902:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1190a:	781b      	ldrb	r3, [r3, #0]
   1190c:	2b04      	cmp	r3, #4
   1190e:	d113      	bne.n	11938 <parse_ubx+0x194>
  {
    ubx_len = c;
   11910:	79fb      	ldrb	r3, [r7, #7]
   11912:	b29a      	uxth	r2, r3
   11914:	f24c 1380 	movw	r3, #49536	; 0xc180
   11918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1191c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   1191e:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11926:	781b      	ldrb	r3, [r3, #0]
   11928:	3301      	adds	r3, #1
   1192a:	b2da      	uxtb	r2, r3
   1192c:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11934:	701a      	strb	r2, [r3, #0]
   11936:	e09f      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11938:	f24c 137f 	movw	r3, #49535	; 0xc17f
   1193c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11940:	781b      	ldrb	r3, [r3, #0]
   11942:	2b05      	cmp	r3, #5
   11944:	d12b      	bne.n	1199e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11946:	79fb      	ldrb	r3, [r7, #7]
   11948:	021b      	lsls	r3, r3, #8
   1194a:	b29a      	uxth	r2, r3
   1194c:	f24c 1380 	movw	r3, #49536	; 0xc180
   11950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11954:	881b      	ldrh	r3, [r3, #0]
   11956:	b29b      	uxth	r3, r3
   11958:	4313      	orrs	r3, r2
   1195a:	b29b      	uxth	r3, r3
   1195c:	b29a      	uxth	r2, r3
   1195e:	f24c 1380 	movw	r3, #49536	; 0xc180
   11962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11966:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11968:	f24c 1380 	movw	r3, #49536	; 0xc180
   1196c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11970:	881b      	ldrh	r3, [r3, #0]
   11972:	2bff      	cmp	r3, #255	; 0xff
   11974:	d900      	bls.n	11978 <parse_ubx+0x1d4>
      goto error;
   11976:	e080      	b.n	11a7a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11978:	f24c 1382 	movw	r3, #49538	; 0xc182
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	2200      	movs	r2, #0
   11982:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11984:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	781b      	ldrb	r3, [r3, #0]
   1198e:	3301      	adds	r3, #1
   11990:	b2da      	uxtb	r2, r3
   11992:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199a:	701a      	strb	r2, [r3, #0]
   1199c:	e06c      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   1199e:	f24c 137f 	movw	r3, #49535	; 0xc17f
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	781b      	ldrb	r3, [r3, #0]
   119a8:	2b06      	cmp	r3, #6
   119aa:	d131      	bne.n	11a10 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   119ac:	f24c 1382 	movw	r3, #49538	; 0xc182
   119b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b4:	781b      	ldrb	r3, [r3, #0]
   119b6:	461a      	mov	r2, r3
   119b8:	f24c 0380 	movw	r3, #49280	; 0xc080
   119bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c0:	79f9      	ldrb	r1, [r7, #7]
   119c2:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   119c4:	f24c 1382 	movw	r3, #49538	; 0xc182
   119c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119cc:	781b      	ldrb	r3, [r3, #0]
   119ce:	3301      	adds	r3, #1
   119d0:	b2da      	uxtb	r2, r3
   119d2:	f24c 1382 	movw	r3, #49538	; 0xc182
   119d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119da:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   119dc:	f24c 1382 	movw	r3, #49538	; 0xc182
   119e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e4:	781b      	ldrb	r3, [r3, #0]
   119e6:	461a      	mov	r2, r3
   119e8:	f24c 1380 	movw	r3, #49536	; 0xc180
   119ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f0:	881b      	ldrh	r3, [r3, #0]
   119f2:	429a      	cmp	r2, r3
   119f4:	d340      	bcc.n	11a78 <parse_ubx+0x2d4>
      ubx_status++;
   119f6:	f24c 137f 	movw	r3, #49535	; 0xc17f
   119fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119fe:	781b      	ldrb	r3, [r3, #0]
   11a00:	3301      	adds	r3, #1
   11a02:	b2da      	uxtb	r2, r3
   11a04:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a0c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a0e:	e03b      	b.n	11a88 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11a10:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a18:	781b      	ldrb	r3, [r3, #0]
   11a1a:	2b07      	cmp	r3, #7
   11a1c:	d115      	bne.n	11a4a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11a1e:	f24c 1383 	movw	r3, #49539	; 0xc183
   11a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a26:	781b      	ldrb	r3, [r3, #0]
   11a28:	79fa      	ldrb	r2, [r7, #7]
   11a2a:	429a      	cmp	r2, r3
   11a2c:	d000      	beq.n	11a30 <parse_ubx+0x28c>
      goto error;
   11a2e:	e024      	b.n	11a7a <parse_ubx+0x2d6>
    ubx_status++;
   11a30:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a38:	781b      	ldrb	r3, [r3, #0]
   11a3a:	3301      	adds	r3, #1
   11a3c:	b2da      	uxtb	r2, r3
   11a3e:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a46:	701a      	strb	r2, [r3, #0]
   11a48:	e016      	b.n	11a78 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11a4a:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a52:	781b      	ldrb	r3, [r3, #0]
   11a54:	2b08      	cmp	r3, #8
   11a56:	d10f      	bne.n	11a78 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11a58:	f24c 1384 	movw	r3, #49540	; 0xc184
   11a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a60:	781b      	ldrb	r3, [r3, #0]
   11a62:	79fa      	ldrb	r2, [r7, #7]
   11a64:	429a      	cmp	r2, r3
   11a66:	d000      	beq.n	11a6a <parse_ubx+0x2c6>
      goto error;
   11a68:	e007      	b.n	11a7a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11a6a:	f24c 037d 	movw	r3, #49277	; 0xc07d
   11a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a72:	2201      	movs	r2, #1
   11a74:	701a      	strb	r2, [r3, #0]
    goto restart;
   11a76:	e000      	b.n	11a7a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11a78:	e006      	b.n	11a88 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11a7a:	f24c 137f 	movw	r3, #49535	; 0xc17f
   11a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a82:	2200      	movs	r2, #0
   11a84:	701a      	strb	r2, [r3, #0]
  return;
   11a86:	bf00      	nop
}
   11a88:	370c      	adds	r7, #12
   11a8a:	46bd      	mov	sp, r7
   11a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a90:	4770      	bx	lr
   11a92:	bf00      	nop

00011a94 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11a94:	b580      	push	{r7, lr}
   11a96:	b082      	sub	sp, #8
   11a98:	af00      	add	r7, sp, #0
   11a9a:	f242 039c 	movw	r3, #8348	; 0x209c
   11a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	71fb      	strb	r3, [r7, #7]
   11aa6:	79fb      	ldrb	r3, [r7, #7]
   11aa8:	4618      	mov	r0, r3
   11aaa:	f7ff fe7b 	bl	117a4 <parse_ubx>
   11aae:	3708      	adds	r7, #8
   11ab0:	46bd      	mov	sp, r7
   11ab2:	bd80      	pop	{r7, pc}
   11ab4:	f3af 8000 	nop.w

00011ab8 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11ab8:	b580      	push	{r7, lr}
   11aba:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11abc:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ac4:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11ac8:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11acc:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11ace:	2001      	movs	r0, #1
   11ad0:	f24c 118c 	movw	r1, #49548	; 0xc18c
   11ad4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11ad8:	f7ff fc82 	bl	113e0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11adc:	2002      	movs	r0, #2
   11ade:	f24c 11d0 	movw	r1, #49616	; 0xc1d0
   11ae2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11ae6:	f7ff fc7b 	bl	113e0 <adc_buf_channel>
}
   11aea:	bd80      	pop	{r7, pc}

00011aec <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11aec:	b480      	push	{r7}
   11aee:	b083      	sub	sp, #12
   11af0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11af2:	f24c 138c 	movw	r3, #49548	; 0xc18c
   11af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afa:	881b      	ldrh	r3, [r3, #0]
   11afc:	095b      	lsrs	r3, r3, #5
   11afe:	b29b      	uxth	r3, r3
   11b00:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11b02:	f24c 13d0 	movw	r3, #49616	; 0xc1d0
   11b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0a:	881b      	ldrh	r3, [r3, #0]
   11b0c:	095b      	lsrs	r3, r3, #5
   11b0e:	b29b      	uxth	r3, r3
   11b10:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11b12:	88fb      	ldrh	r3, [r7, #6]
   11b14:	425b      	negs	r3, r3
   11b16:	b29a      	uxth	r2, r3
   11b18:	88bb      	ldrh	r3, [r7, #4]
   11b1a:	1ad3      	subs	r3, r2, r3
   11b1c:	b29a      	uxth	r2, r3
   11b1e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b26:	881b      	ldrh	r3, [r3, #0]
   11b28:	b29b      	uxth	r3, r3
   11b2a:	1ad3      	subs	r3, r2, r3
   11b2c:	b29b      	uxth	r3, r3
   11b2e:	b29a      	uxth	r2, r3
   11b30:	f24c 1388 	movw	r3, #49544	; 0xc188
   11b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b38:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11b3a:	88ba      	ldrh	r2, [r7, #4]
   11b3c:	88fb      	ldrh	r3, [r7, #6]
   11b3e:	1ad3      	subs	r3, r2, r3
   11b40:	b29a      	uxth	r2, r3
   11b42:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b4a:	881b      	ldrh	r3, [r3, #0]
   11b4c:	b29b      	uxth	r3, r3
   11b4e:	1ad3      	subs	r3, r2, r3
   11b50:	b29b      	uxth	r3, r3
   11b52:	b29a      	uxth	r2, r3
   11b54:	f24c 138a 	movw	r3, #49546	; 0xc18a
   11b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11b5e:	370c      	adds	r7, #12
   11b60:	46bd      	mov	sp, r7
   11b62:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b66:	4770      	bx	lr

00011b68 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11b68:	b580      	push	{r7, lr}
   11b6a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11b6c:	f24c 138a 	movw	r3, #49546	; 0xc18a
   11b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b74:	881b      	ldrh	r3, [r3, #0]
   11b76:	b29b      	uxth	r3, r3
   11b78:	425b      	negs	r3, r3
   11b7a:	b29b      	uxth	r3, r3
   11b7c:	b29a      	uxth	r2, r3
   11b7e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b86:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11b88:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b90:	881b      	ldrh	r3, [r3, #0]
   11b92:	b21b      	sxth	r3, r3
   11b94:	4618      	mov	r0, r3
   11b96:	f005 fea9 	bl	178ec <__aeabi_i2d>
   11b9a:	4602      	mov	r2, r0
   11b9c:	460b      	mov	r3, r1
   11b9e:	f04f 0000 	mov.w	r0, #0
   11ba2:	f04f 0100 	mov.w	r1, #0
   11ba6:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11baa:	f006 f82f 	bl	17c0c <__aeabi_ddiv>
   11bae:	4602      	mov	r2, r0
   11bb0:	460b      	mov	r3, r1
   11bb2:	4610      	mov	r0, r2
   11bb4:	4619      	mov	r1, r3
   11bb6:	f006 f9e1 	bl	17f7c <__aeabi_d2f>
   11bba:	4602      	mov	r2, r0
   11bbc:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bc4:	601a      	str	r2, [r3, #0]
}
   11bc6:	bd80      	pop	{r7, pc}

00011bc8 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11bc8:	b590      	push	{r4, r7, lr}
   11bca:	b083      	sub	sp, #12
   11bcc:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11bce:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd6:	681a      	ldr	r2, [r3, #0]
   11bd8:	f24c 2314 	movw	r3, #49684	; 0xc214
   11bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be0:	681b      	ldr	r3, [r3, #0]
   11be2:	4610      	mov	r0, r2
   11be4:	4619      	mov	r1, r3
   11be6:	f006 fa1d 	bl	18024 <__aeabi_fsub>
   11bea:	4603      	mov	r3, r0
   11bec:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11bee:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf6:	681b      	ldr	r3, [r3, #0]
   11bf8:	4618      	mov	r0, r3
   11bfa:	6879      	ldr	r1, [r7, #4]
   11bfc:	f006 fb1c 	bl	18238 <__aeabi_fmul>
   11c00:	4603      	mov	r3, r0
   11c02:	4618      	mov	r0, r3
   11c04:	f04f 0100 	mov.w	r1, #0
   11c08:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11c0c:	f006 fcb2 	bl	18574 <__aeabi_fcmplt>
   11c10:	4603      	mov	r3, r0
   11c12:	2b00      	cmp	r3, #0
   11c14:	d002      	beq.n	11c1c <roll_pitch_pid_run+0x54>
   11c16:	f64d 2280 	movw	r2, #55936	; 0xda80
   11c1a:	e026      	b.n	11c6a <roll_pitch_pid_run+0xa2>
   11c1c:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c24:	681b      	ldr	r3, [r3, #0]
   11c26:	4618      	mov	r0, r3
   11c28:	6879      	ldr	r1, [r7, #4]
   11c2a:	f006 fb05 	bl	18238 <__aeabi_fmul>
   11c2e:	4603      	mov	r3, r0
   11c30:	4618      	mov	r0, r3
   11c32:	f04f 0100 	mov.w	r1, #0
   11c36:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c3a:	f006 fcb9 	bl	185b0 <__aeabi_fcmpgt>
   11c3e:	4603      	mov	r3, r0
   11c40:	2b00      	cmp	r3, #0
   11c42:	d002      	beq.n	11c4a <roll_pitch_pid_run+0x82>
   11c44:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c48:	e00e      	b.n	11c68 <roll_pitch_pid_run+0xa0>
   11c4a:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c52:	681b      	ldr	r3, [r3, #0]
   11c54:	4618      	mov	r0, r3
   11c56:	6879      	ldr	r1, [r7, #4]
   11c58:	f006 faee 	bl	18238 <__aeabi_fmul>
   11c5c:	4603      	mov	r3, r0
   11c5e:	4618      	mov	r0, r3
   11c60:	f006 fcb0 	bl	185c4 <__aeabi_f2iz>
   11c64:	4603      	mov	r3, r0
   11c66:	b29b      	uxth	r3, r3
   11c68:	b29a      	uxth	r2, r3
   11c6a:	f24c 231e 	movw	r3, #49694	; 0xc21e
   11c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c72:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11c74:	f24c 2324 	movw	r3, #49700	; 0xc224
   11c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7c:	681b      	ldr	r3, [r3, #0]
   11c7e:	4618      	mov	r0, r3
   11c80:	f04f 0100 	mov.w	r1, #0
   11c84:	f006 fc76 	bl	18574 <__aeabi_fcmplt>
   11c88:	4603      	mov	r3, r0
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	d006      	beq.n	11c9c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11c8e:	f24c 2324 	movw	r3, #49700	; 0xc224
   11c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c96:	f04f 0200 	mov.w	r2, #0
   11c9a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11c9c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca4:	681a      	ldr	r2, [r3, #0]
   11ca6:	f24c 2318 	movw	r3, #49688	; 0xc218
   11caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cae:	681b      	ldr	r3, [r3, #0]
   11cb0:	4610      	mov	r0, r2
   11cb2:	4619      	mov	r1, r3
   11cb4:	f006 f9b6 	bl	18024 <__aeabi_fsub>
   11cb8:	4603      	mov	r3, r0
   11cba:	461c      	mov	r4, r3
   11cbc:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc4:	681b      	ldr	r3, [r3, #0]
   11cc6:	4618      	mov	r0, r3
   11cc8:	f04f 0100 	mov.w	r1, #0
   11ccc:	f006 fc52 	bl	18574 <__aeabi_fcmplt>
   11cd0:	4603      	mov	r3, r0
   11cd2:	2b00      	cmp	r3, #0
   11cd4:	d007      	beq.n	11ce6 <roll_pitch_pid_run+0x11e>
   11cd6:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ce4:	e004      	b.n	11cf0 <roll_pitch_pid_run+0x128>
   11ce6:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cee:	681a      	ldr	r2, [r3, #0]
   11cf0:	f24c 2324 	movw	r3, #49700	; 0xc224
   11cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf8:	681b      	ldr	r3, [r3, #0]
   11cfa:	4610      	mov	r0, r2
   11cfc:	4619      	mov	r1, r3
   11cfe:	f006 fa9b 	bl	18238 <__aeabi_fmul>
   11d02:	4603      	mov	r3, r0
   11d04:	4620      	mov	r0, r4
   11d06:	4619      	mov	r1, r3
   11d08:	f006 f98c 	bl	18024 <__aeabi_fsub>
   11d0c:	4603      	mov	r3, r0
   11d0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11d12:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11d14:	f240 4300 	movw	r3, #1024	; 0x400
   11d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d1c:	681b      	ldr	r3, [r3, #0]
   11d1e:	4618      	mov	r0, r3
   11d20:	6879      	ldr	r1, [r7, #4]
   11d22:	f006 fa89 	bl	18238 <__aeabi_fmul>
   11d26:	4603      	mov	r3, r0
   11d28:	4618      	mov	r0, r3
   11d2a:	f04f 0100 	mov.w	r1, #0
   11d2e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11d32:	f006 fc1f 	bl	18574 <__aeabi_fcmplt>
   11d36:	4603      	mov	r3, r0
   11d38:	2b00      	cmp	r3, #0
   11d3a:	d002      	beq.n	11d42 <roll_pitch_pid_run+0x17a>
   11d3c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11d40:	e026      	b.n	11d90 <roll_pitch_pid_run+0x1c8>
   11d42:	f240 4300 	movw	r3, #1024	; 0x400
   11d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d4a:	681b      	ldr	r3, [r3, #0]
   11d4c:	4618      	mov	r0, r3
   11d4e:	6879      	ldr	r1, [r7, #4]
   11d50:	f006 fa72 	bl	18238 <__aeabi_fmul>
   11d54:	4603      	mov	r3, r0
   11d56:	4618      	mov	r0, r3
   11d58:	f04f 0100 	mov.w	r1, #0
   11d5c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d60:	f006 fc26 	bl	185b0 <__aeabi_fcmpgt>
   11d64:	4603      	mov	r3, r0
   11d66:	2b00      	cmp	r3, #0
   11d68:	d002      	beq.n	11d70 <roll_pitch_pid_run+0x1a8>
   11d6a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11d6e:	e00e      	b.n	11d8e <roll_pitch_pid_run+0x1c6>
   11d70:	f240 4300 	movw	r3, #1024	; 0x400
   11d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d78:	681b      	ldr	r3, [r3, #0]
   11d7a:	4618      	mov	r0, r3
   11d7c:	6879      	ldr	r1, [r7, #4]
   11d7e:	f006 fa5b 	bl	18238 <__aeabi_fmul>
   11d82:	4603      	mov	r3, r0
   11d84:	4618      	mov	r0, r3
   11d86:	f006 fc1d 	bl	185c4 <__aeabi_f2iz>
   11d8a:	4603      	mov	r3, r0
   11d8c:	b29b      	uxth	r3, r3
   11d8e:	b29a      	uxth	r2, r3
   11d90:	f24c 2320 	movw	r3, #49696	; 0xc220
   11d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d98:	801a      	strh	r2, [r3, #0]
}
   11d9a:	370c      	adds	r7, #12
   11d9c:	46bd      	mov	sp, r7
   11d9e:	bd90      	pop	{r4, r7, pc}

00011da0 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11da0:	b580      	push	{r7, lr}
   11da2:	b082      	sub	sp, #8
   11da4:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11da6:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   11daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dae:	681a      	ldr	r2, [r3, #0]
   11db0:	f24c 232c 	movw	r3, #49708	; 0xc22c
   11db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11db8:	681b      	ldr	r3, [r3, #0]
   11dba:	4610      	mov	r0, r2
   11dbc:	4619      	mov	r1, r3
   11dbe:	f006 f931 	bl	18024 <__aeabi_fsub>
   11dc2:	4603      	mov	r3, r0
   11dc4:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11dc6:	e013      	b.n	11df0 <course_pid_run+0x50>
   11dc8:	6878      	ldr	r0, [r7, #4]
   11dca:	f005 fda1 	bl	17910 <__aeabi_f2d>
   11dce:	4602      	mov	r2, r0
   11dd0:	460b      	mov	r3, r1
   11dd2:	4610      	mov	r0, r2
   11dd4:	4619      	mov	r1, r3
   11dd6:	a348      	add	r3, pc, #288	; (adr r3, 11ef8 <course_pid_run+0x158>)
   11dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ddc:	f005 fc38 	bl	17650 <__aeabi_dsub>
   11de0:	4602      	mov	r2, r0
   11de2:	460b      	mov	r3, r1
   11de4:	4610      	mov	r0, r2
   11de6:	4619      	mov	r1, r3
   11de8:	f006 f8c8 	bl	17f7c <__aeabi_d2f>
   11dec:	4603      	mov	r3, r0
   11dee:	607b      	str	r3, [r7, #4]
   11df0:	6878      	ldr	r0, [r7, #4]
   11df2:	f005 fd8d 	bl	17910 <__aeabi_f2d>
   11df6:	4602      	mov	r2, r0
   11df8:	460b      	mov	r3, r1
   11dfa:	4610      	mov	r0, r2
   11dfc:	4619      	mov	r1, r3
   11dfe:	a340      	add	r3, pc, #256	; (adr r3, 11f00 <course_pid_run+0x160>)
   11e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e04:	f006 f868 	bl	17ed8 <__aeabi_dcmpgt>
   11e08:	4603      	mov	r3, r0
   11e0a:	2b00      	cmp	r3, #0
   11e0c:	d1dc      	bne.n	11dc8 <course_pid_run+0x28>
   11e0e:	e013      	b.n	11e38 <course_pid_run+0x98>
   11e10:	6878      	ldr	r0, [r7, #4]
   11e12:	f005 fd7d 	bl	17910 <__aeabi_f2d>
   11e16:	4602      	mov	r2, r0
   11e18:	460b      	mov	r3, r1
   11e1a:	4610      	mov	r0, r2
   11e1c:	4619      	mov	r1, r3
   11e1e:	a336      	add	r3, pc, #216	; (adr r3, 11ef8 <course_pid_run+0x158>)
   11e20:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e24:	f005 fc16 	bl	17654 <__adddf3>
   11e28:	4602      	mov	r2, r0
   11e2a:	460b      	mov	r3, r1
   11e2c:	4610      	mov	r0, r2
   11e2e:	4619      	mov	r1, r3
   11e30:	f006 f8a4 	bl	17f7c <__aeabi_d2f>
   11e34:	4603      	mov	r3, r0
   11e36:	607b      	str	r3, [r7, #4]
   11e38:	6878      	ldr	r0, [r7, #4]
   11e3a:	f005 fd69 	bl	17910 <__aeabi_f2d>
   11e3e:	4602      	mov	r2, r0
   11e40:	460b      	mov	r3, r1
   11e42:	4610      	mov	r0, r2
   11e44:	4619      	mov	r1, r3
   11e46:	a330      	add	r3, pc, #192	; (adr r3, 11f08 <course_pid_run+0x168>)
   11e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e4c:	f006 f826 	bl	17e9c <__aeabi_dcmplt>
   11e50:	4603      	mov	r3, r0
   11e52:	2b00      	cmp	r3, #0
   11e54:	d1dc      	bne.n	11e10 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11e56:	f240 4308 	movw	r3, #1032	; 0x408
   11e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5e:	681b      	ldr	r3, [r3, #0]
   11e60:	4618      	mov	r0, r3
   11e62:	6879      	ldr	r1, [r7, #4]
   11e64:	f006 f9e8 	bl	18238 <__aeabi_fmul>
   11e68:	4603      	mov	r3, r0
   11e6a:	461a      	mov	r2, r3
   11e6c:	f24c 2370 	movw	r3, #49776	; 0xc270
   11e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e74:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11e76:	f24c 2370 	movw	r3, #49776	; 0xc270
   11e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e7e:	681a      	ldr	r2, [r3, #0]
   11e80:	f240 430c 	movw	r3, #1036	; 0x40c
   11e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e88:	681b      	ldr	r3, [r3, #0]
   11e8a:	4610      	mov	r0, r2
   11e8c:	4619      	mov	r1, r3
   11e8e:	f006 fb8f 	bl	185b0 <__aeabi_fcmpgt>
   11e92:	4603      	mov	r3, r0
   11e94:	2b00      	cmp	r3, #0
   11e96:	d00a      	beq.n	11eae <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11e98:	f240 430c 	movw	r3, #1036	; 0x40c
   11e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea0:	681a      	ldr	r2, [r3, #0]
   11ea2:	f24c 2370 	movw	r3, #49776	; 0xc270
   11ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eaa:	601a      	str	r2, [r3, #0]
   11eac:	e01e      	b.n	11eec <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11eae:	f240 430c 	movw	r3, #1036	; 0x40c
   11eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb6:	681b      	ldr	r3, [r3, #0]
   11eb8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ebc:	f24c 2370 	movw	r3, #49776	; 0xc270
   11ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec4:	681b      	ldr	r3, [r3, #0]
   11ec6:	4610      	mov	r0, r2
   11ec8:	4619      	mov	r1, r3
   11eca:	f006 fb71 	bl	185b0 <__aeabi_fcmpgt>
   11ece:	4603      	mov	r3, r0
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d00b      	beq.n	11eec <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11ed4:	f240 430c 	movw	r3, #1036	; 0x40c
   11ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11edc:	681b      	ldr	r3, [r3, #0]
   11ede:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11ee2:	f24c 2370 	movw	r3, #49776	; 0xc270
   11ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eea:	601a      	str	r2, [r3, #0]
}
   11eec:	3708      	adds	r7, #8
   11eee:	46bd      	mov	sp, r7
   11ef0:	bd80      	pop	{r7, pc}
   11ef2:	bf00      	nop
   11ef4:	f3af 8000 	nop.w
   11ef8:	54442d18 	.word	0x54442d18
   11efc:	401921fb 	.word	0x401921fb
   11f00:	54442d18 	.word	0x54442d18
   11f04:	400921fb 	.word	0x400921fb
   11f08:	54442d18 	.word	0x54442d18
   11f0c:	c00921fb 	.word	0xc00921fb

00011f10 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11f10:	b5b0      	push	{r4, r5, r7, lr}
   11f12:	b082      	sub	sp, #8
   11f14:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11f16:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
   11f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f1e:	681a      	ldr	r2, [r3, #0]
   11f20:	f24c 2330 	movw	r3, #49712	; 0xc230
   11f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f28:	681b      	ldr	r3, [r3, #0]
   11f2a:	4610      	mov	r0, r2
   11f2c:	4619      	mov	r1, r3
   11f2e:	f006 f879 	bl	18024 <__aeabi_fsub>
   11f32:	4603      	mov	r3, r0
   11f34:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11f36:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   11f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f3e:	781b      	ldrb	r3, [r3, #0]
   11f40:	2b00      	cmp	r3, #0
   11f42:	f000 80a8 	beq.w	12096 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11f46:	f24c 2368 	movw	r3, #49768	; 0xc268
   11f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f4e:	881b      	ldrh	r3, [r3, #0]
   11f50:	b29a      	uxth	r2, r3
   11f52:	f24c 231c 	movw	r3, #49692	; 0xc21c
   11f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f5a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11f5c:	f240 4314 	movw	r3, #1044	; 0x414
   11f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f64:	681a      	ldr	r2, [r3, #0]
   11f66:	f24c 233c 	movw	r3, #49724	; 0xc23c
   11f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f6e:	681b      	ldr	r3, [r3, #0]
   11f70:	4610      	mov	r0, r2
   11f72:	4619      	mov	r1, r3
   11f74:	f006 f960 	bl	18238 <__aeabi_fmul>
   11f78:	4603      	mov	r3, r0
   11f7a:	4618      	mov	r0, r3
   11f7c:	6879      	ldr	r1, [r7, #4]
   11f7e:	f006 f853 	bl	18028 <__addsf3>
   11f82:	4603      	mov	r3, r0
   11f84:	461a      	mov	r2, r3
   11f86:	f240 4310 	movw	r3, #1040	; 0x410
   11f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8e:	681b      	ldr	r3, [r3, #0]
   11f90:	4610      	mov	r0, r2
   11f92:	4619      	mov	r1, r3
   11f94:	f006 f950 	bl	18238 <__aeabi_fmul>
   11f98:	4603      	mov	r3, r0
   11f9a:	461a      	mov	r2, r3
   11f9c:	f24c 2318 	movw	r3, #49688	; 0xc218
   11fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fa4:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11fa6:	f24c 2318 	movw	r3, #49688	; 0xc218
   11faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fae:	681a      	ldr	r2, [r3, #0]
   11fb0:	f240 4318 	movw	r3, #1048	; 0x418
   11fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb8:	681b      	ldr	r3, [r3, #0]
   11fba:	4610      	mov	r0, r2
   11fbc:	4619      	mov	r1, r3
   11fbe:	f006 faf7 	bl	185b0 <__aeabi_fcmpgt>
   11fc2:	4603      	mov	r3, r0
   11fc4:	2b00      	cmp	r3, #0
   11fc6:	d009      	beq.n	11fdc <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11fc8:	f240 4318 	movw	r3, #1048	; 0x418
   11fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd0:	681a      	ldr	r2, [r3, #0]
   11fd2:	f24c 2318 	movw	r3, #49688	; 0xc218
   11fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fda:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11fdc:	f24c 2318 	movw	r3, #49688	; 0xc218
   11fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fe4:	681a      	ldr	r2, [r3, #0]
   11fe6:	f240 431c 	movw	r3, #1052	; 0x41c
   11fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fee:	681b      	ldr	r3, [r3, #0]
   11ff0:	4610      	mov	r0, r2
   11ff2:	4619      	mov	r1, r3
   11ff4:	f006 fabe 	bl	18574 <__aeabi_fcmplt>
   11ff8:	4603      	mov	r3, r0
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d009      	beq.n	12012 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11ffe:	f240 431c 	movw	r3, #1052	; 0x41c
   12002:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12006:	681a      	ldr	r2, [r3, #0]
   12008:	f24c 2318 	movw	r3, #49688	; 0xc218
   1200c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12010:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   12012:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1201a:	681b      	ldr	r3, [r3, #0]
   1201c:	4618      	mov	r0, r3
   1201e:	6879      	ldr	r1, [r7, #4]
   12020:	f006 f802 	bl	18028 <__addsf3>
   12024:	4603      	mov	r3, r0
   12026:	461a      	mov	r2, r3
   12028:	f24c 233c 	movw	r3, #49724	; 0xc23c
   1202c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12030:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   12032:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1203a:	681b      	ldr	r3, [r3, #0]
   1203c:	4618      	mov	r0, r3
   1203e:	f04f 0100 	mov.w	r1, #0
   12042:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12046:	f006 fab3 	bl	185b0 <__aeabi_fcmpgt>
   1204a:	4603      	mov	r3, r0
   1204c:	2b00      	cmp	r3, #0
   1204e:	d008      	beq.n	12062 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12050:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12058:	f04f 0200 	mov.w	r2, #0
   1205c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12060:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12062:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1206a:	681b      	ldr	r3, [r3, #0]
   1206c:	4618      	mov	r0, r3
   1206e:	f04f 0100 	mov.w	r1, #0
   12072:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12076:	f006 fa7d 	bl	18574 <__aeabi_fcmplt>
   1207a:	4603      	mov	r3, r0
   1207c:	2b00      	cmp	r3, #0
   1207e:	d100      	bne.n	12082 <climb_pid_run+0x172>
   12080:	e109      	b.n	12296 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12082:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1208a:	f04f 0200 	mov.w	r2, #0
   1208e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12092:	601a      	str	r2, [r3, #0]
   12094:	e0ff      	b.n	12296 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12096:	f24c 2330 	movw	r3, #49712	; 0xc230
   1209a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1209e:	681b      	ldr	r3, [r3, #0]
   120a0:	4618      	mov	r0, r3
   120a2:	f04f 0100 	mov.w	r1, #0
   120a6:	f006 fa83 	bl	185b0 <__aeabi_fcmpgt>
   120aa:	4603      	mov	r3, r0
   120ac:	2b00      	cmp	r3, #0
   120ae:	d010      	beq.n	120d2 <climb_pid_run+0x1c2>
   120b0:	f24c 2330 	movw	r3, #49712	; 0xc230
   120b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b8:	681a      	ldr	r2, [r3, #0]
   120ba:	f240 4304 	movw	r3, #1028	; 0x404
   120be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c2:	681b      	ldr	r3, [r3, #0]
   120c4:	4610      	mov	r0, r2
   120c6:	4619      	mov	r1, r3
   120c8:	f006 f8b6 	bl	18238 <__aeabi_fmul>
   120cc:	4603      	mov	r3, r0
   120ce:	461a      	mov	r2, r3
   120d0:	e001      	b.n	120d6 <climb_pid_run+0x1c6>
   120d2:	f04f 0200 	mov.w	r2, #0
   120d6:	f24c 2328 	movw	r3, #49704	; 0xc228
   120da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120de:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   120e0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   120e4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   120e8:	f24c 2338 	movw	r3, #49720	; 0xc238
   120ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	4610      	mov	r0, r2
   120f4:	4619      	mov	r1, r3
   120f6:	f006 f89f 	bl	18238 <__aeabi_fmul>
   120fa:	4603      	mov	r3, r0
   120fc:	4618      	mov	r0, r3
   120fe:	6879      	ldr	r1, [r7, #4]
   12100:	f005 ff92 	bl	18028 <__addsf3>
   12104:	4603      	mov	r3, r0
   12106:	461a      	mov	r2, r3
   12108:	f24c 238f 	movw	r3, #49807	; 0xc28f
   1210c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12110:	4610      	mov	r0, r2
   12112:	4619      	mov	r1, r3
   12114:	f006 f890 	bl	18238 <__aeabi_fmul>
   12118:	4603      	mov	r3, r0
   1211a:	4618      	mov	r0, r3
   1211c:	f005 fbf8 	bl	17910 <__aeabi_f2d>
   12120:	4602      	mov	r2, r0
   12122:	460b      	mov	r3, r1
   12124:	4610      	mov	r0, r2
   12126:	4619      	mov	r1, r3
   12128:	a35d      	add	r3, pc, #372	; (adr r3, 122a0 <climb_pid_run+0x390>)
   1212a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1212e:	f005 fa91 	bl	17654 <__adddf3>
   12132:	4602      	mov	r2, r0
   12134:	460b      	mov	r3, r1
   12136:	4614      	mov	r4, r2
   12138:	461d      	mov	r5, r3
   1213a:	f24c 2330 	movw	r3, #49712	; 0xc230
   1213e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12142:	681b      	ldr	r3, [r3, #0]
   12144:	4618      	mov	r0, r3
   12146:	f005 fbe3 	bl	17910 <__aeabi_f2d>
   1214a:	4602      	mov	r2, r0
   1214c:	460b      	mov	r3, r1
   1214e:	4610      	mov	r0, r2
   12150:	4619      	mov	r1, r3
   12152:	a355      	add	r3, pc, #340	; (adr r3, 122a8 <climb_pid_run+0x398>)
   12154:	e9d3 2300 	ldrd	r2, r3, [r3]
   12158:	f005 fc2e 	bl	179b8 <__aeabi_dmul>
   1215c:	4602      	mov	r2, r0
   1215e:	460b      	mov	r3, r1
   12160:	4620      	mov	r0, r4
   12162:	4629      	mov	r1, r5
   12164:	f005 fa76 	bl	17654 <__adddf3>
   12168:	4602      	mov	r2, r0
   1216a:	460b      	mov	r3, r1
   1216c:	4610      	mov	r0, r2
   1216e:	4619      	mov	r1, r3
   12170:	f005 ff04 	bl	17f7c <__aeabi_d2f>
   12174:	4603      	mov	r3, r0
   12176:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12178:	f24c 2338 	movw	r3, #49720	; 0xc238
   1217c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12180:	681b      	ldr	r3, [r3, #0]
   12182:	4618      	mov	r0, r3
   12184:	6879      	ldr	r1, [r7, #4]
   12186:	f005 ff4f 	bl	18028 <__addsf3>
   1218a:	4603      	mov	r3, r0
   1218c:	461a      	mov	r2, r3
   1218e:	f24c 2338 	movw	r3, #49720	; 0xc238
   12192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12196:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12198:	f24c 2338 	movw	r3, #49720	; 0xc238
   1219c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121a0:	681b      	ldr	r3, [r3, #0]
   121a2:	4618      	mov	r0, r3
   121a4:	f04f 0100 	mov.w	r1, #0
   121a8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   121ac:	f006 fa00 	bl	185b0 <__aeabi_fcmpgt>
   121b0:	4603      	mov	r3, r0
   121b2:	2b00      	cmp	r3, #0
   121b4:	d008      	beq.n	121c8 <climb_pid_run+0x2b8>
   121b6:	f24c 2338 	movw	r3, #49720	; 0xc238
   121ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121be:	f04f 0200 	mov.w	r2, #0
   121c2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   121c6:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   121c8:	f24c 2338 	movw	r3, #49720	; 0xc238
   121cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121d0:	681b      	ldr	r3, [r3, #0]
   121d2:	4618      	mov	r0, r3
   121d4:	f04f 0100 	mov.w	r1, #0
   121d8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   121dc:	f006 f9ca 	bl	18574 <__aeabi_fcmplt>
   121e0:	4603      	mov	r3, r0
   121e2:	2b00      	cmp	r3, #0
   121e4:	d008      	beq.n	121f8 <climb_pid_run+0x2e8>
   121e6:	f24c 2338 	movw	r3, #49720	; 0xc238
   121ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ee:	f04f 0200 	mov.w	r2, #0
   121f2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   121f6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   121f8:	6838      	ldr	r0, [r7, #0]
   121fa:	f04f 0100 	mov.w	r1, #0
   121fe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12202:	f006 f819 	bl	18238 <__aeabi_fmul>
   12206:	4603      	mov	r3, r0
   12208:	4618      	mov	r0, r3
   1220a:	f04f 0100 	mov.w	r1, #0
   1220e:	f006 f9b1 	bl	18574 <__aeabi_fcmplt>
   12212:	4603      	mov	r3, r0
   12214:	2b00      	cmp	r3, #0
   12216:	d001      	beq.n	1221c <climb_pid_run+0x30c>
   12218:	2200      	movs	r2, #0
   1221a:	e022      	b.n	12262 <climb_pid_run+0x352>
   1221c:	6838      	ldr	r0, [r7, #0]
   1221e:	f04f 0100 	mov.w	r1, #0
   12222:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12226:	f006 f807 	bl	18238 <__aeabi_fmul>
   1222a:	4603      	mov	r3, r0
   1222c:	4618      	mov	r0, r3
   1222e:	f04f 0100 	mov.w	r1, #0
   12232:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12236:	f006 f9bb 	bl	185b0 <__aeabi_fcmpgt>
   1223a:	4603      	mov	r3, r0
   1223c:	2b00      	cmp	r3, #0
   1223e:	d002      	beq.n	12246 <climb_pid_run+0x336>
   12240:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12244:	e00c      	b.n	12260 <climb_pid_run+0x350>
   12246:	6838      	ldr	r0, [r7, #0]
   12248:	f04f 0100 	mov.w	r1, #0
   1224c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12250:	f005 fff2 	bl	18238 <__aeabi_fmul>
   12254:	4603      	mov	r3, r0
   12256:	4618      	mov	r0, r3
   12258:	f006 f9b4 	bl	185c4 <__aeabi_f2iz>
   1225c:	4603      	mov	r3, r0
   1225e:	b29b      	uxth	r3, r3
   12260:	b29a      	uxth	r2, r3
   12262:	f24c 231c 	movw	r3, #49692	; 0xc21c
   12266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1226a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1226c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12274:	681a      	ldr	r2, [r3, #0]
   12276:	f24c 2328 	movw	r3, #49704	; 0xc228
   1227a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1227e:	681b      	ldr	r3, [r3, #0]
   12280:	4610      	mov	r0, r2
   12282:	4619      	mov	r1, r3
   12284:	f005 fed0 	bl	18028 <__addsf3>
   12288:	4603      	mov	r3, r0
   1228a:	461a      	mov	r2, r3
   1228c:	f24c 2318 	movw	r3, #49688	; 0xc218
   12290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12294:	601a      	str	r2, [r3, #0]
  }
}
   12296:	3708      	adds	r7, #8
   12298:	46bd      	mov	sp, r7
   1229a:	bdb0      	pop	{r4, r5, r7, pc}
   1229c:	f3af 8000 	nop.w
   122a0:	3d70a3d7 	.word	0x3d70a3d7
   122a4:	3fd3d70a 	.word	0x3fd3d70a
   122a8:	9999999a 	.word	0x9999999a
   122ac:	3fc99999 	.word	0x3fc99999

000122b0 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   122b0:	b580      	push	{r7, lr}
   122b2:	b082      	sub	sp, #8
   122b4:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   122b6:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   122ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122be:	681a      	ldr	r2, [r3, #0]
   122c0:	f240 4324 	movw	r3, #1060	; 0x424
   122c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	4610      	mov	r0, r2
   122cc:	4619      	mov	r1, r3
   122ce:	f005 fea9 	bl	18024 <__aeabi_fsub>
   122d2:	4603      	mov	r3, r0
   122d4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   122d6:	f240 4320 	movw	r3, #1056	; 0x420
   122da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122de:	681b      	ldr	r3, [r3, #0]
   122e0:	4618      	mov	r0, r3
   122e2:	6879      	ldr	r1, [r7, #4]
   122e4:	f005 ffa8 	bl	18238 <__aeabi_fmul>
   122e8:	4603      	mov	r3, r0
   122ea:	461a      	mov	r2, r3
   122ec:	f24c 2334 	movw	r3, #49716	; 0xc234
   122f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f4:	681b      	ldr	r3, [r3, #0]
   122f6:	4610      	mov	r0, r2
   122f8:	4619      	mov	r1, r3
   122fa:	f005 fe95 	bl	18028 <__addsf3>
   122fe:	4603      	mov	r3, r0
   12300:	461a      	mov	r2, r3
   12302:	f24c 2330 	movw	r3, #49712	; 0xc230
   12306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1230a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   1230c:	f24c 2330 	movw	r3, #49712	; 0xc230
   12310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12314:	681b      	ldr	r3, [r3, #0]
   12316:	4618      	mov	r0, r3
   12318:	f04f 0100 	mov.w	r1, #0
   1231c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12320:	f006 f928 	bl	18574 <__aeabi_fcmplt>
   12324:	4603      	mov	r3, r0
   12326:	2b00      	cmp	r3, #0
   12328:	d008      	beq.n	1233c <altitude_pid_run+0x8c>
   1232a:	f24c 2330 	movw	r3, #49712	; 0xc230
   1232e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12332:	f04f 0200 	mov.w	r2, #0
   12336:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1233a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1233c:	f24c 2330 	movw	r3, #49712	; 0xc230
   12340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	4618      	mov	r0, r3
   12348:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1234c:	f006 f930 	bl	185b0 <__aeabi_fcmpgt>
   12350:	4603      	mov	r3, r0
   12352:	2b00      	cmp	r3, #0
   12354:	d006      	beq.n	12364 <altitude_pid_run+0xb4>
   12356:	f24c 2330 	movw	r3, #49712	; 0xc230
   1235a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1235e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12362:	601a      	str	r2, [r3, #0]
}
   12364:	3708      	adds	r7, #8
   12366:	46bd      	mov	sp, r7
   12368:	bd80      	pop	{r7, pc}
   1236a:	bf00      	nop
   1236c:	f3af 8000 	nop.w

00012370 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12370:	b5f0      	push	{r4, r5, r6, r7, lr}
   12372:	b08b      	sub	sp, #44	; 0x2c
   12374:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12376:	f24c 2341 	movw	r3, #49729	; 0xc241
   1237a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1237e:	781b      	ldrb	r3, [r3, #0]
   12380:	2b00      	cmp	r3, #0
   12382:	f040 8169 	bne.w	12658 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12386:	f24c 2340 	movw	r3, #49728	; 0xc240
   1238a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1238e:	781b      	ldrb	r3, [r3, #0]
   12390:	2b00      	cmp	r3, #0
   12392:	d13c      	bne.n	1240e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12394:	f24c 2340 	movw	r3, #49728	; 0xc240
   12398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1239c:	2200      	movs	r2, #0
   1239e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   123a0:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   123a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a8:	881b      	ldrh	r3, [r3, #0]
   123aa:	2b00      	cmp	r3, #0
   123ac:	d000      	beq.n	123b0 <auto_nav+0x40>
   123ae:	e03d      	b.n	1242c <auto_nav+0xbc>
	else NextStage(); 
   123b0:	f24c 2340 	movw	r3, #49728	; 0xc240
   123b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b8:	781b      	ldrb	r3, [r3, #0]
   123ba:	3301      	adds	r3, #1
   123bc:	b2da      	uxtb	r2, r3
   123be:	f24c 2340 	movw	r3, #49728	; 0xc240
   123c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c6:	701a      	strb	r2, [r3, #0]
   123c8:	f24c 439c 	movw	r3, #50332	; 0xc49c
   123cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d0:	681a      	ldr	r2, [r3, #0]
   123d2:	f24c 2344 	movw	r3, #49732	; 0xc244
   123d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123da:	601a      	str	r2, [r3, #0]
   123dc:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   123e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e4:	681a      	ldr	r2, [r3, #0]
   123e6:	f24c 2348 	movw	r3, #49736	; 0xc248
   123ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123ee:	601a      	str	r2, [r3, #0]
   123f0:	f24c 2354 	movw	r3, #49748	; 0xc254
   123f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f8:	2200      	movs	r2, #0
   123fa:	801a      	strh	r2, [r3, #0]
   123fc:	f24c 2358 	movw	r3, #49752	; 0xc258
   12400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12404:	f04f 0200 	mov.w	r2, #0
   12408:	601a      	str	r2, [r3, #0]
   1240a:	f002 b883 	b.w	14514 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1240e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12416:	781b      	ldrb	r3, [r3, #0]
   12418:	2b01      	cmp	r3, #1
   1241a:	d100      	bne.n	1241e <auto_nav+0xae>
    {   Goto(while_1)}
   1241c:	e7ba      	b.n	12394 <auto_nav+0x24>
    else if (nav_stage == 2)
   1241e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12426:	781b      	ldrb	r3, [r3, #0]
   12428:	2b02      	cmp	r3, #2
   1242a:	d162      	bne.n	124f2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1242c:	f24c 2340 	movw	r3, #49728	; 0xc240
   12430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12434:	2202      	movs	r2, #2
   12436:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12438:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   1243c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12440:	881b      	ldrh	r3, [r3, #0]
   12442:	2b08      	cmp	r3, #8
   12444:	d92e      	bls.n	124a4 <auto_nav+0x134>
   12446:	f24c 2340 	movw	r3, #49728	; 0xc240
   1244a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1244e:	781b      	ldrb	r3, [r3, #0]
   12450:	3301      	adds	r3, #1
   12452:	b2da      	uxtb	r2, r3
   12454:	f24c 2340 	movw	r3, #49728	; 0xc240
   12458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245c:	701a      	strb	r2, [r3, #0]
   1245e:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12466:	681a      	ldr	r2, [r3, #0]
   12468:	f24c 2344 	movw	r3, #49732	; 0xc244
   1246c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12470:	601a      	str	r2, [r3, #0]
   12472:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12476:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1247a:	681a      	ldr	r2, [r3, #0]
   1247c:	f24c 2348 	movw	r3, #49736	; 0xc248
   12480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12484:	601a      	str	r2, [r3, #0]
   12486:	f24c 2354 	movw	r3, #49748	; 0xc254
   1248a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1248e:	2200      	movs	r2, #0
   12490:	801a      	strh	r2, [r3, #0]
   12492:	f24c 2358 	movw	r3, #49752	; 0xc258
   12496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1249a:	f04f 0200 	mov.w	r2, #0
   1249e:	601a      	str	r2, [r3, #0]
   124a0:	f002 b838 	b.w	14514 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   124a4:	f24c 232c 	movw	r3, #49708	; 0xc22c
   124a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ac:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   124b0:	f2c4 0296 	movt	r2, #16534	; 0x4096
   124b4:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   124b6:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   124ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124be:	2200      	movs	r2, #0
   124c0:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   124c2:	f24c 236c 	movw	r3, #49772	; 0xc26c
   124c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ca:	f649 129a 	movw	r2, #39322	; 0x999a
   124ce:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   124d2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   124d4:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   124d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124dc:	2201      	movs	r2, #1
   124de:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   124e0:	f24c 2368 	movw	r3, #49768	; 0xc268
   124e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   124ec:	801a      	strh	r2, [r3, #0]
        }
        return;
   124ee:	f002 b811 	b.w	14514 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   124f2:	f24c 2340 	movw	r3, #49728	; 0xc240
   124f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fa:	781b      	ldrb	r3, [r3, #0]
   124fc:	2b03      	cmp	r3, #3
   124fe:	d168      	bne.n	125d2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   12500:	f24c 2340 	movw	r3, #49728	; 0xc240
   12504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12508:	2203      	movs	r2, #3
   1250a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   1250c:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   12510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12514:	681b      	ldr	r3, [r3, #0]
   12516:	4618      	mov	r0, r3
   12518:	f04f 0100 	mov.w	r1, #0
   1251c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12520:	f006 f846 	bl	185b0 <__aeabi_fcmpgt>
   12524:	4603      	mov	r3, r0
   12526:	2b00      	cmp	r3, #0
   12528:	d02e      	beq.n	12588 <auto_nav+0x218>
   1252a:	f24c 2340 	movw	r3, #49728	; 0xc240
   1252e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12532:	781b      	ldrb	r3, [r3, #0]
   12534:	3301      	adds	r3, #1
   12536:	b2da      	uxtb	r2, r3
   12538:	f24c 2340 	movw	r3, #49728	; 0xc240
   1253c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12540:	701a      	strb	r2, [r3, #0]
   12542:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254a:	681a      	ldr	r2, [r3, #0]
   1254c:	f24c 2344 	movw	r3, #49732	; 0xc244
   12550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12554:	601a      	str	r2, [r3, #0]
   12556:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1255a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255e:	681a      	ldr	r2, [r3, #0]
   12560:	f24c 2348 	movw	r3, #49736	; 0xc248
   12564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12568:	601a      	str	r2, [r3, #0]
   1256a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1256e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12572:	2200      	movs	r2, #0
   12574:	801a      	strh	r2, [r3, #0]
   12576:	f24c 2358 	movw	r3, #49752	; 0xc258
   1257a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1257e:	f04f 0200 	mov.w	r2, #0
   12582:	601a      	str	r2, [r3, #0]
   12584:	f001 bfc6 	b.w	14514 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12588:	f24c 232c 	movw	r3, #49708	; 0xc22c
   1258c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12590:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12594:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12598:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1259a:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   1259e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a2:	2200      	movs	r2, #0
   125a4:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   125a6:	f24c 236c 	movw	r3, #49772	; 0xc26c
   125aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ae:	f04f 0200 	mov.w	r2, #0
   125b2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   125b4:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   125b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125bc:	2202      	movs	r2, #2
   125be:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   125c0:	f24c 2330 	movw	r3, #49712	; 0xc230
   125c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125cc:	601a      	str	r2, [r3, #0]
        }
        return;
   125ce:	f001 bfa1 	b.w	14514 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   125d2:	f24c 2340 	movw	r3, #49728	; 0xc240
   125d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125da:	781b      	ldrb	r3, [r3, #0]
   125dc:	2b04      	cmp	r3, #4
   125de:	f041 8799 	bne.w	14514 <auto_nav+0x21a4>
        NextBlock()
   125e2:	f24c 2341 	movw	r3, #49729	; 0xc241
   125e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ea:	781b      	ldrb	r3, [r3, #0]
   125ec:	3301      	adds	r3, #1
   125ee:	b2da      	uxtb	r2, r3
   125f0:	f24c 2341 	movw	r3, #49729	; 0xc241
   125f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f8:	701a      	strb	r2, [r3, #0]
   125fa:	f24c 2340 	movw	r3, #49728	; 0xc240
   125fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12602:	2200      	movs	r2, #0
   12604:	701a      	strb	r2, [r3, #0]
   12606:	f24c 2356 	movw	r3, #49750	; 0xc256
   1260a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260e:	2200      	movs	r2, #0
   12610:	801a      	strh	r2, [r3, #0]
   12612:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261a:	681a      	ldr	r2, [r3, #0]
   1261c:	f24c 2344 	movw	r3, #49732	; 0xc244
   12620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12624:	601a      	str	r2, [r3, #0]
   12626:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	681a      	ldr	r2, [r3, #0]
   12630:	f24c 2348 	movw	r3, #49736	; 0xc248
   12634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12638:	601a      	str	r2, [r3, #0]
   1263a:	f24c 2354 	movw	r3, #49748	; 0xc254
   1263e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12642:	2200      	movs	r2, #0
   12644:	801a      	strh	r2, [r3, #0]
   12646:	f24c 2358 	movw	r3, #49752	; 0xc258
   1264a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264e:	f04f 0200 	mov.w	r2, #0
   12652:	601a      	str	r2, [r3, #0]
   12654:	f001 bf5e 	b.w	14514 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12658:	f24c 2341 	movw	r3, #49729	; 0xc241
   1265c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12660:	781b      	ldrb	r3, [r3, #0]
   12662:	2b01      	cmp	r3, #1
   12664:	f040 81bc 	bne.w	129e0 <auto_nav+0x670>
{
    nav_block = 1;
   12668:	f24c 2341 	movw	r3, #49729	; 0xc241
   1266c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12670:	2201      	movs	r2, #1
   12672:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12674:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   12678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267c:	781b      	ldrb	r3, [r3, #0]
   1267e:	2b00      	cmp	r3, #0
   12680:	d007      	beq.n	12692 <auto_nav+0x322>
   12682:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   12686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268a:	2200      	movs	r2, #0
   1268c:	701a      	strb	r2, [r3, #0]
   1268e:	2301      	movs	r3, #1
   12690:	e000      	b.n	12694 <auto_nav+0x324>
   12692:	2300      	movs	r3, #0
   12694:	2b00      	cmp	r3, #0
   12696:	d034      	beq.n	12702 <auto_nav+0x392>
	{ GotoBlock(2) }
   12698:	f24c 2341 	movw	r3, #49729	; 0xc241
   1269c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a0:	2202      	movs	r2, #2
   126a2:	701a      	strb	r2, [r3, #0]
   126a4:	f24c 2340 	movw	r3, #49728	; 0xc240
   126a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ac:	2200      	movs	r2, #0
   126ae:	701a      	strb	r2, [r3, #0]
   126b0:	f24c 2356 	movw	r3, #49750	; 0xc256
   126b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b8:	2200      	movs	r2, #0
   126ba:	801a      	strh	r2, [r3, #0]
   126bc:	f24c 439c 	movw	r3, #50332	; 0xc49c
   126c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c4:	681a      	ldr	r2, [r3, #0]
   126c6:	f24c 2344 	movw	r3, #49732	; 0xc244
   126ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ce:	601a      	str	r2, [r3, #0]
   126d0:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   126d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d8:	681a      	ldr	r2, [r3, #0]
   126da:	f24c 2348 	movw	r3, #49736	; 0xc248
   126de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e2:	601a      	str	r2, [r3, #0]
   126e4:	f24c 2354 	movw	r3, #49748	; 0xc254
   126e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ec:	2200      	movs	r2, #0
   126ee:	801a      	strh	r2, [r3, #0]
   126f0:	f24c 2358 	movw	r3, #49752	; 0xc258
   126f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f8:	f04f 0200 	mov.w	r2, #0
   126fc:	601a      	str	r2, [r3, #0]
   126fe:	f001 bf09 	b.w	14514 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12702:	f24c 2340 	movw	r3, #49728	; 0xc240
   12706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1270a:	781b      	ldrb	r3, [r3, #0]
   1270c:	2b00      	cmp	r3, #0
   1270e:	d12e      	bne.n	1276e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12710:	f24c 2340 	movw	r3, #49728	; 0xc240
   12714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12718:	781b      	ldrb	r3, [r3, #0]
   1271a:	3301      	adds	r3, #1
   1271c:	b2da      	uxtb	r2, r3
   1271e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12726:	701a      	strb	r2, [r3, #0]
   12728:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1272c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12730:	681a      	ldr	r2, [r3, #0]
   12732:	f24c 2344 	movw	r3, #49732	; 0xc244
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	601a      	str	r2, [r3, #0]
   1273c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12744:	681a      	ldr	r2, [r3, #0]
   12746:	f24c 2348 	movw	r3, #49736	; 0xc248
   1274a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274e:	601a      	str	r2, [r3, #0]
   12750:	f24c 2354 	movw	r3, #49748	; 0xc254
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	2200      	movs	r2, #0
   1275a:	801a      	strh	r2, [r3, #0]
   1275c:	f24c 2358 	movw	r3, #49752	; 0xc258
   12760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12764:	f04f 0200 	mov.w	r2, #0
   12768:	601a      	str	r2, [r3, #0]
   1276a:	f001 bed3 	b.w	14514 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1276e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12776:	781b      	ldrb	r3, [r3, #0]
   12778:	2b01      	cmp	r3, #1
   1277a:	d169      	bne.n	12850 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1277c:	f24c 2340 	movw	r3, #49728	; 0xc240
   12780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12784:	2201      	movs	r2, #1
   12786:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12788:	2001      	movs	r0, #1
   1278a:	f001 fed1 	bl	14530 <approaching>
   1278e:	4603      	mov	r3, r0
   12790:	2b00      	cmp	r3, #0
   12792:	d034      	beq.n	127fe <auto_nav+0x48e>
   12794:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279c:	2201      	movs	r2, #1
   1279e:	701a      	strb	r2, [r3, #0]
   127a0:	f24c 2340 	movw	r3, #49728	; 0xc240
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	781b      	ldrb	r3, [r3, #0]
   127aa:	3301      	adds	r3, #1
   127ac:	b2da      	uxtb	r2, r3
   127ae:	f24c 2340 	movw	r3, #49728	; 0xc240
   127b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b6:	701a      	strb	r2, [r3, #0]
   127b8:	f24c 439c 	movw	r3, #50332	; 0xc49c
   127bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c0:	681a      	ldr	r2, [r3, #0]
   127c2:	f24c 2344 	movw	r3, #49732	; 0xc244
   127c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ca:	601a      	str	r2, [r3, #0]
   127cc:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	681a      	ldr	r2, [r3, #0]
   127d6:	f24c 2348 	movw	r3, #49736	; 0xc248
   127da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127de:	601a      	str	r2, [r3, #0]
   127e0:	f24c 2354 	movw	r3, #49748	; 0xc254
   127e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e8:	2200      	movs	r2, #0
   127ea:	801a      	strh	r2, [r3, #0]
   127ec:	f24c 2358 	movw	r3, #49752	; 0xc258
   127f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f4:	f04f 0200 	mov.w	r2, #0
   127f8:	601a      	str	r2, [r3, #0]
   127fa:	f001 be8b 	b.w	14514 <auto_nav+0x21a4>
            fly_to(1);
   127fe:	2001      	movs	r0, #1
   12800:	f001 ffca 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   12804:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280c:	2200      	movs	r2, #0
   1280e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12810:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12818:	f04f 0200 	mov.w	r2, #0
   1281c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1281e:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12826:	2203      	movs	r2, #3
   12828:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   1282a:	f240 4328 	movw	r3, #1064	; 0x428
   1282e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12832:	695a      	ldr	r2, [r3, #20]
   12834:	f240 4324 	movw	r3, #1060	; 0x424
   12838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1283c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1283e:	f24c 2334 	movw	r3, #49716	; 0xc234
   12842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12846:	f04f 0200 	mov.w	r2, #0
   1284a:	601a      	str	r2, [r3, #0]
          }
          return;
   1284c:	f001 be62 	b.w	14514 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12850:	f24c 2340 	movw	r3, #49728	; 0xc240
   12854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12858:	781b      	ldrb	r3, [r3, #0]
   1285a:	2b02      	cmp	r3, #2
   1285c:	d169      	bne.n	12932 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1285e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12866:	2202      	movs	r2, #2
   12868:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1286a:	2004      	movs	r0, #4
   1286c:	f001 fe60 	bl	14530 <approaching>
   12870:	4603      	mov	r3, r0
   12872:	2b00      	cmp	r3, #0
   12874:	d034      	beq.n	128e0 <auto_nav+0x570>
   12876:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1287a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287e:	2204      	movs	r2, #4
   12880:	701a      	strb	r2, [r3, #0]
   12882:	f24c 2340 	movw	r3, #49728	; 0xc240
   12886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288a:	781b      	ldrb	r3, [r3, #0]
   1288c:	3301      	adds	r3, #1
   1288e:	b2da      	uxtb	r2, r3
   12890:	f24c 2340 	movw	r3, #49728	; 0xc240
   12894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1289e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a2:	681a      	ldr	r2, [r3, #0]
   128a4:	f24c 2344 	movw	r3, #49732	; 0xc244
   128a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ac:	601a      	str	r2, [r3, #0]
   128ae:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   128b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b6:	681a      	ldr	r2, [r3, #0]
   128b8:	f24c 2348 	movw	r3, #49736	; 0xc248
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	601a      	str	r2, [r3, #0]
   128c2:	f24c 2354 	movw	r3, #49748	; 0xc254
   128c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ca:	2200      	movs	r2, #0
   128cc:	801a      	strh	r2, [r3, #0]
   128ce:	f24c 2358 	movw	r3, #49752	; 0xc258
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	f04f 0200 	mov.w	r2, #0
   128da:	601a      	str	r2, [r3, #0]
   128dc:	f001 be1a 	b.w	14514 <auto_nav+0x21a4>
            fly_to(4);
   128e0:	2004      	movs	r0, #4
   128e2:	f001 ff59 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   128e6:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   128ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ee:	2200      	movs	r2, #0
   128f0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128f2:	f24c 236c 	movw	r3, #49772	; 0xc26c
   128f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fa:	f04f 0200 	mov.w	r2, #0
   128fe:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12900:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	2203      	movs	r2, #3
   1290a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1290c:	f240 4328 	movw	r3, #1064	; 0x428
   12910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12916:	f240 4324 	movw	r3, #1060	; 0x424
   1291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1291e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12920:	f24c 2334 	movw	r3, #49716	; 0xc234
   12924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12928:	f04f 0200 	mov.w	r2, #0
   1292c:	601a      	str	r2, [r3, #0]
          }
          return;
   1292e:	f001 bdf1 	b.w	14514 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12932:	f24c 2340 	movw	r3, #49728	; 0xc240
   12936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	2b03      	cmp	r3, #3
   1293e:	d106      	bne.n	1294e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12940:	f24c 2340 	movw	r3, #49728	; 0xc240
   12944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12948:	2203      	movs	r2, #3
   1294a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   1294c:	e6e0      	b.n	12710 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   1294e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	2b04      	cmp	r3, #4
   1295a:	f041 85db 	bne.w	14514 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   1295e:	f24c 2340 	movw	r3, #49728	; 0xc240
   12962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12966:	2204      	movs	r2, #4
   12968:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1296a:	f24c 2341 	movw	r3, #49729	; 0xc241
   1296e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12972:	781b      	ldrb	r3, [r3, #0]
   12974:	3301      	adds	r3, #1
   12976:	b2da      	uxtb	r2, r3
   12978:	f24c 2341 	movw	r3, #49729	; 0xc241
   1297c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12980:	701a      	strb	r2, [r3, #0]
   12982:	f24c 2340 	movw	r3, #49728	; 0xc240
   12986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298a:	2200      	movs	r2, #0
   1298c:	701a      	strb	r2, [r3, #0]
   1298e:	f24c 2356 	movw	r3, #49750	; 0xc256
   12992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12996:	2200      	movs	r2, #0
   12998:	801a      	strh	r2, [r3, #0]
   1299a:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1299e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a2:	681a      	ldr	r2, [r3, #0]
   129a4:	f24c 2344 	movw	r3, #49732	; 0xc244
   129a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ac:	601a      	str	r2, [r3, #0]
   129ae:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   129b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b6:	681a      	ldr	r2, [r3, #0]
   129b8:	f24c 2348 	movw	r3, #49736	; 0xc248
   129bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c0:	601a      	str	r2, [r3, #0]
   129c2:	f24c 2354 	movw	r3, #49748	; 0xc254
   129c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ca:	2200      	movs	r2, #0
   129cc:	801a      	strh	r2, [r3, #0]
   129ce:	f24c 2358 	movw	r3, #49752	; 0xc258
   129d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d6:	f04f 0200 	mov.w	r2, #0
   129da:	601a      	str	r2, [r3, #0]
   129dc:	f001 bd9a 	b.w	14514 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   129e0:	f24c 2341 	movw	r3, #49729	; 0xc241
   129e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e8:	781b      	ldrb	r3, [r3, #0]
   129ea:	2b02      	cmp	r3, #2
   129ec:	f040 8392 	bne.w	13114 <auto_nav+0xda4>
{
	nav_block = 2;
   129f0:	f24c 2341 	movw	r3, #49729	; 0xc241
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	2202      	movs	r2, #2
   129fa:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   129fc:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   12a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a04:	781b      	ldrb	r3, [r3, #0]
   12a06:	2b00      	cmp	r3, #0
   12a08:	d007      	beq.n	12a1a <auto_nav+0x6aa>
   12a0a:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   12a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a12:	2200      	movs	r2, #0
   12a14:	701a      	strb	r2, [r3, #0]
   12a16:	2301      	movs	r3, #1
   12a18:	e000      	b.n	12a1c <auto_nav+0x6ac>
   12a1a:	2300      	movs	r3, #0
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d034      	beq.n	12a8a <auto_nav+0x71a>
   12a20:	f24c 2341 	movw	r3, #49729	; 0xc241
   12a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a28:	2203      	movs	r2, #3
   12a2a:	701a      	strb	r2, [r3, #0]
   12a2c:	f24c 2340 	movw	r3, #49728	; 0xc240
   12a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a34:	2200      	movs	r2, #0
   12a36:	701a      	strb	r2, [r3, #0]
   12a38:	f24c 2356 	movw	r3, #49750	; 0xc256
   12a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a40:	2200      	movs	r2, #0
   12a42:	801a      	strh	r2, [r3, #0]
   12a44:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	681a      	ldr	r2, [r3, #0]
   12a4e:	f24c 2344 	movw	r3, #49732	; 0xc244
   12a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a56:	601a      	str	r2, [r3, #0]
   12a58:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a60:	681a      	ldr	r2, [r3, #0]
   12a62:	f24c 2348 	movw	r3, #49736	; 0xc248
   12a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6a:	601a      	str	r2, [r3, #0]
   12a6c:	f24c 2354 	movw	r3, #49748	; 0xc254
   12a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a74:	2200      	movs	r2, #0
   12a76:	801a      	strh	r2, [r3, #0]
   12a78:	f24c 2358 	movw	r3, #49752	; 0xc258
   12a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a80:	f04f 0200 	mov.w	r2, #0
   12a84:	601a      	str	r2, [r3, #0]
   12a86:	f001 bd45 	b.w	14514 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12a8a:	f24c 2340 	movw	r3, #49728	; 0xc240
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	781b      	ldrb	r3, [r3, #0]
   12a94:	2b00      	cmp	r3, #0
   12a96:	d134      	bne.n	12b02 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12a98:	f24c 2340 	movw	r3, #49728	; 0xc240
   12a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa0:	2200      	movs	r2, #0
   12aa2:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12aa4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aac:	781b      	ldrb	r3, [r3, #0]
   12aae:	3301      	adds	r3, #1
   12ab0:	b2da      	uxtb	r2, r3
   12ab2:	f24c 2340 	movw	r3, #49728	; 0xc240
   12ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aba:	701a      	strb	r2, [r3, #0]
   12abc:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac4:	681a      	ldr	r2, [r3, #0]
   12ac6:	f24c 2344 	movw	r3, #49732	; 0xc244
   12aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ace:	601a      	str	r2, [r3, #0]
   12ad0:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad8:	681a      	ldr	r2, [r3, #0]
   12ada:	f24c 2348 	movw	r3, #49736	; 0xc248
   12ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae2:	601a      	str	r2, [r3, #0]
   12ae4:	f24c 2354 	movw	r3, #49748	; 0xc254
   12ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aec:	2200      	movs	r2, #0
   12aee:	801a      	strh	r2, [r3, #0]
   12af0:	f24c 2358 	movw	r3, #49752	; 0xc258
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	f04f 0200 	mov.w	r2, #0
   12afc:	601a      	str	r2, [r3, #0]
   12afe:	f001 bd09 	b.w	14514 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12b02:	f24c 2340 	movw	r3, #49728	; 0xc240
   12b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b0a:	781b      	ldrb	r3, [r3, #0]
   12b0c:	2b01      	cmp	r3, #1
   12b0e:	d169      	bne.n	12be4 <auto_nav+0x874>
    {
         nav_stage =1;
   12b10:	f24c 2340 	movw	r3, #49728	; 0xc240
   12b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b18:	2201      	movs	r2, #1
   12b1a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12b1c:	2006      	movs	r0, #6
   12b1e:	f001 fd07 	bl	14530 <approaching>
   12b22:	4603      	mov	r3, r0
   12b24:	2b00      	cmp	r3, #0
   12b26:	d034      	beq.n	12b92 <auto_nav+0x822>
   12b28:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b30:	2206      	movs	r2, #6
   12b32:	701a      	strb	r2, [r3, #0]
   12b34:	f24c 2340 	movw	r3, #49728	; 0xc240
   12b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3c:	781b      	ldrb	r3, [r3, #0]
   12b3e:	3301      	adds	r3, #1
   12b40:	b2da      	uxtb	r2, r3
   12b42:	f24c 2340 	movw	r3, #49728	; 0xc240
   12b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b4a:	701a      	strb	r2, [r3, #0]
   12b4c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b54:	681a      	ldr	r2, [r3, #0]
   12b56:	f24c 2344 	movw	r3, #49732	; 0xc244
   12b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5e:	601a      	str	r2, [r3, #0]
   12b60:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b68:	681a      	ldr	r2, [r3, #0]
   12b6a:	f24c 2348 	movw	r3, #49736	; 0xc248
   12b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b72:	601a      	str	r2, [r3, #0]
   12b74:	f24c 2354 	movw	r3, #49748	; 0xc254
   12b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7c:	2200      	movs	r2, #0
   12b7e:	801a      	strh	r2, [r3, #0]
   12b80:	f24c 2358 	movw	r3, #49752	; 0xc258
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	f04f 0200 	mov.w	r2, #0
   12b8c:	601a      	str	r2, [r3, #0]
   12b8e:	f001 bcc1 	b.w	14514 <auto_nav+0x21a4>
            fly_to(6);
   12b92:	2006      	movs	r0, #6
   12b94:	f001 fe00 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   12b98:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba0:	2200      	movs	r2, #0
   12ba2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ba4:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bac:	f04f 0200 	mov.w	r2, #0
   12bb0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bb2:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bba:	2203      	movs	r2, #3
   12bbc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12bbe:	f240 4328 	movw	r3, #1064	; 0x428
   12bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12bc8:	f240 4324 	movw	r3, #1060	; 0x424
   12bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bd2:	f24c 2334 	movw	r3, #49716	; 0xc234
   12bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bda:	f04f 0200 	mov.w	r2, #0
   12bde:	601a      	str	r2, [r3, #0]
          }
          return;
   12be0:	f001 bc98 	b.w	14514 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12be4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bec:	781b      	ldrb	r3, [r3, #0]
   12bee:	2b02      	cmp	r3, #2
   12bf0:	d169      	bne.n	12cc6 <auto_nav+0x956>
     {
         nav_stage =2; 
   12bf2:	f24c 2340 	movw	r3, #49728	; 0xc240
   12bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bfa:	2202      	movs	r2, #2
   12bfc:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12bfe:	2001      	movs	r0, #1
   12c00:	f001 fc96 	bl	14530 <approaching>
   12c04:	4603      	mov	r3, r0
   12c06:	2b00      	cmp	r3, #0
   12c08:	d034      	beq.n	12c74 <auto_nav+0x904>
   12c0a:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c12:	2201      	movs	r2, #1
   12c14:	701a      	strb	r2, [r3, #0]
   12c16:	f24c 2340 	movw	r3, #49728	; 0xc240
   12c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1e:	781b      	ldrb	r3, [r3, #0]
   12c20:	3301      	adds	r3, #1
   12c22:	b2da      	uxtb	r2, r3
   12c24:	f24c 2340 	movw	r3, #49728	; 0xc240
   12c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2c:	701a      	strb	r2, [r3, #0]
   12c2e:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c36:	681a      	ldr	r2, [r3, #0]
   12c38:	f24c 2344 	movw	r3, #49732	; 0xc244
   12c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c40:	601a      	str	r2, [r3, #0]
   12c42:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4a:	681a      	ldr	r2, [r3, #0]
   12c4c:	f24c 2348 	movw	r3, #49736	; 0xc248
   12c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c54:	601a      	str	r2, [r3, #0]
   12c56:	f24c 2354 	movw	r3, #49748	; 0xc254
   12c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5e:	2200      	movs	r2, #0
   12c60:	801a      	strh	r2, [r3, #0]
   12c62:	f24c 2358 	movw	r3, #49752	; 0xc258
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	f04f 0200 	mov.w	r2, #0
   12c6e:	601a      	str	r2, [r3, #0]
   12c70:	f001 bc50 	b.w	14514 <auto_nav+0x21a4>
            fly_to(1);
   12c74:	2001      	movs	r0, #1
   12c76:	f001 fd8f 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   12c7a:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c82:	2200      	movs	r2, #0
   12c84:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c86:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8e:	f04f 0200 	mov.w	r2, #0
   12c92:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c94:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9c:	2203      	movs	r2, #3
   12c9e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12ca0:	f240 4328 	movw	r3, #1064	; 0x428
   12ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca8:	695a      	ldr	r2, [r3, #20]
   12caa:	f240 4324 	movw	r3, #1060	; 0x424
   12cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cb4:	f24c 2334 	movw	r3, #49716	; 0xc234
   12cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cbc:	f04f 0200 	mov.w	r2, #0
   12cc0:	601a      	str	r2, [r3, #0]
          }
          return;
   12cc2:	f001 bc27 	b.w	14514 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12cc6:	f24c 2340 	movw	r3, #49728	; 0xc240
   12cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cce:	781b      	ldrb	r3, [r3, #0]
   12cd0:	2b03      	cmp	r3, #3
   12cd2:	d16f      	bne.n	12db4 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12cd4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cdc:	2203      	movs	r2, #3
   12cde:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ce0:	2002      	movs	r0, #2
   12ce2:	f001 fc25 	bl	14530 <approaching>
   12ce6:	4603      	mov	r3, r0
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d034      	beq.n	12d56 <auto_nav+0x9e6>
   12cec:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf4:	2202      	movs	r2, #2
   12cf6:	701a      	strb	r2, [r3, #0]
   12cf8:	f24c 2340 	movw	r3, #49728	; 0xc240
   12cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d00:	781b      	ldrb	r3, [r3, #0]
   12d02:	3301      	adds	r3, #1
   12d04:	b2da      	uxtb	r2, r3
   12d06:	f24c 2340 	movw	r3, #49728	; 0xc240
   12d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0e:	701a      	strb	r2, [r3, #0]
   12d10:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d18:	681a      	ldr	r2, [r3, #0]
   12d1a:	f24c 2344 	movw	r3, #49732	; 0xc244
   12d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d22:	601a      	str	r2, [r3, #0]
   12d24:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2c:	681a      	ldr	r2, [r3, #0]
   12d2e:	f24c 2348 	movw	r3, #49736	; 0xc248
   12d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d36:	601a      	str	r2, [r3, #0]
   12d38:	f24c 2354 	movw	r3, #49748	; 0xc254
   12d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d40:	2200      	movs	r2, #0
   12d42:	801a      	strh	r2, [r3, #0]
   12d44:	f24c 2358 	movw	r3, #49752	; 0xc258
   12d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4c:	f04f 0200 	mov.w	r2, #0
   12d50:	601a      	str	r2, [r3, #0]
   12d52:	f001 bbdf 	b.w	14514 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12d56:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5e:	781b      	ldrb	r3, [r3, #0]
   12d60:	4618      	mov	r0, r3
   12d62:	2102      	movs	r1, #2
   12d64:	f001 fd3a 	bl	147dc <route_to>
            auto_pitch = FALSE;
   12d68:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d70:	2200      	movs	r2, #0
   12d72:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d74:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d7c:	f04f 0200 	mov.w	r2, #0
   12d80:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d82:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8a:	2203      	movs	r2, #3
   12d8c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12d8e:	f240 4328 	movw	r3, #1064	; 0x428
   12d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d96:	6a1a      	ldr	r2, [r3, #32]
   12d98:	f240 4324 	movw	r3, #1060	; 0x424
   12d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12da2:	f24c 2334 	movw	r3, #49716	; 0xc234
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	f04f 0200 	mov.w	r2, #0
   12dae:	601a      	str	r2, [r3, #0]
          }
          return;
   12db0:	f001 bbb0 	b.w	14514 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12db4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dbc:	781b      	ldrb	r3, [r3, #0]
   12dbe:	2b04      	cmp	r3, #4
   12dc0:	d169      	bne.n	12e96 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12dc2:	f24c 2340 	movw	r3, #49728	; 0xc240
   12dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dca:	2204      	movs	r2, #4
   12dcc:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12dce:	2003      	movs	r0, #3
   12dd0:	f001 fbae 	bl	14530 <approaching>
   12dd4:	4603      	mov	r3, r0
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d034      	beq.n	12e44 <auto_nav+0xad4>
   12dda:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de2:	2203      	movs	r2, #3
   12de4:	701a      	strb	r2, [r3, #0]
   12de6:	f24c 2340 	movw	r3, #49728	; 0xc240
   12dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dee:	781b      	ldrb	r3, [r3, #0]
   12df0:	3301      	adds	r3, #1
   12df2:	b2da      	uxtb	r2, r3
   12df4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfc:	701a      	strb	r2, [r3, #0]
   12dfe:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e06:	681a      	ldr	r2, [r3, #0]
   12e08:	f24c 2344 	movw	r3, #49732	; 0xc244
   12e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e10:	601a      	str	r2, [r3, #0]
   12e12:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1a:	681a      	ldr	r2, [r3, #0]
   12e1c:	f24c 2348 	movw	r3, #49736	; 0xc248
   12e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e24:	601a      	str	r2, [r3, #0]
   12e26:	f24c 2354 	movw	r3, #49748	; 0xc254
   12e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e2e:	2200      	movs	r2, #0
   12e30:	801a      	strh	r2, [r3, #0]
   12e32:	f24c 2358 	movw	r3, #49752	; 0xc258
   12e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3a:	f04f 0200 	mov.w	r2, #0
   12e3e:	601a      	str	r2, [r3, #0]
   12e40:	f001 bb68 	b.w	14514 <auto_nav+0x21a4>
            fly_to(3);
   12e44:	2003      	movs	r0, #3
   12e46:	f001 fca7 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   12e4a:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e52:	2200      	movs	r2, #0
   12e54:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e56:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5e:	f04f 0200 	mov.w	r2, #0
   12e62:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e64:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6c:	2203      	movs	r2, #3
   12e6e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12e70:	f240 4328 	movw	r3, #1064	; 0x428
   12e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12e7a:	f240 4324 	movw	r3, #1060	; 0x424
   12e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e82:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e84:	f24c 2334 	movw	r3, #49716	; 0xc234
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	f04f 0200 	mov.w	r2, #0
   12e90:	601a      	str	r2, [r3, #0]
          }
          return;
   12e92:	f001 bb3f 	b.w	14514 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12e96:	f24c 2340 	movw	r3, #49728	; 0xc240
   12e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9e:	781b      	ldrb	r3, [r3, #0]
   12ea0:	2b05      	cmp	r3, #5
   12ea2:	d169      	bne.n	12f78 <auto_nav+0xc08>
       {
          nav_stage =5;
   12ea4:	f24c 2340 	movw	r3, #49728	; 0xc240
   12ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eac:	2205      	movs	r2, #5
   12eae:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12eb0:	2004      	movs	r0, #4
   12eb2:	f001 fb3d 	bl	14530 <approaching>
   12eb6:	4603      	mov	r3, r0
   12eb8:	2b00      	cmp	r3, #0
   12eba:	d034      	beq.n	12f26 <auto_nav+0xbb6>
   12ebc:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec4:	2204      	movs	r2, #4
   12ec6:	701a      	strb	r2, [r3, #0]
   12ec8:	f24c 2340 	movw	r3, #49728	; 0xc240
   12ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed0:	781b      	ldrb	r3, [r3, #0]
   12ed2:	3301      	adds	r3, #1
   12ed4:	b2da      	uxtb	r2, r3
   12ed6:	f24c 2340 	movw	r3, #49728	; 0xc240
   12eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ede:	701a      	strb	r2, [r3, #0]
   12ee0:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee8:	681a      	ldr	r2, [r3, #0]
   12eea:	f24c 2344 	movw	r3, #49732	; 0xc244
   12eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef2:	601a      	str	r2, [r3, #0]
   12ef4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efc:	681a      	ldr	r2, [r3, #0]
   12efe:	f24c 2348 	movw	r3, #49736	; 0xc248
   12f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f06:	601a      	str	r2, [r3, #0]
   12f08:	f24c 2354 	movw	r3, #49748	; 0xc254
   12f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f10:	2200      	movs	r2, #0
   12f12:	801a      	strh	r2, [r3, #0]
   12f14:	f24c 2358 	movw	r3, #49752	; 0xc258
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	f04f 0200 	mov.w	r2, #0
   12f20:	601a      	str	r2, [r3, #0]
   12f22:	f001 baf7 	b.w	14514 <auto_nav+0x21a4>
            fly_to(4);
   12f26:	2004      	movs	r0, #4
   12f28:	f001 fc36 	bl	14798 <fly_to>
            auto_pitch = FALSE;
   12f2c:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   12f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f34:	2200      	movs	r2, #0
   12f36:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f38:	f24c 236c 	movw	r3, #49772	; 0xc26c
   12f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f40:	f04f 0200 	mov.w	r2, #0
   12f44:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f46:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   12f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4e:	2203      	movs	r2, #3
   12f50:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12f52:	f240 4328 	movw	r3, #1064	; 0x428
   12f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12f5c:	f240 4324 	movw	r3, #1060	; 0x424
   12f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f64:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f66:	f24c 2334 	movw	r3, #49716	; 0xc234
   12f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6e:	f04f 0200 	mov.w	r2, #0
   12f72:	601a      	str	r2, [r3, #0]
          }
          return;
   12f74:	f001 bace 	b.w	14514 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12f78:	f24c 2340 	movw	r3, #49728	; 0xc240
   12f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b06      	cmp	r3, #6
   12f84:	d16f      	bne.n	13066 <auto_nav+0xcf6>
       {
          nav_stage =6;
   12f86:	f24c 2340 	movw	r3, #49728	; 0xc240
   12f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f8e:	2206      	movs	r2, #6
   12f90:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12f92:	2005      	movs	r0, #5
   12f94:	f001 facc 	bl	14530 <approaching>
   12f98:	4603      	mov	r3, r0
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	d034      	beq.n	13008 <auto_nav+0xc98>
   12f9e:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa6:	2205      	movs	r2, #5
   12fa8:	701a      	strb	r2, [r3, #0]
   12faa:	f24c 2340 	movw	r3, #49728	; 0xc240
   12fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb2:	781b      	ldrb	r3, [r3, #0]
   12fb4:	3301      	adds	r3, #1
   12fb6:	b2da      	uxtb	r2, r3
   12fb8:	f24c 2340 	movw	r3, #49728	; 0xc240
   12fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc0:	701a      	strb	r2, [r3, #0]
   12fc2:	f24c 439c 	movw	r3, #50332	; 0xc49c
   12fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fca:	681a      	ldr	r2, [r3, #0]
   12fcc:	f24c 2344 	movw	r3, #49732	; 0xc244
   12fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd4:	601a      	str	r2, [r3, #0]
   12fd6:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   12fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fde:	681a      	ldr	r2, [r3, #0]
   12fe0:	f24c 2348 	movw	r3, #49736	; 0xc248
   12fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe8:	601a      	str	r2, [r3, #0]
   12fea:	f24c 2354 	movw	r3, #49748	; 0xc254
   12fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff2:	2200      	movs	r2, #0
   12ff4:	801a      	strh	r2, [r3, #0]
   12ff6:	f24c 2358 	movw	r3, #49752	; 0xc258
   12ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffe:	f04f 0200 	mov.w	r2, #0
   13002:	601a      	str	r2, [r3, #0]
   13004:	f001 ba86 	b.w	14514 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13008:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1300c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13010:	781b      	ldrb	r3, [r3, #0]
   13012:	4618      	mov	r0, r3
   13014:	2105      	movs	r1, #5
   13016:	f001 fbe1 	bl	147dc <route_to>
            auto_pitch = FALSE;
   1301a:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   1301e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13022:	2200      	movs	r2, #0
   13024:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13026:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1302a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302e:	f04f 0200 	mov.w	r2, #0
   13032:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13034:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   13038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303c:	2203      	movs	r2, #3
   1303e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13040:	f240 4328 	movw	r3, #1064	; 0x428
   13044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1304a:	f240 4324 	movw	r3, #1060	; 0x424
   1304e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13052:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13054:	f24c 2334 	movw	r3, #49716	; 0xc234
   13058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305c:	f04f 0200 	mov.w	r2, #0
   13060:	601a      	str	r2, [r3, #0]
          }
          return;
   13062:	f001 ba57 	b.w	14514 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13066:	f24c 2340 	movw	r3, #49728	; 0xc240
   1306a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306e:	781b      	ldrb	r3, [r3, #0]
   13070:	2b07      	cmp	r3, #7
   13072:	d106      	bne.n	13082 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13074:	f24c 2340 	movw	r3, #49728	; 0xc240
   13078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1307c:	2207      	movs	r2, #7
   1307e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13080:	e50a      	b.n	12a98 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13082:	f24c 2340 	movw	r3, #49728	; 0xc240
   13086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308a:	781b      	ldrb	r3, [r3, #0]
   1308c:	2b08      	cmp	r3, #8
   1308e:	f041 8241 	bne.w	14514 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13092:	f24c 2340 	movw	r3, #49728	; 0xc240
   13096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309a:	2208      	movs	r2, #8
   1309c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1309e:	f24c 2341 	movw	r3, #49729	; 0xc241
   130a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a6:	781b      	ldrb	r3, [r3, #0]
   130a8:	3301      	adds	r3, #1
   130aa:	b2da      	uxtb	r2, r3
   130ac:	f24c 2341 	movw	r3, #49729	; 0xc241
   130b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b4:	701a      	strb	r2, [r3, #0]
   130b6:	f24c 2340 	movw	r3, #49728	; 0xc240
   130ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130be:	2200      	movs	r2, #0
   130c0:	701a      	strb	r2, [r3, #0]
   130c2:	f24c 2356 	movw	r3, #49750	; 0xc256
   130c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ca:	2200      	movs	r2, #0
   130cc:	801a      	strh	r2, [r3, #0]
   130ce:	f24c 439c 	movw	r3, #50332	; 0xc49c
   130d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d6:	681a      	ldr	r2, [r3, #0]
   130d8:	f24c 2344 	movw	r3, #49732	; 0xc244
   130dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e0:	601a      	str	r2, [r3, #0]
   130e2:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   130e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ea:	681a      	ldr	r2, [r3, #0]
   130ec:	f24c 2348 	movw	r3, #49736	; 0xc248
   130f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f4:	601a      	str	r2, [r3, #0]
   130f6:	f24c 2354 	movw	r3, #49748	; 0xc254
   130fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fe:	2200      	movs	r2, #0
   13100:	801a      	strh	r2, [r3, #0]
   13102:	f24c 2358 	movw	r3, #49752	; 0xc258
   13106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310a:	f04f 0200 	mov.w	r2, #0
   1310e:	601a      	str	r2, [r3, #0]
   13110:	f001 ba00 	b.w	14514 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   13114:	f24c 2341 	movw	r3, #49729	; 0xc241
   13118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311c:	781b      	ldrb	r3, [r3, #0]
   1311e:	2b03      	cmp	r3, #3
   13120:	f040 8388 	bne.w	13834 <auto_nav+0x14c4>
{
    nav_block = 3;
   13124:	f24c 2341 	movw	r3, #49729	; 0xc241
   13128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312c:	2203      	movs	r2, #3
   1312e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13130:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13138:	781b      	ldrb	r3, [r3, #0]
   1313a:	2b00      	cmp	r3, #0
   1313c:	d007      	beq.n	1314e <auto_nav+0xdde>
   1313e:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13146:	2200      	movs	r2, #0
   13148:	701a      	strb	r2, [r3, #0]
   1314a:	2301      	movs	r3, #1
   1314c:	e000      	b.n	13150 <auto_nav+0xde0>
   1314e:	2300      	movs	r3, #0
   13150:	2b00      	cmp	r3, #0
   13152:	d034      	beq.n	131be <auto_nav+0xe4e>
   13154:	f24c 2341 	movw	r3, #49729	; 0xc241
   13158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315c:	2204      	movs	r2, #4
   1315e:	701a      	strb	r2, [r3, #0]
   13160:	f24c 2340 	movw	r3, #49728	; 0xc240
   13164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13168:	2200      	movs	r2, #0
   1316a:	701a      	strb	r2, [r3, #0]
   1316c:	f24c 2356 	movw	r3, #49750	; 0xc256
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	2200      	movs	r2, #0
   13176:	801a      	strh	r2, [r3, #0]
   13178:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1317c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13180:	681a      	ldr	r2, [r3, #0]
   13182:	f24c 2344 	movw	r3, #49732	; 0xc244
   13186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318a:	601a      	str	r2, [r3, #0]
   1318c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13194:	681a      	ldr	r2, [r3, #0]
   13196:	f24c 2348 	movw	r3, #49736	; 0xc248
   1319a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319e:	601a      	str	r2, [r3, #0]
   131a0:	f24c 2354 	movw	r3, #49748	; 0xc254
   131a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a8:	2200      	movs	r2, #0
   131aa:	801a      	strh	r2, [r3, #0]
   131ac:	f24c 2358 	movw	r3, #49752	; 0xc258
   131b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b4:	f04f 0200 	mov.w	r2, #0
   131b8:	601a      	str	r2, [r3, #0]
   131ba:	f001 b9ab 	b.w	14514 <auto_nav+0x21a4>
    if(nav_stage == 0)
   131be:	f24c 2340 	movw	r3, #49728	; 0xc240
   131c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c6:	781b      	ldrb	r3, [r3, #0]
   131c8:	2b00      	cmp	r3, #0
   131ca:	f040 82ea 	bne.w	137a2 <auto_nav+0x1432>
    {
        nav_stage = 0;
   131ce:	f24c 2340 	movw	r3, #49728	; 0xc240
   131d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d6:	2200      	movs	r2, #0
   131d8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   131da:	f64b 63cc 	movw	r3, #48844	; 0xbecc
   131de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e2:	781b      	ldrb	r3, [r3, #0]
   131e4:	2b02      	cmp	r3, #2
   131e6:	f040 81a5 	bne.w	13534 <auto_nav+0x11c4>
   131ea:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   131ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f2:	88db      	ldrh	r3, [r3, #6]
   131f4:	84fb      	strh	r3, [r7, #38]	; 0x26
   131f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131fa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   131fe:	dc04      	bgt.n	1320a <auto_nav+0xe9a>
   13200:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13204:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13208:	da7e      	bge.n	13308 <auto_nav+0xf98>
   1320a:	f24c 238c 	movw	r3, #49804	; 0xc28c
   1320e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13212:	681b      	ldr	r3, [r3, #0]
   13214:	4618      	mov	r0, r3
   13216:	f004 fb7b 	bl	17910 <__aeabi_f2d>
   1321a:	4604      	mov	r4, r0
   1321c:	460d      	mov	r5, r1
   1321e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13222:	4618      	mov	r0, r3
   13224:	f004 ffb4 	bl	18190 <__aeabi_i2f>
   13228:	4603      	mov	r3, r0
   1322a:	4618      	mov	r0, r3
   1322c:	f04f 0100 	mov.w	r1, #0
   13230:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13234:	f005 f8b4 	bl	183a0 <__aeabi_fdiv>
   13238:	4603      	mov	r3, r0
   1323a:	4618      	mov	r0, r3
   1323c:	f004 fb68 	bl	17910 <__aeabi_f2d>
   13240:	4602      	mov	r2, r0
   13242:	460b      	mov	r3, r1
   13244:	4610      	mov	r0, r2
   13246:	4619      	mov	r1, r3
   13248:	f04f 0200 	mov.w	r2, #0
   1324c:	f04f 0300 	mov.w	r3, #0
   13250:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13254:	f004 fbb0 	bl	179b8 <__aeabi_dmul>
   13258:	4602      	mov	r2, r0
   1325a:	460b      	mov	r3, r1
   1325c:	4610      	mov	r0, r2
   1325e:	4619      	mov	r1, r3
   13260:	f04f 0200 	mov.w	r2, #0
   13264:	f04f 0300 	mov.w	r3, #0
   13268:	f004 f9f4 	bl	17654 <__adddf3>
   1326c:	4602      	mov	r2, r0
   1326e:	460b      	mov	r3, r1
   13270:	4620      	mov	r0, r4
   13272:	4629      	mov	r1, r5
   13274:	f004 f9ee 	bl	17654 <__adddf3>
   13278:	4602      	mov	r2, r0
   1327a:	460b      	mov	r3, r1
   1327c:	4610      	mov	r0, r2
   1327e:	4619      	mov	r1, r3
   13280:	f004 fe7c 	bl	17f7c <__aeabi_d2f>
   13284:	4602      	mov	r2, r0
   13286:	f24c 238c 	movw	r3, #49804	; 0xc28c
   1328a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1328e:	601a      	str	r2, [r3, #0]
   13290:	f24c 238c 	movw	r3, #49804	; 0xc28c
   13294:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13298:	681b      	ldr	r3, [r3, #0]
   1329a:	4618      	mov	r0, r3
   1329c:	f04f 0100 	mov.w	r1, #0
   132a0:	f2c4 317a 	movt	r1, #17274	; 0x437a
   132a4:	f005 f970 	bl	18588 <__aeabi_fcmple>
   132a8:	4603      	mov	r3, r0
   132aa:	2b00      	cmp	r3, #0
   132ac:	d005      	beq.n	132ba <auto_nav+0xf4a>
   132ae:	f24c 238c 	movw	r3, #49804	; 0xc28c
   132b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b6:	681a      	ldr	r2, [r3, #0]
   132b8:	e003      	b.n	132c2 <auto_nav+0xf52>
   132ba:	f04f 0200 	mov.w	r2, #0
   132be:	f2c4 327a 	movt	r2, #17274	; 0x437a
   132c2:	f24c 238c 	movw	r3, #49804	; 0xc28c
   132c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ca:	601a      	str	r2, [r3, #0]
   132cc:	f24c 238c 	movw	r3, #49804	; 0xc28c
   132d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d4:	681b      	ldr	r3, [r3, #0]
   132d6:	4618      	mov	r0, r3
   132d8:	f04f 0100 	mov.w	r1, #0
   132dc:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   132e0:	f005 f95c 	bl	1859c <__aeabi_fcmpge>
   132e4:	4603      	mov	r3, r0
   132e6:	2b00      	cmp	r3, #0
   132e8:	d005      	beq.n	132f6 <auto_nav+0xf86>
   132ea:	f24c 238c 	movw	r3, #49804	; 0xc28c
   132ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f2:	681a      	ldr	r2, [r3, #0]
   132f4:	e003      	b.n	132fe <auto_nav+0xf8e>
   132f6:	f04f 0200 	mov.w	r2, #0
   132fa:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   132fe:	f24c 238c 	movw	r3, #49804	; 0xc28c
   13302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13306:	601a      	str	r2, [r3, #0]
   13308:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   1330c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13310:	889b      	ldrh	r3, [r3, #4]
   13312:	84bb      	strh	r3, [r7, #36]	; 0x24
   13314:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13318:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1331c:	dc04      	bgt.n	13328 <auto_nav+0xfb8>
   1331e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13322:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13326:	da7e      	bge.n	13426 <auto_nav+0x10b6>
   13328:	f24c 2390 	movw	r3, #49808	; 0xc290
   1332c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13330:	681b      	ldr	r3, [r3, #0]
   13332:	4618      	mov	r0, r3
   13334:	f004 faec 	bl	17910 <__aeabi_f2d>
   13338:	4604      	mov	r4, r0
   1333a:	460d      	mov	r5, r1
   1333c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13340:	4618      	mov	r0, r3
   13342:	f004 ff25 	bl	18190 <__aeabi_i2f>
   13346:	4603      	mov	r3, r0
   13348:	4618      	mov	r0, r3
   1334a:	f04f 0100 	mov.w	r1, #0
   1334e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13352:	f005 f825 	bl	183a0 <__aeabi_fdiv>
   13356:	4603      	mov	r3, r0
   13358:	4618      	mov	r0, r3
   1335a:	f004 fad9 	bl	17910 <__aeabi_f2d>
   1335e:	4602      	mov	r2, r0
   13360:	460b      	mov	r3, r1
   13362:	4610      	mov	r0, r2
   13364:	4619      	mov	r1, r3
   13366:	f04f 0200 	mov.w	r2, #0
   1336a:	f04f 0300 	mov.w	r3, #0
   1336e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13372:	f004 fb21 	bl	179b8 <__aeabi_dmul>
   13376:	4602      	mov	r2, r0
   13378:	460b      	mov	r3, r1
   1337a:	4610      	mov	r0, r2
   1337c:	4619      	mov	r1, r3
   1337e:	f04f 0200 	mov.w	r2, #0
   13382:	f04f 0300 	mov.w	r3, #0
   13386:	f004 f965 	bl	17654 <__adddf3>
   1338a:	4602      	mov	r2, r0
   1338c:	460b      	mov	r3, r1
   1338e:	4620      	mov	r0, r4
   13390:	4629      	mov	r1, r5
   13392:	f004 f95f 	bl	17654 <__adddf3>
   13396:	4602      	mov	r2, r0
   13398:	460b      	mov	r3, r1
   1339a:	4610      	mov	r0, r2
   1339c:	4619      	mov	r1, r3
   1339e:	f004 fded 	bl	17f7c <__aeabi_d2f>
   133a2:	4602      	mov	r2, r0
   133a4:	f24c 2390 	movw	r3, #49808	; 0xc290
   133a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ac:	601a      	str	r2, [r3, #0]
   133ae:	f24c 2390 	movw	r3, #49808	; 0xc290
   133b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b6:	681b      	ldr	r3, [r3, #0]
   133b8:	4618      	mov	r0, r3
   133ba:	f04f 0100 	mov.w	r1, #0
   133be:	f2c4 317a 	movt	r1, #17274	; 0x437a
   133c2:	f005 f8e1 	bl	18588 <__aeabi_fcmple>
   133c6:	4603      	mov	r3, r0
   133c8:	2b00      	cmp	r3, #0
   133ca:	d005      	beq.n	133d8 <auto_nav+0x1068>
   133cc:	f24c 2390 	movw	r3, #49808	; 0xc290
   133d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d4:	681a      	ldr	r2, [r3, #0]
   133d6:	e003      	b.n	133e0 <auto_nav+0x1070>
   133d8:	f04f 0200 	mov.w	r2, #0
   133dc:	f2c4 327a 	movt	r2, #17274	; 0x437a
   133e0:	f24c 2390 	movw	r3, #49808	; 0xc290
   133e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e8:	601a      	str	r2, [r3, #0]
   133ea:	f24c 2390 	movw	r3, #49808	; 0xc290
   133ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f2:	681b      	ldr	r3, [r3, #0]
   133f4:	4618      	mov	r0, r3
   133f6:	f04f 0100 	mov.w	r1, #0
   133fa:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   133fe:	f005 f8cd 	bl	1859c <__aeabi_fcmpge>
   13402:	4603      	mov	r3, r0
   13404:	2b00      	cmp	r3, #0
   13406:	d005      	beq.n	13414 <auto_nav+0x10a4>
   13408:	f24c 2390 	movw	r3, #49808	; 0xc290
   1340c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13410:	681a      	ldr	r2, [r3, #0]
   13412:	e003      	b.n	1341c <auto_nav+0x10ac>
   13414:	f04f 0200 	mov.w	r2, #0
   13418:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1341c:	f24c 2390 	movw	r3, #49808	; 0xc290
   13420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13424:	601a      	str	r2, [r3, #0]
   13426:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   1342a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1342e:	2203      	movs	r2, #3
   13430:	701a      	strb	r2, [r3, #0]
   13432:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   13436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343a:	885b      	ldrh	r3, [r3, #2]
   1343c:	847b      	strh	r3, [r7, #34]	; 0x22
   1343e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13442:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13446:	dc04      	bgt.n	13452 <auto_nav+0x10e2>
   13448:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1344c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13450:	da70      	bge.n	13534 <auto_nav+0x11c4>
   13452:	f240 4324 	movw	r3, #1060	; 0x424
   13456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1345a:	681b      	ldr	r3, [r3, #0]
   1345c:	4618      	mov	r0, r3
   1345e:	f004 fa57 	bl	17910 <__aeabi_f2d>
   13462:	4604      	mov	r4, r0
   13464:	460d      	mov	r5, r1
   13466:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1346a:	4618      	mov	r0, r3
   1346c:	f004 fe90 	bl	18190 <__aeabi_i2f>
   13470:	4603      	mov	r3, r0
   13472:	4618      	mov	r0, r3
   13474:	f04f 0100 	mov.w	r1, #0
   13478:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1347c:	f004 ff90 	bl	183a0 <__aeabi_fdiv>
   13480:	4603      	mov	r3, r0
   13482:	4618      	mov	r0, r3
   13484:	f004 fa44 	bl	17910 <__aeabi_f2d>
   13488:	4602      	mov	r2, r0
   1348a:	460b      	mov	r3, r1
   1348c:	f04f 0000 	mov.w	r0, #0
   13490:	f04f 0100 	mov.w	r1, #0
   13494:	f004 f8dc 	bl	17650 <__aeabi_dsub>
   13498:	4602      	mov	r2, r0
   1349a:	460b      	mov	r3, r1
   1349c:	4620      	mov	r0, r4
   1349e:	4629      	mov	r1, r5
   134a0:	f004 f8d8 	bl	17654 <__adddf3>
   134a4:	4602      	mov	r2, r0
   134a6:	460b      	mov	r3, r1
   134a8:	4610      	mov	r0, r2
   134aa:	4619      	mov	r1, r3
   134ac:	f004 fd66 	bl	17f7c <__aeabi_d2f>
   134b0:	4602      	mov	r2, r0
   134b2:	f240 4324 	movw	r3, #1060	; 0x424
   134b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ba:	601a      	str	r2, [r3, #0]
   134bc:	f240 4324 	movw	r3, #1060	; 0x424
   134c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134c4:	681b      	ldr	r3, [r3, #0]
   134c6:	4618      	mov	r0, r3
   134c8:	f04f 0100 	mov.w	r1, #0
   134cc:	f2c4 312f 	movt	r1, #17199	; 0x432f
   134d0:	f005 f864 	bl	1859c <__aeabi_fcmpge>
   134d4:	4603      	mov	r3, r0
   134d6:	2b00      	cmp	r3, #0
   134d8:	d005      	beq.n	134e6 <auto_nav+0x1176>
   134da:	f240 4324 	movw	r3, #1060	; 0x424
   134de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134e2:	681a      	ldr	r2, [r3, #0]
   134e4:	e003      	b.n	134ee <auto_nav+0x117e>
   134e6:	f04f 0200 	mov.w	r2, #0
   134ea:	f2c4 322f 	movt	r2, #17199	; 0x432f
   134ee:	f240 4324 	movw	r3, #1060	; 0x424
   134f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f6:	601a      	str	r2, [r3, #0]
   134f8:	f240 4324 	movw	r3, #1060	; 0x424
   134fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13500:	681b      	ldr	r3, [r3, #0]
   13502:	4618      	mov	r0, r3
   13504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13508:	f2c4 3189 	movt	r1, #17289	; 0x4389
   1350c:	f005 f83c 	bl	18588 <__aeabi_fcmple>
   13510:	4603      	mov	r3, r0
   13512:	2b00      	cmp	r3, #0
   13514:	d005      	beq.n	13522 <auto_nav+0x11b2>
   13516:	f240 4324 	movw	r3, #1060	; 0x424
   1351a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1351e:	681a      	ldr	r2, [r3, #0]
   13520:	e003      	b.n	1352a <auto_nav+0x11ba>
   13522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13526:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1352a:	f240 4324 	movw	r3, #1060	; 0x424
   1352e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13532:	601a      	str	r2, [r3, #0]
   13534:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1353c:	681a      	ldr	r2, [r3, #0]
   1353e:	f24c 2390 	movw	r3, #49808	; 0xc290
   13542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13546:	681b      	ldr	r3, [r3, #0]
   13548:	4610      	mov	r0, r2
   1354a:	4619      	mov	r1, r3
   1354c:	f004 fd6a 	bl	18024 <__aeabi_fsub>
   13550:	4603      	mov	r3, r0
   13552:	4618      	mov	r0, r3
   13554:	f004 f9dc 	bl	17910 <__aeabi_f2d>
   13558:	4604      	mov	r4, r0
   1355a:	460d      	mov	r5, r1
   1355c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13564:	681a      	ldr	r2, [r3, #0]
   13566:	f24c 238c 	movw	r3, #49804	; 0xc28c
   1356a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1356e:	681b      	ldr	r3, [r3, #0]
   13570:	4610      	mov	r0, r2
   13572:	4619      	mov	r1, r3
   13574:	f004 fd56 	bl	18024 <__aeabi_fsub>
   13578:	4603      	mov	r3, r0
   1357a:	4618      	mov	r0, r3
   1357c:	f004 f9c8 	bl	17910 <__aeabi_f2d>
   13580:	4602      	mov	r2, r0
   13582:	460b      	mov	r3, r1
   13584:	4620      	mov	r0, r4
   13586:	4629      	mov	r1, r5
   13588:	f002 fa12 	bl	159b0 <pp_atan2>
   1358c:	4602      	mov	r2, r0
   1358e:	460b      	mov	r3, r1
   13590:	4610      	mov	r0, r2
   13592:	4619      	mov	r1, r3
   13594:	f004 fcf2 	bl	17f7c <__aeabi_d2f>
   13598:	4603      	mov	r3, r0
   1359a:	61fb      	str	r3, [r7, #28]
   1359c:	69f8      	ldr	r0, [r7, #28]
   1359e:	f004 f9b7 	bl	17910 <__aeabi_f2d>
   135a2:	4604      	mov	r4, r0
   135a4:	460d      	mov	r5, r1
   135a6:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   135aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ae:	681b      	ldr	r3, [r3, #0]
   135b0:	4618      	mov	r0, r3
   135b2:	f04f 0100 	mov.w	r1, #0
   135b6:	f2cc 2148 	movt	r1, #49736	; 0xc248
   135ba:	f004 fe3d 	bl	18238 <__aeabi_fmul>
   135be:	4603      	mov	r3, r0
   135c0:	4618      	mov	r0, r3
   135c2:	f004 f9a5 	bl	17910 <__aeabi_f2d>
   135c6:	4602      	mov	r2, r0
   135c8:	460b      	mov	r3, r1
   135ca:	f04f 0000 	mov.w	r0, #0
   135ce:	f04f 0100 	mov.w	r1, #0
   135d2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   135d6:	f004 fb19 	bl	17c0c <__aeabi_ddiv>
   135da:	4602      	mov	r2, r0
   135dc:	460b      	mov	r3, r1
   135de:	4620      	mov	r0, r4
   135e0:	4629      	mov	r1, r5
   135e2:	f004 f837 	bl	17654 <__adddf3>
   135e6:	4602      	mov	r2, r0
   135e8:	460b      	mov	r3, r1
   135ea:	4610      	mov	r0, r2
   135ec:	4619      	mov	r1, r3
   135ee:	f004 fcc5 	bl	17f7c <__aeabi_d2f>
   135f2:	4603      	mov	r3, r0
   135f4:	61bb      	str	r3, [r7, #24]
   135f6:	f24c 238c 	movw	r3, #49804	; 0xc28c
   135fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135fe:	681b      	ldr	r3, [r3, #0]
   13600:	4618      	mov	r0, r3
   13602:	f004 f985 	bl	17910 <__aeabi_f2d>
   13606:	4604      	mov	r4, r0
   13608:	460d      	mov	r5, r1
   1360a:	69b8      	ldr	r0, [r7, #24]
   1360c:	f004 f980 	bl	17910 <__aeabi_f2d>
   13610:	4602      	mov	r2, r0
   13612:	460b      	mov	r3, r1
   13614:	4610      	mov	r0, r2
   13616:	4619      	mov	r1, r3
   13618:	a3b1      	add	r3, pc, #708	; (adr r3, 138e0 <auto_nav+0x1570>)
   1361a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1361e:	f004 f819 	bl	17654 <__adddf3>
   13622:	4602      	mov	r2, r0
   13624:	460b      	mov	r3, r1
   13626:	4610      	mov	r0, r2
   13628:	4619      	mov	r1, r3
   1362a:	f002 fa81 	bl	15b30 <pp_sin>
   1362e:	4602      	mov	r2, r0
   13630:	460b      	mov	r3, r1
   13632:	4610      	mov	r0, r2
   13634:	4619      	mov	r1, r3
   13636:	f04f 0200 	mov.w	r2, #0
   1363a:	f04f 0300 	mov.w	r3, #0
   1363e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13642:	f004 f9b9 	bl	179b8 <__aeabi_dmul>
   13646:	4602      	mov	r2, r0
   13648:	460b      	mov	r3, r1
   1364a:	4620      	mov	r0, r4
   1364c:	4629      	mov	r1, r5
   1364e:	f004 f801 	bl	17654 <__adddf3>
   13652:	4602      	mov	r2, r0
   13654:	460b      	mov	r3, r1
   13656:	4610      	mov	r0, r2
   13658:	4619      	mov	r1, r3
   1365a:	f004 fc8f 	bl	17f7c <__aeabi_d2f>
   1365e:	4606      	mov	r6, r0
   13660:	f24c 2390 	movw	r3, #49808	; 0xc290
   13664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13668:	681b      	ldr	r3, [r3, #0]
   1366a:	4618      	mov	r0, r3
   1366c:	f004 f950 	bl	17910 <__aeabi_f2d>
   13670:	4604      	mov	r4, r0
   13672:	460d      	mov	r5, r1
   13674:	69b8      	ldr	r0, [r7, #24]
   13676:	f004 f94b 	bl	17910 <__aeabi_f2d>
   1367a:	4602      	mov	r2, r0
   1367c:	460b      	mov	r3, r1
   1367e:	4610      	mov	r0, r2
   13680:	4619      	mov	r1, r3
   13682:	f002 fa55 	bl	15b30 <pp_sin>
   13686:	4602      	mov	r2, r0
   13688:	460b      	mov	r3, r1
   1368a:	4610      	mov	r0, r2
   1368c:	4619      	mov	r1, r3
   1368e:	f04f 0200 	mov.w	r2, #0
   13692:	f04f 0300 	mov.w	r3, #0
   13696:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1369a:	f004 f98d 	bl	179b8 <__aeabi_dmul>
   1369e:	4602      	mov	r2, r0
   136a0:	460b      	mov	r3, r1
   136a2:	4620      	mov	r0, r4
   136a4:	4629      	mov	r1, r5
   136a6:	f003 ffd5 	bl	17654 <__adddf3>
   136aa:	4602      	mov	r2, r0
   136ac:	460b      	mov	r3, r1
   136ae:	4610      	mov	r0, r2
   136b0:	4619      	mov	r1, r3
   136b2:	f004 fc63 	bl	17f7c <__aeabi_d2f>
   136b6:	4603      	mov	r3, r0
   136b8:	4630      	mov	r0, r6
   136ba:	4619      	mov	r1, r3
   136bc:	f001 f81c 	bl	146f8 <fly_to_xy>
   136c0:	69b8      	ldr	r0, [r7, #24]
   136c2:	f004 f925 	bl	17910 <__aeabi_f2d>
   136c6:	4602      	mov	r2, r0
   136c8:	460b      	mov	r3, r1
   136ca:	a185      	add	r1, pc, #532	; (adr r1, 138e0 <auto_nav+0x1570>)
   136cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   136d0:	f003 ffbe 	bl	17650 <__aeabi_dsub>
   136d4:	4602      	mov	r2, r0
   136d6:	460b      	mov	r3, r1
   136d8:	4610      	mov	r0, r2
   136da:	4619      	mov	r1, r3
   136dc:	a382      	add	r3, pc, #520	; (adr r3, 138e8 <auto_nav+0x1578>)
   136de:	e9d3 2300 	ldrd	r2, r3, [r3]
   136e2:	f004 fa93 	bl	17c0c <__aeabi_ddiv>
   136e6:	4602      	mov	r2, r0
   136e8:	460b      	mov	r3, r1
   136ea:	4610      	mov	r0, r2
   136ec:	4619      	mov	r1, r3
   136ee:	f04f 0200 	mov.w	r2, #0
   136f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   136f6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   136fa:	f004 f95d 	bl	179b8 <__aeabi_dmul>
   136fe:	4602      	mov	r2, r0
   13700:	460b      	mov	r3, r1
   13702:	4610      	mov	r0, r2
   13704:	4619      	mov	r1, r3
   13706:	f004 fc39 	bl	17f7c <__aeabi_d2f>
   1370a:	4602      	mov	r2, r0
   1370c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13714:	601a      	str	r2, [r3, #0]
   13716:	e012      	b.n	1373e <auto_nav+0x13ce>
   13718:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1371c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13720:	681b      	ldr	r3, [r3, #0]
   13722:	4618      	mov	r0, r3
   13724:	f04f 0100 	mov.w	r1, #0
   13728:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1372c:	f004 fc7c 	bl	18028 <__addsf3>
   13730:	4603      	mov	r3, r0
   13732:	461a      	mov	r2, r3
   13734:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1373c:	601a      	str	r2, [r3, #0]
   1373e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13746:	681b      	ldr	r3, [r3, #0]
   13748:	4618      	mov	r0, r3
   1374a:	f04f 0100 	mov.w	r1, #0
   1374e:	f004 ff11 	bl	18574 <__aeabi_fcmplt>
   13752:	4603      	mov	r3, r0
   13754:	2b00      	cmp	r3, #0
   13756:	d1df      	bne.n	13718 <auto_nav+0x13a8>
   13758:	e012      	b.n	13780 <auto_nav+0x1410>
   1375a:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1375e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13762:	681b      	ldr	r3, [r3, #0]
   13764:	4618      	mov	r0, r3
   13766:	f04f 0100 	mov.w	r1, #0
   1376a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1376e:	f004 fc59 	bl	18024 <__aeabi_fsub>
   13772:	4603      	mov	r3, r0
   13774:	461a      	mov	r2, r3
   13776:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1377a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1377e:	601a      	str	r2, [r3, #0]
   13780:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13788:	681b      	ldr	r3, [r3, #0]
   1378a:	4618      	mov	r0, r3
   1378c:	f04f 0100 	mov.w	r1, #0
   13790:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13794:	f004 ff02 	bl	1859c <__aeabi_fcmpge>
   13798:	4603      	mov	r3, r0
   1379a:	2b00      	cmp	r3, #0
   1379c:	d1dd      	bne.n	1375a <auto_nav+0x13ea>
        return;
   1379e:	f000 beb9 	b.w	14514 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   137a2:	f24c 2340 	movw	r3, #49728	; 0xc240
   137a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137aa:	781b      	ldrb	r3, [r3, #0]
   137ac:	2b01      	cmp	r3, #1
   137ae:	f040 86b1 	bne.w	14514 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   137b2:	f24c 2340 	movw	r3, #49728	; 0xc240
   137b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ba:	2201      	movs	r2, #1
   137bc:	701a      	strb	r2, [r3, #0]
        NextBlock()
   137be:	f24c 2341 	movw	r3, #49729	; 0xc241
   137c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137c6:	781b      	ldrb	r3, [r3, #0]
   137c8:	3301      	adds	r3, #1
   137ca:	b2da      	uxtb	r2, r3
   137cc:	f24c 2341 	movw	r3, #49729	; 0xc241
   137d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137d4:	701a      	strb	r2, [r3, #0]
   137d6:	f24c 2340 	movw	r3, #49728	; 0xc240
   137da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137de:	2200      	movs	r2, #0
   137e0:	701a      	strb	r2, [r3, #0]
   137e2:	f24c 2356 	movw	r3, #49750	; 0xc256
   137e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ea:	2200      	movs	r2, #0
   137ec:	801a      	strh	r2, [r3, #0]
   137ee:	f24c 439c 	movw	r3, #50332	; 0xc49c
   137f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137f6:	681a      	ldr	r2, [r3, #0]
   137f8:	f24c 2344 	movw	r3, #49732	; 0xc244
   137fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13800:	601a      	str	r2, [r3, #0]
   13802:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1380a:	681a      	ldr	r2, [r3, #0]
   1380c:	f24c 2348 	movw	r3, #49736	; 0xc248
   13810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13814:	601a      	str	r2, [r3, #0]
   13816:	f24c 2354 	movw	r3, #49748	; 0xc254
   1381a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1381e:	2200      	movs	r2, #0
   13820:	801a      	strh	r2, [r3, #0]
   13822:	f24c 2358 	movw	r3, #49752	; 0xc258
   13826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1382a:	f04f 0200 	mov.w	r2, #0
   1382e:	601a      	str	r2, [r3, #0]
   13830:	f000 be70 	b.w	14514 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13834:	f24c 2341 	movw	r3, #49729	; 0xc241
   13838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1383c:	781b      	ldrb	r3, [r3, #0]
   1383e:	2b04      	cmp	r3, #4
   13840:	f040 8202 	bne.w	13c48 <auto_nav+0x18d8>
{
    nav_block = 4;
   13844:	f24c 2341 	movw	r3, #49729	; 0xc241
   13848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384c:	2204      	movs	r2, #4
   1384e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13850:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13858:	781b      	ldrb	r3, [r3, #0]
   1385a:	2b00      	cmp	r3, #0
   1385c:	d007      	beq.n	1386e <auto_nav+0x14fe>
   1385e:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13866:	2200      	movs	r2, #0
   13868:	701a      	strb	r2, [r3, #0]
   1386a:	2301      	movs	r3, #1
   1386c:	e000      	b.n	13870 <auto_nav+0x1500>
   1386e:	2300      	movs	r3, #0
   13870:	2b00      	cmp	r3, #0
   13872:	d03d      	beq.n	138f0 <auto_nav+0x1580>
   13874:	f24c 2341 	movw	r3, #49729	; 0xc241
   13878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1387c:	2205      	movs	r2, #5
   1387e:	701a      	strb	r2, [r3, #0]
   13880:	f24c 2340 	movw	r3, #49728	; 0xc240
   13884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13888:	2200      	movs	r2, #0
   1388a:	701a      	strb	r2, [r3, #0]
   1388c:	f24c 2356 	movw	r3, #49750	; 0xc256
   13890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13894:	2200      	movs	r2, #0
   13896:	801a      	strh	r2, [r3, #0]
   13898:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1389c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138a0:	681a      	ldr	r2, [r3, #0]
   138a2:	f24c 2344 	movw	r3, #49732	; 0xc244
   138a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138aa:	601a      	str	r2, [r3, #0]
   138ac:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   138b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138b4:	681a      	ldr	r2, [r3, #0]
   138b6:	f24c 2348 	movw	r3, #49736	; 0xc248
   138ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138be:	601a      	str	r2, [r3, #0]
   138c0:	f24c 2354 	movw	r3, #49748	; 0xc254
   138c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c8:	2200      	movs	r2, #0
   138ca:	801a      	strh	r2, [r3, #0]
   138cc:	f24c 2358 	movw	r3, #49752	; 0xc258
   138d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138d4:	f04f 0200 	mov.w	r2, #0
   138d8:	601a      	str	r2, [r3, #0]
   138da:	f000 be1b 	b.w	14514 <auto_nav+0x21a4>
   138de:	bf00      	nop
   138e0:	54442d18 	.word	0x54442d18
   138e4:	3ff921fb 	.word	0x3ff921fb
   138e8:	54442d18 	.word	0x54442d18
   138ec:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   138f0:	f24c 2340 	movw	r3, #49728	; 0xc240
   138f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138f8:	781b      	ldrb	r3, [r3, #0]
   138fa:	2b00      	cmp	r3, #0
   138fc:	f040 815b 	bne.w	13bb6 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13900:	f24c 2340 	movw	r3, #49728	; 0xc240
   13904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1390c:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   13910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13914:	2200      	movs	r2, #0
   13916:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13918:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1391c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13920:	f04f 0200 	mov.w	r2, #0
   13924:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13926:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   1392a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1392e:	2203      	movs	r2, #3
   13930:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13932:	f240 4328 	movw	r3, #1064	; 0x428
   13936:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1393a:	689a      	ldr	r2, [r3, #8]
   1393c:	f240 4324 	movw	r3, #1060	; 0x424
   13940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13944:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13946:	f24c 2334 	movw	r3, #49716	; 0xc234
   1394a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1394e:	f04f 0200 	mov.w	r2, #0
   13952:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13954:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1395c:	681a      	ldr	r2, [r3, #0]
   1395e:	f240 4328 	movw	r3, #1064	; 0x428
   13962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13966:	685b      	ldr	r3, [r3, #4]
   13968:	4610      	mov	r0, r2
   1396a:	4619      	mov	r1, r3
   1396c:	f004 fb5a 	bl	18024 <__aeabi_fsub>
   13970:	4603      	mov	r3, r0
   13972:	4618      	mov	r0, r3
   13974:	f003 ffcc 	bl	17910 <__aeabi_f2d>
   13978:	4604      	mov	r4, r0
   1397a:	460d      	mov	r5, r1
   1397c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13984:	681a      	ldr	r2, [r3, #0]
   13986:	f240 4328 	movw	r3, #1064	; 0x428
   1398a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1398e:	681b      	ldr	r3, [r3, #0]
   13990:	4610      	mov	r0, r2
   13992:	4619      	mov	r1, r3
   13994:	f004 fb46 	bl	18024 <__aeabi_fsub>
   13998:	4603      	mov	r3, r0
   1399a:	4618      	mov	r0, r3
   1399c:	f003 ffb8 	bl	17910 <__aeabi_f2d>
   139a0:	4602      	mov	r2, r0
   139a2:	460b      	mov	r3, r1
   139a4:	4620      	mov	r0, r4
   139a6:	4629      	mov	r1, r5
   139a8:	f002 f802 	bl	159b0 <pp_atan2>
   139ac:	4602      	mov	r2, r0
   139ae:	460b      	mov	r3, r1
   139b0:	4610      	mov	r0, r2
   139b2:	4619      	mov	r1, r3
   139b4:	f004 fae2 	bl	17f7c <__aeabi_d2f>
   139b8:	4603      	mov	r3, r0
   139ba:	617b      	str	r3, [r7, #20]
   139bc:	6978      	ldr	r0, [r7, #20]
   139be:	f003 ffa7 	bl	17910 <__aeabi_f2d>
   139c2:	4604      	mov	r4, r0
   139c4:	460d      	mov	r5, r1
   139c6:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   139ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139ce:	681b      	ldr	r3, [r3, #0]
   139d0:	4618      	mov	r0, r3
   139d2:	f04f 0100 	mov.w	r1, #0
   139d6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   139da:	f004 fc2d 	bl	18238 <__aeabi_fmul>
   139de:	4603      	mov	r3, r0
   139e0:	4618      	mov	r0, r3
   139e2:	f003 ff95 	bl	17910 <__aeabi_f2d>
   139e6:	4602      	mov	r2, r0
   139e8:	460b      	mov	r3, r1
   139ea:	f04f 0000 	mov.w	r0, #0
   139ee:	f04f 0100 	mov.w	r1, #0
   139f2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   139f6:	f004 f909 	bl	17c0c <__aeabi_ddiv>
   139fa:	4602      	mov	r2, r0
   139fc:	460b      	mov	r3, r1
   139fe:	4620      	mov	r0, r4
   13a00:	4629      	mov	r1, r5
   13a02:	f003 fe27 	bl	17654 <__adddf3>
   13a06:	4602      	mov	r2, r0
   13a08:	460b      	mov	r3, r1
   13a0a:	4610      	mov	r0, r2
   13a0c:	4619      	mov	r1, r3
   13a0e:	f004 fab5 	bl	17f7c <__aeabi_d2f>
   13a12:	4603      	mov	r3, r0
   13a14:	613b      	str	r3, [r7, #16]
   13a16:	f240 4328 	movw	r3, #1064	; 0x428
   13a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a1e:	681b      	ldr	r3, [r3, #0]
   13a20:	4618      	mov	r0, r3
   13a22:	f003 ff75 	bl	17910 <__aeabi_f2d>
   13a26:	4604      	mov	r4, r0
   13a28:	460d      	mov	r5, r1
   13a2a:	6938      	ldr	r0, [r7, #16]
   13a2c:	f003 ff70 	bl	17910 <__aeabi_f2d>
   13a30:	4602      	mov	r2, r0
   13a32:	460b      	mov	r3, r1
   13a34:	4610      	mov	r0, r2
   13a36:	4619      	mov	r1, r3
   13a38:	a3af      	add	r3, pc, #700	; (adr r3, 13cf8 <auto_nav+0x1988>)
   13a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a3e:	f003 fe09 	bl	17654 <__adddf3>
   13a42:	4602      	mov	r2, r0
   13a44:	460b      	mov	r3, r1
   13a46:	4610      	mov	r0, r2
   13a48:	4619      	mov	r1, r3
   13a4a:	f002 f871 	bl	15b30 <pp_sin>
   13a4e:	4602      	mov	r2, r0
   13a50:	460b      	mov	r3, r1
   13a52:	4610      	mov	r0, r2
   13a54:	4619      	mov	r1, r3
   13a56:	a3aa      	add	r3, pc, #680	; (adr r3, 13d00 <auto_nav+0x1990>)
   13a58:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a5c:	f003 ffac 	bl	179b8 <__aeabi_dmul>
   13a60:	4602      	mov	r2, r0
   13a62:	460b      	mov	r3, r1
   13a64:	4620      	mov	r0, r4
   13a66:	4629      	mov	r1, r5
   13a68:	f003 fdf4 	bl	17654 <__adddf3>
   13a6c:	4602      	mov	r2, r0
   13a6e:	460b      	mov	r3, r1
   13a70:	4610      	mov	r0, r2
   13a72:	4619      	mov	r1, r3
   13a74:	f004 fa82 	bl	17f7c <__aeabi_d2f>
   13a78:	4606      	mov	r6, r0
   13a7a:	f240 4328 	movw	r3, #1064	; 0x428
   13a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a82:	685b      	ldr	r3, [r3, #4]
   13a84:	4618      	mov	r0, r3
   13a86:	f003 ff43 	bl	17910 <__aeabi_f2d>
   13a8a:	4604      	mov	r4, r0
   13a8c:	460d      	mov	r5, r1
   13a8e:	6938      	ldr	r0, [r7, #16]
   13a90:	f003 ff3e 	bl	17910 <__aeabi_f2d>
   13a94:	4602      	mov	r2, r0
   13a96:	460b      	mov	r3, r1
   13a98:	4610      	mov	r0, r2
   13a9a:	4619      	mov	r1, r3
   13a9c:	f002 f848 	bl	15b30 <pp_sin>
   13aa0:	4602      	mov	r2, r0
   13aa2:	460b      	mov	r3, r1
   13aa4:	4610      	mov	r0, r2
   13aa6:	4619      	mov	r1, r3
   13aa8:	a395      	add	r3, pc, #596	; (adr r3, 13d00 <auto_nav+0x1990>)
   13aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aae:	f003 ff83 	bl	179b8 <__aeabi_dmul>
   13ab2:	4602      	mov	r2, r0
   13ab4:	460b      	mov	r3, r1
   13ab6:	4620      	mov	r0, r4
   13ab8:	4629      	mov	r1, r5
   13aba:	f003 fdcb 	bl	17654 <__adddf3>
   13abe:	4602      	mov	r2, r0
   13ac0:	460b      	mov	r3, r1
   13ac2:	4610      	mov	r0, r2
   13ac4:	4619      	mov	r1, r3
   13ac6:	f004 fa59 	bl	17f7c <__aeabi_d2f>
   13aca:	4603      	mov	r3, r0
   13acc:	4630      	mov	r0, r6
   13ace:	4619      	mov	r1, r3
   13ad0:	f000 fe12 	bl	146f8 <fly_to_xy>
   13ad4:	6938      	ldr	r0, [r7, #16]
   13ad6:	f003 ff1b 	bl	17910 <__aeabi_f2d>
   13ada:	4602      	mov	r2, r0
   13adc:	460b      	mov	r3, r1
   13ade:	a186      	add	r1, pc, #536	; (adr r1, 13cf8 <auto_nav+0x1988>)
   13ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
   13ae4:	f003 fdb4 	bl	17650 <__aeabi_dsub>
   13ae8:	4602      	mov	r2, r0
   13aea:	460b      	mov	r3, r1
   13aec:	4610      	mov	r0, r2
   13aee:	4619      	mov	r1, r3
   13af0:	a385      	add	r3, pc, #532	; (adr r3, 13d08 <auto_nav+0x1998>)
   13af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13af6:	f004 f889 	bl	17c0c <__aeabi_ddiv>
   13afa:	4602      	mov	r2, r0
   13afc:	460b      	mov	r3, r1
   13afe:	4610      	mov	r0, r2
   13b00:	4619      	mov	r1, r3
   13b02:	f04f 0200 	mov.w	r2, #0
   13b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13b0a:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13b0e:	f003 ff53 	bl	179b8 <__aeabi_dmul>
   13b12:	4602      	mov	r2, r0
   13b14:	460b      	mov	r3, r1
   13b16:	4610      	mov	r0, r2
   13b18:	4619      	mov	r1, r3
   13b1a:	f004 fa2f 	bl	17f7c <__aeabi_d2f>
   13b1e:	4602      	mov	r2, r0
   13b20:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b28:	601a      	str	r2, [r3, #0]
   13b2a:	e012      	b.n	13b52 <auto_nav+0x17e2>
   13b2c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b34:	681b      	ldr	r3, [r3, #0]
   13b36:	4618      	mov	r0, r3
   13b38:	f04f 0100 	mov.w	r1, #0
   13b3c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b40:	f004 fa72 	bl	18028 <__addsf3>
   13b44:	4603      	mov	r3, r0
   13b46:	461a      	mov	r2, r3
   13b48:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b50:	601a      	str	r2, [r3, #0]
   13b52:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b5a:	681b      	ldr	r3, [r3, #0]
   13b5c:	4618      	mov	r0, r3
   13b5e:	f04f 0100 	mov.w	r1, #0
   13b62:	f004 fd07 	bl	18574 <__aeabi_fcmplt>
   13b66:	4603      	mov	r3, r0
   13b68:	2b00      	cmp	r3, #0
   13b6a:	d1df      	bne.n	13b2c <auto_nav+0x17bc>
   13b6c:	e012      	b.n	13b94 <auto_nav+0x1824>
   13b6e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b76:	681b      	ldr	r3, [r3, #0]
   13b78:	4618      	mov	r0, r3
   13b7a:	f04f 0100 	mov.w	r1, #0
   13b7e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b82:	f004 fa4f 	bl	18024 <__aeabi_fsub>
   13b86:	4603      	mov	r3, r0
   13b88:	461a      	mov	r2, r3
   13b8a:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b92:	601a      	str	r2, [r3, #0]
   13b94:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b9c:	681b      	ldr	r3, [r3, #0]
   13b9e:	4618      	mov	r0, r3
   13ba0:	f04f 0100 	mov.w	r1, #0
   13ba4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ba8:	f004 fcf8 	bl	1859c <__aeabi_fcmpge>
   13bac:	4603      	mov	r3, r0
   13bae:	2b00      	cmp	r3, #0
   13bb0:	d1dd      	bne.n	13b6e <auto_nav+0x17fe>
        return;
   13bb2:	f000 bcaf 	b.w	14514 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13bb6:	f24c 2340 	movw	r3, #49728	; 0xc240
   13bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bbe:	781b      	ldrb	r3, [r3, #0]
   13bc0:	2b01      	cmp	r3, #1
   13bc2:	f040 84a7 	bne.w	14514 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13bc6:	f24c 2340 	movw	r3, #49728	; 0xc240
   13bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bce:	2201      	movs	r2, #1
   13bd0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13bd2:	f24c 2341 	movw	r3, #49729	; 0xc241
   13bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bda:	781b      	ldrb	r3, [r3, #0]
   13bdc:	3301      	adds	r3, #1
   13bde:	b2da      	uxtb	r2, r3
   13be0:	f24c 2341 	movw	r3, #49729	; 0xc241
   13be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13be8:	701a      	strb	r2, [r3, #0]
   13bea:	f24c 2340 	movw	r3, #49728	; 0xc240
   13bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf2:	2200      	movs	r2, #0
   13bf4:	701a      	strb	r2, [r3, #0]
   13bf6:	f24c 2356 	movw	r3, #49750	; 0xc256
   13bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bfe:	2200      	movs	r2, #0
   13c00:	801a      	strh	r2, [r3, #0]
   13c02:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c0a:	681a      	ldr	r2, [r3, #0]
   13c0c:	f24c 2344 	movw	r3, #49732	; 0xc244
   13c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c14:	601a      	str	r2, [r3, #0]
   13c16:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c1e:	681a      	ldr	r2, [r3, #0]
   13c20:	f24c 2348 	movw	r3, #49736	; 0xc248
   13c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c28:	601a      	str	r2, [r3, #0]
   13c2a:	f24c 2354 	movw	r3, #49748	; 0xc254
   13c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c32:	2200      	movs	r2, #0
   13c34:	801a      	strh	r2, [r3, #0]
   13c36:	f24c 2358 	movw	r3, #49752	; 0xc258
   13c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c3e:	f04f 0200 	mov.w	r2, #0
   13c42:	601a      	str	r2, [r3, #0]
   13c44:	f000 bc66 	b.w	14514 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13c48:	f24c 2341 	movw	r3, #49729	; 0xc241
   13c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c50:	781b      	ldrb	r3, [r3, #0]
   13c52:	2b05      	cmp	r3, #5
   13c54:	f040 845e 	bne.w	14514 <auto_nav+0x21a4>
{
    nav_block = 5;
   13c58:	f24c 2341 	movw	r3, #49729	; 0xc241
   13c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c60:	2205      	movs	r2, #5
   13c62:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13c64:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c6c:	781b      	ldrb	r3, [r3, #0]
   13c6e:	2b00      	cmp	r3, #0
   13c70:	d007      	beq.n	13c82 <auto_nav+0x1912>
   13c72:	f64b 63d0 	movw	r3, #48848	; 0xbed0
   13c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c7a:	2200      	movs	r2, #0
   13c7c:	701a      	strb	r2, [r3, #0]
   13c7e:	2301      	movs	r3, #1
   13c80:	e000      	b.n	13c84 <auto_nav+0x1914>
   13c82:	2300      	movs	r3, #0
   13c84:	2b00      	cmp	r3, #0
   13c86:	d043      	beq.n	13d10 <auto_nav+0x19a0>
   13c88:	f24c 2341 	movw	r3, #49729	; 0xc241
   13c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c90:	2201      	movs	r2, #1
   13c92:	701a      	strb	r2, [r3, #0]
   13c94:	f24c 2340 	movw	r3, #49728	; 0xc240
   13c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c9c:	2200      	movs	r2, #0
   13c9e:	701a      	strb	r2, [r3, #0]
   13ca0:	f24c 2356 	movw	r3, #49750	; 0xc256
   13ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ca8:	2200      	movs	r2, #0
   13caa:	801a      	strh	r2, [r3, #0]
   13cac:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cb4:	681a      	ldr	r2, [r3, #0]
   13cb6:	f24c 2344 	movw	r3, #49732	; 0xc244
   13cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cbe:	601a      	str	r2, [r3, #0]
   13cc0:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cc8:	681a      	ldr	r2, [r3, #0]
   13cca:	f24c 2348 	movw	r3, #49736	; 0xc248
   13cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cd2:	601a      	str	r2, [r3, #0]
   13cd4:	f24c 2354 	movw	r3, #49748	; 0xc254
   13cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cdc:	2200      	movs	r2, #0
   13cde:	801a      	strh	r2, [r3, #0]
   13ce0:	f24c 2358 	movw	r3, #49752	; 0xc258
   13ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ce8:	f04f 0200 	mov.w	r2, #0
   13cec:	601a      	str	r2, [r3, #0]
   13cee:	f000 bc11 	b.w	14514 <auto_nav+0x21a4>
   13cf2:	bf00      	nop
   13cf4:	f3af 8000 	nop.w
   13cf8:	54442d18 	.word	0x54442d18
   13cfc:	3ff921fb 	.word	0x3ff921fb
   13d00:	00000000 	.word	0x00000000
   13d04:	4062c000 	.word	0x4062c000
   13d08:	54442d18 	.word	0x54442d18
   13d0c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13d10:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d18:	781b      	ldrb	r3, [r3, #0]
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	d133      	bne.n	13d86 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13d1e:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d26:	2200      	movs	r2, #0
   13d28:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13d2a:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d32:	781b      	ldrb	r3, [r3, #0]
   13d34:	3301      	adds	r3, #1
   13d36:	b2da      	uxtb	r2, r3
   13d38:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d40:	701a      	strb	r2, [r3, #0]
   13d42:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d4a:	681a      	ldr	r2, [r3, #0]
   13d4c:	f24c 2344 	movw	r3, #49732	; 0xc244
   13d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d54:	601a      	str	r2, [r3, #0]
   13d56:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d5e:	681a      	ldr	r2, [r3, #0]
   13d60:	f24c 2348 	movw	r3, #49736	; 0xc248
   13d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d68:	601a      	str	r2, [r3, #0]
   13d6a:	f24c 2354 	movw	r3, #49748	; 0xc254
   13d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d72:	2200      	movs	r2, #0
   13d74:	801a      	strh	r2, [r3, #0]
   13d76:	f24c 2358 	movw	r3, #49752	; 0xc258
   13d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d7e:	f04f 0200 	mov.w	r2, #0
   13d82:	601a      	str	r2, [r3, #0]
   13d84:	e3c6      	b.n	14514 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13d86:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	2b01      	cmp	r3, #1
   13d92:	f040 81b5 	bne.w	14100 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13d96:	f24c 2340 	movw	r3, #49728	; 0xc240
   13d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d9e:	2201      	movs	r2, #1
   13da0:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13da2:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   13da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13daa:	2200      	movs	r2, #0
   13dac:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13dae:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db6:	f04f 0200 	mov.w	r2, #0
   13dba:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13dbc:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   13dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc4:	2203      	movs	r2, #3
   13dc6:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13dc8:	f240 4328 	movw	r3, #1064	; 0x428
   13dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dd0:	695a      	ldr	r2, [r3, #20]
   13dd2:	f240 4324 	movw	r3, #1060	; 0x424
   13dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dda:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13ddc:	f24c 2334 	movw	r3, #49716	; 0xc234
   13de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de4:	f04f 0200 	mov.w	r2, #0
   13de8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13dea:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   13dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df2:	681a      	ldr	r2, [r3, #0]
   13df4:	f240 4328 	movw	r3, #1064	; 0x428
   13df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dfc:	691b      	ldr	r3, [r3, #16]
   13dfe:	4610      	mov	r0, r2
   13e00:	4619      	mov	r1, r3
   13e02:	f004 f90f 	bl	18024 <__aeabi_fsub>
   13e06:	4603      	mov	r3, r0
   13e08:	4618      	mov	r0, r3
   13e0a:	f003 fd81 	bl	17910 <__aeabi_f2d>
   13e0e:	4604      	mov	r4, r0
   13e10:	460d      	mov	r5, r1
   13e12:	f24c 439c 	movw	r3, #50332	; 0xc49c
   13e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1a:	681a      	ldr	r2, [r3, #0]
   13e1c:	f240 4328 	movw	r3, #1064	; 0x428
   13e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e24:	68db      	ldr	r3, [r3, #12]
   13e26:	4610      	mov	r0, r2
   13e28:	4619      	mov	r1, r3
   13e2a:	f004 f8fb 	bl	18024 <__aeabi_fsub>
   13e2e:	4603      	mov	r3, r0
   13e30:	4618      	mov	r0, r3
   13e32:	f003 fd6d 	bl	17910 <__aeabi_f2d>
   13e36:	4602      	mov	r2, r0
   13e38:	460b      	mov	r3, r1
   13e3a:	4620      	mov	r0, r4
   13e3c:	4629      	mov	r1, r5
   13e3e:	f001 fdb7 	bl	159b0 <pp_atan2>
   13e42:	4602      	mov	r2, r0
   13e44:	460b      	mov	r3, r1
   13e46:	4610      	mov	r0, r2
   13e48:	4619      	mov	r1, r3
   13e4a:	f004 f897 	bl	17f7c <__aeabi_d2f>
   13e4e:	4603      	mov	r3, r0
   13e50:	60fb      	str	r3, [r7, #12]
   13e52:	68f8      	ldr	r0, [r7, #12]
   13e54:	f003 fd5c 	bl	17910 <__aeabi_f2d>
   13e58:	4604      	mov	r4, r0
   13e5a:	460d      	mov	r5, r1
   13e5c:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	681b      	ldr	r3, [r3, #0]
   13e66:	4618      	mov	r0, r3
   13e68:	f04f 0100 	mov.w	r1, #0
   13e6c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13e70:	f004 f9e2 	bl	18238 <__aeabi_fmul>
   13e74:	4603      	mov	r3, r0
   13e76:	4618      	mov	r0, r3
   13e78:	f003 fd4a 	bl	17910 <__aeabi_f2d>
   13e7c:	4602      	mov	r2, r0
   13e7e:	460b      	mov	r3, r1
   13e80:	f04f 0000 	mov.w	r0, #0
   13e84:	f04f 0100 	mov.w	r1, #0
   13e88:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13e8c:	f003 febe 	bl	17c0c <__aeabi_ddiv>
   13e90:	4602      	mov	r2, r0
   13e92:	460b      	mov	r3, r1
   13e94:	4620      	mov	r0, r4
   13e96:	4629      	mov	r1, r5
   13e98:	f003 fbdc 	bl	17654 <__adddf3>
   13e9c:	4602      	mov	r2, r0
   13e9e:	460b      	mov	r3, r1
   13ea0:	4610      	mov	r0, r2
   13ea2:	4619      	mov	r1, r3
   13ea4:	f004 f86a 	bl	17f7c <__aeabi_d2f>
   13ea8:	4603      	mov	r3, r0
   13eaa:	60bb      	str	r3, [r7, #8]
   13eac:	f240 4328 	movw	r3, #1064	; 0x428
   13eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eb4:	68db      	ldr	r3, [r3, #12]
   13eb6:	4618      	mov	r0, r3
   13eb8:	f003 fd2a 	bl	17910 <__aeabi_f2d>
   13ebc:	4604      	mov	r4, r0
   13ebe:	460d      	mov	r5, r1
   13ec0:	68b8      	ldr	r0, [r7, #8]
   13ec2:	f003 fd25 	bl	17910 <__aeabi_f2d>
   13ec6:	4602      	mov	r2, r0
   13ec8:	460b      	mov	r3, r1
   13eca:	4610      	mov	r0, r2
   13ecc:	4619      	mov	r1, r3
   13ece:	a388      	add	r3, pc, #544	; (adr r3, 140f0 <auto_nav+0x1d80>)
   13ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ed4:	f003 fbbe 	bl	17654 <__adddf3>
   13ed8:	4602      	mov	r2, r0
   13eda:	460b      	mov	r3, r1
   13edc:	4610      	mov	r0, r2
   13ede:	4619      	mov	r1, r3
   13ee0:	f001 fe26 	bl	15b30 <pp_sin>
   13ee4:	4602      	mov	r2, r0
   13ee6:	460b      	mov	r3, r1
   13ee8:	4610      	mov	r0, r2
   13eea:	4619      	mov	r1, r3
   13eec:	f04f 0200 	mov.w	r2, #0
   13ef0:	f04f 0300 	mov.w	r3, #0
   13ef4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13ef8:	f003 fd5e 	bl	179b8 <__aeabi_dmul>
   13efc:	4602      	mov	r2, r0
   13efe:	460b      	mov	r3, r1
   13f00:	4620      	mov	r0, r4
   13f02:	4629      	mov	r1, r5
   13f04:	f003 fba6 	bl	17654 <__adddf3>
   13f08:	4602      	mov	r2, r0
   13f0a:	460b      	mov	r3, r1
   13f0c:	4610      	mov	r0, r2
   13f0e:	4619      	mov	r1, r3
   13f10:	f004 f834 	bl	17f7c <__aeabi_d2f>
   13f14:	4606      	mov	r6, r0
   13f16:	f240 4328 	movw	r3, #1064	; 0x428
   13f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f1e:	691b      	ldr	r3, [r3, #16]
   13f20:	4618      	mov	r0, r3
   13f22:	f003 fcf5 	bl	17910 <__aeabi_f2d>
   13f26:	4604      	mov	r4, r0
   13f28:	460d      	mov	r5, r1
   13f2a:	68b8      	ldr	r0, [r7, #8]
   13f2c:	f003 fcf0 	bl	17910 <__aeabi_f2d>
   13f30:	4602      	mov	r2, r0
   13f32:	460b      	mov	r3, r1
   13f34:	4610      	mov	r0, r2
   13f36:	4619      	mov	r1, r3
   13f38:	f001 fdfa 	bl	15b30 <pp_sin>
   13f3c:	4602      	mov	r2, r0
   13f3e:	460b      	mov	r3, r1
   13f40:	4610      	mov	r0, r2
   13f42:	4619      	mov	r1, r3
   13f44:	f04f 0200 	mov.w	r2, #0
   13f48:	f04f 0300 	mov.w	r3, #0
   13f4c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f50:	f003 fd32 	bl	179b8 <__aeabi_dmul>
   13f54:	4602      	mov	r2, r0
   13f56:	460b      	mov	r3, r1
   13f58:	4620      	mov	r0, r4
   13f5a:	4629      	mov	r1, r5
   13f5c:	f003 fb7a 	bl	17654 <__adddf3>
   13f60:	4602      	mov	r2, r0
   13f62:	460b      	mov	r3, r1
   13f64:	4610      	mov	r0, r2
   13f66:	4619      	mov	r1, r3
   13f68:	f004 f808 	bl	17f7c <__aeabi_d2f>
   13f6c:	4603      	mov	r3, r0
   13f6e:	4630      	mov	r0, r6
   13f70:	4619      	mov	r1, r3
   13f72:	f000 fbc1 	bl	146f8 <fly_to_xy>
   13f76:	68b8      	ldr	r0, [r7, #8]
   13f78:	f003 fcca 	bl	17910 <__aeabi_f2d>
   13f7c:	4602      	mov	r2, r0
   13f7e:	460b      	mov	r3, r1
   13f80:	a15b      	add	r1, pc, #364	; (adr r1, 140f0 <auto_nav+0x1d80>)
   13f82:	e9d1 0100 	ldrd	r0, r1, [r1]
   13f86:	f003 fb63 	bl	17650 <__aeabi_dsub>
   13f8a:	4602      	mov	r2, r0
   13f8c:	460b      	mov	r3, r1
   13f8e:	4610      	mov	r0, r2
   13f90:	4619      	mov	r1, r3
   13f92:	a359      	add	r3, pc, #356	; (adr r3, 140f8 <auto_nav+0x1d88>)
   13f94:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f98:	f003 fe38 	bl	17c0c <__aeabi_ddiv>
   13f9c:	4602      	mov	r2, r0
   13f9e:	460b      	mov	r3, r1
   13fa0:	4610      	mov	r0, r2
   13fa2:	4619      	mov	r1, r3
   13fa4:	f04f 0200 	mov.w	r2, #0
   13fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13fac:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13fb0:	f003 fd02 	bl	179b8 <__aeabi_dmul>
   13fb4:	4602      	mov	r2, r0
   13fb6:	460b      	mov	r3, r1
   13fb8:	4610      	mov	r0, r2
   13fba:	4619      	mov	r1, r3
   13fbc:	f003 ffde 	bl	17f7c <__aeabi_d2f>
   13fc0:	4602      	mov	r2, r0
   13fc2:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fca:	601a      	str	r2, [r3, #0]
   13fcc:	e012      	b.n	13ff4 <auto_nav+0x1c84>
   13fce:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd6:	681b      	ldr	r3, [r3, #0]
   13fd8:	4618      	mov	r0, r3
   13fda:	f04f 0100 	mov.w	r1, #0
   13fde:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13fe2:	f004 f821 	bl	18028 <__addsf3>
   13fe6:	4603      	mov	r3, r0
   13fe8:	461a      	mov	r2, r3
   13fea:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff2:	601a      	str	r2, [r3, #0]
   13ff4:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffc:	681b      	ldr	r3, [r3, #0]
   13ffe:	4618      	mov	r0, r3
   14000:	f04f 0100 	mov.w	r1, #0
   14004:	f004 fab6 	bl	18574 <__aeabi_fcmplt>
   14008:	4603      	mov	r3, r0
   1400a:	2b00      	cmp	r3, #0
   1400c:	d1df      	bne.n	13fce <auto_nav+0x1c5e>
   1400e:	e012      	b.n	14036 <auto_nav+0x1cc6>
   14010:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14018:	681b      	ldr	r3, [r3, #0]
   1401a:	4618      	mov	r0, r3
   1401c:	f04f 0100 	mov.w	r1, #0
   14020:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14024:	f003 fffe 	bl	18024 <__aeabi_fsub>
   14028:	4603      	mov	r3, r0
   1402a:	461a      	mov	r2, r3
   1402c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14034:	601a      	str	r2, [r3, #0]
   14036:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1403a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403e:	681b      	ldr	r3, [r3, #0]
   14040:	4618      	mov	r0, r3
   14042:	f04f 0100 	mov.w	r1, #0
   14046:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1404a:	f004 faa7 	bl	1859c <__aeabi_fcmpge>
   1404e:	4603      	mov	r3, r0
   14050:	2b00      	cmp	r3, #0
   14052:	d1dd      	bne.n	14010 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   14054:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1405c:	681b      	ldr	r3, [r3, #0]
   1405e:	4618      	mov	r0, r3
   14060:	f04f 0100 	mov.w	r1, #0
   14064:	f004 faa4 	bl	185b0 <__aeabi_fcmpgt>
   14068:	4603      	mov	r3, r0
   1406a:	2b00      	cmp	r3, #0
   1406c:	d100      	bne.n	14070 <auto_nav+0x1d00>
        return;
   1406e:	e251      	b.n	14514 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14070:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14078:	681b      	ldr	r3, [r3, #0]
   1407a:	4618      	mov	r0, r3
   1407c:	f04f 0100 	mov.w	r1, #0
   14080:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14084:	f004 fa76 	bl	18574 <__aeabi_fcmplt>
   14088:	4603      	mov	r3, r0
   1408a:	2b00      	cmp	r3, #0
   1408c:	d100      	bne.n	14090 <auto_nav+0x1d20>
        return;
   1408e:	e241      	b.n	14514 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14090:	f24c 2340 	movw	r3, #49728	; 0xc240
   14094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14098:	781b      	ldrb	r3, [r3, #0]
   1409a:	3301      	adds	r3, #1
   1409c:	b2da      	uxtb	r2, r3
   1409e:	f24c 2340 	movw	r3, #49728	; 0xc240
   140a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140a6:	701a      	strb	r2, [r3, #0]
   140a8:	f24c 439c 	movw	r3, #50332	; 0xc49c
   140ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b0:	681a      	ldr	r2, [r3, #0]
   140b2:	f24c 2344 	movw	r3, #49732	; 0xc244
   140b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ba:	601a      	str	r2, [r3, #0]
   140bc:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   140c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140c4:	681a      	ldr	r2, [r3, #0]
   140c6:	f24c 2348 	movw	r3, #49736	; 0xc248
   140ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ce:	601a      	str	r2, [r3, #0]
   140d0:	f24c 2354 	movw	r3, #49748	; 0xc254
   140d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140d8:	2200      	movs	r2, #0
   140da:	801a      	strh	r2, [r3, #0]
   140dc:	f24c 2358 	movw	r3, #49752	; 0xc258
   140e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e4:	f04f 0200 	mov.w	r2, #0
   140e8:	601a      	str	r2, [r3, #0]
   140ea:	e213      	b.n	14514 <auto_nav+0x21a4>
   140ec:	f3af 8000 	nop.w
   140f0:	54442d18 	.word	0x54442d18
   140f4:	3ff921fb 	.word	0x3ff921fb
   140f8:	54442d18 	.word	0x54442d18
   140fc:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14100:	f24c 2340 	movw	r3, #49728	; 0xc240
   14104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14108:	781b      	ldrb	r3, [r3, #0]
   1410a:	2b02      	cmp	r3, #2
   1410c:	f040 81ad 	bne.w	1446a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14110:	f24c 2340 	movw	r3, #49728	; 0xc240
   14114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14118:	2202      	movs	r2, #2
   1411a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   1411c:	f64b 63cf 	movw	r3, #48847	; 0xbecf
   14120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14124:	2200      	movs	r2, #0
   14126:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14128:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1412c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14130:	f04f 0200 	mov.w	r2, #0
   14134:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14136:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   1413a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1413e:	2203      	movs	r2, #3
   14140:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14142:	f240 4328 	movw	r3, #1064	; 0x428
   14146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1414a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1414c:	f240 4324 	movw	r3, #1060	; 0x424
   14150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14154:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14156:	f24c 2334 	movw	r3, #49716	; 0xc234
   1415a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1415e:	f04f 0200 	mov.w	r2, #0
   14162:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14164:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   14168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1416c:	681a      	ldr	r2, [r3, #0]
   1416e:	f240 4328 	movw	r3, #1064	; 0x428
   14172:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14178:	4610      	mov	r0, r2
   1417a:	4619      	mov	r1, r3
   1417c:	f003 ff52 	bl	18024 <__aeabi_fsub>
   14180:	4603      	mov	r3, r0
   14182:	4618      	mov	r0, r3
   14184:	f003 fbc4 	bl	17910 <__aeabi_f2d>
   14188:	4604      	mov	r4, r0
   1418a:	460d      	mov	r5, r1
   1418c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   14190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14194:	681a      	ldr	r2, [r3, #0]
   14196:	f240 4328 	movw	r3, #1064	; 0x428
   1419a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   141a0:	4610      	mov	r0, r2
   141a2:	4619      	mov	r1, r3
   141a4:	f003 ff3e 	bl	18024 <__aeabi_fsub>
   141a8:	4603      	mov	r3, r0
   141aa:	4618      	mov	r0, r3
   141ac:	f003 fbb0 	bl	17910 <__aeabi_f2d>
   141b0:	4602      	mov	r2, r0
   141b2:	460b      	mov	r3, r1
   141b4:	4620      	mov	r0, r4
   141b6:	4629      	mov	r1, r5
   141b8:	f001 fbfa 	bl	159b0 <pp_atan2>
   141bc:	4602      	mov	r2, r0
   141be:	460b      	mov	r3, r1
   141c0:	4610      	mov	r0, r2
   141c2:	4619      	mov	r1, r3
   141c4:	f003 feda 	bl	17f7c <__aeabi_d2f>
   141c8:	4603      	mov	r3, r0
   141ca:	607b      	str	r3, [r7, #4]
   141cc:	6878      	ldr	r0, [r7, #4]
   141ce:	f003 fb9f 	bl	17910 <__aeabi_f2d>
   141d2:	4604      	mov	r4, r0
   141d4:	460d      	mov	r5, r1
   141d6:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   141da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	4618      	mov	r0, r3
   141e2:	f04f 0100 	mov.w	r1, #0
   141e6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   141ea:	f004 f825 	bl	18238 <__aeabi_fmul>
   141ee:	4603      	mov	r3, r0
   141f0:	4618      	mov	r0, r3
   141f2:	f003 fb8d 	bl	17910 <__aeabi_f2d>
   141f6:	4602      	mov	r2, r0
   141f8:	460b      	mov	r3, r1
   141fa:	f04f 0000 	mov.w	r0, #0
   141fe:	f04f 0100 	mov.w	r1, #0
   14202:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14206:	f003 fd01 	bl	17c0c <__aeabi_ddiv>
   1420a:	4602      	mov	r2, r0
   1420c:	460b      	mov	r3, r1
   1420e:	4620      	mov	r0, r4
   14210:	4629      	mov	r1, r5
   14212:	f003 fa1f 	bl	17654 <__adddf3>
   14216:	4602      	mov	r2, r0
   14218:	460b      	mov	r3, r1
   1421a:	4610      	mov	r0, r2
   1421c:	4619      	mov	r1, r3
   1421e:	f003 fead 	bl	17f7c <__aeabi_d2f>
   14222:	4603      	mov	r3, r0
   14224:	603b      	str	r3, [r7, #0]
   14226:	f240 4328 	movw	r3, #1064	; 0x428
   1422a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14230:	4618      	mov	r0, r3
   14232:	f003 fb6d 	bl	17910 <__aeabi_f2d>
   14236:	4604      	mov	r4, r0
   14238:	460d      	mov	r5, r1
   1423a:	6838      	ldr	r0, [r7, #0]
   1423c:	f003 fb68 	bl	17910 <__aeabi_f2d>
   14240:	4602      	mov	r2, r0
   14242:	460b      	mov	r3, r1
   14244:	4610      	mov	r0, r2
   14246:	4619      	mov	r1, r3
   14248:	a3b5      	add	r3, pc, #724	; (adr r3, 14520 <auto_nav+0x21b0>)
   1424a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1424e:	f003 fa01 	bl	17654 <__adddf3>
   14252:	4602      	mov	r2, r0
   14254:	460b      	mov	r3, r1
   14256:	4610      	mov	r0, r2
   14258:	4619      	mov	r1, r3
   1425a:	f001 fc69 	bl	15b30 <pp_sin>
   1425e:	4602      	mov	r2, r0
   14260:	460b      	mov	r3, r1
   14262:	4610      	mov	r0, r2
   14264:	4619      	mov	r1, r3
   14266:	f04f 0200 	mov.w	r2, #0
   1426a:	f04f 0300 	mov.w	r3, #0
   1426e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14272:	f003 fba1 	bl	179b8 <__aeabi_dmul>
   14276:	4602      	mov	r2, r0
   14278:	460b      	mov	r3, r1
   1427a:	4620      	mov	r0, r4
   1427c:	4629      	mov	r1, r5
   1427e:	f003 f9e9 	bl	17654 <__adddf3>
   14282:	4602      	mov	r2, r0
   14284:	460b      	mov	r3, r1
   14286:	4610      	mov	r0, r2
   14288:	4619      	mov	r1, r3
   1428a:	f003 fe77 	bl	17f7c <__aeabi_d2f>
   1428e:	4606      	mov	r6, r0
   14290:	f240 4328 	movw	r3, #1064	; 0x428
   14294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1429a:	4618      	mov	r0, r3
   1429c:	f003 fb38 	bl	17910 <__aeabi_f2d>
   142a0:	4604      	mov	r4, r0
   142a2:	460d      	mov	r5, r1
   142a4:	6838      	ldr	r0, [r7, #0]
   142a6:	f003 fb33 	bl	17910 <__aeabi_f2d>
   142aa:	4602      	mov	r2, r0
   142ac:	460b      	mov	r3, r1
   142ae:	4610      	mov	r0, r2
   142b0:	4619      	mov	r1, r3
   142b2:	f001 fc3d 	bl	15b30 <pp_sin>
   142b6:	4602      	mov	r2, r0
   142b8:	460b      	mov	r3, r1
   142ba:	4610      	mov	r0, r2
   142bc:	4619      	mov	r1, r3
   142be:	f04f 0200 	mov.w	r2, #0
   142c2:	f04f 0300 	mov.w	r3, #0
   142c6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   142ca:	f003 fb75 	bl	179b8 <__aeabi_dmul>
   142ce:	4602      	mov	r2, r0
   142d0:	460b      	mov	r3, r1
   142d2:	4620      	mov	r0, r4
   142d4:	4629      	mov	r1, r5
   142d6:	f003 f9bd 	bl	17654 <__adddf3>
   142da:	4602      	mov	r2, r0
   142dc:	460b      	mov	r3, r1
   142de:	4610      	mov	r0, r2
   142e0:	4619      	mov	r1, r3
   142e2:	f003 fe4b 	bl	17f7c <__aeabi_d2f>
   142e6:	4603      	mov	r3, r0
   142e8:	4630      	mov	r0, r6
   142ea:	4619      	mov	r1, r3
   142ec:	f000 fa04 	bl	146f8 <fly_to_xy>
   142f0:	6838      	ldr	r0, [r7, #0]
   142f2:	f003 fb0d 	bl	17910 <__aeabi_f2d>
   142f6:	4602      	mov	r2, r0
   142f8:	460b      	mov	r3, r1
   142fa:	a189      	add	r1, pc, #548	; (adr r1, 14520 <auto_nav+0x21b0>)
   142fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   14300:	f003 f9a6 	bl	17650 <__aeabi_dsub>
   14304:	4602      	mov	r2, r0
   14306:	460b      	mov	r3, r1
   14308:	4610      	mov	r0, r2
   1430a:	4619      	mov	r1, r3
   1430c:	a386      	add	r3, pc, #536	; (adr r3, 14528 <auto_nav+0x21b8>)
   1430e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14312:	f003 fc7b 	bl	17c0c <__aeabi_ddiv>
   14316:	4602      	mov	r2, r0
   14318:	460b      	mov	r3, r1
   1431a:	4610      	mov	r0, r2
   1431c:	4619      	mov	r1, r3
   1431e:	f04f 0200 	mov.w	r2, #0
   14322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14326:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1432a:	f003 fb45 	bl	179b8 <__aeabi_dmul>
   1432e:	4602      	mov	r2, r0
   14330:	460b      	mov	r3, r1
   14332:	4610      	mov	r0, r2
   14334:	4619      	mov	r1, r3
   14336:	f003 fe21 	bl	17f7c <__aeabi_d2f>
   1433a:	4602      	mov	r2, r0
   1433c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14344:	601a      	str	r2, [r3, #0]
   14346:	e012      	b.n	1436e <auto_nav+0x1ffe>
   14348:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1434c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14350:	681b      	ldr	r3, [r3, #0]
   14352:	4618      	mov	r0, r3
   14354:	f04f 0100 	mov.w	r1, #0
   14358:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1435c:	f003 fe64 	bl	18028 <__addsf3>
   14360:	4603      	mov	r3, r0
   14362:	461a      	mov	r2, r3
   14364:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436c:	601a      	str	r2, [r3, #0]
   1436e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   14372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14376:	681b      	ldr	r3, [r3, #0]
   14378:	4618      	mov	r0, r3
   1437a:	f04f 0100 	mov.w	r1, #0
   1437e:	f004 f8f9 	bl	18574 <__aeabi_fcmplt>
   14382:	4603      	mov	r3, r0
   14384:	2b00      	cmp	r3, #0
   14386:	d1df      	bne.n	14348 <auto_nav+0x1fd8>
   14388:	e012      	b.n	143b0 <auto_nav+0x2040>
   1438a:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1438e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14392:	681b      	ldr	r3, [r3, #0]
   14394:	4618      	mov	r0, r3
   14396:	f04f 0100 	mov.w	r1, #0
   1439a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1439e:	f003 fe41 	bl	18024 <__aeabi_fsub>
   143a2:	4603      	mov	r3, r0
   143a4:	461a      	mov	r2, r3
   143a6:	f24c 235c 	movw	r3, #49756	; 0xc25c
   143aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ae:	601a      	str	r2, [r3, #0]
   143b0:	f24c 235c 	movw	r3, #49756	; 0xc25c
   143b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b8:	681b      	ldr	r3, [r3, #0]
   143ba:	4618      	mov	r0, r3
   143bc:	f04f 0100 	mov.w	r1, #0
   143c0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   143c4:	f004 f8ea 	bl	1859c <__aeabi_fcmpge>
   143c8:	4603      	mov	r3, r0
   143ca:	2b00      	cmp	r3, #0
   143cc:	d1dd      	bne.n	1438a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   143ce:	f24c 235c 	movw	r3, #49756	; 0xc25c
   143d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d6:	681b      	ldr	r3, [r3, #0]
   143d8:	4618      	mov	r0, r3
   143da:	f04f 0100 	mov.w	r1, #0
   143de:	f2c4 3134 	movt	r1, #17204	; 0x4334
   143e2:	f004 f8e5 	bl	185b0 <__aeabi_fcmpgt>
   143e6:	4603      	mov	r3, r0
   143e8:	2b00      	cmp	r3, #0
   143ea:	d100      	bne.n	143ee <auto_nav+0x207e>
          return;
   143ec:	e092      	b.n	14514 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   143ee:	f24c 235c 	movw	r3, #49756	; 0xc25c
   143f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f6:	681b      	ldr	r3, [r3, #0]
   143f8:	4618      	mov	r0, r3
   143fa:	f04f 0100 	mov.w	r1, #0
   143fe:	f2c4 313e 	movt	r1, #17214	; 0x433e
   14402:	f004 f8b7 	bl	18574 <__aeabi_fcmplt>
   14406:	4603      	mov	r3, r0
   14408:	2b00      	cmp	r3, #0
   1440a:	d100      	bne.n	1440e <auto_nav+0x209e>
          return;
   1440c:	e082      	b.n	14514 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1440e:	f24c 2340 	movw	r3, #49728	; 0xc240
   14412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14416:	781b      	ldrb	r3, [r3, #0]
   14418:	3301      	adds	r3, #1
   1441a:	b2da      	uxtb	r2, r3
   1441c:	f24c 2340 	movw	r3, #49728	; 0xc240
   14420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14424:	701a      	strb	r2, [r3, #0]
   14426:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1442a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1442e:	681a      	ldr	r2, [r3, #0]
   14430:	f24c 2344 	movw	r3, #49732	; 0xc244
   14434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14438:	601a      	str	r2, [r3, #0]
   1443a:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1443e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14442:	681a      	ldr	r2, [r3, #0]
   14444:	f24c 2348 	movw	r3, #49736	; 0xc248
   14448:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1444c:	601a      	str	r2, [r3, #0]
   1444e:	f24c 2354 	movw	r3, #49748	; 0xc254
   14452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14456:	2200      	movs	r2, #0
   14458:	801a      	strh	r2, [r3, #0]
   1445a:	f24c 2358 	movw	r3, #49752	; 0xc258
   1445e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14462:	f04f 0200 	mov.w	r2, #0
   14466:	601a      	str	r2, [r3, #0]
   14468:	e054      	b.n	14514 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1446a:	f24c 2340 	movw	r3, #49728	; 0xc240
   1446e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14472:	781b      	ldrb	r3, [r3, #0]
   14474:	2b03      	cmp	r3, #3
   14476:	d106      	bne.n	14486 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14478:	f24c 2340 	movw	r3, #49728	; 0xc240
   1447c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14480:	2203      	movs	r2, #3
   14482:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14484:	e44b      	b.n	13d1e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14486:	f24c 2340 	movw	r3, #49728	; 0xc240
   1448a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1448e:	781b      	ldrb	r3, [r3, #0]
   14490:	2b04      	cmp	r3, #4
   14492:	d13f      	bne.n	14514 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14494:	f24c 2340 	movw	r3, #49728	; 0xc240
   14498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1449c:	2204      	movs	r2, #4
   1449e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   144a0:	f24c 2341 	movw	r3, #49729	; 0xc241
   144a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a8:	781b      	ldrb	r3, [r3, #0]
   144aa:	3301      	adds	r3, #1
   144ac:	b2da      	uxtb	r2, r3
   144ae:	f24c 2341 	movw	r3, #49729	; 0xc241
   144b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144b6:	701a      	strb	r2, [r3, #0]
   144b8:	f24c 2340 	movw	r3, #49728	; 0xc240
   144bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144c0:	2200      	movs	r2, #0
   144c2:	701a      	strb	r2, [r3, #0]
   144c4:	f24c 2356 	movw	r3, #49750	; 0xc256
   144c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144cc:	2200      	movs	r2, #0
   144ce:	801a      	strh	r2, [r3, #0]
   144d0:	f24c 439c 	movw	r3, #50332	; 0xc49c
   144d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144d8:	681a      	ldr	r2, [r3, #0]
   144da:	f24c 2344 	movw	r3, #49732	; 0xc244
   144de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144e2:	601a      	str	r2, [r3, #0]
   144e4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   144e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144ec:	681a      	ldr	r2, [r3, #0]
   144ee:	f24c 2348 	movw	r3, #49736	; 0xc248
   144f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144f6:	601a      	str	r2, [r3, #0]
   144f8:	f24c 2354 	movw	r3, #49748	; 0xc254
   144fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14500:	2200      	movs	r2, #0
   14502:	801a      	strh	r2, [r3, #0]
   14504:	f24c 2358 	movw	r3, #49752	; 0xc258
   14508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1450c:	f04f 0200 	mov.w	r2, #0
   14510:	601a      	str	r2, [r3, #0]
   14512:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14514:	372c      	adds	r7, #44	; 0x2c
   14516:	46bd      	mov	sp, r7
   14518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1451a:	bf00      	nop
   1451c:	f3af 8000 	nop.w
   14520:	54442d18 	.word	0x54442d18
   14524:	3ff921fb 	.word	0x3ff921fb
   14528:	54442d18 	.word	0x54442d18
   1452c:	400921fb 	.word	0x400921fb

00014530 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14530:	b590      	push	{r4, r7, lr}
   14532:	b087      	sub	sp, #28
   14534:	af00      	add	r7, sp, #0
   14536:	4603      	mov	r3, r0
   14538:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1453a:	79f9      	ldrb	r1, [r7, #7]
   1453c:	f240 4228 	movw	r2, #1064	; 0x428
   14540:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14544:	460b      	mov	r3, r1
   14546:	005b      	lsls	r3, r3, #1
   14548:	440b      	add	r3, r1
   1454a:	009b      	lsls	r3, r3, #2
   1454c:	4413      	add	r3, r2
   1454e:	681a      	ldr	r2, [r3, #0]
   14550:	f24c 439c 	movw	r3, #50332	; 0xc49c
   14554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14558:	681b      	ldr	r3, [r3, #0]
   1455a:	4610      	mov	r0, r2
   1455c:	4619      	mov	r1, r3
   1455e:	f003 fd61 	bl	18024 <__aeabi_fsub>
   14562:	4603      	mov	r3, r0
   14564:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14566:	79f9      	ldrb	r1, [r7, #7]
   14568:	f240 4228 	movw	r2, #1064	; 0x428
   1456c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14570:	460b      	mov	r3, r1
   14572:	005b      	lsls	r3, r3, #1
   14574:	440b      	add	r3, r1
   14576:	009b      	lsls	r3, r3, #2
   14578:	4413      	add	r3, r2
   1457a:	3304      	adds	r3, #4
   1457c:	681a      	ldr	r2, [r3, #0]
   1457e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   14582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14586:	681b      	ldr	r3, [r3, #0]
   14588:	4610      	mov	r0, r2
   1458a:	4619      	mov	r1, r3
   1458c:	f003 fd4a 	bl	18024 <__aeabi_fsub>
   14590:	4603      	mov	r3, r0
   14592:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14594:	6978      	ldr	r0, [r7, #20]
   14596:	6979      	ldr	r1, [r7, #20]
   14598:	f003 fe4e 	bl	18238 <__aeabi_fmul>
   1459c:	4603      	mov	r3, r0
   1459e:	461c      	mov	r4, r3
   145a0:	6938      	ldr	r0, [r7, #16]
   145a2:	6939      	ldr	r1, [r7, #16]
   145a4:	f003 fe48 	bl	18238 <__aeabi_fmul>
   145a8:	4603      	mov	r3, r0
   145aa:	4620      	mov	r0, r4
   145ac:	4619      	mov	r1, r3
   145ae:	f003 fd3b 	bl	18028 <__addsf3>
   145b2:	4603      	mov	r3, r0
   145b4:	461a      	mov	r2, r3
   145b6:	f24c 2374 	movw	r3, #49780	; 0xc274
   145ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145be:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   145c0:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   145c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c8:	681b      	ldr	r3, [r3, #0]
   145ca:	4618      	mov	r0, r3
   145cc:	f04f 0100 	mov.w	r1, #0
   145d0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   145d4:	f003 fe30 	bl	18238 <__aeabi_fmul>
   145d8:	4603      	mov	r3, r0
   145da:	461a      	mov	r2, r3
   145dc:	f24c 2380 	movw	r3, #49792	; 0xc280
   145e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   145e6:	f24c 2380 	movw	r3, #49792	; 0xc280
   145ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ee:	681b      	ldr	r3, [r3, #0]
   145f0:	4618      	mov	r0, r3
   145f2:	f04f 0100 	mov.w	r1, #0
   145f6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   145fa:	f003 ffbb 	bl	18574 <__aeabi_fcmplt>
   145fe:	4603      	mov	r3, r0
   14600:	2b00      	cmp	r3, #0
   14602:	d004      	beq.n	1460e <approaching+0xde>
   14604:	f04f 0200 	mov.w	r2, #0
   14608:	f2c4 2220 	movt	r2, #16928	; 0x4220
   1460c:	e004      	b.n	14618 <approaching+0xe8>
   1460e:	f24c 2380 	movw	r3, #49792	; 0xc280
   14612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14616:	681a      	ldr	r2, [r3, #0]
   14618:	f24c 2380 	movw	r3, #49792	; 0xc280
   1461c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14620:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14622:	f24c 2380 	movw	r3, #49792	; 0xc280
   14626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1462a:	681a      	ldr	r2, [r3, #0]
   1462c:	f24c 2380 	movw	r3, #49792	; 0xc280
   14630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14634:	681b      	ldr	r3, [r3, #0]
   14636:	4610      	mov	r0, r2
   14638:	4619      	mov	r1, r3
   1463a:	f003 fdfd 	bl	18238 <__aeabi_fmul>
   1463e:	4603      	mov	r3, r0
   14640:	461a      	mov	r2, r3
   14642:	f24c 2374 	movw	r3, #49780	; 0xc274
   14646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1464a:	681b      	ldr	r3, [r3, #0]
   1464c:	4610      	mov	r0, r2
   1464e:	4619      	mov	r1, r3
   14650:	f003 ffae 	bl	185b0 <__aeabi_fcmpgt>
   14654:	4603      	mov	r3, r0
   14656:	2b00      	cmp	r3, #0
   14658:	d001      	beq.n	1465e <approaching+0x12e>
    return TRUE;
   1465a:	2301      	movs	r3, #1
   1465c:	e048      	b.n	146f0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1465e:	79f9      	ldrb	r1, [r7, #7]
   14660:	f240 4228 	movw	r2, #1064	; 0x428
   14664:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14668:	460b      	mov	r3, r1
   1466a:	005b      	lsls	r3, r3, #1
   1466c:	440b      	add	r3, r1
   1466e:	009b      	lsls	r3, r3, #2
   14670:	4413      	add	r3, r2
   14672:	681a      	ldr	r2, [r3, #0]
   14674:	f24c 2344 	movw	r3, #49732	; 0xc244
   14678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467c:	681b      	ldr	r3, [r3, #0]
   1467e:	4610      	mov	r0, r2
   14680:	4619      	mov	r1, r3
   14682:	f003 fccf 	bl	18024 <__aeabi_fsub>
   14686:	4603      	mov	r3, r0
   14688:	4618      	mov	r0, r3
   1468a:	6979      	ldr	r1, [r7, #20]
   1468c:	f003 fdd4 	bl	18238 <__aeabi_fmul>
   14690:	4603      	mov	r3, r0
   14692:	461c      	mov	r4, r3
   14694:	79f9      	ldrb	r1, [r7, #7]
   14696:	f240 4228 	movw	r2, #1064	; 0x428
   1469a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1469e:	460b      	mov	r3, r1
   146a0:	005b      	lsls	r3, r3, #1
   146a2:	440b      	add	r3, r1
   146a4:	009b      	lsls	r3, r3, #2
   146a6:	4413      	add	r3, r2
   146a8:	3304      	adds	r3, #4
   146aa:	681a      	ldr	r2, [r3, #0]
   146ac:	f24c 2348 	movw	r3, #49736	; 0xc248
   146b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	4610      	mov	r0, r2
   146b8:	4619      	mov	r1, r3
   146ba:	f003 fcb3 	bl	18024 <__aeabi_fsub>
   146be:	4603      	mov	r3, r0
   146c0:	4618      	mov	r0, r3
   146c2:	6939      	ldr	r1, [r7, #16]
   146c4:	f003 fdb8 	bl	18238 <__aeabi_fmul>
   146c8:	4603      	mov	r3, r0
   146ca:	4620      	mov	r0, r4
   146cc:	4619      	mov	r1, r3
   146ce:	f003 fcab 	bl	18028 <__addsf3>
   146d2:	4603      	mov	r3, r0
   146d4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   146d6:	2301      	movs	r3, #1
   146d8:	461c      	mov	r4, r3
   146da:	68f8      	ldr	r0, [r7, #12]
   146dc:	f04f 0100 	mov.w	r1, #0
   146e0:	f003 ff48 	bl	18574 <__aeabi_fcmplt>
   146e4:	4603      	mov	r3, r0
   146e6:	2b00      	cmp	r3, #0
   146e8:	d101      	bne.n	146ee <approaching+0x1be>
   146ea:	2300      	movs	r3, #0
   146ec:	461c      	mov	r4, r3
   146ee:	b2e3      	uxtb	r3, r4
}
   146f0:	4618      	mov	r0, r3
   146f2:	371c      	adds	r7, #28
   146f4:	46bd      	mov	sp, r7
   146f6:	bd90      	pop	{r4, r7, pc}

000146f8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   146f8:	b5b0      	push	{r4, r5, r7, lr}
   146fa:	b082      	sub	sp, #8
   146fc:	af00      	add	r7, sp, #0
   146fe:	6078      	str	r0, [r7, #4]
   14700:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14702:	f24c 2360 	movw	r3, #49760	; 0xc260
   14706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470a:	687a      	ldr	r2, [r7, #4]
   1470c:	601a      	str	r2, [r3, #0]
  desired_y = y;
   1470e:	f24c 2364 	movw	r3, #49764	; 0xc264
   14712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14716:	683a      	ldr	r2, [r7, #0]
   14718:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1471a:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1471e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14722:	681b      	ldr	r3, [r3, #0]
   14724:	6838      	ldr	r0, [r7, #0]
   14726:	4619      	mov	r1, r3
   14728:	f003 fc7c 	bl	18024 <__aeabi_fsub>
   1472c:	4603      	mov	r3, r0
   1472e:	4618      	mov	r0, r3
   14730:	f003 f8ee 	bl	17910 <__aeabi_f2d>
   14734:	4604      	mov	r4, r0
   14736:	460d      	mov	r5, r1
   14738:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1473c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14740:	681b      	ldr	r3, [r3, #0]
   14742:	6878      	ldr	r0, [r7, #4]
   14744:	4619      	mov	r1, r3
   14746:	f003 fc6d 	bl	18024 <__aeabi_fsub>
   1474a:	4603      	mov	r3, r0
   1474c:	4618      	mov	r0, r3
   1474e:	f003 f8df 	bl	17910 <__aeabi_f2d>
   14752:	4602      	mov	r2, r0
   14754:	460b      	mov	r3, r1
   14756:	4620      	mov	r0, r4
   14758:	4629      	mov	r1, r5
   1475a:	f001 f929 	bl	159b0 <pp_atan2>
   1475e:	4602      	mov	r2, r0
   14760:	460b      	mov	r3, r1
   14762:	a10b      	add	r1, pc, #44	; (adr r1, 14790 <fly_to_xy+0x98>)
   14764:	e9d1 0100 	ldrd	r0, r1, [r1]
   14768:	f002 ff72 	bl	17650 <__aeabi_dsub>
   1476c:	4602      	mov	r2, r0
   1476e:	460b      	mov	r3, r1
   14770:	4610      	mov	r0, r2
   14772:	4619      	mov	r1, r3
   14774:	f003 fc02 	bl	17f7c <__aeabi_d2f>
   14778:	4602      	mov	r2, r0
   1477a:	f24c 232c 	movw	r3, #49708	; 0xc22c
   1477e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14782:	601a      	str	r2, [r3, #0]
}
   14784:	3708      	adds	r7, #8
   14786:	46bd      	mov	sp, r7
   14788:	bdb0      	pop	{r4, r5, r7, pc}
   1478a:	bf00      	nop
   1478c:	f3af 8000 	nop.w
   14790:	54442d18 	.word	0x54442d18
   14794:	3ff921fb 	.word	0x3ff921fb

00014798 <fly_to>:

static void fly_to(uint8_t wp) { 
   14798:	b580      	push	{r7, lr}
   1479a:	b082      	sub	sp, #8
   1479c:	af00      	add	r7, sp, #0
   1479e:	4603      	mov	r3, r0
   147a0:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   147a2:	79f9      	ldrb	r1, [r7, #7]
   147a4:	f240 4228 	movw	r2, #1064	; 0x428
   147a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147ac:	460b      	mov	r3, r1
   147ae:	005b      	lsls	r3, r3, #1
   147b0:	440b      	add	r3, r1
   147b2:	009b      	lsls	r3, r3, #2
   147b4:	4413      	add	r3, r2
   147b6:	6818      	ldr	r0, [r3, #0]
   147b8:	79f9      	ldrb	r1, [r7, #7]
   147ba:	f240 4228 	movw	r2, #1064	; 0x428
   147be:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147c2:	460b      	mov	r3, r1
   147c4:	005b      	lsls	r3, r3, #1
   147c6:	440b      	add	r3, r1
   147c8:	009b      	lsls	r3, r3, #2
   147ca:	4413      	add	r3, r2
   147cc:	3304      	adds	r3, #4
   147ce:	681b      	ldr	r3, [r3, #0]
   147d0:	4619      	mov	r1, r3
   147d2:	f7ff ff91 	bl	146f8 <fly_to_xy>
}
   147d6:	3708      	adds	r7, #8
   147d8:	46bd      	mov	sp, r7
   147da:	bd80      	pop	{r7, pc}

000147dc <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   147dc:	b5b0      	push	{r4, r5, r7, lr}
   147de:	b088      	sub	sp, #32
   147e0:	af00      	add	r7, sp, #0
   147e2:	4602      	mov	r2, r0
   147e4:	460b      	mov	r3, r1
   147e6:	71fa      	strb	r2, [r7, #7]
   147e8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   147ea:	79f9      	ldrb	r1, [r7, #7]
   147ec:	f240 4228 	movw	r2, #1064	; 0x428
   147f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147f4:	460b      	mov	r3, r1
   147f6:	005b      	lsls	r3, r3, #1
   147f8:	440b      	add	r3, r1
   147fa:	009b      	lsls	r3, r3, #2
   147fc:	4413      	add	r3, r2
   147fe:	681b      	ldr	r3, [r3, #0]
   14800:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14802:	79f9      	ldrb	r1, [r7, #7]
   14804:	f240 4228 	movw	r2, #1064	; 0x428
   14808:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1480c:	460b      	mov	r3, r1
   1480e:	005b      	lsls	r3, r3, #1
   14810:	440b      	add	r3, r1
   14812:	009b      	lsls	r3, r3, #2
   14814:	4413      	add	r3, r2
   14816:	3304      	adds	r3, #4
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   1481c:	79b9      	ldrb	r1, [r7, #6]
   1481e:	f240 4228 	movw	r2, #1064	; 0x428
   14822:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14826:	460b      	mov	r3, r1
   14828:	005b      	lsls	r3, r3, #1
   1482a:	440b      	add	r3, r1
   1482c:	009b      	lsls	r3, r3, #2
   1482e:	4413      	add	r3, r2
   14830:	681b      	ldr	r3, [r3, #0]
   14832:	4618      	mov	r0, r3
   14834:	69f9      	ldr	r1, [r7, #28]
   14836:	f003 fbf5 	bl	18024 <__aeabi_fsub>
   1483a:	4603      	mov	r3, r0
   1483c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1483e:	79b9      	ldrb	r1, [r7, #6]
   14840:	f240 4228 	movw	r2, #1064	; 0x428
   14844:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14848:	460b      	mov	r3, r1
   1484a:	005b      	lsls	r3, r3, #1
   1484c:	440b      	add	r3, r1
   1484e:	009b      	lsls	r3, r3, #2
   14850:	4413      	add	r3, r2
   14852:	3304      	adds	r3, #4
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	4618      	mov	r0, r3
   14858:	69b9      	ldr	r1, [r7, #24]
   1485a:	f003 fbe3 	bl	18024 <__aeabi_fsub>
   1485e:	4603      	mov	r3, r0
   14860:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14862:	6978      	ldr	r0, [r7, #20]
   14864:	6979      	ldr	r1, [r7, #20]
   14866:	f003 fce7 	bl	18238 <__aeabi_fmul>
   1486a:	4603      	mov	r3, r0
   1486c:	461c      	mov	r4, r3
   1486e:	6938      	ldr	r0, [r7, #16]
   14870:	6939      	ldr	r1, [r7, #16]
   14872:	f003 fce1 	bl	18238 <__aeabi_fmul>
   14876:	4603      	mov	r3, r0
   14878:	4620      	mov	r0, r4
   1487a:	4619      	mov	r1, r3
   1487c:	f003 fbd4 	bl	18028 <__addsf3>
   14880:	4603      	mov	r3, r0
   14882:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14884:	f24c 439c 	movw	r3, #50332	; 0xc49c
   14888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1488c:	681b      	ldr	r3, [r3, #0]
   1488e:	4618      	mov	r0, r3
   14890:	69f9      	ldr	r1, [r7, #28]
   14892:	f003 fbc7 	bl	18024 <__aeabi_fsub>
   14896:	4603      	mov	r3, r0
   14898:	4618      	mov	r0, r3
   1489a:	6979      	ldr	r1, [r7, #20]
   1489c:	f003 fccc 	bl	18238 <__aeabi_fmul>
   148a0:	4603      	mov	r3, r0
   148a2:	461c      	mov	r4, r3
   148a4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   148a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ac:	681b      	ldr	r3, [r3, #0]
   148ae:	4618      	mov	r0, r3
   148b0:	69b9      	ldr	r1, [r7, #24]
   148b2:	f003 fbb7 	bl	18024 <__aeabi_fsub>
   148b6:	4603      	mov	r3, r0
   148b8:	4618      	mov	r0, r3
   148ba:	6939      	ldr	r1, [r7, #16]
   148bc:	f003 fcbc 	bl	18238 <__aeabi_fmul>
   148c0:	4603      	mov	r3, r0
   148c2:	4620      	mov	r0, r4
   148c4:	4619      	mov	r1, r3
   148c6:	f003 fbaf 	bl	18028 <__addsf3>
   148ca:	4603      	mov	r3, r0
   148cc:	4618      	mov	r0, r3
   148ce:	68f9      	ldr	r1, [r7, #12]
   148d0:	f003 fd66 	bl	183a0 <__aeabi_fdiv>
   148d4:	4603      	mov	r3, r0
   148d6:	461a      	mov	r2, r3
   148d8:	f24c 2384 	movw	r3, #49796	; 0xc284
   148dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148e0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   148e2:	f24c 2384 	movw	r3, #49796	; 0xc284
   148e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ea:	681b      	ldr	r3, [r3, #0]
   148ec:	4618      	mov	r0, r3
   148ee:	f04f 0100 	mov.w	r1, #0
   148f2:	f003 fe53 	bl	1859c <__aeabi_fcmpge>
   148f6:	4603      	mov	r3, r0
   148f8:	2b00      	cmp	r3, #0
   148fa:	d005      	beq.n	14908 <route_to+0x12c>
   148fc:	f24c 2384 	movw	r3, #49796	; 0xc284
   14900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14904:	681a      	ldr	r2, [r3, #0]
   14906:	e001      	b.n	1490c <route_to+0x130>
   14908:	f04f 0200 	mov.w	r2, #0
   1490c:	f24c 2384 	movw	r3, #49796	; 0xc284
   14910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14914:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14916:	68f8      	ldr	r0, [r7, #12]
   14918:	f002 fffa 	bl	17910 <__aeabi_f2d>
   1491c:	4602      	mov	r2, r0
   1491e:	460b      	mov	r3, r1
   14920:	4610      	mov	r0, r2
   14922:	4619      	mov	r1, r3
   14924:	f001 f9f4 	bl	15d10 <pp_sqrt>
   14928:	4602      	mov	r2, r0
   1492a:	460b      	mov	r3, r1
   1492c:	4610      	mov	r0, r2
   1492e:	4619      	mov	r1, r3
   14930:	f003 fb24 	bl	17f7c <__aeabi_d2f>
   14934:	4602      	mov	r2, r0
   14936:	f24c 2388 	movw	r3, #49800	; 0xc288
   1493a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1493e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14940:	f24c 2384 	movw	r3, #49796	; 0xc284
   14944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14948:	681b      	ldr	r3, [r3, #0]
   1494a:	4618      	mov	r0, r3
   1494c:	f002 ffe0 	bl	17910 <__aeabi_f2d>
   14950:	4604      	mov	r4, r0
   14952:	460d      	mov	r5, r1
   14954:	f24c 2380 	movw	r3, #49792	; 0xc280
   14958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1495c:	681a      	ldr	r2, [r3, #0]
   1495e:	f24c 2388 	movw	r3, #49800	; 0xc288
   14962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14966:	681b      	ldr	r3, [r3, #0]
   14968:	4610      	mov	r0, r2
   1496a:	4619      	mov	r1, r3
   1496c:	f003 fd18 	bl	183a0 <__aeabi_fdiv>
   14970:	4603      	mov	r3, r0
   14972:	4618      	mov	r0, r3
   14974:	f04f 0100 	mov.w	r1, #0
   14978:	f003 fe10 	bl	1859c <__aeabi_fcmpge>
   1497c:	4603      	mov	r3, r0
   1497e:	2b00      	cmp	r3, #0
   14980:	d014      	beq.n	149ac <route_to+0x1d0>
   14982:	f24c 2380 	movw	r3, #49792	; 0xc280
   14986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1498a:	681a      	ldr	r2, [r3, #0]
   1498c:	f24c 2388 	movw	r3, #49800	; 0xc288
   14990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14994:	681b      	ldr	r3, [r3, #0]
   14996:	4610      	mov	r0, r2
   14998:	4619      	mov	r1, r3
   1499a:	f003 fd01 	bl	183a0 <__aeabi_fdiv>
   1499e:	4603      	mov	r3, r0
   149a0:	4618      	mov	r0, r3
   149a2:	f002 ffb5 	bl	17910 <__aeabi_f2d>
   149a6:	4602      	mov	r2, r0
   149a8:	460b      	mov	r3, r1
   149aa:	e003      	b.n	149b4 <route_to+0x1d8>
   149ac:	f04f 0200 	mov.w	r2, #0
   149b0:	f04f 0300 	mov.w	r3, #0
   149b4:	4620      	mov	r0, r4
   149b6:	4629      	mov	r1, r5
   149b8:	f002 fe4c 	bl	17654 <__adddf3>
   149bc:	4602      	mov	r2, r0
   149be:	460b      	mov	r3, r1
   149c0:	4610      	mov	r0, r2
   149c2:	4619      	mov	r1, r3
   149c4:	f003 fada 	bl	17f7c <__aeabi_d2f>
   149c8:	4602      	mov	r2, r0
   149ca:	f24c 2384 	movw	r3, #49796	; 0xc284
   149ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   149d4:	f24c 2384 	movw	r3, #49796	; 0xc284
   149d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149dc:	681b      	ldr	r3, [r3, #0]
   149de:	4618      	mov	r0, r3
   149e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   149e4:	f003 fdda 	bl	1859c <__aeabi_fcmpge>
   149e8:	4603      	mov	r3, r0
   149ea:	2b00      	cmp	r3, #0
   149ec:	d002      	beq.n	149f4 <route_to+0x218>
   149ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   149f2:	e004      	b.n	149fe <route_to+0x222>
   149f4:	f24c 2384 	movw	r3, #49796	; 0xc284
   149f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149fc:	681a      	ldr	r2, [r3, #0]
   149fe:	f24c 2384 	movw	r3, #49796	; 0xc284
   14a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a06:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14a08:	f24c 2384 	movw	r3, #49796	; 0xc284
   14a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	4618      	mov	r0, r3
   14a14:	6979      	ldr	r1, [r7, #20]
   14a16:	f003 fc0f 	bl	18238 <__aeabi_fmul>
   14a1a:	4603      	mov	r3, r0
   14a1c:	4618      	mov	r0, r3
   14a1e:	69f9      	ldr	r1, [r7, #28]
   14a20:	f003 fb02 	bl	18028 <__addsf3>
   14a24:	4603      	mov	r3, r0
   14a26:	461c      	mov	r4, r3
   14a28:	f24c 2384 	movw	r3, #49796	; 0xc284
   14a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a30:	681b      	ldr	r3, [r3, #0]
   14a32:	4618      	mov	r0, r3
   14a34:	6939      	ldr	r1, [r7, #16]
   14a36:	f003 fbff 	bl	18238 <__aeabi_fmul>
   14a3a:	4603      	mov	r3, r0
   14a3c:	4618      	mov	r0, r3
   14a3e:	69b9      	ldr	r1, [r7, #24]
   14a40:	f003 faf2 	bl	18028 <__addsf3>
   14a44:	4603      	mov	r3, r0
   14a46:	4620      	mov	r0, r4
   14a48:	4619      	mov	r1, r3
   14a4a:	f7ff fe55 	bl	146f8 <fly_to_xy>
}
   14a4e:	3720      	adds	r7, #32
   14a50:	46bd      	mov	sp, r7
   14a52:	bdb0      	pop	{r4, r5, r7, pc}

00014a54 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14a54:	b590      	push	{r4, r7, lr}
   14a56:	b083      	sub	sp, #12
   14a58:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14a5a:	f240 4328 	movw	r3, #1064	; 0x428
   14a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a62:	681a      	ldr	r2, [r3, #0]
   14a64:	f24c 439c 	movw	r3, #50332	; 0xc49c
   14a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	4610      	mov	r0, r2
   14a70:	4619      	mov	r1, r3
   14a72:	f003 fad7 	bl	18024 <__aeabi_fsub>
   14a76:	4603      	mov	r3, r0
   14a78:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14a7a:	f240 4328 	movw	r3, #1064	; 0x428
   14a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a82:	685a      	ldr	r2, [r3, #4]
   14a84:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   14a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a8c:	681b      	ldr	r3, [r3, #0]
   14a8e:	4610      	mov	r0, r2
   14a90:	4619      	mov	r1, r3
   14a92:	f003 fac7 	bl	18024 <__aeabi_fsub>
   14a96:	4603      	mov	r3, r0
   14a98:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14a9a:	6878      	ldr	r0, [r7, #4]
   14a9c:	6879      	ldr	r1, [r7, #4]
   14a9e:	f003 fbcb 	bl	18238 <__aeabi_fmul>
   14aa2:	4603      	mov	r3, r0
   14aa4:	461c      	mov	r4, r3
   14aa6:	6838      	ldr	r0, [r7, #0]
   14aa8:	6839      	ldr	r1, [r7, #0]
   14aaa:	f003 fbc5 	bl	18238 <__aeabi_fmul>
   14aae:	4603      	mov	r3, r0
   14ab0:	4620      	mov	r0, r4
   14ab2:	4619      	mov	r1, r3
   14ab4:	f003 fab8 	bl	18028 <__addsf3>
   14ab8:	4603      	mov	r3, r0
   14aba:	461a      	mov	r2, r3
   14abc:	f24c 2378 	movw	r3, #49784	; 0xc278
   14ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ac4:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14ac6:	f24c 2378 	movw	r3, #49784	; 0xc278
   14aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ace:	681b      	ldr	r3, [r3, #0]
   14ad0:	2201      	movs	r2, #1
   14ad2:	4614      	mov	r4, r2
   14ad4:	4618      	mov	r0, r3
   14ad6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14ada:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14ade:	f003 fd67 	bl	185b0 <__aeabi_fcmpgt>
   14ae2:	4603      	mov	r3, r0
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d101      	bne.n	14aec <compute_dist2_to_home+0x98>
   14ae8:	2300      	movs	r3, #0
   14aea:	461c      	mov	r4, r3
   14aec:	b2e3      	uxtb	r3, r4
   14aee:	461a      	mov	r2, r3
   14af0:	f24c 237c 	movw	r3, #49788	; 0xc27c
   14af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14af8:	701a      	strb	r2, [r3, #0]
}
   14afa:	370c      	adds	r7, #12
   14afc:	46bd      	mov	sp, r7
   14afe:	bd90      	pop	{r4, r7, pc}

00014b00 <nav_home>:

void nav_home(void) {
   14b00:	b580      	push	{r7, lr}
   14b02:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14b04:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b0c:	f04f 0200 	mov.w	r2, #0
   14b10:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14b12:	f64b 63cd 	movw	r3, #48845	; 0xbecd
   14b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b1a:	2203      	movs	r2, #3
   14b1c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14b1e:	f240 4324 	movw	r3, #1060	; 0x424
   14b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b26:	f04f 0200 	mov.w	r2, #0
   14b2a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14b2e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14b30:	f7ff ff90 	bl	14a54 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14b34:	f24c 2378 	movw	r3, #49784	; 0xc278
   14b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b3c:	681a      	ldr	r2, [r3, #0]
   14b3e:	f24c 2374 	movw	r3, #49780	; 0xc274
   14b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b46:	601a      	str	r2, [r3, #0]
}
   14b48:	bd80      	pop	{r7, pc}
   14b4a:	bf00      	nop

00014b4c <nav_update>:

void nav_update(void) {
   14b4c:	b580      	push	{r7, lr}
   14b4e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14b50:	f7ff ff80 	bl	14a54 <compute_dist2_to_home>

  auto_nav();
   14b54:	f7fd fc0c 	bl	12370 <auto_nav>
}
   14b58:	bd80      	pop	{r7, pc}
   14b5a:	bf00      	nop

00014b5c <nav_init>:


void nav_init(void) {
   14b5c:	b480      	push	{r7}
   14b5e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14b60:	f24c 2341 	movw	r3, #49729	; 0xc241
   14b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b68:	2200      	movs	r2, #0
   14b6a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14b6c:	f24c 2340 	movw	r3, #49728	; 0xc240
   14b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b74:	2200      	movs	r2, #0
   14b76:	701a      	strb	r2, [r3, #0]
}
   14b78:	46bd      	mov	sp, r7
   14b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b7e:	4770      	bx	lr

00014b80 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14b80:	b480      	push	{r7}
   14b82:	b083      	sub	sp, #12
   14b84:	af00      	add	r7, sp, #0
   14b86:	4603      	mov	r3, r0
   14b88:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14b8a:	f242 030a 	movw	r3, #8202	; 0x200a
   14b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b92:	781b      	ldrb	r3, [r3, #0]
   14b94:	b2db      	uxtb	r3, r3
   14b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d028      	beq.n	14bf0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14b9e:	f24c 2395 	movw	r3, #49813	; 0xc295
   14ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba6:	781b      	ldrb	r3, [r3, #0]
   14ba8:	b2db      	uxtb	r3, r3
   14baa:	461a      	mov	r2, r3
   14bac:	f24c 2394 	movw	r3, #49812	; 0xc294
   14bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb4:	781b      	ldrb	r3, [r3, #0]
   14bb6:	3301      	adds	r3, #1
   14bb8:	429a      	cmp	r2, r3
   14bba:	d100      	bne.n	14bbe <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14bbc:	e02c      	b.n	14c18 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14bbe:	f24c 2394 	movw	r3, #49812	; 0xc294
   14bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc6:	781b      	ldrb	r3, [r3, #0]
   14bc8:	461a      	mov	r2, r3
   14bca:	f24c 2398 	movw	r3, #49816	; 0xc298
   14bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bd2:	79f9      	ldrb	r1, [r7, #7]
   14bd4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14bd6:	f24c 2394 	movw	r3, #49812	; 0xc294
   14bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bde:	781b      	ldrb	r3, [r3, #0]
   14be0:	3301      	adds	r3, #1
   14be2:	b2da      	uxtb	r2, r3
   14be4:	f24c 2394 	movw	r3, #49812	; 0xc294
   14be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bec:	701a      	strb	r2, [r3, #0]
   14bee:	e013      	b.n	14c18 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14bf0:	f242 030c 	movw	r3, #8204	; 0x200c
   14bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf8:	79fa      	ldrb	r2, [r7, #7]
   14bfa:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14bfc:	f242 030a 	movw	r3, #8202	; 0x200a
   14c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c04:	f242 020a 	movw	r2, #8202	; 0x200a
   14c08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c0c:	7812      	ldrb	r2, [r2, #0]
   14c0e:	b2d2      	uxtb	r2, r2
   14c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14c14:	b2d2      	uxtb	r2, r2
   14c16:	701a      	strb	r2, [r3, #0]
  }
}
   14c18:	370c      	adds	r7, #12
   14c1a:	46bd      	mov	sp, r7
   14c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c20:	4770      	bx	lr
   14c22:	bf00      	nop

00014c24 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14c24:	b480      	push	{r7}
   14c26:	b083      	sub	sp, #12
   14c28:	af00      	add	r7, sp, #0
   14c2a:	4603      	mov	r3, r0
   14c2c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14c2e:	f242 039a 	movw	r3, #8346	; 0x209a
   14c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c36:	781b      	ldrb	r3, [r3, #0]
   14c38:	b2db      	uxtb	r3, r3
   14c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d028      	beq.n	14c94 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14c42:	f24c 3399 	movw	r3, #50073	; 0xc399
   14c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c4a:	781b      	ldrb	r3, [r3, #0]
   14c4c:	b2db      	uxtb	r3, r3
   14c4e:	461a      	mov	r2, r3
   14c50:	f24c 3398 	movw	r3, #50072	; 0xc398
   14c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c58:	781b      	ldrb	r3, [r3, #0]
   14c5a:	3301      	adds	r3, #1
   14c5c:	429a      	cmp	r2, r3
   14c5e:	d100      	bne.n	14c62 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14c60:	e02c      	b.n	14cbc <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14c62:	f24c 3398 	movw	r3, #50072	; 0xc398
   14c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c6a:	781b      	ldrb	r3, [r3, #0]
   14c6c:	461a      	mov	r2, r3
   14c6e:	f24c 339c 	movw	r3, #50076	; 0xc39c
   14c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c76:	79f9      	ldrb	r1, [r7, #7]
   14c78:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14c7a:	f24c 3398 	movw	r3, #50072	; 0xc398
   14c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c82:	781b      	ldrb	r3, [r3, #0]
   14c84:	3301      	adds	r3, #1
   14c86:	b2da      	uxtb	r2, r3
   14c88:	f24c 3398 	movw	r3, #50072	; 0xc398
   14c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c90:	701a      	strb	r2, [r3, #0]
   14c92:	e013      	b.n	14cbc <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14c94:	f242 039c 	movw	r3, #8348	; 0x209c
   14c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c9c:	79fa      	ldrb	r2, [r7, #7]
   14c9e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14ca0:	f242 039a 	movw	r3, #8346	; 0x209a
   14ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca8:	f242 029a 	movw	r2, #8346	; 0x209a
   14cac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14cb0:	7812      	ldrb	r2, [r2, #0]
   14cb2:	b2d2      	uxtb	r2, r2
   14cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14cb8:	b2d2      	uxtb	r2, r2
   14cba:	701a      	strb	r2, [r3, #0]
  }
}
   14cbc:	370c      	adds	r7, #12
   14cbe:	46bd      	mov	sp, r7
   14cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cc4:	4770      	bx	lr
   14cc6:	bf00      	nop

00014cc8 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14cc8:	b580      	push	{r7, lr}
   14cca:	b084      	sub	sp, #16
   14ccc:	af00      	add	r7, sp, #0
   14cce:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14cd0:	2300      	movs	r3, #0
   14cd2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14cd4:	e009      	b.n	14cea <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14cd6:	7bfb      	ldrb	r3, [r7, #15]
   14cd8:	687a      	ldr	r2, [r7, #4]
   14cda:	4413      	add	r3, r2
   14cdc:	781b      	ldrb	r3, [r3, #0]
   14cde:	4618      	mov	r0, r3
   14ce0:	f7ff ff4e 	bl	14b80 <uart0_transmit>
    i++;
   14ce4:	7bfb      	ldrb	r3, [r7, #15]
   14ce6:	3301      	adds	r3, #1
   14ce8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14cea:	7bfb      	ldrb	r3, [r7, #15]
   14cec:	687a      	ldr	r2, [r7, #4]
   14cee:	4413      	add	r3, r2
   14cf0:	781b      	ldrb	r3, [r3, #0]
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	d1ef      	bne.n	14cd6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14cf6:	3710      	adds	r7, #16
   14cf8:	46bd      	mov	sp, r7
   14cfa:	bd80      	pop	{r7, pc}

00014cfc <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14cfc:	b590      	push	{r4, r7, lr}
   14cfe:	b089      	sub	sp, #36	; 0x24
   14d00:	af00      	add	r7, sp, #0
   14d02:	4603      	mov	r3, r0
   14d04:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14d06:	f648 03c8 	movw	r3, #35016	; 0x88c8
   14d0a:	f2c0 0301 	movt	r3, #1
   14d0e:	f107 040c 	add.w	r4, r7, #12
   14d12:	6818      	ldr	r0, [r3, #0]
   14d14:	6859      	ldr	r1, [r3, #4]
   14d16:	689a      	ldr	r2, [r3, #8]
   14d18:	68db      	ldr	r3, [r3, #12]
   14d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14d1c:	79fb      	ldrb	r3, [r7, #7]
   14d1e:	091b      	lsrs	r3, r3, #4
   14d20:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14d22:	79fb      	ldrb	r3, [r7, #7]
   14d24:	f003 030f 	and.w	r3, r3, #15
   14d28:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14d2a:	230f      	movs	r3, #15
   14d2c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14d2e:	230f      	movs	r3, #15
   14d30:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14d32:	7ffb      	ldrb	r3, [r7, #31]
   14d34:	f107 0220 	add.w	r2, r7, #32
   14d38:	4413      	add	r3, r2
   14d3a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14d3e:	4618      	mov	r0, r3
   14d40:	f7ff ff1e 	bl	14b80 <uart0_transmit>
  uart0_transmit(hex[low]);
   14d44:	7fbb      	ldrb	r3, [r7, #30]
   14d46:	f107 0220 	add.w	r2, r7, #32
   14d4a:	4413      	add	r3, r2
   14d4c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14d50:	4618      	mov	r0, r3
   14d52:	f7ff ff15 	bl	14b80 <uart0_transmit>
}
   14d56:	3724      	adds	r7, #36	; 0x24
   14d58:	46bd      	mov	sp, r7
   14d5a:	bd90      	pop	{r4, r7, pc}

00014d5c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14d5c:	b480      	push	{r7}
   14d5e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14d60:	f24c 2394 	movw	r3, #49812	; 0xc294
   14d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d68:	781a      	ldrb	r2, [r3, #0]
   14d6a:	f24c 2395 	movw	r3, #49813	; 0xc295
   14d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d72:	781b      	ldrb	r3, [r3, #0]
   14d74:	b2db      	uxtb	r3, r3
   14d76:	429a      	cmp	r2, r3
   14d78:	d10e      	bne.n	14d98 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14d7a:	f242 030a 	movw	r3, #8202	; 0x200a
   14d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d82:	f242 020a 	movw	r2, #8202	; 0x200a
   14d86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d8a:	7812      	ldrb	r2, [r2, #0]
   14d8c:	b2d2      	uxtb	r2, r2
   14d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14d92:	b2d2      	uxtb	r2, r2
   14d94:	701a      	strb	r2, [r3, #0]
   14d96:	e01d      	b.n	14dd4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14d98:	f242 030c 	movw	r3, #8204	; 0x200c
   14d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14da0:	f24c 2295 	movw	r2, #49813	; 0xc295
   14da4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14da8:	7812      	ldrb	r2, [r2, #0]
   14daa:	b2d2      	uxtb	r2, r2
   14dac:	4611      	mov	r1, r2
   14dae:	f24c 2298 	movw	r2, #49816	; 0xc298
   14db2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14db6:	5c52      	ldrb	r2, [r2, r1]
   14db8:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14dba:	f24c 2395 	movw	r3, #49813	; 0xc295
   14dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dc2:	781b      	ldrb	r3, [r3, #0]
   14dc4:	b2db      	uxtb	r3, r3
   14dc6:	3301      	adds	r3, #1
   14dc8:	b2da      	uxtb	r2, r3
   14dca:	f24c 2395 	movw	r3, #49813	; 0xc295
   14dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dd2:	701a      	strb	r2, [r3, #0]
  }
}
   14dd4:	46bd      	mov	sp, r7
   14dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dda:	4770      	bx	lr

00014ddc <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14ddc:	b480      	push	{r7}
   14dde:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14de0:	f24c 3398 	movw	r3, #50072	; 0xc398
   14de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de8:	781a      	ldrb	r2, [r3, #0]
   14dea:	f24c 3399 	movw	r3, #50073	; 0xc399
   14dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14df2:	781b      	ldrb	r3, [r3, #0]
   14df4:	b2db      	uxtb	r3, r3
   14df6:	429a      	cmp	r2, r3
   14df8:	d10e      	bne.n	14e18 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14dfa:	f242 039a 	movw	r3, #8346	; 0x209a
   14dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e02:	f242 029a 	movw	r2, #8346	; 0x209a
   14e06:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e0a:	7812      	ldrb	r2, [r2, #0]
   14e0c:	b2d2      	uxtb	r2, r2
   14e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14e12:	b2d2      	uxtb	r2, r2
   14e14:	701a      	strb	r2, [r3, #0]
   14e16:	e01d      	b.n	14e54 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14e18:	f242 039c 	movw	r3, #8348	; 0x209c
   14e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e20:	f24c 3299 	movw	r2, #50073	; 0xc399
   14e24:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e28:	7812      	ldrb	r2, [r2, #0]
   14e2a:	b2d2      	uxtb	r2, r2
   14e2c:	4611      	mov	r1, r2
   14e2e:	f24c 329c 	movw	r2, #50076	; 0xc39c
   14e32:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e36:	5c52      	ldrb	r2, [r2, r1]
   14e38:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14e3a:	f24c 3399 	movw	r3, #50073	; 0xc399
   14e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e42:	781b      	ldrb	r3, [r3, #0]
   14e44:	b2db      	uxtb	r3, r3
   14e46:	3301      	adds	r3, #1
   14e48:	b2da      	uxtb	r2, r3
   14e4a:	f24c 3399 	movw	r3, #50073	; 0xc399
   14e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e52:	701a      	strb	r2, [r3, #0]
  }
}
   14e54:	46bd      	mov	sp, r7
   14e56:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e5a:	4770      	bx	lr

00014e5c <uart0_init>:

void uart0_init( void ) {
   14e5c:	b480      	push	{r7}
   14e5e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14e60:	f242 0390 	movw	r3, #8336	; 0x2090
   14e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e68:	2200      	movs	r2, #0
   14e6a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14e6c:	f242 0309 	movw	r3, #8201	; 0x2009
   14e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e74:	2219      	movs	r2, #25
   14e76:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14e78:	f242 030b 	movw	r3, #8203	; 0x200b
   14e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e80:	2200      	movs	r2, #0
   14e82:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14e84:	f242 030a 	movw	r3, #8202	; 0x200a
   14e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e8c:	2218      	movs	r2, #24
   14e8e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14e90:	f242 0395 	movw	r3, #8341	; 0x2095
   14e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e98:	2206      	movs	r2, #6
   14e9a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14e9c:	f242 030a 	movw	r3, #8202	; 0x200a
   14ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea4:	f242 020a 	movw	r2, #8202	; 0x200a
   14ea8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14eac:	7812      	ldrb	r2, [r2, #0]
   14eae:	b2d2      	uxtb	r2, r2
   14eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14eb4:	b2d2      	uxtb	r2, r2
   14eb6:	701a      	strb	r2, [r3, #0]
}
   14eb8:	46bd      	mov	sp, r7
   14eba:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ebe:	4770      	bx	lr

00014ec0 <uart1_init>:

void uart1_init( void ) {
   14ec0:	b480      	push	{r7}
   14ec2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14ec4:	f242 0398 	movw	r3, #8344	; 0x2098
   14ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ecc:	2200      	movs	r2, #0
   14ece:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14ed0:	f242 0399 	movw	r3, #8345	; 0x2099
   14ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed8:	2219      	movs	r2, #25
   14eda:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14edc:	f242 039b 	movw	r3, #8347	; 0x209b
   14ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee4:	2200      	movs	r2, #0
   14ee6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14ee8:	f242 039a 	movw	r3, #8346	; 0x209a
   14eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef0:	2218      	movs	r2, #24
   14ef2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14ef4:	f242 039d 	movw	r3, #8349	; 0x209d
   14ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efc:	2206      	movs	r2, #6
   14efe:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14f00:	f242 039a 	movw	r3, #8346	; 0x209a
   14f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f08:	f242 029a 	movw	r2, #8346	; 0x209a
   14f0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f10:	7812      	ldrb	r2, [r2, #0]
   14f12:	b2d2      	uxtb	r2, r2
   14f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14f18:	b2d2      	uxtb	r2, r2
   14f1a:	701a      	strb	r2, [r3, #0]
}
   14f1c:	46bd      	mov	sp, r7
   14f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f22:	4770      	bx	lr
   14f24:	0000      	movs	r0, r0
	...

00014f28 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14f28:	b480      	push	{r7}
   14f2a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14f2c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   14f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f34:	f04f 0200 	mov.w	r2, #0
   14f38:	601a      	str	r2, [r3, #0]
   14f3a:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   14f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f42:	f04f 0200 	mov.w	r2, #0
   14f46:	601a      	str	r2, [r3, #0]
   14f48:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   14f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f50:	f04f 0200 	mov.w	r2, #0
   14f54:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14f56:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   14f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f5e:	f04f 0200 	mov.w	r2, #0
   14f62:	601a      	str	r2, [r3, #0]
   14f64:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f6c:	f04f 0200 	mov.w	r2, #0
   14f70:	601a      	str	r2, [r3, #0]
   14f72:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f7a:	f04f 0200 	mov.w	r2, #0
   14f7e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14f80:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   14f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f88:	f04f 0200 	mov.w	r2, #0
   14f8c:	601a      	str	r2, [r3, #0]
   14f8e:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   14f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f96:	f04f 0200 	mov.w	r2, #0
   14f9a:	601a      	str	r2, [r3, #0]
   14f9c:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
   14fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fa4:	f04f 0200 	mov.w	r2, #0
   14fa8:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14faa:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   14fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fb2:	f04f 0200 	mov.w	r2, #0
   14fb6:	601a      	str	r2, [r3, #0]
   14fb8:	f24c 43c4 	movw	r3, #50372	; 0xc4c4
   14fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fc0:	f04f 0200 	mov.w	r2, #0
   14fc4:	601a      	str	r2, [r3, #0]
   14fc6:	f24c 43c8 	movw	r3, #50376	; 0xc4c8
   14fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fce:	f04f 0200 	mov.w	r2, #0
   14fd2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14fd4:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   14fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fdc:	2200      	movs	r2, #0
   14fde:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14fe0:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe8:	681a      	ldr	r2, [r3, #0]
   14fea:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   14fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ff2:	601a      	str	r2, [r3, #0]
}
   14ff4:	46bd      	mov	sp, r7
   14ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ffa:	4770      	bx	lr

00014ffc <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14ffc:	b580      	push	{r7, lr}
   14ffe:	b082      	sub	sp, #8
   15000:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15002:	f240 33ec 	movw	r3, #1004	; 0x3ec
   15006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1500a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   1500c:	2b01      	cmp	r3, #1
   1500e:	d105      	bne.n	1501c <estimator_update_state_infrared+0x20>
   15010:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   15014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15018:	681b      	ldr	r3, [r3, #0]
   1501a:	e004      	b.n	15026 <estimator_update_state_infrared+0x2a>
   1501c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   15020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15024:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   15026:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15028:	f24c 1388 	movw	r3, #49544	; 0xc188
   1502c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15030:	881b      	ldrh	r3, [r3, #0]
   15032:	b21b      	sxth	r3, r3
   15034:	4618      	mov	r0, r3
   15036:	f003 f8ab 	bl	18190 <__aeabi_i2f>
   1503a:	4603      	mov	r3, r0
   1503c:	4618      	mov	r0, r3
   1503e:	6879      	ldr	r1, [r7, #4]
   15040:	f003 f8fa 	bl	18238 <__aeabi_fmul>
   15044:	4603      	mov	r3, r0
   15046:	461a      	mov	r2, r3
   15048:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   1504c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15050:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   15052:	f24c 138a 	movw	r3, #49546	; 0xc18a
   15056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1505a:	881b      	ldrh	r3, [r3, #0]
   1505c:	b21b      	sxth	r3, r3
   1505e:	4618      	mov	r0, r3
   15060:	f003 f896 	bl	18190 <__aeabi_i2f>
   15064:	4603      	mov	r3, r0
   15066:	4618      	mov	r0, r3
   15068:	6879      	ldr	r1, [r7, #4]
   1506a:	f003 f8e5 	bl	18238 <__aeabi_fmul>
   1506e:	4603      	mov	r3, r0
   15070:	461a      	mov	r2, r3
   15072:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   15076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1507a:	601a      	str	r2, [r3, #0]
}
   1507c:	3708      	adds	r7, #8
   1507e:	46bd      	mov	sp, r7
   15080:	bd80      	pop	{r7, pc}
   15082:	bf00      	nop

00015084 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15084:	b5b0      	push	{r4, r5, r7, lr}
   15086:	b084      	sub	sp, #16
   15088:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1508a:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   1508e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	2b00      	cmp	r3, #0
   15096:	f000 81e8 	beq.w	1546a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1509a:	f24c 0358 	movw	r3, #49240	; 0xc058
   1509e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150a2:	681a      	ldr	r2, [r3, #0]
   150a4:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   150a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ac:	681b      	ldr	r3, [r3, #0]
   150ae:	4610      	mov	r0, r2
   150b0:	4619      	mov	r1, r3
   150b2:	f002 ffb7 	bl	18024 <__aeabi_fsub>
   150b6:	4603      	mov	r3, r0
   150b8:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   150ba:	68b8      	ldr	r0, [r7, #8]
   150bc:	f002 fc28 	bl	17910 <__aeabi_f2d>
   150c0:	4602      	mov	r2, r0
   150c2:	460b      	mov	r3, r1
   150c4:	4610      	mov	r0, r2
   150c6:	4619      	mov	r1, r3
   150c8:	a385      	add	r3, pc, #532	; (adr r3, 152e0 <estimator_update_ir_estim+0x25c>)
   150ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   150ce:	f002 ff03 	bl	17ed8 <__aeabi_dcmpgt>
   150d2:	4603      	mov	r3, r0
   150d4:	2b00      	cmp	r3, #0
   150d6:	d100      	bne.n	150da <estimator_update_ir_estim+0x56>
   150d8:	e219      	b.n	1550e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   150da:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   150de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150e2:	681a      	ldr	r2, [r3, #0]
   150e4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   150e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ec:	681b      	ldr	r3, [r3, #0]
   150ee:	4610      	mov	r0, r2
   150f0:	4619      	mov	r1, r3
   150f2:	f002 ff97 	bl	18024 <__aeabi_fsub>
   150f6:	4603      	mov	r3, r0
   150f8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   150fa:	e013      	b.n	15124 <estimator_update_ir_estim+0xa0>
   150fc:	68f8      	ldr	r0, [r7, #12]
   150fe:	f002 fc07 	bl	17910 <__aeabi_f2d>
   15102:	4602      	mov	r2, r0
   15104:	460b      	mov	r3, r1
   15106:	4610      	mov	r0, r2
   15108:	4619      	mov	r1, r3
   1510a:	a377      	add	r3, pc, #476	; (adr r3, 152e8 <estimator_update_ir_estim+0x264>)
   1510c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15110:	f002 fa9e 	bl	17650 <__aeabi_dsub>
   15114:	4602      	mov	r2, r0
   15116:	460b      	mov	r3, r1
   15118:	4610      	mov	r0, r2
   1511a:	4619      	mov	r1, r3
   1511c:	f002 ff2e 	bl	17f7c <__aeabi_d2f>
   15120:	4603      	mov	r3, r0
   15122:	60fb      	str	r3, [r7, #12]
   15124:	68f8      	ldr	r0, [r7, #12]
   15126:	f002 fbf3 	bl	17910 <__aeabi_f2d>
   1512a:	4602      	mov	r2, r0
   1512c:	460b      	mov	r3, r1
   1512e:	4610      	mov	r0, r2
   15130:	4619      	mov	r1, r3
   15132:	a36f      	add	r3, pc, #444	; (adr r3, 152f0 <estimator_update_ir_estim+0x26c>)
   15134:	e9d3 2300 	ldrd	r2, r3, [r3]
   15138:	f002 fece 	bl	17ed8 <__aeabi_dcmpgt>
   1513c:	4603      	mov	r3, r0
   1513e:	2b00      	cmp	r3, #0
   15140:	d1dc      	bne.n	150fc <estimator_update_ir_estim+0x78>
   15142:	e013      	b.n	1516c <estimator_update_ir_estim+0xe8>
   15144:	68f8      	ldr	r0, [r7, #12]
   15146:	f002 fbe3 	bl	17910 <__aeabi_f2d>
   1514a:	4602      	mov	r2, r0
   1514c:	460b      	mov	r3, r1
   1514e:	4610      	mov	r0, r2
   15150:	4619      	mov	r1, r3
   15152:	a365      	add	r3, pc, #404	; (adr r3, 152e8 <estimator_update_ir_estim+0x264>)
   15154:	e9d3 2300 	ldrd	r2, r3, [r3]
   15158:	f002 fa7c 	bl	17654 <__adddf3>
   1515c:	4602      	mov	r2, r0
   1515e:	460b      	mov	r3, r1
   15160:	4610      	mov	r0, r2
   15162:	4619      	mov	r1, r3
   15164:	f002 ff0a 	bl	17f7c <__aeabi_d2f>
   15168:	4603      	mov	r3, r0
   1516a:	60fb      	str	r3, [r7, #12]
   1516c:	68f8      	ldr	r0, [r7, #12]
   1516e:	f002 fbcf 	bl	17910 <__aeabi_f2d>
   15172:	4602      	mov	r2, r0
   15174:	460b      	mov	r3, r1
   15176:	4610      	mov	r0, r2
   15178:	4619      	mov	r1, r3
   1517a:	a35f      	add	r3, pc, #380	; (adr r3, 152f8 <estimator_update_ir_estim+0x274>)
   1517c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15180:	f002 fe8c 	bl	17e9c <__aeabi_dcmplt>
   15184:	4603      	mov	r3, r0
   15186:	2b00      	cmp	r3, #0
   15188:	d1dc      	bne.n	15144 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1518a:	68f8      	ldr	r0, [r7, #12]
   1518c:	68b9      	ldr	r1, [r7, #8]
   1518e:	f003 f907 	bl	183a0 <__aeabi_fdiv>
   15192:	4603      	mov	r3, r0
   15194:	4618      	mov	r0, r3
   15196:	f002 fbbb 	bl	17910 <__aeabi_f2d>
   1519a:	4602      	mov	r2, r0
   1519c:	460b      	mov	r3, r1
   1519e:	4610      	mov	r0, r2
   151a0:	4619      	mov	r1, r3
   151a2:	f04f 0200 	mov.w	r2, #0
   151a6:	f04f 0300 	mov.w	r3, #0
   151aa:	f2c4 0324 	movt	r3, #16420	; 0x4024
   151ae:	f002 fc03 	bl	179b8 <__aeabi_dmul>
   151b2:	4602      	mov	r2, r0
   151b4:	460b      	mov	r3, r1
   151b6:	4610      	mov	r0, r2
   151b8:	4619      	mov	r1, r3
   151ba:	a351      	add	r3, pc, #324	; (adr r3, 15300 <estimator_update_ir_estim+0x27c>)
   151bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   151c0:	f002 fd24 	bl	17c0c <__aeabi_ddiv>
   151c4:	4602      	mov	r2, r0
   151c6:	460b      	mov	r3, r1
   151c8:	4610      	mov	r0, r2
   151ca:	4619      	mov	r1, r3
   151cc:	f002 fed6 	bl	17f7c <__aeabi_d2f>
   151d0:	4603      	mov	r3, r0
   151d2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   151d4:	e013      	b.n	151fe <estimator_update_ir_estim+0x17a>
   151d6:	68f8      	ldr	r0, [r7, #12]
   151d8:	f002 fb9a 	bl	17910 <__aeabi_f2d>
   151dc:	4602      	mov	r2, r0
   151de:	460b      	mov	r3, r1
   151e0:	4610      	mov	r0, r2
   151e2:	4619      	mov	r1, r3
   151e4:	a340      	add	r3, pc, #256	; (adr r3, 152e8 <estimator_update_ir_estim+0x264>)
   151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   151ea:	f002 fa31 	bl	17650 <__aeabi_dsub>
   151ee:	4602      	mov	r2, r0
   151f0:	460b      	mov	r3, r1
   151f2:	4610      	mov	r0, r2
   151f4:	4619      	mov	r1, r3
   151f6:	f002 fec1 	bl	17f7c <__aeabi_d2f>
   151fa:	4603      	mov	r3, r0
   151fc:	60fb      	str	r3, [r7, #12]
   151fe:	68f8      	ldr	r0, [r7, #12]
   15200:	f002 fb86 	bl	17910 <__aeabi_f2d>
   15204:	4602      	mov	r2, r0
   15206:	460b      	mov	r3, r1
   15208:	4610      	mov	r0, r2
   1520a:	4619      	mov	r1, r3
   1520c:	a338      	add	r3, pc, #224	; (adr r3, 152f0 <estimator_update_ir_estim+0x26c>)
   1520e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15212:	f002 fe61 	bl	17ed8 <__aeabi_dcmpgt>
   15216:	4603      	mov	r3, r0
   15218:	2b00      	cmp	r3, #0
   1521a:	d1dc      	bne.n	151d6 <estimator_update_ir_estim+0x152>
   1521c:	e013      	b.n	15246 <estimator_update_ir_estim+0x1c2>
   1521e:	68f8      	ldr	r0, [r7, #12]
   15220:	f002 fb76 	bl	17910 <__aeabi_f2d>
   15224:	4602      	mov	r2, r0
   15226:	460b      	mov	r3, r1
   15228:	4610      	mov	r0, r2
   1522a:	4619      	mov	r1, r3
   1522c:	a32e      	add	r3, pc, #184	; (adr r3, 152e8 <estimator_update_ir_estim+0x264>)
   1522e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15232:	f002 fa0f 	bl	17654 <__adddf3>
   15236:	4602      	mov	r2, r0
   15238:	460b      	mov	r3, r1
   1523a:	4610      	mov	r0, r2
   1523c:	4619      	mov	r1, r3
   1523e:	f002 fe9d 	bl	17f7c <__aeabi_d2f>
   15242:	4603      	mov	r3, r0
   15244:	60fb      	str	r3, [r7, #12]
   15246:	68f8      	ldr	r0, [r7, #12]
   15248:	f002 fb62 	bl	17910 <__aeabi_f2d>
   1524c:	4602      	mov	r2, r0
   1524e:	460b      	mov	r3, r1
   15250:	4610      	mov	r0, r2
   15252:	4619      	mov	r1, r3
   15254:	a328      	add	r3, pc, #160	; (adr r3, 152f8 <estimator_update_ir_estim+0x274>)
   15256:	e9d3 2300 	ldrd	r2, r3, [r3]
   1525a:	f002 fe1f 	bl	17e9c <__aeabi_dcmplt>
   1525e:	4603      	mov	r3, r0
   15260:	2b00      	cmp	r3, #0
   15262:	d1dc      	bne.n	1521e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15264:	f24c 1388 	movw	r3, #49544	; 0xc188
   15268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526c:	881b      	ldrh	r3, [r3, #0]
   1526e:	b21b      	sxth	r3, r3
   15270:	4618      	mov	r0, r3
   15272:	f002 ff8d 	bl	18190 <__aeabi_i2f>
   15276:	4602      	mov	r2, r0
   15278:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
   1527c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15280:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15282:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   15286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1528a:	68fa      	ldr	r2, [r7, #12]
   1528c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1528e:	68f8      	ldr	r0, [r7, #12]
   15290:	f04f 0100 	mov.w	r1, #0
   15294:	f003 f96e 	bl	18574 <__aeabi_fcmplt>
   15298:	4603      	mov	r3, r0
   1529a:	2b00      	cmp	r3, #0
   1529c:	d003      	beq.n	152a6 <estimator_update_ir_estim+0x222>
   1529e:	68fb      	ldr	r3, [r7, #12]
   152a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   152a4:	e000      	b.n	152a8 <estimator_update_ir_estim+0x224>
   152a6:	68fb      	ldr	r3, [r7, #12]
   152a8:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   152aa:	6878      	ldr	r0, [r7, #4]
   152ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   152b0:	f003 f960 	bl	18574 <__aeabi_fcmplt>
   152b4:	4603      	mov	r3, r0
   152b6:	2b00      	cmp	r3, #0
   152b8:	d100      	bne.n	152bc <estimator_update_ir_estim+0x238>
   152ba:	e128      	b.n	1550e <estimator_update_ir_estim+0x48a>
   152bc:	6878      	ldr	r0, [r7, #4]
   152be:	f002 fb27 	bl	17910 <__aeabi_f2d>
   152c2:	4602      	mov	r2, r0
   152c4:	460b      	mov	r3, r1
   152c6:	4610      	mov	r0, r2
   152c8:	4619      	mov	r1, r3
   152ca:	a30f      	add	r3, pc, #60	; (adr r3, 15308 <estimator_update_ir_estim+0x284>)
   152cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   152d0:	f002 fe02 	bl	17ed8 <__aeabi_dcmpgt>
   152d4:	4603      	mov	r3, r0
   152d6:	2b00      	cmp	r3, #0
   152d8:	d11a      	bne.n	15310 <estimator_update_ir_estim+0x28c>
   152da:	e118      	b.n	1550e <estimator_update_ir_estim+0x48a>
   152dc:	f3af 8000 	nop.w
   152e0:	9999999a 	.word	0x9999999a
   152e4:	3fb99999 	.word	0x3fb99999
   152e8:	54442d18 	.word	0x54442d18
   152ec:	401921fb 	.word	0x401921fb
   152f0:	54442d18 	.word	0x54442d18
   152f4:	400921fb 	.word	0x400921fb
   152f8:	54442d18 	.word	0x54442d18
   152fc:	c00921fb 	.word	0xc00921fb
   15300:	51eb851f 	.word	0x51eb851f
   15304:	40239eb8 	.word	0x40239eb8
   15308:	9999999a 	.word	0x9999999a
   1530c:	3fa99999 	.word	0x3fa99999
   15310:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15318:	881b      	ldrh	r3, [r3, #0]
   1531a:	b21b      	sxth	r3, r3
   1531c:	425b      	negs	r3, r3
   1531e:	0fda      	lsrs	r2, r3, #31
   15320:	4413      	add	r3, r2
   15322:	105b      	asrs	r3, r3, #1
   15324:	461a      	mov	r2, r3
   15326:	f24c 1388 	movw	r3, #49544	; 0xc188
   1532a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1532e:	881b      	ldrh	r3, [r3, #0]
   15330:	b21b      	sxth	r3, r3
   15332:	429a      	cmp	r2, r3
   15334:	f280 8098 	bge.w	15468 <estimator_update_ir_estim+0x3e4>
   15338:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15340:	881b      	ldrh	r3, [r3, #0]
   15342:	b21b      	sxth	r3, r3
   15344:	0fda      	lsrs	r2, r3, #31
   15346:	4413      	add	r3, r2
   15348:	105b      	asrs	r3, r3, #1
   1534a:	b29a      	uxth	r2, r3
   1534c:	f24c 1388 	movw	r3, #49544	; 0xc188
   15350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15354:	881b      	ldrh	r3, [r3, #0]
   15356:	b212      	sxth	r2, r2
   15358:	b21b      	sxth	r3, r3
   1535a:	429a      	cmp	r2, r3
   1535c:	f340 8084 	ble.w	15468 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15360:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   15364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15368:	681a      	ldr	r2, [r3, #0]
   1536a:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
   1536e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15372:	681b      	ldr	r3, [r3, #0]
   15374:	4610      	mov	r0, r2
   15376:	4619      	mov	r1, r3
   15378:	f002 ff5e 	bl	18238 <__aeabi_fmul>
   1537c:	4603      	mov	r3, r0
   1537e:	4618      	mov	r0, r3
   15380:	f002 fac6 	bl	17910 <__aeabi_f2d>
   15384:	4604      	mov	r4, r0
   15386:	460d      	mov	r5, r1
   15388:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   1538c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15390:	681b      	ldr	r3, [r3, #0]
   15392:	4618      	mov	r0, r3
   15394:	f002 fabc 	bl	17910 <__aeabi_f2d>
   15398:	4602      	mov	r2, r0
   1539a:	460b      	mov	r3, r1
   1539c:	4610      	mov	r0, r2
   1539e:	4619      	mov	r1, r3
   153a0:	a367      	add	r3, pc, #412	; (adr r3, 15540 <estimator_update_ir_estim+0x4bc>)
   153a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   153a6:	f002 fb07 	bl	179b8 <__aeabi_dmul>
   153aa:	4602      	mov	r2, r0
   153ac:	460b      	mov	r3, r1
   153ae:	4620      	mov	r0, r4
   153b0:	4629      	mov	r1, r5
   153b2:	f002 f94f 	bl	17654 <__adddf3>
   153b6:	4602      	mov	r2, r0
   153b8:	460b      	mov	r3, r1
   153ba:	4610      	mov	r0, r2
   153bc:	4619      	mov	r1, r3
   153be:	f002 fddd 	bl	17f7c <__aeabi_d2f>
   153c2:	4602      	mov	r2, r0
   153c4:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   153c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153cc:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   153ce:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
   153d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153d6:	681a      	ldr	r2, [r3, #0]
   153d8:	f24c 43e0 	movw	r3, #50400	; 0xc4e0
   153dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153e0:	681b      	ldr	r3, [r3, #0]
   153e2:	4610      	mov	r0, r2
   153e4:	4619      	mov	r1, r3
   153e6:	f002 ff27 	bl	18238 <__aeabi_fmul>
   153ea:	4603      	mov	r3, r0
   153ec:	4618      	mov	r0, r3
   153ee:	f002 fa8f 	bl	17910 <__aeabi_f2d>
   153f2:	4604      	mov	r4, r0
   153f4:	460d      	mov	r5, r1
   153f6:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   153fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153fe:	681b      	ldr	r3, [r3, #0]
   15400:	4618      	mov	r0, r3
   15402:	f002 fa85 	bl	17910 <__aeabi_f2d>
   15406:	4602      	mov	r2, r0
   15408:	460b      	mov	r3, r1
   1540a:	4610      	mov	r0, r2
   1540c:	4619      	mov	r1, r3
   1540e:	a34c      	add	r3, pc, #304	; (adr r3, 15540 <estimator_update_ir_estim+0x4bc>)
   15410:	e9d3 2300 	ldrd	r2, r3, [r3]
   15414:	f002 fad0 	bl	179b8 <__aeabi_dmul>
   15418:	4602      	mov	r2, r0
   1541a:	460b      	mov	r3, r1
   1541c:	4620      	mov	r0, r4
   1541e:	4629      	mov	r1, r5
   15420:	f002 f918 	bl	17654 <__adddf3>
   15424:	4602      	mov	r2, r0
   15426:	460b      	mov	r3, r1
   15428:	4610      	mov	r0, r2
   1542a:	4619      	mov	r1, r3
   1542c:	f002 fda6 	bl	17f7c <__aeabi_d2f>
   15430:	4602      	mov	r2, r0
   15432:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   15436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1543a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1543c:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   15440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15444:	681a      	ldr	r2, [r3, #0]
   15446:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   1544a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1544e:	681b      	ldr	r3, [r3, #0]
   15450:	4610      	mov	r0, r2
   15452:	4619      	mov	r1, r3
   15454:	f002 ffa4 	bl	183a0 <__aeabi_fdiv>
   15458:	4603      	mov	r3, r0
   1545a:	461a      	mov	r2, r3
   1545c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   15460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15464:	601a      	str	r2, [r3, #0]
   15466:	e052      	b.n	1550e <estimator_update_ir_estim+0x48a>
   15468:	e051      	b.n	1550e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1546a:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   1546e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15472:	2201      	movs	r2, #1
   15474:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15476:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1547a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1547e:	881b      	ldrh	r3, [r3, #0]
   15480:	b21b      	sxth	r3, r3
   15482:	4618      	mov	r0, r3
   15484:	f002 fe84 	bl	18190 <__aeabi_i2f>
   15488:	4603      	mov	r3, r0
   1548a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1548c:	6838      	ldr	r0, [r7, #0]
   1548e:	6839      	ldr	r1, [r7, #0]
   15490:	f002 fed2 	bl	18238 <__aeabi_fmul>
   15494:	4603      	mov	r3, r0
   15496:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15498:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   1549c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154a0:	681b      	ldr	r3, [r3, #0]
   154a2:	4618      	mov	r0, r3
   154a4:	f002 fa34 	bl	17910 <__aeabi_f2d>
   154a8:	4602      	mov	r2, r0
   154aa:	460b      	mov	r3, r1
   154ac:	4610      	mov	r0, r2
   154ae:	4619      	mov	r1, r3
   154b0:	f04f 0200 	mov.w	r2, #0
   154b4:	f04f 0300 	mov.w	r3, #0
   154b8:	f2c4 0359 	movt	r3, #16473	; 0x4059
   154bc:	f002 fa7c 	bl	179b8 <__aeabi_dmul>
   154c0:	4602      	mov	r2, r0
   154c2:	460b      	mov	r3, r1
   154c4:	4614      	mov	r4, r2
   154c6:	461d      	mov	r5, r3
   154c8:	6838      	ldr	r0, [r7, #0]
   154ca:	f002 fa21 	bl	17910 <__aeabi_f2d>
   154ce:	4602      	mov	r2, r0
   154d0:	460b      	mov	r3, r1
   154d2:	4620      	mov	r0, r4
   154d4:	4629      	mov	r1, r5
   154d6:	f002 fa6f 	bl	179b8 <__aeabi_dmul>
   154da:	4602      	mov	r2, r0
   154dc:	460b      	mov	r3, r1
   154de:	4610      	mov	r0, r2
   154e0:	4619      	mov	r1, r3
   154e2:	f002 fd4b 	bl	17f7c <__aeabi_d2f>
   154e6:	4602      	mov	r2, r0
   154e8:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   154ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154f0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   154f2:	6838      	ldr	r0, [r7, #0]
   154f4:	f04f 0100 	mov.w	r1, #0
   154f8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   154fc:	f002 fe9c 	bl	18238 <__aeabi_fmul>
   15500:	4603      	mov	r3, r0
   15502:	461a      	mov	r2, r3
   15504:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   15508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1550c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1550e:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   15512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15516:	681a      	ldr	r2, [r3, #0]
   15518:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   1551c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15520:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15522:	f24c 0358 	movw	r3, #49240	; 0xc058
   15526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1552a:	681a      	ldr	r2, [r3, #0]
   1552c:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   15530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15534:	601a      	str	r2, [r3, #0]
}
   15536:	3710      	adds	r7, #16
   15538:	46bd      	mov	sp, r7
   1553a:	bdb0      	pop	{r4, r5, r7, pc}
   1553c:	f3af 8000 	nop.w
   15540:	d916872b 	.word	0xd916872b
   15544:	3feff7ce 	.word	0x3feff7ce

00015548 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15548:	b580      	push	{r7, lr}
   1554a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1554c:	f24c 037c 	movw	r3, #49276	; 0xc07c
   15550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15554:	781b      	ldrb	r3, [r3, #0]
   15556:	f003 0320 	and.w	r3, r3, #32
   1555a:	2b00      	cmp	r3, #0
   1555c:	d044      	beq.n	155e8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1555e:	f24c 0374 	movw	r3, #49268	; 0xc074
   15562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15566:	681a      	ldr	r2, [r3, #0]
   15568:	f24c 439c 	movw	r3, #50332	; 0xc49c
   1556c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15570:	601a      	str	r2, [r3, #0]
   15572:	f24c 0378 	movw	r3, #49272	; 0xc078
   15576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1557a:	681a      	ldr	r2, [r3, #0]
   1557c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   15580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15584:	601a      	str	r2, [r3, #0]
   15586:	f24c 035c 	movw	r3, #49244	; 0xc05c
   1558a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1558e:	681a      	ldr	r2, [r3, #0]
   15590:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   15594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15598:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1559a:	f24c 0360 	movw	r3, #49248	; 0xc060
   1559e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a2:	681a      	ldr	r2, [r3, #0]
   155a4:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   155a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ac:	601a      	str	r2, [r3, #0]
   155ae:	f24c 0368 	movw	r3, #49256	; 0xc068
   155b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155b6:	681a      	ldr	r2, [r3, #0]
   155b8:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   155bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155c0:	601a      	str	r2, [r3, #0]
   155c2:	f24c 0364 	movw	r3, #49252	; 0xc064
   155c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ca:	681a      	ldr	r2, [r3, #0]
   155cc:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
   155d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155d4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   155d6:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   155da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155de:	881b      	ldrh	r3, [r3, #0]
   155e0:	2b00      	cmp	r3, #0
   155e2:	d001      	beq.n	155e8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   155e4:	f7ff fd4e 	bl	15084 <estimator_update_ir_estim>
  }
}
   155e8:	bd80      	pop	{r7, pc}
   155ea:	bf00      	nop

000155ec <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   155ec:	b480      	push	{r7}
   155ee:	af00      	add	r7, sp, #0
  
}
   155f0:	46bd      	mov	sp, r7
   155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   155f6:	4770      	bx	lr

000155f8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   155f8:	b5b0      	push	{r4, r5, r7, lr}
   155fa:	b082      	sub	sp, #8
   155fc:	af00      	add	r7, sp, #0
   155fe:	4603      	mov	r3, r0
   15600:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   15602:	f64b 63cc 	movw	r3, #48844	; 0xbecc
   15606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1560a:	781b      	ldrb	r3, [r3, #0]
   1560c:	2b01      	cmp	r3, #1
   1560e:	f040 80e0 	bne.w	157d2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15612:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   15616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1561a:	781b      	ldrb	r3, [r3, #0]
   1561c:	2b02      	cmp	r3, #2
   1561e:	d168      	bne.n	156f2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15620:	79fb      	ldrb	r3, [r7, #7]
   15622:	2b00      	cmp	r3, #0
   15624:	d013      	beq.n	1564e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15626:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1562a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1562e:	881a      	ldrh	r2, [r3, #0]
   15630:	f24c 5302 	movw	r3, #50434	; 0xc502
   15634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15638:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1563a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   1563e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15642:	895a      	ldrh	r2, [r3, #10]
   15644:	f24c 43fe 	movw	r3, #50430	; 0xc4fe
   15648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1564c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1564e:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   15652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15656:	895b      	ldrh	r3, [r3, #10]
   15658:	b21a      	sxth	r2, r3
   1565a:	f24c 43fe 	movw	r3, #50430	; 0xc4fe
   1565e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15662:	881b      	ldrh	r3, [r3, #0]
   15664:	b21b      	sxth	r3, r3
   15666:	1ad3      	subs	r3, r2, r3
   15668:	4618      	mov	r0, r3
   1566a:	f002 fd91 	bl	18190 <__aeabi_i2f>
   1566e:	4603      	mov	r3, r0
   15670:	4618      	mov	r0, r3
   15672:	f002 f94d 	bl	17910 <__aeabi_f2d>
   15676:	4602      	mov	r2, r0
   15678:	460b      	mov	r3, r1
   1567a:	4610      	mov	r0, r2
   1567c:	4619      	mov	r1, r3
   1567e:	f04f 0200 	mov.w	r2, #0
   15682:	f04f 0300 	mov.w	r3, #0
   15686:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1568a:	f002 f995 	bl	179b8 <__aeabi_dmul>
   1568e:	4602      	mov	r2, r0
   15690:	460b      	mov	r3, r1
   15692:	4610      	mov	r0, r2
   15694:	4619      	mov	r1, r3
   15696:	f04f 0200 	mov.w	r2, #0
   1569a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1569e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   156a2:	f002 fab3 	bl	17c0c <__aeabi_ddiv>
   156a6:	4602      	mov	r2, r0
   156a8:	460b      	mov	r3, r1
   156aa:	4610      	mov	r0, r2
   156ac:	4619      	mov	r1, r3
   156ae:	f002 fc1d 	bl	17eec <__aeabi_d2iz>
   156b2:	4603      	mov	r3, r0
   156b4:	b29b      	uxth	r3, r3
   156b6:	b29a      	uxth	r2, r3
   156b8:	f24c 5302 	movw	r3, #50434	; 0xc502
   156bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156c0:	881b      	ldrh	r3, [r3, #0]
   156c2:	b29b      	uxth	r3, r3
   156c4:	4413      	add	r3, r2
   156c6:	b29b      	uxth	r3, r3
   156c8:	b29a      	uxth	r2, r3
   156ca:	f240 33f4 	movw	r3, #1012	; 0x3f4
   156ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156d2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   156d4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   156d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156dc:	881b      	ldrh	r3, [r3, #0]
   156de:	b21b      	sxth	r3, r3
   156e0:	4618      	mov	r0, r3
   156e2:	f002 fd55 	bl	18190 <__aeabi_i2f>
   156e6:	4602      	mov	r2, r0
   156e8:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   156ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156f2:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   156f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156fa:	781b      	ldrb	r3, [r3, #0]
   156fc:	2b02      	cmp	r3, #2
   156fe:	d168      	bne.n	157d2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15700:	79fb      	ldrb	r3, [r7, #7]
   15702:	2b00      	cmp	r3, #0
   15704:	d013      	beq.n	1572e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15706:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1570a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1570e:	881a      	ldrh	r2, [r3, #0]
   15710:	f24c 5304 	movw	r3, #50436	; 0xc504
   15714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15718:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1571a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   1571e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15722:	899a      	ldrh	r2, [r3, #12]
   15724:	f24c 5300 	movw	r3, #50432	; 0xc500
   15728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1572e:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   15732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15736:	899b      	ldrh	r3, [r3, #12]
   15738:	b21a      	sxth	r2, r3
   1573a:	f24c 5300 	movw	r3, #50432	; 0xc500
   1573e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15742:	881b      	ldrh	r3, [r3, #0]
   15744:	b21b      	sxth	r3, r3
   15746:	1ad3      	subs	r3, r2, r3
   15748:	4618      	mov	r0, r3
   1574a:	f002 fd21 	bl	18190 <__aeabi_i2f>
   1574e:	4603      	mov	r3, r0
   15750:	4618      	mov	r0, r3
   15752:	f002 f8dd 	bl	17910 <__aeabi_f2d>
   15756:	4602      	mov	r2, r0
   15758:	460b      	mov	r3, r1
   1575a:	4610      	mov	r0, r2
   1575c:	4619      	mov	r1, r3
   1575e:	f04f 0200 	mov.w	r2, #0
   15762:	f04f 0300 	mov.w	r3, #0
   15766:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1576a:	f002 f925 	bl	179b8 <__aeabi_dmul>
   1576e:	4602      	mov	r2, r0
   15770:	460b      	mov	r3, r1
   15772:	4610      	mov	r0, r2
   15774:	4619      	mov	r1, r3
   15776:	f04f 0200 	mov.w	r2, #0
   1577a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1577e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15782:	f002 fa43 	bl	17c0c <__aeabi_ddiv>
   15786:	4602      	mov	r2, r0
   15788:	460b      	mov	r3, r1
   1578a:	4610      	mov	r0, r2
   1578c:	4619      	mov	r1, r3
   1578e:	f002 fbad 	bl	17eec <__aeabi_d2iz>
   15792:	4603      	mov	r3, r0
   15794:	b29b      	uxth	r3, r3
   15796:	b29a      	uxth	r2, r3
   15798:	f24c 5304 	movw	r3, #50436	; 0xc504
   1579c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a0:	881b      	ldrh	r3, [r3, #0]
   157a2:	b29b      	uxth	r3, r3
   157a4:	4413      	add	r3, r2
   157a6:	b29b      	uxth	r3, r3
   157a8:	b29a      	uxth	r2, r3
   157aa:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157b2:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   157b4:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157bc:	881b      	ldrh	r3, [r3, #0]
   157be:	b21b      	sxth	r3, r3
   157c0:	4618      	mov	r0, r3
   157c2:	f002 fce5 	bl	18190 <__aeabi_i2f>
   157c6:	4602      	mov	r2, r0
   157c8:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   157cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   157d2:	f64b 63cc 	movw	r3, #48844	; 0xbecc
   157d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157da:	781b      	ldrb	r3, [r3, #0]
   157dc:	2b02      	cmp	r3, #2
   157de:	f040 80da 	bne.w	15996 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157e2:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   157e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ea:	781b      	ldrb	r3, [r3, #0]
   157ec:	2b02      	cmp	r3, #2
   157ee:	d165      	bne.n	158bc <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   157f0:	79fb      	ldrb	r3, [r7, #7]
   157f2:	2b00      	cmp	r3, #0
   157f4:	d013      	beq.n	1581e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   157f6:	f240 4308 	movw	r3, #1032	; 0x408
   157fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157fe:	681a      	ldr	r2, [r3, #0]
   15800:	f24c 5308 	movw	r3, #50440	; 0xc508
   15804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15808:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1580a:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   1580e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15812:	895a      	ldrh	r2, [r3, #10]
   15814:	f24c 43fe 	movw	r3, #50430	; 0xc4fe
   15818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1581e:	f24c 5308 	movw	r3, #50440	; 0xc508
   15822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15826:	681b      	ldr	r3, [r3, #0]
   15828:	4618      	mov	r0, r3
   1582a:	f002 f871 	bl	17910 <__aeabi_f2d>
   1582e:	4604      	mov	r4, r0
   15830:	460d      	mov	r5, r1
   15832:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   15836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1583a:	895b      	ldrh	r3, [r3, #10]
   1583c:	b21a      	sxth	r2, r3
   1583e:	f24c 43fe 	movw	r3, #50430	; 0xc4fe
   15842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15846:	881b      	ldrh	r3, [r3, #0]
   15848:	b21b      	sxth	r3, r3
   1584a:	1ad3      	subs	r3, r2, r3
   1584c:	4618      	mov	r0, r3
   1584e:	f002 fc9f 	bl	18190 <__aeabi_i2f>
   15852:	4603      	mov	r3, r0
   15854:	4618      	mov	r0, r3
   15856:	f002 f85b 	bl	17910 <__aeabi_f2d>
   1585a:	4602      	mov	r2, r0
   1585c:	460b      	mov	r3, r1
   1585e:	4610      	mov	r0, r2
   15860:	4619      	mov	r1, r3
   15862:	a34f      	add	r3, pc, #316	; (adr r3, 159a0 <inflight_calib+0x3a8>)
   15864:	e9d3 2300 	ldrd	r2, r3, [r3]
   15868:	f002 f8a6 	bl	179b8 <__aeabi_dmul>
   1586c:	4602      	mov	r2, r0
   1586e:	460b      	mov	r3, r1
   15870:	4610      	mov	r0, r2
   15872:	4619      	mov	r1, r3
   15874:	f04f 0200 	mov.w	r2, #0
   15878:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1587c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15880:	f002 f9c4 	bl	17c0c <__aeabi_ddiv>
   15884:	4602      	mov	r2, r0
   15886:	460b      	mov	r3, r1
   15888:	4620      	mov	r0, r4
   1588a:	4629      	mov	r1, r5
   1588c:	f001 fee2 	bl	17654 <__adddf3>
   15890:	4602      	mov	r2, r0
   15892:	460b      	mov	r3, r1
   15894:	4610      	mov	r0, r2
   15896:	4619      	mov	r1, r3
   15898:	f002 fb70 	bl	17f7c <__aeabi_d2f>
   1589c:	4602      	mov	r2, r0
   1589e:	f240 4308 	movw	r3, #1032	; 0x408
   158a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a6:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   158a8:	f240 4308 	movw	r3, #1032	; 0x408
   158ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158b0:	681a      	ldr	r2, [r3, #0]
   158b2:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   158b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ba:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158bc:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   158c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c4:	781b      	ldrb	r3, [r3, #0]
   158c6:	2b02      	cmp	r3, #2
   158c8:	d165      	bne.n	15996 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   158ca:	79fb      	ldrb	r3, [r7, #7]
   158cc:	2b00      	cmp	r3, #0
   158ce:	d013      	beq.n	158f8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   158d0:	f240 430c 	movw	r3, #1036	; 0x40c
   158d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d8:	681a      	ldr	r2, [r3, #0]
   158da:	f24c 530c 	movw	r3, #50444	; 0xc50c
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   158e4:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   158e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ec:	899a      	ldrh	r2, [r3, #12]
   158ee:	f24c 5300 	movw	r3, #50432	; 0xc500
   158f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   158f8:	f24c 530c 	movw	r3, #50444	; 0xc50c
   158fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15900:	681b      	ldr	r3, [r3, #0]
   15902:	4618      	mov	r0, r3
   15904:	f002 f804 	bl	17910 <__aeabi_f2d>
   15908:	4604      	mov	r4, r0
   1590a:	460d      	mov	r5, r1
   1590c:	f64b 73f0 	movw	r3, #49136	; 0xbff0
   15910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15914:	899b      	ldrh	r3, [r3, #12]
   15916:	b21a      	sxth	r2, r3
   15918:	f24c 5300 	movw	r3, #50432	; 0xc500
   1591c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15920:	881b      	ldrh	r3, [r3, #0]
   15922:	b21b      	sxth	r3, r3
   15924:	1ad3      	subs	r3, r2, r3
   15926:	4618      	mov	r0, r3
   15928:	f002 fc32 	bl	18190 <__aeabi_i2f>
   1592c:	4603      	mov	r3, r0
   1592e:	4618      	mov	r0, r3
   15930:	f001 ffee 	bl	17910 <__aeabi_f2d>
   15934:	4602      	mov	r2, r0
   15936:	460b      	mov	r3, r1
   15938:	4610      	mov	r0, r2
   1593a:	4619      	mov	r1, r3
   1593c:	a31a      	add	r3, pc, #104	; (adr r3, 159a8 <inflight_calib+0x3b0>)
   1593e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15942:	f002 f839 	bl	179b8 <__aeabi_dmul>
   15946:	4602      	mov	r2, r0
   15948:	460b      	mov	r3, r1
   1594a:	4610      	mov	r0, r2
   1594c:	4619      	mov	r1, r3
   1594e:	f04f 0200 	mov.w	r2, #0
   15952:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15956:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1595a:	f002 f957 	bl	17c0c <__aeabi_ddiv>
   1595e:	4602      	mov	r2, r0
   15960:	460b      	mov	r3, r1
   15962:	4620      	mov	r0, r4
   15964:	4629      	mov	r1, r5
   15966:	f001 fe75 	bl	17654 <__adddf3>
   1596a:	4602      	mov	r2, r0
   1596c:	460b      	mov	r3, r1
   1596e:	4610      	mov	r0, r2
   15970:	4619      	mov	r1, r3
   15972:	f002 fb03 	bl	17f7c <__aeabi_d2f>
   15976:	4602      	mov	r2, r0
   15978:	f240 430c 	movw	r3, #1036	; 0x40c
   1597c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15980:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15982:	f240 430c 	movw	r3, #1036	; 0x40c
   15986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1598a:	681a      	ldr	r2, [r3, #0]
   1598c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   15990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15994:	601a      	str	r2, [r3, #0]
    }
  }
}
   15996:	3708      	adds	r7, #8
   15998:	46bd      	mov	sp, r7
   1599a:	bdb0      	pop	{r4, r5, r7, pc}
   1599c:	f3af 8000 	nop.w
   159a0:	9999999a 	.word	0x9999999a
   159a4:	3fb99999 	.word	0x3fb99999
   159a8:	9999999a 	.word	0x9999999a
   159ac:	bfc99999 	.word	0xbfc99999

000159b0 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   159b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   159b4:	b08e      	sub	sp, #56	; 0x38
   159b6:	af00      	add	r7, sp, #0
   159b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   159bc:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   159c0:	a357      	add	r3, pc, #348	; (adr r3, 15b20 <pp_atan2+0x170>)
   159c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   159c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   159ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159ce:	f04f 0200 	mov.w	r2, #0
   159d2:	f04f 0300 	mov.w	r3, #0
   159d6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   159da:	f001 ffed 	bl	179b8 <__aeabi_dmul>
   159de:	4602      	mov	r2, r0
   159e0:	460b      	mov	r3, r1
   159e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   159e6:	e9d7 0100 	ldrd	r0, r1, [r7]
   159ea:	f04f 0200 	mov.w	r2, #0
   159ee:	f04f 0300 	mov.w	r3, #0
   159f2:	f002 fa53 	bl	17e9c <__aeabi_dcmplt>
   159f6:	4603      	mov	r3, r0
   159f8:	2b00      	cmp	r3, #0
   159fa:	d009      	beq.n	15a10 <pp_atan2+0x60>
   159fc:	a14a      	add	r1, pc, #296	; (adr r1, 15b28 <pp_atan2+0x178>)
   159fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   15a02:	e9d7 2300 	ldrd	r2, r3, [r7]
   15a06:	f001 fe23 	bl	17650 <__aeabi_dsub>
   15a0a:	4602      	mov	r2, r0
   15a0c:	460b      	mov	r3, r1
   15a0e:	e008      	b.n	15a22 <pp_atan2+0x72>
   15a10:	e9d7 0100 	ldrd	r0, r1, [r7]
   15a14:	a344      	add	r3, pc, #272	; (adr r3, 15b28 <pp_atan2+0x178>)
   15a16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a1a:	f001 fe1b 	bl	17654 <__adddf3>
   15a1e:	4602      	mov	r2, r0
   15a20:	460b      	mov	r3, r1
   15a22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15a26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a2a:	f04f 0200 	mov.w	r2, #0
   15a2e:	f04f 0300 	mov.w	r3, #0
   15a32:	f002 fa51 	bl	17ed8 <__aeabi_dcmpgt>
   15a36:	4603      	mov	r3, r0
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d02a      	beq.n	15a92 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a44:	f001 fe04 	bl	17650 <__aeabi_dsub>
   15a48:	4602      	mov	r2, r0
   15a4a:	460b      	mov	r3, r1
   15a4c:	4690      	mov	r8, r2
   15a4e:	4699      	mov	r9, r3
   15a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a58:	f001 fdfc 	bl	17654 <__adddf3>
   15a5c:	4602      	mov	r2, r0
   15a5e:	460b      	mov	r3, r1
   15a60:	4640      	mov	r0, r8
   15a62:	4649      	mov	r1, r9
   15a64:	f002 f8d2 	bl	17c0c <__aeabi_ddiv>
   15a68:	4602      	mov	r2, r0
   15a6a:	460b      	mov	r3, r1
   15a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15a70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a78:	f001 ff9e 	bl	179b8 <__aeabi_dmul>
   15a7c:	4602      	mov	r2, r0
   15a7e:	460b      	mov	r3, r1
   15a80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a84:	f001 fde4 	bl	17650 <__aeabi_dsub>
   15a88:	4602      	mov	r2, r0
   15a8a:	460b      	mov	r3, r1
   15a8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15a90:	e029      	b.n	15ae6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a9a:	f001 fddb 	bl	17654 <__adddf3>
   15a9e:	4602      	mov	r2, r0
   15aa0:	460b      	mov	r3, r1
   15aa2:	4690      	mov	r8, r2
   15aa4:	4699      	mov	r9, r3
   15aa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15aae:	f001 fdcf 	bl	17650 <__aeabi_dsub>
   15ab2:	4602      	mov	r2, r0
   15ab4:	460b      	mov	r3, r1
   15ab6:	4640      	mov	r0, r8
   15ab8:	4649      	mov	r1, r9
   15aba:	f002 f8a7 	bl	17c0c <__aeabi_ddiv>
   15abe:	4602      	mov	r2, r0
   15ac0:	460b      	mov	r3, r1
   15ac2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15aca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ace:	f001 ff73 	bl	179b8 <__aeabi_dmul>
   15ad2:	4602      	mov	r2, r0
   15ad4:	460b      	mov	r3, r1
   15ad6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15ada:	f001 fdb9 	bl	17650 <__aeabi_dsub>
   15ade:	4602      	mov	r2, r0
   15ae0:	460b      	mov	r3, r1
   15ae2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
   15aea:	f04f 0200 	mov.w	r2, #0
   15aee:	f04f 0300 	mov.w	r3, #0
   15af2:	f002 f9d3 	bl	17e9c <__aeabi_dcmplt>
   15af6:	4603      	mov	r3, r0
   15af8:	2b00      	cmp	r3, #0
   15afa:	d004      	beq.n	15b06 <pp_atan2+0x156>
		return (-angle);
   15afc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15b00:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15b04:	e001      	b.n	15b0a <pp_atan2+0x15a>
	else
		return angle;
   15b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15b0a:	4622      	mov	r2, r4
   15b0c:	462b      	mov	r3, r5
}
   15b0e:	4610      	mov	r0, r2
   15b10:	4619      	mov	r1, r3
   15b12:	3738      	adds	r7, #56	; 0x38
   15b14:	46bd      	mov	sp, r7
   15b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15b1a:	bf00      	nop
   15b1c:	f3af 8000 	nop.w
   15b20:	54442d18 	.word	0x54442d18
   15b24:	3fe921fb 	.word	0x3fe921fb
   15b28:	d9d7bdbb 	.word	0xd9d7bdbb
   15b2c:	3ddb7cdf 	.word	0x3ddb7cdf

00015b30 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15b30:	b5b0      	push	{r4, r5, r7, lr}
   15b32:	b08c      	sub	sp, #48	; 0x30
   15b34:	af00      	add	r7, sp, #0
   15b36:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15b3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b42:	2301      	movs	r3, #1
   15b44:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15b46:	e00a      	b.n	15b5e <pp_sin+0x2e>
   15b48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b4c:	a35a      	add	r3, pc, #360	; (adr r3, 15cb8 <pp_sin+0x188>)
   15b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b52:	f001 fd7f 	bl	17654 <__adddf3>
   15b56:	4602      	mov	r2, r0
   15b58:	460b      	mov	r3, r1
   15b5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b62:	a357      	add	r3, pc, #348	; (adr r3, 15cc0 <pp_sin+0x190>)
   15b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b68:	f002 f998 	bl	17e9c <__aeabi_dcmplt>
   15b6c:	4603      	mov	r3, r0
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d1ea      	bne.n	15b48 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15b72:	e00a      	b.n	15b8a <pp_sin+0x5a>
   15b74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b78:	a34f      	add	r3, pc, #316	; (adr r3, 15cb8 <pp_sin+0x188>)
   15b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b7e:	f001 fd67 	bl	17650 <__aeabi_dsub>
   15b82:	4602      	mov	r2, r0
   15b84:	460b      	mov	r3, r1
   15b86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b8e:	a34e      	add	r3, pc, #312	; (adr r3, 15cc8 <pp_sin+0x198>)
   15b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b94:	f002 f9a0 	bl	17ed8 <__aeabi_dcmpgt>
   15b98:	4603      	mov	r3, r0
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d1ea      	bne.n	15b74 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ba2:	a34b      	add	r3, pc, #300	; (adr r3, 15cd0 <pp_sin+0x1a0>)
   15ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ba8:	f002 f996 	bl	17ed8 <__aeabi_dcmpgt>
   15bac:	4603      	mov	r3, r0
   15bae:	2b00      	cmp	r3, #0
   15bb0:	d00d      	beq.n	15bce <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15bb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bb6:	a348      	add	r3, pc, #288	; (adr r3, 15cd8 <pp_sin+0x1a8>)
   15bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bbc:	f001 fd48 	bl	17650 <__aeabi_dsub>
   15bc0:	4602      	mov	r2, r0
   15bc2:	460b      	mov	r3, r1
   15bc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15bc8:	f04f 33ff 	mov.w	r3, #4294967295
   15bcc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bd2:	a343      	add	r3, pc, #268	; (adr r3, 15ce0 <pp_sin+0x1b0>)
   15bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bd8:	f002 f818 	bl	17c0c <__aeabi_ddiv>
   15bdc:	4602      	mov	r2, r0
   15bde:	460b      	mov	r3, r1
   15be0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15be4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15bec:	f001 fee4 	bl	179b8 <__aeabi_dmul>
   15bf0:	4602      	mov	r2, r0
   15bf2:	460b      	mov	r3, r1
   15bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15bfc:	a33a      	add	r3, pc, #232	; (adr r3, 15ce8 <pp_sin+0x1b8>)
   15bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c02:	f001 fed9 	bl	179b8 <__aeabi_dmul>
   15c06:	4602      	mov	r2, r0
   15c08:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15c0a:	4610      	mov	r0, r2
   15c0c:	4619      	mov	r1, r3
   15c0e:	a338      	add	r3, pc, #224	; (adr r3, 15cf0 <pp_sin+0x1c0>)
   15c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c14:	f001 fd1c 	bl	17650 <__aeabi_dsub>
   15c18:	4602      	mov	r2, r0
   15c1a:	460b      	mov	r3, r1
   15c1c:	4610      	mov	r0, r2
   15c1e:	4619      	mov	r1, r3
   15c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c24:	f001 fec8 	bl	179b8 <__aeabi_dmul>
   15c28:	4602      	mov	r2, r0
   15c2a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15c2c:	4610      	mov	r0, r2
   15c2e:	4619      	mov	r1, r3
   15c30:	a331      	add	r3, pc, #196	; (adr r3, 15cf8 <pp_sin+0x1c8>)
   15c32:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c36:	f001 fd0d 	bl	17654 <__adddf3>
   15c3a:	4602      	mov	r2, r0
   15c3c:	460b      	mov	r3, r1
   15c3e:	4610      	mov	r0, r2
   15c40:	4619      	mov	r1, r3
   15c42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c46:	f001 feb7 	bl	179b8 <__aeabi_dmul>
   15c4a:	4602      	mov	r2, r0
   15c4c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15c4e:	4610      	mov	r0, r2
   15c50:	4619      	mov	r1, r3
   15c52:	a32b      	add	r3, pc, #172	; (adr r3, 15d00 <pp_sin+0x1d0>)
   15c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c58:	f001 fcfa 	bl	17650 <__aeabi_dsub>
   15c5c:	4602      	mov	r2, r0
   15c5e:	460b      	mov	r3, r1
   15c60:	4610      	mov	r0, r2
   15c62:	4619      	mov	r1, r3
   15c64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c68:	f001 fea6 	bl	179b8 <__aeabi_dmul>
   15c6c:	4602      	mov	r2, r0
   15c6e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15c70:	4610      	mov	r0, r2
   15c72:	4619      	mov	r1, r3
   15c74:	a324      	add	r3, pc, #144	; (adr r3, 15d08 <pp_sin+0x1d8>)
   15c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c7a:	f001 fceb 	bl	17654 <__adddf3>
   15c7e:	4602      	mov	r2, r0
   15c80:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15c82:	4610      	mov	r0, r2
   15c84:	4619      	mov	r1, r3
   15c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c8a:	f001 fe95 	bl	179b8 <__aeabi_dmul>
   15c8e:	4602      	mov	r2, r0
   15c90:	460b      	mov	r3, r1
   15c92:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c98:	2b00      	cmp	r3, #0
   15c9a:	da04      	bge.n	15ca6 <pp_sin+0x176>
   15c9c:	68bc      	ldr	r4, [r7, #8]
   15c9e:	68fb      	ldr	r3, [r7, #12]
   15ca0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ca4:	e001      	b.n	15caa <pp_sin+0x17a>
   15ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15caa:	4622      	mov	r2, r4
   15cac:	462b      	mov	r3, r5
}
   15cae:	4610      	mov	r0, r2
   15cb0:	4619      	mov	r1, r3
   15cb2:	3730      	adds	r7, #48	; 0x30
   15cb4:	46bd      	mov	sp, r7
   15cb6:	bdb0      	pop	{r4, r5, r7, pc}
   15cb8:	54442d18 	.word	0x54442d18
   15cbc:	401921fb 	.word	0x401921fb
   15cc0:	54442d18 	.word	0x54442d18
   15cc4:	bff921fb 	.word	0xbff921fb
   15cc8:	7f3321d2 	.word	0x7f3321d2
   15ccc:	4012d97c 	.word	0x4012d97c
   15cd0:	54442d18 	.word	0x54442d18
   15cd4:	3ff921fb 	.word	0x3ff921fb
   15cd8:	54442d18 	.word	0x54442d18
   15cdc:	400921fb 	.word	0x400921fb
   15ce0:	5443d6f4 	.word	0x5443d6f4
   15ce4:	3ff921fb 	.word	0x3ff921fb
   15ce8:	48a890af 	.word	0x48a890af
   15cec:	3f23daf7 	.word	0x3f23daf7
   15cf0:	645b6d0e 	.word	0x645b6d0e
   15cf4:	3f7324cc 	.word	0x3f7324cc
   15cf8:	f65619a5 	.word	0xf65619a5
   15cfc:	3fb4668a 	.word	0x3fb4668a
   15d00:	16acf9cd 	.word	0x16acf9cd
   15d04:	3fe4abbc 	.word	0x3fe4abbc
   15d08:	520817f7 	.word	0x520817f7
   15d0c:	3ff921fb 	.word	0x3ff921fb

00015d10 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15d10:	b480      	push	{r7}
   15d12:	b083      	sub	sp, #12
   15d14:	af00      	add	r7, sp, #0
   15d16:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15d1a:	4610      	mov	r0, r2
   15d1c:	4619      	mov	r1, r3
   15d1e:	370c      	adds	r7, #12
   15d20:	46bd      	mov	sp, r7
   15d22:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d26:	4770      	bx	lr

00015d28 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15d28:	b480      	push	{r7}
   15d2a:	b083      	sub	sp, #12
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	4603      	mov	r3, r0
   15d30:	6039      	str	r1, [r7, #0]
   15d32:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15d34:	79fa      	ldrb	r2, [r7, #7]
   15d36:	f24c 5320 	movw	r3, #50464	; 0xc520
   15d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15d3e:	6839      	ldr	r1, [r7, #0]
   15d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15d44:	370c      	adds	r7, #12
   15d46:	46bd      	mov	sp, r7
   15d48:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d4c:	4770      	bx	lr
   15d4e:	bf00      	nop

00015d50 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15d50:	b480      	push	{r7}
   15d52:	b083      	sub	sp, #12
   15d54:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15d56:	f242 0315 	movw	r3, #8213	; 0x2015
   15d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d5e:	2200      	movs	r2, #0
   15d60:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15d62:	f242 0314 	movw	r3, #8212	; 0x2014
   15d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d6a:	2200      	movs	r2, #0
   15d6c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15d6e:	f242 0307 	movw	r3, #8199	; 0x2007
   15d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d76:	22c0      	movs	r2, #192	; 0xc0
   15d78:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15d7a:	f242 0306 	movw	r3, #8198	; 0x2006
   15d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d82:	22cf      	movs	r2, #207	; 0xcf
   15d84:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d86:	2300      	movs	r3, #0
   15d88:	71fb      	strb	r3, [r7, #7]
   15d8a:	e00a      	b.n	15da2 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15d8c:	79fa      	ldrb	r2, [r7, #7]
   15d8e:	f24c 5320 	movw	r3, #50464	; 0xc520
   15d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15d96:	2100      	movs	r1, #0
   15d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d9c:	79fb      	ldrb	r3, [r7, #7]
   15d9e:	3301      	adds	r3, #1
   15da0:	71fb      	strb	r3, [r7, #7]
   15da2:	79fb      	ldrb	r3, [r7, #7]
   15da4:	2b07      	cmp	r3, #7
   15da6:	d9f1      	bls.n	15d8c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15da8:	370c      	adds	r7, #12
   15daa:	46bd      	mov	sp, r7
   15dac:	f85d 7b04 	ldr.w	r7, [sp], #4
   15db0:	4770      	bx	lr
   15db2:	bf00      	nop

00015db4 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15db4:	b480      	push	{r7}
   15db6:	b083      	sub	sp, #12
   15db8:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15dba:	f242 0326 	movw	r3, #8230	; 0x2026
   15dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dc2:	881b      	ldrh	r3, [r3, #0]
   15dc4:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15dc6:	f24c 537c 	movw	r3, #50556	; 0xc57c
   15dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15dce:	881b      	ldrh	r3, [r3, #0]
   15dd0:	88fa      	ldrh	r2, [r7, #6]
   15dd2:	1ad3      	subs	r3, r2, r3
   15dd4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15dd6:	f24c 537c 	movw	r3, #50556	; 0xc57c
   15dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15dde:	88fa      	ldrh	r2, [r7, #6]
   15de0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15de2:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15dea:	781b      	ldrb	r3, [r3, #0]
   15dec:	2b00      	cmp	r3, #0
   15dee:	d11e      	bne.n	15e2e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15df0:	f242 0324 	movw	r3, #8228	; 0x2024
   15df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df8:	781b      	ldrb	r3, [r3, #0]
   15dfa:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15dfc:	f24c 537f 	movw	r3, #50559	; 0xc57f
   15e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e04:	781b      	ldrb	r3, [r3, #0]
   15e06:	78fa      	ldrb	r2, [r7, #3]
   15e08:	1ad3      	subs	r3, r2, r3
   15e0a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15e0c:	f24c 537f 	movw	r3, #50559	; 0xc57f
   15e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e14:	78fa      	ldrb	r2, [r7, #3]
   15e16:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15e18:	78bb      	ldrb	r3, [r7, #2]
   15e1a:	2b6d      	cmp	r3, #109	; 0x6d
   15e1c:	d906      	bls.n	15e2c <__vector_34+0x78>
      state = 1;
   15e1e:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e26:	2201      	movs	r2, #1
   15e28:	701a      	strb	r2, [r3, #0]
   15e2a:	e053      	b.n	15ed4 <__vector_34+0x120>
   15e2c:	e052      	b.n	15ed4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15e2e:	88bb      	ldrh	r3, [r7, #4]
   15e30:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15e34:	d304      	bcc.n	15e40 <__vector_34+0x8c>
   15e36:	88ba      	ldrh	r2, [r7, #4]
   15e38:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15e3c:	429a      	cmp	r2, r3
   15e3e:	d911      	bls.n	15e64 <__vector_34+0xb0>
      RestartPpmCycle();
   15e40:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e48:	2200      	movs	r2, #0
   15e4a:	701a      	strb	r2, [r3, #0]
   15e4c:	f242 0324 	movw	r3, #8228	; 0x2024
   15e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e54:	781b      	ldrb	r3, [r3, #0]
   15e56:	b2da      	uxtb	r2, r3
   15e58:	f24c 537f 	movw	r3, #50559	; 0xc57f
   15e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e60:	701a      	strb	r2, [r3, #0]
   15e62:	e038      	b.n	15ed6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15e64:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e6c:	781b      	ldrb	r3, [r3, #0]
   15e6e:	1e5a      	subs	r2, r3, #1
   15e70:	f24c 5340 	movw	r3, #50496	; 0xc540
   15e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e78:	88b9      	ldrh	r1, [r7, #4]
   15e7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15e7e:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e86:	781b      	ldrb	r3, [r3, #0]
   15e88:	2b08      	cmp	r3, #8
   15e8a:	d917      	bls.n	15ebc <__vector_34+0x108>
      ppm_valid	= 1;
   15e8c:	f24c 537b 	movw	r3, #50555	; 0xc57b
   15e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e94:	2201      	movs	r2, #1
   15e96:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15e98:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ea0:	2200      	movs	r2, #0
   15ea2:	701a      	strb	r2, [r3, #0]
   15ea4:	f242 0324 	movw	r3, #8228	; 0x2024
   15ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	b2da      	uxtb	r2, r3
   15eb0:	f24c 537f 	movw	r3, #50559	; 0xc57f
   15eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eb8:	701a      	strb	r2, [r3, #0]
   15eba:	e00c      	b.n	15ed6 <__vector_34+0x122>
    } else 
      state++;
   15ebc:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ec4:	781b      	ldrb	r3, [r3, #0]
   15ec6:	3301      	adds	r3, #1
   15ec8:	b2da      	uxtb	r2, r3
   15eca:	f24c 537e 	movw	r3, #50558	; 0xc57e
   15ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ed2:	701a      	strb	r2, [r3, #0]
  }
  return;
   15ed4:	bf00      	nop
}
   15ed6:	370c      	adds	r7, #12
   15ed8:	46bd      	mov	sp, r7
   15eda:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ede:	4770      	bx	lr

00015ee0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15ee0:	b590      	push	{r4, r7, lr}
   15ee2:	b083      	sub	sp, #12
   15ee4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15ee6:	f24c 5340 	movw	r3, #50496	; 0xc540
   15eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eee:	881b      	ldrh	r3, [r3, #0]
   15ef0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15ef4:	b29b      	uxth	r3, r3
   15ef6:	80fb      	strh	r3, [r7, #6]
   15ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15efc:	4618      	mov	r0, r3
   15efe:	f002 f947 	bl	18190 <__aeabi_i2f>
   15f02:	4603      	mov	r3, r0
   15f04:	4618      	mov	r0, r3
   15f06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15f0a:	f002 f995 	bl	18238 <__aeabi_fmul>
   15f0e:	4603      	mov	r3, r0
   15f10:	4618      	mov	r0, r3
   15f12:	f002 fb57 	bl	185c4 <__aeabi_f2iz>
   15f16:	4603      	mov	r3, r0
   15f18:	b29a      	uxth	r2, r3
   15f1a:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f22:	801a      	strh	r2, [r3, #0]
   15f24:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f2c:	881b      	ldrh	r3, [r3, #0]
   15f2e:	b21b      	sxth	r3, r3
   15f30:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f34:	dd07      	ble.n	15f46 <last_radio_from_ppm+0x66>
   15f36:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f3e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f42:	801a      	strh	r2, [r3, #0]
   15f44:	e00d      	b.n	15f62 <last_radio_from_ppm+0x82>
   15f46:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f4e:	881b      	ldrh	r3, [r3, #0]
   15f50:	b21b      	sxth	r3, r3
   15f52:	2b00      	cmp	r3, #0
   15f54:	da05      	bge.n	15f62 <last_radio_from_ppm+0x82>
   15f56:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f5e:	2200      	movs	r2, #0
   15f60:	801a      	strh	r2, [r3, #0]
   15f62:	f24c 5340 	movw	r3, #50496	; 0xc540
   15f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f6a:	885b      	ldrh	r3, [r3, #2]
   15f6c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f70:	b29b      	uxth	r3, r3
   15f72:	80fb      	strh	r3, [r7, #6]
   15f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f78:	4618      	mov	r0, r3
   15f7a:	f002 f909 	bl	18190 <__aeabi_i2f>
   15f7e:	4603      	mov	r3, r0
   15f80:	4618      	mov	r0, r3
   15f82:	f002 fb1f 	bl	185c4 <__aeabi_f2iz>
   15f86:	4603      	mov	r3, r0
   15f88:	b29a      	uxth	r2, r3
   15f8a:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f92:	805a      	strh	r2, [r3, #2]
   15f94:	f24c 5354 	movw	r3, #50516	; 0xc554
   15f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f9c:	885b      	ldrh	r3, [r3, #2]
   15f9e:	b21b      	sxth	r3, r3
   15fa0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fa4:	dd07      	ble.n	15fb6 <last_radio_from_ppm+0xd6>
   15fa6:	f24c 5354 	movw	r3, #50516	; 0xc554
   15faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15fb2:	805a      	strh	r2, [r3, #2]
   15fb4:	e00f      	b.n	15fd6 <last_radio_from_ppm+0xf6>
   15fb6:	f24c 5354 	movw	r3, #50516	; 0xc554
   15fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fbe:	885b      	ldrh	r3, [r3, #2]
   15fc0:	b21b      	sxth	r3, r3
   15fc2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15fc6:	da06      	bge.n	15fd6 <last_radio_from_ppm+0xf6>
   15fc8:	f24c 5354 	movw	r3, #50516	; 0xc554
   15fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fd0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15fd4:	805a      	strh	r2, [r3, #2]
   15fd6:	f24c 5340 	movw	r3, #50496	; 0xc540
   15fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fde:	889b      	ldrh	r3, [r3, #4]
   15fe0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15fe4:	b29b      	uxth	r3, r3
   15fe6:	80fb      	strh	r3, [r7, #6]
   15fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fec:	4618      	mov	r0, r3
   15fee:	f002 f8cf 	bl	18190 <__aeabi_i2f>
   15ff2:	4603      	mov	r3, r0
   15ff4:	4618      	mov	r0, r3
   15ff6:	f002 fae5 	bl	185c4 <__aeabi_f2iz>
   15ffa:	4603      	mov	r3, r0
   15ffc:	b29a      	uxth	r2, r3
   15ffe:	f24c 5354 	movw	r3, #50516	; 0xc554
   16002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16006:	809a      	strh	r2, [r3, #4]
   16008:	f24c 5354 	movw	r3, #50516	; 0xc554
   1600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16010:	889b      	ldrh	r3, [r3, #4]
   16012:	b21b      	sxth	r3, r3
   16014:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16018:	dd07      	ble.n	1602a <last_radio_from_ppm+0x14a>
   1601a:	f24c 5354 	movw	r3, #50516	; 0xc554
   1601e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16022:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16026:	809a      	strh	r2, [r3, #4]
   16028:	e00f      	b.n	1604a <last_radio_from_ppm+0x16a>
   1602a:	f24c 5354 	movw	r3, #50516	; 0xc554
   1602e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16032:	889b      	ldrh	r3, [r3, #4]
   16034:	b21b      	sxth	r3, r3
   16036:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1603a:	da06      	bge.n	1604a <last_radio_from_ppm+0x16a>
   1603c:	f24c 5354 	movw	r3, #50516	; 0xc554
   16040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16044:	f64d 2280 	movw	r2, #55936	; 0xda80
   16048:	809a      	strh	r2, [r3, #4]
   1604a:	f24c 5340 	movw	r3, #50496	; 0xc540
   1604e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16052:	88db      	ldrh	r3, [r3, #6]
   16054:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16058:	b29b      	uxth	r3, r3
   1605a:	80fb      	strh	r3, [r7, #6]
   1605c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16060:	4618      	mov	r0, r3
   16062:	f002 f895 	bl	18190 <__aeabi_i2f>
   16066:	4603      	mov	r3, r0
   16068:	4618      	mov	r0, r3
   1606a:	f002 faab 	bl	185c4 <__aeabi_f2iz>
   1606e:	4603      	mov	r3, r0
   16070:	b29a      	uxth	r2, r3
   16072:	f24c 5354 	movw	r3, #50516	; 0xc554
   16076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1607a:	80da      	strh	r2, [r3, #6]
   1607c:	f24c 5354 	movw	r3, #50516	; 0xc554
   16080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16084:	88db      	ldrh	r3, [r3, #6]
   16086:	b21b      	sxth	r3, r3
   16088:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1608c:	dd07      	ble.n	1609e <last_radio_from_ppm+0x1be>
   1608e:	f24c 5354 	movw	r3, #50516	; 0xc554
   16092:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16096:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1609a:	80da      	strh	r2, [r3, #6]
   1609c:	e00f      	b.n	160be <last_radio_from_ppm+0x1de>
   1609e:	f24c 5354 	movw	r3, #50516	; 0xc554
   160a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a6:	88db      	ldrh	r3, [r3, #6]
   160a8:	b21b      	sxth	r3, r3
   160aa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160ae:	da06      	bge.n	160be <last_radio_from_ppm+0x1de>
   160b0:	f24c 5354 	movw	r3, #50516	; 0xc554
   160b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b8:	f64d 2280 	movw	r2, #55936	; 0xda80
   160bc:	80da      	strh	r2, [r3, #6]
   160be:	f24c 5340 	movw	r3, #50496	; 0xc540
   160c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c6:	891b      	ldrh	r3, [r3, #8]
   160c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160cc:	b29b      	uxth	r3, r3
   160ce:	80fb      	strh	r3, [r7, #6]
   160d0:	f24c 5368 	movw	r3, #50536	; 0xc568
   160d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d8:	891b      	ldrh	r3, [r3, #8]
   160da:	b21b      	sxth	r3, r3
   160dc:	4618      	mov	r0, r3
   160de:	f002 f857 	bl	18190 <__aeabi_i2f>
   160e2:	4604      	mov	r4, r0
   160e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160e8:	4618      	mov	r0, r3
   160ea:	f002 f851 	bl	18190 <__aeabi_i2f>
   160ee:	4603      	mov	r3, r0
   160f0:	4618      	mov	r0, r3
   160f2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   160f6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   160fa:	f002 f89d 	bl	18238 <__aeabi_fmul>
   160fe:	4603      	mov	r3, r0
   16100:	4620      	mov	r0, r4
   16102:	4619      	mov	r1, r3
   16104:	f001 ff90 	bl	18028 <__addsf3>
   16108:	4603      	mov	r3, r0
   1610a:	4618      	mov	r0, r3
   1610c:	f002 fa5a 	bl	185c4 <__aeabi_f2iz>
   16110:	4603      	mov	r3, r0
   16112:	b29a      	uxth	r2, r3
   16114:	f24c 5368 	movw	r3, #50536	; 0xc568
   16118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1611c:	811a      	strh	r2, [r3, #8]
   1611e:	f24c 5340 	movw	r3, #50496	; 0xc540
   16122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16126:	895b      	ldrh	r3, [r3, #10]
   16128:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1612c:	b29b      	uxth	r3, r3
   1612e:	80fb      	strh	r3, [r7, #6]
   16130:	f24c 5368 	movw	r3, #50536	; 0xc568
   16134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16138:	895b      	ldrh	r3, [r3, #10]
   1613a:	b21b      	sxth	r3, r3
   1613c:	4618      	mov	r0, r3
   1613e:	f002 f827 	bl	18190 <__aeabi_i2f>
   16142:	4604      	mov	r4, r0
   16144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16148:	4618      	mov	r0, r3
   1614a:	f002 f821 	bl	18190 <__aeabi_i2f>
   1614e:	4603      	mov	r3, r0
   16150:	4618      	mov	r0, r3
   16152:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16156:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1615a:	f002 f86d 	bl	18238 <__aeabi_fmul>
   1615e:	4603      	mov	r3, r0
   16160:	4620      	mov	r0, r4
   16162:	4619      	mov	r1, r3
   16164:	f001 ff60 	bl	18028 <__addsf3>
   16168:	4603      	mov	r3, r0
   1616a:	4618      	mov	r0, r3
   1616c:	f002 fa2a 	bl	185c4 <__aeabi_f2iz>
   16170:	4603      	mov	r3, r0
   16172:	b29a      	uxth	r2, r3
   16174:	f24c 5368 	movw	r3, #50536	; 0xc568
   16178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617c:	815a      	strh	r2, [r3, #10]
   1617e:	f24c 5340 	movw	r3, #50496	; 0xc540
   16182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16186:	899b      	ldrh	r3, [r3, #12]
   16188:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1618c:	b29b      	uxth	r3, r3
   1618e:	80fb      	strh	r3, [r7, #6]
   16190:	f24c 5368 	movw	r3, #50536	; 0xc568
   16194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16198:	899b      	ldrh	r3, [r3, #12]
   1619a:	b21b      	sxth	r3, r3
   1619c:	4618      	mov	r0, r3
   1619e:	f001 fff7 	bl	18190 <__aeabi_i2f>
   161a2:	4604      	mov	r4, r0
   161a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161a8:	4618      	mov	r0, r3
   161aa:	f001 fff1 	bl	18190 <__aeabi_i2f>
   161ae:	4603      	mov	r3, r0
   161b0:	4618      	mov	r0, r3
   161b2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161b6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161ba:	f002 f83d 	bl	18238 <__aeabi_fmul>
   161be:	4603      	mov	r3, r0
   161c0:	4620      	mov	r0, r4
   161c2:	4619      	mov	r1, r3
   161c4:	f001 ff30 	bl	18028 <__addsf3>
   161c8:	4603      	mov	r3, r0
   161ca:	4618      	mov	r0, r3
   161cc:	f002 f9fa 	bl	185c4 <__aeabi_f2iz>
   161d0:	4603      	mov	r3, r0
   161d2:	b29a      	uxth	r2, r3
   161d4:	f24c 5368 	movw	r3, #50536	; 0xc568
   161d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161dc:	819a      	strh	r2, [r3, #12]
   161de:	f24c 5340 	movw	r3, #50496	; 0xc540
   161e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e6:	89db      	ldrh	r3, [r3, #14]
   161e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161ec:	b29b      	uxth	r3, r3
   161ee:	80fb      	strh	r3, [r7, #6]
   161f0:	f24c 5368 	movw	r3, #50536	; 0xc568
   161f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f8:	89db      	ldrh	r3, [r3, #14]
   161fa:	b21b      	sxth	r3, r3
   161fc:	4618      	mov	r0, r3
   161fe:	f001 ffc7 	bl	18190 <__aeabi_i2f>
   16202:	4604      	mov	r4, r0
   16204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16208:	4618      	mov	r0, r3
   1620a:	f001 ffc1 	bl	18190 <__aeabi_i2f>
   1620e:	4603      	mov	r3, r0
   16210:	4618      	mov	r0, r3
   16212:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16216:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1621a:	f002 f80d 	bl	18238 <__aeabi_fmul>
   1621e:	4603      	mov	r3, r0
   16220:	4620      	mov	r0, r4
   16222:	4619      	mov	r1, r3
   16224:	f001 ff00 	bl	18028 <__addsf3>
   16228:	4603      	mov	r3, r0
   1622a:	4618      	mov	r0, r3
   1622c:	f002 f9ca 	bl	185c4 <__aeabi_f2iz>
   16230:	4603      	mov	r3, r0
   16232:	b29a      	uxth	r2, r3
   16234:	f24c 5368 	movw	r3, #50536	; 0xc568
   16238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623c:	81da      	strh	r2, [r3, #14]
   1623e:	f24c 5340 	movw	r3, #50496	; 0xc540
   16242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16246:	8a1b      	ldrh	r3, [r3, #16]
   16248:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1624c:	b29b      	uxth	r3, r3
   1624e:	80fb      	strh	r3, [r7, #6]
   16250:	f24c 5368 	movw	r3, #50536	; 0xc568
   16254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16258:	8a1b      	ldrh	r3, [r3, #16]
   1625a:	b21b      	sxth	r3, r3
   1625c:	4618      	mov	r0, r3
   1625e:	f001 ff97 	bl	18190 <__aeabi_i2f>
   16262:	4604      	mov	r4, r0
   16264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16268:	4618      	mov	r0, r3
   1626a:	f001 ff91 	bl	18190 <__aeabi_i2f>
   1626e:	4603      	mov	r3, r0
   16270:	4618      	mov	r0, r3
   16272:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16276:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1627a:	f001 ffdd 	bl	18238 <__aeabi_fmul>
   1627e:	4603      	mov	r3, r0
   16280:	4620      	mov	r0, r4
   16282:	4619      	mov	r1, r3
   16284:	f001 fed0 	bl	18028 <__addsf3>
   16288:	4603      	mov	r3, r0
   1628a:	4618      	mov	r0, r3
   1628c:	f002 f99a 	bl	185c4 <__aeabi_f2iz>
   16290:	4603      	mov	r3, r0
   16292:	b29a      	uxth	r2, r3
   16294:	f24c 5368 	movw	r3, #50536	; 0xc568
   16298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1629c:	821a      	strh	r2, [r3, #16]
   1629e:	f24c 5380 	movw	r3, #50560	; 0xc580
   162a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a6:	781b      	ldrb	r3, [r3, #0]
   162a8:	3301      	adds	r3, #1
   162aa:	b2da      	uxtb	r2, r3
   162ac:	f24c 5380 	movw	r3, #50560	; 0xc580
   162b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b4:	701a      	strb	r2, [r3, #0]
   162b6:	f24c 5380 	movw	r3, #50560	; 0xc580
   162ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162be:	781b      	ldrb	r3, [r3, #0]
   162c0:	2b0a      	cmp	r3, #10
   162c2:	f040 8101 	bne.w	164c8 <last_radio_from_ppm+0x5e8>
   162c6:	f24c 5380 	movw	r3, #50560	; 0xc580
   162ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ce:	2200      	movs	r2, #0
   162d0:	701a      	strb	r2, [r3, #0]
   162d2:	f24c 5368 	movw	r3, #50536	; 0xc568
   162d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162da:	891a      	ldrh	r2, [r3, #8]
   162dc:	f24c 5354 	movw	r3, #50516	; 0xc554
   162e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e4:	811a      	strh	r2, [r3, #8]
   162e6:	f24c 5368 	movw	r3, #50536	; 0xc568
   162ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ee:	2200      	movs	r2, #0
   162f0:	811a      	strh	r2, [r3, #8]
   162f2:	f24c 5354 	movw	r3, #50516	; 0xc554
   162f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162fa:	891b      	ldrh	r3, [r3, #8]
   162fc:	b21b      	sxth	r3, r3
   162fe:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16302:	dd07      	ble.n	16314 <last_radio_from_ppm+0x434>
   16304:	f24c 5354 	movw	r3, #50516	; 0xc554
   16308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16310:	811a      	strh	r2, [r3, #8]
   16312:	e00f      	b.n	16334 <last_radio_from_ppm+0x454>
   16314:	f24c 5354 	movw	r3, #50516	; 0xc554
   16318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1631c:	891b      	ldrh	r3, [r3, #8]
   1631e:	b21b      	sxth	r3, r3
   16320:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16324:	da06      	bge.n	16334 <last_radio_from_ppm+0x454>
   16326:	f24c 5354 	movw	r3, #50516	; 0xc554
   1632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1632e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16332:	811a      	strh	r2, [r3, #8]
   16334:	f24c 5368 	movw	r3, #50536	; 0xc568
   16338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1633c:	895a      	ldrh	r2, [r3, #10]
   1633e:	f24c 5354 	movw	r3, #50516	; 0xc554
   16342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16346:	815a      	strh	r2, [r3, #10]
   16348:	f24c 5368 	movw	r3, #50536	; 0xc568
   1634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16350:	2200      	movs	r2, #0
   16352:	815a      	strh	r2, [r3, #10]
   16354:	f24c 5354 	movw	r3, #50516	; 0xc554
   16358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635c:	895b      	ldrh	r3, [r3, #10]
   1635e:	b21b      	sxth	r3, r3
   16360:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16364:	dd07      	ble.n	16376 <last_radio_from_ppm+0x496>
   16366:	f24c 5354 	movw	r3, #50516	; 0xc554
   1636a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16372:	815a      	strh	r2, [r3, #10]
   16374:	e00f      	b.n	16396 <last_radio_from_ppm+0x4b6>
   16376:	f24c 5354 	movw	r3, #50516	; 0xc554
   1637a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1637e:	895b      	ldrh	r3, [r3, #10]
   16380:	b21b      	sxth	r3, r3
   16382:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16386:	da06      	bge.n	16396 <last_radio_from_ppm+0x4b6>
   16388:	f24c 5354 	movw	r3, #50516	; 0xc554
   1638c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16390:	f64d 2280 	movw	r2, #55936	; 0xda80
   16394:	815a      	strh	r2, [r3, #10]
   16396:	f24c 5368 	movw	r3, #50536	; 0xc568
   1639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639e:	899a      	ldrh	r2, [r3, #12]
   163a0:	f24c 5354 	movw	r3, #50516	; 0xc554
   163a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a8:	819a      	strh	r2, [r3, #12]
   163aa:	f24c 5368 	movw	r3, #50536	; 0xc568
   163ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163b2:	2200      	movs	r2, #0
   163b4:	819a      	strh	r2, [r3, #12]
   163b6:	f24c 5354 	movw	r3, #50516	; 0xc554
   163ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163be:	899b      	ldrh	r3, [r3, #12]
   163c0:	b21b      	sxth	r3, r3
   163c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163c6:	dd07      	ble.n	163d8 <last_radio_from_ppm+0x4f8>
   163c8:	f24c 5354 	movw	r3, #50516	; 0xc554
   163cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163d4:	819a      	strh	r2, [r3, #12]
   163d6:	e00f      	b.n	163f8 <last_radio_from_ppm+0x518>
   163d8:	f24c 5354 	movw	r3, #50516	; 0xc554
   163dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e0:	899b      	ldrh	r3, [r3, #12]
   163e2:	b21b      	sxth	r3, r3
   163e4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163e8:	da06      	bge.n	163f8 <last_radio_from_ppm+0x518>
   163ea:	f24c 5354 	movw	r3, #50516	; 0xc554
   163ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f2:	f64d 2280 	movw	r2, #55936	; 0xda80
   163f6:	819a      	strh	r2, [r3, #12]
   163f8:	f24c 5368 	movw	r3, #50536	; 0xc568
   163fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16400:	89da      	ldrh	r2, [r3, #14]
   16402:	f24c 5354 	movw	r3, #50516	; 0xc554
   16406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1640a:	81da      	strh	r2, [r3, #14]
   1640c:	f24c 5368 	movw	r3, #50536	; 0xc568
   16410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16414:	2200      	movs	r2, #0
   16416:	81da      	strh	r2, [r3, #14]
   16418:	f24c 5354 	movw	r3, #50516	; 0xc554
   1641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16420:	89db      	ldrh	r3, [r3, #14]
   16422:	b21b      	sxth	r3, r3
   16424:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16428:	dd07      	ble.n	1643a <last_radio_from_ppm+0x55a>
   1642a:	f24c 5354 	movw	r3, #50516	; 0xc554
   1642e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16432:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16436:	81da      	strh	r2, [r3, #14]
   16438:	e00f      	b.n	1645a <last_radio_from_ppm+0x57a>
   1643a:	f24c 5354 	movw	r3, #50516	; 0xc554
   1643e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16442:	89db      	ldrh	r3, [r3, #14]
   16444:	b21b      	sxth	r3, r3
   16446:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1644a:	da06      	bge.n	1645a <last_radio_from_ppm+0x57a>
   1644c:	f24c 5354 	movw	r3, #50516	; 0xc554
   16450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16454:	f64d 2280 	movw	r2, #55936	; 0xda80
   16458:	81da      	strh	r2, [r3, #14]
   1645a:	f24c 5368 	movw	r3, #50536	; 0xc568
   1645e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16462:	8a1a      	ldrh	r2, [r3, #16]
   16464:	f24c 5354 	movw	r3, #50516	; 0xc554
   16468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1646c:	821a      	strh	r2, [r3, #16]
   1646e:	f24c 5368 	movw	r3, #50536	; 0xc568
   16472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16476:	2200      	movs	r2, #0
   16478:	821a      	strh	r2, [r3, #16]
   1647a:	f24c 5354 	movw	r3, #50516	; 0xc554
   1647e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16482:	8a1b      	ldrh	r3, [r3, #16]
   16484:	b21b      	sxth	r3, r3
   16486:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1648a:	dd07      	ble.n	1649c <last_radio_from_ppm+0x5bc>
   1648c:	f24c 5354 	movw	r3, #50516	; 0xc554
   16490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16494:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16498:	821a      	strh	r2, [r3, #16]
   1649a:	e00f      	b.n	164bc <last_radio_from_ppm+0x5dc>
   1649c:	f24c 5354 	movw	r3, #50516	; 0xc554
   164a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a4:	8a1b      	ldrh	r3, [r3, #16]
   164a6:	b21b      	sxth	r3, r3
   164a8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164ac:	da06      	bge.n	164bc <last_radio_from_ppm+0x5dc>
   164ae:	f24c 5354 	movw	r3, #50516	; 0xc554
   164b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b6:	f64d 2280 	movw	r2, #55936	; 0xda80
   164ba:	821a      	strh	r2, [r3, #16]
   164bc:	f24c 537a 	movw	r3, #50554	; 0xc57a
   164c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c4:	2201      	movs	r2, #1
   164c6:	701a      	strb	r2, [r3, #0]
}
   164c8:	370c      	adds	r7, #12
   164ca:	46bd      	mov	sp, r7
   164cc:	bd90      	pop	{r4, r7, pc}
   164ce:	bf00      	nop

000164d0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   164d0:	b480      	push	{r7}
   164d2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   164d4:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   164d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164dc:	2200      	movs	r2, #0
   164de:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   164e0:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   164e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e8:	2200      	movs	r2, #0
   164ea:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   164ec:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   164f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f4:	781b      	ldrb	r3, [r3, #0]
   164f6:	b2db      	uxtb	r3, r3
   164f8:	461a      	mov	r2, r3
   164fa:	f24c 539c 	movw	r3, #50588	; 0xc59c
   164fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16502:	4413      	add	r3, r2
   16504:	781a      	ldrb	r2, [r3, #0]
   16506:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16510:	f242 030f 	movw	r3, #8207	; 0x200f
   16514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16518:	f24c 52b6 	movw	r2, #50614	; 0xc5b6
   1651c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16520:	7812      	ldrb	r2, [r2, #0]
   16522:	b2d2      	uxtb	r2, r2
   16524:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16526:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   1652a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1652e:	2200      	movs	r2, #0
   16530:	701a      	strb	r2, [r3, #0]
}
   16532:	46bd      	mov	sp, r7
   16534:	f85d 7b04 	ldr.w	r7, [sp], #4
   16538:	4770      	bx	lr
   1653a:	bf00      	nop

0001653c <fbw_spi_init>:

void fbw_spi_init(void) {
   1653c:	b480      	push	{r7}
   1653e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16540:	f24c 539c 	movw	r3, #50588	; 0xc59c
   16544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16548:	2200      	movs	r2, #0
   1654a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1654c:	f24c 539c 	movw	r3, #50588	; 0xc59c
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	2200      	movs	r2, #0
   16556:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16558:	f242 0317 	movw	r3, #8215	; 0x2017
   1655c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16560:	f242 0217 	movw	r2, #8215	; 0x2017
   16564:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16568:	7812      	ldrb	r2, [r2, #0]
   1656a:	b2d2      	uxtb	r2, r2
   1656c:	f042 0210 	orr.w	r2, r2, #16
   16570:	b2d2      	uxtb	r2, r2
   16572:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16574:	f242 030d 	movw	r3, #8205	; 0x200d
   16578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1657c:	2240      	movs	r2, #64	; 0x40
   1657e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16580:	f242 030d 	movw	r3, #8205	; 0x200d
   16584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16588:	f242 020d 	movw	r2, #8205	; 0x200d
   1658c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16590:	7812      	ldrb	r2, [r2, #0]
   16592:	b2d2      	uxtb	r2, r2
   16594:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16598:	b2d2      	uxtb	r2, r2
   1659a:	701a      	strb	r2, [r3, #0]
}
   1659c:	46bd      	mov	sp, r7
   1659e:	f85d 7b04 	ldr.w	r7, [sp], #4
   165a2:	4770      	bx	lr
   165a4:	0000      	movs	r0, r0
	...

000165a8 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   165a8:	b480      	push	{r7}
   165aa:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   165ac:	f242 032f 	movw	r3, #8239	; 0x202f
   165b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165b4:	2200      	movs	r2, #0
   165b6:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   165b8:	f242 032e 	movw	r3, #8238	; 0x202e
   165bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c0:	2201      	movs	r2, #1
   165c2:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   165c4:	f242 0325 	movw	r3, #8229	; 0x2025
   165c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165cc:	2207      	movs	r2, #7
   165ce:	701a      	strb	r2, [r3, #0]
}
   165d0:	46bd      	mov	sp, r7
   165d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   165d6:	4770      	bx	lr

000165d8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   165d8:	b480      	push	{r7}
   165da:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   165dc:	f242 032e 	movw	r3, #8238	; 0x202e
   165e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165e4:	f242 022e 	movw	r2, #8238	; 0x202e
   165e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165ec:	7812      	ldrb	r2, [r2, #0]
   165ee:	b2d2      	uxtb	r2, r2
   165f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   165f4:	b2d2      	uxtb	r2, r2
   165f6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   165f8:	f242 032e 	movw	r3, #8238	; 0x202e
   165fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16600:	f242 022e 	movw	r2, #8238	; 0x202e
   16604:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16608:	7812      	ldrb	r2, [r2, #0]
   1660a:	b2d2      	uxtb	r2, r2
   1660c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16610:	b2d2      	uxtb	r2, r2
   16612:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16614:	f242 0317 	movw	r3, #8215	; 0x2017
   16618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1661c:	f242 0217 	movw	r2, #8215	; 0x2017
   16620:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16624:	7812      	ldrb	r2, [r2, #0]
   16626:	b2d2      	uxtb	r2, r2
   16628:	f022 0201 	bic.w	r2, r2, #1
   1662c:	b2d2      	uxtb	r2, r2
   1662e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16630:	f242 0337 	movw	r3, #8247	; 0x2037
   16634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16638:	f242 0237 	movw	r2, #8247	; 0x2037
   1663c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16640:	7812      	ldrb	r2, [r2, #0]
   16642:	b2d2      	uxtb	r2, r2
   16644:	f042 0220 	orr.w	r2, r2, #32
   16648:	b2d2      	uxtb	r2, r2
   1664a:	701a      	strb	r2, [r3, #0]
}
   1664c:	46bd      	mov	sp, r7
   1664e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16652:	4770      	bx	lr

00016654 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16654:	b580      	push	{r7, lr}
   16656:	b082      	sub	sp, #8
   16658:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1665a:	2300      	movs	r3, #0
   1665c:	71fb      	strb	r3, [r7, #7]
   1665e:	e010      	b.n	16682 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16660:	79fa      	ldrb	r2, [r7, #7]
   16662:	79f9      	ldrb	r1, [r7, #7]
   16664:	f24c 5354 	movw	r3, #50516	; 0xc554
   16668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1666c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16670:	f24c 539c 	movw	r3, #50588	; 0xc59c
   16674:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16678:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1667c:	79fb      	ldrb	r3, [r7, #7]
   1667e:	3301      	adds	r3, #1
   16680:	71fb      	strb	r3, [r7, #7]
   16682:	79fb      	ldrb	r3, [r7, #7]
   16684:	2b08      	cmp	r3, #8
   16686:	d9eb      	bls.n	16660 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16688:	f24c 6344 	movw	r3, #50756	; 0xc644
   1668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16690:	781b      	ldrb	r3, [r3, #0]
   16692:	2b00      	cmp	r3, #0
   16694:	bf0c      	ite	eq
   16696:	2300      	moveq	r3, #0
   16698:	2301      	movne	r3, #1
   1669a:	b2db      	uxtb	r3, r3
   1669c:	461a      	mov	r2, r3
   1669e:	f24c 539c 	movw	r3, #50588	; 0xc59c
   166a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a6:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   166a8:	f24c 539c 	movw	r3, #50588	; 0xc59c
   166ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b0:	7cdb      	ldrb	r3, [r3, #19]
   166b2:	b2da      	uxtb	r2, r3
   166b4:	f24c 6346 	movw	r3, #50758	; 0xc646
   166b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166bc:	781b      	ldrb	r3, [r3, #0]
   166be:	2b00      	cmp	r3, #0
   166c0:	d001      	beq.n	166c6 <to_autopilot_from_last_radio+0x72>
   166c2:	2302      	movs	r3, #2
   166c4:	e000      	b.n	166c8 <to_autopilot_from_last_radio+0x74>
   166c6:	2300      	movs	r3, #0
   166c8:	4313      	orrs	r3, r2
   166ca:	b2db      	uxtb	r3, r3
   166cc:	b2da      	uxtb	r2, r3
   166ce:	f24c 539c 	movw	r3, #50588	; 0xc59c
   166d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   166d8:	f24c 537a 	movw	r3, #50554	; 0xc57a
   166dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e0:	781b      	ldrb	r3, [r3, #0]
   166e2:	2b00      	cmp	r3, #0
   166e4:	d012      	beq.n	1670c <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   166e6:	f24c 539c 	movw	r3, #50588	; 0xc59c
   166ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ee:	7cdb      	ldrb	r3, [r3, #19]
   166f0:	f043 0304 	orr.w	r3, r3, #4
   166f4:	b2da      	uxtb	r2, r3
   166f6:	f24c 539c 	movw	r3, #50588	; 0xc59c
   166fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fe:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16700:	f24c 537a 	movw	r3, #50554	; 0xc57a
   16704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16708:	2200      	movs	r2, #0
   1670a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1670c:	f24c 6348 	movw	r3, #50760	; 0xc648
   16710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16714:	781a      	ldrb	r2, [r3, #0]
   16716:	f24c 539c 	movw	r3, #50588	; 0xc59c
   1671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16720:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   16724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16728:	881b      	ldrh	r3, [r3, #0]
   1672a:	4618      	mov	r0, r3
   1672c:	f001 f8de 	bl	178ec <__aeabi_i2d>
   16730:	4602      	mov	r2, r0
   16732:	460b      	mov	r3, r1
   16734:	4610      	mov	r0, r2
   16736:	4619      	mov	r1, r3
   16738:	a31b      	add	r3, pc, #108	; (adr r3, 167a8 <to_autopilot_from_last_radio+0x154>)
   1673a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1673e:	f001 f93b 	bl	179b8 <__aeabi_dmul>
   16742:	4602      	mov	r2, r0
   16744:	460b      	mov	r3, r1
   16746:	4610      	mov	r0, r2
   16748:	4619      	mov	r1, r3
   1674a:	f04f 0200 	mov.w	r2, #0
   1674e:	f04f 0300 	mov.w	r3, #0
   16752:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16756:	f001 fa59 	bl	17c0c <__aeabi_ddiv>
   1675a:	4602      	mov	r2, r0
   1675c:	460b      	mov	r3, r1
   1675e:	4610      	mov	r0, r2
   16760:	4619      	mov	r1, r3
   16762:	a313      	add	r3, pc, #76	; (adr r3, 167b0 <to_autopilot_from_last_radio+0x15c>)
   16764:	e9d3 2300 	ldrd	r2, r3, [r3]
   16768:	f000 ff74 	bl	17654 <__adddf3>
   1676c:	4602      	mov	r2, r0
   1676e:	460b      	mov	r3, r1
   16770:	4610      	mov	r0, r2
   16772:	4619      	mov	r1, r3
   16774:	f04f 0200 	mov.w	r2, #0
   16778:	f04f 0300 	mov.w	r3, #0
   1677c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16780:	f001 f91a 	bl	179b8 <__aeabi_dmul>
   16784:	4602      	mov	r2, r0
   16786:	460b      	mov	r3, r1
   16788:	4610      	mov	r0, r2
   1678a:	4619      	mov	r1, r3
   1678c:	f001 fbd6 	bl	17f3c <__aeabi_d2uiz>
   16790:	4603      	mov	r3, r0
   16792:	b2da      	uxtb	r2, r3
   16794:	f24c 539c 	movw	r3, #50588	; 0xc59c
   16798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1679c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1679e:	3708      	adds	r7, #8
   167a0:	46bd      	mov	sp, r7
   167a2:	bd80      	pop	{r7, pc}
   167a4:	f3af 8000 	nop.w
   167a8:	1eb851ec 	.word	0x1eb851ec
   167ac:	3f91eb85 	.word	0x3f91eb85
   167b0:	020c49ba 	.word	0x020c49ba
   167b4:	3fb6872b 	.word	0x3fb6872b

000167b8 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   167b8:	b580      	push	{r7, lr}
   167ba:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   167bc:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   167c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167c4:	2200      	movs	r2, #0
   167c6:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   167c8:	f7ff ff44 	bl	16654 <to_autopilot_from_last_radio>
      spi_reset();
   167cc:	f7ff fe80 	bl	164d0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   167d0:	bd80      	pop	{r7, pc}
   167d2:	bf00      	nop

000167d4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   167d4:	b580      	push	{r7, lr}
   167d6:	af00      	add	r7, sp, #0
  uart_init_tx();
   167d8:	f000 fb02 	bl	16de0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   167dc:	f648 00ec 	movw	r0, #35052	; 0x88ec
   167e0:	f2c0 0001 	movt	r0, #1
   167e4:	f000 fbda 	bl	16f9c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   167e8:	f7ff fab2 	bl	15d50 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   167ec:	2003      	movs	r0, #3
   167ee:	f24c 51b8 	movw	r1, #50616	; 0xc5b8
   167f2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   167f6:	f7ff fa97 	bl	15d28 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   167fa:	2006      	movs	r0, #6
   167fc:	f24c 51fc 	movw	r1, #50684	; 0xc5fc
   16800:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16804:	f7ff fa90 	bl	15d28 <fbw_adc_buf_channel>
#endif
  timer_init();
   16808:	f7ff fece 	bl	165a8 <timer_init>
  servo_init();
   1680c:	f000 f894 	bl	16938 <servo_init>
  ppm_init();
   16810:	f7ff fee2 	bl	165d8 <ppm_init>
  fbw_spi_init();
   16814:	f7ff fe92 	bl	1653c <fbw_spi_init>
  //sei(); //FN
}
   16818:	bd80      	pop	{r7, pc}
   1681a:	bf00      	nop

0001681c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1681c:	b580      	push	{r7, lr}
   1681e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16820:	f24c 537b 	movw	r3, #50555	; 0xc57b
   16824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16828:	2200      	movs	r2, #0
   1682a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1682c:	f24c 6347 	movw	r3, #50759	; 0xc647
   16830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16834:	781b      	ldrb	r3, [r3, #0]
   16836:	3301      	adds	r3, #1
   16838:	b2da      	uxtb	r2, r3
   1683a:	f24c 6347 	movw	r3, #50759	; 0xc647
   1683e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16842:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16844:	f24c 6344 	movw	r3, #50756	; 0xc644
   16848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1684c:	2201      	movs	r2, #1
   1684e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16850:	f24c 6346 	movw	r3, #50758	; 0xc646
   16854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16858:	2200      	movs	r2, #0
   1685a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1685c:	f24c 6342 	movw	r3, #50754	; 0xc642
   16860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16864:	2200      	movs	r2, #0
   16866:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16868:	f7ff fb3a 	bl	15ee0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1686c:	f24c 5354 	movw	r3, #50516	; 0xc554
   16870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16874:	891b      	ldrh	r3, [r3, #8]
   16876:	b21b      	sxth	r3, r3
   16878:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1687c:	bfb4      	ite	lt
   1687e:	2300      	movlt	r3, #0
   16880:	2301      	movge	r3, #1
   16882:	b2db      	uxtb	r3, r3
   16884:	461a      	mov	r2, r3
   16886:	f24c 6340 	movw	r3, #50752	; 0xc640
   1688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1688e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16890:	f24c 6340 	movw	r3, #50752	; 0xc640
   16894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16898:	781b      	ldrb	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d105      	bne.n	168aa <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1689e:	f24c 5054 	movw	r0, #50516	; 0xc554
   168a2:	f2c2 0004 	movt	r0, #8196	; 0x2004
   168a6:	f000 f925 	bl	16af4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   168aa:	f24c 6340 	movw	r3, #50752	; 0xc640
   168ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168b2:	2201      	movs	r2, #1
   168b4:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   168b6:	f24c 6344 	movw	r3, #50756	; 0xc644
   168ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168be:	2200      	movs	r2, #0
   168c0:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   168c2:	f24c 6346 	movw	r3, #50758	; 0xc646
   168c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ca:	2201      	movs	r2, #1
   168cc:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   168ce:	bd80      	pop	{r7, pc}

000168d0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   168d0:	b580      	push	{r7, lr}
   168d2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   168d4:	f648 00d8 	movw	r0, #35032	; 0x88d8
   168d8:	f2c0 0001 	movt	r0, #1
   168dc:	f000 f90a 	bl	16af4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   168e0:	bd80      	pop	{r7, pc}
   168e2:	bf00      	nop

000168e4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   168e4:	b580      	push	{r7, lr}
   168e6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   168e8:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   168ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f0:	781b      	ldrb	r3, [r3, #0]
   168f2:	b2db      	uxtb	r3, r3
   168f4:	2b00      	cmp	r3, #0
   168f6:	d018      	beq.n	1692a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   168f8:	f24c 6341 	movw	r3, #50753	; 0xc641
   168fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16900:	2200      	movs	r2, #0
   16902:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16904:	f24c 6345 	movw	r3, #50757	; 0xc645
   16908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1690c:	2201      	movs	r2, #1
   1690e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16910:	f24c 6340 	movw	r3, #50752	; 0xc640
   16914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16918:	781b      	ldrb	r3, [r3, #0]
   1691a:	2b01      	cmp	r3, #1
   1691c:	d105      	bne.n	1692a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1691e:	f24c 5084 	movw	r0, #50564	; 0xc584
   16922:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16926:	f000 f8e5 	bl	16af4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1692a:	f24c 6345 	movw	r3, #50757	; 0xc645
   1692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16932:	2200      	movs	r2, #0
   16934:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16936:	bd80      	pop	{r7, pc}

00016938 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16938:	b480      	push	{r7}
   1693a:	b083      	sub	sp, #12
   1693c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1693e:	f242 0311 	movw	r3, #8209	; 0x2011
   16942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16946:	f242 0211 	movw	r2, #8209	; 0x2011
   1694a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1694e:	7812      	ldrb	r2, [r2, #0]
   16950:	b2d2      	uxtb	r2, r2
   16952:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16956:	b2d2      	uxtb	r2, r2
   16958:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1695a:	f242 0317 	movw	r3, #8215	; 0x2017
   1695e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16962:	f242 0217 	movw	r2, #8215	; 0x2017
   16966:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1696a:	7812      	ldrb	r2, [r2, #0]
   1696c:	b2d2      	uxtb	r2, r2
   1696e:	f042 0202 	orr.w	r2, r2, #2
   16972:	b2d2      	uxtb	r2, r2
   16974:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16976:	f242 0312 	movw	r3, #8210	; 0x2012
   1697a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1697e:	f242 0212 	movw	r2, #8210	; 0x2012
   16982:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16986:	7812      	ldrb	r2, [r2, #0]
   16988:	b2d2      	uxtb	r2, r2
   1698a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1698e:	b2d2      	uxtb	r2, r2
   16990:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16992:	f242 0318 	movw	r3, #8216	; 0x2018
   16996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1699a:	f242 0218 	movw	r2, #8216	; 0x2018
   1699e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169a2:	7812      	ldrb	r2, [r2, #0]
   169a4:	b2d2      	uxtb	r2, r2
   169a6:	f022 0202 	bic.w	r2, r2, #2
   169aa:	b2d2      	uxtb	r2, r2
   169ac:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   169ae:	2300      	movs	r3, #0
   169b0:	71fb      	strb	r3, [r7, #7]
   169b2:	e00b      	b.n	169cc <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   169b4:	79fa      	ldrb	r2, [r7, #7]
   169b6:	f24c 634c 	movw	r3, #50764	; 0xc64c
   169ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169be:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   169c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   169c6:	79fb      	ldrb	r3, [r7, #7]
   169c8:	3301      	adds	r3, #1
   169ca:	71fb      	strb	r3, [r7, #7]
   169cc:	79fb      	ldrb	r3, [r7, #7]
   169ce:	2b09      	cmp	r3, #9
   169d0:	d9f0      	bls.n	169b4 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   169d2:	f242 032a 	movw	r3, #8234	; 0x202a
   169d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   169de:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   169e0:	f242 032f 	movw	r3, #8239	; 0x202f
   169e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169e8:	f242 022f 	movw	r2, #8239	; 0x202f
   169ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169f0:	7812      	ldrb	r2, [r2, #0]
   169f2:	b2d2      	uxtb	r2, r2
   169f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   169f8:	b2d2      	uxtb	r2, r2
   169fa:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   169fc:	f242 0336 	movw	r3, #8246	; 0x2036
   16a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a04:	2210      	movs	r2, #16
   16a06:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16a08:	f242 0312 	movw	r3, #8210	; 0x2012
   16a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a10:	f242 0212 	movw	r2, #8210	; 0x2012
   16a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a18:	7812      	ldrb	r2, [r2, #0]
   16a1a:	b2d2      	uxtb	r2, r2
   16a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16a20:	b2d2      	uxtb	r2, r2
   16a22:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16a24:	f242 0337 	movw	r3, #8247	; 0x2037
   16a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a2c:	f242 0237 	movw	r2, #8247	; 0x2037
   16a30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a34:	7812      	ldrb	r2, [r2, #0]
   16a36:	b2d2      	uxtb	r2, r2
   16a38:	f042 0210 	orr.w	r2, r2, #16
   16a3c:	b2d2      	uxtb	r2, r2
   16a3e:	701a      	strb	r2, [r3, #0]
}
   16a40:	370c      	adds	r7, #12
   16a42:	46bd      	mov	sp, r7
   16a44:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a48:	4770      	bx	lr
   16a4a:	bf00      	nop

00016a4c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16a4c:	b480      	push	{r7}
   16a4e:	b083      	sub	sp, #12
   16a50:	af00      	add	r7, sp, #0
   16a52:	4602      	mov	r2, r0
   16a54:	460b      	mov	r3, r1
   16a56:	71fa      	strb	r2, [r7, #7]
   16a58:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16a5a:	79f9      	ldrb	r1, [r7, #7]
   16a5c:	88bb      	ldrh	r3, [r7, #4]
   16a5e:	011b      	lsls	r3, r3, #4
   16a60:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a64:	d308      	bcc.n	16a78 <servo_set_one+0x2c>
   16a66:	88bb      	ldrh	r3, [r7, #4]
   16a68:	011b      	lsls	r3, r3, #4
   16a6a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a6e:	bf28      	it	cs
   16a70:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a74:	b29a      	uxth	r2, r3
   16a76:	e001      	b.n	16a7c <servo_set_one+0x30>
   16a78:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a7c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a84:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16a88:	370c      	adds	r7, #12
   16a8a:	46bd      	mov	sp, r7
   16a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a90:	4770      	bx	lr
   16a92:	bf00      	nop

00016a94 <servo_transmit>:

void 
servo_transmit(void) {
   16a94:	b580      	push	{r7, lr}
   16a96:	b082      	sub	sp, #8
   16a98:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16a9a:	2000      	movs	r0, #0
   16a9c:	f000 f9e6 	bl	16e6c <uart_transmit>
   16aa0:	2000      	movs	r0, #0
   16aa2:	f000 f9e3 	bl	16e6c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16aa6:	2300      	movs	r3, #0
   16aa8:	71fb      	strb	r3, [r7, #7]
   16aaa:	e01a      	b.n	16ae2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16aac:	79fa      	ldrb	r2, [r7, #7]
   16aae:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16aba:	0a1b      	lsrs	r3, r3, #8
   16abc:	b29b      	uxth	r3, r3
   16abe:	b2db      	uxtb	r3, r3
   16ac0:	4618      	mov	r0, r3
   16ac2:	f000 f9d3 	bl	16e6c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16ac6:	79fa      	ldrb	r2, [r7, #7]
   16ac8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ad0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ad4:	b2db      	uxtb	r3, r3
   16ad6:	4618      	mov	r0, r3
   16ad8:	f000 f9c8 	bl	16e6c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16adc:	79fb      	ldrb	r3, [r7, #7]
   16ade:	3301      	adds	r3, #1
   16ae0:	71fb      	strb	r3, [r7, #7]
   16ae2:	79fb      	ldrb	r3, [r7, #7]
   16ae4:	2b09      	cmp	r3, #9
   16ae6:	d9e1      	bls.n	16aac <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16ae8:	200a      	movs	r0, #10
   16aea:	f000 f9bf 	bl	16e6c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16aee:	3708      	adds	r7, #8
   16af0:	46bd      	mov	sp, r7
   16af2:	bd80      	pop	{r7, pc}

00016af4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16af4:	b5b0      	push	{r4, r5, r7, lr}
   16af6:	b084      	sub	sp, #16
   16af8:	af00      	add	r7, sp, #0
   16afa:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16afc:	687b      	ldr	r3, [r7, #4]
   16afe:	330a      	adds	r3, #10
   16b00:	881b      	ldrh	r3, [r3, #0]
   16b02:	b21b      	sxth	r3, r3
   16b04:	005b      	lsls	r3, r3, #1
   16b06:	4618      	mov	r0, r3
   16b08:	f000 fef0 	bl	178ec <__aeabi_i2d>
   16b0c:	4602      	mov	r2, r0
   16b0e:	460b      	mov	r3, r1
   16b10:	4610      	mov	r0, r2
   16b12:	4619      	mov	r1, r3
   16b14:	a3a6      	add	r3, pc, #664	; (adr r3, 16db0 <servo_set+0x2bc>)
   16b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b1a:	f000 ff4d 	bl	179b8 <__aeabi_dmul>
   16b1e:	4602      	mov	r2, r0
   16b20:	460b      	mov	r3, r1
   16b22:	4610      	mov	r0, r2
   16b24:	4619      	mov	r1, r3
   16b26:	f001 f9e1 	bl	17eec <__aeabi_d2iz>
   16b2a:	4603      	mov	r3, r0
   16b2c:	b29b      	uxth	r3, r3
   16b2e:	b29b      	uxth	r3, r3
   16b30:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16b34:	81fb      	strh	r3, [r7, #14]
   16b36:	89fb      	ldrh	r3, [r7, #14]
   16b38:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b3c:	d307      	bcc.n	16b4e <servo_set+0x5a>
   16b3e:	89fb      	ldrh	r3, [r7, #14]
   16b40:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b44:	bf28      	it	cs
   16b46:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b4a:	b29a      	uxth	r2, r3
   16b4c:	e001      	b.n	16b52 <servo_set+0x5e>
   16b4e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b52:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b5a:	80da      	strh	r2, [r3, #6]
   16b5c:	687b      	ldr	r3, [r7, #4]
   16b5e:	881b      	ldrh	r3, [r3, #0]
   16b60:	b21b      	sxth	r3, r3
   16b62:	005b      	lsls	r3, r3, #1
   16b64:	4618      	mov	r0, r3
   16b66:	f000 fec1 	bl	178ec <__aeabi_i2d>
   16b6a:	4602      	mov	r2, r0
   16b6c:	460b      	mov	r3, r1
   16b6e:	4610      	mov	r0, r2
   16b70:	4619      	mov	r1, r3
   16b72:	a38f      	add	r3, pc, #572	; (adr r3, 16db0 <servo_set+0x2bc>)
   16b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b78:	f000 ff1e 	bl	179b8 <__aeabi_dmul>
   16b7c:	4602      	mov	r2, r0
   16b7e:	460b      	mov	r3, r1
   16b80:	4610      	mov	r0, r2
   16b82:	4619      	mov	r1, r3
   16b84:	f001 f9b2 	bl	17eec <__aeabi_d2iz>
   16b88:	4603      	mov	r3, r0
   16b8a:	b29b      	uxth	r3, r3
   16b8c:	b29b      	uxth	r3, r3
   16b8e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16b92:	81fb      	strh	r3, [r7, #14]
   16b94:	89fb      	ldrh	r3, [r7, #14]
   16b96:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b9a:	d307      	bcc.n	16bac <servo_set+0xb8>
   16b9c:	89fb      	ldrh	r3, [r7, #14]
   16b9e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ba2:	bf28      	it	cs
   16ba4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ba8:	b29a      	uxth	r2, r3
   16baa:	e001      	b.n	16bb0 <servo_set+0xbc>
   16bac:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16bb0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb8:	825a      	strh	r2, [r3, #18]
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	3304      	adds	r3, #4
   16bbe:	881b      	ldrh	r3, [r3, #0]
   16bc0:	b21b      	sxth	r3, r3
   16bc2:	4618      	mov	r0, r3
   16bc4:	f000 fe92 	bl	178ec <__aeabi_i2d>
   16bc8:	4602      	mov	r2, r0
   16bca:	460b      	mov	r3, r1
   16bcc:	4610      	mov	r0, r2
   16bce:	4619      	mov	r1, r3
   16bd0:	a379      	add	r3, pc, #484	; (adr r3, 16db8 <servo_set+0x2c4>)
   16bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bd6:	f000 feef 	bl	179b8 <__aeabi_dmul>
   16bda:	4602      	mov	r2, r0
   16bdc:	460b      	mov	r3, r1
   16bde:	4610      	mov	r0, r2
   16be0:	4619      	mov	r1, r3
   16be2:	f001 f983 	bl	17eec <__aeabi_d2iz>
   16be6:	4603      	mov	r3, r0
   16be8:	b29b      	uxth	r3, r3
   16bea:	b29b      	uxth	r3, r3
   16bec:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16bf0:	3320      	adds	r3, #32
   16bf2:	81fb      	strh	r3, [r7, #14]
   16bf4:	89fb      	ldrh	r3, [r7, #14]
   16bf6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16bfa:	d307      	bcc.n	16c0c <servo_set+0x118>
   16bfc:	89fb      	ldrh	r3, [r7, #14]
   16bfe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c02:	bf28      	it	cs
   16c04:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c08:	b29a      	uxth	r2, r3
   16c0a:	e001      	b.n	16c10 <servo_set+0x11c>
   16c0c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c10:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c18:	819a      	strh	r2, [r3, #12]
   16c1a:	687b      	ldr	r3, [r7, #4]
   16c1c:	885b      	ldrh	r3, [r3, #2]
   16c1e:	81bb      	strh	r3, [r7, #12]
   16c20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c24:	2b00      	cmp	r3, #0
   16c26:	dd06      	ble.n	16c36 <servo_set+0x142>
   16c28:	f04f 0400 	mov.w	r4, #0
   16c2c:	f04f 0500 	mov.w	r5, #0
   16c30:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16c34:	e002      	b.n	16c3c <servo_set+0x148>
   16c36:	a562      	add	r5, pc, #392	; (adr r5, 16dc0 <servo_set+0x2cc>)
   16c38:	e9d5 4500 	ldrd	r4, r5, [r5]
   16c3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c40:	4618      	mov	r0, r3
   16c42:	f000 fe53 	bl	178ec <__aeabi_i2d>
   16c46:	4602      	mov	r2, r0
   16c48:	460b      	mov	r3, r1
   16c4a:	4620      	mov	r0, r4
   16c4c:	4629      	mov	r1, r5
   16c4e:	f000 feb3 	bl	179b8 <__aeabi_dmul>
   16c52:	4602      	mov	r2, r0
   16c54:	460b      	mov	r3, r1
   16c56:	4610      	mov	r0, r2
   16c58:	4619      	mov	r1, r3
   16c5a:	a35b      	add	r3, pc, #364	; (adr r3, 16dc8 <servo_set+0x2d4>)
   16c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c60:	f000 feaa 	bl	179b8 <__aeabi_dmul>
   16c64:	4602      	mov	r2, r0
   16c66:	460b      	mov	r3, r1
   16c68:	4610      	mov	r0, r2
   16c6a:	4619      	mov	r1, r3
   16c6c:	f001 f93e 	bl	17eec <__aeabi_d2iz>
   16c70:	4603      	mov	r3, r0
   16c72:	b29b      	uxth	r3, r3
   16c74:	b29b      	uxth	r3, r3
   16c76:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16c7a:	81fb      	strh	r3, [r7, #14]
   16c7c:	89fb      	ldrh	r3, [r7, #14]
   16c7e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c82:	d307      	bcc.n	16c94 <servo_set+0x1a0>
   16c84:	89fb      	ldrh	r3, [r7, #14]
   16c86:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c8a:	bf28      	it	cs
   16c8c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c90:	b29a      	uxth	r2, r3
   16c92:	e001      	b.n	16c98 <servo_set+0x1a4>
   16c94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c98:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca0:	801a      	strh	r2, [r3, #0]
   16ca2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ca6:	2b00      	cmp	r3, #0
   16ca8:	dd03      	ble.n	16cb2 <servo_set+0x1be>
   16caa:	a545      	add	r5, pc, #276	; (adr r5, 16dc0 <servo_set+0x2cc>)
   16cac:	e9d5 4500 	ldrd	r4, r5, [r5]
   16cb0:	e005      	b.n	16cbe <servo_set+0x1ca>
   16cb2:	f04f 0400 	mov.w	r4, #0
   16cb6:	f04f 0500 	mov.w	r5, #0
   16cba:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16cbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16cc2:	4618      	mov	r0, r3
   16cc4:	f000 fe12 	bl	178ec <__aeabi_i2d>
   16cc8:	4602      	mov	r2, r0
   16cca:	460b      	mov	r3, r1
   16ccc:	4620      	mov	r0, r4
   16cce:	4629      	mov	r1, r5
   16cd0:	f000 fe72 	bl	179b8 <__aeabi_dmul>
   16cd4:	4602      	mov	r2, r0
   16cd6:	460b      	mov	r3, r1
   16cd8:	4610      	mov	r0, r2
   16cda:	4619      	mov	r1, r3
   16cdc:	a33c      	add	r3, pc, #240	; (adr r3, 16dd0 <servo_set+0x2dc>)
   16cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ce2:	f000 fe69 	bl	179b8 <__aeabi_dmul>
   16ce6:	4602      	mov	r2, r0
   16ce8:	460b      	mov	r3, r1
   16cea:	4610      	mov	r0, r2
   16cec:	4619      	mov	r1, r3
   16cee:	f001 f8fd 	bl	17eec <__aeabi_d2iz>
   16cf2:	4603      	mov	r3, r0
   16cf4:	b29b      	uxth	r3, r3
   16cf6:	b29b      	uxth	r3, r3
   16cf8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16cfc:	3320      	adds	r3, #32
   16cfe:	81fb      	strh	r3, [r7, #14]
   16d00:	89fb      	ldrh	r3, [r7, #14]
   16d02:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d06:	d307      	bcc.n	16d18 <servo_set+0x224>
   16d08:	89fb      	ldrh	r3, [r7, #14]
   16d0a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d0e:	bf28      	it	cs
   16d10:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d14:	b29a      	uxth	r2, r3
   16d16:	e001      	b.n	16d1c <servo_set+0x228>
   16d18:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d1c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d24:	809a      	strh	r2, [r3, #4]
   16d26:	687b      	ldr	r3, [r7, #4]
   16d28:	3306      	adds	r3, #6
   16d2a:	881b      	ldrh	r3, [r3, #0]
   16d2c:	b21b      	sxth	r3, r3
   16d2e:	4618      	mov	r0, r3
   16d30:	f000 fddc 	bl	178ec <__aeabi_i2d>
   16d34:	4604      	mov	r4, r0
   16d36:	460d      	mov	r5, r1
   16d38:	687b      	ldr	r3, [r7, #4]
   16d3a:	3302      	adds	r3, #2
   16d3c:	881b      	ldrh	r3, [r3, #0]
   16d3e:	b21b      	sxth	r3, r3
   16d40:	4618      	mov	r0, r3
   16d42:	f000 fdd3 	bl	178ec <__aeabi_i2d>
   16d46:	4602      	mov	r2, r0
   16d48:	460b      	mov	r3, r1
   16d4a:	4620      	mov	r0, r4
   16d4c:	4629      	mov	r1, r5
   16d4e:	f000 fc81 	bl	17654 <__adddf3>
   16d52:	4602      	mov	r2, r0
   16d54:	460b      	mov	r3, r1
   16d56:	4610      	mov	r0, r2
   16d58:	4619      	mov	r1, r3
   16d5a:	a31f      	add	r3, pc, #124	; (adr r3, 16dd8 <servo_set+0x2e4>)
   16d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d60:	f000 fe2a 	bl	179b8 <__aeabi_dmul>
   16d64:	4602      	mov	r2, r0
   16d66:	460b      	mov	r3, r1
   16d68:	4610      	mov	r0, r2
   16d6a:	4619      	mov	r1, r3
   16d6c:	f001 f8be 	bl	17eec <__aeabi_d2iz>
   16d70:	4603      	mov	r3, r0
   16d72:	b29b      	uxth	r3, r3
   16d74:	b29b      	uxth	r3, r3
   16d76:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16d7a:	3320      	adds	r3, #32
   16d7c:	81fb      	strh	r3, [r7, #14]
   16d7e:	89fb      	ldrh	r3, [r7, #14]
   16d80:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d84:	d307      	bcc.n	16d96 <servo_set+0x2a2>
   16d86:	89fb      	ldrh	r3, [r7, #14]
   16d88:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d8c:	bf28      	it	cs
   16d8e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d92:	b29a      	uxth	r2, r3
   16d94:	e001      	b.n	16d9a <servo_set+0x2a6>
   16d96:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d9a:	f24c 634c 	movw	r3, #50764	; 0xc64c
   16d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16da2:	81da      	strh	r2, [r3, #14]
}
   16da4:	3710      	adds	r7, #16
   16da6:	46bd      	mov	sp, r7
   16da8:	bdb0      	pop	{r4, r5, r7, pc}
   16daa:	bf00      	nop
   16dac:	f3af 8000 	nop.w
   16db0:	aaaa9ef0 	.word	0xaaaa9ef0
   16db4:	3feaaaaa 	.word	0x3feaaaaa
   16db8:	fc96473e 	.word	0xfc96473e
   16dbc:	3fdfc962 	.word	0x3fdfc962
   16dc0:	51eb851f 	.word	0x51eb851f
   16dc4:	3fe51eb8 	.word	0x3fe51eb8
   16dc8:	9999999a 	.word	0x9999999a
   16dcc:	bfe19999 	.word	0xbfe19999
   16dd0:	aaaa9ef0 	.word	0xaaaa9ef0
   16dd4:	bfe0aaaa 	.word	0xbfe0aaaa
   16dd8:	eeeed77a 	.word	0xeeeed77a
   16ddc:	bfdeeeee 	.word	0xbfdeeeee

00016de0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16de0:	b480      	push	{r7}
   16de2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16de4:	f242 0320 	movw	r3, #8224	; 0x2020
   16de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dec:	2200      	movs	r2, #0
   16dee:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16df0:	f242 0309 	movw	r3, #8201	; 0x2009
   16df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16df8:	2219      	movs	r2, #25
   16dfa:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16dfc:	f242 030b 	movw	r3, #8203	; 0x200b
   16e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e04:	2200      	movs	r2, #0
   16e06:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16e08:	f242 030a 	movw	r3, #8202	; 0x200a
   16e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e10:	2208      	movs	r2, #8
   16e12:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16e14:	f242 0320 	movw	r3, #8224	; 0x2020
   16e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e1c:	2286      	movs	r2, #134	; 0x86
   16e1e:	701a      	strb	r2, [r3, #0]
}
   16e20:	46bd      	mov	sp, r7
   16e22:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e26:	4770      	bx	lr

00016e28 <uart_init_rx>:

void uart_init_rx() {
   16e28:	b480      	push	{r7}
   16e2a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16e2c:	f242 030a 	movw	r3, #8202	; 0x200a
   16e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e34:	f242 020a 	movw	r2, #8202	; 0x200a
   16e38:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e3c:	7812      	ldrb	r2, [r2, #0]
   16e3e:	b2d2      	uxtb	r2, r2
   16e40:	f042 0210 	orr.w	r2, r2, #16
   16e44:	b2d2      	uxtb	r2, r2
   16e46:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16e48:	f242 030a 	movw	r3, #8202	; 0x200a
   16e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e50:	f242 020a 	movw	r2, #8202	; 0x200a
   16e54:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e58:	7812      	ldrb	r2, [r2, #0]
   16e5a:	b2d2      	uxtb	r2, r2
   16e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16e60:	b2d2      	uxtb	r2, r2
   16e62:	701a      	strb	r2, [r3, #0]
}
   16e64:	46bd      	mov	sp, r7
   16e66:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e6a:	4770      	bx	lr

00016e6c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16e6c:	b480      	push	{r7}
   16e6e:	b083      	sub	sp, #12
   16e70:	af00      	add	r7, sp, #0
   16e72:	4603      	mov	r3, r0
   16e74:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16e76:	f242 030a 	movw	r3, #8202	; 0x200a
   16e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e7e:	781b      	ldrb	r3, [r3, #0]
   16e80:	b2db      	uxtb	r3, r3
   16e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16e86:	2b00      	cmp	r3, #0
   16e88:	d028      	beq.n	16edc <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16e8a:	f24c 6361 	movw	r3, #50785	; 0xc661
   16e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e92:	781b      	ldrb	r3, [r3, #0]
   16e94:	b2db      	uxtb	r3, r3
   16e96:	461a      	mov	r2, r3
   16e98:	f24c 6360 	movw	r3, #50784	; 0xc660
   16e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ea0:	781b      	ldrb	r3, [r3, #0]
   16ea2:	3301      	adds	r3, #1
   16ea4:	429a      	cmp	r2, r3
   16ea6:	d100      	bne.n	16eaa <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16ea8:	e02c      	b.n	16f04 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16eaa:	f24c 6360 	movw	r3, #50784	; 0xc660
   16eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eb2:	781b      	ldrb	r3, [r3, #0]
   16eb4:	461a      	mov	r2, r3
   16eb6:	f24c 6364 	movw	r3, #50788	; 0xc664
   16eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ebe:	79f9      	ldrb	r1, [r7, #7]
   16ec0:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16ec2:	f24c 6360 	movw	r3, #50784	; 0xc660
   16ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eca:	781b      	ldrb	r3, [r3, #0]
   16ecc:	3301      	adds	r3, #1
   16ece:	b2da      	uxtb	r2, r3
   16ed0:	f24c 6360 	movw	r3, #50784	; 0xc660
   16ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ed8:	701a      	strb	r2, [r3, #0]
   16eda:	e013      	b.n	16f04 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16edc:	f242 030c 	movw	r3, #8204	; 0x200c
   16ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee4:	79fa      	ldrb	r2, [r7, #7]
   16ee6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16ee8:	f242 030a 	movw	r3, #8202	; 0x200a
   16eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ef0:	f242 020a 	movw	r2, #8202	; 0x200a
   16ef4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ef8:	7812      	ldrb	r2, [r2, #0]
   16efa:	b2d2      	uxtb	r2, r2
   16efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16f00:	b2d2      	uxtb	r2, r2
   16f02:	701a      	strb	r2, [r3, #0]
  }
}
   16f04:	370c      	adds	r7, #12
   16f06:	46bd      	mov	sp, r7
   16f08:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f0c:	4770      	bx	lr
   16f0e:	bf00      	nop

00016f10 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16f10:	b590      	push	{r4, r7, lr}
   16f12:	b089      	sub	sp, #36	; 0x24
   16f14:	af00      	add	r7, sp, #0
   16f16:	4603      	mov	r3, r0
   16f18:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16f1a:	f648 132c 	movw	r3, #35116	; 0x892c
   16f1e:	f2c0 0301 	movt	r3, #1
   16f22:	f107 040c 	add.w	r4, r7, #12
   16f26:	6818      	ldr	r0, [r3, #0]
   16f28:	6859      	ldr	r1, [r3, #4]
   16f2a:	689a      	ldr	r2, [r3, #8]
   16f2c:	68db      	ldr	r3, [r3, #12]
   16f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16f30:	79fb      	ldrb	r3, [r7, #7]
   16f32:	091b      	lsrs	r3, r3, #4
   16f34:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16f36:	79fb      	ldrb	r3, [r7, #7]
   16f38:	f003 030f 	and.w	r3, r3, #15
   16f3c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16f3e:	230f      	movs	r3, #15
   16f40:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16f42:	230f      	movs	r3, #15
   16f44:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16f46:	7ffb      	ldrb	r3, [r7, #31]
   16f48:	f107 0220 	add.w	r2, r7, #32
   16f4c:	4413      	add	r3, r2
   16f4e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f52:	4618      	mov	r0, r3
   16f54:	f7ff ff8a 	bl	16e6c <uart_transmit>
  uart_transmit(hex[low]);
   16f58:	7fbb      	ldrb	r3, [r7, #30]
   16f5a:	f107 0220 	add.w	r2, r7, #32
   16f5e:	4413      	add	r3, r2
   16f60:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f64:	4618      	mov	r0, r3
   16f66:	f7ff ff81 	bl	16e6c <uart_transmit>
} 
   16f6a:	3724      	adds	r7, #36	; 0x24
   16f6c:	46bd      	mov	sp, r7
   16f6e:	bd90      	pop	{r4, r7, pc}

00016f70 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16f70:	b580      	push	{r7, lr}
   16f72:	b084      	sub	sp, #16
   16f74:	af00      	add	r7, sp, #0
   16f76:	4603      	mov	r3, r0
   16f78:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16f7a:	88fb      	ldrh	r3, [r7, #6]
   16f7c:	0a1b      	lsrs	r3, r3, #8
   16f7e:	b29b      	uxth	r3, r3
   16f80:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16f82:	88fb      	ldrh	r3, [r7, #6]
   16f84:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16f86:	7bfb      	ldrb	r3, [r7, #15]
   16f88:	4618      	mov	r0, r3
   16f8a:	f7ff ffc1 	bl	16f10 <uart_print_hex>
  uart_print_hex(low);
   16f8e:	7bbb      	ldrb	r3, [r7, #14]
   16f90:	4618      	mov	r0, r3
   16f92:	f7ff ffbd 	bl	16f10 <uart_print_hex>
}
   16f96:	3710      	adds	r7, #16
   16f98:	46bd      	mov	sp, r7
   16f9a:	bd80      	pop	{r7, pc}

00016f9c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16f9c:	b580      	push	{r7, lr}
   16f9e:	b084      	sub	sp, #16
   16fa0:	af00      	add	r7, sp, #0
   16fa2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16fa4:	2300      	movs	r3, #0
   16fa6:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16fa8:	e009      	b.n	16fbe <uart_print_string+0x22>
    uart_transmit(s[i]);
   16faa:	7bfb      	ldrb	r3, [r7, #15]
   16fac:	687a      	ldr	r2, [r7, #4]
   16fae:	4413      	add	r3, r2
   16fb0:	781b      	ldrb	r3, [r3, #0]
   16fb2:	4618      	mov	r0, r3
   16fb4:	f7ff ff5a 	bl	16e6c <uart_transmit>
    i++;
   16fb8:	7bfb      	ldrb	r3, [r7, #15]
   16fba:	3301      	adds	r3, #1
   16fbc:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16fbe:	7bfb      	ldrb	r3, [r7, #15]
   16fc0:	687a      	ldr	r2, [r7, #4]
   16fc2:	4413      	add	r3, r2
   16fc4:	781b      	ldrb	r3, [r3, #0]
   16fc6:	2b00      	cmp	r3, #0
   16fc8:	d1ef      	bne.n	16faa <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16fca:	3710      	adds	r7, #16
   16fcc:	46bd      	mov	sp, r7
   16fce:	bd80      	pop	{r7, pc}

00016fd0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16fd0:	b480      	push	{r7}
   16fd2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16fd4:	f24c 6360 	movw	r3, #50784	; 0xc660
   16fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fdc:	781a      	ldrb	r2, [r3, #0]
   16fde:	f24c 6361 	movw	r3, #50785	; 0xc661
   16fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fe6:	781b      	ldrb	r3, [r3, #0]
   16fe8:	b2db      	uxtb	r3, r3
   16fea:	429a      	cmp	r2, r3
   16fec:	d10e      	bne.n	1700c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16fee:	f242 030a 	movw	r3, #8202	; 0x200a
   16ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ff6:	f242 020a 	movw	r2, #8202	; 0x200a
   16ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ffe:	7812      	ldrb	r2, [r2, #0]
   17000:	b2d2      	uxtb	r2, r2
   17002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17006:	b2d2      	uxtb	r2, r2
   17008:	701a      	strb	r2, [r3, #0]
   1700a:	e01d      	b.n	17048 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1700c:	f242 030c 	movw	r3, #8204	; 0x200c
   17010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17014:	f24c 6261 	movw	r2, #50785	; 0xc661
   17018:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1701c:	7812      	ldrb	r2, [r2, #0]
   1701e:	b2d2      	uxtb	r2, r2
   17020:	4611      	mov	r1, r2
   17022:	f24c 6264 	movw	r2, #50788	; 0xc664
   17026:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1702a:	5c52      	ldrb	r2, [r2, r1]
   1702c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   1702e:	f24c 6361 	movw	r3, #50785	; 0xc661
   17032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17036:	781b      	ldrb	r3, [r3, #0]
   17038:	b2db      	uxtb	r3, r3
   1703a:	3301      	adds	r3, #1
   1703c:	b2da      	uxtb	r2, r3
   1703e:	f24c 6361 	movw	r3, #50785	; 0xc661
   17042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17046:	701a      	strb	r2, [r3, #0]
  }
}
   17048:	46bd      	mov	sp, r7
   1704a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1704e:	4770      	bx	lr

00017050 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17050:	b580      	push	{r7, lr}
   17052:	b082      	sub	sp, #8
   17054:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   17056:	2010      	movs	r0, #16
   17058:	2101      	movs	r1, #1
   1705a:	f7e9 feb1 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1705e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17062:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1706a:	2201      	movs	r2, #1
   1706c:	f7ea f9b8 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17074:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17076:	2310      	movs	r3, #16
   17078:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1707a:	2303      	movs	r3, #3
   1707c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1707e:	1d3b      	adds	r3, r7, #4
   17080:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17084:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17088:	4619      	mov	r1, r3
   1708a:	f7ea f86d 	bl	1168 <GPIO_Init>
}
   1708e:	3708      	adds	r7, #8
   17090:	46bd      	mov	sp, r7
   17092:	bd80      	pop	{r7, pc}

00017094 <init_button>:

void init_button(void)
{
   17094:	b580      	push	{r7, lr}
   17096:	b082      	sub	sp, #8
   17098:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1709a:	2004      	movs	r0, #4
   1709c:	2101      	movs	r1, #1
   1709e:	f7e9 fe8f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   170a2:	2301      	movs	r3, #1
   170a4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   170a6:	2304      	movs	r3, #4
   170a8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   170aa:	2303      	movs	r3, #3
   170ac:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   170ae:	1d3b      	adds	r3, r7, #4
   170b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   170b4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   170b8:	4619      	mov	r1, r3
   170ba:	f7ea f855 	bl	1168 <GPIO_Init>
}
   170be:	3708      	adds	r7, #8
   170c0:	46bd      	mov	sp, r7
   170c2:	bd80      	pop	{r7, pc}

000170c4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   170c4:	b580      	push	{r7, lr}
   170c6:	b084      	sub	sp, #16
   170c8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   170ca:	2001      	movs	r0, #1
   170cc:	2101      	movs	r1, #1
   170ce:	f7e9 fe77 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   170d2:	2000      	movs	r0, #0
   170d4:	2100      	movs	r1, #0
   170d6:	f7ea fa7b 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   170da:	2301      	movs	r3, #1
   170dc:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   170de:	2300      	movs	r3, #0
   170e0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   170e2:	2308      	movs	r3, #8
   170e4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   170e6:	2301      	movs	r3, #1
   170e8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   170ea:	f107 0308 	add.w	r3, r7, #8
   170ee:	4618      	mov	r0, r3
   170f0:	f7ea ff74 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   170f4:	2306      	movs	r3, #6
   170f6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   170f8:	230f      	movs	r3, #15
   170fa:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   170fc:	230f      	movs	r3, #15
   170fe:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17100:	2301      	movs	r3, #1
   17102:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17104:	1d3b      	adds	r3, r7, #4
   17106:	4618      	mov	r0, r3
   17108:	f7eb f8a2 	bl	2250 <NVIC_Init>
}
   1710c:	3710      	adds	r7, #16
   1710e:	46bd      	mov	sp, r7
   17110:	bd80      	pop	{r7, pc}
   17112:	bf00      	nop

00017114 <init_rs232>:

void init_rs232(void)
{
   17114:	b580      	push	{r7, lr}
   17116:	b086      	sub	sp, #24
   17118:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   1711a:	2005      	movs	r0, #5
   1711c:	2101      	movs	r1, #1
   1711e:	f7e9 fe4f 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   17122:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17126:	2101      	movs	r1, #1
   17128:	f7e9 fe72 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   1712c:	2308      	movs	r3, #8
   1712e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17130:	2304      	movs	r3, #4
   17132:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17134:	1d3b      	adds	r3, r7, #4
   17136:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1713a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1713e:	4619      	mov	r1, r3
   17140:	f7ea f812 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17144:	2304      	movs	r3, #4
   17146:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17148:	2303      	movs	r3, #3
   1714a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1714c:	2318      	movs	r3, #24
   1714e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17150:	1d3b      	adds	r3, r7, #4
   17152:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17156:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1715a:	4619      	mov	r1, r3
   1715c:	f7ea f804 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17160:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17164:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17166:	2300      	movs	r3, #0
   17168:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1716a:	2300      	movs	r3, #0
   1716c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1716e:	2300      	movs	r3, #0
   17170:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17172:	2300      	movs	r3, #0
   17174:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17176:	230c      	movs	r3, #12
   17178:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1717a:	f107 0308 	add.w	r3, r7, #8
   1717e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17182:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17186:	4619      	mov	r1, r3
   17188:	f7ea fad6 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1718c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17190:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17194:	2101      	movs	r1, #1
   17196:	f7ea fbed 	bl	1974 <USART_Cmd>
}
   1719a:	3718      	adds	r7, #24
   1719c:	46bd      	mov	sp, r7
   1719e:	bd80      	pop	{r7, pc}

000171a0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   171a0:	b580      	push	{r7, lr}
   171a2:	b082      	sub	sp, #8
   171a4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   171a6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171ae:	f240 7127 	movw	r1, #1831	; 0x727
   171b2:	2200      	movs	r2, #0
   171b4:	f7ea fbfe 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   171b8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171c0:	f240 5125 	movw	r1, #1317	; 0x525
   171c4:	2201      	movs	r2, #1
   171c6:	f7ea fbf5 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   171ca:	2326      	movs	r3, #38	; 0x26
   171cc:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   171ce:	2300      	movs	r3, #0
   171d0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   171d2:	2301      	movs	r3, #1
   171d4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   171d6:	1d3b      	adds	r3, r7, #4
   171d8:	4618      	mov	r0, r3
   171da:	f7eb f839 	bl	2250 <NVIC_Init>
}
   171de:	3708      	adds	r7, #8
   171e0:	46bd      	mov	sp, r7
   171e2:	bd80      	pop	{r7, pc}

000171e4 <enable_rs232>:

void enable_rs232(void)
{
   171e4:	b580      	push	{r7, lr}
   171e6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   171e8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171f0:	2101      	movs	r1, #1
   171f2:	f7ea fbbf 	bl	1974 <USART_Cmd>
}
   171f6:	bd80      	pop	{r7, pc}

000171f8 <send_byte>:

void send_byte(uint8_t b)
{
   171f8:	b580      	push	{r7, lr}
   171fa:	b082      	sub	sp, #8
   171fc:	af00      	add	r7, sp, #0
   171fe:	4603      	mov	r3, r0
   17200:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   17202:	bf00      	nop
   17204:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17208:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1720c:	2180      	movs	r1, #128	; 0x80
   1720e:	f7ea fe1d 	bl	1e4c <USART_GetFlagStatus>
   17212:	4603      	mov	r3, r0
   17214:	2b00      	cmp	r3, #0
   17216:	d0f5      	beq.n	17204 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1721c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17224:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17228:	68d2      	ldr	r2, [r2, #12]
   1722a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   1722e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17230:	79fb      	ldrb	r3, [r7, #7]
   17232:	b29b      	uxth	r3, r3
   17234:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17238:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1723c:	4619      	mov	r1, r3
   1723e:	f7ea fcb9 	bl	1bb4 <USART_SendData>
}
   17242:	3708      	adds	r7, #8
   17244:	46bd      	mov	sp, r7
   17246:	bd80      	pop	{r7, pc}

00017248 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17248:	b580      	push	{r7, lr}
   1724a:	b082      	sub	sp, #8
   1724c:	af00      	add	r7, sp, #0
   1724e:	4603      	mov	r3, r0
   17250:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17252:	79fb      	ldrb	r3, [r7, #7]
   17254:	3330      	adds	r3, #48	; 0x30
   17256:	b2db      	uxtb	r3, r3
   17258:	4618      	mov	r0, r3
   1725a:	f7ff ffcd 	bl	171f8 <send_byte>
}
   1725e:	3708      	adds	r7, #8
   17260:	46bd      	mov	sp, r7
   17262:	bd80      	pop	{r7, pc}

00017264 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17264:	b580      	push	{r7, lr}
   17266:	b084      	sub	sp, #16
   17268:	af00      	add	r7, sp, #0
   1726a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1726c:	2300      	movs	r3, #0
   1726e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17270:	e009      	b.n	17286 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17272:	68fb      	ldr	r3, [r7, #12]
   17274:	687a      	ldr	r2, [r7, #4]
   17276:	4413      	add	r3, r2
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	4618      	mov	r0, r3
   1727c:	f7ff ffbc 	bl	171f8 <send_byte>
        i++;
   17280:	68fb      	ldr	r3, [r7, #12]
   17282:	3301      	adds	r3, #1
   17284:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17286:	68fb      	ldr	r3, [r7, #12]
   17288:	687a      	ldr	r2, [r7, #4]
   1728a:	4413      	add	r3, r2
   1728c:	781b      	ldrb	r3, [r3, #0]
   1728e:	2b00      	cmp	r3, #0
   17290:	d1ef      	bne.n	17272 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17292:	3710      	adds	r7, #16
   17294:	46bd      	mov	sp, r7
   17296:	bd80      	pop	{r7, pc}

00017298 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17298:	b580      	push	{r7, lr}
   1729a:	b08a      	sub	sp, #40	; 0x28
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   172a0:	2300      	movs	r3, #0
   172a2:	623b      	str	r3, [r7, #32]
    long num = c_num;
   172a4:	687b      	ldr	r3, [r7, #4]
   172a6:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   172a8:	69fb      	ldr	r3, [r7, #28]
   172aa:	2b00      	cmp	r3, #0
   172ac:	d106      	bne.n	172bc <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   172ae:	f648 103c 	movw	r0, #35132	; 0x893c
   172b2:	f2c0 0001 	movt	r0, #1
   172b6:	f7ff ffd5 	bl	17264 <vPrintString>
   172ba:	e062      	b.n	17382 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   172bc:	e024      	b.n	17308 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   172be:	69f9      	ldr	r1, [r7, #28]
   172c0:	f246 6367 	movw	r3, #26215	; 0x6667
   172c4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   172c8:	fb83 2301 	smull	r2, r3, r3, r1
   172cc:	109a      	asrs	r2, r3, #2
   172ce:	17cb      	asrs	r3, r1, #31
   172d0:	1ad2      	subs	r2, r2, r3
   172d2:	4613      	mov	r3, r2
   172d4:	009b      	lsls	r3, r3, #2
   172d6:	4413      	add	r3, r2
   172d8:	005b      	lsls	r3, r3, #1
   172da:	1aca      	subs	r2, r1, r3
   172dc:	b2d3      	uxtb	r3, r2
   172de:	3330      	adds	r3, #48	; 0x30
   172e0:	b2da      	uxtb	r2, r3
   172e2:	f107 010c 	add.w	r1, r7, #12
   172e6:	6a3b      	ldr	r3, [r7, #32]
   172e8:	440b      	add	r3, r1
   172ea:	701a      	strb	r2, [r3, #0]
            count ++;
   172ec:	6a3b      	ldr	r3, [r7, #32]
   172ee:	3301      	adds	r3, #1
   172f0:	623b      	str	r3, [r7, #32]
            num /= 10;
   172f2:	69fa      	ldr	r2, [r7, #28]
   172f4:	f246 6367 	movw	r3, #26215	; 0x6667
   172f8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   172fc:	fb83 1302 	smull	r1, r3, r3, r2
   17300:	1099      	asrs	r1, r3, #2
   17302:	17d3      	asrs	r3, r2, #31
   17304:	1acb      	subs	r3, r1, r3
   17306:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17308:	69fb      	ldr	r3, [r7, #28]
   1730a:	2b00      	cmp	r3, #0
   1730c:	d1d7      	bne.n	172be <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   1730e:	f107 020c 	add.w	r2, r7, #12
   17312:	6a3b      	ldr	r3, [r7, #32]
   17314:	4413      	add	r3, r2
   17316:	2200      	movs	r2, #0
   17318:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   1731a:	2300      	movs	r3, #0
   1731c:	627b      	str	r3, [r7, #36]	; 0x24
   1731e:	e020      	b.n	17362 <vPrintNumber+0xca>
        {
            tmp = time[i];
   17320:	f107 020c 	add.w	r2, r7, #12
   17324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17326:	4413      	add	r3, r2
   17328:	781b      	ldrb	r3, [r3, #0]
   1732a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   1732c:	6a3a      	ldr	r2, [r7, #32]
   1732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17330:	1ad3      	subs	r3, r2, r3
   17332:	3b01      	subs	r3, #1
   17334:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17338:	4413      	add	r3, r2
   1733a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1733e:	f107 010c 	add.w	r1, r7, #12
   17342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17344:	440b      	add	r3, r1
   17346:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17348:	6a3a      	ldr	r2, [r7, #32]
   1734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1734c:	1ad3      	subs	r3, r2, r3
   1734e:	3b01      	subs	r3, #1
   17350:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17354:	440b      	add	r3, r1
   17356:	7efa      	ldrb	r2, [r7, #27]
   17358:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1735e:	3301      	adds	r3, #1
   17360:	627b      	str	r3, [r7, #36]	; 0x24
   17362:	6a3b      	ldr	r3, [r7, #32]
   17364:	085a      	lsrs	r2, r3, #1
   17366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17368:	429a      	cmp	r2, r3
   1736a:	d8d9      	bhi.n	17320 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1736c:	f107 030c 	add.w	r3, r7, #12
   17370:	4618      	mov	r0, r3
   17372:	f7ff ff77 	bl	17264 <vPrintString>
        vPrintString("\n\r");
   17376:	f648 1040 	movw	r0, #35136	; 0x8940
   1737a:	f2c0 0001 	movt	r0, #1
   1737e:	f7ff ff71 	bl	17264 <vPrintString>
    }
}
   17382:	3728      	adds	r7, #40	; 0x28
   17384:	46bd      	mov	sp, r7
   17386:	bd80      	pop	{r7, pc}

00017388 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17388:	b480      	push	{r7}
   1738a:	b083      	sub	sp, #12
   1738c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1738e:	2300      	movs	r3, #0
   17390:	607b      	str	r3, [r7, #4]
   17392:	e00a      	b.n	173aa <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   17394:	f24c 7364 	movw	r3, #51044	; 0xc764
   17398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1739c:	687a      	ldr	r2, [r7, #4]
   1739e:	2100      	movs	r1, #0
   173a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   173a4:	687b      	ldr	r3, [r7, #4]
   173a6:	3301      	adds	r3, #1
   173a8:	607b      	str	r3, [r7, #4]
   173aa:	687b      	ldr	r3, [r7, #4]
   173ac:	2b0c      	cmp	r3, #12
   173ae:	ddf1      	ble.n	17394 <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   173b0:	370c      	adds	r7, #12
   173b2:	46bd      	mov	sp, r7
   173b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   173b8:	4770      	bx	lr
   173ba:	bf00      	nop

000173bc <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   173bc:	b590      	push	{r4, r7, lr}
   173be:	b089      	sub	sp, #36	; 0x24
   173c0:	af04      	add	r7, sp, #16
    init_led();
   173c2:	f7ff fe45 	bl	17050 <init_led>
    init_rs232();
   173c6:	f7ff fea5 	bl	17114 <init_rs232>
    enable_rs232_interrupts();
   173ca:	f7ff fee9 	bl	171a0 <enable_rs232_interrupts>
    enable_rs232();
   173ce:	f7ff ff09 	bl	171e4 <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   173d2:	f7ff ffd9 	bl	17388 <vInitInitialise>
    vSemaphoreInitialise();
   173d6:	f7eb fdf1 	bl	2fbc <vSemaphoreInitialise>
    vParameterInitialise();
   173da:	f7eb fe2f 	bl	303c <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   173de:	2300      	movs	r3, #0
   173e0:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   173e2:	2301      	movs	r3, #1
   173e4:	9300      	str	r3, [sp, #0]
   173e6:	4b42      	ldr	r3, [pc, #264]	; (174f0 <main+0x134>)
   173e8:	9301      	str	r3, [sp, #4]
   173ea:	2300      	movs	r3, #0
   173ec:	9302      	str	r3, [sp, #8]
   173ee:	2300      	movs	r3, #0
   173f0:	9303      	str	r3, [sp, #12]
   173f2:	f643 1041 	movw	r0, #14657	; 0x3941
   173f6:	f2c0 0000 	movt	r0, #0
   173fa:	f648 1144 	movw	r1, #35140	; 0x8944
   173fe:	f2c0 0101 	movt	r1, #1
   17402:	2280      	movs	r2, #128	; 0x80
   17404:	4b3b      	ldr	r3, [pc, #236]	; (174f4 <main+0x138>)
   17406:	f7ed fa07 	bl	4818 <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   1740a:	2300      	movs	r3, #0
   1740c:	60fb      	str	r3, [r7, #12]
   1740e:	e064      	b.n	174da <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17410:	2300      	movs	r3, #0
   17412:	60bb      	str	r3, [r7, #8]
   17414:	e00f      	b.n	17436 <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   17416:	f240 0360 	movw	r3, #96	; 0x60
   1741a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1741e:	68ba      	ldr	r2, [r7, #8]
   17420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17424:	68fb      	ldr	r3, [r7, #12]
   17426:	429a      	cmp	r2, r3
   17428:	d102      	bne.n	17430 <main+0x74>
            {
                flag = 1;  // sensor 
   1742a:	2301      	movs	r3, #1
   1742c:	607b      	str	r3, [r7, #4]
                break;
   1742e:	e005      	b.n	1743c <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17430:	68bb      	ldr	r3, [r7, #8]
   17432:	3301      	adds	r3, #1
   17434:	60bb      	str	r3, [r7, #8]
   17436:	68bb      	ldr	r3, [r7, #8]
   17438:	2b0c      	cmp	r3, #12
   1743a:	ddec      	ble.n	17416 <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   1743c:	687b      	ldr	r3, [r7, #4]
   1743e:	2b01      	cmp	r3, #1
   17440:	d125      	bne.n	1748e <main+0xd2>
        {
            flag = 0; 
   17442:	2300      	movs	r3, #0
   17444:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17446:	68fb      	ldr	r3, [r7, #12]
   17448:	222c      	movs	r2, #44	; 0x2c
   1744a:	fb02 f203 	mul.w	r2, r2, r3
   1744e:	f240 5364 	movw	r3, #1380	; 0x564
   17452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17456:	18d4      	adds	r4, r2, r3
   17458:	68fb      	ldr	r3, [r7, #12]
   1745a:	009a      	lsls	r2, r3, #2
   1745c:	f640 33f4 	movw	r3, #3060	; 0xbf4
   17460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17464:	4413      	add	r3, r2
   17466:	2202      	movs	r2, #2
   17468:	9200      	str	r2, [sp, #0]
   1746a:	9301      	str	r3, [sp, #4]
   1746c:	2300      	movs	r3, #0
   1746e:	9302      	str	r3, [sp, #8]
   17470:	2300      	movs	r3, #0
   17472:	9303      	str	r3, [sp, #12]
   17474:	f243 40b5 	movw	r0, #13493	; 0x34b5
   17478:	f2c0 0000 	movt	r0, #0
   1747c:	f648 1150 	movw	r1, #35152	; 0x8950
   17480:	f2c0 0101 	movt	r1, #1
   17484:	2280      	movs	r2, #128	; 0x80
   17486:	4623      	mov	r3, r4
   17488:	f7ed f9c6 	bl	4818 <xTaskGenericCreate>
   1748c:	e022      	b.n	174d4 <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1748e:	68fb      	ldr	r3, [r7, #12]
   17490:	222c      	movs	r2, #44	; 0x2c
   17492:	fb02 f203 	mul.w	r2, r2, r3
   17496:	f240 5364 	movw	r3, #1380	; 0x564
   1749a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1749e:	18d4      	adds	r4, r2, r3
   174a0:	68fb      	ldr	r3, [r7, #12]
   174a2:	009a      	lsls	r2, r3, #2
   174a4:	f640 33f4 	movw	r3, #3060	; 0xbf4
   174a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174ac:	4413      	add	r3, r2
   174ae:	2202      	movs	r2, #2
   174b0:	9200      	str	r2, [sp, #0]
   174b2:	9301      	str	r3, [sp, #4]
   174b4:	2300      	movs	r3, #0
   174b6:	9302      	str	r3, [sp, #8]
   174b8:	2300      	movs	r3, #0
   174ba:	9303      	str	r3, [sp, #12]
   174bc:	f243 7021 	movw	r0, #14113	; 0x3721
   174c0:	f2c0 0000 	movt	r0, #0
   174c4:	f648 1158 	movw	r1, #35160	; 0x8958
   174c8:	f2c0 0101 	movt	r1, #1
   174cc:	2280      	movs	r2, #128	; 0x80
   174ce:	4623      	mov	r3, r4
   174d0:	f7ed f9a2 	bl	4818 <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   174d4:	68fb      	ldr	r3, [r7, #12]
   174d6:	3301      	adds	r3, #1
   174d8:	60fb      	str	r3, [r7, #12]
   174da:	68fb      	ldr	r3, [r7, #12]
   174dc:	2b21      	cmp	r3, #33	; 0x21
   174de:	dd97      	ble.n	17410 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   174e0:	f7ed fd18 	bl	4f14 <vTaskStartScheduler>

    return 0;
   174e4:	2300      	movs	r3, #0
}
   174e6:	4618      	mov	r0, r3
   174e8:	3714      	adds	r7, #20
   174ea:	46bd      	mov	sp, r7
   174ec:	bd90      	pop	{r4, r7, pc}
   174ee:	bf00      	nop
   174f0:	20000c7c 	.word	0x20000c7c
   174f4:	20000b3c 	.word	0x20000b3c

000174f8 <myTraceCreate>:

void myTraceCreate      (){
   174f8:	b480      	push	{r7}
   174fa:	af00      	add	r7, sp, #0
}
   174fc:	46bd      	mov	sp, r7
   174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   17502:	4770      	bx	lr

00017504 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17504:	b480      	push	{r7}
   17506:	af00      	add	r7, sp, #0
}
   17508:	46bd      	mov	sp, r7
   1750a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1750e:	4770      	bx	lr

00017510 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17510:	b480      	push	{r7}
   17512:	af00      	add	r7, sp, #0
}
   17514:	46bd      	mov	sp, r7
   17516:	f85d 7b04 	ldr.w	r7, [sp], #4
   1751a:	4770      	bx	lr

0001751c <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   1751c:	b580      	push	{r7, lr}
   1751e:	b082      	sub	sp, #8
   17520:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   17522:	f7ed fde1 	bl	50e8 <xTaskGetTickCount>
   17526:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
   17528:	683b      	ldr	r3, [r7, #0]
   1752a:	2b00      	cmp	r3, #0
   1752c:	d040      	beq.n	175b0 <vApplicationTickHook+0x94>
   1752e:	683a      	ldr	r2, [r7, #0]
   17530:	f640 13c4 	movw	r3, #2500	; 0x9c4
   17534:	429a      	cmp	r2, r3
   17536:	d83b      	bhi.n	175b0 <vApplicationTickHook+0x94>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17538:	2300      	movs	r3, #0
   1753a:	607b      	str	r3, [r7, #4]
   1753c:	e035      	b.n	175aa <vApplicationTickHook+0x8e>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   1753e:	f24c 7364 	movw	r3, #51044	; 0xc764
   17542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17546:	687a      	ldr	r2, [r7, #4]
   17548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1754c:	2b00      	cmp	r3, #0
   1754e:	d129      	bne.n	175a4 <vApplicationTickHook+0x88>
   17550:	f240 032c 	movw	r3, #44	; 0x2c
   17554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17558:	687a      	ldr	r2, [r7, #4]
   1755a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1755e:	683b      	ldr	r3, [r7, #0]
   17560:	fbb3 f1f2 	udiv	r1, r3, r2
   17564:	fb02 f201 	mul.w	r2, r2, r1
   17568:	1a9b      	subs	r3, r3, r2
   1756a:	2b00      	cmp	r3, #0
   1756c:	d11a      	bne.n	175a4 <vApplicationTickHook+0x88>
            {
                IS_INIT[i] = 1;
   1756e:	f24c 7364 	movw	r3, #51044	; 0xc764
   17572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17576:	687a      	ldr	r2, [r7, #4]
   17578:	2101      	movs	r1, #1
   1757a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   1757e:	f240 0360 	movw	r3, #96	; 0x60
   17582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17586:	687a      	ldr	r2, [r7, #4]
   17588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1758c:	f640 3368 	movw	r3, #2920	; 0xb68
   17590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17598:	4618      	mov	r0, r3
   1759a:	2100      	movs	r1, #0
   1759c:	2200      	movs	r2, #0
   1759e:	2300      	movs	r3, #0
   175a0:	f7ec fe28 	bl	41f4 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   175a4:	687b      	ldr	r3, [r7, #4]
   175a6:	3301      	adds	r3, #1
   175a8:	607b      	str	r3, [r7, #4]
   175aa:	687b      	ldr	r3, [r7, #4]
   175ac:	2b0c      	cmp	r3, #12
   175ae:	ddc6      	ble.n	1753e <vApplicationTickHook+0x22>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   175b0:	f240 032c 	movw	r3, #44	; 0x2c
   175b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175b8:	681b      	ldr	r3, [r3, #0]
   175ba:	005a      	lsls	r2, r3, #1
   175bc:	683b      	ldr	r3, [r7, #0]
   175be:	429a      	cmp	r2, r3
   175c0:	d83f      	bhi.n	17642 <vApplicationTickHook+0x126>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175c2:	f240 032c 	movw	r3, #44	; 0x2c
   175c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ca:	681a      	ldr	r2, [r3, #0]
   175cc:	683b      	ldr	r3, [r7, #0]
   175ce:	fbb3 f1f2 	udiv	r1, r3, r2
   175d2:	fb02 f201 	mul.w	r2, r2, r1
   175d6:	1a9b      	subs	r3, r3, r2
   175d8:	2b00      	cmp	r3, #0
   175da:	d026      	beq.n	1762a <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   175dc:	f240 032c 	movw	r3, #44	; 0x2c
   175e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175e4:	689a      	ldr	r2, [r3, #8]
   175e6:	683b      	ldr	r3, [r7, #0]
   175e8:	fbb3 f1f2 	udiv	r1, r3, r2
   175ec:	fb02 f201 	mul.w	r2, r2, r1
   175f0:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175f2:	2b00      	cmp	r3, #0
   175f4:	d019      	beq.n	1762a <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   175f6:	f240 032c 	movw	r3, #44	; 0x2c
   175fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175fe:	6a1a      	ldr	r2, [r3, #32]
   17600:	683b      	ldr	r3, [r7, #0]
   17602:	fbb3 f1f2 	udiv	r1, r3, r2
   17606:	fb02 f201 	mul.w	r2, r2, r1
   1760a:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   1760c:	2b00      	cmp	r3, #0
   1760e:	d00c      	beq.n	1762a <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   17610:	f240 032c 	movw	r3, #44	; 0x2c
   17614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1761a:	683b      	ldr	r3, [r7, #0]
   1761c:	fbb3 f1f2 	udiv	r1, r3, r2
   17620:	fb02 f201 	mul.w	r2, r2, r1
   17624:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   17626:	2b00      	cmp	r3, #0
   17628:	d10b      	bne.n	17642 <vApplicationTickHook+0x126>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   1762a:	f640 3368 	movw	r3, #2920	; 0xb68
   1762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   17636:	4618      	mov	r0, r3
   17638:	2100      	movs	r1, #0
   1763a:	2200      	movs	r2, #0
   1763c:	2300      	movs	r3, #0
   1763e:	f7ec fdd9 	bl	41f4 <xQueueGenericSend>
        }
    }
}
   17642:	3708      	adds	r7, #8
   17644:	46bd      	mov	sp, r7
   17646:	bd80      	pop	{r7, pc}

00017648 <__aeabi_drsub>:
   17648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1764c:	e002      	b.n	17654 <__adddf3>
   1764e:	bf00      	nop

00017650 <__aeabi_dsub>:
   17650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017654 <__adddf3>:
   17654:	b530      	push	{r4, r5, lr}
   17656:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1765a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1765e:	ea94 0f05 	teq	r4, r5
   17662:	bf08      	it	eq
   17664:	ea90 0f02 	teqeq	r0, r2
   17668:	bf1f      	itttt	ne
   1766a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1766e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17672:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17676:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1767a:	f000 80e2 	beq.w	17842 <__adddf3+0x1ee>
   1767e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17682:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17686:	bfb8      	it	lt
   17688:	426d      	neglt	r5, r5
   1768a:	dd0c      	ble.n	176a6 <__adddf3+0x52>
   1768c:	442c      	add	r4, r5
   1768e:	ea80 0202 	eor.w	r2, r0, r2
   17692:	ea81 0303 	eor.w	r3, r1, r3
   17696:	ea82 0000 	eor.w	r0, r2, r0
   1769a:	ea83 0101 	eor.w	r1, r3, r1
   1769e:	ea80 0202 	eor.w	r2, r0, r2
   176a2:	ea81 0303 	eor.w	r3, r1, r3
   176a6:	2d36      	cmp	r5, #54	; 0x36
   176a8:	bf88      	it	hi
   176aa:	bd30      	pophi	{r4, r5, pc}
   176ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   176b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   176b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   176b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   176bc:	d002      	beq.n	176c4 <__adddf3+0x70>
   176be:	4240      	negs	r0, r0
   176c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   176c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   176c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   176cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   176d0:	d002      	beq.n	176d8 <__adddf3+0x84>
   176d2:	4252      	negs	r2, r2
   176d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   176d8:	ea94 0f05 	teq	r4, r5
   176dc:	f000 80a7 	beq.w	1782e <__adddf3+0x1da>
   176e0:	f1a4 0401 	sub.w	r4, r4, #1
   176e4:	f1d5 0e20 	rsbs	lr, r5, #32
   176e8:	db0d      	blt.n	17706 <__adddf3+0xb2>
   176ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   176ee:	fa22 f205 	lsr.w	r2, r2, r5
   176f2:	1880      	adds	r0, r0, r2
   176f4:	f141 0100 	adc.w	r1, r1, #0
   176f8:	fa03 f20e 	lsl.w	r2, r3, lr
   176fc:	1880      	adds	r0, r0, r2
   176fe:	fa43 f305 	asr.w	r3, r3, r5
   17702:	4159      	adcs	r1, r3
   17704:	e00e      	b.n	17724 <__adddf3+0xd0>
   17706:	f1a5 0520 	sub.w	r5, r5, #32
   1770a:	f10e 0e20 	add.w	lr, lr, #32
   1770e:	2a01      	cmp	r2, #1
   17710:	fa03 fc0e 	lsl.w	ip, r3, lr
   17714:	bf28      	it	cs
   17716:	f04c 0c02 	orrcs.w	ip, ip, #2
   1771a:	fa43 f305 	asr.w	r3, r3, r5
   1771e:	18c0      	adds	r0, r0, r3
   17720:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17728:	d507      	bpl.n	1773a <__adddf3+0xe6>
   1772a:	f04f 0e00 	mov.w	lr, #0
   1772e:	f1dc 0c00 	rsbs	ip, ip, #0
   17732:	eb7e 0000 	sbcs.w	r0, lr, r0
   17736:	eb6e 0101 	sbc.w	r1, lr, r1
   1773a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1773e:	d31b      	bcc.n	17778 <__adddf3+0x124>
   17740:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17744:	d30c      	bcc.n	17760 <__adddf3+0x10c>
   17746:	0849      	lsrs	r1, r1, #1
   17748:	ea5f 0030 	movs.w	r0, r0, rrx
   1774c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17750:	f104 0401 	add.w	r4, r4, #1
   17754:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17758:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1775c:	f080 809a 	bcs.w	17894 <__adddf3+0x240>
   17760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17764:	bf08      	it	eq
   17766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1776a:	f150 0000 	adcs.w	r0, r0, #0
   1776e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17772:	ea41 0105 	orr.w	r1, r1, r5
   17776:	bd30      	pop	{r4, r5, pc}
   17778:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1777c:	4140      	adcs	r0, r0
   1777e:	eb41 0101 	adc.w	r1, r1, r1
   17782:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17786:	f1a4 0401 	sub.w	r4, r4, #1
   1778a:	d1e9      	bne.n	17760 <__adddf3+0x10c>
   1778c:	f091 0f00 	teq	r1, #0
   17790:	bf04      	itt	eq
   17792:	4601      	moveq	r1, r0
   17794:	2000      	moveq	r0, #0
   17796:	fab1 f381 	clz	r3, r1
   1779a:	bf08      	it	eq
   1779c:	3320      	addeq	r3, #32
   1779e:	f1a3 030b 	sub.w	r3, r3, #11
   177a2:	f1b3 0220 	subs.w	r2, r3, #32
   177a6:	da0c      	bge.n	177c2 <__adddf3+0x16e>
   177a8:	320c      	adds	r2, #12
   177aa:	dd08      	ble.n	177be <__adddf3+0x16a>
   177ac:	f102 0c14 	add.w	ip, r2, #20
   177b0:	f1c2 020c 	rsb	r2, r2, #12
   177b4:	fa01 f00c 	lsl.w	r0, r1, ip
   177b8:	fa21 f102 	lsr.w	r1, r1, r2
   177bc:	e00c      	b.n	177d8 <__adddf3+0x184>
   177be:	f102 0214 	add.w	r2, r2, #20
   177c2:	bfd8      	it	le
   177c4:	f1c2 0c20 	rsble	ip, r2, #32
   177c8:	fa01 f102 	lsl.w	r1, r1, r2
   177cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   177d0:	bfdc      	itt	le
   177d2:	ea41 010c 	orrle.w	r1, r1, ip
   177d6:	4090      	lslle	r0, r2
   177d8:	1ae4      	subs	r4, r4, r3
   177da:	bfa2      	ittt	ge
   177dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   177e0:	4329      	orrge	r1, r5
   177e2:	bd30      	popge	{r4, r5, pc}
   177e4:	ea6f 0404 	mvn.w	r4, r4
   177e8:	3c1f      	subs	r4, #31
   177ea:	da1c      	bge.n	17826 <__adddf3+0x1d2>
   177ec:	340c      	adds	r4, #12
   177ee:	dc0e      	bgt.n	1780e <__adddf3+0x1ba>
   177f0:	f104 0414 	add.w	r4, r4, #20
   177f4:	f1c4 0220 	rsb	r2, r4, #32
   177f8:	fa20 f004 	lsr.w	r0, r0, r4
   177fc:	fa01 f302 	lsl.w	r3, r1, r2
   17800:	ea40 0003 	orr.w	r0, r0, r3
   17804:	fa21 f304 	lsr.w	r3, r1, r4
   17808:	ea45 0103 	orr.w	r1, r5, r3
   1780c:	bd30      	pop	{r4, r5, pc}
   1780e:	f1c4 040c 	rsb	r4, r4, #12
   17812:	f1c4 0220 	rsb	r2, r4, #32
   17816:	fa20 f002 	lsr.w	r0, r0, r2
   1781a:	fa01 f304 	lsl.w	r3, r1, r4
   1781e:	ea40 0003 	orr.w	r0, r0, r3
   17822:	4629      	mov	r1, r5
   17824:	bd30      	pop	{r4, r5, pc}
   17826:	fa21 f004 	lsr.w	r0, r1, r4
   1782a:	4629      	mov	r1, r5
   1782c:	bd30      	pop	{r4, r5, pc}
   1782e:	f094 0f00 	teq	r4, #0
   17832:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17836:	bf06      	itte	eq
   17838:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1783c:	3401      	addeq	r4, #1
   1783e:	3d01      	subne	r5, #1
   17840:	e74e      	b.n	176e0 <__adddf3+0x8c>
   17842:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17846:	bf18      	it	ne
   17848:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1784c:	d029      	beq.n	178a2 <__adddf3+0x24e>
   1784e:	ea94 0f05 	teq	r4, r5
   17852:	bf08      	it	eq
   17854:	ea90 0f02 	teqeq	r0, r2
   17858:	d005      	beq.n	17866 <__adddf3+0x212>
   1785a:	ea54 0c00 	orrs.w	ip, r4, r0
   1785e:	bf04      	itt	eq
   17860:	4619      	moveq	r1, r3
   17862:	4610      	moveq	r0, r2
   17864:	bd30      	pop	{r4, r5, pc}
   17866:	ea91 0f03 	teq	r1, r3
   1786a:	bf1e      	ittt	ne
   1786c:	2100      	movne	r1, #0
   1786e:	2000      	movne	r0, #0
   17870:	bd30      	popne	{r4, r5, pc}
   17872:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17876:	d105      	bne.n	17884 <__adddf3+0x230>
   17878:	0040      	lsls	r0, r0, #1
   1787a:	4149      	adcs	r1, r1
   1787c:	bf28      	it	cs
   1787e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17882:	bd30      	pop	{r4, r5, pc}
   17884:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17888:	bf3c      	itt	cc
   1788a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1788e:	bd30      	popcc	{r4, r5, pc}
   17890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17894:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1789c:	f04f 0000 	mov.w	r0, #0
   178a0:	bd30      	pop	{r4, r5, pc}
   178a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   178a6:	bf1a      	itte	ne
   178a8:	4619      	movne	r1, r3
   178aa:	4610      	movne	r0, r2
   178ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   178b0:	bf1c      	itt	ne
   178b2:	460b      	movne	r3, r1
   178b4:	4602      	movne	r2, r0
   178b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   178ba:	bf06      	itte	eq
   178bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   178c0:	ea91 0f03 	teqeq	r1, r3
   178c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   178c8:	bd30      	pop	{r4, r5, pc}
   178ca:	bf00      	nop

000178cc <__aeabi_ui2d>:
   178cc:	f090 0f00 	teq	r0, #0
   178d0:	bf04      	itt	eq
   178d2:	2100      	moveq	r1, #0
   178d4:	4770      	bxeq	lr
   178d6:	b530      	push	{r4, r5, lr}
   178d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178e0:	f04f 0500 	mov.w	r5, #0
   178e4:	f04f 0100 	mov.w	r1, #0
   178e8:	e750      	b.n	1778c <__adddf3+0x138>
   178ea:	bf00      	nop

000178ec <__aeabi_i2d>:
   178ec:	f090 0f00 	teq	r0, #0
   178f0:	bf04      	itt	eq
   178f2:	2100      	moveq	r1, #0
   178f4:	4770      	bxeq	lr
   178f6:	b530      	push	{r4, r5, lr}
   178f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17900:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17904:	bf48      	it	mi
   17906:	4240      	negmi	r0, r0
   17908:	f04f 0100 	mov.w	r1, #0
   1790c:	e73e      	b.n	1778c <__adddf3+0x138>
   1790e:	bf00      	nop

00017910 <__aeabi_f2d>:
   17910:	0042      	lsls	r2, r0, #1
   17912:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17916:	ea4f 0131 	mov.w	r1, r1, rrx
   1791a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1791e:	bf1f      	itttt	ne
   17920:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17928:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1792c:	4770      	bxne	lr
   1792e:	f092 0f00 	teq	r2, #0
   17932:	bf14      	ite	ne
   17934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17938:	4770      	bxeq	lr
   1793a:	b530      	push	{r4, r5, lr}
   1793c:	f44f 7460 	mov.w	r4, #896	; 0x380
   17940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17948:	e720      	b.n	1778c <__adddf3+0x138>
   1794a:	bf00      	nop

0001794c <__aeabi_ul2d>:
   1794c:	ea50 0201 	orrs.w	r2, r0, r1
   17950:	bf08      	it	eq
   17952:	4770      	bxeq	lr
   17954:	b530      	push	{r4, r5, lr}
   17956:	f04f 0500 	mov.w	r5, #0
   1795a:	e00a      	b.n	17972 <__aeabi_l2d+0x16>

0001795c <__aeabi_l2d>:
   1795c:	ea50 0201 	orrs.w	r2, r0, r1
   17960:	bf08      	it	eq
   17962:	4770      	bxeq	lr
   17964:	b530      	push	{r4, r5, lr}
   17966:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1796a:	d502      	bpl.n	17972 <__aeabi_l2d+0x16>
   1796c:	4240      	negs	r0, r0
   1796e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17972:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17976:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1797a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1797e:	f43f aedc 	beq.w	1773a <__adddf3+0xe6>
   17982:	f04f 0203 	mov.w	r2, #3
   17986:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1798a:	bf18      	it	ne
   1798c:	3203      	addne	r2, #3
   1798e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17992:	bf18      	it	ne
   17994:	3203      	addne	r2, #3
   17996:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1799a:	f1c2 0320 	rsb	r3, r2, #32
   1799e:	fa00 fc03 	lsl.w	ip, r0, r3
   179a2:	fa20 f002 	lsr.w	r0, r0, r2
   179a6:	fa01 fe03 	lsl.w	lr, r1, r3
   179aa:	ea40 000e 	orr.w	r0, r0, lr
   179ae:	fa21 f102 	lsr.w	r1, r1, r2
   179b2:	4414      	add	r4, r2
   179b4:	e6c1      	b.n	1773a <__adddf3+0xe6>
   179b6:	bf00      	nop

000179b8 <__aeabi_dmul>:
   179b8:	b570      	push	{r4, r5, r6, lr}
   179ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   179be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   179c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   179c6:	bf1d      	ittte	ne
   179c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   179cc:	ea94 0f0c 	teqne	r4, ip
   179d0:	ea95 0f0c 	teqne	r5, ip
   179d4:	f000 f8de 	bleq	17b94 <__aeabi_dmul+0x1dc>
   179d8:	442c      	add	r4, r5
   179da:	ea81 0603 	eor.w	r6, r1, r3
   179de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   179e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   179e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   179ea:	bf18      	it	ne
   179ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   179f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   179f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   179f8:	d038      	beq.n	17a6c <__aeabi_dmul+0xb4>
   179fa:	fba0 ce02 	umull	ip, lr, r0, r2
   179fe:	f04f 0500 	mov.w	r5, #0
   17a02:	fbe1 e502 	umlal	lr, r5, r1, r2
   17a06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17a0a:	fbe0 e503 	umlal	lr, r5, r0, r3
   17a0e:	f04f 0600 	mov.w	r6, #0
   17a12:	fbe1 5603 	umlal	r5, r6, r1, r3
   17a16:	f09c 0f00 	teq	ip, #0
   17a1a:	bf18      	it	ne
   17a1c:	f04e 0e01 	orrne.w	lr, lr, #1
   17a20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17a24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17a28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17a2c:	d204      	bcs.n	17a38 <__aeabi_dmul+0x80>
   17a2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17a32:	416d      	adcs	r5, r5
   17a34:	eb46 0606 	adc.w	r6, r6, r6
   17a38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17a3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17a40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17a44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17a48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17a4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17a50:	bf88      	it	hi
   17a52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17a56:	d81e      	bhi.n	17a96 <__aeabi_dmul+0xde>
   17a58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17a5c:	bf08      	it	eq
   17a5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17a62:	f150 0000 	adcs.w	r0, r0, #0
   17a66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a6a:	bd70      	pop	{r4, r5, r6, pc}
   17a6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17a70:	ea46 0101 	orr.w	r1, r6, r1
   17a74:	ea40 0002 	orr.w	r0, r0, r2
   17a78:	ea81 0103 	eor.w	r1, r1, r3
   17a7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17a80:	bfc2      	ittt	gt
   17a82:	ebd4 050c 	rsbsgt	r5, r4, ip
   17a86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17a8a:	bd70      	popgt	{r4, r5, r6, pc}
   17a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a90:	f04f 0e00 	mov.w	lr, #0
   17a94:	3c01      	subs	r4, #1
   17a96:	f300 80ab 	bgt.w	17bf0 <__aeabi_dmul+0x238>
   17a9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17a9e:	bfde      	ittt	le
   17aa0:	2000      	movle	r0, #0
   17aa2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17aa6:	bd70      	pople	{r4, r5, r6, pc}
   17aa8:	f1c4 0400 	rsb	r4, r4, #0
   17aac:	3c20      	subs	r4, #32
   17aae:	da35      	bge.n	17b1c <__aeabi_dmul+0x164>
   17ab0:	340c      	adds	r4, #12
   17ab2:	dc1b      	bgt.n	17aec <__aeabi_dmul+0x134>
   17ab4:	f104 0414 	add.w	r4, r4, #20
   17ab8:	f1c4 0520 	rsb	r5, r4, #32
   17abc:	fa00 f305 	lsl.w	r3, r0, r5
   17ac0:	fa20 f004 	lsr.w	r0, r0, r4
   17ac4:	fa01 f205 	lsl.w	r2, r1, r5
   17ac8:	ea40 0002 	orr.w	r0, r0, r2
   17acc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17ad4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ad8:	fa21 f604 	lsr.w	r6, r1, r4
   17adc:	eb42 0106 	adc.w	r1, r2, r6
   17ae0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17ae4:	bf08      	it	eq
   17ae6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17aea:	bd70      	pop	{r4, r5, r6, pc}
   17aec:	f1c4 040c 	rsb	r4, r4, #12
   17af0:	f1c4 0520 	rsb	r5, r4, #32
   17af4:	fa00 f304 	lsl.w	r3, r0, r4
   17af8:	fa20 f005 	lsr.w	r0, r0, r5
   17afc:	fa01 f204 	lsl.w	r2, r1, r4
   17b00:	ea40 0002 	orr.w	r0, r0, r2
   17b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b0c:	f141 0100 	adc.w	r1, r1, #0
   17b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b14:	bf08      	it	eq
   17b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b1a:	bd70      	pop	{r4, r5, r6, pc}
   17b1c:	f1c4 0520 	rsb	r5, r4, #32
   17b20:	fa00 f205 	lsl.w	r2, r0, r5
   17b24:	ea4e 0e02 	orr.w	lr, lr, r2
   17b28:	fa20 f304 	lsr.w	r3, r0, r4
   17b2c:	fa01 f205 	lsl.w	r2, r1, r5
   17b30:	ea43 0302 	orr.w	r3, r3, r2
   17b34:	fa21 f004 	lsr.w	r0, r1, r4
   17b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b3c:	fa21 f204 	lsr.w	r2, r1, r4
   17b40:	ea20 0002 	bic.w	r0, r0, r2
   17b44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b4c:	bf08      	it	eq
   17b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b52:	bd70      	pop	{r4, r5, r6, pc}
   17b54:	f094 0f00 	teq	r4, #0
   17b58:	d10f      	bne.n	17b7a <__aeabi_dmul+0x1c2>
   17b5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17b5e:	0040      	lsls	r0, r0, #1
   17b60:	eb41 0101 	adc.w	r1, r1, r1
   17b64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b68:	bf08      	it	eq
   17b6a:	3c01      	subeq	r4, #1
   17b6c:	d0f7      	beq.n	17b5e <__aeabi_dmul+0x1a6>
   17b6e:	ea41 0106 	orr.w	r1, r1, r6
   17b72:	f095 0f00 	teq	r5, #0
   17b76:	bf18      	it	ne
   17b78:	4770      	bxne	lr
   17b7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17b7e:	0052      	lsls	r2, r2, #1
   17b80:	eb43 0303 	adc.w	r3, r3, r3
   17b84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17b88:	bf08      	it	eq
   17b8a:	3d01      	subeq	r5, #1
   17b8c:	d0f7      	beq.n	17b7e <__aeabi_dmul+0x1c6>
   17b8e:	ea43 0306 	orr.w	r3, r3, r6
   17b92:	4770      	bx	lr
   17b94:	ea94 0f0c 	teq	r4, ip
   17b98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17b9c:	bf18      	it	ne
   17b9e:	ea95 0f0c 	teqne	r5, ip
   17ba2:	d00c      	beq.n	17bbe <__aeabi_dmul+0x206>
   17ba4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ba8:	bf18      	it	ne
   17baa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17bae:	d1d1      	bne.n	17b54 <__aeabi_dmul+0x19c>
   17bb0:	ea81 0103 	eor.w	r1, r1, r3
   17bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bb8:	f04f 0000 	mov.w	r0, #0
   17bbc:	bd70      	pop	{r4, r5, r6, pc}
   17bbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17bc2:	bf06      	itte	eq
   17bc4:	4610      	moveq	r0, r2
   17bc6:	4619      	moveq	r1, r3
   17bc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17bcc:	d019      	beq.n	17c02 <__aeabi_dmul+0x24a>
   17bce:	ea94 0f0c 	teq	r4, ip
   17bd2:	d102      	bne.n	17bda <__aeabi_dmul+0x222>
   17bd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17bd8:	d113      	bne.n	17c02 <__aeabi_dmul+0x24a>
   17bda:	ea95 0f0c 	teq	r5, ip
   17bde:	d105      	bne.n	17bec <__aeabi_dmul+0x234>
   17be0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17be4:	bf1c      	itt	ne
   17be6:	4610      	movne	r0, r2
   17be8:	4619      	movne	r1, r3
   17bea:	d10a      	bne.n	17c02 <__aeabi_dmul+0x24a>
   17bec:	ea81 0103 	eor.w	r1, r1, r3
   17bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bf4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17bf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17bfc:	f04f 0000 	mov.w	r0, #0
   17c00:	bd70      	pop	{r4, r5, r6, pc}
   17c02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17c0a:	bd70      	pop	{r4, r5, r6, pc}

00017c0c <__aeabi_ddiv>:
   17c0c:	b570      	push	{r4, r5, r6, lr}
   17c0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c1a:	bf1d      	ittte	ne
   17c1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c20:	ea94 0f0c 	teqne	r4, ip
   17c24:	ea95 0f0c 	teqne	r5, ip
   17c28:	f000 f8a7 	bleq	17d7a <__aeabi_ddiv+0x16e>
   17c2c:	eba4 0405 	sub.w	r4, r4, r5
   17c30:	ea81 0e03 	eor.w	lr, r1, r3
   17c34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17c38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17c3c:	f000 8088 	beq.w	17d50 <__aeabi_ddiv+0x144>
   17c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17c44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17c48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17c4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17c50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17c54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17c58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17c5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17c60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17c64:	429d      	cmp	r5, r3
   17c66:	bf08      	it	eq
   17c68:	4296      	cmpeq	r6, r2
   17c6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17c6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17c72:	d202      	bcs.n	17c7a <__aeabi_ddiv+0x6e>
   17c74:	085b      	lsrs	r3, r3, #1
   17c76:	ea4f 0232 	mov.w	r2, r2, rrx
   17c7a:	1ab6      	subs	r6, r6, r2
   17c7c:	eb65 0503 	sbc.w	r5, r5, r3
   17c80:	085b      	lsrs	r3, r3, #1
   17c82:	ea4f 0232 	mov.w	r2, r2, rrx
   17c86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17c8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17c8e:	ebb6 0e02 	subs.w	lr, r6, r2
   17c92:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c96:	bf22      	ittt	cs
   17c98:	1ab6      	subcs	r6, r6, r2
   17c9a:	4675      	movcs	r5, lr
   17c9c:	ea40 000c 	orrcs.w	r0, r0, ip
   17ca0:	085b      	lsrs	r3, r3, #1
   17ca2:	ea4f 0232 	mov.w	r2, r2, rrx
   17ca6:	ebb6 0e02 	subs.w	lr, r6, r2
   17caa:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cae:	bf22      	ittt	cs
   17cb0:	1ab6      	subcs	r6, r6, r2
   17cb2:	4675      	movcs	r5, lr
   17cb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17cb8:	085b      	lsrs	r3, r3, #1
   17cba:	ea4f 0232 	mov.w	r2, r2, rrx
   17cbe:	ebb6 0e02 	subs.w	lr, r6, r2
   17cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cc6:	bf22      	ittt	cs
   17cc8:	1ab6      	subcs	r6, r6, r2
   17cca:	4675      	movcs	r5, lr
   17ccc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17cd0:	085b      	lsrs	r3, r3, #1
   17cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   17cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   17cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cde:	bf22      	ittt	cs
   17ce0:	1ab6      	subcs	r6, r6, r2
   17ce2:	4675      	movcs	r5, lr
   17ce4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17ce8:	ea55 0e06 	orrs.w	lr, r5, r6
   17cec:	d018      	beq.n	17d20 <__aeabi_ddiv+0x114>
   17cee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17cf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17cf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17cfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17cfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17d02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17d06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17d0a:	d1c0      	bne.n	17c8e <__aeabi_ddiv+0x82>
   17d0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d10:	d10b      	bne.n	17d2a <__aeabi_ddiv+0x11e>
   17d12:	ea41 0100 	orr.w	r1, r1, r0
   17d16:	f04f 0000 	mov.w	r0, #0
   17d1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17d1e:	e7b6      	b.n	17c8e <__aeabi_ddiv+0x82>
   17d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d24:	bf04      	itt	eq
   17d26:	4301      	orreq	r1, r0
   17d28:	2000      	moveq	r0, #0
   17d2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17d2e:	bf88      	it	hi
   17d30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17d34:	f63f aeaf 	bhi.w	17a96 <__aeabi_dmul+0xde>
   17d38:	ebb5 0c03 	subs.w	ip, r5, r3
   17d3c:	bf04      	itt	eq
   17d3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   17d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17d46:	f150 0000 	adcs.w	r0, r0, #0
   17d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d4e:	bd70      	pop	{r4, r5, r6, pc}
   17d50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17d54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17d58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17d5c:	bfc2      	ittt	gt
   17d5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d66:	bd70      	popgt	{r4, r5, r6, pc}
   17d68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d6c:	f04f 0e00 	mov.w	lr, #0
   17d70:	3c01      	subs	r4, #1
   17d72:	e690      	b.n	17a96 <__aeabi_dmul+0xde>
   17d74:	ea45 0e06 	orr.w	lr, r5, r6
   17d78:	e68d      	b.n	17a96 <__aeabi_dmul+0xde>
   17d7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17d7e:	ea94 0f0c 	teq	r4, ip
   17d82:	bf08      	it	eq
   17d84:	ea95 0f0c 	teqeq	r5, ip
   17d88:	f43f af3b 	beq.w	17c02 <__aeabi_dmul+0x24a>
   17d8c:	ea94 0f0c 	teq	r4, ip
   17d90:	d10a      	bne.n	17da8 <__aeabi_ddiv+0x19c>
   17d92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17d96:	f47f af34 	bne.w	17c02 <__aeabi_dmul+0x24a>
   17d9a:	ea95 0f0c 	teq	r5, ip
   17d9e:	f47f af25 	bne.w	17bec <__aeabi_dmul+0x234>
   17da2:	4610      	mov	r0, r2
   17da4:	4619      	mov	r1, r3
   17da6:	e72c      	b.n	17c02 <__aeabi_dmul+0x24a>
   17da8:	ea95 0f0c 	teq	r5, ip
   17dac:	d106      	bne.n	17dbc <__aeabi_ddiv+0x1b0>
   17dae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17db2:	f43f aefd 	beq.w	17bb0 <__aeabi_dmul+0x1f8>
   17db6:	4610      	mov	r0, r2
   17db8:	4619      	mov	r1, r3
   17dba:	e722      	b.n	17c02 <__aeabi_dmul+0x24a>
   17dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dc0:	bf18      	it	ne
   17dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dc6:	f47f aec5 	bne.w	17b54 <__aeabi_dmul+0x19c>
   17dca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17dce:	f47f af0d 	bne.w	17bec <__aeabi_dmul+0x234>
   17dd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17dd6:	f47f aeeb 	bne.w	17bb0 <__aeabi_dmul+0x1f8>
   17dda:	e712      	b.n	17c02 <__aeabi_dmul+0x24a>

00017ddc <__gedf2>:
   17ddc:	f04f 3cff 	mov.w	ip, #4294967295
   17de0:	e006      	b.n	17df0 <__cmpdf2+0x4>
   17de2:	bf00      	nop

00017de4 <__ledf2>:
   17de4:	f04f 0c01 	mov.w	ip, #1
   17de8:	e002      	b.n	17df0 <__cmpdf2+0x4>
   17dea:	bf00      	nop

00017dec <__cmpdf2>:
   17dec:	f04f 0c01 	mov.w	ip, #1
   17df0:	f84d cd04 	str.w	ip, [sp, #-4]!
   17df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17dfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e00:	bf18      	it	ne
   17e02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17e06:	d01b      	beq.n	17e40 <__cmpdf2+0x54>
   17e08:	b001      	add	sp, #4
   17e0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17e0e:	bf0c      	ite	eq
   17e10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17e14:	ea91 0f03 	teqne	r1, r3
   17e18:	bf02      	ittt	eq
   17e1a:	ea90 0f02 	teqeq	r0, r2
   17e1e:	2000      	moveq	r0, #0
   17e20:	4770      	bxeq	lr
   17e22:	f110 0f00 	cmn.w	r0, #0
   17e26:	ea91 0f03 	teq	r1, r3
   17e2a:	bf58      	it	pl
   17e2c:	4299      	cmppl	r1, r3
   17e2e:	bf08      	it	eq
   17e30:	4290      	cmpeq	r0, r2
   17e32:	bf2c      	ite	cs
   17e34:	17d8      	asrcs	r0, r3, #31
   17e36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17e3a:	f040 0001 	orr.w	r0, r0, #1
   17e3e:	4770      	bx	lr
   17e40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e48:	d102      	bne.n	17e50 <__cmpdf2+0x64>
   17e4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17e4e:	d107      	bne.n	17e60 <__cmpdf2+0x74>
   17e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e58:	d1d6      	bne.n	17e08 <__cmpdf2+0x1c>
   17e5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17e5e:	d0d3      	beq.n	17e08 <__cmpdf2+0x1c>
   17e60:	f85d 0b04 	ldr.w	r0, [sp], #4
   17e64:	4770      	bx	lr
   17e66:	bf00      	nop

00017e68 <__aeabi_cdrcmple>:
   17e68:	4684      	mov	ip, r0
   17e6a:	4610      	mov	r0, r2
   17e6c:	4662      	mov	r2, ip
   17e6e:	468c      	mov	ip, r1
   17e70:	4619      	mov	r1, r3
   17e72:	4663      	mov	r3, ip
   17e74:	e000      	b.n	17e78 <__aeabi_cdcmpeq>
   17e76:	bf00      	nop

00017e78 <__aeabi_cdcmpeq>:
   17e78:	b501      	push	{r0, lr}
   17e7a:	f7ff ffb7 	bl	17dec <__cmpdf2>
   17e7e:	2800      	cmp	r0, #0
   17e80:	bf48      	it	mi
   17e82:	f110 0f00 	cmnmi.w	r0, #0
   17e86:	bd01      	pop	{r0, pc}

00017e88 <__aeabi_dcmpeq>:
   17e88:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e8c:	f7ff fff4 	bl	17e78 <__aeabi_cdcmpeq>
   17e90:	bf0c      	ite	eq
   17e92:	2001      	moveq	r0, #1
   17e94:	2000      	movne	r0, #0
   17e96:	f85d fb08 	ldr.w	pc, [sp], #8
   17e9a:	bf00      	nop

00017e9c <__aeabi_dcmplt>:
   17e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ea0:	f7ff ffea 	bl	17e78 <__aeabi_cdcmpeq>
   17ea4:	bf34      	ite	cc
   17ea6:	2001      	movcc	r0, #1
   17ea8:	2000      	movcs	r0, #0
   17eaa:	f85d fb08 	ldr.w	pc, [sp], #8
   17eae:	bf00      	nop

00017eb0 <__aeabi_dcmple>:
   17eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17eb4:	f7ff ffe0 	bl	17e78 <__aeabi_cdcmpeq>
   17eb8:	bf94      	ite	ls
   17eba:	2001      	movls	r0, #1
   17ebc:	2000      	movhi	r0, #0
   17ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   17ec2:	bf00      	nop

00017ec4 <__aeabi_dcmpge>:
   17ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ec8:	f7ff ffce 	bl	17e68 <__aeabi_cdrcmple>
   17ecc:	bf94      	ite	ls
   17ece:	2001      	movls	r0, #1
   17ed0:	2000      	movhi	r0, #0
   17ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   17ed6:	bf00      	nop

00017ed8 <__aeabi_dcmpgt>:
   17ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17edc:	f7ff ffc4 	bl	17e68 <__aeabi_cdrcmple>
   17ee0:	bf34      	ite	cc
   17ee2:	2001      	movcc	r0, #1
   17ee4:	2000      	movcs	r0, #0
   17ee6:	f85d fb08 	ldr.w	pc, [sp], #8
   17eea:	bf00      	nop

00017eec <__aeabi_d2iz>:
   17eec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ef0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17ef4:	d215      	bcs.n	17f22 <__aeabi_d2iz+0x36>
   17ef6:	d511      	bpl.n	17f1c <__aeabi_d2iz+0x30>
   17ef8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f00:	d912      	bls.n	17f28 <__aeabi_d2iz+0x3c>
   17f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17f12:	fa23 f002 	lsr.w	r0, r3, r2
   17f16:	bf18      	it	ne
   17f18:	4240      	negne	r0, r0
   17f1a:	4770      	bx	lr
   17f1c:	f04f 0000 	mov.w	r0, #0
   17f20:	4770      	bx	lr
   17f22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f26:	d105      	bne.n	17f34 <__aeabi_d2iz+0x48>
   17f28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17f2c:	bf08      	it	eq
   17f2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17f32:	4770      	bx	lr
   17f34:	f04f 0000 	mov.w	r0, #0
   17f38:	4770      	bx	lr
   17f3a:	bf00      	nop

00017f3c <__aeabi_d2uiz>:
   17f3c:	004a      	lsls	r2, r1, #1
   17f3e:	d211      	bcs.n	17f64 <__aeabi_d2uiz+0x28>
   17f40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17f44:	d211      	bcs.n	17f6a <__aeabi_d2uiz+0x2e>
   17f46:	d50d      	bpl.n	17f64 <__aeabi_d2uiz+0x28>
   17f48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f50:	d40e      	bmi.n	17f70 <__aeabi_d2uiz+0x34>
   17f52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f5e:	fa23 f002 	lsr.w	r0, r3, r2
   17f62:	4770      	bx	lr
   17f64:	f04f 0000 	mov.w	r0, #0
   17f68:	4770      	bx	lr
   17f6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f6e:	d102      	bne.n	17f76 <__aeabi_d2uiz+0x3a>
   17f70:	f04f 30ff 	mov.w	r0, #4294967295
   17f74:	4770      	bx	lr
   17f76:	f04f 0000 	mov.w	r0, #0
   17f7a:	4770      	bx	lr

00017f7c <__aeabi_d2f>:
   17f7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17f84:	bf24      	itt	cs
   17f86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17f8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17f8e:	d90d      	bls.n	17fac <__aeabi_d2f+0x30>
   17f90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17f94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17f98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17f9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17fa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17fa4:	bf08      	it	eq
   17fa6:	f020 0001 	biceq.w	r0, r0, #1
   17faa:	4770      	bx	lr
   17fac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17fb0:	d121      	bne.n	17ff6 <__aeabi_d2f+0x7a>
   17fb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17fb6:	bfbc      	itt	lt
   17fb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17fbc:	4770      	bxlt	lr
   17fbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17fc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17fc6:	f1c2 0218 	rsb	r2, r2, #24
   17fca:	f1c2 0c20 	rsb	ip, r2, #32
   17fce:	fa10 f30c 	lsls.w	r3, r0, ip
   17fd2:	fa20 f002 	lsr.w	r0, r0, r2
   17fd6:	bf18      	it	ne
   17fd8:	f040 0001 	orrne.w	r0, r0, #1
   17fdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fe0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17fe4:	fa03 fc0c 	lsl.w	ip, r3, ip
   17fe8:	ea40 000c 	orr.w	r0, r0, ip
   17fec:	fa23 f302 	lsr.w	r3, r3, r2
   17ff0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17ff4:	e7cc      	b.n	17f90 <__aeabi_d2f+0x14>
   17ff6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17ffa:	d107      	bne.n	1800c <__aeabi_d2f+0x90>
   17ffc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18000:	bf1e      	ittt	ne
   18002:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18006:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1800a:	4770      	bxne	lr
   1800c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18010:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18018:	4770      	bx	lr
   1801a:	bf00      	nop

0001801c <__aeabi_frsub>:
   1801c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18020:	e002      	b.n	18028 <__addsf3>
   18022:	bf00      	nop

00018024 <__aeabi_fsub>:
   18024:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018028 <__addsf3>:
   18028:	0042      	lsls	r2, r0, #1
   1802a:	bf1f      	itttt	ne
   1802c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18030:	ea92 0f03 	teqne	r2, r3
   18034:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18038:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1803c:	d06a      	beq.n	18114 <__addsf3+0xec>
   1803e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18042:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18046:	bfc1      	itttt	gt
   18048:	18d2      	addgt	r2, r2, r3
   1804a:	4041      	eorgt	r1, r0
   1804c:	4048      	eorgt	r0, r1
   1804e:	4041      	eorgt	r1, r0
   18050:	bfb8      	it	lt
   18052:	425b      	neglt	r3, r3
   18054:	2b19      	cmp	r3, #25
   18056:	bf88      	it	hi
   18058:	4770      	bxhi	lr
   1805a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1805e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18062:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18066:	bf18      	it	ne
   18068:	4240      	negne	r0, r0
   1806a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1806e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18072:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18076:	bf18      	it	ne
   18078:	4249      	negne	r1, r1
   1807a:	ea92 0f03 	teq	r2, r3
   1807e:	d03f      	beq.n	18100 <__addsf3+0xd8>
   18080:	f1a2 0201 	sub.w	r2, r2, #1
   18084:	fa41 fc03 	asr.w	ip, r1, r3
   18088:	eb10 000c 	adds.w	r0, r0, ip
   1808c:	f1c3 0320 	rsb	r3, r3, #32
   18090:	fa01 f103 	lsl.w	r1, r1, r3
   18094:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18098:	d502      	bpl.n	180a0 <__addsf3+0x78>
   1809a:	4249      	negs	r1, r1
   1809c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   180a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   180a4:	d313      	bcc.n	180ce <__addsf3+0xa6>
   180a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   180aa:	d306      	bcc.n	180ba <__addsf3+0x92>
   180ac:	0840      	lsrs	r0, r0, #1
   180ae:	ea4f 0131 	mov.w	r1, r1, rrx
   180b2:	f102 0201 	add.w	r2, r2, #1
   180b6:	2afe      	cmp	r2, #254	; 0xfe
   180b8:	d251      	bcs.n	1815e <__addsf3+0x136>
   180ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   180be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   180c2:	bf08      	it	eq
   180c4:	f020 0001 	biceq.w	r0, r0, #1
   180c8:	ea40 0003 	orr.w	r0, r0, r3
   180cc:	4770      	bx	lr
   180ce:	0049      	lsls	r1, r1, #1
   180d0:	eb40 0000 	adc.w	r0, r0, r0
   180d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   180d8:	f1a2 0201 	sub.w	r2, r2, #1
   180dc:	d1ed      	bne.n	180ba <__addsf3+0x92>
   180de:	fab0 fc80 	clz	ip, r0
   180e2:	f1ac 0c08 	sub.w	ip, ip, #8
   180e6:	ebb2 020c 	subs.w	r2, r2, ip
   180ea:	fa00 f00c 	lsl.w	r0, r0, ip
   180ee:	bfaa      	itet	ge
   180f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   180f4:	4252      	neglt	r2, r2
   180f6:	4318      	orrge	r0, r3
   180f8:	bfbc      	itt	lt
   180fa:	40d0      	lsrlt	r0, r2
   180fc:	4318      	orrlt	r0, r3
   180fe:	4770      	bx	lr
   18100:	f092 0f00 	teq	r2, #0
   18104:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18108:	bf06      	itte	eq
   1810a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1810e:	3201      	addeq	r2, #1
   18110:	3b01      	subne	r3, #1
   18112:	e7b5      	b.n	18080 <__addsf3+0x58>
   18114:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1811c:	bf18      	it	ne
   1811e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18122:	d021      	beq.n	18168 <__addsf3+0x140>
   18124:	ea92 0f03 	teq	r2, r3
   18128:	d004      	beq.n	18134 <__addsf3+0x10c>
   1812a:	f092 0f00 	teq	r2, #0
   1812e:	bf08      	it	eq
   18130:	4608      	moveq	r0, r1
   18132:	4770      	bx	lr
   18134:	ea90 0f01 	teq	r0, r1
   18138:	bf1c      	itt	ne
   1813a:	2000      	movne	r0, #0
   1813c:	4770      	bxne	lr
   1813e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18142:	d104      	bne.n	1814e <__addsf3+0x126>
   18144:	0040      	lsls	r0, r0, #1
   18146:	bf28      	it	cs
   18148:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1814c:	4770      	bx	lr
   1814e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18152:	bf3c      	itt	cc
   18154:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18158:	4770      	bxcc	lr
   1815a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1815e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18162:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18166:	4770      	bx	lr
   18168:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1816c:	bf16      	itet	ne
   1816e:	4608      	movne	r0, r1
   18170:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18174:	4601      	movne	r1, r0
   18176:	0242      	lsls	r2, r0, #9
   18178:	bf06      	itte	eq
   1817a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1817e:	ea90 0f01 	teqeq	r0, r1
   18182:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18186:	4770      	bx	lr

00018188 <__aeabi_ui2f>:
   18188:	f04f 0300 	mov.w	r3, #0
   1818c:	e004      	b.n	18198 <__aeabi_i2f+0x8>
   1818e:	bf00      	nop

00018190 <__aeabi_i2f>:
   18190:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18194:	bf48      	it	mi
   18196:	4240      	negmi	r0, r0
   18198:	ea5f 0c00 	movs.w	ip, r0
   1819c:	bf08      	it	eq
   1819e:	4770      	bxeq	lr
   181a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   181a4:	4601      	mov	r1, r0
   181a6:	f04f 0000 	mov.w	r0, #0
   181aa:	e01c      	b.n	181e6 <__aeabi_l2f+0x2a>

000181ac <__aeabi_ul2f>:
   181ac:	ea50 0201 	orrs.w	r2, r0, r1
   181b0:	bf08      	it	eq
   181b2:	4770      	bxeq	lr
   181b4:	f04f 0300 	mov.w	r3, #0
   181b8:	e00a      	b.n	181d0 <__aeabi_l2f+0x14>
   181ba:	bf00      	nop

000181bc <__aeabi_l2f>:
   181bc:	ea50 0201 	orrs.w	r2, r0, r1
   181c0:	bf08      	it	eq
   181c2:	4770      	bxeq	lr
   181c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   181c8:	d502      	bpl.n	181d0 <__aeabi_l2f+0x14>
   181ca:	4240      	negs	r0, r0
   181cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   181d0:	ea5f 0c01 	movs.w	ip, r1
   181d4:	bf02      	ittt	eq
   181d6:	4684      	moveq	ip, r0
   181d8:	4601      	moveq	r1, r0
   181da:	2000      	moveq	r0, #0
   181dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   181e0:	bf08      	it	eq
   181e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   181e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   181ea:	fabc f28c 	clz	r2, ip
   181ee:	3a08      	subs	r2, #8
   181f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   181f4:	db10      	blt.n	18218 <__aeabi_l2f+0x5c>
   181f6:	fa01 fc02 	lsl.w	ip, r1, r2
   181fa:	4463      	add	r3, ip
   181fc:	fa00 fc02 	lsl.w	ip, r0, r2
   18200:	f1c2 0220 	rsb	r2, r2, #32
   18204:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18208:	fa20 f202 	lsr.w	r2, r0, r2
   1820c:	eb43 0002 	adc.w	r0, r3, r2
   18210:	bf08      	it	eq
   18212:	f020 0001 	biceq.w	r0, r0, #1
   18216:	4770      	bx	lr
   18218:	f102 0220 	add.w	r2, r2, #32
   1821c:	fa01 fc02 	lsl.w	ip, r1, r2
   18220:	f1c2 0220 	rsb	r2, r2, #32
   18224:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18228:	fa21 f202 	lsr.w	r2, r1, r2
   1822c:	eb43 0002 	adc.w	r0, r3, r2
   18230:	bf08      	it	eq
   18232:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18236:	4770      	bx	lr

00018238 <__aeabi_fmul>:
   18238:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1823c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18240:	bf1e      	ittt	ne
   18242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18246:	ea92 0f0c 	teqne	r2, ip
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d06f      	beq.n	18330 <__aeabi_fmul+0xf8>
   18250:	441a      	add	r2, r3
   18252:	ea80 0c01 	eor.w	ip, r0, r1
   18256:	0240      	lsls	r0, r0, #9
   18258:	bf18      	it	ne
   1825a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1825e:	d01e      	beq.n	1829e <__aeabi_fmul+0x66>
   18260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1826c:	fba0 3101 	umull	r3, r1, r0, r1
   18270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18278:	bf3e      	ittt	cc
   1827a:	0049      	lslcc	r1, r1, #1
   1827c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18280:	005b      	lslcc	r3, r3, #1
   18282:	ea40 0001 	orr.w	r0, r0, r1
   18286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1828a:	2afd      	cmp	r2, #253	; 0xfd
   1828c:	d81d      	bhi.n	182ca <__aeabi_fmul+0x92>
   1828e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18296:	bf08      	it	eq
   18298:	f020 0001 	biceq.w	r0, r0, #1
   1829c:	4770      	bx	lr
   1829e:	f090 0f00 	teq	r0, #0
   182a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   182a6:	bf08      	it	eq
   182a8:	0249      	lsleq	r1, r1, #9
   182aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   182ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   182b2:	3a7f      	subs	r2, #127	; 0x7f
   182b4:	bfc2      	ittt	gt
   182b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   182ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   182be:	4770      	bxgt	lr
   182c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182c4:	f04f 0300 	mov.w	r3, #0
   182c8:	3a01      	subs	r2, #1
   182ca:	dc5d      	bgt.n	18388 <__aeabi_fmul+0x150>
   182cc:	f112 0f19 	cmn.w	r2, #25
   182d0:	bfdc      	itt	le
   182d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   182d6:	4770      	bxle	lr
   182d8:	f1c2 0200 	rsb	r2, r2, #0
   182dc:	0041      	lsls	r1, r0, #1
   182de:	fa21 f102 	lsr.w	r1, r1, r2
   182e2:	f1c2 0220 	rsb	r2, r2, #32
   182e6:	fa00 fc02 	lsl.w	ip, r0, r2
   182ea:	ea5f 0031 	movs.w	r0, r1, rrx
   182ee:	f140 0000 	adc.w	r0, r0, #0
   182f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   182f6:	bf08      	it	eq
   182f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182fc:	4770      	bx	lr
   182fe:	f092 0f00 	teq	r2, #0
   18302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18306:	bf02      	ittt	eq
   18308:	0040      	lsleq	r0, r0, #1
   1830a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1830e:	3a01      	subeq	r2, #1
   18310:	d0f9      	beq.n	18306 <__aeabi_fmul+0xce>
   18312:	ea40 000c 	orr.w	r0, r0, ip
   18316:	f093 0f00 	teq	r3, #0
   1831a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1831e:	bf02      	ittt	eq
   18320:	0049      	lsleq	r1, r1, #1
   18322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18326:	3b01      	subeq	r3, #1
   18328:	d0f9      	beq.n	1831e <__aeabi_fmul+0xe6>
   1832a:	ea41 010c 	orr.w	r1, r1, ip
   1832e:	e78f      	b.n	18250 <__aeabi_fmul+0x18>
   18330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18334:	ea92 0f0c 	teq	r2, ip
   18338:	bf18      	it	ne
   1833a:	ea93 0f0c 	teqne	r3, ip
   1833e:	d00a      	beq.n	18356 <__aeabi_fmul+0x11e>
   18340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18344:	bf18      	it	ne
   18346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1834a:	d1d8      	bne.n	182fe <__aeabi_fmul+0xc6>
   1834c:	ea80 0001 	eor.w	r0, r0, r1
   18350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18354:	4770      	bx	lr
   18356:	f090 0f00 	teq	r0, #0
   1835a:	bf17      	itett	ne
   1835c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18360:	4608      	moveq	r0, r1
   18362:	f091 0f00 	teqne	r1, #0
   18366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1836a:	d014      	beq.n	18396 <__aeabi_fmul+0x15e>
   1836c:	ea92 0f0c 	teq	r2, ip
   18370:	d101      	bne.n	18376 <__aeabi_fmul+0x13e>
   18372:	0242      	lsls	r2, r0, #9
   18374:	d10f      	bne.n	18396 <__aeabi_fmul+0x15e>
   18376:	ea93 0f0c 	teq	r3, ip
   1837a:	d103      	bne.n	18384 <__aeabi_fmul+0x14c>
   1837c:	024b      	lsls	r3, r1, #9
   1837e:	bf18      	it	ne
   18380:	4608      	movne	r0, r1
   18382:	d108      	bne.n	18396 <__aeabi_fmul+0x15e>
   18384:	ea80 0001 	eor.w	r0, r0, r1
   18388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1838c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18394:	4770      	bx	lr
   18396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1839a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1839e:	4770      	bx	lr

000183a0 <__aeabi_fdiv>:
   183a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   183a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   183a8:	bf1e      	ittt	ne
   183aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   183ae:	ea92 0f0c 	teqne	r2, ip
   183b2:	ea93 0f0c 	teqne	r3, ip
   183b6:	d069      	beq.n	1848c <__aeabi_fdiv+0xec>
   183b8:	eba2 0203 	sub.w	r2, r2, r3
   183bc:	ea80 0c01 	eor.w	ip, r0, r1
   183c0:	0249      	lsls	r1, r1, #9
   183c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   183c6:	d037      	beq.n	18438 <__aeabi_fdiv+0x98>
   183c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   183cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   183d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   183d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   183d8:	428b      	cmp	r3, r1
   183da:	bf38      	it	cc
   183dc:	005b      	lslcc	r3, r3, #1
   183de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   183e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   183e6:	428b      	cmp	r3, r1
   183e8:	bf24      	itt	cs
   183ea:	1a5b      	subcs	r3, r3, r1
   183ec:	ea40 000c 	orrcs.w	r0, r0, ip
   183f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   183f4:	bf24      	itt	cs
   183f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   183fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   183fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18402:	bf24      	itt	cs
   18404:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1840c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18410:	bf24      	itt	cs
   18412:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18416:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1841a:	011b      	lsls	r3, r3, #4
   1841c:	bf18      	it	ne
   1841e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18422:	d1e0      	bne.n	183e6 <__aeabi_fdiv+0x46>
   18424:	2afd      	cmp	r2, #253	; 0xfd
   18426:	f63f af50 	bhi.w	182ca <__aeabi_fmul+0x92>
   1842a:	428b      	cmp	r3, r1
   1842c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18430:	bf08      	it	eq
   18432:	f020 0001 	biceq.w	r0, r0, #1
   18436:	4770      	bx	lr
   18438:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1843c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18440:	327f      	adds	r2, #127	; 0x7f
   18442:	bfc2      	ittt	gt
   18444:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18448:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1844c:	4770      	bxgt	lr
   1844e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18452:	f04f 0300 	mov.w	r3, #0
   18456:	3a01      	subs	r2, #1
   18458:	e737      	b.n	182ca <__aeabi_fmul+0x92>
   1845a:	f092 0f00 	teq	r2, #0
   1845e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18462:	bf02      	ittt	eq
   18464:	0040      	lsleq	r0, r0, #1
   18466:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1846a:	3a01      	subeq	r2, #1
   1846c:	d0f9      	beq.n	18462 <__aeabi_fdiv+0xc2>
   1846e:	ea40 000c 	orr.w	r0, r0, ip
   18472:	f093 0f00 	teq	r3, #0
   18476:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1847a:	bf02      	ittt	eq
   1847c:	0049      	lsleq	r1, r1, #1
   1847e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18482:	3b01      	subeq	r3, #1
   18484:	d0f9      	beq.n	1847a <__aeabi_fdiv+0xda>
   18486:	ea41 010c 	orr.w	r1, r1, ip
   1848a:	e795      	b.n	183b8 <__aeabi_fdiv+0x18>
   1848c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18490:	ea92 0f0c 	teq	r2, ip
   18494:	d108      	bne.n	184a8 <__aeabi_fdiv+0x108>
   18496:	0242      	lsls	r2, r0, #9
   18498:	f47f af7d 	bne.w	18396 <__aeabi_fmul+0x15e>
   1849c:	ea93 0f0c 	teq	r3, ip
   184a0:	f47f af70 	bne.w	18384 <__aeabi_fmul+0x14c>
   184a4:	4608      	mov	r0, r1
   184a6:	e776      	b.n	18396 <__aeabi_fmul+0x15e>
   184a8:	ea93 0f0c 	teq	r3, ip
   184ac:	d104      	bne.n	184b8 <__aeabi_fdiv+0x118>
   184ae:	024b      	lsls	r3, r1, #9
   184b0:	f43f af4c 	beq.w	1834c <__aeabi_fmul+0x114>
   184b4:	4608      	mov	r0, r1
   184b6:	e76e      	b.n	18396 <__aeabi_fmul+0x15e>
   184b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   184bc:	bf18      	it	ne
   184be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   184c2:	d1ca      	bne.n	1845a <__aeabi_fdiv+0xba>
   184c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   184c8:	f47f af5c 	bne.w	18384 <__aeabi_fmul+0x14c>
   184cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   184d0:	f47f af3c 	bne.w	1834c <__aeabi_fmul+0x114>
   184d4:	e75f      	b.n	18396 <__aeabi_fmul+0x15e>
   184d6:	bf00      	nop

000184d8 <__gesf2>:
   184d8:	f04f 3cff 	mov.w	ip, #4294967295
   184dc:	e006      	b.n	184ec <__cmpsf2+0x4>
   184de:	bf00      	nop

000184e0 <__lesf2>:
   184e0:	f04f 0c01 	mov.w	ip, #1
   184e4:	e002      	b.n	184ec <__cmpsf2+0x4>
   184e6:	bf00      	nop

000184e8 <__cmpsf2>:
   184e8:	f04f 0c01 	mov.w	ip, #1
   184ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   184f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   184f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   184f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   184fc:	bf18      	it	ne
   184fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18502:	d011      	beq.n	18528 <__cmpsf2+0x40>
   18504:	b001      	add	sp, #4
   18506:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1850a:	bf18      	it	ne
   1850c:	ea90 0f01 	teqne	r0, r1
   18510:	bf58      	it	pl
   18512:	ebb2 0003 	subspl.w	r0, r2, r3
   18516:	bf88      	it	hi
   18518:	17c8      	asrhi	r0, r1, #31
   1851a:	bf38      	it	cc
   1851c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18520:	bf18      	it	ne
   18522:	f040 0001 	orrne.w	r0, r0, #1
   18526:	4770      	bx	lr
   18528:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1852c:	d102      	bne.n	18534 <__cmpsf2+0x4c>
   1852e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18532:	d105      	bne.n	18540 <__cmpsf2+0x58>
   18534:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18538:	d1e4      	bne.n	18504 <__cmpsf2+0x1c>
   1853a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1853e:	d0e1      	beq.n	18504 <__cmpsf2+0x1c>
   18540:	f85d 0b04 	ldr.w	r0, [sp], #4
   18544:	4770      	bx	lr
   18546:	bf00      	nop

00018548 <__aeabi_cfrcmple>:
   18548:	4684      	mov	ip, r0
   1854a:	4608      	mov	r0, r1
   1854c:	4661      	mov	r1, ip
   1854e:	e7ff      	b.n	18550 <__aeabi_cfcmpeq>

00018550 <__aeabi_cfcmpeq>:
   18550:	b50f      	push	{r0, r1, r2, r3, lr}
   18552:	f7ff ffc9 	bl	184e8 <__cmpsf2>
   18556:	2800      	cmp	r0, #0
   18558:	bf48      	it	mi
   1855a:	f110 0f00 	cmnmi.w	r0, #0
   1855e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018560 <__aeabi_fcmpeq>:
   18560:	f84d ed08 	str.w	lr, [sp, #-8]!
   18564:	f7ff fff4 	bl	18550 <__aeabi_cfcmpeq>
   18568:	bf0c      	ite	eq
   1856a:	2001      	moveq	r0, #1
   1856c:	2000      	movne	r0, #0
   1856e:	f85d fb08 	ldr.w	pc, [sp], #8
   18572:	bf00      	nop

00018574 <__aeabi_fcmplt>:
   18574:	f84d ed08 	str.w	lr, [sp, #-8]!
   18578:	f7ff ffea 	bl	18550 <__aeabi_cfcmpeq>
   1857c:	bf34      	ite	cc
   1857e:	2001      	movcc	r0, #1
   18580:	2000      	movcs	r0, #0
   18582:	f85d fb08 	ldr.w	pc, [sp], #8
   18586:	bf00      	nop

00018588 <__aeabi_fcmple>:
   18588:	f84d ed08 	str.w	lr, [sp, #-8]!
   1858c:	f7ff ffe0 	bl	18550 <__aeabi_cfcmpeq>
   18590:	bf94      	ite	ls
   18592:	2001      	movls	r0, #1
   18594:	2000      	movhi	r0, #0
   18596:	f85d fb08 	ldr.w	pc, [sp], #8
   1859a:	bf00      	nop

0001859c <__aeabi_fcmpge>:
   1859c:	f84d ed08 	str.w	lr, [sp, #-8]!
   185a0:	f7ff ffd2 	bl	18548 <__aeabi_cfrcmple>
   185a4:	bf94      	ite	ls
   185a6:	2001      	movls	r0, #1
   185a8:	2000      	movhi	r0, #0
   185aa:	f85d fb08 	ldr.w	pc, [sp], #8
   185ae:	bf00      	nop

000185b0 <__aeabi_fcmpgt>:
   185b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   185b4:	f7ff ffc8 	bl	18548 <__aeabi_cfrcmple>
   185b8:	bf34      	ite	cc
   185ba:	2001      	movcc	r0, #1
   185bc:	2000      	movcs	r0, #0
   185be:	f85d fb08 	ldr.w	pc, [sp], #8
   185c2:	bf00      	nop

000185c4 <__aeabi_f2iz>:
   185c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   185cc:	d30f      	bcc.n	185ee <__aeabi_f2iz+0x2a>
   185ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   185d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   185d6:	d90d      	bls.n	185f4 <__aeabi_f2iz+0x30>
   185d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   185dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   185e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   185e4:	fa23 f002 	lsr.w	r0, r3, r2
   185e8:	bf18      	it	ne
   185ea:	4240      	negne	r0, r0
   185ec:	4770      	bx	lr
   185ee:	f04f 0000 	mov.w	r0, #0
   185f2:	4770      	bx	lr
   185f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   185f8:	d101      	bne.n	185fe <__aeabi_f2iz+0x3a>
   185fa:	0242      	lsls	r2, r0, #9
   185fc:	d105      	bne.n	1860a <__aeabi_f2iz+0x46>
   185fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   18602:	bf08      	it	eq
   18604:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18608:	4770      	bx	lr
   1860a:	f04f 0000 	mov.w	r0, #0
   1860e:	4770      	bx	lr

00018610 <memcpy>:
   18610:	2a0f      	cmp	r2, #15
   18612:	b4f0      	push	{r4, r5, r6, r7}
   18614:	d945      	bls.n	186a2 <memcpy+0x92>
   18616:	ea40 0301 	orr.w	r3, r0, r1
   1861a:	079b      	lsls	r3, r3, #30
   1861c:	d145      	bne.n	186aa <memcpy+0x9a>
   1861e:	f1a2 0710 	sub.w	r7, r2, #16
   18622:	460c      	mov	r4, r1
   18624:	4603      	mov	r3, r0
   18626:	093f      	lsrs	r7, r7, #4
   18628:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   1862c:	3610      	adds	r6, #16
   1862e:	6825      	ldr	r5, [r4, #0]
   18630:	3310      	adds	r3, #16
   18632:	3410      	adds	r4, #16
   18634:	f843 5c10 	str.w	r5, [r3, #-16]
   18638:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   1863c:	f843 5c0c 	str.w	r5, [r3, #-12]
   18640:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18644:	f843 5c08 	str.w	r5, [r3, #-8]
   18648:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1864c:	f843 5c04 	str.w	r5, [r3, #-4]
   18650:	42b3      	cmp	r3, r6
   18652:	d1ec      	bne.n	1862e <memcpy+0x1e>
   18654:	1c7b      	adds	r3, r7, #1
   18656:	f002 0c0f 	and.w	ip, r2, #15
   1865a:	f1bc 0f03 	cmp.w	ip, #3
   1865e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18662:	4419      	add	r1, r3
   18664:	4403      	add	r3, r0
   18666:	d922      	bls.n	186ae <memcpy+0x9e>
   18668:	460e      	mov	r6, r1
   1866a:	461d      	mov	r5, r3
   1866c:	4664      	mov	r4, ip
   1866e:	f856 7b04 	ldr.w	r7, [r6], #4
   18672:	3c04      	subs	r4, #4
   18674:	2c03      	cmp	r4, #3
   18676:	f845 7b04 	str.w	r7, [r5], #4
   1867a:	d8f8      	bhi.n	1866e <memcpy+0x5e>
   1867c:	f1ac 0404 	sub.w	r4, ip, #4
   18680:	f002 0203 	and.w	r2, r2, #3
   18684:	f024 0403 	bic.w	r4, r4, #3
   18688:	3404      	adds	r4, #4
   1868a:	4423      	add	r3, r4
   1868c:	4421      	add	r1, r4
   1868e:	b132      	cbz	r2, 1869e <memcpy+0x8e>
   18690:	440a      	add	r2, r1
   18692:	f811 4b01 	ldrb.w	r4, [r1], #1
   18696:	4291      	cmp	r1, r2
   18698:	f803 4b01 	strb.w	r4, [r3], #1
   1869c:	d1f9      	bne.n	18692 <memcpy+0x82>
   1869e:	bcf0      	pop	{r4, r5, r6, r7}
   186a0:	4770      	bx	lr
   186a2:	4603      	mov	r3, r0
   186a4:	2a00      	cmp	r2, #0
   186a6:	d1f3      	bne.n	18690 <memcpy+0x80>
   186a8:	e7f9      	b.n	1869e <memcpy+0x8e>
   186aa:	4603      	mov	r3, r0
   186ac:	e7f0      	b.n	18690 <memcpy+0x80>
   186ae:	4662      	mov	r2, ip
   186b0:	2a00      	cmp	r2, #0
   186b2:	d1ed      	bne.n	18690 <memcpy+0x80>
   186b4:	e7f3      	b.n	1869e <memcpy+0x8e>
   186b6:	bf00      	nop

000186b8 <memset>:
   186b8:	0783      	lsls	r3, r0, #30
   186ba:	b4f0      	push	{r4, r5, r6, r7}
   186bc:	d048      	beq.n	18750 <memset+0x98>
   186be:	1e54      	subs	r4, r2, #1
   186c0:	2a00      	cmp	r2, #0
   186c2:	d043      	beq.n	1874c <memset+0x94>
   186c4:	b2cd      	uxtb	r5, r1
   186c6:	4603      	mov	r3, r0
   186c8:	e002      	b.n	186d0 <memset+0x18>
   186ca:	2c00      	cmp	r4, #0
   186cc:	d03e      	beq.n	1874c <memset+0x94>
   186ce:	4614      	mov	r4, r2
   186d0:	f803 5b01 	strb.w	r5, [r3], #1
   186d4:	f013 0f03 	tst.w	r3, #3
   186d8:	f104 32ff 	add.w	r2, r4, #4294967295
   186dc:	d1f5      	bne.n	186ca <memset+0x12>
   186de:	2c03      	cmp	r4, #3
   186e0:	d92d      	bls.n	1873e <memset+0x86>
   186e2:	b2cd      	uxtb	r5, r1
   186e4:	2c0f      	cmp	r4, #15
   186e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   186ea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   186ee:	d918      	bls.n	18722 <memset+0x6a>
   186f0:	f1a4 0710 	sub.w	r7, r4, #16
   186f4:	f103 0610 	add.w	r6, r3, #16
   186f8:	461a      	mov	r2, r3
   186fa:	093f      	lsrs	r7, r7, #4
   186fc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18700:	6015      	str	r5, [r2, #0]
   18702:	3210      	adds	r2, #16
   18704:	f842 5c0c 	str.w	r5, [r2, #-12]
   18708:	f842 5c08 	str.w	r5, [r2, #-8]
   1870c:	f842 5c04 	str.w	r5, [r2, #-4]
   18710:	42b2      	cmp	r2, r6
   18712:	d1f5      	bne.n	18700 <memset+0x48>
   18714:	f004 040f 	and.w	r4, r4, #15
   18718:	3701      	adds	r7, #1
   1871a:	2c03      	cmp	r4, #3
   1871c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18720:	d90d      	bls.n	1873e <memset+0x86>
   18722:	461e      	mov	r6, r3
   18724:	4622      	mov	r2, r4
   18726:	3a04      	subs	r2, #4
   18728:	f846 5b04 	str.w	r5, [r6], #4
   1872c:	2a03      	cmp	r2, #3
   1872e:	d8fa      	bhi.n	18726 <memset+0x6e>
   18730:	1f22      	subs	r2, r4, #4
   18732:	f004 0403 	and.w	r4, r4, #3
   18736:	f022 0203 	bic.w	r2, r2, #3
   1873a:	3204      	adds	r2, #4
   1873c:	4413      	add	r3, r2
   1873e:	b12c      	cbz	r4, 1874c <memset+0x94>
   18740:	b2c9      	uxtb	r1, r1
   18742:	441c      	add	r4, r3
   18744:	f803 1b01 	strb.w	r1, [r3], #1
   18748:	42a3      	cmp	r3, r4
   1874a:	d1fb      	bne.n	18744 <memset+0x8c>
   1874c:	bcf0      	pop	{r4, r5, r6, r7}
   1874e:	4770      	bx	lr
   18750:	4614      	mov	r4, r2
   18752:	4603      	mov	r3, r0
   18754:	e7c3      	b.n	186de <memset+0x26>
   18756:	bf00      	nop

00018758 <strncpy>:
   18758:	ea40 0301 	orr.w	r3, r0, r1
   1875c:	079b      	lsls	r3, r3, #30
   1875e:	b470      	push	{r4, r5, r6}
   18760:	d12b      	bne.n	187ba <strncpy+0x62>
   18762:	2a03      	cmp	r2, #3
   18764:	bf84      	itt	hi
   18766:	460b      	movhi	r3, r1
   18768:	4605      	movhi	r5, r0
   1876a:	d926      	bls.n	187ba <strncpy+0x62>
   1876c:	4619      	mov	r1, r3
   1876e:	f853 4b04 	ldr.w	r4, [r3], #4
   18772:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18776:	ea26 0604 	bic.w	r6, r6, r4
   1877a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1877e:	d105      	bne.n	1878c <strncpy+0x34>
   18780:	3a04      	subs	r2, #4
   18782:	f845 4b04 	str.w	r4, [r5], #4
   18786:	2a03      	cmp	r2, #3
   18788:	4619      	mov	r1, r3
   1878a:	d8ef      	bhi.n	1876c <strncpy+0x14>
   1878c:	b19a      	cbz	r2, 187b6 <strncpy+0x5e>
   1878e:	780c      	ldrb	r4, [r1, #0]
   18790:	3a01      	subs	r2, #1
   18792:	1c6b      	adds	r3, r5, #1
   18794:	702c      	strb	r4, [r5, #0]
   18796:	b13c      	cbz	r4, 187a8 <strncpy+0x50>
   18798:	b16a      	cbz	r2, 187b6 <strncpy+0x5e>
   1879a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1879e:	3a01      	subs	r2, #1
   187a0:	f803 4b01 	strb.w	r4, [r3], #1
   187a4:	2c00      	cmp	r4, #0
   187a6:	d1f7      	bne.n	18798 <strncpy+0x40>
   187a8:	b12a      	cbz	r2, 187b6 <strncpy+0x5e>
   187aa:	441a      	add	r2, r3
   187ac:	2100      	movs	r1, #0
   187ae:	f803 1b01 	strb.w	r1, [r3], #1
   187b2:	4293      	cmp	r3, r2
   187b4:	d1fb      	bne.n	187ae <strncpy+0x56>
   187b6:	bc70      	pop	{r4, r5, r6}
   187b8:	4770      	bx	lr
   187ba:	4605      	mov	r5, r0
   187bc:	e7e6      	b.n	1878c <strncpy+0x34>
   187be:	bf00      	nop

000187c0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   187c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   187c2:	e003      	b.n	187cc <LoopCopyDataInit>

000187c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   187c4:	4b0a      	ldr	r3, [pc, #40]	; (187f0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   187c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   187c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   187ca:	3104      	adds	r1, #4

000187cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187cc:	4809      	ldr	r0, [pc, #36]	; (187f4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   187ce:	4b0a      	ldr	r3, [pc, #40]	; (187f8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   187d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   187d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   187d4:	d3f6      	bcc.n	187c4 <CopyDataInit>
	ldr	r2, =_sbss
   187d6:	4a09      	ldr	r2, [pc, #36]	; (187fc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   187d8:	e002      	b.n	187e0 <LoopFillZerobss>

000187da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   187da:	2300      	movs	r3, #0
	str	r3, [r2], #4
   187dc:	f842 3b04 	str.w	r3, [r2], #4

000187e0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   187e0:	4b07      	ldr	r3, [pc, #28]	; (18800 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   187e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
   187e4:	d3f9      	bcc.n	187da <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   187e6:	f7e7 fda9 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   187ea:	f7fe fde7 	bl	173bc <main>
	bx	lr    
   187ee:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   187f0:	00018960 	.word	0x00018960
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   187f8:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   187fc:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18800:	2004c798 	.word	0x2004c798

00018804 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18804:	e7fe      	b.n	18804 <ADC1_2_IRQHandler>
   18806:	0000      	movs	r0, r0
   18808:	6c6c616d 	.word	0x6c6c616d
   1880c:	6620636f 	.word	0x6620636f
   18810:	6520726f 	.word	0x6520726f
   18814:	746e6576 	.word	0x746e6576
   18818:	61747320 	.word	0x61747320
   1881c:	66206b63 	.word	0x66206b63
   18820:	656c6961 	.word	0x656c6961
   18824:	000d0a64 	.word	0x000d0a64
   18828:	72656874 	.word	0x72656874
   1882c:	72612065 	.word	0x72612065
   18830:	65732065 	.word	0x65732065
   18834:	726f736e 	.word	0x726f736e
   18838:	73696d20 	.word	0x73696d20
   1883c:	676e6973 	.word	0x676e6973
   18840:	61656420 	.word	0x61656420
   18844:	6e696c64 	.word	0x6e696c64
   18848:	000d0a65 	.word	0x000d0a65
   1884c:	72656874 	.word	0x72656874
   18850:	72612065 	.word	0x72612065
   18854:	65732065 	.word	0x65732065
   18858:	6e617672 	.word	0x6e617672
   1885c:	6d207374 	.word	0x6d207374
   18860:	69737369 	.word	0x69737369
   18864:	6420676e 	.word	0x6420676e
   18868:	6c646165 	.word	0x6c646165
   1886c:	0a656e69 	.word	0x0a656e69
   18870:	0000000d 	.word	0x0000000d
   18874:	6f727245 	.word	0x6f727245
   18878:	54203a72 	.word	0x54203a72
   1887c:	20736968 	.word	0x20736968
   18880:	6e657665 	.word	0x6e657665
   18884:	61682074 	.word	0x61682074
   18888:	72612073 	.word	0x72612073
   1888c:	65766972 	.word	0x65766972
   18890:	0a212164 	.word	0x0a212164
   18894:	0000000d 	.word	0x0000000d
   18898:	454c4449 	.word	0x454c4449
   1889c:	00000000 	.word	0x00000000

000188a0 <ulKernelPriority>:
   188a0:	0000007f                                ....

000188a4 <heapSTRUCT_SIZE>:
   188a4:	00010010                                         ..

000188a6 <version>:
   188a6:	3d5a0001                                         ..

000188a8 <utm_east0>:
   188a8:	00093d5a                                Z=..

000188ac <utm_north0>:
   188ac:	005875e6                                .uX.

000188b0 <climb_pgain>:
   188b0:	bcf5c28f                                ....

000188b4 <climb_igain>:
   188b4:	3dcccccd                                ...=

000188b8 <level_gaz>:
   188b8:	3e9eb852                                R..>

000188bc <nav_east0>:
   188bc:	00093d5a                                Z=..

000188c0 <nav_north0>:
   188c0:	005875e6                                .uX.

000188c4 <nb_waypoint>:
   188c4:	00000007 33323130 37363534 42413938     ....0123456789AB
   188d4:	46454443                                CDEF

000188d8 <failsafe>:
	...
   188ec:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   188fc:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   1890c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   1891c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   1892c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1893c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   1894c:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   1895c:	00746e61                                ant.
